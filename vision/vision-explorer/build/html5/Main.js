(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var haxe_ui_backend_ComponentSurface = function() {
};
$hxClasses["haxe.ui.backend.ComponentSurface"] = haxe_ui_backend_ComponentSurface;
haxe_ui_backend_ComponentSurface.__name__ = "haxe.ui.backend.ComponentSurface";
haxe_ui_backend_ComponentSurface.prototype = {
	__class__: haxe_ui_backend_ComponentSurface
};
var haxe_ui_core_ComponentCommon = function() {
	haxe_ui_backend_ComponentSurface.call(this);
};
$hxClasses["haxe.ui.core.ComponentCommon"] = haxe_ui_core_ComponentCommon;
haxe_ui_core_ComponentCommon.__name__ = "haxe.ui.core.ComponentCommon";
haxe_ui_core_ComponentCommon.__super__ = haxe_ui_backend_ComponentSurface;
haxe_ui_core_ComponentCommon.prototype = $extend(haxe_ui_backend_ComponentSurface.prototype,{
	getTextDisplay: function() {
		return null;
	}
	,hasTextDisplay: function() {
		return false;
	}
	,getTextInput: function() {
		return null;
	}
	,hasTextInput: function() {
		return false;
	}
	,getImageDisplay: function() {
		return null;
	}
	,hasImageDisplay: function() {
		return false;
	}
	,__class__: haxe_ui_core_ComponentCommon
});
var haxe_ui_core_IClonable = function() { };
$hxClasses["haxe.ui.core.IClonable"] = haxe_ui_core_IClonable;
haxe_ui_core_IClonable.__name__ = "haxe.ui.core.IClonable";
haxe_ui_core_IClonable.__isInterface__ = true;
haxe_ui_core_IClonable.prototype = {
	cloneComponent: null
	,self: null
	,postCloneComponent: null
	,__class__: haxe_ui_core_IClonable
};
var haxe_ui_core_ComponentContainer = function() {
	this._id = null;
	this._style = null;
	this._layoutLocked = false;
	this._layout = null;
	this._ready = false;
	this.parentComponent = null;
	haxe_ui_core_ComponentCommon.call(this);
	this.behaviours = new haxe_ui_behaviours_Behaviours(js_Boot.__cast(this , haxe_ui_core_Component));
};
$hxClasses["haxe.ui.core.ComponentContainer"] = haxe_ui_core_ComponentContainer;
haxe_ui_core_ComponentContainer.__name__ = "haxe.ui.core.ComponentContainer";
haxe_ui_core_ComponentContainer.__interfaces__ = [haxe_ui_core_IClonable];
haxe_ui_core_ComponentContainer.__super__ = haxe_ui_core_ComponentCommon;
haxe_ui_core_ComponentContainer.prototype = $extend(haxe_ui_core_ComponentCommon.prototype,{
	behaviours: null
	,parentComponent: null
	,dispatch: function(event) {
	}
	,_ready: null
	,isReady: null
	,get_isReady: function() {
		return this._ready;
	}
	,_children: null
	,childComponents: null
	,get_childComponents: function() {
		if(this._children == null) {
			return [];
		}
		return this._children;
	}
	,registerBehaviours: function() {
		this.behaviours.register("disabled",haxe_ui_core_ComponentDisabledBehaviour);
		this.behaviours.register("tooltip",haxe_ui_core_ComponentToolTipBehaviour,null);
		this.behaviours.register("tooltipRenderer",haxe_ui_core_ComponentToolTipRendererBehaviour,null);
		this.behaviours.register("text",haxe_ui_core_ComponentTextBehaviour);
		this.behaviours.register("value",haxe_ui_core_ComponentValueBehaviour);
	}
	,addComponent: function(child) {
		return null;
	}
	,addComponentAt: function(child,index) {
		return null;
	}
	,removeComponent: function(child,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		return null;
	}
	,removeComponentAt: function(index,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		return null;
	}
	,moveComponentToBack: function() {
		if(this.parentComponent == null || this.parentComponent.get_numComponents() <= 1) {
			return;
		}
		this.parentComponent.setComponentIndex(this,0);
	}
	,moveComponentBackward: function() {
		if(this.parentComponent == null || this.parentComponent.get_numComponents() <= 1) {
			return;
		}
		var index = this.parentComponent.getComponentIndex(this);
		if(index == 0) {
			return;
		}
		this.parentComponent.setComponentIndex(this,index - 1);
	}
	,moveComponentToFront: function() {
		if(this.parentComponent == null || this.parentComponent.get_numComponents() <= 1) {
			return;
		}
		this.parentComponent.setComponentIndex(this,this.parentComponent.get_numComponents() - 1);
	}
	,moveComponentFrontward: function() {
		if(this.parentComponent == null || this.parentComponent.get_numComponents() <= 1) {
			return;
		}
		var index = this.parentComponent.getComponentIndex(this);
		if(index == this.parentComponent.get_numComponents() - 1) {
			return;
		}
		this.parentComponent.setComponentIndex(this,index + 1);
	}
	,bottomComponent: null
	,get_bottomComponent: function() {
		if(this._children == null || this._children.length == 0) {
			return null;
		}
		return this._children[0];
	}
	,topComponent: null
	,get_topComponent: function() {
		if(this._children == null || this._children.length == 0) {
			return null;
		}
		return this._children[this._children.length - 1];
	}
	,postCloneComponent: function(c) {
	}
	,_layout: null
	,_layoutLocked: null
	,_style: null
	,_id: null
	,get_id: function() {
		return this._id;
	}
	,set_id: function(value) {
		if(this._id != value) {
			this._id = value;
		}
		return this._id;
	}
	,get_disabled: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("disabled"));
	}
	,set_disabled: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("disabled",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"disabled"));
		return value;
	}
	,get_tooltip: function() {
		return this.behaviours.getDynamic("tooltip");
	}
	,set_tooltip: function(value) {
		this.behaviours.setDynamic("tooltip",value);
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"tooltip"));
		return value;
	}
	,get_tooltipRenderer: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toComponent(this.behaviours.get("tooltipRenderer"));
	}
	,set_tooltipRenderer: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("tooltipRenderer",haxe_ui_util_Variant.fromComponent(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"tooltipRenderer"));
		return value;
	}
	,get_text: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("text"));
	}
	,set_text: function(value) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			if(_g.c == String) {
				if(value != null && value.indexOf("{{") != -1 && value.indexOf("}}") != -1) {
					haxe_ui_locale_LocaleManager.get_instance().registerComponent(this,"text",null,value);
					return value;
				}
			}
		}
		this.behaviours.set("text",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"text"));
		return value;
	}
	,get_value: function() {
		return this.behaviours.getDynamic("value");
	}
	,set_value: function(value) {
		this.behaviours.setDynamic("value",value);
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"value"));
		return value;
	}
	,cloneComponent: function() {
		var c = this.self();
		if(this.get_id() != null) {
			c.set_id(this.get_id());
		}
		c.set_disabled(this.get_disabled());
		if(this.get_tooltip() != null) {
			c.set_tooltip(this.get_tooltip());
		}
		if(this.get_tooltipRenderer() != null) {
			c.set_tooltipRenderer(this.get_tooltipRenderer());
		}
		if(this.get_text() != null) {
			c.set_text(this.get_text());
		}
		if(this.get_value() != null) {
			c.set_value(this.get_value());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_core_ComponentContainer();
	}
	,__class__: haxe_ui_core_ComponentContainer
	,__properties__: {set_value:"set_value",get_value:"get_value",set_text:"set_text",get_text:"get_text",set_tooltipRenderer:"set_tooltipRenderer",get_tooltipRenderer:"get_tooltipRenderer",set_tooltip:"set_tooltip",get_tooltip:"get_tooltip",set_disabled:"set_disabled",get_disabled:"get_disabled",set_id:"set_id",get_id:"get_id",get_topComponent:"get_topComponent",get_bottomComponent:"get_bottomComponent",get_childComponents:"get_childComponents",get_isReady:"get_isReady"}
});
var haxe_ui_core_ComponentEvents = function() {
	this._pausedEvents = null;
	this._interactivityDisabledCounter = 0;
	this._interactivityDisabled = false;
	this._internalEventsClass = null;
	this._internalEvents = null;
	haxe_ui_core_ComponentContainer.call(this);
};
$hxClasses["haxe.ui.core.ComponentEvents"] = haxe_ui_core_ComponentEvents;
haxe_ui_core_ComponentEvents.__name__ = "haxe.ui.core.ComponentEvents";
haxe_ui_core_ComponentEvents.__super__ = haxe_ui_core_ComponentContainer;
haxe_ui_core_ComponentEvents.prototype = $extend(haxe_ui_core_ComponentContainer.prototype,{
	_internalEvents: null
	,_internalEventsClass: null
	,registerInternalEvents: function(eventsClass,reregister) {
		if(reregister == null) {
			reregister = false;
		}
		if(this._internalEvents == null && eventsClass != null) {
			this._internalEvents = Type.createInstance(eventsClass,[this]);
			this._internalEvents.register();
		}
		if(reregister == true && this._internalEvents != null) {
			this._internalEvents.register();
		}
	}
	,unregisterInternalEvents: function() {
		if(this._internalEvents == null) {
			return;
		}
		this._internalEvents.unregister();
		this._internalEvents = null;
	}
	,__events: null
	,registerEvent: function(type,listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		if((js_Boot.__cast(this , haxe_ui_core_Component)).classes.indexOf(":mobile") != -1 && (type == "mouseover" || type == "mouseout")) {
			return;
		}
		if(this.get_disabled() == true && this.isInteractiveEvent(type) == true) {
			if(this._disabledEvents == null) {
				this._disabledEvents = new haxe_ui_util_EventMap();
			}
			this._disabledEvents.add(type,listener,priority);
			return;
		}
		if(this.__events == null) {
			this.__events = new haxe_ui_util_EventMap();
		}
		if(this.__events.add(type,listener,priority) == true) {
			this.mapEvent(type,$bind(this,this._onMappedEvent));
		}
	}
	,hasEvent: function(type,listener) {
		if(this.__events == null) {
			return false;
		}
		return this.__events.contains(type,listener);
	}
	,unregisterEvent: function(type,listener) {
		if(this._disabledEvents != null && !this._interactivityDisabled) {
			this._disabledEvents.remove(type,listener);
		}
		if(this.__events != null) {
			if(this.__events.remove(type,listener) == true) {
				this.unmapEvent(type,$bind(this,this._onMappedEvent));
			}
		}
	}
	,dispatch: function(event) {
		if(event != null) {
			if(this.__events != null) {
				this.__events.invoke(event.type,event,js_Boot.__cast(this , haxe_ui_core_Component));
			}
			if(event.bubble == true && event.canceled == false && this.parentComponent != null) {
				this.parentComponent.dispatch(event);
			}
		}
	}
	,dispatchRecursively: function(event) {
		this.dispatch(event);
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.dispatchRecursively(event);
		}
	}
	,dispatchRecursivelyWhen: function(event,condition) {
		if(condition(this) == true) {
			this.dispatch(event);
		}
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(condition(child) == true) {
				child.dispatchRecursivelyWhen(event,condition);
			}
		}
	}
	,_onMappedEvent: function(event) {
		this.dispatch(event);
	}
	,_disabledEvents: null
	,isInteractiveEvent: function(type) {
		return haxe_ui_core_ComponentEvents.INTERACTIVE_EVENTS.indexOf(type) != -1;
	}
	,disableInteractiveEvents: function(disable) {
		if(disable == true) {
			if(this.__events != null) {
				var eventType = this.__events.keys();
				while(eventType.hasNext()) {
					var eventType1 = eventType.next();
					if(!this.isInteractiveEvent(eventType1)) {
						continue;
					}
					var listeners = this.__events.listeners(eventType1);
					if(listeners != null) {
						var listener = listeners.copy().iterator();
						while(listener.hasNext()) {
							var listener1 = listener.next();
							if(this._disabledEvents == null) {
								this._disabledEvents = new haxe_ui_util_EventMap();
							}
							this._disabledEvents.add(eventType1,haxe_ui_util_Listener.toFunc(listener1));
							this.unregisterEvent(eventType1,haxe_ui_util_Listener.toFunc(listener1));
						}
					}
				}
			}
		} else if(this._disabledEvents != null) {
			var eventType = this._disabledEvents.keys();
			while(eventType.hasNext()) {
				var eventType1 = eventType.next();
				var listeners = this._disabledEvents.listeners(eventType1);
				if(listeners != null) {
					var listener = listeners.copy().iterator();
					while(listener.hasNext()) {
						var listener1 = listener.next();
						this.registerEvent(eventType1,haxe_ui_util_Listener.toFunc(listener1));
					}
				}
			}
			this._disabledEvents = null;
		}
	}
	,_interactivityDisabled: null
	,_interactivityDisabledCounter: null
	,disableInteractivity: function(disable,recursive,updateStyle,force) {
		if(force == null) {
			force = false;
		}
		if(updateStyle == null) {
			updateStyle = false;
		}
		if(recursive == null) {
			recursive = true;
		}
		if(force == true) {
			this._interactivityDisabledCounter = 0;
		}
		if(disable == true) {
			this._interactivityDisabledCounter++;
		} else {
			this._interactivityDisabledCounter--;
		}
		if(this._interactivityDisabledCounter > 0 && this._interactivityDisabled == false) {
			this._interactivityDisabled = true;
			if(updateStyle == true) {
				(js_Boot.__cast(this , haxe_ui_core_Component)).swapClass(":disabled",":hover");
			}
			this.disableInteractiveEvents(true);
			this.dispatch(new haxe_ui_events_UIEvent("disabled"));
		} else if(this._interactivityDisabledCounter < 1 && this._interactivityDisabled == true) {
			this._interactivityDisabled = false;
			if(updateStyle == true) {
				(js_Boot.__cast(this , haxe_ui_core_Component)).removeClass(":disabled");
			}
			this.disableInteractiveEvents(false);
			this.dispatch(new haxe_ui_events_UIEvent("enabled"));
		}
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.disableInteractivity(disable,recursive,updateStyle);
			}
		}
	}
	,unregisterEvents: function() {
		if(this.__events != null) {
			var copy = [];
			var eventType = this.__events.keys();
			while(eventType.hasNext()) {
				var eventType1 = eventType.next();
				copy.push(eventType1);
			}
			var _g = 0;
			while(_g < copy.length) {
				var eventType = copy[_g];
				++_g;
				var listeners = this.__events.listeners(eventType);
				if(listeners != null) {
					var listener = listeners.iterator();
					while(listener.hasNext()) {
						var listener1 = listener.next();
						if(listener1 != null) {
							if(this.__events.remove(eventType,haxe_ui_util_Listener.toFunc(listener1)) == true) {
								this.unmapEvent(eventType,$bind(this,this._onMappedEvent));
							}
						}
					}
				}
			}
		}
	}
	,_pausedEvents: null
	,pauseEvent: function(type,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(this.__events == null || this.__events.contains(type) == false) {
			return;
		}
		if(this._pausedEvents == null) {
			this._pausedEvents = new haxe_ds_StringMap();
		}
		var pausedList = this._pausedEvents.h[type];
		if(pausedList == null) {
			pausedList = [];
			this._pausedEvents.h[type] = pausedList;
		}
		var listeners = this.__events.listeners(type).copy();
		var l = listeners.iterator();
		while(l.hasNext()) {
			var l1 = l.next();
			pausedList.push(haxe_ui_util_Listener.toFunc(l1));
			this.unregisterEvent(type,haxe_ui_util_Listener.toFunc(l1));
		}
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.pauseEvent(type,recursive);
			}
		}
	}
	,resumeEvent: function(type,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		var _gthis = this;
		if(this.__events == null) {
			return;
		}
		if(this._pausedEvents == null) {
			return;
		}
		if(Object.prototype.hasOwnProperty.call(this._pausedEvents.h,type) == false) {
			return;
		}
		haxe_ui_Toolkit.callLater(function() {
			var pausedList = _gthis._pausedEvents.h[type];
			var _g = 0;
			while(_g < pausedList.length) {
				var l = pausedList[_g];
				++_g;
				_gthis.registerEvent(type,l);
			}
			var _this = _gthis._pausedEvents;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
		});
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.resumeEvent(type,recursive);
			}
		}
	}
	,mapEvent: function(type,listener) {
	}
	,unmapEvent: function(type,listener) {
	}
	,registerBehaviours: function() {
		haxe_ui_core_ComponentContainer.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_ComponentContainer.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_core_ComponentEvents();
	}
	,__class__: haxe_ui_core_ComponentEvents
});
var haxe_ui_core_ComponentValidation = function() {
	this._depth = -1;
	this._invalidateCount = 0;
	this._isDisposed = false;
	this._isInitialized = false;
	this._isValidating = false;
	this._isAllInvalid = false;
	this._delayedInvalidationFlags = new haxe_ds_StringMap();
	this._invalidationFlags = new haxe_ds_StringMap();
	haxe_ui_core_ComponentEvents.call(this);
};
$hxClasses["haxe.ui.core.ComponentValidation"] = haxe_ui_core_ComponentValidation;
haxe_ui_core_ComponentValidation.__name__ = "haxe.ui.core.ComponentValidation";
haxe_ui_core_ComponentValidation.__super__ = haxe_ui_core_ComponentEvents;
haxe_ui_core_ComponentValidation.prototype = $extend(haxe_ui_core_ComponentEvents.prototype,{
	_invalidationFlags: null
	,_delayedInvalidationFlags: null
	,_isAllInvalid: null
	,_isValidating: null
	,_isInitialized: null
	,_isDisposed: null
	,_invalidateCount: null
	,_depth: null
	,get_depth: function() {
		return this._depth;
	}
	,set_depth: function(value) {
		if(this._depth == value) {
			return value;
		}
		this._depth = value;
		return value;
	}
	,isComponentInvalid: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		if(this._isAllInvalid == true) {
			return true;
		}
		if(flag == "all") {
			var h = this._invalidationFlags.h;
			var value_h = h;
			var value_keys = Object.keys(h);
			var value_length = value_keys.length;
			var value_current = 0;
			while(value_current < value_length) {
				var value = value_h[value_keys[value_current++]];
				return true;
			}
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag);
	}
	,invalidateComponent: function(flag,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(flag == null) {
			flag = "all";
		}
		if(this._ready == false) {
			return;
		}
		var isAlreadyInvalid = this.isComponentInvalid(flag);
		var isAlreadyDelayedInvalid = false;
		if(this._isValidating == true) {
			var h = this._delayedInvalidationFlags.h;
			var value_h = h;
			var value_keys = Object.keys(h);
			var value_length = value_keys.length;
			var value_current = 0;
			while(value_current < value_length) {
				var value = value_h[value_keys[value_current++]];
				isAlreadyDelayedInvalid = true;
				break;
			}
		}
		if(flag == "all") {
			if(this._isValidating == true) {
				this._delayedInvalidationFlags.h["all"] = true;
			} else {
				this._isAllInvalid = true;
			}
		} else if(this._isValidating == true) {
			this._delayedInvalidationFlags.h[flag] = true;
		} else if(flag != "all" && !Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag)) {
			this._invalidationFlags.h[flag] = true;
		}
		if(this._isValidating == true) {
			if(isAlreadyDelayedInvalid == true) {
				return;
			}
			this._invalidateCount++;
			if(this._invalidateCount >= 10) {
				throw haxe_Exception.thrown("The validation queue returned too many times during validation. This may be an infinite loop. Try to avoid doing anything that calls invalidate() during validation.");
			}
			haxe_ui_validation_ValidationManager.get_instance().add(js_Boot.__cast(this , haxe_ui_core_Component));
			return;
		} else if(isAlreadyInvalid == true) {
			return;
		}
		this._invalidateCount = 0;
		haxe_ui_validation_ValidationManager.get_instance().add(js_Boot.__cast(this , haxe_ui_core_Component));
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.invalidateComponent(flag,recursive);
			}
		}
	}
	,invalidateComponentData: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		this.invalidateComponent("data",recursive);
	}
	,invalidateComponentLayout: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(this._layout == null || this._layoutLocked == true) {
			return;
		}
		this.invalidateComponent("layout",recursive);
	}
	,invalidateComponentPosition: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		this.invalidateComponent("position",recursive);
	}
	,invalidateComponentDisplay: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		this.invalidateComponent("display",recursive);
	}
	,invalidateComponentStyle: function(force,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(force == null) {
			force = false;
		}
		this.invalidateComponent("style",recursive);
		if(force == true) {
			this._style = null;
		}
	}
	,validateComponent: function(nextFrame) {
		if(nextFrame == null) {
			nextFrame = true;
		}
		if(this._ready == false || this._isDisposed == true || this._isValidating == true || this.isComponentInvalid() == false) {
			return;
		}
		var isInitialized = this._isInitialized;
		if(isInitialized == false) {
			this.initializeComponent();
		}
		this._isValidating = true;
		this.validateComponentInternal(nextFrame);
		this.validateInitialSize(isInitialized);
		this._invalidationFlags.h = Object.create(null);
		this._isAllInvalid = false;
		var h = this._delayedInvalidationFlags.h;
		var flag_h = h;
		var flag_keys = Object.keys(h);
		var flag_length = flag_keys.length;
		var flag_current = 0;
		while(flag_current < flag_length) {
			var flag = flag_keys[flag_current++];
			if(flag == "all") {
				this._isAllInvalid = true;
			} else {
				this._invalidationFlags.h[flag] = true;
			}
		}
		this._delayedInvalidationFlags.h = Object.create(null);
		this._isValidating = false;
	}
	,validateNow: function() {
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.validateNow();
		}
		this.invalidateComponent();
		this.syncComponentValidation(false);
	}
	,syncComponentValidation: function(nextFrame) {
		if(nextFrame == null) {
			nextFrame = true;
		}
		var count = 0;
		while(this.isComponentInvalid()) {
			this.validateComponent(nextFrame);
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.syncComponentValidation(nextFrame);
			}
			if(++count >= 10) {
				if(this._isDisposed) {
					var c = js_Boot.getClass(this);
					haxe_Log.trace("There was a problem validating this component as it has already been destroyed (" + c.__name__ + "#" + this.get_id() + ")",{ fileName : "haxe/ui/core/ComponentValidation.hx", lineNumber : 232, className : "haxe.ui.core.ComponentValidation", methodName : "syncComponentValidation"});
					var c1 = js_Boot.getClass(this);
					throw haxe_Exception.thrown("There was a problem validating this component as it has already been destroyed (" + c1.__name__ + "#" + this.get_id() + ")");
				} else {
					var c2 = js_Boot.getClass(this);
					haxe_Log.trace("The syncValidation returned too many times during validation. This may be an infinite loop. Try to avoid doing anything that calls invalidate() during validation (" + c2.__name__ + "#" + this.get_id() + ").",{ fileName : "haxe/ui/core/ComponentValidation.hx", lineNumber : 237, className : "haxe.ui.core.ComponentValidation", methodName : "syncComponentValidation"});
					var c3 = js_Boot.getClass(this);
					throw haxe_Exception.thrown("The syncValidation returned too many times during validation. This may be an infinite loop. Try to avoid doing anything that calls invalidate() during validation (" + c3.__name__ + "#" + this.get_id() + ").");
				}
			}
		}
	}
	,validateComponentInternal: function(nextFrame) {
		if(nextFrame == null) {
			nextFrame = true;
		}
		var dataInvalid = this.isComponentInvalid("data");
		var styleInvalid = this.isComponentInvalid("style");
		var textDisplayInvalid = this.isComponentInvalid("textDisplay") && this.hasTextDisplay();
		var textInputInvalid = this.isComponentInvalid("textInput") && this.hasTextInput();
		var imageDisplayInvalid = this.isComponentInvalid("imageDisplay") && this.hasImageDisplay();
		var positionInvalid = this.isComponentInvalid("position");
		var displayInvalid = this.isComponentInvalid("display");
		var layoutInvalid = this.isComponentInvalid("layout") && this._layoutLocked == false;
		if(dataInvalid) {
			this.validateComponentData();
		}
		if(styleInvalid) {
			this.validateComponentStyle();
		}
		if(textDisplayInvalid) {
			this.getTextDisplay().validateComponent();
		}
		if(textInputInvalid) {
			this.getTextInput().validateComponent();
		}
		if(imageDisplayInvalid) {
			this.getImageDisplay().validateComponent();
		}
		if(positionInvalid) {
			this.validateComponentPosition();
		}
		if(layoutInvalid) {
			if(this.validateComponentLayout()) {
				displayInvalid = true;
			}
		}
		if(displayInvalid || styleInvalid) {
			haxe_ui_validation_ValidationManager.get_instance().addDisplay(js_Boot.__cast(this , haxe_ui_core_Component),nextFrame);
		}
	}
	,initializeComponent: function() {
	}
	,validateInitialSize: function(isInitialized) {
	}
	,validateComponentData: function() {
	}
	,validateComponentLayout: function() {
		return false;
	}
	,validateComponentStyle: function() {
	}
	,validateComponentPosition: function() {
	}
	,registerBehaviours: function() {
		haxe_ui_core_ComponentEvents.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_ComponentEvents.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_core_ComponentValidation();
	}
	,__class__: haxe_ui_core_ComponentValidation
	,__properties__: $extend(haxe_ui_core_ComponentEvents.prototype.__properties__,{set_depth:"set_depth",get_depth:"get_depth"})
});
var haxe_ui_core_ComponentLayout = function() {
	haxe_ui_core_ComponentValidation.call(this);
};
$hxClasses["haxe.ui.core.ComponentLayout"] = haxe_ui_core_ComponentLayout;
haxe_ui_core_ComponentLayout.__name__ = "haxe.ui.core.ComponentLayout";
haxe_ui_core_ComponentLayout.__super__ = haxe_ui_core_ComponentValidation;
haxe_ui_core_ComponentLayout.prototype = $extend(haxe_ui_core_ComponentValidation.prototype,{
	get_style: function() {
		return this._style;
	}
	,set_style: function(value) {
		this._style = value;
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_core_ComponentValidation.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_ComponentValidation.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_core_ComponentLayout();
	}
	,__class__: haxe_ui_core_ComponentLayout
	,__properties__: $extend(haxe_ui_core_ComponentValidation.prototype.__properties__,{set_style:"set_style",get_style:"get_style"})
});
var haxe_ui_core_ComponentBounds = function() {
	this._componentClipRect = null;
	this._top = 0;
	this._left = 0;
	this._hasScreen = null;
	this._cachedPercentHeight = null;
	this._cachedPercentWidth = null;
	haxe_ui_core_ComponentLayout.call(this);
};
$hxClasses["haxe.ui.core.ComponentBounds"] = haxe_ui_core_ComponentBounds;
haxe_ui_core_ComponentBounds.__name__ = "haxe.ui.core.ComponentBounds";
haxe_ui_core_ComponentBounds.__super__ = haxe_ui_core_ComponentLayout;
haxe_ui_core_ComponentBounds.prototype = $extend(haxe_ui_core_ComponentLayout.prototype,{
	autoWidth: null
	,get_autoWidth: function() {
		if(this._percentWidth != null || this._width != null) {
			return false;
		}
		if(this.get_style() == null) {
			return true;
		}
		if(this.get_style().autoWidth == null) {
			return false;
		}
		return this.get_style().autoWidth;
	}
	,autoHeight: null
	,get_autoHeight: function() {
		if(this._percentHeight != null || this._height != null || this.get_style() == null) {
			return false;
		}
		if(this.get_style().autoHeight == null) {
			return false;
		}
		return this.get_style().autoHeight;
	}
	,resizeComponent: function(w,h) {
		var invalidate = false;
		if(w != null && this._componentWidth != w) {
			this._componentWidth = w;
			invalidate = true;
		}
		if(h != null && this._componentHeight != h) {
			this._componentHeight = h;
			invalidate = true;
		}
		if(invalidate == true && this.isComponentInvalid("layout") == false) {
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout",false);
			}
		}
	}
	,actualComponentWidth: null
	,get_actualComponentWidth: function() {
		return this.get_componentWidth() * haxe_ui_Toolkit.get_scaleX();
	}
	,actualComponentHeight: null
	,get_actualComponentHeight: function() {
		return this.get_componentHeight() * haxe_ui_Toolkit.get_scaleY();
	}
	,_componentWidth: null
	,get_componentWidth: function() {
		if(this._componentWidth == null) {
			return 0;
		}
		return this._componentWidth;
	}
	,set_componentWidth: function(value) {
		this.resizeComponent(value,null);
		return value;
	}
	,_componentHeight: null
	,get_componentHeight: function() {
		if(this._componentHeight == null) {
			return 0;
		}
		return this._componentHeight;
	}
	,set_componentHeight: function(value) {
		this.resizeComponent(null,value);
		return value;
	}
	,_percentWidth: null
	,get_percentWidth: function() {
		return this._percentWidth;
	}
	,set_percentWidth: function(value) {
		if(this._percentWidth == value) {
			return value;
		}
		this._percentWidth = value;
		if(this.parentComponent != null) {
			var _this = this.parentComponent;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout",false);
			}
		} else {
			haxe_ui_core_Screen.get_instance().resizeRootComponents();
		}
		return value;
	}
	,_percentHeight: null
	,get_percentHeight: function() {
		return this._percentHeight;
	}
	,set_percentHeight: function(value) {
		if(this._percentHeight == value) {
			return value;
		}
		this._percentHeight = value;
		if(this.parentComponent != null) {
			var _this = this.parentComponent;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout",false);
			}
		} else {
			haxe_ui_core_Screen.get_instance().resizeRootComponents();
		}
		return value;
	}
	,_cachedPercentWidth: null
	,_cachedPercentHeight: null
	,cachePercentSizes: function(clearExisting) {
		if(clearExisting == null) {
			clearExisting = true;
		}
		if(this._percentWidth != null) {
			this._cachedPercentWidth = this._percentWidth;
			if(clearExisting == true) {
				this._percentWidth = null;
			}
		}
		if(this._percentHeight != null) {
			this._cachedPercentHeight = this._percentHeight;
			if(clearExisting == true) {
				this._percentHeight = null;
			}
		}
	}
	,restorePercentSizes: function() {
		if(this._cachedPercentWidth != null) {
			this.set_percentWidth(this._cachedPercentWidth);
		}
		if(this._cachedPercentHeight != null) {
			this.set_percentHeight(this._cachedPercentHeight);
		}
	}
	,_width: null
	,set_width: function(value) {
		if(this._width == value) {
			return value;
		}
		this._width = value;
		this.set_componentWidth(value);
		return value;
	}
	,get_width: function() {
		var f = this.get_componentWidth();
		return f;
	}
	,_height: null
	,set_height: function(value) {
		if(this._height == value) {
			return value;
		}
		this._height = value;
		this.set_componentHeight(value);
		return value;
	}
	,get_height: function() {
		var f = this.get_componentHeight();
		return f;
	}
	,_actualWidth: null
	,_actualHeight: null
	,_hasScreen: null
	,hasScreen: null
	,get_hasScreen: function() {
		var p = this;
		while(p != null) {
			if(p._hasScreen == false) {
				return false;
			}
			p = p.parentComponent;
		}
		return true;
	}
	,hitTest: function(left,top,allowZeroSized) {
		if(allowZeroSized == null) {
			allowZeroSized = false;
		}
		if(this.get_hasScreen() == false) {
			return false;
		}
		left *= haxe_ui_Toolkit.get_scale();
		top *= haxe_ui_Toolkit.get_scale();
		var b = false;
		var sx = this.get_screenLeft();
		var sy = this.get_screenTop();
		var cx = 0;
		if(this.get_componentWidth() != null) {
			cx = this.get_actualComponentWidth();
		}
		var cy = 0;
		if(this.get_componentHeight() != null) {
			cy = this.get_actualComponentHeight();
		}
		if(allowZeroSized == true) {
			if(this.get_width() <= 0 || this.get_height() <= 0) {
				return true;
			}
		}
		if(left >= sx && left < sx + cx && top >= sy && top < sy + cy) {
			b = true;
		}
		return b;
	}
	,autoSize: function() {
		if(this._ready == false || this._layout == null) {
			return false;
		}
		return this._layout.autoSize();
	}
	,moveComponent: function(left,top) {
		var invalidate = false;
		if(left != null && this._left != left) {
			this._left = left;
			invalidate = true;
		}
		if(top != null && this._top != top) {
			this._top = top;
			invalidate = true;
		}
		if(invalidate == true && this.isComponentInvalid("position") == false) {
			this.invalidateComponent("position",false);
		}
	}
	,_left: null
	,get_left: function() {
		return this._left;
	}
	,set_left: function(value) {
		this.moveComponent(value,null);
		return value;
	}
	,_top: null
	,get_top: function() {
		return this._top;
	}
	,set_top: function(value) {
		this.moveComponent(null,value);
		return value;
	}
	,screenLeft: null
	,get_screenLeft: function() {
		var c = this;
		var xpos = 0;
		while(c != null) {
			var l = c.get_left();
			if(c.parentComponent != null) {
				l *= haxe_ui_Toolkit.get_scale();
			}
			xpos += l;
			if(c.get_componentClipRect() != null) {
				xpos -= c.get_componentClipRect().left * haxe_ui_Toolkit.get_scaleX();
			}
			c = c.parentComponent;
		}
		return xpos;
	}
	,screenTop: null
	,get_screenTop: function() {
		var c = this;
		var ypos = 0;
		while(c != null) {
			var t = c.get_top();
			if(c.parentComponent != null) {
				t *= haxe_ui_Toolkit.get_scale();
			}
			ypos += t;
			if(c.get_componentClipRect() != null) {
				ypos -= c.get_componentClipRect().top * haxe_ui_Toolkit.get_scaleY();
			}
			c = c.parentComponent;
		}
		return ypos;
	}
	,_componentClipRect: null
	,get_componentClipRect: function() {
		if(this.get_style() != null && this.get_style().clip != null && this.get_style().clip == true) {
			return new haxe_ui_geom_Rectangle(0,0,this.get_componentWidth(),this.get_componentHeight());
		}
		return this._componentClipRect;
	}
	,set_componentClipRect: function(value) {
		this._componentClipRect = value;
		this.invalidateComponent("display",false);
		return value;
	}
	,isComponentClipped: null
	,get_isComponentClipped: function() {
		return this.get_componentClipRect() != null;
	}
	,isComponentOffscreen: null
	,get_isComponentOffscreen: function() {
		if(this.get_width() == 0 && this.get_height() == 0) {
			return false;
		}
		var x = this.get_screenLeft();
		var y = this.get_screenTop();
		var w = this.get_width();
		var h = this.get_height();
		var thisRect = new haxe_ui_geom_Rectangle(x,y,w,h);
		var screenRect = new haxe_ui_geom_Rectangle(0,0,haxe_ui_core_Screen.get_instance().get_width(),haxe_ui_core_Screen.get_instance().get_height());
		return !screenRect.intersects(thisRect);
	}
	,registerBehaviours: function() {
		haxe_ui_core_ComponentLayout.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_ComponentLayout.prototype.cloneComponent.call(this);
		if(this.get_componentWidth() != null) {
			c.set_componentWidth(this.get_componentWidth());
		}
		if(this.get_componentHeight() != null) {
			c.set_componentHeight(this.get_componentHeight());
		}
		if(this.get_percentWidth() != null) {
			c.set_percentWidth(this.get_percentWidth());
		}
		if(this.get_percentHeight() != null) {
			c.set_percentHeight(this.get_percentHeight());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_core_ComponentBounds();
	}
	,__class__: haxe_ui_core_ComponentBounds
	,__properties__: $extend(haxe_ui_core_ComponentLayout.prototype.__properties__,{get_isComponentOffscreen:"get_isComponentOffscreen",get_isComponentClipped:"get_isComponentClipped",set_componentClipRect:"set_componentClipRect",get_componentClipRect:"get_componentClipRect",get_screenTop:"get_screenTop",get_screenLeft:"get_screenLeft",set_top:"set_top",get_top:"get_top",set_left:"set_left",get_left:"get_left",get_hasScreen:"get_hasScreen",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_percentHeight:"set_percentHeight",get_percentHeight:"get_percentHeight",set_percentWidth:"set_percentWidth",get_percentWidth:"get_percentWidth",set_componentHeight:"set_componentHeight",get_componentHeight:"get_componentHeight",set_componentWidth:"set_componentWidth",get_componentWidth:"get_componentWidth",get_actualComponentHeight:"get_actualComponentHeight",get_actualComponentWidth:"get_actualComponentWidth",get_autoHeight:"get_autoHeight",get_autoWidth:"get_autoWidth"})
});
var haxe_ui_backend_ComponentBase = function() {
	this._nativeClassName = null;
	this._nodeName = null;
	this._className = null;
	haxe_ui_core_ComponentBounds.call(this);
};
$hxClasses["haxe.ui.backend.ComponentBase"] = haxe_ui_backend_ComponentBase;
haxe_ui_backend_ComponentBase.__name__ = "haxe.ui.backend.ComponentBase";
haxe_ui_backend_ComponentBase.__super__ = haxe_ui_core_ComponentBounds;
haxe_ui_backend_ComponentBase.prototype = $extend(haxe_ui_core_ComponentBounds.prototype,{
	handleCreate: function(native) {
	}
	,handlePosition: function(left,top,style) {
	}
	,handleSize: function(width,height,style) {
	}
	,handleReady: function() {
	}
	,handleClipRect: function(value) {
	}
	,handleVisibility: function(show) {
	}
	,getComponentOffset: function() {
		return new haxe_ui_geom_Point(0,0);
	}
	,isNativeScroller: null
	,get_isNativeScroller: function() {
		return false;
	}
	,isScroller: null
	,get_isScroller: function() {
		return false;
	}
	,handleFrameworkProperty: function(id,value) {
	}
	,handleSetComponentIndex: function(child,index) {
	}
	,handleAddComponent: function(child) {
		return child;
	}
	,handleAddComponentAt: function(child,index) {
		return child;
	}
	,handleRemoveComponent: function(child,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		return child;
	}
	,handleRemoveComponentAt: function(index,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		return null;
	}
	,applyStyle: function(style) {
	}
	,mapEvent: function(type,listener) {
	}
	,unmapEvent: function(type,listener) {
	}
	,_textDisplay: null
	,createTextDisplay: function(text) {
		if(this._textDisplay == null) {
			this._textDisplay = new haxe_ui_core_TextDisplay();
			this._textDisplay.parentComponent = js_Boot.__cast(this , haxe_ui_core_Component);
		}
		if(text != null) {
			this._textDisplay.set_text(text);
		}
		return this._textDisplay;
	}
	,getTextDisplay: function() {
		return this.createTextDisplay();
	}
	,hasTextDisplay: function() {
		return this._textDisplay != null;
	}
	,_textInput: null
	,createTextInput: function(text) {
		if(this._textInput == null) {
			this._textInput = new haxe_ui_core_TextInput();
			this._textInput.parentComponent = js_Boot.__cast(this , haxe_ui_core_Component);
		}
		if(text != null) {
			this._textInput.set_text(text);
		}
		return this._textInput;
	}
	,getTextInput: function() {
		return this.createTextInput();
	}
	,hasTextInput: function() {
		return this._textInput != null;
	}
	,_imageDisplay: null
	,createImageDisplay: function() {
		if(this._imageDisplay == null) {
			this._imageDisplay = new haxe_ui_core_ImageDisplay();
			this._imageDisplay.parentComponent = js_Boot.__cast(this , haxe_ui_core_Component);
		}
		return this._imageDisplay;
	}
	,getImageDisplay: function() {
		return this.createImageDisplay();
	}
	,hasImageDisplay: function() {
		return this._imageDisplay != null;
	}
	,removeImageDisplay: function() {
		if(this._imageDisplay != null) {
			this._imageDisplay.dispose();
			this._imageDisplay = null;
		}
	}
	,handlePreReposition: function() {
	}
	,handlePostReposition: function() {
	}
	,getClassProperty: function(name) {
		var v = null;
		if(this._classProperties != null) {
			v = this._classProperties.h[name];
		}
		if(v == null) {
			var c = js_Boot.getClass(this);
			var c1 = c.__name__.toLowerCase() + "." + name;
			v = haxe_ui_Toolkit.properties.h[c1];
		}
		return v;
	}
	,_classProperties: null
	,setClassProperty: function(name,value) {
		if(this._classProperties == null) {
			this._classProperties = new haxe_ds_StringMap();
		}
		this._classProperties.h[name] = value;
	}
	,_hasNativeEntry: null
	,hasNativeEntry: null
	,get_hasNativeEntry: function() {
		if(this._hasNativeEntry == null) {
			this._hasNativeEntry = this.getNativeConfigProperty(".@id") != null;
		}
		return this._hasNativeEntry;
	}
	,getNativeConfigProperty: function(query,defaultValue) {
		query = "component[id=" + this.get_nativeClassName() + "]" + query;
		return haxe_ui_Toolkit.nativeConfig.query(query,defaultValue,this);
	}
	,getNativeConfigPropertyBool: function(query,defaultValue) {
		if(defaultValue == null) {
			defaultValue = false;
		}
		query = "component[id=" + this.get_nativeClassName() + "]" + query;
		return haxe_ui_Toolkit.nativeConfig.queryBool(query,defaultValue,this);
	}
	,getNativeConfigProperties: function(query) {
		if(query == null) {
			query = "";
		}
		query = "component[id=" + this.get_nativeClassName() + "]" + query;
		return haxe_ui_Toolkit.nativeConfig.queryValues(query,this);
	}
	,_className: null
	,className: null
	,get_className: function() {
		if(this._className != null) {
			return this._className;
		}
		var c = js_Boot.getClass(this);
		this._className = c.__name__;
		return this._className;
	}
	,_nodeName: null
	,nodeName: null
	,get_nodeName: function() {
		if(this._nodeName != null) {
			return this._nodeName;
		}
		this._nodeName = this.get_className().split(".").pop().toLowerCase();
		return this._nodeName;
	}
	,_nativeClassName: null
	,nativeClassName: null
	,get_nativeClassName: function() {
		if(this._nativeClassName != null) {
			return this._nativeClassName;
		}
		var r = js_Boot.getClass(this);
		while(r != null) {
			var c = r.__name__;
			var t = haxe_ui_Toolkit.nativeConfig.query("component[id=" + c + "].@class",null,this);
			if(t != null) {
				this._nativeClassName = c;
				break;
			}
			r = r.__super__;
			if(r == haxe_ui_core_Component) {
				break;
			}
		}
		if(this._nativeClassName == null) {
			this._nativeClassName = this.get_className();
		}
		return this._nativeClassName;
	}
	,registerBehaviours: function() {
		haxe_ui_core_ComponentBounds.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_ComponentBounds.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_backend_ComponentBase();
	}
	,__class__: haxe_ui_backend_ComponentBase
	,__properties__: $extend(haxe_ui_core_ComponentBounds.prototype.__properties__,{get_nativeClassName:"get_nativeClassName",get_nodeName:"get_nodeName",get_className:"get_className",get_hasNativeEntry:"get_hasNativeEntry",get_isScroller:"get_isScroller",get_isNativeScroller:"get_isNativeScroller"})
});
var haxe_ds_Map = {};
haxe_ds_Map.set = function(this1,key,value) {
	this1.set(key,value);
};
haxe_ds_Map.get = function(this1,key) {
	return this1.get(key);
};
haxe_ds_Map.exists = function(this1,key) {
	return this1.exists(key);
};
haxe_ds_Map.remove = function(this1,key) {
	return this1.remove(key);
};
haxe_ds_Map.keys = function(this1) {
	return this1.keys();
};
haxe_ds_Map.iterator = function(this1) {
	return this1.iterator();
};
haxe_ds_Map.keyValueIterator = function(this1) {
	return this1.keyValueIterator();
};
haxe_ds_Map.copy = function(this1) {
	return this1.copy();
};
haxe_ds_Map.toString = function(this1) {
	return this1.toString();
};
haxe_ds_Map.clear = function(this1) {
	this1.clear();
};
haxe_ds_Map.arrayWrite = function(this1,k,v) {
	this1.set(k,v);
	return v;
};
haxe_ds_Map.toStringMap = function(t) {
	return new haxe_ds_StringMap();
};
haxe_ds_Map.toIntMap = function(t) {
	return new haxe_ds_IntMap();
};
haxe_ds_Map.toEnumValueMapMap = function(t) {
	return new haxe_ds_EnumValueMap();
};
haxe_ds_Map.toObjectMap = function(t) {
	return new haxe_ds_ObjectMap();
};
haxe_ds_Map.fromStringMap = function(map) {
	return map;
};
haxe_ds_Map.fromIntMap = function(map) {
	return map;
};
haxe_ds_Map.fromObjectMap = function(map) {
	return map;
};
var haxe_ui_backend_ComponentImpl = function() {
	this._over = false;
	this._canvas = null;
	haxe_ui_backend_ComponentBase.call(this);
	this._eventMap = new haxe_ds_StringMap();
	if(haxe_ui_backend_ComponentImpl._mutationObserver == null) {
		haxe_ui_backend_ComponentImpl._mutationObserver = new MutationObserver(haxe_ui_backend_ComponentImpl.onMutationEvent);
		haxe_ui_backend_ComponentImpl._mutationObserver.observe(haxe_ui_core_Screen.get_instance().get_container(),{ childList : true});
	}
	if(window.document.styleSheets.length == 0) {
		var style = window.document.createElement("style");
		style.appendChild(window.document.createTextNode(""));
		window.document.head.appendChild(style);
	}
	if(haxe_ui_backend_ComponentImpl._stylesAdded == false) {
		haxe_ui_backend_ComponentImpl._stylesAdded = true;
		var sheet = haxe_ui_backend_html5_util_StyleSheetHelper.getValidStyleSheet();
		sheet.insertRule("#haxeui-container .haxeui-component, .haxeui-component:focus {\r\n                position: absolute;\r\n                box-sizing: border-box;\r\n                -webkit-touch-callout: none;\r\n                -webkit-user-select: none;\r\n                -khtml-user-select: none;\r\n                -moz-user-select: none;\r\n                -ms-user-select: none;\r\n                user-select: none;\r\n                -webkit-tap-highlight-color: transparent;\r\n                webkit-user-select;\r\n                outline: none !important;\r\n            }",sheet.cssRules.length);
		haxe_ui_core_Screen.get_instance().get_container().classList.add("haxeui-theme-" + haxe_ui_Toolkit.get_theme());
	}
};
$hxClasses["haxe.ui.backend.ComponentImpl"] = haxe_ui_backend_ComponentImpl;
haxe_ui_backend_ComponentImpl.__name__ = "haxe.ui.backend.ComponentImpl";
haxe_ui_backend_ComponentImpl._mutationObserver = null;
haxe_ui_backend_ComponentImpl.onMutationEvent = function(records,o) {
	var done = false;
	var _g = 0;
	while(_g < records.length) {
		var record = records[_g];
		++_g;
		var _g1 = 0;
		var _g2 = record.addedNodes.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var node = record.addedNodes.item(i);
			var c = haxe_ui_backend_ComponentImpl.elementToComponent.h[node.__id__];
			if(c != null) {
				c.recursiveReady();
			}
		}
		if(done == true) {
			break;
		}
	}
};
haxe_ui_backend_ComponentImpl.__super__ = haxe_ui_backend_ComponentBase;
haxe_ui_backend_ComponentImpl.prototype = $extend(haxe_ui_backend_ComponentBase.prototype,{
	element: null
	,_eventMap: null
	,get_isNativeScroller: function() {
		return false;
	}
	,recursiveReady: function() {
		haxe_ui_backend_ComponentImpl.elementToComponent.remove(this.element);
		var component = js_Boot.__cast(this , haxe_ui_core_Component);
		if(!(component._layout == null || component._layoutLocked == true)) {
			component.invalidateComponent("layout",false);
		}
		component.ready();
		var _g = 0;
		var _g1 = component._children == null ? [] : component._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.recursiveReady();
		}
	}
	,handleCreate: function(native) {
		if(this.get_isScroller()) {
			if(this.element == null) {
				this.element = window.document.createElement("div");
			}
			this.element.scrollTop = 0;
			this.element.scrollLeft = 0;
			this.element.classList.add("haxeui-component");
			haxe_ui_backend_ComponentImpl.elementToComponent.set(this.element,js_Boot.__cast(this , haxe_ui_core_Component));
			return;
		}
		var newElement = window.document.createElement("div");
		newElement.classList.add("haxeui-component");
		if(((this) instanceof haxe_ui_components_Image)) {
			newElement.style.boxSizing = "initial";
		}
		if(this.element != null) {
			var p = this.element.parentElement;
			if(p != null) {
				haxe_ui_backend_ComponentImpl.elementToComponent.remove(this.element);
				p.replaceChild(newElement,this.element);
			}
		}
		this.element = newElement;
		haxe_ui_backend_ComponentImpl.elementToComponent.set(this.element,js_Boot.__cast(this , haxe_ui_core_Component));
		this.remapEvents();
	}
	,remapEvents: function() {
		if(this._eventMap == null) {
			return;
		}
		var copy_h = Object.create(null);
		var h = this._eventMap.h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			var fn = this._eventMap.h[k];
			copy_h[k] = fn;
			this.unmapEvent(k,fn);
		}
		this._eventMap = new haxe_ds_StringMap();
		var h = copy_h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			this.mapEvent(k,copy_h[k]);
		}
	}
	,handlePosition: function(left,top,style) {
		if(this.element == null) {
			return;
		}
		if(left != null) {
			this.element.style.left = "" + left + "px";
		}
		if(top != null) {
			this.element.style.top = "" + top + "px";
		}
	}
	,handleSize: function(width,height,style) {
		if(width == null || height == null || width <= 0 || height <= 0) {
			return;
		}
		if(this.element == null) {
			return;
		}
		var c = js_Boot.__cast(this , haxe_ui_core_Component);
		var css = this.element.style;
		haxe_ui_backend_html5_StyleHelper.apply(this,width,height,style);
		var parent = c.parentComponent;
		if(parent != null && parent.element.style.borderWidth != null) {
			css.marginTop = "-" + parent.element.style.borderWidth;
			css.marginLeft = "-" + parent.element.style.borderWidth;
		} else if(parent != null) {
			css.marginTop = "";
			css.marginLeft = "";
		}
		var _g = 0;
		var _this = js_Boot.__cast(this , haxe_ui_core_Component);
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(style.borderLeftSize != null && style.borderLeftSize > 0) {
				child.element.style.marginLeft = "-" + style.borderLeftSize + "px";
			} else {
				child.element.style.marginLeft = "";
			}
			if(style.borderTopSize != null && style.borderTopSize > 0) {
				child.element.style.marginTop = "-" + style.borderTopSize + "px";
			} else {
				child.element.style.marginTop = "";
			}
		}
	}
	,handleReady: function() {
		if((js_Boot.__cast(this , haxe_ui_core_Component)).get_id() != null) {
			this.element.id = (js_Boot.__cast(this , haxe_ui_core_Component)).get_id();
		}
	}
	,handleFrameworkProperty: function(id,value) {
		if(id == "allowMouseInteraction") {
			if(value == true && this.element.style.getPropertyValue("pointer-events") != null) {
				this.element.style.removeProperty("pointer-events");
			} else if(this.element.style.getPropertyValue("pointer-events") != "none") {
				this.element.style.setProperty("pointer-events","none");
				this.setCursor(null);
			}
		}
	}
	,handleClipRect: function(value) {
		var c = js_Boot.__cast(this , haxe_ui_core_Component);
		var parent = c.parentComponent;
		value.toInts();
		if(value != null && parent != null) {
			var tmp = "rect(" + ("" + value.top + "px") + "," + ("" + value.get_right() + "px") + "," + ("" + value.get_bottom() + "px") + ",";
			this.element.style.clip = tmp + ("" + value.left + "px") + ")";
			var tmp = "" + (c.get_left() - value.left | 0) + "px";
			this.element.style.left = "" + tmp;
			var tmp = "" + (c.get_top() - value.top | 0) + "px";
			this.element.style.top = "" + tmp;
		} else {
			this.element.style.removeProperty("clip");
		}
	}
	,handleVisibility: function(show) {
		this.element.style.display = show == true ? "" : "none";
	}
	,createTextDisplay: function(text) {
		if(this._textDisplay == null) {
			haxe_ui_backend_ComponentBase.prototype.createTextDisplay.call(this,text);
			this.element.appendChild(this._textDisplay.element);
		}
		return this._textDisplay;
	}
	,createTextInput: function(text) {
		if(this._textInput == null) {
			haxe_ui_backend_ComponentBase.prototype.createTextInput.call(this,text);
			this.element.appendChild(this._textInput.element);
		}
		return this._textInput;
	}
	,createImageDisplay: function() {
		if(this._imageDisplay == null) {
			haxe_ui_backend_ComponentBase.prototype.createImageDisplay.call(this);
			this.element.appendChild(this._imageDisplay.element);
		}
		return this._imageDisplay;
	}
	,handleSetComponentIndex: function(child,index) {
		if(index == (this._children == null ? [] : this._children).length - 1) {
			this.element.appendChild(child.element);
		} else if(index == (this._children == null ? [] : this._children).indexOf(child) - 1) {
			var before = (this._children == null ? [] : this._children)[index];
			haxe_ui_backend_html5_HtmlUtils.insertBefore(before.element,child.element);
		} else {
			var before = (this._children == null ? [] : this._children)[index + 1];
			haxe_ui_backend_html5_HtmlUtils.insertBefore(before.element,child.element);
		}
	}
	,handleAddComponent: function(child) {
		this.element.appendChild(child.element);
		return child;
	}
	,handleAddComponentAt: function(child,index) {
		this.handleAddComponent(child);
		this.handleSetComponentIndex(child,index);
		return child;
	}
	,handleRemoveComponent: function(child,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		haxe_ui_backend_html5_HtmlUtils.removeElement(child.element);
		return child;
	}
	,handleRemoveComponentAt: function(index,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		var child = (js_Boot.__cast(this , haxe_ui_core_Component))._children[index];
		haxe_ui_backend_html5_HtmlUtils.removeElement(child.element);
		return child;
	}
	,applyStyle: function(style) {
		if(this.element == null) {
			return;
		}
		this.setCursor(style.cursor);
		if(style.filter != null) {
			if(((style.filter[0]) instanceof haxe_ui_filters_DropShadow)) {
				var dropShadow = style.filter[0];
				if(dropShadow.inner == false) {
					var tmp = "" + dropShadow.distance + "px " + (dropShadow.distance + 2) + "px " + (dropShadow.blurX - 1) + "px " + (dropShadow.blurY - 1) + "px ";
					var tmp1 = haxe_ui_backend_html5_HtmlUtils.rgba(dropShadow.color,dropShadow.alpha);
					this.element.style.boxShadow = tmp + tmp1;
				} else {
					var tmp = "inset " + dropShadow.distance + "px " + dropShadow.distance + "px " + dropShadow.blurX + "px 0px ";
					var tmp1 = haxe_ui_backend_html5_HtmlUtils.rgba(dropShadow.color,dropShadow.alpha);
					this.element.style.boxShadow = tmp + tmp1;
				}
			} else if(((style.filter[0]) instanceof haxe_ui_filters_Blur)) {
				var blur = style.filter[0];
				this.element.style.setProperty("-webkit-filter","blur(" + blur.amount + "px)");
				this.element.style.setProperty("-moz-filter","blur(" + blur.amount + "px)");
				this.element.style.setProperty("-o-filter","blur(" + blur.amount + "px)");
				this.element.style.setProperty("filter","blur(" + blur.amount + "px)");
			} else if(((style.filter[0]) instanceof haxe_ui_filters_Grayscale)) {
				var grayscale = style.filter[0];
				this.element.style.setProperty("-webkit-filter","grayscale(" + grayscale.amount + "%)");
				this.element.style.setProperty("-moz-filter","grayscale(" + grayscale.amount + "%)");
				this.element.style.setProperty("-o-filter","grayscale(" + grayscale.amount + "%)");
				this.element.style.setProperty("filter","grayscale(" + grayscale.amount + "%)");
			}
		} else {
			this.element.style.filter = null;
			this.element.style.boxShadow = null;
			this.element.style.removeProperty("box-shadow");
			this.element.style.removeProperty("-webkit-filter");
			this.element.style.removeProperty("-moz-filter");
			this.element.style.removeProperty("-o-filter");
			this.element.style.removeProperty("filter");
		}
		if(style.backdropFilter != null) {
			if(((style.backdropFilter[0]) instanceof haxe_ui_filters_Blur)) {
				var blur = style.backdropFilter[0];
				this.element.style.setProperty("backdrop-filter","blur(" + blur.amount + "px)");
			}
		} else {
			this.element.style.removeProperty("backdrop-filter");
		}
		if(style.opacity != null) {
			this.element.style.opacity = "" + style.opacity;
		}
		if(style.fontName != null) {
			this.element.style.fontFamily = style.fontName;
		}
		if(style.fontSize != null) {
			this.element.style.fontSize = "" + style.fontSize + "px";
		}
		if(style.color != null) {
			this.element.style.color = haxe_ui_backend_html5_HtmlUtils.color(style.color);
		}
		if(this.hasImageDisplay()) {
			this._imageDisplay.applyStyle();
		}
	}
	,setCursor: function(cursor) {
		var tmp = cursor == null;
		if(cursor == null) {
			this.element.style.removeProperty("cursor");
			if(this.hasImageDisplay()) {
				this.getImageDisplay().element.style.removeProperty("cursor");
			}
		} else {
			this.element.style.cursor = cursor;
			if(this.hasImageDisplay()) {
				this.getImageDisplay().element.style.cursor = cursor;
			}
			if(this.hasTextDisplay()) {
				this.getTextDisplay().element.style.cursor = cursor;
			}
		}
		var _g = 0;
		var _this = js_Boot.__cast(this , haxe_ui_core_Component);
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.element.style.cursor == null) {
				c.setCursor("inherit");
			}
		}
	}
	,_canvas: null
	,getCanvas: function(width,height) {
		if(this._canvas == null) {
			this._canvas = window.document.createElement("canvas");
			this._canvas.style.setProperty("-webkit-backface-visibility","hidden");
			this._canvas.style.setProperty("-moz-backface-visibility","hidden");
			this._canvas.style.setProperty("-ms-backface-visibility","hidden");
			this._canvas.style.position = "absolute";
			this._canvas.style.setProperty("pointer-events","none");
			this._canvas.width = width;
			this._canvas.height = height;
			this.element.insertBefore(this._canvas,this.element.firstChild);
		}
		if(width != this._canvas.width) {
			this._canvas.width = width;
		}
		if(height != this._canvas.height) {
			this._canvas.height = height;
		}
		return this._canvas;
	}
	,hasCanvas: function() {
		return this._canvas != null;
	}
	,removeCanvas: function() {
		if(this._canvas != null && this.element.contains(this._canvas)) {
			this.element.removeChild(this._canvas);
			this._canvas = null;
		}
	}
	,mapEvent: function(type,listener) {
		switch(type) {
		case "change":
			if(Object.prototype.hasOwnProperty.call(this._eventMap.h,type) == false) {
				if(this.hasTextInput() == true) {
					this._eventMap.h[type] = listener;
					var tmp = haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h["keyup"];
					this.getTextInput().element.addEventListener(tmp,$bind(this,this.__onTextFieldChangeEvent));
				}
			}
			break;
		case "click":case "doubleclick":case "mousedown":case "mousemove":case "mouseout":case "mouseover":case "mouseup":
			if(Object.prototype.hasOwnProperty.call(this._eventMap.h,type) == false) {
				if(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type] != null) {
					var passive = false;
					if(passive == null) {
						passive = true;
					}
					this.element.addEventListener(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type],$bind(this,this.__onMouseEvent),{ passive : passive});
				}
				this._eventMap.h[type] = listener;
				this.element.addEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onMouseEvent));
			}
			break;
		case "keydown":case "keyup":
			if(Object.prototype.hasOwnProperty.call(this._eventMap.h,type) == false) {
				this._eventMap.h[type] = listener;
				this.element.addEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onKeyboardEvent));
			}
			break;
		case "mousewheel":
			this._eventMap.h[type] = listener;
			if(haxe_ui_backend_html5_UserAgent.get_instance().get_firefox() == true) {
				this.element.addEventListener("DOMMouseScroll",$bind(this,this.__onMouseWheelEvent));
			} else {
				this.element.addEventListener("mousewheel",$bind(this,this.__onMouseWheelEvent));
			}
			break;
		case "rightclick":
			if(Object.prototype.hasOwnProperty.call(this._eventMap.h,type) == false) {
				this._eventMap.h[type] = listener;
				this.element.addEventListener("contextmenu",$bind(this,this.__onContextMenu));
			}
			break;
		case "scrollchange":
			this._eventMap.h[type] = listener;
			this.element.addEventListener("scroll",$bind(this,this.__onScrollEvent));
			break;
		}
	}
	,unmapEvent: function(type,listener) {
		switch(type) {
		case "change":
			if(this.hasTextInput()) {
				var _this = this._eventMap;
				if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
					delete(_this.h[type]);
				}
				var tmp = haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h["keyup"];
				this.getTextInput().element.removeEventListener(tmp,$bind(this,this.__onTextFieldChangeEvent));
			}
			break;
		case "click":case "doubleclick":case "mousedown":case "mousemove":case "mouseout":case "mouseover":case "mouseup":
			var _this = this._eventMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			this.element.removeEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onMouseEvent));
			if(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type] != null) {
				this.element.removeEventListener(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type],$bind(this,this.__onMouseEvent));
			}
			break;
		case "keydown":case "keyup":
			var _this = this._eventMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			this.element.removeEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onKeyboardEvent));
			break;
		case "mousewheel":
			var _this = this._eventMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			if(haxe_ui_backend_html5_UserAgent.get_instance().get_firefox() == true) {
				this.element.removeEventListener("DOMMouseScroll",$bind(this,this.__onMouseWheelEvent));
			} else {
				this.element.removeEventListener("mousewheel",$bind(this,this.__onMouseWheelEvent));
			}
			break;
		case "rightclick":
			var _this = this._eventMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			this.element.removeEventListener("contextmenu",$bind(this,this.__onContextMenu));
			break;
		}
	}
	,__onContextMenu: function(event) {
		event.preventDefault();
		var type = "rightclick";
		if(type != null) {
			var fn = this._eventMap.h[type];
			if(fn != null) {
				var uiEvent = new haxe_ui_events_MouseEvent(type);
				uiEvent.screenX = event.pageX;
				uiEvent.screenY = event.pageY;
				fn(uiEvent);
			}
		}
		return false;
	}
	,__onChangeEvent: function(event) {
		var type = haxe_ui_backend_html5_EventMapper.DOM_TO_HAXEUI.h[event.type];
		if(type != null) {
			var fn = this._eventMap.h[type];
			if(fn != null) {
				var uiEvent = new haxe_ui_events_UIEvent(type);
				fn(uiEvent);
			}
		}
	}
	,__onTextFieldChangeEvent: function(event) {
		var fn = this._eventMap.h["change"];
		if(fn != null) {
			var uiEvent = new haxe_ui_events_UIEvent("change");
			fn(uiEvent);
		}
	}
	,_over: null
	,__onMouseEvent: function(event) {
		var type = haxe_ui_backend_html5_EventMapper.DOM_TO_HAXEUI.h[event.type];
		if(type != null) {
			try {
				var tmp = type == "mousedown";
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
			var fn = this._eventMap.h[type];
			if(fn != null) {
				var mouseEvent = new haxe_ui_events_MouseEvent(type);
				mouseEvent._originalEvent = event;
				var touchEvent = false;
				try {
					touchEvent = ((event) instanceof TouchEvent);
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
				}
				if(touchEvent == true) {
					var te = js_Boot.__cast(event , TouchEvent);
					mouseEvent.screenX = (te.changedTouches[0].pageX - haxe_ui_core_Screen.get_instance().get_container().offsetLeft) / haxe_ui_Toolkit.get_scaleX();
					mouseEvent.screenY = (te.changedTouches[0].pageY - haxe_ui_core_Screen.get_instance().get_container().offsetTop) / haxe_ui_Toolkit.get_scaleY();
					mouseEvent.touchEvent = true;
				} else if(((event) instanceof MouseEvent)) {
					var me = js_Boot.__cast(event , MouseEvent);
					mouseEvent.buttonDown = me.buttons != 0;
					mouseEvent.screenX = (me.pageX - haxe_ui_core_Screen.get_instance().get_container().offsetLeft) / haxe_ui_Toolkit.get_scaleX();
					mouseEvent.screenY = (me.pageY - haxe_ui_core_Screen.get_instance().get_container().offsetTop) / haxe_ui_Toolkit.get_scaleY();
					mouseEvent.ctrlKey = me.ctrlKey;
					mouseEvent.shiftKey = me.shiftKey;
				}
				if(type == "mouseover") {
					this._over = true;
				} else if(type == "mouseout") {
					this._over = false;
				}
				fn(mouseEvent);
			}
		}
	}
	,getComponentOffset: function() {
		return new haxe_ui_geom_Point(0,0);
	}
	,__onMouseWheelEvent: function(event) {
		var fn = this._eventMap.h["mousewheel"];
		if(fn == null) {
			return;
		}
		var delta = 0;
		if(Reflect.field(event,"wheelDelta") != null) {
			delta = Reflect.field(event,"wheelDelta");
		} else if(((event) instanceof WheelEvent)) {
			delta = (js_Boot.__cast(event , WheelEvent)).deltaY;
		} else {
			delta = -event.detail;
		}
		delta = Math.max(-1,Math.min(1,delta));
		var mouseEvent = new haxe_ui_events_MouseEvent("mousewheel");
		mouseEvent._originalEvent = event;
		mouseEvent.screenX = (event.pageX - haxe_ui_core_Screen.get_instance().get_container().offsetLeft) / haxe_ui_Toolkit.get_scaleX();
		mouseEvent.screenY = (event.pageY - haxe_ui_core_Screen.get_instance().get_container().offsetTop) / haxe_ui_Toolkit.get_scaleY();
		mouseEvent.ctrlKey = event.ctrlKey;
		mouseEvent.shiftKey = event.shiftKey;
		mouseEvent.delta = delta;
		fn(mouseEvent);
	}
	,__onKeyboardEvent: function(event) {
		var type = haxe_ui_backend_html5_EventMapper.DOM_TO_HAXEUI.h[event.type];
		if(type != null) {
			var fn = this._eventMap.h[type];
			if(fn != null) {
				var keyboardEvent = new haxe_ui_events_KeyboardEvent(type);
				keyboardEvent._originalEvent = event;
				if(((event) instanceof KeyboardEvent)) {
					var me = js_Boot.__cast(event , KeyboardEvent);
					keyboardEvent.keyCode = me.keyCode;
					keyboardEvent.altKey = me.altKey;
					keyboardEvent.ctrlKey = me.ctrlKey;
					keyboardEvent.shiftKey = me.shiftKey;
				}
				fn(keyboardEvent);
			}
		}
	}
	,__onScrollEvent: function(event) {
		var type = haxe_ui_backend_html5_EventMapper.DOM_TO_HAXEUI.h[event.type];
		var fn = this._eventMap.h[type];
		if(fn != null) {
			var scrollEvent = new haxe_ui_events_ScrollEvent("scrollchange");
			fn(scrollEvent);
		}
	}
	,registerBehaviours: function() {
		haxe_ui_backend_ComponentBase.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_backend_ComponentBase.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_backend_ComponentImpl();
	}
	,__class__: haxe_ui_backend_ComponentImpl
});
var haxe_ui_validation_IValidating = function() { };
$hxClasses["haxe.ui.validation.IValidating"] = haxe_ui_validation_IValidating;
haxe_ui_validation_IValidating.__name__ = "haxe.ui.validation.IValidating";
haxe_ui_validation_IValidating.__isInterface__ = true;
haxe_ui_validation_IValidating.prototype = {
	get_depth: null
	,set_depth: null
	,get_id: null
	,set_id: null
	,get_isComponentOffscreen: null
	,validateComponent: null
	,updateComponentDisplay: null
	,isComponentOffscreen: null
	,__class__: haxe_ui_validation_IValidating
	,__properties__: {get_isComponentOffscreen:"get_isComponentOffscreen",set_id:"set_id",get_id:"get_id",set_depth:"set_depth",get_depth:"get_depth"}
};
var haxe_ui_core_Component = function() {
	this._pauseAnimationStyleChanges = false;
	this._initialSizeApplied = false;
	this._scriptAccess = true;
	this._includeInLayout = true;
	this._styleSheet = null;
	this._cachedStyleSheetRef = null;
	this._useCachedStyleSheetRef = false;
	this.cascadeActive = false;
	this.classes = [];
	this._customStyle = null;
	this._hidden = false;
	this.bindingRoot = false;
	this._dragOptions = null;
	this._dragInitiator = null;
	this.userData = null;
	this._animatable = true;
	this._native = null;
	this._defaultLayoutClass = null;
	this.componentTabIndex = 0;
	haxe_ui_backend_ComponentImpl.call(this);
	this.addClass(haxe_ui_Backend.get_id(),false);
	var c = js_Boot.getClass(this);
	while(c != null) {
		var css = c.__name__;
		var className = css.split(".").pop();
		this.addClass(className.toLowerCase(),false);
		this.addClass(haxe_ui_util_StringUtil.toDashes(className),false);
		if(className.toLowerCase() == "component") {
			break;
		}
		c = c.__super__;
	}
	var s = haxe_ui_Toolkit.styleSheet.buildStyleFor(this);
	if(s.native != null && this.get_hasNativeEntry() == true) {
		this.set_native(s.native);
	} else {
		this.create();
	}
	if(haxe_ui_Toolkit.get_initialized() == false) {
		haxe_Log.trace("WARNING: You are trying to create a component before the toolkit has been initialized. This could have undefined results.",{ fileName : "haxe/ui/core/Component.hx", lineNumber : 81, className : "haxe.ui.core.Component", methodName : "new"});
	}
};
$hxClasses["haxe.ui.core.Component"] = haxe_ui_core_Component;
haxe_ui_core_Component.__name__ = "haxe.ui.core.Component";
haxe_ui_core_Component.__interfaces__ = [haxe_ui_validation_IValidating];
haxe_ui_core_Component.addNamedComponentsFrom = function(parent,list) {
	if(parent == null) {
		return;
	}
	if(parent.get_id() != null) {
		list.push(parent);
	}
	var _g = 0;
	var _g1 = parent._children == null ? [] : parent._children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		haxe_ui_core_Component.addNamedComponentsFrom(child,list);
	}
};
haxe_ui_core_Component.__super__ = haxe_ui_backend_ComponentImpl;
haxe_ui_core_Component.prototype = $extend(haxe_ui_backend_ComponentImpl.prototype,{
	componentTabIndex: null
	,_defaultLayoutClass: null
	,create: function() {
		if(this.get_native() == false || this.get_native() == null) {
			this.registerComposite();
		}
		this.createDefaults();
		this.handleCreate(this.get_native());
		this.destroyChildren();
		this.registerBehaviours();
		this.behaviours.replaceNative();
		if(this.get_native() == false || this.get_native() == null) {
			if(this._compositeBuilderClass != null) {
				if(this._compositeBuilder == null) {
					this._compositeBuilder = Type.createInstance(this._compositeBuilderClass,[this]);
				}
				this._compositeBuilder.create();
			}
			this.createChildren();
			if(this._internalEventsClass != null && this._internalEvents == null) {
				this.registerInternalEvents(this._internalEventsClass);
			}
		} else {
			var builderClass = this.getNativeConfigProperty(".builder.@class");
			if(builderClass != null) {
				if(this._compositeBuilder == null) {
					this._compositeBuilder = Type.createInstance($hxClasses[builderClass],[this]);
				}
				this._compositeBuilder.create();
			}
		}
		this.behaviours.applyDefaults();
	}
	,_compositeBuilderClass: null
	,_compositeBuilder: null
	,registerComposite: function() {
	}
	,createDefaults: function() {
	}
	,createChildren: function() {
	}
	,destroyChildren: function() {
		this.unregisterInternalEvents();
	}
	,createLayout: function() {
		var l = null;
		if(this.get_native() == true) {
			var sizeProps = this.getNativeConfigProperties(".size");
			if(sizeProps != null && Object.prototype.hasOwnProperty.call(sizeProps.h,"class")) {
				var name = sizeProps.h["class"];
				var size = Type.createInstance($hxClasses[name],[]);
				size.config = sizeProps;
				l = new haxe_ui_layouts_DelegateLayout(size);
			} else {
				var layoutProps = this.getNativeConfigProperties(".layout");
				if(layoutProps != null && Object.prototype.hasOwnProperty.call(layoutProps.h,"class")) {
					var name = layoutProps.h["class"];
					l = Type.createInstance($hxClasses[name],[]);
				}
			}
		}
		if(l == null) {
			if(this._defaultLayoutClass != null) {
				l = Type.createInstance(this._defaultLayoutClass,[]);
			} else {
				l = new haxe_ui_layouts_DefaultLayout();
			}
		}
		return l;
	}
	,_native: null
	,get_native: function() {
		if(this._native == null) {
			return false;
		}
		if(this.get_hasNativeEntry() == false) {
			return false;
		}
		return this._native;
	}
	,set_native: function(value) {
		if(this.get_hasNativeEntry() == false) {
			return value;
		}
		if(this._native == value) {
			return value;
		}
		this._native = value;
		this.get_customStyle().native = value;
		if(this._native == true && this.get_hasNativeEntry()) {
			this.addClass(":native");
		} else {
			this.removeClass(":native");
		}
		this.behaviours.cache();
		this.behaviours.detatch();
		this.create();
		if(this.get_layout() != null) {
			this.set_layout(this.createLayout());
		}
		this.behaviours.restore();
		return value;
	}
	,_animatable: null
	,get_animatable: function() {
		return false;
	}
	,set_animatable: function(value) {
		if(this._animatable != value) {
			if(value == false && this._componentAnimation != null) {
				this._componentAnimation.stop();
				this._componentAnimation = null;
			}
			this._animatable = value;
		}
		this._animatable = value;
		return value;
	}
	,_componentAnimation: null
	,get_componentAnimation: function() {
		return this._componentAnimation;
	}
	,set_componentAnimation: function(value) {
		if(this._componentAnimation != value && this._animatable == true) {
			if(this._componentAnimation != null) {
				this._componentAnimation.stop();
			}
			this._componentAnimation = value;
		}
		return value;
	}
	,userData: null
	,screen: null
	,get_screen: function() {
		return haxe_ui_Toolkit.get_screen();
	}
	,get_draggable: function() {
		return haxe_ui_dragdrop_DragManager.get_instance().isRegisteredDraggable(this);
	}
	,set_draggable: function(value) {
		if(value == true) {
			haxe_ui_dragdrop_DragManager.get_instance().registerDraggable(this,this.get_dragOptions());
		} else {
			haxe_ui_dragdrop_DragManager.get_instance().unregisterDraggable(this);
		}
		return value;
	}
	,_dragInitiator: null
	,get_dragInitiator: function() {
		return this._dragInitiator;
	}
	,set_dragInitiator: function(value) {
		this._dragInitiator = value;
		if(this._dragOptions != null) {
			this._dragOptions.mouseTarget = value;
		}
		this.set_draggable(true);
		return value;
	}
	,_dragOptions: null
	,get_dragOptions: function() {
		if(this._dragOptions == null) {
			this._dragOptions = { mouseTarget : this._dragInitiator};
		}
		return this._dragOptions;
	}
	,set_dragOptions: function(value) {
		this._dragOptions = value;
		this.set_draggable(true);
		return value;
	}
	,bindingRoot: null
	,get_rootComponent: function() {
		var r = this;
		while(r.parentComponent != null) r = r.parentComponent;
		return r;
	}
	,get_numComponents: function() {
		var n = 0;
		if(this._compositeBuilder != null) {
			var builderCount = this._compositeBuilder.get_numComponents();
			if(builderCount != null) {
				n = builderCount;
			} else if(this._children != null) {
				n = this._children.length;
			}
		} else if(this._children != null) {
			n = this._children.length;
		}
		return n;
	}
	,addComponent: function(child) {
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.addComponent(child);
			if(v != null) {
				v.set_scriptAccess(this.get_scriptAccess());
				return v;
			}
		}
		if(this.get_native() == true) {
			var allowChildren = this.getNativeConfigPropertyBool(".@allowChildren",true);
			if(allowChildren == false) {
				return child;
			}
		}
		child.parentComponent = this;
		child._isDisposed = false;
		if(this._children == null) {
			this._children = [];
		}
		this._children.push(child);
		this.handleAddComponent(child);
		if(this._ready) {
			child.ready();
		}
		this.assignPositionClasses();
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout",false);
		}
		if(this.get_disabled()) {
			child.set_disabled(true);
		}
		if(this._compositeBuilder != null) {
			this._compositeBuilder.onComponentAdded(child);
		}
		this.onComponentAdded(child);
		this.dispatch(new haxe_ui_events_UIEvent("componentadded"));
		child.set_scriptAccess(this.get_scriptAccess());
		return child;
	}
	,containsComponent: function(child) {
		if(child == null) {
			return false;
		}
		var contains = false;
		this.walkComponents(function(c) {
			if(child == c) {
				contains = true;
			}
			return !contains;
		});
		return contains;
	}
	,addComponentAt: function(child,index) {
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.addComponentAt(child,index);
			if(v != null) {
				v.set_scriptAccess(this.get_scriptAccess());
				return v;
			}
		}
		if(this.get_native() == true) {
			var allowChildren = this.getNativeConfigPropertyBool(".@allowChildren",true);
			if(allowChildren == false) {
				return child;
			}
		}
		child.parentComponent = this;
		child._isDisposed = false;
		if(this._children == null) {
			this._children = [];
		}
		this._children.splice(index,0,child);
		this.handleAddComponentAt(child,index);
		if(this._ready) {
			child.ready();
		}
		this.assignPositionClasses();
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout",false);
		}
		if(this.get_disabled()) {
			child.set_disabled(true);
		}
		if(this._compositeBuilder != null) {
			this._compositeBuilder.onComponentAdded(child);
		}
		this.onComponentAdded(child);
		this.dispatch(new haxe_ui_events_UIEvent("componentadded"));
		child.set_scriptAccess(this.get_scriptAccess());
		return child;
	}
	,onComponentAdded: function(child) {
	}
	,removeComponent: function(child,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		if(child == null) {
			return null;
		}
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.removeComponent(child,dispose,invalidate);
			if(v != null) {
				return v;
			}
		}
		if(this._children != null) {
			if(this._children.indexOf(child) == -1) {
				var childId = child.get_className();
				if(child.get_id() != null) {
					childId += "#" + child.get_id();
				}
				var thisId = this.get_className();
				if(this.get_id() != null) {
					thisId += "#" + this.get_id();
				}
				haxe_Log.trace("WARNING: trying to remove a child (" + childId + ") that is not a child of this component (" + thisId + ")",{ fileName : "haxe/ui/core/Component.hx", lineNumber : 533, className : "haxe.ui.core.Component", methodName : "removeComponent"});
				return child;
			}
			if(HxOverrides.remove(this._children,child)) {
				child.parentComponent = null;
				child.set_depth(-1);
			}
			if(dispose == true) {
				child.disposeComponent();
			}
		}
		this.handleRemoveComponent(child,dispose);
		this.assignPositionClasses(invalidate);
		if(this._children != null && invalidate == true) {
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout",false);
			}
		}
		if(this._compositeBuilder != null) {
			this._compositeBuilder.onComponentRemoved(child);
		}
		this.onComponentRemoved(child);
		this.dispatch(new haxe_ui_events_UIEvent("componentremoved"));
		return child;
	}
	,disposeComponent: function() {
		this._isDisposed = true;
		this.removeAllComponents(true);
		this.destroyComponent();
		this.unregisterEvents();
		if(this.hasTextDisplay()) {
			this.getTextDisplay().dispose();
		}
		if(this.hasTextInput()) {
			this.getTextInput().dispose();
		}
		if(this.hasImageDisplay()) {
			this.getImageDisplay().dispose();
		}
		if(this.behaviours != null) {
			this.behaviours.dispose();
			this.behaviours = null;
		}
		if(this._layout != null) {
			this._layout.set_component(null);
			this._layout = null;
		}
		if(this._internalEvents != null) {
			this._internalEvents._target = null;
			this._internalEvents = null;
		}
		this.parentComponent = null;
	}
	,removeComponentAt: function(index,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		if(this._children == null) {
			return null;
		}
		var childCount = this._children.length;
		if(this._compositeBuilder != null) {
			var compositeChildCount = this._compositeBuilder.get_numComponents();
			if(compositeChildCount != null) {
				childCount = compositeChildCount;
			}
		}
		if(index < 0 || index > childCount - 1) {
			return null;
		}
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.removeComponentAt(index,dispose,invalidate);
			if(v != null) {
				return v;
			}
		}
		var child = this._children[index];
		if(child == null) {
			return null;
		}
		if(dispose == true) {
			child._isDisposed = true;
			child.removeAllComponents(true);
		}
		this.handleRemoveComponentAt(index,dispose);
		if(HxOverrides.remove(this._children,child)) {
			child.parentComponent = null;
			child.set_depth(-1);
		}
		if(dispose == true) {
			child.destroyComponent();
			child.unregisterEvents();
		}
		this.assignPositionClasses(invalidate);
		if(invalidate == true) {
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout",false);
			}
		}
		if(this._compositeBuilder != null) {
			this._compositeBuilder.onComponentRemoved(child);
		}
		this.onComponentRemoved(child);
		this.dispatch(new haxe_ui_events_UIEvent("componentremoved"));
		return child;
	}
	,onComponentRemoved: function(child) {
	}
	,assignPositionClasses: function(invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if((this._children == null ? [] : this._children).length == 1) {
			(this._children == null ? [] : this._children)[0].addClasses(["first","last"],invalidate);
			return;
		}
		var _g = 0;
		var _g1 = (this._children == null ? [] : this._children).length;
		while(_g < _g1) {
			var i = _g++;
			var c = (this._children == null ? [] : this._children)[i];
			if(i == 0) {
				c.swapClass("first","last",invalidate);
			} else if((this._children == null ? [] : this._children).length > 1 && i == (this._children == null ? [] : this._children).length - 1) {
				c.swapClass("last","first",invalidate);
			} else {
				c.removeClasses(["first","last"],invalidate);
			}
		}
	}
	,destroyComponent: function() {
		if(this._compositeBuilder != null) {
			this._compositeBuilder.destroy();
		}
		haxe_ui_locale_LocaleManager.get_instance().unregisterComponent(this);
		this.onDestroy();
	}
	,onDestroy: function() {
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.onDestroy();
		}
		this.dispatch(new haxe_ui_events_UIEvent("destroy"));
	}
	,walkComponents: function(callback) {
		if(callback(this) == false) {
			return;
		}
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var cont = [true];
			child.walkComponents((function(cont) {
				return function(c) {
					cont[0] = callback(c);
					return cont[0];
				};
			})(cont));
			if(cont[0] == false) {
				break;
			}
		}
	}
	,removeAllComponents: function(dispose) {
		if(dispose == null) {
			dispose = true;
		}
		if(this._compositeBuilder != null) {
			var b = this._compositeBuilder.removeAllComponents(dispose);
			if(b == true) {
				return;
			}
		}
		if(this._children != null) {
			while(this._children.length > 0) {
				this._children[0].removeAllComponents(dispose);
				this.removeComponent(this._children[0],dispose,false);
			}
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout",false);
			}
		}
	}
	,matchesSearch: function(criteria,type,searchType) {
		if(searchType == null) {
			searchType = "id";
		}
		if(criteria != null) {
			if(searchType == "id" && this.get_id() == criteria || searchType == "css" && this.classes.indexOf(criteria) != -1 == true) {
				if(type != null) {
					return js_Boot.__instanceof(this,type);
				}
				return true;
			}
		} else if(type != null) {
			return js_Boot.__instanceof(this,type);
		}
		return false;
	}
	,findComponent: function(criteria,type,recursive,searchType) {
		if(searchType == null) {
			searchType = "id";
		}
		if(recursive == null && criteria != null && searchType == "id") {
			recursive = true;
		}
		var match = null;
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.matchesSearch(criteria,type,searchType)) {
				match = child;
				break;
			}
		}
		if(match == null && recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				var temp = child.findComponent(criteria,type,recursive,searchType);
				if(temp != null) {
					match = temp;
					break;
				}
			}
			if(match == null && this._compositeBuilder != null) {
				match = this._compositeBuilder.findComponent(criteria,type,recursive,searchType);
			}
		}
		return match;
	}
	,findComponents: function(styleName,type,maxDepth) {
		if(maxDepth == null) {
			maxDepth = 5;
		}
		if(maxDepth == -1) {
			maxDepth = 100;
		}
		if(maxDepth <= 0) {
			return [];
		}
		--maxDepth;
		var r = [];
		if(this._compositeBuilder != null) {
			var childArray = this._compositeBuilder.findComponents(styleName,type,maxDepth);
			if(childArray != null) {
				var _g = 0;
				while(_g < childArray.length) {
					var c = childArray[_g];
					++_g;
					r.push(c);
				}
			}
		}
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var match = true;
			if(styleName != null && child.classes.indexOf(styleName) != -1 == false) {
				match = false;
			}
			if(type != null && js_Boot.__instanceof(child,type) == false) {
				match = false;
			}
			if(match == true) {
				r.push(child);
			} else {
				var childArray = child.findComponents(styleName,type,maxDepth);
				var _g2 = 0;
				while(_g2 < childArray.length) {
					var c = childArray[_g2];
					++_g2;
					r.push(c);
				}
			}
		}
		return r;
	}
	,findAncestor: function(criteria,type,searchType) {
		if(searchType == null) {
			searchType = "id";
		}
		var match = null;
		var p = this.parentComponent;
		while(p != null) if(p.matchesSearch(criteria,type,searchType)) {
			match = p;
			break;
		} else {
			p = p.parentComponent;
		}
		return match;
	}
	,findComponentsUnderPoint: function(screenX,screenY,type) {
		var c = [];
		if(this.hitTest(screenX,screenY,false)) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.hitTest(screenX,screenY,false)) {
					var match = true;
					if(type != null && js_Boot.__instanceof(child,type) == false) {
						match = false;
					}
					if(match == true) {
						c.push(child);
					}
					c = c.concat(child.findComponentsUnderPoint(screenX,screenY,type));
				}
			}
		}
		return c;
	}
	,hasComponentUnderPoint: function(screenX,screenY,type) {
		var b = false;
		if(this.hitTest(screenX,screenY,false)) {
			if(type == null) {
				return true;
			}
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.hitTest(screenX,screenY,false)) {
					var match = true;
					if(type != null && js_Boot.__instanceof(child,type) == false) {
						match = false;
					}
					if(match == false) {
						match = child.hasComponentUnderPoint(screenX,screenY,type);
					}
					if(match == true) {
						b = match;
						break;
					}
				}
			}
		}
		return b;
	}
	,getComponentIndex: function(child) {
		if(this._compositeBuilder != null) {
			var index = this._compositeBuilder.getComponentIndex(child);
			if(index != -2147483648) {
				return index;
			}
		}
		var index = -1;
		if(this._children != null && child != null) {
			index = this._children.indexOf(child);
		}
		return index;
	}
	,setComponentIndex: function(child,index) {
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.setComponentIndex(child,index);
			if(v != null) {
				return v;
			}
		}
		if(index >= 0 && index <= this._children.length && child.parentComponent == this) {
			this.handleSetComponentIndex(child,index);
			HxOverrides.remove(this._children,child);
			this._children.splice(index,0,child);
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout",false);
			}
		}
		return child;
	}
	,getComponentAt: function(index) {
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.getComponentAt(index);
			if(v != null) {
				return v;
			}
		}
		if(this._children == null) {
			return null;
		}
		return this._children[index];
	}
	,hide: function() {
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.hide();
			if(v == true) {
				return;
			}
		}
		if(this._hidden == false) {
			this._hidden = true;
			this.handleVisibility(false);
			if(this.parentComponent != null) {
				var _this = this.parentComponent;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout",false);
				}
			}
			this.dispatchRecursively(new haxe_ui_events_UIEvent("hidden"));
		}
	}
	,hideInternal: function(dispatchChildren) {
		if(dispatchChildren == null) {
			dispatchChildren = false;
		}
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.hide();
			if(v == true) {
				return;
			}
		}
		if(this._hidden == false) {
			this._hidden = true;
			this.handleVisibility(false);
			if(this.parentComponent != null) {
				var _this = this.parentComponent;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout",false);
				}
			}
			if(dispatchChildren == true) {
				this.dispatchRecursively(new haxe_ui_events_UIEvent("hidden"));
			} else {
				this.dispatch(new haxe_ui_events_UIEvent("hidden"));
			}
		}
	}
	,show: function() {
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.show();
			if(v == true) {
				return;
			}
		}
		if(this._hidden == true) {
			this._hidden = false;
			this.handleVisibility(true);
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout",false);
			}
			if(this.parentComponent != null) {
				var _this = this.parentComponent;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout",false);
				}
			}
			this.dispatchRecursively(new haxe_ui_events_UIEvent("shown"));
		}
	}
	,showInternal: function(dispatchChildren) {
		if(dispatchChildren == null) {
			dispatchChildren = false;
		}
		if(this._compositeBuilder != null) {
			var v = this._compositeBuilder.show();
			if(v == true) {
				return;
			}
		}
		if(this._hidden == true) {
			this._hidden = false;
			this.handleVisibility(true);
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout",false);
			}
			if(this.parentComponent != null) {
				var _this = this.parentComponent;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout",false);
				}
			}
			if(dispatchChildren == true) {
				this.dispatchRecursively(new haxe_ui_events_UIEvent("shown"));
			} else {
				this.dispatch(new haxe_ui_events_UIEvent("shown"));
			}
		}
	}
	,fadeIn: function(onEnd,show) {
		if(show == null) {
			show = true;
		}
		var _gthis = this;
		if(onEnd != null || show == true) {
			var prevStart = this.onAnimationStart;
			var prevEnd = this.onAnimationEnd;
			if(show == true) {
				prevStart = this.onAnimationStart;
				this.set_onAnimationStart(function(e) {
					_gthis.show();
					_gthis.set_onAnimationStart(prevStart);
				});
			}
			this.set_onAnimationEnd(function(e) {
				if(onEnd != null) {
					onEnd();
				}
				_gthis.removeClass("fade-in");
				_gthis.set_onAnimationEnd(prevEnd);
			});
		}
		this.swapClass("fade-in","fade-out");
	}
	,fadeOut: function(onEnd,hide) {
		if(hide == null) {
			hide = true;
		}
		var _gthis = this;
		if(onEnd != null || hide == true) {
			var prevEnd = this.onAnimationEnd;
			this.set_onAnimationEnd(function(e) {
				if(hide == true) {
					_gthis.hide();
				}
				if(onEnd != null) {
					onEnd();
				}
				_gthis.set_onAnimationEnd(prevEnd);
				_gthis.removeClass("fade-out");
			});
		}
		this.swapClass("fade-out","fade-in");
	}
	,_hidden: null
	,get_hidden: function() {
		if(this._hidden == true) {
			return true;
		}
		if(this.parentComponent != null) {
			return this.parentComponent.get_hidden();
		}
		return false;
	}
	,set_hidden: function(value) {
		if(value == this._hidden) {
			return value;
		}
		if(value == true) {
			this.hide();
		} else {
			this.show();
		}
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"hidden"));
		return value;
	}
	,_customStyle: null
	,get_customStyle: function() {
		if(this._customStyle == null) {
			this._customStyle = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		return this._customStyle;
	}
	,set_customStyle: function(value) {
		if(value != this._customStyle) {
			this.invalidateComponent("style",false);
		}
		this._customStyle = value;
		return value;
	}
	,classes: null
	,cascadeActive: null
	,addClass: function(name,invalidate,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(invalidate == null) {
			invalidate = true;
		}
		if(this.classes.indexOf(name) == -1) {
			this.classes.push(name);
			if(invalidate == true) {
				this.invalidateComponent("style",false);
			}
		}
		if(recursive == true || this.cascadeActive == true && name == ":active") {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.addClass(name,invalidate,recursive);
			}
		}
	}
	,addClasses: function(names,invalidate,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(invalidate == null) {
			invalidate = true;
		}
		var needsInvalidate = false;
		var _g = 0;
		while(_g < names.length) {
			var name = names[_g];
			++_g;
			if(this.classes.indexOf(name) == -1) {
				this.classes.push(name);
				if(invalidate == true) {
					needsInvalidate = true;
				}
			}
		}
		if(needsInvalidate == true) {
			this.invalidateComponent("style",false);
		}
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.addClasses(names,invalidate,recursive);
			}
		}
	}
	,removeClass: function(name,invalidate,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(invalidate == null) {
			invalidate = true;
		}
		if(this.classes.indexOf(name) != -1) {
			HxOverrides.remove(this.classes,name);
			if(invalidate == true) {
				this.invalidateComponent("style",false);
			}
		}
		if(recursive == true || this.cascadeActive == true && name == ":active") {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.removeClass(name,invalidate,recursive);
			}
		}
	}
	,removeClasses: function(names,invalidate,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(invalidate == null) {
			invalidate = true;
		}
		var needsInvalidate = false;
		var _g = 0;
		while(_g < names.length) {
			var name = names[_g];
			++_g;
			if(this.classes.indexOf(name) != -1) {
				HxOverrides.remove(this.classes,name);
				if(invalidate == true) {
					needsInvalidate = true;
				}
			}
		}
		if(needsInvalidate == true) {
			this.invalidateComponent("style",false);
		}
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.removeClasses(names,invalidate,recursive);
			}
		}
	}
	,hasClass: function(name) {
		return this.classes.indexOf(name) != -1;
	}
	,swapClass: function(classToAdd,classToRemove,invalidate,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(invalidate == null) {
			invalidate = true;
		}
		var needsInvalidate = false;
		if(classToAdd != null && this.classes.indexOf(classToAdd) == -1) {
			this.classes.push(classToAdd);
			needsInvalidate = true;
		}
		if(classToRemove != null && this.classes.indexOf(classToRemove) != -1) {
			HxOverrides.remove(this.classes,classToRemove);
			needsInvalidate = true;
		}
		if(invalidate == true && needsInvalidate == true) {
			this.invalidateComponent("style",false);
		}
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.swapClass(classToAdd,classToRemove,invalidate,recursive);
			}
		}
	}
	,get_styleNames: function() {
		return this.classes.join(" ");
	}
	,set_styleNames: function(value) {
		if(value == null) {
			return value;
		}
		var _g = 0;
		var _g1 = value.split(" ");
		while(_g < _g1.length) {
			var x = _g1[_g];
			++_g;
			this.addClass(x);
		}
		return value;
	}
	,_styleString: null
	,get_styleString: function() {
		return this._styleString;
	}
	,set_styleString: function(value) {
		if(value == null || value == this._styleString) {
			return value;
		}
		var cssString = StringTools.trim(value);
		if(cssString.length == 0) {
			return value;
		}
		if(StringTools.endsWith(cssString,";") == false) {
			cssString += ";";
		}
		cssString = "_ { " + cssString + "}";
		var s = new haxe_ui_styles_Parser().parse(cssString);
		this.get_customStyle().mergeDirectives(s.get_rules()[0].directives);
		this._styleString = value;
		this.invalidateComponent("style",false);
		return value;
	}
	,_useCachedStyleSheetRef: null
	,_cachedStyleSheetRef: null
	,_styleSheet: null
	,get_styleSheet: function() {
		if(this._useCachedStyleSheetRef == true) {
			return this._cachedStyleSheetRef;
		}
		var s = null;
		var ref = this;
		while(ref != null) {
			if(ref._styleSheet != null) {
				s = ref._styleSheet;
				break;
			}
			ref = ref.parentComponent;
		}
		this._useCachedStyleSheetRef = true;
		this._cachedStyleSheetRef = s;
		return s;
	}
	,set_styleSheet: function(value) {
		this._styleSheet = value;
		this.resetCachedStyleSheetRef();
		return value;
	}
	,resetCachedStyleSheetRef: function() {
		this._cachedStyleSheetRef = null;
		this._useCachedStyleSheetRef = false;
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.resetCachedStyleSheetRef();
		}
	}
	,_includeInLayout: null
	,get_includeInLayout: function() {
		if(this._hidden == true) {
			return false;
		}
		return this._includeInLayout;
	}
	,set_includeInLayout: function(value) {
		this._includeInLayout = value;
		return value;
	}
	,get_layout: function() {
		return this._layout;
	}
	,set_layout: function(value) {
		if(value == null) {
			return value;
		}
		var tmp;
		if(this._layout != null) {
			var c = js_Boot.getClass(value);
			var tmp1 = c.__name__;
			var c = js_Boot.getClass(this._layout);
			tmp = tmp1 == c.__name__;
		} else {
			tmp = false;
		}
		if(tmp) {
			return value;
		}
		this._layout = value;
		this._layout.set_component(this);
		return value;
	}
	,lockLayout: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(this._layoutLocked == true) {
			return;
		}
		this._layoutLocked = true;
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.lockLayout(recursive);
			}
		}
	}
	,unlockLayout: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(this._layoutLocked == false) {
			return;
		}
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.unlockLayout(recursive);
			}
		}
		this._layoutLocked = false;
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout",false);
		}
	}
	,ready: function() {
		var _gthis = this;
		this.set_depth(haxe_ui_util_ComponentUtil.getDepth(this));
		if(this.isComponentInvalid()) {
			this._invalidateCount = 0;
			haxe_ui_validation_ValidationManager.get_instance().add(this);
		}
		if(this._ready == false) {
			this._ready = true;
			this.handleReady();
			if((this._children == null ? [] : this._children) != null) {
				var _g = 0;
				var _g1 = this._children == null ? [] : this._children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.ready();
				}
			}
			this.invalidateComponent();
			this.behaviours.ready();
			this.behaviours.update();
			haxe_ui_Toolkit.callLater(function() {
				_gthis.invalidateComponent("data",false);
				_gthis.invalidateComponent("style",false);
				if(_gthis._compositeBuilder != null) {
					_gthis._compositeBuilder.onReady();
				}
				_gthis.onReady();
				_gthis.dispatch(new haxe_ui_events_UIEvent("ready"));
				if(_gthis._hidden == false) {
					_gthis.dispatch(new haxe_ui_events_UIEvent("shown"));
				}
			});
		}
	}
	,onReady: function() {
	}
	,onInitialize: function() {
	}
	,onResized: function() {
	}
	,onMoved: function() {
	}
	,_scriptAccess: null
	,get_scriptAccess: function() {
		return this._scriptAccess;
	}
	,set_scriptAccess: function(value) {
		if(value == this._scriptAccess) {
			return value;
		}
		this._scriptAccess = value;
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.set_scriptAccess(value);
		}
		return value;
	}
	,namedComponents: null
	,get_namedComponents: function() {
		var list = [];
		haxe_ui_core_Component.addNamedComponentsFrom(this,list);
		return list;
	}
	,onThemeChanged: function() {
		this._initialSizeApplied = false;
		if(this._style != null) {
			if(this._style.initialWidth != null) {
				this.set_width(0);
			}
			if(this._style.initialPercentWidth != null) {
				this.set_percentWidth(null);
			}
			if(this._style.initialHeight != null) {
				this.set_height(0);
			}
			if(this._style.initialPercentHeight != null) {
				this.set_percentHeight(null);
			}
		}
	}
	,initializeComponent: function() {
		if(this._isInitialized == true) {
			return;
		}
		if(this._compositeBuilder != null) {
			this._compositeBuilder.onInitialize();
		}
		this.onInitialize();
		if(this._layout == null) {
			this.set_layout(this.createLayout());
		}
		this._isInitialized = true;
		if(this.hasEvent("initialize")) {
			this.dispatch(new haxe_ui_events_UIEvent("initialize"));
		}
	}
	,_initialSizeApplied: null
	,validateInitialSize: function(isInitialized) {
		if(isInitialized == false && this._style != null && this._initialSizeApplied == false) {
			if((this._style.initialWidth != null || this._style.initialPercentWidth != null) && (this.get_width() <= 0 && this.get_percentWidth() == null)) {
				if(this._style.initialWidth != null) {
					this.set_width(this._style.initialWidth);
					this._initialSizeApplied = true;
				} else if(this._style.initialPercentWidth != null) {
					this.set_percentWidth(this._style.initialPercentWidth);
					this._initialSizeApplied = true;
				}
			}
			if((this._style.initialHeight != null || this._style.initialPercentHeight != null) && (this.get_height() <= 0 && this.get_percentHeight() == null)) {
				if(this._style.initialHeight != null) {
					this.set_height(this._style.initialHeight);
					this._initialSizeApplied = true;
				} else if(this._style.initialPercentHeight != null) {
					this.set_percentHeight(this._style.initialPercentHeight);
					this._initialSizeApplied = true;
				}
			}
		}
	}
	,validateComponentData: function() {
		this.behaviours.validateData();
		if(this._compositeBuilder != null) {
			this._compositeBuilder.validateComponentData();
		}
	}
	,validateComponentLayout: function() {
		this.get_layout().refresh();
		while(this.validateComponentAutoSize()) this.get_layout().refresh();
		var sizeChanged = false;
		if(this._componentWidth != this._actualWidth || this._componentHeight != this._actualHeight) {
			this._actualWidth = this._componentWidth;
			this._actualHeight = this._componentHeight;
			this.enforceSizeConstraints();
			if(this.parentComponent != null) {
				var _this = this.parentComponent;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout",false);
				}
			}
			this.onResized();
			this.dispatch(new haxe_ui_events_UIEvent("resize"));
			sizeChanged = true;
		}
		if(this._compositeBuilder != null) {
			if(this._compositeBuilder.validateComponentLayout()) {
				sizeChanged = true;
			}
		}
		return sizeChanged;
	}
	,enforceSizeConstraints: function() {
		if(this.get_style() != null) {
			if(this.get_style().minWidth != null && this._componentWidth < this.get_style().minWidth) {
				this._componentWidth = this._actualWidth = this._width = this.get_style().minWidth;
			}
			if(this.get_style().maxWidth != null && this.get_style().maxPercentWidth == null && this._componentWidth > this.get_style().maxWidth) {
				this._componentWidth = this._actualWidth = this._width = this.get_style().maxWidth;
			} else if(this.get_style().maxWidth == null && this.get_style().maxPercentWidth != null) {
				var p = this;
				var max = 0;
				while(p != null) {
					if(p.get_style() != null && p.get_style().maxPercentWidth == null) {
						max += p.get_width();
						break;
					}
					if(p.get_style() != null && p != this) {
						max -= p.get_style().paddingLeft + p.get_style().paddingRight;
					}
					p = p.parentComponent;
				}
				max = max * this.get_style().maxPercentWidth / 100;
				if(max > 0 && this._componentWidth > max) {
					this._componentWidth = this._actualWidth = this._width = max;
				}
			}
			if(this.get_style().minHeight != null && this._componentHeight < this.get_style().minHeight) {
				this._componentHeight = this._actualHeight = this._height = this.get_style().minHeight;
			}
			if(this.get_style().maxHeight != null && this.get_style().maxPercentHeight == null && this._componentHeight > this.get_style().maxHeight) {
				this._componentHeight = this._actualHeight = this._height = this.get_style().maxHeight;
			} else if(this.get_style().maxHeight == null && this.get_style().maxPercentHeight != null) {
				var p = this;
				var max = 0;
				while(p != null) {
					if(p.get_style() != null && p.get_style().maxPercentHeight == null) {
						max += p.get_height();
						break;
					}
					if(p.get_style() != null && p != this) {
						max -= p.get_style().paddingTop + p.get_style().paddingBottom;
					}
					p = p.parentComponent;
				}
				max = max * this.get_style().maxPercentHeight / 100;
				if(max > 0 && this._componentHeight > max) {
					this._componentHeight = this._actualHeight = this._height = max;
				}
			}
		}
	}
	,validateComponentStyle: function() {
		var s = haxe_ui_Toolkit.styleSheet.buildStyleFor(this);
		if(this.get_styleSheet() != null) {
			var localStyle = this.get_styleSheet().buildStyleFor(this);
			s.apply(localStyle);
		}
		s.apply(this.get_customStyle());
		if(this._style == null || this._style.equalTo(s) == false) {
			var marginsChanged = false;
			if(this.parentComponent != null && this._style != null) {
				marginsChanged = this._style.marginLeft != s.marginLeft || this._style.marginRight != s.marginRight || this._style.marginTop != s.marginTop || this._style.marginBottom != s.marginBottom;
			}
			var bordersChanged = false;
			if(this._style != null && this._style.get_fullBorderSize() != s.get_fullBorderSize()) {
				bordersChanged = true;
			}
			this._style = s;
			this.applyStyle(s);
			if(bordersChanged == true) {
				if(!(this._layout == null || this._layoutLocked == true)) {
					this.invalidateComponent("layout",false);
				}
			}
			if(marginsChanged == true) {
				var _this = this.parentComponent;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout",false);
				}
			}
		}
	}
	,validateComponentPosition: function() {
		this.handlePosition(this._left,this._top,this._style);
		this.onMoved();
		this.dispatch(new haxe_ui_events_UIEvent("move"));
	}
	,updateComponentDisplay: function() {
		if(this.get_componentWidth() == null || this.get_componentHeight() == null) {
			return;
		}
		this.handleSize(this.get_componentWidth(),this.get_componentHeight(),this._style);
		if(this._componentClipRect != null || this.get_style() != null && this.get_style().clip != null && this.get_style().clip == true) {
			this.handleClipRect(this._componentClipRect != null ? this._componentClipRect : new haxe_ui_geom_Rectangle(0,0,this.get_componentWidth(),this.get_componentHeight()));
		}
	}
	,validateComponentAutoSize: function() {
		var invalidate = false;
		if(this.get_autoWidth() == true || this.get_autoHeight() == true) {
			var s = this.get_layout().calcAutoSize();
			if(this.get_autoWidth() == true) {
				if(s.width != this._componentWidth) {
					this._componentWidth = s.width;
					invalidate = true;
				}
			}
			if(this.get_autoHeight() == true) {
				if(s.height != this._componentHeight) {
					this._componentHeight = s.height;
					invalidate = true;
				}
			}
		}
		return invalidate;
	}
	,_pauseAnimationStyleChanges: null
	,applyStyle: function(style) {
		haxe_ui_backend_ComponentImpl.prototype.applyStyle.call(this,style);
		if(style != null && this._initialSizeApplied == false) {
			if((style.initialWidth != null || style.initialPercentWidth != null) && (this.get_width() <= 0 && this.get_percentWidth() == null)) {
				if(style.initialWidth != null) {
					this.set_width(style.initialWidth);
					this._initialSizeApplied = true;
				} else if(style.initialPercentWidth != null) {
					this.set_percentWidth(style.initialPercentWidth);
					this._initialSizeApplied = true;
				}
			}
			if((style.initialHeight != null || style.initialPercentHeight != null) && (this.get_height() <= 0 && this.get_percentHeight() == null)) {
				if(style.initialHeight != null) {
					this.set_height(style.initialHeight);
					this._initialSizeApplied = true;
				} else if(style.initialPercentHeight != null) {
					this.set_percentHeight(style.initialPercentHeight);
					this._initialSizeApplied = true;
				}
			}
		}
		if(style.left != null) {
			this.set_left(style.left);
		}
		if(style.top != null) {
			this.set_top(style.top);
		}
		if(style.percentWidth != null) {
			this._width = null;
			this.set_componentWidth(null);
			this.set_percentWidth(style.percentWidth);
		}
		if(style.percentHeight != null) {
			this._height = null;
			this.set_componentHeight(null);
			this.set_percentHeight(style.percentHeight);
		}
		if(style.width != null) {
			this.set_percentWidth(null);
			this.set_width(style.width);
		}
		if(style.height != null) {
			this.set_percentHeight(null);
			this.set_height(style.height);
		}
		if(style.native != null) {
			this.set_native(style.native);
		}
		if(style.hidden != null) {
			this.set_hidden(style.hidden);
		}
		if(this._pauseAnimationStyleChanges == false) {
			if(style.animationName != null) {
				var animationKeyFrames = haxe_ui_Toolkit.styleSheet.get_animations().h[style.animationName];
				this.applyAnimationKeyFrame(animationKeyFrames,style.animationOptions);
			} else if(this.get_componentAnimation() != null) {
				this.set_componentAnimation(null);
			}
		}
		if(style.pointerEvents != null && style.pointerEvents != "none") {
			if(this.hasEvent("mouseover",$bind(this,this.onPointerEventsMouseOver)) == false) {
				if(style.cursor == null) {
					this.get_customStyle().cursor = "pointer";
				}
				this.registerEvent("mouseover",$bind(this,this.onPointerEventsMouseOver));
			}
			if(this.hasEvent("mouseout",$bind(this,this.onPointerEventsMouseOut)) == false) {
				this.registerEvent("mouseout",$bind(this,this.onPointerEventsMouseOut));
			}
			if(this.hasEvent("mousedown",$bind(this,this.onPointerEventsMouseDown)) == false) {
				this.registerEvent("mousedown",$bind(this,this.onPointerEventsMouseDown));
			}
			if(this.hasEvent("mouseup",$bind(this,this.onPointerEventsMouseUp)) == false) {
				this.registerEvent("mouseup",$bind(this,this.onPointerEventsMouseUp));
			}
			this.handleFrameworkProperty("allowMouseInteraction",true);
		} else if(style.pointerEvents != null) {
			if(this.hasEvent("mouseover",$bind(this,this.onPointerEventsMouseOver)) == true) {
				this.get_customStyle().cursor = null;
				this.unregisterEvent("mouseover",$bind(this,this.onPointerEventsMouseOver));
			}
			if(this.hasEvent("mouseout",$bind(this,this.onPointerEventsMouseOut)) == true) {
				this.unregisterEvent("mouseout",$bind(this,this.onPointerEventsMouseOut));
			}
			if(this.hasEvent("mousedown",$bind(this,this.onPointerEventsMouseDown)) == true) {
				this.unregisterEvent("mousedown",$bind(this,this.onPointerEventsMouseDown));
			}
			if(this.hasEvent("mouseup",$bind(this,this.onPointerEventsMouseUp)) == true) {
				this.unregisterEvent("mouseup",$bind(this,this.onPointerEventsMouseUp));
			}
			this.handleFrameworkProperty("allowMouseInteraction",false);
		}
		if(this._compositeBuilder != null) {
			this._compositeBuilder.applyStyle(style);
		}
	}
	,onPointerEventsMouseOver: function(e) {
		this.addClass(":hover",true,true);
	}
	,onPointerEventsMouseOut: function(e) {
		this.removeClass(":hover",true,true);
	}
	,onPointerEventsMouseDown: function(e) {
		this.addClass(":down",true,true);
	}
	,onPointerEventsMouseUp: function(e) {
		this.removeClass(":down",true,true);
	}
	,applyAnimationKeyFrame: function(animationKeyFrames,options) {
		var _gthis = this;
		if(this._animatable == false || options == null || options.duration == 0 || this._componentAnimation != null && this._componentAnimation.name == animationKeyFrames.id && options.compareToAnimation(this._componentAnimation) == true) {
			return;
		}
		if(this.hasEvent("animationstart")) {
			this.dispatch(new haxe_ui_events_AnimationEvent("animationstart"));
		}
		this.set_componentAnimation(haxe_ui_styles_animation_Animation.createWithKeyFrames(animationKeyFrames,this,options));
		this.get_componentAnimation().run(function() {
			if(_gthis.hasEvent("animationend")) {
				_gthis.dispatch(new haxe_ui_events_AnimationEvent("animationend"));
			}
		});
	}
	,cloneComponent: function() {
		var c = haxe_ui_backend_ComponentImpl.prototype.cloneComponent.call(this);
		if(this.get_styleNames() != null) {
			c.set_styleNames(this.get_styleNames());
		}
		if(this.get_styleString() != null) {
			c.set_styleString(this.get_styleString());
		}
		var tmp = this._ready == false;
		if(this._hidden == true) {
			c.hide();
		}
		if(this.get_autoWidth() == false && this.get_width() > 0) {
			c.set_width(this.get_width());
		}
		if(this.get_autoHeight() == false && this.get_height() > 0) {
			c.set_height(this.get_height());
		}
		if(this.get_customStyle() != null) {
			if(c.get_customStyle() == null) {
				c.set_customStyle(new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null));
			}
			c.get_customStyle().apply(this.get_customStyle());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,get_isComponentClipped: function() {
		if(this._compositeBuilder != null) {
			return this._compositeBuilder.get_isComponentClipped();
		}
		return this.get_componentClipRect() != null;
	}
	,cssName: null
	,get_cssName: function() {
		var cssName = null;
		if(this._compositeBuilder != null) {
			cssName = this._compositeBuilder.get_cssName();
		}
		if(cssName == null) {
			var c = js_Boot.getClass(this);
			cssName = c.__name__.split(".").pop().toLowerCase();
		}
		return cssName;
	}
	,isComponentSolid: null
	,get_isComponentSolid: function() {
		if(this.get_style() == null) {
			return false;
		}
		if(this.get_style().backgroundColor != null || this.get_style().backgroundImage != null) {
			if(this.get_style().opacity == null || this.get_style().opacity > 0) {
				if(this.get_style().backgroundOpacity == null || this.get_style().backgroundOpacity > 0) {
					return true;
				}
			}
		}
		return false;
	}
	,registerBehaviours: function() {
		haxe_ui_backend_ComponentImpl.prototype.registerBehaviours.call(this);
	}
	,get_color: function() {
		if(this.get_customStyle().color != null) {
			return this.get_customStyle().color;
		}
		if(this.get_style() == null || this.get_style().color == null) {
			return null;
		}
		return this.get_style().color;
	}
	,set_color: function(value) {
		if(this.get_customStyle().color == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().color = null;
		} else {
			this.get_customStyle().color = haxe_ui_util_Color.toInt(value);
		}
		this.invalidateComponent("style",false);
		return value;
	}
	,get_backgroundColor: function() {
		if(this.get_customStyle().backgroundColor != null) {
			return this.get_customStyle().backgroundColor;
		}
		if(this.get_style() == null || this.get_style().backgroundColor == null) {
			return null;
		}
		return this.get_style().backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(this.get_customStyle().backgroundColor == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().backgroundColor = null;
		} else {
			this.get_customStyle().backgroundColor = haxe_ui_util_Color.toInt(value);
		}
		this.invalidateComponent("style",false);
		return value;
	}
	,get_backgroundColorEnd: function() {
		if(this.get_customStyle().backgroundColorEnd != null) {
			return this.get_customStyle().backgroundColorEnd;
		}
		if(this.get_style() == null || this.get_style().backgroundColorEnd == null) {
			return null;
		}
		return this.get_style().backgroundColorEnd;
	}
	,set_backgroundColorEnd: function(value) {
		if(this.get_customStyle().backgroundColorEnd == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().backgroundColorEnd = null;
		} else {
			this.get_customStyle().backgroundColorEnd = haxe_ui_util_Color.toInt(value);
		}
		this.invalidateComponent("style",false);
		return value;
	}
	,get_backgroundImage: function() {
		if(this.get_customStyle().backgroundImage != null) {
			return this.get_customStyle().backgroundImage;
		}
		if(this.get_style() == null || this.get_style().backgroundImage == null) {
			return null;
		}
		return this.get_style().backgroundImage;
	}
	,set_backgroundImage: function(value) {
		if(haxe_ui_util_Variant.eq(this.get_customStyle().backgroundImage,value)) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().backgroundImage = null;
		} else {
			this.get_customStyle().backgroundImage = value;
		}
		this.invalidateComponent("style",false);
		return value;
	}
	,get_borderColor: function() {
		if(this.get_customStyle().borderColor != null) {
			return this.get_customStyle().borderColor;
		}
		if(this.get_style() == null || this.get_style().borderColor == null) {
			return null;
		}
		return this.get_style().borderColor;
	}
	,set_borderColor: function(value) {
		if(this.get_customStyle().borderColor == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().borderColor = null;
		} else {
			this.get_customStyle().borderColor = haxe_ui_util_Color.toInt(value);
		}
		this.get_customStyle().borderTopColor = haxe_ui_util_Color.toInt(value);
		this.get_customStyle().borderLeftColor = haxe_ui_util_Color.toInt(value);
		this.get_customStyle().borderBottomColor = haxe_ui_util_Color.toInt(value);
		this.get_customStyle().borderRightColor = haxe_ui_util_Color.toInt(value);
		this.invalidateComponent("style",false);
		return value;
	}
	,get_borderSize: function() {
		if(this.get_customStyle().borderSize != null) {
			return this.get_customStyle().borderSize;
		}
		if(this.get_style() == null || this.get_style().borderSize == null) {
			return null;
		}
		return this.get_style().borderSize;
	}
	,set_borderSize: function(value) {
		if(this.get_customStyle().borderSize == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().borderSize = null;
		} else {
			this.get_customStyle().borderSize = value;
		}
		this.get_customStyle().borderTopSize = value;
		this.get_customStyle().borderLeftSize = value;
		this.get_customStyle().borderBottomSize = value;
		this.get_customStyle().borderRightSize = value;
		this.invalidateComponent("style",false);
		return value;
	}
	,get_borderRadius: function() {
		if(this.get_customStyle().borderRadius != null) {
			return this.get_customStyle().borderRadius;
		}
		if(this.get_style() == null || this.get_style().borderRadius == null) {
			return null;
		}
		return this.get_style().borderRadius;
	}
	,set_borderRadius: function(value) {
		if(this.get_customStyle().borderRadius == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().borderRadius = null;
		} else {
			this.get_customStyle().borderRadius = value;
		}
		this.invalidateComponent("style",false);
		return value;
	}
	,get_padding: function() {
		if(this.get_customStyle().padding != null) {
			return this.get_customStyle().padding;
		}
		if(this.get_style() == null || this.get_style().padding == null) {
			return null;
		}
		return this.get_style().padding;
	}
	,set_padding: function(value) {
		if(this.get_customStyle().padding == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().set_padding(null);
		} else {
			this.get_customStyle().set_padding(value);
		}
		this.invalidateComponent("style",false);
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout",false);
		}
		return value;
	}
	,get_paddingLeft: function() {
		if(this.get_customStyle().paddingLeft != null) {
			return this.get_customStyle().paddingLeft;
		}
		if(this.get_style() == null || this.get_style().paddingLeft == null) {
			return null;
		}
		return this.get_style().paddingLeft;
	}
	,set_paddingLeft: function(value) {
		if(this.get_customStyle().paddingLeft == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().paddingLeft = null;
		} else {
			this.get_customStyle().paddingLeft = value;
		}
		this.invalidateComponent("style",false);
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout",false);
		}
		return value;
	}
	,get_paddingRight: function() {
		if(this.get_customStyle().paddingRight != null) {
			return this.get_customStyle().paddingRight;
		}
		if(this.get_style() == null || this.get_style().paddingRight == null) {
			return null;
		}
		return this.get_style().paddingRight;
	}
	,set_paddingRight: function(value) {
		if(this.get_customStyle().paddingRight == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().paddingRight = null;
		} else {
			this.get_customStyle().paddingRight = value;
		}
		this.invalidateComponent("style",false);
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout",false);
		}
		return value;
	}
	,get_paddingTop: function() {
		if(this.get_customStyle().paddingTop != null) {
			return this.get_customStyle().paddingTop;
		}
		if(this.get_style() == null || this.get_style().paddingTop == null) {
			return null;
		}
		return this.get_style().paddingTop;
	}
	,set_paddingTop: function(value) {
		if(this.get_customStyle().paddingTop == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().paddingTop = null;
		} else {
			this.get_customStyle().paddingTop = value;
		}
		this.invalidateComponent("style",false);
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout",false);
		}
		return value;
	}
	,get_paddingBottom: function() {
		if(this.get_customStyle().paddingBottom != null) {
			return this.get_customStyle().paddingBottom;
		}
		if(this.get_style() == null || this.get_style().paddingBottom == null) {
			return null;
		}
		return this.get_style().paddingBottom;
	}
	,set_paddingBottom: function(value) {
		if(this.get_customStyle().paddingBottom == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().paddingBottom = null;
		} else {
			this.get_customStyle().paddingBottom = value;
		}
		this.invalidateComponent("style",false);
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout",false);
		}
		return value;
	}
	,get_marginLeft: function() {
		if(this.get_customStyle().marginLeft != null) {
			return this.get_customStyle().marginLeft;
		}
		if(this.get_style() == null || this.get_style().marginLeft == null) {
			return null;
		}
		return this.get_style().marginLeft;
	}
	,set_marginLeft: function(value) {
		if(this.get_customStyle().marginLeft == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().marginLeft = null;
		} else {
			this.get_customStyle().marginLeft = value;
		}
		this.invalidateComponent("style",false);
		return value;
	}
	,get_marginRight: function() {
		if(this.get_customStyle().marginRight != null) {
			return this.get_customStyle().marginRight;
		}
		if(this.get_style() == null || this.get_style().marginRight == null) {
			return null;
		}
		return this.get_style().marginRight;
	}
	,set_marginRight: function(value) {
		if(this.get_customStyle().marginRight == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().marginRight = null;
		} else {
			this.get_customStyle().marginRight = value;
		}
		this.invalidateComponent("style",false);
		return value;
	}
	,get_marginTop: function() {
		if(this.get_customStyle().marginTop != null) {
			return this.get_customStyle().marginTop;
		}
		if(this.get_style() == null || this.get_style().marginTop == null) {
			return null;
		}
		return this.get_style().marginTop;
	}
	,set_marginTop: function(value) {
		if(this.get_customStyle().marginTop == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().marginTop = null;
		} else {
			this.get_customStyle().marginTop = value;
		}
		this.invalidateComponent("style",false);
		return value;
	}
	,get_marginBottom: function() {
		if(this.get_customStyle().marginBottom != null) {
			return this.get_customStyle().marginBottom;
		}
		if(this.get_style() == null || this.get_style().marginBottom == null) {
			return null;
		}
		return this.get_style().marginBottom;
	}
	,set_marginBottom: function(value) {
		if(this.get_customStyle().marginBottom == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().marginBottom = null;
		} else {
			this.get_customStyle().marginBottom = value;
		}
		this.invalidateComponent("style",false);
		return value;
	}
	,get_clip: function() {
		if(this.get_customStyle().clip != null) {
			return this.get_customStyle().clip;
		}
		if(this.get_style() == null || this.get_style().clip == null) {
			return null;
		}
		return this.get_style().clip;
	}
	,set_clip: function(value) {
		if(this.get_customStyle().clip == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().clip = null;
		} else {
			this.get_customStyle().clip = value;
		}
		this.invalidateComponent("style",false);
		return value;
	}
	,get_opacity: function() {
		if(this.get_customStyle().opacity != null) {
			return this.get_customStyle().opacity;
		}
		if(this.get_style() == null || this.get_style().opacity == null) {
			return null;
		}
		return this.get_style().opacity;
	}
	,set_opacity: function(value) {
		if(this.get_customStyle().opacity == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().opacity = null;
		} else {
			this.get_customStyle().opacity = value;
		}
		this.invalidateComponent("style",false);
		return value;
	}
	,get_horizontalAlign: function() {
		if(this.get_customStyle().horizontalAlign != null) {
			return this.get_customStyle().horizontalAlign;
		}
		if(this.get_style() == null || this.get_style().horizontalAlign == null) {
			return null;
		}
		return this.get_style().horizontalAlign;
	}
	,set_horizontalAlign: function(value) {
		if(this.get_customStyle().horizontalAlign == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().horizontalAlign = null;
		} else {
			this.get_customStyle().horizontalAlign = value;
		}
		this.invalidateComponent("style",false);
		if(this.parentComponent != null) {
			var _this = this.parentComponent;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout",false);
			}
		}
		return value;
	}
	,get_verticalAlign: function() {
		if(this.get_customStyle().verticalAlign != null) {
			return this.get_customStyle().verticalAlign;
		}
		if(this.get_style() == null || this.get_style().verticalAlign == null) {
			return null;
		}
		return this.get_style().verticalAlign;
	}
	,set_verticalAlign: function(value) {
		if(this.get_customStyle().verticalAlign == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().verticalAlign = null;
		} else {
			this.get_customStyle().verticalAlign = value;
		}
		this.invalidateComponent("style",false);
		if(this.parentComponent != null) {
			var _this = this.parentComponent;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout",false);
			}
		}
		return value;
	}
	,self: function() {
		return new haxe_ui_core_Component();
	}
	,_internal__onDragStart: null
	,onDragStart: null
	,set_onDragStart: function(value) {
		if(this._internal__onDragStart != null) {
			this.unregisterEvent("dragstart",this._internal__onDragStart);
			this._internal__onDragStart = null;
		}
		if(value != null) {
			this._internal__onDragStart = value;
			this.registerEvent("dragstart",value);
		}
		return value;
	}
	,_internal__onDrag: null
	,onDrag: null
	,set_onDrag: function(value) {
		if(this._internal__onDrag != null) {
			this.unregisterEvent("drag",this._internal__onDrag);
			this._internal__onDrag = null;
		}
		if(value != null) {
			this._internal__onDrag = value;
			this.registerEvent("drag",value);
		}
		return value;
	}
	,_internal__onDragEnd: null
	,onDragEnd: null
	,set_onDragEnd: function(value) {
		if(this._internal__onDragEnd != null) {
			this.unregisterEvent("dragend",this._internal__onDragEnd);
			this._internal__onDragEnd = null;
		}
		if(value != null) {
			this._internal__onDragEnd = value;
			this.registerEvent("dragend",value);
		}
		return value;
	}
	,_internal__onAnimationStart: null
	,onAnimationStart: null
	,set_onAnimationStart: function(value) {
		if(this._internal__onAnimationStart != null) {
			this.unregisterEvent("animationstart",this._internal__onAnimationStart);
			this._internal__onAnimationStart = null;
		}
		if(value != null) {
			this._internal__onAnimationStart = value;
			this.registerEvent("animationstart",value);
		}
		return value;
	}
	,_internal__onAnimationFrame: null
	,onAnimationFrame: null
	,set_onAnimationFrame: function(value) {
		if(this._internal__onAnimationFrame != null) {
			this.unregisterEvent("animationframe",this._internal__onAnimationFrame);
			this._internal__onAnimationFrame = null;
		}
		if(value != null) {
			this._internal__onAnimationFrame = value;
			this.registerEvent("animationframe",value);
		}
		return value;
	}
	,_internal__onAnimationEnd: null
	,onAnimationEnd: null
	,set_onAnimationEnd: function(value) {
		if(this._internal__onAnimationEnd != null) {
			this.unregisterEvent("animationend",this._internal__onAnimationEnd);
			this._internal__onAnimationEnd = null;
		}
		if(value != null) {
			this._internal__onAnimationEnd = value;
			this.registerEvent("animationend",value);
		}
		return value;
	}
	,_internal__onClick: null
	,onClick: null
	,set_onClick: function(value) {
		if(this._internal__onClick != null) {
			this.unregisterEvent("click",this._internal__onClick);
			this._internal__onClick = null;
		}
		if(value != null) {
			this._internal__onClick = value;
			this.registerEvent("click",value);
		}
		return value;
	}
	,_internal__onMouseOver: null
	,onMouseOver: null
	,set_onMouseOver: function(value) {
		if(this._internal__onMouseOver != null) {
			this.unregisterEvent("mouseover",this._internal__onMouseOver);
			this._internal__onMouseOver = null;
		}
		if(value != null) {
			this._internal__onMouseOver = value;
			this.registerEvent("mouseover",value);
		}
		return value;
	}
	,_internal__onMouseOut: null
	,onMouseOut: null
	,set_onMouseOut: function(value) {
		if(this._internal__onMouseOut != null) {
			this.unregisterEvent("mouseout",this._internal__onMouseOut);
			this._internal__onMouseOut = null;
		}
		if(value != null) {
			this._internal__onMouseOut = value;
			this.registerEvent("mouseout",value);
		}
		return value;
	}
	,_internal__onDblClick: null
	,onDblClick: null
	,set_onDblClick: function(value) {
		if(this._internal__onDblClick != null) {
			this.unregisterEvent("doubleclick",this._internal__onDblClick);
			this._internal__onDblClick = null;
		}
		if(value != null) {
			this._internal__onDblClick = value;
			this.registerEvent("doubleclick",value);
		}
		return value;
	}
	,_internal__onRightClick: null
	,onRightClick: null
	,set_onRightClick: function(value) {
		if(this._internal__onRightClick != null) {
			this.unregisterEvent("rightclick",this._internal__onRightClick);
			this._internal__onRightClick = null;
		}
		if(value != null) {
			this._internal__onRightClick = value;
			this.registerEvent("rightclick",value);
		}
		return value;
	}
	,_internal__onChange: null
	,onChange: null
	,set_onChange: function(value) {
		if(this._internal__onChange != null) {
			this.unregisterEvent("change",this._internal__onChange);
			this._internal__onChange = null;
		}
		if(value != null) {
			this._internal__onChange = value;
			this.registerEvent("change",value);
		}
		return value;
	}
	,__class__: haxe_ui_core_Component
	,__properties__: $extend(haxe_ui_backend_ComponentImpl.prototype.__properties__,{set_onChange:"set_onChange",set_onRightClick:"set_onRightClick",set_onDblClick:"set_onDblClick",set_onMouseOut:"set_onMouseOut",set_onMouseOver:"set_onMouseOver",set_onClick:"set_onClick",set_onAnimationEnd:"set_onAnimationEnd",set_onAnimationFrame:"set_onAnimationFrame",set_onAnimationStart:"set_onAnimationStart",set_onDragEnd:"set_onDragEnd",set_onDrag:"set_onDrag",set_onDragStart:"set_onDragStart",set_verticalAlign:"set_verticalAlign",get_verticalAlign:"get_verticalAlign",set_horizontalAlign:"set_horizontalAlign",get_horizontalAlign:"get_horizontalAlign",set_opacity:"set_opacity",get_opacity:"get_opacity",set_clip:"set_clip",get_clip:"get_clip",set_marginBottom:"set_marginBottom",get_marginBottom:"get_marginBottom",set_marginTop:"set_marginTop",get_marginTop:"get_marginTop",set_marginRight:"set_marginRight",get_marginRight:"get_marginRight",set_marginLeft:"set_marginLeft",get_marginLeft:"get_marginLeft",set_paddingBottom:"set_paddingBottom",get_paddingBottom:"get_paddingBottom",set_paddingTop:"set_paddingTop",get_paddingTop:"get_paddingTop",set_paddingRight:"set_paddingRight",get_paddingRight:"get_paddingRight",set_paddingLeft:"set_paddingLeft",get_paddingLeft:"get_paddingLeft",set_padding:"set_padding",get_padding:"get_padding",set_borderRadius:"set_borderRadius",get_borderRadius:"get_borderRadius",set_borderSize:"set_borderSize",get_borderSize:"get_borderSize",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_backgroundImage:"set_backgroundImage",get_backgroundImage:"get_backgroundImage",set_backgroundColorEnd:"set_backgroundColorEnd",get_backgroundColorEnd:"get_backgroundColorEnd",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_color:"set_color",get_color:"get_color",get_isComponentSolid:"get_isComponentSolid",get_cssName:"get_cssName",get_namedComponents:"get_namedComponents",set_scriptAccess:"set_scriptAccess",get_scriptAccess:"get_scriptAccess",set_layout:"set_layout",get_layout:"get_layout",set_includeInLayout:"set_includeInLayout",get_includeInLayout:"get_includeInLayout",set_styleSheet:"set_styleSheet",get_styleSheet:"get_styleSheet",set_styleString:"set_styleString",get_styleString:"get_styleString",set_styleNames:"set_styleNames",get_styleNames:"get_styleNames",set_customStyle:"set_customStyle",get_customStyle:"get_customStyle",set_hidden:"set_hidden",get_hidden:"get_hidden",get_numComponents:"get_numComponents",get_rootComponent:"get_rootComponent",set_dragOptions:"set_dragOptions",get_dragOptions:"get_dragOptions",set_dragInitiator:"set_dragInitiator",get_dragInitiator:"get_dragInitiator",set_draggable:"set_draggable",get_draggable:"get_draggable",get_screen:"get_screen",set_componentAnimation:"set_componentAnimation",get_componentAnimation:"get_componentAnimation",set_animatable:"set_animatable",get_animatable:"get_animatable",set_native:"set_native",get_native:"get_native"})
});
var haxe_ui_containers_Box = function() {
	this._direction = null;
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.containers.Box"] = haxe_ui_containers_Box;
haxe_ui_containers_Box.__name__ = "haxe.ui.containers.Box";
haxe_ui_containers_Box.__super__ = haxe_ui_core_Component;
haxe_ui_containers_Box.prototype = $extend(haxe_ui_core_Component.prototype,{
	_layoutName: null
	,get_layoutName: function() {
		return this._layoutName;
	}
	,set_layoutName: function(value) {
		if(this._layoutName == value) {
			return value;
		}
		this._layoutName = value;
		this.set_layout(haxe_ui_layouts_LayoutFactory.createFromName(this.get_layoutName()));
		return value;
	}
	,createDefaults: function() {
		haxe_ui_core_Component.prototype.createDefaults.call(this);
		if(this._defaultLayoutClass == null) {
			this._defaultLayoutClass = haxe_ui_layouts_DefaultLayout;
		}
	}
	,_direction: null
	,applyStyle: function(style) {
		haxe_ui_core_Component.prototype.applyStyle.call(this,style);
		if(style.direction != null && style.direction != this._direction) {
			this._direction = style.direction;
			this.set_layout(haxe_ui_layouts_LayoutFactory.createFromName(this._direction));
		}
	}
	,registerComposite: function() {
		haxe_ui_core_Component.prototype.registerComposite.call(this);
		this._defaultLayoutClass = haxe_ui_layouts_DefaultLayout;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
		this.behaviours.register("icon",haxe_ui_behaviours_DefaultBehaviour);
	}
	,get_icon: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("icon"));
	}
	,set_icon: function(value) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			if(_g.c == String) {
				if(value != null && value.indexOf("{{") != -1 && value.indexOf("}}") != -1) {
					haxe_ui_locale_LocaleManager.get_instance().registerComponent(this,"icon",null,value);
					return value;
				}
			}
		}
		this.behaviours.set("icon",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"icon"));
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if(this.get_layoutName() != null) {
			c.set_layoutName(this.get_layoutName());
		}
		if(this.get_icon() != null) {
			c.set_icon(this.get_icon());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_Box();
	}
	,__class__: haxe_ui_containers_Box
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{set_icon:"set_icon",get_icon:"get_icon",set_layoutName:"set_layoutName",get_layoutName:"get_layoutName"})
});
var haxe_ui_containers_VBox = function() {
	haxe_ui_containers_Box.call(this);
	this.set_layout(new haxe_ui_layouts_VerticalLayout());
};
$hxClasses["haxe.ui.containers.VBox"] = haxe_ui_containers_VBox;
haxe_ui_containers_VBox.__name__ = "haxe.ui.containers.VBox";
haxe_ui_containers_VBox.__super__ = haxe_ui_containers_Box;
haxe_ui_containers_VBox.prototype = $extend(haxe_ui_containers_Box.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_VBox();
	}
	,__class__: haxe_ui_containers_VBox
});
var Collapsible = function() {
	haxe_ui_containers_VBox.call(this);
};
$hxClasses["Collapsible"] = Collapsible;
Collapsible.__name__ = "Collapsible";
Collapsible.__super__ = haxe_ui_containers_VBox;
Collapsible.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	registerComposite: function() {
		haxe_ui_containers_VBox.prototype.registerComposite.call(this);
		this._internalEventsClass = CollapsibleEvents;
		this._compositeBuilderClass = CollapsibleBuilder;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
		this.behaviours.register("text",_$Collapsible_TextBehaviour);
		this.behaviours.register("collapsed",_$Collapsible_CollapsedBehaviour,haxe_ui_util_Variant.fromBool(true));
	}
	,get_collapsed: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("collapsed"));
	}
	,set_collapsed: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("collapsed",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"collapsed"));
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		c.set_collapsed(this.get_collapsed());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new Collapsible();
	}
	,__class__: Collapsible
	,__properties__: $extend(haxe_ui_containers_VBox.prototype.__properties__,{set_collapsed:"set_collapsed",get_collapsed:"get_collapsed"})
});
var haxe_ui_behaviours_Behaviour = function(component) {
	this.config = null;
	this._component = component;
};
$hxClasses["haxe.ui.behaviours.Behaviour"] = haxe_ui_behaviours_Behaviour;
haxe_ui_behaviours_Behaviour.__name__ = "haxe.ui.behaviours.Behaviour";
haxe_ui_behaviours_Behaviour.prototype = {
	config: null
	,_component: null
	,id: null
	,set: function(value) {
	}
	,setDynamic: function(value) {
		this.set(haxe_ui_util_Variant.fromDynamic(value));
	}
	,detatch: function() {
	}
	,get: function() {
		return null;
	}
	,getDynamic: function() {
		return haxe_ui_util_Variant.toDynamic(this.get());
	}
	,update: function() {
	}
	,call: function(param) {
		return null;
	}
	,getConfigValue: function(name,defaultValue) {
		if(this.config == null) {
			return defaultValue;
		}
		if(Object.prototype.hasOwnProperty.call(this.config.h,name) == false) {
			return defaultValue;
		}
		return this.config.h[name];
	}
	,getConfigValueBool: function(name,defaultValue) {
		if(defaultValue == null) {
			defaultValue = false;
		}
		var v = defaultValue;
		var s = this.getConfigValue(name);
		if(s != null) {
			v = s == "true";
		}
		return v;
	}
	,__class__: haxe_ui_behaviours_Behaviour
};
var haxe_ui_behaviours_ValueBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.behaviours.ValueBehaviour"] = haxe_ui_behaviours_ValueBehaviour;
haxe_ui_behaviours_ValueBehaviour.__name__ = "haxe.ui.behaviours.ValueBehaviour";
haxe_ui_behaviours_ValueBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_behaviours_ValueBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	_previousValue: null
	,_value: null
	,get: function() {
		return this._value;
	}
	,set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this._value)) {
			return;
		}
		this._previousValue = this._value;
		this._value = value;
	}
	,__class__: haxe_ui_behaviours_ValueBehaviour
});
var haxe_ui_behaviours_IValidatingBehaviour = function() { };
$hxClasses["haxe.ui.behaviours.IValidatingBehaviour"] = haxe_ui_behaviours_IValidatingBehaviour;
haxe_ui_behaviours_IValidatingBehaviour.__name__ = "haxe.ui.behaviours.IValidatingBehaviour";
haxe_ui_behaviours_IValidatingBehaviour.__isInterface__ = true;
haxe_ui_behaviours_IValidatingBehaviour.prototype = {
	validate: null
	,__class__: haxe_ui_behaviours_IValidatingBehaviour
};
var haxe_ui_behaviours_DataBehaviour = function(component) {
	haxe_ui_behaviours_ValueBehaviour.call(this,component);
};
$hxClasses["haxe.ui.behaviours.DataBehaviour"] = haxe_ui_behaviours_DataBehaviour;
haxe_ui_behaviours_DataBehaviour.__name__ = "haxe.ui.behaviours.DataBehaviour";
haxe_ui_behaviours_DataBehaviour.__interfaces__ = [haxe_ui_behaviours_IValidatingBehaviour];
haxe_ui_behaviours_DataBehaviour.__super__ = haxe_ui_behaviours_ValueBehaviour;
haxe_ui_behaviours_DataBehaviour.prototype = $extend(haxe_ui_behaviours_ValueBehaviour.prototype,{
	_dataInvalid: null
	,set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this.get())) {
			return;
		}
		this._previousValue = this._value;
		this._value = value;
		this.invalidateData();
	}
	,validate: function() {
		if(this._dataInvalid) {
			this._dataInvalid = false;
			this.validateData();
		}
	}
	,invalidateData: function() {
		this._dataInvalid = true;
		this._component.invalidateComponent("data",false);
	}
	,validateData: function() {
	}
	,__class__: haxe_ui_behaviours_DataBehaviour
});
var _$Collapsible_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["_Collapsible.TextBehaviour"] = _$Collapsible_TextBehaviour;
_$Collapsible_TextBehaviour.__name__ = "_Collapsible.TextBehaviour";
_$Collapsible_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
_$Collapsible_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var button = this._component.findComponent("collapsible-button",haxe_ui_components_Button);
		if(button != null) {
			button.set_text(haxe_ui_util_Variant.toString(this._value));
		}
	}
	,__class__: _$Collapsible_TextBehaviour
});
var _$Collapsible_CollapsedBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["_Collapsible.CollapsedBehaviour"] = _$Collapsible_CollapsedBehaviour;
_$Collapsible_CollapsedBehaviour.__name__ = "_Collapsible.CollapsedBehaviour";
_$Collapsible_CollapsedBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
_$Collapsible_CollapsedBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var button = this._component.findComponent("collapsible-button",haxe_ui_components_Button);
		if(button != null) {
			button.set_selected(haxe_ui_util_Variant.toBool(haxe_ui_util_Variant.invert(this._value)));
		}
		var content = this._component.findComponent("collapsible-content",haxe_ui_core_Component);
		if(content != null) {
			content.set_hidden(haxe_ui_util_Variant.toBool(this._value));
		}
		this._component.dispatch(new haxe_ui_events_UIEvent("change"));
	}
	,__class__: _$Collapsible_CollapsedBehaviour
});
var haxe_ui_events_Events = function(target) {
	this._target = target;
};
$hxClasses["haxe.ui.events.Events"] = haxe_ui_events_Events;
haxe_ui_events_Events.__name__ = "haxe.ui.events.Events";
haxe_ui_events_Events.prototype = {
	_target: null
	,register: function() {
	}
	,unregister: function() {
	}
	,registerEvent: function(type,listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(this.hasEvent(type,listener) == false) {
			this._target.registerEvent(type,listener,priority);
		}
	}
	,hasEvent: function(type,listener) {
		return this._target.hasEvent(type,listener);
	}
	,unregisterEvent: function(type,listener) {
		this._target.unregisterEvent(type,listener);
	}
	,dispatch: function(event) {
		this._target.dispatch(event);
	}
	,__class__: haxe_ui_events_Events
};
var CollapsibleEvents = function(collapsible) {
	haxe_ui_events_Events.call(this,collapsible);
	this._collapsible = collapsible;
};
$hxClasses["CollapsibleEvents"] = CollapsibleEvents;
CollapsibleEvents.__name__ = "CollapsibleEvents";
CollapsibleEvents.__super__ = haxe_ui_events_Events;
CollapsibleEvents.prototype = $extend(haxe_ui_events_Events.prototype,{
	_collapsible: null
	,register: function() {
		var button = this._collapsible.findComponent("collapsible-button",haxe_ui_components_Button);
		if(button != null && button.hasEvent("change",$bind(this,this.onButtonChanged)) == false) {
			button.registerEvent("change",$bind(this,this.onButtonChanged));
		}
	}
	,unregister: function() {
		var button = this._collapsible.findComponent("collapsible-button",haxe_ui_components_Button);
		if(button != null) {
			button.unregisterEvent("change",$bind(this,this.onButtonChanged));
		}
	}
	,onButtonChanged: function(event) {
		var button = this._collapsible.findComponent("collapsible-button",haxe_ui_components_Button);
		this._collapsible.set_collapsed(!button.get_selected());
	}
	,__class__: CollapsibleEvents
});
var haxe_ui_core_CompositeBuilder = function(component) {
	this._component = component;
};
$hxClasses["haxe.ui.core.CompositeBuilder"] = haxe_ui_core_CompositeBuilder;
haxe_ui_core_CompositeBuilder.__name__ = "haxe.ui.core.CompositeBuilder";
haxe_ui_core_CompositeBuilder.prototype = {
	_component: null
	,create: function() {
	}
	,destroy: function() {
	}
	,onInitialize: function() {
	}
	,onReady: function() {
	}
	,show: function() {
		return false;
	}
	,hide: function() {
		return false;
	}
	,get_numComponents: function() {
		return null;
	}
	,get_cssName: function() {
		return null;
	}
	,addComponent: function(child) {
		return null;
	}
	,addComponentAt: function(child,index) {
		return null;
	}
	,removeComponent: function(child,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		return null;
	}
	,removeComponentAt: function(index,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		return null;
	}
	,removeAllComponents: function(dispose) {
		if(dispose == null) {
			dispose = true;
		}
		return false;
	}
	,getComponentIndex: function(child) {
		return -2147483648;
	}
	,setComponentIndex: function(child,index) {
		return null;
	}
	,getComponentAt: function(index) {
		return null;
	}
	,validateComponentLayout: function() {
		return false;
	}
	,validateComponentData: function() {
	}
	,applyStyle: function(style) {
	}
	,onComponentAdded: function(child) {
	}
	,onComponentRemoved: function(child) {
	}
	,findComponent: function(criteria,type,recursive,searchType) {
		var _g = 0;
		var _g1 = this.get_numComponents();
		while(_g < _g1) {
			var i = _g++;
			var c = this.getComponentAt(i);
			var match = c.findComponent(criteria,type,recursive,searchType);
			if(match != null) {
				return match;
			}
		}
		return null;
	}
	,findComponents: function(styleName,type,maxDepth) {
		if(maxDepth == null) {
			maxDepth = 5;
		}
		return null;
	}
	,isComponentClipped: null
	,get_isComponentClipped: function() {
		return this._component.get_componentClipRect() != null;
	}
	,__class__: haxe_ui_core_CompositeBuilder
	,__properties__: {get_isComponentClipped:"get_isComponentClipped",get_cssName:"get_cssName",get_numComponents:"get_numComponents"}
};
var CollapsibleBuilder = function(collapsible) {
	haxe_ui_core_CompositeBuilder.call(this,collapsible);
	this._collapsible = collapsible;
	this._header = new haxe_ui_containers_Box();
	this._header.addClass("collapsible-header");
	this._header.set_percentWidth(100);
	var button = new haxe_ui_components_Button();
	button.set_toggle(true);
	button.set_text("Collapsible");
	button.addClass("collapsible-button");
	button.set_id("collapsible-button");
	button.set_scriptAccess(false);
	this._header.addComponent(button);
	this._collapsible.addComponent(this._header);
	this._content = new haxe_ui_containers_VBox();
	this._content.addClass("collapsible-content");
	this._content.set_id("collapsible-content");
	this._content.set_scriptAccess(false);
	this._content.hide();
	this._collapsible.addComponent(this._content);
	this._collapsible.registerInternalEvents(null,true);
};
$hxClasses["CollapsibleBuilder"] = CollapsibleBuilder;
CollapsibleBuilder.__name__ = "CollapsibleBuilder";
CollapsibleBuilder.__super__ = haxe_ui_core_CompositeBuilder;
CollapsibleBuilder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_collapsible: null
	,_header: null
	,_content: null
	,addComponent: function(child) {
		if(child != this._header && child != this._content) {
			return this._content.addComponent(child);
		}
		return null;
	}
	,removeComponent: function(child,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		if(child != this._header && child != this._content) {
			return this._content.removeComponent(child,dispose,invalidate);
		}
		return null;
	}
	,__class__: CollapsibleBuilder
});
var DateTools = function() { };
$hxClasses["DateTools"] = DateTools;
DateTools.__name__ = "DateTools";
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new haxe_exceptions_NotImplementedException("Date.format %" + e + "- not implemented yet.",null,{ fileName : "DateTools.hx", lineNumber : 101, className : "DateTools", methodName : "__format_get"});
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len = f.length - p;
	r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
DateTools.delta = function(d,t) {
	return new Date(d.getTime() + t);
};
DateTools.getMonthDays = function(d) {
	var month = d.getMonth();
	var year = d.getFullYear();
	if(month != 1) {
		return DateTools.DAYS_OF_MONTH[month];
	}
	var isB = year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
	if(isB) {
		return 29;
	} else {
		return 28;
	}
};
DateTools.seconds = function(n) {
	return n * 1000.0;
};
DateTools.minutes = function(n) {
	return n * 60.0 * 1000.0;
};
DateTools.hours = function(n) {
	return n * 60.0 * 60.0 * 1000.0;
};
DateTools.days = function(n) {
	return n * 24.0 * 60.0 * 60.0 * 1000.0;
};
DateTools.parse = function(t) {
	var s = t / 1000;
	var m = s / 60;
	var h = m / 60;
	return { ms : t % 1000, seconds : s % 60 | 0, minutes : m % 60 | 0, hours : h % 24 | 0, days : h / 24 | 0};
};
DateTools.make = function(o) {
	return o.ms + 1000.0 * (o.seconds + 60.0 * (o.minutes + 60.0 * (o.hours + 24.0 * o.days)));
};
DateTools.makeUtc = function(year,month,day,hour,min,sec) {
	return Date.UTC(year,month,day,hour,min,sec);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.escape = function(s) {
	return s.replace(EReg.escapeRe,"\\$&");
};
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedLeft: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var EnumValue = {};
EnumValue.match = function(this1,pattern) {
	return false;
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) {
			i = 0;
		}
	}
	while(i < len) {
		if(((a[i]) === obj)) {
			return i;
		}
		++i;
	}
	return -1;
};
HxOverrides.lastIndexOf = function(a,obj,i) {
	var len = a.length;
	if(i >= len) {
		i = len - 1;
	} else if(i < 0) {
		i += len;
	}
	while(i >= 0) {
		if(((a[i]) === obj)) {
			return i;
		}
		--i;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
HxOverrides.keyValueIter = function(a) {
	return new haxe_iterators_ArrayKeyValueIterator(a);
};
HxOverrides.now = function() {
	return Date.now();
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	haxe_ui_Toolkit.set_theme("dark");
	var app = new haxe_ui_HaxeUIApp();
	app.ready(function() {
		app.addComponent(new MainView());
		app.start();
	});
	var s = "";
	var _g = 0;
	var _g1 = Type.getClassFields(vision_Vision);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		s += "\"" + f + "\" => \"" + (f.charAt(0).toUpperCase() + f.substring(1)) + "\"\n";
	}
	haxe_Log.trace(s,{ fileName : "src/Main.hx", lineNumber : 52, className : "Main", methodName : "main"});
	var s = "switch filterId {";
	var _g = 0;
	var _g1 = Type.getClassFields(vision_Vision);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		s += "case \"" + f + "\": ui = new " + (f.charAt(0).toUpperCase() + f.substring(1)) + "();\n";
	}
	haxe_Log.trace(s + "\n}",{ fileName : "src/Main.hx", lineNumber : 59, className : "Main", methodName : "main"});
};
Main.downloadAsHx = function(content,fileName) {
	if(!StringTools.endsWith(fileName,".hx")) {
		fileName += ".hx";
	}
	var blob = new Blob([content],{ type : "text/hx"});
	var url = URL.createObjectURL(blob);
	var link = window.document.createElement("a");
	link.href = url;
	link.download = fileName;
	link.click();
	URL.revokeObjectURL(url);
};
var MainView = function() {
	haxe_ui_containers_VBox.call(this);
	var c0 = new VisionView();
	c0.set_percentWidth(100.);
	c0.set_percentHeight(100.);
	c0.set_text("300px-Valve_original_%281%29.PNG");
	this.addComponent(c0);
	this.set_percentWidth(100.);
	this.set_percentHeight(100.);
	this.set_styleNames("default-background");
	this.set_styleString("padding: 15px;");
	this.bindingRoot = true;
};
$hxClasses["MainView"] = MainView;
MainView.__name__ = "MainView";
MainView.__super__ = haxe_ui_containers_VBox;
MainView.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new MainView();
	}
	,__class__: MainView
});
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.is = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.isOfType = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.downcast = function(value,c) {
	if(js_Boot.__downcastCheck(value,c)) {
		return value;
	} else {
		return null;
	}
};
Std.instance = function(value,c) {
	if(js_Boot.__downcastCheck(value,c)) {
		return value;
	} else {
		return null;
	}
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.int = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,get_length: function() {
		return this.b.length;
	}
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addChar: function(c) {
		this.b += String.fromCodePoint(c);
	}
	,addSub: function(s,pos,len) {
		this.b += len == null ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len);
	}
	,toString: function() {
		return this.b;
	}
	,__class__: StringBuf
	,__properties__: {get_length:"get_length"}
};
var haxe_SysTools = function() { };
$hxClasses["haxe.SysTools"] = haxe_SysTools;
haxe_SysTools.__name__ = "haxe.SysTools";
haxe_SysTools.quoteUnixArg = function(argument) {
	if(argument == "") {
		return "''";
	}
	if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
		return argument;
	}
	return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
};
haxe_SysTools.quoteWinArg = function(argument,escapeMetaCharacters) {
	if(!new EReg("^[^ \t\\\\\"]+$","").match(argument)) {
		var result_b = "";
		var needquote = argument.indexOf(" ") != -1 || argument.indexOf("\t") != -1 || argument == "";
		if(needquote) {
			result_b += "\"";
		}
		var bs_buf = new StringBuf();
		var _g = 0;
		var _g1 = argument.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = HxOverrides.cca(argument,i);
			if(_g2 == null) {
				var c = _g2;
				if(bs_buf.b.length > 0) {
					result_b += Std.string(bs_buf.b);
					bs_buf = new StringBuf();
				}
				result_b += String.fromCodePoint(c);
			} else {
				switch(_g2) {
				case 34:
					var bs = bs_buf.b;
					result_b += bs == null ? "null" : "" + bs;
					result_b += bs == null ? "null" : "" + bs;
					bs_buf = new StringBuf();
					result_b += "\\\"";
					break;
				case 92:
					bs_buf.b += "\\";
					break;
				default:
					var c1 = _g2;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c1);
				}
			}
		}
		result_b += Std.string(bs_buf.b);
		if(needquote) {
			result_b += Std.string(bs_buf.b);
			result_b += "\"";
		}
		argument = result_b;
	}
	if(escapeMetaCharacters) {
		var result_b = "";
		var _g = 0;
		var _g1 = argument.length;
		while(_g < _g1) {
			var i = _g++;
			var c = HxOverrides.cca(argument,i);
			if(haxe_SysTools.winMetaCharacters.indexOf(c) >= 0) {
				result_b += String.fromCodePoint(94);
			}
			result_b += String.fromCodePoint(c);
		}
		return result_b;
	} else {
		return argument;
	}
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.contains = function(s,value) {
	return s.indexOf(value) != -1;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
StringTools.unsafeCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
StringTools.iterator = function(s) {
	return new haxe_iterators_StringIterator(s);
};
StringTools.keyValueIterator = function(s) {
	return new haxe_iterators_StringKeyValueIterator(s);
};
StringTools.isEof = function(c) {
	return c != c;
};
StringTools.quoteUnixArg = function(argument) {
	if(argument == "") {
		return "''";
	} else if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
		return argument;
	} else {
		return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
	}
};
StringTools.quoteWinArg = function(argument,escapeMetaCharacters) {
	var argument1 = argument;
	if(!new EReg("^[^ \t\\\\\"]+$","").match(argument1)) {
		var result_b = "";
		var needquote = argument1.indexOf(" ") != -1 || argument1.indexOf("\t") != -1 || argument1 == "";
		if(needquote) {
			result_b += "\"";
		}
		var bs_buf = new StringBuf();
		var _g = 0;
		var _g1 = argument1.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = HxOverrides.cca(argument1,i);
			if(_g2 == null) {
				var c = _g2;
				if(bs_buf.b.length > 0) {
					result_b += Std.string(bs_buf.b);
					bs_buf = new StringBuf();
				}
				result_b += String.fromCodePoint(c);
			} else {
				switch(_g2) {
				case 34:
					var bs = bs_buf.b;
					result_b += Std.string(bs);
					result_b += Std.string(bs);
					bs_buf = new StringBuf();
					result_b += "\\\"";
					break;
				case 92:
					bs_buf.b += "\\";
					break;
				default:
					var c1 = _g2;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c1);
				}
			}
		}
		result_b += Std.string(bs_buf.b);
		if(needquote) {
			result_b += Std.string(bs_buf.b);
			result_b += "\"";
		}
		argument1 = result_b;
	}
	if(escapeMetaCharacters) {
		var result_b = "";
		var _g = 0;
		var _g1 = argument1.length;
		while(_g < _g1) {
			var i = _g++;
			var c = HxOverrides.cca(argument1,i);
			if(haxe_SysTools.winMetaCharacters.indexOf(c) >= 0) {
				result_b += String.fromCodePoint(94);
			}
			result_b += String.fromCodePoint(c);
		}
		return result_b;
	} else {
		return argument1;
	}
};
StringTools.utf16CodePointAt = function(s,index) {
	var c = s.charCodeAt(index);
	if(c >= 55296 && c <= 56319) {
		c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
	}
	return c;
};
var ValueType = $hxEnums["ValueType"] = { __ename__:"ValueType",__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.getClass = function(o) {
	return js_Boot.getClass(o);
};
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	return c.__name__;
};
Type.getEnumName = function(e) {
	return e.__ename__;
};
Type.resolveClass = function(name) {
	return $hxClasses[name];
};
Type.resolveEnum = function(name) {
	return $hxEnums[name];
};
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEmptyInstance = function(cl) {
	return Object.create(cl.prototype);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c;
	var _g = e.__constructs__[index];
	if(_g == null) {
		c = null;
	} else {
		var ctor = _g;
		c = ctor._hx_name;
	}
	if(c == null) {
		throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	var _this = e.__constructs__;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = _this[i]._hx_name;
	}
	return result;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var params = enm.__constructs__[a._hx_index].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
	return true;
};
Type.enumConstructor = function(e) {
	return $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
Type.enumIndex = function(e) {
	return e._hx_index;
};
Type.allEnums = function(e) {
	return e.__empty_constructs__.slice();
};
var UInt = {};
UInt.add = function(a,b) {
	return a + b;
};
UInt.div = function(a,b) {
	return UInt.toFloat(a) / UInt.toFloat(b);
};
UInt.mul = function(a,b) {
	return a * b;
};
UInt.sub = function(a,b) {
	return a - b;
};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
UInt.lt = function(a,b) {
	return UInt.gt(b,a);
};
UInt.lte = function(a,b) {
	return UInt.gte(b,a);
};
UInt.and = function(a,b) {
	return a & b;
};
UInt.or = function(a,b) {
	return a | b;
};
UInt.xor = function(a,b) {
	return a ^ b;
};
UInt.shl = function(a,b) {
	return a << b;
};
UInt.shr = function(a,b) {
	return a >>> b;
};
UInt.ushr = function(a,b) {
	return a >>> b;
};
UInt.mod = function(a,b) {
	return UInt.toFloat(a) % UInt.toFloat(b) | 0;
};
UInt.addWithFloat = function(a,b) {
	return UInt.toFloat(a) + b;
};
UInt.mulWithFloat = function(a,b) {
	return UInt.toFloat(a) * b;
};
UInt.divFloat = function(a,b) {
	return UInt.toFloat(a) / b;
};
UInt.floatDiv = function(a,b) {
	return a / UInt.toFloat(b);
};
UInt.subFloat = function(a,b) {
	return UInt.toFloat(a) - b;
};
UInt.floatSub = function(a,b) {
	return a - UInt.toFloat(b);
};
UInt.gtFloat = function(a,b) {
	return UInt.toFloat(a) > b;
};
UInt.equalsInt = function(a,b) {
	return a == b;
};
UInt.notEqualsInt = function(a,b) {
	return a != b;
};
UInt.equalsFloat = function(a,b) {
	return UInt.toFloat(a) == b;
};
UInt.notEqualsFloat = function(a,b) {
	return UInt.toFloat(a) != b;
};
UInt.gteFloat = function(a,b) {
	return UInt.toFloat(a) >= b;
};
UInt.floatGt = function(a,b) {
	return a > UInt.toFloat(b);
};
UInt.floatGte = function(a,b) {
	return a >= UInt.toFloat(b);
};
UInt.ltFloat = function(a,b) {
	return UInt.toFloat(a) < b;
};
UInt.lteFloat = function(a,b) {
	return UInt.toFloat(a) <= b;
};
UInt.floatLt = function(a,b) {
	return a < UInt.toFloat(b);
};
UInt.floatLte = function(a,b) {
	return a <= UInt.toFloat(b);
};
UInt.modFloat = function(a,b) {
	return UInt.toFloat(a) % b;
};
UInt.floatMod = function(a,b) {
	return a % UInt.toFloat(b);
};
UInt.negBits = function(this1) {
	return ~this1;
};
UInt.prefixIncrement = function(this1) {
	return ++this1;
};
UInt.postfixIncrement = function(this1) {
	return this1++;
};
UInt.prefixDecrement = function(this1) {
	return --this1;
};
UInt.postfixDecrement = function(this1) {
	return this1--;
};
UInt.toString = function(this1,radix) {
	return Std.string(UInt.toFloat(this1));
};
UInt.toInt = function(this1) {
	return this1;
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var VisionView = function() {
	this.filters = [];
	this.originalImage = null;
	haxe_ui_containers_VBox.call(this);
	var c0 = new haxe_ui_containers_Grid();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Label();
	c1.set_text("Image:");
	c1.set_verticalAlign("center");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_TextField();
	c2.set_id("imageUrlField");
	c2.set_percentWidth(100.);
	c2.set_text("https://upload.wikimedia.org/wikipedia/commons/thumb/f/f0/Valve_original_%281%29.PNG/300px-Valve_original_%281%29.PNG");
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Spacer();
	c0.addComponent(c3);
	var c4 = new haxe_ui_containers_Box();
	c4.set_percentWidth(100.);
	var c5 = new haxe_ui_components_Button();
	c5.set_id("loadButton");
	c5.set_text("Load");
	c5.set_horizontalAlign("right");
	c4.addComponent(c5);
	c0.addComponent(c4);
	this.addComponent(c0);
	var c6 = new haxe_ui_components_HorizontalRule();
	this.addComponent(c6);
	var c7 = new haxe_ui_containers_HBox();
	c7.set_percentWidth(100.);
	c7.set_percentHeight(100.);
	var c8 = new haxe_ui_containers_ScrollView();
	c8.set_percentWidth(100.);
	c8.set_percentHeight(100.);
	var c9 = new haxe_ui_components_Image();
	c9.set_id("imagePreview");
	c8.addComponent(c9);
	c7.addComponent(c8);
	var c10 = new haxe_ui_containers_VBox();
	c10.set_width(300.);
	c10.set_percentHeight(100.);
	var c11 = new haxe_ui_containers_ScrollView();
	c11.set_percentWidth(100.);
	c11.set_percentHeight(100.);
	c11.set_percentContentWidth(100.);
	c11.set_styleNames("collapsible-view");
	var c12 = new haxe_ui_containers_VBox();
	c12.set_id("filtersContainer");
	c12.set_percentWidth(100.);
	c12.set_styleNames("collapsible-container");
	c11.addComponent(c12);
	c10.addComponent(c11);
	var c13 = new haxe_ui_components_Button();
	c13.set_id("newFilter");
	c13.set_percentWidth(100.);
	c13.set_text("New Filter");
	c10.addComponent(c13);
	c7.addComponent(c10);
	this.addComponent(c7);
	this.set_percentWidth(100.);
	this.set_percentHeight(100.);
	this.set_styleString("spacing:15px;");
	this.bindingRoot = true;
	this.newFilter = c13;
	this.loadButton = c5;
	this.imageUrlField = c2;
	this.imagePreview = c9;
	this.filtersContainer = c12;
	this.onLoadButton(null);
	this.addFilter("deepfry");
	this.addFilter("sharpen");
	this.addFilter("grayscale");
	var c = this.loadButton;
	if(c != null) {
		c.registerEvent("click",$bind(this,this.onLoadButton));
	} else {
		haxe_Log.trace("WARNING: could not find component to regsiter event (" + "loadButton" + ")",{ fileName : "haxe/ui/macros/Macros.hx", lineNumber : 348, className : "VisionView", methodName : "new"});
	}
};
$hxClasses["VisionView"] = VisionView;
VisionView.__name__ = "VisionView";
VisionView.__super__ = haxe_ui_containers_VBox;
VisionView.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	originalImage: null
	,filters: null
	,addFilter: function(filterId) {
		var _gthis = this;
		var f = new filters_FilterView();
		f.set_filterId(filterId);
		f.set_collapsed(false);
		f.set_percentWidth(100);
		this.filtersContainer.addComponent(f);
		this.filters.push(f);
		f.set_onChange(function(_) {
			_gthis.applyFilters();
		});
	}
	,onLoadButton: function(_) {
		var _gthis = this;
		var url = this.imageUrlField.get_text();
		vision_tools_ImageTools.loadFromFile(null,url,function(data) {
			_gthis.originalImage = data;
			_gthis.onImageChanged(_gthis.originalImage);
			var canvas = vision_ds_Image.toJsCanvas(_gthis.originalImage);
			var htmlImage = window.document.createElement("img");
			htmlImage.src = canvas.toDataURL();
			_gthis.imagePreview.set_resource(haxe_ui_util_Variant.fromImageData(htmlImage));
			_gthis.applyFilters();
		});
	}
	,onImageChanged: function(image) {
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.onImageChanged(vision_ds_Image.clone(image));
		}
	}
	,applyFilters: function() {
		if(this.originalImage == null) {
			return;
		}
		var image = vision_ds_Image.clone(this.originalImage);
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			image = f.applyFilter(vision_ds_Image.clone(image));
		}
		var canvas = vision_ds_Image.toJsCanvas(image);
		var htmlImage = window.document.createElement("img");
		htmlImage.src = canvas.toDataURL();
		this.imagePreview.set_resource(haxe_ui_util_Variant.fromImageData(htmlImage));
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new VisionView();
	}
	,newFilter: null
	,loadButton: null
	,imageUrlField: null
	,imagePreview: null
	,filtersContainer: null
	,__class__: VisionView
});
var filters_FilterParamsUI = function() {
	haxe_ui_containers_VBox.call(this);
};
$hxClasses["filters.FilterParamsUI"] = filters_FilterParamsUI;
filters_FilterParamsUI.__name__ = "filters.FilterParamsUI";
filters_FilterParamsUI.__super__ = haxe_ui_containers_VBox;
filters_FilterParamsUI.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	onReady: function() {
		var _gthis = this;
		haxe_ui_containers_VBox.prototype.onReady.call(this);
		var filterEnabled = this.findComponent("filterEnabled",haxe_ui_components_CheckBox);
		if(filterEnabled != null) {
			filterEnabled.set_onChange(function(e) {
				_gthis.dispatch(e);
			});
		}
	}
	,applyFilter: function(image) {
		return image;
	}
	,onImageChanged: function(image) {
		var temp = vision_ds_Image.clone(image);
		var imageBefore = this.findComponent("previewImageBefore",haxe_ui_components_Image);
		if(imageBefore != null) {
			var canvas = vision_ds_Image.toJsCanvas(temp);
			var htmlImage = window.document.createElement("img");
			htmlImage.src = canvas.toDataURL();
			imageBefore.set_resource(haxe_ui_util_Variant.fromImageData(htmlImage));
		}
		var imageAfter = this.findComponent("previewImageAfter",haxe_ui_components_Image);
		if(imageAfter != null) {
			var filteredImage = this.applyFilter(vision_ds_Image.clone(temp));
			var canvas = vision_ds_Image.toJsCanvas(filteredImage);
			var htmlImage = window.document.createElement("img");
			htmlImage.src = canvas.toDataURL();
			imageAfter.set_resource(haxe_ui_util_Variant.fromImageData(htmlImage));
		}
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_FilterParamsUI();
	}
	,__class__: filters_FilterParamsUI
});
var filters_BilateralDenoise = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.BilateralDenoise"] = filters_BilateralDenoise;
filters_BilateralDenoise.__name__ = "filters.BilateralDenoise";
filters_BilateralDenoise.__super__ = filters_FilterParamsUI;
filters_BilateralDenoise.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.bilateralDenoise(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_BilateralDenoise();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_BilateralDenoise
});
var filters_BlackAndWhite = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.BlackAndWhite"] = filters_BlackAndWhite;
filters_BlackAndWhite.__name__ = "filters.BlackAndWhite";
filters_BlackAndWhite.__super__ = filters_FilterParamsUI;
filters_BlackAndWhite.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.blackAndWhite(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_BlackAndWhite();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_BlackAndWhite
});
var filters_CannyEdgeDetection = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.CannyEdgeDetection"] = filters_CannyEdgeDetection;
filters_CannyEdgeDetection.__name__ = "filters.CannyEdgeDetection";
filters_CannyEdgeDetection.__super__ = filters_FilterParamsUI;
filters_CannyEdgeDetection.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.cannyEdgeDetection(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_CannyEdgeDetection();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_CannyEdgeDetection
});
var filters_Combine = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.Combine"] = filters_Combine;
filters_Combine.__name__ = "filters.Combine";
filters_Combine.__super__ = filters_FilterParamsUI;
filters_Combine.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.combine(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_Combine();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_Combine
});
var filters_Contrast = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.Contrast"] = filters_Contrast;
filters_Contrast.__name__ = "filters.Contrast";
filters_Contrast.__super__ = filters_FilterParamsUI;
filters_Contrast.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.contrast(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_Contrast();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_Contrast
});
var filters_ConvolutionRidgeDetection = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.ConvolutionRidgeDetection"] = filters_ConvolutionRidgeDetection;
filters_ConvolutionRidgeDetection.__name__ = "filters.ConvolutionRidgeDetection";
filters_ConvolutionRidgeDetection.__super__ = filters_FilterParamsUI;
filters_ConvolutionRidgeDetection.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.convolutionRidgeDetection(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_ConvolutionRidgeDetection();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_ConvolutionRidgeDetection
});
var filters_Convolve = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.Convolve"] = filters_Convolve;
filters_Convolve.__name__ = "filters.Convolve";
filters_Convolve.__super__ = filters_FilterParamsUI;
filters_Convolve.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.convolve(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_Convolve();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_Convolve
});
var filters_Deepfry = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.Deepfry"] = filters_Deepfry;
filters_Deepfry.__name__ = "filters.Deepfry";
filters_Deepfry.__super__ = filters_FilterParamsUI;
filters_Deepfry.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.deepfry(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_Deepfry();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_Deepfry
});
var filters_Dilate = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.Dilate"] = filters_Dilate;
filters_Dilate.__name__ = "filters.Dilate";
filters_Dilate.__super__ = filters_FilterParamsUI;
filters_Dilate.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.dilate(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_Dilate();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_Dilate
});
var filters_DropOutNoise = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.DropOutNoise"] = filters_DropOutNoise;
filters_DropOutNoise.__name__ = "filters.DropOutNoise";
filters_DropOutNoise.__super__ = filters_FilterParamsUI;
filters_DropOutNoise.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.dropOutNoise(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_DropOutNoise();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_DropOutNoise
});
var filters_Erode = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.Erode"] = filters_Erode;
filters_Erode.__name__ = "filters.Erode";
filters_Erode.__super__ = filters_FilterParamsUI;
filters_Erode.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.erode(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_Erode();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_Erode
});
var filters_FilterView = function() {
	this.originalImage = null;
	this.filterParams = null;
	Collapsible.call(this);
};
$hxClasses["filters.FilterView"] = filters_FilterView;
filters_FilterView.__name__ = "filters.FilterView";
filters_FilterView.__super__ = Collapsible;
filters_FilterView.prototype = $extend(Collapsible.prototype,{
	filterParams: null
	,originalImage: null
	,onReady: function() {
		var _gthis = this;
		Collapsible.prototype.onReady.call(this);
		var filterDropDown = this.findComponent("filterDropDown",haxe_ui_components_DropDown);
		filterDropDown.set_onChange(function(_) {
			_gthis.changeFilterParamsUI(filterDropDown.get_selectedItem().filterId);
		});
		this.changeFilterParamsUI(filterDropDown.get_selectedItem().filterId);
	}
	,_filterId: null
	,get_filterId: function() {
		return this._filterId;
	}
	,set_filterId: function(value) {
		if(value == this._filterId) {
			return value;
		}
		this.changeFilterParamsUI(value);
		return value;
	}
	,changeFilterParamsUI: function(filterId) {
		var _gthis = this;
		var newUI = this.createFilterParams(filterId);
		if(newUI == null) {
			return;
		}
		if(this.filterParams != null) {
			this.removeComponent(this.filterParams);
		}
		this.addComponent(newUI);
		if(this.originalImage != null) {
			haxe_ui_Toolkit.callLater(function() {
				newUI.onImageChanged(vision_ds_Image.clone(_gthis.originalImage));
			});
		}
		newUI.set_onChange(function(e) {
			_gthis.dispatch(e);
		});
		this.filterParams = newUI;
		this._filterId = filterId;
		var filterDropDown = this.findComponent("filterDropDown",haxe_ui_components_DropDown);
		filterDropDown.set_selectedIndex(this.indexOfFilter(this._filterId));
	}
	,createFilterParams: function(filterId) {
		var ui = null;
		switch(filterId) {
		case "bilateralDenoise":
			ui = new filters_BilateralDenoise();
			break;
		case "blackAndWhite":
			ui = new filters_BlackAndWhite();
			break;
		case "cannyEdgeDetection":
			ui = new filters_CannyEdgeDetection();
			break;
		case "combine":
			ui = new filters_Combine();
			break;
		case "contrast":
			ui = new filters_Contrast();
			break;
		case "convolutionRidgeDetection":
			ui = new filters_ConvolutionRidgeDetection();
			break;
		case "convolve":
			ui = new filters_Convolve();
			break;
		case "deepfry":
			ui = new filters_Deepfry();
			break;
		case "dilate":
			ui = new filters_Dilate();
			break;
		case "dropOutNoise":
			ui = new filters_DropOutNoise();
			break;
		case "erode":
			ui = new filters_Erode();
			break;
		case "gaussianBlur":
			ui = new filters_GaussianBlur();
			break;
		case "grayscale":
			ui = new filters_Grayscale();
			break;
		case "invert":
			ui = new filters_Invert();
			break;
		case "laplacianEdgeDiffOperator":
			ui = new filters_LaplacianEdgeDiffOperator();
			break;
		case "laplacianOfGaussianEdgeDetection":
			ui = new filters_LaplacianOfGaussianEdgeDetection();
			break;
		case "limitColorRanges":
			ui = new filters_LimitColorRanges();
			break;
		case "medianBlur":
			ui = new filters_MedianBlur();
			break;
		case "nearestNeighborBlur":
			ui = new filters_NearestNeighborBlur();
			break;
		case "normalize":
			ui = new filters_Normalize();
			break;
		case "perwittEdgeDetection":
			ui = new filters_PerwittEdgeDetection();
			break;
		case "perwittEdgeDiffOperator":
			ui = new filters_PerwittEdgeDiffOperator();
			break;
		case "replaceColorRanges":
			ui = new filters_ReplaceColorRanges();
			break;
		case "robertEdgeDiffOperator":
			ui = new filters_RobertEdgeDiffOperator();
			break;
		case "saltAndPepperNoise":
			ui = new filters_SaltAndPepperNoise();
			break;
		case "sharpen":
			ui = new filters_Sharpen();
			break;
		case "simpleLine2DDetection":
			ui = new filters_SimpleLine2DDetection();
			break;
		case "sobelEdgeDetection":
			ui = new filters_SobelEdgeDetection();
			break;
		case "sobelEdgeDiffOperator":
			ui = new filters_SobelEdgeDiffOperator();
			break;
		case "whiteNoise":
			ui = new filters_WhiteNoise();
			break;
		}
		return ui;
	}
	,onImageChanged: function(image) {
		this.originalImage = vision_ds_Image.clone(image);
		if(this.filterParams != null) {
			this.filterParams.onImageChanged(image);
		}
	}
	,applyFilter: function(image) {
		if(this.filterParams != null) {
			var enabled = true;
			var filterEnabled = this.findComponent("filterEnabled",haxe_ui_components_CheckBox);
			if(filterEnabled != null) {
				enabled = filterEnabled.get_selected();
			}
			haxe_Log.trace(this.get_filterId(),{ fileName : "src/filters/FilterView.hx", lineNumber : 147, className : "filters.FilterView", methodName : "applyFilter", customParams : [enabled]});
			if(enabled) {
				image = this.filterParams.applyFilter(image);
			}
		}
		return image;
	}
	,indexOfFilter: function(filterId) {
		var n = 0;
		var h = filters_FilterView.FILTERS.h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			if(k == filterId) {
				return n;
			}
			++n;
		}
		return -1;
	}
	,registerBehaviours: function() {
		Collapsible.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = Collapsible.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_FilterView();
	}
	,registerComposite: function() {
		Collapsible.prototype.registerComposite.call(this);
		this._internalEventsClass = filters_FilterViewEvents;
		this._compositeBuilderClass = filters_FilterViewBuilder;
	}
	,__class__: filters_FilterView
	,__properties__: $extend(Collapsible.prototype.__properties__,{set_filterId:"set_filterId",get_filterId:"get_filterId"})
});
var filters_FilterViewEvents = function(collapsible) {
	CollapsibleEvents.call(this,collapsible);
};
$hxClasses["filters.FilterViewEvents"] = filters_FilterViewEvents;
filters_FilterViewEvents.__name__ = "filters.FilterViewEvents";
filters_FilterViewEvents.__super__ = CollapsibleEvents;
filters_FilterViewEvents.prototype = $extend(CollapsibleEvents.prototype,{
	__class__: filters_FilterViewEvents
});
var filters_FilterViewBuilder = function(collapsible) {
	CollapsibleBuilder.call(this,collapsible);
	this._filterDropDown = new haxe_ui_components_DropDown();
	this._filterDropDown.set_id("filterDropDown");
	this._filterDropDown.set_width(275);
	this._filterDropDown.set_marginTop(5);
	this._filterDropDown.set_marginRight(4);
	this._filterDropDown.set_horizontalAlign("right");
	var h = filters_FilterView.FILTERS.h;
	var k_h = h;
	var k_keys = Object.keys(h);
	var k_length = k_keys.length;
	var k_current = 0;
	while(k_current < k_length) {
		var k = k_keys[k_current++];
		var tmp = filters_FilterView.FILTERS.h[k];
		this._filterDropDown.get_dataSource().add({ text : tmp, filterId : k});
	}
	this._header.addComponent(this._filterDropDown);
	this._filterDropDown.set_selectedIndex(collapsible.indexOfFilter(collapsible.get_filterId()));
};
$hxClasses["filters.FilterViewBuilder"] = filters_FilterViewBuilder;
filters_FilterViewBuilder.__name__ = "filters.FilterViewBuilder";
filters_FilterViewBuilder.__super__ = CollapsibleBuilder;
filters_FilterViewBuilder.prototype = $extend(CollapsibleBuilder.prototype,{
	_filterDropDown: null
	,__class__: filters_FilterViewBuilder
});
var filters_GaussianBlur = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.GaussianBlur"] = filters_GaussianBlur;
filters_GaussianBlur.__name__ = "filters.GaussianBlur";
filters_GaussianBlur.__super__ = filters_FilterParamsUI;
filters_GaussianBlur.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.gaussianBlur(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_GaussianBlur();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_GaussianBlur
});
var filters_Grayscale = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.Grayscale"] = filters_Grayscale;
filters_Grayscale.__name__ = "filters.Grayscale";
filters_Grayscale.__super__ = filters_FilterParamsUI;
filters_Grayscale.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.grayscale(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_Grayscale();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_Grayscale
});
var filters_Invert = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.Invert"] = filters_Invert;
filters_Invert.__name__ = "filters.Invert";
filters_Invert.__super__ = filters_FilterParamsUI;
filters_Invert.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.invert(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_Invert();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_Invert
});
var filters_LaplacianEdgeDiffOperator = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.LaplacianEdgeDiffOperator"] = filters_LaplacianEdgeDiffOperator;
filters_LaplacianEdgeDiffOperator.__name__ = "filters.LaplacianEdgeDiffOperator";
filters_LaplacianEdgeDiffOperator.__super__ = filters_FilterParamsUI;
filters_LaplacianEdgeDiffOperator.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.laplacianEdgeDiffOperator(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_LaplacianEdgeDiffOperator();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_LaplacianEdgeDiffOperator
});
var filters_LaplacianOfGaussianEdgeDetection = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.LaplacianOfGaussianEdgeDetection"] = filters_LaplacianOfGaussianEdgeDetection;
filters_LaplacianOfGaussianEdgeDetection.__name__ = "filters.LaplacianOfGaussianEdgeDetection";
filters_LaplacianOfGaussianEdgeDetection.__super__ = filters_FilterParamsUI;
filters_LaplacianOfGaussianEdgeDetection.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.laplacianOfGaussianEdgeDetection(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_LaplacianOfGaussianEdgeDetection();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_LaplacianOfGaussianEdgeDetection
});
var filters_LimitColorRanges = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.LimitColorRanges"] = filters_LimitColorRanges;
filters_LimitColorRanges.__name__ = "filters.LimitColorRanges";
filters_LimitColorRanges.__super__ = filters_FilterParamsUI;
filters_LimitColorRanges.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.limitColorRanges(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_LimitColorRanges();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_LimitColorRanges
});
var filters_MedianBlur = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.MedianBlur"] = filters_MedianBlur;
filters_MedianBlur.__name__ = "filters.MedianBlur";
filters_MedianBlur.__super__ = filters_FilterParamsUI;
filters_MedianBlur.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.medianBlur(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_MedianBlur();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_MedianBlur
});
var filters_NearestNeighborBlur = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.NearestNeighborBlur"] = filters_NearestNeighborBlur;
filters_NearestNeighborBlur.__name__ = "filters.NearestNeighborBlur";
filters_NearestNeighborBlur.__super__ = filters_FilterParamsUI;
filters_NearestNeighborBlur.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.nearestNeighborBlur(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_NearestNeighborBlur();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_NearestNeighborBlur
});
var filters_Normalize = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.Normalize"] = filters_Normalize;
filters_Normalize.__name__ = "filters.Normalize";
filters_Normalize.__super__ = filters_FilterParamsUI;
filters_Normalize.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.normalize(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_Normalize();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_Normalize
});
var filters_PerwittEdgeDetection = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.PerwittEdgeDetection"] = filters_PerwittEdgeDetection;
filters_PerwittEdgeDetection.__name__ = "filters.PerwittEdgeDetection";
filters_PerwittEdgeDetection.__super__ = filters_FilterParamsUI;
filters_PerwittEdgeDetection.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.perwittEdgeDetection(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_PerwittEdgeDetection();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_PerwittEdgeDetection
});
var filters_PerwittEdgeDiffOperator = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.PerwittEdgeDiffOperator"] = filters_PerwittEdgeDiffOperator;
filters_PerwittEdgeDiffOperator.__name__ = "filters.PerwittEdgeDiffOperator";
filters_PerwittEdgeDiffOperator.__super__ = filters_FilterParamsUI;
filters_PerwittEdgeDiffOperator.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.perwittEdgeDiffOperator(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_PerwittEdgeDiffOperator();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_PerwittEdgeDiffOperator
});
var filters_ReplaceColorRanges = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.ReplaceColorRanges"] = filters_ReplaceColorRanges;
filters_ReplaceColorRanges.__name__ = "filters.ReplaceColorRanges";
filters_ReplaceColorRanges.__super__ = filters_FilterParamsUI;
filters_ReplaceColorRanges.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.replaceColorRanges(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_ReplaceColorRanges();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_ReplaceColorRanges
});
var filters_RobertEdgeDiffOperator = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.RobertEdgeDiffOperator"] = filters_RobertEdgeDiffOperator;
filters_RobertEdgeDiffOperator.__name__ = "filters.RobertEdgeDiffOperator";
filters_RobertEdgeDiffOperator.__super__ = filters_FilterParamsUI;
filters_RobertEdgeDiffOperator.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.robertEdgeDiffOperator(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_RobertEdgeDiffOperator();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_RobertEdgeDiffOperator
});
var filters_SaltAndPepperNoise = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.SaltAndPepperNoise"] = filters_SaltAndPepperNoise;
filters_SaltAndPepperNoise.__name__ = "filters.SaltAndPepperNoise";
filters_SaltAndPepperNoise.__super__ = filters_FilterParamsUI;
filters_SaltAndPepperNoise.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.saltAndPepperNoise(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_SaltAndPepperNoise();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_SaltAndPepperNoise
});
var filters_Sharpen = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.Sharpen"] = filters_Sharpen;
filters_Sharpen.__name__ = "filters.Sharpen";
filters_Sharpen.__super__ = filters_FilterParamsUI;
filters_Sharpen.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.sharpen(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_Sharpen();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_Sharpen
});
var filters_SimpleLine2DDetection = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.SimpleLine2DDetection"] = filters_SimpleLine2DDetection;
filters_SimpleLine2DDetection.__name__ = "filters.SimpleLine2DDetection";
filters_SimpleLine2DDetection.__super__ = filters_FilterParamsUI;
filters_SimpleLine2DDetection.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		var _g = 0;
		var _g1 = vision_Vision.simpleLine2DDetection(image);
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			var color = -65536;
			var p = l.start;
			var p1_x = p.x | 0;
			var p1_y = p.y | 0;
			var p1 = l.end;
			var p2_x = p1.x | 0;
			var p2_y = p1.y | 0;
			var x1 = p1_x;
			var y1 = p1_y;
			var x2 = p2_x;
			var y2 = p2_y;
			var dx = Math.abs(x2 - x1);
			var dy = Math.abs(y2 - y1);
			var sx = x1 < x2 ? 1 : -1;
			var sy = y1 < y2 ? 1 : -1;
			var err = dx - dy;
			while(true) {
				if(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))) {
					if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this_x = x1;
						var this_y = y1;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
					} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
						var v = null;
						var tmp;
						if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
							tmp = x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
						} else {
							var has = false;
							var view;
							if(v != null) {
								view = v;
							} else {
								var _g2 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
								var _g3 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
								var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
								var image1 = image.b;
								var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
								view = new vision_ds_ImageView(_g2,_g3,_g4,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
							}
							switch(view.shape) {
							case 0:
								has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
								break;
							case 1:
								has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
								break;
							case 2:case 3:
								if(view.width > view.height) {
									var a = view.width / 2;
									var b = view.height / 2;
									var c = Math.sqrt(a * a - b * b);
									var x = view.x + view.width / 2 - c;
									var y = view.y + view.height / 2;
									if(y == null) {
										y = 0;
									}
									if(x == null) {
										x = 0;
									}
									var f1_x = x;
									var f1_y = y;
									var x3 = view.x + view.width / 2 + c;
									var y3 = view.y + view.height / 2;
									if(y3 == null) {
										y3 = 0;
									}
									if(x3 == null) {
										x3 = 0;
									}
									var f2_x = x3;
									var f2_y = y3;
									var x4 = x1;
									var y4 = y1;
									if(y4 == null) {
										y4 = 0;
									}
									if(x4 == null) {
										x4 = 0;
									}
									var p_x = x4;
									var p_y = y4;
									var x5 = p_x - f1_x;
									var y5 = p_y - f1_y;
									var x6 = p_x - f2_x;
									var y6 = p_y - f2_y;
									has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
									if(view.shape == 3) {
										has = !has;
									}
								} else if(view.height > view.width) {
									var a1 = view.height / 2;
									var b1 = view.width / 2;
									var c1 = Math.sqrt(a1 * a1 - b1 * b1);
									var x7 = view.x + view.width / 2;
									var y7 = view.y + view.height / 2 - c1;
									if(y7 == null) {
										y7 = 0;
									}
									if(x7 == null) {
										x7 = 0;
									}
									var f1_x1 = x7;
									var f1_y1 = y7;
									var x8 = view.x + view.width / 2;
									var y8 = view.y + view.height / 2 + c1;
									if(y8 == null) {
										y8 = 0;
									}
									if(x8 == null) {
										x8 = 0;
									}
									var f2_x1 = x8;
									var f2_y1 = y8;
									var x9 = x1;
									var y9 = y1;
									if(y9 == null) {
										y9 = 0;
									}
									if(x9 == null) {
										x9 = 0;
									}
									var p_x1 = x9;
									var p_y1 = y9;
									var x10 = p_x1 - f1_x1;
									var y10 = p_y1 - f1_y1;
									var x11 = p_x1 - f2_x1;
									var y11 = p_y1 - f2_y1;
									has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
									if(view.shape == 3) {
										has = !has;
									}
								} else {
									var x12 = x1;
									var y12 = y1;
									if(y12 == null) {
										y12 = 0;
									}
									if(x12 == null) {
										x12 = 0;
									}
									var point1_x = x12;
									var point1_y = y12;
									var x13 = view.x + view.width / 2;
									var y13 = view.y + view.height / 2;
									if(y13 == null) {
										y13 = 0;
									}
									if(x13 == null) {
										x13 = 0;
									}
									var point2_x = x13;
									var point2_y = y13;
									var x14 = point2_x - point1_x;
									var y14 = point2_y - point1_y;
									has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
									if(view.shape == 3) {
										has = !has;
									}
								}
								break;
							case 4:
								has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
								break;
							case 5:
								has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
								break;
							}
							tmp = has;
						}
						if(tmp) {
							var position = (y1 * image.getUInt16(0) + x1) * 4;
							position += vision_ds_Image.OFFSET;
							image.b[position] = color >> 24 & 255;
							image.b[position + 1] = color >> 16 & 255;
							image.b[position + 2] = color >> 8 & 255;
							image.b[position + 3] = color & 255;
						}
					} else {
						var position1 = (y1 * image.getUInt16(0) + x1) * 4;
						position1 += vision_ds_Image.OFFSET;
						image.b[position1] = color >> 24 & 255;
						image.b[position1 + 1] = color >> 16 & 255;
						image.b[position1 + 2] = color >> 8 & 255;
						image.b[position1 + 3] = color & 255;
					}
				}
				if(x1 == x2 && y1 == y2) {
					break;
				}
				var e2 = 2 * err;
				if(e2 > -dy) {
					err -= dy;
					x1 += sx;
				}
				if(e2 < dx) {
					err += dx;
					y1 += sy;
				}
			}
		}
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_SimpleLine2DDetection();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_SimpleLine2DDetection
});
var filters_SobelEdgeDetection = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.SobelEdgeDetection"] = filters_SobelEdgeDetection;
filters_SobelEdgeDetection.__name__ = "filters.SobelEdgeDetection";
filters_SobelEdgeDetection.__super__ = filters_FilterParamsUI;
filters_SobelEdgeDetection.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.sobelEdgeDetection(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_SobelEdgeDetection();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_SobelEdgeDetection
});
var filters_SobelEdgeDiffOperator = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.SobelEdgeDiffOperator"] = filters_SobelEdgeDiffOperator;
filters_SobelEdgeDiffOperator.__name__ = "filters.SobelEdgeDiffOperator";
filters_SobelEdgeDiffOperator.__super__ = filters_FilterParamsUI;
filters_SobelEdgeDiffOperator.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.sobelEdgeDiffOperator(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_SobelEdgeDiffOperator();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_SobelEdgeDiffOperator
});
var filters_WhiteNoise = function() {
	filters_FilterParamsUI.call(this);
	var c0 = new haxe_ui_containers_HBox();
	c0.set_percentWidth(100.);
	var c1 = new haxe_ui_components_Image();
	c1.set_id("previewImageBefore");
	c1.set_width(130.);
	c1.set_scaleMode("fitwidth");
	c0.addComponent(c1);
	var c2 = new haxe_ui_components_Image();
	c2.set_verticalAlign("center");
	c2.set_resource(haxe_ui_util_Variant.fromString("haxeui-core/styles/shared/collapsed-blue.png"));
	c0.addComponent(c2);
	var c3 = new haxe_ui_components_Image();
	c3.set_id("previewImageAfter");
	c3.set_width(130.);
	c3.set_scaleMode("fitwidth");
	c0.addComponent(c3);
	this.addComponent(c0);
	var c4 = new haxe_ui_components_CheckBox();
	c4.set_id("filterEnabled");
	c4.set_text("Enabled");
	c4.set_selected(true);
	this.addComponent(c4);
	this.set_percentWidth(100.);
	this.set_text("");
	this.bindingRoot = true;
	this.previewImageBefore = c1;
	this.previewImageAfter = c3;
	this.filterEnabled = c4;
};
$hxClasses["filters.WhiteNoise"] = filters_WhiteNoise;
filters_WhiteNoise.__name__ = "filters.WhiteNoise";
filters_WhiteNoise.__super__ = filters_FilterParamsUI;
filters_WhiteNoise.prototype = $extend(filters_FilterParamsUI.prototype,{
	applyFilter: function(image) {
		image = vision_Vision.whiteNoise(image);
		return image;
	}
	,registerBehaviours: function() {
		filters_FilterParamsUI.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = filters_FilterParamsUI.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new filters_WhiteNoise();
	}
	,previewImageBefore: null
	,previewImageAfter: null
	,filterEnabled: null
	,__class__: filters_WhiteNoise
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:"haxe.StackItem",__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
haxe_StackItem.__empty_constructs__ = [haxe_StackItem.CFunction];
var haxe_CallStack = {};
haxe_CallStack.__properties__ = {get_length:"get_length"};
haxe_CallStack.get_length = function(this1) {
	return this1.length;
};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function(fullStack) {
	if(fullStack == null) {
		fullStack = false;
	}
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return fullStack ? eStack : haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.copy = function(this1) {
	return this1.slice();
};
haxe_CallStack.get = function(this1,index) {
	return this1[index];
};
haxe_CallStack.asArray = function(this1) {
	return this1;
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m2 = item2.m;
				var m1 = item1.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item21 = item2.s;
				var file2 = item2.file;
				var line2 = item2.line;
				var col2 = item2.column;
				var col1 = item1.column;
				var line1 = item1.line;
				var file1 = item1.file;
				var item11 = item1.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class2 = item2.classname;
				var method2 = item2.method;
				var method1 = item1.method;
				var class1 = item1.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v2 = item2.v;
				var v1 = item1.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.exceptionToString = function(e) {
	if(e.get_previous() == null) {
		var tmp = "Exception: " + e.toString();
		var tmp1 = e.get_stack();
		return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
	}
	var result = "";
	var e1 = e;
	var prev = null;
	while(e1 != null) {
		if(prev == null) {
			var result1 = "Exception: " + e1.get_message();
			var tmp = e1.get_stack();
			result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
		} else {
			var prevStack = haxe_CallStack.subtract(e1.get_stack(),prev.get_stack());
			result = "Exception: " + e1.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
		}
		prev = e1;
		e1 = e1.get_previous();
	}
	return result;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var s1 = s.s;
		var file = s.file;
		var line = s.line;
		var col = s.column;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var cname = s.classname;
		var meth = s.method;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,copy: null
	,toString: null
	,clear: null
	,__class__: haxe_IMap
};
var haxe_DynamicAccess = {};
haxe_DynamicAccess._new = function() {
	var this1 = { };
	return this1;
};
haxe_DynamicAccess.get = function(this1,key) {
	return this1[key];
};
haxe_DynamicAccess.set = function(this1,key,value) {
	return this1[key] = value;
};
haxe_DynamicAccess.exists = function(this1,key) {
	return Object.prototype.hasOwnProperty.call(this1,key);
};
haxe_DynamicAccess.remove = function(this1,key) {
	return Reflect.deleteField(this1,key);
};
haxe_DynamicAccess.keys = function(this1) {
	return Reflect.fields(this1);
};
haxe_DynamicAccess.copy = function(this1) {
	return Reflect.copy(this1);
};
haxe_DynamicAccess.iterator = function(this1) {
	return new haxe_iterators_DynamicAccessIterator(this1);
};
haxe_DynamicAccess.keyValueIterator = function(this1) {
	return new haxe_iterators_DynamicAccessKeyValueIterator(this1);
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,details: function() {
		if(this.get_previous() == null) {
			var tmp = "Exception: " + this.toString();
			var tmp1 = this.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		} else {
			var result = "";
			var e = this;
			var prev = null;
			while(e != null) {
				if(prev == null) {
					var result1 = "Exception: " + e.get_message();
					var tmp = e.get_stack();
					result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
				} else {
					var prevStack = haxe_CallStack.subtract(e.get_stack(),prev.get_stack());
					result = "Exception: " + e.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
				}
				prev = e;
				e = e.get_previous();
			}
			return result;
		}
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_previous: function() {
		return this.__previousException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,get___exceptionStack: function() {
		return this.__exceptionStack;
	}
	,set___exceptionStack: function(value) {
		this.setProperty("__exceptionStack",value);
		return value;
	}
	,get___skipStack: function() {
		return this.__skipStack;
	}
	,set___skipStack: function(value) {
		this.setProperty("__skipStack",value);
		return value;
	}
	,get___nativeException: function() {
		return this.__nativeException;
	}
	,set___nativeException: function(value) {
		this.setProperty("__nativeException",value);
		return value;
	}
	,get___previousException: function() {
		return this.__previousException;
	}
	,set___previousException: function(value) {
		this.setProperty("__previousException",value);
		return value;
	}
	,__class__: haxe_Exception
	,__properties__: {set___exceptionStack:"set___exceptionStack",get___exceptionStack:"get___exceptionStack",get_native:"get_native",get_previous:"get_previous",get_stack:"get_stack",get_message:"get_message"}
});
var haxe_Int32 = {};
haxe_Int32.negate = function(this1) {
	return ~this1 + 1 | 0;
};
haxe_Int32.preIncrement = function(this1) {
	this1 = ++this1 | 0;
	return this1;
};
haxe_Int32.postIncrement = function(this1) {
	var ret = this1++;
	this1 |= 0;
	return ret;
};
haxe_Int32.preDecrement = function(this1) {
	this1 = --this1 | 0;
	return this1;
};
haxe_Int32.postDecrement = function(this1) {
	var ret = this1--;
	this1 |= 0;
	return ret;
};
haxe_Int32.add = function(a,b) {
	return a + b | 0;
};
haxe_Int32.addInt = function(a,b) {
	return a + b | 0;
};
haxe_Int32.sub = function(a,b) {
	return a - b | 0;
};
haxe_Int32.subInt = function(a,b) {
	return a - b | 0;
};
haxe_Int32.intSub = function(a,b) {
	return a - b | 0;
};
haxe_Int32.mul = function(a,b) {
	return haxe_Int32._mul(a,b);
};
haxe_Int32.mulInt = function(a,b) {
	return haxe_Int32._mul(a,b);
};
haxe_Int32.toFloat = function(this1) {
	return this1;
};
haxe_Int32.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
haxe_Int32.clamp = function(x) {
	return x | 0;
};
var haxe_Int64 = {};
haxe_Int64.__properties__ = {get_low:"get_low",get_high:"get_high"};
haxe_Int64._new = function(x) {
	var this1 = x;
	return this1;
};
haxe_Int64.copy = function(this1) {
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	return this2;
};
haxe_Int64.make = function(high,low) {
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.ofInt = function(x) {
	var this1 = new haxe__$Int64__$_$_$Int64(x >> 31,x);
	return this1;
};
haxe_Int64.toInt = function(x) {
	if(x.high != x.low >> 31) {
		throw haxe_Exception.thrown("Overflow");
	}
	return x.low;
};
haxe_Int64.is = function(val) {
	return ((val) instanceof haxe__$Int64__$_$_$Int64);
};
haxe_Int64.isInt64 = function(val) {
	return ((val) instanceof haxe__$Int64__$_$_$Int64);
};
haxe_Int64.getHigh = function(x) {
	return x.high;
};
haxe_Int64.getLow = function(x) {
	return x.low;
};
haxe_Int64.isNeg = function(x) {
	return x.high < 0;
};
haxe_Int64.isZero = function(x) {
	var b_high = 0;
	var b_low = 0;
	if(x.high == b_high) {
		return x.low == b_low;
	} else {
		return false;
	}
};
haxe_Int64.compare = function(a,b) {
	var v = a.high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b.low);
	}
	if(a.high < 0) {
		if(b.high < 0) {
			return v;
		} else {
			return -1;
		}
	} else if(b.high >= 0) {
		return v;
	} else {
		return 1;
	}
};
haxe_Int64.ucompare = function(a,b) {
	var v = haxe_Int32.ucompare(a.high,b.high);
	if(v != 0) {
		return v;
	} else {
		return haxe_Int32.ucompare(a.low,b.low);
	}
};
haxe_Int64.toStr = function(x) {
	return haxe_Int64.toString(x);
};
haxe_Int64.toString = function(this1) {
	var i = this1;
	var b_high = 0;
	var b_low = 0;
	if(i.high == b_high && i.low == b_low) {
		return "0";
	}
	var str = "";
	var neg = false;
	if(i.high < 0) {
		neg = true;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(0,10);
	var ten = this1;
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(i.high != b_high || i.low != b_low)) {
			break;
		}
		var r = haxe_Int64.divMod(i,ten);
		if(r.modulus.high < 0) {
			var x = r.modulus;
			var high = ~x.high;
			var low = ~x.low + 1 | 0;
			if(low == 0) {
				var ret = high++;
				high = high | 0;
			}
			var this_high = high;
			var this_low = low;
			str = this_low + str;
			var x1 = r.quotient;
			var high1 = ~x1.high;
			var low1 = ~x1.low + 1 | 0;
			if(low1 == 0) {
				var ret1 = high1++;
				high1 = high1 | 0;
			}
			var this1 = new haxe__$Int64__$_$_$Int64(high1,low1);
			i = this1;
		} else {
			str = r.modulus.low + str;
			i = r.quotient;
		}
	}
	if(neg) {
		str = "-" + str;
	}
	return str;
};
haxe_Int64.parseString = function(sParam) {
	return haxe_Int64Helper.parseString(sParam);
};
haxe_Int64.fromFloat = function(f) {
	return haxe_Int64Helper.fromFloat(f);
};
haxe_Int64.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		switch(divisor.low) {
		case 0:
			throw haxe_Exception.thrown("divide by zero");
		case 1:
			var this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
			var this2 = new haxe__$Int64__$_$_$Int64(0,0);
			return { quotient : this1, modulus : this2};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = ~dividend.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		modulus = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
		modulus = this1;
	}
	if(divisor.high < 0) {
		var high = ~divisor.high;
		var low = ~divisor.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		divisor = this1;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	var quotient = this1;
	var this1 = new haxe__$Int64__$_$_$Int64(0,1);
	var mask = this1;
	while(!(divisor.high < 0)) {
		var v = haxe_Int32.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe_Int32.ucompare(divisor.low,modulus.low);
		var b = 1;
		b &= 63;
		if(b == 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this1;
		} else if(b < 32) {
			var this2 = new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b);
			divisor = this2;
		} else {
			var this3 = new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
			divisor = this3;
		}
		var b1 = 1;
		b1 &= 63;
		if(b1 == 0) {
			var this4 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this4;
		} else if(b1 < 32) {
			var this5 = new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1);
			mask = this5;
		} else {
			var this6 = new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
			mask = this6;
		}
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(mask.high != b_high || mask.low != b_low)) {
			break;
		}
		var v = haxe_Int32.ucompare(modulus.high,divisor.high);
		if((v != 0 ? v : haxe_Int32.ucompare(modulus.low,divisor.low)) >= 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			quotient = this1;
			var high = modulus.high - divisor.high | 0;
			var low = modulus.low - divisor.low | 0;
			if(haxe_Int32.ucompare(modulus.low,divisor.low) < 0) {
				var ret = high--;
				high = high | 0;
			}
			var this2 = new haxe__$Int64__$_$_$Int64(high,low);
			modulus = this2;
		}
		var b = 1;
		b &= 63;
		if(b == 0) {
			var this3 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this3;
		} else if(b < 32) {
			var this4 = new haxe__$Int64__$_$_$Int64(mask.high >>> b,mask.high << 32 - b | mask.low >>> b);
			mask = this4;
		} else {
			var this5 = new haxe__$Int64__$_$_$Int64(0,mask.high >>> b - 32);
			mask = this5;
		}
		var b1 = 1;
		b1 &= 63;
		if(b1 == 0) {
			var this6 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this6;
		} else if(b1 < 32) {
			var this7 = new haxe__$Int64__$_$_$Int64(divisor.high >>> b1,divisor.high << 32 - b1 | divisor.low >>> b1);
			divisor = this7;
		} else {
			var this8 = new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b1 - 32);
			divisor = this8;
		}
	}
	if(divSign) {
		var high = ~quotient.high;
		var low = ~quotient.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		quotient = this1;
	}
	if(dividend.high < 0) {
		var high = ~modulus.high;
		var low = ~modulus.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		modulus = this1;
	}
	return { quotient : quotient, modulus : modulus};
};
haxe_Int64.neg = function(x) {
	var high = ~x.high;
	var low = ~x.low + 1 | 0;
	if(low == 0) {
		var ret = high++;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.preIncrement = function(this1) {
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	var ret = this1.low++;
	this1.low = this1.low | 0;
	if(this1.low == 0) {
		var ret = this1.high++;
		this1.high = this1.high | 0;
	}
	return this1;
};
haxe_Int64.postIncrement = function(this1) {
	var ret = this1;
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	var ret1 = this1.low++;
	this1.low = this1.low | 0;
	if(this1.low == 0) {
		var ret1 = this1.high++;
		this1.high = this1.high | 0;
	}
	return ret;
};
haxe_Int64.preDecrement = function(this1) {
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	if(this1.low == 0) {
		var ret = this1.high--;
		this1.high = this1.high | 0;
	}
	var ret = this1.low--;
	this1.low = this1.low | 0;
	return this1;
};
haxe_Int64.postDecrement = function(this1) {
	var ret = this1;
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	if(this1.low == 0) {
		var ret1 = this1.high--;
		this1.high = this1.high | 0;
	}
	var ret1 = this1.low--;
	this1.low = this1.low | 0;
	return ret;
};
haxe_Int64.add = function(a,b) {
	var high = a.high + b.high | 0;
	var low = a.low + b.low | 0;
	if(haxe_Int32.ucompare(low,a.low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.addInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var high = a.high + b_high | 0;
	var low = a.low + b_low | 0;
	if(haxe_Int32.ucompare(low,a.low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.sub = function(a,b) {
	var high = a.high - b.high | 0;
	var low = a.low - b.low | 0;
	if(haxe_Int32.ucompare(a.low,b.low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.subInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var high = a.high - b_high | 0;
	var low = a.low - b_low | 0;
	if(haxe_Int32.ucompare(a.low,b_low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.intSub = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var high = a_high - b.high | 0;
	var low = a_low - b.low | 0;
	if(haxe_Int32.ucompare(a_low,b.low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.mul = function(a,b) {
	var mask = 65535;
	var al = a.low & mask;
	var ah = a.low >>> 16;
	var bl = b.low & mask;
	var bh = b.low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(a.low,b.high) + haxe_Int32._mul(a.high,b.low) | 0) | 0;
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.mulInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var mask = 65535;
	var al = a.low & mask;
	var ah = a.low >>> 16;
	var bl = b_low & mask;
	var bh = b_low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(a.low,b_high) + haxe_Int32._mul(a.high,b_low) | 0) | 0;
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.div = function(a,b) {
	return haxe_Int64.divMod(a,b).quotient;
};
haxe_Int64.divInt = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(b >> 31,b);
	return haxe_Int64.divMod(a,this1).quotient;
};
haxe_Int64.intDiv = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a >> 31,a);
	var x = haxe_Int64.divMod(this1,b).quotient;
	if(x.high != x.low >> 31) {
		throw haxe_Exception.thrown("Overflow");
	}
	var x1 = x.low;
	var this1 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	return this1;
};
haxe_Int64.mod = function(a,b) {
	return haxe_Int64.divMod(a,b).modulus;
};
haxe_Int64.modInt = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(b >> 31,b);
	var x = haxe_Int64.divMod(a,this1).modulus;
	if(x.high != x.low >> 31) {
		throw haxe_Exception.thrown("Overflow");
	}
	var x1 = x.low;
	var this1 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	return this1;
};
haxe_Int64.intMod = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a >> 31,a);
	var x = haxe_Int64.divMod(this1,b).modulus;
	if(x.high != x.low >> 31) {
		throw haxe_Exception.thrown("Overflow");
	}
	var x1 = x.low;
	var this1 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	return this1;
};
haxe_Int64.eq = function(a,b) {
	if(a.high == b.high) {
		return a.low == b.low;
	} else {
		return false;
	}
};
haxe_Int64.eqInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	if(a.high == b_high) {
		return a.low == b_low;
	} else {
		return false;
	}
};
haxe_Int64.neq = function(a,b) {
	if(a.high == b.high) {
		return a.low != b.low;
	} else {
		return true;
	}
};
haxe_Int64.neqInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	if(a.high == b_high) {
		return a.low != b_low;
	} else {
		return true;
	}
};
haxe_Int64.lt = function(a,b) {
	var v = a.high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b.low);
	}
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
};
haxe_Int64.ltInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) < 0;
};
haxe_Int64.intLt = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a_low,b.low);
	}
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
};
haxe_Int64.lte = function(a,b) {
	var v = a.high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b.low);
	}
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
};
haxe_Int64.lteInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) <= 0;
};
haxe_Int64.intLte = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a_low,b.low);
	}
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
};
haxe_Int64.gt = function(a,b) {
	var v = a.high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b.low);
	}
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
};
haxe_Int64.gtInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) > 0;
};
haxe_Int64.intGt = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a_low,b.low);
	}
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
};
haxe_Int64.gte = function(a,b) {
	var v = a.high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b.low);
	}
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
};
haxe_Int64.gteInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) >= 0;
};
haxe_Int64.intGte = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a_low,b.low);
	}
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
};
haxe_Int64.complement = function(a) {
	var this1 = new haxe__$Int64__$_$_$Int64(~a.high,~a.low);
	return this1;
};
haxe_Int64.and = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low);
	return this1;
};
haxe_Int64.or = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a.high | b.high,a.low | b.low);
	return this1;
};
haxe_Int64.xor = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a.high ^ b.high,a.low ^ b.low);
	return this1;
};
haxe_Int64.shl = function(a,b) {
	b &= 63;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
		return this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high << b | a.low >>> 32 - b,a.low << b);
		return this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(a.low << b - 32,0);
		return this1;
	}
};
haxe_Int64.shr = function(a,b) {
	b &= 63;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
		return this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high >> b,a.high << 32 - b | a.low >>> b);
		return this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high >> 31,a.high >> b - 32);
		return this1;
	}
};
haxe_Int64.ushr = function(a,b) {
	b &= 63;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
		return this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high >>> b,a.high << 32 - b | a.low >>> b);
		return this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(0,a.high >>> b - 32);
		return this1;
	}
};
haxe_Int64.get_high = function(this1) {
	return this1.high;
};
haxe_Int64.set_high = function(this1,x) {
	return this1.high = x;
};
haxe_Int64.get_low = function(this1) {
	return this1.low;
};
haxe_Int64.set_low = function(this1,x) {
	return this1.low = x;
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,toString: function() {
		return haxe_Int64.toString(this);
	}
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Int64Helper = function() { };
$hxClasses["haxe.Int64Helper"] = haxe_Int64Helper;
haxe_Int64Helper.__name__ = "haxe.Int64Helper";
haxe_Int64Helper.parseString = function(sParam) {
	var base_high = 0;
	var base_low = 10;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	var current = this1;
	var this1 = new haxe__$Int64__$_$_$Int64(0,1);
	var multiplier = this1;
	var sIsNegative = false;
	var s = StringTools.trim(sParam);
	if(s.charAt(0) == "-") {
		sIsNegative = true;
		s = s.substring(1,s.length);
	}
	var len = s.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var digitInt = HxOverrides.cca(s,len - 1 - i) - 48;
		if(digitInt < 0 || digitInt > 9) {
			throw haxe_Exception.thrown("NumberFormatError");
		}
		if(digitInt != 0) {
			var digit_high = digitInt >> 31;
			var digit_low = digitInt;
			if(sIsNegative) {
				var mask = 65535;
				var al = multiplier.low & mask;
				var ah = multiplier.low >>> 16;
				var bl = digit_low & mask;
				var bh = digit_low >>> 16;
				var p00 = haxe_Int32._mul(al,bl);
				var p10 = haxe_Int32._mul(ah,bl);
				var p01 = haxe_Int32._mul(al,bh);
				var p11 = haxe_Int32._mul(ah,bh);
				var low = p00;
				var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
				p01 <<= 16;
				low = low + p01 | 0;
				if(haxe_Int32.ucompare(low,p01) < 0) {
					var ret = high++;
					high = high | 0;
				}
				p10 <<= 16;
				low = low + p10 | 0;
				if(haxe_Int32.ucompare(low,p10) < 0) {
					var ret1 = high++;
					high = high | 0;
				}
				high = high + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
				var b_high = high;
				var b_low = low;
				var high1 = current.high - b_high | 0;
				var low1 = current.low - b_low | 0;
				if(haxe_Int32.ucompare(current.low,b_low) < 0) {
					var ret2 = high1--;
					high1 = high1 | 0;
				}
				var this1 = new haxe__$Int64__$_$_$Int64(high1,low1);
				current = this1;
				if(!(current.high < 0)) {
					throw haxe_Exception.thrown("NumberFormatError: Underflow");
				}
			} else {
				var mask1 = 65535;
				var al1 = multiplier.low & mask1;
				var ah1 = multiplier.low >>> 16;
				var bl1 = digit_low & mask1;
				var bh1 = digit_low >>> 16;
				var p001 = haxe_Int32._mul(al1,bl1);
				var p101 = haxe_Int32._mul(ah1,bl1);
				var p011 = haxe_Int32._mul(al1,bh1);
				var p111 = haxe_Int32._mul(ah1,bh1);
				var low2 = p001;
				var high2 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
				p011 <<= 16;
				low2 = low2 + p011 | 0;
				if(haxe_Int32.ucompare(low2,p011) < 0) {
					var ret3 = high2++;
					high2 = high2 | 0;
				}
				p101 <<= 16;
				low2 = low2 + p101 | 0;
				if(haxe_Int32.ucompare(low2,p101) < 0) {
					var ret4 = high2++;
					high2 = high2 | 0;
				}
				high2 = high2 + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
				var b_high1 = high2;
				var b_low1 = low2;
				var high3 = current.high + b_high1 | 0;
				var low3 = current.low + b_low1 | 0;
				if(haxe_Int32.ucompare(low3,current.low) < 0) {
					var ret5 = high3++;
					high3 = high3 | 0;
				}
				var this2 = new haxe__$Int64__$_$_$Int64(high3,low3);
				current = this2;
				if(current.high < 0) {
					throw haxe_Exception.thrown("NumberFormatError: Overflow");
				}
			}
		}
		var mask2 = 65535;
		var al2 = multiplier.low & mask2;
		var ah2 = multiplier.low >>> 16;
		var bl2 = base_low & mask2;
		var bh2 = base_low >>> 16;
		var p002 = haxe_Int32._mul(al2,bl2);
		var p102 = haxe_Int32._mul(ah2,bl2);
		var p012 = haxe_Int32._mul(al2,bh2);
		var p112 = haxe_Int32._mul(ah2,bh2);
		var low4 = p002;
		var high4 = (p112 + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
		p012 <<= 16;
		low4 = low4 + p012 | 0;
		if(haxe_Int32.ucompare(low4,p012) < 0) {
			var ret6 = high4++;
			high4 = high4 | 0;
		}
		p102 <<= 16;
		low4 = low4 + p102 | 0;
		if(haxe_Int32.ucompare(low4,p102) < 0) {
			var ret7 = high4++;
			high4 = high4 | 0;
		}
		high4 = high4 + (haxe_Int32._mul(multiplier.low,base_high) + haxe_Int32._mul(multiplier.high,base_low) | 0) | 0;
		var this3 = new haxe__$Int64__$_$_$Int64(high4,low4);
		multiplier = this3;
	}
	return current;
};
haxe_Int64Helper.fromFloat = function(f) {
	if(isNaN(f) || !isFinite(f)) {
		throw haxe_Exception.thrown("Number is NaN or Infinite");
	}
	var noFractions = f - f % 1;
	if(noFractions > 9007199254740991) {
		throw haxe_Exception.thrown("Conversion overflow");
	}
	if(noFractions < -9007199254740991) {
		throw haxe_Exception.thrown("Conversion underflow");
	}
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	var result = this1;
	var neg = noFractions < 0;
	var rest = neg ? -noFractions : noFractions;
	var i = 0;
	while(rest >= 1) {
		var curr = rest % 2;
		rest /= 2;
		if(curr >= 1) {
			var a_high = 0;
			var a_low = 1;
			var b = i;
			b &= 63;
			var b1;
			if(b == 0) {
				var this1 = new haxe__$Int64__$_$_$Int64(a_high,a_low);
				b1 = this1;
			} else if(b < 32) {
				var this2 = new haxe__$Int64__$_$_$Int64(a_high << b | a_low >>> 32 - b,a_low << b);
				b1 = this2;
			} else {
				var this3 = new haxe__$Int64__$_$_$Int64(a_low << b - 32,0);
				b1 = this3;
			}
			var high = result.high + b1.high | 0;
			var low = result.low + b1.low | 0;
			if(haxe_Int32.ucompare(low,result.low) < 0) {
				var ret = high++;
				high = high | 0;
			}
			var this4 = new haxe__$Int64__$_$_$Int64(high,low);
			result = this4;
		}
		++i;
	}
	if(neg) {
		var high = ~result.high;
		var low = ~result.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		result = this1;
	}
	return result;
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.lastError = null;
haxe_NativeStackTrace.wrapCallSite = null;
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.content = null;
haxe_Resource.listNames = function() {
	var _g = [];
	var _g1 = 0;
	var _g2 = haxe_Resource.content;
	while(_g1 < _g2.length) {
		var x = _g2[_g1];
		++_g1;
		_g.push(x.name);
	}
	return _g;
};
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Rest = {};
haxe_Rest.__properties__ = {get_length:"get_length"};
haxe_Rest.get_length = function(this1) {
	return this1.length;
};
haxe_Rest.of = function(array) {
	var this1 = array;
	return this1;
};
haxe_Rest._new = function(array) {
	var this1 = array;
	return this1;
};
haxe_Rest.get = function(this1,index) {
	return this1[index];
};
haxe_Rest.toArray = function(this1) {
	return this1.slice();
};
haxe_Rest.iterator = function(this1) {
	return new haxe_iterators_RestIterator(this1);
};
haxe_Rest.keyValueIterator = function(this1) {
	return new haxe_iterators_RestKeyValueIterator(this1);
};
haxe_Rest.append = function(this1,item) {
	var result = this1.slice();
	result.push(item);
	var this1 = result;
	return this1;
};
haxe_Rest.prepend = function(this1,item) {
	var result = this1.slice();
	result.unshift(item);
	var this1 = result;
	return this1;
};
haxe_Rest.toString = function(this1) {
	return "[" + this1.toString() + "]";
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = HxOverrides.now() / 1000;
	var r = f();
	haxe_Log.trace(HxOverrides.now() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return HxOverrides.now() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = this.buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.fastLength = function(s) {
	return s.length;
};
haxe_Unserializer.fastCharCodeAt = function(s,pos) {
	return HxOverrides.cca(s,pos);
};
haxe_Unserializer.fastCharAt = function(s,pos) {
	return s.charAt(pos);
};
haxe_Unserializer.fastSubstr = function(s,pos,length) {
	return HxOverrides.substr(s,pos,length);
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,getResolver: function() {
		return this.resolver;
	}
	,get: function(p) {
		return this.buf.charCodeAt(p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var _this = edecl.__constructs__;
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i]._hx_name;
			}
			var tag = result[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = "haxe._Unserializer.NullResolver";
haxe__$Unserializer_NullResolver.__properties__ = {get_instance:"get_instance"};
haxe__$Unserializer_NullResolver.instance = null;
haxe__$Unserializer_NullResolver.get_instance = function() {
	if(haxe__$Unserializer_NullResolver.instance == null) {
		haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
	}
	return haxe__$Unserializer_NullResolver.instance;
};
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len = this.length < other.length ? this.length : other.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) {
			var i = _g++;
			var c = this.b[i];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:"haxe.io.Encoding",__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
haxe_crypto_Base64.urlEncode = function(bytes,complement) {
	if(complement == null) {
		complement = false;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.URL_BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.urlDecode = function(str,complement) {
	if(complement == null) {
		complement = false;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.URL_BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.encode = function(s,base) {
	var b = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(base));
	return b.encodeString(s);
};
haxe_crypto_BaseCode.decode = function(s,base) {
	var b = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(base));
	return b.decodeString(s);
};
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,encodeString: function(s) {
		return this.encodeBytes(haxe_io_Bytes.ofString(s)).toString();
	}
	,decodeString: function(s) {
		return this.decodeBytes(haxe_io_Bytes.ofString(s)).toString();
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
haxe_ds_ArraySort.compare = function(a,cmp,i,j) {
	return cmp(a[i],a[j]);
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.iteratorLoop = function(node,acc) {
	if(node != null) {
		haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
		acc.push(node.value);
		haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
	}
};
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,copy: function() {
		var copied = new haxe_ds_BalancedTree();
		copied.root = this.root;
		return copied;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,toString: function() {
		if(this.root == null) {
			return "{}";
		} else {
			return "{" + this.root.toString() + "}";
		}
	}
	,clear: function() {
		this.root = null;
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,toString: function() {
		return (this.left == null ? "" : this.left.toString() + ", ") + ("" + Std.string(this.key) + "=" + Std.string(this.value)) + (this.right == null ? "" : ", " + this.right.toString());
	}
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,copy: function() {
		var copied = new haxe_ds_EnumValueMap();
		copied.root = this.root;
		return copied;
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_HashMap = {};
haxe_ds_HashMap._new = function() {
	var this1 = new haxe_ds__$HashMap_HashMapData();
	return this1;
};
haxe_ds_HashMap.set = function(this1,k,v) {
	var _this = this1.keys;
	var key = k.hashCode();
	_this.h[key] = k;
	var _this = this1.values;
	var key = k.hashCode();
	_this.h[key] = v;
};
haxe_ds_HashMap.get = function(this1,k) {
	var _this = this1.values;
	var key = k.hashCode();
	return _this.h[key];
};
haxe_ds_HashMap.exists = function(this1,k) {
	var _this = this1.values;
	var key = k.hashCode();
	return _this.h.hasOwnProperty(key);
};
haxe_ds_HashMap.remove = function(this1,k) {
	this1.values.remove(k.hashCode());
	return this1.keys.remove(k.hashCode());
};
haxe_ds_HashMap.keys = function(this1) {
	return this1.keys.iterator();
};
haxe_ds_HashMap.copy = function(this1) {
	var copied = new haxe_ds__$HashMap_HashMapData();
	copied.keys = this1.keys.copy();
	copied.values = this1.values.copy();
	return copied;
};
haxe_ds_HashMap.iterator = function(this1) {
	return this1.values.iterator();
};
haxe_ds_HashMap.keyValueIterator = function(this1) {
	return new haxe_iterators_HashMapKeyValueIterator(this1);
};
haxe_ds_HashMap.clear = function(this1) {
	this1.keys.h = { };
	this1.values.h = { };
};
var haxe_ds__$HashMap_HashMapData = function() {
	this.keys = new haxe_ds_IntMap();
	this.values = new haxe_ds_IntMap();
};
$hxClasses["haxe.ds._HashMap.HashMapData"] = haxe_ds__$HashMap_HashMapData;
haxe_ds__$HashMap_HashMapData.__name__ = "haxe.ds._HashMap.HashMapData";
haxe_ds__$HashMap_HashMapData.prototype = {
	keys: null
	,values: null
	,__class__: haxe_ds__$HashMap_HashMapData
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_IntMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.h[key1] = this.h[key1];
		}
		return copied;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,clear: function() {
		this.h = { };
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,last: function() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,keyValueIterator: function() {
		return new haxe_ds__$List_ListKeyValueIterator(this.h);
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	,join: function(sep) {
		var s_b = "";
		var first = true;
		var l = this.h;
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += sep == null ? "null" : "" + sep;
			}
			s_b += Std.string(l.item);
			l = l.next;
		}
		return s_b;
	}
	,filter: function(f) {
		var l2 = new haxe_ds_List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	,map: function(f) {
		var b = new haxe_ds_List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			b.add(f(v));
		}
		return b;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds__$List_ListKeyValueIterator = function(head) {
	this.head = head;
	this.idx = 0;
};
$hxClasses["haxe.ds._List.ListKeyValueIterator"] = haxe_ds__$List_ListKeyValueIterator;
haxe_ds__$List_ListKeyValueIterator.__name__ = "haxe.ds._List.ListKeyValueIterator";
haxe_ds__$List_ListKeyValueIterator.prototype = {
	idx: null
	,head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return { value : val, key : this.idx++};
	}
	,__class__: haxe_ds__$List_ListKeyValueIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.count = null;
haxe_ds_ObjectMap.assignId = function(obj) {
	return (obj.__id__ = $global.$haxeUID++);
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_ObjectMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.h[key1.__id__]);
		}
		return copied;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,clear: function() {
		this.h = { __keys__ : { }};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_ReadOnlyArray = {};
haxe_ds_ReadOnlyArray.__properties__ = {get_length:"get_length"};
haxe_ds_ReadOnlyArray.get_length = function(this1) {
	return this1.length;
};
haxe_ds_ReadOnlyArray.get = function(this1,i) {
	return this1[i];
};
haxe_ds_ReadOnlyArray.concat = function(this1,a) {
	return this1.concat(a);
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.createCopy = function(h) {
	var copy = new haxe_ds_StringMap();
	for (var key in h) copy.h[key] = h[key];
	return copy;
};
haxe_ds_StringMap.stringify = function(h) {
	var s = "{";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "}";
};
haxe_ds_StringMap.prototype = {
	h: null
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapValueIterator(this.h);
	}
	,keyValueIterator: function() {
		return new haxe_ds__$StringMap_StringMapKeyValueIterator(this.h);
	}
	,copy: function() {
		return haxe_ds_StringMap.createCopy(this.h);
	}
	,clear: function() {
		this.h = Object.create(null);
	}
	,toString: function() {
		return haxe_ds_StringMap.stringify(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_ds__$StringMap_StringMapValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapValueIterator"] = haxe_ds__$StringMap_StringMapValueIterator;
haxe_ds__$StringMap_StringMapValueIterator.__name__ = "haxe.ds._StringMap.StringMapValueIterator";
haxe_ds__$StringMap_StringMapValueIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.h[this.keys[this.current++]];
	}
	,__class__: haxe_ds__$StringMap_StringMapValueIterator
};
var haxe_ds__$StringMap_StringMapKeyValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyValueIterator"] = haxe_ds__$StringMap_StringMapKeyValueIterator;
haxe_ds__$StringMap_StringMapKeyValueIterator.__name__ = "haxe.ds._StringMap.StringMapKeyValueIterator";
haxe_ds__$StringMap_StringMapKeyValueIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		var key = this.keys[this.current++];
		return { key : key, value : this.h[key]};
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyValueIterator
};
var haxe_ds_Vector = {};
haxe_ds_Vector.__properties__ = {get_length:"get_length"};
haxe_ds_Vector._new = function(length) {
	var this1 = new Array(length);
	return this1;
};
haxe_ds_Vector.get = function(this1,index) {
	return this1[index];
};
haxe_ds_Vector.set = function(this1,index,val) {
	return this1[index] = val;
};
haxe_ds_Vector.get_length = function(this1) {
	return this1.length;
};
haxe_ds_Vector.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var k = _g++;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i = srcPos;
			var j = destPos;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var k = _g++;
				src[j] = src[i];
				++i;
				++j;
			}
		}
	} else {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			dest[destPos + i] = src[srcPos + i];
		}
	}
};
haxe_ds_Vector.toArray = function(this1) {
	return this1.slice(0);
};
haxe_ds_Vector.toData = function(this1) {
	return this1;
};
haxe_ds_Vector.fromData = function(data) {
	return data;
};
haxe_ds_Vector.fromArrayCopy = function(array) {
	return array.slice(0);
};
haxe_ds_Vector.copy = function(this1) {
	var this2 = new Array(this1.length);
	var r = this2;
	haxe_ds_Vector.blit(this1,0,r,0,this1.length);
	return r;
};
haxe_ds_Vector.join = function(this1,sep) {
	var b_b = "";
	var len = this1.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		b_b += Std.string(Std.string(this1[i]));
		if(i < len - 1) {
			b_b += sep == null ? "null" : "" + sep;
		}
	}
	return b_b;
};
haxe_ds_Vector.map = function(this1,f) {
	var length = this1.length;
	var this2 = new Array(length);
	var r = this2;
	var len = length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var v = f(this1[i]);
		r[i] = v;
	}
	return r;
};
haxe_ds_Vector.sort = function(this1,f) {
	this1.sort(f);
};
var haxe_ds_WeakMap = function() {
	throw new haxe_exceptions_NotImplementedException("Not implemented for this platform",null,{ fileName : "haxe/ds/WeakMap.hx", lineNumber : 39, className : "haxe.ds.WeakMap", methodName : "new"});
};
$hxClasses["haxe.ds.WeakMap"] = haxe_ds_WeakMap;
haxe_ds_WeakMap.__name__ = "haxe.ds.WeakMap";
haxe_ds_WeakMap.__interfaces__ = [haxe_IMap];
haxe_ds_WeakMap.prototype = {
	set: function(key,value) {
	}
	,get: function(key) {
		return null;
	}
	,exists: function(key) {
		return false;
	}
	,remove: function(key) {
		return false;
	}
	,keys: function() {
		return null;
	}
	,iterator: function() {
		return null;
	}
	,keyValueIterator: function() {
		return null;
	}
	,copy: function() {
		return null;
	}
	,toString: function() {
		return null;
	}
	,clear: function() {
	}
	,__class__: haxe_ds_WeakMap
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
	this.__skipStack++;
};
$hxClasses["haxe.exceptions.PosException"] = haxe_exceptions_PosException;
haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException";
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	posInfos: null
	,toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
	this.__skipStack++;
};
$hxClasses["haxe.exceptions.NotImplementedException"] = haxe_exceptions_NotImplementedException;
haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException";
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,get_length: function() {
		return this.pos;
	}
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addString: function(v,encoding) {
		this.add(haxe_io_Bytes.ofString(v,encoding));
	}
	,addInt32: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setInt32(this.pos,v,true);
		this.pos += 4;
	}
	,addInt64: function(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setInt32(this.pos,v.low,true);
		this.view.setInt32(this.pos + 4,v.high,true);
		this.pos += 8;
	}
	,addFloat: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setFloat32(this.pos,v,true);
		this.pos += 4;
	}
	,addDouble: function(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setFloat64(this.pos,v,true);
		this.pos += 8;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
	,__properties__: {get_length:"get_length"}
};
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	bigEndian: null
	,writeByte: function(c) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Output.hx", lineNumber : 47, className : "haxe.io.Output", methodName : "writeByte"});
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,flush: function() {
	}
	,close: function() {
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeDouble: function(x) {
		var i64 = haxe_io_FPHelper.doubleToI64(x);
		if(this.bigEndian) {
			this.writeInt32(i64.high);
			this.writeInt32(i64.low);
		} else {
			this.writeInt32(i64.low);
			this.writeInt32(i64.high);
		}
	}
	,writeInt8: function(x) {
		if(x < -128 || x >= 128) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		this.writeByte(x & 255);
	}
	,writeInt16: function(x) {
		if(x < -32768 || x >= 32768) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		this.writeUInt16(x & 65535);
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt24: function(x) {
		if(x < -8388608 || x >= 8388608) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		this.writeUInt24(x & 16777215);
	}
	,writeUInt24: function(x) {
		if(x < 0 || x >= 16777216) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 16);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,prepare: function(nbytes) {
	}
	,writeInput: function(i,bufsize) {
		if(bufsize == null) {
			bufsize = 4096;
		}
		var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
		try {
			while(true) {
				var len = i.readBytes(buf,0,bufsize);
				if(len == 0) {
					throw haxe_Exception.thrown(haxe_io_Error.Blocked);
				}
				var p = 0;
				while(len > 0) {
					var k = this.writeBytes(buf,p,len);
					if(k == 0) {
						throw haxe_Exception.thrown(haxe_io_Error.Blocked);
					}
					p += k;
					len -= k;
				}
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,get_length: function() {
		return this.b.pos;
	}
	,writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
	,__properties__: $extend(haxe_io_Output.prototype.__properties__,{get_length:"get_length"})
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:"haxe.io.Error",__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper._i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var e = i >> 23 & 255;
	if(e == 255) {
		if((i & 8388607) == 0) {
			if(sign > 0) {
				return Infinity;
			} else {
				return -Infinity;
			}
		} else {
			return NaN;
		}
	}
	var m = e == 0 ? (i & 8388607) << 1 : i & 8388607 | 8388608;
	return sign * m * Math.pow(2,e - 150);
};
haxe_io_FPHelper._i64ToDouble = function(lo,hi) {
	var sign = 1 - (hi >>> 31 << 1);
	var e = hi >> 20 & 2047;
	if(e == 2047) {
		if(lo == 0 && (hi & 1048575) == 0) {
			if(sign > 0) {
				return Infinity;
			} else {
				return -Infinity;
			}
		} else {
			return NaN;
		}
	}
	var m = 2.220446049250313e-16 * ((hi & 1048575) * 4294967296. + (lo >>> 31) * 2147483648. + (lo & 2147483647));
	if(e == 0) {
		m *= 2.0;
	} else {
		m += 1.0;
	}
	return sign * m * Math.pow(2,e - 1023);
};
haxe_io_FPHelper._floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp > 127) {
		return 2139095040;
	} else {
		if(exp <= -127) {
			exp = -127;
			af *= 7.1362384635298e+44;
		} else {
			af = (af / Math.pow(2,exp) - 1.0) * 8388608;
		}
		return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | Math.round(af);
	}
};
haxe_io_FPHelper._doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		i64.low = 0;
		i64.high = v > 0 ? 2146435072 : -1048576;
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		if(exp > 1023) {
			i64.low = -1;
			i64.high = 2146435071;
		} else {
			if(exp <= -1023) {
				exp = -1023;
				av /= 2.2250738585072014e-308;
			} else {
				av = av / Math.pow(2,exp) - 1.0;
			}
			var sig = Math.round(av * 4503599627370496.);
			var sig_l = sig | 0;
			var sig_h = sig / 4294967296.0 | 0;
			i64.low = sig_l;
			i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
		}
	}
	return i64;
};
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	haxe_io_FPHelper.helper.setFloat64(0,v,true);
	i64.low = haxe_io_FPHelper.helper.getInt32(0,true);
	i64.high = haxe_io_FPHelper.helper.getInt32(4,true);
	return i64;
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,close: function() {
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readAll: function(bufsize) {
		if(bufsize == null) {
			bufsize = 16384;
		}
		var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
		var total = new haxe_io_BytesBuffer();
		try {
			while(true) {
				var len = this.readBytes(buf,0,bufsize);
				if(len == 0) {
					throw haxe_Exception.thrown(haxe_io_Error.Blocked);
				}
				total.addBytes(buf,0,len);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return total.getBytes();
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUntil: function(end) {
		var buf = new haxe_io_BytesBuffer();
		var last;
		while(true) {
			last = this.readByte();
			if(!(last != end)) {
				break;
			}
			buf.addByte(last);
		}
		return buf.getBytes().toString();
	}
	,readLine: function() {
		var buf = new haxe_io_BytesBuffer();
		var last;
		var s;
		try {
			while(true) {
				last = this.readByte();
				if(!(last != 10)) {
					break;
				}
				buf.addByte(last);
			}
			s = buf.getBytes().toString();
			if(HxOverrides.cca(s,s.length - 1) == 13) {
				s = HxOverrides.substr(s,0,-1);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof haxe_io_Eof)) {
				var e = _g1;
				s = buf.getBytes().toString();
				if(s.length == 0) {
					throw haxe_Exception.thrown(e);
				}
			} else {
				throw _g;
			}
		}
		return s;
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt8: function() {
		var n = this.readByte();
		if(n >= 128) {
			return n - 256;
		}
		return n;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var n = this.bigEndian ? ch3 | ch2 << 8 | ch1 << 16 : ch1 | ch2 << 8 | ch3 << 16;
		if((n & 8388608) != 0) {
			return n - 16777216;
		}
		return n;
	}
	,readUInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		if(this.bigEndian) {
			return ch3 | ch2 << 8 | ch1 << 16;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,getDoubleSig: function(bytes) {
		return ((bytes[1] & 15) << 16 | bytes[2] << 8 | bytes[3]) * 4294967296. + (bytes[4] >> 7) * 2147483648 + ((bytes[4] & 127) << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7]);
	}
	,__class__: haxe_io_Input
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_ArrayKeyValueIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayKeyValueIterator"] = haxe_iterators_ArrayKeyValueIterator;
haxe_iterators_ArrayKeyValueIterator.__name__ = "haxe.iterators.ArrayKeyValueIterator";
haxe_iterators_ArrayKeyValueIterator.prototype = {
	current: null
	,array: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return { value : this.array[this.current], key : this.current++};
	}
	,__class__: haxe_iterators_ArrayKeyValueIterator
};
var haxe_iterators_DynamicAccessIterator = function(access) {
	this.access = access;
	this.keys = Reflect.fields(access);
	this.index = 0;
};
$hxClasses["haxe.iterators.DynamicAccessIterator"] = haxe_iterators_DynamicAccessIterator;
haxe_iterators_DynamicAccessIterator.__name__ = "haxe.iterators.DynamicAccessIterator";
haxe_iterators_DynamicAccessIterator.prototype = {
	access: null
	,keys: null
	,index: null
	,hasNext: function() {
		return this.index < this.keys.length;
	}
	,next: function() {
		return this.access[this.keys[this.index++]];
	}
	,__class__: haxe_iterators_DynamicAccessIterator
};
var haxe_iterators_DynamicAccessKeyValueIterator = function(access) {
	this.access = access;
	this.keys = Reflect.fields(access);
	this.index = 0;
};
$hxClasses["haxe.iterators.DynamicAccessKeyValueIterator"] = haxe_iterators_DynamicAccessKeyValueIterator;
haxe_iterators_DynamicAccessKeyValueIterator.__name__ = "haxe.iterators.DynamicAccessKeyValueIterator";
haxe_iterators_DynamicAccessKeyValueIterator.prototype = {
	access: null
	,keys: null
	,index: null
	,hasNext: function() {
		return this.index < this.keys.length;
	}
	,next: function() {
		var key = this.keys[this.index++];
		return { value : this.access[key], key : key};
	}
	,__class__: haxe_iterators_DynamicAccessKeyValueIterator
};
var haxe_iterators_HashMapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys.iterator();
};
$hxClasses["haxe.iterators.HashMapKeyValueIterator"] = haxe_iterators_HashMapKeyValueIterator;
haxe_iterators_HashMapKeyValueIterator.__name__ = "haxe.iterators.HashMapKeyValueIterator";
haxe_iterators_HashMapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		var _this = this.map.values;
		var key1 = key.hashCode();
		return { value : _this.h[key1], key : key};
	}
	,__class__: haxe_iterators_HashMapKeyValueIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_iterators_RestIterator = function(args) {
	this.current = 0;
	this.args = args;
};
$hxClasses["haxe.iterators.RestIterator"] = haxe_iterators_RestIterator;
haxe_iterators_RestIterator.__name__ = "haxe.iterators.RestIterator";
haxe_iterators_RestIterator.prototype = {
	args: null
	,current: null
	,hasNext: function() {
		return this.current < this.args.length;
	}
	,next: function() {
		return this.args[this.current++];
	}
	,__class__: haxe_iterators_RestIterator
};
var haxe_iterators_RestKeyValueIterator = function(args) {
	this.current = 0;
	this.args = args;
};
$hxClasses["haxe.iterators.RestKeyValueIterator"] = haxe_iterators_RestKeyValueIterator;
haxe_iterators_RestKeyValueIterator.__name__ = "haxe.iterators.RestKeyValueIterator";
haxe_iterators_RestKeyValueIterator.prototype = {
	args: null
	,current: null
	,hasNext: function() {
		return this.current < this.args.length;
	}
	,next: function() {
		return { key : this.current, value : this.args[this.current++]};
	}
	,__class__: haxe_iterators_RestKeyValueIterator
};
var haxe_iterators_StringIterator = function(s) {
	this.offset = 0;
	this.s = s;
};
$hxClasses["haxe.iterators.StringIterator"] = haxe_iterators_StringIterator;
haxe_iterators_StringIterator.__name__ = "haxe.iterators.StringIterator";
haxe_iterators_StringIterator.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		return this.s.charCodeAt(this.offset++);
	}
	,__class__: haxe_iterators_StringIterator
};
var haxe_iterators_StringIteratorUnicode = function(s) {
	this.offset = 0;
	this.s = s;
};
$hxClasses["haxe.iterators.StringIteratorUnicode"] = haxe_iterators_StringIteratorUnicode;
haxe_iterators_StringIteratorUnicode.__name__ = "haxe.iterators.StringIteratorUnicode";
haxe_iterators_StringIteratorUnicode.unicodeIterator = function(s) {
	return new haxe_iterators_StringIteratorUnicode(s);
};
haxe_iterators_StringIteratorUnicode.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		var s = this.s;
		var index = this.offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			this.offset++;
		}
		return c1;
	}
	,__class__: haxe_iterators_StringIteratorUnicode
};
var haxe_iterators_StringKeyValueIterator = function(s) {
	this.offset = 0;
	this.s = s;
};
$hxClasses["haxe.iterators.StringKeyValueIterator"] = haxe_iterators_StringKeyValueIterator;
haxe_iterators_StringKeyValueIterator.__name__ = "haxe.iterators.StringKeyValueIterator";
haxe_iterators_StringKeyValueIterator.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		return { key : this.offset, value : this.s.charCodeAt(this.offset++)};
	}
	,__class__: haxe_iterators_StringKeyValueIterator
};
var haxe_ui_backend_BackendImpl = function() { };
$hxClasses["haxe.ui.backend.BackendImpl"] = haxe_ui_backend_BackendImpl;
haxe_ui_backend_BackendImpl.__name__ = "haxe.ui.backend.BackendImpl";
var haxe_ui_Backend = function() { };
$hxClasses["haxe.ui.Backend"] = haxe_ui_Backend;
haxe_ui_Backend.__name__ = "haxe.ui.Backend";
haxe_ui_Backend.__properties__ = {get_id:"get_id"};
haxe_ui_Backend.id = null;
haxe_ui_Backend.get_id = function() {
	return haxe_ui_backend_BackendImpl.id;
};
haxe_ui_Backend.__super__ = haxe_ui_backend_BackendImpl;
haxe_ui_Backend.prototype = $extend(haxe_ui_backend_BackendImpl.prototype,{
	__class__: haxe_ui_Backend
});
var haxe_ui_backend_CallLaterImpl = function(fn) {
	window.requestAnimationFrame(function(timestamp) {
		fn();
	});
};
$hxClasses["haxe.ui.backend.CallLaterImpl"] = haxe_ui_backend_CallLaterImpl;
haxe_ui_backend_CallLaterImpl.__name__ = "haxe.ui.backend.CallLaterImpl";
haxe_ui_backend_CallLaterImpl.prototype = {
	__class__: haxe_ui_backend_CallLaterImpl
};
var haxe_ui_CallLater = function(fn) {
	haxe_ui_backend_CallLaterImpl.call(this,fn);
};
$hxClasses["haxe.ui.CallLater"] = haxe_ui_CallLater;
haxe_ui_CallLater.__name__ = "haxe.ui.CallLater";
haxe_ui_CallLater.__super__ = haxe_ui_backend_CallLaterImpl;
haxe_ui_CallLater.prototype = $extend(haxe_ui_backend_CallLaterImpl.prototype,{
	__class__: haxe_ui_CallLater
});
var haxe_ui_backend_AppBase = function() {
	this._icon = null;
	this.__events = null;
};
$hxClasses["haxe.ui.backend.AppBase"] = haxe_ui_backend_AppBase;
haxe_ui_backend_AppBase.__name__ = "haxe.ui.backend.AppBase";
haxe_ui_backend_AppBase.prototype = {
	__events: null
	,registerEvent: function(type,listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(this.__events == null) {
			this.__events = new haxe_ui_util_EventMap();
		}
		this.__events.add(type,listener,priority);
	}
	,hasEvent: function(type,listener) {
		if(this.__events == null) {
			return false;
		}
		return this.__events.contains(type,listener);
	}
	,unregisterEvent: function(type,listener) {
		if(this.__events != null) {
			this.__events.remove(type,listener);
		}
	}
	,dispatch: function(event) {
		if(this.__events != null) {
			this.__events.invoke(event.type,event,null);
		}
	}
	,build: function() {
	}
	,init: function(onReady,onEnd) {
		onReady();
	}
	,getToolkitInit: function() {
		return { };
	}
	,start: function() {
	}
	,exit: function() {
	}
	,buildPreloadList: function() {
		return [];
	}
	,_icon: null
	,get_icon: function() {
		return this._icon;
	}
	,set_icon: function(value) {
		this._icon = value;
		return value;
	}
	,__class__: haxe_ui_backend_AppBase
	,__properties__: {set_icon:"set_icon",get_icon:"get_icon"}
};
var haxe_ui_backend_AppImpl = function() {
	haxe_ui_backend_AppBase.call(this);
};
$hxClasses["haxe.ui.backend.AppImpl"] = haxe_ui_backend_AppImpl;
haxe_ui_backend_AppImpl.__name__ = "haxe.ui.backend.AppImpl";
haxe_ui_backend_AppImpl.__super__ = haxe_ui_backend_AppBase;
haxe_ui_backend_AppImpl.prototype = $extend(haxe_ui_backend_AppBase.prototype,{
	init: function(onReady,onEnd) {
		var title = haxe_ui_Toolkit.get_backendProperties().getProp("haxe.ui.html5.title");
		if(title != null) {
			haxe_ui_core_Screen.get_instance().set_title(title);
		}
		if(window.document.readyState == "complete") {
			onReady();
		} else {
			window.addEventListener("load",function(e) {
				onReady();
			});
		}
	}
	,getToolkitInit: function() {
		return { container : this.findContainer(haxe_ui_Toolkit.get_backendProperties().getProp("haxe.ui.html5.container","body"))};
	}
	,findContainer: function(id) {
		var el = null;
		if(id == "body") {
			el = window.document.body;
		} else if(id != null) {
			el = window.document.getElementById(id);
		}
		if(el == null) {
			el = window.document.body;
		}
		el.style.overflow = "hidden";
		return el;
	}
	,__class__: haxe_ui_backend_AppImpl
});
var haxe_ui_HaxeUIApp = function(options) {
	this.preloader = null;
	this.preloaderClass = null;
	haxe_ui_backend_AppImpl.call(this);
	haxe_ui_HaxeUIApp.instance = this;
	this._options = options;
	haxe_ui_Toolkit.build();
	this.build();
};
$hxClasses["haxe.ui.HaxeUIApp"] = haxe_ui_HaxeUIApp;
haxe_ui_HaxeUIApp.__name__ = "haxe.ui.HaxeUIApp";
haxe_ui_HaxeUIApp.instance = null;
haxe_ui_HaxeUIApp.__super__ = haxe_ui_backend_AppImpl;
haxe_ui_HaxeUIApp.prototype = $extend(haxe_ui_backend_AppImpl.prototype,{
	_options: null
	,ready: function(onReady,onEnd) {
		this.init(onReady,onEnd);
	}
	,preloaderClass: null
	,preloader: null
	,init: function(onReady,onEnd) {
		if(haxe_ui_Toolkit.get_backendProperties().getProp("haxe.ui.theme") != null && haxe_ui_Toolkit.get_theme() == "default") {
			haxe_ui_Toolkit.set_theme(haxe_ui_Toolkit.get_backendProperties().getProp("haxe.ui.theme"));
		}
		if(this._options == null) {
			haxe_ui_Toolkit.init(this.getToolkitInit());
		} else {
			haxe_ui_Toolkit.init(this._options);
		}
		var preloadList = null;
		preloadList = this.buildPreloadList();
		if(preloadList != null && preloadList.length > 0) {
			if(this.preloaderClass == null) {
				this.preloader = new haxe_ui_Preloader();
			} else {
				this.preloader = Type.createInstance(this.preloaderClass,[]);
			}
			this.preloader.progress(0,preloadList.length);
			this.addComponent(this.preloader);
			this.preloader.validateComponent();
		}
		this.handlePreload(preloadList,onReady,onEnd,this.preloader);
	}
	,handlePreload: function(list,onReady,onEnd,preloader) {
		var _gthis = this;
		if(list == null || list.length == 0) {
			if(preloader != null) {
				preloader.complete();
			}
			haxe_ui_backend_AppImpl.prototype.init.call(this,onReady,onEnd);
			return;
		}
		var item = list.shift();
		switch(item.type) {
		case "font":
			haxe_ui_ToolkitAssets.get_instance().getFont(item.resourceId,function(f) {
				if(preloader != null) {
					preloader.increment();
				}
				_gthis.handlePreload(list,onReady,onEnd,preloader);
			});
			break;
		case "image":
			haxe_ui_ToolkitAssets.get_instance().getImage(item.resourceId,function(i) {
				if(preloader != null) {
					preloader.increment();
				}
				_gthis.handlePreload(list,onReady,onEnd,preloader);
			});
			break;
		default:
			haxe_Log.trace("WARNING: unknown type to preload \"" + item.type + "\", continuing",{ fileName : "haxe/ui/HaxeUIApp.hx", lineNumber : 87, className : "haxe.ui.HaxeUIApp", methodName : "handlePreload"});
			if(preloader != null) {
				preloader.increment();
			}
			this.handlePreload(list,onReady,onEnd,preloader);
		}
	}
	,get_title: function() {
		return haxe_ui_core_Screen.get_instance().get_title();
	}
	,set_title: function(value) {
		haxe_ui_core_Screen.get_instance().set_title(value);
		return value;
	}
	,addComponent: function(component) {
		return haxe_ui_core_Screen.get_instance().addComponent(component);
	}
	,removeComponent: function(component,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		return haxe_ui_core_Screen.get_instance().removeComponent(component,dispose);
	}
	,setComponentIndex: function(child,index) {
		return haxe_ui_core_Screen.get_instance().setComponentIndex(child,index);
	}
	,buildPreloadList: function() {
		var list = haxe_ui_backend_AppImpl.prototype.buildPreloadList.call(this);
		if(list == null) {
			list = [];
		}
		list = list.concat(haxe_ui_ToolkitAssets.get_instance().preloadList);
		return list;
	}
	,__class__: haxe_ui_HaxeUIApp
	,__properties__: $extend(haxe_ui_backend_AppImpl.prototype.__properties__,{set_title:"set_title",get_title:"get_title"})
});
var haxe_ui_Preloader = function() {
	haxe_ui_containers_Box.call(this);
	this.set_id("preloader");
	this.set_styleString("width:100%;height:100%;");
	this.set_styleNames("default-background");
};
$hxClasses["haxe.ui.Preloader"] = haxe_ui_Preloader;
haxe_ui_Preloader.__name__ = "haxe.ui.Preloader";
haxe_ui_Preloader.__super__ = haxe_ui_containers_Box;
haxe_ui_Preloader.prototype = $extend(haxe_ui_containers_Box.prototype,{
	createChildren: function() {
		var label = new haxe_ui_components_Label();
		label.set_text("Loading");
		label.set_verticalAlign("center");
		label.set_horizontalAlign("center");
		this.addComponent(label);
	}
	,validateComponentLayout: function() {
		var b = haxe_ui_containers_Box.prototype.validateComponentLayout.call(this);
		var tmp = this.get_actualComponentWidth() > 0 && this.get_actualComponentHeight() > 0;
		return b;
	}
	,_current: null
	,_max: null
	,progress: function(current,max) {
		this._current = current;
		this._max = max;
		if(current > 0) {
			var label = this.findComponent(null,haxe_ui_components_Label);
			if(label != null) {
				var text = label.get_text();
				if(StringTools.endsWith(text,"....")) {
					text = "Loading";
				}
				label.set_text(text);
			}
		}
	}
	,increment: function() {
		this.progress(this._current + 1,this._max);
	}
	,complete: function() {
		haxe_ui_core_Screen.get_instance().removeComponent(this);
	}
	,registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_Preloader();
	}
	,__class__: haxe_ui_Preloader
});
var haxe_ui_util_Properties = function() {
	this._props = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.util.Properties"] = haxe_ui_util_Properties;
haxe_ui_util_Properties.__name__ = "haxe.ui.util.Properties";
haxe_ui_util_Properties.prototype = {
	_props: null
	,exists: function(name) {
		return Object.prototype.hasOwnProperty.call(this._props.h,name);
	}
	,getProp: function(name,defaultValue) {
		var v = defaultValue;
		if(Object.prototype.hasOwnProperty.call(this._props.h,name)) {
			v = this._props.h[name];
		}
		return v;
	}
	,getPropInt: function(name,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		var v = defaultValue;
		var stringValue = this.getProp(name);
		if(stringValue != null) {
			v = Std.parseInt(stringValue);
		}
		return v;
	}
	,getPropBool: function(name,defaultValue) {
		if(defaultValue == null) {
			defaultValue = false;
		}
		var v = defaultValue;
		var stringValue = this.getProp(name);
		if(stringValue != null) {
			v = stringValue == "true";
		}
		return v;
	}
	,getPropCol: function(name,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		var v = defaultValue;
		var stringValue = this.getProp(name);
		if(stringValue != null) {
			var s = stringValue;
			if(StringTools.startsWith(s,"#")) {
				s = s.substring(1,s.length);
			} else if(StringTools.startsWith(s,"0x")) {
				s = s.substring(2,s.length);
			}
			v = Std.parseInt("0x" + s);
		}
		return v;
	}
	,setProp: function(name,value) {
		this._props.h[name] = value;
	}
	,names: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this._props.h);
	}
	,addAll: function(p) {
		var name = p.names();
		while(name.hasNext()) {
			var name1 = name.next();
			var this1 = this._props;
			var value = p.getProp(name1);
			this1.h[name1] = value;
		}
	}
	,__class__: haxe_ui_util_Properties
};
var haxe_ui_util_GenericConfig = function() {
	this.values = new haxe_ds_StringMap();
	this.sections = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.util.GenericConfig"] = haxe_ui_util_GenericConfig;
haxe_ui_util_GenericConfig.__name__ = "haxe.ui.util.GenericConfig";
haxe_ui_util_GenericConfig.prototype = {
	values: null
	,sections: null
	,addSection: function(name) {
		var config = new haxe_ui_util_GenericConfig();
		var array = this.sections.h[name];
		if(array == null) {
			array = [];
			this.sections.h[name] = array;
		}
		array.push(config);
		return config;
	}
	,findBy: function(section,field,value) {
		var array = this.sections.h[section];
		if(array == null) {
			return null;
		}
		if(field == null && value == null) {
			return array[0];
		}
		var r = null;
		var _g = 0;
		while(_g < array.length) {
			var item = array[_g];
			++_g;
			var h = item.values.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(key == field && item.values.h[key] == value) {
					r = item;
					break;
				}
			}
			if(r != null) {
				break;
			}
		}
		return r;
	}
	,queryBool: function(q,defaultValue,conditionRef) {
		if(defaultValue == null) {
			defaultValue = false;
		}
		var r = this.query(q,null,conditionRef);
		if(r == null) {
			return defaultValue;
		}
		return r == "true";
	}
	,query: function(q,defaultValue,conditionRef) {
		if(Object.prototype.hasOwnProperty.call(haxe_ui_util_GenericConfig.cache.h,q)) {
			if(defaultValue != null && haxe_ui_util_GenericConfig.cache.h[q] == null) {
				return defaultValue;
			}
			return haxe_ui_util_GenericConfig.cache.h[q];
		}
		var regexp = new EReg("\\.(?![^\\[]*\\])","g");
		var finalArray = regexp.split(q);
		var ref = this;
		var value = null;
		var _g = 0;
		while(_g < finalArray.length) {
			var f = finalArray[_g];
			++_g;
			if(f.indexOf("[") == -1 && f.indexOf("@") == -1) {
				ref = ref.findBy(f);
			} else if(f.indexOf("[") != -1) {
				var p = f.split("[");
				var p1 = p[0];
				var p2 = p[1].split("=")[0];
				var p3 = p[1].split("=")[1];
				p3 = HxOverrides.substr(p3,0,p3.length - 1);
				ref = ref.findBy(p1,p2,p3);
			} else if(f.indexOf("@") != -1) {
				var v = HxOverrides.substr(f,1,f.length);
				value = ref.values.h[v];
				break;
			}
			if(ref == null) {
				haxe_ui_util_GenericConfig.cache.h[q] = defaultValue;
				return defaultValue;
			}
		}
		if(value == null) {
			value = defaultValue;
		}
		if(value != null) {
			haxe_ui_util_GenericConfig.cache.h[q] = value;
		}
		return value;
	}
	,queryValues: function(q,conditionRef) {
		var regexp = new EReg("\\.(?![^\\[]*\\])","g");
		var finalArray = regexp.split(q);
		var ref = this;
		var _g = 0;
		while(_g < finalArray.length) {
			var f = finalArray[_g];
			++_g;
			if(f.indexOf("[") == -1 && f.indexOf("@") == -1) {
				ref = ref.findBy(f);
			} else if(f.indexOf("[") != -1) {
				var p = f.split("[");
				var p1 = p[0];
				var p2 = p[1].split("=")[0];
				var p3 = p[1].split("=")[1];
				p3 = HxOverrides.substr(p3,0,p3.length - 1);
				ref = ref.findBy(p1,p2,p3);
			}
			if(ref == null) {
				return null;
			}
		}
		return ref.values;
	}
	,__class__: haxe_ui_util_GenericConfig
};
var haxe_ui_styles_CompositeStyleSheet = function() {
	this._animations = null;
	this._styleSheets = [];
};
$hxClasses["haxe.ui.styles.CompositeStyleSheet"] = haxe_ui_styles_CompositeStyleSheet;
haxe_ui_styles_CompositeStyleSheet.__name__ = "haxe.ui.styles.CompositeStyleSheet";
haxe_ui_styles_CompositeStyleSheet.prototype = {
	_styleSheets: null
	,_animations: null
	,get_animations: function() {
		if(this._animations != null) {
			return this._animations;
		}
		this._animations = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = this._styleSheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var h = s.get_animations().h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				var a = s.get_animations().h[key];
				this._animations.h[key] = a;
			}
		}
		return this._animations;
	}
	,findAnimation: function(id) {
		var h = this.get_animations().h;
		var a_h = h;
		var a_keys = Object.keys(h);
		var a_length = a_keys.length;
		var a_current = 0;
		while(a_current < a_length) {
			var a = a_h[a_keys[a_current++]];
			if(a.id == id) {
				return a;
			}
		}
		return null;
	}
	,hasMediaQueries: null
	,get_hasMediaQueries: function() {
		var _g = 0;
		var _g1 = this._styleSheets;
		while(_g < _g1.length) {
			var styleSheet = _g1[_g];
			++_g;
			if(styleSheet.get_hasMediaQueries() == true) {
				return true;
			}
		}
		return false;
	}
	,getAnimation: function(id,create) {
		if(create == null) {
			create = true;
		}
		var a = this.findAnimation(id);
		if(a == null) {
			a = new haxe_ui_styles_elements_AnimationKeyFrames(id,[]);
			this.addAnimation(a);
		}
		return a;
	}
	,addAnimation: function(animation) {
		this._styleSheets[0].addAnimation(animation);
	}
	,addStyleSheet: function(styleSheet) {
		this._styleSheets.push(styleSheet);
	}
	,removeStyleSheet: function(styleSheet) {
		HxOverrides.remove(this._styleSheets,styleSheet);
	}
	,parse: function(css,styleSheetName,invalidateAll) {
		if(invalidateAll == null) {
			invalidateAll = false;
		}
		if(styleSheetName == null) {
			styleSheetName = "default";
		}
		var s = this.findStyleSheet(styleSheetName);
		if(s == null) {
			s = new haxe_ui_styles_StyleSheet();
			s.name = styleSheetName;
			this._styleSheets.push(s);
		}
		s.parse(css);
		this._animations = null;
		if(invalidateAll == true) {
			haxe_ui_core_Screen.get_instance().invalidateAll();
		}
	}
	,findStyleSheet: function(styleSheetName) {
		var _g = 0;
		var _g1 = this._styleSheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.name == styleSheetName) {
				return s;
			}
		}
		return null;
	}
	,findRule: function(selector) {
		var _g = 0;
		var _g1 = this._styleSheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var el = s.findRule(selector);
			if(el != null) {
				return el;
			}
		}
		return null;
	}
	,findMatchingRules: function(selector) {
		var m = [];
		var _g = 0;
		var _g1 = this._styleSheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			m = m.concat(s.findMatchingRules(selector));
		}
		return m;
	}
	,getAllRules: function() {
		var r = [];
		var _g = 0;
		var _g1 = this._styleSheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			r = r.concat(s.get_rules());
		}
		return r;
	}
	,buildStyleFor: function(c) {
		var style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		var _g = 0;
		var _g1 = this._styleSheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			style = s.buildStyleFor(c,style);
		}
		return style;
	}
	,clear: function(styleSheetName) {
		var s = this.findStyleSheet(styleSheetName);
		if(s != null) {
			s.clear();
			this._animations = null;
		}
	}
	,__class__: haxe_ui_styles_CompositeStyleSheet
	,__properties__: {get_hasMediaQueries:"get_hasMediaQueries",get_animations:"get_animations"}
};
var haxe_ui_Toolkit = function() { };
$hxClasses["haxe.ui.Toolkit"] = haxe_ui_Toolkit;
haxe_ui_Toolkit.__name__ = "haxe.ui.Toolkit";
haxe_ui_Toolkit.__properties__ = {set_scale:"set_scale",get_scale:"get_scale",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",get_autoScaleDPIThreshold:"get_autoScaleDPIThreshold",set_pixelsPerRem:"set_pixelsPerRem",get_screen:"get_screen",get_assets:"get_assets",get_initialized:"get_initialized",get_backendProperties:"get_backendProperties",set_theme:"set_theme",get_theme:"get_theme"};
haxe_ui_Toolkit.get_theme = function() {
	return haxe_ui_Toolkit._theme;
};
haxe_ui_Toolkit.set_theme = function(value) {
	if(haxe_ui_Toolkit._theme == value) {
		return value;
	}
	haxe_ui_Toolkit._theme = value;
	if(haxe_ui_Toolkit._initialized == true) {
		haxe_ui_themes_ThemeManager.get_instance().applyTheme(haxe_ui_Toolkit._theme);
		haxe_ui_core_Screen.get_instance().onThemeChanged();
		haxe_ui_core_Screen.get_instance().invalidateAll();
	}
	return value;
};
haxe_ui_Toolkit.backendProperties = null;
haxe_ui_Toolkit.get_backendProperties = function() {
	haxe_ui_Toolkit.buildBackend();
	return haxe_ui_Toolkit._backendProperties;
};
haxe_ui_Toolkit.build = function() {
	if(haxe_ui_Toolkit._built == true) {
		return;
	}
	haxe_ui_themes_ThemeManager.get_instance().getTheme("native").parent = "default";
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("native","haxeui-core/styles/native/main.css",-3.,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("global","haxeui-core/styles/global.css",-4.,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/main.css",-3.,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/buttons.css",-2.99,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/dialogs.css",-2.9800000000000004,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/textinputs.css",-2.9700000000000006,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/scrollbars.css",-2.9600000000000009,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/scrollview.css",-2.9500000000000011,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/checkboxes.css",-2.9400000000000013,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/optionboxes.css",-2.9300000000000015,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/ranges.css",-2.9200000000000017,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/progressbars.css",-2.9100000000000019,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/sliders.css",-2.9000000000000021,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/steppers.css",-2.8900000000000023,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/tabs.css",-2.8800000000000026,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/listview.css",-2.8700000000000028,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/dropdowns.css",-2.860000000000003,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/tableview.css",-2.8500000000000032,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/switches.css",-2.8400000000000034,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/calendars.css",-2.8300000000000036,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/menus.css",-2.8200000000000038,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/accordion.css",-2.8100000000000041,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/propertygrids.css",-2.8000000000000043,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/frames.css",-2.7900000000000045,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/splitters.css",-2.7800000000000047,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/tooltips.css",-2.7700000000000049,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/rules.css",-2.7600000000000051,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/sidebars.css",-2.7500000000000053,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/cards.css",-2.7400000000000055,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/treeviews.css",-2.7300000000000058,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/colorpickers.css",-2.720000000000006,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","haxeui-core/styles/default/last.css",-2.7100000000000062,null);
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","warning-large","haxeui-core/styles/shared/warning-large.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","tooltip-background-color","#fffff8");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","tertiary-background-color","#ffffff");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","sort-desc","haxeui-core/styles/shared/sortable-desc-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","sort-asc","haxeui-core/styles/shared/sortable-asc-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","solid-background-color-hover","#fcfcfc");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","solid-background-color-down","#f0f0f0");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","solid-background-color-disabled","#fefefe");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","solid-background-color-alt","#fafafa");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","solid-background-color","#f6f6f6");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","selection-text-color","#ffffff");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","selection-background-color-hover","#d9e5f2");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","selection-background-color","#b4cbe4");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","secondary-background-color","#ffffff");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","search","haxeui-core/styles/shared/search.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","scrollbar-button-color","#d6d6d6");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","scrollbar-background-color","#f0f0f0");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","question-large","haxeui-core/styles/shared/help-large.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","option-selected","haxeui-core/styles/shared/option-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","normal-text-color","#666666");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","normal-inner-shadow","drop-shadow(1, 45, #888888, 0.1, 1, 1, 1, 3, true)");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","normal-border-size","1px");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","normal-border-radius","2px");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","normal-border-color","#d2d2d2");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","normal-background-color-start","#fdfdfd");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","normal-background-color-end","#f6f6f6");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","modal-background-color","#ffffff");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","minimize-hover","haxeui-core/styles/shared/minimize-button-white.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","minimize","haxeui-core/styles/shared/minimize-button-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","menu-shadow","drop-shadow(2, 45, #888888, 0.1, 4, 1, 30, 35, false)");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","maximize-hover","haxeui-core/styles/shared/maximize-button-white.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","maximize","haxeui-core/styles/shared/maximize-button-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","lighter-text-color","#a0a0a0");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","info-large","haxeui-core/styles/shared/info-large.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","hover-text-color","#444444");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","hover-border-color","#c0c0c0");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","hover-background-color-start","#f2f2f2");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","hover-background-color-end","#e1e1e1");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","gripper-vertical","haxeui-core/styles/shared/gripper-vertical.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","gripper-horizontal","haxeui-core/styles/shared/gripper-horizontal.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","expanded","haxeui-core/styles/shared/collapsed-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","error-text-color","#ff0000");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","error-large","haxeui-core/styles/shared/error-large.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","error-background-color","#ffdddd");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","down-text-color","#444444");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","down-border-color","#b3b3b3");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","down-background-color-start","#e6e6e6");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","down-background-color-end","#cccccc");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","disabled-text-color","#cccccc");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","disabled-border-color","#e4e4e4");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","disabled-background-color-start","#fdfdfd");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","disabled-background-color-end","#f6f6f6");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","dialog-title-color","#aaaaaa");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","dialog-shadow","drop-shadow(1, 45, #888888, 0.2, 30, 2, 1, 3, false)");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","default-background-color","#ffffff");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","contrast-background-color","#ffffff");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","collapsed","haxeui-core/styles/shared/expanded-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","close-hover","haxeui-core/styles/shared/close-button-white.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","close","haxeui-core/styles/shared/close-button-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","check-selected","haxeui-core/styles/shared/check-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","blank","haxeui-core/styles/shared/blank.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","arrow-up-down","haxeui-core/styles/shared/sortable-arrows-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","arrow-up","haxeui-core/styles/shared/up-arrow-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","arrow-right-square","haxeui-core/styles/shared/right-arrow-square-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","arrow-right","haxeui-core/styles/shared/right-arrow-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","arrow-left","haxeui-core/styles/shared/left-arrow-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","arrow-down-square","haxeui-core/styles/shared/down-arrow-square-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","arrow-down","haxeui-core/styles/shared/down-arrow-blue.png");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","accent-gradient-start","#98c4e6");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","accent-gradient-end","#549bde");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","accent-color-lighter","#ecf2f9");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","accent-color-darker","#407dbf");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("default","accent-color","#83aad4");
	haxe_ui_themes_ThemeManager.get_instance().getTheme("dark").parent = "default";
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("dark","haxeui-core/styles/dark/scrollbars.css",-2.,null);
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","tooltip-background-color","#3d3f41");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","tertiary-background-color","#313435");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","solid-background-color-hover","#393b3c");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","solid-background-color-down","#313335");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","solid-background-color-disabled","#2f3132");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","solid-background-color-alt","#2d2e2f");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","solid-background-color","#3d3f41");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","selection-text-color","#d4d4d4");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","selection-background-color-hover","#323e52");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","selection-background-color","#415982");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","secondary-background-color","#3d3f41");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","scrollbar-button-color","#3e4142");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","scrollbar-background-color","#2c2f30");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","normal-text-color","#aaaaaa");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","normal-inner-shadow","drop-shadow(1, 45, #000000, 0.2, 2, 2, 1, 3, true)");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","normal-border-size","1px");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","normal-border-radius","2px");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","normal-border-color","#222426");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","normal-background-color-start","#3e4142");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","normal-background-color-end","#36383a");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","modal-background-color","#181a1b");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","menu-shadow","drop-shadow(2, 45, #000000, 0.15, 6, 1, 30, 35, false)");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","lighter-text-color","#737373");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","hover-text-color","#bbbbbb");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","hover-border-color","#222426");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","hover-background-color-start","#434647");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","hover-background-color-end","#393b3c");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","error-text-color","#880000");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","error-background-color","#cf6679");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","down-text-color","#999999");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","down-border-color","#222426");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","down-background-color-start","#393c3c");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","down-background-color-end","#313335");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","disabled-text-color","#595959");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","disabled-border-color","#26292b");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","disabled-background-color-start","#36393a");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","disabled-background-color-end","#313335");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","dialog-title-color","#aaaaaa");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","dialog-shadow","drop-shadow(1, 45, #000000, 0.2, 30, 2, 1, 3, false)");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","default-background-color","#2c2f30");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","contrast-background-color","#aaaaaa");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","accent-gradient-start","#334666");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","accent-gradient-end","#2f3746");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","accent-color-lighter","#323e52");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","accent-color-darker","#407dbf");
	haxe_ui_themes_ThemeManager.get_instance().setThemeVar("dark","accent-color","#3c5177");
	haxe_ui_locale_LocaleManager.get_instance().parseResource("en","haxeui-core/locale/en/std-strings.properties");
	haxe_ui_locale_LocaleManager.get_instance().parseResource("en","haxeui-core/locale/en/formats.properties");
	haxe_ui_locale_LocaleManager.get_instance().parseResource("en_US","haxeui-core/locale/en_US/formats.properties");
	haxe_ui_locale_LocaleManager.get_instance().parseResource("es","haxeui-core/locale/es/std-strings.properties");
	haxe_ui_locale_LocaleManager.get_instance().parseResource("es","haxeui-core/locale/es/formats.properties");
	haxe_ui_locale_LocaleManager.get_instance().parseResource("de","haxeui-core/locale/de/std-strings.properties");
	haxe_ui_locale_LocaleManager.get_instance().parseResource("de","haxeui-core/locale/de/formats.properties");
	haxe_ui_locale_LocaleManager.get_instance().parseResource("fr","haxeui-core/locale/fr/std-strings.properties");
	haxe_ui_locale_LocaleManager.get_instance().parseResource("fr","haxeui-core/locale/fr/formats.properties");
	haxe_ui_locale_LocaleManager.get_instance().parseResource("it","haxeui-core/locale/it/std-strings.properties");
	haxe_ui_locale_LocaleManager.get_instance().parseResource("it","haxeui-core/locale/it/formats.properties");
	haxe_ui_actions_ActionManager.get_instance().registerInputSource(new haxe_ui_actions_KeyboardActionInputSource());
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("global","styles/main.css",-2,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("default","styles/default/main.css",-1,null);
	haxe_ui_themes_ThemeManager.get_instance().addStyleResource("global",null,0.,"\r\n                .collapsible-view {\r\n                    padding: 0px;\r\n                }\r\n\r\n                .collapsible-view .scrollview-contents {\r\n                    padding: 0px;\r\n                    spacing: 0px;\r\n                }\r\n\r\n                .collapsible-container {\r\n                    padding: 0px;\r\n                    spacing: 0px;\r\n                }\r\n\r\n                .collapsible {\r\n                    spacing: 0px;\r\n                }\r\n                \r\n                .collapsible-header {\r\n                    padding: 0px;\r\n                }\r\n\r\n                .collapsible-button {\r\n                    border-radius: 0;\r\n                    border: 0px solid $normal-border-color;\r\n                    width: 100%;\r\n                    text-align: left;\r\n                    icon: $arrow-right-square;\r\n                    icon-position: left;\r\n                    border: none;\r\n                    border-color: $normal-border-color;\r\n                    border-bottom-width: 1px;\r\n                    padding: 6px;\r\n                    padding-top: 12px;\r\n                    padding-bottom: 12px;\r\n                    padding-right: 12px;\r\n                    background-color: $solid-background-color;\r\n                }\r\n\r\n                .collapsible-button:hover {\r\n                    background-color: $solid-background-color-hover;\r\n                }\r\n\r\n                .collapsible-button:down {\r\n                    icon: $arrow-down-square;\r\n                }\r\n                \r\n                .collapsible-content {\r\n                    padding: 5px 5px;\r\n                    width: 100%;\r\n                    border-bottom: 1px solid $normal-border-color;\r\n                }\r\n                \r\n                .collapsible.last .collapsible-content {\r\n                    border: none;\r\n                }\r\n                \r\n                .label.errored {\r\n                    color: #ED4337;\r\n                }\r\n                \r\n                .label.success { \r\n                    color: #198754;\r\n                }\r\n                \r\n                .label.warning {\r\n                    color: #ffcc00;\r\n                }\r\n            ");
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/haxeui.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/haxeui_small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/default/haxeui_tiny.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/blank.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/check-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/check-bright.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/check-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/check-light.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/close-button-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/close-button-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/close-button-light.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/close-button-white.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/collapsed-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/collapsed-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/down-arrow-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/down-arrow-bright.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/down-arrow-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/down-arrow-light.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/down-arrow-square-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/down-arrow-square-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/down-arrow-square-light.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/error-large.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/error-medium.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/error-small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/expanded-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/expanded-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/folder-light.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/gripper-horizontal.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/gripper-vertical.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/help-large.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/help-medium.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/help-small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/info-large.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/info-medium.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/info-small.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/left-arrow-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/left-arrow-bright.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/left-arrow-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/left-arrow-light.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/left-square-arrow-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/maximize-button-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/maximize-button-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/maximize-button-light.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/maximize-button-white.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/minimize-button-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/minimize-button-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/minimize-button-light.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/minimize-button-white.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/option-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/option-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/option-light.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/right-arrow-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/right-arrow-bright.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/right-arrow-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/right-arrow-light.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/right-arrow-square-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/right-arrow-square-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/right-arrow-square-light.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/right-square-arrow-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/search.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/sortable-arrows-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/sortable-arrows-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/sortable-asc-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/sortable-asc-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/sortable-desc-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/sortable-desc-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/transparent_px.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/up-arrow-blue.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/up-arrow-bright.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/up-arrow-dark.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/up-arrow-light.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/up-down-arrows-light.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/warning-large.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/warning-medium.png"});
	haxe_ui_ToolkitAssets.get_instance().preloadList.push({ type : "image", resourceId : "haxeui-core/styles/shared/warning-small.png"});
	haxe_ui_core_ComponentClassMap.register("tooltip","haxe.ui.tooltips.ToolTip");
	haxe_ui_core_ComponentClassMap.register("preloader","haxe.ui.Preloader");
	haxe_ui_core_ComponentClassMap.register("label","haxe.ui.components.Label");
	haxe_ui_core_ComponentClassMap.register("itemrenderer","haxe.ui.core.ItemRenderer");
	haxe_ui_core_ComponentClassMap.register("interactivecomponent","haxe.ui.core.InteractiveComponent");
	haxe_ui_core_ComponentClassMap.register("image","haxe.ui.components.Image");
	haxe_ui_core_ComponentClassMap.register("component","haxe.ui.core.Component");
	haxe_ui_core_ComponentClassMap.register("canvas","haxe.ui.components.Canvas");
	haxe_ui_core_ComponentClassMap.register("button","haxe.ui.components.Button");
	haxe_ui_core_ComponentClassMap.register("box","haxe.ui.containers.Box");
	haxe_ui_Toolkit.buildBackend();
	haxe_ui_Toolkit._built = true;
};
haxe_ui_Toolkit.buildBackend = function() {
	if(haxe_ui_Toolkit._backendBuilt == true) {
		return;
	}
	haxe_ui_util_Defines.set("windows","1");
	haxe_ui_util_Defines.set("vision","1.2.3");
	haxe_ui_util_Defines.set("utf16","1");
	haxe_ui_util_Defines.set("true","1");
	haxe_ui_util_Defines.set("target.utf16","true");
	haxe_ui_util_Defines.set("target.unicode","true");
	haxe_ui_util_Defines.set("target.name","js");
	haxe_ui_util_Defines.set("source_header","Generated by Haxe 4.2.5");
	haxe_ui_util_Defines.set("js_es5","1");
	haxe_ui_util_Defines.set("js_es","5");
	haxe_ui_util_Defines.set("js-es5","1");
	haxe_ui_util_Defines.set("js","1");
	haxe_ui_util_Defines.set("html5","1.5.0");
	haxe_ui_util_Defines.set("haxeui_html5","1.5.0");
	haxe_ui_util_Defines.set("haxeui_core","1.4.0");
	haxe_ui_util_Defines.set("haxeui_allow_subpixels","1");
	haxe_ui_util_Defines.set("haxeui-html5","1.5.0");
	haxe_ui_util_Defines.set("haxeui-core","1.4.0");
	haxe_ui_util_Defines.set("haxe_ver","4.205");
	haxe_ui_util_Defines.set("haxe4","1");
	haxe_ui_util_Defines.set("haxe3","1");
	haxe_ui_util_Defines.set("haxe","4.2.5");
	haxe_ui_util_Defines.set("debug","1");
	haxe_ui_util_Defines.set("dce","no");
	haxe_ui_util_Defines.set("core","1.4.0");
	haxe_ui_util_Defines.set("backend","html5");
	haxe_ui_util_Defines.set("allow_subpixels","1");
	haxe_ui_Toolkit._backendBuilt = true;
};
haxe_ui_Toolkit.initialized = null;
haxe_ui_Toolkit.get_initialized = function() {
	return haxe_ui_Toolkit._initialized;
};
haxe_ui_Toolkit.init = function(options) {
	haxe_ui_Toolkit.build();
	haxe_ui_themes_ThemeManager.get_instance().applyTheme(haxe_ui_Toolkit._theme);
	if(options != null) {
		haxe_ui_Toolkit.get_screen().set_options(options);
		haxe_ui_ToolkitAssets.get_instance().options = options;
	}
	haxe_ui_Toolkit.get_screen().registerEvent("keydown",haxe_ui_Toolkit.onKeyDown);
	haxe_ui_Toolkit._initialized = true;
};
haxe_ui_Toolkit.onKeyDown = function(event) {
	if(event.keyCode == haxe_ui_core_Platform.get_instance().getKeyCode("tab")) {
		if(event.shiftKey == false) {
			haxe_ui_focus_FocusManager.get_instance().focusNext();
		} else {
			haxe_ui_focus_FocusManager.get_instance().focusPrev();
		}
	}
};
haxe_ui_Toolkit.assets = null;
haxe_ui_Toolkit.get_assets = function() {
	return haxe_ui_ToolkitAssets.get_instance();
};
haxe_ui_Toolkit.screen = null;
haxe_ui_Toolkit.get_screen = function() {
	return haxe_ui_core_Screen.get_instance();
};
haxe_ui_Toolkit.set_pixelsPerRem = function(value) {
	if(haxe_ui_Toolkit.pixelsPerRem == value) {
		return value;
	}
	haxe_ui_Toolkit.pixelsPerRem = value;
	haxe_ui_core_Screen.get_instance().refreshStyleRootComponents();
	return value;
};
haxe_ui_Toolkit.autoScaleDPIThreshold = null;
haxe_ui_Toolkit.get_autoScaleDPIThreshold = function() {
	if(haxe_ui_core_Screen.get_instance().get_isRetina() == true) {
		return 192;
	}
	return 120;
};
haxe_ui_Toolkit.get_scaleX = function() {
	if(haxe_ui_Toolkit._scaleX == 0) {
		if(haxe_ui_Toolkit.autoScale == true) {
			var dpi = haxe_ui_core_Screen.get_instance().get_dpi();
			if(dpi > haxe_ui_Toolkit.get_autoScaleDPIThreshold()) {
				if(haxe_ui_Toolkit.roundScale == true) {
					haxe_ui_Toolkit._scaleX = Math.round(dpi / haxe_ui_Toolkit.get_autoScaleDPIThreshold());
				} else {
					haxe_ui_Toolkit._scaleX = dpi / haxe_ui_Toolkit.get_autoScaleDPIThreshold();
				}
			} else {
				haxe_ui_Toolkit._scaleX = 1;
			}
		} else {
			haxe_ui_Toolkit._scaleX = 1;
		}
	}
	return haxe_ui_Toolkit._scaleX;
};
haxe_ui_Toolkit.set_scaleX = function(value) {
	if(haxe_ui_Toolkit._scaleX == value) {
		return value;
	}
	haxe_ui_Toolkit._scaleX = value;
	haxe_ui_Toolkit.autoScale = false;
	return value;
};
haxe_ui_Toolkit.get_scaleY = function() {
	if(haxe_ui_Toolkit._scaleY == 0) {
		if(haxe_ui_Toolkit.autoScale == true) {
			var dpi = haxe_ui_core_Screen.get_instance().get_dpi();
			if(dpi > haxe_ui_Toolkit.get_autoScaleDPIThreshold()) {
				if(haxe_ui_Toolkit.roundScale == true) {
					haxe_ui_Toolkit._scaleY = Math.round(dpi / haxe_ui_Toolkit.get_autoScaleDPIThreshold());
				} else {
					haxe_ui_Toolkit._scaleY = dpi / haxe_ui_Toolkit.get_autoScaleDPIThreshold();
				}
			} else {
				haxe_ui_Toolkit._scaleY = 1;
			}
		} else {
			haxe_ui_Toolkit._scaleY = 1;
		}
	}
	return haxe_ui_Toolkit._scaleY;
};
haxe_ui_Toolkit.set_scaleY = function(value) {
	if(haxe_ui_Toolkit._scaleY == value) {
		return value;
	}
	haxe_ui_Toolkit._scaleY = value;
	haxe_ui_Toolkit.autoScale = false;
	return value;
};
haxe_ui_Toolkit.get_scale = function() {
	return Math.max(haxe_ui_Toolkit.get_scaleX(),haxe_ui_Toolkit.get_scaleY());
};
haxe_ui_Toolkit.set_scale = function(value) {
	haxe_ui_Toolkit.set_scaleX(value);
	haxe_ui_Toolkit.set_scaleY(value);
	return value;
};
haxe_ui_Toolkit.callLater = function(fn) {
	new haxe_ui_CallLater(fn);
};
var haxe_ui_backend_AssetsBase = function() {
};
$hxClasses["haxe.ui.backend.AssetsBase"] = haxe_ui_backend_AssetsBase;
haxe_ui_backend_AssetsBase.__name__ = "haxe.ui.backend.AssetsBase";
haxe_ui_backend_AssetsBase.isAbsolutePath = function(path) {
	if(StringTools.startsWith(path,"/")) {
		return true;
	}
	if(path.charAt(1) == ":") {
		return true;
	}
	if(StringTools.startsWith(path,"\\\\")) {
		return true;
	}
	return false;
};
haxe_ui_backend_AssetsBase.prototype = {
	getTextDelegate: function(resourceId) {
		return null;
	}
	,getImageInternal: function(resourceId,callback) {
		callback(null);
	}
	,getImageFromHaxeResource: function(resourceId,callback) {
		callback(resourceId,null);
	}
	,imageFromBytes: function(bytes,callback) {
		callback(null);
	}
	,imageFromFile: function(filename,callback) {
		haxe_Log.trace("WARNING: cant load from file system on non-sys targets [" + filename + "]",{ fileName : "haxe/ui/backend/AssetsBase.hx", lineNumber : 50, className : "haxe.ui.backend.AssetsBase", methodName : "imageFromFile"});
		callback(null);
	}
	,getFontInternal: function(resourceId,callback) {
		callback(null);
	}
	,getFontFromHaxeResource: function(resourceId,callback) {
		callback(resourceId,null);
	}
	,imageInfoFromImageData: function(imageData) {
		return { data : imageData, width : 0, height : 0};
	}
	,__class__: haxe_ui_backend_AssetsBase
};
var haxe_ui_backend_AssetsImpl = function() {
	haxe_ui_backend_AssetsBase.call(this);
};
$hxClasses["haxe.ui.backend.AssetsImpl"] = haxe_ui_backend_AssetsImpl;
haxe_ui_backend_AssetsImpl.__name__ = "haxe.ui.backend.AssetsImpl";
haxe_ui_backend_AssetsImpl.__super__ = haxe_ui_backend_AssetsBase;
haxe_ui_backend_AssetsImpl.prototype = $extend(haxe_ui_backend_AssetsBase.prototype,{
	getImageInternal: function(resourceId,callback) {
		var bytes = haxe_Resource.getBytes(resourceId);
		if(bytes != null) {
			callback(null);
			return;
		}
		var image = window.document.createElement("img");
		image.onload = function(e) {
			var imageInfo = { width : image.width, height : image.height, data : image};
			callback(imageInfo);
		};
		image.onerror = function(e) {
			callback(null);
		};
		image.src = resourceId;
	}
	,getImageFromHaxeResource: function(resourceId,callback) {
		var bytes = haxe_Resource.getBytes(resourceId);
		this.imageFromBytes(bytes,function(imageInfo) {
			callback(resourceId,imageInfo);
		});
	}
	,imageFromBytes: function(bytes,callback) {
		if(bytes == null) {
			callback(null);
			return;
		}
		var image = window.document.createElement("img");
		image.onload = function(e) {
			var imageInfo = { width : image.width, height : image.height, data : image};
			callback(imageInfo);
		};
		image.onerror = function(e) {
			window.console.log(e);
			callback(null);
		};
		var blob = new Blob([bytes.b.bufferValue]);
		var blobUrl = URL.createObjectURL(blob);
		image.src = blobUrl;
	}
	,getFontInternal: function(resourceId,callback) {
		var bytes = haxe_Resource.getBytes(resourceId);
		if(bytes == null) {
			haxe_ui_backend_html5_util_FontDetect.onFontLoaded(resourceId,function(f) {
				var fontInfo = { data : f};
				callback(fontInfo);
			},function(f) {
				callback(null);
			});
			return;
		}
		this.getFontFromHaxeResource(resourceId,function(r,f) {
			callback(f);
		});
	}
	,imageInfoFromImageData: function(imageData) {
		return { data : imageData, width : imageData.width, height : imageData.height};
	}
	,getFontFromHaxeResource: function(resourceId,callback) {
		var bytes = haxe_Resource.getBytes(resourceId);
		if(bytes == null) {
			callback(resourceId,null);
			return;
		}
		var fontFamilyParts = resourceId.split("/");
		var fontFamily = fontFamilyParts[fontFamilyParts.length - 1];
		if(fontFamily.indexOf(".") != -1) {
			fontFamily = HxOverrides.substr(fontFamily,0,fontFamily.indexOf("."));
		}
		var fontFace = new FontFace(fontFamily,bytes.b.bufferValue);
		fontFace.load().then(function(loadedFace) {
			window.document.fonts.add(loadedFace);
			haxe_ui_backend_html5_util_FontDetect.onFontLoaded(fontFamily,function(f) {
				var fontInfo = { data : fontFamily};
				callback(resourceId,fontInfo);
			},function(f) {
				callback(resourceId,null);
			});
		}).catch(function(error) {
			haxe_Log.trace("WARNING: problem loading font '" + resourceId + "' (" + error + ")",{ fileName : "haxe/ui/backend/AssetsImpl.hx", lineNumber : 125, className : "haxe.ui.backend.AssetsImpl", methodName : "getFontFromHaxeResource"});
			callback(resourceId,null);
		});
	}
	,__class__: haxe_ui_backend_AssetsImpl
});
var haxe_ui_ToolkitAssets = function() {
	this.options = null;
	this.preloadList = [];
	haxe_ui_backend_AssetsImpl.call(this);
};
$hxClasses["haxe.ui.ToolkitAssets"] = haxe_ui_ToolkitAssets;
haxe_ui_ToolkitAssets.__name__ = "haxe.ui.ToolkitAssets";
haxe_ui_ToolkitAssets.__properties__ = {get_instance:"get_instance"};
haxe_ui_ToolkitAssets._instance = null;
haxe_ui_ToolkitAssets.get_instance = function() {
	if(haxe_ui_ToolkitAssets._instance == null) {
		haxe_ui_ToolkitAssets._instance = new haxe_ui_ToolkitAssets();
	}
	return haxe_ui_ToolkitAssets._instance;
};
haxe_ui_ToolkitAssets.__super__ = haxe_ui_backend_AssetsImpl;
haxe_ui_ToolkitAssets.prototype = $extend(haxe_ui_backend_AssetsImpl.prototype,{
	preloadList: null
	,options: null
	,_fontCache: null
	,_fontCallbacks: null
	,_imageCache: null
	,_imageCallbacks: null
	,getFont: function(resourceId,callback,useCache) {
		if(useCache == null) {
			useCache = true;
		}
		var _gthis = this;
		if(this._fontCache != null && this._fontCache.h[resourceId] != null && useCache == true) {
			callback(this._fontCache.h[resourceId]);
		} else {
			if(this._fontCallbacks == null) {
				this._fontCallbacks = new haxe_ui_util_CallbackMap();
			}
			this._fontCallbacks.add(resourceId,callback);
			if(this._fontCallbacks.count(resourceId) == 1) {
				this.getFontInternal(resourceId,function(font) {
					if(font != null) {
						_gthis._onFontLoaded(resourceId,font);
					} else if(haxe_Resource.listNames().indexOf(resourceId) != -1) {
						_gthis.getFontFromHaxeResource(resourceId,$bind(_gthis,_gthis._onFontLoaded));
					} else {
						_gthis._fontCallbacks.remove(resourceId,callback);
						callback(null);
					}
				});
			}
		}
	}
	,_onFontLoaded: function(resourceId,font) {
		if(this._fontCache == null) {
			this._fontCache = new haxe_ds_StringMap();
		}
		this._fontCache.h[resourceId] = font;
		this._fontCallbacks.invokeAndRemove(resourceId,font);
	}
	,cacheImage: function(resourceId,imageInfo) {
		if(this._imageCache == null) {
			this._imageCache = new haxe_ds_StringMap();
		}
		if(imageInfo == null || resourceId == null) {
			return;
		}
		this._imageCache.h[resourceId] = imageInfo;
	}
	,getCachedImage: function(resourceId) {
		if(this._imageCache == null) {
			return null;
		}
		return this._imageCache.h[resourceId];
	}
	,getImage: function(resourceId,callback,useCache) {
		if(useCache == null) {
			useCache = true;
		}
		var _gthis = this;
		var orginalResourceId = resourceId;
		resourceId = this.runPlugins(resourceId);
		if(this._imageCache != null && this._imageCache.h[resourceId] != null && useCache == true) {
			callback(this._imageCache.h[resourceId]);
		} else {
			if(this._imageCallbacks == null) {
				this._imageCallbacks = new haxe_ui_util_CallbackMap();
			}
			this._imageCallbacks.add(resourceId,callback);
			if(this._imageCallbacks.count(resourceId) == 1) {
				this.getImageInternal(resourceId,function(imageInfo) {
					if(imageInfo != null) {
						_gthis._onImageLoaded(resourceId,imageInfo);
					} else if(haxe_Resource.listNames().indexOf(orginalResourceId) != -1) {
						_gthis._imageCallbacks.remove(resourceId,callback);
						_gthis._imageCallbacks.add(orginalResourceId,callback);
						_gthis.getImageFromHaxeResource(orginalResourceId,$bind(_gthis,_gthis._onImageLoaded));
					} else if(haxe_Resource.listNames().indexOf(resourceId) != -1) {
						_gthis.getImageFromHaxeResource(resourceId,$bind(_gthis,_gthis._onImageLoaded));
					} else {
						_gthis._imageCallbacks.remove(resourceId,callback);
						callback(null);
					}
				});
			}
		}
	}
	,_onImageLoaded: function(resourceId,imageInfo) {
		if(imageInfo != null && (imageInfo.width == -1 || imageInfo.width == -1)) {
			haxe_Log.trace("WARNING: imageData.originalWidth == -1 || imageData.originalHeight == -1",{ fileName : "haxe/ui/ToolkitAssets.hx", lineNumber : 123, className : "haxe.ui.ToolkitAssets", methodName : "_onImageLoaded"});
		}
		if(this._imageCache == null) {
			this._imageCache = new haxe_ds_StringMap();
		}
		this._imageCache.h[resourceId] = imageInfo;
		this._imageCallbacks.invokeAndRemove(resourceId,imageInfo);
	}
	,getText: function(resourceId) {
		var s = this.getTextDelegate(resourceId);
		if(s == null) {
			s = haxe_Resource.getString(resourceId);
		}
		return s;
	}
	,getBytes: function(resourceId) {
		return haxe_Resource.getBytes(resourceId);
	}
	,_plugins: null
	,addPlugin: function(plugin) {
		if(this._plugins == null) {
			this._plugins = [];
		}
		this._plugins.push(plugin);
	}
	,runPlugins: function(asset) {
		if(this._plugins == null) {
			return asset;
		}
		var _g = 0;
		var _g1 = this._plugins;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			asset = p.invoke(asset);
		}
		return asset;
	}
	,__class__: haxe_ui_ToolkitAssets
});
var haxe_ui_actions_ActionManager = function() {
	this._repeatActions = new haxe_ds_StringMap();
	this._inputSources = [];
	this._events = null;
	this.navigationMethod = "navigationDesktop";
};
$hxClasses["haxe.ui.actions.ActionManager"] = haxe_ui_actions_ActionManager;
haxe_ui_actions_ActionManager.__name__ = "haxe.ui.actions.ActionManager";
haxe_ui_actions_ActionManager.__properties__ = {get_instance:"get_instance"};
haxe_ui_actions_ActionManager._instance = null;
haxe_ui_actions_ActionManager.instance = null;
haxe_ui_actions_ActionManager.get_instance = function() {
	if(haxe_ui_actions_ActionManager._instance == null) {
		haxe_ui_actions_ActionManager._instance = new haxe_ui_actions_ActionManager();
	}
	return haxe_ui_actions_ActionManager._instance;
};
haxe_ui_actions_ActionManager.prototype = {
	navigationMethod: null
	,_events: null
	,_inputSources: null
	,_repeatActions: null
	,registerEvent: function(type,listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(this._events == null) {
			this._events = new haxe_ui_util_EventMap();
		}
		this._events.add(type,listener,priority);
	}
	,unregisterEvent: function(type,listener) {
		if(this._events == null) {
			return;
		}
		this._events.remove(type,listener);
	}
	,dispatch: function(event) {
		if(this._events == null) {
			return;
		}
		this._events.invoke(event.type,event);
	}
	,registerInputSource: function(source) {
		source.start();
		this._inputSources.push(source);
	}
	,actionStart: function(action,source) {
		var _gthis = this;
		var currentFocus = haxe_ui_focus_FocusManager.get_instance().get_focus();
		if(currentFocus == null) {
			haxe_Log.trace("no focus for action: " + action,{ fileName : "haxe/ui/actions/ActionManager.hx", lineNumber : 73, className : "haxe.ui.actions.ActionManager", methodName : "actionStart"});
			return;
		}
		if(!((currentFocus) instanceof haxe_ui_core_InteractiveComponent)) {
			haxe_Log.trace("current focus not interactive: " + action,{ fileName : "haxe/ui/actions/ActionManager.hx", lineNumber : 80, className : "haxe.ui.actions.ActionManager", methodName : "actionStart"});
			return;
		}
		var actionEvent = new haxe_ui_events_ActionEvent("actionstart",action);
		var c = js_Boot.__cast(currentFocus , haxe_ui_core_InteractiveComponent);
		c.dispatch(actionEvent);
		if(actionEvent.canceled == false) {
			var c1 = js_Boot.getClass(source);
			this.dispatch(new haxe_ui_events_ActionEvent("actionstart",action,false,c1.__name__));
		}
		if(actionEvent.repeater == true && Object.prototype.hasOwnProperty.call(this._repeatActions.h,action) == false) {
			var this1 = this._repeatActions;
			var value = { type : action, timer : new haxe_ui_util_Timer(c.actionRepeatInterval,function() {
				_gthis.actionStart(action,source);
			})};
			this1.h[action] = value;
		}
	}
	,actionEnd: function(action,source) {
		var currentFocus = haxe_ui_focus_FocusManager.get_instance().get_focus();
		if(currentFocus == null) {
			return;
		}
		if(!((currentFocus) instanceof haxe_ui_core_InteractiveComponent)) {
			haxe_Log.trace("current focus not interactive: " + action,{ fileName : "haxe/ui/actions/ActionManager.hx", lineNumber : 109, className : "haxe.ui.actions.ActionManager", methodName : "actionEnd"});
			return;
		}
		var actionEvent = new haxe_ui_events_ActionEvent("actionend",action);
		var c = js_Boot.__cast(currentFocus , haxe_ui_core_InteractiveComponent);
		c.dispatch(actionEvent);
		if(actionEvent.canceled == false) {
			var c = js_Boot.getClass(source);
			this.dispatch(new haxe_ui_events_ActionEvent("actionend",action,false,c.__name__));
		}
		if(Object.prototype.hasOwnProperty.call(this._repeatActions.h,action)) {
			var info = this._repeatActions.h[action];
			info.timer.stop();
			var _this = this._repeatActions;
			var key = action;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
	}
	,__class__: haxe_ui_actions_ActionManager
};
var haxe_ui_actions_IActionInputSource = function() { };
$hxClasses["haxe.ui.actions.IActionInputSource"] = haxe_ui_actions_IActionInputSource;
haxe_ui_actions_IActionInputSource.__name__ = "haxe.ui.actions.IActionInputSource";
haxe_ui_actions_IActionInputSource.__isInterface__ = true;
haxe_ui_actions_IActionInputSource.prototype = {
	start: null
	,__class__: haxe_ui_actions_IActionInputSource
};
var haxe_ui_actions_KeyboardActionInputSource = function() {
	this._downKeys = new haxe_ds_IntMap();
	this._started = false;
};
$hxClasses["haxe.ui.actions.KeyboardActionInputSource"] = haxe_ui_actions_KeyboardActionInputSource;
haxe_ui_actions_KeyboardActionInputSource.__name__ = "haxe.ui.actions.KeyboardActionInputSource";
haxe_ui_actions_KeyboardActionInputSource.__interfaces__ = [haxe_ui_actions_IActionInputSource];
haxe_ui_actions_KeyboardActionInputSource.prototype = {
	_started: null
	,start: function() {
		if(this._started == true) {
			return;
		}
		this._started = true;
		haxe_ui_core_Screen.get_instance().registerEvent("keydown",$bind(this,this.onKeyDown));
		haxe_ui_core_Screen.get_instance().registerEvent("keyup",$bind(this,this.onKeyUp));
	}
	,_downKeys: null
	,onKeyDown: function(e) {
		var keyCode = e.keyCode;
		if(this._downKeys.h.hasOwnProperty(keyCode)) {
			return;
		}
		this._downKeys.h[keyCode] = true;
		if(keyCode == haxe_ui_core_Platform.get_instance().getKeyCode("space")) {
			haxe_ui_actions_ActionManager.get_instance().actionStart("actionPress",this);
		} else if(keyCode == haxe_ui_core_Platform.get_instance().getKeyCode("left")) {
			haxe_ui_actions_ActionManager.get_instance().actionStart("actionLeft",this);
		} else if(keyCode == haxe_ui_core_Platform.get_instance().getKeyCode("right")) {
			haxe_ui_actions_ActionManager.get_instance().actionStart("actionRight",this);
		} else if(keyCode == haxe_ui_core_Platform.get_instance().getKeyCode("up")) {
			haxe_ui_actions_ActionManager.get_instance().actionStart("actionUp",this);
		} else if(keyCode == haxe_ui_core_Platform.get_instance().getKeyCode("down")) {
			haxe_ui_actions_ActionManager.get_instance().actionStart("actionDown",this);
		} else if(keyCode == haxe_ui_core_Platform.get_instance().getKeyCode("escape")) {
			haxe_ui_actions_ActionManager.get_instance().actionStart("actionBack",this);
		} else if(keyCode == haxe_ui_core_Platform.get_instance().getKeyCode("enter")) {
			haxe_ui_actions_ActionManager.get_instance().actionStart("actionConfirm",this);
		}
	}
	,onKeyUp: function(e) {
		var keyCode = e.keyCode;
		if(this._downKeys.h.hasOwnProperty(keyCode) == false) {
			return;
		}
		this._downKeys.remove(keyCode);
		if(keyCode == haxe_ui_core_Platform.get_instance().getKeyCode("space")) {
			haxe_ui_actions_ActionManager.get_instance().actionEnd("actionPress",this);
		} else if(keyCode == haxe_ui_core_Platform.get_instance().getKeyCode("left")) {
			haxe_ui_actions_ActionManager.get_instance().actionEnd("actionLeft",this);
		} else if(keyCode == haxe_ui_core_Platform.get_instance().getKeyCode("right")) {
			haxe_ui_actions_ActionManager.get_instance().actionEnd("actionRight",this);
		} else if(keyCode == haxe_ui_core_Platform.get_instance().getKeyCode("up")) {
			haxe_ui_actions_ActionManager.get_instance().actionEnd("actionUp",this);
		} else if(keyCode == haxe_ui_core_Platform.get_instance().getKeyCode("down")) {
			haxe_ui_actions_ActionManager.get_instance().actionEnd("actionDown",this);
		} else if(keyCode == haxe_ui_core_Platform.get_instance().getKeyCode("escape")) {
			haxe_ui_actions_ActionManager.get_instance().actionEnd("actionBack",this);
		} else if(keyCode == haxe_ui_core_Platform.get_instance().getKeyCode("enter")) {
			haxe_ui_actions_ActionManager.get_instance().actionEnd("actionConfirm",this);
		}
	}
	,__class__: haxe_ui_actions_KeyboardActionInputSource
};
var haxe_ui_assets_AssetPlugin = function() {
};
$hxClasses["haxe.ui.assets.AssetPlugin"] = haxe_ui_assets_AssetPlugin;
haxe_ui_assets_AssetPlugin.__name__ = "haxe.ui.assets.AssetPlugin";
haxe_ui_assets_AssetPlugin.prototype = {
	_props: null
	,invoke: function(asset) {
		return asset;
	}
	,setProperty: function(name,value) {
		if(this._props == null) {
			this._props = new haxe_ds_StringMap();
		}
		this._props.h[name] = value;
	}
	,getProperty: function(name,defaultValue) {
		if(this._props == null) {
			return defaultValue;
		}
		var v = this._props.h[name];
		if(v == null) {
			v = defaultValue;
		}
		return v;
	}
	,__class__: haxe_ui_assets_AssetPlugin
};
var haxe_ui_backend_ComponentGraphicsBase = function(component) {
	this._drawCommands = [];
	this._component = component;
};
$hxClasses["haxe.ui.backend.ComponentGraphicsBase"] = haxe_ui_backend_ComponentGraphicsBase;
haxe_ui_backend_ComponentGraphicsBase.__name__ = "haxe.ui.backend.ComponentGraphicsBase";
haxe_ui_backend_ComponentGraphicsBase.prototype = {
	_component: null
	,_drawCommands: null
	,clear: function() {
		this._drawCommands = [];
		this._drawCommands.push(haxe_ui_graphics_DrawCommand.Clear);
	}
	,setPixel: function(x,y,color) {
		this._drawCommands.push(haxe_ui_graphics_DrawCommand.SetPixel(x,y,color));
	}
	,setPixels: function(pixels) {
		this._drawCommands.push(haxe_ui_graphics_DrawCommand.SetPixels(pixels));
	}
	,moveTo: function(x,y) {
		this._drawCommands.push(haxe_ui_graphics_DrawCommand.MoveTo(x,y));
	}
	,lineTo: function(x,y) {
		this._drawCommands.push(haxe_ui_graphics_DrawCommand.LineTo(x,y));
	}
	,strokeStyle: function(color,thickness,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(thickness == null) {
			thickness = 1;
		}
		this._drawCommands.push(haxe_ui_graphics_DrawCommand.StrokeStyle(color,thickness,alpha));
	}
	,circle: function(x,y,radius) {
		this._drawCommands.push(haxe_ui_graphics_DrawCommand.Circle(x,y,radius));
	}
	,fillStyle: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		this._drawCommands.push(haxe_ui_graphics_DrawCommand.FillStyle(color,alpha));
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this._drawCommands.push(haxe_ui_graphics_DrawCommand.CurveTo(controlX,controlY,anchorX,anchorY));
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this._drawCommands.push(haxe_ui_graphics_DrawCommand.CubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY));
	}
	,rectangle: function(x,y,width,height) {
		this._drawCommands.push(haxe_ui_graphics_DrawCommand.Rectangle(x,y,width,height));
	}
	,image: function(resource,x,y,width,height) {
		this._drawCommands.push(haxe_ui_graphics_DrawCommand.Image(resource,x,y,width,height));
	}
	,resize: function(width,height) {
	}
	,setProperty: function(name,value) {
	}
	,detach: function() {
	}
	,replayDrawCommands: function() {
		var commands = this._drawCommands.slice();
		this._drawCommands = [];
		var _g = 0;
		while(_g < commands.length) {
			var c = commands[_g];
			++_g;
			switch(c._hx_index) {
			case 0:
				this.clear();
				break;
			case 1:
				var x = c.x;
				var y = c.y;
				var color = c.color;
				this.setPixel(x,y,color);
				break;
			case 2:
				var pixels = c.pixels;
				this.setPixels(pixels);
				break;
			case 3:
				var x1 = c.x;
				var y1 = c.y;
				this.moveTo(x1,y1);
				break;
			case 4:
				var x2 = c.x;
				var y2 = c.y;
				this.lineTo(x2,y2);
				break;
			case 5:
				var color1 = c.color;
				var thickness = c.thickness;
				var alpha = c.alpha;
				this.strokeStyle(color1,thickness,alpha);
				break;
			case 6:
				var x3 = c.x;
				var y3 = c.y;
				var radius = c.radius;
				this.circle(x3,y3,radius);
				break;
			case 7:
				var color2 = c.color;
				var alpha1 = c.alpha;
				this.fillStyle(color2,alpha1);
				break;
			case 8:
				var controlX = c.controlX;
				var controlY = c.controlY;
				var anchorX = c.anchorX;
				var anchorY = c.anchorY;
				this.curveTo(controlX,controlY,anchorX,anchorY);
				break;
			case 9:
				var controlX1 = c.controlX1;
				var controlY1 = c.controlY1;
				var controlX2 = c.controlX2;
				var controlY2 = c.controlY2;
				var anchorX1 = c.anchorX;
				var anchorY1 = c.anchorY;
				this.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX1,anchorY1);
				break;
			case 10:
				var x4 = c.x;
				var y4 = c.y;
				var width = c.width;
				var height = c.height;
				this.rectangle(x4,y4,width,height);
				break;
			case 11:
				var resource = c.resource;
				var x5 = c.x;
				var y5 = c.y;
				var width1 = c.width;
				var height1 = c.height;
				this.image(resource,x5,y5,width1,height1);
				break;
			}
		}
	}
	,__class__: haxe_ui_backend_ComponentGraphicsBase
};
var haxe_ui_backend_ComponentGraphicsImpl = function(component) {
	haxe_ui_backend_ComponentGraphicsBase.call(this,component);
	this._impl = new haxe_ui_backend_html5_graphics_SVGGraphicsImpl(component);
};
$hxClasses["haxe.ui.backend.ComponentGraphicsImpl"] = haxe_ui_backend_ComponentGraphicsImpl;
haxe_ui_backend_ComponentGraphicsImpl.__name__ = "haxe.ui.backend.ComponentGraphicsImpl";
haxe_ui_backend_ComponentGraphicsImpl.__super__ = haxe_ui_backend_ComponentGraphicsBase;
haxe_ui_backend_ComponentGraphicsImpl.prototype = $extend(haxe_ui_backend_ComponentGraphicsBase.prototype,{
	_impl: null
	,clear: function() {
		haxe_ui_backend_ComponentGraphicsBase.prototype.clear.call(this);
		this._impl.clear();
	}
	,setPixel: function(x,y,color) {
		haxe_ui_backend_ComponentGraphicsBase.prototype.setPixel.call(this,x,y,color);
		this._impl.setPixel(x,y,color);
	}
	,setPixels: function(pixels) {
		haxe_ui_backend_ComponentGraphicsBase.prototype.setPixels.call(this,pixels);
		this._impl.setPixels(pixels);
	}
	,moveTo: function(x,y) {
		haxe_ui_backend_ComponentGraphicsBase.prototype.moveTo.call(this,x,y);
		this._impl.moveTo(x,y);
	}
	,lineTo: function(x,y) {
		haxe_ui_backend_ComponentGraphicsBase.prototype.lineTo.call(this,x,y);
		this._impl.lineTo(x,y);
	}
	,strokeStyle: function(color,thickness,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(thickness == null) {
			thickness = 1;
		}
		haxe_ui_backend_ComponentGraphicsBase.prototype.strokeStyle.call(this,color,thickness,alpha);
		this._impl.strokeStyle(color,thickness,alpha);
	}
	,fillStyle: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		haxe_ui_backend_ComponentGraphicsBase.prototype.fillStyle.call(this,color,alpha);
		this._impl.fillStyle(color,alpha);
	}
	,circle: function(x,y,radius) {
		haxe_ui_backend_ComponentGraphicsBase.prototype.circle.call(this,x,y,radius);
		this._impl.circle(x,y,radius);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		haxe_ui_backend_ComponentGraphicsBase.prototype.curveTo.call(this,controlX,controlY,anchorX,anchorY);
		this._impl.curveTo(controlX,controlY,anchorX,anchorY);
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		haxe_ui_backend_ComponentGraphicsBase.prototype.cubicCurveTo.call(this,controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this._impl.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
	}
	,rectangle: function(x,y,width,height) {
		haxe_ui_backend_ComponentGraphicsBase.prototype.rectangle.call(this,x,y,width,height);
		this._impl.rectangle(x,y,width,height);
	}
	,image: function(resource,x,y,width,height) {
		haxe_ui_backend_ComponentGraphicsBase.prototype.image.call(this,resource,x,y,width,height);
		this._impl.image(resource,x,y,width,height);
	}
	,resize: function(width,height) {
		haxe_ui_backend_ComponentGraphicsBase.prototype.resize.call(this,width,height);
		this._impl.resize(width,height);
	}
	,setProperty: function(name,value) {
		if(name == "html5.graphics.method") {
			if(value == "svg") {
				if(this._impl != null) {
					this._impl.detach();
				}
				this._impl = new haxe_ui_backend_html5_graphics_SVGGraphicsImpl(this._component);
			} else if(value == "canvas") {
				if(this._impl != null) {
					this._impl.detach();
				}
				this._impl = new haxe_ui_backend_html5_graphics_CanvasGraphicsImpl(this._component);
			}
		} else {
			this._impl.setProperty(name,value);
		}
	}
	,__class__: haxe_ui_backend_ComponentGraphicsImpl
});
var haxe_ui_backend_EventBase = function() { };
$hxClasses["haxe.ui.backend.EventBase"] = haxe_ui_backend_EventBase;
haxe_ui_backend_EventBase.__name__ = "haxe.ui.backend.EventBase";
haxe_ui_backend_EventBase.prototype = {
	cancel: function() {
	}
	,postClone: function(event) {
	}
	,__class__: haxe_ui_backend_EventBase
};
var haxe_ui_backend_EventImpl = function() { };
$hxClasses["haxe.ui.backend.EventImpl"] = haxe_ui_backend_EventImpl;
haxe_ui_backend_EventImpl.__name__ = "haxe.ui.backend.EventImpl";
haxe_ui_backend_EventImpl.__super__ = haxe_ui_backend_EventBase;
haxe_ui_backend_EventImpl.prototype = $extend(haxe_ui_backend_EventBase.prototype,{
	_originalEvent: null
	,cancel: function() {
		if(this._originalEvent != null) {
			this._originalEvent.preventDefault();
			this._originalEvent.stopImmediatePropagation();
			this._originalEvent.stopPropagation();
		}
	}
	,postClone: function(event) {
		event._originalEvent = this._originalEvent;
	}
	,__class__: haxe_ui_backend_EventImpl
});
var haxe_ui_backend_FocusManagerBase = function() {
};
$hxClasses["haxe.ui.backend.FocusManagerBase"] = haxe_ui_backend_FocusManagerBase;
haxe_ui_backend_FocusManagerBase.__name__ = "haxe.ui.backend.FocusManagerBase";
haxe_ui_backend_FocusManagerBase.prototype = {
	applyFocus: function(c) {
	}
	,unapplyFocus: function(c) {
	}
	,__class__: haxe_ui_backend_FocusManagerBase
};
var haxe_ui_backend_FocusManagerImpl = function() {
	haxe_ui_backend_FocusManagerBase.call(this);
};
$hxClasses["haxe.ui.backend.FocusManagerImpl"] = haxe_ui_backend_FocusManagerImpl;
haxe_ui_backend_FocusManagerImpl.__name__ = "haxe.ui.backend.FocusManagerImpl";
haxe_ui_backend_FocusManagerImpl.__super__ = haxe_ui_backend_FocusManagerBase;
haxe_ui_backend_FocusManagerImpl.prototype = $extend(haxe_ui_backend_FocusManagerBase.prototype,{
	applyFocus: function(c) {
		haxe_ui_backend_FocusManagerBase.prototype.applyFocus.call(this,c);
	}
	,unapplyFocus: function(c) {
		haxe_ui_backend_FocusManagerBase.prototype.applyFocus.call(this,c);
	}
	,__class__: haxe_ui_backend_FocusManagerImpl
});
var haxe_ui_backend_ImageSurface = function() {
};
$hxClasses["haxe.ui.backend.ImageSurface"] = haxe_ui_backend_ImageSurface;
haxe_ui_backend_ImageSurface.__name__ = "haxe.ui.backend.ImageSurface";
haxe_ui_backend_ImageSurface.prototype = {
	__class__: haxe_ui_backend_ImageSurface
};
var haxe_ui_backend_ImageBase = function() {
	this._imageHeight = 0;
	this._imageWidth = 0;
	this._top = 0;
	this._left = 0;
	this.aspectRatio = 1;
	haxe_ui_backend_ImageSurface.call(this);
};
$hxClasses["haxe.ui.backend.ImageBase"] = haxe_ui_backend_ImageBase;
haxe_ui_backend_ImageBase.__name__ = "haxe.ui.backend.ImageBase";
haxe_ui_backend_ImageBase.__super__ = haxe_ui_backend_ImageSurface;
haxe_ui_backend_ImageBase.prototype = $extend(haxe_ui_backend_ImageSurface.prototype,{
	parentComponent: null
	,aspectRatio: null
	,_left: null
	,_top: null
	,_imageWidth: null
	,_imageHeight: null
	,_imageInfo: null
	,_imageClipRect: null
	,dispose: function() {
		if(this.parentComponent != null) {
			this.parentComponent = null;
		}
	}
	,validateData: function() {
	}
	,validatePosition: function() {
	}
	,validateDisplay: function() {
	}
	,__class__: haxe_ui_backend_ImageBase
});
var haxe_ui_backend_ImageDisplayImpl = function() {
	haxe_ui_backend_ImageBase.call(this);
	this.element = window.document.createElement("img");
	this.element.style.position = "absolute";
	this.element.style.borderRadius = "inherit";
	this.element.style.setProperty("pointer-events","none");
};
$hxClasses["haxe.ui.backend.ImageDisplayImpl"] = haxe_ui_backend_ImageDisplayImpl;
haxe_ui_backend_ImageDisplayImpl.__name__ = "haxe.ui.backend.ImageDisplayImpl";
haxe_ui_backend_ImageDisplayImpl.__super__ = haxe_ui_backend_ImageBase;
haxe_ui_backend_ImageDisplayImpl.prototype = $extend(haxe_ui_backend_ImageBase.prototype,{
	element: null
	,dispose: function() {
		if(this.element != null) {
			haxe_ui_backend_html5_HtmlUtils.removeElement(this.element);
		}
	}
	,validateData: function() {
		if(this.element.src != this._imageInfo.data.src) {
			this.element.src = this._imageInfo.data.src;
			this.applyStyle();
		}
	}
	,validatePosition: function() {
		var style = this.element.style;
		style.left = "" + this._left + "px";
		style.top = "" + this._top + "px";
	}
	,validateDisplay: function() {
		var style = this.element.style;
		style.width = "" + this._imageWidth + "px";
		style.height = "" + this._imageHeight + "px";
		if(this._imageClipRect != null) {
			var clipValue = "rect(" + ("" + (-this._top + this._imageClipRect.top) + "px") + "," + ("" + (-this._left + this._imageClipRect.left + this._imageClipRect.width) + "px") + "," + ("" + (-this._top + this._imageClipRect.top + this._imageClipRect.height) + "px") + "," + ("" + (-this._left + this._imageClipRect.left) + "px") + ")";
			if(this.element.style.clip != clipValue) {
				this.element.style.clip = clipValue;
			}
		} else if(this.element.style.clip != null) {
			this.element.style.removeProperty("clip");
		}
	}
	,applyStyle: function() {
		if(this.parentComponent != null && this.parentComponent.get_style() != null) {
			if(this.parentComponent.get_style().imageRendering == "pixelated") {
				this.element.style.setProperty("image-rendering","pixelated");
				this.element.style.setProperty("image-rendering","-moz-crisp-edges");
				this.element.style.setProperty("image-rendering","crisp-edges");
			} else if(this.element.style.getPropertyValue("image-rendering") != null) {
				this.element.style.removeProperty("image-rendering");
			}
		}
	}
	,__class__: haxe_ui_backend_ImageDisplayImpl
});
var haxe_ui_backend_PlatformBase = function() {
	this._isMobile = null;
};
$hxClasses["haxe.ui.backend.PlatformBase"] = haxe_ui_backend_PlatformBase;
haxe_ui_backend_PlatformBase.__name__ = "haxe.ui.backend.PlatformBase";
haxe_ui_backend_PlatformBase.prototype = {
	isWindows: null
	,get_isWindows: function() {
		return window.navigator.userAgent.toLowerCase().indexOf("windows") != -1;
	}
	,isLinux: null
	,get_isLinux: function() {
		return window.navigator.userAgent.toLowerCase().indexOf("linux") != -1;
	}
	,isMac: null
	,get_isMac: function() {
		return window.navigator.userAgent.toLowerCase().indexOf("mac") != -1;
	}
	,_isMobile: null
	,isMobile: null
	,get_isMobile: function() {
		if(this._isMobile != null) {
			return this._isMobile;
		}
		this._isMobile = false;
		var ua = $global.navigator.userAgent;
		this._isMobile = haxe_ui_backend_PlatformBase.MOBILE_REGEXP.match(ua);
		return this._isMobile;
	}
	,getMetric: function(id) {
		return 0;
	}
	,getColor: function(id) {
		return null;
	}
	,getSystemLocale: function() {
		return null;
	}
	,perf: function() {
		return HxOverrides.now() / 1000 * 1000;
	}
	,KeyTab: null
	,get_KeyTab: function() {
		return this.getKeyCode("tab");
	}
	,KeyUp: null
	,get_KeyUp: function() {
		return this.getKeyCode("up");
	}
	,KeyDown: null
	,get_KeyDown: function() {
		return this.getKeyCode("down");
	}
	,KeyLeft: null
	,get_KeyLeft: function() {
		return this.getKeyCode("left");
	}
	,KeyRight: null
	,get_KeyRight: function() {
		return this.getKeyCode("right");
	}
	,KeySpace: null
	,get_KeySpace: function() {
		return this.getKeyCode("space");
	}
	,KeyEnter: null
	,get_KeyEnter: function() {
		return this.getKeyCode("enter");
	}
	,KeyEscape: null
	,get_KeyEscape: function() {
		return this.getKeyCode("escape");
	}
	,getKeyCode: function(keyId) {
		switch(keyId) {
		case "down":
			return 40;
		case "enter":
			return 13;
		case "escape":
			return 27;
		case "left":
			return 37;
		case "right":
			return 39;
		case "space":
			return 32;
		case "tab":
			return 9;
		case "up":
			return 38;
		default:
			return HxOverrides.cca(keyId,0);
		}
	}
	,__class__: haxe_ui_backend_PlatformBase
	,__properties__: {get_KeyEscape:"get_KeyEscape",get_KeyEnter:"get_KeyEnter",get_KeySpace:"get_KeySpace",get_KeyRight:"get_KeyRight",get_KeyLeft:"get_KeyLeft",get_KeyDown:"get_KeyDown",get_KeyUp:"get_KeyUp",get_KeyTab:"get_KeyTab",get_isMobile:"get_isMobile",get_isMac:"get_isMac",get_isLinux:"get_isLinux",get_isWindows:"get_isWindows"}
};
var haxe_ui_backend_PlatformImpl = function() {
	haxe_ui_backend_PlatformBase.call(this);
};
$hxClasses["haxe.ui.backend.PlatformImpl"] = haxe_ui_backend_PlatformImpl;
haxe_ui_backend_PlatformImpl.__name__ = "haxe.ui.backend.PlatformImpl";
haxe_ui_backend_PlatformImpl.calcScrollSize = function() {
	if(haxe_ui_backend_PlatformImpl._vscrollWidth >= 0 && haxe_ui_backend_PlatformImpl._hscrollHeight >= 0) {
		return;
	}
	var div = window.document.createElement("div");
	div.style.position = "absolute";
	div.style.top = "-99999px";
	div.style.left = "-99999px";
	div.style.height = "100px";
	div.style.width = "100px";
	div.style.overflow = "scroll";
	window.document.body.appendChild(div);
	haxe_ui_backend_PlatformImpl._vscrollWidth = div.offsetWidth - div.clientWidth;
	haxe_ui_backend_PlatformImpl._hscrollHeight = div.offsetHeight - div.clientHeight;
	haxe_ui_backend_html5_HtmlUtils.removeElement(div);
};
haxe_ui_backend_PlatformImpl.__super__ = haxe_ui_backend_PlatformBase;
haxe_ui_backend_PlatformImpl.prototype = $extend(haxe_ui_backend_PlatformBase.prototype,{
	getMetric: function(id) {
		switch(id) {
		case "patform.metrics.hscroll.height":
			haxe_ui_backend_PlatformImpl.calcScrollSize();
			return haxe_ui_backend_PlatformImpl._hscrollHeight;
		case "patform.metrics.vscroll.width":
			haxe_ui_backend_PlatformImpl.calcScrollSize();
			return haxe_ui_backend_PlatformImpl._vscrollWidth;
		}
		return haxe_ui_backend_PlatformBase.prototype.getMetric.call(this,id);
	}
	,getSystemLocale: function() {
		return $global.navigator.language;
	}
	,perf: function() {
		return window.performance.now();
	}
	,__class__: haxe_ui_backend_PlatformImpl
});
var haxe_ui_backend_ScreenBase = function() {
	this.rootComponents = [];
};
$hxClasses["haxe.ui.backend.ScreenBase"] = haxe_ui_backend_ScreenBase;
haxe_ui_backend_ScreenBase.__name__ = "haxe.ui.backend.ScreenBase";
haxe_ui_backend_ScreenBase.prototype = {
	rootComponents: null
	,_options: null
	,get_options: function() {
		return this._options;
	}
	,set_options: function(value) {
		this._options = value;
		return value;
	}
	,dpi: null
	,get_dpi: function() {
		return 72;
	}
	,get_title: function() {
		return null;
	}
	,set_title: function(s) {
		return s;
	}
	,width: null
	,get_width: function() {
		return 0;
	}
	,height: null
	,get_height: function() {
		return 0;
	}
	,actualWidth: null
	,get_actualWidth: function() {
		return this.get_width() * haxe_ui_Toolkit.get_scaleX();
	}
	,actualHeight: null
	,get_actualHeight: function() {
		return this.get_height() * haxe_ui_Toolkit.get_scaleY();
	}
	,isRetina: null
	,get_isRetina: function() {
		return false;
	}
	,topComponent: null
	,get_topComponent: function() {
		if(this.rootComponents.length == 0) {
			return null;
		}
		var n = this.rootComponents.length - 1;
		var c = null;
		while(n >= 0) {
			c = this.rootComponents[n];
			if(c.get_style() == null) {
				break;
			}
			if(c.get_style().pointerEvents != "none") {
				break;
			}
			--n;
		}
		return c;
	}
	,addComponent: function(component) {
		return component;
	}
	,removeComponent: function(component,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		return component;
	}
	,handleSetComponentIndex: function(child,index) {
	}
	,resizeComponent: function(c) {
		var cx = null;
		var cy = null;
		if(c.get_percentWidth() > 0) {
			cx = this.get_width() * c.get_percentWidth() / 100;
		}
		if(c.get_percentHeight() > 0) {
			cy = this.get_height() * c.get_percentHeight() / 100;
		}
		c.resizeComponent(cx,cy);
	}
	,refreshStyleRootComponents: function() {
		var _g = 0;
		var _g1 = this.rootComponents;
		while(_g < _g1.length) {
			var component = _g1[_g];
			++_g;
			this._refreshStyleComponent(component);
		}
	}
	,resizeRootComponents: function() {
		var _g = 0;
		var _g1 = this.rootComponents;
		while(_g < _g1.length) {
			var component = _g1[_g];
			++_g;
			this.resizeComponent(component);
		}
	}
	,_refreshStyleComponent: function(component) {
		var _g = 0;
		var _g1 = component._children == null ? [] : component._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.invalidateComponent("style",false);
			child.invalidateComponent("display",false);
			this._refreshStyleComponent(child);
		}
	}
	,_onRootComponentResize: function(e) {
		this._refreshStyleComponent(e.target);
	}
	,invalidateAll: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		var _g = 0;
		var _g1 = this.rootComponents;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			this.invalidateChildren(c,flag);
		}
	}
	,invalidateChildren: function(c,flag) {
		if(flag == null) {
			flag = "all";
		}
		var _g = 0;
		var _g1 = c._children == null ? [] : c._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			this.invalidateChildren(child,flag);
		}
		c.invalidateComponent(flag);
	}
	,supportsEvent: function(type) {
		return false;
	}
	,mapEvent: function(type,listener) {
	}
	,unmapEvent: function(type,listener) {
	}
	,__class__: haxe_ui_backend_ScreenBase
	,__properties__: {get_topComponent:"get_topComponent",get_isRetina:"get_isRetina",get_actualHeight:"get_actualHeight",get_actualWidth:"get_actualWidth",get_height:"get_height",get_width:"get_width",set_title:"set_title",get_title:"get_title",get_dpi:"get_dpi",set_options:"set_options",get_options:"get_options"}
};
var haxe_ui_backend_ScreenImpl = function() {
	this._hasListener = false;
	this._containerParent = null;
	this._pageRoot = null;
	this._container = null;
	this._percentContainerHeightAdded = false;
	this._percentContainerWidthAdded = false;
	this._height = null;
	this._width = null;
	haxe_ui_backend_ScreenBase.call(this);
	this._mapping = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.backend.ScreenImpl"] = haxe_ui_backend_ScreenImpl;
haxe_ui_backend_ScreenImpl.__name__ = "haxe.ui.backend.ScreenImpl";
haxe_ui_backend_ScreenImpl.__super__ = haxe_ui_backend_ScreenBase;
haxe_ui_backend_ScreenImpl.prototype = $extend(haxe_ui_backend_ScreenBase.prototype,{
	_mapping: null
	,set_options: function(value) {
		haxe_ui_backend_ScreenBase.prototype.set_options.call(this,value);
		var cx = haxe_ui_Toolkit.get_backendProperties().getProp("haxe.ui.html5.container.width",null);
		var cy = haxe_ui_Toolkit.get_backendProperties().getProp("haxe.ui.html5.container.height",null);
		var c = this.get_container();
		if(cx != null) {
			c.style.width = cx;
		}
		if(cy != null) {
			c.style.height = cy;
		}
		return value;
	}
	,get_dpi: function() {
		return haxe_ui_backend_html5_HtmlUtils.get_dpi();
	}
	,get_title: function() {
		return window.document.title;
	}
	,set_title: function(s) {
		window.document.title = s;
		return s;
	}
	,_width: null
	,get_width: function() {
		if(this._width != null) {
			return this._width;
		}
		var cx = this.get_container().offsetWidth;
		if(cx <= 0) {
			var _g = 0;
			var _g1 = this.rootComponents;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				if(c.get_width() > cx) {
					cx = c.get_width();
				}
			}
		}
		this._width = cx / haxe_ui_Toolkit.get_scaleX();
		return this._width;
	}
	,_height: null
	,get_height: function() {
		if(this._height != null) {
			return this._height;
		}
		var cy = this.get_container().offsetHeight;
		if(cy <= 0) {
			var _g = 0;
			var _g1 = this.rootComponents;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				if(c.get_height() > cy) {
					cy = c.get_height();
				}
			}
		}
		this._height = cy / haxe_ui_Toolkit.get_scaleY();
		return this._height;
	}
	,get_isRetina: function() {
		return haxe_ui_backend_html5_HtmlUtils.isRetinaDisplay();
	}
	,addComponent: function(component) {
		this.get_container().appendChild(component.element);
		component.ready();
		if(haxe_ui_Toolkit.get_scaleX() != 1 || haxe_ui_Toolkit.get_scaleY() != 1) {
			var transformString = "";
			if(haxe_ui_Toolkit.get_scaleX() != 1) {
				transformString += "scaleX(" + haxe_ui_Toolkit.get_scaleX() + ") ";
			}
			if(haxe_ui_Toolkit.get_scaleY() != 1) {
				transformString += "scaleY(" + haxe_ui_Toolkit.get_scaleY() + ") ";
			}
			component.element.style.transform = transformString;
			component.element.style.transformOrigin = "top left";
		}
		if(component.get_percentWidth() != null) {
			this.addPercentContainerWidth();
		}
		if(component.get_percentHeight() != null) {
			this.addPercentContainerHeight();
		}
		this.addResizeListener();
		this.resizeComponent(component);
		return component;
	}
	,_percentContainerWidthAdded: null
	,addPercentContainerWidth: function() {
		if(this._percentContainerWidthAdded == true) {
			return;
		}
		this._percentContainerWidthAdded = true;
		var sheet = haxe_ui_backend_html5_util_StyleSheetHelper.getValidStyleSheet();
		var w = this.get_containerParent().getAttribute("width");
		if(w == null) {
			w = "";
		}
		w = StringTools.trim(w);
		if(!StringTools.endsWith(w,"%") && !StringTools.endsWith(w,"px")) {
			sheet.insertRule("#haxeui-container-parent {\r\n                margin: 0;\r\n                width: 100%;\r\n            }",sheet.cssRules.length);
		}
		sheet.insertRule("#haxeui-container {\r\n            margin: 0;\r\n            width: 100%;\r\n        }",sheet.cssRules.length);
	}
	,_percentContainerHeightAdded: null
	,addPercentContainerHeight: function() {
		if(this._percentContainerHeightAdded == true) {
			return;
		}
		this._percentContainerHeightAdded = true;
		var sheet = haxe_ui_backend_html5_util_StyleSheetHelper.getValidStyleSheet();
		var h = this.get_containerParent().getAttribute("height");
		if(h == null) {
			h = "";
		}
		h = StringTools.trim(h);
		if(!StringTools.endsWith(h,"%") && !StringTools.endsWith(h,"px")) {
			sheet.insertRule("#haxeui-container-parent {\r\n                margin: 0;\r\n                height: 100%;\r\n            }",sheet.cssRules.length);
		}
		sheet.insertRule("#haxeui-container {\r\n            margin: 0;\r\n            height: 100%;\r\n        }",sheet.cssRules.length);
	}
	,removeComponent: function(component,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		HxOverrides.remove(this.rootComponents,component);
		if(this.get_container().contains(component.element) == true) {
			this.get_container().removeChild(component.element);
		}
		return component;
	}
	,handleSetComponentIndex: function(child,index) {
		if(index == (js_Boot.__cast(this , haxe_ui_core_Screen)).rootComponents.length - 1) {
			this.get_container().appendChild(child.element);
		} else {
			haxe_ui_backend_html5_HtmlUtils.insertBefore((js_Boot.__cast(this , haxe_ui_core_Screen)).rootComponents[index + 1].element,child.element);
		}
	}
	,_container: null
	,container: null
	,get_container: function() {
		if(this._container != null) {
			return this._container;
		}
		var c = null;
		if(this.get_options() == null || this.get_options().container == null) {
			c = window.document.body;
		} else {
			c = this.get_options().container;
		}
		if(c.style.overflow == null || c.style.overflow == "") {
			c.style.overflow = "hidden";
		}
		if(c.id != "haxeui-container") {
			c.id = "haxeui-container";
			if(this.get_options() != null && this.get_options().container != null) {
				c.style.position = "relative";
			}
			if(c.parentElement != null && c.parentElement.id != "haxeui-container-parent") {
				c.parentElement.id = "haxeui-container-parent";
			}
		}
		this._container = c;
		return c;
	}
	,_pageRoot: null
	,pageRoot: function(from) {
		if(this._pageRoot != null) {
			return this._pageRoot;
		}
		var r = null;
		var el = from;
		while(el != null) {
			if(el.classList.contains("haxeui-component") == false) {
				r = el;
				this._pageRoot = el;
				break;
			}
			el = el.parentElement;
		}
		return r;
	}
	,_containerParent: null
	,containerParent: null
	,get_containerParent: function() {
		if(this._containerParent != null) {
			return this._containerParent;
		}
		var c = this.get_container();
		if(c != null) {
			this._containerParent = c.parentElement;
		}
		return this._containerParent;
	}
	,_hasListener: null
	,addResizeListener: function() {
		var _gthis = this;
		if(this._hasListener == true) {
			return;
		}
		this._hasListener = true;
		window.addEventListener("resize",function(e) {
			_gthis._width = null;
			_gthis._height = null;
			_gthis.resizeRootComponents();
			if(Object.prototype.hasOwnProperty.call(_gthis._mapping.h,"resize")) {
				var event = new haxe_ui_events_UIEvent("resize");
				var fn = _gthis._mapping.h["resize"];
				if(fn != null) {
					fn(event);
				}
			}
		});
	}
	,supportsEvent: function(type) {
		if(type != "resize") {
			return haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type] != null;
		} else {
			return true;
		}
	}
	,mapEvent: function(type,listener) {
		var container = window.document.body;
		switch(type) {
		case "keydown":case "keyup":
			if(Object.prototype.hasOwnProperty.call(this._mapping.h,type) == false) {
				this._mapping.h[type] = listener;
				container.addEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onKeyEvent));
			}
			break;
		case "resize":
			if(Object.prototype.hasOwnProperty.call(this._mapping.h,type) == false) {
				this._mapping.h[type] = listener;
			}
			break;
		case "click":case "doubleclick":case "mousedown":case "mousemove":case "mouseout":case "mouseover":case "mouseup":case "rightclick":case "rightmousedown":case "rightmouseup":
			if(Object.prototype.hasOwnProperty.call(this._mapping.h,type) == false) {
				if(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type] != null) {
					var passive = false;
					if(passive == null) {
						passive = true;
					}
					container.addEventListener(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type],$bind(this,this.__onMouseEvent),{ passive : passive});
				}
				this._mapping.h[type] = listener;
				var passive = false;
				if(passive == null) {
					passive = true;
				}
				container.addEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onMouseEvent),{ passive : passive});
			}
			break;
		}
	}
	,unmapEvent: function(type,listener) {
		var container = window.document.body;
		switch(type) {
		case "keydown":case "keyup":
			var _this = this._mapping;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			container.removeEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onKeyEvent));
			break;
		case "resize":
			var _this = this._mapping;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			break;
		case "click":case "doubleclick":case "mousedown":case "mousemove":case "mouseout":case "mouseover":case "mouseup":case "rightclick":case "rightmousedown":case "rightmouseup":
			var _this = this._mapping;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			container.removeEventListener(haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM.h[type],$bind(this,this.__onMouseEvent));
			if(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type] != null) {
				container.removeEventListener(haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH.h[type],$bind(this,this.__onMouseEvent));
			}
			break;
		}
	}
	,__onMouseEvent: function(event) {
		var button = -1;
		var touchEvent = false;
		try {
			touchEvent = ((event) instanceof TouchEvent);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		if(touchEvent == false && ((event) instanceof MouseEvent)) {
			var me = js_Boot.__cast(event , MouseEvent);
			button = me.which;
		}
		var r = true;
		var type = haxe_ui_backend_html5_EventMapper.DOM_TO_HAXEUI.h[event.type];
		if(type == "rightclick") {
			event.stopPropagation();
			event.preventDefault();
			r = false;
		}
		if(type != null) {
			var fn = this._mapping.h[type];
			if(fn != null) {
				var mouseEvent = new haxe_ui_events_MouseEvent(type);
				mouseEvent._originalEvent = event;
				if(touchEvent == true) {
					var te = js_Boot.__cast(event , TouchEvent);
					mouseEvent.screenX = (te.changedTouches[0].pageX - haxe_ui_core_Screen.get_instance().get_container().offsetLeft) / haxe_ui_Toolkit.get_scaleX();
					mouseEvent.screenY = (te.changedTouches[0].pageY - haxe_ui_core_Screen.get_instance().get_container().offsetTop) / haxe_ui_Toolkit.get_scaleY();
					mouseEvent.touchEvent = true;
				} else if(((event) instanceof MouseEvent)) {
					var me = js_Boot.__cast(event , MouseEvent);
					mouseEvent.buttonDown = me.buttons != 0;
					mouseEvent.screenX = (me.pageX - haxe_ui_core_Screen.get_instance().get_container().offsetLeft) / haxe_ui_Toolkit.get_scaleX();
					mouseEvent.screenY = (me.pageY - haxe_ui_core_Screen.get_instance().get_container().offsetTop) / haxe_ui_Toolkit.get_scaleY();
					mouseEvent.ctrlKey = me.ctrlKey;
					mouseEvent.shiftKey = me.shiftKey;
				}
				fn(mouseEvent);
			}
		}
		return r;
	}
	,__onKeyEvent: function(event) {
		var type = haxe_ui_backend_html5_EventMapper.DOM_TO_HAXEUI.h[event.type];
		if(type != null) {
			if(event.keyCode == 9 || event.which == 9) {
				event.preventDefault();
				event.stopImmediatePropagation();
				event.stopPropagation();
			}
			var fn = this._mapping.h[type];
			if(fn != null) {
				var keyboardEvent = new haxe_ui_events_KeyboardEvent(type);
				keyboardEvent._originalEvent = event;
				keyboardEvent.keyCode = event.keyCode;
				keyboardEvent.ctrlKey = event.ctrlKey;
				keyboardEvent.shiftKey = event.shiftKey;
				fn(keyboardEvent);
			}
		}
	}
	,__class__: haxe_ui_backend_ScreenImpl
	,__properties__: $extend(haxe_ui_backend_ScreenBase.prototype.__properties__,{get_containerParent:"get_containerParent",get_container:"get_container"})
});
var haxe_ui_backend_TextBase = function() {
	this._textHeight = 0;
	this._textWidth = 0;
	this._height = 0;
	this._width = 0;
	this._top = 0;
	this._left = 0;
	this._htmlText = null;
	this._inputData = new haxe_ui_core_TextInputData();
	this._displayData = new haxe_ui_core_TextDisplayData();
};
$hxClasses["haxe.ui.backend.TextBase"] = haxe_ui_backend_TextBase;
haxe_ui_backend_TextBase.__name__ = "haxe.ui.backend.TextBase";
haxe_ui_backend_TextBase.prototype = {
	parentComponent: null
	,_displayData: null
	,_inputData: null
	,_text: null
	,_htmlText: null
	,_left: null
	,_top: null
	,_width: null
	,_height: null
	,_textWidth: null
	,_textHeight: null
	,_textStyle: null
	,_fontInfo: null
	,focus: function() {
	}
	,blur: function() {
	}
	,dispose: function() {
		if(this.parentComponent != null) {
			this.parentComponent = null;
		}
	}
	,_dataSource: null
	,get_dataSource: function() {
		return this._dataSource;
	}
	,set_dataSource: function(value) {
		this._dataSource = value;
		return value;
	}
	,supportsHtml: null
	,get_supportsHtml: function() {
		return false;
	}
	,get_caretIndex: function() {
		return 0;
	}
	,set_caretIndex: function(value) {
		return value;
	}
	,get_selectionStartIndex: function() {
		return 0;
	}
	,set_selectionStartIndex: function(value) {
		return value;
	}
	,get_selectionEndIndex: function() {
		return 0;
	}
	,set_selectionEndIndex: function(value) {
		return value;
	}
	,validateData: function() {
	}
	,validateStyle: function() {
		return false;
	}
	,validatePosition: function() {
	}
	,validateDisplay: function() {
	}
	,measureText: function() {
	}
	,measureTextWidth: function() {
		var textDisplay = new haxe_ui_core_TextDisplay();
		textDisplay._textStyle = this._textStyle;
		textDisplay._fontInfo = this._fontInfo;
		textDisplay.validateStyle();
		textDisplay._text = this._text;
		textDisplay.validateData();
		textDisplay.measureText();
		return textDisplay._textWidth;
	}
	,__class__: haxe_ui_backend_TextBase
	,__properties__: {set_selectionEndIndex:"set_selectionEndIndex",get_selectionEndIndex:"get_selectionEndIndex",set_selectionStartIndex:"set_selectionStartIndex",get_selectionStartIndex:"get_selectionStartIndex",set_caretIndex:"set_caretIndex",get_caretIndex:"get_caretIndex",get_supportsHtml:"get_supportsHtml",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource"}
};
var haxe_ui_backend_TextDisplayImpl = function() {
	this._fixedHeight = false;
	this._fixedWidth = false;
	this._isHTML = false;
	haxe_ui_backend_TextBase.call(this);
	this._displayData.multiline = false;
	this.element = this.createElement();
};
$hxClasses["haxe.ui.backend.TextDisplayImpl"] = haxe_ui_backend_TextDisplayImpl;
haxe_ui_backend_TextDisplayImpl.__name__ = "haxe.ui.backend.TextDisplayImpl";
haxe_ui_backend_TextDisplayImpl.__super__ = haxe_ui_backend_TextBase;
haxe_ui_backend_TextDisplayImpl.prototype = $extend(haxe_ui_backend_TextBase.prototype,{
	element: null
	,_html: null
	,_isHTML: null
	,validateData: function() {
		var html = null;
		if(this._text != null) {
			html = this.normalizeText(this._text);
			this._isHTML = false;
		} else if(this._htmlText != null) {
			html = this.normalizeHtmlText(this._htmlText,false);
			this._isHTML = true;
		}
		if(html != null && this._html != html) {
			if(this._isHTML == false) {
				this.element.textContent = html;
			} else {
				this.element.innerHTML = html;
			}
			this._html = html;
			if(this.get_autoWidth() == true) {
				this._fixedWidth = false;
			}
			if(this.get_autoHeight() == true) {
				this._fixedHeight = false;
			}
		}
	}
	,_rawFontName: null
	,validateStyle: function() {
		var measureTextRequired = false;
		if(this._displayData.wordWrap == true && this.element.style.whiteSpace != null) {
			this.element.style.whiteSpace = "pre-wrap";
			this.element.style.wordBreak = "break-word";
			measureTextRequired = true;
		} else if(this._displayData.wordWrap == false && this.element.style.whiteSpace != "pre") {
			this.element.style.whiteSpace = "pre";
			measureTextRequired = true;
		}
		if(this._textStyle != null) {
			if(this.element.style.textAlign != this._textStyle.textAlign) {
				this.element.style.textAlign = this._textStyle.textAlign;
			}
			var fontSizeValue = "" + this._textStyle.fontSize + "px";
			if(this.element.style.fontSize != fontSizeValue) {
				this.element.style.fontSize = fontSizeValue;
				measureTextRequired = true;
			}
			if(this._textStyle.fontBold == true && this.element.style.fontWeight != "bold") {
				this.element.style.fontWeight = "bold";
				measureTextRequired = true;
			} else if((this._textStyle.fontBold == null || this._textStyle.fontBold == false) && this.element.style.fontWeight == "bold") {
				this.element.style.removeProperty("font-weight");
				measureTextRequired = true;
			}
			if(this._textStyle.fontItalic == true && this.element.style.fontStyle != "italic") {
				this.element.style.fontStyle = "italic";
				measureTextRequired = true;
			} else if((this._textStyle.fontItalic == null || this._textStyle.fontItalic == false) && this.element.style.fontStyle == "italic") {
				this.element.style.removeProperty("font-style");
				measureTextRequired = true;
			}
			if(this._textStyle.fontUnderline == true && this.element.style.textDecoration != "underline") {
				this.element.style.textDecoration = "underline";
				measureTextRequired = true;
			} else if((this._textStyle.fontUnderline == null || this._textStyle.fontUnderline == false) && this.element.style.textDecoration == "underline") {
				this.element.style.removeProperty("text-decoration");
				measureTextRequired = true;
			}
			if(this._textStyle.fontStrikeThrough == true && this.element.style.textDecoration != "line-through") {
				this.element.style.textDecoration = "line-through";
				measureTextRequired = true;
			} else if((this._textStyle.fontStrikeThrough == null || this._textStyle.fontStrikeThrough == false) && this.element.style.textDecoration == "line-through") {
				this.element.style.removeProperty("text-decoration");
				measureTextRequired = true;
			}
			var colorValue = haxe_ui_backend_html5_HtmlUtils.color(this._textStyle.color);
			if(this.element.style.color != colorValue) {
				this.element.style.color = colorValue;
			}
			if(this._fontInfo != null && this._fontInfo.data != this._rawFontName) {
				this.element.style.fontFamily = this._fontInfo.data;
				this._rawFontName = this._fontInfo.data;
				measureTextRequired = true;
				var _this = this.parentComponent;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout",false);
				}
			}
		}
		if(measureTextRequired == true) {
			if(this.get_autoWidth() == true) {
				this._fixedWidth = false;
			}
			if(this.get_autoHeight() == true) {
				this._fixedHeight = false;
			}
		}
		return measureTextRequired;
	}
	,validatePosition: function() {
		var style = this.element.style;
		style.left = "" + this._left + "px";
		style.top = "" + this._top + "px";
	}
	,_fixedWidth: null
	,_fixedHeight: null
	,validateDisplay: function() {
		var style = this.element.style;
		var allowFixed = true;
		if(this.get_autoWidth() == false && style.width != "" + this._width + "px") {
			allowFixed = false;
		}
		if(this._width > 0 && this.get_autoWidth() == false) {
			this._fixedWidth = true;
			style.width = "" + this._width + "px";
		}
		if(this._height > 0 && this.get_autoHeight() == false) {
			this._fixedHeight = true;
			style.height = "" + this._height + "px";
		}
		if(allowFixed == false) {
			this._fixedHeight = false;
		}
	}
	,measureText: function() {
		if(this._fixedWidth == true && this._fixedHeight == true) {
			return;
		}
		var div = haxe_ui_backend_html5_HtmlUtils.getDivHelper();
		this.setTempDivData(div);
		haxe_ui_backend_html5_HtmlUtils.releaseDivHelper(div);
		if(this._fixedWidth == false) {
			this._textWidth = div.clientWidth + 2;
		}
		if(this._fixedHeight == false) {
			this._textHeight = div.clientHeight + 2;
		}
	}
	,createElement: function() {
		var el = window.document.createElement("div");
		el.style.marginTop = "1px";
		el.style.marginLeft = "1px";
		el.style.position = "absolute";
		el.style.cursor = "inherit";
		return el;
	}
	,setTempDivData: function(div) {
		var t = null;
		if(this._text != null) {
			t = this.normalizeText(this._text);
		} else if(this._htmlText != null) {
			t = this.normalizeHtmlText(this._htmlText,false);
		}
		if(t == null || t.length == 0) {
			t = "|";
		}
		div.style.fontFamily = this.element.style.fontFamily;
		div.style.fontSize = this.element.style.fontSize;
		div.style.whiteSpace = this.element.style.whiteSpace;
		div.style.wordBreak = this.element.style.wordBreak;
		if(this.get_autoWidth() == false) {
			div.style.width = this._width > 0 ? "" + ("" + this._width + "px") : "";
		} else {
			div.style.width = "";
		}
		if(this._isHTML == false) {
			div.textContent = t;
		} else {
			div.innerHTML = t;
		}
	}
	,normalizeText: function(text) {
		text = StringTools.replace(text,"\\n","\n");
		return text;
	}
	,normalizeHtmlText: function(text,$escape) {
		if($escape == null) {
			$escape = true;
		}
		var html = text;
		if($escape == true) {
			html = haxe_ui_backend_html5_HtmlUtils.escape(text);
		}
		html = StringTools.replace(html,"\\n","\n");
		html = StringTools.replace(html,"\r\n","<br/>");
		html = StringTools.replace(html,"\r","<br/>");
		html = StringTools.replace(html,"\n","<br/>");
		return html;
	}
	,autoWidth: null
	,get_autoWidth: function() {
		if(((this.parentComponent) instanceof haxe_ui_components_Label)) {
			return (js_Boot.__cast(this.parentComponent , haxe_ui_components_Label)).get_autoWidth();
		}
		return false;
	}
	,autoHeight: null
	,get_autoHeight: function() {
		if(((this.parentComponent) instanceof haxe_ui_components_Label)) {
			return (js_Boot.__cast(this.parentComponent , haxe_ui_components_Label)).get_autoHeight();
		}
		return false;
	}
	,get_supportsHtml: function() {
		return true;
	}
	,measureTextWidth: function() {
		var div = haxe_ui_backend_html5_HtmlUtils.getDivHelper();
		this.setTempDivData(div);
		div.style.width = "";
		var cx = div.clientWidth;
		haxe_ui_backend_html5_HtmlUtils.releaseDivHelper(div);
		return cx;
	}
	,__class__: haxe_ui_backend_TextDisplayImpl
	,__properties__: $extend(haxe_ui_backend_TextBase.prototype.__properties__,{get_autoHeight:"get_autoHeight",get_autoWidth:"get_autoWidth"})
});
var haxe_ui_backend_TextInputImpl = function() {
	this._selectedEndIndex = -1;
	this._selectionStartIndex = 0;
	haxe_ui_backend_TextDisplayImpl.call(this);
};
$hxClasses["haxe.ui.backend.TextInputImpl"] = haxe_ui_backend_TextInputImpl;
haxe_ui_backend_TextInputImpl.__name__ = "haxe.ui.backend.TextInputImpl";
haxe_ui_backend_TextInputImpl.__super__ = haxe_ui_backend_TextDisplayImpl;
haxe_ui_backend_TextInputImpl.prototype = $extend(haxe_ui_backend_TextDisplayImpl.prototype,{
	focus: function() {
		this.element.focus({preventScroll: true});
	}
	,blur: function() {
		this.element.blur();
	}
	,onChangeEvent: function(e) {
		var newText = null;
		if(((this.element) instanceof HTMLTextAreaElement)) {
			newText = (js_Boot.__cast(this.element , HTMLTextAreaElement)).value;
		} else {
			newText = (js_Boot.__cast(this.element , HTMLInputElement)).value;
		}
		if(newText != this._text) {
			this._text = newText;
			this.measureText();
			if(this._inputData.onChangedCallback != null) {
				this._inputData.onChangedCallback();
			}
		}
	}
	,onScroll: function(e) {
		this._inputData.hscrollPos = this.element.scrollLeft;
		this._inputData.vscrollPos = this.element.scrollTop;
		this._inputData.hscrollMax = this._textWidth - this._width;
		this._inputData.hscrollPageSize = this._width * this._inputData.hscrollMax / this._textWidth;
		this._inputData.vscrollMax = this._textHeight - this._height;
		this._inputData.vscrollPageSize = this._height * this._inputData.vscrollMax / this._textHeight;
		if(this._inputData.onScrollCallback != null) {
			this._inputData.onScrollCallback();
		}
	}
	,validateData: function() {
		if(this._text != null) {
			var html = this.normalizeText(this._text);
			if(((this.element) instanceof HTMLInputElement)) {
				(js_Boot.__cast(this.element , HTMLInputElement)).value = html;
			} else if(((this.element) instanceof HTMLTextAreaElement)) {
				(js_Boot.__cast(this.element , HTMLTextAreaElement)).value = html;
			}
		}
		var hscrollValue = this._inputData.hscrollPos | 0;
		if(this.element.scrollLeft != hscrollValue) {
			this.element.scrollLeft = hscrollValue;
		}
		var vscrollValue = this._inputData.vscrollPos | 0;
		if(this.element.scrollTop != vscrollValue) {
			this.element.scrollTop = vscrollValue;
		}
	}
	,validateStyle: function() {
		var measureTextRequired = false;
		if(this._displayData.multiline == false && ((this.element) instanceof HTMLInputElement) == false || this._displayData.multiline == true && ((this.element) instanceof HTMLTextAreaElement) == false) {
			var newElement = this.createElement();
			this.element.parentElement.appendChild(newElement);
			haxe_ui_backend_html5_HtmlUtils.removeElement(this.element);
			this.element.removeEventListener("input",$bind(this,this.onChangeEvent));
			this.element.removeEventListener("propertychange",$bind(this,this.onChangeEvent));
			this.element.removeEventListener("scroll",$bind(this,this.onScroll));
			this.element = newElement;
			this.validateData();
			measureTextRequired = true;
		}
		if(((this.element) instanceof HTMLInputElement)) {
			var inputElement = this.element;
			if(this._inputData.password == true && inputElement.type != "password") {
				inputElement.type = "password";
			} else if(this._inputData.password == false && inputElement.type != "") {
				inputElement.type = "";
			}
		}
		if(this.parentComponent.get_disabled() || this.parentComponent._interactivityDisabled == true) {
			this.element.style.cursor = "not-allowed";
			if(((this.element) instanceof HTMLInputElement)) {
				(js_Boot.__cast(this.element , HTMLInputElement)).disabled = true;
			} else if(((this.element) instanceof HTMLTextAreaElement)) {
				(js_Boot.__cast(this.element , HTMLTextAreaElement)).disabled = true;
			}
		} else {
			this.element.style.cursor = null;
			if(((this.element) instanceof HTMLInputElement)) {
				(js_Boot.__cast(this.element , HTMLInputElement)).disabled = false;
			} else if(((this.element) instanceof HTMLTextAreaElement)) {
				(js_Boot.__cast(this.element , HTMLTextAreaElement)).disabled = false;
			}
		}
		if(!haxe_ui_backend_TextDisplayImpl.prototype.validateStyle.call(this)) {
			return measureTextRequired;
		} else {
			return true;
		}
	}
	,measureText: function() {
		var div = haxe_ui_backend_html5_HtmlUtils.getDivHelper("haxeui-text-input-div-helper");
		this.setTempDivData(div);
		haxe_ui_backend_html5_HtmlUtils.releaseDivHelper(div);
		this._textWidth = div.clientWidth;
		this._textHeight = div.clientHeight + 2;
		this._inputData.hscrollMax = this._textWidth - this._width;
		this._inputData.hscrollPageSize = this._width * this._inputData.hscrollMax / this._textWidth;
		this._inputData.vscrollMax = this._textHeight - this._height;
		this._inputData.vscrollPageSize = this._height * this._inputData.vscrollMax / this._textHeight;
	}
	,_selectionStartIndex: null
	,get_selectionStartIndex: function() {
		return this._selectionStartIndex;
	}
	,set_selectionStartIndex: function(value) {
		this._selectionStartIndex = value;
		this.applySelection();
		return value;
	}
	,_selectedEndIndex: null
	,get_selectionEndIndex: function() {
		return this._selectedEndIndex;
	}
	,set_selectionEndIndex: function(value) {
		this._selectedEndIndex = value;
		this.applySelection();
		return value;
	}
	,applySelection: function() {
		if(this._selectionStartIndex < 0 || this._selectedEndIndex < 0) {
			return;
		}
		if(this._text != null && this._selectedEndIndex > this._text.length) {
			this._selectedEndIndex = this._text.length;
		}
		if(((this.element) instanceof HTMLInputElement)) {
			(js_Boot.__cast(this.element , HTMLInputElement)).setSelectionRange(this._selectionStartIndex,this._selectedEndIndex);
		} else if(((this.element) instanceof HTMLTextAreaElement)) {
			(js_Boot.__cast(this.element , HTMLTextAreaElement)).setSelectionRange(this._selectionStartIndex,this._selectedEndIndex);
		}
	}
	,createElement: function() {
		if(this.element != null) {
			this.element.removeEventListener("input",$bind(this,this.onChangeEvent));
			this.element.removeEventListener("propertychange",$bind(this,this.onChangeEvent));
			this.element.removeEventListener("scroll",$bind(this,this.onScroll));
		}
		var el = null;
		if(this._displayData.multiline == false) {
			el = window.document.createElement("input");
			el.style.border = "none";
			el.style.outline = "none";
			el.style.whiteSpace = "pre";
			el.style.overflow = "hidden";
			el.style.cursor = "initial";
			el.style.position = "absolute";
			el.style.backgroundColor = "inherit";
			el.style.padding = "0px";
			el.spellcheck = false;
		} else {
			el = window.document.createElement("textarea");
			el.style.border = "none";
			el.style.resize = "none";
			el.style.outline = "none";
			el.style.lineHeight = "1.4";
			el.style.padding = "0px";
			el.style.margin = "0px";
			el.style.bottom = "0px";
			el.style.right = "0px";
			el.style.overflow = "hidden";
			el.style.cursor = "initial";
			el.style.position = "absolute";
			el.style.backgroundColor = "inherit";
			el.style.whiteSpace = "pre-wrap";
			el.id = "textArea";
			el.spellcheck = false;
			el.onkeydown = function(e) {
				if(e.keyCode == 9 || e.which == 9) {
					e.preventDefault();
					e.stopImmediatePropagation();
					e.stopPropagation();
					var ta = js_Boot.__cast(el , HTMLTextAreaElement);
					var s = ta.selectionStart;
					ta.value = ta.value.substring(0,ta.selectionStart) + "\t" + ta.value.substring(ta.selectionEnd);
					ta.selectionEnd = s + 1;
					return false;
				}
				return true;
			};
		}
		el.addEventListener("input",$bind(this,this.onChangeEvent));
		el.addEventListener("propertychange",$bind(this,this.onChangeEvent));
		el.addEventListener("scroll",$bind(this,this.onScroll));
		return el;
	}
	,validatePosition: function() {
		var x = this._left;
		var y = this._top;
		if(this._displayData.multiline == false && this.parentComponent != null && this.parentComponent.get_style() != null) {
			if(this.parentComponent.get_style().borderLeftSize != null) {
				x -= this.parentComponent.get_style().borderLeftSize;
			}
			if(this.parentComponent.get_style().borderTopSize != null) {
				y -= this.parentComponent.get_style().borderTopSize;
			}
		}
		var style = this.element.style;
		style.left = "" + x + "px";
		style.top = "" + y + "px";
	}
	,setTempDivData: function(div) {
		var t = this._text;
		if(t == null || t.length == 0) {
			t = "|";
		}
		div.style.fontFamily = this.element.style.fontFamily;
		div.style.fontSize = this.element.style.fontSize;
		div.style.whiteSpace = this.element.style.whiteSpace;
		div.style.lineHeight = this.element.style.lineHeight;
		if(((this.element) instanceof HTMLTextAreaElement)) {
			div.style.wordBreak = this.element.style.wordBreak;
		}
		if(this.get_autoWidth() == false) {
			div.style.width = this._width > 0 ? "" + ("" + this._width + "px") : "";
		} else {
			div.style.width = "";
		}
		var normalizedText = haxe_ui_backend_TextDisplayImpl.prototype.normalizeText.call(this,t);
		normalizedText = StringTools.replace(normalizedText,"<","&lt;");
		normalizedText = StringTools.replace(normalizedText,">","&gt;");
		if(this._displayData.multiline == true) {
			normalizedText += "<br>";
		}
		div.innerHTML = normalizedText;
	}
	,__class__: haxe_ui_backend_TextInputImpl
});
var haxe_ui_backend_TimerImpl = function(delay,callback) {
	this._timer = new haxe_Timer(delay);
	this._timer.run = function() {
		callback();
	};
};
$hxClasses["haxe.ui.backend.TimerImpl"] = haxe_ui_backend_TimerImpl;
haxe_ui_backend_TimerImpl.__name__ = "haxe.ui.backend.TimerImpl";
haxe_ui_backend_TimerImpl.prototype = {
	_timer: null
	,stop: function() {
		this._timer.stop();
	}
	,__class__: haxe_ui_backend_TimerImpl
};
var haxe_ui_backend_html5_EventMapper = function() { };
$hxClasses["haxe.ui.backend.html5.EventMapper"] = haxe_ui_backend_html5_EventMapper;
haxe_ui_backend_html5_EventMapper.__name__ = "haxe.ui.backend.html5.EventMapper";
var haxe_ui_backend_html5_HtmlUtils = function() { };
$hxClasses["haxe.ui.backend.html5.HtmlUtils"] = haxe_ui_backend_html5_HtmlUtils;
haxe_ui_backend_html5_HtmlUtils.__name__ = "haxe.ui.backend.html5.HtmlUtils";
haxe_ui_backend_html5_HtmlUtils.__properties__ = {get_dpi:"get_dpi"};
haxe_ui_backend_html5_HtmlUtils.px = function(value) {
	return "" + value + "px";
};
haxe_ui_backend_html5_HtmlUtils.color = function(value) {
	if(value == null) {
		return "rgba(0, 0, 0, 0)";
	}
	return "#" + StringTools.hex(value,6);
};
haxe_ui_backend_html5_HtmlUtils.rgba = function(value,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	var r = value >> 16 & 255;
	var g = value >> 8 & 255;
	var b = value & 255;
	return "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
};
haxe_ui_backend_html5_HtmlUtils.escape = function(s) {
	s = StringTools.replace(s,"\"","&quot;");
	s = StringTools.replace(s,"'","&#39;");
	s = StringTools.replace(s,"<","&lt;");
	s = StringTools.replace(s,">","&gt;");
	return s;
};
haxe_ui_backend_html5_HtmlUtils.namedChild = function(el,child,index) {
	if(index == null) {
		index = 0;
	}
	if(child != null) {
		var list = el.getElementsByTagName(child);
		if(list.length == 0) {
			return null;
		}
		el = list.item(index);
	}
	return el;
};
haxe_ui_backend_html5_HtmlUtils.getDivHelper = function(id) {
	var div = null;
	if(id != null) {
		var helper = haxe_ui_backend_html5_HtmlUtils._divHelpersId.h[id];
		if(helper != null) {
			div = helper.div;
		}
	} else {
		var key = haxe_ui_backend_html5_HtmlUtils._divHelpers.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var value = haxe_ui_backend_html5_HtmlUtils._divHelpers.h[key1.__id__];
			if(value.claimed == false) {
				div = value.div;
				break;
			}
		}
	}
	if(div == null) {
		div = window.document.createElement("div");
		div.style.position = "absolute";
		div.style.top = "-99999px";
		div.style.left = "-99999px";
		window.document.body.appendChild(div);
		var helper = { div : div, claimed : true};
		if(id != null) {
			haxe_ui_backend_html5_HtmlUtils._divHelpersId.h[id] = helper;
		} else {
			haxe_ui_backend_html5_HtmlUtils._divHelpers.set(div,helper);
		}
	}
	return div;
};
haxe_ui_backend_html5_HtmlUtils.releaseDivHelper = function(div) {
	if(haxe_ui_backend_html5_HtmlUtils._divHelpers.h.__keys__[div.__id__] != null) {
		haxe_ui_backend_html5_HtmlUtils._divHelpers.h[div.__id__].claimed = false;
	}
};
haxe_ui_backend_html5_HtmlUtils.measureText = function(text,addWidth,addHeight,fontSize,fontName) {
	if(fontSize == null) {
		fontSize = -1;
	}
	if(addHeight == null) {
		addHeight = 0;
	}
	if(addWidth == null) {
		addWidth = 0;
	}
	var div = haxe_ui_backend_html5_HtmlUtils.getDivHelper();
	div.style.width = "";
	div.style.height = "";
	if(fontSize > 0) {
		div.style.fontSize = "" + fontSize + "px";
	} else {
		div.style.fontSize = "";
	}
	if(fontName != null) {
		div.style.fontFamily = fontName;
	} else {
		div.style.fontFamily = "";
	}
	div.innerHTML = text;
	return new haxe_ui_geom_Size(div.clientWidth + addWidth,div.clientHeight + addHeight);
};
haxe_ui_backend_html5_HtmlUtils.addEventListener = function(element,type,listener,passive) {
	if(passive == null) {
		passive = true;
	}
	element.addEventListener(type,listener,{ passive : passive});
};
haxe_ui_backend_html5_HtmlUtils.dpi = null;
haxe_ui_backend_html5_HtmlUtils.get_dpi = function() {
	if(haxe_ui_backend_html5_HtmlUtils._dpi != 0) {
		return haxe_ui_backend_html5_HtmlUtils._dpi;
	}
	var div = window.document.createElement("div");
	div.style.width = "1in";
	div.style.height = "1in";
	div.style.position = "absolute";
	div.style.top = "-99999px";
	div.style.left = "-99999px";
	window.document.body.appendChild(div);
	var devicePixelRatio = window.devicePixelRatio;
	if(devicePixelRatio == null) {
		devicePixelRatio = 1;
	}
	haxe_ui_backend_html5_HtmlUtils._dpi = div.offsetWidth * devicePixelRatio;
	haxe_ui_backend_html5_HtmlUtils.removeElement(div);
	return haxe_ui_backend_html5_HtmlUtils._dpi;
};
haxe_ui_backend_html5_HtmlUtils.swapElements = function(el1,el2) {
	el2.parentElement.insertBefore(el2,el1);
};
haxe_ui_backend_html5_HtmlUtils.insertBefore = function(el,before) {
	before.parentElement.insertBefore(before,el);
};
haxe_ui_backend_html5_HtmlUtils.removeElement = function(el) {
	if(el != null && el.parentElement != null) {
		el.parentElement.removeChild(el);
	}
};
haxe_ui_backend_html5_HtmlUtils.isRetinaDisplay = function() {
	if(haxe_ui_backend_html5_HtmlUtils._isRetina == null) {
		var query = "(-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2), (min-resolution: 192dpi)";
		if(window.matchMedia(query).matches) {
			haxe_ui_backend_html5_HtmlUtils._isRetina = true;
		} else {
			haxe_ui_backend_html5_HtmlUtils._isRetina = false;
		}
	}
	return haxe_ui_backend_html5_HtmlUtils._isRetina;
};
var haxe_ui_backend_html5_StyleHelper = function() { };
$hxClasses["haxe.ui.backend.html5.StyleHelper"] = haxe_ui_backend_html5_StyleHelper;
haxe_ui_backend_html5_StyleHelper.__name__ = "haxe.ui.backend.html5.StyleHelper";
haxe_ui_backend_html5_StyleHelper.apply = function(component,width,height,style) {
	var element = component.element;
	var css = element.style;
	var slice = null;
	if(style.backgroundImageSliceTop != null && style.backgroundImageSliceLeft != null && style.backgroundImageSliceBottom != null && style.backgroundImageSliceRight != null) {
		slice = new haxe_ui_geom_Rectangle(style.backgroundImageSliceLeft,style.backgroundImageSliceTop,style.backgroundImageSliceRight - style.backgroundImageSliceLeft,style.backgroundImageSliceBottom - style.backgroundImageSliceTop);
	}
	if(slice != null) {
		width = Math.round(width);
		height = Math.round(height);
	}
	css.width = "" + width + "px";
	css.height = "" + height + "px";
	var borderStyle = style.borderStyle;
	if(borderStyle == null) {
		borderStyle = "solid";
	}
	if(style.borderLeftSize != null && style.borderLeftSize == style.borderRightSize && style.borderLeftSize == style.borderBottomSize && style.borderLeftSize == style.borderTopSize) {
		if(style.borderLeftSize > 0) {
			css.borderWidth = "" + style.borderLeftSize + "px";
			css.borderStyle = borderStyle;
		} else {
			css.removeProperty("border-width");
			css.removeProperty("border-style");
		}
	} else if(style.borderLeftSize == null && style.borderRightSize == null && style.borderBottomSize == null && style.borderTopSize == null) {
		css.removeProperty("border-width");
		css.removeProperty("border-style");
	} else {
		if(style.borderTopSize != null && style.borderTopSize > 0) {
			css.borderTopWidth = "" + style.borderTopSize + "px";
			css.borderTopStyle = borderStyle;
		} else {
			css.removeProperty("border-top-width");
			css.removeProperty("border-top-style");
		}
		if(style.borderLeftSize != null && style.borderLeftSize > 0) {
			css.borderLeftWidth = "" + style.borderLeftSize + "px";
			css.borderLeftStyle = borderStyle;
		} else {
			css.removeProperty("border-left-width");
			css.removeProperty("border-left-style");
		}
		if(style.borderBottomSize != null && style.borderBottomSize > 0) {
			css.borderBottomWidth = "" + style.borderBottomSize + "px";
			css.borderBottomStyle = borderStyle;
		} else {
			css.removeProperty("border-bottom-width");
			css.removeProperty("border-bottom-style");
		}
		if(style.borderRightSize != null && style.borderRightSize > 0) {
			css.borderRightWidth = "" + style.borderRightSize + "px";
			css.borderRightStyle = borderStyle;
		} else {
			css.removeProperty("border-right-width");
			css.removeProperty("border-right-style");
		}
	}
	if(style.borderLeftColor != null && style.borderLeftColor == style.borderRightColor && style.borderLeftColor == style.borderBottomColor && style.borderLeftColor == style.borderTopColor) {
		if(style.borderOpacity == null) {
			css.borderColor = haxe_ui_backend_html5_HtmlUtils.color(style.borderLeftColor);
		} else {
			css.borderColor = haxe_ui_backend_html5_HtmlUtils.rgba(style.borderLeftColor,style.borderOpacity);
		}
	} else if(style.borderLeftColor == null && style.borderRightColor == null && style.borderBottomColor == null && style.borderTopColor == null) {
		css.removeProperty("border-color");
	} else {
		if(style.borderTopColor != null && style.borderTopSize != null) {
			if(style.borderOpacity == null) {
				css.borderTopColor = haxe_ui_backend_html5_HtmlUtils.color(style.borderTopColor);
			} else {
				css.borderTopColor = haxe_ui_backend_html5_HtmlUtils.rgba(style.borderTopColor,style.borderOpacity);
			}
		} else if(style.borderTopColor == null && style.borderTopSize != null) {
			css.borderTopColor = haxe_ui_backend_html5_HtmlUtils.color(style.borderTopColor);
		} else {
			css.removeProperty("border-top-color");
		}
		if(style.borderLeftColor != null && style.borderLeftSize != null) {
			if(style.borderOpacity == null) {
				css.borderLeftColor = haxe_ui_backend_html5_HtmlUtils.color(style.borderLeftColor);
			} else {
				css.borderLeftColor = haxe_ui_backend_html5_HtmlUtils.rgba(style.borderLeftColor,style.borderOpacity);
			}
		} else if(style.borderLeftColor == null && style.borderLeftSize != null) {
			css.borderLeftColor = haxe_ui_backend_html5_HtmlUtils.color(style.borderLeftColor);
		} else {
			css.removeProperty("border-left-color");
		}
		if(style.borderBottomColor != null && style.borderBottomSize != null) {
			if(style.borderOpacity == null) {
				css.borderBottomColor = haxe_ui_backend_html5_HtmlUtils.color(style.borderBottomColor);
			} else {
				css.borderBottomColor = haxe_ui_backend_html5_HtmlUtils.rgba(style.borderBottomColor,style.borderOpacity);
			}
		} else if(style.borderBottomColor == null && style.borderBottomSize != null) {
			css.borderBottomColor = haxe_ui_backend_html5_HtmlUtils.color(style.borderBottomColor);
		} else {
			css.removeProperty("border-bottom-color");
		}
		if(style.borderRightColor != null && style.borderRightSize != null) {
			if(style.borderOpacity == null) {
				css.borderRightColor = haxe_ui_backend_html5_HtmlUtils.color(style.borderRightColor);
			} else {
				css.borderRightColor = haxe_ui_backend_html5_HtmlUtils.rgba(style.borderRightColor,style.borderOpacity);
			}
		} else if(style.borderRightColor == null && style.borderRightSize != null) {
			css.borderRightColor = haxe_ui_backend_html5_HtmlUtils.color(style.borderRightColor);
		} else {
			css.removeProperty("border-right-color");
		}
	}
	var background = [];
	if(style.backgroundColor != null) {
		if(style.backgroundColorEnd != null && style.backgroundColorEnd != style.backgroundColor) {
			css.removeProperty("background-color");
			var gradientStyle = style.backgroundGradientStyle;
			if(gradientStyle == null) {
				gradientStyle = "vertical";
			}
			if(style.backgroundOpacity != null) {
				if(gradientStyle == "vertical") {
					background.push("linear-gradient(to bottom, " + haxe_ui_backend_html5_HtmlUtils.rgba(style.backgroundColor,style.backgroundOpacity) + ", " + haxe_ui_backend_html5_HtmlUtils.rgba(style.backgroundColorEnd,style.backgroundOpacity) + ")");
				} else if(gradientStyle == "horizontal") {
					background.push("linear-gradient(to right, " + haxe_ui_backend_html5_HtmlUtils.rgba(style.backgroundColor,style.backgroundOpacity) + ", " + haxe_ui_backend_html5_HtmlUtils.rgba(style.backgroundColorEnd,style.backgroundOpacity) + ")");
				}
			} else if(gradientStyle == "vertical") {
				background.push("linear-gradient(to bottom, " + haxe_ui_backend_html5_HtmlUtils.color(style.backgroundColor) + ", " + haxe_ui_backend_html5_HtmlUtils.color(style.backgroundColorEnd) + ")");
			} else if(gradientStyle == "horizontal") {
				background.push("linear-gradient(to right, " + haxe_ui_backend_html5_HtmlUtils.color(style.backgroundColor) + ", " + haxe_ui_backend_html5_HtmlUtils.color(style.backgroundColorEnd) + ")");
			}
		} else {
			css.removeProperty("background");
			if(style.backgroundOpacity != null) {
				css.backgroundColor = haxe_ui_backend_html5_HtmlUtils.rgba(style.backgroundColor,style.backgroundOpacity);
			} else {
				css.backgroundColor = haxe_ui_backend_html5_HtmlUtils.color(style.backgroundColor);
			}
		}
	} else {
		css.removeProperty("background");
		css.removeProperty("background-color");
	}
	if(style.borderRadius != null && style.borderRadius > 0 && (style.borderRadiusTopLeft == null || style.borderRadiusTopLeft == style.borderRadius) && (style.borderRadiusTopRight == null || style.borderRadiusTopRight == style.borderRadius) && (style.borderRadiusBottomLeft == null || style.borderRadiusBottomLeft == style.borderRadius) && (style.borderRadiusBottomRight == null || style.borderRadiusBottomRight == style.borderRadius)) {
		css.borderRadius = "" + style.borderRadius + "px";
	} else if(style.borderRadiusTopLeft != null && style.borderRadiusTopLeft > 0 || style.borderRadiusTopRight != null && style.borderRadiusTopRight > 0 || style.borderRadiusBottomLeft != null && style.borderRadiusBottomLeft > 0 || style.borderRadiusBottomRight != null && style.borderRadiusBottomRight > 0) {
		if(style.borderRadiusTopLeft != null && style.borderRadiusTopLeft > 0) {
			css.borderTopLeftRadius = "" + style.borderRadiusTopLeft + "px";
		} else {
			css.removeProperty("border-top-left-radius");
		}
		if(style.borderRadiusTopRight != null && style.borderRadiusTopRight > 0) {
			css.borderTopRightRadius = "" + style.borderRadiusTopRight + "px";
		} else {
			css.removeProperty("border-top-right-radius");
		}
		if(style.borderRadiusBottomLeft != null && style.borderRadiusBottomLeft > 0) {
			css.borderBottomLeftRadius = "" + style.borderRadiusBottomLeft + "px";
		} else {
			css.removeProperty("border-bottom-left-radius");
		}
		if(style.borderRadiusBottomRight != null && style.borderRadiusBottomRight > 0) {
			css.borderBottomRightRadius = "" + style.borderRadiusBottomRight + "px";
		} else {
			css.removeProperty("border-bottom-right-radius");
		}
	} else {
		css.removeProperty("border-radius");
	}
	if(style.backgroundImage != null) {
		haxe_ui_Toolkit.get_assets().getImage(haxe_ui_util_Variant.toString(style.backgroundImage),function(imageInfo) {
			if(imageInfo == null) {
				return;
			}
			var imageRect = new haxe_ui_geom_Rectangle(0,0,imageInfo.width,imageInfo.height);
			if(style.backgroundImageClipTop != null && style.backgroundImageClipLeft != null && style.backgroundImageClipBottom != null && style.backgroundImageClipRight != null) {
				imageRect = new haxe_ui_geom_Rectangle(style.backgroundImageClipLeft,style.backgroundImageClipTop,style.backgroundImageClipRight - style.backgroundImageClipLeft,style.backgroundImageClipBottom - style.backgroundImageClipTop);
			}
			if(slice == null) {
				if(imageRect.width == imageInfo.width && imageRect.height == imageInfo.height) {
					var backgroundRepeat = null;
					var backgroundSize = null;
					background.push("url(" + imageInfo.data.src + ")");
					if(style.backgroundImageRepeat == null) {
						backgroundRepeat = "no-repeat";
					} else if(style.backgroundImageRepeat == "repeat") {
						backgroundRepeat = "repeat";
					} else if(style.backgroundImageRepeat == "stretch") {
						backgroundRepeat = "no-repeat";
						backgroundSize = "100% 100%";
					}
					background.reverse();
					css.background = background.join(",");
					if(backgroundSize != null) {
						css.backgroundSize = "100% 100%";
					} else {
						css.removeProperty("background-size");
					}
					if(backgroundRepeat != null) {
						css.backgroundRepeat = "100% 100%";
					} else {
						css.removeProperty("background-repeat");
					}
				} else {
					var canvas = component.getCanvas(width,height);
					var ctx = canvas.getContext("2d",null);
					ctx.clearRect(0,0,width,height);
					haxe_ui_backend_html5_StyleHelper.paintBitmap(ctx,imageInfo.data,imageRect,new haxe_ui_geom_Rectangle(0,0,width,height));
				}
			} else {
				var rects = haxe_ui_geom_Slice9.buildRects(width,height,imageRect.width,imageRect.height,slice);
				var srcRects = rects.src;
				var dstRects = rects.dst;
				var canvas = component.getCanvas(width,height);
				var ctx = canvas.getContext("2d",null);
				ctx.clearRect(0,0,width,height);
				ctx.imageSmoothingEnabled = false;
				var _g = 0;
				var _g1 = srcRects.length;
				while(_g < _g1) {
					var i = _g++;
					var srcRect = new haxe_ui_geom_Rectangle(srcRects[i].left + imageRect.left,srcRects[i].top + imageRect.top,srcRects[i].width,srcRects[i].height);
					var dstRect = dstRects[i];
					haxe_ui_backend_html5_StyleHelper.paintBitmap(ctx,imageInfo.data,srcRect,dstRect);
				}
			}
		});
	} else {
		component.removeCanvas();
		css.background = background[0];
	}
};
haxe_ui_backend_html5_StyleHelper.paintBitmap = function(ctx,img,srcRect,dstRect) {
	if(srcRect.width == 0 || srcRect.height == 0) {
		return;
	}
	if(dstRect.width == 0 || dstRect.height == 0) {
		return;
	}
	ctx.drawImage(img,srcRect.left | 0,srcRect.top | 0,srcRect.width | 0,srcRect.height | 0,dstRect.left | 0,dstRect.top | 0,dstRect.width | 0,dstRect.height | 0);
};
var haxe_ui_backend_html5_UserAgent = function() {
	this._unknown = false;
	this._msie = false;
	this._firefox = false;
	this._safari = false;
	this._chrome = false;
	this._opera = false;
	var ua = $global.navigator.userAgent;
	if(ua.indexOf("Opera") != -1 || ua.indexOf("OPR") != -1) {
		this._opera = true;
	} else if(ua.indexOf("Chrome") != -1) {
		this._chrome = true;
	} else if(ua.indexOf("Safari") != -1) {
		this._safari = true;
	} else if(ua.indexOf("Firefox") != -1) {
		this._firefox = true;
	} else if(ua.indexOf("MSIE") != -1) {
		this._msie = true;
	} else {
		this._unknown = true;
	}
};
$hxClasses["haxe.ui.backend.html5.UserAgent"] = haxe_ui_backend_html5_UserAgent;
haxe_ui_backend_html5_UserAgent.__name__ = "haxe.ui.backend.html5.UserAgent";
haxe_ui_backend_html5_UserAgent.__properties__ = {get_instance:"get_instance"};
haxe_ui_backend_html5_UserAgent._instance = null;
haxe_ui_backend_html5_UserAgent.instance = null;
haxe_ui_backend_html5_UserAgent.get_instance = function() {
	if(haxe_ui_backend_html5_UserAgent._instance == null) {
		haxe_ui_backend_html5_UserAgent._instance = new haxe_ui_backend_html5_UserAgent();
	}
	return haxe_ui_backend_html5_UserAgent._instance;
};
haxe_ui_backend_html5_UserAgent.prototype = {
	_opera: null
	,opera: null
	,get_opera: function() {
		return this._opera;
	}
	,_chrome: null
	,chrome: null
	,get_chrome: function() {
		return this._chrome;
	}
	,_safari: null
	,safari: null
	,get_safari: function() {
		return this._safari;
	}
	,_firefox: null
	,firefox: null
	,get_firefox: function() {
		return this._firefox;
	}
	,_msie: null
	,msie: null
	,get_msie: function() {
		return this._msie;
	}
	,_unknown: null
	,unknown: null
	,get_unknown: function() {
		return this._unknown;
	}
	,__class__: haxe_ui_backend_html5_UserAgent
	,__properties__: {get_unknown:"get_unknown",get_msie:"get_msie",get_firefox:"get_firefox",get_safari:"get_safari",get_chrome:"get_chrome",get_opera:"get_opera"}
};
var haxe_ui_backend_html5_graphics_CanvasGraphicsImpl = function(component) {
	this._hasSize = false;
	this._ctx = null;
	this._canvas = null;
	haxe_ui_backend_ComponentGraphicsBase.call(this,component);
	this.createCanvas();
};
$hxClasses["haxe.ui.backend.html5.graphics.CanvasGraphicsImpl"] = haxe_ui_backend_html5_graphics_CanvasGraphicsImpl;
haxe_ui_backend_html5_graphics_CanvasGraphicsImpl.__name__ = "haxe.ui.backend.html5.graphics.CanvasGraphicsImpl";
haxe_ui_backend_html5_graphics_CanvasGraphicsImpl.__super__ = haxe_ui_backend_ComponentGraphicsBase;
haxe_ui_backend_html5_graphics_CanvasGraphicsImpl.prototype = $extend(haxe_ui_backend_ComponentGraphicsBase.prototype,{
	_canvas: null
	,_ctx: null
	,_hasSize: null
	,fillStyle: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(this._hasSize == false) {
			haxe_ui_backend_ComponentGraphicsBase.prototype.fillStyle.call(this,color,alpha);
			return;
		}
		this._ctx.fillStyle = "rgb(" + (color >> 16 & 255) + ", " + (color >> 8 & 255) + ", " + (color & 255) + ")";
	}
	,rectangle: function(x,y,width,height) {
		if(this._hasSize == false) {
			haxe_ui_backend_ComponentGraphicsBase.prototype.rectangle.call(this,x,y,width,height);
			return;
		}
		this._ctx.fillRect(x,y,width,height);
	}
	,setPixel: function(x,y,color) {
		if(this._hasSize == false) {
			haxe_ui_backend_ComponentGraphicsBase.prototype.setPixel.call(this,x,y,color);
			return;
		}
		this._ctx.fillStyle = "rgb(" + (color >> 16 & 255) + ", " + (color >> 8 & 255) + ", " + (color & 255) + ")";
		this._ctx.fillRect(x,y,1,1);
	}
	,createCanvas: function() {
		if(this._component.element == null) {
			return;
		}
		this._canvas = window.document.createElement("canvas");
		this._component.element.appendChild(this._canvas);
		this._ctx = this._canvas.getContext("2d",null);
	}
	,setPixels: function(pixels) {
		if(this._hasSize == false) {
			haxe_ui_backend_ComponentGraphicsBase.prototype.setPixels.call(this,pixels);
			return;
		}
		var imageData = new ImageData(new Uint8ClampedArray(pixels.b.bufferValue),this._ctx.canvas.width,this._ctx.canvas.height);
		this._ctx.putImageData(imageData,0,0);
	}
	,resize: function(width,height) {
		this._canvas.width = width | 0;
		this._canvas.height = height | 0;
		if(width > 0 && height > 0) {
			if(this._hasSize == false) {
				this._hasSize = true;
				this.replayDrawCommands();
			}
		}
	}
	,detach: function() {
		this._canvas.remove();
		this._canvas = null;
		this._ctx = null;
	}
	,__class__: haxe_ui_backend_html5_graphics_CanvasGraphicsImpl
});
var haxe_ui_backend_html5_graphics_SVGGraphicsImpl = function(component) {
	this._currentPosition = new haxe_ui_geom_Point();
	this._svg = null;
	haxe_ui_backend_ComponentGraphicsBase.call(this,component);
	this.createSVG();
};
$hxClasses["haxe.ui.backend.html5.graphics.SVGGraphicsImpl"] = haxe_ui_backend_html5_graphics_SVGGraphicsImpl;
haxe_ui_backend_html5_graphics_SVGGraphicsImpl.__name__ = "haxe.ui.backend.html5.graphics.SVGGraphicsImpl";
haxe_ui_backend_html5_graphics_SVGGraphicsImpl.__super__ = haxe_ui_backend_ComponentGraphicsBase;
haxe_ui_backend_html5_graphics_SVGGraphicsImpl.prototype = $extend(haxe_ui_backend_ComponentGraphicsBase.prototype,{
	_svg: null
	,clear: function() {
		this._svg.clear();
	}
	,_currentPosition: null
	,moveTo: function(x,y) {
		this._currentPosition.x = x;
		this._currentPosition.y = y;
	}
	,lineTo: function(x,y) {
		this._svg.line(this._currentPosition.x,this._currentPosition.y,x,y);
		this._currentPosition.x = x;
		this._currentPosition.y = y;
	}
	,strokeStyle: function(color,thickness,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(thickness == null) {
			thickness = 1;
		}
		if(thickness != null) {
			this._svg.currentStrokeStyle.thickness = thickness;
		}
		if(color != null) {
			if(alpha < 1) {
				this._svg.currentStrokeStyle.color = "rgba(" + (color >> 16 & 255) + ", " + (color >> 8 & 255) + ", " + (color & 255) + ", " + alpha + ")";
			} else {
				this._svg.currentStrokeStyle.color = "rgb(" + (color >> 16 & 255) + ", " + (color >> 8 & 255) + ", " + (color & 255) + ")";
			}
		} else {
			this._svg.currentStrokeStyle.color = "none";
		}
	}
	,fillStyle: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color != null) {
			if(alpha < 1) {
				this._svg.currentFillStyle.color = "rgba(" + (color >> 16 & 255) + ", " + (color >> 8 & 255) + ", " + (color & 255) + ", " + alpha + ")";
			} else {
				this._svg.currentFillStyle.color = "rgb(" + (color >> 16 & 255) + ", " + (color >> 8 & 255) + ", " + (color & 255) + ")";
			}
		} else {
			this._svg.currentFillStyle.color = "none";
		}
	}
	,circle: function(x,y,radius) {
		this._svg.circle(x,y,radius);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this._svg.path(this._currentPosition.x,this._currentPosition.y).quadraticBezier(controlX,controlY,anchorX,anchorY);
		this._currentPosition.x = anchorX;
		this._currentPosition.y = anchorY;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this._svg.path(this._currentPosition.x,this._currentPosition.y).cubicBezier(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this._currentPosition.x = anchorX;
		this._currentPosition.y = anchorY;
	}
	,rectangle: function(x,y,width,height) {
		this._svg.rectangle(x,y,width,height);
	}
	,setPixel: function(x,y,color) {
		this.strokeStyle(null);
		this.fillStyle(color);
		this.rectangle(x,y,1,1);
	}
	,image: function(resource,x,y,width,height) {
		var _gthis = this;
		new haxe_ui_util_ImageLoader(resource).load(function(imageInfo) {
			if(imageInfo != null) {
				if(x == null) {
					x = 0;
				}
				if(y == null) {
					y = 0;
				}
				if(width == null) {
					width = imageInfo.width;
				}
				if(height == null) {
					height = imageInfo.height;
				}
				_gthis._svg.image(imageInfo.data.src,x,y,width,height);
			} else {
				haxe_Log.trace("could not load: " + (resource == null ? "null" : haxe_ui_util_Variant.toString(resource)),{ fileName : "haxe/ui/backend/html5/graphics/SVGGraphicsImpl.hx", lineNumber : 97, className : "haxe.ui.backend.html5.graphics.SVGGraphicsImpl", methodName : "image"});
			}
		});
	}
	,createSVG: function() {
		if(this._component.element == null) {
			return;
		}
		var existingElements = this._component.element.getElementsByTagNameNS("http://www.w3.org/2000/svg","svg");
		var existingElement = null;
		if(existingElements.length > 0) {
			existingElements.item(0);
		}
		this._svg = new haxe_ui_backend_html5_svg_SVGBuilder(existingElement);
		if(existingElement == null) {
			this._component.element.appendChild(this._svg.element);
		}
	}
	,resize: function(width,height) {
		this._svg.size(width,height);
	}
	,detach: function() {
		this._svg.element.remove();
		this._svg = null;
	}
	,__class__: haxe_ui_backend_html5_graphics_SVGGraphicsImpl
});
var haxe_ui_backend_html5_svg_SVGBuilder = function(existingElement,width,height) {
	this.currentFontStyle = { };
	this.currentFillStyle = { };
	this.currentStrokeStyle = { };
	this.element = null;
	if(existingElement == null) {
		this.element = window.document.createElementNS("http://www.w3.org/2000/svg","svg");
	} else {
		this.element = existingElement;
	}
	if(width != null) {
		this.element.setAttribute("width",width == null ? "null" : "" + width);
	}
	if(height != null) {
		this.element.setAttribute("height",height == null ? "null" : "" + height);
	}
};
$hxClasses["haxe.ui.backend.html5.svg.SVGBuilder"] = haxe_ui_backend_html5_svg_SVGBuilder;
haxe_ui_backend_html5_svg_SVGBuilder.__name__ = "haxe.ui.backend.html5.svg.SVGBuilder";
haxe_ui_backend_html5_svg_SVGBuilder.prototype = {
	element: null
	,size: function(width,height) {
		this.element.setAttribute("width",width == null ? "null" : "" + width);
		this.element.setAttribute("height",height == null ? "null" : "" + height);
	}
	,shapeRendering: function(value) {
		this.element.setAttribute("shape-rendering",value);
	}
	,clear: function() {
		this.element.innerHTML = "";
	}
	,currentStrokeStyle: null
	,strokeStyle: function(strokeStyle) {
		if(strokeStyle.color != null) {
			this.currentStrokeStyle.color = strokeStyle.color;
		}
		if(strokeStyle.thickness != null) {
			this.currentStrokeStyle.thickness = strokeStyle.thickness;
		}
		if(strokeStyle.alpha != null) {
			this.currentStrokeStyle.alpha = strokeStyle.alpha;
		}
	}
	,clearStrokeStyle: function() {
		this.currentStrokeStyle = { };
	}
	,currentFillStyle: null
	,fillStyle: function(fillStyle) {
		if(fillStyle.color != null) {
			this.currentFillStyle.color = fillStyle.color;
		}
	}
	,clearFillStyle: function() {
		this.currentFillStyle = { };
	}
	,currentFontStyle: null
	,fontStyle: function(fontStyle) {
		if(fontStyle.size != null) {
			this.currentFontStyle.size = fontStyle.size;
		}
		if(fontStyle.family != null) {
			this.currentFontStyle.family = fontStyle.family;
		}
		if(fontStyle.anchor != null) {
			this.currentFontStyle.anchor = fontStyle.anchor;
		}
	}
	,clearFontStyle: function() {
		this.currentFontStyle = { };
	}
	,line: function(x1,y1,x2,y2) {
		var builder = new haxe_ui_backend_html5_svg_SVGLineBuilder();
		builder.start(x1,y1);
		builder.end(x2,y2);
		builder.stroke(this.currentStrokeStyle);
		this.element.appendChild(builder.element);
		return builder;
	}
	,rectangle: function(x,y,width,height) {
		var builder = new haxe_ui_backend_html5_svg_SVGRectBuilder();
		builder.position(x,y);
		builder.size(width,height);
		builder.stroke(this.currentStrokeStyle);
		builder.fill(this.currentFillStyle);
		this.element.appendChild(builder.element);
		return builder;
	}
	,circle: function(x,y,r) {
		var builder = new haxe_ui_backend_html5_svg_SVGCircleBuilder();
		builder.position(x,y);
		builder.radius(r);
		builder.stroke(this.currentStrokeStyle);
		builder.fill(this.currentFillStyle);
		this.element.appendChild(builder.element);
		return builder;
	}
	,text: function(value,x,y) {
		var builder = new haxe_ui_backend_html5_svg_SVGTextBuilder();
		builder.position(x,y);
		builder.value(value);
		builder.stroke(this.currentStrokeStyle);
		builder.fill(this.currentFillStyle);
		builder.font(this.currentFontStyle);
		this.element.appendChild(builder.element);
		return builder;
	}
	,path: function(x,y,absolute) {
		if(absolute == null) {
			absolute = true;
		}
		var builder = new haxe_ui_backend_html5_svg_SVGPathBuilder();
		if(x != null && y != null) {
			builder.moveTo(x,y,absolute);
		}
		this.element.appendChild(builder.element);
		builder.stroke(this.currentStrokeStyle);
		builder.fill(this.currentFillStyle);
		return builder;
	}
	,image: function(href,x,y,width,height) {
		var builder = new haxe_ui_backend_html5_svg_SVGImageBuilder();
		if(x != null && y != null) {
			builder.position(x,y);
		}
		if(width != null && height != null) {
			builder.size(width,height);
		}
		builder.href(href);
		this.element.appendChild(builder.element);
		return builder;
	}
	,__class__: haxe_ui_backend_html5_svg_SVGBuilder
};
var haxe_ui_backend_html5_svg_SVGCircleBuilder = function() {
	this.element = null;
	this.element = window.document.createElementNS("http://www.w3.org/2000/svg","circle");
};
$hxClasses["haxe.ui.backend.html5.svg.SVGCircleBuilder"] = haxe_ui_backend_html5_svg_SVGCircleBuilder;
haxe_ui_backend_html5_svg_SVGCircleBuilder.__name__ = "haxe.ui.backend.html5.svg.SVGCircleBuilder";
haxe_ui_backend_html5_svg_SVGCircleBuilder.prototype = {
	element: null
	,id: function(value) {
		this.element.id = value;
		return this;
	}
	,position: function(x,y) {
		this.element.cx.baseVal.value = x;
		this.element.cy.baseVal.value = y;
		return this;
	}
	,radius: function(r) {
		this.element.r.baseVal.value = r;
		return this;
	}
	,stroke: function(strokeStyle) {
		if(strokeStyle.color != null) {
			this.element.setAttribute("stroke",strokeStyle.color);
		}
		if(strokeStyle.thickness != null) {
			this.element.setAttribute("stroke-width",strokeStyle.thickness == null ? "null" : "" + strokeStyle.thickness);
		}
		return this;
	}
	,fill: function(fillStyle) {
		if(fillStyle.color != null) {
			this.element.setAttribute("fill",fillStyle.color);
		}
		return this;
	}
	,__class__: haxe_ui_backend_html5_svg_SVGCircleBuilder
};
var haxe_ui_backend_html5_svg_SVGImageBuilder = function() {
	this.element = null;
	this.element = window.document.createElementNS("http://www.w3.org/2000/svg","image");
};
$hxClasses["haxe.ui.backend.html5.svg.SVGImageBuilder"] = haxe_ui_backend_html5_svg_SVGImageBuilder;
haxe_ui_backend_html5_svg_SVGImageBuilder.__name__ = "haxe.ui.backend.html5.svg.SVGImageBuilder";
haxe_ui_backend_html5_svg_SVGImageBuilder.prototype = {
	element: null
	,position: function(x,y) {
		this.element.x.baseVal.value = x;
		this.element.y.baseVal.value = y;
	}
	,size: function(width,height) {
		this.element.width.baseVal.value = width;
		this.element.height.baseVal.value = height;
	}
	,href: function(uri) {
		this.element.href.baseVal = uri;
	}
	,__class__: haxe_ui_backend_html5_svg_SVGImageBuilder
};
var haxe_ui_backend_html5_svg_SVGLineBuilder = function() {
	this.element = null;
	this.element = window.document.createElementNS("http://www.w3.org/2000/svg","line");
};
$hxClasses["haxe.ui.backend.html5.svg.SVGLineBuilder"] = haxe_ui_backend_html5_svg_SVGLineBuilder;
haxe_ui_backend_html5_svg_SVGLineBuilder.__name__ = "haxe.ui.backend.html5.svg.SVGLineBuilder";
haxe_ui_backend_html5_svg_SVGLineBuilder.prototype = {
	element: null
	,id: function(value) {
		this.element.id = value;
		return this;
	}
	,start: function(x,y) {
		this.element.x1.baseVal.value = x;
		this.element.y1.baseVal.value = y;
	}
	,end: function(x,y) {
		this.element.x2.baseVal.value = x;
		this.element.y2.baseVal.value = y;
	}
	,stroke: function(strokeStyle) {
		if(strokeStyle.color != null) {
			this.element.setAttribute("stroke",strokeStyle.color);
		}
		if(strokeStyle.thickness != null) {
			this.element.setAttribute("stroke-width",strokeStyle.thickness == null ? "null" : "" + strokeStyle.thickness);
		}
	}
	,__class__: haxe_ui_backend_html5_svg_SVGLineBuilder
};
var haxe_ui_backend_html5_svg_SVGPathBuilder = function() {
	this._d = new StringBuf();
	this.element = null;
	this.element = window.document.createElementNS("http://www.w3.org/2000/svg","path");
};
$hxClasses["haxe.ui.backend.html5.svg.SVGPathBuilder"] = haxe_ui_backend_html5_svg_SVGPathBuilder;
haxe_ui_backend_html5_svg_SVGPathBuilder.__name__ = "haxe.ui.backend.html5.svg.SVGPathBuilder";
haxe_ui_backend_html5_svg_SVGPathBuilder.prototype = {
	element: null
	,_d: null
	,id: function(value) {
		this.element.id = value;
		return this;
	}
	,moveTo: function(x,y,absolute) {
		if(absolute == null) {
			absolute = true;
		}
		if(absolute == true) {
			this._d.b += "M";
		} else {
			this._d.b += "m";
		}
		this._d.b += x == null ? "null" : "" + x;
		this._d.b += " ";
		this._d.b += y == null ? "null" : "" + y;
		this._d.b += " ";
		this.element.setAttribute("d",this._d.b);
		return this;
	}
	,lineTo: function(x,y,absolute) {
		if(absolute == null) {
			absolute = true;
		}
		if(absolute == true) {
			this._d.b += "L";
		} else {
			this._d.b += "l";
		}
		this._d.b += x == null ? "null" : "" + x;
		this._d.b += " ";
		this._d.b += y == null ? "null" : "" + y;
		this._d.b += " ";
		this.element.setAttribute("d",this._d.b);
		return this;
	}
	,cubicBezier: function(x1,y1,x2,y2,x,y,absolute) {
		if(absolute == null) {
			absolute = true;
		}
		if(absolute == true) {
			this._d.b += "C";
		} else {
			this._d.b += "c";
		}
		this._d.b += x1 == null ? "null" : "" + x1;
		this._d.b += " ";
		this._d.b += y1 == null ? "null" : "" + y1;
		this._d.b += " ";
		this._d.b += x2 == null ? "null" : "" + x2;
		this._d.b += " ";
		this._d.b += y2 == null ? "null" : "" + y2;
		this._d.b += " ";
		this._d.b += x == null ? "null" : "" + x;
		this._d.b += " ";
		this._d.b += y == null ? "null" : "" + y;
		this._d.b += " ";
		this.element.setAttribute("d",this._d.b);
		return this;
	}
	,quadraticBezier: function(x1,y1,x,y,absolute) {
		if(absolute == null) {
			absolute = true;
		}
		if(absolute == true) {
			this._d.b += "Q";
		} else {
			this._d.b += "q";
		}
		this._d.b += x1 == null ? "null" : "" + x1;
		this._d.b += " ";
		this._d.b += y1 == null ? "null" : "" + y1;
		this._d.b += " ";
		this._d.b += x == null ? "null" : "" + x;
		this._d.b += " ";
		this._d.b += y == null ? "null" : "" + y;
		this._d.b += " ";
		this.element.setAttribute("d",this._d.b);
		return this;
	}
	,close: function() {
		this._d.b += "Z ";
		this.element.setAttribute("d",this._d.b);
		return this;
	}
	,stroke: function(strokeStyle) {
		if(strokeStyle.color != null) {
			this.element.setAttribute("stroke",strokeStyle.color);
		}
		if(strokeStyle.thickness != null) {
			this.element.setAttribute("stroke-width",strokeStyle.thickness == null ? "null" : "" + strokeStyle.thickness);
		}
		return this;
	}
	,fill: function(fillStyle) {
		if(fillStyle.color != null) {
			this.element.setAttribute("fill",fillStyle.color);
		}
		return this;
	}
	,__class__: haxe_ui_backend_html5_svg_SVGPathBuilder
};
var haxe_ui_backend_html5_svg_SVGRectBuilder = function() {
	this.element = null;
	this.element = window.document.createElementNS("http://www.w3.org/2000/svg","rect");
};
$hxClasses["haxe.ui.backend.html5.svg.SVGRectBuilder"] = haxe_ui_backend_html5_svg_SVGRectBuilder;
haxe_ui_backend_html5_svg_SVGRectBuilder.__name__ = "haxe.ui.backend.html5.svg.SVGRectBuilder";
haxe_ui_backend_html5_svg_SVGRectBuilder.prototype = {
	element: null
	,id: function(value) {
		this.element.id = value;
		return this;
	}
	,position: function(x,y) {
		this.element.x.baseVal.value = x;
		this.element.y.baseVal.value = y;
	}
	,size: function(width,height) {
		this.element.width.baseVal.value = width;
		this.element.height.baseVal.value = height;
	}
	,stroke: function(strokeStyle) {
		if(strokeStyle.color != null) {
			this.element.setAttribute("stroke",strokeStyle.color);
		}
		if(strokeStyle.thickness != null) {
			this.element.setAttribute("stroke-width",strokeStyle.thickness == null ? "null" : "" + strokeStyle.thickness);
		}
		return this;
	}
	,fill: function(fillStyle) {
		if(fillStyle.color != null) {
			this.element.setAttribute("fill",fillStyle.color);
		}
		return this;
	}
	,__class__: haxe_ui_backend_html5_svg_SVGRectBuilder
};
var haxe_ui_backend_html5_svg_SVGTextBuilder = function() {
	this.element = null;
	this.element = window.document.createElementNS("http://www.w3.org/2000/svg","text");
};
$hxClasses["haxe.ui.backend.html5.svg.SVGTextBuilder"] = haxe_ui_backend_html5_svg_SVGTextBuilder;
haxe_ui_backend_html5_svg_SVGTextBuilder.__name__ = "haxe.ui.backend.html5.svg.SVGTextBuilder";
haxe_ui_backend_html5_svg_SVGTextBuilder.prototype = {
	element: null
	,id: function(value) {
		this.element.id = value;
		return this;
	}
	,value: function(value) {
		this.element.textContent = value;
		return this;
	}
	,position: function(x,y) {
		this.element.setAttribute("x",x == null ? "null" : "" + x);
		this.element.setAttribute("y",y == null ? "null" : "" + y);
		return this;
	}
	,offset: function(x,y) {
		this.element.setAttribute("dx",x == null ? "null" : "" + x);
		this.element.setAttribute("dy",y == null ? "null" : "" + y);
		return this;
	}
	,stroke: function(strokeStyle) {
		if(strokeStyle.color != null) {
			this.element.setAttribute("stroke",strokeStyle.color);
		}
		if(strokeStyle.thickness != null) {
			this.element.setAttribute("stroke-width",strokeStyle.thickness == null ? "null" : "" + strokeStyle.thickness);
		}
		return this;
	}
	,fill: function(fillStyle) {
		if(fillStyle.color != null) {
			this.element.setAttribute("fill",fillStyle.color);
		}
		return this;
	}
	,font: function(fontStyle) {
		if(fontStyle.size != null) {
			this.element.setAttribute("font-size",fontStyle.size == null ? "null" : "" + fontStyle.size);
		}
		if(fontStyle.family != null) {
			this.element.setAttribute("font-family",fontStyle.family);
		}
		if(fontStyle.anchor != null) {
			this.element.setAttribute("text-anchor",fontStyle.anchor);
		}
	}
	,__class__: haxe_ui_backend_html5_svg_SVGTextBuilder
};
var haxe_ui_backend_html5_util_FontDetect = function() {
};
$hxClasses["haxe.ui.backend.html5.util.FontDetect"] = haxe_ui_backend_html5_util_FontDetect;
haxe_ui_backend_html5_util_FontDetect.__name__ = "haxe.ui.backend.html5.util.FontDetect";
haxe_ui_backend_html5_util_FontDetect.init = function() {
	if(haxe_ui_backend_html5_util_FontDetect._initialized == true) {
		return;
	}
	haxe_ui_backend_html5_util_FontDetect._initialized = true;
	var body = window.document.body;
	var firstChild = window.document.body.firstChild;
	var div = window.document.createElement("div");
	div.id = "fontdetectHelper";
	haxe_ui_backend_html5_util_FontDetect.span = window.document.createElement("span");
	haxe_ui_backend_html5_util_FontDetect.span.innerText = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	div.appendChild(haxe_ui_backend_html5_util_FontDetect.span);
	body.insertBefore(div,firstChild);
	div.style.position = "absolute";
	div.style.visibility = "hidden";
	div.style.top = "-200px";
	div.style.left = "-100000px";
	div.style.width = "100000px";
	div.style.height = "200px";
	div.style.fontSize = "100px";
};
haxe_ui_backend_html5_util_FontDetect.onFontLoaded = function(cssFontName,onLoad,onFail,options) {
	if(cssFontName == null) {
		return;
	}
	var msInterval = 10;
	if(options != null && options.msInterval != null) {
		msInterval = options.msInterval;
	}
	var msTimeout = 2000;
	if(options != null && options.msTimeout != null) {
		msTimeout = options.msTimeout;
	}
	if(onLoad == null && onFail == null) {
		return;
	}
	if(haxe_ui_backend_html5_util_FontDetect._initialized == false) {
		haxe_ui_backend_html5_util_FontDetect.init();
	}
	if(haxe_ui_backend_html5_util_FontDetect.isFontLoaded(cssFontName)) {
		if(onLoad != null) {
			onLoad(cssFontName);
		}
		return;
	}
	var utStart = new Date().getTime();
	var idInterval = 0;
	idInterval = window.setInterval(function() {
		if(haxe_ui_backend_html5_util_FontDetect.isFontLoaded(cssFontName)) {
			window.clearInterval(idInterval);
			if(onLoad != null) {
				onLoad(cssFontName);
			}
			return;
		} else {
			var utNow = new Date().getTime();
			if(utNow - utStart > msTimeout) {
				window.clearInterval(idInterval);
				if(onFail != null) {
					onFail(cssFontName);
				}
			}
		}
	},msInterval);
};
haxe_ui_backend_html5_util_FontDetect.isFontLoaded = function(cssFontName) {
	var wThisFont = 0;
	var wPrevFont = 0;
	if(haxe_ui_backend_html5_util_FontDetect._initialized == false) {
		haxe_ui_backend_html5_util_FontDetect.init();
	}
	var _g = 0;
	var _g1 = haxe_ui_backend_html5_util_FontDetect._aFallbackFonts.length;
	while(_g < _g1) {
		var ix = _g++;
		haxe_ui_backend_html5_util_FontDetect.span.style.fontFamily = cssFontName + "," + haxe_ui_backend_html5_util_FontDetect._aFallbackFonts[ix];
		wThisFont = haxe_ui_backend_html5_util_FontDetect.span.offsetWidth;
		if(ix > 0 && wThisFont != wPrevFont) {
			return false;
		}
		wPrevFont = wThisFont;
	}
	return true;
};
haxe_ui_backend_html5_util_FontDetect.prototype = {
	__class__: haxe_ui_backend_html5_util_FontDetect
};
var haxe_ui_backend_html5_util_StyleSheetHelper = function() {
};
$hxClasses["haxe.ui.backend.html5.util.StyleSheetHelper"] = haxe_ui_backend_html5_util_StyleSheetHelper;
haxe_ui_backend_html5_util_StyleSheetHelper.__name__ = "haxe.ui.backend.html5.util.StyleSheetHelper";
haxe_ui_backend_html5_util_StyleSheetHelper.getValidStyleSheet = function() {
	if(haxe_ui_backend_html5_util_StyleSheetHelper._sheet != null) {
		return haxe_ui_backend_html5_util_StyleSheetHelper._sheet;
	}
	var sheet = null;
	var _g = 0;
	var _g1 = window.document.styleSheets;
	while(_g < _g1.length) {
		var test = _g1[_g];
		++_g;
		if(test.ownerNode == null || test.disabled == true) {
			continue;
		}
		var css = js_Boot.__cast(test , CSSStyleSheet);
		if(css.ownerNode.nodeName == "STYLE" && css.href == null) {
			try {
				var r = css.cssRules;
				sheet = css;
				break;
			} catch( _g2 ) {
				haxe_NativeStackTrace.lastError = _g2;
			}
		}
	}
	if(sheet == null) {
		var styleElement = window.document.createElement("style");
		styleElement.appendChild(window.document.createTextNode(""));
		window.document.head.appendChild(styleElement);
		sheet = js_Boot.__cast(styleElement.sheet , CSSStyleSheet);
	}
	haxe_ui_backend_html5_util_StyleSheetHelper._sheet = sheet;
	return sheet;
};
haxe_ui_backend_html5_util_StyleSheetHelper.prototype = {
	__class__: haxe_ui_backend_html5_util_StyleSheetHelper
};
var haxe_ui_behaviours_Behaviours = function(component) {
	this._actualUpdateOrder = null;
	this._updateOrder = [];
	this._instances = new haxe_ds_StringMap();
	this._registry = new haxe_ds_StringMap();
	this._component = component;
};
$hxClasses["haxe.ui.behaviours.Behaviours"] = haxe_ui_behaviours_Behaviours;
haxe_ui_behaviours_Behaviours.__name__ = "haxe.ui.behaviours.Behaviours";
haxe_ui_behaviours_Behaviours.prototype = {
	_component: null
	,_registry: null
	,_instances: null
	,register: function(id,cls,defaultValue) {
		var info = { id : id, cls : cls, defaultValue : defaultValue, isSet : false};
		this._registry.h[id] = info;
		HxOverrides.remove(this._updateOrder,id);
		this._updateOrder.push(id);
		this._actualUpdateOrder = null;
	}
	,isRegistered: function(id) {
		return Object.prototype.hasOwnProperty.call(this._registry.h,id);
	}
	,replaceNative: function() {
		if(this._component.get_native() == false || this._component.get_hasNativeEntry() == false) {
			return;
		}
		var ids = [];
		var h = this._registry.h;
		var id_h = h;
		var id_keys = Object.keys(h);
		var id_length = id_keys.length;
		var id_current = 0;
		while(id_current < id_length) {
			var id = id_keys[id_current++];
			ids.push(id);
		}
		var _g = 0;
		while(_g < ids.length) {
			var id = ids[_g];
			++_g;
			var nativeProps = this._component.getNativeConfigProperties(".behaviour[id=" + id + "]");
			if(nativeProps != null && Object.prototype.hasOwnProperty.call(nativeProps.h,"class")) {
				var registered = this._registry.h[id];
				var name = nativeProps.h["class"];
				var info = { id : id, cls : $hxClasses[name], defaultValue : registered.defaultValue, config : nativeProps, isSet : false};
				this._registry.h[id] = info;
			}
		}
	}
	,validateData: function() {
		var _g = 0;
		var _g1 = this.get_actualUpdateOrder();
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var b = this._instances.h[key];
			if(js_Boot.__implements(b,haxe_ui_behaviours_IValidatingBehaviour)) {
				(js_Boot.__cast(b , haxe_ui_behaviours_IValidatingBehaviour)).validate();
			}
		}
	}
	,_updateOrder: null
	,get_updateOrder: function() {
		return this._updateOrder;
	}
	,set_updateOrder: function(value) {
		this._updateOrder = value;
		this._actualUpdateOrder = null;
		return value;
	}
	,_actualUpdateOrder: null
	,actualUpdateOrder: null
	,get_actualUpdateOrder: function() {
		if(this._actualUpdateOrder == null) {
			this._actualUpdateOrder = this._updateOrder.slice();
			var h = this._instances.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(this._actualUpdateOrder.indexOf(key) == -1) {
					this._actualUpdateOrder.push(key);
				}
			}
		}
		return this._actualUpdateOrder;
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.get_actualUpdateOrder();
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var b = this._instances.h[key];
			if(b != null) {
				b.update();
			}
		}
	}
	,find: function(id,create) {
		if(create == null) {
			create = true;
		}
		var b = this._instances.h[id];
		if(b == null && create == true) {
			var info = this._registry.h[id];
			if(info != null) {
				b = Type.createInstance(info.cls,[this._component]);
				if(b != null) {
					b.config = info.config;
					b.id = id;
					this._instances.h[id] = b;
					this._actualUpdateOrder = null;
				} else {
					var c = js_Boot.getClass(this._component);
					haxe_Log.trace("WARNING: problem creating behaviour class '" + Std.string(info.cls) + "' for '" + c.__name__ + ":" + id + "'",{ fileName : "haxe/ui/behaviours/Behaviours.hx", lineNumber : 140, className : "haxe.ui.behaviours.Behaviours", methodName : "find"});
				}
			}
		}
		if(b == null) {
			throw haxe_Exception.thrown("behaviour " + id + " not found");
		}
		return b;
	}
	,_cache: null
	,cache: function() {
		this._cache = new haxe_ds_StringMap();
		var h = this._registry.h;
		var registeredKey_h = h;
		var registeredKey_keys = Object.keys(h);
		var registeredKey_length = registeredKey_keys.length;
		var registeredKey_current = 0;
		while(registeredKey_current < registeredKey_length) {
			var registeredKey = registeredKey_keys[registeredKey_current++];
			var v = this._registry.h[registeredKey].defaultValue;
			var instance = this._instances.h[registeredKey];
			if(instance != null) {
				v = instance.get();
			}
			if(v != null) {
				this._cache.h[registeredKey] = v;
			}
		}
	}
	,dispose: function() {
		this._component = null;
		this._registry = null;
		var h = this._instances.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			var inst = this._instances.h[key];
			inst._component = null;
		}
		this._instances = null;
		this._cache = null;
		this._actualUpdateOrder = null;
		this._updateOrder = null;
	}
	,detatch: function() {
		var h = this._instances.h;
		var b_h = h;
		var b_keys = Object.keys(h);
		var b_length = b_keys.length;
		var b_current = 0;
		while(b_current < b_length) {
			var b = b_h[b_keys[b_current++]];
			b.detatch();
		}
		this._instances = new haxe_ds_StringMap();
	}
	,restore: function() {
		if(this._cache == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.get_actualUpdateOrder();
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var v = this._cache.h[key];
			if(v != null) {
				this.set(key,v);
			}
		}
		this._cache = null;
	}
	,lock: function() {
	}
	,unlock: function() {
	}
	,setDynamic: function(id,value) {
		this.lock();
		var b = this.find(id);
		var changed = null;
		if(((b) instanceof haxe_ui_behaviours_ValueBehaviour)) {
			var v = haxe_ui_util_Variant.toDynamic((js_Boot.__cast(b , haxe_ui_behaviours_ValueBehaviour))._value);
			changed = v != value;
		}
		b.setDynamic(value);
		var info = this._registry.h[id];
		info.isSet = true;
		this.unlock();
		this.performAutoDispatch(b,changed);
	}
	,set: function(id,value) {
		this.lock();
		var b = this.find(id);
		var changed = null;
		if(((b) instanceof haxe_ui_behaviours_ValueBehaviour)) {
			var v = (js_Boot.__cast(b , haxe_ui_behaviours_ValueBehaviour))._value;
			changed = haxe_ui_util_Variant.neq(v,value);
		}
		b.set(value);
		var info = this._registry.h[id];
		info.isSet = true;
		this.unlock();
		this.performAutoDispatch(b,changed);
	}
	,softSet: function(id,value) {
		var b = this.find(id);
		if(((b) instanceof haxe_ui_behaviours_ValueBehaviour)) {
			(js_Boot.__cast(b , haxe_ui_behaviours_ValueBehaviour))._value = value;
		}
	}
	,ready: function() {
		if(this._autoDispatch == null) {
			return;
		}
		var b = this._autoDispatch.keys();
		while(b.hasNext()) {
			var b1 = b.next();
			var changed = this._autoDispatch.h[b1.__id__];
			this.performAutoDispatch(b1,changed);
		}
		this._autoDispatch = null;
	}
	,_autoDispatch: null
	,performAutoDispatch: function(b,changed) {
		if(this._component.get_isReady() == false) {
			if(this._autoDispatch == null) {
				this._autoDispatch = new haxe_ds_ObjectMap();
			}
			this._autoDispatch.set(b,changed);
			return;
		}
		var autoDispatch = b.getConfigValue("autoDispatch",null);
		if(autoDispatch != null) {
			var arr = autoDispatch.split(".");
			var eventName = arr.pop().toLowerCase();
			var cls = arr.join(".");
			var event = Type.createInstance($hxClasses[cls],[eventName]);
			if(eventName != "change") {
				b._component.dispatch(event);
			} else if(changed == true || changed == null) {
				b._component.dispatch(event);
			}
		}
	}
	,get: function(id) {
		this.lock();
		var b = this.find(id);
		var v = null;
		if(b != null) {
			var info = this._registry.h[id];
			if(info.isSet == false && info.defaultValue != null && js_Boot.getClass(b) == haxe_ui_behaviours_DefaultBehaviour) {
				v = info.defaultValue;
			} else {
				v = b.get();
			}
		}
		this.unlock();
		return v;
	}
	,getDynamic: function(id) {
		this.lock();
		var b = this.find(id);
		var v = null;
		if(b != null) {
			v = b.getDynamic();
		}
		this.unlock();
		return v;
	}
	,call: function(id,param) {
		return this.find(id).call(param);
	}
	,applyDefaults: function() {
		var order = this._updateOrder.slice();
		var h = this._registry.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			if(order.indexOf(key) == -1) {
				order.push(key);
			}
		}
		var _g = 0;
		while(_g < order.length) {
			var key = order[_g];
			++_g;
			var r = this._registry.h[key];
			if(r.defaultValue != null) {
				this.set(key,r.defaultValue);
			}
		}
	}
	,__class__: haxe_ui_behaviours_Behaviours
	,__properties__: {get_actualUpdateOrder:"get_actualUpdateOrder",set_updateOrder:"set_updateOrder",get_updateOrder:"get_updateOrder"}
};
var haxe_ui_behaviours_DefaultBehaviour = function(component) {
	this._value = null;
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.behaviours.DefaultBehaviour"] = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_behaviours_DefaultBehaviour.__name__ = "haxe.ui.behaviours.DefaultBehaviour";
haxe_ui_behaviours_DefaultBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_behaviours_DefaultBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	_value: null
	,get: function() {
		return this._value;
	}
	,set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this._value)) {
			return;
		}
		this._value = value;
		haxe_ui_behaviours_Behaviour.prototype.set.call(this,value);
	}
	,__class__: haxe_ui_behaviours_DefaultBehaviour
});
var haxe_ui_behaviours_DynamicBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.behaviours.DynamicBehaviour"] = haxe_ui_behaviours_DynamicBehaviour;
haxe_ui_behaviours_DynamicBehaviour.__name__ = "haxe.ui.behaviours.DynamicBehaviour";
haxe_ui_behaviours_DynamicBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_behaviours_DynamicBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	_value: null
	,getDynamic: function() {
		return this._value;
	}
	,setDynamic: function(value) {
		if(value == this._value) {
			return;
		}
		this._value = value;
	}
	,set: function(value) {
		this.setDynamic(haxe_ui_util_Variant.toDynamic(value));
	}
	,__class__: haxe_ui_behaviours_DynamicBehaviour
});
var haxe_ui_behaviours_DynamicDataBehaviour = function(component) {
	haxe_ui_behaviours_DynamicBehaviour.call(this,component);
};
$hxClasses["haxe.ui.behaviours.DynamicDataBehaviour"] = haxe_ui_behaviours_DynamicDataBehaviour;
haxe_ui_behaviours_DynamicDataBehaviour.__name__ = "haxe.ui.behaviours.DynamicDataBehaviour";
haxe_ui_behaviours_DynamicDataBehaviour.__interfaces__ = [haxe_ui_behaviours_IValidatingBehaviour];
haxe_ui_behaviours_DynamicDataBehaviour.__super__ = haxe_ui_behaviours_DynamicBehaviour;
haxe_ui_behaviours_DynamicDataBehaviour.prototype = $extend(haxe_ui_behaviours_DynamicBehaviour.prototype,{
	_dataInvalid: null
	,setDynamic: function(value) {
		if(value == this.getDynamic()) {
			return;
		}
		this._value = value;
		this.invalidateData();
	}
	,validate: function() {
		if(this._dataInvalid) {
			this._dataInvalid = false;
			this.validateData();
		}
	}
	,invalidateData: function() {
		this._dataInvalid = true;
		this._component.invalidateComponent("data",false);
	}
	,validateData: function() {
	}
	,__class__: haxe_ui_behaviours_DynamicDataBehaviour
});
var haxe_ui_behaviours_InvalidatingBehaviour = function(component) {
	haxe_ui_behaviours_ValueBehaviour.call(this,component);
};
$hxClasses["haxe.ui.behaviours.InvalidatingBehaviour"] = haxe_ui_behaviours_InvalidatingBehaviour;
haxe_ui_behaviours_InvalidatingBehaviour.__name__ = "haxe.ui.behaviours.InvalidatingBehaviour";
haxe_ui_behaviours_InvalidatingBehaviour.__super__ = haxe_ui_behaviours_ValueBehaviour;
haxe_ui_behaviours_InvalidatingBehaviour.prototype = $extend(haxe_ui_behaviours_ValueBehaviour.prototype,{
	get: function() {
		return this._value;
	}
	,set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this._value)) {
			return;
		}
		haxe_ui_behaviours_ValueBehaviour.prototype.set.call(this,value);
		this._component.invalidateComponent();
	}
	,__class__: haxe_ui_behaviours_InvalidatingBehaviour
});
var haxe_ui_behaviours_LayoutBehaviour = function(component) {
	haxe_ui_behaviours_ValueBehaviour.call(this,component);
};
$hxClasses["haxe.ui.behaviours.LayoutBehaviour"] = haxe_ui_behaviours_LayoutBehaviour;
haxe_ui_behaviours_LayoutBehaviour.__name__ = "haxe.ui.behaviours.LayoutBehaviour";
haxe_ui_behaviours_LayoutBehaviour.__super__ = haxe_ui_behaviours_ValueBehaviour;
haxe_ui_behaviours_LayoutBehaviour.prototype = $extend(haxe_ui_behaviours_ValueBehaviour.prototype,{
	set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this.get())) {
			return;
		}
		haxe_ui_behaviours_ValueBehaviour.prototype.set.call(this,value);
		var _this = this._component;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout",false);
		}
	}
	,__class__: haxe_ui_behaviours_LayoutBehaviour
});
var haxe_ui_core_IValueComponent = function() { };
$hxClasses["haxe.ui.core.IValueComponent"] = haxe_ui_core_IValueComponent;
haxe_ui_core_IValueComponent.__name__ = "haxe.ui.core.IValueComponent";
haxe_ui_core_IValueComponent.__isInterface__ = true;
haxe_ui_core_IValueComponent.prototype = {
	get_value: null
	,set_value: null
	,__class__: haxe_ui_core_IValueComponent
	,__properties__: {set_value:"set_value",get_value:"get_value"}
};
var haxe_ui_focus_IFocusable = function() { };
$hxClasses["haxe.ui.focus.IFocusable"] = haxe_ui_focus_IFocusable;
haxe_ui_focus_IFocusable.__name__ = "haxe.ui.focus.IFocusable";
haxe_ui_focus_IFocusable.__isInterface__ = true;
haxe_ui_focus_IFocusable.prototype = {
	get_focus: null
	,set_focus: null
	,get_allowFocus: null
	,set_allowFocus: null
	,get_disabled: null
	,set_disabled: null
	,__class__: haxe_ui_focus_IFocusable
	,__properties__: {set_disabled:"set_disabled",get_disabled:"get_disabled",set_allowFocus:"set_allowFocus",get_allowFocus:"get_allowFocus",set_focus:"set_focus",get_focus:"get_focus"}
};
var haxe_ui_core_InteractiveComponent = function() {
	this._allowFocus = true;
	this._focus = false;
	this.actionRepeatInterval = 100;
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.core.InteractiveComponent"] = haxe_ui_core_InteractiveComponent;
haxe_ui_core_InteractiveComponent.__name__ = "haxe.ui.core.InteractiveComponent";
haxe_ui_core_InteractiveComponent.__interfaces__ = [haxe_ui_core_IValueComponent,haxe_ui_focus_IFocusable];
haxe_ui_core_InteractiveComponent.__super__ = haxe_ui_core_Component;
haxe_ui_core_InteractiveComponent.prototype = $extend(haxe_ui_core_Component.prototype,{
	actionRepeatInterval: null
	,_focus: null
	,get_focus: function() {
		return this._focus;
	}
	,set_focus: function(value) {
		if(this._focus == value || this.get_allowFocus() == false) {
			return value;
		}
		this._focus = value;
		var eventType = null;
		if(this._focus == true) {
			eventType = "focusin";
			haxe_ui_focus_FocusManager.get_instance().set_focus(js_Boot.__cast(this , haxe_ui_focus_IFocusable));
			var scrollview = this.findScroller();
			if(scrollview != null) {
				scrollview.ensureVisible(this);
			}
		} else {
			eventType = "focusout";
			haxe_ui_focus_FocusManager.get_instance().set_focus(null);
		}
		this.invalidateComponent("data",false);
		this.dispatch(new haxe_ui_events_FocusEvent(eventType));
		return value;
	}
	,_allowFocus: null
	,get_allowFocus: function() {
		return this._allowFocus;
	}
	,set_allowFocus: function(value) {
		if(this._allowFocus == value) {
			return value;
		}
		this._allowFocus = value;
		var _g = 0;
		var _g1 = this._children == null ? [] : this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(js_Boot.__implements(child,haxe_ui_focus_IFocusable)) {
				(js_Boot.__cast(child , haxe_ui_focus_IFocusable)).set_allowFocus(value);
			}
		}
		return value;
	}
	,findScroller: function() {
		var view = null;
		var ref = this;
		while(ref != null) {
			if(js_Boot.__implements(ref,haxe_ui_core_IScrollView)) {
				view = js_Boot.__cast(ref , haxe_ui_core_IScrollView);
				break;
			}
			ref = ref.parentComponent;
		}
		return view;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
		this.behaviours.register("allowInteraction",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromBool(true));
	}
	,get_allowInteraction: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("allowInteraction"));
	}
	,set_allowInteraction: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("allowInteraction",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"allowInteraction"));
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		c.set_allowInteraction(this.get_allowInteraction());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_core_InteractiveComponent();
	}
	,__class__: haxe_ui_core_InteractiveComponent
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{set_allowInteraction:"set_allowInteraction",get_allowInteraction:"get_allowInteraction",set_allowFocus:"set_allowFocus",get_allowFocus:"get_allowFocus",set_focus:"set_focus",get_focus:"get_focus"})
});
var haxe_ui_components_Button = function() {
	haxe_ui_core_InteractiveComponent.call(this);
};
$hxClasses["haxe.ui.components.Button"] = haxe_ui_components_Button;
haxe_ui_components_Button.__name__ = "haxe.ui.components.Button";
haxe_ui_components_Button.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_components_Button.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
		this.behaviours.register("repeater",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("repeatInterval",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromInt(100));
		this.behaviours.register("easeInRepeater",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("remainPressed",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("toggle",haxe_ui_components__$Button_ToggleBehaviour);
		this.behaviours.register("selected",haxe_ui_components__$Button_SelectedBehaviour);
		this.behaviours.register("text",haxe_ui_components__$Button_TextBehaviour);
		this.behaviours.register("icon",haxe_ui_components__$Button_IconBehaviour);
		this.behaviours.register("componentGroup",haxe_ui_components__$Button_GroupBehaviour);
	}
	,get_repeater: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("repeater"));
	}
	,set_repeater: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("repeater",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"repeater"));
		return value;
	}
	,get_repeatInterval: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toInt(this.behaviours.get("repeatInterval"));
	}
	,set_repeatInterval: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("repeatInterval",haxe_ui_util_Variant.fromInt(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"repeatInterval"));
		return value;
	}
	,get_easeInRepeater: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("easeInRepeater"));
	}
	,set_easeInRepeater: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("easeInRepeater",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"easeInRepeater"));
		return value;
	}
	,get_remainPressed: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("remainPressed"));
	}
	,set_remainPressed: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("remainPressed",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"remainPressed"));
		return value;
	}
	,get_toggle: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("toggle"));
	}
	,set_toggle: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("toggle",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"toggle"));
		return value;
	}
	,get_selected: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("selected"));
	}
	,set_selected: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("selected",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"selected"));
		return value;
	}
	,get_icon: function() {
		if(this.behaviours == null) {
			return null;
		}
		return this.behaviours.get("icon");
	}
	,set_icon: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("icon",value);
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"icon"));
		return value;
	}
	,get_componentGroup: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("componentGroup"));
	}
	,set_componentGroup: function(value) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			if(_g.c == String) {
				if(value != null && value.indexOf("{{") != -1 && value.indexOf("}}") != -1) {
					haxe_ui_locale_LocaleManager.get_instance().registerComponent(this,"componentGroup",null,value);
					return value;
				}
			}
		}
		this.behaviours.set("componentGroup",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"componentGroup"));
		return value;
	}
	,get_value: function() {
		return this.get_text();
	}
	,set_value: function(value) {
		this.set_text(value);
		return value;
	}
	,get_iconPosition: function() {
		if(this.get_customStyle().iconPosition != null) {
			return this.get_customStyle().iconPosition;
		}
		if(this.get_style() == null || this.get_style().iconPosition == null) {
			return null;
		}
		return this.get_style().iconPosition;
	}
	,set_iconPosition: function(value) {
		if(this.get_customStyle().iconPosition == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().iconPosition = null;
		} else {
			this.get_customStyle().iconPosition = value;
		}
		this.invalidateComponent("style",false);
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout",false);
		}
		return value;
	}
	,get_fontSize: function() {
		if(this.get_customStyle().fontSize != null) {
			return this.get_customStyle().fontSize;
		}
		if(this.get_style() == null || this.get_style().fontSize == null) {
			return null;
		}
		return this.get_style().fontSize;
	}
	,set_fontSize: function(value) {
		if(this.get_customStyle().fontSize == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().fontSize = null;
		} else {
			this.get_customStyle().fontSize = value;
		}
		this.invalidateComponent("style",false);
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout",false);
		}
		return value;
	}
	,get_textAlign: function() {
		if(this.get_customStyle().textAlign != null) {
			return this.get_customStyle().textAlign;
		}
		if(this.get_style() == null || this.get_style().textAlign == null) {
			return null;
		}
		return this.get_style().textAlign;
	}
	,set_textAlign: function(value) {
		if(this.get_customStyle().textAlign == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().textAlign = null;
		} else {
			this.get_customStyle().textAlign = value;
		}
		this.invalidateComponent("style",false);
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout",false);
		}
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		c.set_repeater(this.get_repeater());
		c.set_repeatInterval(this.get_repeatInterval());
		c.set_easeInRepeater(this.get_easeInRepeater());
		c.set_remainPressed(this.get_remainPressed());
		c.set_toggle(this.get_toggle());
		c.set_selected(this.get_selected());
		if(this.get_icon() != null) {
			c.set_icon(this.get_icon());
		}
		if(this.get_componentGroup() != null) {
			c.set_componentGroup(this.get_componentGroup());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Button();
	}
	,registerComposite: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_components_ButtonEvents;
		this._compositeBuilderClass = haxe_ui_components_ButtonBuilder;
		this._defaultLayoutClass = haxe_ui_components_ButtonLayout;
	}
	,__class__: haxe_ui_components_Button
	,__properties__: $extend(haxe_ui_core_InteractiveComponent.prototype.__properties__,{set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_iconPosition:"set_iconPosition",get_iconPosition:"get_iconPosition",set_componentGroup:"set_componentGroup",get_componentGroup:"get_componentGroup",set_icon:"set_icon",get_icon:"get_icon",set_selected:"set_selected",get_selected:"get_selected",set_toggle:"set_toggle",get_toggle:"get_toggle",set_remainPressed:"set_remainPressed",get_remainPressed:"get_remainPressed",set_easeInRepeater:"set_easeInRepeater",get_easeInRepeater:"get_easeInRepeater",set_repeatInterval:"set_repeatInterval",get_repeatInterval:"get_repeatInterval",set_repeater:"set_repeater",get_repeater:"get_repeater"})
});
var haxe_ui_layouts_ILayout = function() { };
$hxClasses["haxe.ui.layouts.ILayout"] = haxe_ui_layouts_ILayout;
haxe_ui_layouts_ILayout.__name__ = "haxe.ui.layouts.ILayout";
haxe_ui_layouts_ILayout.__isInterface__ = true;
var haxe_ui_layouts_Layout = function() {
};
$hxClasses["haxe.ui.layouts.Layout"] = haxe_ui_layouts_Layout;
haxe_ui_layouts_Layout.__name__ = "haxe.ui.layouts.Layout";
haxe_ui_layouts_Layout.__interfaces__ = [haxe_ui_layouts_ILayout];
haxe_ui_layouts_Layout.prototype = {
	_component: null
	,get_component: function() {
		return this._component;
	}
	,set_component: function(value) {
		this._component = value;
		if(this._component != null) {
			var _this = this._component;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout",false);
			}
		}
		return value;
	}
	,findComponent: function(criteria,type,recursive,searchType) {
		if(searchType == null) {
			searchType = "id";
		}
		if(this._component == null) {
			return null;
		}
		return this._component.findComponent(criteria,type,recursive,searchType);
	}
	,findComponents: function(styleName,type,maxDepth) {
		if(maxDepth == null) {
			maxDepth = 5;
		}
		if(this._component == null) {
			return null;
		}
		return this._component.findComponents(styleName,type,maxDepth);
	}
	,refresh: function() {
		if(this._component != null && this._component.get_isReady() == true) {
			this.resizeChildren();
			this._component.handlePreReposition();
			this.repositionChildren();
			this._component.handlePostReposition();
		}
	}
	,autoSize: function() {
		if(this.get_component().get_isReady() == false) {
			return false;
		}
		var calculatedWidth = null;
		var calculatedHeight = null;
		if(this.get_component().get_autoWidth() == true || this.get_component().get_autoHeight() == true) {
			var size = this.calcAutoSize();
			if(this.get_component().get_autoWidth() == true) {
				calculatedWidth = size.width;
			}
			if(this.get_component().get_autoHeight() == true) {
				calculatedHeight = size.height;
			}
			this.get_component().resizeComponent(calculatedWidth,calculatedHeight);
		}
		if(calculatedWidth == null) {
			return calculatedHeight != null;
		} else {
			return true;
		}
	}
	,marginTop: function(child) {
		if(child == null || child.get_style() == null || child.get_style().marginTop == null) {
			return 0;
		}
		return child.get_style().marginTop;
	}
	,marginLeft: function(child) {
		if(child == null || child.get_style() == null || child.get_style().marginLeft == null) {
			return 0;
		}
		return child.get_style().marginLeft;
	}
	,marginBottom: function(child) {
		if(child == null || child.get_style() == null || child.get_style().marginBottom == null) {
			return 0;
		}
		return child.get_style().marginBottom;
	}
	,marginRight: function(child) {
		if(child == null || child.get_style() == null || child.get_style().marginRight == null) {
			return 0;
		}
		return child.get_style().marginRight;
	}
	,childPaddingTop: function(child) {
		if(child == null || child.get_style() == null || child.get_style().paddingTop == null) {
			return 0;
		}
		return child.get_style().paddingTop;
	}
	,childPaddingLeft: function(child) {
		if(child == null || child.get_style() == null || child.get_style().paddingLeft == null) {
			return 0;
		}
		return child.get_style().paddingLeft;
	}
	,childPaddingBottom: function(child) {
		if(child == null || child.get_style() == null || child.get_style().paddingBottom == null) {
			return 0;
		}
		return child.get_style().paddingBottom;
	}
	,childPaddingRight: function(child) {
		if(child == null || child.get_style() == null || child.get_style().paddingRight == null) {
			return 0;
		}
		return child.get_style().paddingRight;
	}
	,hidden: function(c) {
		if(c == null) {
			c = this.get_component();
		}
		return c.get_hidden();
	}
	,horizontalAlign: function(child) {
		if(child == null || child.get_style() == null || child.get_style().horizontalAlign == null) {
			return "left";
		}
		return child.get_style().horizontalAlign;
	}
	,verticalAlign: function(child) {
		if(child == null || child.get_style() == null || child.get_style().verticalAlign == null) {
			return "top";
		}
		return child.get_style().verticalAlign;
	}
	,fixedMinWidth: function(child) {
		var fixedMinWidth = false;
		if(child != null && child.get_style() != null && child.get_style().minWidth != null) {
			fixedMinWidth = child.get_componentWidth() <= child.get_style().minWidth;
		}
		return fixedMinWidth;
	}
	,fixedMinHeight: function(child) {
		var fixedMinHeight = false;
		if(child != null && child.get_style() != null && child.get_style().minHeight != null) {
			fixedMinHeight = child.get_componentHeight() <= child.get_style().minHeight;
		}
		return fixedMinHeight;
	}
	,borderSize: null
	,get_borderSize: function() {
		if(this._component.get_style() == null) {
			return 0;
		}
		var n = this._component.get_style().get_fullBorderSize();
		var tmp = n > 0;
		return n;
	}
	,paddingLeft: null
	,get_paddingLeft: function() {
		if(this._component == null || this._component.get_style() == null || this._component.get_style().paddingLeft == null) {
			return 0;
		}
		return this._component.get_style().paddingLeft;
	}
	,paddingTop: null
	,get_paddingTop: function() {
		if(this._component == null || this._component.get_style() == null || this._component.get_style().paddingTop == null) {
			return 0;
		}
		return this._component.get_style().paddingTop;
	}
	,paddingBottom: null
	,get_paddingBottom: function() {
		if(this._component == null || this._component.get_style() == null || this._component.get_style().paddingBottom == null) {
			return 0;
		}
		return this._component.get_style().paddingBottom;
	}
	,paddingRight: null
	,get_paddingRight: function() {
		if(this._component == null || this._component.get_style() == null || this._component.get_style().paddingRight == null) {
			return 0;
		}
		return this._component.get_style().paddingRight;
	}
	,horizontalSpacing: null
	,get_horizontalSpacing: function() {
		if(this._component == null || this._component.get_style() == null || this._component.get_style().horizontalSpacing == null) {
			return 0;
		}
		return this._component.get_style().horizontalSpacing;
	}
	,verticalSpacing: null
	,get_verticalSpacing: function() {
		if(this._component == null || this._component.get_style() == null || this._component.get_style().verticalSpacing == null) {
			return 0;
		}
		return this._component.get_style().verticalSpacing;
	}
	,innerWidth: null
	,innerHeight: null
	,get_innerWidth: function() {
		if(this.get_component() == null) {
			return 0;
		}
		return this.get_component().get_componentWidth() - (this.get_paddingLeft() + this.get_paddingRight());
	}
	,get_innerHeight: function() {
		if(this.get_component() == null) {
			return 0;
		}
		var padding = 0;
		if(this.get_component().get_style() != null && this.get_component().get_style().paddingTop != null) {
			padding = this.get_component().get_style().paddingTop + padding;
		}
		if(this.get_component().get_style() != null && this.get_component().get_style().paddingBottom != null) {
			padding = this.get_component().get_style().paddingBottom + padding;
		}
		var icy = this.get_component().get_componentHeight() - padding;
		return icy;
	}
	,resizeChildren: function() {
	}
	,repositionChildren: function() {
	}
	,usableSize: null
	,get_usableSize: function() {
		var ucx = 0;
		if(this._component.get_componentWidth() != null) {
			ucx = this._component.get_componentWidth();
			ucx -= this.get_paddingLeft() + this.get_paddingRight();
		}
		var ucy = 0;
		if(this._component.get_componentHeight() != null) {
			ucy = this._component.get_componentHeight();
			ucy -= this.get_paddingTop() + this.get_paddingBottom();
		}
		return new haxe_ui_geom_Size(ucx,ucy);
	}
	,usableWidth: null
	,get_usableWidth: function() {
		return this.get_usableSize().width;
	}
	,usableHeight: null
	,get_usableHeight: function() {
		return this.get_usableSize().height;
	}
	,calcAutoWidth: function() {
		return this.calcAutoSize().width;
	}
	,calcAutoHeight: function() {
		return this.calcAutoSize().height;
	}
	,calcAutoSize: function(exclusions) {
		var x1 = 16777215;
		var x2 = 0;
		var y1 = 16777215;
		var y2 = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false || this.excluded(exclusions,child) == true) {
				continue;
			}
			if(child.get_percentWidth() == null) {
				if(child.get_left() < x1) {
					x1 = child.get_left();
				}
				if(child.get_componentWidth() != null && child.get_left() + child.get_componentWidth() > x2) {
					x2 = child.get_left() + child.get_componentWidth();
				}
			}
			if(child.get_percentHeight() == null) {
				if(child.get_top() < y1) {
					y1 = child.get_top();
				}
				if(child.get_componentHeight() != null && child.get_top() + child.get_componentHeight() > y2) {
					y2 = child.get_top() + child.get_componentHeight();
				}
			}
		}
		if(x1 == 16777215) {
			x1 = 0;
		}
		if(y1 == 16777215) {
			y1 = 0;
		}
		var w = x2 - x1 + (this.get_paddingLeft() + this.get_paddingRight());
		var h = y2 - y1 + (this.get_paddingTop() + this.get_paddingBottom());
		if(((this) instanceof haxe_ui_layouts_AbsoluteLayout)) {
			w += x1;
			h += y1;
		}
		return new haxe_ui_geom_Size(w,h);
	}
	,excluded: function(exclusions,child) {
		if(exclusions == null || child == null) {
			return false;
		}
		return exclusions.indexOf(child) != -1;
	}
	,__class__: haxe_ui_layouts_Layout
	,__properties__: {get_usableHeight:"get_usableHeight",get_usableWidth:"get_usableWidth",get_usableSize:"get_usableSize",get_innerHeight:"get_innerHeight",get_innerWidth:"get_innerWidth",get_verticalSpacing:"get_verticalSpacing",get_horizontalSpacing:"get_horizontalSpacing",get_paddingRight:"get_paddingRight",get_paddingBottom:"get_paddingBottom",get_paddingTop:"get_paddingTop",get_paddingLeft:"get_paddingLeft",get_borderSize:"get_borderSize",set_component:"set_component",get_component:"get_component"}
};
var haxe_ui_layouts_DefaultLayout = function() {
	this._roundFullWidths = false;
	this._calcFullHeights = false;
	this._calcFullWidths = false;
	haxe_ui_layouts_Layout.call(this);
};
$hxClasses["haxe.ui.layouts.DefaultLayout"] = haxe_ui_layouts_DefaultLayout;
haxe_ui_layouts_DefaultLayout.__name__ = "haxe.ui.layouts.DefaultLayout";
haxe_ui_layouts_DefaultLayout.__super__ = haxe_ui_layouts_Layout;
haxe_ui_layouts_DefaultLayout.prototype = $extend(haxe_ui_layouts_Layout.prototype,{
	_calcFullWidths: null
	,_calcFullHeights: null
	,_roundFullWidths: null
	,buildWidthRoundingMap: function() {
		var tmp;
		if(this._roundFullWidths != false) {
			var _this = this.get_component();
			tmp = (_this._children == null ? [] : _this._children).length <= 1;
		} else {
			tmp = true;
		}
		if(tmp) {
			return null;
		}
		var map = null;
		var hasNonFullWidth = false;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentWidth() == null || child.get_percentWidth() != 100) {
				hasNonFullWidth = true;
				break;
			}
		}
		if(hasNonFullWidth == false) {
			var remainderWidth = this.get_usableWidth();
			var _this = this.get_component();
			var remainderWidth1 = remainderWidth % (_this._children == null ? [] : _this._children).length;
			if(remainderWidth1 != 0) {
				map = new haxe_ds_ObjectMap();
				var _g = 0;
				var _this = this.get_component();
				var _g1 = _this._children == null ? [] : _this._children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					if(child.get_includeInLayout() == false) {
						continue;
					}
					var n = 0;
					if(remainderWidth1 > 0) {
						n = 1;
						--remainderWidth1;
					}
					map.set(child,n);
				}
			}
		}
		return map;
	}
	,resizeChildren: function() {
		var usableSize = this.get_usableSize();
		var percentWidth = 100;
		var percentHeight = 100;
		var fullWidthValue = 100;
		var fullHeightValue = 100;
		if(this._calcFullWidths == true || this._calcFullHeights == true) {
			var n1 = 0;
			var n2 = 0;
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.get_includeInLayout() == false) {
					continue;
				}
				if(this._calcFullWidths == true && child.get_percentWidth() != null && child.get_percentWidth() == 100) {
					++n1;
				}
				if(this._calcFullHeights == true && child.get_percentHeight() != null && child.get_percentHeight() == 100) {
					++n2;
				}
			}
			if(n1 > 0) {
				fullWidthValue = 100 / n1;
			}
			if(n2 > 0) {
				fullHeightValue = 100 / n2;
			}
		}
		var childRoundingWidth = this.buildWidthRoundingMap();
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var cx = null;
			var cy = null;
			if(child.get_percentWidth() != null) {
				var childPercentWidth = child.get_percentWidth();
				if(childPercentWidth == 100) {
					childPercentWidth = fullWidthValue;
				}
				cx = usableSize.width * childPercentWidth / percentWidth - this.marginLeft(child) - this.marginRight(child);
				if(childRoundingWidth != null && childRoundingWidth.h.__keys__[child.__id__] != null) {
					var roundDirection = childRoundingWidth.h[child.__id__];
					if(roundDirection == 0) {
						cx = Math.floor(cx);
					} else if(roundDirection == 1) {
						cx = Math.ceil(cx);
					}
				}
			}
			if(child.get_percentHeight() != null) {
				var childPercentHeight = child.get_percentHeight();
				if(childPercentHeight == 100) {
					childPercentHeight = fullHeightValue;
				}
				cy = usableSize.height * childPercentHeight / percentHeight - this.marginTop(child) - this.marginBottom(child);
			}
			if(this.fixedMinWidth(child) && child.get_percentWidth() != null) {
				percentWidth -= child.get_percentWidth();
			}
			if(this.fixedMinHeight(child) && child.get_percentHeight() != null) {
				percentHeight -= child.get_percentHeight();
			}
			child.resizeComponent(cx,cy);
		}
	}
	,repositionChildren: function() {
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var xpos = 0;
			var ypos = 0;
			switch(this.horizontalAlign(child)) {
			case "center":
				xpos = (this.get_component().get_componentWidth() - child.get_componentWidth()) / 2 + this.marginLeft(child) - this.marginRight(child);
				break;
			case "right":
				xpos = this.get_component().get_componentWidth() - (child.get_componentWidth() + this.get_paddingRight() + this.marginRight(child));
				break;
			default:
				xpos = this.get_paddingLeft() + this.marginLeft(child);
			}
			switch(this.verticalAlign(child)) {
			case "bottom":
				ypos = this.get_component().get_componentHeight() - (child.get_componentHeight() + this.get_paddingBottom() + this.marginBottom(child));
				break;
			case "center":
				ypos = (this.get_component().get_componentHeight() - child.get_componentHeight()) / 2 + this.marginTop(child) - this.marginBottom(child);
				break;
			default:
				ypos = this.get_paddingTop() + this.marginTop(child);
			}
			child.moveComponent(xpos,ypos);
		}
	}
	,__class__: haxe_ui_layouts_DefaultLayout
});
var haxe_ui_components_ButtonLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components.ButtonLayout"] = haxe_ui_components_ButtonLayout;
haxe_ui_components_ButtonLayout.__name__ = "haxe.ui.components.ButtonLayout";
haxe_ui_components_ButtonLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components_ButtonLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	iconPosition: null
	,get_iconPosition: function() {
		if(this.get_component().get_style() == null || this.get_component().get_style().iconPosition == null) {
			return "left";
		}
		return this.get_component().get_style().iconPosition;
	}
	,resizeChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.resizeChildren.call(this);
		if(this._component.get_autoWidth() == false) {
			var label = this.get_component().findComponent(null,haxe_ui_components_Label,false);
			var ucx = this.get_usableSize();
			var cx = ucx.width;
			if(label != null) {
				label.set_width(cx);
			}
			var itemRenderer = this.get_component().findComponent(null,haxe_ui_core_ItemRenderer);
			if(itemRenderer != null) {
				itemRenderer.set_width(cx);
			}
		}
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_DefaultLayout.prototype.get_usableSize.call(this);
		var icon = this.get_component().findComponent("button-icon",null,false);
		if(icon != null && (this.get_iconPosition() == "far-right" || this.get_iconPosition() == "far-left" || this.get_iconPosition() == "left" || this.get_iconPosition() == "right")) {
			size.width -= icon.get_width() + this.get_verticalSpacing();
		}
		return size;
	}
	,calcAutoSize: function(exclusions) {
		var exclusions = [];
		var itemRenderer = this.get_component().findComponent(null,haxe_ui_core_ItemRenderer);
		var icon = this.get_component().findComponent("button-icon",null,false);
		var tmp;
		if(itemRenderer != null) {
			var icon1 = this.get_component().findComponent("button-icon",null,false);
			tmp = icon1 != null && (this.get_iconPosition() == "far-right" || this.get_iconPosition() == "far-left" || this.get_iconPosition() == "left" || this.get_iconPosition() == "right");
		} else {
			tmp = false;
		}
		if(tmp) {
			exclusions.push(icon);
		}
		var size = haxe_ui_layouts_DefaultLayout.prototype.calcAutoSize.call(this,exclusions);
		var tmp;
		if(itemRenderer != null) {
			var icon1 = this.get_component().findComponent("button-icon",null,false);
			tmp = icon1 != null && (this.get_iconPosition() == "far-right" || this.get_iconPosition() == "far-left" || this.get_iconPosition() == "left" || this.get_iconPosition() == "right");
		} else {
			tmp = false;
		}
		if(tmp) {
			size.width += icon.get_width() + this.get_verticalSpacing();
		}
		return size;
	}
	,isIconRelevant: function() {
		var icon = this.get_component().findComponent("button-icon",null,false);
		if(icon != null) {
			if(!(this.get_iconPosition() == "far-right" || this.get_iconPosition() == "far-left" || this.get_iconPosition() == "left")) {
				return this.get_iconPosition() == "right";
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,repositionChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.repositionChildren.call(this);
		var label = this.get_component().findComponent(null,haxe_ui_components_Label,false);
		if(label != null && label.get_hidden() == true) {
			label = null;
		}
		var icon = this.get_component().findComponent("button-icon",null,false);
		if(icon != null && icon.get_hidden() == true) {
			icon = null;
		}
		switch(this.get_iconPosition()) {
		case "far-left":
			if(label != null && icon != null) {
				var x = this.get_paddingLeft();
				if(this.get_iconPosition() == "far-left") {
					icon.set_left(x + this.marginLeft(icon) - this.marginRight(icon));
					x += this.get_horizontalSpacing() + icon.get_componentWidth();
					label.set_left(x + this.marginLeft(label) - this.marginRight(label));
				}
				label.set_top((this.get_component().get_componentHeight() / 2 - label.get_componentHeight() / 2 | 0) + this.marginTop(label) - this.marginBottom(label));
				icon.set_top((this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2 | 0) + this.marginTop(icon) - this.marginBottom(icon));
			} else if(label != null) {
				label.set_left(this.get_paddingLeft());
				label.set_top((this.get_component().get_componentHeight() / 2 - label.get_componentHeight() / 2 | 0) + this.marginTop(label) - this.marginBottom(label));
			} else if(icon != null) {
				icon.set_left(this.get_component().get_componentWidth() / 2 - icon.get_componentWidth() / 2 | 0);
				icon.set_top((this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2 | 0) + this.marginTop(icon) - this.marginBottom(icon));
			}
			break;
		case "far-right":
			if(label != null && icon != null) {
				var cx = label.get_componentWidth() + icon.get_componentWidth() + this.get_horizontalSpacing();
				var x = this.get_component().get_componentWidth() / 2 - cx / 2 | 0;
				if(this.get_iconPosition() == "far-right") {
					if(cx + this.get_paddingLeft() + this.get_paddingRight() < this.get_component().get_componentWidth()) {
						label.set_left(this.get_paddingLeft());
						x += this.get_horizontalSpacing() + label.get_componentWidth();
						icon.set_left(this.get_component().get_componentWidth() - icon.get_componentWidth() - this.get_paddingRight() + this.marginLeft(icon) - this.marginRight(icon));
					} else {
						label.set_left(this.get_paddingLeft());
						x += this.get_horizontalSpacing() + label.get_componentWidth();
						icon.set_left(x + this.marginLeft(icon) - this.marginRight(icon));
					}
				}
				label.set_top((this.get_component().get_componentHeight() / 2 - label.get_componentHeight() / 2 | 0) + this.marginTop(label) - this.marginBottom(label));
				icon.set_top((this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2 | 0) + this.marginTop(icon) - this.marginBottom(icon));
			} else if(label != null) {
				label.set_left(this.get_paddingLeft());
				label.set_top((this.get_component().get_componentHeight() / 2 - label.get_componentHeight() / 2 | 0) + this.marginTop(label) - this.marginBottom(label));
			} else if(icon != null) {
				icon.set_left(this.get_component().get_componentWidth() - icon.get_componentWidth() - this.get_paddingRight() + this.marginLeft(icon) - this.marginRight(icon));
				icon.set_top((this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2 | 0) + this.marginTop(icon) - this.marginBottom(icon));
			}
			break;
		case "left":case "right":
			if(label != null && icon != null) {
				var cx = label.get_componentWidth() + icon.get_componentWidth() + this.get_horizontalSpacing();
				var x = this.get_component().get_componentWidth() / 2 - cx / 2 | 0;
				if((js_Boot.__cast(this.get_component() , haxe_ui_components_Button)).get_textAlign() == "left") {
					x = this.get_paddingLeft();
				}
				if(this.get_iconPosition() == "right") {
					label.set_left(x + this.marginLeft(label) - this.marginRight(label));
					x += this.get_horizontalSpacing() + label.get_componentWidth();
					icon.set_left(x + this.marginLeft(icon) - this.marginRight(icon));
				} else {
					icon.set_left(x + this.marginLeft(icon) - this.marginRight(icon));
					x += this.get_horizontalSpacing() + icon.get_componentWidth();
					label.set_left(x + this.marginLeft(label) - this.marginRight(label));
				}
				label.set_top((this.get_component().get_componentHeight() / 2 - label.get_componentHeight() / 2 | 0) + this.marginTop(label) - this.marginBottom(label));
				icon.set_top((this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2 | 0) + this.marginTop(icon) - this.marginBottom(icon));
			} else if(label != null) {
				label.set_left(this.getTextAlignPos(label,this.get_component().get_componentWidth()));
				label.set_top((this.get_component().get_componentHeight() / 2 - label.get_componentHeight() / 2 | 0) + this.marginTop(label) - this.marginBottom(label));
			} else if(icon != null) {
				icon.set_left(this.get_component().get_componentWidth() / 2 - icon.get_componentWidth() / 2 | 0);
				icon.set_top((this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2 | 0) + this.marginTop(icon) - this.marginBottom(icon));
			}
			break;
		case "bottom":case "top":
			if(label != null && icon != null) {
				var cy = label.get_componentHeight() + icon.get_componentHeight() + this.get_verticalSpacing();
				var y = this.get_component().get_componentHeight() / 2 - cy / 2 | 0;
				if(this.get_iconPosition() == "bottom") {
					label.set_top(y + this.marginTop(label) - this.marginBottom(label));
					y += this.get_verticalSpacing() + label.get_componentHeight();
					icon.set_top(y + this.marginTop(icon) - this.marginBottom(icon));
				} else {
					icon.set_top(y + this.marginTop(icon) - this.marginBottom(icon));
					y += this.get_verticalSpacing() + icon.get_componentHeight();
					label.set_top(y + this.marginTop(label) - this.marginBottom(label));
				}
				label.set_left(this.getTextAlignPos(label,this.get_component().get_componentWidth()));
				icon.set_left((this.get_component().get_componentWidth() / 2 - icon.get_componentWidth() / 2 | 0) + this.marginLeft(icon) - this.marginRight(icon));
			} else if(label != null) {
				label.set_left((this.get_component().get_componentWidth() / 2 - label.get_componentWidth() / 2 | 0) + this.marginLeft(label) - this.marginRight(label));
				label.set_top((this.get_component().get_componentHeight() / 2 - label.get_componentHeight() / 2 | 0) + this.marginTop(label) - this.marginBottom(label));
			} else if(icon != null) {
				icon.set_left((this.get_component().get_componentWidth() / 2 - icon.get_componentWidth() / 2 | 0) + this.marginLeft(icon) - this.marginRight(icon));
				icon.set_top((this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2 | 0) + this.marginTop(icon) - this.marginBottom(icon));
			}
			break;
		}
	}
	,getTextAlignPos: function(label,usableWidth) {
		switch((js_Boot.__cast(this.get_component() , haxe_ui_components_Button)).get_textAlign()) {
		case "left":
			return this.marginLeft(label) + this.get_paddingLeft();
		case "right":
			return usableWidth - label.get_componentWidth() - this.marginRight(label) - this.get_paddingRight();
		default:
			return (usableWidth / 2 - label.get_componentWidth() / 2 | 0) + this.marginLeft(label) - this.marginRight(label);
		}
	}
	,__class__: haxe_ui_components_ButtonLayout
	,__properties__: $extend(haxe_ui_layouts_DefaultLayout.prototype.__properties__,{get_iconPosition:"get_iconPosition"})
});
var haxe_ui_components__$Button_GroupBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Button.GroupBehaviour"] = haxe_ui_components__$Button_GroupBehaviour;
haxe_ui_components__$Button_GroupBehaviour.__name__ = "haxe.ui.components._Button.GroupBehaviour";
haxe_ui_components__$Button_GroupBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Button_GroupBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		haxe_ui_components__$Button_ButtonGroups.get_instance().add(haxe_ui_util_Variant.toString(this._value),this._component);
	}
	,__class__: haxe_ui_components__$Button_GroupBehaviour
});
var haxe_ui_components__$Button_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Button.TextBehaviour"] = haxe_ui_components__$Button_TextBehaviour;
haxe_ui_components__$Button_TextBehaviour.__name__ = "haxe.ui.components._Button.TextBehaviour";
haxe_ui_components__$Button_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Button_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	get: function() {
		var itemRenderer = this._component.findComponent(null,haxe_ui_core_ItemRenderer);
		if(itemRenderer == null) {
			return haxe_ui_behaviours_DataBehaviour.prototype.get.call(this);
		} else if(!this._component.get_isReady()) {
			return haxe_ui_behaviours_DataBehaviour.prototype.get.call(this);
		} else {
			var data = itemRenderer.get_data();
			var text = null;
			if(data != null) {
				if(Type.typeof(data) == ValueType.TObject) {
					text = data.text;
					if(text == null) {
						text = data.value;
					}
				} else {
					text = Std.string(data);
				}
			}
			return haxe_ui_util_Variant.fromString(text);
		}
	}
	,validateData: function() {
		var itemRenderer = this._component.findComponent(null,haxe_ui_core_ItemRenderer);
		if(itemRenderer != null) {
			var data = itemRenderer.get_data();
			if(data == null) {
				data = { };
			} else {
				data = Reflect.copy(data);
			}
			data.text = haxe_ui_util_Variant.toString(this._value);
			itemRenderer.set_data(data);
		} else {
			var label = this._component.findComponent(null,haxe_ui_components_Label,false);
			if(label == null) {
				label = new haxe_ui_components_Label();
				label.set_id("button-label");
				label.set_scriptAccess(false);
				this._component.addComponent(label);
				var _this = this._component;
				var force = true;
				if(force == null) {
					force = false;
				}
				_this.invalidateComponent("style",false);
				if(force == true) {
					_this._style = null;
				}
			}
			label.set_text(haxe_ui_util_Variant.toString(this._value));
		}
	}
	,__class__: haxe_ui_components__$Button_TextBehaviour
});
var haxe_ui_components__$Button_IconBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Button.IconBehaviour"] = haxe_ui_components__$Button_IconBehaviour;
haxe_ui_components__$Button_IconBehaviour.__name__ = "haxe.ui.components._Button.IconBehaviour";
haxe_ui_components__$Button_IconBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Button_IconBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var icon = this._component.findComponent("button-icon",null,false);
		if((this._value == null || haxe_ui_util_Variant.get_isNull(this._value)) && icon != null) {
			this._component.get_customStyle().icon = null;
			this._component.removeComponent(icon);
			return;
		}
		if(icon == null) {
			icon = new haxe_ui_components_Image();
			icon.addClass("icon");
			icon.set_id("button-icon");
			icon.set_scriptAccess(false);
			this._component.addComponentAt(icon,0);
			var _this = this._component;
			var force = true;
			if(force == null) {
				force = false;
			}
			_this.invalidateComponent("style",false);
			if(force == true) {
				_this._style = null;
			}
		}
		icon.set_resource(this._value);
	}
	,__class__: haxe_ui_components__$Button_IconBehaviour
});
var haxe_ui_components__$Button_ToggleBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Button.ToggleBehaviour"] = haxe_ui_components__$Button_ToggleBehaviour;
haxe_ui_components__$Button_ToggleBehaviour.__name__ = "haxe.ui.components._Button.ToggleBehaviour";
haxe_ui_components__$Button_ToggleBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$Button_ToggleBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	_value: null
	,get: function() {
		return this._value;
	}
	,set: function(value) {
		if(haxe_ui_util_Variant.eq(this._value,value)) {
			return;
		}
		this._value = value;
		var button = js_Boot.__cast(this._component , haxe_ui_components_Button);
		if(haxe_ui_util_Variant.eq(value,haxe_ui_util_Variant.fromBool(false))) {
			button.set_selected(false);
		}
		button.registerInternalEvents(button._internalEventsClass,true);
	}
	,__class__: haxe_ui_components__$Button_ToggleBehaviour
});
var haxe_ui_components__$Button_SelectedBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Button.SelectedBehaviour"] = haxe_ui_components__$Button_SelectedBehaviour;
haxe_ui_components__$Button_SelectedBehaviour.__name__ = "haxe.ui.components._Button.SelectedBehaviour";
haxe_ui_components__$Button_SelectedBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Button_SelectedBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var button = js_Boot.__cast(this._component , haxe_ui_components_Button);
		if(button.get_toggle() == false) {
			return;
		}
		(js_Boot.__cast(button._compositeBuilder , haxe_ui_components_ButtonBuilder)).setSelection(button,haxe_ui_util_Variant.toBool(this._value));
		if(haxe_ui_util_Variant.eq(this._value,haxe_ui_util_Variant.fromBool(false))) {
			button.removeClass(":down",true,true);
		} else {
			button.addClass(":down",true,true);
		}
		var events = js_Boot.__cast(button._internalEvents , haxe_ui_components_ButtonEvents);
		if(button.hitTest(haxe_ui_core_Screen.get_instance().currentMouseX,haxe_ui_core_Screen.get_instance().currentMouseY)) {
			button.addClass(":hover",true,true);
		} else {
			button.removeClass(":hover",true,true);
		}
		events.dispatchChanged();
	}
	,__class__: haxe_ui_components__$Button_SelectedBehaviour
});
var haxe_ui_components_ButtonEvents = function(button) {
	this.recursiveStyling = true;
	this._repeatInterval = 0;
	this._repeater = false;
	this._down = false;
	haxe_ui_events_Events.call(this,button);
	this._button = button;
};
$hxClasses["haxe.ui.components.ButtonEvents"] = haxe_ui_components_ButtonEvents;
haxe_ui_components_ButtonEvents.__name__ = "haxe.ui.components.ButtonEvents";
haxe_ui_components_ButtonEvents.__super__ = haxe_ui_events_Events;
haxe_ui_components_ButtonEvents.prototype = $extend(haxe_ui_events_Events.prototype,{
	_button: null
	,_down: null
	,_repeatTimer: null
	,_repeater: null
	,_repeatInterval: null
	,recursiveStyling: null
	,register: function() {
		if(this.hasEvent("mouseover",$bind(this,this.onMouseOver)) == false) {
			this.registerEvent("mouseover",$bind(this,this.onMouseOver));
		}
		if(this.hasEvent("mouseout",$bind(this,this.onMouseOut)) == false) {
			this.registerEvent("mouseout",$bind(this,this.onMouseOut));
		}
		if(this.hasEvent("mousedown",$bind(this,this.onMouseDown)) == false) {
			this.registerEvent("mousedown",$bind(this,this.onMouseDown));
		}
		if(this.hasEvent("move",$bind(this,this.onMove)) == false) {
			this.registerEvent("move",$bind(this,this.onMove));
		}
		if(this.hasEvent("actionstart",$bind(this,this.onActionStart)) == false) {
			this.registerEvent("actionstart",$bind(this,this.onActionStart));
		}
		if(this.hasEvent("actionend",$bind(this,this.onActionEnd)) == false) {
			this.registerEvent("actionend",$bind(this,this.onActionEnd));
		}
		if(this._button.get_toggle() == true) {
			this.registerEvent("click",$bind(this,this.onMouseClick),100);
		}
	}
	,unregister: function() {
		this.unregisterEvent("mouseover",$bind(this,this.onMouseOver));
		this.unregisterEvent("mouseout",$bind(this,this.onMouseOut));
		this.unregisterEvent("mousedown",$bind(this,this.onMouseDown));
		this.unregisterEvent("click",$bind(this,this.onMouseClick));
		this.unregisterEvent("move",$bind(this,this.onMove));
		this.unregisterEvent("actionstart",$bind(this,this.onActionStart));
		this.unregisterEvent("actionend",$bind(this,this.onActionEnd));
	}
	,onMouseOver: function(event) {
		if(this._button.get_toggle() == true && this._button.classes.indexOf(":down") != -1) {
			return;
		}
		if(event.buttonDown == false || this._down == false) {
			this._button.addClass(":hover",true,this.recursiveStyling);
		} else {
			this._button.addClass(":down",true,this.recursiveStyling);
		}
	}
	,onMouseOut: function(event) {
		if(this._button.get_toggle() == true && this._button.get_selected() == true) {
			return;
		}
		if(this._button.get_remainPressed() == false) {
			this._button.removeClass(":down",true,this.recursiveStyling);
		}
		this._button.removeClass(":hover",true,this.recursiveStyling);
	}
	,onMouseDown: function(event) {
		var _gthis = this;
		this._button.set_focus(true);
		if(this._button.get_repeater() == true && this._repeatInterval == 0) {
			this._repeatInterval = this._button.get_easeInRepeater() ? this._button.get_repeatInterval() * 2 : this._button.get_repeatInterval();
		}
		this._down = true;
		this._button.addClass(":down",true,this.recursiveStyling);
		this._button.get_screen().registerEvent("mouseup",$bind(this,this.onMouseUp));
		if(this._repeater == true && this._repeatInterval == this._button.get_repeatInterval()) {
			this._repeatTimer = new haxe_ui_util_Timer(this._repeatInterval,$bind(this,this.onRepeatTimer));
		} else if(this._button.get_repeater() == true) {
			if(this._repeatTimer != null) {
				this._repeatTimer.stop();
				this._repeatTimer = null;
			}
			haxe_ui_util_Timer.delay(function() {
				if(_gthis._repeater == true && _gthis._repeatTimer == null) {
					if(_gthis._button.get_easeInRepeater() == true && _gthis._repeatInterval > _gthis._button.get_repeatInterval()) {
						var tmp = _gthis._repeatInterval - (_gthis._repeatInterval - _gthis._button.get_repeatInterval()) / 2 | 0;
						_gthis._repeatInterval = tmp;
						_gthis.onRepeatTimer();
					}
					_gthis.onMouseDown(event);
				}
			},this._repeatInterval);
		}
		this._repeater = this._button.get_repeater();
	}
	,onMouseUp: function(event) {
		this._down = this._repeater = false;
		this._repeatInterval = this._button.get_easeInRepeater() ? this._button.get_repeatInterval() * 2 : this._button.get_repeatInterval();
		this._button.get_screen().unregisterEvent("mouseup",$bind(this,this.onMouseUp));
		if(this._button.get_toggle() == true) {
			return;
		}
		this._button.removeClass(":down",true,this.recursiveStyling);
		var over = this._button.hitTest(event.screenX,event.screenY);
		if(event.touchEvent == false && over == true) {
			this._button.addClass(":hover",true,this.recursiveStyling);
		} else if(over == false) {
			this._button.removeClass(":hover",true,this.recursiveStyling);
		}
		if(this._repeatTimer != null) {
			this._repeatTimer.stop();
			this._repeatTimer = null;
		}
	}
	,onMove: function(event) {
		var over = this._button.hitTest(haxe_ui_core_Screen.get_instance().currentMouseX,haxe_ui_core_Screen.get_instance().currentMouseY);
		if(over == true) {
			this._button.addClass(":hover",true,this.recursiveStyling);
		} else if(over == false) {
			this._button.removeClass(":hover",true,this.recursiveStyling);
		}
	}
	,onRepeatTimer: function() {
		if(this._button.classes.indexOf(":hover") != -1 && this._down == true) {
			var event = new haxe_ui_events_MouseEvent("click");
			this._button.dispatch(event);
		}
	}
	,onMouseClick: function(event) {
		this._button.set_selected(!this._button.get_selected());
		if(this._button.get_selected() == false) {
			this._button.removeClass(":down",true,this.recursiveStyling);
		}
		if(this._button.hitTest(event.screenX,event.screenY)) {
			this._button.addClass(":hover",true,this.recursiveStyling);
		}
	}
	,dispatchChanged: function() {
		this._button.dispatch(new haxe_ui_events_UIEvent("change"));
	}
	,press: function() {
		this._down = true;
		if(this._button.get_toggle() == true) {
			this._button.addClass(":down",true,this.recursiveStyling);
		} else {
			this._button.addClass(":down",true,this.recursiveStyling);
		}
	}
	,release: function() {
		if(this._down == true) {
			this._down = false;
			if(this._button.get_toggle() == true) {
				this._button.set_selected(!this._button.get_selected());
				this._button.dispatch(new haxe_ui_events_MouseEvent("click"));
			} else {
				this._button.removeClass(":down",true,this.recursiveStyling);
				this._button.dispatch(new haxe_ui_events_MouseEvent("click"));
			}
		}
	}
	,onActionStart: function(event) {
		switch(event.action) {
		case "actionConfirm":case "actionPress":
			this.press();
			break;
		default:
		}
	}
	,onActionEnd: function(event) {
		switch(event.action) {
		case "actionConfirm":case "actionPress":
			this.release();
			break;
		default:
		}
	}
	,__class__: haxe_ui_components_ButtonEvents
});
var haxe_ui_components_ButtonBuilder = function(button) {
	haxe_ui_core_CompositeBuilder.call(this,button);
	this._button = button;
};
$hxClasses["haxe.ui.components.ButtonBuilder"] = haxe_ui_components_ButtonBuilder;
haxe_ui_components_ButtonBuilder.__name__ = "haxe.ui.components.ButtonBuilder";
haxe_ui_components_ButtonBuilder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components_ButtonBuilder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_button: null
	,onReady: function() {
		haxe_ui_core_CompositeBuilder.prototype.onReady.call(this);
		var renderer = this._button.findComponent(null,haxe_ui_core_ItemRenderer);
		if(renderer != null) {
			if(!this._button.get_autoWidth()) {
				renderer.removeClass("auto-size");
			} else {
				renderer.addClass("auto-size");
			}
		}
	}
	,applyStyle: function(style) {
		haxe_ui_core_CompositeBuilder.prototype.applyStyle.call(this,style);
		var c = this._component.findComponent("button-label",haxe_ui_core_Component,false);
		if(c != null) {
			var invalidate = false;
			if(style.color != null && c.get_customStyle().color != style.color) {
				c.get_customStyle().color = style.color;
				invalidate = true;
			}
			if(style.fontName != null && c.get_customStyle().fontName != style.fontName) {
				c.get_customStyle().fontName = style.fontName;
				invalidate = true;
			}
			if(style.fontSize != null && c.get_customStyle().fontSize != style.fontSize) {
				c.get_customStyle().fontSize = style.fontSize;
				invalidate = true;
			}
			if(style.cursor != null && c.get_customStyle().cursor != style.cursor) {
				c.get_customStyle().cursor = style.cursor;
				invalidate = true;
			}
			if(style.textAlign != null && c.get_customStyle().textAlign != style.textAlign) {
				c.get_customStyle().textAlign = style.textAlign;
				invalidate = true;
			}
			if(style.fontBold != null && c.get_customStyle().fontBold != style.fontBold) {
				c.get_customStyle().fontBold = style.fontBold;
				invalidate = true;
			}
			if(style.fontUnderline != null && c.get_customStyle().fontUnderline != style.fontUnderline) {
				c.get_customStyle().fontUnderline = style.fontUnderline;
				invalidate = true;
			}
			if(style.fontItalic != null && c.get_customStyle().fontItalic != style.fontItalic) {
				c.get_customStyle().fontItalic = style.fontItalic;
				invalidate = true;
			}
			if(invalidate == true) {
				c.invalidateComponent("style",false);
			}
		}
		var c = this._component.findComponent("button-icon",haxe_ui_core_Component,false);
		if(c != null) {
			var invalidate = false;
			if(style.cursor != null && c.get_customStyle().cursor != style.cursor) {
				c.get_customStyle().cursor = style.cursor;
				invalidate = true;
			}
			if(invalidate == true) {
				c.invalidateComponent("style",false);
			}
		}
		var list = this._component.findComponents(null,haxe_ui_components_Label,16777215);
		var _g = 0;
		while(_g < list.length) {
			var c = list[_g];
			++_g;
			var invalidate = false;
			if(style.color != null && c.get_customStyle().color != style.color) {
				c.get_customStyle().color = style.color;
				invalidate = true;
			}
			if(style.fontName != null && c.get_customStyle().fontName != style.fontName) {
				c.get_customStyle().fontName = style.fontName;
				invalidate = true;
			}
			if(style.fontSize != null && c.get_customStyle().fontSize != style.fontSize) {
				c.get_customStyle().fontSize = style.fontSize;
				invalidate = true;
			}
			if(style.cursor != null && c.get_customStyle().cursor != style.cursor) {
				c.get_customStyle().cursor = style.cursor;
				invalidate = true;
			}
			if(style.textAlign != null && c.get_customStyle().textAlign != style.textAlign) {
				c.get_customStyle().textAlign = style.textAlign;
				invalidate = true;
			}
			if(style.fontBold != null && c.get_customStyle().fontBold != style.fontBold) {
				c.get_customStyle().fontBold = style.fontBold;
				invalidate = true;
			}
			if(style.fontUnderline != null && c.get_customStyle().fontUnderline != style.fontUnderline) {
				c.get_customStyle().fontUnderline = style.fontUnderline;
				invalidate = true;
			}
			if(style.fontItalic != null && c.get_customStyle().fontItalic != style.fontItalic) {
				c.get_customStyle().fontItalic = style.fontItalic;
				invalidate = true;
			}
			if(invalidate == true) {
				c.invalidateComponent("style",false);
			}
		}
		if(style.icon != null) {
			this._button.set_icon(style.icon);
		}
	}
	,setSelection: function(button,value,allowDeselection) {
		if(allowDeselection == null) {
			allowDeselection = false;
		}
		if(button.get_componentGroup() != null && value == false && allowDeselection == false) {
			var arr = haxe_ui_components__$Button_ButtonGroups.get_instance().get(button.get_componentGroup());
			var hasSelection = false;
			if(arr != null) {
				var _g = 0;
				while(_g < arr.length) {
					var b = arr[_g];
					++_g;
					if(b != button && b.get_selected() == true) {
						hasSelection = true;
						break;
					}
				}
			}
			if(hasSelection == false && allowDeselection == false) {
				button.behaviours.softSet("selected",haxe_ui_util_Variant.fromBool(true));
				return;
			}
		}
		if(button.get_componentGroup() != null && value == true) {
			var arr = haxe_ui_components__$Button_ButtonGroups.get_instance().get(button.get_componentGroup());
			if(arr != null) {
				var _g = 0;
				while(_g < arr.length) {
					var b = arr[_g];
					++_g;
					if(b != button) {
						b.set_selected(false);
					}
				}
			}
		}
		if(allowDeselection == true && value == false) {
			button.behaviours.softSet("selected",haxe_ui_util_Variant.fromBool(false));
		}
	}
	,addComponent: function(child) {
		if(((child) instanceof haxe_ui_core_ItemRenderer)) {
			var existingRenderer = this._component.findComponent(null,haxe_ui_core_ItemRenderer);
			if(existingRenderer != null) {
				this._component.removeComponent(existingRenderer);
			}
			child.addClass("auto-size");
		}
		return null;
	}
	,__class__: haxe_ui_components_ButtonBuilder
});
var haxe_ui_components__$Button_ButtonGroups = function() {
	this._groups = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.components._Button.ButtonGroups"] = haxe_ui_components__$Button_ButtonGroups;
haxe_ui_components__$Button_ButtonGroups.__name__ = "haxe.ui.components._Button.ButtonGroups";
haxe_ui_components__$Button_ButtonGroups.__properties__ = {get_instance:"get_instance"};
haxe_ui_components__$Button_ButtonGroups._instance = null;
haxe_ui_components__$Button_ButtonGroups.instance = null;
haxe_ui_components__$Button_ButtonGroups.get_instance = function() {
	if(haxe_ui_components__$Button_ButtonGroups._instance == null) {
		haxe_ui_components__$Button_ButtonGroups._instance = new haxe_ui_components__$Button_ButtonGroups();
	}
	return haxe_ui_components__$Button_ButtonGroups._instance;
};
haxe_ui_components__$Button_ButtonGroups.prototype = {
	_groups: null
	,get: function(name) {
		return this._groups.h[name];
	}
	,set: function(name,buttons) {
		this._groups.h[name] = buttons;
	}
	,add: function(name,button) {
		var arr = this.get(name);
		if(arr == null) {
			arr = [];
		}
		if(arr.indexOf(button) == -1) {
			arr.push(button);
		}
		this.set(name,arr);
	}
	,remove: function(name,button) {
		var arr = this.get(name);
		if(arr == null) {
			return;
		}
		HxOverrides.remove(arr,button);
		if(arr.length == 0) {
			var _this = this._groups;
			if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
				delete(_this.h[name]);
			}
		}
	}
	,reset: function(name) {
		var arr = this.get(name);
		if(arr == null) {
			return;
		}
		var selection = null;
		var _g = 0;
		while(_g < arr.length) {
			var item = arr[_g];
			++_g;
			if(item.get_selected() == true) {
				selection = item;
				break;
			}
		}
		if(selection == null) {
			return;
		}
		(js_Boot.__cast(selection._compositeBuilder , haxe_ui_components_ButtonBuilder)).setSelection(selection,false,true);
	}
	,__class__: haxe_ui_components__$Button_ButtonGroups
};
var haxe_ui_events_UIEvent = function(type,bubble,data) {
	if(bubble == null) {
		bubble = false;
	}
	this.relatedEvent = null;
	this.type = type;
	this.bubble = bubble;
	this.data = data;
	this.canceled = false;
};
$hxClasses["haxe.ui.events.UIEvent"] = haxe_ui_events_UIEvent;
haxe_ui_events_UIEvent.__name__ = "haxe.ui.events.UIEvent";
haxe_ui_events_UIEvent.__super__ = haxe_ui_backend_EventImpl;
haxe_ui_events_UIEvent.prototype = $extend(haxe_ui_backend_EventImpl.prototype,{
	bubble: null
	,type: null
	,target: null
	,data: null
	,canceled: null
	,relatedEvent: null
	,value: null
	,previousValue: null
	,cancel: function() {
		haxe_ui_backend_EventImpl.prototype.cancel.call(this);
		this.canceled = true;
	}
	,clone: function() {
		var c = new haxe_ui_events_UIEvent(this.type);
		c.type = this.type;
		c.bubble = this.bubble;
		c.target = this.target;
		c.data = this.data;
		c.value = this.value;
		c.previousValue = this.previousValue;
		c.canceled = this.canceled;
		c.relatedEvent = this.relatedEvent;
		this.postClone(c);
		return c;
	}
	,copyFrom: function(c) {
	}
	,__class__: haxe_ui_events_UIEvent
});
var haxe_ui_components_CalendarEvent = function(type,bubble,data) {
	haxe_ui_events_UIEvent.call(this,type,bubble,data);
};
$hxClasses["haxe.ui.components.CalendarEvent"] = haxe_ui_components_CalendarEvent;
haxe_ui_components_CalendarEvent.__name__ = "haxe.ui.components.CalendarEvent";
haxe_ui_components_CalendarEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_components_CalendarEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	clone: function() {
		var c = new haxe_ui_components_CalendarEvent(this.type);
		c.type = this.type;
		c.bubble = this.bubble;
		c.target = this.target;
		c.data = this.data;
		c.canceled = this.canceled;
		this.postClone(c);
		return c;
	}
	,__class__: haxe_ui_components_CalendarEvent
});
var haxe_ui_containers_Grid = function() {
	this._columns = -1;
	haxe_ui_containers_Box.call(this);
	if(this._columns == -1) {
		this.set_columns(2);
	}
};
$hxClasses["haxe.ui.containers.Grid"] = haxe_ui_containers_Grid;
haxe_ui_containers_Grid.__name__ = "haxe.ui.containers.Grid";
haxe_ui_containers_Grid.__super__ = haxe_ui_containers_Box;
haxe_ui_containers_Grid.prototype = $extend(haxe_ui_containers_Box.prototype,{
	_columns: null
	,get_columns: function() {
		return (js_Boot.__cast(this._layout , haxe_ui_layouts_VerticalGridLayout)).get_columns();
	}
	,set_columns: function(value) {
		if(this._layout == null) {
			this.set_layout(this.createLayout());
		}
		(js_Boot.__cast(this._layout , haxe_ui_layouts_VerticalGridLayout)).set_columns(value);
		this._columns = value;
		return value;
	}
	,createDefaults: function() {
		haxe_ui_containers_Box.prototype.createDefaults.call(this);
		this._defaultLayoutClass = haxe_ui_layouts_VerticalGridLayout;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		c.set_columns(this.get_columns());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_Grid();
	}
	,__class__: haxe_ui_containers_Grid
	,__properties__: $extend(haxe_ui_containers_Box.prototype.__properties__,{set_columns:"set_columns",get_columns:"get_columns"})
});
var haxe_ui_components_Calendar = function() {
	haxe_ui_containers_Grid.call(this);
};
$hxClasses["haxe.ui.components.Calendar"] = haxe_ui_components_Calendar;
haxe_ui_components_Calendar.__name__ = "haxe.ui.components.Calendar";
haxe_ui_components_Calendar.__super__ = haxe_ui_containers_Grid;
haxe_ui_components_Calendar.prototype = $extend(haxe_ui_containers_Grid.prototype,{
	previousMonth: function() {
		if(this.behaviours == null) {
			return null;
		}
		return this.behaviours.call("previousMonth",null);
	}
	,nextMonth: function() {
		if(this.behaviours == null) {
			return null;
		}
		return this.behaviours.call("nextMonth",null);
	}
	,previousYear: function() {
		if(this.behaviours == null) {
			return null;
		}
		return this.behaviours.call("previousYear",null);
	}
	,nextYear: function() {
		if(this.behaviours == null) {
			return null;
		}
		return this.behaviours.call("nextYear",null);
	}
	,createDefaults: function() {
		haxe_ui_containers_Grid.prototype.createDefaults.call(this);
		this._defaultLayoutClass = haxe_ui_components__$Calendar_Layout;
	}
	,registerComposite: function() {
		haxe_ui_containers_Grid.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_components__$Calendar_Events;
		this._compositeBuilderClass = haxe_ui_components__$Calendar_Builder;
		this._defaultLayoutClass = haxe_ui_components__$Calendar_Layout;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_Grid.prototype.registerBehaviours.call(this);
		this.behaviours.register("date",haxe_ui_components__$Calendar_DateBehaviour);
		this.behaviours.register("selectedDate",haxe_ui_components__$Calendar_SelectedDateBehaviour);
		this.behaviours.register("previousMonth",haxe_ui_components__$Calendar_PreviousMonthBehaviour);
		this.behaviours.register("nextMonth",haxe_ui_components__$Calendar_NextMonthBehaviour);
		this.behaviours.register("previousYear",haxe_ui_components__$Calendar_PreviousYearBehaviour);
		this.behaviours.register("nextYear",haxe_ui_components__$Calendar_NextYearBehaviour);
	}
	,get_date: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toDate(this.behaviours.get("date"));
	}
	,set_date: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("date",haxe_ui_util_Variant.fromDate(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"date"));
		return value;
	}
	,get_selectedDate: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toDate(this.behaviours.get("selectedDate"));
	}
	,set_selectedDate: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("selectedDate",haxe_ui_util_Variant.fromDate(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"selectedDate"));
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Grid.prototype.cloneComponent.call(this);
		if(this.get_date() != null) {
			c.set_date(this.get_date());
		}
		if(this.get_selectedDate() != null) {
			c.set_selectedDate(this.get_selectedDate());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Calendar();
	}
	,__class__: haxe_ui_components_Calendar
	,__properties__: $extend(haxe_ui_containers_Grid.prototype.__properties__,{set_selectedDate:"set_selectedDate",get_selectedDate:"get_selectedDate",set_date:"set_date",get_date:"get_date"})
});
var haxe_ui_components__$Calendar_PreviousMonthBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Calendar.PreviousMonthBehaviour"] = haxe_ui_components__$Calendar_PreviousMonthBehaviour;
haxe_ui_components__$Calendar_PreviousMonthBehaviour.__name__ = "haxe.ui.components._Calendar.PreviousMonthBehaviour";
haxe_ui_components__$Calendar_PreviousMonthBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$Calendar_PreviousMonthBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var calendar = js_Boot.__cast(this._component , haxe_ui_components_Calendar);
		calendar.set_date(haxe_ui_components__$Calendar_DateUtils.previousMonth(calendar.get_date()));
		return null;
	}
	,__class__: haxe_ui_components__$Calendar_PreviousMonthBehaviour
});
var haxe_ui_components__$Calendar_NextMonthBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Calendar.NextMonthBehaviour"] = haxe_ui_components__$Calendar_NextMonthBehaviour;
haxe_ui_components__$Calendar_NextMonthBehaviour.__name__ = "haxe.ui.components._Calendar.NextMonthBehaviour";
haxe_ui_components__$Calendar_NextMonthBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$Calendar_NextMonthBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var calendar = js_Boot.__cast(this._component , haxe_ui_components_Calendar);
		calendar.set_date(haxe_ui_components__$Calendar_DateUtils.nextMonth(calendar.get_date()));
		return null;
	}
	,__class__: haxe_ui_components__$Calendar_NextMonthBehaviour
});
var haxe_ui_components__$Calendar_PreviousYearBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Calendar.PreviousYearBehaviour"] = haxe_ui_components__$Calendar_PreviousYearBehaviour;
haxe_ui_components__$Calendar_PreviousYearBehaviour.__name__ = "haxe.ui.components._Calendar.PreviousYearBehaviour";
haxe_ui_components__$Calendar_PreviousYearBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$Calendar_PreviousYearBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var calendar = js_Boot.__cast(this._component , haxe_ui_components_Calendar);
		calendar.set_date(haxe_ui_components__$Calendar_DateUtils.previousYear(calendar.get_date()));
		return null;
	}
	,__class__: haxe_ui_components__$Calendar_PreviousYearBehaviour
});
var haxe_ui_components__$Calendar_NextYearBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Calendar.NextYearBehaviour"] = haxe_ui_components__$Calendar_NextYearBehaviour;
haxe_ui_components__$Calendar_NextYearBehaviour.__name__ = "haxe.ui.components._Calendar.NextYearBehaviour";
haxe_ui_components__$Calendar_NextYearBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$Calendar_NextYearBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var calendar = js_Boot.__cast(this._component , haxe_ui_components_Calendar);
		calendar.set_date(haxe_ui_components__$Calendar_DateUtils.nextYear(calendar.get_date()));
		return null;
	}
	,__class__: haxe_ui_components__$Calendar_NextYearBehaviour
});
var haxe_ui_components__$Calendar_SelectedDateBehaviour = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Calendar.SelectedDateBehaviour"] = haxe_ui_components__$Calendar_SelectedDateBehaviour;
haxe_ui_components__$Calendar_SelectedDateBehaviour.__name__ = "haxe.ui.components._Calendar.SelectedDateBehaviour";
haxe_ui_components__$Calendar_SelectedDateBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_components__$Calendar_SelectedDateBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	set: function(value) {
		haxe_ui_behaviours_DefaultBehaviour.prototype.set.call(this,value);
		var date = haxe_ui_util_Variant.toDate(value);
		this._component.invalidateComponent("data",false);
		var calendar = js_Boot.__cast(this._component , haxe_ui_components_Calendar);
		calendar.set_date(date);
		this._component.dispatch(new haxe_ui_events_UIEvent("change"));
	}
	,__class__: haxe_ui_components__$Calendar_SelectedDateBehaviour
});
var haxe_ui_components__$Calendar_DateBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Calendar.DateBehaviour"] = haxe_ui_components__$Calendar_DateBehaviour;
haxe_ui_components__$Calendar_DateBehaviour.__name__ = "haxe.ui.components._Calendar.DateBehaviour";
haxe_ui_components__$Calendar_DateBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Calendar_DateBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var date = haxe_ui_util_Variant.toDate(this._value);
		if(date == null) {
			return;
		}
		var year = date.getFullYear();
		var month = date.getMonth();
		var startDay = new Date(year,month,1,0,0,0).getDay();
		var endDay = haxe_ui_components__$Calendar_DateUtils.getEndDay(month,year);
		var _g = 0;
		var _this = this._component;
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.set_opacity(.3);
			child.removeClass("calendar-off-day");
			child.removeClass("calendar-day");
			child.removeClass("calendar-day-selected");
			child.removeClass(":hover");
		}
		var prevMonth = haxe_ui_components__$Calendar_DateUtils.previousMonth(date);
		var last = haxe_ui_components__$Calendar_DateUtils.getEndDay(prevMonth.getMonth(),prevMonth.getFullYear());
		var n = startDay - 1;
		var _g = 0;
		var _g1 = startDay;
		while(_g < _g1) {
			var _ = _g++;
			var _this = this._component;
			var item = (_this._children == null ? [] : _this._children)[n];
			item.addClass("calendar-off-day");
			--n;
			item.set_text("" + last);
			--last;
		}
		var selectedDate = (js_Boot.__cast(this._component , haxe_ui_components_Calendar)).get_selectedDate();
		if(selectedDate == null) {
			selectedDate = new Date();
		}
		var _g = 0;
		var _g1 = endDay;
		while(_g < _g1) {
			var i = _g++;
			var _this = this._component;
			var item = (_this._children == null ? [] : _this._children)[i + startDay];
			item.addClass("calendar-day");
			item.set_opacity(1);
			item.set_hidden(false);
			item.set_text("" + (i + 1));
			if(i + 1 == selectedDate.getDate() && month == selectedDate.getMonth() && year == selectedDate.getFullYear()) {
				item.addClass("calendar-day-selected");
			}
			last = i + startDay;
		}
		++last;
		var n = 0;
		var _g = last;
		var _this = this._component;
		var _g1 = (_this._children == null ? [] : _this._children).length;
		while(_g < _g1) {
			var i = _g++;
			var _this = this._component;
			var item = (_this._children == null ? [] : _this._children)[i];
			item.addClass("calendar-off-day");
			item.set_text("" + (n + 1));
			++n;
		}
		this._component.registerInternalEvents(null,true);
		this._component.dispatch(new haxe_ui_components_CalendarEvent("datechange"));
	}
	,__class__: haxe_ui_components__$Calendar_DateBehaviour
});
var haxe_ui_components__$Calendar_DateUtils = function() { };
$hxClasses["haxe.ui.components._Calendar.DateUtils"] = haxe_ui_components__$Calendar_DateUtils;
haxe_ui_components__$Calendar_DateUtils.__name__ = "haxe.ui.components._Calendar.DateUtils";
haxe_ui_components__$Calendar_DateUtils.getEndDay = function(month,year) {
	var endDay = -1;
	switch(month) {
	case 1:
		if(year % 400 == 0 || year % 100 != 0 && year % 4 == 0) {
			endDay = 29;
		} else {
			endDay = 28;
		}
		break;
	case 3:case 5:case 8:case 10:
		endDay = 30;
		break;
	default:
		endDay = 31;
	}
	return endDay;
};
haxe_ui_components__$Calendar_DateUtils.previousMonth = function(date) {
	var year = date.getFullYear();
	var month = date.getMonth();
	var day = date.getDate();
	--month;
	if(month < 0) {
		month = 11;
		--year;
	}
	day = js_Boot.__cast(Math.min(day,haxe_ui_components__$Calendar_DateUtils.getEndDay(month,year)) , Int);
	date = new Date(year,month,day,0,0,0);
	return date;
};
haxe_ui_components__$Calendar_DateUtils.nextMonth = function(date) {
	var year = date.getFullYear();
	var month = date.getMonth();
	var day = date.getDate();
	++month;
	if(month > 11) {
		month = 0;
		++year;
	}
	day = js_Boot.__cast(Math.min(day,haxe_ui_components__$Calendar_DateUtils.getEndDay(month,year)) , Int);
	date = new Date(year,month,day,0,0,0);
	return date;
};
haxe_ui_components__$Calendar_DateUtils.previousYear = function(date) {
	var year = date.getFullYear();
	var month = date.getMonth();
	var day = date.getDate();
	--year;
	day = js_Boot.__cast(Math.min(day,haxe_ui_components__$Calendar_DateUtils.getEndDay(month,year)) , Int);
	date = new Date(year,month,day,0,0,0);
	return date;
};
haxe_ui_components__$Calendar_DateUtils.nextYear = function(date) {
	var year = date.getFullYear();
	var month = date.getMonth();
	var day = date.getDate();
	++year;
	day = js_Boot.__cast(Math.min(day,haxe_ui_components__$Calendar_DateUtils.getEndDay(month,year)) , Int);
	date = new Date(year,month,day,0,0,0);
	return date;
};
var haxe_ui_components__$Calendar_Events = function(target) {
	haxe_ui_events_Events.call(this,target);
};
$hxClasses["haxe.ui.components._Calendar.Events"] = haxe_ui_components__$Calendar_Events;
haxe_ui_components__$Calendar_Events.__name__ = "haxe.ui.components._Calendar.Events";
haxe_ui_components__$Calendar_Events.__super__ = haxe_ui_events_Events;
haxe_ui_components__$Calendar_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	register: function() {
		this.unregister();
		var _g = 0;
		var _this = this._target;
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.hasEvent("click",$bind(this,this.onDayClicked)) == false && child.classes.indexOf("calendar-day") != -1) {
				child.registerEvent("click",$bind(this,this.onDayClicked));
			}
		}
	}
	,unregister: function() {
		var _g = 0;
		var _this = this._target;
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.unregisterEvent("click",$bind(this,this.onDayClicked));
		}
	}
	,onDayClicked: function(event) {
		var calendar = js_Boot.__cast(this._target , haxe_ui_components_Calendar);
		var day = Std.parseInt(event.target.get_text());
		var month = calendar.get_date().getMonth();
		var year = calendar.get_date().getFullYear();
		calendar.set_selectedDate(new Date(year,month,day,0,0,0));
	}
	,__class__: haxe_ui_components__$Calendar_Events
});
var haxe_ui_components__$Calendar_Builder = function(calendar) {
	haxe_ui_core_CompositeBuilder.call(this,calendar);
	this._calendar = calendar;
};
$hxClasses["haxe.ui.components._Calendar.Builder"] = haxe_ui_components__$Calendar_Builder;
haxe_ui_components__$Calendar_Builder.__name__ = "haxe.ui.components._Calendar.Builder";
haxe_ui_components__$Calendar_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components__$Calendar_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_calendar: null
	,create: function() {
		this._calendar.set_columns(7);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		var item = new haxe_ui_components_Button();
		item.set_scriptAccess(false);
		this._calendar.addComponent(item);
		this._calendar.set_date(new Date());
	}
	,__class__: haxe_ui_components__$Calendar_Builder
});
var haxe_ui_layouts_VerticalGridLayout = function() {
	this._columns = 1;
	haxe_ui_layouts_Layout.call(this);
};
$hxClasses["haxe.ui.layouts.VerticalGridLayout"] = haxe_ui_layouts_VerticalGridLayout;
haxe_ui_layouts_VerticalGridLayout.__name__ = "haxe.ui.layouts.VerticalGridLayout";
haxe_ui_layouts_VerticalGridLayout.__super__ = haxe_ui_layouts_Layout;
haxe_ui_layouts_VerticalGridLayout.prototype = $extend(haxe_ui_layouts_Layout.prototype,{
	_columns: null
	,get_columns: function() {
		return this._columns;
	}
	,set_columns: function(value) {
		if(this._columns == value) {
			return value;
		}
		this._columns = value;
		if(this._component != null) {
			var _this = this._component;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout",false);
			}
		}
		return value;
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_Layout.prototype.get_usableSize.call(this);
		var columnWidths = this.calcColumnWidths(size,false);
		var rowHeights = this.calcRowHeights(size,false);
		var _g = 0;
		while(_g < columnWidths.length) {
			var columnWidth = columnWidths[_g];
			++_g;
			size.width -= columnWidth;
		}
		var _g = 0;
		while(_g < rowHeights.length) {
			var rowHeight = rowHeights[_g];
			++_g;
			size.height -= rowHeight;
		}
		var _this = this.get_component();
		if((_this._children == null ? [] : _this._children).length > 1) {
			var _this = this.get_component();
			var rows = Math.ceil((_this._children == null ? [] : _this._children).length / this.get_columns());
			var c = this.get_columns();
			var _this = this.get_component();
			var c1 = Math.min(c,(_this._children == null ? [] : _this._children).length);
			size.width -= this.get_horizontalSpacing() * (c1 - 1);
			size.height -= this.get_verticalSpacing() * (rows - 1);
		}
		if(size.width < 0) {
			size.width = 0;
		}
		if(size.height < 0) {
			size.height = 0;
		}
		return size;
	}
	,resizeChildren: function() {
		var size = this.get_usableSize();
		var columnWidths = this.calcColumnWidths(size,true);
		var rowHeights = this.calcRowHeights(size,true);
		var explicitWidths = this.calcExplicitWidths();
		var explicitHeights = this.calcExplicitHeights();
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var cx = null;
			var cy = null;
			if(child.get_percentWidth() != null) {
				var ucx = columnWidths[columnIndex];
				if(explicitWidths[columnIndex] == false) {
					cx = ucx;
				} else {
					cx = ucx * child.get_percentWidth() / 100;
				}
			}
			if(child.get_percentHeight() != null) {
				var ucy = rowHeights[rowIndex];
				if(explicitHeights[rowIndex] == false) {
					cy = ucy;
				} else {
					cy = ucy * child.get_percentHeight() / 100;
				}
			}
			child.resizeComponent(cx,cy);
			++columnIndex;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				++rowIndex;
			}
		}
	}
	,repositionChildren: function() {
		var size = this.get_usableSize();
		var columnWidths = this.calcColumnWidths(size,true);
		var rowHeights = this.calcRowHeights(size,true);
		var rowIndex = 0;
		var columnIndex = 0;
		var xpos = this.get_paddingLeft();
		var ypos = this.get_paddingTop();
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var halign = this.horizontalAlign(child);
			var valign = this.verticalAlign(child);
			var xposChild = 0;
			var yposChild = 0;
			switch(halign) {
			case "center":
				xposChild = xpos + (columnWidths[columnIndex] - child.get_componentWidth()) * 0.5 + this.marginLeft(child) - this.marginRight(child);
				break;
			case "right":
				xposChild = xpos + (columnWidths[columnIndex] - child.get_componentWidth()) + this.marginLeft(child) - this.marginRight(child);
				break;
			default:
				xposChild = xpos + this.marginLeft(child) - this.marginRight(child);
			}
			switch(valign) {
			case "bottom":
				yposChild = ypos + (rowHeights[rowIndex] - child.get_componentHeight()) + this.marginTop(child) - this.marginBottom(child);
				break;
			case "center":
				yposChild = ypos + (rowHeights[rowIndex] - child.get_componentHeight()) * 0.5 + this.marginTop(child) - this.marginBottom(child);
				break;
			default:
				yposChild = ypos + this.marginTop(child) - this.marginBottom(child);
			}
			child.moveComponent(xposChild,yposChild);
			xpos += columnWidths[columnIndex] + this.get_horizontalSpacing();
			++columnIndex;
			if(columnIndex >= this.get_columns()) {
				xpos = this.get_paddingLeft();
				ypos += rowHeights[rowIndex] + this.get_verticalSpacing();
				columnIndex = 0;
				++rowIndex;
			}
		}
	}
	,calcColumnWidths: function(usableSize,includePercentage) {
		var columnWidths = [];
		var _g = 0;
		var _g1 = this._columns;
		while(_g < _g1) {
			var _ = _g++;
			columnWidths.push(0);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentWidth() == null) {
				if(child.get_componentWidth() > columnWidths[columnIndex]) {
					columnWidths[columnIndex] = child.get_componentWidth();
				}
			}
			++columnIndex;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				++rowIndex;
			}
		}
		if(includePercentage) {
			rowIndex = 0;
			columnIndex = 0;
			var fullWidthsCounts = [0];
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.get_includeInLayout() == false) {
					continue;
				}
				if(child.get_percentWidth() != null && child.get_percentWidth() == 100) {
					fullWidthsCounts[rowIndex]++;
				}
				++columnIndex;
				if(columnIndex >= this._columns) {
					columnIndex = 0;
					++rowIndex;
					fullWidthsCounts.push(0);
				}
			}
			rowIndex = 0;
			columnIndex = 0;
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.get_includeInLayout() == false) {
					continue;
				}
				if(child.get_percentWidth() != null) {
					var childPercentWidth = child.get_percentWidth();
					if(childPercentWidth == 100 && fullWidthsCounts[rowIndex] != 0) {
						var f = fullWidthsCounts[rowIndex];
						if(rowIndex > 0 && fullWidthsCounts[rowIndex - 1] != 0) {
							f = fullWidthsCounts[rowIndex - 1];
						}
						childPercentWidth = 100 / f;
					}
					var cx = usableSize.width * childPercentWidth / 100;
					if(cx > columnWidths[columnIndex]) {
						columnWidths[columnIndex] = cx;
					}
				}
				++columnIndex;
				if(columnIndex >= this._columns) {
					columnIndex = 0;
					++rowIndex;
				}
			}
		}
		return columnWidths;
	}
	,calcRowHeights: function(usableSize,includePercentage) {
		var _this = this.get_component();
		var visibleChildren = (_this._children == null ? [] : _this._children).length;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				--visibleChildren;
			}
		}
		var rowCount = visibleChildren / this._columns | 0;
		if(visibleChildren % this._columns != 0) {
			++rowCount;
		}
		var rowHeights = [];
		var _g = 0;
		var _g1 = rowCount;
		while(_g < _g1) {
			var _ = _g++;
			rowHeights.push(0);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentHeight() == null) {
				if(child.get_height() > rowHeights[rowIndex]) {
					rowHeights[rowIndex] = child.get_height();
				}
			}
			++columnIndex;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				++rowIndex;
			}
		}
		if(includePercentage) {
			rowIndex = 0;
			columnIndex = 0;
			var newRow = true;
			var fullHeightRowCount = 0;
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.get_includeInLayout() == false) {
					continue;
				}
				if(child.get_percentHeight() != null && child.get_percentHeight() == 100) {
					if(newRow == true) {
						newRow = false;
						++fullHeightRowCount;
					}
				}
				++columnIndex;
				if(columnIndex >= this._columns) {
					columnIndex = 0;
					++rowIndex;
					newRow = true;
				}
			}
			rowIndex = 0;
			columnIndex = 0;
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.get_includeInLayout() == false) {
					continue;
				}
				if(child.get_percentHeight() != null) {
					var childPercentHeight = child.get_percentHeight();
					if(childPercentHeight == 100 && fullHeightRowCount > 1) {
						childPercentHeight = 100 / fullHeightRowCount;
					}
					var cy = usableSize.height * childPercentHeight / 100;
					if(cy > rowHeights[rowIndex]) {
						rowHeights[rowIndex] = cy;
					} else {
						var tmp = usableSize.height > rowHeights[rowIndex];
					}
				}
				++columnIndex;
				if(columnIndex >= this._columns) {
					columnIndex = 0;
					++rowIndex;
				}
			}
		}
		return rowHeights;
	}
	,calcExplicitWidths: function() {
		var explicitWidths = [];
		var _g = 0;
		var _g1 = this._columns;
		while(_g < _g1) {
			var _ = _g++;
			explicitWidths.push(false);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentWidth() == null && child.get_componentWidth() > 0) {
				explicitWidths[columnIndex] = true;
			}
			++columnIndex;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				++rowIndex;
			}
		}
		return explicitWidths;
	}
	,calcExplicitHeights: function() {
		var _this = this.get_component();
		var visibleChildren = (_this._children == null ? [] : _this._children).length;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				--visibleChildren;
			}
		}
		var rowCount = visibleChildren / this.get_columns() | 0;
		if(visibleChildren % this._columns != 0) {
			++rowCount;
		}
		var explicitHeights = [];
		var _g = 0;
		var _g1 = rowCount;
		while(_g < _g1) {
			var _ = _g++;
			explicitHeights.push(false);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentHeight() == null && child.get_componentHeight() > 0) {
				explicitHeights[columnIndex % this._columns] = true;
			}
			++columnIndex;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				++rowIndex;
			}
		}
		return explicitHeights;
	}
	,__class__: haxe_ui_layouts_VerticalGridLayout
	,__properties__: $extend(haxe_ui_layouts_Layout.prototype.__properties__,{set_columns:"set_columns",get_columns:"get_columns"})
});
var haxe_ui_components__$Calendar_Layout = function() {
	haxe_ui_layouts_VerticalGridLayout.call(this);
};
$hxClasses["haxe.ui.components._Calendar.Layout"] = haxe_ui_components__$Calendar_Layout;
haxe_ui_components__$Calendar_Layout.__name__ = "haxe.ui.components._Calendar.Layout";
haxe_ui_components__$Calendar_Layout.__super__ = haxe_ui_layouts_VerticalGridLayout;
haxe_ui_components__$Calendar_Layout.prototype = $extend(haxe_ui_layouts_VerticalGridLayout.prototype,{
	resizeChildren: function() {
		var max = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_layout() == null) {
				continue;
			}
			if(child.get_width() > child.get_layout().get_paddingLeft() + child.get_layout().get_paddingRight() && child.get_width() > max) {
				max = child.get_width();
			}
			if(child.get_width() > child.get_layout().get_paddingTop() + child.get_layout().get_paddingBottom() && child.get_height() > max) {
				max = child.get_height();
			}
		}
		if(max > 0) {
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.set_width(max);
				child.set_height(max);
			}
		}
	}
	,__class__: haxe_ui_components__$Calendar_Layout
});
var haxe_ui_core_IDataComponent = function() { };
$hxClasses["haxe.ui.core.IDataComponent"] = haxe_ui_core_IDataComponent;
haxe_ui_core_IDataComponent.__name__ = "haxe.ui.core.IDataComponent";
haxe_ui_core_IDataComponent.__isInterface__ = true;
haxe_ui_core_IDataComponent.prototype = {
	get_dataSource: null
	,set_dataSource: null
	,__class__: haxe_ui_core_IDataComponent
	,__properties__: {set_dataSource:"set_dataSource",get_dataSource:"get_dataSource"}
};
var haxe_ui_components_Canvas = function() {
	haxe_ui_core_Component.call(this);
	this.componentGraphics = new haxe_ui_graphics_ComponentGraphics(this);
};
$hxClasses["haxe.ui.components.Canvas"] = haxe_ui_components_Canvas;
haxe_ui_components_Canvas.__name__ = "haxe.ui.components.Canvas";
haxe_ui_components_Canvas.__interfaces__ = [haxe_ui_core_IDataComponent];
haxe_ui_components_Canvas.__super__ = haxe_ui_core_Component;
haxe_ui_components_Canvas.prototype = $extend(haxe_ui_core_Component.prototype,{
	componentGraphics: null
	,validateComponentLayout: function() {
		var b = haxe_ui_core_Component.prototype.validateComponentLayout.call(this);
		this.componentGraphics.resize(this.get_width(),this.get_height());
		return b;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if(this.get_dataSource() != null) {
			c.set_dataSource(this.get_dataSource());
		}
		var tmp = this.componentGraphics._drawCommands.slice();
		c.componentGraphics._drawCommands = tmp;
		c.componentGraphics.replayDrawCommands();
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
		this.behaviours.register("dataSource",haxe_ui_components__$Canvas_DataSourceBehaviour);
	}
	,get_dataSource: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toDataSource(this.behaviours.get("dataSource"));
	}
	,set_dataSource: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("dataSource",haxe_ui_util_Variant.fromDataSource(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"dataSource"));
		return value;
	}
	,self: function() {
		return new haxe_ui_components_Canvas();
	}
	,__class__: haxe_ui_components_Canvas
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{set_dataSource:"set_dataSource",get_dataSource:"get_dataSource"})
});
var haxe_ui_components__$Canvas_DataSourceBehaviour = function(canvas) {
	haxe_ui_behaviours_DataBehaviour.call(this,canvas);
	this._canvas = canvas;
};
$hxClasses["haxe.ui.components._Canvas.DataSourceBehaviour"] = haxe_ui_components__$Canvas_DataSourceBehaviour;
haxe_ui_components__$Canvas_DataSourceBehaviour.__name__ = "haxe.ui.components._Canvas.DataSourceBehaviour";
haxe_ui_components__$Canvas_DataSourceBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Canvas_DataSourceBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_canvas: null
	,validateData: function() {
		if(this._value != null) {
			var ds = haxe_ui_util_Variant.toDataSource(this._value);
			var g = this._canvas.componentGraphics;
			var _g = 0;
			var _g1 = ds.get_size();
			while(_g < _g1) {
				var i = _g++;
				var item = ds.get(i);
				switch(item.id) {
				case "circle":
					var x = parseFloat(item.x);
					var y = parseFloat(item.y);
					var radius = parseFloat(item.radius);
					g.circle(x,y,radius);
					break;
				case "clear":
					g.clear();
					break;
				case "fill-style":case "fillStyle":
					var color = item.color;
					var alpha = item.alpha != null ? parseFloat(item.alpha) : 1;
					g.fillStyle(haxe_ui_util_Color.fromString(color),alpha);
					break;
				case "image":
					var resource = item.resource;
					var x1 = parseFloat(item.x);
					var y1 = parseFloat(item.y);
					var width = parseFloat(item.width);
					var height = parseFloat(item.height);
					g.image(haxe_ui_util_Variant.fromString(resource),x1,y1,width,height);
					break;
				case "rectangle":
					var x2 = item.x != null ? parseFloat(item.x) : 0;
					var y2 = item.y != null ? parseFloat(item.y) : 0;
					var width1 = item.width != null ? parseFloat(item.width) : this._canvas.get_width();
					var height1 = item.height != null ? parseFloat(item.height) : this._canvas.get_height();
					g.rectangle(x2,y2,width1,height1);
					break;
				case "stroke-style":case "strokeStyle":
					var color1 = item.color;
					var thickness = item.thickness != null ? parseFloat(item.thickness) : 1;
					var alpha1 = item.alpha != null ? parseFloat(item.alpha) : 1;
					g.strokeStyle(haxe_ui_util_Color.fromString(color1),thickness,alpha1);
					break;
				default:
					haxe_Log.trace("unrecognised draw command: " + Std.string(item),{ fileName : "haxe/ui/components/Canvas.hx", lineNumber : 82, className : "haxe.ui.components._Canvas.DataSourceBehaviour", methodName : "validateData"});
				}
			}
		}
	}
	,__class__: haxe_ui_components__$Canvas_DataSourceBehaviour
});
var haxe_ui_components_CheckBox = function() {
	haxe_ui_core_InteractiveComponent.call(this);
};
$hxClasses["haxe.ui.components.CheckBox"] = haxe_ui_components_CheckBox;
haxe_ui_components_CheckBox.__name__ = "haxe.ui.components.CheckBox";
haxe_ui_components_CheckBox.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_components_CheckBox.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
		this.behaviours.register("text",haxe_ui_components__$CheckBox_TextBehaviour);
		this.behaviours.register("selected",haxe_ui_components__$CheckBox_SelectedBehaviour);
	}
	,get_selected: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("selected"));
	}
	,set_selected: function(value) {
		this.behaviours.set("selected",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"selected"));
		return value;
	}
	,get_value: function() {
		return this.get_selected();
	}
	,set_value: function(value) {
		this.set_selected(value);
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		c.set_selected(this.get_selected());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_components_CheckBox();
	}
	,registerComposite: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_components__$CheckBox_Events;
		this._compositeBuilderClass = haxe_ui_components_CheckBoxBuilder;
		this._defaultLayoutClass = haxe_ui_components__$CheckBox_CheckBoxLayout;
	}
	,__class__: haxe_ui_components_CheckBox
	,__properties__: $extend(haxe_ui_core_InteractiveComponent.prototype.__properties__,{set_selected:"set_selected",get_selected:"get_selected"})
});
var haxe_ui_components_CheckBoxValue = function() {
	this._down = true;
	haxe_ui_core_InteractiveComponent.call(this);
};
$hxClasses["haxe.ui.components.CheckBoxValue"] = haxe_ui_components_CheckBoxValue;
haxe_ui_components_CheckBoxValue.__name__ = "haxe.ui.components.CheckBoxValue";
haxe_ui_components_CheckBoxValue.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_components_CheckBoxValue.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	onReady: function() {
		this.createIcon();
		this.registerEvent("actionstart",$bind(this,this.onActionStart));
		this.registerEvent("actionend",$bind(this,this.onActionEnd));
	}
	,applyStyle: function(style) {
		haxe_ui_core_InteractiveComponent.prototype.applyStyle.call(this,style);
		var icon = this.findComponent(null,haxe_ui_components_Image);
		if(icon != null) {
			icon.set_resource(style.icon);
		}
	}
	,createIcon: function() {
		var icon = this.findComponent(null,haxe_ui_components_Image);
		if(icon == null && this.parentComponent != null) {
			icon = new haxe_ui_components_Image();
			icon.set_id("" + this.parentComponent.get_cssName() + "-icon");
			icon.addClass("" + this.parentComponent.get_cssName() + "-icon");
			if(this.get_style() != null && this.get_style().icon != null) {
				icon.set_resource(this.get_style().icon);
			}
			this.addComponent(icon);
		}
	}
	,_down: null
	,onActionStart: function(event) {
		switch(event.action) {
		case "actionConfirm":case "actionPress":
			this._down = true;
			break;
		default:
		}
	}
	,onActionEnd: function(event) {
		switch(event.action) {
		case "actionConfirm":case "actionPress":
			if(this._down == true) {
				this._down = false;
				if(this.parentComponent != null) {
					var checkbox = js_Boot.__cast(this.parentComponent , haxe_ui_components_CheckBox);
					checkbox.set_selected(!checkbox.get_selected());
				}
			}
			break;
		default:
		}
	}
	,registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_components_CheckBoxValue();
	}
	,__class__: haxe_ui_components_CheckBoxValue
});
var haxe_ui_components__$CheckBox_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._CheckBox.TextBehaviour"] = haxe_ui_components__$CheckBox_TextBehaviour;
haxe_ui_components__$CheckBox_TextBehaviour.__name__ = "haxe.ui.components._CheckBox.TextBehaviour";
haxe_ui_components__$CheckBox_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$CheckBox_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var label = this._component.findComponent(null,haxe_ui_components_Label,false);
		if(label == null) {
			label = new haxe_ui_components_Label();
			label.set_id("" + this._component.get_cssName() + "-label");
			label.addClass("" + this._component.get_cssName() + "-label");
			label.set_scriptAccess(false);
			this._component.addComponent(label);
			var _this = this._component;
			var force = true;
			if(force == null) {
				force = false;
			}
			_this.invalidateComponent("style",false);
			if(force == true) {
				_this._style = null;
			}
		}
		label.set_text(haxe_ui_util_Variant.toString(this._value));
	}
	,__class__: haxe_ui_components__$CheckBox_TextBehaviour
});
var haxe_ui_components__$CheckBox_SelectedBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._CheckBox.SelectedBehaviour"] = haxe_ui_components__$CheckBox_SelectedBehaviour;
haxe_ui_components__$CheckBox_SelectedBehaviour.__name__ = "haxe.ui.components._CheckBox.SelectedBehaviour";
haxe_ui_components__$CheckBox_SelectedBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$CheckBox_SelectedBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var valueComponent = this._component.findComponent(null,haxe_ui_components_CheckBoxValue);
		if(valueComponent == null) {
			return;
		}
		valueComponent.createIcon();
		if(haxe_ui_util_Variant.eq(this._value,haxe_ui_util_Variant.fromBool(true))) {
			valueComponent.addClass(":selected");
		} else {
			valueComponent.removeClass(":selected");
		}
		var event = new haxe_ui_events_UIEvent("change");
		event.previousValue = this._previousValue;
		event.value = this._value;
		this._component.dispatch(event);
	}
	,__class__: haxe_ui_components__$CheckBox_SelectedBehaviour
});
var haxe_ui_components__$CheckBox_Events = function(checkbox) {
	haxe_ui_events_Events.call(this,checkbox);
	this._checkbox = checkbox;
};
$hxClasses["haxe.ui.components._CheckBox.Events"] = haxe_ui_components__$CheckBox_Events;
haxe_ui_components__$CheckBox_Events.__name__ = "haxe.ui.components._CheckBox.Events";
haxe_ui_components__$CheckBox_Events.__super__ = haxe_ui_events_Events;
haxe_ui_components__$CheckBox_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_checkbox: null
	,register: function() {
		if(this.hasEvent("mouseover",$bind(this,this.onMouseOver)) == false) {
			this.registerEvent("mouseover",$bind(this,this.onMouseOver));
		}
		if(this.hasEvent("mouseout",$bind(this,this.onMouseOut)) == false) {
			this.registerEvent("mouseout",$bind(this,this.onMouseOut));
		}
		if(this.hasEvent("click",$bind(this,this.onClick)) == false) {
			this.registerEvent("click",$bind(this,this.onClick));
		}
		if(this.hasEvent("mousedown",$bind(this,this.onMouseDown)) == false) {
			this.registerEvent("mousedown",$bind(this,this.onMouseDown));
		}
	}
	,unregister: function() {
		this.unregisterEvent("mouseover",$bind(this,this.onMouseOver));
		this.unregisterEvent("mouseout",$bind(this,this.onMouseOut));
		this.unregisterEvent("click",$bind(this,this.onClick));
		this.unregisterEvent("mousedown",$bind(this,this.onMouseDown));
	}
	,onMouseOver: function(event) {
		this._target.addClass(":hover");
		this._target.findComponent(null,haxe_ui_components_CheckBoxValue).addClass(":hover");
	}
	,onMouseOut: function(event) {
		this._target.removeClass(":hover");
		this._target.findComponent(null,haxe_ui_components_CheckBoxValue).removeClass(":hover");
	}
	,onClick: function(event) {
		this._checkbox.set_selected(!this._checkbox.get_selected());
	}
	,onMouseDown: function(event) {
		this._checkbox.findComponent(null,haxe_ui_components_CheckBoxValue).set_focus(true);
	}
	,__class__: haxe_ui_components__$CheckBox_Events
});
var haxe_ui_components_CheckBoxBuilder = function(checkbox) {
	haxe_ui_core_CompositeBuilder.call(this,checkbox);
	this._checkbox = checkbox;
	this._checkbox.set_allowFocus(false);
};
$hxClasses["haxe.ui.components.CheckBoxBuilder"] = haxe_ui_components_CheckBoxBuilder;
haxe_ui_components_CheckBoxBuilder.__name__ = "haxe.ui.components.CheckBoxBuilder";
haxe_ui_components_CheckBoxBuilder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components_CheckBoxBuilder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_checkbox: null
	,create: function() {
		if(this._checkbox.findComponent(null,haxe_ui_components_CheckBoxValue) == null) {
			var value = new haxe_ui_components_CheckBoxValue();
			value.set_id("" + this._checkbox.get_cssName() + "-value");
			value.addClass("" + this._checkbox.get_cssName() + "-value");
			value.set_scriptAccess(false);
			this._checkbox.addComponent(value);
		}
	}
	,applyStyle: function(style) {
		var c = this._component.findComponent("" + this._checkbox.get_cssName() + "-label",haxe_ui_core_Component);
		if(c != null) {
			var invalidate = false;
			if(style.color != null && c.get_customStyle().color != style.color) {
				c.get_customStyle().color = style.color;
				invalidate = true;
			}
			if(style.fontName != null && c.get_customStyle().fontName != style.fontName) {
				c.get_customStyle().fontName = style.fontName;
				invalidate = true;
			}
			if(style.fontSize != null && c.get_customStyle().fontSize != style.fontSize) {
				c.get_customStyle().fontSize = style.fontSize;
				invalidate = true;
			}
			if(style.cursor != null && c.get_customStyle().cursor != style.cursor) {
				c.get_customStyle().cursor = style.cursor;
				invalidate = true;
			}
			if(style.textAlign != null && c.get_customStyle().textAlign != style.textAlign) {
				c.get_customStyle().textAlign = style.textAlign;
				invalidate = true;
			}
			if(style.fontBold != null && c.get_customStyle().fontBold != style.fontBold) {
				c.get_customStyle().fontBold = style.fontBold;
				invalidate = true;
			}
			if(style.fontUnderline != null && c.get_customStyle().fontUnderline != style.fontUnderline) {
				c.get_customStyle().fontUnderline = style.fontUnderline;
				invalidate = true;
			}
			if(style.fontItalic != null && c.get_customStyle().fontItalic != style.fontItalic) {
				c.get_customStyle().fontItalic = style.fontItalic;
				invalidate = true;
			}
			if(invalidate == true) {
				c.invalidateComponent("style",false);
			}
		}
	}
	,get_cssName: function() {
		return "checkbox";
	}
	,__class__: haxe_ui_components_CheckBoxBuilder
});
var haxe_ui_layouts_HorizontalLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
	this._calcFullWidths = true;
	this._roundFullWidths = true;
};
$hxClasses["haxe.ui.layouts.HorizontalLayout"] = haxe_ui_layouts_HorizontalLayout;
haxe_ui_layouts_HorizontalLayout.__name__ = "haxe.ui.layouts.HorizontalLayout";
haxe_ui_layouts_HorizontalLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_layouts_HorizontalLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	repositionChildren: function() {
		var xpos = this.get_paddingLeft();
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var ypos = 0;
			switch(this.verticalAlign(child)) {
			case "bottom":
				if(child.get_componentHeight() < this.get_component().get_componentHeight()) {
					ypos = this.get_component().get_componentHeight() - (child.get_componentHeight() + this.get_paddingBottom() + this.marginTop(child));
				}
				break;
			case "center":
				ypos = (this.get_component().get_componentHeight() - child.get_componentHeight()) / 2 + this.marginTop(child) - this.marginBottom(child);
				break;
			default:
				ypos = this.get_paddingTop() + this.marginTop(child);
			}
			child.moveComponent(xpos + this.marginLeft(child),ypos);
			xpos += child.get_componentWidth() + this.get_horizontalSpacing();
		}
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_DefaultLayout.prototype.get_usableSize.call(this);
		var _this = this.get_component();
		var visibleChildren = (_this._children == null ? [] : _this._children).length;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				--visibleChildren;
				continue;
			}
			if(child.get_componentWidth() > 0 && (child.get_percentWidth() == null || this.fixedMinWidth(child) == true)) {
				size.width -= child.get_componentWidth() + this.marginLeft(child) + this.marginRight(child);
			}
		}
		if(visibleChildren > 1) {
			size.width -= this.get_horizontalSpacing() * (visibleChildren - 1);
		}
		if(size.width < 0) {
			size.width = 0;
		}
		return size;
	}
	,__class__: haxe_ui_layouts_HorizontalLayout
});
var haxe_ui_components__$CheckBox_CheckBoxLayout = function() {
	haxe_ui_layouts_HorizontalLayout.call(this);
};
$hxClasses["haxe.ui.components._CheckBox.CheckBoxLayout"] = haxe_ui_components__$CheckBox_CheckBoxLayout;
haxe_ui_components__$CheckBox_CheckBoxLayout.__name__ = "haxe.ui.components._CheckBox.CheckBoxLayout";
haxe_ui_components__$CheckBox_CheckBoxLayout.__super__ = haxe_ui_layouts_HorizontalLayout;
haxe_ui_components__$CheckBox_CheckBoxLayout.prototype = $extend(haxe_ui_layouts_HorizontalLayout.prototype,{
	repositionChildren: function() {
		haxe_ui_layouts_HorizontalLayout.prototype.repositionChildren.call(this);
		var icon = this._component.findComponent(null,haxe_ui_components_Image,true);
		if(icon != null) {
			icon.set_left(Math.round(icon.get_left()));
			icon.set_top(Math.round(icon.get_top()));
		}
	}
	,calcAutoSize: function(exclusions) {
		var size = haxe_ui_layouts_HorizontalLayout.prototype.calcAutoSize.call(this,exclusions);
		if(this._component.get_autoWidth() == false) {
			var label = this._component.findComponent(null,haxe_ui_components_Label,false);
			if(label != null) {
				label.set_percentWidth(100);
			}
		}
		return size;
	}
	,__class__: haxe_ui_components__$CheckBox_CheckBoxLayout
});
var haxe_ui_components_DropDown = function() {
	this._itemRenderer = null;
	haxe_ui_components_Button.call(this);
};
$hxClasses["haxe.ui.components.DropDown"] = haxe_ui_components_DropDown;
haxe_ui_components_DropDown.__name__ = "haxe.ui.components.DropDown";
haxe_ui_components_DropDown.__interfaces__ = [haxe_ui_core_IDataComponent];
haxe_ui_components_DropDown.__super__ = haxe_ui_components_Button;
haxe_ui_components_DropDown.prototype = $extend(haxe_ui_components_Button.prototype,{
	hideDropDown: function() {
		if(this.behaviours == null) {
			return null;
		}
		return this.behaviours.call("hideDropDown",null);
	}
	,showDropDown: function() {
		if(this.behaviours == null) {
			return null;
		}
		return this.behaviours.call("showDropDown",null);
	}
	,_itemRenderer: null
	,get_itemRenderer: function() {
		return this._itemRenderer;
	}
	,set_itemRenderer: function(value) {
		this._itemRenderer = value;
		return value;
	}
	,onThemeChanged: function() {
		haxe_ui_components_Button.prototype.onThemeChanged.call(this);
		var builder = js_Boot.__cast(this._compositeBuilder , haxe_ui_components_DropDownBuilder);
		builder.onThemeChanged();
	}
	,postCloneComponent: function(c) {
		haxe_ui_components_Button.prototype.postCloneComponent.call(this,c);
		if(this._itemRenderer != null) {
			c.addComponent(this._itemRenderer.cloneComponent());
		}
	}
	,registerComposite: function() {
		haxe_ui_components_Button.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_components_DropDownEvents;
		this._compositeBuilderClass = haxe_ui_components_DropDownBuilder;
	}
	,registerBehaviours: function() {
		haxe_ui_components_Button.prototype.registerBehaviours.call(this);
		this.behaviours.register("handlerStyleNames",haxe_ui_behaviours_DefaultBehaviour);
		this.behaviours.register("dataSource",haxe_ui_components__$DropDown_DataSourceBehaviour);
		this.behaviours.register("type",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromString("list"));
		this.behaviours.register("virtual",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("dropdownWidth",haxe_ui_behaviours_DefaultBehaviour);
		this.behaviours.register("dropdownHeight",haxe_ui_behaviours_DefaultBehaviour);
		this.behaviours.register("dropdownSize",haxe_ui_behaviours_DefaultBehaviour);
		this.behaviours.register("selectedIndex",haxe_ui_components__$DropDown_SelectedIndexBehaviour,haxe_ui_util_Variant.fromInt(-1));
		this.behaviours.register("selectedItem",haxe_ui_components__$DropDown_SelectedItemBehaviour);
		this.behaviours.register("searchable",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("searchPrompt",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromString("{{search}}"));
		this.behaviours.register("searchField",haxe_ui_components__$DropDown_SearchFieldBehaviour);
		this.behaviours.register("hideDropDown",haxe_ui_components__$DropDown_HideDropDown);
		this.behaviours.register("showDropDown",haxe_ui_components__$DropDown_ShowDropDown);
	}
	,get_handlerStyleNames: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("handlerStyleNames"));
	}
	,set_handlerStyleNames: function(value) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			if(_g.c == String) {
				if(value != null && value.indexOf("{{") != -1 && value.indexOf("}}") != -1) {
					haxe_ui_locale_LocaleManager.get_instance().registerComponent(this,"handlerStyleNames",null,value);
					return value;
				}
			}
		}
		this.behaviours.set("handlerStyleNames",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"handlerStyleNames"));
		return value;
	}
	,get_dataSource: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toDataSource(this.behaviours.get("dataSource"));
	}
	,set_dataSource: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("dataSource",haxe_ui_util_Variant.fromDataSource(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"dataSource"));
		return value;
	}
	,get_type: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("type"));
	}
	,set_type: function(value) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			if(_g.c == String) {
				if(value != null && value.indexOf("{{") != -1 && value.indexOf("}}") != -1) {
					haxe_ui_locale_LocaleManager.get_instance().registerComponent(this,"type",null,value);
					return value;
				}
			}
		}
		this.behaviours.set("type",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"type"));
		return value;
	}
	,get_virtual: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("virtual"));
	}
	,set_virtual: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("virtual",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"virtual"));
		return value;
	}
	,get_dropdownWidth: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("dropdownWidth"));
	}
	,set_dropdownWidth: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("dropdownWidth",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"dropdownWidth"));
		return value;
	}
	,get_dropdownHeight: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("dropdownHeight"));
	}
	,set_dropdownHeight: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("dropdownHeight",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"dropdownHeight"));
		return value;
	}
	,get_dropdownSize: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toInt(this.behaviours.get("dropdownSize"));
	}
	,set_dropdownSize: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("dropdownSize",haxe_ui_util_Variant.fromInt(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"dropdownSize"));
		return value;
	}
	,get_selectedIndex: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toInt(this.behaviours.get("selectedIndex"));
	}
	,set_selectedIndex: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("selectedIndex",haxe_ui_util_Variant.fromInt(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"selectedIndex"));
		return value;
	}
	,get_selectedItem: function() {
		return this.behaviours.getDynamic("selectedItem");
	}
	,set_selectedItem: function(value) {
		this.behaviours.setDynamic("selectedItem",value);
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"selectedItem"));
		return value;
	}
	,get_searchable: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("searchable"));
	}
	,set_searchable: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("searchable",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"searchable"));
		return value;
	}
	,get_searchPrompt: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("searchPrompt"));
	}
	,set_searchPrompt: function(value) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			if(_g.c == String) {
				if(value != null && value.indexOf("{{") != -1 && value.indexOf("}}") != -1) {
					haxe_ui_locale_LocaleManager.get_instance().registerComponent(this,"searchPrompt",null,value);
					return value;
				}
			}
		}
		this.behaviours.set("searchPrompt",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"searchPrompt"));
		return value;
	}
	,get_searchField: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toComponent(this.behaviours.get("searchField"));
	}
	,set_searchField: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("searchField",haxe_ui_util_Variant.fromComponent(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"searchField"));
		return value;
	}
	,get_value: function() {
		return this.get_selectedItem();
	}
	,set_value: function(value) {
		this.set_selectedItem(value);
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Button.prototype.cloneComponent.call(this);
		if(this.get_itemRenderer() != null) {
			c.set_itemRenderer(this.get_itemRenderer());
		}
		if(this.get_handlerStyleNames() != null) {
			c.set_handlerStyleNames(this.get_handlerStyleNames());
		}
		if(this.get_dataSource() != null) {
			c.set_dataSource(this.get_dataSource());
		}
		if(this.get_type() != null) {
			c.set_type(this.get_type());
		}
		c.set_virtual(this.get_virtual());
		if(this.get_dropdownWidth() != null) {
			c.set_dropdownWidth(this.get_dropdownWidth());
		}
		if(this.get_dropdownHeight() != null) {
			c.set_dropdownHeight(this.get_dropdownHeight());
		}
		if(this.get_dropdownSize() != null) {
			c.set_dropdownSize(this.get_dropdownSize());
		}
		c.set_selectedIndex(this.get_selectedIndex());
		if(this.get_selectedItem() != null) {
			c.set_selectedItem(this.get_selectedItem());
		}
		c.set_searchable(this.get_searchable());
		if(this.get_searchPrompt() != null) {
			c.set_searchPrompt(this.get_searchPrompt());
		}
		if(this.get_searchField() != null) {
			c.set_searchField(this.get_searchField());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_components_DropDown();
	}
	,__class__: haxe_ui_components_DropDown
	,__properties__: $extend(haxe_ui_components_Button.prototype.__properties__,{set_searchField:"set_searchField",get_searchField:"get_searchField",set_searchPrompt:"set_searchPrompt",get_searchPrompt:"get_searchPrompt",set_searchable:"set_searchable",get_searchable:"get_searchable",set_selectedItem:"set_selectedItem",get_selectedItem:"get_selectedItem",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",set_dropdownSize:"set_dropdownSize",get_dropdownSize:"get_dropdownSize",set_dropdownHeight:"set_dropdownHeight",get_dropdownHeight:"get_dropdownHeight",set_dropdownWidth:"set_dropdownWidth",get_dropdownWidth:"get_dropdownWidth",set_virtual:"set_virtual",get_virtual:"get_virtual",set_type:"set_type",get_type:"get_type",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource",set_handlerStyleNames:"set_handlerStyleNames",get_handlerStyleNames:"get_handlerStyleNames",set_itemRenderer:"set_itemRenderer",get_itemRenderer:"get_itemRenderer"})
});
var haxe_ui_components__$DropDown_HideDropDown = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._DropDown.HideDropDown"] = haxe_ui_components__$DropDown_HideDropDown;
haxe_ui_components__$DropDown_HideDropDown.__name__ = "haxe.ui.components._DropDown.HideDropDown";
haxe_ui_components__$DropDown_HideDropDown.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_components__$DropDown_HideDropDown.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	call: function(param) {
		var events = js_Boot.__cast(this._component._internalEvents , haxe_ui_components_DropDownEvents);
		events.hideDropDown();
		return null;
	}
	,__class__: haxe_ui_components__$DropDown_HideDropDown
});
var haxe_ui_components__$DropDown_ShowDropDown = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._DropDown.ShowDropDown"] = haxe_ui_components__$DropDown_ShowDropDown;
haxe_ui_components__$DropDown_ShowDropDown.__name__ = "haxe.ui.components._DropDown.ShowDropDown";
haxe_ui_components__$DropDown_ShowDropDown.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_components__$DropDown_ShowDropDown.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	call: function(param) {
		var events = js_Boot.__cast(this._component._internalEvents , haxe_ui_components_DropDownEvents);
		events.showDropDown();
		return null;
	}
	,__class__: haxe_ui_components__$DropDown_ShowDropDown
});
var haxe_ui_components__$DropDown_DataSourceBehaviour = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._DropDown.DataSourceBehaviour"] = haxe_ui_components__$DropDown_DataSourceBehaviour;
haxe_ui_components__$DropDown_DataSourceBehaviour.__name__ = "haxe.ui.components._DropDown.DataSourceBehaviour";
haxe_ui_components__$DropDown_DataSourceBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_components__$DropDown_DataSourceBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	get: function() {
		if(this._value == null || haxe_ui_util_Variant.get_isNull(this._value) == true) {
			this._value = haxe_ui_util_Variant.fromDataSource(new haxe_ui_data_ArrayDataSource());
		}
		return this._value;
	}
	,set: function(value) {
		haxe_ui_behaviours_DefaultBehaviour.prototype.set.call(this,value);
		if(haxe_ui_util_Variant.eq(value,this._value)) {
			return;
		}
		var handler = (js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		handler.reset();
		if(this._component.get_text() == null && this._component.get_isReady()) {
			(js_Boot.__cast(this._component , haxe_ui_components_DropDown)).set_selectedIndex(0);
		}
	}
	,__class__: haxe_ui_components__$DropDown_DataSourceBehaviour
});
var haxe_ui_components__$DropDown_SelectedIndexBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._DropDown.SelectedIndexBehaviour"] = haxe_ui_components__$DropDown_SelectedIndexBehaviour;
haxe_ui_components__$DropDown_SelectedIndexBehaviour.__name__ = "haxe.ui.components._DropDown.SelectedIndexBehaviour";
haxe_ui_components__$DropDown_SelectedIndexBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$DropDown_SelectedIndexBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var handler = (js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		handler.set_selectedIndex(haxe_ui_util_Variant.toInt(this._value));
	}
	,get: function() {
		if(this._component.get_isReady() == false) {
			return haxe_ui_behaviours_DataBehaviour.prototype.get.call(this);
		}
		var handler = (js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		return haxe_ui_util_Variant.fromInt(handler.get_selectedIndex());
	}
	,set: function(value) {
		if(this._component.get_isReady() == false) {
			haxe_ui_behaviours_DataBehaviour.prototype.set.call(this,value);
			return;
		}
		if(haxe_ui_util_Variant.eq(value,this.get())) {
			return;
		}
		this._value = value;
		this.invalidateData();
		var handler = (js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		handler.set_selectedIndex(haxe_ui_util_Variant.toInt(this._value));
	}
	,__class__: haxe_ui_components__$DropDown_SelectedIndexBehaviour
});
var haxe_ui_components__$DropDown_SelectedItemBehaviour = function(component) {
	haxe_ui_behaviours_DynamicDataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._DropDown.SelectedItemBehaviour"] = haxe_ui_components__$DropDown_SelectedItemBehaviour;
haxe_ui_components__$DropDown_SelectedItemBehaviour.__name__ = "haxe.ui.components._DropDown.SelectedItemBehaviour";
haxe_ui_components__$DropDown_SelectedItemBehaviour.__super__ = haxe_ui_behaviours_DynamicDataBehaviour;
haxe_ui_components__$DropDown_SelectedItemBehaviour.prototype = $extend(haxe_ui_behaviours_DynamicDataBehaviour.prototype,{
	validateData: function() {
		var handler = (js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		handler.set_selectedItem(this._value);
	}
	,getDynamic: function() {
		var handler = (js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		return handler.get_selectedItem();
	}
	,setDynamic: function(value) {
		if(this._component.get_isReady() == false) {
			haxe_ui_behaviours_DynamicDataBehaviour.prototype.setDynamic.call(this,value);
			return;
		}
		this._value = value;
		this.invalidateData();
		var handler = (js_Boot.__cast(this._component._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		handler.set_selectedItem(value);
	}
	,__class__: haxe_ui_components__$DropDown_SelectedItemBehaviour
});
var haxe_ui_components__$DropDown_SearchFieldBehaviour = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._DropDown.SearchFieldBehaviour"] = haxe_ui_components__$DropDown_SearchFieldBehaviour;
haxe_ui_components__$DropDown_SearchFieldBehaviour.__name__ = "haxe.ui.components._DropDown.SearchFieldBehaviour";
haxe_ui_components__$DropDown_SearchFieldBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_components__$DropDown_SearchFieldBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	get: function() {
		var events = js_Boot.__cast(this._component._internalEvents , haxe_ui_components_DropDownEvents);
		return haxe_ui_util_Variant.fromComponent(events.get_searchField());
	}
	,set: function(value) {
		var events = js_Boot.__cast(this._component._internalEvents , haxe_ui_components_DropDownEvents);
		events.set_searchField(haxe_ui_util_Variant.toComponent(value));
	}
	,__class__: haxe_ui_components__$DropDown_SearchFieldBehaviour
});
var haxe_ui_components_IDropDownHandler = function() { };
$hxClasses["haxe.ui.components.IDropDownHandler"] = haxe_ui_components_IDropDownHandler;
haxe_ui_components_IDropDownHandler.__name__ = "haxe.ui.components.IDropDownHandler";
haxe_ui_components_IDropDownHandler.__isInterface__ = true;
haxe_ui_components_IDropDownHandler.prototype = {
	get_component: null
	,get_selectedIndex: null
	,set_selectedIndex: null
	,get_selectedItem: null
	,set_selectedItem: null
	,component: null
	,prepare: null
	,reset: null
	,applyDefault: null
	,pauseEvents: null
	,resumeEvents: null
	,__class__: haxe_ui_components_IDropDownHandler
	,__properties__: {set_selectedItem:"set_selectedItem",get_selectedItem:"get_selectedItem",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",get_component:"get_component"}
};
var haxe_ui_components_DropDownHandler = function(dropdown) {
	this.eventsPaused = false;
	this._dropdown = dropdown;
};
$hxClasses["haxe.ui.components.DropDownHandler"] = haxe_ui_components_DropDownHandler;
haxe_ui_components_DropDownHandler.__name__ = "haxe.ui.components.DropDownHandler";
haxe_ui_components_DropDownHandler.__interfaces__ = [haxe_ui_components_IDropDownHandler];
haxe_ui_components_DropDownHandler.prototype = {
	_dropdown: null
	,component: null
	,get_component: function() {
		return null;
	}
	,prepare: function(wrapper) {
	}
	,reset: function() {
	}
	,get_selectedIndex: function() {
		return -1;
	}
	,set_selectedIndex: function(value) {
		return value;
	}
	,get_selectedItem: function() {
		return null;
	}
	,set_selectedItem: function(value) {
		return value;
	}
	,applyDefault: function() {
	}
	,eventsPaused: null
	,pauseEvents: function() {
		this.eventsPaused = true;
	}
	,resumeEvents: function() {
		var _gthis = this;
		haxe_ui_Toolkit.callLater(function() {
			_gthis.eventsPaused = false;
		});
	}
	,__class__: haxe_ui_components_DropDownHandler
	,__properties__: {set_selectedItem:"set_selectedItem",get_selectedItem:"get_selectedItem",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",get_component:"get_component"}
};
var haxe_ui_components__$DropDown_ListDropDownHandler = function(dropdown) {
	this._cachedSelectedItem = null;
	this._cachedSelectedIndex = -1;
	haxe_ui_components_DropDownHandler.call(this,dropdown);
};
$hxClasses["haxe.ui.components._DropDown.ListDropDownHandler"] = haxe_ui_components__$DropDown_ListDropDownHandler;
haxe_ui_components__$DropDown_ListDropDownHandler.__name__ = "haxe.ui.components._DropDown.ListDropDownHandler";
haxe_ui_components__$DropDown_ListDropDownHandler.__super__ = haxe_ui_components_DropDownHandler;
haxe_ui_components__$DropDown_ListDropDownHandler.prototype = $extend(haxe_ui_components_DropDownHandler.prototype,{
	_listview: null
	,get_component: function() {
		this.createListView();
		return this._listview;
	}
	,reset: function() {
		if(this._listview != null) {
			this._listview.set_dataSource(this._dropdown.get_dataSource());
		}
	}
	,prepare: function(wrapper) {
		var itemCount = 4;
		if(this._dropdown.get_dropdownSize() != null) {
			itemCount = this._dropdown.get_dropdownSize();
		}
		if(this._listview.get_dataSource() != null && this._listview.get_dataSource().get_size() < itemCount) {
			itemCount = this._listview.get_dataSource().get_size();
		}
		if(itemCount > 0 && this._dropdown.get_dropdownHeight() == null) {
			this._listview.set_itemCount(itemCount);
		}
		this._listview.syncComponentValidation();
		if(this._dropdown.get_dropdownWidth() == null) {
			wrapper.syncComponentValidation();
			var offset = 0;
			if(wrapper.get_layout() != null) {
				offset = wrapper.get_layout().get_paddingLeft() + wrapper.get_layout().get_paddingRight();
			}
			this._listview.set_width(this._dropdown.get_width() - offset);
		} else {
			this._listview.set_width(this._dropdown.get_dropdownWidth());
		}
		if(this._dropdown.get_dropdownHeight() != null) {
			this._listview.set_height(this._dropdown.get_dropdownHeight());
		}
		var selectedIndex = this._dropdown.get_selectedIndex();
		if(this._dropdown.get_dataSource() != null && this._dropdown.get_text() != null && selectedIndex < 0) {
			var text = this._dropdown.get_text();
			var itemIndex = this.indexOfItem(text);
			if(itemIndex != -1) {
				selectedIndex = itemIndex;
			}
		}
		this._listview.unregisterEvent("change",$bind(this,this.onListChange));
		this._listview.set_selectedIndex(selectedIndex);
		this._listview.syncComponentValidation();
		this._listview.registerEvent("change",$bind(this,this.onListChange));
	}
	,_cachedSelectedIndex: null
	,get_selectedIndex: function() {
		if(this._listview == null) {
			return this._cachedSelectedIndex;
		}
		return this._listview.get_selectedIndex();
	}
	,set_selectedIndex: function(value) {
		var data = null;
		var dispatchChanged = false;
		if(this._listview != null && this._cachedSelectedIndex != value) {
			this._cachedSelectedIndex = value;
			this._listview.set_selectedIndex(value);
		} else if(this._cachedSelectedIndex != value) {
			this._cachedSelectedIndex = value;
			if(this._dropdown.get_dataSource() != null && value >= 0 && value < this._dropdown.get_dataSource().get_size()) {
				data = this._dropdown.get_dataSource().get(value);
			}
			dispatchChanged = true;
		}
		if(this._dropdown.get_dataSource() != null && value >= 0 && value < this._dropdown.get_dataSource().get_size()) {
			var data1 = this._dropdown.get_dataSource().get(value);
			var itemRenderer = this._dropdown.findComponent(null,haxe_ui_core_ItemRenderer);
			if(itemRenderer == null) {
				var text = null;
				if(Type.typeof(data1) == ValueType.TObject) {
					text = data1.text;
					if(text == null) {
						text = data1.value;
					}
				} else {
					text = Std.string(data1);
				}
				this._dropdown.set_text(text);
			} else {
				itemRenderer.set_data(data1);
			}
		}
		if(dispatchChanged) {
			var event = new haxe_ui_events_UIEvent("change",false,data);
			event.value = haxe_ui_util_Variant.fromDynamic(data);
			this._dropdown.dispatch(event);
		}
		return value;
	}
	,indexOfItem: function(text) {
		if(text == null) {
			return -1;
		}
		var index = -1;
		if(this._dropdown.get_dataSource() != null) {
			var _g = 0;
			var _g1 = this._dropdown.get_dataSource().get_size();
			while(_g < _g1) {
				var i = _g++;
				var item = this._dropdown.get_dataSource().get(i);
				if(item == text || item.value == text || item.text == text) {
					index = i;
				}
			}
		}
		if(index == -1 && this._dropdown.get_dataSource() != null) {
			var expr = haxe_ui_locale_LocaleManager.get_instance().findBindingExpr(this._dropdown,"text");
			if(expr != null) {
				text = expr;
				var _g = 0;
				var _g1 = this._dropdown.get_dataSource().get_size();
				while(_g < _g1) {
					var i = _g++;
					var item = this._dropdown.get_dataSource().get(i);
					if(item == text || item.value == text || item.text == text) {
						index = i;
					}
				}
			}
		}
		return index;
	}
	,get_selectedItem: function() {
		if(this._listview == null) {
			if(this._cachedSelectedIndex >= 0 && this._cachedSelectedIndex < this._dropdown.get_dataSource().get_size()) {
				var data = this._dropdown.get_dataSource().get(this._cachedSelectedIndex);
				return data;
			} else {
				return this._cachedSelectedItem;
			}
		}
		return this._listview.get_selectedItem();
	}
	,_cachedSelectedItem: null
	,set_selectedItem: function(value) {
		if(value == null) {
			return value;
		}
		var text = null;
		if(Type.typeof(value) == ValueType.TObject) {
			text = value.text;
			if(text == null) {
				text = value.value;
			}
		} else {
			text = Std.string(value);
		}
		var index = this.indexOfItem(text);
		this.set_selectedIndex(index);
		return value;
	}
	,createListView: function() {
		var _gthis = this;
		if(this._listview == null) {
			this._listview = new haxe_ui_containers_ListView();
			if(this._dropdown.get_itemRenderer() != null) {
				this._listview.addComponent(this._dropdown.get_itemRenderer());
			}
			this._listview.componentTabIndex = -1;
			this._listview.set_virtual(this._dropdown.get_virtual());
			this._listview.set_dataSource(this._dropdown.get_dataSource());
			if(this._cachedSelectedIndex != -1) {
				this._listview.set_selectedIndex(this._cachedSelectedIndex);
			}
			if(this._dropdown.get_id() != null) {
				this._listview.addClass(this._dropdown.get_id() + "-listview");
				this._listview.set_id(this._dropdown.get_id() + "_listview");
			}
			this._listview.registerEvent("actionstart",function(e) {
				switch(e.action) {
				case "actionBack":case "actionCancel":
					e.cancel();
					(js_Boot.__cast(_gthis._dropdown._internalEvents , haxe_ui_components_DropDownEvents)).hideDropDown();
					break;
				case "actionConfirm":case "actionPress":
					e.cancel();
					_gthis.applySelection();
					break;
				default:
				}
			});
		}
	}
	,onListChange: function(event) {
		if(((event.relatedEvent) instanceof haxe_ui_events_MouseEvent)) {
			this.applySelection();
		}
	}
	,applySelection: function() {
		if(this._listview.get_selectedItem() == null) {
			return;
		}
		var currentHover = this._listview.findComponent(":hover",null,true,"css");
		if(currentHover != null) {
			currentHover.removeClass(":hover");
		}
		var selectedItem = this._listview.get_selectedItem();
		var itemRenderer = this._dropdown.findComponent(null,haxe_ui_core_ItemRenderer);
		if(itemRenderer == null) {
			var text = null;
			if(Type.typeof(selectedItem) == ValueType.TObject) {
				text = this._listview.get_selectedItem().text;
				if(text == null) {
					text = this._listview.get_selectedItem().value;
				}
			} else {
				text = Std.string(selectedItem);
			}
			this._dropdown.set_text(text);
		} else {
			itemRenderer.set_data(selectedItem);
		}
		if(this.eventsPaused == false) {
			(js_Boot.__cast(this._dropdown._internalEvents , haxe_ui_components_DropDownEvents)).hideDropDown();
			var event = new haxe_ui_events_UIEvent("change",false,selectedItem);
			event.value = haxe_ui_util_Variant.fromDynamic(selectedItem);
			this._dropdown.dispatch(event);
		}
	}
	,applyDefault: function() {
		var indexToSelect = 0;
		if(this._cachedSelectedItem != null) {
			var index = this.indexOfItem(this._cachedSelectedItem);
			if(index != -1) {
				indexToSelect = index;
			}
		} else if(this._cachedSelectedIndex != -1) {
			indexToSelect = this._cachedSelectedIndex;
		}
		this._dropdown.set_selectedIndex(indexToSelect);
	}
	,__class__: haxe_ui_components__$DropDown_ListDropDownHandler
});
var haxe_ui_components_CalendarDropDownHandler = function(dropdown) {
	this._cachedSelectedDate = null;
	haxe_ui_components_DropDownHandler.call(this,dropdown);
};
$hxClasses["haxe.ui.components.CalendarDropDownHandler"] = haxe_ui_components_CalendarDropDownHandler;
haxe_ui_components_CalendarDropDownHandler.__name__ = "haxe.ui.components.CalendarDropDownHandler";
haxe_ui_components_CalendarDropDownHandler.__super__ = haxe_ui_components_DropDownHandler;
haxe_ui_components_CalendarDropDownHandler.prototype = $extend(haxe_ui_components_DropDownHandler.prototype,{
	_calendar: null
	,get_component: function() {
		if(this._calendar == null) {
			this._calendar = new haxe_ui_containers_CalendarView();
			if(this._dropdown.get_id() != null) {
				this._calendar.addClass(this._dropdown.get_id() + "-calendar");
				this._calendar.set_id(this._dropdown.get_id() + "_calendar");
			}
			this._calendar.registerEvent("change",$bind(this,this.onCalendarChange));
		}
		return this._calendar;
	}
	,prepare: function(wrapper) {
		if(this._dropdown.get_dropdownWidth() != null) {
			this._calendar.set_width(this._dropdown.get_dropdownWidth());
		}
		if(this._dropdown.get_dropdownHeight() != null) {
			this._calendar.set_height(this._dropdown.get_dropdownHeight());
		}
		if(this._cachedSelectedDate != null) {
			this._calendar.unregisterEvent("change",$bind(this,this.onCalendarChange));
			this._calendar.set_selectedDate(this._cachedSelectedDate);
			this._calendar.registerEvent("change",$bind(this,this.onCalendarChange));
		}
		this._calendar.syncComponentValidation();
	}
	,_cachedSelectedDate: null
	,get_selectedItem: function() {
		if(this._calendar == null) {
			return this._cachedSelectedDate;
		}
		return this._calendar.get_selectedDate();
	}
	,set_selectedItem: function(value) {
		if(value == null) {
			return value;
		}
		var date = null;
		if(((value) instanceof Date)) {
			date = js_Boot.__cast(value , Date);
		} else {
			date = HxOverrides.strDate(Std.string(value));
		}
		if(this._calendar != null && date != null) {
			if(HxOverrides.dateStr(date) == HxOverrides.dateStr(this._calendar.get_selectedDate())) {
				this._dropdown.set_text(DateTools.format(date,haxe_ui_locale_Formats.get_dateFormatShort()));
				return value;
			}
			this._cachedSelectedDate = date;
			this._calendar.set_selectedDate(date);
		} else if(date != null) {
			this._cachedSelectedDate = date;
			this._dropdown.set_text(DateTools.format(this._cachedSelectedDate,haxe_ui_locale_Formats.get_dateFormatShort()));
		}
		return value;
	}
	,onCalendarChange: function(event) {
		if(this._calendar.get_selectedDate() == null) {
			return;
		}
		this._cachedSelectedDate = this._calendar.get_selectedDate();
		this._dropdown.set_text(DateTools.format(this._calendar.get_selectedDate(),haxe_ui_locale_Formats.get_dateFormatShort()));
		(js_Boot.__cast(this._dropdown._internalEvents , haxe_ui_components_DropDownEvents)).hideDropDown();
		this._dropdown.dispatch(new haxe_ui_events_UIEvent("change",false,this._calendar.get_selectedDate()));
	}
	,applyDefault: function() {
		var now = new Date();
		this._dropdown.set_selectedItem(now);
	}
	,__class__: haxe_ui_components_CalendarDropDownHandler
});
var haxe_ui_components_DropDownEvents = function(dropdown) {
	this._lastSearchTerm = "";
	this._searchField = null;
	this._wrapper = null;
	this._overlay = null;
	haxe_ui_components_ButtonEvents.call(this,dropdown);
	this._dropdown = dropdown;
};
$hxClasses["haxe.ui.components.DropDownEvents"] = haxe_ui_components_DropDownEvents;
haxe_ui_components_DropDownEvents.__name__ = "haxe.ui.components.DropDownEvents";
haxe_ui_components_DropDownEvents.__super__ = haxe_ui_components_ButtonEvents;
haxe_ui_components_DropDownEvents.prototype = $extend(haxe_ui_components_ButtonEvents.prototype,{
	_dropdown: null
	,register: function() {
		haxe_ui_components_ButtonEvents.prototype.register.call(this);
		this.registerEvent("mousedown",$bind(this,this.onClick));
	}
	,unregister: function() {
		haxe_ui_components_ButtonEvents.prototype.unregister.call(this);
		this.unregisterEvent("mousedown",$bind(this,this.onClick));
	}
	,onClick: function(event) {
		this._dropdown.set_selected(!this._dropdown.get_selected());
		if(this._dropdown.get_selected() == true) {
			this.showDropDown();
		} else {
			this.hideDropDown();
		}
	}
	,onMouseClick: function(event) {
	}
	,_overlay: null
	,_wrapper: null
	,showDropDown: function() {
		var handler = (js_Boot.__cast(this._dropdown._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		if(handler == null) {
			return;
		}
		if(this._wrapper == null) {
			this._wrapper = new haxe_ui_containers_Box();
			this._wrapper.addClass("popup");
			this._wrapper.addClass("dropdown-popup");
			if(this._button.get_id() != null) {
				this._wrapper.addClass(this._button.get_id() + "-popup");
				this._wrapper.set_id(this._button.get_id() + "_popup");
			} else {
				this._wrapper.set_id("dropdown_popup");
			}
			this._wrapper.set_styleNames(this._dropdown.get_handlerStyleNames());
			if(this._dropdown.get_searchable() == true) {
				var searchContainer = new haxe_ui_containers_VBox();
				searchContainer.set_id("dropdown-search-container");
				searchContainer.addClass("dropdown-search-container");
				searchContainer.set_scriptAccess(false);
				var searchFieldContainer = new haxe_ui_containers_HBox();
				searchFieldContainer.set_id("dropdown-search-field-container");
				searchFieldContainer.addClass("dropdown-search-field-container");
				searchFieldContainer.set_scriptAccess(false);
				searchFieldContainer.addComponent(this.get_searchField());
				var searchFieldSeparator = new haxe_ui_core_Component();
				searchFieldSeparator.set_id("dropdown-search-field-separator");
				searchFieldSeparator.addClass("dropdown-search-field-separator");
				searchFieldSeparator.set_scriptAccess(false);
				searchContainer.addComponent(searchFieldContainer);
				searchContainer.addComponent(searchFieldSeparator);
				searchContainer.addComponent(handler.get_component());
				this._wrapper.addComponent(searchContainer);
			} else {
				this._wrapper.addComponent(handler.get_component());
			}
			if(this._dropdown.get_style().fontSize != null && handler.get_component().get_customStyle().fontSize != this._dropdown.get_style().fontSize) {
				handler.get_component().get_customStyle().fontSize = this._dropdown.get_style().fontSize;
			}
			var filler = new haxe_ui_core_Component();
			filler.set_includeInLayout(false);
			filler.addClass("dropdown-filler");
			filler.set_id("dropdown-filler");
			this._wrapper.addComponent(filler);
		}
		var componentOffset = this._dropdown.getComponentOffset();
		if(this._dropdown.get_style().mode != null && this._dropdown.get_style().mode == "mobile") {
			if(this._overlay == null) {
				this._overlay = new haxe_ui_core_Component();
				this._overlay.set_id("modal-background");
				this._overlay.addClass("modal-background");
				this._overlay.set_percentWidth(this._overlay.set_percentHeight(100));
			}
			haxe_ui_core_Screen.get_instance().addComponent(this._overlay);
			haxe_ui_core_Screen.get_instance().addComponent(this._wrapper);
			handler.prepare(this._wrapper);
			this._wrapper.syncComponentValidation();
			this._wrapper.validateNow();
			this._wrapper.set_left(haxe_ui_core_Screen.get_instance().get_actualWidth() / 2 - this._wrapper.get_actualComponentWidth() / 2);
			this._wrapper.set_top(haxe_ui_core_Screen.get_instance().get_actualHeight() / 2 - this._wrapper.get_actualComponentHeight() / 2);
		} else {
			this._wrapper.set_left(this._dropdown.get_screenLeft() + componentOffset.x);
			this._wrapper.set_top(this._dropdown.get_screenTop() + (this._dropdown.get_actualComponentHeight() - haxe_ui_Toolkit.get_scaleY()) + componentOffset.y);
			haxe_ui_core_Screen.get_instance().addComponent(this._wrapper);
			handler.prepare(this._wrapper);
			this._wrapper.syncComponentValidation();
			this._wrapper.validateNow();
			var popupToRight = false;
			var popupFromBottom = false;
			if(this._wrapper.get_screenLeft() + this._wrapper.get_actualComponentWidth() > haxe_ui_core_Screen.get_instance().get_actualWidth()) {
				var left = this._wrapper.get_screenLeft() - this._wrapper.get_actualComponentWidth() + this._dropdown.get_actualComponentWidth();
				this._wrapper.set_left(left >= 0 ? left : haxe_ui_core_Screen.get_instance().get_actualWidth() / 2 - this._wrapper.get_actualComponentWidth() / 2);
				popupToRight = true;
			}
			this._wrapper.removeClass("popup-from-bottom");
			if(this._wrapper.get_screenTop() + this._wrapper.get_actualComponentHeight() > haxe_ui_core_Screen.get_instance().get_actualHeight()) {
				this._wrapper.set_top(this._dropdown.get_screenTop() - this._wrapper.get_actualComponentHeight() + haxe_ui_Toolkit.get_scaleY());
				popupFromBottom = true;
				this._wrapper.addClass("popup-from-bottom");
			}
			var cx = this._wrapper.get_width() - this._dropdown.get_width();
			var filler = this._wrapper.findComponent("dropdown-filler",null,false);
			if(cx > 0 && filler != null) {
				this._wrapper.addClass("dropdown-popup-expanded");
				filler.set_width(cx);
				if(popupToRight) {
					cx -= haxe_ui_Toolkit.get_scaleX();
					filler.set_left(haxe_ui_Toolkit.get_scaleX());
				} else {
					cx += haxe_ui_Toolkit.get_scaleX();
					filler.set_left(this._wrapper.get_width() - cx);
				}
				if(popupFromBottom) {
					filler.set_top(this._wrapper.get_actualComponentHeight() - haxe_ui_Toolkit.get_scaleY());
				} else {
					filler.set_top(0);
				}
				filler.set_hidden(false);
			} else if(filler != null) {
				filler.set_hidden(true);
				this._wrapper.removeClass("dropdown-popup-expanded");
			}
		}
		haxe_ui_core_Screen.get_instance().registerEvent("mousedown",$bind(this,this.onScreenMouseDown));
		haxe_ui_core_Screen.get_instance().registerEvent("rightmousedown",$bind(this,this.onScreenMouseDown));
		this.registerEvent("move",$bind(this,this.onDropDownMoved));
	}
	,onDropDownMoved: function(_) {
		this.hideDropDown();
	}
	,createSearchField: function() {
		var _gthis = this;
		var searchField = new haxe_ui_components_TextField();
		searchField.registerEvent("actionstart",function(e) {
			if(e.action == "actionDown" || e.action == "actionUp" || e.action == "actionConfirm" || e.action == "actionPress" || e.action == "actionBack" || e.action == "actionCancel") {
				var builder = js_Boot.__cast(_gthis._dropdown._compositeBuilder , haxe_ui_components_DropDownBuilder);
				builder.get_handler().get_component().dispatch(e);
			}
		});
		searchField.set_id("dropdown-search-field");
		searchField.addClass("dropdown-search-field");
		searchField.set_placeholder(this._dropdown.get_searchPrompt());
		searchField.set_scriptAccess(false);
		searchField.registerEvent("change",$bind(this,this.onSearchChange));
		return searchField;
	}
	,_searchField: null
	,get_searchField: function() {
		if(this._searchField == null) {
			this._searchField = this.createSearchField();
		}
		return this._searchField;
	}
	,set_searchField: function(value) {
		this._searchField = value;
		return value;
	}
	,_lastSearchTerm: null
	,onSearchChange: function(event) {
		if(this._wrapper == null) {
			return;
		}
		var searchField = this._wrapper.findComponent("dropdown-search-field",haxe_ui_components_TextField);
		if(searchField == null) {
			return;
		}
		var selectedItem = this._dropdown.get_selectedItem();
		var searchTerm = searchField.get_text();
		if(searchTerm == null || StringTools.trim(searchTerm).length == 0) {
			searchTerm = "";
		}
		if(this._lastSearchTerm == searchTerm) {
			return;
		}
		this._lastSearchTerm = searchTerm;
		if(searchTerm.length == 0) {
			this._dropdown.get_dataSource().clearFilter();
		} else {
			this._dropdown.get_dataSource().filter(function(index,data) {
				var v = data.text;
				return Std.string(v).toLowerCase().indexOf(searchTerm.toLowerCase()) > -1;
			});
		}
		var handler = (js_Boot.__cast(this._dropdown._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		if(handler == null) {
			return;
		}
		handler.prepare(this._wrapper);
		if(selectedItem != null) {
			handler.pauseEvents();
			this._dropdown.set_selectedItem(selectedItem);
			handler.resumeEvents();
		}
	}
	,hideDropDown: function() {
		var handler = (js_Boot.__cast(this._dropdown._compositeBuilder , haxe_ui_components_DropDownBuilder)).get_handler();
		if(handler == null) {
			return;
		}
		if(this._wrapper != null) {
			var searchField = this._wrapper.findComponent("dropdown-search-field",haxe_ui_components_TextField);
			if(searchField != null) {
				searchField.set_focus(false);
			}
		}
		if(this._overlay != null) {
			haxe_ui_core_Screen.get_instance().removeComponent(this._overlay);
			this._overlay = null;
		}
		this._dropdown.set_selected(false);
		if(this._wrapper != null) {
			haxe_ui_core_Screen.get_instance().removeComponent(this._wrapper,false);
		}
		haxe_ui_core_Screen.get_instance().unregisterEvent("mousedown",$bind(this,this.onScreenMouseDown));
		haxe_ui_core_Screen.get_instance().unregisterEvent("rightmousedown",$bind(this,this.onScreenMouseDown));
		this.unregisterEvent("move",$bind(this,this.onDropDownMoved));
	}
	,onScreenMouseDown: function(event) {
		if(this._wrapper == null) {
			return;
		}
		if(this._wrapper.hitTest(event.screenX,event.screenY) == true) {
			return;
		}
		var componentOffset = this._dropdown.getComponentOffset();
		if(this._dropdown.hitTest(event.screenX - componentOffset.x,event.screenY - componentOffset.y) == true) {
			return;
		}
		this.hideDropDown();
	}
	,dispatchChanged: function() {
	}
	,release: function() {
		if(this._down == true) {
			haxe_ui_components_ButtonEvents.prototype.release.call(this);
			if(this._dropdown.get_selected() == true) {
				this.showDropDown();
			} else {
				this.hideDropDown();
			}
		}
	}
	,__class__: haxe_ui_components_DropDownEvents
	,__properties__: {set_searchField:"set_searchField",get_searchField:"get_searchField"}
});
var haxe_ui_components_DropDownBuilder = function(dropdown) {
	haxe_ui_components_ButtonBuilder.call(this,dropdown);
	this._dropdown = dropdown;
	var this1 = haxe_ui_components_DropDownBuilder.HANDLER_MAP;
	var value = haxe_ui_components__$DropDown_ListDropDownHandler.__name__;
	this1.h["list"] = value;
	var this1 = haxe_ui_components_DropDownBuilder.HANDLER_MAP;
	var value = haxe_ui_components_CalendarDropDownHandler.__name__;
	this1.h["date"] = value;
};
$hxClasses["haxe.ui.components.DropDownBuilder"] = haxe_ui_components_DropDownBuilder;
haxe_ui_components_DropDownBuilder.__name__ = "haxe.ui.components.DropDownBuilder";
haxe_ui_components_DropDownBuilder.__super__ = haxe_ui_components_ButtonBuilder;
haxe_ui_components_DropDownBuilder.prototype = $extend(haxe_ui_components_ButtonBuilder.prototype,{
	_dropdown: null
	,_handler: null
	,handler: null
	,get_handler: function() {
		if(this._handler == null) {
			var this1 = haxe_ui_components_DropDownBuilder.HANDLER_MAP;
			var key = this._dropdown.get_type();
			var handlerClass = this1.h[key];
			if(handlerClass == null) {
				handlerClass = this._dropdown.get_type();
			}
			this._handler = Type.createInstance($hxClasses[handlerClass],[this._dropdown]);
		}
		return this._handler;
	}
	,onReady: function() {
		haxe_ui_components_ButtonBuilder.prototype.onReady.call(this);
		if(this._dropdown.get_text() == null) {
			this.get_handler().applyDefault();
		}
	}
	,create: function() {
		this._dropdown.set_toggle(true);
		if(this._dropdown.findComponent(null,haxe_ui_core_ItemRenderer) == null) {
			this._dropdown.addComponent(new haxe_ui_core_BasicItemRenderer());
		}
	}
	,destroy: function() {
		var events = js_Boot.__cast(this._dropdown._internalEvents , haxe_ui_components_DropDownEvents);
		events.hideDropDown();
		if(events._wrapper != null) {
			haxe_ui_core_Screen.get_instance().removeComponent(events._wrapper);
			events._wrapper = null;
		}
	}
	,addComponent: function(child) {
		if(((child) instanceof haxe_ui_core_ItemRenderer)) {
			this._dropdown.set_itemRenderer(child.cloneComponent());
			if(child.get_id() == "dropdown-renderer" || child.get_id() == "dropdownRenderer") {
				return child;
			}
		}
		return haxe_ui_components_ButtonBuilder.prototype.addComponent.call(this,child);
	}
	,onThemeChanged: function() {
		if(this._handler != null) {
			haxe_ui_core_Screen.get_instance().invalidateChildren(this._handler.get_component());
			haxe_ui_core_Screen.get_instance().onThemeChangedChildren(this._handler.get_component());
		}
	}
	,__class__: haxe_ui_components_DropDownBuilder
	,__properties__: $extend(haxe_ui_components_ButtonBuilder.prototype.__properties__,{get_handler:"get_handler"})
});
var haxe_ui_core_IDirectionalComponent = function() { };
$hxClasses["haxe.ui.core.IDirectionalComponent"] = haxe_ui_core_IDirectionalComponent;
haxe_ui_core_IDirectionalComponent.__name__ = "haxe.ui.core.IDirectionalComponent";
haxe_ui_core_IDirectionalComponent.__isInterface__ = true;
var haxe_ui_components_Rule = function() {
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.components.Rule"] = haxe_ui_components_Rule;
haxe_ui_components_Rule.__name__ = "haxe.ui.components.Rule";
haxe_ui_components_Rule.__interfaces__ = [haxe_ui_core_IDirectionalComponent];
haxe_ui_components_Rule.__super__ = haxe_ui_core_Component;
haxe_ui_components_Rule.prototype = $extend(haxe_ui_core_Component.prototype,{
	registerComposite: function() {
		haxe_ui_core_Component.prototype.registerComposite.call(this);
		this._compositeBuilderClass = haxe_ui_components_RuleBuilder;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Rule();
	}
	,__class__: haxe_ui_components_Rule
});
var haxe_ui_components_HorizontalRule = function() {
	haxe_ui_components_Rule.call(this);
};
$hxClasses["haxe.ui.components.HorizontalRule"] = haxe_ui_components_HorizontalRule;
haxe_ui_components_HorizontalRule.__name__ = "haxe.ui.components.HorizontalRule";
haxe_ui_components_HorizontalRule.__super__ = haxe_ui_components_Rule;
haxe_ui_components_HorizontalRule.prototype = $extend(haxe_ui_components_Rule.prototype,{
	registerBehaviours: function() {
		haxe_ui_components_Rule.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Rule.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_components_HorizontalRule();
	}
	,registerComposite: function() {
		haxe_ui_components_Rule.prototype.registerComposite.call(this);
		this._compositeBuilderClass = haxe_ui_components__$HorizontalRule_Builder;
	}
	,__class__: haxe_ui_components_HorizontalRule
});
var haxe_ui_components_RuleBuilder = function(component) {
	haxe_ui_core_CompositeBuilder.call(this,component);
	this.showWarning();
};
$hxClasses["haxe.ui.components.RuleBuilder"] = haxe_ui_components_RuleBuilder;
haxe_ui_components_RuleBuilder.__name__ = "haxe.ui.components.RuleBuilder";
haxe_ui_components_RuleBuilder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components_RuleBuilder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	showWarning: function() {
		haxe_Log.trace("WARNING: trying to create an instance of 'Rule' directly, use either 'HorizontalRule' or 'VerticalRule'",{ fileName : "haxe/ui/components/Rule.hx", lineNumber : 35, className : "haxe.ui.components.RuleBuilder", methodName : "showWarning"});
	}
	,__class__: haxe_ui_components_RuleBuilder
});
var haxe_ui_components__$HorizontalRule_Builder = function(component) {
	haxe_ui_components_RuleBuilder.call(this,component);
};
$hxClasses["haxe.ui.components._HorizontalRule.Builder"] = haxe_ui_components__$HorizontalRule_Builder;
haxe_ui_components__$HorizontalRule_Builder.__name__ = "haxe.ui.components._HorizontalRule.Builder";
haxe_ui_components__$HorizontalRule_Builder.__super__ = haxe_ui_components_RuleBuilder;
haxe_ui_components__$HorizontalRule_Builder.prototype = $extend(haxe_ui_components_RuleBuilder.prototype,{
	showWarning: function() {
	}
	,__class__: haxe_ui_components__$HorizontalRule_Builder
});
var haxe_ui_components_Scroll = function() {
	haxe_ui_core_InteractiveComponent.call(this);
	this.cascadeActive = true;
};
$hxClasses["haxe.ui.components.Scroll"] = haxe_ui_components_Scroll;
haxe_ui_components_Scroll.__name__ = "haxe.ui.components.Scroll";
haxe_ui_components_Scroll.__interfaces__ = [haxe_ui_core_IDirectionalComponent];
haxe_ui_components_Scroll.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_components_Scroll.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	posFromCoord: function(coord) {
		return haxe_ui_util_Variant.toFloat(this.behaviours.call("posFromCoord",coord));
	}
	,applyPageFromCoord: function(coord) {
		return haxe_ui_util_Variant.toFloat(this.behaviours.call("applyPageFromCoord",coord));
	}
	,createChildren: function() {
		this.createButton("deinc",true).set_repeater(true);
		this.createButton("inc",true).set_repeater(true);
		this.createButton("thumb").set_remainPressed(true);
		this.registerInternalEvents(haxe_ui_components__$Scroll_Events);
	}
	,createButton: function(type,hidden) {
		if(hidden == null) {
			hidden = false;
		}
		var b = this.findComponent("scroll-" + type + "-button",haxe_ui_components_Button);
		if(b == null) {
			b = new haxe_ui_components_Button();
			b.set_hidden(hidden);
			b.set_scriptAccess(false);
			b.get_customStyle().native = false;
			b.set_id("scroll-" + type + "-button");
			b.addClass(type);
			b.set_allowFocus(false);
			this.addComponent(b);
		}
		return b;
	}
	,registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
		this.behaviours.register("min",haxe_ui_components__$Scroll_ScrollMinMaxBehaviour,haxe_ui_util_Variant.fromInt(0));
		this.behaviours.register("max",haxe_ui_components__$Scroll_ScrollMinMaxBehaviour,haxe_ui_util_Variant.fromInt(100));
		this.behaviours.register("pageSize",haxe_ui_behaviours_LayoutBehaviour,haxe_ui_util_Variant.fromInt(0));
		this.behaviours.register("pos",haxe_ui_components__$Scroll_ScrollValueBehaviour,haxe_ui_util_Variant.fromInt(0));
		this.behaviours.register("increment",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromInt(20));
	}
	,get_min: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("min"));
	}
	,set_min: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("min",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"min"));
		return value;
	}
	,get_max: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("max"));
	}
	,set_max: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("max",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"max"));
		return value;
	}
	,get_pageSize: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("pageSize"));
	}
	,set_pageSize: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("pageSize",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"pageSize"));
		return value;
	}
	,get_pos: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("pos"));
	}
	,set_pos: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("pos",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"pos"));
		return value;
	}
	,get_increment: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("increment"));
	}
	,set_increment: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("increment",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"increment"));
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Scroll();
	}
	,__class__: haxe_ui_components_Scroll
	,__properties__: $extend(haxe_ui_core_InteractiveComponent.prototype.__properties__,{set_increment:"set_increment",get_increment:"get_increment",set_pos:"set_pos",get_pos:"get_pos",set_pageSize:"set_pageSize",get_pageSize:"get_pageSize",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min"})
});
var haxe_ui_components_HorizontalScroll = function() {
	haxe_ui_components_Scroll.call(this);
};
$hxClasses["haxe.ui.components.HorizontalScroll"] = haxe_ui_components_HorizontalScroll;
haxe_ui_components_HorizontalScroll.__name__ = "haxe.ui.components.HorizontalScroll";
haxe_ui_components_HorizontalScroll.__super__ = haxe_ui_components_Scroll;
haxe_ui_components_HorizontalScroll.prototype = $extend(haxe_ui_components_Scroll.prototype,{
	registerBehaviours: function() {
		haxe_ui_components_Scroll.prototype.registerBehaviours.call(this);
		this.behaviours.register("posFromCoord",haxe_ui_components__$HorizontalScroll_PosFromCoord);
		this.behaviours.register("applyPageFromCoord",haxe_ui_components__$HorizontalScroll_ApplyPageFromCoord);
	}
	,createChildren: function() {
		haxe_ui_components_Scroll.prototype.createChildren.call(this);
		if(this.get_componentWidth() <= 0) {
			this.set_componentWidth(150);
		}
	}
	,createDefaults: function() {
		haxe_ui_components_Scroll.prototype.createDefaults.call(this);
		this._defaultLayoutClass = haxe_ui_components__$HorizontalScroll_HorizontalScrollLayout;
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Scroll.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_components_HorizontalScroll();
	}
	,__class__: haxe_ui_components_HorizontalScroll
});
var haxe_ui_components__$HorizontalScroll_PosFromCoord = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._HorizontalScroll.PosFromCoord"] = haxe_ui_components__$HorizontalScroll_PosFromCoord;
haxe_ui_components__$HorizontalScroll_PosFromCoord.__name__ = "haxe.ui.components._HorizontalScroll.PosFromCoord";
haxe_ui_components__$HorizontalScroll_PosFromCoord.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$HorizontalScroll_PosFromCoord.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(pos) {
		var p = js_Boot.__cast(pos , haxe_ui_geom_Point);
		var scroll = js_Boot.__cast(this._component , haxe_ui_components_Scroll);
		var deinc = this._component.findComponent("scroll-deinc-button");
		var thumb = this._component.findComponent("scroll-thumb-button");
		var xpos = p.x;
		var minX = 0;
		if(deinc != null && deinc.get_hidden() == false) {
			minX = deinc.get_width() + scroll.get_layout().get_horizontalSpacing();
		}
		var maxX = scroll.get_layout().get_usableWidth() - thumb.get_width();
		if(deinc != null && deinc.get_hidden() == false) {
			maxX += deinc.get_width() + scroll.get_layout().get_horizontalSpacing();
		}
		if(xpos < minX) {
			xpos = minX;
		} else if(xpos > maxX) {
			xpos = maxX;
		}
		var ucx = scroll.get_layout().get_usableWidth();
		ucx -= thumb.get_width();
		var m = scroll.get_max() - scroll.get_min() | 0;
		var v = xpos - minX;
		var value = scroll.get_min() + v / ucx * m;
		return haxe_ui_util_Variant.fromFloat(value);
	}
	,__class__: haxe_ui_components__$HorizontalScroll_PosFromCoord
});
var haxe_ui_components__$HorizontalScroll_ApplyPageFromCoord = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._HorizontalScroll.ApplyPageFromCoord"] = haxe_ui_components__$HorizontalScroll_ApplyPageFromCoord;
haxe_ui_components__$HorizontalScroll_ApplyPageFromCoord.__name__ = "haxe.ui.components._HorizontalScroll.ApplyPageFromCoord";
haxe_ui_components__$HorizontalScroll_ApplyPageFromCoord.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$HorizontalScroll_ApplyPageFromCoord.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(pos) {
		var p = js_Boot.__cast(pos , haxe_ui_geom_Point);
		var scroll = js_Boot.__cast(this._component , haxe_ui_components_Scroll);
		var thumb = this._component.findComponent("scroll-thumb-button");
		if(p.x < thumb.get_screenLeft()) {
			scroll.set_pos(scroll.get_pos() - scroll.get_pageSize());
		} else if(p.x > thumb.get_screenLeft() + thumb.get_width()) {
			scroll.set_pos(scroll.get_pos() + scroll.get_pageSize());
		}
		return null;
	}
	,__class__: haxe_ui_components__$HorizontalScroll_ApplyPageFromCoord
});
var haxe_ui_components__$HorizontalScroll_HorizontalScrollLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components._HorizontalScroll.HorizontalScrollLayout"] = haxe_ui_components__$HorizontalScroll_HorizontalScrollLayout;
haxe_ui_components__$HorizontalScroll_HorizontalScrollLayout.__name__ = "haxe.ui.components._HorizontalScroll.HorizontalScrollLayout";
haxe_ui_components__$HorizontalScroll_HorizontalScrollLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components__$HorizontalScroll_HorizontalScrollLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.resizeChildren.call(this);
		var scroll = js_Boot.__cast(this.get_component() , haxe_ui_components_Scroll);
		var thumb = this.get_component().findComponent("scroll-thumb-button");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var ucx = this.get_usableWidth();
			var thumbWidth = scroll.get_pageSize() / m * ucx;
			if(thumbWidth < this.get_innerHeight()) {
				thumbWidth = this.get_innerHeight();
			} else if(thumbWidth > ucx) {
				thumbWidth = ucx;
			}
			if(thumbWidth > 0 && isNaN(thumbWidth) == false) {
				thumb.set_width(thumbWidth);
			}
		}
	}
	,repositionChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.repositionChildren.call(this);
		var deinc = this.get_component().findComponent("scroll-deinc-button");
		var inc = this.get_component().findComponent("scroll-inc-button");
		if(inc != null && this.hidden(inc) == false) {
			inc.set_left(this.get_component().get_width() - inc.get_width() - this.get_paddingRight());
		}
		var scroll = js_Boot.__cast(this.get_component() , haxe_ui_components_Scroll);
		var thumb = this.get_component().findComponent("scroll-thumb-button");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var u = this.get_usableWidth();
			u -= thumb.get_componentWidth();
			var x = (scroll.get_pos() - scroll.get_min()) / m * u;
			x += this.get_paddingLeft();
			if(deinc != null && this.hidden(deinc) == false) {
				x += deinc.get_width() + this.get_horizontalSpacing();
			}
			thumb.set_left(x);
			thumb.set_top(Math.round(thumb.get_top()));
		}
	}
	,get_usableWidth: function() {
		var ucx = this.get_innerWidth();
		var deinc = this.get_component().findComponent("scroll-deinc-button");
		var inc = this.get_component().findComponent("scroll-inc-button");
		if(deinc != null && this.hidden(deinc) == false) {
			ucx -= deinc.get_width() + this.get_horizontalSpacing();
		}
		if(inc != null && this.hidden(inc) == false) {
			ucx -= inc.get_width() + this.get_horizontalSpacing();
		}
		return ucx;
	}
	,__class__: haxe_ui_components__$HorizontalScroll_HorizontalScrollLayout
});
var haxe_ui_components_Image = function() {
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.components.Image"] = haxe_ui_components_Image;
haxe_ui_components_Image.__name__ = "haxe.ui.components.Image";
haxe_ui_components_Image.__super__ = haxe_ui_core_Component;
haxe_ui_components_Image.prototype = $extend(haxe_ui_core_Component.prototype,{
	registerComposite: function() {
		haxe_ui_core_Component.prototype.registerComposite.call(this);
		this._defaultLayoutClass = haxe_ui_components__$Image_ImageLayout;
		this._compositeBuilderClass = haxe_ui_components__$Image_Builder;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
		this.behaviours.register("resource",haxe_ui_components__$Image_ResourceBehaviour);
		this.behaviours.register("scaleMode",haxe_ui_behaviours_InvalidatingBehaviour,haxe_ui_util_Variant.fromString("fill"));
		this.behaviours.register("imageHorizontalAlign",haxe_ui_behaviours_InvalidatingBehaviour,haxe_ui_util_Variant.fromString("center"));
		this.behaviours.register("imageVerticalAlign",haxe_ui_behaviours_InvalidatingBehaviour,haxe_ui_util_Variant.fromString("center"));
		this.behaviours.register("originalWidth",haxe_ui_behaviours_DefaultBehaviour);
		this.behaviours.register("originalHeight",haxe_ui_behaviours_DefaultBehaviour);
		this.behaviours.register("imageScale",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromInt(1));
	}
	,get_resource: function() {
		if(this.behaviours == null) {
			return null;
		}
		return this.behaviours.get("resource");
	}
	,set_resource: function(value) {
		this.behaviours.set("resource",value);
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"resource"));
		return value;
	}
	,get_scaleMode: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("scaleMode"));
	}
	,set_scaleMode: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("scaleMode",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"scaleMode"));
		return value;
	}
	,get_imageHorizontalAlign: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("imageHorizontalAlign"));
	}
	,set_imageHorizontalAlign: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("imageHorizontalAlign",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"imageHorizontalAlign"));
		return value;
	}
	,get_imageVerticalAlign: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("imageVerticalAlign"));
	}
	,set_imageVerticalAlign: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("imageVerticalAlign",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"imageVerticalAlign"));
		return value;
	}
	,get_originalWidth: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("originalWidth"));
	}
	,set_originalWidth: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("originalWidth",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"originalWidth"));
		return value;
	}
	,get_originalHeight: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("originalHeight"));
	}
	,set_originalHeight: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("originalHeight",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"originalHeight"));
		return value;
	}
	,get_imageScale: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("imageScale"));
	}
	,set_imageScale: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("imageScale",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"imageScale"));
		return value;
	}
	,get_value: function() {
		return haxe_ui_util_Variant.toDynamic(this.get_resource());
	}
	,set_value: function(value) {
		this.set_resource(haxe_ui_util_Variant.fromDynamic(value));
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if(this.get_resource() != null) {
			c.set_resource(this.get_resource());
		}
		if(this.get_scaleMode() != null) {
			c.set_scaleMode(this.get_scaleMode());
		}
		if(this.get_imageHorizontalAlign() != null) {
			c.set_imageHorizontalAlign(this.get_imageHorizontalAlign());
		}
		if(this.get_imageVerticalAlign() != null) {
			c.set_imageVerticalAlign(this.get_imageVerticalAlign());
		}
		c.set_originalWidth(this.get_originalWidth());
		c.set_originalHeight(this.get_originalHeight());
		c.set_imageScale(this.get_imageScale());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Image();
	}
	,__class__: haxe_ui_components_Image
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{set_imageScale:"set_imageScale",get_imageScale:"get_imageScale",set_originalHeight:"set_originalHeight",get_originalHeight:"get_originalHeight",set_originalWidth:"set_originalWidth",get_originalWidth:"get_originalWidth",set_imageVerticalAlign:"set_imageVerticalAlign",get_imageVerticalAlign:"get_imageVerticalAlign",set_imageHorizontalAlign:"set_imageHorizontalAlign",get_imageHorizontalAlign:"get_imageHorizontalAlign",set_scaleMode:"set_scaleMode",get_scaleMode:"get_scaleMode",set_resource:"set_resource",get_resource:"get_resource"})
});
var haxe_ui_components__$Image_ImageLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components._Image.ImageLayout"] = haxe_ui_components__$Image_ImageLayout;
haxe_ui_components__$Image_ImageLayout.__name__ = "haxe.ui.components._Image.ImageLayout";
haxe_ui_components__$Image_ImageLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components__$Image_ImageLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	get_imageScaleMode: function() {
		return (js_Boot.__cast(this._component , haxe_ui_components_Image)).get_scaleMode();
	}
	,get_imageHorizontalAlign: function() {
		return (js_Boot.__cast(this._component , haxe_ui_components_Image)).get_imageHorizontalAlign();
	}
	,get_imageVerticalAlign: function() {
		return (js_Boot.__cast(this._component , haxe_ui_components_Image)).get_imageVerticalAlign();
	}
	,resizeChildren: function() {
		if(this.get_component().hasImageDisplay()) {
			var image = js_Boot.__cast(this._component , haxe_ui_components_Image);
			var imageDisplay = image.getImageDisplay();
			var maxWidth = this.get_usableSize().width;
			var maxHeight = this.get_usableSize().height;
			if(this.get_component().get_autoWidth() == true) {
				maxWidth = -1;
			}
			if(this._component.get_autoHeight() == true) {
				maxHeight = -1;
			}
			var scaleW = maxWidth != -1 ? maxWidth / image.get_originalWidth() : 1;
			var scaleH = maxHeight != -1 ? maxHeight / image.get_originalHeight() : 1;
			scaleW *= image.get_imageScale();
			scaleH *= image.get_imageScale();
			if(this.get_imageScaleMode() != "fill") {
				var scale;
				switch(this.get_imageScaleMode()) {
				case "fitheight":
					scale = scaleH;
					break;
				case "fitinside":
					scale = scaleW < scaleH ? scaleW : scaleH;
					break;
				case "fitoutside":
					scale = scaleW > scaleH ? scaleW : scaleH;
					break;
				case "fitwidth":
					scale = scaleW;
					break;
				default:
					scale = 1;
				}
				imageDisplay.set_imageWidth(image.get_originalWidth() * scale);
				imageDisplay.set_imageHeight(image.get_originalHeight() * scale);
			} else {
				imageDisplay.set_imageWidth(image.get_originalWidth() * scaleW);
				imageDisplay.set_imageHeight(image.get_originalHeight() * scaleH);
			}
		}
	}
	,repositionChildren: function() {
		if(this.get_component().hasImageDisplay()) {
			var image = js_Boot.__cast(this._component , haxe_ui_components_Image);
			var imageDisplay = this._component.getImageDisplay();
			switch(image.get_imageHorizontalAlign()) {
			case "center":
				imageDisplay.set_left((this._component.get_componentWidth() - imageDisplay.get_imageWidth()) / 2);
				break;
			case "left":
				imageDisplay.set_left(this.get_paddingLeft());
				break;
			case "right":
				imageDisplay.set_left(this._component.get_componentWidth() - imageDisplay.get_imageWidth() - this.get_paddingRight());
				break;
			}
			switch(image.get_imageVerticalAlign()) {
			case "bottom":
				imageDisplay.set_top(this._component.get_componentHeight() - imageDisplay.get_imageHeight() - this.get_paddingBottom());
				break;
			case "center":
				imageDisplay.set_top((this._component.get_componentHeight() - imageDisplay.get_imageHeight()) / 2);
				break;
			case "top":
				imageDisplay.set_top(this.get_paddingTop());
				break;
			}
		}
	}
	,calcAutoSize: function(exclusions) {
		var size = haxe_ui_layouts_DefaultLayout.prototype.calcAutoSize.call(this,exclusions);
		if(this.get_component().hasImageDisplay()) {
			size.width += this.get_component().getImageDisplay().get_imageWidth();
			size.height += this.get_component().getImageDisplay().get_imageHeight();
		}
		return size;
	}
	,refresh: function() {
		haxe_ui_layouts_DefaultLayout.prototype.refresh.call(this);
		this.updateClipRect();
	}
	,updateClipRect: function() {
		if(this.get_component().hasImageDisplay()) {
			var usz = this.get_usableSize();
			var imageDisplay = this.get_component().getImageDisplay();
			var rc = imageDisplay.get_imageClipRect();
			if(imageDisplay.get_imageWidth() > usz.width || imageDisplay.get_imageHeight() > usz.height) {
				if(rc == null) {
					rc = new haxe_ui_geom_Rectangle();
				}
				rc.top = this.get_paddingLeft();
				rc.left = this.get_paddingTop();
				rc.width = usz.width;
				rc.height = usz.height;
			} else {
				rc = null;
			}
			imageDisplay.set_imageClipRect(rc);
		}
	}
	,__class__: haxe_ui_components__$Image_ImageLayout
	,__properties__: $extend(haxe_ui_layouts_DefaultLayout.prototype.__properties__,{get_imageVerticalAlign:"get_imageVerticalAlign",get_imageHorizontalAlign:"get_imageHorizontalAlign",get_imageScaleMode:"get_imageScaleMode"})
});
var haxe_ui_components__$Image_ResourceBehaviour = function(component) {
	this._canvasMap = null;
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Image.ResourceBehaviour"] = haxe_ui_components__$Image_ResourceBehaviour;
haxe_ui_components__$Image_ResourceBehaviour.__name__ = "haxe.ui.components._Image.ResourceBehaviour";
haxe_ui_components__$Image_ResourceBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Image_ResourceBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_canvasMap: null
	,validateData: function() {
		var _gthis = this;
		if(this._value == null || haxe_ui_util_Variant.get_isNull(this._value)) {
			this._component.removeImageDisplay();
			this._component.invalidateComponent();
			return;
		}
		if(haxe_ui_util_Variant.get_isComponent(this._value) && ((haxe_ui_util_Variant.toComponent(this._value)) instanceof haxe_ui_components_Canvas)) {
			var newCanvas = null;
			if(this._canvasMap == null) {
				this._canvasMap = new haxe_ds_StringMap();
			}
			var canvas = haxe_ui_util_Variant.toComponent(this._value);
			if(canvas.get_id() == null) {
				canvas.set_id(haxe_ui_util_GUID.uuid());
			}
			var existingCanvas = this._component.findComponent(null,haxe_ui_components_Canvas,false);
			if(existingCanvas != null && existingCanvas.get_id() == canvas.get_id()) {
				return;
			}
			if(existingCanvas != null) {
				this._component.removeComponent(existingCanvas,false);
			}
			var this1 = this._canvasMap;
			var key = canvas.get_id();
			if(Object.prototype.hasOwnProperty.call(this1.h,key)) {
				var this1 = this._canvasMap;
				var key = canvas.get_id();
				newCanvas = this1.h[key];
			} else {
				newCanvas = haxe_ui_util_Variant.toComponent(this._value).cloneComponent();
				var this1 = this._canvasMap;
				var key = canvas.get_id();
				this1.h[key] = newCanvas;
			}
			this._component.addComponent(newCanvas);
		} else {
			var imageLoader = new haxe_ui_util_ImageLoader(this._value);
			imageLoader.load(function(imageInfo) {
				if(imageInfo != null) {
					if(_gthis._value == null || haxe_ui_util_Variant.get_isNull(_gthis._value)) {
						_gthis._component.removeImageDisplay();
						_gthis._component.invalidateComponent();
						return;
					}
					var image = js_Boot.__cast(_gthis._component , haxe_ui_components_Image);
					if(image == null) {
						return;
					}
					var display = image.getImageDisplay();
					if(display != null) {
						display.set_imageInfo(imageInfo);
						image.set_originalWidth(imageInfo.width);
						image.set_originalHeight(imageInfo.height);
						if(image.autoSize() == true && image.parentComponent != null) {
							var _this = image.parentComponent;
							if(!(_this._layout == null || _this._layoutLocked == true)) {
								_this.invalidateComponent("layout",false);
							}
						}
						image.invalidateComponent();
						display.validateComponent();
					}
				}
			});
		}
	}
	,__class__: haxe_ui_components__$Image_ResourceBehaviour
});
var haxe_ui_components__$Image_Builder = function(image) {
	var _gthis = this;
	haxe_ui_core_CompositeBuilder.call(this,image);
	this._image = image;
	this._image.registerEvent("shown",function(_) {
		if(_gthis._image.parentComponent != null) {
			var _this = _gthis._image.parentComponent;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout",false);
			}
		}
	});
};
$hxClasses["haxe.ui.components._Image.Builder"] = haxe_ui_components__$Image_Builder;
haxe_ui_components__$Image_Builder.__name__ = "haxe.ui.components._Image.Builder";
haxe_ui_components__$Image_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components__$Image_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_image: null
	,applyStyle: function(style) {
		if(style.resource != null) {
			this._image.set_resource(style.resource);
		}
	}
	,__class__: haxe_ui_components__$Image_Builder
});
var haxe_ui_components_Label = function() {
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.components.Label"] = haxe_ui_components_Label;
haxe_ui_components_Label.__name__ = "haxe.ui.components.Label";
haxe_ui_components_Label.__super__ = haxe_ui_core_Component;
haxe_ui_components_Label.prototype = $extend(haxe_ui_core_Component.prototype,{
	registerComposite: function() {
		haxe_ui_core_Component.prototype.registerComposite.call(this);
		this._compositeBuilderClass = haxe_ui_components__$Label_Builder;
		this._defaultLayoutClass = haxe_ui_components__$Label_LabelLayout;
	}
	,registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
		this.behaviours.register("text",haxe_ui_components__$Label_TextBehaviour);
		this.behaviours.register("htmlText",haxe_ui_components__$Label_HtmlTextBehaviour);
	}
	,get_htmlText: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("htmlText"));
	}
	,set_htmlText: function(value) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			if(_g.c == String) {
				if(value != null && value.indexOf("{{") != -1 && value.indexOf("}}") != -1) {
					haxe_ui_locale_LocaleManager.get_instance().registerComponent(this,"htmlText",null,value);
					return value;
				}
			}
		}
		this.behaviours.set("htmlText",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"htmlText"));
		return value;
	}
	,get_value: function() {
		return this.get_text();
	}
	,set_value: function(value) {
		this.set_text(value);
		return value;
	}
	,get_textAlign: function() {
		if(this.get_customStyle().textAlign != null) {
			return this.get_customStyle().textAlign;
		}
		if(this.get_style() == null || this.get_style().textAlign == null) {
			return null;
		}
		return this.get_style().textAlign;
	}
	,set_textAlign: function(value) {
		if(this.get_customStyle().textAlign == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().textAlign = null;
		} else {
			this.get_customStyle().textAlign = value;
		}
		this.invalidateComponent("style",false);
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout",false);
		}
		return value;
	}
	,get_wordWrap: function() {
		if(this.get_customStyle().wordWrap != null) {
			return this.get_customStyle().wordWrap;
		}
		if(this.get_style() == null || this.get_style().wordWrap == null) {
			return null;
		}
		return this.get_style().wordWrap;
	}
	,set_wordWrap: function(value) {
		if(this.get_customStyle().wordWrap == value) {
			return value;
		}
		if(this._style == null) {
			this._style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		if(value == null) {
			this.get_customStyle().wordWrap = null;
		} else {
			this.get_customStyle().wordWrap = value;
		}
		this.invalidateComponent("style",false);
		if(!(this._layout == null || this._layoutLocked == true)) {
			this.invalidateComponent("layout",false);
		}
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if(this.get_htmlText() != null) {
			c.set_htmlText(this.get_htmlText());
		}
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Label();
	}
	,__class__: haxe_ui_components_Label
	,__properties__: $extend(haxe_ui_core_Component.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText"})
});
var haxe_ui_components__$Label_LabelLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components._Label.LabelLayout"] = haxe_ui_components__$Label_LabelLayout;
haxe_ui_components__$Label_LabelLayout.__name__ = "haxe.ui.components._Label.LabelLayout";
haxe_ui_components__$Label_LabelLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components__$Label_LabelLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	resizeChildren: function() {
		if(this.get_component().get_autoWidth() == false) {
			this.get_component().getTextDisplay().set_width(this.get_component().get_componentWidth() - this.get_paddingLeft() - this.get_paddingRight());
			var wordWrap = true;
			if(this._component.get_style() != null && this._component.get_style().wordWrap != null) {
				wordWrap = this._component.get_style().wordWrap;
			}
			this.get_component().getTextDisplay().set_wordWrap(wordWrap);
		} else {
			this.get_component().getTextDisplay().set_width(this.get_component().getTextDisplay().get_textWidth());
		}
		if(this.get_component().get_autoHeight() == true) {
			this.get_component().getTextDisplay().set_height(this.get_component().getTextDisplay().get_textHeight());
		} else {
			this.get_component().getTextDisplay().set_height(this.get_component().get_height());
		}
	}
	,repositionChildren: function() {
		if(this.get_component().hasTextDisplay() == true) {
			this.get_component().getTextDisplay().set_left(this.get_paddingLeft());
			this.get_component().getTextDisplay().set_top(this.get_paddingTop());
		}
	}
	,calcAutoSize: function(exclusions) {
		var size = haxe_ui_layouts_DefaultLayout.prototype.calcAutoSize.call(this,exclusions);
		if(this.get_component().hasTextDisplay() == true) {
			size.width += this.get_component().getTextDisplay().get_textWidth();
			size.height += this.get_component().getTextDisplay().get_textHeight();
		}
		return size;
	}
	,textAlign: function(child) {
		if(child == null || child.get_style() == null || child.get_style().textAlign == null) {
			return "left";
		}
		return child.get_style().textAlign;
	}
	,__class__: haxe_ui_components__$Label_LabelLayout
});
var haxe_ui_components__$Label_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Label.TextBehaviour"] = haxe_ui_components__$Label_TextBehaviour;
haxe_ui_components__$Label_TextBehaviour.__name__ = "haxe.ui.components._Label.TextBehaviour";
haxe_ui_components__$Label_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Label_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		if(this._component.getTextDisplay().get_textStyle() != this._component.get_style()) {
			var _this = this._component;
			var force = true;
			if(force == null) {
				force = false;
			}
			_this.invalidateComponent("style",false);
			if(force == true) {
				_this._style = null;
			}
		}
		this._component.getTextDisplay().set_text("" + (this._value == null ? "null" : haxe_ui_util_Variant.toString(this._value)));
		this._component.dispatch(new haxe_ui_events_UIEvent("change"));
	}
	,__class__: haxe_ui_components__$Label_TextBehaviour
});
var haxe_ui_components__$Label_HtmlTextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Label.HtmlTextBehaviour"] = haxe_ui_components__$Label_HtmlTextBehaviour;
haxe_ui_components__$Label_HtmlTextBehaviour.__name__ = "haxe.ui.components._Label.HtmlTextBehaviour";
haxe_ui_components__$Label_HtmlTextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Label_HtmlTextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		if(this._component.getTextDisplay().get_textStyle() != this._component.get_style()) {
			var _this = this._component;
			var force = true;
			if(force == null) {
				force = false;
			}
			_this.invalidateComponent("style",false);
			if(force == true) {
				_this._style = null;
			}
		}
		this._component.getTextDisplay().set_htmlText("" + (this._value == null ? "null" : haxe_ui_util_Variant.toString(this._value)));
		this._component.dispatch(new haxe_ui_events_UIEvent("change"));
	}
	,__class__: haxe_ui_components__$Label_HtmlTextBehaviour
});
var haxe_ui_components__$Label_Builder = function(label) {
	haxe_ui_core_CompositeBuilder.call(this,label);
	this._label = label;
};
$hxClasses["haxe.ui.components._Label.Builder"] = haxe_ui_components__$Label_Builder;
haxe_ui_components__$Label_Builder.__name__ = "haxe.ui.components._Label.Builder";
haxe_ui_components__$Label_Builder.isHtml = function(v) {
	if(v == null) {
		return false;
	} else {
		return v.indexOf("<font ") != -1;
	}
};
haxe_ui_components__$Label_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components__$Label_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_label: null
	,applyStyle: function(style) {
		if(this._label.hasTextDisplay() == true) {
			this._label.getTextDisplay().set_textStyle(style);
			var tmp;
			if((style.contentType == "auto" || style.contentType == "html") && this._label.getTextDisplay().get_supportsHtml()) {
				var v = Std.string(this._component.get_text());
				tmp = v == null ? false : v.indexOf("<font ") != -1;
			} else {
				tmp = false;
			}
			if(tmp) {
				this._label.set_htmlText(this._label.get_text());
			}
		}
	}
	,get_isComponentClipped: function() {
		var componentClipRect = this._component.get_componentClipRect();
		if(componentClipRect == null) {
			return false;
		}
		return this._label.getTextDisplay().measureTextWidth() > componentClipRect.width;
	}
	,__class__: haxe_ui_components__$Label_Builder
});
var haxe_ui_components__$Scroll_Events = function(scroll) {
	haxe_ui_events_Events.call(this,scroll);
	this._scroll = scroll;
	this._deincButton = this._scroll.findComponent("scroll-deinc-button");
	this._incButton = this._scroll.findComponent("scroll-inc-button");
	this._thumb = this._scroll.findComponent("scroll-thumb-button");
};
$hxClasses["haxe.ui.components._Scroll.Events"] = haxe_ui_components__$Scroll_Events;
haxe_ui_components__$Scroll_Events.__name__ = "haxe.ui.components._Scroll.Events";
haxe_ui_components__$Scroll_Events.__super__ = haxe_ui_events_Events;
haxe_ui_components__$Scroll_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_scroll: null
	,_deincButton: null
	,_incButton: null
	,_thumb: null
	,register: function() {
		if(this.hasEvent("mousedown",$bind(this,this.onMouseDown)) == false) {
			this.registerEvent("mousedown",$bind(this,this.onMouseDown));
		}
		if(this._deincButton != null && this._deincButton.hasEvent("click",$bind(this,this.onDeinc)) == false) {
			this._deincButton.registerEvent("click",$bind(this,this.onDeinc));
		}
		if(this._incButton != null && this._incButton.hasEvent("click",$bind(this,this.onInc)) == false) {
			this._incButton.registerEvent("click",$bind(this,this.onInc));
		}
		if(this._thumb != null && this._thumb.hasEvent("mousedown",$bind(this,this.onThumbMouseDown)) == false) {
			this._thumb.registerEvent("mousedown",$bind(this,this.onThumbMouseDown));
		}
	}
	,unregister: function() {
		this.unregisterEvent("mousedown",$bind(this,this.onMouseDown));
		if(this._deincButton != null) {
			this._deincButton.unregisterEvent("click",$bind(this,this.onDeinc));
		}
		if(this._incButton != null) {
			this._incButton.unregisterEvent("click",$bind(this,this.onInc));
		}
		if(this._thumb != null) {
			this._thumb.unregisterEvent("mousedown",$bind(this,this.onThumbMouseDown));
		}
	}
	,onMouseDown: function(event) {
		var componentOffset = this._scroll.getComponentOffset();
		if(this._deincButton.hitTest(event.screenX - componentOffset.x,event.screenY - componentOffset.y) == false && this._incButton.hitTest(event.screenX - componentOffset.x,event.screenY - componentOffset.y) == false) {
			this._scroll.applyPageFromCoord(new haxe_ui_geom_Point(event.screenX - componentOffset.x,event.screenY - componentOffset.y));
		}
	}
	,onDeinc: function(event) {
		var fh = this._scroll;
		fh.set_pos(fh.get_pos() - this._scroll.get_increment());
	}
	,onInc: function(event) {
		var fh = this._scroll;
		fh.set_pos(fh.get_pos() + this._scroll.get_increment());
	}
	,_mouseDownOffset: null
	,onThumbMouseDown: function(event) {
		this._mouseDownOffset = new haxe_ui_geom_Point();
		var tmp = event.screenX - this._thumb.get_left();
		var tmp1 = this._scroll.get_layout().get_paddingLeft();
		this._mouseDownOffset.x = tmp + tmp1;
		var tmp = event.screenY - this._thumb.get_top();
		var tmp1 = this._scroll.get_layout().get_paddingTop();
		this._mouseDownOffset.y = tmp + tmp1;
		this._scroll.get_screen().registerEvent("mouseup",$bind(this,this.onScreenMouseUp));
		this._scroll.get_screen().registerEvent("mousemove",$bind(this,this.onScreenMouseMove));
	}
	,onScreenMouseUp: function(event) {
		this._mouseDownOffset = null;
		this._scroll.get_screen().unregisterEvent("mouseup",$bind(this,this.onScreenMouseUp));
		this._scroll.get_screen().unregisterEvent("mousemove",$bind(this,this.onScreenMouseMove));
	}
	,onScreenMouseMove: function(event) {
		if(this._mouseDownOffset == null) {
			return;
		}
		var coord = new haxe_ui_geom_Point(event.screenX - this._mouseDownOffset.x,event.screenY - this._mouseDownOffset.y);
		this._scroll.set_pos(this._scroll.posFromCoord(coord));
	}
	,__class__: haxe_ui_components__$Scroll_Events
});
var haxe_ui_components__$Scroll_ScrollValueBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Scroll.ScrollValueBehaviour"] = haxe_ui_components__$Scroll_ScrollValueBehaviour;
haxe_ui_components__$Scroll_ScrollValueBehaviour.__name__ = "haxe.ui.components._Scroll.ScrollValueBehaviour";
haxe_ui_components__$Scroll_ScrollValueBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Scroll_ScrollValueBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this.get())) {
			return;
		}
		haxe_ui_behaviours_DataBehaviour.prototype.set.call(this,value);
		var _this = this._component;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout",false);
		}
	}
	,validateData: function() {
		var scroll = js_Boot.__cast(this._component , haxe_ui_components_Scroll);
		var pos = scroll.get_pos();
		var min = scroll.get_min();
		var max = scroll.get_max();
		if(pos < min) {
			scroll.set_pos(min);
		} else if(pos > max) {
			scroll.set_pos(max);
		}
		var changeEvent = new haxe_ui_events_UIEvent("change");
		scroll.dispatch(changeEvent);
		var scrollEvent = new haxe_ui_events_ScrollEvent("scrollscroll");
		scroll.dispatch(scrollEvent);
	}
	,__class__: haxe_ui_components__$Scroll_ScrollValueBehaviour
});
var haxe_ui_components__$Scroll_ScrollMinMaxBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Scroll.ScrollMinMaxBehaviour"] = haxe_ui_components__$Scroll_ScrollMinMaxBehaviour;
haxe_ui_components__$Scroll_ScrollMinMaxBehaviour.__name__ = "haxe.ui.components._Scroll.ScrollMinMaxBehaviour";
haxe_ui_components__$Scroll_ScrollMinMaxBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Scroll_ScrollMinMaxBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this.get())) {
			return;
		}
		haxe_ui_behaviours_DataBehaviour.prototype.set.call(this,value);
		var _this = this._component;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout",false);
		}
	}
	,validateData: function() {
		var scroll = js_Boot.__cast(this._component , haxe_ui_components_Scroll);
		var pos = scroll.get_pos();
		var min = scroll.get_min();
		var max = scroll.get_max();
		if(pos < min) {
			scroll.set_pos(min);
		} else if(pos > max) {
			scroll.set_pos(max);
		}
		var changeEvent = new haxe_ui_events_UIEvent("change");
		scroll.dispatch(changeEvent);
	}
	,__class__: haxe_ui_components__$Scroll_ScrollMinMaxBehaviour
});
var haxe_ui_components_Spacer = function() {
	haxe_ui_core_Component.call(this);
};
$hxClasses["haxe.ui.components.Spacer"] = haxe_ui_components_Spacer;
haxe_ui_components_Spacer.__name__ = "haxe.ui.components.Spacer";
haxe_ui_components_Spacer.__super__ = haxe_ui_core_Component;
haxe_ui_components_Spacer.prototype = $extend(haxe_ui_core_Component.prototype,{
	registerBehaviours: function() {
		haxe_ui_core_Component.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_Component.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Spacer();
	}
	,__class__: haxe_ui_components_Spacer
});
var haxe_ui_components_Stepper = function() {
	haxe_ui_containers_VBox.call(this);
};
$hxClasses["haxe.ui.components.Stepper"] = haxe_ui_components_Stepper;
haxe_ui_components_Stepper.__name__ = "haxe.ui.components.Stepper";
haxe_ui_components_Stepper.__interfaces__ = [haxe_ui_core_IValueComponent];
haxe_ui_components_Stepper.__super__ = haxe_ui_containers_VBox;
haxe_ui_components_Stepper.prototype = $extend(haxe_ui_containers_VBox.prototype,{
	increment: function() {
		if(this.behaviours == null) {
			return null;
		}
		return this.behaviours.call("increment",null);
	}
	,deincrement: function() {
		if(this.behaviours == null) {
			return null;
		}
		return this.behaviours.call("deincrement",null);
	}
	,registerComposite: function() {
		haxe_ui_containers_VBox.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_components__$Stepper_Events;
		this._compositeBuilderClass = haxe_ui_components__$Stepper_Builder;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_VBox.prototype.registerBehaviours.call(this);
		this.behaviours.register("pos",haxe_ui_components__$Stepper_PosBehaviour);
		this.behaviours.register("step",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromInt(1));
		this.behaviours.register("min",haxe_ui_behaviours_DefaultBehaviour,null);
		this.behaviours.register("max",haxe_ui_behaviours_DefaultBehaviour,null);
		this.behaviours.register("precision",haxe_ui_behaviours_DefaultBehaviour,null);
		this.behaviours.register("repeater",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromBool(true));
		this.behaviours.register("repeatInterval",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromInt(100));
		this.behaviours.register("increment",haxe_ui_components__$Stepper_IncBehaviour);
		this.behaviours.register("deincrement",haxe_ui_components__$Stepper_DeincBehaviour);
	}
	,get_pos: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("pos"));
	}
	,set_pos: function(value) {
		this.behaviours.set("pos",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"pos"));
		return value;
	}
	,get_step: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("step"));
	}
	,set_step: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("step",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"step"));
		return value;
	}
	,get_min: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("min"));
	}
	,set_min: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("min",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"min"));
		return value;
	}
	,get_max: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("max"));
	}
	,set_max: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("max",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"max"));
		return value;
	}
	,get_precision: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toInt(this.behaviours.get("precision"));
	}
	,set_precision: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("precision",haxe_ui_util_Variant.fromInt(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"precision"));
		return value;
	}
	,get_repeater: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("repeater"));
	}
	,set_repeater: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("repeater",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"repeater"));
		return value;
	}
	,get_repeatInterval: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toInt(this.behaviours.get("repeatInterval"));
	}
	,set_repeatInterval: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("repeatInterval",haxe_ui_util_Variant.fromInt(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"repeatInterval"));
		return value;
	}
	,get_value: function() {
		return this.get_pos();
	}
	,set_value: function(value) {
		this.set_pos(value);
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_VBox.prototype.cloneComponent.call(this);
		c.set_pos(this.get_pos());
		c.set_step(this.get_step());
		if(this.get_min() != null) {
			c.set_min(this.get_min());
		}
		if(this.get_max() != null) {
			c.set_max(this.get_max());
		}
		if(this.get_precision() != null) {
			c.set_precision(this.get_precision());
		}
		c.set_repeater(this.get_repeater());
		c.set_repeatInterval(this.get_repeatInterval());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_components_Stepper();
	}
	,__class__: haxe_ui_components_Stepper
	,__properties__: $extend(haxe_ui_containers_VBox.prototype.__properties__,{set_repeatInterval:"set_repeatInterval",get_repeatInterval:"get_repeatInterval",set_repeater:"set_repeater",get_repeater:"get_repeater",set_precision:"set_precision",get_precision:"get_precision",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min",set_step:"set_step",get_step:"get_step",set_pos:"set_pos",get_pos:"get_pos"})
});
var haxe_ui_components__$Stepper_PosBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Stepper.PosBehaviour"] = haxe_ui_components__$Stepper_PosBehaviour;
haxe_ui_components__$Stepper_PosBehaviour.__name__ = "haxe.ui.components._Stepper.PosBehaviour";
haxe_ui_components__$Stepper_PosBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$Stepper_PosBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var stepper = js_Boot.__cast(this._component , haxe_ui_components_Stepper);
		var v = haxe_ui_util_Variant.toFloat(this._value);
		var min = stepper.get_min();
		var max = stepper.get_max();
		var v1;
		if(v == null || isNaN(v)) {
			v1 = min;
		} else {
			if(min != null && v < min) {
				v = min;
			} else if(max != null && v > max) {
				v = max;
			}
			v1 = v;
		}
		stepper.set_pos(v1);
		this._value = haxe_ui_util_Variant.fromFloat(v1);
		var event = new haxe_ui_events_UIEvent("change");
		this._component.dispatch(event);
	}
	,__class__: haxe_ui_components__$Stepper_PosBehaviour
});
var haxe_ui_components__$Stepper_IncBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Stepper.IncBehaviour"] = haxe_ui_components__$Stepper_IncBehaviour;
haxe_ui_components__$Stepper_IncBehaviour.__name__ = "haxe.ui.components._Stepper.IncBehaviour";
haxe_ui_components__$Stepper_IncBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$Stepper_IncBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var stepper = js_Boot.__cast(this._component , haxe_ui_components_Stepper);
		var newPos = stepper.get_pos();
		newPos += stepper.get_step();
		if(stepper.get_max() != null && newPos > stepper.get_max()) {
			newPos = stepper.get_max();
		}
		if(stepper.get_precision() != null) {
			var precision = stepper.get_precision();
			if(precision == null) {
				precision = 0;
			}
			newPos = Math.round(newPos * Math.pow(10,precision)) / Math.pow(10,precision);
		}
		stepper.set_pos(newPos);
		return null;
	}
	,__class__: haxe_ui_components__$Stepper_IncBehaviour
});
var haxe_ui_components__$Stepper_DeincBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._Stepper.DeincBehaviour"] = haxe_ui_components__$Stepper_DeincBehaviour;
haxe_ui_components__$Stepper_DeincBehaviour.__name__ = "haxe.ui.components._Stepper.DeincBehaviour";
haxe_ui_components__$Stepper_DeincBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$Stepper_DeincBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(param) {
		var stepper = js_Boot.__cast(this._component , haxe_ui_components_Stepper);
		var newPos = stepper.get_pos();
		newPos -= stepper.get_step();
		if(stepper.get_min() != null && newPos < stepper.get_min()) {
			newPos = stepper.get_min();
		}
		if(stepper.get_precision() != null) {
			var precision = stepper.get_precision();
			if(precision == null) {
				precision = 0;
			}
			newPos = Math.round(newPos * Math.pow(10,precision)) / Math.pow(10,precision);
		}
		stepper.set_pos(newPos);
		return null;
	}
	,__class__: haxe_ui_components__$Stepper_DeincBehaviour
});
var haxe_ui_components__$Stepper_Builder = function(stepper) {
	haxe_ui_core_CompositeBuilder.call(this,stepper);
	this._stepper = stepper;
};
$hxClasses["haxe.ui.components._Stepper.Builder"] = haxe_ui_components__$Stepper_Builder;
haxe_ui_components__$Stepper_Builder.__name__ = "haxe.ui.components._Stepper.Builder";
haxe_ui_components__$Stepper_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components__$Stepper_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_stepper: null
	,create: function() {
		var button = new haxe_ui_components_Button();
		button.set_styleNames("stepper-button stepper-inc");
		button.set_id("stepper-inc");
		button.set_repeater(this._stepper.get_repeater());
		button.set_easeInRepeater(true);
		button.set_allowFocus(false);
		button.set_repeatInterval(this._stepper.get_repeatInterval());
		this._stepper.addComponent(button);
		var button = new haxe_ui_components_Button();
		button.set_styleNames("stepper-button stepper-deinc");
		button.set_id("stepper-deinc");
		button.set_repeater(this._stepper.get_repeater());
		button.set_easeInRepeater(true);
		button.set_allowFocus(false);
		button.set_repeatInterval(this._stepper.get_repeatInterval());
		this._stepper.addComponent(button);
	}
	,__class__: haxe_ui_components__$Stepper_Builder
});
var haxe_ui_components__$Stepper_Events = function(stepper) {
	haxe_ui_events_Events.call(this,stepper);
	this._stepper = stepper;
};
$hxClasses["haxe.ui.components._Stepper.Events"] = haxe_ui_components__$Stepper_Events;
haxe_ui_components__$Stepper_Events.__name__ = "haxe.ui.components._Stepper.Events";
haxe_ui_components__$Stepper_Events.__super__ = haxe_ui_events_Events;
haxe_ui_components__$Stepper_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_stepper: null
	,register: function() {
		var button = this._stepper.findComponent("stepper-inc",haxe_ui_components_Button);
		if(!button.hasEvent("click",$bind(this,this.onInc))) {
			button.registerEvent("click",$bind(this,this.onInc));
		}
		var button = this._stepper.findComponent("stepper-deinc",haxe_ui_components_Button);
		if(!button.hasEvent("click",$bind(this,this.onDeinc))) {
			button.registerEvent("click",$bind(this,this.onDeinc));
		}
	}
	,unregister: function() {
		var button = this._stepper.findComponent("stepper-inc",haxe_ui_components_Button);
		button.unregisterEvent("click",$bind(this,this.onInc));
		var button = this._stepper.findComponent("stepper-deinc",haxe_ui_components_Button);
		button.unregisterEvent("click",$bind(this,this.onDeinc));
	}
	,onInc: function(event) {
		this._stepper.increment();
	}
	,onDeinc: function(event) {
		this._stepper.deincrement();
	}
	,__class__: haxe_ui_components__$Stepper_Events
});
var haxe_ui_components_TextField = function() {
	haxe_ui_core_InteractiveComponent.call(this);
};
$hxClasses["haxe.ui.components.TextField"] = haxe_ui_components_TextField;
haxe_ui_components_TextField.__name__ = "haxe.ui.components.TextField";
haxe_ui_components_TextField.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_components_TextField.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
		this.behaviours.register("password",haxe_ui_components__$TextField_PasswordBehaviour);
		this.behaviours.register("maxChars",haxe_ui_components__$TextField_MaxCharsBehaviour,haxe_ui_util_Variant.fromInt(-1));
		this.behaviours.register("restrictChars",haxe_ui_components__$TextField_RestrictCharsBehaviour);
		this.behaviours.register("placeholder",haxe_ui_components__$TextField_PlaceholderBehaviour);
		this.behaviours.register("text",haxe_ui_components__$TextField_TextBehaviour);
		this.behaviours.register("htmlText",haxe_ui_components__$TextField_HtmlTextBehaviour);
		this.behaviours.register("icon",haxe_ui_components__$TextField_IconBehaviour);
		this.behaviours.register("caretIndex",haxe_ui_components__$TextField_CaretIndexBehaviour);
		this.behaviours.register("selectionStartIndex",haxe_ui_components__$TextField_SelectionStartIndexBehaviour);
		this.behaviours.register("selectionEndIndex",haxe_ui_components__$TextField_SelectionEndIndexBehaviour);
	}
	,get_password: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("password"));
	}
	,set_password: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("password",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"password"));
		return value;
	}
	,get_maxChars: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toInt(this.behaviours.get("maxChars"));
	}
	,set_maxChars: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("maxChars",haxe_ui_util_Variant.fromInt(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"maxChars"));
		return value;
	}
	,get_restrictChars: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("restrictChars"));
	}
	,set_restrictChars: function(value) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			if(_g.c == String) {
				if(value != null && value.indexOf("{{") != -1 && value.indexOf("}}") != -1) {
					haxe_ui_locale_LocaleManager.get_instance().registerComponent(this,"restrictChars",null,value);
					return value;
				}
			}
		}
		this.behaviours.set("restrictChars",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"restrictChars"));
		return value;
	}
	,get_placeholder: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("placeholder"));
	}
	,set_placeholder: function(value) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			if(_g.c == String) {
				if(value != null && value.indexOf("{{") != -1 && value.indexOf("}}") != -1) {
					haxe_ui_locale_LocaleManager.get_instance().registerComponent(this,"placeholder",null,value);
					return value;
				}
			}
		}
		this.behaviours.set("placeholder",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"placeholder"));
		return value;
	}
	,get_htmlText: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("htmlText"));
	}
	,set_htmlText: function(value) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			if(_g.c == String) {
				if(value != null && value.indexOf("{{") != -1 && value.indexOf("}}") != -1) {
					haxe_ui_locale_LocaleManager.get_instance().registerComponent(this,"htmlText",null,value);
					return value;
				}
			}
		}
		this.behaviours.set("htmlText",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"htmlText"));
		return value;
	}
	,get_icon: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("icon"));
	}
	,set_icon: function(value) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			if(_g.c == String) {
				if(value != null && value.indexOf("{{") != -1 && value.indexOf("}}") != -1) {
					haxe_ui_locale_LocaleManager.get_instance().registerComponent(this,"icon",null,value);
					return value;
				}
			}
		}
		this.behaviours.set("icon",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"icon"));
		return value;
	}
	,get_caretIndex: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toInt(this.behaviours.get("caretIndex"));
	}
	,set_caretIndex: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("caretIndex",haxe_ui_util_Variant.fromInt(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"caretIndex"));
		return value;
	}
	,get_selectionStartIndex: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toInt(this.behaviours.get("selectionStartIndex"));
	}
	,set_selectionStartIndex: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("selectionStartIndex",haxe_ui_util_Variant.fromInt(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"selectionStartIndex"));
		return value;
	}
	,get_selectionEndIndex: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toInt(this.behaviours.get("selectionEndIndex"));
	}
	,set_selectionEndIndex: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("selectionEndIndex",haxe_ui_util_Variant.fromInt(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"selectionEndIndex"));
		return value;
	}
	,get_value: function() {
		return this.get_text();
	}
	,set_value: function(value) {
		this.set_text(value);
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		c.set_password(this.get_password());
		c.set_maxChars(this.get_maxChars());
		if(this.get_restrictChars() != null) {
			c.set_restrictChars(this.get_restrictChars());
		}
		if(this.get_placeholder() != null) {
			c.set_placeholder(this.get_placeholder());
		}
		if(this.get_htmlText() != null) {
			c.set_htmlText(this.get_htmlText());
		}
		if(this.get_icon() != null) {
			c.set_icon(this.get_icon());
		}
		c.set_caretIndex(this.get_caretIndex());
		c.set_selectionStartIndex(this.get_selectionStartIndex());
		c.set_selectionEndIndex(this.get_selectionEndIndex());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_components_TextField();
	}
	,registerComposite: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_components__$TextField_Events;
		this._compositeBuilderClass = haxe_ui_components__$TextField_Builder;
		this._defaultLayoutClass = haxe_ui_components__$TextField_TextFieldLayout;
	}
	,__class__: haxe_ui_components_TextField
	,__properties__: $extend(haxe_ui_core_InteractiveComponent.prototype.__properties__,{set_selectionEndIndex:"set_selectionEndIndex",get_selectionEndIndex:"get_selectionEndIndex",set_selectionStartIndex:"set_selectionStartIndex",get_selectionStartIndex:"get_selectionStartIndex",set_caretIndex:"set_caretIndex",get_caretIndex:"get_caretIndex",set_icon:"set_icon",get_icon:"get_icon",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_placeholder:"set_placeholder",get_placeholder:"get_placeholder",set_restrictChars:"set_restrictChars",get_restrictChars:"get_restrictChars",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",set_password:"set_password",get_password:"get_password"})
});
var haxe_ui_components__$TextField_TextFieldLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components._TextField.TextFieldLayout"] = haxe_ui_components__$TextField_TextFieldLayout;
haxe_ui_components__$TextField_TextFieldLayout.__name__ = "haxe.ui.components._TextField.TextFieldLayout";
haxe_ui_components__$TextField_TextFieldLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components__$TextField_TextFieldLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	iconPosition: null
	,get_iconPosition: function() {
		if(this.get_component().get_style().iconPosition == null) {
			return "left";
		}
		return this.get_component().get_style().iconPosition;
	}
	,repositionChildren: function() {
		var icon = this.get_component().findComponent(null,haxe_ui_components_Image,false);
		var xpos = this.get_paddingLeft();
		if(icon != null) {
			switch(this.get_iconPosition()) {
			case "left":
				icon.set_left(xpos);
				icon.set_top(this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2);
				xpos += icon.get_componentWidth() + this.get_horizontalSpacing();
				break;
			case "right":
				icon.set_left(this.get_component().get_componentWidth() - icon.get_componentWidth() - this.get_paddingRight());
				icon.set_top(this.get_component().get_componentHeight() / 2 - icon.get_componentHeight() / 2);
				break;
			}
		}
		if(this.get_component().hasTextInput() == true) {
			this.get_component().getTextInput().set_left(xpos);
			this.get_component().getTextInput().set_top(this.get_paddingTop() + this.get_component().get_componentHeight() / 2 - (this.get_component().getTextInput().get_height() + this.get_paddingTop() + this.get_paddingBottom()) / 2);
		}
	}
	,resizeChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.resizeChildren.call(this);
		if(this.get_component().hasTextInput() == true) {
			var size = this.get_usableSize();
			this.get_component().getTextInput().set_width(size.width);
			this.get_component().getTextInput().set_height(size.height);
		}
	}
	,calcAutoSize: function(exclusions) {
		var size = haxe_ui_layouts_DefaultLayout.prototype.calcAutoSize.call(this,exclusions);
		if(this.get_component().hasTextInput() == true) {
			if(this.get_component().getTextInput().get_textWidth() + this.get_paddingLeft() + this.get_paddingRight() > size.width) {
				size.width = this.get_component().getTextInput().get_textWidth() + this.get_paddingLeft() + this.get_paddingRight();
			}
			if(this.get_component().getTextInput().get_textHeight() + this.get_paddingTop() + this.get_paddingBottom() > size.height) {
				size.height = this.get_component().getTextInput().get_textHeight() + this.get_paddingTop() + this.get_paddingBottom();
			}
		}
		return size;
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_DefaultLayout.prototype.get_usableSize.call(this);
		var icon = this.get_component().findComponent(null,haxe_ui_components_Image,false);
		if(icon != null) {
			size.width -= icon.get_componentWidth() + this.get_horizontalSpacing();
		}
		return size;
	}
	,__class__: haxe_ui_components__$TextField_TextFieldLayout
	,__properties__: $extend(haxe_ui_layouts_DefaultLayout.prototype.__properties__,{get_iconPosition:"get_iconPosition"})
});
var haxe_ui_components__$TextField_PasswordBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.PasswordBehaviour"] = haxe_ui_components__$TextField_PasswordBehaviour;
haxe_ui_components__$TextField_PasswordBehaviour.__name__ = "haxe.ui.components._TextField.PasswordBehaviour";
haxe_ui_components__$TextField_PasswordBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextField_PasswordBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	originalValue: null
	,validateData: function() {
		if(this.originalValue == null) {
			this.originalValue = this._value;
		}
		var textfield = js_Boot.__cast(this._component , haxe_ui_components_TextField);
		textfield.getTextInput().set_password(haxe_ui_util_Variant.toBool(this._value));
	}
	,__class__: haxe_ui_components__$TextField_PasswordBehaviour
});
var haxe_ui_components__$TextField_MaxCharsBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.MaxCharsBehaviour"] = haxe_ui_components__$TextField_MaxCharsBehaviour;
haxe_ui_components__$TextField_MaxCharsBehaviour.__name__ = "haxe.ui.components._TextField.MaxCharsBehaviour";
haxe_ui_components__$TextField_MaxCharsBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextField_MaxCharsBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var textfield = js_Boot.__cast(this._component , haxe_ui_components_TextField);
		haxe_ui_components__$TextField_TextFieldHelper.validateText(textfield,textfield.get_text());
	}
	,__class__: haxe_ui_components__$TextField_MaxCharsBehaviour
});
var haxe_ui_components__$TextField_RestrictCharsBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.RestrictCharsBehaviour"] = haxe_ui_components__$TextField_RestrictCharsBehaviour;
haxe_ui_components__$TextField_RestrictCharsBehaviour.__name__ = "haxe.ui.components._TextField.RestrictCharsBehaviour";
haxe_ui_components__$TextField_RestrictCharsBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextField_RestrictCharsBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	regexp: null
	,validateData: function() {
		var excludeEReg = new EReg("\\^(.-.|.)","gu");
		var excludeChars = "";
		var includeChars = excludeEReg.map(haxe_ui_util_Variant.toString(this._value),function(ereg) {
			excludeChars += ereg.matched(1);
			return "";
		});
		var testRegexpParts = [];
		if(includeChars.length > 0) {
			testRegexpParts.push("[^" + (this._value == null ? "null" : haxe_ui_util_Variant.toString(this._value)) + "]");
		}
		if(excludeChars.length > 0) {
			testRegexpParts.push("[" + excludeChars + "]");
		}
		this.regexp = new EReg("(" + testRegexpParts.join(" | ") + ")","g");
		var textfield = js_Boot.__cast(this._component , haxe_ui_components_TextField);
		haxe_ui_components__$TextField_TextFieldHelper.validateText(textfield,textfield.get_text());
	}
	,__class__: haxe_ui_components__$TextField_RestrictCharsBehaviour
});
var haxe_ui_components__$TextField_PlaceholderBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.PlaceholderBehaviour"] = haxe_ui_components__$TextField_PlaceholderBehaviour;
haxe_ui_components__$TextField_PlaceholderBehaviour.__name__ = "haxe.ui.components._TextField.PlaceholderBehaviour";
haxe_ui_components__$TextField_PlaceholderBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextField_PlaceholderBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var textfield = js_Boot.__cast(this._component , haxe_ui_components_TextField);
		haxe_ui_components__$TextField_TextFieldHelper.validateText(textfield,textfield.get_text());
	}
	,__class__: haxe_ui_components__$TextField_PlaceholderBehaviour
});
var haxe_ui_components__$TextField_TextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.TextBehaviour"] = haxe_ui_components__$TextField_TextBehaviour;
haxe_ui_components__$TextField_TextBehaviour.__name__ = "haxe.ui.components._TextField.TextBehaviour";
haxe_ui_components__$TextField_TextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextField_TextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var textfield = js_Boot.__cast(this._component , haxe_ui_components_TextField);
		haxe_ui_components__$TextField_TextFieldHelper.validateText(textfield,haxe_ui_util_Variant.toString(this._value));
		if(this._value != null && haxe_ui_util_Variant.neq(this._value,haxe_ui_util_Variant.fromString(""))) {
			this._value = haxe_ui_util_Variant.fromString(textfield.getTextInput().get_text());
		}
	}
	,__class__: haxe_ui_components__$TextField_TextBehaviour
});
var haxe_ui_components__$TextField_HtmlTextBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.HtmlTextBehaviour"] = haxe_ui_components__$TextField_HtmlTextBehaviour;
haxe_ui_components__$TextField_HtmlTextBehaviour.__name__ = "haxe.ui.components._TextField.HtmlTextBehaviour";
haxe_ui_components__$TextField_HtmlTextBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextField_HtmlTextBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var textfield = js_Boot.__cast(this._component , haxe_ui_components_TextField);
		haxe_ui_components__$TextField_TextFieldHelper.validateHtmlText(textfield,haxe_ui_util_Variant.toString(this._value));
		if(this._value != null && haxe_ui_util_Variant.neq(this._value,haxe_ui_util_Variant.fromString(""))) {
			this._value = haxe_ui_util_Variant.fromString(textfield.getTextInput().get_htmlText());
		}
	}
	,__class__: haxe_ui_components__$TextField_HtmlTextBehaviour
});
var haxe_ui_components__$TextField_IconBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.IconBehaviour"] = haxe_ui_components__$TextField_IconBehaviour;
haxe_ui_components__$TextField_IconBehaviour.__name__ = "haxe.ui.components._TextField.IconBehaviour";
haxe_ui_components__$TextField_IconBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_components__$TextField_IconBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var textfield = js_Boot.__cast(this._component , haxe_ui_components_TextField);
		var icon = textfield.findComponent(null,haxe_ui_components_Image,false);
		if((this._value == null || haxe_ui_util_Variant.get_isNull(this._value)) && icon != null) {
			textfield.removeComponent(icon);
		} else {
			if(icon == null) {
				icon = new haxe_ui_components_Image();
				icon.set_id("textfield-icon");
				icon.addClass("icon");
				icon.set_scriptAccess(false);
				textfield.addComponentAt(icon,0);
			}
			icon.set_resource(haxe_ui_util_Variant.fromString(haxe_ui_util_Variant.toString(this._value)));
		}
	}
	,__class__: haxe_ui_components__$TextField_IconBehaviour
});
var haxe_ui_components__$TextField_CaretIndexBehaviour = function(component) {
	haxe_ui_behaviours_ValueBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.CaretIndexBehaviour"] = haxe_ui_components__$TextField_CaretIndexBehaviour;
haxe_ui_components__$TextField_CaretIndexBehaviour.__name__ = "haxe.ui.components._TextField.CaretIndexBehaviour";
haxe_ui_components__$TextField_CaretIndexBehaviour.__super__ = haxe_ui_behaviours_ValueBehaviour;
haxe_ui_components__$TextField_CaretIndexBehaviour.prototype = $extend(haxe_ui_behaviours_ValueBehaviour.prototype,{
	get: function() {
		return haxe_ui_util_Variant.fromInt(this._component.getTextInput().get_caretIndex());
	}
	,set: function(value) {
		haxe_ui_behaviours_ValueBehaviour.prototype.set.call(this,value);
		this._component.syncComponentValidation();
		this._component.getTextInput().set_caretIndex(haxe_ui_util_Variant.toInt(value));
	}
	,__class__: haxe_ui_components__$TextField_CaretIndexBehaviour
});
var haxe_ui_components__$TextField_SelectionStartIndexBehaviour = function(component) {
	haxe_ui_behaviours_ValueBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.SelectionStartIndexBehaviour"] = haxe_ui_components__$TextField_SelectionStartIndexBehaviour;
haxe_ui_components__$TextField_SelectionStartIndexBehaviour.__name__ = "haxe.ui.components._TextField.SelectionStartIndexBehaviour";
haxe_ui_components__$TextField_SelectionStartIndexBehaviour.__super__ = haxe_ui_behaviours_ValueBehaviour;
haxe_ui_components__$TextField_SelectionStartIndexBehaviour.prototype = $extend(haxe_ui_behaviours_ValueBehaviour.prototype,{
	get: function() {
		return haxe_ui_util_Variant.fromInt(this._component.getTextInput().get_selectionStartIndex());
	}
	,set: function(value) {
		haxe_ui_behaviours_ValueBehaviour.prototype.set.call(this,value);
		this._component.syncComponentValidation();
		this._component.getTextInput().set_selectionStartIndex(haxe_ui_util_Variant.toInt(value));
	}
	,__class__: haxe_ui_components__$TextField_SelectionStartIndexBehaviour
});
var haxe_ui_components__$TextField_SelectionEndIndexBehaviour = function(component) {
	haxe_ui_behaviours_ValueBehaviour.call(this,component);
};
$hxClasses["haxe.ui.components._TextField.SelectionEndIndexBehaviour"] = haxe_ui_components__$TextField_SelectionEndIndexBehaviour;
haxe_ui_components__$TextField_SelectionEndIndexBehaviour.__name__ = "haxe.ui.components._TextField.SelectionEndIndexBehaviour";
haxe_ui_components__$TextField_SelectionEndIndexBehaviour.__super__ = haxe_ui_behaviours_ValueBehaviour;
haxe_ui_components__$TextField_SelectionEndIndexBehaviour.prototype = $extend(haxe_ui_behaviours_ValueBehaviour.prototype,{
	get: function() {
		return haxe_ui_util_Variant.fromInt(this._component.getTextInput().get_selectionEndIndex());
	}
	,set: function(value) {
		haxe_ui_behaviours_ValueBehaviour.prototype.set.call(this,value);
		this._component.syncComponentValidation();
		this._component.getTextInput().set_selectionEndIndex(haxe_ui_util_Variant.toInt(value));
	}
	,__class__: haxe_ui_components__$TextField_SelectionEndIndexBehaviour
});
var haxe_ui_components__$TextField_TextFieldHelper = function() { };
$hxClasses["haxe.ui.components._TextField.TextFieldHelper"] = haxe_ui_components__$TextField_TextFieldHelper;
haxe_ui_components__$TextField_TextFieldHelper.__name__ = "haxe.ui.components._TextField.TextFieldHelper";
haxe_ui_components__$TextField_TextFieldHelper.validateText = function(textfield,text) {
	if(text == null) {
		text = "";
	}
	var placeholderVisible = text.length == 0;
	var password = (js_Boot.__cast(textfield.behaviours.find("password") , haxe_ui_components__$TextField_PasswordBehaviour)).originalValue;
	var regexp = (js_Boot.__cast(textfield.behaviours.find("restrictChars") , haxe_ui_components__$TextField_RestrictCharsBehaviour)).regexp;
	if(textfield.get_maxChars() > 0 && text.length > textfield.get_maxChars() && placeholderVisible == false) {
		text = HxOverrides.substr(text,0,textfield.get_maxChars());
	}
	if(regexp != null) {
		text = text.replace(regexp.r,"");
	}
	if(textfield.get_placeholder() != null) {
		if(textfield.get_focus() == false) {
			if(text.length == 0) {
				text = textfield.get_placeholder();
				textfield.set_password(false);
				textfield.addClass(":empty");
			} else if(text != textfield.get_placeholder()) {
				textfield.set_password(haxe_ui_util_Variant.toBool(password));
				textfield.removeClass(":empty");
			}
		} else {
			textfield.removeClass(":empty");
			textfield.set_password(haxe_ui_util_Variant.toBool(password));
		}
	} else {
		textfield.set_password(haxe_ui_util_Variant.toBool(password));
		if(placeholderVisible == true) {
			textfield.removeClass(":empty");
		}
	}
	textfield.getTextInput().set_text("" + text);
	if(!(textfield._layout == null || textfield._layoutLocked == true)) {
		textfield.invalidateComponent("layout",false);
	}
};
haxe_ui_components__$TextField_TextFieldHelper.validateHtmlText = function(textfield,htmlText) {
	if(htmlText == null) {
		htmlText = "";
	}
	var placeholderVisible = htmlText.length == 0;
	var password = (js_Boot.__cast(textfield.behaviours.find("password") , haxe_ui_components__$TextField_PasswordBehaviour)).originalValue;
	var regexp = (js_Boot.__cast(textfield.behaviours.find("restrictChars") , haxe_ui_components__$TextField_RestrictCharsBehaviour)).regexp;
	if(textfield.get_maxChars() > 0 && htmlText.length > textfield.get_maxChars() && placeholderVisible == false) {
		htmlText = HxOverrides.substr(htmlText,0,textfield.get_maxChars());
	}
	if(regexp != null) {
		htmlText = htmlText.replace(regexp.r,"");
	}
	if(textfield.get_placeholder() != null) {
		if(textfield.get_focus() == false) {
			if(htmlText.length == 0) {
				htmlText = textfield.get_placeholder();
				textfield.set_password(false);
				textfield.addClass(":empty");
			} else if(htmlText != textfield.get_placeholder()) {
				textfield.set_password(haxe_ui_util_Variant.toBool(password));
				textfield.removeClass(":empty");
			}
		} else {
			textfield.removeClass(":empty");
			textfield.set_password(haxe_ui_util_Variant.toBool(password));
		}
	} else {
		textfield.set_password(haxe_ui_util_Variant.toBool(password));
		if(placeholderVisible == true) {
			textfield.removeClass(":empty");
		}
	}
	textfield.getTextInput().set_htmlText("" + htmlText);
	if(!(textfield._layout == null || textfield._layoutLocked == true)) {
		textfield.invalidateComponent("layout",false);
	}
};
var haxe_ui_components__$TextField_Events = function(textfield) {
	haxe_ui_events_Events.call(this,textfield);
	this._textfield = textfield;
};
$hxClasses["haxe.ui.components._TextField.Events"] = haxe_ui_components__$TextField_Events;
haxe_ui_components__$TextField_Events.__name__ = "haxe.ui.components._TextField.Events";
haxe_ui_components__$TextField_Events.__super__ = haxe_ui_events_Events;
haxe_ui_components__$TextField_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	_textfield: null
	,register: function() {
		var _gthis = this;
		if(this._textfield.getTextInput().get_data().onChangedCallback == null) {
			this._textfield.getTextInput().set_multiline(false);
			this._textfield.getTextInput().get_data().onChangedCallback = function() {
				if(_gthis._textfield.classes.indexOf(":empty") != -1 == false) {
					_gthis._textfield.set_text(_gthis._textfield.getTextInput().get_text());
					_gthis._textfield.dispatch(new haxe_ui_events_UIEvent("change"));
				}
			};
		}
		this.registerEvent("mousedown",$bind(this,this.onMouseDown));
		this.registerEvent("focusin",$bind(this,this.onFocusChange));
		this.registerEvent("focusout",$bind(this,this.onFocusChange));
	}
	,unregister: function() {
		this._textfield.getTextInput().get_data().onChangedCallback = null;
		this.unregisterEvent("mousedown",$bind(this,this.onMouseDown));
		this.unregisterEvent("focusin",$bind(this,this.onFocusChange));
		this.unregisterEvent("focusout",$bind(this,this.onFocusChange));
	}
	,onMouseDown: function(event) {
		this._textfield.set_focus(true);
	}
	,onFocusChange: function(event) {
		if(this._textfield.get_focus() == true) {
			this._textfield.getTextInput().focus();
		} else {
			this._textfield.getTextInput().blur();
		}
		haxe_ui_components__$TextField_TextFieldHelper.validateText(this._textfield,this._textfield.get_text());
	}
	,__class__: haxe_ui_components__$TextField_Events
});
var haxe_ui_components__$TextField_Builder = function(textfield) {
	haxe_ui_core_CompositeBuilder.call(this,textfield);
	this._textfield = textfield;
};
$hxClasses["haxe.ui.components._TextField.Builder"] = haxe_ui_components__$TextField_Builder;
haxe_ui_components__$TextField_Builder.__name__ = "haxe.ui.components._TextField.Builder";
haxe_ui_components__$TextField_Builder.isHtml = function(v) {
	if(v == null) {
		return false;
	} else {
		return v.indexOf("<font ") != -1;
	}
};
haxe_ui_components__$TextField_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_components__$TextField_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_textfield: null
	,applyStyle: function(style) {
		if(style.icon != null) {
			this._textfield.set_icon(haxe_ui_util_Variant.toString(style.icon));
		}
		if(this._textfield.hasTextInput() == true) {
			this._textfield.getTextInput().set_textStyle(style);
			var tmp;
			if((style.contentType == "auto" || style.contentType == "html") && this._textfield.getTextInput().get_supportsHtml()) {
				var v = Std.string(this._textfield.get_text());
				tmp = v == null ? false : v.indexOf("<font ") != -1;
			} else {
				tmp = false;
			}
			if(tmp) {
				this._textfield.set_htmlText(this._textfield.get_text());
			}
		}
	}
	,__class__: haxe_ui_components__$TextField_Builder
});
var haxe_ui_components_VerticalScroll = function() {
	haxe_ui_components_Scroll.call(this);
};
$hxClasses["haxe.ui.components.VerticalScroll"] = haxe_ui_components_VerticalScroll;
haxe_ui_components_VerticalScroll.__name__ = "haxe.ui.components.VerticalScroll";
haxe_ui_components_VerticalScroll.__super__ = haxe_ui_components_Scroll;
haxe_ui_components_VerticalScroll.prototype = $extend(haxe_ui_components_Scroll.prototype,{
	registerBehaviours: function() {
		haxe_ui_components_Scroll.prototype.registerBehaviours.call(this);
		this.behaviours.register("posFromCoord",haxe_ui_components__$VerticalScroll_PosFromCoord);
		this.behaviours.register("applyPageFromCoord",haxe_ui_components__$VerticalScroll_ApplyPageFromCoord);
	}
	,createChildren: function() {
		haxe_ui_components_Scroll.prototype.createChildren.call(this);
		if(this.get_componentHeight() <= 0) {
			this.set_componentHeight(150);
		}
	}
	,createDefaults: function() {
		haxe_ui_components_Scroll.prototype.createDefaults.call(this);
		this._defaultLayoutClass = haxe_ui_components__$VerticalScroll_VerticalScrollLayout;
	}
	,cloneComponent: function() {
		var c = haxe_ui_components_Scroll.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_components_VerticalScroll();
	}
	,__class__: haxe_ui_components_VerticalScroll
});
var haxe_ui_components__$VerticalScroll_PosFromCoord = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._VerticalScroll.PosFromCoord"] = haxe_ui_components__$VerticalScroll_PosFromCoord;
haxe_ui_components__$VerticalScroll_PosFromCoord.__name__ = "haxe.ui.components._VerticalScroll.PosFromCoord";
haxe_ui_components__$VerticalScroll_PosFromCoord.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$VerticalScroll_PosFromCoord.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(pos) {
		var p = js_Boot.__cast(pos , haxe_ui_geom_Point);
		var scroll = js_Boot.__cast(this._component , haxe_ui_components_Scroll);
		var deinc = this._component.findComponent("scroll-deinc-button");
		var thumb = this._component.findComponent("scroll-thumb-button");
		var ypos = p.y;
		var minY = 0;
		if(deinc != null && deinc.get_hidden() == false) {
			minY = deinc.get_height() + scroll.get_layout().get_verticalSpacing();
		}
		var maxY = scroll.get_layout().get_usableHeight() - thumb.get_height();
		if(deinc != null && deinc.get_hidden() == false) {
			maxY += deinc.get_height() + scroll.get_layout().get_verticalSpacing();
		}
		if(ypos < minY) {
			ypos = minY;
		} else if(ypos > maxY) {
			ypos = maxY;
		}
		var ucy = scroll.get_layout().get_usableHeight();
		ucy -= thumb.get_height();
		var m = scroll.get_max() - scroll.get_min() | 0;
		var v = ypos - minY;
		var value = scroll.get_min() + v / ucy * m;
		return haxe_ui_util_Variant.fromFloat(value);
	}
	,__class__: haxe_ui_components__$VerticalScroll_PosFromCoord
});
var haxe_ui_components__$VerticalScroll_ApplyPageFromCoord = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.components._VerticalScroll.ApplyPageFromCoord"] = haxe_ui_components__$VerticalScroll_ApplyPageFromCoord;
haxe_ui_components__$VerticalScroll_ApplyPageFromCoord.__name__ = "haxe.ui.components._VerticalScroll.ApplyPageFromCoord";
haxe_ui_components__$VerticalScroll_ApplyPageFromCoord.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_components__$VerticalScroll_ApplyPageFromCoord.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	call: function(pos) {
		var p = js_Boot.__cast(pos , haxe_ui_geom_Point);
		var scroll = js_Boot.__cast(this._component , haxe_ui_components_Scroll);
		var thumb = this._component.findComponent("scroll-thumb-button");
		if(p.y < thumb.get_screenTop()) {
			scroll.set_pos(scroll.get_pos() - scroll.get_pageSize());
		} else if(p.y > thumb.get_screenTop() + thumb.get_height()) {
			scroll.set_pos(scroll.get_pos() + scroll.get_pageSize());
		}
		return null;
	}
	,__class__: haxe_ui_components__$VerticalScroll_ApplyPageFromCoord
});
var haxe_ui_components__$VerticalScroll_VerticalScrollLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.components._VerticalScroll.VerticalScrollLayout"] = haxe_ui_components__$VerticalScroll_VerticalScrollLayout;
haxe_ui_components__$VerticalScroll_VerticalScrollLayout.__name__ = "haxe.ui.components._VerticalScroll.VerticalScrollLayout";
haxe_ui_components__$VerticalScroll_VerticalScrollLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_components__$VerticalScroll_VerticalScrollLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.resizeChildren.call(this);
		var scroll = js_Boot.__cast(this.get_component() , haxe_ui_components_Scroll);
		var thumb = this.get_component().findComponent("scroll-thumb-button");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var ucy = this.get_usableHeight();
			var thumbHeight = scroll.get_pageSize() / m * ucy;
			if(thumbHeight < this.get_innerWidth()) {
				thumbHeight = this.get_innerWidth();
			} else if(thumbHeight > ucy) {
				thumbHeight = ucy;
			}
			if(thumbHeight > 0 && isNaN(thumbHeight) == false) {
				thumb.set_height(thumbHeight);
			}
		}
	}
	,repositionChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.repositionChildren.call(this);
		var deinc = this.get_component().findComponent("scroll-deinc-button");
		var inc = this.get_component().findComponent("scroll-inc-button");
		if(inc != null && this.hidden(inc) == false) {
			inc.set_top(this.get_component().get_height() - inc.get_height() - this.get_paddingBottom());
		}
		var scroll = js_Boot.__cast(this.get_component() , haxe_ui_components_Scroll);
		var thumb = this.get_component().findComponent("scroll-thumb-button");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var u = this.get_usableHeight();
			u -= thumb.get_height();
			var y = (scroll.get_pos() - scroll.get_min()) / m * u;
			y += this.get_paddingTop();
			if(deinc != null && this.hidden(deinc) == false) {
				y += deinc.get_height() + this.get_verticalSpacing();
			}
			thumb.set_left(Math.round(thumb.get_left()));
			thumb.set_top(y);
		}
	}
	,get_usableHeight: function() {
		var ucy = this.get_innerHeight();
		var deinc = this.get_component().findComponent("scroll-deinc-button");
		var inc = this.get_component().findComponent("scroll-inc-button");
		if(deinc != null && this.hidden(deinc) == false) {
			ucy -= deinc.get_height() + this.get_verticalSpacing();
		}
		if(inc != null && this.hidden(inc) == false) {
			ucy -= inc.get_height() + this.get_verticalSpacing();
		}
		return ucy;
	}
	,__class__: haxe_ui_components__$VerticalScroll_VerticalScrollLayout
});
var haxe_ui_containers_CalendarView = function() {
	haxe_ui_containers_Box.call(this);
};
$hxClasses["haxe.ui.containers.CalendarView"] = haxe_ui_containers_CalendarView;
haxe_ui_containers_CalendarView.__name__ = "haxe.ui.containers.CalendarView";
haxe_ui_containers_CalendarView.__super__ = haxe_ui_containers_Box;
haxe_ui_containers_CalendarView.prototype = $extend(haxe_ui_containers_Box.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
		this.behaviours.register("selectedDate",haxe_ui_containers__$CalendarView_SelectedDateBehaviour,haxe_ui_util_Variant.fromDate(new Date()));
	}
	,get_selectedDate: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toDate(this.behaviours.get("selectedDate"));
	}
	,set_selectedDate: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("selectedDate",haxe_ui_util_Variant.fromDate(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"selectedDate"));
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_CalendarView();
	}
	,registerComposite: function() {
		haxe_ui_containers_Box.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers__$CalendarView_Events;
		this._defaultLayoutClass = haxe_ui_layouts_VerticalLayout;
		this._compositeBuilderClass = haxe_ui_containers__$CalendarView_Builder;
	}
	,__class__: haxe_ui_containers_CalendarView
	,__properties__: $extend(haxe_ui_containers_Box.prototype.__properties__,{set_selectedDate:"set_selectedDate",get_selectedDate:"get_selectedDate"})
});
var haxe_ui_containers__$CalendarView_SelectedDateBehaviour = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._CalendarView.SelectedDateBehaviour"] = haxe_ui_containers__$CalendarView_SelectedDateBehaviour;
haxe_ui_containers__$CalendarView_SelectedDateBehaviour.__name__ = "haxe.ui.containers._CalendarView.SelectedDateBehaviour";
haxe_ui_containers__$CalendarView_SelectedDateBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_containers__$CalendarView_SelectedDateBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	get: function() {
		return haxe_ui_util_Variant.fromDate(this._component.findComponent(null,haxe_ui_components_Calendar).get_selectedDate());
	}
	,set: function(value) {
		this._component.findComponent(null,haxe_ui_components_Calendar).set_selectedDate(haxe_ui_util_Variant.toDate(value));
	}
	,__class__: haxe_ui_containers__$CalendarView_SelectedDateBehaviour
});
var haxe_ui_containers__$CalendarView_Events = function(target) {
	haxe_ui_events_Events.call(this,target);
};
$hxClasses["haxe.ui.containers._CalendarView.Events"] = haxe_ui_containers__$CalendarView_Events;
haxe_ui_containers__$CalendarView_Events.__name__ = "haxe.ui.containers._CalendarView.Events";
haxe_ui_containers__$CalendarView_Events.__super__ = haxe_ui_events_Events;
haxe_ui_containers__$CalendarView_Events.prototype = $extend(haxe_ui_events_Events.prototype,{
	register: function() {
		var button = this._target.findComponent("prev-month");
		if(button != null && button.hasEvent("click") == false) {
			button.registerEvent("click",$bind(this,this.onPrevMonth));
		}
		var button = this._target.findComponent("next-month");
		if(button != null && button.hasEvent("click") == false) {
			button.registerEvent("click",$bind(this,this.onNextMonth));
		}
		var stepper = this._target.findComponent("current-year");
		if(stepper != null && stepper.hasEvent("change") == false) {
			stepper.registerEvent("change",$bind(this,this.onYearChange));
		}
		if(this._target.findComponent(null,haxe_ui_components_Calendar).hasEvent("datechange",$bind(this,this.onDateChange)) == false) {
			this._target.findComponent(null,haxe_ui_components_Calendar).registerEvent("datechange",$bind(this,this.onDateChange));
		}
		if(this._target.findComponent(null,haxe_ui_components_Calendar).hasEvent("change",$bind(this,this.onCalendarChange)) == false) {
			this._target.findComponent(null,haxe_ui_components_Calendar).registerEvent("change",$bind(this,this.onCalendarChange));
		}
		this.registerEvent("mousewheel",$bind(this,this.onMouseWheel));
	}
	,onPrevMonth: function(event) {
		this._target.findComponent(null,haxe_ui_components_Calendar).previousMonth();
	}
	,onNextMonth: function(event) {
		this._target.findComponent(null,haxe_ui_components_Calendar).nextMonth();
	}
	,onYearChange: function(event) {
		var calendar = this._target.findComponent(null,haxe_ui_components_Calendar);
		var stepper = this._target.findComponent("current-year");
		if(stepper.get_pos() > calendar.get_date().getFullYear()) {
			calendar.nextYear();
		} else if(stepper.get_pos() < calendar.get_date().getFullYear()) {
			calendar.previousYear();
		}
	}
	,onDateChange: function(event) {
		var calendar = this._target.findComponent(null,haxe_ui_components_Calendar);
		var monthName = haxe_ui_containers_CalendarView.MONTH_NAMES[calendar.get_date().getMonth()];
		this._target.findComponent("current-month",haxe_ui_components_Label).set_text(monthName + "  " + calendar.get_date().getFullYear());
	}
	,onCalendarChange: function(event) {
		var calendar = this._target.findComponent(null,haxe_ui_components_Calendar);
		var stepper = this._target.findComponent("current-year");
		stepper.set_pos(calendar.get_selectedDate().getFullYear());
		this._target.dispatch(new haxe_ui_events_UIEvent("change"));
	}
	,onMouseWheel: function(event) {
		if(event.delta >= 1) {
			this._target.findComponent(null,haxe_ui_components_Calendar).nextMonth();
		} else {
			this._target.findComponent(null,haxe_ui_components_Calendar).previousMonth();
		}
	}
	,__class__: haxe_ui_containers__$CalendarView_Events
});
var haxe_ui_containers__$CalendarView_Builder = function(calendarView) {
	haxe_ui_core_CompositeBuilder.call(this,calendarView);
	this._calendarView = calendarView;
};
$hxClasses["haxe.ui.containers._CalendarView.Builder"] = haxe_ui_containers__$CalendarView_Builder;
haxe_ui_containers__$CalendarView_Builder.__name__ = "haxe.ui.containers._CalendarView.Builder";
haxe_ui_containers__$CalendarView_Builder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers__$CalendarView_Builder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_calendarView: null
	,create: function() {
		var box = new haxe_ui_containers_Box();
		box.set_percentWidth(100);
		var button = new haxe_ui_components_Button();
		button.set_id("prev-month");
		box.addComponent(button);
		var hbox = new haxe_ui_containers_HBox();
		hbox.set_horizontalAlign("center");
		hbox.set_verticalAlign("center");
		var label = new haxe_ui_components_Label();
		label.set_id("current-month");
		var now = new Date();
		label.set_text(haxe_ui_containers_CalendarView.MONTH_NAMES[now.getMonth()] + "  " + now.getFullYear());
		hbox.addComponent(label);
		var stepper = new haxe_ui_components_Stepper();
		stepper.set_id("current-year");
		stepper.set_min(0);
		stepper.set_max(now.getFullYear() + 1000);
		stepper.set_pos(now.getFullYear());
		stepper.set_repeater(false);
		hbox.addComponent(stepper);
		box.addComponent(hbox);
		var button = new haxe_ui_components_Button();
		button.set_id("next-month");
		button.set_horizontalAlign("right");
		box.addComponent(button);
		this._calendarView.addComponent(box);
		var calendar = new haxe_ui_components_Calendar();
		calendar.set_horizontalAlign("center");
		this._calendarView.addComponent(calendar);
	}
	,__class__: haxe_ui_containers__$CalendarView_Builder
});
var haxe_ui_containers_HBox = function() {
	haxe_ui_containers_Box.call(this);
	this.set_layout(new haxe_ui_layouts_HorizontalLayout());
};
$hxClasses["haxe.ui.containers.HBox"] = haxe_ui_containers_HBox;
haxe_ui_containers_HBox.__name__ = "haxe.ui.containers.HBox";
haxe_ui_containers_HBox.__super__ = haxe_ui_containers_Box;
haxe_ui_containers_HBox.prototype = $extend(haxe_ui_containers_Box.prototype,{
	get_continuous: function() {
		return ((this._layout) instanceof haxe_ui_layouts_HorizontalContinuousLayout);
	}
	,set_continuous: function(value) {
		if(value == true) {
			this.set_layout(new haxe_ui_layouts_HorizontalContinuousLayout());
		} else {
			this.set_layout(new haxe_ui_layouts_HorizontalLayout());
		}
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		c.set_continuous(this.get_continuous());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_HBox();
	}
	,__class__: haxe_ui_containers_HBox
	,__properties__: $extend(haxe_ui_containers_Box.prototype.__properties__,{set_continuous:"set_continuous",get_continuous:"get_continuous"})
});
var haxe_ui_containers_IVirtualContainer = function() { };
$hxClasses["haxe.ui.containers.IVirtualContainer"] = haxe_ui_containers_IVirtualContainer;
haxe_ui_containers_IVirtualContainer.__name__ = "haxe.ui.containers.IVirtualContainer";
haxe_ui_containers_IVirtualContainer.__isInterface__ = true;
haxe_ui_containers_IVirtualContainer.prototype = {
	get_itemWidth: null
	,set_itemWidth: null
	,get_itemHeight: null
	,set_itemHeight: null
	,get_itemCount: null
	,set_itemCount: null
	,get_variableItemSize: null
	,set_variableItemSize: null
	,get_virtual: null
	,set_virtual: null
	,get_hscrollPos: null
	,set_hscrollPos: null
	,get_hscrollMax: null
	,set_hscrollMax: null
	,get_hscrollPageSize: null
	,set_hscrollPageSize: null
	,get_vscrollPos: null
	,set_vscrollPos: null
	,get_vscrollMax: null
	,set_vscrollMax: null
	,get_vscrollPageSize: null
	,set_vscrollPageSize: null
	,get_itemRenderer: null
	,set_itemRenderer: null
	,get_itemRendererClass: null
	,set_itemRendererClass: null
	,__class__: haxe_ui_containers_IVirtualContainer
	,__properties__: {set_itemRendererClass:"set_itemRendererClass",get_itemRendererClass:"get_itemRendererClass",set_itemRenderer:"set_itemRenderer",get_itemRenderer:"get_itemRenderer",set_vscrollPageSize:"set_vscrollPageSize",get_vscrollPageSize:"get_vscrollPageSize",set_vscrollMax:"set_vscrollMax",get_vscrollMax:"get_vscrollMax",set_vscrollPos:"set_vscrollPos",get_vscrollPos:"get_vscrollPos",set_hscrollPageSize:"set_hscrollPageSize",get_hscrollPageSize:"get_hscrollPageSize",set_hscrollMax:"set_hscrollMax",get_hscrollMax:"get_hscrollMax",set_hscrollPos:"set_hscrollPos",get_hscrollPos:"get_hscrollPos",set_virtual:"set_virtual",get_virtual:"get_virtual",set_variableItemSize:"set_variableItemSize",get_variableItemSize:"get_variableItemSize",set_itemCount:"set_itemCount",get_itemCount:"get_itemCount",set_itemHeight:"set_itemHeight",get_itemHeight:"get_itemHeight",set_itemWidth:"set_itemWidth",get_itemWidth:"get_itemWidth"}
};
var haxe_ui_core_IScrollView = function() { };
$hxClasses["haxe.ui.core.IScrollView"] = haxe_ui_core_IScrollView;
haxe_ui_core_IScrollView.__name__ = "haxe.ui.core.IScrollView";
haxe_ui_core_IScrollView.__isInterface__ = true;
haxe_ui_core_IScrollView.prototype = {
	ensureVisible: null
	,__class__: haxe_ui_core_IScrollView
};
var haxe_ui_containers_ScrollView = function() {
	haxe_ui_core_InteractiveComponent.call(this);
};
$hxClasses["haxe.ui.containers.ScrollView"] = haxe_ui_containers_ScrollView;
haxe_ui_containers_ScrollView.__name__ = "haxe.ui.containers.ScrollView";
haxe_ui_containers_ScrollView.__interfaces__ = [haxe_ui_core_IScrollView];
haxe_ui_containers_ScrollView.__super__ = haxe_ui_core_InteractiveComponent;
haxe_ui_containers_ScrollView.prototype = $extend(haxe_ui_core_InteractiveComponent.prototype,{
	ensureVisible: function(component) {
		if(this.behaviours == null) {
			return;
		}
		this.behaviours.call("ensureVisible",component);
	}
	,validateComponentInternal: function(nextFrame) {
		if(nextFrame == null) {
			nextFrame = true;
		}
		if(this.get_native() == true) {
			haxe_ui_core_InteractiveComponent.prototype.validateComponentInternal.call(this,nextFrame);
			return;
		}
		var scrollInvalid = this.isComponentInvalid("scroll");
		var layoutInvalid = this.isComponentInvalid("layout");
		haxe_ui_core_InteractiveComponent.prototype.validateComponentInternal.call(this,nextFrame);
		if(scrollInvalid || layoutInvalid) {
			(js_Boot.__cast(this._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).checkScrolls();
			(js_Boot.__cast(this._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).updateScrollRect();
		}
	}
	,get_isScroller: function() {
		return true;
	}
	,registerBehaviours: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerBehaviours.call(this);
		this.behaviours.register("virtual",haxe_ui_containers__$ScrollView_Virtual);
		this.behaviours.register("contentLayoutName",haxe_ui_containers__$ScrollView_ContentLayoutName,haxe_ui_util_Variant.fromString("vertical"));
		this.behaviours.register("contentWidth",haxe_ui_containers__$ScrollView_ContentWidth);
		this.behaviours.register("percentContentWidth",haxe_ui_containers__$ScrollView_PercentContentWidth);
		this.behaviours.register("contentHeight",haxe_ui_containers__$ScrollView_ContentHeight);
		this.behaviours.register("percentContentHeight",haxe_ui_containers__$ScrollView_PercentContentHeight);
		this.behaviours.register("hscrollPos",haxe_ui_containers__$ScrollView_HScrollPos);
		this.behaviours.register("hscrollMax",haxe_ui_containers__$ScrollView_HScrollMax);
		this.behaviours.register("hscrollPageSize",haxe_ui_containers__$ScrollView_HScrollPageSize);
		this.behaviours.register("vscrollPos",haxe_ui_containers__$ScrollView_VScrollPos);
		this.behaviours.register("vscrollMax",haxe_ui_containers__$ScrollView_VScrollMax);
		this.behaviours.register("vscrollPageSize",haxe_ui_containers__$ScrollView_VScrollPageSize);
		this.behaviours.register("scrollMode",haxe_ui_containers__$ScrollView_ScrollModeBehaviour,haxe_ui_util_Variant.fromString("drag"));
		this.behaviours.register("contents",haxe_ui_containers__$ScrollView_GetContents);
		this.behaviours.register("autoHideScrolls",haxe_ui_behaviours_DefaultBehaviour);
		this.behaviours.register("allowAutoScroll",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromBool(true));
		this.behaviours.register("ensureVisible",haxe_ui_containers__$ScrollView_EnsureVisible);
	}
	,get_virtual: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("virtual"));
	}
	,set_virtual: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("virtual",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"virtual"));
		return value;
	}
	,get_contentLayoutName: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("contentLayoutName"));
	}
	,set_contentLayoutName: function(value) {
		var _g = Type.typeof(value);
		if(_g._hx_index == 6) {
			if(_g.c == String) {
				if(value != null && value.indexOf("{{") != -1 && value.indexOf("}}") != -1) {
					haxe_ui_locale_LocaleManager.get_instance().registerComponent(this,"contentLayoutName",null,value);
					return value;
				}
			}
		}
		this.behaviours.set("contentLayoutName",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"contentLayoutName"));
		return value;
	}
	,get_contentWidth: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("contentWidth"));
	}
	,set_contentWidth: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("contentWidth",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"contentWidth"));
		return value;
	}
	,get_percentContentWidth: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("percentContentWidth"));
	}
	,set_percentContentWidth: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("percentContentWidth",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"percentContentWidth"));
		return value;
	}
	,get_contentHeight: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("contentHeight"));
	}
	,set_contentHeight: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("contentHeight",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"contentHeight"));
		return value;
	}
	,get_percentContentHeight: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("percentContentHeight"));
	}
	,set_percentContentHeight: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("percentContentHeight",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"percentContentHeight"));
		return value;
	}
	,get_hscrollPos: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("hscrollPos"));
	}
	,set_hscrollPos: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("hscrollPos",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"hscrollPos"));
		return value;
	}
	,get_hscrollMax: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("hscrollMax"));
	}
	,set_hscrollMax: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("hscrollMax",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"hscrollMax"));
		return value;
	}
	,get_hscrollPageSize: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("hscrollPageSize"));
	}
	,set_hscrollPageSize: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("hscrollPageSize",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"hscrollPageSize"));
		return value;
	}
	,get_vscrollPos: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("vscrollPos"));
	}
	,set_vscrollPos: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("vscrollPos",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"vscrollPos"));
		return value;
	}
	,get_vscrollMax: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("vscrollMax"));
	}
	,set_vscrollMax: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("vscrollMax",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"vscrollMax"));
		return value;
	}
	,get_vscrollPageSize: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("vscrollPageSize"));
	}
	,set_vscrollPageSize: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("vscrollPageSize",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"vscrollPageSize"));
		return value;
	}
	,get_scrollMode: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("scrollMode"));
	}
	,set_scrollMode: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("scrollMode",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"scrollMode"));
		return value;
	}
	,get_contents: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toComponent(this.behaviours.get("contents"));
	}
	,set_contents: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("contents",haxe_ui_util_Variant.fromComponent(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"contents"));
		return value;
	}
	,get_autoHideScrolls: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("autoHideScrolls"));
	}
	,set_autoHideScrolls: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("autoHideScrolls",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"autoHideScrolls"));
		return value;
	}
	,get_allowAutoScroll: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("allowAutoScroll"));
	}
	,set_allowAutoScroll: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("allowAutoScroll",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"allowAutoScroll"));
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_InteractiveComponent.prototype.cloneComponent.call(this);
		c.set_virtual(this.get_virtual());
		if(this.get_contentLayoutName() != null) {
			c.set_contentLayoutName(this.get_contentLayoutName());
		}
		if(this.get_contentWidth() != null) {
			c.set_contentWidth(this.get_contentWidth());
		}
		if(this.get_percentContentWidth() != null) {
			c.set_percentContentWidth(this.get_percentContentWidth());
		}
		if(this.get_contentHeight() != null) {
			c.set_contentHeight(this.get_contentHeight());
		}
		if(this.get_percentContentHeight() != null) {
			c.set_percentContentHeight(this.get_percentContentHeight());
		}
		c.set_hscrollPos(this.get_hscrollPos());
		c.set_hscrollMax(this.get_hscrollMax());
		c.set_hscrollPageSize(this.get_hscrollPageSize());
		c.set_vscrollPos(this.get_vscrollPos());
		c.set_vscrollMax(this.get_vscrollMax());
		c.set_vscrollPageSize(this.get_vscrollPageSize());
		if(this.get_scrollMode() != null) {
			c.set_scrollMode(this.get_scrollMode());
		}
		if(this.get_contents() != null) {
			c.set_contents(this.get_contents());
		}
		c.set_autoHideScrolls(this.get_autoHideScrolls());
		c.set_allowAutoScroll(this.get_allowAutoScroll());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_ScrollView();
	}
	,registerComposite: function() {
		haxe_ui_core_InteractiveComponent.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers_ScrollViewEvents;
		this._compositeBuilderClass = haxe_ui_containers_ScrollViewBuilder;
		this._defaultLayoutClass = haxe_ui_layouts_ScrollViewLayout;
	}
	,_internal__onScroll: null
	,onScroll: null
	,set_onScroll: function(value) {
		if(this._internal__onScroll != null) {
			this.unregisterEvent("scrollscroll",this._internal__onScroll);
			this._internal__onScroll = null;
		}
		if(value != null) {
			this._internal__onScroll = value;
			this.registerEvent("scrollscroll",value);
		}
		return value;
	}
	,__class__: haxe_ui_containers_ScrollView
	,__properties__: $extend(haxe_ui_core_InteractiveComponent.prototype.__properties__,{set_onScroll:"set_onScroll",set_allowAutoScroll:"set_allowAutoScroll",get_allowAutoScroll:"get_allowAutoScroll",set_autoHideScrolls:"set_autoHideScrolls",get_autoHideScrolls:"get_autoHideScrolls",set_contents:"set_contents",get_contents:"get_contents",set_scrollMode:"set_scrollMode",get_scrollMode:"get_scrollMode",set_vscrollPageSize:"set_vscrollPageSize",get_vscrollPageSize:"get_vscrollPageSize",set_vscrollMax:"set_vscrollMax",get_vscrollMax:"get_vscrollMax",set_vscrollPos:"set_vscrollPos",get_vscrollPos:"get_vscrollPos",set_hscrollPageSize:"set_hscrollPageSize",get_hscrollPageSize:"get_hscrollPageSize",set_hscrollMax:"set_hscrollMax",get_hscrollMax:"get_hscrollMax",set_hscrollPos:"set_hscrollPos",get_hscrollPos:"get_hscrollPos",set_percentContentHeight:"set_percentContentHeight",get_percentContentHeight:"get_percentContentHeight",set_contentHeight:"set_contentHeight",get_contentHeight:"get_contentHeight",set_percentContentWidth:"set_percentContentWidth",get_percentContentWidth:"get_percentContentWidth",set_contentWidth:"set_contentWidth",get_contentWidth:"get_contentWidth",set_contentLayoutName:"set_contentLayoutName",get_contentLayoutName:"get_contentLayoutName",set_virtual:"set_virtual",get_virtual:"get_virtual"})
});
var haxe_ui_containers_ListView = function() {
	haxe_ui_containers_ScrollView.call(this);
};
$hxClasses["haxe.ui.containers.ListView"] = haxe_ui_containers_ListView;
haxe_ui_containers_ListView.__name__ = "haxe.ui.containers.ListView";
haxe_ui_containers_ListView.__interfaces__ = [haxe_ui_containers_IVirtualContainer,haxe_ui_core_IDataComponent];
haxe_ui_containers_ListView.__super__ = haxe_ui_containers_ScrollView;
haxe_ui_containers_ListView.prototype = $extend(haxe_ui_containers_ScrollView.prototype,{
	_itemRendererClass: null
	,get_itemRendererClass: function() {
		return this._itemRendererClass;
	}
	,set_itemRendererClass: function(value) {
		if(this._itemRendererClass != value) {
			this._itemRendererClass = value;
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout",false);
			}
		}
		return value;
	}
	,_itemRenderer: null
	,get_itemRenderer: function() {
		return this._itemRenderer;
	}
	,set_itemRenderer: function(value) {
		if(this._itemRenderer != value) {
			this._itemRenderer = value;
			if(!(this._layout == null || this._layoutLocked == true)) {
				this.invalidateComponent("layout",false);
			}
		}
		return value;
	}
	,registerComposite: function() {
		haxe_ui_containers_ScrollView.prototype.registerComposite.call(this);
		this._internalEventsClass = haxe_ui_containers_ListViewEvents;
		this._compositeBuilderClass = haxe_ui_containers__$ListView_ListViewBuilder;
		this._defaultLayoutClass = haxe_ui_layouts_VerticalVirtualLayout;
	}
	,_internal__onComponentEvent: null
	,onComponentEvent: null
	,set_onComponentEvent: function(value) {
		if(this._internal__onComponentEvent != null) {
			this.unregisterEvent("itemcomponentevent",this._internal__onComponentEvent);
			this._internal__onComponentEvent = null;
		}
		if(value != null) {
			this._internal__onComponentEvent = value;
			this.registerEvent("itemcomponentevent",value);
		}
		return value;
	}
	,registerBehaviours: function() {
		haxe_ui_containers_ScrollView.prototype.registerBehaviours.call(this);
		this.behaviours.register("dataSource",haxe_ui_containers__$ListView_DataSourceBehaviour);
		this.behaviours.register("itemWidth",haxe_ui_behaviours_LayoutBehaviour,haxe_ui_util_Variant.fromInt(-1));
		this.behaviours.register("itemHeight",haxe_ui_behaviours_LayoutBehaviour,haxe_ui_util_Variant.fromInt(-1));
		this.behaviours.register("itemCount",haxe_ui_behaviours_LayoutBehaviour,haxe_ui_util_Variant.fromInt(-1));
		this.behaviours.register("variableItemSize",haxe_ui_behaviours_LayoutBehaviour,haxe_ui_util_Variant.fromBool(false));
		this.behaviours.register("selectedIndex",haxe_ui_containers__$ListView_SelectedIndexBehaviour,haxe_ui_util_Variant.fromInt(-1));
		this.behaviours.register("selectedItem",haxe_ui_containers__$ListView_SelectedItemBehaviour);
		this.behaviours.register("selectedIndices",haxe_ui_containers__$ListView_SelectedIndicesBehaviour);
		this.behaviours.register("selectedItems",haxe_ui_containers__$ListView_SelectedItemsBehaviour);
		this.behaviours.register("selectionMode",haxe_ui_containers__$ListView_SelectionModeBehaviour,haxe_ui_util_Variant.fromString("one-item"));
		this.behaviours.register("longPressSelectionTime",haxe_ui_behaviours_DefaultBehaviour,haxe_ui_util_Variant.fromInt(500));
	}
	,get_dataSource: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toDataSource(this.behaviours.get("dataSource"));
	}
	,set_dataSource: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("dataSource",haxe_ui_util_Variant.fromDataSource(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"dataSource"));
		return value;
	}
	,get_itemWidth: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("itemWidth"));
	}
	,set_itemWidth: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("itemWidth",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"itemWidth"));
		return value;
	}
	,get_itemHeight: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toFloat(this.behaviours.get("itemHeight"));
	}
	,set_itemHeight: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("itemHeight",haxe_ui_util_Variant.fromFloat(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"itemHeight"));
		return value;
	}
	,get_itemCount: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toInt(this.behaviours.get("itemCount"));
	}
	,set_itemCount: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("itemCount",haxe_ui_util_Variant.fromInt(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"itemCount"));
		return value;
	}
	,get_variableItemSize: function() {
		if(this.behaviours == null) {
			return false;
		}
		return haxe_ui_util_Variant.toBool(this.behaviours.get("variableItemSize"));
	}
	,set_variableItemSize: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("variableItemSize",haxe_ui_util_Variant.fromBool(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"variableItemSize"));
		return value;
	}
	,get_selectedIndex: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toInt(this.behaviours.get("selectedIndex"));
	}
	,set_selectedIndex: function(value) {
		this.behaviours.set("selectedIndex",haxe_ui_util_Variant.fromInt(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"selectedIndex"));
		return value;
	}
	,get_selectedItem: function() {
		return this.behaviours.getDynamic("selectedItem");
	}
	,set_selectedItem: function(value) {
		this.behaviours.setDynamic("selectedItem",value);
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"selectedItem"));
		return value;
	}
	,get_selectedIndices: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toArray(this.behaviours.get("selectedIndices"));
	}
	,set_selectedIndices: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("selectedIndices",haxe_ui_util_Variant.fromArray(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"selectedIndices"));
		return value;
	}
	,get_selectedItems: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toArray(this.behaviours.get("selectedItems"));
	}
	,set_selectedItems: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("selectedItems",haxe_ui_util_Variant.fromArray(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"selectedItems"));
		return value;
	}
	,get_selectionMode: function() {
		if(this.behaviours == null) {
			return null;
		}
		return haxe_ui_util_Variant.toString(this.behaviours.get("selectionMode"));
	}
	,set_selectionMode: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("selectionMode",haxe_ui_util_Variant.fromString(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"selectionMode"));
		return value;
	}
	,get_longPressSelectionTime: function() {
		if(this.behaviours == null) {
			return 0;
		}
		return haxe_ui_util_Variant.toInt(this.behaviours.get("longPressSelectionTime"));
	}
	,set_longPressSelectionTime: function(value) {
		if(this.behaviours == null) {
			return value;
		}
		this.behaviours.set("longPressSelectionTime",haxe_ui_util_Variant.fromInt(value));
		this.dispatch(new haxe_ui_events_UIEvent("propertychange",null,"longPressSelectionTime"));
		return value;
	}
	,get_value: function() {
		return this.get_selectedIndex();
	}
	,set_value: function(value) {
		this.set_selectedIndex(value);
		return value;
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_ScrollView.prototype.cloneComponent.call(this);
		if(this.get_itemRendererClass() != null) {
			c.set_itemRendererClass(this.get_itemRendererClass());
		}
		if(this.get_itemRenderer() != null) {
			c.set_itemRenderer(this.get_itemRenderer());
		}
		if(this.get_dataSource() != null) {
			c.set_dataSource(this.get_dataSource());
		}
		c.set_itemWidth(this.get_itemWidth());
		c.set_itemHeight(this.get_itemHeight());
		c.set_itemCount(this.get_itemCount());
		c.set_variableItemSize(this.get_variableItemSize());
		c.set_selectedIndex(this.get_selectedIndex());
		if(this.get_selectedItem() != null) {
			c.set_selectedItem(this.get_selectedItem());
		}
		if(this.get_selectedIndices() != null) {
			c.set_selectedIndices(this.get_selectedIndices());
		}
		if(this.get_selectedItems() != null) {
			c.set_selectedItems(this.get_selectedItems());
		}
		if(this.get_selectionMode() != null) {
			c.set_selectionMode(this.get_selectionMode());
		}
		c.set_longPressSelectionTime(this.get_longPressSelectionTime());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_containers_ListView();
	}
	,__class__: haxe_ui_containers_ListView
	,__properties__: $extend(haxe_ui_containers_ScrollView.prototype.__properties__,{set_longPressSelectionTime:"set_longPressSelectionTime",get_longPressSelectionTime:"get_longPressSelectionTime",set_selectionMode:"set_selectionMode",get_selectionMode:"get_selectionMode",set_selectedItems:"set_selectedItems",get_selectedItems:"get_selectedItems",set_selectedIndices:"set_selectedIndices",get_selectedIndices:"get_selectedIndices",set_selectedItem:"set_selectedItem",get_selectedItem:"get_selectedItem",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",set_variableItemSize:"set_variableItemSize",get_variableItemSize:"get_variableItemSize",set_itemCount:"set_itemCount",get_itemCount:"get_itemCount",set_itemHeight:"set_itemHeight",get_itemHeight:"get_itemHeight",set_itemWidth:"set_itemWidth",get_itemWidth:"get_itemWidth",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource",set_onComponentEvent:"set_onComponentEvent",set_itemRenderer:"set_itemRenderer",get_itemRenderer:"get_itemRenderer",set_itemRendererClass:"set_itemRendererClass",get_itemRendererClass:"get_itemRendererClass"})
});
var haxe_ui_containers_ScrollViewEvents = function(scrollview) {
	this._fadeTimer = null;
	this._containerEventsPaused = false;
	this._lastMousePos = null;
	this._movementThreshold = 3;
	this._inertia = null;
	haxe_ui_events_Events.call(this,scrollview);
	this._scrollview = scrollview;
};
$hxClasses["haxe.ui.containers.ScrollViewEvents"] = haxe_ui_containers_ScrollViewEvents;
haxe_ui_containers_ScrollViewEvents.__name__ = "haxe.ui.containers.ScrollViewEvents";
haxe_ui_containers_ScrollViewEvents.__super__ = haxe_ui_events_Events;
haxe_ui_containers_ScrollViewEvents.prototype = $extend(haxe_ui_events_Events.prototype,{
	_scrollview: null
	,register: function() {
		var contents = this._scrollview.findComponent("scrollview-contents",null,false,"css");
		if(contents != null && contents.hasEvent("resize",$bind(this,this.onContentsResized)) == false) {
			contents.registerEvent("resize",$bind(this,this.onContentsResized));
		}
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll != null && hscroll.hasEvent("change",$bind(this,this.onHScroll)) == false) {
			hscroll.registerEvent("change",$bind(this,this.onHScroll));
		}
		if(hscroll != null && hscroll.hasEvent("scrollscroll",$bind(this,this.onHScrollScroll)) == false) {
			hscroll.registerEvent("scrollscroll",$bind(this,this.onHScrollScroll));
		}
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null && vscroll.hasEvent("change",$bind(this,this.onVScroll)) == false) {
			vscroll.registerEvent("change",$bind(this,this.onVScroll));
		}
		if(vscroll != null && vscroll.hasEvent("scrollscroll",$bind(this,this.onVScrollScroll)) == false) {
			vscroll.registerEvent("scrollscroll",$bind(this,this.onVScrollScroll));
		}
		if(this._scrollview.get_scrollMode() == "drag" || this._scrollview.get_scrollMode() == "inertial") {
			this.registerEvent("mousedown",$bind(this,this.onMouseDown));
		} else if(this.hasEvent("mousedown",$bind(this,this.onMouseDown)) == false) {
			this.unregisterEvent("mousedown",$bind(this,this.onMouseDown));
		}
		if(this._scrollview.hasEvent("shown") == false) {
			this.registerEvent("shown",$bind(this,this.onShown));
		}
		this.registerEvent("mousewheel",$bind(this,this.onMouseWheel));
		this.registerEvent("actionstart",$bind(this,this.onActionStart),-100);
	}
	,unregister: function() {
		var contents = this._scrollview.findComponent("scrollview-contents",null,false,"css");
		if(contents != null) {
			contents.unregisterEvent("resize",$bind(this,this.onContentsResized));
		}
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll != null) {
			hscroll.unregisterEvent("change",$bind(this,this.onHScroll));
			hscroll.unregisterEvent("scrollscroll",$bind(this,this.onHScrollScroll));
		}
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null) {
			vscroll.unregisterEvent("change",$bind(this,this.onVScroll));
			vscroll.unregisterEvent("scrollscroll",$bind(this,this.onVScrollScroll));
		}
		this.unregisterEvent("mousedown",$bind(this,this.onMouseDown));
		this.unregisterEvent("mousewheel",$bind(this,this.onMouseWheel));
		this.unregisterEvent("shown",$bind(this,this.onShown));
		this.unregisterEvent("actionstart",$bind(this,this.onActionStart));
	}
	,onShown: function(event) {
		var _this = this._scrollview;
		if(!(_this._layout == null || _this._layoutLocked == true)) {
			_this.invalidateComponent("layout",false);
		}
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll != null) {
			if(!(hscroll._layout == null || hscroll._layoutLocked == true)) {
				hscroll.invalidateComponent("layout",false);
			}
		}
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null) {
			if(!(vscroll._layout == null || vscroll._layoutLocked == true)) {
				vscroll.invalidateComponent("layout",false);
			}
		}
	}
	,onContentsResized: function(event) {
		this._scrollview.invalidateComponent("scroll");
	}
	,onHScroll: function(event) {
		this._scrollview.invalidateComponent("scroll");
		this._target.dispatch(new haxe_ui_events_ScrollEvent("scrollchange"));
	}
	,onHScrollScroll: function(event) {
		this._target.dispatch(new haxe_ui_events_ScrollEvent("scrollscroll"));
	}
	,onVScroll: function(event) {
		this._scrollview.invalidateComponent("scroll");
		this._target.dispatch(new haxe_ui_events_ScrollEvent("scrollchange"));
	}
	,onVScrollScroll: function(event) {
		this._target.dispatch(new haxe_ui_events_ScrollEvent("scrollscroll"));
	}
	,_offset: null
	,_inertia: null
	,onMouseDown: function(event) {
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(hscroll == null && vscroll == null) {
			return;
		}
		this._scrollview.addClass(":down");
		this._lastMousePos = new haxe_ui_geom_Point(event.screenX,event.screenY);
		var componentOffset = this._scrollview.getComponentOffset();
		var under = this._scrollview.findComponentsUnderPoint(event.screenX - componentOffset.x,event.screenY - componentOffset.y);
		var _g = 0;
		while(_g < under.length) {
			var c = under[_g];
			++_g;
			if(c.hasTextInput() || ((c) instanceof haxe_ui_components_Scroll)) {
				return;
			}
		}
		this._offset = new haxe_ui_geom_Point();
		if(hscroll != null) {
			var tmp = hscroll.get_pos();
			this._offset.x = tmp + event.screenX;
		}
		if(vscroll != null) {
			var tmp = vscroll.get_pos();
			this._offset.y = tmp + event.screenY;
		}
		if(this._scrollview.get_scrollMode() == "inertial") {
			if(this._inertia == null) {
				this._inertia = { screen : new haxe_ui_geom_Point(), target : new haxe_ui_geom_Point(), amplitude : new haxe_ui_geom_Point(), direction : new haxe_ui_geom_Point(), timestamp : 0};
			}
			this._inertia.target.x = this._scrollview.get_hscrollPos();
			this._inertia.target.y = this._scrollview.get_vscrollPos();
			this._inertia.amplitude.x = 0;
			this._inertia.amplitude.y = 0;
			this._inertia.screen.x = event.screenX;
			this._inertia.screen.y = event.screenY;
			this._inertia.timestamp = HxOverrides.now() / 1000;
		}
		haxe_ui_core_Screen.get_instance().registerEvent("mousemove",$bind(this,this.onMouseMove));
		haxe_ui_core_Screen.get_instance().registerEvent("mouseup",$bind(this,this.onMouseUp));
	}
	,_movementThreshold: null
	,_lastMousePos: null
	,onMouseMove: function(event) {
		event.cancel();
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll != null) {
			hscroll.set_pos(this._offset.x - event.screenX);
			var distX = Math.abs(event.screenX - this._lastMousePos.x);
			if(distX > haxe_ui_Toolkit.get_scaleX()) {
				this.pauseContainerEvents();
			}
		}
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null) {
			vscroll.set_pos(this._offset.y - event.screenY);
			var distY = Math.abs(event.screenY - this._lastMousePos.y);
			if(distY > haxe_ui_Toolkit.get_scaleY()) {
				this.pauseContainerEvents();
			}
		}
		this._lastMousePos = new haxe_ui_geom_Point(event.screenX,event.screenY);
	}
	,_containerEventsPaused: null
	,pauseContainerEvents: function() {
		if(this._containerEventsPaused == true) {
			return;
		}
		this._containerEventsPaused = true;
		this.onContainerEventsStatusChanged();
	}
	,resumeContainerEvents: function() {
		if(this._containerEventsPaused == false) {
			return;
		}
		this._containerEventsPaused = false;
		this.onContainerEventsStatusChanged();
	}
	,onContainerEventsStatusChanged: function() {
		this._scrollview.findComponent("scrollview-contents",haxe_ui_core_Component,true,"css").disableInteractivity(this._containerEventsPaused);
		if(this._containerEventsPaused == true) {
			this._scrollview.findComponent("scrollview-contents",haxe_ui_core_Component,true,"css").removeClass(":hover",true,true);
		}
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(hscroll != null || vscroll != null) {
			if(this._scrollview.get_autoHideScrolls() == true) {
				if(this._containerEventsPaused == true) {
					if(hscroll != null) {
						hscroll.fadeIn();
					}
					if(vscroll != null) {
						vscroll.fadeIn();
					}
				} else {
					if(hscroll != null) {
						hscroll.fadeOut();
					}
					if(vscroll != null) {
						vscroll.fadeOut();
					}
				}
			}
		}
	}
	,onMouseUp: function(event) {
		haxe_ui_core_Screen.get_instance().unregisterEvent("mousemove",$bind(this,this.onMouseMove));
		haxe_ui_core_Screen.get_instance().unregisterEvent("mouseup",$bind(this,this.onMouseUp));
		if(this._scrollview.get_scrollMode() == "inertial") {
			var now = HxOverrides.now() / 1000;
			var elapsed = (now - this._inertia.timestamp) * 1000;
			var deltaX = Math.abs(this._inertia.screen.x - event.screenX);
			var deltaY = Math.abs(this._inertia.screen.y - event.screenY);
			this._inertia.direction.x = this._inertia.screen.x - event.screenX < 0 ? 0 : 1;
			var velocityX = deltaX / elapsed;
			var v = 1000 * deltaX / (1 + elapsed);
			velocityX = 0.8 * v + 0.2 * velocityX;
			this._inertia.direction.y = this._inertia.screen.y - event.screenY < 0 ? 0 : 1;
			var velocityY = deltaY / elapsed;
			var v = 1000 * deltaY / (1 + elapsed);
			velocityY = 0.8 * v + 0.2 * velocityY;
			if(velocityX <= 75 && velocityY <= 75) {
				this.dispatch(new haxe_ui_events_ScrollEvent("scrollstop"));
				haxe_ui_Toolkit.callLater($bind(this,this.resumeContainerEvents));
				return;
			}
			this._inertia.timestamp = HxOverrides.now() / 1000;
			var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
			if(hscroll != null) {
				this._inertia.amplitude.x = 0.8 * velocityX;
			}
			if(this._inertia.direction.x == 0) {
				var tmp = this._scrollview.get_hscrollPos() - this._inertia.amplitude.x;
				this._inertia.target.x = Math.round(tmp);
			} else {
				var tmp = this._scrollview.get_hscrollPos() + this._inertia.amplitude.x;
				this._inertia.target.x = Math.round(tmp);
			}
			var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
			if(vscroll != null) {
				this._inertia.amplitude.y = 0.8 * velocityY;
			}
			if(this._inertia.direction.y == 0) {
				var tmp = this._scrollview.get_vscrollPos() - this._inertia.amplitude.y;
				this._inertia.target.y = Math.round(tmp);
			} else {
				var tmp = this._scrollview.get_vscrollPos() + this._inertia.amplitude.y;
				this._inertia.target.y = Math.round(tmp);
			}
			if(this._scrollview.get_hscrollPos() == this._inertia.target.x && this._scrollview.get_vscrollPos() == this._inertia.target.y) {
				this.dispatch(new haxe_ui_events_ScrollEvent("scrollstop"));
				haxe_ui_Toolkit.callLater($bind(this,this.resumeContainerEvents));
				return;
			}
			if(this._scrollview.get_hscrollPos() == this._inertia.target.x) {
				this._inertia.amplitude.x = 0;
			}
			if(this._scrollview.get_vscrollPos() == this._inertia.target.y) {
				this._inertia.amplitude.y = 0;
			}
			haxe_ui_Toolkit.callLater($bind(this,this.inertialScroll));
		} else {
			this._scrollview.removeClass(":down");
			this.dispatch(new haxe_ui_events_ScrollEvent("scrollstop"));
			haxe_ui_Toolkit.callLater($bind(this,this.resumeContainerEvents));
		}
	}
	,inertialScroll: function() {
		var elapsed = (HxOverrides.now() / 1000 - this._inertia.timestamp) * 1000;
		var finishedX = false;
		if(this._inertia.amplitude.x != 0) {
			var deltaX = -this._inertia.amplitude.x * Math.exp(-elapsed / 325);
			if(deltaX > 0.5 || deltaX < -0.5) {
				var oldPos = this._scrollview.get_hscrollPos();
				var newPos = 0;
				if(this._inertia.direction.x == 0) {
					newPos = this._inertia.target.x - deltaX;
				} else {
					newPos = this._inertia.target.x + deltaX;
				}
				if(newPos < 0) {
					newPos = 0;
				} else if(newPos > this._scrollview.get_hscrollMax()) {
					newPos = this._scrollview.get_hscrollMax();
				}
				this._scrollview.set_hscrollPos(newPos);
				finishedX = newPos == oldPos || newPos == 0 || newPos == this._scrollview.get_hscrollMax();
			} else {
				finishedX = true;
			}
		} else {
			finishedX = true;
		}
		var finishedY = false;
		if(this._inertia.amplitude.y != 0) {
			var deltaY = -this._inertia.amplitude.y * Math.exp(-elapsed / 325);
			if(deltaY > 0.5 || deltaY < -0.5) {
				var oldPos = this._scrollview.get_vscrollPos();
				var newPos = 0;
				if(this._inertia.direction.y == 0) {
					newPos = this._inertia.target.y - deltaY;
				} else {
					newPos = this._inertia.target.y + deltaY;
				}
				if(newPos < 0) {
					newPos = 0;
				} else if(newPos > this._scrollview.get_vscrollMax()) {
					newPos = this._scrollview.get_vscrollMax();
				}
				this._scrollview.set_vscrollPos(newPos);
				finishedY = newPos == oldPos || newPos == 0 || newPos == this._scrollview.get_vscrollMax();
			} else {
				finishedY = true;
			}
		} else {
			finishedY = true;
		}
		if(finishedX == true && finishedY == true) {
			this.dispatch(new haxe_ui_events_ScrollEvent("scrollstop"));
			haxe_ui_Toolkit.callLater($bind(this,this.resumeContainerEvents));
		} else {
			haxe_ui_Toolkit.callLater($bind(this,this.inertialScroll));
		}
	}
	,_fadeTimer: null
	,onMouseWheel: function(event) {
		var _gthis = this;
		var primaryType = haxe_ui_components_VerticalScroll;
		var secondaryType = haxe_ui_components_HorizontalScroll;
		if(event.shiftKey) {
			primaryType = haxe_ui_components_HorizontalScroll;
			secondaryType = haxe_ui_components_VerticalScroll;
		}
		var scroll = this._scrollview.findComponent(null,primaryType,false);
		if(scroll == null) {
			scroll = this._scrollview.findComponent(null,secondaryType,false);
		}
		if(scroll != null) {
			if(this._scrollview.get_autoHideScrolls() == true && this._fadeTimer == null) {
				scroll.fadeIn();
			}
			event.cancel();
			var amount = 50;
			if(event.delta > 0) {
				scroll.set_pos(scroll.get_pos() - amount);
			} else if(event.delta < 0) {
				scroll.set_pos(scroll.get_pos() + amount);
			}
			if(this._scrollview.get_autoHideScrolls() == true) {
				if(this._fadeTimer != null) {
					this._fadeTimer.stop();
					this._fadeTimer = null;
				}
				this._fadeTimer = new haxe_ui_util_Timer(300,function() {
					scroll.fadeOut();
					_gthis._fadeTimer.stop();
					_gthis._fadeTimer = null;
				});
			}
		}
	}
	,onActionStart: function(event) {
		switch(event.action) {
		case "actionDown":
			var fh = this._scrollview;
			fh.set_vscrollPos(fh.get_vscrollPos() + 1);
			event.repeater = true;
			break;
		case "actionLeft":
			var fh = this._scrollview;
			fh.set_hscrollPos(fh.get_hscrollPos() - 1);
			event.repeater = true;
			break;
		case "actionRight":
			var fh = this._scrollview;
			fh.set_hscrollPos(fh.get_hscrollPos() + 1);
			event.repeater = true;
			break;
		case "actionUp":
			var fh = this._scrollview;
			fh.set_vscrollPos(fh.get_vscrollPos() - 1);
			event.repeater = true;
			break;
		default:
		}
	}
	,__class__: haxe_ui_containers_ScrollViewEvents
});
var haxe_ui_containers_ListViewEvents = function(listview) {
	haxe_ui_containers_ScrollViewEvents.call(this,listview);
	this._listview = listview;
};
$hxClasses["haxe.ui.containers.ListViewEvents"] = haxe_ui_containers_ListViewEvents;
haxe_ui_containers_ListViewEvents.__name__ = "haxe.ui.containers.ListViewEvents";
haxe_ui_containers_ListViewEvents.__super__ = haxe_ui_containers_ScrollViewEvents;
haxe_ui_containers_ListViewEvents.prototype = $extend(haxe_ui_containers_ScrollViewEvents.prototype,{
	_listview: null
	,lastEvent: null
	,register: function() {
		haxe_ui_containers_ScrollViewEvents.prototype.register.call(this);
		this.registerEvent("scrollchange",$bind(this,this.onScrollChange));
		this.registerEvent("renderercreated",$bind(this,this.onRendererCreated));
		this.registerEvent("rendererdestroyed",$bind(this,this.onRendererDestroyed));
	}
	,unregister: function() {
		haxe_ui_containers_ScrollViewEvents.prototype.unregister.call(this);
		this.unregisterEvent("scrollchange",$bind(this,this.onScrollChange));
		this.unregisterEvent("renderercreated",$bind(this,this.onRendererCreated));
		this.unregisterEvent("rendererdestroyed",$bind(this,this.onRendererDestroyed));
	}
	,onScrollChange: function(e) {
		if(this._listview.get_virtual() == true) {
			var _this = this._listview;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout",false);
			}
		}
	}
	,onRendererCreated: function(e) {
		var instance = js_Boot.__cast(e.data , haxe_ui_core_ItemRenderer);
		instance.registerEvent("mousedown",$bind(this,this.onRendererMouseDown));
		instance.registerEvent("click",$bind(this,this.onRendererClick));
		instance.registerEvent("rightclick",$bind(this,this.onRendererClick));
		if(this._listview.get_selectedIndices().indexOf(instance.itemIndex) != -1) {
			var builder = js_Boot.__cast(this._listview._compositeBuilder , haxe_ui_containers__$ListView_ListViewBuilder);
			builder.addItemRendererClass(instance,":selected");
		}
	}
	,onRendererDestroyed: function(e) {
		var instance = js_Boot.__cast(e.data , haxe_ui_core_ItemRenderer);
		instance.unregisterEvent("mousedown",$bind(this,this.onRendererMouseDown));
		instance.unregisterEvent("click",$bind(this,this.onRendererClick));
		instance.unregisterEvent("rightclick",$bind(this,this.onRendererClick));
		if(this._listview.get_selectedIndices().indexOf(instance.itemIndex) != -1) {
			var builder = js_Boot.__cast(this._listview._compositeBuilder , haxe_ui_containers__$ListView_ListViewBuilder);
			builder.addItemRendererClass(instance,":selected",false);
		}
	}
	,onRendererMouseDown: function(e) {
		this._listview.set_focus(true);
		if(this._listview.get_selectionMode() == "multiple-long-press") {
			if(this._listview.get_selectedIndices().length == 0) {
				this.startLongPressSelection(e);
			}
		} else if(this._listview.classes.indexOf(":mobile") != -1 == false) {
			e.target.addClass(":hover");
		}
	}
	,startLongPressSelection: function(e) {
		var _gthis = this;
		var timerClick = null;
		var currentMouseX = e.screenX;
		var currentMouseY = e.screenY;
		var renderer = js_Boot.__cast(e.target , haxe_ui_core_ItemRenderer);
		var __onMouseMove = null;
		var __onMouseUp = null;
		var __onMouseClick = null;
		__onMouseMove = function(_e) {
			currentMouseX = _e.screenX;
			currentMouseY = _e.screenY;
		};
		__onMouseUp = function(_e) {
			if(timerClick != null) {
				timerClick.stop();
				timerClick = null;
			}
			renderer.get_screen().unregisterEvent("mousemove",__onMouseMove);
			renderer.get_screen().unregisterEvent("mouseup",__onMouseUp);
		};
		__onMouseClick = function(_e) {
			_e.cancel();
			renderer.unregisterEvent("click",__onMouseClick);
		};
		renderer.get_screen().registerEvent("mousemove",__onMouseMove);
		renderer.get_screen().registerEvent("mouseup",__onMouseUp);
		timerClick = haxe_Timer.delay(function() {
			if(timerClick != null) {
				timerClick = null;
				var timerClick1;
				if(renderer.hitTest(currentMouseX,currentMouseY)) {
					var x1 = e.screenX;
					var y1 = e.screenY;
					timerClick1 = Math.sqrt((x1 - currentMouseX) * (x1 - currentMouseX) + (y1 - currentMouseY) * (y1 - currentMouseY)) < 2 * haxe_ui_Toolkit.pixelsPerRem;
				} else {
					timerClick1 = false;
				}
				if(timerClick1) {
					_gthis.toggleSelection(renderer);
					renderer.registerEvent("click",__onMouseClick,1);
				}
			}
		},this._listview.get_longPressSelectionTime());
	}
	,onContainerEventsStatusChanged: function() {
		haxe_ui_containers_ScrollViewEvents.prototype.onContainerEventsStatusChanged.call(this);
		if(this._containerEventsPaused == true) {
			this._scrollview.findComponent("listview-contents",haxe_ui_core_Component,true,"css").removeClass(":hover",true,true);
		} else {
			var tmp = this._lastMousePos != null;
		}
	}
	,onRendererClick: function(e) {
		if(this._containerEventsPaused == true) {
			return;
		}
		var components = e.target.findComponentsUnderPoint(e.screenX,e.screenY);
		var _g = 0;
		while(_g < components.length) {
			var component = components[_g];
			++_g;
			if(component != e.target && ((component) instanceof haxe_ui_core_InteractiveComponent) && (js_Boot.__cast(component , haxe_ui_core_InteractiveComponent)).get_allowInteraction() == true) {
				return;
			}
		}
		this.lastEvent = e;
		var renderer = js_Boot.__cast(e.target , haxe_ui_core_ItemRenderer);
		switch(this._listview.get_selectionMode()) {
		case "disabled":
			break;
		case "multiple-click-modifier-key":case "multiple-modifier-key":
			if(e.ctrlKey == true) {
				this.toggleSelection(renderer);
			} else if(e.shiftKey == true) {
				var selectedIndices = this._listview.get_selectedIndices();
				var fromIndex = selectedIndices.length > 0 ? selectedIndices[selectedIndices.length - 1] : 0;
				var toIndex = renderer.itemIndex;
				if(fromIndex < toIndex) {
					var _g = 0;
					while(_g < selectedIndices.length) {
						var i = selectedIndices[_g];
						++_g;
						if(i < fromIndex) {
							fromIndex = i;
						}
					}
				} else {
					var tmp = fromIndex;
					fromIndex = toIndex;
					toIndex = tmp;
				}
				this.selectRange(fromIndex,toIndex);
			} else if(this._listview.get_selectionMode() == "multiple-click-modifier-key") {
				this._listview.set_selectedIndex(renderer.itemIndex);
			}
			break;
		case "multiple-long-press":
			var selectedIndices = this._listview.get_selectedIndices();
			if(selectedIndices.length > 0) {
				this.toggleSelection(renderer);
			}
			break;
		case "one-item":
			this._listview.set_selectedIndex(renderer.itemIndex);
			break;
		case "one-item-repeated":
			this._listview.set_selectedIndices([renderer.itemIndex]);
			break;
		default:
		}
	}
	,toggleSelection: function(renderer) {
		var itemIndex = renderer.itemIndex;
		var selectedIndices = this._listview.get_selectedIndices().slice();
		var index = selectedIndices.indexOf(itemIndex);
		if(index == -1) {
			selectedIndices.push(itemIndex);
		} else {
			selectedIndices.splice(index,1);
		}
		this._listview.set_selectedIndices(selectedIndices);
	}
	,selectRange: function(fromIndex,toIndex) {
		var tmp = this._listview;
		var _g = [];
		var _g1 = fromIndex;
		var _g2 = toIndex + 1;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(i);
		}
		tmp.set_selectedIndices(_g);
	}
	,onActionStart: function(event) {
		this.lastEvent = event;
		switch(event.action) {
		case "actionDown":
			if(this._listview.get_selectedIndex() < 0) {
				this._listview.set_selectedIndex(0);
			} else {
				var n = this._listview.get_selectedIndex();
				++n;
				if(n > this._listview.get_dataSource().get_size() - 1) {
					n = 0;
				}
				this._listview.set_selectedIndex(n);
			}
			event.repeater = true;
			break;
		case "actionUp":
			if(this._listview.get_selectedIndex() < 0) {
				this._listview.set_selectedIndex(this._listview.get_dataSource().get_size() - 1);
			} else {
				var n = this._listview.get_selectedIndex();
				--n;
				if(n < 0) {
					n = this._listview.set_selectedIndex(this._listview.get_dataSource().get_size() - 1);
				}
				this._listview.set_selectedIndex(n);
			}
			event.repeater = true;
			break;
		default:
		}
	}
	,__class__: haxe_ui_containers_ListViewEvents
});
var haxe_ui_containers_ScrollViewBuilder = function(scrollview) {
	haxe_ui_core_CompositeBuilder.call(this,scrollview);
	this._scrollview = scrollview;
	this._scrollview.cascadeActive = true;
};
$hxClasses["haxe.ui.containers.ScrollViewBuilder"] = haxe_ui_containers_ScrollViewBuilder;
haxe_ui_containers_ScrollViewBuilder.__name__ = "haxe.ui.containers.ScrollViewBuilder";
haxe_ui_containers_ScrollViewBuilder.__super__ = haxe_ui_core_CompositeBuilder;
haxe_ui_containers_ScrollViewBuilder.prototype = $extend(haxe_ui_core_CompositeBuilder.prototype,{
	_scrollview: null
	,_contents: null
	,_contentsLayoutName: null
	,create: function() {
		var contentLayoutName = this._scrollview.get_contentLayoutName();
		if(contentLayoutName == null) {
			contentLayoutName = "vertical";
		}
		this.createContentContainer(contentLayoutName);
	}
	,destroy: function() {
	}
	,get_numComponents: function() {
		return this._contents.get_numComponents();
	}
	,addComponent: function(child) {
		if(((child) instanceof haxe_ui_components_HorizontalScroll) == false && ((child) instanceof haxe_ui_components_VerticalScroll) == false && child.classes.indexOf("scrollview-contents") != -1 == false) {
			return this._contents.addComponent(child);
		}
		return null;
	}
	,addComponentAt: function(child,index) {
		if(((child) instanceof haxe_ui_components_HorizontalScroll) == false && ((child) instanceof haxe_ui_components_VerticalScroll) == false && child.classes.indexOf("scrollview-contents") != -1 == false) {
			return this._contents.addComponentAt(child,index);
		}
		return null;
	}
	,removeComponent: function(child,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		if(((child) instanceof haxe_ui_components_HorizontalScroll) == false && ((child) instanceof haxe_ui_components_VerticalScroll) == false && child.classes.indexOf("scrollview-contents") != -1 == false) {
			return this._contents.removeComponent(child,dispose,invalidate);
		}
		return null;
	}
	,removeAllComponents: function(dispose) {
		if(dispose == null) {
			dispose = true;
		}
		this._contents.removeAllComponents(dispose);
		return true;
	}
	,removeComponentAt: function(index,dispose,invalidate) {
		if(invalidate == null) {
			invalidate = true;
		}
		if(dispose == null) {
			dispose = true;
		}
		return this._contents.removeComponentAt(index,dispose,invalidate);
	}
	,getComponentIndex: function(child) {
		return this._contents.getComponentIndex(child);
	}
	,setComponentIndex: function(child,index) {
		if(((child) instanceof haxe_ui_components_HorizontalScroll) == false && ((child) instanceof haxe_ui_components_VerticalScroll) == false && child.classes.indexOf("scrollview-contents") != -1 == false) {
			return this._contents.setComponentIndex(child,index);
		}
		return null;
	}
	,getComponentAt: function(index) {
		return this._contents.getComponentAt(index);
	}
	,createContentContainer: function(layoutName) {
		if(this._contents == null) {
			this._contents = new haxe_ui_containers_Box();
			this._contents.addClass("scrollview-contents");
			this._contents.set_id("scrollview-contents");
			this._contents.set_layout(haxe_ui_layouts_LayoutFactory.createFromName(layoutName));
			this._component.addComponent(this._contents);
			this._contentsLayoutName = layoutName;
		}
	}
	,horizontalConstraintModifier: function() {
		return 0;
	}
	,verticalConstraintModifier: function() {
		return 0;
	}
	,checkScrolls: function() {
		if(this._component.get_isNativeScroller() == true) {
			return;
		}
		var usableSize = this._component.get_layout().get_usableSize();
		if(this.get_virtualHorizontal() == false && usableSize.width > 0) {
			var horizontalConstraint = this._contents;
			var hscroll = this._component.findComponent(null,haxe_ui_components_HorizontalScroll,false);
			var vcw = horizontalConstraint.get_width() + this.horizontalConstraintModifier();
			if(vcw > usableSize.width) {
				if(hscroll == null) {
					hscroll = this.createHScroll();
				}
				hscroll.set_max(vcw - usableSize.width);
				hscroll.set_pageSize(usableSize.width / vcw * hscroll.get_max());
				hscroll.syncComponentValidation();
			} else if(hscroll != null) {
				this.destroyHScroll();
			}
		}
		if(this.get_virtualVertical() == false && usableSize.height > 0) {
			var verticalConstraint = this._contents;
			var vscroll = this._component.findComponent(null,haxe_ui_components_VerticalScroll,false);
			var vch = verticalConstraint.get_height() + this.verticalConstraintModifier();
			if(vch > usableSize.height) {
				if(vscroll == null) {
					vscroll = this.createVScroll();
				}
				vscroll.set_max(vch - usableSize.height);
				vscroll.set_pageSize(usableSize.height / vch * vscroll.get_max());
				vscroll.syncComponentValidation();
			} else if(vscroll != null) {
				this.destroyVScroll();
			}
		}
	}
	,createHScroll: function() {
		if(this._component.get_isNativeScroller() == true) {
			return null;
		}
		var usableSize = this._component.get_layout().get_usableSize();
		var horizontalConstraint = this._contents;
		var hscroll = this._component.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vcw = horizontalConstraint.get_width() + this.horizontalConstraintModifier();
		if(usableSize.width <= 0) {
			return hscroll;
		}
		if(vcw > usableSize.width && hscroll == null) {
			hscroll = new haxe_ui_components_HorizontalScroll();
			hscroll.set_scriptAccess(false);
			hscroll.set_includeInLayout(!this._scrollview.get_autoHideScrolls());
			hscroll.set_hidden(this._scrollview.get_autoHideScrolls());
			hscroll.set_percentWidth(100);
			hscroll.set_allowFocus(false);
			hscroll.set_id("scrollview-hscroll");
			this._component.addComponent(hscroll);
			this._component.registerInternalEvents(null,true);
		}
		return hscroll;
	}
	,createVScroll: function() {
		if(this._component.get_isNativeScroller() == true) {
			return null;
		}
		var usableSize = this._component.get_layout().get_usableSize();
		var verticalConstraint = this._contents;
		var vscroll = this._component.findComponent(null,haxe_ui_components_VerticalScroll,false);
		var vch = verticalConstraint.get_height() + this.verticalConstraintModifier();
		if(usableSize.height <= 0) {
			return vscroll;
		}
		if(vch > usableSize.height && vscroll == null) {
			vscroll = new haxe_ui_components_VerticalScroll();
			vscroll.set_scriptAccess(false);
			vscroll.set_includeInLayout(!this._scrollview.get_autoHideScrolls());
			vscroll.set_hidden(this._scrollview.get_autoHideScrolls());
			vscroll.set_percentHeight(100);
			vscroll.set_allowFocus(false);
			vscroll.set_id("scrollview-vscroll");
			this._component.addComponent(vscroll);
			this._component.registerInternalEvents(null,true);
		}
		return vscroll;
	}
	,destroyHScroll: function() {
		var hscroll = this._component.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll != null) {
			this._component.removeComponent(hscroll);
		}
	}
	,destroyVScroll: function() {
		var vscroll = this._component.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll != null) {
			this._component.removeComponent(vscroll);
		}
	}
	,updateScrollRect: function() {
		if(this._contents == null) {
			return;
		}
		var usableSize = this._component.get_layout().get_usableSize();
		var clipCX = usableSize.width - this.horizontalConstraintModifier();
		if(clipCX > this._contents.get_width()) {
			clipCX = this._contents.get_width() + this.horizontalConstraintModifier();
		}
		var clipCY = usableSize.height - this.verticalConstraintModifier();
		if(clipCY > this._contents.get_height()) {
			clipCY = this._contents.get_height() + this.verticalConstraintModifier();
		}
		var xpos = 0;
		var ypos = 0;
		if(this.get_virtualHorizontal() == false) {
			var hscroll = this._component.findComponent(null,haxe_ui_components_HorizontalScroll,false);
			if(hscroll != null) {
				xpos = hscroll.get_pos();
			}
		} else if(this._contents.get_componentClipRect() != null) {
			clipCX = this._contents.get_componentClipRect().width;
		}
		if(this.get_virtualVertical() == false) {
			var vscroll = this._component.findComponent(null,haxe_ui_components_VerticalScroll,false);
			if(vscroll != null) {
				ypos = vscroll.get_pos();
			}
		} else if(this._contents.get_componentClipRect() != null) {
			clipCY = this._contents.get_componentClipRect().height;
		}
		var newClipRect = new haxe_ui_geom_Rectangle(Math.round(xpos),Math.round(ypos),Math.round(clipCX),Math.round(clipCY));
		this._contents.set_componentClipRect(newClipRect);
		this._contents.walkComponents(function(c) {
			if(c.hasEvent("move")) {
				c.dispatch(new haxe_ui_events_UIEvent("move"));
			}
			return true;
		});
	}
	,virtualHorizontal: null
	,get_virtualHorizontal: function() {
		return this._scrollview.get_virtual();
	}
	,virtualVertical: null
	,get_virtualVertical: function() {
		return this._scrollview.get_virtual();
	}
	,onVirtualChanged: function() {
	}
	,applyStyle: function(style) {
		haxe_ui_core_CompositeBuilder.prototype.applyStyle.call(this,style);
		if(style.mode == "mobile") {
			this._scrollview.set_autoHideScrolls(true);
		}
		if(style.contentWidth != null && style.contentWidth != this._scrollview.get_contentWidth()) {
			this._scrollview.set_contentWidth(style.contentWidth);
		} else if(style.contentWidthPercent != null && style.contentWidthPercent != this._scrollview.get_percentContentWidth()) {
			this._scrollview.set_percentContentWidth(style.contentWidthPercent);
		}
		if(style.contentHeight != null && style.contentHeight != this._scrollview.get_contentHeight()) {
			this._scrollview.set_contentHeight(style.contentHeight);
		} else if(style.contentHeightPercent != null && style.contentHeightPercent != this._scrollview.get_percentContentHeight()) {
			this._scrollview.set_percentContentHeight(style.contentHeightPercent);
		}
	}
	,__class__: haxe_ui_containers_ScrollViewBuilder
	,__properties__: $extend(haxe_ui_core_CompositeBuilder.prototype.__properties__,{get_virtualVertical:"get_virtualVertical",get_virtualHorizontal:"get_virtualHorizontal"})
});
var haxe_ui_containers__$ListView_ListViewBuilder = function(listview) {
	haxe_ui_containers_ScrollViewBuilder.call(this,listview);
	this._listview = listview;
};
$hxClasses["haxe.ui.containers._ListView.ListViewBuilder"] = haxe_ui_containers__$ListView_ListViewBuilder;
haxe_ui_containers__$ListView_ListViewBuilder.__name__ = "haxe.ui.containers._ListView.ListViewBuilder";
haxe_ui_containers__$ListView_ListViewBuilder.__super__ = haxe_ui_containers_ScrollViewBuilder;
haxe_ui_containers__$ListView_ListViewBuilder.prototype = $extend(haxe_ui_containers_ScrollViewBuilder.prototype,{
	_listview: null
	,create: function() {
		this.createContentContainer(this._listview.get_virtual() ? "absolute" : "vertical");
	}
	,createContentContainer: function(layoutName) {
		if(this._contents == null) {
			haxe_ui_containers_ScrollViewBuilder.prototype.createContentContainer.call(this,layoutName);
			this._contents.addClass("listview-contents");
		}
	}
	,addComponent: function(child) {
		var r = null;
		if(((child) instanceof haxe_ui_core_ItemRenderer) && (this._listview.get_itemRenderer() == null && this._listview.get_itemRendererClass() == null)) {
			this._listview.set_itemRenderer(js_Boot.__cast(child , haxe_ui_core_ItemRenderer));
			this._listview.get_itemRenderer().ready();
			this._listview.get_itemRenderer().handleVisibility(false);
			r = child;
		} else {
			r = haxe_ui_containers_ScrollViewBuilder.prototype.addComponent.call(this,child);
		}
		return r;
	}
	,onVirtualChanged: function() {
		this._contents.set_layoutName(this._listview.get_virtual() ? "absolute" : "vertical");
	}
	,addItemRendererClass: function(child,className,add) {
		if(add == null) {
			add = true;
		}
		var _gthis = this;
		child.walkComponents(function(c) {
			if(((c) instanceof haxe_ui_core_ItemRenderer)) {
				if(add == true) {
					c.addClass(className);
					haxe_ui_Toolkit.callLater(function() {
						_gthis.ensureVisible(js_Boot.__cast(c , haxe_ui_core_ItemRenderer));
					});
				} else {
					c.removeClass(className);
				}
			} else {
				c.invalidateComponent("style",false);
			}
			return true;
		});
	}
	,ensureVisible: function(itemToEnsure) {
		if(itemToEnsure != null && this._listview.get_virtual() == false) {
			var vscroll = this._listview.findComponent(null,haxe_ui_components_VerticalScroll);
			if(vscroll != null) {
				var vpos = vscroll.get_pos();
				var contents = this._listview.findComponent("listview-contents",null,null,"css");
				if(itemToEnsure.get_top() + itemToEnsure.get_height() > vpos + contents.get_componentClipRect().height) {
					vscroll.set_pos(itemToEnsure.get_top() + itemToEnsure.get_height() - contents.get_componentClipRect().height);
				} else if(itemToEnsure.get_top() < vpos) {
					vscroll.set_pos(itemToEnsure.get_top());
				}
			}
		}
	}
	,ensureVirtualItemVisible: function(index) {
		var vscroll = this._listview.findComponent(null,haxe_ui_components_VerticalScroll);
		if(vscroll != null) {
			var layout = js_Boot.__cast(this._listview.get_layout() , haxe_ui_layouts_VerticalVirtualLayout);
			var itemHeight = layout.get_itemHeight();
			var itemTop = index * itemHeight;
			var vpos = vscroll.get_pos();
			var contents = this._listview.findComponent("listview-contents",null,null,"css");
			if(itemTop + itemHeight > vpos + contents.get_componentClipRect().height) {
				vscroll.set_pos(itemTop + itemHeight - contents.get_componentClipRect().height);
			} else if(itemTop < vpos) {
				vscroll.set_pos(itemTop);
			}
		}
	}
	,applyStyle: function(style) {
		haxe_ui_containers_ScrollViewBuilder.prototype.applyStyle.call(this,style);
		var list = this._component.findComponents(null,haxe_ui_components_Label,16777215);
		var _g = 0;
		while(_g < list.length) {
			var c = list[_g];
			++_g;
			var invalidate = false;
			if(style.color != null && c.get_customStyle().color != style.color) {
				c.get_customStyle().color = style.color;
				invalidate = true;
			}
			if(style.fontName != null && c.get_customStyle().fontName != style.fontName) {
				c.get_customStyle().fontName = style.fontName;
				invalidate = true;
			}
			if(style.fontSize != null && c.get_customStyle().fontSize != style.fontSize) {
				c.get_customStyle().fontSize = style.fontSize;
				invalidate = true;
			}
			if(style.cursor != null && c.get_customStyle().cursor != style.cursor) {
				c.get_customStyle().cursor = style.cursor;
				invalidate = true;
			}
			if(style.textAlign != null && c.get_customStyle().textAlign != style.textAlign) {
				c.get_customStyle().textAlign = style.textAlign;
				invalidate = true;
			}
			if(invalidate == true) {
				c.invalidateComponent("style",false);
			}
		}
	}
	,__class__: haxe_ui_containers__$ListView_ListViewBuilder
});
var haxe_ui_containers__$ListView_DataSourceBehaviour = function(component) {
	this._firstPass = true;
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ListView.DataSourceBehaviour"] = haxe_ui_containers__$ListView_DataSourceBehaviour;
haxe_ui_containers__$ListView_DataSourceBehaviour.__name__ = "haxe.ui.containers._ListView.DataSourceBehaviour";
haxe_ui_containers__$ListView_DataSourceBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ListView_DataSourceBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_firstPass: null
	,set: function(value) {
		var _gthis = this;
		haxe_ui_behaviours_DataBehaviour.prototype.set.call(this,value);
		var dataSource = haxe_ui_util_Variant.toDataSource(this._value);
		if(dataSource != null) {
			dataSource.onDataSourceChange = function() {
				var _this = _gthis._component;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout",false);
				}
				if(_gthis._firstPass == true) {
					_gthis._firstPass = false;
					var _this = _gthis._component;
					if(!(_this._layout == null || _this._layoutLocked == true)) {
						_this.invalidateComponent("layout",false);
					}
				}
				_gthis.dispatchChanged();
			};
			var _this = this._component;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout",false);
			}
		} else {
			var _this = this._component;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout",false);
			}
		}
		this.dispatchChanged();
	}
	,get: function() {
		if(this._value == null || haxe_ui_util_Variant.get_isNull(this._value)) {
			this._value = haxe_ui_util_Variant.fromDataSource(new haxe_ui_data_ArrayDataSource());
			this.set(this._value);
		}
		return this._value;
	}
	,dispatchChanged: function() {
		var _gthis = this;
		haxe_ui_Toolkit.callLater(function() {
			_gthis._component.dispatch(new haxe_ui_events_UIEvent("propertychange",false,"dataSource"));
		});
	}
	,__class__: haxe_ui_containers__$ListView_DataSourceBehaviour
});
var haxe_ui_containers__$ListView_SelectedIndexBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ListView.SelectedIndexBehaviour"] = haxe_ui_containers__$ListView_SelectedIndexBehaviour;
haxe_ui_containers__$ListView_SelectedIndexBehaviour.__name__ = "haxe.ui.containers._ListView.SelectedIndexBehaviour";
haxe_ui_containers__$ListView_SelectedIndexBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$ListView_SelectedIndexBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		var selectedIndices = listView.get_selectedIndices();
		if(selectedIndices != null && selectedIndices.length > 0) {
			return haxe_ui_util_Variant.fromInt(selectedIndices[selectedIndices.length - 1]);
		} else {
			return haxe_ui_util_Variant.fromInt(-1);
		}
	}
	,set: function(value) {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		listView.set_selectedIndices(haxe_ui_util_Variant.neq(value,haxe_ui_util_Variant.fromInt(-1)) ? [haxe_ui_util_Variant.toInt(value)] : null);
	}
	,__class__: haxe_ui_containers__$ListView_SelectedIndexBehaviour
});
var haxe_ui_containers__$ListView_SelectedItemBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ListView.SelectedItemBehaviour"] = haxe_ui_containers__$ListView_SelectedItemBehaviour;
haxe_ui_containers__$ListView_SelectedItemBehaviour.__name__ = "haxe.ui.containers._ListView.SelectedItemBehaviour";
haxe_ui_containers__$ListView_SelectedItemBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$ListView_SelectedItemBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	getDynamic: function() {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		var selectedIndices = listView.get_selectedIndices();
		if(selectedIndices.length > 0) {
			return listView.get_dataSource().get(selectedIndices[selectedIndices.length - 1]);
		} else {
			return null;
		}
	}
	,set: function(value) {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		var index = listView.get_dataSource().indexOf(value);
		if(index != -1 && listView.get_selectedIndices().indexOf(index) == -1) {
			listView.set_selectedIndices([index]);
		}
	}
	,__class__: haxe_ui_containers__$ListView_SelectedItemBehaviour
});
var haxe_ui_containers__$ListView_SelectedIndicesBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ListView.SelectedIndicesBehaviour"] = haxe_ui_containers__$ListView_SelectedIndicesBehaviour;
haxe_ui_containers__$ListView_SelectedIndicesBehaviour.__name__ = "haxe.ui.containers._ListView.SelectedIndicesBehaviour";
haxe_ui_containers__$ListView_SelectedIndicesBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ListView_SelectedIndicesBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	get: function() {
		if(haxe_ui_util_Variant.get_isNull(this._value)) {
			return haxe_ui_util_Variant.fromArray([]);
		} else {
			return this._value;
		}
	}
	,validateData: function() {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		var selectedIndices = listView.get_selectedIndices();
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_containers__$ListView_ListViewBuilder);
		var events = js_Boot.__cast(this._component._internalEvents , haxe_ui_containers_ListViewEvents);
		var _g = 0;
		var _g1 = contents._children == null ? [] : contents._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(selectedIndices.indexOf((js_Boot.__cast(child , haxe_ui_core_ItemRenderer)).itemIndex) != -1) {
				builder.addItemRendererClass(child,":selected");
			} else {
				builder.addItemRendererClass(child,":selected",false);
			}
		}
		if(listView.get_virtual() == true) {
			var _g = 0;
			while(_g < selectedIndices.length) {
				var i = selectedIndices[_g];
				++_g;
				builder.ensureVirtualItemVisible(i);
			}
		}
		if(listView.get_selectedIndex() != -1 && listView.get_selectedIndices().length != 0) {
			var event = new haxe_ui_events_UIEvent("change");
			event.relatedEvent = events.lastEvent;
			this._component.dispatch(event);
		}
	}
	,__class__: haxe_ui_containers__$ListView_SelectedIndicesBehaviour
});
var haxe_ui_containers__$ListView_SelectedItemsBehaviour = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ListView.SelectedItemsBehaviour"] = haxe_ui_containers__$ListView_SelectedItemsBehaviour;
haxe_ui_containers__$ListView_SelectedItemsBehaviour.__name__ = "haxe.ui.containers._ListView.SelectedItemsBehaviour";
haxe_ui_containers__$ListView_SelectedItemsBehaviour.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$ListView_SelectedItemsBehaviour.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		var selectedIndices = listView.get_selectedIndices();
		if(selectedIndices != null && selectedIndices.length > 0) {
			var selectedItems = [];
			var _g = 0;
			while(_g < selectedIndices.length) {
				var i = selectedIndices[_g];
				++_g;
				if(i < 0 || i >= listView.get_dataSource().get_size()) {
					continue;
				}
				var data = listView.get_dataSource().get(i);
				selectedItems.push(data);
			}
			return haxe_ui_util_Variant.fromArray(selectedItems);
		} else {
			return haxe_ui_util_Variant.fromArray([]);
		}
	}
	,set: function(value) {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		var selectedItems = haxe_ui_util_Variant.toArray(value);
		if(selectedItems != null && selectedItems.length > 0) {
			var selectedIndices = [];
			var index;
			var _g = 0;
			while(_g < selectedItems.length) {
				var item = selectedItems[_g];
				++_g;
				index = listView.get_dataSource().indexOf(item);
				if(index != -1) {
					selectedIndices.push(index);
				}
			}
			listView.set_selectedIndices(selectedIndices);
		} else {
			listView.set_selectedIndices([]);
		}
	}
	,__class__: haxe_ui_containers__$ListView_SelectedItemsBehaviour
});
var haxe_ui_containers__$ListView_SelectionModeBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ListView.SelectionModeBehaviour"] = haxe_ui_containers__$ListView_SelectionModeBehaviour;
haxe_ui_containers__$ListView_SelectionModeBehaviour.__name__ = "haxe.ui.containers._ListView.SelectionModeBehaviour";
haxe_ui_containers__$ListView_SelectionModeBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ListView_SelectionModeBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		var listView = js_Boot.__cast(this._component , haxe_ui_containers_ListView);
		var selectedIndices = listView.get_selectedIndices();
		if(selectedIndices == null || selectedIndices.length == 0) {
			return;
		}
		var selectionMode = haxe_ui_util_Variant.toString(this._value);
		switch(selectionMode) {
		case "disabled":
			listView.set_selectedIndices(null);
			break;
		case "one-item":
			if(selectedIndices.length > 1) {
				listView.set_selectedIndices([selectedIndices[0]]);
			}
			break;
		default:
		}
	}
	,__class__: haxe_ui_containers__$ListView_SelectionModeBehaviour
});
var haxe_ui_containers__$ScrollView_EnsureVisible = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.EnsureVisible"] = haxe_ui_containers__$ScrollView_EnsureVisible;
haxe_ui_containers__$ScrollView_EnsureVisible.__name__ = "haxe.ui.containers._ScrollView.EnsureVisible";
haxe_ui_containers__$ScrollView_EnsureVisible.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_containers__$ScrollView_EnsureVisible.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	call: function(param) {
		var scrollview = js_Boot.__cast(this._component , haxe_ui_containers_ScrollView);
		if(scrollview.get_allowAutoScroll() == false) {
			return null;
		}
		var c = js_Boot.__cast(param , haxe_ui_core_Component);
		if(c == scrollview) {
			return null;
		}
		var hscroll = scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var hscrollPos = 0;
		if(hscroll != null) {
			hscrollPos = hscroll.get_pos();
		}
		var vscroll = scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		var vscrollPos = 0;
		if(vscroll != null) {
			vscrollPos = vscroll.get_pos();
		}
		var componentScreenRect = new haxe_ui_geom_Rectangle(c.get_screenLeft(),c.get_screenTop(),c.get_width(),c.get_height());
		var componentRect = new haxe_ui_geom_Rectangle(c.get_screenLeft() + hscrollPos,c.get_screenTop() + vscrollPos,c.get_width(),c.get_height());
		var scrollRect = new haxe_ui_geom_Rectangle(scrollview.get_screenLeft(),scrollview.get_screenTop(),scrollview.get_width(),scrollview.get_height());
		var scrollRectFixed = scrollRect.copy();
		var usableSize = scrollview.get_layout().get_usableSize();
		scrollRectFixed.width = usableSize.width;
		scrollRectFixed.height = usableSize.height;
		if(scrollRectFixed.containsRect(componentScreenRect)) {
			return null;
		}
		var newHScrollPos = hscrollPos;
		var newVScrollPos = vscrollPos;
		var fixedRight = componentRect.get_right() - scrollRect.left;
		var fixedLeft = componentRect.left - scrollRect.left;
		var fixedBottom = componentRect.get_bottom() - scrollRect.top;
		var fixedTop = componentRect.top - scrollRect.top;
		var offsetLeft = 1;
		var offsetTop = 1;
		if(scrollRectFixed.containsPoint(componentScreenRect.get_right(),componentScreenRect.top) == false) {
			newHScrollPos = fixedRight - usableSize.width + (this.calcOffset(c,"right") - offsetLeft);
		} else if(scrollRectFixed.containsPoint(componentScreenRect.left,componentScreenRect.top) == false) {
			newHScrollPos = fixedLeft - (this.calcOffset(c,"left") + offsetLeft);
		}
		if(scrollRectFixed.containsPoint(componentScreenRect.left,componentScreenRect.get_bottom()) == false) {
			newVScrollPos = fixedBottom - usableSize.height + (this.calcOffset(c,"bottom") - offsetTop);
		} else if(scrollRectFixed.containsPoint(componentScreenRect.left,componentScreenRect.top) == false) {
			newVScrollPos = fixedTop - (this.calcOffset(c,"top") + offsetTop);
		}
		if(hscroll != null) {
			hscroll.set_pos(newHScrollPos);
		}
		if(vscroll != null) {
			vscroll.set_pos(newVScrollPos);
		}
		return null;
	}
	,calcOffset: function(c,which) {
		var p = 0;
		var r = c.parentComponent;
		while(r != null) {
			if(r.get_style() != null) {
				switch(which) {
				case "bottom":
					if(r.get_paddingBottom() != null) {
						p += r.get_paddingBottom();
					}
					break;
				case "left":
					if(r.get_paddingLeft() != null) {
						p += r.get_paddingLeft();
					}
					break;
				case "right":
					if(r.get_paddingRight() != null) {
						p += r.get_paddingRight();
					}
					break;
				case "top":
					if(r.get_paddingTop() != null) {
						p += r.get_paddingTop();
					}
					break;
				}
			}
			r = r.parentComponent;
			if(r == this._component) {
				break;
			}
		}
		return p;
	}
	,__class__: haxe_ui_containers__$ScrollView_EnsureVisible
});
var haxe_ui_containers__$ScrollView_Virtual = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.Virtual"] = haxe_ui_containers__$ScrollView_Virtual;
haxe_ui_containers__$ScrollView_Virtual.__name__ = "haxe.ui.containers._ScrollView.Virtual";
haxe_ui_containers__$ScrollView_Virtual.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_containers__$ScrollView_Virtual.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	set: function(value) {
		haxe_ui_behaviours_DefaultBehaviour.prototype.set.call(this,value);
		if(this._component._compositeBuilder != null) {
			(js_Boot.__cast(this._component._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).onVirtualChanged();
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_Virtual
});
var haxe_ui_containers__$ScrollView_ContentLayoutName = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.ContentLayoutName"] = haxe_ui_containers__$ScrollView_ContentLayoutName;
haxe_ui_containers__$ScrollView_ContentLayoutName.__name__ = "haxe.ui.containers._ScrollView.ContentLayoutName";
haxe_ui_containers__$ScrollView_ContentLayoutName.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_containers__$ScrollView_ContentLayoutName.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	set: function(value) {
		haxe_ui_behaviours_DefaultBehaviour.prototype.set.call(this,value);
		var builder = js_Boot.__cast(this._component._compositeBuilder , haxe_ui_containers_ScrollViewBuilder);
		if(builder != null && haxe_ui_util_Variant.fromString(builder._contentsLayoutName) != value) {
			builder._contentsLayoutName = haxe_ui_util_Variant.toString(value);
			builder._contents.set_layout(haxe_ui_layouts_LayoutFactory.createFromName(haxe_ui_util_Variant.toString(value)));
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_ContentLayoutName
});
var haxe_ui_containers__$ScrollView_ContentWidth = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.ContentWidth"] = haxe_ui_containers__$ScrollView_ContentWidth;
haxe_ui_containers__$ScrollView_ContentWidth.__name__ = "haxe.ui.containers._ScrollView.ContentWidth";
haxe_ui_containers__$ScrollView_ContentWidth.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$ScrollView_ContentWidth.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents == null) {
			return null;
		}
		return haxe_ui_util_Variant.fromFloat(contents.get_width());
	}
	,set: function(value) {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents != null) {
			contents.set_percentWidth(null);
			contents.set_width(haxe_ui_util_Variant.toFloat(value));
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_ContentWidth
});
var haxe_ui_containers__$ScrollView_PercentContentWidth = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.PercentContentWidth"] = haxe_ui_containers__$ScrollView_PercentContentWidth;
haxe_ui_containers__$ScrollView_PercentContentWidth.__name__ = "haxe.ui.containers._ScrollView.PercentContentWidth";
haxe_ui_containers__$ScrollView_PercentContentWidth.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$ScrollView_PercentContentWidth.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents == null) {
			return null;
		}
		return haxe_ui_util_Variant.fromFloat(contents.get_percentWidth());
	}
	,set: function(value) {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents != null) {
			contents.set_componentWidth(null);
			contents.set_percentWidth(haxe_ui_util_Variant.toFloat(value));
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_PercentContentWidth
});
var haxe_ui_containers__$ScrollView_ContentHeight = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.ContentHeight"] = haxe_ui_containers__$ScrollView_ContentHeight;
haxe_ui_containers__$ScrollView_ContentHeight.__name__ = "haxe.ui.containers._ScrollView.ContentHeight";
haxe_ui_containers__$ScrollView_ContentHeight.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$ScrollView_ContentHeight.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents == null) {
			return null;
		}
		return haxe_ui_util_Variant.fromFloat(contents.get_height());
	}
	,set: function(value) {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents != null) {
			contents.set_percentHeight(null);
			contents.set_height(haxe_ui_util_Variant.toFloat(value));
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_ContentHeight
});
var haxe_ui_containers__$ScrollView_PercentContentHeight = function(component) {
	haxe_ui_behaviours_Behaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.PercentContentHeight"] = haxe_ui_containers__$ScrollView_PercentContentHeight;
haxe_ui_containers__$ScrollView_PercentContentHeight.__name__ = "haxe.ui.containers._ScrollView.PercentContentHeight";
haxe_ui_containers__$ScrollView_PercentContentHeight.__super__ = haxe_ui_behaviours_Behaviour;
haxe_ui_containers__$ScrollView_PercentContentHeight.prototype = $extend(haxe_ui_behaviours_Behaviour.prototype,{
	get: function() {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents == null) {
			return null;
		}
		return haxe_ui_util_Variant.fromFloat(contents.get_percentHeight());
	}
	,set: function(value) {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		if(contents != null) {
			contents.set_componentHeight(null);
			contents.set_percentHeight(haxe_ui_util_Variant.toFloat(value));
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_PercentContentHeight
});
var haxe_ui_containers__$ScrollView_HScrollPos = function(scrollview) {
	haxe_ui_behaviours_DataBehaviour.call(this,scrollview);
	this._scrollview = scrollview;
};
$hxClasses["haxe.ui.containers._ScrollView.HScrollPos"] = haxe_ui_containers__$ScrollView_HScrollPos;
haxe_ui_containers__$ScrollView_HScrollPos.__name__ = "haxe.ui.containers._ScrollView.HScrollPos";
haxe_ui_containers__$ScrollView_HScrollPos.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ScrollView_HScrollPos.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_scrollview: null
	,get: function() {
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll == null) {
			return haxe_ui_util_Variant.fromInt(0);
		}
		return haxe_ui_util_Variant.fromFloat(hscroll.get_pos());
	}
	,validateData: function() {
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(this._scrollview.get_virtual() == true) {
			if(hscroll == null) {
				hscroll = (js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).createHScroll();
			}
			if(hscroll != null) {
				hscroll.set_pos(haxe_ui_util_Variant.toFloat(this._value));
			}
		} else if(hscroll != null) {
			hscroll.set_pos(haxe_ui_util_Variant.toFloat(this._value));
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_HScrollPos
});
var haxe_ui_containers__$ScrollView_VScrollPos = function(scrollview) {
	haxe_ui_behaviours_DataBehaviour.call(this,scrollview);
	this._scrollview = scrollview;
};
$hxClasses["haxe.ui.containers._ScrollView.VScrollPos"] = haxe_ui_containers__$ScrollView_VScrollPos;
haxe_ui_containers__$ScrollView_VScrollPos.__name__ = "haxe.ui.containers._ScrollView.VScrollPos";
haxe_ui_containers__$ScrollView_VScrollPos.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ScrollView_VScrollPos.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_scrollview: null
	,get: function() {
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll == null) {
			return haxe_ui_util_Variant.fromInt(0);
		}
		return haxe_ui_util_Variant.fromFloat(vscroll.get_pos());
	}
	,validateData: function() {
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(this._scrollview.get_virtual() == true) {
			if(vscroll == null) {
				vscroll = (js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).createVScroll();
			}
			if(vscroll != null) {
				vscroll.set_pos(haxe_ui_util_Variant.toFloat(this._value));
			}
		} else if(vscroll != null) {
			vscroll.set_pos(haxe_ui_util_Variant.toFloat(this._value));
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_VScrollPos
});
var haxe_ui_containers__$ScrollView_HScrollMax = function(scrollview) {
	haxe_ui_behaviours_DataBehaviour.call(this,scrollview);
	this._scrollview = scrollview;
};
$hxClasses["haxe.ui.containers._ScrollView.HScrollMax"] = haxe_ui_containers__$ScrollView_HScrollMax;
haxe_ui_containers__$ScrollView_HScrollMax.__name__ = "haxe.ui.containers._ScrollView.HScrollMax";
haxe_ui_containers__$ScrollView_HScrollMax.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ScrollView_HScrollMax.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_scrollview: null
	,get: function() {
		var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
		if(hscroll == null) {
			return haxe_ui_util_Variant.fromInt(0);
		}
		return haxe_ui_util_Variant.fromFloat(hscroll.get_max());
	}
	,validateData: function() {
		if(this._scrollview.get_virtual() == true) {
			var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
			if(haxe_ui_util_Variant.gt(this._value,haxe_ui_util_Variant.fromInt(0))) {
				if(hscroll == null) {
					hscroll = (js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).createHScroll();
				}
			} else if(hscroll != null) {
				(js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).destroyHScroll();
			}
			if(hscroll != null) {
				hscroll.set_max(haxe_ui_util_Variant.toFloat(this._value));
			}
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_HScrollMax
});
var haxe_ui_containers__$ScrollView_VScrollMax = function(scrollview) {
	haxe_ui_behaviours_DataBehaviour.call(this,scrollview);
	this._scrollview = scrollview;
};
$hxClasses["haxe.ui.containers._ScrollView.VScrollMax"] = haxe_ui_containers__$ScrollView_VScrollMax;
haxe_ui_containers__$ScrollView_VScrollMax.__name__ = "haxe.ui.containers._ScrollView.VScrollMax";
haxe_ui_containers__$ScrollView_VScrollMax.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ScrollView_VScrollMax.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_scrollview: null
	,get: function() {
		var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(vscroll == null) {
			return haxe_ui_util_Variant.fromInt(0);
		}
		return haxe_ui_util_Variant.fromFloat(vscroll.get_max());
	}
	,validateData: function() {
		if(this._scrollview.get_virtual() == true) {
			var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
			if(haxe_ui_util_Variant.gt(this._value,haxe_ui_util_Variant.fromInt(0))) {
				if(vscroll == null) {
					vscroll = (js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).createVScroll();
				}
			} else if(vscroll != null) {
				(js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).destroyVScroll();
			}
			if(vscroll != null) {
				vscroll.set_max(haxe_ui_util_Variant.toFloat(this._value));
			}
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_VScrollMax
});
var haxe_ui_containers__$ScrollView_HScrollPageSize = function(scrollview) {
	haxe_ui_behaviours_DataBehaviour.call(this,scrollview);
	this._scrollview = scrollview;
};
$hxClasses["haxe.ui.containers._ScrollView.HScrollPageSize"] = haxe_ui_containers__$ScrollView_HScrollPageSize;
haxe_ui_containers__$ScrollView_HScrollPageSize.__name__ = "haxe.ui.containers._ScrollView.HScrollPageSize";
haxe_ui_containers__$ScrollView_HScrollPageSize.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ScrollView_HScrollPageSize.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_scrollview: null
	,validateData: function() {
		if(this._scrollview.get_virtual() == true) {
			var hscroll = this._scrollview.findComponent(null,haxe_ui_components_HorizontalScroll,false);
			if(hscroll == null) {
				hscroll = (js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).createHScroll();
			}
			if(hscroll != null) {
				hscroll.set_pageSize(haxe_ui_util_Variant.toFloat(this._value));
			}
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_HScrollPageSize
});
var haxe_ui_containers__$ScrollView_VScrollPageSize = function(scrollview) {
	haxe_ui_behaviours_DataBehaviour.call(this,scrollview);
	this._scrollview = scrollview;
};
$hxClasses["haxe.ui.containers._ScrollView.VScrollPageSize"] = haxe_ui_containers__$ScrollView_VScrollPageSize;
haxe_ui_containers__$ScrollView_VScrollPageSize.__name__ = "haxe.ui.containers._ScrollView.VScrollPageSize";
haxe_ui_containers__$ScrollView_VScrollPageSize.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ScrollView_VScrollPageSize.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	_scrollview: null
	,validateData: function() {
		if(this._scrollview.get_virtual() == true) {
			var vscroll = this._scrollview.findComponent(null,haxe_ui_components_VerticalScroll,false);
			if(vscroll == null) {
				vscroll = (js_Boot.__cast(this._scrollview._compositeBuilder , haxe_ui_containers_ScrollViewBuilder)).createVScroll();
			}
			if(vscroll != null) {
				vscroll.set_pageSize(haxe_ui_util_Variant.toFloat(this._value));
			}
		}
	}
	,__class__: haxe_ui_containers__$ScrollView_VScrollPageSize
});
var haxe_ui_containers__$ScrollView_ScrollModeBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.ScrollModeBehaviour"] = haxe_ui_containers__$ScrollView_ScrollModeBehaviour;
haxe_ui_containers__$ScrollView_ScrollModeBehaviour.__name__ = "haxe.ui.containers._ScrollView.ScrollModeBehaviour";
haxe_ui_containers__$ScrollView_ScrollModeBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_containers__$ScrollView_ScrollModeBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		this._component.registerInternalEvents(null,true);
	}
	,__class__: haxe_ui_containers__$ScrollView_ScrollModeBehaviour
});
var haxe_ui_containers__$ScrollView_GetContents = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.containers._ScrollView.GetContents"] = haxe_ui_containers__$ScrollView_GetContents;
haxe_ui_containers__$ScrollView_GetContents.__name__ = "haxe.ui.containers._ScrollView.GetContents";
haxe_ui_containers__$ScrollView_GetContents.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_containers__$ScrollView_GetContents.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	get: function() {
		var contents = this._component.findComponent("scrollview-contents",null,false,"css");
		return haxe_ui_util_Variant.fromComponent(contents);
	}
	,__class__: haxe_ui_containers__$ScrollView_GetContents
});
var haxe_ui_core_ItemRenderer = function() {
	this._fieldList = null;
	this.itemIndex = -1;
	this._allowHover = true;
	this.autoRegisterInteractiveEvents = true;
	haxe_ui_containers_Box.call(this);
	this.registerEvent("mouseover",$bind(this,this._onItemMouseOver));
	this.registerEvent("mouseout",$bind(this,this._onItemMouseOut));
	this.registerEvent("mousedown",$bind(this,this._onItemMouseDown));
	this.registerEvent("mouseup",$bind(this,this._onItemMouseUp));
};
$hxClasses["haxe.ui.core.ItemRenderer"] = haxe_ui_core_ItemRenderer;
haxe_ui_core_ItemRenderer.__name__ = "haxe.ui.core.ItemRenderer";
haxe_ui_core_ItemRenderer.__super__ = haxe_ui_containers_Box;
haxe_ui_core_ItemRenderer.prototype = $extend(haxe_ui_containers_Box.prototype,{
	autoRegisterInteractiveEvents: null
	,_onItemMouseOver: function(event) {
		this.addClass(":hover");
	}
	,_onItemMouseOut: function(event) {
		this.removeClass(":hover");
	}
	,_onItemMouseDown: function(event) {
		this.addClass(":down");
	}
	,_onItemMouseUp: function(event) {
		this.removeClass(":down");
	}
	,_allowHover: null
	,get_allowHover: function() {
		return this._allowHover;
	}
	,set_allowHover: function(value) {
		if(this._allowHover == value) {
			return value;
		}
		this._allowHover = value;
		if(this._allowHover == true) {
			this.registerEvent("mouseover",$bind(this,this._onItemMouseOver));
			this.registerEvent("mouseout",$bind(this,this._onItemMouseOut));
		} else {
			this.unregisterEvent("mouseover",$bind(this,this._onItemMouseOver));
			this.unregisterEvent("mouseout",$bind(this,this._onItemMouseOut));
		}
		return value;
	}
	,_data: null
	,get_data: function() {
		return this._data;
	}
	,set_data: function(value) {
		this._data = value;
		this.invalidateComponent("data",false);
		return value;
	}
	,itemIndex: null
	,_fieldList: null
	,validateComponentData: function() {
		if(this._data != null && (this._fieldList == null || this._fieldList.length == 0)) {
			var _g = Type.typeof(this._data);
			switch(_g._hx_index) {
			case 4:
				if(typeof(this._data) == "string" == false) {
					var fieldList = Reflect.fields(this._data);
					if(js_Boot.getClass(this._data) != null) {
						var instanceFields = Type.getInstanceFields(js_Boot.getClass(this._data));
						var _g1 = 0;
						while(_g1 < instanceFields.length) {
							var i = instanceFields[_g1];
							++_g1;
							if(fieldList.indexOf(i) == -1 && Reflect.isFunction(Reflect.getProperty(this._data,i)) == false) {
								fieldList.push(i);
							} else if(StringTools.startsWith(i,"get_") && fieldList.indexOf(HxOverrides.substr(i,4,null)) == -1 && Reflect.isFunction(Reflect.getProperty(this._data,i)) == true) {
								fieldList.push(HxOverrides.substr(i,4,null));
							}
						}
						this._fieldList = fieldList;
					}
				} else {
					this._fieldList = ["text"];
				}
				break;
			case 6:
				var _g1 = _g.c;
				if(typeof(this._data) == "string" == false) {
					var fieldList = Reflect.fields(this._data);
					if(js_Boot.getClass(this._data) != null) {
						var instanceFields = Type.getInstanceFields(js_Boot.getClass(this._data));
						var _g = 0;
						while(_g < instanceFields.length) {
							var i = instanceFields[_g];
							++_g;
							if(fieldList.indexOf(i) == -1 && Reflect.isFunction(Reflect.getProperty(this._data,i)) == false) {
								fieldList.push(i);
							} else if(StringTools.startsWith(i,"get_") && fieldList.indexOf(HxOverrides.substr(i,4,null)) == -1 && Reflect.isFunction(Reflect.getProperty(this._data,i)) == true) {
								fieldList.push(HxOverrides.substr(i,4,null));
							}
						}
						this._fieldList = fieldList;
					}
				} else {
					this._fieldList = ["text"];
				}
				break;
			default:
				this._fieldList = ["text"];
			}
		}
		this.updateValues(this._data,this._fieldList);
		if(this.autoRegisterInteractiveEvents) {
			var components = this.findComponents(null,haxe_ui_core_InteractiveComponent);
			var _g = 0;
			while(_g < components.length) {
				var c = components[_g];
				++_g;
				if(((c) instanceof haxe_ui_components_Button)) {
					if(c.hasEvent("click",$bind(this,this.onItemClick)) == false) {
						c.registerEvent("click",$bind(this,this.onItemClick));
					}
				} else if(c.hasEvent("change",$bind(this,this.onItemChange)) == false) {
					c.registerEvent("change",$bind(this,this.onItemChange));
				}
			}
		}
		this.onDataChanged(this._data);
	}
	,onDataChanged: function(data) {
		this._data = data;
	}
	,onItemChange: function(event) {
		if(this.itemIndex < 0) {
			return;
		}
		var v = event.target.get_value();
		if(this._data != null) {
			Reflect.setProperty(this._data,event.target.get_id(),v);
		}
		var e = new haxe_ui_events_ItemEvent("itemcomponentevent");
		e.bubble = true;
		e.source = event.target;
		e.sourceEvent = event;
		e.itemIndex = this.itemIndex;
		e.data = this._data;
		this.dispatch(e);
	}
	,onItemClick: function(event) {
		if(this.itemIndex < 0) {
			return;
		}
		var e = new haxe_ui_events_ItemEvent("itemcomponentevent");
		e.bubble = true;
		e.source = event.target;
		e.sourceEvent = event;
		e.itemIndex = this.itemIndex;
		e.data = this._data;
		this.dispatch(e);
	}
	,updateValues: function(value,fieldList) {
		if(fieldList == null) {
			fieldList = Reflect.fields(value);
		}
		var valueObject = null;
		var _g = Type.typeof(value);
		switch(_g._hx_index) {
		case 4:
			if(typeof(value) == "string" == false) {
				valueObject = value;
			} else {
				valueObject = { text : value};
			}
			break;
		case 6:
			var _g1 = _g.c;
			if(typeof(value) == "string" == false) {
				valueObject = value;
			} else {
				valueObject = { text : value};
			}
			break;
		default:
			valueObject = { text : value};
		}
		var _g = 0;
		while(_g < fieldList.length) {
			var f = fieldList[_g];
			++_g;
			var v = Reflect.getProperty(valueObject,f);
			var c = this.findComponent(f,null,true);
			if(c != null && v != null) {
				var propValue = haxe_ui_util_TypeConverter.convertTo(v,haxe_ui_core_TypeMap.getTypeInfo(c.get_className(),"value"));
				c.set_value(propValue);
				if(this.autoRegisterInteractiveEvents) {
					if(((c) instanceof haxe_ui_core_InteractiveComponent) || ((c) instanceof haxe_ui_core_ItemRenderer)) {
						if(c.hasEvent("change",$bind(this,this.onItemChange)) == false) {
							c.registerEvent("change",$bind(this,this.onItemChange));
						}
						if(c.hasEvent("click",$bind(this,this.onItemClick)) == false) {
							c.registerEvent("click",$bind(this,this.onItemClick));
						}
					}
				}
				c.show();
			} else if(c != null) {
				c.hide();
			} else if(f != "id" && f != "layout") {
				try {
					Reflect.setProperty(this,f,v);
				} catch( _g1 ) {
					haxe_NativeStackTrace.lastError = _g1;
				}
			} else if(Type.typeof(v) == ValueType.TObject) {
				this.updateValues(v);
			}
		}
	}
	,registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		c.set_allowHover(this.get_allowHover());
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_core_ItemRenderer();
	}
	,__class__: haxe_ui_core_ItemRenderer
	,__properties__: $extend(haxe_ui_containers_Box.prototype.__properties__,{set_data:"set_data",get_data:"get_data",set_allowHover:"set_allowHover",get_allowHover:"get_allowHover"})
});
var haxe_ui_core_BasicItemRenderer = function() {
	haxe_ui_core_ItemRenderer.call(this);
	var hbox = new haxe_ui_containers_HBox();
	hbox.addClass("basic-renderer-container");
	var icon = new haxe_ui_components_Image();
	icon.set_id("icon");
	icon.addClass("basic-renderer-icon");
	icon.set_verticalAlign("center");
	icon.hide();
	hbox.addComponent(icon);
	var label = new haxe_ui_components_Label();
	label.set_id("text");
	label.addClass("basic-renderer-label");
	label.set_verticalAlign("center");
	label.hide();
	hbox.addComponent(label);
	this.addComponent(hbox);
};
$hxClasses["haxe.ui.core.BasicItemRenderer"] = haxe_ui_core_BasicItemRenderer;
haxe_ui_core_BasicItemRenderer.__name__ = "haxe.ui.core.BasicItemRenderer";
haxe_ui_core_BasicItemRenderer.__super__ = haxe_ui_core_ItemRenderer;
haxe_ui_core_BasicItemRenderer.prototype = $extend(haxe_ui_core_ItemRenderer.prototype,{
	registerBehaviours: function() {
		haxe_ui_core_ItemRenderer.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_core_ItemRenderer.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_core_BasicItemRenderer();
	}
	,__class__: haxe_ui_core_BasicItemRenderer
});
var haxe_ui_core_ComponentClassMap = function() {
	this._map = null;
};
$hxClasses["haxe.ui.core.ComponentClassMap"] = haxe_ui_core_ComponentClassMap;
haxe_ui_core_ComponentClassMap.__name__ = "haxe.ui.core.ComponentClassMap";
haxe_ui_core_ComponentClassMap.__properties__ = {get_instance:"get_instance"};
haxe_ui_core_ComponentClassMap._instance = null;
haxe_ui_core_ComponentClassMap.get_instance = function() {
	if(haxe_ui_core_ComponentClassMap._instance == null) {
		haxe_ui_core_ComponentClassMap._instance = new haxe_ui_core_ComponentClassMap();
	}
	return haxe_ui_core_ComponentClassMap._instance;
};
haxe_ui_core_ComponentClassMap.get = function(alias) {
	alias = StringTools.replace(alias,"-","").toLowerCase();
	return haxe_ui_core_ComponentClassMap.get_instance().getClassName(alias);
};
haxe_ui_core_ComponentClassMap.register = function(alias,className) {
	haxe_ui_core_ComponentClassMap.get_instance().registerClassName(alias.toLowerCase(),className);
};
haxe_ui_core_ComponentClassMap.list = function() {
	haxe_ui_core_ComponentClassMap.get_instance().load();
	return new haxe_ds__$StringMap_StringMapKeyIterator(haxe_ui_core_ComponentClassMap.get_instance()._map.h);
};
haxe_ui_core_ComponentClassMap.clear = function() {
	haxe_ui_core_ComponentClassMap.get_instance()._map = new haxe_ds_StringMap();
};
haxe_ui_core_ComponentClassMap.hasClass = function(className) {
	return haxe_ui_core_ComponentClassMap.get_instance().hasClassName(className);
};
haxe_ui_core_ComponentClassMap.prototype = {
	_map: null
	,getClassName: function(alias) {
		this.load();
		alias = alias.toLowerCase();
		return this._map.h[alias];
	}
	,registerClassName: function(alias,className) {
		this.load();
		alias = alias.toLowerCase();
		if(Object.prototype.hasOwnProperty.call(this._map.h,alias) == false) {
			this._map.h[alias] = className;
		}
		this.save();
	}
	,hasClassName: function(className) {
		this.load();
		var h = this._map.h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			if(this._map.h[k] == className) {
				return true;
			}
		}
		return false;
	}
	,load: function() {
		if(this._map != null) {
			return;
		}
		var s = haxe_Resource.getString("haxeui_classmap");
		if(s == null) {
			return;
		}
		var unserializer = new haxe_Unserializer(s);
		this._map = unserializer.unserialize();
	}
	,save: function() {
	}
	,__class__: haxe_ui_core_ComponentClassMap
};
var haxe_ui_core_ComponentTextBehaviour = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
};
$hxClasses["haxe.ui.core.ComponentTextBehaviour"] = haxe_ui_core_ComponentTextBehaviour;
haxe_ui_core_ComponentTextBehaviour.__name__ = "haxe.ui.core.ComponentTextBehaviour";
haxe_ui_core_ComponentTextBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_core_ComponentTextBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this._value)) {
			return;
		}
		this._value = value;
		haxe_ui_behaviours_DefaultBehaviour.prototype.set.call(this,value);
	}
	,__class__: haxe_ui_core_ComponentTextBehaviour
});
var haxe_ui_core_ComponentDisabledBehaviour = function(component) {
	haxe_ui_behaviours_DefaultBehaviour.call(this,component);
	this._value = haxe_ui_util_Variant.fromBool(false);
};
$hxClasses["haxe.ui.core.ComponentDisabledBehaviour"] = haxe_ui_core_ComponentDisabledBehaviour;
haxe_ui_core_ComponentDisabledBehaviour.__name__ = "haxe.ui.core.ComponentDisabledBehaviour";
haxe_ui_core_ComponentDisabledBehaviour.__super__ = haxe_ui_behaviours_DefaultBehaviour;
haxe_ui_core_ComponentDisabledBehaviour.prototype = $extend(haxe_ui_behaviours_DefaultBehaviour.prototype,{
	set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this._value)) {
			return;
		}
		this._value = value;
		if(value != null && haxe_ui_util_Variant.get_isNull(value) == false) {
			this._component.disableInteractivity(haxe_ui_util_Variant.toBool(value),true,true);
		}
	}
	,get: function() {
		return haxe_ui_util_Variant.fromBool(this._component.classes.indexOf(":disabled") != -1);
	}
	,__class__: haxe_ui_core_ComponentDisabledBehaviour
});
var haxe_ui_core_ComponentValueBehaviour = function(component) {
	haxe_ui_behaviours_ValueBehaviour.call(this,component);
};
$hxClasses["haxe.ui.core.ComponentValueBehaviour"] = haxe_ui_core_ComponentValueBehaviour;
haxe_ui_core_ComponentValueBehaviour.__name__ = "haxe.ui.core.ComponentValueBehaviour";
haxe_ui_core_ComponentValueBehaviour.__super__ = haxe_ui_behaviours_ValueBehaviour;
haxe_ui_core_ComponentValueBehaviour.prototype = $extend(haxe_ui_behaviours_ValueBehaviour.prototype,{
	set: function(value) {
		if(haxe_ui_util_Variant.eq(value,this._value)) {
			return;
		}
		this._value = value;
		this._component.set_text(haxe_ui_util_Variant.toString(value));
	}
	,get: function() {
		return this._value;
	}
	,getDynamic: function() {
		return haxe_ui_util_Variant.toDynamic(this._value);
	}
	,__class__: haxe_ui_core_ComponentValueBehaviour
});
var haxe_ui_core_ComponentToolTipBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.core.ComponentToolTipBehaviour"] = haxe_ui_core_ComponentToolTipBehaviour;
haxe_ui_core_ComponentToolTipBehaviour.__name__ = "haxe.ui.core.ComponentToolTipBehaviour";
haxe_ui_core_ComponentToolTipBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_core_ComponentToolTipBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		if(this._value == null || haxe_ui_util_Variant.get_isNull(this._value)) {
			haxe_ui_tooltips_ToolTipManager.get_instance().unregisterTooltip(this._component);
		} else {
			haxe_ui_tooltips_ToolTipManager.get_instance().registerTooltip(this._component,{ tipData : haxe_ui_util_Variant.toDynamic(this._value), renderer : this._component.get_tooltipRenderer()});
		}
	}
	,setDynamic: function(value) {
		haxe_ui_tooltips_ToolTipManager.get_instance().unregisterTooltip(this._component);
		if(value != null) {
			haxe_ui_tooltips_ToolTipManager.get_instance().registerTooltip(this._component,{ tipData : value, renderer : this._component.get_tooltipRenderer()});
		}
	}
	,getDynamic: function() {
		var options = haxe_ui_tooltips_ToolTipManager.get_instance().getTooltipOptions(this._component);
		if(options == null) {
			return null;
		}
		return options.tipData;
	}
	,__class__: haxe_ui_core_ComponentToolTipBehaviour
});
var haxe_ui_core_ComponentToolTipRendererBehaviour = function(component) {
	haxe_ui_behaviours_DataBehaviour.call(this,component);
};
$hxClasses["haxe.ui.core.ComponentToolTipRendererBehaviour"] = haxe_ui_core_ComponentToolTipRendererBehaviour;
haxe_ui_core_ComponentToolTipRendererBehaviour.__name__ = "haxe.ui.core.ComponentToolTipRendererBehaviour";
haxe_ui_core_ComponentToolTipRendererBehaviour.__super__ = haxe_ui_behaviours_DataBehaviour;
haxe_ui_core_ComponentToolTipRendererBehaviour.prototype = $extend(haxe_ui_behaviours_DataBehaviour.prototype,{
	validateData: function() {
		if(this._value == null || haxe_ui_util_Variant.get_isNull(this._value)) {
			haxe_ui_tooltips_ToolTipManager.get_instance().updateTooltipRenderer(this._component,null);
		} else {
			haxe_ui_tooltips_ToolTipManager.get_instance().updateTooltipRenderer(this._component,haxe_ui_util_Variant.toComponent(this._value));
		}
	}
	,__class__: haxe_ui_core_ComponentToolTipRendererBehaviour
});
var haxe_ui_core_ImageDisplay = function() {
	this._isValidating = false;
	this._isAllInvalid = false;
	this._invalidationFlags = new haxe_ds_StringMap();
	haxe_ui_backend_ImageDisplayImpl.call(this);
};
$hxClasses["haxe.ui.core.ImageDisplay"] = haxe_ui_core_ImageDisplay;
haxe_ui_core_ImageDisplay.__name__ = "haxe.ui.core.ImageDisplay";
haxe_ui_core_ImageDisplay.__super__ = haxe_ui_backend_ImageDisplayImpl;
haxe_ui_core_ImageDisplay.prototype = $extend(haxe_ui_backend_ImageDisplayImpl.prototype,{
	_invalidationFlags: null
	,_isAllInvalid: null
	,_isValidating: null
	,get_left: function() {
		return this._left;
	}
	,set_left: function(value) {
		if(value == this._left) {
			return value;
		}
		this._left = value;
		this.invalidateComponent("position");
		return value;
	}
	,get_top: function() {
		return this._top;
	}
	,set_top: function(value) {
		if(value == this._top) {
			return value;
		}
		this._top = value;
		this.invalidateComponent("position");
		return value;
	}
	,set_imageWidth: function(value) {
		if(this._imageWidth == value || value <= 0) {
			return value;
		}
		this._imageWidth = value;
		this.invalidateComponent("display");
		return value;
	}
	,get_imageWidth: function() {
		return this._imageWidth;
	}
	,set_imageHeight: function(value) {
		if(this._imageHeight == value || value <= 0) {
			return value;
		}
		this._imageHeight = value;
		this.invalidateComponent("display");
		return value;
	}
	,get_imageHeight: function() {
		return this._imageHeight;
	}
	,get_imageInfo: function() {
		return this._imageInfo;
	}
	,set_imageInfo: function(value) {
		if(value == this._imageInfo) {
			return value;
		}
		this._imageInfo = value;
		this._imageWidth = this._imageInfo.width;
		this._imageHeight = this._imageInfo.height;
		this.invalidateComponent("data");
		this.invalidateComponent("display");
		return value;
	}
	,get_imageClipRect: function() {
		return this._imageClipRect;
	}
	,set_imageClipRect: function(value) {
		this._imageClipRect = value;
		this.invalidateComponent("display");
		return value;
	}
	,isComponentInvalid: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		if(this._isAllInvalid == true) {
			return true;
		}
		if(flag == "all") {
			var h = this._invalidationFlags.h;
			var value_h = h;
			var value_keys = Object.keys(h);
			var value_length = value_keys.length;
			var value_current = 0;
			while(value_current < value_length) {
				var value = value_h[value_keys[value_current++]];
				return true;
			}
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag);
	}
	,invalidateComponent: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		if(this.parentComponent == null) {
			return;
		}
		if(flag == "all") {
			this._isAllInvalid = true;
			this.parentComponent.invalidateComponent("imageDisplay");
		} else if(!Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag)) {
			this._invalidationFlags.h[flag] = true;
			this.parentComponent.invalidateComponent("imageDisplay");
		}
	}
	,validateComponent: function() {
		if(this._isValidating == true || this.isComponentInvalid() == false) {
			return;
		}
		this._isValidating = true;
		this.handleValidate();
		var h = this._invalidationFlags.h;
		var flag_h = h;
		var flag_keys = Object.keys(h);
		var flag_length = flag_keys.length;
		var flag_current = 0;
		while(flag_current < flag_length) {
			var flag = flag_keys[flag_current++];
			var _this = this._invalidationFlags;
			if(Object.prototype.hasOwnProperty.call(_this.h,flag)) {
				delete(_this.h[flag]);
			}
		}
		this._isAllInvalid = false;
		this._isValidating = false;
	}
	,handleValidate: function() {
		var dataInvalid = this.isComponentInvalid("data");
		var positionInvalid = this.isComponentInvalid("position");
		var displayInvalid = this.isComponentInvalid("display");
		if(dataInvalid) {
			this.validateData();
		}
		if(positionInvalid) {
			this.validatePosition();
		}
		if(displayInvalid) {
			this.validateDisplay();
		}
	}
	,__class__: haxe_ui_core_ImageDisplay
	,__properties__: {set_imageClipRect:"set_imageClipRect",get_imageClipRect:"get_imageClipRect",set_imageInfo:"set_imageInfo",get_imageInfo:"get_imageInfo",set_imageHeight:"set_imageHeight",get_imageHeight:"get_imageHeight",set_imageWidth:"set_imageWidth",get_imageWidth:"get_imageWidth",set_top:"set_top",get_top:"get_top",set_left:"set_left",get_left:"get_left"}
});
var haxe_ui_core_Platform = function() {
	haxe_ui_backend_PlatformImpl.call(this);
};
$hxClasses["haxe.ui.core.Platform"] = haxe_ui_core_Platform;
haxe_ui_core_Platform.__name__ = "haxe.ui.core.Platform";
haxe_ui_core_Platform.__properties__ = {get_instance:"get_instance",get_hscrollHeight:"get_hscrollHeight",get_vscrollWidth:"get_vscrollWidth"};
haxe_ui_core_Platform.vscrollWidth = null;
haxe_ui_core_Platform.get_vscrollWidth = function() {
	return haxe_ui_core_Platform.get_instance().getMetric("patform.metrics.vscroll.width");
};
haxe_ui_core_Platform.hscrollHeight = null;
haxe_ui_core_Platform.get_hscrollHeight = function() {
	return haxe_ui_core_Platform.get_instance().getMetric("patform.metrics.hscroll.height");
};
haxe_ui_core_Platform._instance = null;
haxe_ui_core_Platform.instance = null;
haxe_ui_core_Platform.get_instance = function() {
	if(haxe_ui_core_Platform._instance == null) {
		haxe_ui_core_Platform._instance = new haxe_ui_core_Platform();
	}
	return haxe_ui_core_Platform._instance;
};
haxe_ui_core_Platform.__super__ = haxe_ui_backend_PlatformImpl;
haxe_ui_core_Platform.prototype = $extend(haxe_ui_backend_PlatformImpl.prototype,{
	getMetric: function(id) {
		return haxe_ui_backend_PlatformImpl.prototype.getMetric.call(this,id);
	}
	,__class__: haxe_ui_core_Platform
});
var haxe_ui_core_Screen = function() {
	this.currentMouseY = 0;
	this.currentMouseX = 0;
	this._eventMap = new haxe_ui_util_EventMap();
	var _gthis = this;
	haxe_ui_backend_ScreenImpl.call(this);
	this.registerEvent("mousemove",function(e) {
		_gthis.currentMouseX = e.screenX;
		_gthis.currentMouseY = e.screenY;
	});
};
$hxClasses["haxe.ui.core.Screen"] = haxe_ui_core_Screen;
haxe_ui_core_Screen.__name__ = "haxe.ui.core.Screen";
haxe_ui_core_Screen.__properties__ = {get_instance:"get_instance"};
haxe_ui_core_Screen._instance = null;
haxe_ui_core_Screen.get_instance = function() {
	if(haxe_ui_core_Screen._instance == null) {
		haxe_ui_core_Screen._instance = new haxe_ui_core_Screen();
	}
	return haxe_ui_core_Screen._instance;
};
haxe_ui_core_Screen.__super__ = haxe_ui_backend_ScreenImpl;
haxe_ui_core_Screen.prototype = $extend(haxe_ui_backend_ScreenImpl.prototype,{
	_eventMap: null
	,currentMouseX: null
	,currentMouseY: null
	,addComponent: function(component) {
		var wasReady = component.get_isReady();
		component._hasScreen = true;
		haxe_ui_backend_ScreenImpl.prototype.addComponent.call(this,component);
		component.ready();
		if(this.rootComponents.indexOf(component) == -1) {
			this.rootComponents.push(component);
		}
		haxe_ui_focus_FocusManager.get_instance().pushView(component);
		if(component.hasEvent("resize",$bind(this,this._onRootComponentResize)) == false) {
			component.registerEvent("resize",$bind(this,this._onRootComponentResize));
		}
		if(wasReady && component.get_hidden() == false) {
			component.dispatch(new haxe_ui_events_UIEvent("shown"));
		}
		return component;
	}
	,removeComponent: function(component,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		if(this.rootComponents.indexOf(component) == -1) {
			return component;
		}
		component._hasScreen = false;
		haxe_ui_backend_ScreenImpl.prototype.removeComponent.call(this,component,dispose);
		component.set_depth(-1);
		HxOverrides.remove(this.rootComponents,component);
		haxe_ui_focus_FocusManager.get_instance().removeView(component);
		component.unregisterEvent("resize",$bind(this,this._onRootComponentResize));
		if(dispose == true) {
			component.disposeComponent();
		}
		return component;
	}
	,setComponentIndex: function(child,index) {
		if(index >= 0 && index <= this.rootComponents.length) {
			this.handleSetComponentIndex(child,index);
			HxOverrides.remove(this.rootComponents,child);
			this.rootComponents.splice(index,0,child);
		}
		return child;
	}
	,moveComponentToFront: function(child) {
		if(this.rootComponents.indexOf(child) != -1) {
			this.setComponentIndex(child,this.rootComponents.length - 1);
		}
	}
	,findComponentsUnderPoint: function(screenX,screenY,type) {
		var c = [];
		var _g = 0;
		var _g1 = this.rootComponents;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			if(r.hitTest(screenX,screenY)) {
				var match = true;
				if(type != null && js_Boot.__instanceof(r,type) == false) {
					match = false;
				}
				if(match == true) {
					c.push(r);
				}
			}
			c = c.concat(r.findComponentsUnderPoint(screenX,screenY,type));
		}
		return c;
	}
	,hasComponentUnderPoint: function(screenX,screenY,type) {
		var _g = 0;
		var _g1 = this.rootComponents;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			if(r.hasComponentUnderPoint(screenX,screenY,type) == true) {
				return true;
			}
		}
		return false;
	}
	,findSolidComponentUnderPoint: function(screenX,screenY,type) {
		var solidComponents = [];
		var components = this.findComponentsUnderPoint(screenX,screenY,type);
		var _g = 0;
		while(_g < components.length) {
			var c = components[_g];
			++_g;
			if(c.get_isComponentSolid()) {
				solidComponents.push(c);
			}
		}
		return solidComponents;
	}
	,hasSolidComponentUnderPoint: function(screenX,screenY,type) {
		return this.findSolidComponentUnderPoint(screenX,screenY,type).length > 0;
	}
	,onThemeChanged: function() {
		var _g = 0;
		var _g1 = this.rootComponents;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			this.onThemeChangedChildren(c);
		}
	}
	,onThemeChangedChildren: function(c) {
		var _g = 0;
		var _g1 = c._children == null ? [] : c._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			this.onThemeChangedChildren(child);
		}
		c.onThemeChanged();
	}
	,registerEvent: function(type,listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(this.supportsEvent(type) == true) {
			if(this._eventMap.add(type,listener,priority) == true) {
				this.mapEvent(type,$bind(this,this._onMappedEvent));
			}
		} else {
			haxe_Log.trace("WARNING: Screen event \"" + type + "\" not supported",{ fileName : "haxe/ui/core/Screen.hx", lineNumber : 267, className : "haxe.ui.core.Screen", methodName : "registerEvent"});
		}
	}
	,unregisterEvent: function(type,listener) {
		if(this._eventMap.remove(type,listener) == true) {
			this.unmapEvent(type,$bind(this,this._onMappedEvent));
		}
	}
	,_onMappedEvent: function(event) {
		this._eventMap.invoke(event.type,event);
	}
	,__class__: haxe_ui_core_Screen
});
var haxe_ui_core_TextDisplayData = function() {
	this.wordWrap = false;
	this.multiline = false;
};
$hxClasses["haxe.ui.core.TextDisplayData"] = haxe_ui_core_TextDisplayData;
haxe_ui_core_TextDisplayData.__name__ = "haxe.ui.core.TextDisplayData";
haxe_ui_core_TextDisplayData.prototype = {
	multiline: null
	,wordWrap: null
	,__class__: haxe_ui_core_TextDisplayData
};
var haxe_ui_core_TextDisplay = function() {
	this._depth = -1;
	this._isValidating = false;
	this._isAllInvalid = false;
	this._invalidationFlags = new haxe_ds_StringMap();
	haxe_ui_backend_TextDisplayImpl.call(this);
};
$hxClasses["haxe.ui.core.TextDisplay"] = haxe_ui_core_TextDisplay;
haxe_ui_core_TextDisplay.__name__ = "haxe.ui.core.TextDisplay";
haxe_ui_core_TextDisplay.__interfaces__ = [haxe_ui_validation_IValidating];
haxe_ui_core_TextDisplay.__super__ = haxe_ui_backend_TextDisplayImpl;
haxe_ui_core_TextDisplay.prototype = $extend(haxe_ui_backend_TextDisplayImpl.prototype,{
	_invalidationFlags: null
	,_isAllInvalid: null
	,_isValidating: null
	,get_id: function() {
		if(this.parentComponent == null) {
			return null;
		}
		return this.parentComponent.get_id() + "_textdisplay";
	}
	,set_id: function(value) {
		return value;
	}
	,isComponentOffscreen: null
	,get_isComponentOffscreen: function() {
		return false;
	}
	,get_textStyle: function() {
		return this._textStyle;
	}
	,set_textStyle: function(value) {
		var _gthis = this;
		if(value == null) {
			return value;
		}
		if(value.fontName != null && this._textStyle == null || this._textStyle != null && value.fontName != this._textStyle.fontName) {
			haxe_ui_ToolkitAssets.get_instance().getFont(value.fontName,function(fontInfo) {
				_gthis._fontInfo = fontInfo;
				_gthis.invalidateComponent("style");
				_gthis.parentComponent.invalidateComponent("style");
			});
		} else {
			this.invalidateComponent("style");
		}
		this._textStyle = value;
		return value;
	}
	,get_text: function() {
		return this._text;
	}
	,set_text: function(value) {
		if(value == this._text) {
			return value;
		}
		this._text = value;
		this._htmlText = null;
		this.invalidateComponent("data");
		return value;
	}
	,get_htmlText: function() {
		return this._htmlText;
	}
	,set_htmlText: function(value) {
		if(value == this._htmlText) {
			return value;
		}
		this._htmlText = value;
		this._text = null;
		this.invalidateComponent("data");
		return value;
	}
	,get_left: function() {
		return this._left;
	}
	,set_left: function(value) {
		if(value == this._left) {
			return value;
		}
		this.invalidateComponent("position");
		this._left = value;
		return value;
	}
	,get_top: function() {
		return this._top;
	}
	,set_top: function(value) {
		if(value == this._top) {
			return value;
		}
		this.invalidateComponent("position");
		this._top = value;
		return value;
	}
	,set_width: function(value) {
		if(this._width == value) {
			return value;
		}
		this.invalidateComponent("display");
		this._width = value;
		return value;
	}
	,get_width: function() {
		return this._width;
	}
	,set_height: function(value) {
		if(this._height == value) {
			return value;
		}
		this.invalidateComponent("display");
		this._height = value;
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,textWidth: null
	,get_textWidth: function() {
		if(this._text == null && this._htmlText == null) {
			return 0;
		}
		if(this._text != null && this._text.length == 0) {
			return 0;
		}
		if(this._htmlText != null && this._htmlText.length == 0) {
			return 0;
		}
		if(this.isComponentInvalid() == true) {
			this.validateComponent();
		}
		return this._textWidth;
	}
	,textHeight: null
	,get_textHeight: function() {
		if(this.isComponentInvalid() == true) {
			this.validateComponent();
		}
		return this._textHeight;
	}
	,get_multiline: function() {
		return this._displayData.multiline;
	}
	,set_multiline: function(value) {
		if(value == this._displayData.multiline) {
			return value;
		}
		this.invalidateComponent("style");
		this._displayData.multiline = value;
		return value;
	}
	,get_wordWrap: function() {
		return this._displayData.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value == this._displayData.wordWrap) {
			return value;
		}
		this.invalidateComponent("style");
		this._displayData.wordWrap = value;
		return value;
	}
	,isComponentInvalid: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		if(this._isAllInvalid == true) {
			return true;
		}
		if(flag == "all") {
			var h = this._invalidationFlags.h;
			var value_h = h;
			var value_keys = Object.keys(h);
			var value_length = value_keys.length;
			var value_current = 0;
			while(value_current < value_length) {
				var value = value_h[value_keys[value_current++]];
				return true;
			}
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag);
	}
	,invalidateComponent: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		if(flag == "all") {
			this._isAllInvalid = true;
			this.parentComponent.invalidateComponent("textDisplay");
		} else if(!Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag)) {
			this._invalidationFlags.h[flag] = true;
			this.parentComponent.invalidateComponent("textDisplay");
		}
	}
	,_depth: null
	,get_depth: function() {
		return this._depth;
	}
	,set_depth: function(value) {
		if(this._depth == value) {
			return value;
		}
		this._depth = value;
		return value;
	}
	,updateComponentDisplay: function() {
	}
	,validateComponent: function(nextFrame) {
		if(nextFrame == null) {
			nextFrame = true;
		}
		if(this._isValidating == true || this.isComponentInvalid() == false) {
			return;
		}
		this._isValidating = true;
		this.validateComponentInternal();
		this._invalidationFlags.h = Object.create(null);
		this._isAllInvalid = false;
		this._isValidating = false;
	}
	,validateComponentInternal: function() {
		var dataInvalid = this.isComponentInvalid("data");
		var styleInvalid = this.isComponentInvalid("style");
		var positionInvalid = this.isComponentInvalid("position");
		var displayInvalid = this.isComponentInvalid("display");
		var measureInvalid = this.isComponentInvalid("measure");
		if(dataInvalid) {
			this.validateData();
		}
		if(styleInvalid) {
			if(this.validateStyle()) {
				measureInvalid = true;
			}
		}
		if(positionInvalid || styleInvalid) {
			this.validatePosition();
		}
		if(displayInvalid) {
			this.validateDisplay();
		}
		if(dataInvalid || displayInvalid || measureInvalid) {
			var oldTextWidth = this.get_textWidth();
			var oldTextHeight = this.get_textHeight();
			this.measureText();
			if(this.get_textWidth() != oldTextWidth || this.get_textHeight() != oldTextHeight) {
				this.parentComponent.invalidateComponent("layout");
			}
		}
	}
	,__class__: haxe_ui_core_TextDisplay
	,__properties__: $extend(haxe_ui_backend_TextDisplayImpl.prototype.__properties__,{set_depth:"set_depth",get_depth:"get_depth",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_multiline:"set_multiline",get_multiline:"get_multiline",get_textHeight:"get_textHeight",get_textWidth:"get_textWidth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_top:"set_top",get_top:"get_top",set_left:"set_left",get_left:"get_left",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_text:"set_text",get_text:"get_text",set_textStyle:"set_textStyle",get_textStyle:"get_textStyle",get_isComponentOffscreen:"get_isComponentOffscreen",set_id:"set_id",get_id:"get_id"})
});
var haxe_ui_core_TextInputData = function() {
	this.onChangedCallback = null;
	this.onScrollCallback = null;
	this.vscrollNativeWheel = false;
	this.vscrollPageStep = null;
	this.vscrollPageSize = 0;
	this.vscrollMax = 0;
	this.vscrollPos = 0;
	this.hscrollPageSize = 0;
	this.hscrollMax = 0;
	this.hscrollPos = 0;
	this.password = false;
};
$hxClasses["haxe.ui.core.TextInputData"] = haxe_ui_core_TextInputData;
haxe_ui_core_TextInputData.__name__ = "haxe.ui.core.TextInputData";
haxe_ui_core_TextInputData.prototype = {
	password: null
	,hscrollPos: null
	,hscrollMax: null
	,hscrollPageSize: null
	,vscrollPos: null
	,vscrollMax: null
	,vscrollPageSize: null
	,vscrollPageStep: null
	,vscrollNativeWheel: null
	,onScrollCallback: null
	,onChangedCallback: null
	,__class__: haxe_ui_core_TextInputData
};
var haxe_ui_core_TextInput = function() {
	this._depth = -1;
	this._isValidating = false;
	this._isAllInvalid = false;
	this._invalidationFlags = new haxe_ds_StringMap();
	haxe_ui_backend_TextInputImpl.call(this);
	this._isAllInvalid = true;
};
$hxClasses["haxe.ui.core.TextInput"] = haxe_ui_core_TextInput;
haxe_ui_core_TextInput.__name__ = "haxe.ui.core.TextInput";
haxe_ui_core_TextInput.__interfaces__ = [haxe_ui_validation_IValidating];
haxe_ui_core_TextInput.__super__ = haxe_ui_backend_TextInputImpl;
haxe_ui_core_TextInput.prototype = $extend(haxe_ui_backend_TextInputImpl.prototype,{
	_invalidationFlags: null
	,_isAllInvalid: null
	,_isValidating: null
	,get_id: function() {
		if(this.parentComponent == null) {
			return null;
		}
		return this.parentComponent.get_id() + "_textinput";
	}
	,set_id: function(value) {
		return value;
	}
	,isComponentOffscreen: null
	,get_isComponentOffscreen: function() {
		return false;
	}
	,focus: function() {
		haxe_ui_backend_TextInputImpl.prototype.focus.call(this);
	}
	,blur: function() {
		haxe_ui_backend_TextInputImpl.prototype.blur.call(this);
	}
	,get_textStyle: function() {
		return this._textStyle;
	}
	,set_textStyle: function(value) {
		var _gthis = this;
		if(value == null) {
			return value;
		}
		if(value.fontName != null && this._textStyle == null || this._textStyle != null && value.fontName != this._textStyle.fontName) {
			haxe_ui_ToolkitAssets.get_instance().getFont(value.fontName,function(fontInfo) {
				_gthis._fontInfo = fontInfo;
				_gthis.invalidateComponent("style");
			});
		} else {
			this.invalidateComponent("style");
		}
		this._textStyle = value;
		return value;
	}
	,data: null
	,get_data: function() {
		return this._inputData;
	}
	,get_text: function() {
		return this._text;
	}
	,set_text: function(value) {
		if(value == this._text) {
			return value;
		}
		this._text = value;
		this.invalidateComponent("data");
		return value;
	}
	,get_htmlText: function() {
		return this._htmlText;
	}
	,set_htmlText: function(value) {
		if(value == this._htmlText) {
			return value;
		}
		this._htmlText = value;
		this._text = null;
		this.invalidateComponent("data");
		return value;
	}
	,get_password: function() {
		return this._inputData.password;
	}
	,set_password: function(value) {
		if(value == this._inputData.password) {
			return value;
		}
		this._inputData.password = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_left: function() {
		return this._left;
	}
	,set_left: function(value) {
		if(value == this._left) {
			return value;
		}
		this._left = value;
		this.invalidateComponent("position");
		return value;
	}
	,get_top: function() {
		return this._top;
	}
	,set_top: function(value) {
		if(value == this._top) {
			return value;
		}
		this._top = value;
		this.invalidateComponent("position");
		return value;
	}
	,set_width: function(value) {
		if(this._width == value) {
			return value;
		}
		this._width = value;
		this.invalidateComponent("display");
		return value;
	}
	,get_width: function() {
		return this._width;
	}
	,set_height: function(value) {
		if(this._height == value) {
			return value;
		}
		this._height = value;
		this.invalidateComponent("display");
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,textWidth: null
	,get_textWidth: function() {
		if(this._text == null || this._text.length == 0) {
			return 0;
		}
		if(this.isComponentInvalid() == true) {
			this.validateComponent();
		}
		return this._textWidth;
	}
	,textHeight: null
	,get_textHeight: function() {
		var tmp = this._text == null || this._text.length == 0;
		if(this.isComponentInvalid() == true) {
			this.validateComponent();
		}
		return this._textHeight;
	}
	,get_multiline: function() {
		return this._displayData.multiline;
	}
	,set_multiline: function(value) {
		if(value == this._displayData.multiline) {
			return value;
		}
		this._displayData.multiline = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_wordWrap: function() {
		return this._displayData.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value == this._displayData.wordWrap) {
			return value;
		}
		this._displayData.wordWrap = value;
		this.invalidateComponent("style");
		return value;
	}
	,get_hscrollPos: function() {
		return this._inputData.hscrollPos;
	}
	,set_hscrollPos: function(value) {
		if(value == this._inputData.hscrollPos) {
			return value;
		}
		this._inputData.hscrollPos = value;
		this.invalidateComponent("data");
		return value;
	}
	,hscrollMax: null
	,get_hscrollMax: function() {
		return this._inputData.hscrollMax;
	}
	,hscrollPageSize: null
	,get_hscrollPageSize: function() {
		return this._inputData.hscrollPageSize;
	}
	,get_vscrollPos: function() {
		return this._inputData.vscrollPos;
	}
	,set_vscrollPos: function(value) {
		if(value == this._inputData.vscrollPos) {
			return value;
		}
		this._inputData.vscrollPos = value;
		this.invalidateComponent("data");
		return value;
	}
	,vscrollMax: null
	,get_vscrollMax: function() {
		return this._inputData.vscrollMax;
	}
	,vscrollPageSize: null
	,get_vscrollPageSize: function() {
		return this._inputData.vscrollPageSize;
	}
	,isComponentInvalid: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		if(this._isAllInvalid == true) {
			return true;
		}
		if(flag == "all") {
			var h = this._invalidationFlags.h;
			var value_h = h;
			var value_keys = Object.keys(h);
			var value_length = value_keys.length;
			var value_current = 0;
			while(value_current < value_length) {
				var value = value_h[value_keys[value_current++]];
				return true;
			}
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag);
	}
	,invalidateComponent: function(flag) {
		if(flag == null) {
			flag = "all";
		}
		if(flag == "all") {
			this._isAllInvalid = true;
			this.parentComponent.invalidateComponent("textInput");
		} else if(!Object.prototype.hasOwnProperty.call(this._invalidationFlags.h,flag)) {
			this._invalidationFlags.h[flag] = true;
			this.parentComponent.invalidateComponent("textInput");
		}
	}
	,_depth: null
	,get_depth: function() {
		return this._depth;
	}
	,set_depth: function(value) {
		if(this._depth == value) {
			return value;
		}
		this._depth = value;
		return value;
	}
	,updateComponentDisplay: function() {
	}
	,validateComponent: function(nextFrame) {
		if(nextFrame == null) {
			nextFrame = true;
		}
		if(this._isValidating == true || this.isComponentInvalid() == false) {
			return;
		}
		this._isValidating = true;
		this.validateComponentInternal();
		var h = this._invalidationFlags.h;
		var flag_h = h;
		var flag_keys = Object.keys(h);
		var flag_length = flag_keys.length;
		var flag_current = 0;
		while(flag_current < flag_length) {
			var flag = flag_keys[flag_current++];
			var _this = this._invalidationFlags;
			if(Object.prototype.hasOwnProperty.call(_this.h,flag)) {
				delete(_this.h[flag]);
			}
		}
		this._isAllInvalid = false;
		this._isValidating = false;
	}
	,validateComponentInternal: function() {
		var dataInvalid = this.isComponentInvalid("data");
		var styleInvalid = this.isComponentInvalid("style");
		var positionInvalid = this.isComponentInvalid("position");
		var displayInvalid = this.isComponentInvalid("display");
		var measureInvalid = this.isComponentInvalid("measure");
		if(dataInvalid) {
			this.validateData();
		}
		if(styleInvalid) {
			if(this.validateStyle()) {
				measureInvalid = true;
			}
		}
		if(positionInvalid) {
			this.validatePosition();
		}
		if(displayInvalid) {
			this.validateDisplay();
		}
		if(dataInvalid || displayInvalid || measureInvalid) {
			this.measureText();
		}
		if(dataInvalid) {
			if(this._inputData.onChangedCallback != null) {
				this._inputData.onChangedCallback();
			}
		}
	}
	,__class__: haxe_ui_core_TextInput
	,__properties__: $extend(haxe_ui_backend_TextInputImpl.prototype.__properties__,{set_depth:"set_depth",get_depth:"get_depth",get_vscrollPageSize:"get_vscrollPageSize",get_vscrollMax:"get_vscrollMax",set_vscrollPos:"set_vscrollPos",get_vscrollPos:"get_vscrollPos",get_hscrollPageSize:"get_hscrollPageSize",get_hscrollMax:"get_hscrollMax",set_hscrollPos:"set_hscrollPos",get_hscrollPos:"get_hscrollPos",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_multiline:"set_multiline",get_multiline:"get_multiline",get_textHeight:"get_textHeight",get_textWidth:"get_textWidth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_top:"set_top",get_top:"get_top",set_left:"set_left",get_left:"get_left",set_password:"set_password",get_password:"get_password",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_text:"set_text",get_text:"get_text",get_data:"get_data",set_textStyle:"set_textStyle",get_textStyle:"get_textStyle",get_isComponentOffscreen:"get_isComponentOffscreen",set_id:"set_id",get_id:"get_id"})
});
var haxe_ui_core_TypeMap = function() { };
$hxClasses["haxe.ui.core.TypeMap"] = haxe_ui_core_TypeMap;
haxe_ui_core_TypeMap.__name__ = "haxe.ui.core.TypeMap";
haxe_ui_core_TypeMap.getTypeInfo = function(className,property) {
	var propInfo = haxe_ui_util_RTTI.getClassProperty(className,property);
	if(propInfo == null) {
		return null;
	}
	return propInfo.propertyType;
};
var haxe_ui_data_DataSource = function(transformer) {
	this._filterFn = null;
	this.onChange = null;
	this.onClear = null;
	this.onRemove = null;
	this.onUpdate = null;
	this.onInsert = null;
	this.onAdd = null;
	this.transformer = transformer;
	this._allowCallbacks = true;
	this._changed = false;
};
$hxClasses["haxe.ui.data.DataSource"] = haxe_ui_data_DataSource;
haxe_ui_data_DataSource.__name__ = "haxe.ui.data.DataSource";
haxe_ui_data_DataSource.fromString = function(data,type) {
	return null;
};
haxe_ui_data_DataSource.prototype = {
	onDataSourceChange: null
	,transformer: null
	,_changed: null
	,onAdd: null
	,onInsert: null
	,onUpdate: null
	,onRemove: null
	,onClear: null
	,onChange: null
	,_allowCallbacks: null
	,get_allowCallbacks: function() {
		return this._allowCallbacks;
	}
	,set_allowCallbacks: function(value) {
		this._allowCallbacks = value;
		if(this._allowCallbacks == true && this._changed == true) {
			this._changed = false;
			this.onInternalChange();
		}
		return value;
	}
	,get_data: function() {
		return this.handleGetData();
	}
	,set_data: function(value) {
		this.handleSetData(value);
		this.handleChanged();
		return value;
	}
	,size: null
	,get_size: function() {
		return this.handleGetSize();
	}
	,get: function(index) {
		var r = this.handleGetItem(index);
		if(js_Boot.__implements(r,haxe_ui_data_IDataItem)) {
			(js_Boot.__cast(r , haxe_ui_data_IDataItem)).onDataSourceChanged = $bind(this,this.onDataItemChange);
		}
		if(this.transformer != null) {
			r = this.transformer.transformFrom(r);
		}
		return r;
	}
	,indexOf: function(item) {
		if(this.transformer != null) {
			item = this.transformer.transformFrom(item);
		}
		return this.handleIndexOf(item);
	}
	,add: function(item) {
		var r = this.handleAddItem(item);
		this.handleChanged();
		if(this._allowCallbacks == true && this.onAdd != null) {
			this.onAdd(r);
		}
		return r;
	}
	,insert: function(index,item) {
		var r = this.handleInsert(index,item);
		this.handleChanged();
		if(this._allowCallbacks == true && this.onInsert != null) {
			this.onInsert(index,r);
		}
		return r;
	}
	,remove: function(item) {
		var r = this.handleRemoveItem(item);
		this.handleChanged();
		if(this._allowCallbacks == true && this.onRemove != null) {
			this.onRemove(r);
		}
		return r;
	}
	,removeAt: function(index) {
		var item = this.get(index);
		return this.remove(item);
	}
	,update: function(index,item) {
		var r = this.handleUpdateItem(index,item);
		this.handleChanged();
		if(this._allowCallbacks == true && this.onUpdate != null) {
			this.onUpdate(index,r);
		}
		return r;
	}
	,clear: function() {
		var o = this._allowCallbacks;
		this._allowCallbacks = false;
		this.handleClear();
		this._allowCallbacks = o;
		this.handleChanged();
		if(this._allowCallbacks == true && this.onClear != null) {
			this.onClear();
		}
	}
	,_filterFn: null
	,clearFilter: function() {
		this._filterFn = null;
		this.handleClearFilter();
	}
	,filter: function(fn) {
		this._filterFn = fn;
		this.handleFilter(fn);
	}
	,isFiltered: null
	,get_isFiltered: function() {
		return this._filterFn != null;
	}
	,handleClearFilter: function() {
	}
	,handleFilter: function(fn) {
	}
	,handleChanged: function() {
		this._changed = true;
		if(this._allowCallbacks == true) {
			this._changed = false;
			this.onInternalChange();
		}
	}
	,sortCustom: function(fn,direction) {
	}
	,sort: function(field,direction) {
		var _g = $bind(this,this.sortByFn);
		var field1 = field;
		this.sortCustom(function(o1,o2,direction) {
			return _g(o1,o2,direction,field1);
		});
	}
	,sortByFn: function(o1,o2,direction,field) {
		var f1 = o1;
		var f2 = o2;
		if(field != null) {
			f1 = Reflect.field(o1,field);
			f2 = Reflect.field(o2,field);
		}
		if(f1 == null || f2 == null) {
			return 0;
		}
		f1 = Std.string(f1);
		f2 = Std.string(f2);
		if(direction == null) {
			direction = "asc";
		}
		var high = 1;
		var low = -1;
		if(direction == "desc") {
			high = -1;
			low = 1;
		}
		if(f1 > f2) {
			return high;
		} else {
			return low;
		}
	}
	,handleGetSize: function() {
		return 0;
	}
	,handleGetItem: function(index) {
		return null;
	}
	,handleIndexOf: function(item) {
		return 0;
	}
	,handleAddItem: function(item) {
		return null;
	}
	,handleInsert: function(index,item) {
		return null;
	}
	,handleRemoveItem: function(item) {
		return null;
	}
	,handleGetData: function() {
		return null;
	}
	,handleSetData: function(v) {
	}
	,handleClear: function() {
		var cachedTransformer = this.transformer;
		this.transformer = null;
		while(this.get_size() > 0) this.remove(this.get(0));
		this.transformer = cachedTransformer;
	}
	,handleUpdateItem: function(index,item) {
		return null;
	}
	,clone: function() {
		var c = new haxe_ui_data_DataSource();
		return c;
	}
	,onDataItemChange: function() {
		if(this._filterFn != null) {
			this.handleFilter(this._filterFn);
		} else {
			this.onInternalChange();
		}
	}
	,onInternalChange: function() {
		if(this.onDataSourceChange != null) {
			this.onDataSourceChange();
		}
		if(this.onChange != null) {
			this.onChange();
		}
	}
	,__class__: haxe_ui_data_DataSource
	,__properties__: {get_isFiltered:"get_isFiltered",get_size:"get_size",set_data:"set_data",get_data:"get_data",set_allowCallbacks:"set_allowCallbacks",get_allowCallbacks:"get_allowCallbacks"}
};
var haxe_ui_data_ArrayDataSource = function(transformer) {
	this._filteredArray = null;
	haxe_ui_data_DataSource.call(this,transformer);
	this._array = [];
};
$hxClasses["haxe.ui.data.ArrayDataSource"] = haxe_ui_data_ArrayDataSource;
haxe_ui_data_ArrayDataSource.__name__ = "haxe.ui.data.ArrayDataSource";
haxe_ui_data_ArrayDataSource.fromArray = function(source,transformer) {
	var ds = new haxe_ui_data_ArrayDataSource(transformer);
	ds._array = source;
	return ds;
};
haxe_ui_data_ArrayDataSource.__super__ = haxe_ui_data_DataSource;
haxe_ui_data_ArrayDataSource.prototype = $extend(haxe_ui_data_DataSource.prototype,{
	_array: null
	,_filteredArray: null
	,handleClearFilter: function() {
		if(this._filteredArray == null) {
			return;
		}
		this._filteredArray = null;
		this.handleChanged();
	}
	,handleFilter: function(fn) {
		this._filteredArray = [];
		var index = 0;
		var _g = 0;
		var _g1 = this._array;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(fn(index,item) == true) {
				this._filteredArray.push(item);
			}
			++index;
		}
		this.handleChanged();
	}
	,sortCustom: function(fn,direction) {
		var _g = fn;
		var a3 = direction;
		var tmp = function(a1,a2) {
			return _g(a1,a2,a3);
		};
		this._array.sort(tmp);
		this.handleChanged();
	}
	,handleGetSize: function() {
		if(this._filteredArray != null) {
			return this._filteredArray.length;
		}
		return this._array.length;
	}
	,handleGetItem: function(index) {
		if(this._filteredArray != null) {
			return this._filteredArray[index];
		}
		return this._array[index];
	}
	,handleIndexOf: function(item) {
		if(this._filteredArray != null) {
			return this._filteredArray.indexOf(item);
		}
		return this._array.indexOf(item);
	}
	,handleAddItem: function(item) {
		this._array.push(item);
		if(this._filteredArray != null && this._filterFn != null) {
			if(this._filterFn(this._array.length - 1,item) == true) {
				this._filteredArray.push(item);
			}
		}
		return item;
	}
	,handleInsert: function(index,item) {
		this._array.splice(index,0,item);
		if(this._filteredArray != null && this._filterFn != null) {
			if(this._filterFn(index,item) == true) {
				this._filteredArray.push(item);
			}
		}
		return item;
	}
	,handleRemoveItem: function(item) {
		HxOverrides.remove(this._array,item);
		if(this._filteredArray != null) {
			HxOverrides.remove(this._filteredArray,item);
		}
		return item;
	}
	,handleClear: function() {
		while(this._array.length > 0) this._array.pop();
		if(this._filteredArray != null) {
			while(this._filteredArray.length > 0) this._filteredArray.pop();
		}
	}
	,handleGetData: function() {
		if(this._filteredArray != null) {
			return this._filteredArray;
		}
		return this._array;
	}
	,handleSetData: function(v) {
		this._array = v;
		if(this._filterFn != null) {
			this.filter(this._filterFn);
		}
	}
	,handleUpdateItem: function(index,item) {
		if(this._filteredArray != null) {
			return this._filteredArray[index] = item;
		}
		return this._array[index] = item;
	}
	,clone: function() {
		var c = new haxe_ui_data_ArrayDataSource();
		c._array = this._array.slice();
		if(this._filteredArray != null) {
			c._filteredArray = this._filteredArray.slice();
		}
		if(this._filterFn != null) {
			c._filterFn = this._filterFn;
		}
		return c;
	}
	,__class__: haxe_ui_data_ArrayDataSource
});
var haxe_ui_data_IDataItem = function() { };
$hxClasses["haxe.ui.data.IDataItem"] = haxe_ui_data_IDataItem;
haxe_ui_data_IDataItem.__name__ = "haxe.ui.data.IDataItem";
haxe_ui_data_IDataItem.__isInterface__ = true;
haxe_ui_data_IDataItem.prototype = {
	onDataSourceChanged: null
	,__class__: haxe_ui_data_IDataItem
};
var haxe_ui_data_transformation_IItemTransformer = function() { };
$hxClasses["haxe.ui.data.transformation.IItemTransformer"] = haxe_ui_data_transformation_IItemTransformer;
haxe_ui_data_transformation_IItemTransformer.__name__ = "haxe.ui.data.transformation.IItemTransformer";
haxe_ui_data_transformation_IItemTransformer.__isInterface__ = true;
haxe_ui_data_transformation_IItemTransformer.prototype = {
	transformFrom: null
	,__class__: haxe_ui_data_transformation_IItemTransformer
};
var haxe_ui_dragdrop_DragManager = function() {
	this._dragComponents = new haxe_ds_ObjectMap();
	this._mouseTargetToDragTarget = new haxe_ds_ObjectMap();
};
$hxClasses["haxe.ui.dragdrop.DragManager"] = haxe_ui_dragdrop_DragManager;
haxe_ui_dragdrop_DragManager.__name__ = "haxe.ui.dragdrop.DragManager";
haxe_ui_dragdrop_DragManager.__properties__ = {get_instance:"get_instance"};
haxe_ui_dragdrop_DragManager._instance = null;
haxe_ui_dragdrop_DragManager.instance = null;
haxe_ui_dragdrop_DragManager.get_instance = function() {
	if(haxe_ui_dragdrop_DragManager._instance == null) {
		haxe_ui_dragdrop_DragManager._instance = new haxe_ui_dragdrop_DragManager();
	}
	return haxe_ui_dragdrop_DragManager._instance;
};
haxe_ui_dragdrop_DragManager.prototype = {
	_dragComponents: null
	,_mouseTargetToDragTarget: null
	,_currentComponent: null
	,_currentOptions: null
	,_mouseOffset: null
	,getDragOptions: function(component) {
		var dragOptions = this._dragComponents.h[component.__id__];
		return dragOptions;
	}
	,registerDraggable: function(component,dragOptions) {
		if(this.isRegisteredDraggable(component)) {
			return null;
		}
		if(dragOptions == null) {
			dragOptions = { };
		}
		if(dragOptions.mouseTarget == null) {
			dragOptions.mouseTarget = component;
		}
		if(dragOptions.dragOffsetX == null) {
			dragOptions.dragOffsetX = 0;
		}
		if(dragOptions.dragOffsetY == null) {
			dragOptions.dragOffsetY = 0;
		}
		if(dragOptions.dragTolerance == null) {
			dragOptions.dragTolerance = haxe_ui_Toolkit.get_scale() | 0;
		}
		if(dragOptions.draggableStyleName == null) {
			dragOptions.draggableStyleName = "draggable";
		}
		if(dragOptions.draggingStyleName == null) {
			dragOptions.draggingStyleName = "dragging";
		}
		this._dragComponents.set(component,dragOptions);
		this._mouseTargetToDragTarget.set(dragOptions.mouseTarget,component);
		if(!dragOptions.mouseTarget.hasEvent("mousedown",$bind(this,this.onMouseDown))) {
			dragOptions.mouseTarget.registerEvent("mousedown",$bind(this,this.onMouseDown));
		}
		if(dragOptions.draggableStyleName != null) {
			dragOptions.mouseTarget.addClass(dragOptions.draggableStyleName);
		}
		return dragOptions;
	}
	,unregisterDraggable: function(component) {
		if(!this.isRegisteredDraggable(component)) {
			return;
		}
		var dragOptions = this.getDragOptions(component);
		if(dragOptions != null && dragOptions.mouseTarget != null) {
			dragOptions.mouseTarget.unregisterEvent("mousedown",$bind(this,this.onMouseDown));
			this._mouseTargetToDragTarget.remove(dragOptions.mouseTarget);
		}
		haxe_ui_core_Screen.get_instance().unregisterEvent("mousemove",$bind(this,this.onScreenCheckForDrag));
		haxe_ui_core_Screen.get_instance().unregisterEvent("mousemove",$bind(this,this.onScreenDrag));
		haxe_ui_core_Screen.get_instance().unregisterEvent("mouseup",$bind(this,this.onScreenMouseUp));
		this._dragComponents.remove(component);
	}
	,isRegisteredDraggable: function(component) {
		return this._dragComponents.h.__keys__[component.__id__] != null;
	}
	,onMouseDown: function(e) {
		this._currentComponent = this._mouseTargetToDragTarget.h[e.target.__id__];
		if(this._currentComponent.parentComponent == null) {
			e.screenX *= haxe_ui_Toolkit.get_scaleX();
			e.screenY *= haxe_ui_Toolkit.get_scaleY();
		}
		this._currentOptions = this.getDragOptions(this._currentComponent);
		this._mouseOffset = new haxe_ui_geom_Point(e.screenX - this._currentComponent.get_left(),e.screenY - this._currentComponent.get_top());
		haxe_ui_core_Screen.get_instance().registerEvent("mouseup",$bind(this,this.onScreenMouseUp));
		haxe_ui_core_Screen.get_instance().registerEvent("mousemove",$bind(this,this.onScreenCheckForDrag));
	}
	,onScreenCheckForDrag: function(e) {
		if(this._currentComponent.parentComponent == null) {
			e.screenX *= haxe_ui_Toolkit.get_scaleX();
			e.screenY *= haxe_ui_Toolkit.get_scaleY();
		}
		var x1 = e.screenX - this._currentComponent.get_left();
		var y1 = e.screenY - this._currentComponent.get_top();
		var x2 = this._mouseOffset.x;
		var y2 = this._mouseOffset.y;
		if(Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)) > this._currentOptions.dragTolerance) {
			haxe_ui_core_Screen.get_instance().unregisterEvent("mousemove",$bind(this,this.onScreenCheckForDrag));
			haxe_ui_core_Screen.get_instance().registerEvent("mousemove",$bind(this,this.onScreenDrag));
			this._mouseOffset.x -= this._currentOptions.dragOffsetX;
			this._mouseOffset.y -= this._currentOptions.dragOffsetY;
			if(this._currentOptions.draggingStyleName != null) {
				this._currentComponent.addClass(this._currentOptions.draggingStyleName);
			}
			this._currentComponent.dispatch(new haxe_ui_events_DragEvent("dragstart"));
		}
	}
	,onScreenDrag: function(e) {
		if(this._currentComponent.parentComponent == null) {
			e.screenX *= haxe_ui_Toolkit.get_scaleX();
			e.screenY *= haxe_ui_Toolkit.get_scaleY();
		}
		var event = new haxe_ui_events_DragEvent("drag");
		if(this._currentOptions.dragBounds != null) {
			var v = e.screenX;
			var min = this._currentOptions.dragBounds.left + this._mouseOffset.x;
			var max = this._currentOptions.dragBounds.get_right() - this._currentComponent.get_width() + this._mouseOffset.x;
			var boundX;
			if(v == null || isNaN(v)) {
				boundX = min;
			} else {
				if(min != null && v < min) {
					v = min;
				} else if(max != null && v > max) {
					v = max;
				}
				boundX = v;
			}
			var v = e.screenY;
			var min = this._currentOptions.dragBounds.top + this._mouseOffset.y;
			var max = this._currentOptions.dragBounds.get_bottom() - this._currentComponent.get_height() + this._mouseOffset.y;
			var boundY;
			if(v == null || isNaN(v)) {
				boundY = min;
			} else {
				if(min != null && v < min) {
					v = min;
				} else if(max != null && v > max) {
					v = max;
				}
				boundY = v;
			}
			event.left = boundX - this._mouseOffset.x;
			event.top = boundY - this._mouseOffset.y;
		} else {
			var xpos = e.screenX;
			var ypos = e.screenY;
			event.left = xpos - this._mouseOffset.x;
			event.top = ypos - this._mouseOffset.y;
		}
		this._currentComponent.dispatch(event);
		if(event.canceled == true) {
			return;
		}
		this._currentComponent.moveComponent(event.left,event.top);
	}
	,onScreenMouseUp: function(e) {
		if(this._currentOptions.draggingStyleName != null) {
			this._currentComponent.removeClass(this._currentOptions.draggingStyleName);
		}
		this._currentComponent.dispatch(new haxe_ui_events_DragEvent("dragend"));
		this._currentComponent = null;
		this._currentOptions = null;
		this._mouseOffset.x = 0;
		this._mouseOffset.y = 0;
		haxe_ui_core_Screen.get_instance().unregisterEvent("mouseup",$bind(this,this.onScreenMouseUp));
		haxe_ui_core_Screen.get_instance().unregisterEvent("mousemove",$bind(this,this.onScreenCheckForDrag));
		haxe_ui_core_Screen.get_instance().unregisterEvent("mousemove",$bind(this,this.onScreenDrag));
	}
	,__class__: haxe_ui_dragdrop_DragManager
};
var haxe_ui_events_ActionEvent = function(type,action,bubble,data) {
	if(bubble == null) {
		bubble = false;
	}
	this.repeater = false;
	haxe_ui_events_UIEvent.call(this,type,bubble,data);
	this.action = action;
};
$hxClasses["haxe.ui.events.ActionEvent"] = haxe_ui_events_ActionEvent;
haxe_ui_events_ActionEvent.__name__ = "haxe.ui.events.ActionEvent";
haxe_ui_events_ActionEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_ActionEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	action: null
	,repeater: null
	,clone: function() {
		var c = new haxe_ui_events_ActionEvent(this.type,this.action);
		c.type = this.type;
		c.bubble = this.bubble;
		c.target = this.target;
		c.data = this.data;
		c.canceled = this.canceled;
		c.relatedEvent = this.relatedEvent;
		c.action = this.action;
		c.repeater = this.repeater;
		this.postClone(c);
		return c;
	}
	,copyFrom: function(e) {
		var ae = js_Boot.__cast(e , haxe_ui_events_ActionEvent);
		this.action = ae.action;
		this.repeater = ae.repeater;
	}
	,__class__: haxe_ui_events_ActionEvent
});
var haxe_ui_events_AnimationEvent = function(type) {
	haxe_ui_events_UIEvent.call(this,type);
};
$hxClasses["haxe.ui.events.AnimationEvent"] = haxe_ui_events_AnimationEvent;
haxe_ui_events_AnimationEvent.__name__ = "haxe.ui.events.AnimationEvent";
haxe_ui_events_AnimationEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_AnimationEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	currentTime: null
	,delta: null
	,position: null
	,clone: function() {
		var c = new haxe_ui_events_AnimationEvent(this.type);
		c.currentTime = this.currentTime;
		c.delta = this.delta;
		c.position = this.position;
		return c;
	}
	,__class__: haxe_ui_events_AnimationEvent
});
var haxe_ui_events_DragEvent = function(type,bubble,data) {
	this.top = 0;
	this.left = 0;
	haxe_ui_events_UIEvent.call(this,type,bubble,data);
};
$hxClasses["haxe.ui.events.DragEvent"] = haxe_ui_events_DragEvent;
haxe_ui_events_DragEvent.__name__ = "haxe.ui.events.DragEvent";
haxe_ui_events_DragEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_DragEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	left: null
	,top: null
	,clone: function() {
		var c = new haxe_ui_events_DragEvent(this.type);
		c.type = this.type;
		c.bubble = this.bubble;
		c.target = this.target;
		c.data = this.data;
		c.canceled = this.canceled;
		c.left = this.left;
		c.top = this.top;
		this.postClone(c);
		return c;
	}
	,copyFrom: function(c) {
		var d = js_Boot.__cast(c , haxe_ui_events_DragEvent);
		this.left = d.left;
		this.top = d.top;
	}
	,__class__: haxe_ui_events_DragEvent
});
var haxe_ui_events_FocusEvent = function(type) {
	haxe_ui_events_UIEvent.call(this,type);
};
$hxClasses["haxe.ui.events.FocusEvent"] = haxe_ui_events_FocusEvent;
haxe_ui_events_FocusEvent.__name__ = "haxe.ui.events.FocusEvent";
haxe_ui_events_FocusEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_FocusEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	clone: function() {
		var c = new haxe_ui_events_FocusEvent(this.type);
		c.type = this.type;
		c.target = this.target;
		this.postClone(c);
		return c;
	}
	,__class__: haxe_ui_events_FocusEvent
});
var haxe_ui_events_ItemEvent = function(type,bubble,data) {
	this.itemIndex = -1;
	this.sourceEvent = null;
	this.source = null;
	haxe_ui_events_UIEvent.call(this,type,bubble,data);
};
$hxClasses["haxe.ui.events.ItemEvent"] = haxe_ui_events_ItemEvent;
haxe_ui_events_ItemEvent.__name__ = "haxe.ui.events.ItemEvent";
haxe_ui_events_ItemEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_ItemEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	source: null
	,sourceEvent: null
	,itemIndex: null
	,clone: function() {
		var c = new haxe_ui_events_ItemEvent(this.type);
		c.source = this.source;
		c.sourceEvent = this.sourceEvent;
		c.itemIndex = this.itemIndex;
		c.type = this.type;
		c.bubble = this.bubble;
		c.target = this.target;
		c.data = this.data;
		c.canceled = this.canceled;
		this.postClone(c);
		return c;
	}
	,__class__: haxe_ui_events_ItemEvent
});
var haxe_ui_events_KeyboardEvent = function(type) {
	haxe_ui_events_UIEvent.call(this,type);
};
$hxClasses["haxe.ui.events.KeyboardEvent"] = haxe_ui_events_KeyboardEvent;
haxe_ui_events_KeyboardEvent.__name__ = "haxe.ui.events.KeyboardEvent";
haxe_ui_events_KeyboardEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_KeyboardEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	keyCode: null
	,altKey: null
	,ctrlKey: null
	,shiftKey: null
	,clone: function() {
		var c = new haxe_ui_events_KeyboardEvent(this.type);
		c.type = this.type;
		c.target = this.target;
		c.keyCode = this.keyCode;
		c.altKey = this.altKey;
		c.ctrlKey = this.ctrlKey;
		c.shiftKey = this.shiftKey;
		return c;
	}
	,__class__: haxe_ui_events_KeyboardEvent
});
var haxe_ui_events_MouseEvent = function(type) {
	haxe_ui_events_UIEvent.call(this,type);
};
$hxClasses["haxe.ui.events.MouseEvent"] = haxe_ui_events_MouseEvent;
haxe_ui_events_MouseEvent.__name__ = "haxe.ui.events.MouseEvent";
haxe_ui_events_MouseEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_MouseEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	screenX: null
	,screenY: null
	,buttonDown: null
	,delta: null
	,touchEvent: null
	,ctrlKey: null
	,shiftKey: null
	,localX: null
	,get_localX: function() {
		if(this.target == null) {
			return null;
		}
		return (this.screenX * haxe_ui_Toolkit.get_scaleX() - this.target.get_screenLeft()) / haxe_ui_Toolkit.get_scaleX();
	}
	,localY: null
	,get_localY: function() {
		if(this.target == null) {
			return null;
		}
		return (this.screenY * haxe_ui_Toolkit.get_scaleY() - this.target.get_screenTop()) / haxe_ui_Toolkit.get_scaleY();
	}
	,clone: function() {
		var c = new haxe_ui_events_MouseEvent(this.type);
		c.type = this.type;
		c.target = this.target;
		c.screenX = this.screenX;
		c.screenY = this.screenY;
		c.buttonDown = this.buttonDown;
		c.delta = this.delta;
		c.touchEvent = this.touchEvent;
		c.ctrlKey = this.ctrlKey;
		c.shiftKey = this.shiftKey;
		this.postClone(c);
		return c;
	}
	,__class__: haxe_ui_events_MouseEvent
	,__properties__: {get_localY:"get_localY",get_localX:"get_localX"}
});
var haxe_ui_events_ScrollEvent = function(type) {
	haxe_ui_events_UIEvent.call(this,type);
};
$hxClasses["haxe.ui.events.ScrollEvent"] = haxe_ui_events_ScrollEvent;
haxe_ui_events_ScrollEvent.__name__ = "haxe.ui.events.ScrollEvent";
haxe_ui_events_ScrollEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_ScrollEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	clone: function() {
		var c = new haxe_ui_events_ScrollEvent(this.type);
		c.type = this.type;
		c.target = this.target;
		this.postClone(c);
		return c;
	}
	,__class__: haxe_ui_events_ScrollEvent
});
var haxe_ui_events_ThemeEvent = function(type,bubble,data) {
	haxe_ui_events_UIEvent.call(this,type,bubble,data);
};
$hxClasses["haxe.ui.events.ThemeEvent"] = haxe_ui_events_ThemeEvent;
haxe_ui_events_ThemeEvent.__name__ = "haxe.ui.events.ThemeEvent";
haxe_ui_events_ThemeEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_ThemeEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	__class__: haxe_ui_events_ThemeEvent
});
var haxe_ui_events_ValidationEvent = function(type) {
	haxe_ui_events_UIEvent.call(this,type);
};
$hxClasses["haxe.ui.events.ValidationEvent"] = haxe_ui_events_ValidationEvent;
haxe_ui_events_ValidationEvent.__name__ = "haxe.ui.events.ValidationEvent";
haxe_ui_events_ValidationEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_events_ValidationEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	clone: function() {
		var c = new haxe_ui_events_ValidationEvent(this.type);
		c.type = this.type;
		c.target = this.target;
		this.postClone(c);
		return c;
	}
	,__class__: haxe_ui_events_ValidationEvent
});
var haxe_ui_filters_Filter = function() {
};
$hxClasses["haxe.ui.filters.Filter"] = haxe_ui_filters_Filter;
haxe_ui_filters_Filter.__name__ = "haxe.ui.filters.Filter";
haxe_ui_filters_Filter.prototype = {
	__class__: haxe_ui_filters_Filter
};
var haxe_ui_filters_Blur = function() {
	haxe_ui_filters_Filter.call(this);
};
$hxClasses["haxe.ui.filters.Blur"] = haxe_ui_filters_Blur;
haxe_ui_filters_Blur.__name__ = "haxe.ui.filters.Blur";
haxe_ui_filters_Blur.__super__ = haxe_ui_filters_Filter;
haxe_ui_filters_Blur.prototype = $extend(haxe_ui_filters_Filter.prototype,{
	amount: null
	,__class__: haxe_ui_filters_Blur
});
var haxe_ui_filters_DropShadow = function() {
	haxe_ui_filters_Filter.call(this);
};
$hxClasses["haxe.ui.filters.DropShadow"] = haxe_ui_filters_DropShadow;
haxe_ui_filters_DropShadow.__name__ = "haxe.ui.filters.DropShadow";
haxe_ui_filters_DropShadow.__super__ = haxe_ui_filters_Filter;
haxe_ui_filters_DropShadow.prototype = $extend(haxe_ui_filters_Filter.prototype,{
	distance: null
	,angle: null
	,color: null
	,alpha: null
	,blurX: null
	,blurY: null
	,strength: null
	,quality: null
	,inner: null
	,__class__: haxe_ui_filters_DropShadow
});
var haxe_ui_filters_FilterParser = function() { };
$hxClasses["haxe.ui.filters.FilterParser"] = haxe_ui_filters_FilterParser;
haxe_ui_filters_FilterParser.__name__ = "haxe.ui.filters.FilterParser";
haxe_ui_filters_FilterParser.filterParamDefaults = null;
haxe_ui_filters_FilterParser.parseFilter = function(filterDetails) {
	var filter = null;
	if(filterDetails[0] == "drop-shadow") {
		filter = haxe_ui_filters_FilterParser.parseDropShadow(filterDetails);
	} else if(filterDetails[0] == "blur") {
		filter = haxe_ui_filters_FilterParser.parseBlur(filterDetails);
	} else if(filterDetails[0] == "outline") {
		filter = haxe_ui_filters_FilterParser.parseOutline(filterDetails);
	} else if(filterDetails[0] == "grayscale") {
		filter = haxe_ui_filters_FilterParser.parseGrayscale(filterDetails);
	}
	return filter;
};
haxe_ui_filters_FilterParser.parseDropShadow = function(filterDetails) {
	if(filterDetails == null || filterDetails.length == 0) {
		return null;
	}
	var copy = filterDetails.slice();
	haxe_ui_filters_FilterParser.buildDefaults();
	var filterName = copy[0];
	HxOverrides.remove(copy,filterName);
	copy = haxe_ui_filters_FilterParser.copyFilterDefaults(filterName,copy);
	var dropShadow = new haxe_ui_filters_DropShadow();
	dropShadow.distance = copy[0];
	dropShadow.angle = copy[1];
	dropShadow.color = copy[2];
	dropShadow.alpha = copy[3];
	dropShadow.blurX = copy[4];
	dropShadow.blurY = copy[5];
	dropShadow.strength = copy[6];
	dropShadow.quality = copy[7];
	dropShadow.inner = copy[8];
	return dropShadow;
};
haxe_ui_filters_FilterParser.parseBlur = function(filterDetails) {
	if(filterDetails == null || filterDetails.length == 0) {
		return null;
	}
	var copy = filterDetails.slice();
	haxe_ui_filters_FilterParser.buildDefaults();
	var filterName = copy[0];
	HxOverrides.remove(copy,filterName);
	copy = haxe_ui_filters_FilterParser.copyFilterDefaults(filterName,copy);
	var blur = new haxe_ui_filters_Blur();
	blur.amount = copy[0];
	return blur;
};
haxe_ui_filters_FilterParser.parseOutline = function(filterDetails) {
	if(filterDetails == null || filterDetails.length == 0) {
		return null;
	}
	var copy = filterDetails.slice();
	haxe_ui_filters_FilterParser.buildDefaults();
	var filterName = copy[0];
	HxOverrides.remove(copy,filterName);
	copy = haxe_ui_filters_FilterParser.copyFilterDefaults(filterName,copy);
	var outline = new haxe_ui_filters_Outline();
	outline.color = copy[0];
	outline.size = copy[1];
	return outline;
};
haxe_ui_filters_FilterParser.copyFilterDefaults = function(filterName,params) {
	var copy = [];
	var defaultParams = haxe_ui_filters_FilterParser.filterParamDefaults.h[filterName];
	if(defaultParams != null) {
		var _g = 0;
		while(_g < defaultParams.length) {
			var p = defaultParams[_g];
			++_g;
			copy.push(p);
		}
	}
	if(params != null) {
		var n = 0;
		var _g = 0;
		while(_g < params.length) {
			var p = params[_g];
			++_g;
			copy[n] = p;
			++n;
		}
	}
	return copy;
};
haxe_ui_filters_FilterParser.parseGrayscale = function(filterDetails) {
	if(filterDetails == null || filterDetails.length == 0) {
		return null;
	}
	var copy = filterDetails.slice();
	haxe_ui_filters_FilterParser.buildDefaults();
	var filterName = copy[0];
	HxOverrides.remove(copy,filterName);
	copy = haxe_ui_filters_FilterParser.copyFilterDefaults(filterName,copy);
	var grayscale = new haxe_ui_filters_Grayscale();
	grayscale.amount = copy[0];
	return grayscale;
};
haxe_ui_filters_FilterParser.buildDefaults = function() {
	if(haxe_ui_filters_FilterParser.filterParamDefaults != null) {
		return;
	}
	haxe_ui_filters_FilterParser.filterParamDefaults = new haxe_ds_StringMap();
	var v = [];
	haxe_ui_filters_FilterParser.filterParamDefaults.h["drop-shadow"] = v;
	var this1 = haxe_ui_filters_FilterParser.filterParamDefaults;
	var v = haxe_ui_filters_FilterParser.filterParamDefaults.h["drop-shadow"].concat([4,45,0,1,4,4,1,1,false,false,false]);
	this1.h["drop-shadow"] = v;
	var v = [];
	haxe_ui_filters_FilterParser.filterParamDefaults.h["blur"] = v;
	var this1 = haxe_ui_filters_FilterParser.filterParamDefaults;
	var v = haxe_ui_filters_FilterParser.filterParamDefaults.h["blur"].concat([1]);
	this1.h["blur"] = v;
	var v = [];
	haxe_ui_filters_FilterParser.filterParamDefaults.h["outline"] = v;
	var this1 = haxe_ui_filters_FilterParser.filterParamDefaults;
	var v = haxe_ui_filters_FilterParser.filterParamDefaults.h["outline"].concat([0,1]);
	this1.h["outline"] = v;
	var v = [];
	haxe_ui_filters_FilterParser.filterParamDefaults.h["grayscale"] = v;
	var this1 = haxe_ui_filters_FilterParser.filterParamDefaults;
	var v = haxe_ui_filters_FilterParser.filterParamDefaults.h["grayscale"].concat([100]);
	this1.h["grayscale"] = v;
};
var haxe_ui_filters_Grayscale = function() {
	haxe_ui_filters_Filter.call(this);
};
$hxClasses["haxe.ui.filters.Grayscale"] = haxe_ui_filters_Grayscale;
haxe_ui_filters_Grayscale.__name__ = "haxe.ui.filters.Grayscale";
haxe_ui_filters_Grayscale.__super__ = haxe_ui_filters_Filter;
haxe_ui_filters_Grayscale.prototype = $extend(haxe_ui_filters_Filter.prototype,{
	amount: null
	,__class__: haxe_ui_filters_Grayscale
});
var haxe_ui_filters_Outline = function() {
	haxe_ui_filters_Filter.call(this);
};
$hxClasses["haxe.ui.filters.Outline"] = haxe_ui_filters_Outline;
haxe_ui_filters_Outline.__name__ = "haxe.ui.filters.Outline";
haxe_ui_filters_Outline.__super__ = haxe_ui_filters_Filter;
haxe_ui_filters_Outline.prototype = $extend(haxe_ui_filters_Filter.prototype,{
	color: null
	,size: null
	,__class__: haxe_ui_filters_Outline
});
var haxe_ui_focus_IFocusApplicator = function() { };
$hxClasses["haxe.ui.focus.IFocusApplicator"] = haxe_ui_focus_IFocusApplicator;
haxe_ui_focus_IFocusApplicator.__name__ = "haxe.ui.focus.IFocusApplicator";
haxe_ui_focus_IFocusApplicator.__isInterface__ = true;
haxe_ui_focus_IFocusApplicator.prototype = {
	get_enabled: null
	,set_enabled: null
	,apply: null
	,unapply: null
	,__class__: haxe_ui_focus_IFocusApplicator
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var haxe_ui_focus_FocusApplicator = function() {
	this._enabled = true;
};
$hxClasses["haxe.ui.focus.FocusApplicator"] = haxe_ui_focus_FocusApplicator;
haxe_ui_focus_FocusApplicator.__name__ = "haxe.ui.focus.FocusApplicator";
haxe_ui_focus_FocusApplicator.__interfaces__ = [haxe_ui_focus_IFocusApplicator];
haxe_ui_focus_FocusApplicator.prototype = {
	apply: function(target) {
	}
	,unapply: function(target) {
	}
	,_enabled: null
	,set_enabled: function(value) {
		this._enabled = value;
		return value;
	}
	,get_enabled: function() {
		return this._enabled;
	}
	,__class__: haxe_ui_focus_FocusApplicator
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var haxe_ui_focus_FocusManager = function() {
	this._lastFocuses = new haxe_ds_ObjectMap();
	this._applicators = [];
	this.autoFocus = true;
	haxe_ui_backend_FocusManagerImpl.call(this);
	this._applicators.push(new haxe_ui_focus_StyleFocusApplicator());
};
$hxClasses["haxe.ui.focus.FocusManager"] = haxe_ui_focus_FocusManager;
haxe_ui_focus_FocusManager.__name__ = "haxe.ui.focus.FocusManager";
haxe_ui_focus_FocusManager.__properties__ = {get_instance:"get_instance"};
haxe_ui_focus_FocusManager._instance = null;
haxe_ui_focus_FocusManager.instance = null;
haxe_ui_focus_FocusManager.get_instance = function() {
	if(haxe_ui_focus_FocusManager._instance == null) {
		haxe_ui_focus_FocusManager._instance = new haxe_ui_focus_FocusManager();
	}
	return haxe_ui_focus_FocusManager._instance;
};
haxe_ui_focus_FocusManager.__super__ = haxe_ui_backend_FocusManagerImpl;
haxe_ui_focus_FocusManager.prototype = $extend(haxe_ui_backend_FocusManagerImpl.prototype,{
	autoFocus: null
	,_applicators: null
	,pushView: function(view) {
		if(this.hasFocusableItem(view)) {
			var k = this._lastFocuses.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				this._lastFocuses.h[k1.__id__].set_focus(false);
				this.unapplyFocus(this._lastFocuses.h[k1.__id__]);
			}
		}
		if(this.autoFocus == true) {
			this.focusOnFirstInteractive(view);
			view.registerEvent("ready",$bind(this,this.onViewReady));
		}
	}
	,onViewReady: function(e) {
		e.target.unregisterEvent("ready",$bind(this,this.onViewReady));
		if(this.hasFocusableItem(e.target)) {
			var k = this._lastFocuses.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				this._lastFocuses.h[k1.__id__].set_focus(false);
				this.unapplyFocus(this._lastFocuses.h[k1.__id__]);
			}
			this.focusOnFirstInteractive(e.target);
		}
	}
	,hasFocusableItem: function(view) {
		var list = [];
		this.buildFocusableList(view,list);
		return list.length != 0;
	}
	,focusOnFirstInteractive: function(view) {
		var list = [];
		this.buildFocusableList(view,list);
		if(list.length > 0) {
			list[0].set_focus(true);
			return list[0];
		}
		return null;
	}
	,removeView: function(view) {
		this._lastFocuses.remove(view);
		var top = haxe_ui_core_Screen.get_instance().get_topComponent();
		if(top == null) {
			return;
		}
		if(this._lastFocuses.h.__keys__[top.__id__] != null) {
			this.set_focus(this._lastFocuses.h[top.__id__]);
		}
	}
	,get_focus: function() {
		var top = haxe_ui_core_Screen.get_instance().get_topComponent();
		if(top == null) {
			return null;
		}
		return this.buildFocusableList(top,null);
	}
	,_lastFocuses: null
	,set_focus: function(value) {
		if(value != null) {
			var c = js_Boot.__cast(value , haxe_ui_core_Component);
			var root = c.get_rootComponent();
			var currentFocus = this.buildFocusableList(root,null);
			if(currentFocus != null && currentFocus != value) {
				this.unapplyFocus(currentFocus);
				currentFocus.set_focus(false);
			}
			if(this._lastFocuses.h.__keys__[root.__id__] != null && this._lastFocuses.h[root.__id__] != value) {
				this._lastFocuses.h[root.__id__].set_focus(false);
				this.unapplyFocus(this._lastFocuses.h[root.__id__]);
			}
			this._lastFocuses.set(root,value);
			this.applyFocus(value);
		} else {
			var top = haxe_ui_core_Screen.get_instance().get_topComponent();
			if(this._lastFocuses.h.__keys__[top.__id__] != null) {
				this._lastFocuses.h[top.__id__].set_focus(false);
				this.unapplyFocus(this._lastFocuses.h[top.__id__]);
			}
		}
		return value;
	}
	,focusNext: function() {
		var top = haxe_ui_core_Screen.get_instance().get_topComponent();
		var list = [];
		var currentFocus = this.buildFocusableList(top,list);
		var index = -1;
		if(currentFocus != null) {
			index = list.indexOf(currentFocus);
		}
		var nextIndex = index + 1;
		if(nextIndex > list.length - 1) {
			nextIndex = 0;
		}
		var nextFocus = list[nextIndex];
		this.set_focus(nextFocus);
		return nextFocus;
	}
	,focusPrev: function() {
		var top = haxe_ui_core_Screen.get_instance().get_topComponent();
		var list = [];
		var currentFocus = this.buildFocusableList(top,list);
		var index = -1;
		if(currentFocus != null) {
			index = list.indexOf(currentFocus);
		}
		var prevIndex = index - 1;
		if(prevIndex < 0) {
			prevIndex = list.length - 1;
		}
		var prevFocus = list[prevIndex];
		this.set_focus(prevFocus);
		return prevFocus;
	}
	,buildFocusableList: function(c,list) {
		var currentFocus = null;
		if(c._isDisposed == true) {
			return null;
		}
		if(c.get_hidden() == true) {
			return null;
		}
		if(js_Boot.__implements(c,haxe_ui_focus_IFocusable)) {
			var f = c;
			if(f.get_allowFocus() == true && f.get_disabled() == false) {
				if(f.get_focus() == true) {
					currentFocus = f;
				}
				if(list != null) {
					list.push(f);
				}
			}
		}
		var childList = (c._children == null ? [] : c._children).slice();
		childList.sort(function(c1,c2) {
			return c1.componentTabIndex - c2.componentTabIndex;
		});
		var _g = 0;
		while(_g < childList.length) {
			var child = childList[_g];
			++_g;
			var f = this.buildFocusableList(child,list);
			if(f != null) {
				currentFocus = f;
			}
		}
		return currentFocus;
	}
	,applyFocus: function(c) {
		haxe_ui_backend_FocusManagerImpl.prototype.applyFocus.call(this,c);
		(js_Boot.__cast(c , haxe_ui_focus_IFocusable)).set_focus(true);
		var _g = 0;
		var _g1 = this._applicators;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.get_enabled() == true) {
				a.apply(c);
			}
		}
	}
	,unapplyFocus: function(c) {
		haxe_ui_backend_FocusManagerImpl.prototype.unapplyFocus.call(this,c);
		(js_Boot.__cast(c , haxe_ui_focus_IFocusable)).set_focus(false);
		var _g = 0;
		var _g1 = this._applicators;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.get_enabled() == true) {
				a.unapply(c);
			}
		}
	}
	,__class__: haxe_ui_focus_FocusManager
	,__properties__: {set_focus:"set_focus",get_focus:"get_focus"}
});
var haxe_ui_focus_StyleFocusApplicator = function() {
	haxe_ui_focus_FocusApplicator.call(this);
};
$hxClasses["haxe.ui.focus.StyleFocusApplicator"] = haxe_ui_focus_StyleFocusApplicator;
haxe_ui_focus_StyleFocusApplicator.__name__ = "haxe.ui.focus.StyleFocusApplicator";
haxe_ui_focus_StyleFocusApplicator.__super__ = haxe_ui_focus_FocusApplicator;
haxe_ui_focus_StyleFocusApplicator.prototype = $extend(haxe_ui_focus_FocusApplicator.prototype,{
	apply: function(target) {
		target.addClass(":active");
	}
	,unapply: function(target) {
		target.removeClass(":active");
	}
	,__class__: haxe_ui_focus_StyleFocusApplicator
});
var haxe_ui_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["haxe.ui.geom.Point"] = haxe_ui_geom_Point;
haxe_ui_geom_Point.__name__ = "haxe.ui.geom.Point";
haxe_ui_geom_Point.prototype = {
	x: null
	,y: null
	,__class__: haxe_ui_geom_Point
};
var haxe_ui_geom_Rectangle = function(left,top,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(top == null) {
		top = 0;
	}
	if(left == null) {
		left = 0;
	}
	this._intersectionCache = null;
	this.left = left;
	this.top = top;
	this.width = width;
	this.height = height;
};
$hxClasses["haxe.ui.geom.Rectangle"] = haxe_ui_geom_Rectangle;
haxe_ui_geom_Rectangle.__name__ = "haxe.ui.geom.Rectangle";
haxe_ui_geom_Rectangle.prototype = {
	left: null
	,top: null
	,width: null
	,height: null
	,set: function(left,top,width,height) {
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		if(top == null) {
			top = 0;
		}
		if(left == null) {
			left = 0;
		}
		this.left = left;
		this.top = top;
		this.width = width;
		this.height = height;
	}
	,get_right: function() {
		return this.left + this.width;
	}
	,set_right: function(value) {
		this.width = value - this.left;
		return value;
	}
	,get_bottom: function() {
		return this.top + this.height;
	}
	,set_bottom: function(value) {
		this.height = value - this.top;
		return value;
	}
	,inflate: function(dx,dy) {
		this.left -= dx;
		this.width += dx * 2;
		this.top -= dy;
		this.height += dy * 2;
	}
	,equals: function(rc) {
		if(rc == null) {
			return false;
		}
		if(rc.left == this.left && rc.top == this.top && rc.width == this.width) {
			return rc.height == this.height;
		} else {
			return false;
		}
	}
	,containsPoint: function(x,y) {
		if(x >= this.left && x < this.left + this.width && y >= this.top && y < this.top + this.height) {
			return true;
		}
		return false;
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.left > this.left && rect.top > this.top && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.left >= this.left && rect.top >= this.top && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,intersects: function(rect) {
		var x0 = this.left < rect.left ? rect.left : this.left;
		var x1 = this.get_right() > rect.get_right() ? rect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.top < rect.top ? rect.top : this.top;
		var y1 = this.get_bottom() > rect.get_bottom() ? rect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,_intersectionCache: null
	,intersection: function(rect,noAlloc) {
		if(noAlloc == null) {
			noAlloc = true;
		}
		if(noAlloc == true && this._intersectionCache == null) {
			this._intersectionCache = new haxe_ui_geom_Rectangle();
		}
		var x0 = this.left < rect.left ? rect.left : this.left;
		var x1 = this.get_right() > rect.get_right() ? rect.get_right() : this.get_right();
		if(x1 <= x0) {
			if(noAlloc == true) {
				this._intersectionCache.set();
				return this._intersectionCache;
			} else {
				return new haxe_ui_geom_Rectangle();
			}
		}
		var y0 = this.top < rect.top ? rect.top : this.top;
		var y1 = this.get_bottom() > rect.get_bottom() ? rect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			if(noAlloc == true) {
				this._intersectionCache.set();
				return this._intersectionCache;
			} else {
				return new haxe_ui_geom_Rectangle();
			}
		}
		var r = null;
		if(noAlloc == true) {
			r = this._intersectionCache;
		} else {
			r = new haxe_ui_geom_Rectangle();
		}
		r.set(x0,y0,x1 - x0,y1 - y0);
		return r;
	}
	,toInts: function() {
		this.left = this.left | 0;
		this.top = this.top | 0;
		this.width = this.width | 0;
		this.height = this.height | 0;
	}
	,copy: function() {
		return new haxe_ui_geom_Rectangle(this.left,this.top,this.width,this.height);
	}
	,toString: function() {
		return "{left: " + this.left + ", top: " + this.top + ", bottom: " + this.get_bottom() + ", right: " + this.get_right() + ", width: " + this.width + ", height: " + this.height + "}";
	}
	,__class__: haxe_ui_geom_Rectangle
	,__properties__: {set_bottom:"set_bottom",get_bottom:"get_bottom",set_right:"set_right",get_right:"get_right"}
};
var haxe_ui_geom_Size = function(width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.width = width;
	this.height = height;
};
$hxClasses["haxe.ui.geom.Size"] = haxe_ui_geom_Size;
haxe_ui_geom_Size.__name__ = "haxe.ui.geom.Size";
haxe_ui_geom_Size.prototype = {
	width: null
	,height: null
	,round: function() {
		this.width = Math.round(this.width);
		this.height = Math.round(this.height);
	}
	,toString: function() {
		return "[" + this.width + "x" + this.height + "]";
	}
	,__class__: haxe_ui_geom_Size
};
var haxe_ui_geom_Slice9 = function() { };
$hxClasses["haxe.ui.geom.Slice9"] = haxe_ui_geom_Slice9;
haxe_ui_geom_Slice9.__name__ = "haxe.ui.geom.Slice9";
haxe_ui_geom_Slice9.buildRects = function(w,h,bitmapWidth,bitmapHeight,slice) {
	var srcRects = haxe_ui_geom_Slice9.buildSrcRects(bitmapWidth,bitmapHeight,slice);
	var dstRects = haxe_ui_geom_Slice9.buildDstRects(w,h,srcRects);
	return { src : srcRects, dst : dstRects};
};
haxe_ui_geom_Slice9.buildSrcRects = function(bitmapWidth,bitmapHeight,slice) {
	var x1 = slice.left;
	var y1 = slice.top;
	var x2 = slice.get_right();
	var y2 = slice.get_bottom();
	var srcRects = [];
	srcRects.push(new haxe_ui_geom_Rectangle(0,0,x1,y1));
	srcRects.push(new haxe_ui_geom_Rectangle(x1,0,x2 - x1,y1));
	srcRects.push(new haxe_ui_geom_Rectangle(x2,0,bitmapWidth - x2,y1));
	srcRects.push(new haxe_ui_geom_Rectangle(0,y1,x1,y2 - y1));
	srcRects.push(new haxe_ui_geom_Rectangle(x1,y1,x2 - x1,y2 - y1));
	srcRects.push(new haxe_ui_geom_Rectangle(x2,y1,bitmapWidth - x2,y2 - y1));
	srcRects.push(new haxe_ui_geom_Rectangle(0,y2,x1,bitmapHeight - y2));
	srcRects.push(new haxe_ui_geom_Rectangle(x1,y2,x2 - x1,bitmapHeight - y2));
	srcRects.push(new haxe_ui_geom_Rectangle(x2,y2,bitmapWidth - x2,bitmapHeight - y2));
	return srcRects;
};
haxe_ui_geom_Slice9.buildDstRects = function(w,h,srcRects) {
	var dstRects = [];
	dstRects.push(new haxe_ui_geom_Rectangle(0,0,srcRects[0].width,srcRects[0].height));
	dstRects.push(new haxe_ui_geom_Rectangle(srcRects[0].width,0,w - srcRects[0].width - srcRects[2].width,srcRects[1].height));
	dstRects.push(new haxe_ui_geom_Rectangle(w - srcRects[2].width,0,srcRects[2].width,srcRects[2].height));
	dstRects.push(new haxe_ui_geom_Rectangle(0,srcRects[0].height,srcRects[3].width,h - srcRects[0].height - srcRects[6].height));
	dstRects.push(new haxe_ui_geom_Rectangle(srcRects[3].width,srcRects[0].height,w - srcRects[3].width - srcRects[5].width,h - srcRects[1].height - srcRects[7].height));
	dstRects.push(new haxe_ui_geom_Rectangle(w - srcRects[5].width,srcRects[2].height,srcRects[5].width,h - srcRects[2].height - srcRects[8].height));
	dstRects.push(new haxe_ui_geom_Rectangle(0,h - srcRects[6].height,srcRects[6].width,srcRects[6].height));
	dstRects.push(new haxe_ui_geom_Rectangle(srcRects[6].width,h - srcRects[7].height,w - srcRects[6].width - srcRects[8].width,srcRects[7].height));
	dstRects.push(new haxe_ui_geom_Rectangle(w - srcRects[8].width,h - srcRects[8].height,srcRects[8].width,srcRects[8].height));
	return dstRects;
};
var haxe_ui_graphics_ComponentGraphics = function(component) {
	haxe_ui_backend_ComponentGraphicsImpl.call(this,component);
};
$hxClasses["haxe.ui.graphics.ComponentGraphics"] = haxe_ui_graphics_ComponentGraphics;
haxe_ui_graphics_ComponentGraphics.__name__ = "haxe.ui.graphics.ComponentGraphics";
haxe_ui_graphics_ComponentGraphics.__super__ = haxe_ui_backend_ComponentGraphicsImpl;
haxe_ui_graphics_ComponentGraphics.prototype = $extend(haxe_ui_backend_ComponentGraphicsImpl.prototype,{
	__class__: haxe_ui_graphics_ComponentGraphics
});
var haxe_ui_graphics_DrawCommand = $hxEnums["haxe.ui.graphics.DrawCommand"] = { __ename__:"haxe.ui.graphics.DrawCommand",__constructs__:null
	,Clear: {_hx_name:"Clear",_hx_index:0,__enum__:"haxe.ui.graphics.DrawCommand",toString:$estr}
	,SetPixel: ($_=function(x,y,color) { return {_hx_index:1,x:x,y:y,color:color,__enum__:"haxe.ui.graphics.DrawCommand",toString:$estr}; },$_._hx_name="SetPixel",$_.__params__ = ["x","y","color"],$_)
	,SetPixels: ($_=function(pixels) { return {_hx_index:2,pixels:pixels,__enum__:"haxe.ui.graphics.DrawCommand",toString:$estr}; },$_._hx_name="SetPixels",$_.__params__ = ["pixels"],$_)
	,MoveTo: ($_=function(x,y) { return {_hx_index:3,x:x,y:y,__enum__:"haxe.ui.graphics.DrawCommand",toString:$estr}; },$_._hx_name="MoveTo",$_.__params__ = ["x","y"],$_)
	,LineTo: ($_=function(x,y) { return {_hx_index:4,x:x,y:y,__enum__:"haxe.ui.graphics.DrawCommand",toString:$estr}; },$_._hx_name="LineTo",$_.__params__ = ["x","y"],$_)
	,StrokeStyle: ($_=function(color,thickness,alpha) { return {_hx_index:5,color:color,thickness:thickness,alpha:alpha,__enum__:"haxe.ui.graphics.DrawCommand",toString:$estr}; },$_._hx_name="StrokeStyle",$_.__params__ = ["color","thickness","alpha"],$_)
	,Circle: ($_=function(x,y,radius) { return {_hx_index:6,x:x,y:y,radius:radius,__enum__:"haxe.ui.graphics.DrawCommand",toString:$estr}; },$_._hx_name="Circle",$_.__params__ = ["x","y","radius"],$_)
	,FillStyle: ($_=function(color,alpha) { return {_hx_index:7,color:color,alpha:alpha,__enum__:"haxe.ui.graphics.DrawCommand",toString:$estr}; },$_._hx_name="FillStyle",$_.__params__ = ["color","alpha"],$_)
	,CurveTo: ($_=function(controlX,controlY,anchorX,anchorY) { return {_hx_index:8,controlX:controlX,controlY:controlY,anchorX:anchorX,anchorY:anchorY,__enum__:"haxe.ui.graphics.DrawCommand",toString:$estr}; },$_._hx_name="CurveTo",$_.__params__ = ["controlX","controlY","anchorX","anchorY"],$_)
	,CubicCurveTo: ($_=function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) { return {_hx_index:9,controlX1:controlX1,controlY1:controlY1,controlX2:controlX2,controlY2:controlY2,anchorX:anchorX,anchorY:anchorY,__enum__:"haxe.ui.graphics.DrawCommand",toString:$estr}; },$_._hx_name="CubicCurveTo",$_.__params__ = ["controlX1","controlY1","controlX2","controlY2","anchorX","anchorY"],$_)
	,Rectangle: ($_=function(x,y,width,height) { return {_hx_index:10,x:x,y:y,width:width,height:height,__enum__:"haxe.ui.graphics.DrawCommand",toString:$estr}; },$_._hx_name="Rectangle",$_.__params__ = ["x","y","width","height"],$_)
	,Image: ($_=function(resource,x,y,width,height) { return {_hx_index:11,resource:resource,x:x,y:y,width:width,height:height,__enum__:"haxe.ui.graphics.DrawCommand",toString:$estr}; },$_._hx_name="Image",$_.__params__ = ["resource","x","y","width","height"],$_)
};
haxe_ui_graphics_DrawCommand.__constructs__ = [haxe_ui_graphics_DrawCommand.Clear,haxe_ui_graphics_DrawCommand.SetPixel,haxe_ui_graphics_DrawCommand.SetPixels,haxe_ui_graphics_DrawCommand.MoveTo,haxe_ui_graphics_DrawCommand.LineTo,haxe_ui_graphics_DrawCommand.StrokeStyle,haxe_ui_graphics_DrawCommand.Circle,haxe_ui_graphics_DrawCommand.FillStyle,haxe_ui_graphics_DrawCommand.CurveTo,haxe_ui_graphics_DrawCommand.CubicCurveTo,haxe_ui_graphics_DrawCommand.Rectangle,haxe_ui_graphics_DrawCommand.Image];
haxe_ui_graphics_DrawCommand.__empty_constructs__ = [haxe_ui_graphics_DrawCommand.Clear];
var haxe_ui_layouts_AbsoluteLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.layouts.AbsoluteLayout"] = haxe_ui_layouts_AbsoluteLayout;
haxe_ui_layouts_AbsoluteLayout.__name__ = "haxe.ui.layouts.AbsoluteLayout";
haxe_ui_layouts_AbsoluteLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_layouts_AbsoluteLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	repositionChildren: function() {
	}
	,__class__: haxe_ui_layouts_AbsoluteLayout
});
var haxe_ui_layouts_DelegateLayout = function(size) {
	haxe_ui_layouts_DefaultLayout.call(this);
	this._size = size;
};
$hxClasses["haxe.ui.layouts.DelegateLayout"] = haxe_ui_layouts_DelegateLayout;
haxe_ui_layouts_DelegateLayout.__name__ = "haxe.ui.layouts.DelegateLayout";
haxe_ui_layouts_DelegateLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_layouts_DelegateLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	_size: null
	,calcAutoSize: function(exclusions) {
		this._size.component = this.get_component();
		var cx = this._size.get_width();
		var cy = this._size.get_height();
		if(this._size.getBool("includePadding",false) == true) {
			cx += this.get_paddingLeft() + this.get_paddingRight();
			cy += this.get_paddingTop() + this.get_paddingBottom();
		}
		var size = new haxe_ui_geom_Size(cx,cy);
		return size;
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_DefaultLayout.prototype.get_usableSize.call(this);
		this._size.component = this.get_component();
		size.width -= this._size.get_usableWidthModifier();
		size.height -= this._size.get_usableHeightModifier();
		return size;
	}
	,__class__: haxe_ui_layouts_DelegateLayout
});
var haxe_ui_layouts_DelegateLayoutSize = function() {
};
$hxClasses["haxe.ui.layouts.DelegateLayoutSize"] = haxe_ui_layouts_DelegateLayoutSize;
haxe_ui_layouts_DelegateLayoutSize.__name__ = "haxe.ui.layouts.DelegateLayoutSize";
haxe_ui_layouts_DelegateLayoutSize.prototype = {
	component: null
	,config: null
	,width: null
	,get_width: function() {
		return 0;
	}
	,height: null
	,get_height: function() {
		return 0;
	}
	,usableWidthModifier: null
	,get_usableWidthModifier: function() {
		return 0;
	}
	,usableHeightModifier: null
	,get_usableHeightModifier: function() {
		return 0;
	}
	,getString: function(name,defaultValue) {
		if(this.config == null) {
			return defaultValue;
		}
		if(Object.prototype.hasOwnProperty.call(this.config.h,name) == false) {
			return defaultValue;
		}
		return this.config.h[name];
	}
	,getInt: function(name,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		var v = this.getString(name);
		if(v == null) {
			return defaultValue;
		}
		return Std.parseInt(v);
	}
	,getBool: function(name,defaultValue) {
		if(defaultValue == null) {
			defaultValue = false;
		}
		var v = this.getString(name);
		if(v == null) {
			return defaultValue;
		}
		return v == "true";
	}
	,__class__: haxe_ui_layouts_DelegateLayoutSize
	,__properties__: {get_usableHeightModifier:"get_usableHeightModifier",get_usableWidthModifier:"get_usableWidthModifier",get_height:"get_height",get_width:"get_width"}
};
var haxe_ui_layouts_HorizontalContinuousLayout = function() {
	haxe_ui_layouts_HorizontalLayout.call(this);
};
$hxClasses["haxe.ui.layouts.HorizontalContinuousLayout"] = haxe_ui_layouts_HorizontalContinuousLayout;
haxe_ui_layouts_HorizontalContinuousLayout.__name__ = "haxe.ui.layouts.HorizontalContinuousLayout";
haxe_ui_layouts_HorizontalContinuousLayout.__super__ = haxe_ui_layouts_HorizontalLayout;
haxe_ui_layouts_HorizontalContinuousLayout.prototype = $extend(haxe_ui_layouts_HorizontalLayout.prototype,{
	resizeChildren: function() {
	}
	,repositionChildren: function() {
		if(this.get_component().get_autoWidth() == true) {
			haxe_ui_layouts_HorizontalLayout.prototype.repositionChildren.call(this);
			return;
		}
		var ucx = this.get_usableWidth();
		if(ucx <= 0) {
			return;
		}
		var ucx = this.get_component().get_componentWidth() - (this.get_paddingLeft() + this.get_paddingRight());
		var ucy = this.get_component().get_componentHeight() - (this.get_paddingTop() + this.get_paddingBottom());
		var dimensions = [];
		var heights = [];
		var row = 0;
		var usedCX = 0;
		var xpos = this.get_paddingLeft();
		var ypos = this.get_paddingTop();
		var rowCY = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var rc = new haxe_ui_layouts_ComponentRectangle(child.get_left(),child.get_top(),child.get_componentWidth(),child.get_componentHeight());
			if(child.get_percentWidth() != null) {
				rc.width = ucx * child.get_percentWidth() / 100;
			} else {
				usedCX += this.get_horizontalSpacing();
			}
			if(child.get_percentHeight() != null) {
				rc.height = ucy * child.get_percentHeight() / 100;
			}
			rc.component = child;
			usedCX += rc.width;
			if(usedCX - this.get_horizontalSpacing() > ucx) {
				heights.push(rowCY);
				ypos += rowCY + this.get_verticalSpacing();
				xpos = this.get_paddingLeft();
				usedCX = rc.width + this.get_horizontalSpacing();
				rowCY = 0;
				++row;
			}
			if(dimensions.length <= row) {
				dimensions.push([]);
			}
			if(dimensions[row] == null) {
				ypos -= this.get_verticalSpacing();
				--row;
				dimensions[row].pop();
			}
			rc.left = xpos;
			rc.top = ypos;
			dimensions[row].push(rc);
			xpos += rc.width;
			if(rc.height > rowCY) {
				rowCY = rc.height;
			}
		}
		if(rowCY > 0) {
			heights.push(rowCY);
		}
		var x = 0;
		var _g = 0;
		while(_g < dimensions.length) {
			var r = dimensions[_g];
			++_g;
			var height = heights[x];
			var spaceX = (r.length - 1) / r.length * this.get_horizontalSpacing();
			var n = 0;
			var _g1 = 0;
			while(_g1 < r.length) {
				var c = r[_g1];
				++_g1;
				switch(this.verticalAlign(c.component)) {
				case "bottom":
					c.top += height - c.height;
					break;
				case "center":
					c.top += height / 2 - c.height / 2;
					break;
				default:
				}
				if(c.component.get_percentWidth() != null) {
					c.left += n * (this.get_horizontalSpacing() - spaceX);
					c.width -= spaceX;
				} else {
					c.left += n * this.get_horizontalSpacing();
				}
				c.apply();
				++n;
			}
			++x;
		}
	}
	,get_usableSize: function() {
		if(this.get_component().get_autoWidth() == true) {
			return haxe_ui_layouts_HorizontalLayout.prototype.get_usableSize.call(this);
		}
		var ucx = 0;
		if(this._component.get_componentWidth() != null) {
			ucx = this._component.get_componentWidth();
			ucx -= this.get_paddingLeft() + this.get_paddingRight();
		}
		var ucy = 0;
		if(this._component.get_componentHeight() != null) {
			ucy = this._component.get_componentHeight();
			ucy -= this.get_paddingTop() + this.get_paddingBottom();
		}
		return new haxe_ui_geom_Size(ucx,ucy);
	}
	,__class__: haxe_ui_layouts_HorizontalContinuousLayout
});
var haxe_ui_layouts_ComponentRectangle = function(left,top,width,height) {
	haxe_ui_geom_Rectangle.call(this,left,top,width,height);
};
$hxClasses["haxe.ui.layouts.ComponentRectangle"] = haxe_ui_layouts_ComponentRectangle;
haxe_ui_layouts_ComponentRectangle.__name__ = "haxe.ui.layouts.ComponentRectangle";
haxe_ui_layouts_ComponentRectangle.__super__ = haxe_ui_geom_Rectangle;
haxe_ui_layouts_ComponentRectangle.prototype = $extend(haxe_ui_geom_Rectangle.prototype,{
	component: null
	,apply: function() {
		this.component.moveComponent(this.left,this.top);
		this.component.resizeComponent(this.width,this.height);
	}
	,__class__: haxe_ui_layouts_ComponentRectangle
});
var haxe_ui_layouts_HorizontalGridLayout = function() {
	this._rows = 1;
	haxe_ui_layouts_Layout.call(this);
};
$hxClasses["haxe.ui.layouts.HorizontalGridLayout"] = haxe_ui_layouts_HorizontalGridLayout;
haxe_ui_layouts_HorizontalGridLayout.__name__ = "haxe.ui.layouts.HorizontalGridLayout";
haxe_ui_layouts_HorizontalGridLayout.__super__ = haxe_ui_layouts_Layout;
haxe_ui_layouts_HorizontalGridLayout.prototype = $extend(haxe_ui_layouts_Layout.prototype,{
	_rows: null
	,get_rows: function() {
		return this._rows;
	}
	,set_rows: function(value) {
		if(this._rows == value) {
			return value;
		}
		this._rows = value;
		if(this._component != null) {
			var _this = this._component;
			if(!(_this._layout == null || _this._layoutLocked == true)) {
				_this.invalidateComponent("layout",false);
			}
		}
		return value;
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_Layout.prototype.get_usableSize.call(this);
		var columnWidths = this.calcColumnWidths(size,false);
		var rowHeights = this.calcRowHeights(size,false);
		var _g = 0;
		while(_g < columnWidths.length) {
			var columnWidth = columnWidths[_g];
			++_g;
			size.width -= columnWidth;
		}
		var _g = 0;
		while(_g < rowHeights.length) {
			var rowHeight = rowHeights[_g];
			++_g;
			size.height -= rowHeight;
		}
		var _this = this.get_component();
		if((_this._children == null ? [] : _this._children).length > 1) {
			var _this = this.get_component();
			var columns = Math.ceil((_this._children == null ? [] : _this._children).length / this._rows);
			size.width -= this.get_horizontalSpacing() * (columns - 1);
			size.height -= this.get_verticalSpacing() * (this.get_rows() - 1);
		}
		if(size.width < 0) {
			size.width = 0;
		}
		if(size.height < 0) {
			size.height = 0;
		}
		return size;
	}
	,resizeChildren: function() {
		var size = this.get_usableSize();
		var columnWidths = this.calcColumnWidths(size,true);
		var rowHeights = this.calcRowHeights(size,true);
		var explicitWidths = this.calcExplicitWidths();
		var explicitHeights = this.calcExplicitHeights();
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var cx = null;
			var cy = null;
			if(child.get_percentWidth() != null) {
				var ucx = columnWidths[columnIndex];
				if(explicitWidths[columnIndex] == false) {
					cx = ucx;
				} else {
					cx = ucx * child.get_percentWidth() / 100;
				}
			}
			if(child.get_percentHeight() != null) {
				var ucy = rowHeights[rowIndex];
				if(explicitHeights[rowIndex] == false) {
					cy = ucy;
				} else {
					cy = ucy * child.get_percentHeight() / 100;
				}
			}
			child.resizeComponent(cx,cy);
			++rowIndex;
			if(rowIndex >= this._rows) {
				rowIndex = 0;
				++columnIndex;
			}
		}
	}
	,repositionChildren: function() {
		var size = this.get_usableSize();
		var columnWidths = this.calcColumnWidths(size,true);
		var rowHeights = this.calcRowHeights(size,true);
		var rowIndex = 0;
		var columnIndex = 0;
		var xpos = this.get_paddingLeft();
		var ypos = this.get_paddingTop();
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var halign = this.horizontalAlign(child);
			var valign = this.verticalAlign(child);
			var xposChild = 0;
			var yposChild = 0;
			switch(halign) {
			case "center":
				xposChild = xpos + (columnWidths[columnIndex] - child.get_componentWidth()) * 0.5 + this.marginLeft(child) - this.marginRight(child);
				break;
			case "right":
				xposChild = xpos + (columnWidths[columnIndex] - child.get_componentWidth()) + this.marginLeft(child) - this.marginRight(child);
				break;
			default:
				xposChild = xpos + this.marginLeft(child) - this.marginRight(child);
			}
			switch(valign) {
			case "bottom":
				yposChild = ypos + (rowHeights[rowIndex] - child.get_componentHeight()) + this.marginTop(child) - this.marginBottom(child);
				break;
			case "center":
				yposChild = ypos + (rowHeights[rowIndex] - child.get_componentHeight()) * 0.5 + this.marginTop(child) - this.marginBottom(child);
				break;
			default:
				yposChild = ypos + this.marginTop(child) - this.marginBottom(child);
			}
			child.moveComponent(xposChild,yposChild);
			ypos += rowHeights[rowIndex] + this.get_verticalSpacing();
			++rowIndex;
			if(rowIndex >= this._rows) {
				ypos = this.get_paddingTop();
				xpos += columnWidths[columnIndex] + this.get_horizontalSpacing();
				rowIndex = 0;
				++columnIndex;
			}
		}
	}
	,calcColumnWidths: function(usableSize,includePercentage) {
		var _this = this.get_component();
		var visibleChildren = (_this._children == null ? [] : _this._children).length;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				--visibleChildren;
			}
		}
		var columnCount = visibleChildren / this._rows | 0;
		if(visibleChildren % this._rows != 0) {
			++columnCount;
		}
		var columnWidths = [];
		var _g = 0;
		var _g1 = columnCount;
		while(_g < _g1) {
			var _ = _g++;
			columnWidths.push(0);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentWidth() == null) {
				if(child.get_componentWidth() > columnWidths[columnIndex]) {
					columnWidths[columnIndex] = child.get_componentWidth();
				}
			}
			++rowIndex;
			if(rowIndex >= this._rows) {
				rowIndex = 0;
				++columnIndex;
			}
		}
		if(includePercentage) {
			rowIndex = 0;
			columnIndex = 0;
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.get_includeInLayout() == false) {
					continue;
				}
				if(child.get_percentWidth() != null) {
					var cx = usableSize.width * child.get_percentWidth() / 100;
					if(cx > columnWidths[rowIndex] && this._rows == 1) {
						columnWidths[columnIndex] = cx;
					} else if(usableSize.width > columnWidths[columnIndex]) {
						columnWidths[columnIndex] = usableSize.width;
					}
				}
				++rowIndex;
				if(rowIndex >= this._rows) {
					rowIndex = 0;
					++columnIndex;
				}
			}
		}
		return columnWidths;
	}
	,calcRowHeights: function(usableSize,includePercentage) {
		var rowHeights = [];
		var _g = 0;
		var _g1 = this._rows;
		while(_g < _g1) {
			var _ = _g++;
			rowHeights.push(0);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentHeight() == null) {
				if(child.get_componentHeight() > rowHeights[rowIndex]) {
					rowHeights[rowIndex] = child.get_componentHeight();
				}
			}
			++rowIndex;
			if(rowIndex >= this._rows) {
				rowIndex = 0;
				++columnIndex;
			}
		}
		if(includePercentage) {
			rowIndex = 0;
			columnIndex = 0;
			var _g = 0;
			var _this = this.get_component();
			var _g1 = _this._children == null ? [] : _this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.get_includeInLayout() == false) {
					continue;
				}
				if(child.get_percentHeight() != null) {
					var cy = usableSize.height * child.get_percentHeight() / 100;
					if(cy > rowHeights[rowIndex]) {
						rowHeights[rowIndex] = cy;
					}
				}
				++rowIndex;
				if(rowIndex >= this._rows) {
					rowIndex = 0;
					++columnIndex;
				}
			}
		}
		return rowHeights;
	}
	,calcExplicitWidths: function() {
		var _this = this.get_component();
		var visibleChildren = (_this._children == null ? [] : _this._children).length;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				--visibleChildren;
			}
		}
		var columnCount = visibleChildren / this._rows | 0;
		if(visibleChildren % this._rows != 0) {
			++columnCount;
		}
		var explicitWidths = [];
		var _g = 0;
		var _g1 = columnCount;
		while(_g < _g1) {
			var _ = _g++;
			explicitWidths.push(false);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentWidth() == null && child.get_componentWidth() > 0) {
				explicitWidths[rowIndex % this._rows] = true;
			}
			++rowIndex;
			if(rowIndex >= this._rows) {
				rowIndex = 0;
				++columnIndex;
			}
		}
		return explicitWidths;
	}
	,calcExplicitHeights: function() {
		var explicitHeights = [];
		var _g = 0;
		var _g1 = this._rows;
		while(_g < _g1) {
			var _ = _g++;
			explicitHeights.push(false);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			if(child.get_percentHeight() == null && child.get_componentHeight() > 0) {
				explicitHeights[rowIndex] = true;
			}
			++rowIndex;
			if(rowIndex >= this._rows) {
				rowIndex = 0;
				++columnIndex;
			}
		}
		return explicitHeights;
	}
	,__class__: haxe_ui_layouts_HorizontalGridLayout
	,__properties__: $extend(haxe_ui_layouts_Layout.prototype.__properties__,{set_rows:"set_rows",get_rows:"get_rows"})
});
var haxe_ui_layouts_LayoutFactory = function() { };
$hxClasses["haxe.ui.layouts.LayoutFactory"] = haxe_ui_layouts_LayoutFactory;
haxe_ui_layouts_LayoutFactory.__name__ = "haxe.ui.layouts.LayoutFactory";
haxe_ui_layouts_LayoutFactory.createFromName = function(name) {
	switch(name) {
	case "absolute":
		return new haxe_ui_layouts_AbsoluteLayout();
	case "continuous horizontal":case "continuousHorizontal":
		return new haxe_ui_layouts_HorizontalContinuousLayout();
	case "horizontal":
		return new haxe_ui_layouts_HorizontalLayout();
	case "horizontal grid":case "horizontalgrid":
		return new haxe_ui_layouts_HorizontalGridLayout();
	case "vertical":
		return new haxe_ui_layouts_VerticalLayout();
	case "vertical grid":case "verticalgrid":
		return new haxe_ui_layouts_VerticalGridLayout();
	}
	return new haxe_ui_layouts_DefaultLayout();
};
var haxe_ui_layouts_ScrollViewLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
};
$hxClasses["haxe.ui.layouts.ScrollViewLayout"] = haxe_ui_layouts_ScrollViewLayout;
haxe_ui_layouts_ScrollViewLayout.__name__ = "haxe.ui.layouts.ScrollViewLayout";
haxe_ui_layouts_ScrollViewLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_layouts_ScrollViewLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	repositionChildren: function() {
		var contents = this.get_component().findComponent("scrollview-contents",null,false,"css");
		if(contents == null) {
			return;
		}
		var hscroll = this.get_component().findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vscroll = this.get_component().findComponent(null,haxe_ui_components_VerticalScroll,false);
		var borderSize = this.get_borderSize();
		if(hscroll != null && this.hidden(hscroll) == false) {
			hscroll.moveComponent(this.get_paddingLeft() + borderSize,this.get_component().get_componentHeight() - hscroll.get_componentHeight() - this.get_paddingBottom() + this.marginTop(hscroll) - borderSize);
		}
		if(vscroll != null && this.hidden(vscroll) == false) {
			vscroll.moveComponent(this.get_component().get_componentWidth() - vscroll.get_componentWidth() - this.get_paddingRight() + this.marginLeft(vscroll) - borderSize,this.get_paddingTop() + borderSize);
		}
		var contents = this.get_component().findComponent("scrollview-contents",null,false,"css");
		if(contents != null) {
			contents.moveComponent(this.get_paddingLeft() + borderSize,this.get_paddingTop() + borderSize);
		}
	}
	,resizeChildren: function() {
		haxe_ui_layouts_DefaultLayout.prototype.resizeChildren.call(this);
		var scrollview = js_Boot.__cast(this._component , haxe_ui_containers_ScrollView);
		var hscroll = this.get_component().findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vscroll = this.get_component().findComponent(null,haxe_ui_components_VerticalScroll,false);
		var usableSize = this.get_usableSize();
		var percentWidth = 100;
		var percentHeight = 100;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child != hscroll && child != vscroll) {
				continue;
			}
			var cx = null;
			var cy = null;
			if(child.get_percentWidth() != null) {
				cx = usableSize.width * child.get_percentWidth() / percentWidth - this.marginLeft(child) - this.marginRight(child);
			}
			if(child.get_percentHeight() != null) {
				cy = usableSize.height * child.get_percentHeight() / percentHeight - this.marginTop(child) - this.marginBottom(child);
			}
			if(this.fixedMinWidth(child) && child.get_percentWidth() != null) {
				percentWidth -= child.get_percentWidth();
			}
			if(this.fixedMinHeight(child) && child.get_percentHeight() != null) {
				percentHeight -= child.get_percentHeight();
			}
			if(scrollview.get_autoHideScrolls() == true) {
				if(child == hscroll && vscroll != null && vscroll.get_hidden() == false) {
					cx -= vscroll.get_width();
				} else if(child == vscroll && hscroll != null && hscroll.get_hidden() == false) {
					cy -= hscroll.get_height();
				}
			}
			child.resizeComponent(cx,cy);
		}
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_DefaultLayout.prototype.get_usableSize.call(this);
		var hscroll = this.get_component().findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vscroll = this.get_component().findComponent(null,haxe_ui_components_VerticalScroll,false);
		if(hscroll != null && hscroll.get_includeInLayout() == true && this.hidden(hscroll) == false) {
			size.height -= hscroll.get_componentHeight() - this.marginTop(hscroll);
		}
		if(vscroll != null && vscroll.get_includeInLayout() == true && this.hidden(vscroll) == false) {
			size.width -= vscroll.get_componentWidth() - this.marginLeft(vscroll);
		}
		if((js_Boot.__cast(this.get_component() , haxe_ui_containers_ScrollView)).get_native() == true || this._component.get_isNativeScroller() == true) {
			var contents = this.get_component().findComponent("scrollview-contents",null,false,"css");
			if(contents != null) {
				if(contents.get_componentWidth() > size.width) {
					size.height -= haxe_ui_core_Platform.get_hscrollHeight();
				}
				if(contents.get_componentHeight() > size.height) {
					size.width -= haxe_ui_core_Platform.get_vscrollWidth();
				}
			}
		}
		var borderSize = this.get_borderSize();
		size.width -= borderSize * 2;
		size.height -= borderSize * 2;
		return size;
	}
	,calcAutoSize: function(exclusions) {
		var hscroll = this.get_component().findComponent(null,haxe_ui_components_HorizontalScroll,false);
		var vscroll = this.get_component().findComponent(null,haxe_ui_components_VerticalScroll,false);
		var size = haxe_ui_layouts_DefaultLayout.prototype.calcAutoSize.call(this,[hscroll,vscroll]);
		if(hscroll != null && hscroll.get_hidden() == false) {
			size.height += hscroll.get_componentHeight();
		}
		if(vscroll != null && vscroll.get_hidden() == false) {
			size.width += vscroll.get_componentWidth();
		}
		if((js_Boot.__cast(this.get_component() , haxe_ui_containers_ScrollView)).get_native() == true || this._component.get_isNativeScroller() == true) {
			var contents = this.get_component().findComponent("scrollview-contents",null,false,"css");
			if(contents != null) {
				if(contents.get_width() > this.get_component().get_width()) {
					size.height += haxe_ui_core_Platform.get_hscrollHeight();
				}
				if(contents.get_height() > this.get_component().get_height()) {
					size.width += haxe_ui_core_Platform.get_vscrollWidth();
				}
			}
		}
		size.width += this.get_borderSize() * 2;
		size.height += this.get_borderSize() * 2;
		return size;
	}
	,__class__: haxe_ui_layouts_ScrollViewLayout
});
var haxe_ui_layouts_VerticalLayout = function() {
	haxe_ui_layouts_DefaultLayout.call(this);
	this._calcFullHeights = true;
};
$hxClasses["haxe.ui.layouts.VerticalLayout"] = haxe_ui_layouts_VerticalLayout;
haxe_ui_layouts_VerticalLayout.__name__ = "haxe.ui.layouts.VerticalLayout";
haxe_ui_layouts_VerticalLayout.__super__ = haxe_ui_layouts_DefaultLayout;
haxe_ui_layouts_VerticalLayout.prototype = $extend(haxe_ui_layouts_DefaultLayout.prototype,{
	repositionChildren: function() {
		var ypos = this.get_paddingTop();
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				continue;
			}
			var xpos = 0;
			switch(this.horizontalAlign(child)) {
			case "center":
				xpos = (this.get_component().get_componentWidth() - child.get_componentWidth()) / 2 + this.marginLeft(child) - this.marginRight(child);
				break;
			case "right":
				if(child.get_componentWidth() < this.get_component().get_componentWidth()) {
					xpos = this.get_component().get_componentWidth() - (child.get_componentWidth() + this.get_paddingRight() + this.marginLeft(child));
				}
				break;
			default:
				xpos = this.get_paddingLeft() + this.marginLeft(child);
			}
			child.moveComponent(xpos,ypos + this.marginTop(child));
			ypos += child.get_componentHeight() + this.get_verticalSpacing();
		}
	}
	,get_usableSize: function() {
		var size = haxe_ui_layouts_DefaultLayout.prototype.get_usableSize.call(this);
		var _this = this.get_component();
		var visibleChildren = (_this._children == null ? [] : _this._children).length;
		var _g = 0;
		var _this = this.get_component();
		var _g1 = _this._children == null ? [] : _this._children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_includeInLayout() == false) {
				--visibleChildren;
				continue;
			}
			if(child.get_componentHeight() > 0 && (child.get_percentHeight() == null || this.fixedMinHeight(child) == true)) {
				size.height -= child.get_componentHeight() + this.marginTop(child) + this.marginBottom(child);
			}
		}
		if(visibleChildren > 1) {
			size.height -= this.get_verticalSpacing() * (visibleChildren - 1);
		}
		if(size.height < 0) {
			size.height = 0;
		}
		return size;
	}
	,__class__: haxe_ui_layouts_VerticalLayout
});
var haxe_ui_layouts_VirtualLayout = function() {
	this._lastItemRenderer = null;
	this._firstPass = true;
	this._sizeCache = [];
	this._rendererPool = [];
	this._lastIndex = -1;
	this._firstIndex = -1;
	haxe_ui_layouts_ScrollViewLayout.call(this);
};
$hxClasses["haxe.ui.layouts.VirtualLayout"] = haxe_ui_layouts_VirtualLayout;
haxe_ui_layouts_VirtualLayout.__name__ = "haxe.ui.layouts.VirtualLayout";
haxe_ui_layouts_VirtualLayout.__super__ = haxe_ui_layouts_ScrollViewLayout;
haxe_ui_layouts_VirtualLayout.prototype = $extend(haxe_ui_layouts_ScrollViewLayout.prototype,{
	_firstIndex: null
	,_lastIndex: null
	,_rendererPool: null
	,_sizeCache: null
	,contents: null
	,get_contents: function() {
		if(this.contents == null) {
			this.contents = this.findComponent("scrollview-contents",null,false,"css");
		}
		return this.contents;
	}
	,get_dataSource: function() {
		return (js_Boot.__cast(this._component , haxe_ui_core_IDataComponent)).get_dataSource();
	}
	,itemWidth: null
	,get_itemWidth: function() {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_itemWidth() > 0) {
			return comp.get_itemWidth();
		}
		var _this = this.get_contents();
		var childComponents = _this._children == null ? [] : _this._children;
		var result = 0;
		if(childComponents.length > 0) {
			result = childComponents[0].get_width();
			if(result <= 0) {
				childComponents[0].syncComponentValidation();
				result = childComponents[0].get_width();
			}
		}
		if(result > 0) {
			comp.set_itemWidth(result);
		} else {
			result = 1;
		}
		return result;
	}
	,_firstPass: null
	,itemHeight: null
	,get_itemHeight: function() {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_itemHeight() > 0) {
			return comp.get_itemHeight();
		}
		var _this = this.get_contents();
		var childComponents = _this._children == null ? [] : _this._children;
		var result = 0;
		if(childComponents.length > 0) {
			result = childComponents[0].get_height();
			if(result <= 0) {
				childComponents[0].syncComponentValidation();
				result = childComponents[0].get_height();
			}
		}
		if(result <= 0) {
			result = 25;
		} else if(comp.get_virtual() == true) {
			if(this._firstPass == false) {
				comp.set_itemHeight(result);
				haxe_Log.trace("NOTE: since no itemHeight was not specified it was guessed as " + result + "px",{ fileName : "haxe/ui/layouts/VirtualLayout.hx", lineNumber : 87, className : "haxe.ui.layouts.VirtualLayout", methodName : "get_itemHeight"});
			}
			if(this._firstPass == true) {
				this._firstPass = false;
			}
		}
		return result;
	}
	,itemCount: null
	,get_itemCount: function() {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_itemCount() >= 0) {
			return comp.get_itemCount();
		} else {
			return 0;
		}
	}
	,refresh: function() {
		this.refreshData();
		haxe_ui_layouts_ScrollViewLayout.prototype.refresh.call(this);
	}
	,refreshData: function() {
		if(this.get_dataSource() == null) {
			return;
		}
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_virtual() == false) {
			this.refreshNonVirtualData();
		} else {
			this.refreshVirtualData();
		}
	}
	,_lastItemRenderer: null
	,refreshNonVirtualData: function() {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_itemRenderer() != this._lastItemRenderer) {
			this._lastItemRenderer = comp.get_itemRenderer();
			this.get_contents().removeAllComponents();
		}
		var dataSource = this.get_dataSource();
		var contents = this.get_contents();
		var _g = 0;
		var _g1 = dataSource.get_size();
		while(_g < _g1) {
			var n = _g++;
			var data = dataSource.get(n);
			var item = null;
			if(n < (contents._children == null ? [] : contents._children).length) {
				item = js_Boot.__cast((contents._children == null ? [] : contents._children)[n] , haxe_ui_core_ItemRenderer);
				if(item.get_data() == data) {
					item.invalidateComponent("data",false);
					continue;
				}
				var cls = this.itemClass(n,data);
				if(!js_Boot.__instanceof(item,cls)) {
					this.removeRenderer(item);
					item = this.getRenderer(cls,n);
					contents.addComponentAt(item,n);
				}
			} else {
				var cls1 = this.itemClass(n,data);
				item = this.getRenderer(cls1,n);
				contents.addComponent(item);
			}
			var className = n % 2 == 0 ? "even" : "odd";
			if(item.classes.indexOf(className) == -1) {
				var inverseClassName = n % 2 == 0 ? "odd" : "even";
				item.removeClass(inverseClassName);
				item.addClass(className);
			}
			item.itemIndex = n;
			item.set_data(data);
		}
		while(dataSource.get_size() < (contents._children == null ? [] : contents._children).length) {
			var item = js_Boot.__cast((contents._children == null ? [] : contents._children)[(contents._children == null ? [] : contents._children).length - 1] , haxe_ui_core_ItemRenderer);
			this.removeRenderer(item);
		}
	}
	,refreshVirtualData: function() {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_itemRenderer() != this._lastItemRenderer) {
			this._lastItemRenderer = comp.get_itemRenderer();
			this.get_contents().removeAllComponents();
			this._rendererPool = [];
		}
		this.removeInvisibleRenderers();
		this.calculateRangeVisible();
		this.updateScroll();
		var dataSource = this.get_dataSource();
		var i = 0;
		var _g = this._firstIndex;
		var _g1 = this._lastIndex;
		while(_g < _g1) {
			var n = _g++;
			var data = dataSource.get(n);
			var item = null;
			var cls = this.itemClass(n,data);
			var _this = this.get_contents();
			if((_this._children == null ? [] : _this._children).length <= i) {
				item = this.getRenderer(cls,n);
				this.get_contents().addComponent(item);
			} else {
				var _this1 = this.get_contents();
				item = js_Boot.__cast((_this1._children == null ? [] : _this1._children)[i] , haxe_ui_core_ItemRenderer);
				if(!js_Boot.__instanceof(item,cls)) {
					item = this.getRenderer(cls,n);
					this.get_contents().addComponentAt(item,i);
				} else if(item.itemIndex != n) {
					if(this._component.hasEvent("rendererdestroyed")) {
						this._component.dispatch(new haxe_ui_events_UIEvent("rendererdestroyed",null,item));
					}
					this._component.setComponentIndex(item,i);
					item.itemIndex = n;
					if(this._component.hasEvent("renderercreated")) {
						this._component.dispatch(new haxe_ui_events_UIEvent("renderercreated",null,item));
					}
				}
			}
			var className = n % 2 == 0 ? "even" : "odd";
			if(item.classes.indexOf(className) == -1) {
				var inverseClassName = n % 2 == 0 ? "odd" : "even";
				item.removeClass(inverseClassName);
				item.addClass(className);
			}
			item.set_data(data);
			++i;
		}
		while(true) {
			var _this = this.get_contents();
			if(!((_this._children == null ? [] : _this._children).length > i)) {
				break;
			}
			var _this1 = this.get_contents();
			var tmp = _this1._children == null ? [] : _this1._children;
			var _this2 = this.get_contents();
			this.removeRenderer(js_Boot.__cast(tmp[(_this2._children == null ? [] : _this2._children).length - 1] , haxe_ui_core_ItemRenderer),false);
		}
	}
	,calculateRangeVisible: function() {
	}
	,updateScroll: function() {
	}
	,itemClass: function(index,data) {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_itemRendererClass() != null) {
			return comp.get_itemRendererClass();
		} else if(comp.get_itemRenderer() != null) {
			return js_Boot.getClass(comp.get_itemRenderer());
		} else {
			return haxe_ui_core_BasicItemRenderer;
		}
	}
	,getRenderer: function(cls,index) {
		var instance = null;
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_virtual() == true) {
			var _g = 0;
			var _g1 = this._rendererPool.length;
			while(_g < _g1) {
				var i = _g++;
				var renderer = this._rendererPool[i];
				if(js_Boot.__instanceof(renderer,cls)) {
					this._rendererPool.splice(i,1);
					instance = renderer;
					break;
				}
			}
		}
		if(instance == null) {
			if(comp.get_itemRenderer() != null && js_Boot.getClass(comp.get_itemRenderer()) == cls) {
				instance = comp.get_itemRenderer().cloneComponent();
				instance.handleVisibility(true);
			} else {
				instance = Type.createInstance(cls,[]);
			}
		}
		instance.itemIndex = index;
		if(this._component.hasEvent("renderercreated")) {
			this._component.dispatch(new haxe_ui_events_UIEvent("renderercreated",null,instance));
		}
		if(this._component.get_hidden() == false) {
			instance.handleVisibility(true);
		}
		return js_Boot.__cast(instance , haxe_ui_core_ItemRenderer);
	}
	,removeRenderer: function(renderer,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		this._component.removeComponent(renderer,dispose);
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_virtual() == true) {
			this._rendererPool.push(js_Boot.__cast(renderer , haxe_ui_core_ItemRenderer));
		}
		if(this._component.hasEvent("rendererdestroyed")) {
			this._component.dispatch(new haxe_ui_events_UIEvent("rendererdestroyed",null,renderer));
		}
		renderer.itemIndex = -1;
	}
	,removeInvisibleRenderers: function() {
		var contents = this.get_contents();
		if(this._firstIndex >= 0) {
			while((contents._children == null ? [] : contents._children).length > 0 && !this.isRendererVisible((contents._children == null ? [] : contents._children)[0])) {
				this.removeRenderer(js_Boot.__cast((contents._children == null ? [] : contents._children)[0] , haxe_ui_core_ItemRenderer),false);
				++this._firstIndex;
			}
		}
		if(this._lastIndex >= 0) {
			while((contents._children == null ? [] : contents._children).length > 0 && !this.isRendererVisible((contents._children == null ? [] : contents._children)[(contents._children == null ? [] : contents._children).length - 1])) {
				this.removeRenderer(js_Boot.__cast((contents._children == null ? [] : contents._children)[(contents._children == null ? [] : contents._children).length - 1] , haxe_ui_core_ItemRenderer),false);
				--this._lastIndex;
			}
		}
	}
	,isRendererVisible: function(renderer) {
		if(renderer == null) {
			return false;
		}
		if(renderer.get_top() < this._component.get_componentHeight() && renderer.get_top() + renderer.get_componentHeight() >= 0 && renderer.get_left() < this._component.get_componentWidth()) {
			return renderer.get_left() + renderer.get_componentWidth() >= 0;
		} else {
			return false;
		}
	}
	,isIndexVisible: function(index) {
		if(index >= this._firstIndex) {
			return index <= this._lastIndex;
		} else {
			return false;
		}
	}
	,__class__: haxe_ui_layouts_VirtualLayout
	,__properties__: $extend(haxe_ui_layouts_ScrollViewLayout.prototype.__properties__,{get_itemCount:"get_itemCount",get_itemHeight:"get_itemHeight",get_itemWidth:"get_itemWidth",get_dataSource:"get_dataSource",get_contents:"get_contents"})
});
var haxe_ui_layouts_VerticalVirtualLayout = function() {
	haxe_ui_layouts_VirtualLayout.call(this);
};
$hxClasses["haxe.ui.layouts.VerticalVirtualLayout"] = haxe_ui_layouts_VerticalVirtualLayout;
haxe_ui_layouts_VerticalVirtualLayout.__name__ = "haxe.ui.layouts.VerticalVirtualLayout";
haxe_ui_layouts_VerticalVirtualLayout.__super__ = haxe_ui_layouts_VirtualLayout;
haxe_ui_layouts_VerticalVirtualLayout.prototype = $extend(haxe_ui_layouts_VirtualLayout.prototype,{
	repositionChildren: function() {
		haxe_ui_layouts_VirtualLayout.prototype.repositionChildren.call(this);
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		var itemHeight = this.get_itemHeight();
		var contents = this.get_contents();
		var verticalSpacing = contents.get_layout().get_verticalSpacing();
		if(comp.get_virtual() == true) {
			var n = this._firstIndex;
			if(comp.get_variableItemSize() == true) {
				var pos = -comp.get_vscrollPos();
				var _g = 0;
				var _g1 = this._lastIndex;
				while(_g < _g1) {
					var i = _g++;
					if(i >= this._firstIndex) {
						var c = contents.getComponentAt(i - this._firstIndex);
						c.set_top(pos);
					}
					var size = this._sizeCache[i];
					pos += (size != null && size != 0 ? size : itemHeight) + verticalSpacing;
				}
			} else {
				var _g = 0;
				var _g1 = contents._children == null ? [] : contents._children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.set_top(n * (itemHeight + verticalSpacing) - comp.get_vscrollPos());
					++n;
				}
			}
		}
	}
	,verticalConstraintModifier: function() {
		return 0;
	}
	,calculateRangeVisible: function() {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		var verticalSpacing = this.get_contents().get_layout().get_verticalSpacing();
		var itemHeight = this.get_itemHeight();
		var visibleItemsCount = 0;
		var contentsHeight = 0;
		if(this.get_contents().get_autoHeight() == true) {
			var itemCount = this.get_itemCount();
			if(itemCount > 0 || this._component.get_autoHeight() == true) {
				contentsHeight = itemCount * itemHeight - this.verticalConstraintModifier();
			} else {
				contentsHeight = this._component.get_height() - this.verticalConstraintModifier();
			}
		} else {
			contentsHeight = this.get_contents().get_height() - this.verticalConstraintModifier();
		}
		if(contentsHeight > this._component.get_height() - this.verticalConstraintModifier()) {
			contentsHeight = this._component.get_height() - this.verticalConstraintModifier();
		}
		if(comp.get_variableItemSize() == true) {
			var totalSize = 0;
			var requireInvalidation = false;
			var newFirstIndex = -1;
			var _g = 0;
			var _g1 = this.get_dataSource().get_size();
			while(_g < _g1) {
				var i = _g++;
				var size = this._sizeCache[i];
				if(size == null || size == 0) {
					if(i >= this._firstIndex && i <= this._lastIndex) {
						var c = this.get_contents().getComponentAt(i - this._firstIndex);
						if(c != null && c.get_componentHeight() > 0) {
							this._sizeCache[i] = c.get_componentHeight();
							size = c.get_componentHeight();
						} else {
							requireInvalidation = true;
							size = itemHeight;
						}
					} else {
						requireInvalidation = true;
						size = itemHeight;
					}
				}
				size += verticalSpacing;
				if(newFirstIndex == -1) {
					if(totalSize + size > comp.get_vscrollPos()) {
						newFirstIndex = i;
						totalSize += size - comp.get_vscrollPos();
						++visibleItemsCount;
					} else {
						totalSize += size;
					}
				} else if(totalSize + size > contentsHeight) {
					break;
				} else {
					++visibleItemsCount;
					totalSize += size;
				}
			}
			if(requireInvalidation == true) {
				var _this = this._component;
				if(!(_this._layout == null || _this._layoutLocked == true)) {
					_this.invalidateComponent("layout",false);
				}
			}
			this._firstIndex = newFirstIndex;
		} else {
			visibleItemsCount = Math.ceil(contentsHeight / (itemHeight + verticalSpacing));
			this._firstIndex = comp.get_vscrollPos() / (itemHeight + verticalSpacing) | 0;
		}
		if(this._firstIndex < 0) {
			this._firstIndex = 0;
		}
		var rc = new haxe_ui_geom_Rectangle(0,0,this.get_contents().get_width(),contentsHeight - (this.get_paddingTop() + this.get_paddingBottom()) - this.get_borderSize() * 2);
		this.get_contents().set_componentClipRect(rc);
		this._lastIndex = this._firstIndex + visibleItemsCount + 1;
		if(this._lastIndex > this.get_dataSource().get_size()) {
			this._lastIndex = this.get_dataSource().get_size();
		}
	}
	,updateScroll: function() {
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		var usableSize = this.get_usableSize();
		var dataSize = this.get_dataSource().get_size();
		var verticalSpacing = this.get_contents().get_layout().get_verticalSpacing();
		var scrollMax = 0;
		var itemHeight = this.get_itemHeight();
		if(comp.get_variableItemSize() == true) {
			scrollMax = -usableSize.height;
			var _g = 0;
			var _g1 = this.get_dataSource().get_size();
			while(_g < _g1) {
				var i = _g++;
				var size = this._sizeCache[i];
				if(size == null || size == 0) {
					size = itemHeight;
				}
				scrollMax += size + verticalSpacing + this.verticalConstraintModifier();
			}
		} else {
			scrollMax = dataSize * itemHeight + (dataSize - 1) * verticalSpacing - usableSize.height + this.verticalConstraintModifier();
		}
		if(scrollMax < 0) {
			scrollMax = 0;
		}
		comp.set_vscrollMax(scrollMax);
		comp.set_vscrollPageSize(usableSize.height / (scrollMax + usableSize.height) * scrollMax);
	}
	,calcAutoSize: function(exclusions) {
		var size = haxe_ui_layouts_VirtualLayout.prototype.calcAutoSize.call(this,exclusions);
		var comp = js_Boot.__cast(this._component , haxe_ui_containers_IVirtualContainer);
		if(comp.get_itemCount() > 0 && this._component.get_autoHeight() == true) {
			var contents = this._component.findComponent("scrollview-contents",null,false);
			var contentsPadding = 0;
			if(contents != null) {
				var layout = contents.get_layout();
				if(layout != null) {
					contentsPadding = layout.get_paddingTop() + layout.get_paddingBottom();
				}
			}
			size.height = this.get_itemHeight() * comp.get_itemCount() + this.get_paddingTop() + this.get_paddingBottom() + contentsPadding + this.get_borderSize() * 2;
		}
		return size;
	}
	,__class__: haxe_ui_layouts_VerticalVirtualLayout
});
var haxe_ui_locale_Formats = function() { };
$hxClasses["haxe.ui.locale.Formats"] = haxe_ui_locale_Formats;
haxe_ui_locale_Formats.__name__ = "haxe.ui.locale.Formats";
haxe_ui_locale_Formats.__properties__ = {set_decimalSeperator:"set_decimalSeperator",get_decimalSeperator:"get_decimalSeperator",set_dateFormatShort:"set_dateFormatShort",get_dateFormatShort:"get_dateFormatShort"};
haxe_ui_locale_Formats.get_dateFormatShort = function() {
	if(haxe_ui_locale_Formats._dateFormatShort == null) {
		return haxe_ui_locale_LocaleManager.get_instance().lookupString("formats.date.short");
	}
	return haxe_ui_locale_Formats._dateFormatShort;
};
haxe_ui_locale_Formats.set_dateFormatShort = function(value) {
	haxe_ui_locale_Formats._dateFormatShort = value;
	return value;
};
haxe_ui_locale_Formats.get_decimalSeperator = function() {
	if(haxe_ui_locale_Formats._decimalSeperator == null) {
		return haxe_ui_locale_LocaleManager.get_instance().lookupString("formats.decimal.seperator");
	}
	return haxe_ui_locale_Formats._decimalSeperator;
};
haxe_ui_locale_Formats.set_decimalSeperator = function(value) {
	haxe_ui_locale_Formats._decimalSeperator = value;
	return value;
};
var haxe_ui_locale_LocaleEvent = function(type) {
	haxe_ui_events_UIEvent.call(this,type);
};
$hxClasses["haxe.ui.locale.LocaleEvent"] = haxe_ui_locale_LocaleEvent;
haxe_ui_locale_LocaleEvent.__name__ = "haxe.ui.locale.LocaleEvent";
haxe_ui_locale_LocaleEvent.__super__ = haxe_ui_events_UIEvent;
haxe_ui_locale_LocaleEvent.prototype = $extend(haxe_ui_events_UIEvent.prototype,{
	clone: function() {
		var c = new haxe_ui_locale_LocaleEvent(this.type);
		return c;
	}
	,__class__: haxe_ui_locale_LocaleEvent
});
var haxe_ui_locale_LocaleManager = function() {
	this._localeMap = new haxe_ds_StringMap();
	this._language = "en";
	this._eventMap = null;
};
$hxClasses["haxe.ui.locale.LocaleManager"] = haxe_ui_locale_LocaleManager;
haxe_ui_locale_LocaleManager.__name__ = "haxe.ui.locale.LocaleManager";
haxe_ui_locale_LocaleManager.__properties__ = {get_instance:"get_instance"};
haxe_ui_locale_LocaleManager._instance = null;
haxe_ui_locale_LocaleManager.get_instance = function() {
	if(haxe_ui_locale_LocaleManager._instance == null) {
		haxe_ui_locale_LocaleManager._instance = new haxe_ui_locale_LocaleManager();
	}
	return haxe_ui_locale_LocaleManager._instance;
};
haxe_ui_locale_LocaleManager.prototype = {
	_eventMap: null
	,registerComponent: function(component,prop,callback,expr,fix) {
		if(fix == null) {
			fix = true;
		}
		if(callback == null && expr == null) {
			return;
		}
		var fixedExpr = null;
		if(fix == true) {
			if(expr != null) {
				fixedExpr = haxe_ui_util_ExpressionUtil.stringToLanguageExpression(expr,"LocaleManager");
				if(StringTools.endsWith(fixedExpr,";") == true) {
					fixedExpr = HxOverrides.substr(fixedExpr,0,fixedExpr.length - 1);
				}
			}
		} else {
			fixedExpr = expr;
		}
		var propMap = haxe_ui_locale_LocaleManager._registeredComponents.h[component.__id__];
		if(propMap == null) {
			propMap = new haxe_ds_StringMap();
			haxe_ui_locale_LocaleManager._registeredComponents.set(component,propMap);
		}
		propMap.h[prop] = { callback : callback, expr : fixedExpr};
		this.refreshFor(component);
	}
	,unregisterComponent: function(component) {
		haxe_ui_locale_LocaleManager._registeredComponents.remove(component);
	}
	,findBindingExpr: function(component,prop) {
		var propMap = haxe_ui_locale_LocaleManager._registeredComponents.h[component.__id__];
		if(propMap == null) {
			return null;
		}
		var entry = propMap.h[prop];
		if(entry == null) {
			return null;
		}
		return entry.expr;
	}
	,cloneForComponent: function(from,to) {
		var propMap = haxe_ui_locale_LocaleManager._registeredComponents.h[from.__id__];
		if(propMap == null) {
			return;
		}
		var h = propMap.h;
		var prop_h = h;
		var prop_keys = Object.keys(h);
		var prop_length = prop_keys.length;
		var prop_current = 0;
		while(prop_current < prop_length) {
			var prop = prop_keys[prop_current++];
			var entry = propMap.h[prop];
			this.registerComponent(to,prop,entry.callback,entry.expr,false);
		}
	}
	,onComponentReady: function(e) {
		e.target.unregisterEvent("initialize",$bind(this,this.onComponentReady));
		this.refreshFor(e.target);
	}
	,refreshFor: function(component) {
		if(component.get_isReady() == false) {
			component.registerEvent("initialize",$bind(this,this.onComponentReady));
			return;
		}
		var propMap = haxe_ui_locale_LocaleManager._registeredComponents.h[component.__id__];
		if(propMap == null) {
			return;
		}
		var context = { LocaleManager : haxe_ui_locale_LocaleManager, MathUtil : haxe_ui_util_MathUtil};
		var root = this.findRoot(component);
		var _g = 0;
		var _g1 = root.get_namedComponents();
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			if(k.get_scriptAccess() == false) {
				continue;
			}
			context[k.get_id()] = k;
		}
		var h = propMap.h;
		var prop_h = h;
		var prop_keys = Object.keys(h);
		var prop_length = prop_keys.length;
		var prop_current = 0;
		while(prop_current < prop_length) {
			var prop = prop_keys[prop_current++];
			var entry = propMap.h[prop];
			if(entry.callback != null) {
				var value = entry.callback();
				Reflect.setProperty(component,prop,value);
			} else if(entry.expr != null) {
				var value1 = haxe_ui_util_SimpleExpressionEvaluator.eval(entry.expr,context);
				Reflect.setProperty(component,prop,value1);
			}
		}
	}
	,refreshAll: function() {
		var c = haxe_ui_locale_LocaleManager._registeredComponents.keys();
		while(c.hasNext()) {
			var c1 = c.next();
			this.refreshFor(c1);
		}
	}
	,_language: null
	,get_language: function() {
		return this._language;
	}
	,set_language: function(value) {
		if(value == null) {
			return value;
		}
		if(this._language == value) {
			return value;
		}
		var tmp = this.getStrings(value) == null;
		this._language = value;
		this.refreshAll();
		if(this._eventMap != null) {
			var event = new haxe_ui_locale_LocaleEvent("localeChanged");
			this._eventMap.invoke("localeChanged",event);
		}
		return value;
	}
	,registerEvent: function(type,listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(this._eventMap == null) {
			this._eventMap = new haxe_ui_util_EventMap();
		}
		this._eventMap.add(type,listener,priority);
	}
	,hasEvent: function(type,listener) {
		if(this._eventMap == null) {
			return false;
		}
		return this._eventMap.contains(type,listener);
	}
	,unregisterEvent: function(type,listener) {
		if(this._eventMap != null) {
			this._eventMap.remove(type,listener);
		}
	}
	,parseResource: function(localeId,resourceId) {
		var content = haxe_ui_ToolkitAssets.get_instance().getText(resourceId);
		if(content != null) {
			var parts = resourceId.split(".");
			var extension = parts.pop();
			var filename = parts.join(".");
			var n = filename.lastIndexOf("/");
			if(n != -1) {
				filename = HxOverrides.substr(filename,n + 1,null);
			}
			var parser = haxe_ui_parsers_locale_LocaleParser.get(extension);
			var map = parser.parse(content);
			this.addStrings(localeId,map,filename);
		}
	}
	,_localeMap: null
	,addStrings: function(localeId,map,filename) {
		var stringMap = this._localeMap.h[localeId];
		if(stringMap == null) {
			stringMap = new haxe_ds_StringMap();
			this._localeMap.h[localeId] = stringMap;
		}
		var h = map.h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			var v = map.h[k];
			if(filename != null && filename != localeId && StringTools.startsWith(k,filename) == false) {
				var altKey = filename + "." + k;
				stringMap.h[altKey] = v;
			}
			stringMap.h[k] = v;
		}
		localeId = StringTools.replace(localeId,"-","_");
		var parts = localeId.split("_");
		if(parts.length > 1) {
			var parent = this._localeMap.h[parts[0]];
			if(parent != null) {
				var h = parent.h;
				var k_h = h;
				var k_keys = Object.keys(h);
				var k_length = k_keys.length;
				var k_current = 0;
				while(k_current < k_length) {
					var k = k_keys[k_current++];
					if(Object.prototype.hasOwnProperty.call(stringMap.h,k) == false) {
						stringMap.h[k] = parent.h[k];
					}
				}
			}
		}
	}
	,getStrings: function(localeId) {
		var strings = this._localeMap.h[localeId];
		if(strings != null) {
			return strings;
		}
		localeId = StringTools.replace(localeId,"-","_");
		var parts = localeId.split("_");
		if(!Object.prototype.hasOwnProperty.call(this._localeMap.h,parts[0])) {
			return this._localeMap.h["en"];
		}
		return this._localeMap.h[parts[0]];
	}
	,hasString: function(id) {
		var strings = this.getStrings(this.get_language());
		if(strings == null) {
			return false;
		}
		return Object.prototype.hasOwnProperty.call(strings.h,id);
	}
	,lookupString: function(id,param0,param1,param2,param3) {
		return this.translateTo(this.get_language(),id,param0,param1,param2,param3);
	}
	,translateTo: function(lang,id,param0,param1,param2,param3) {
		var strings = this.getStrings(lang);
		if(strings == null) {
			return id;
		}
		var value = strings.h[id];
		if(value == null) {
			return id;
		}
		if(param0 != null) {
			value = StringTools.replace(value,"{0}",param0);
		}
		if(param1 != null) {
			value = StringTools.replace(value,"{1}",param1);
		}
		if(param2 != null) {
			value = StringTools.replace(value,"{2}",param2);
		}
		if(param3 != null) {
			value = StringTools.replace(value,"{3}",param3);
		}
		return value;
	}
	,findRoot: function(c) {
		var root = c;
		var ref = c;
		while(ref != null) {
			root = ref;
			if(root.bindingRoot) {
				break;
			}
			ref = ref.parentComponent;
		}
		return root;
	}
	,__class__: haxe_ui_locale_LocaleManager
	,__properties__: {set_language:"set_language",get_language:"get_language"}
};
var haxe_ui_macros_BackendMacros = function() { };
$hxClasses["haxe.ui.macros.BackendMacros"] = haxe_ui_macros_BackendMacros;
haxe_ui_macros_BackendMacros.__name__ = "haxe.ui.macros.BackendMacros";
var haxe_ui_macros_ComponentMacros = function() { };
$hxClasses["haxe.ui.macros.ComponentMacros"] = haxe_ui_macros_ComponentMacros;
haxe_ui_macros_ComponentMacros.__name__ = "haxe.ui.macros.ComponentMacros";
var haxe_ui_macros_ModuleMacros = function() { };
$hxClasses["haxe.ui.macros.ModuleMacros"] = haxe_ui_macros_ModuleMacros;
haxe_ui_macros_ModuleMacros.__name__ = "haxe.ui.macros.ModuleMacros";
var haxe_ui_macros_NativeMacros = function() { };
$hxClasses["haxe.ui.macros.NativeMacros"] = haxe_ui_macros_NativeMacros;
haxe_ui_macros_NativeMacros.__name__ = "haxe.ui.macros.NativeMacros";
haxe_ui_macros_NativeMacros._nativeProcessed = null;
var haxe_ui_parsers_locale_LocaleParser = function() {
};
$hxClasses["haxe.ui.parsers.locale.LocaleParser"] = haxe_ui_parsers_locale_LocaleParser;
haxe_ui_parsers_locale_LocaleParser.__name__ = "haxe.ui.parsers.locale.LocaleParser";
haxe_ui_parsers_locale_LocaleParser._parsers = null;
haxe_ui_parsers_locale_LocaleParser.get = function(extension) {
	haxe_ui_parsers_locale_LocaleParser.defaultParsers();
	var cls = haxe_ui_parsers_locale_LocaleParser._parsers.h[extension];
	if(cls == null) {
		throw haxe_Exception.thrown("No locale parser found for \"" + extension + "\"");
	}
	var instance = Type.createInstance(cls,[]);
	if(instance == null) {
		throw haxe_Exception.thrown("Could not create locale parser instance \"" + Std.string(cls) + "\"");
	}
	return instance;
};
haxe_ui_parsers_locale_LocaleParser.defaultParsers = function() {
	haxe_ui_parsers_locale_LocaleParser.register("properties",haxe_ui_parsers_locale_PropertiesParser);
	haxe_ui_parsers_locale_LocaleParser.register("po",haxe_ui_parsers_locale_PoParser);
};
haxe_ui_parsers_locale_LocaleParser.register = function(extension,cls) {
	if(haxe_ui_parsers_locale_LocaleParser._parsers == null) {
		haxe_ui_parsers_locale_LocaleParser._parsers = new haxe_ds_StringMap();
	}
	haxe_ui_parsers_locale_LocaleParser._parsers.h[extension] = cls;
};
haxe_ui_parsers_locale_LocaleParser.prototype = {
	parse: function(data) {
		throw haxe_Exception.thrown("Locale parser not implemented!");
	}
	,__class__: haxe_ui_parsers_locale_LocaleParser
};
var haxe_ui_parsers_locale_PoParser = function() {
	haxe_ui_parsers_locale_LocaleParser.call(this);
};
$hxClasses["haxe.ui.parsers.locale.PoParser"] = haxe_ui_parsers_locale_PoParser;
haxe_ui_parsers_locale_PoParser.__name__ = "haxe.ui.parsers.locale.PoParser";
haxe_ui_parsers_locale_PoParser.__super__ = haxe_ui_parsers_locale_LocaleParser;
haxe_ui_parsers_locale_PoParser.prototype = $extend(haxe_ui_parsers_locale_LocaleParser.prototype,{
	parse: function(data) {
		var msgidEReg = new EReg("msgid *= *\"(.*)\"","");
		var msgstrEReg = new EReg("msgstr *= *\"(.*)\"","");
		var result = new haxe_ds_StringMap();
		var lines = data.split("\n");
		var currentID = null;
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			line = StringTools.trim(line);
			if(line.length == 0 || StringTools.startsWith(line,"#")) {
				continue;
			}
			if(currentID == null) {
				if(msgidEReg.match(line)) {
					currentID = msgidEReg.matched(1);
				} else {
					throw haxe_Exception.thrown("Locale parser: Invalid line " + line);
				}
			} else if(msgstrEReg.match(line)) {
				var value = msgstrEReg.matched(1);
				result.h[currentID] = value;
				currentID = null;
			} else {
				throw haxe_Exception.thrown("Locale parser: Invalid line " + line);
			}
		}
		return result;
	}
	,__class__: haxe_ui_parsers_locale_PoParser
});
var haxe_ui_parsers_locale_PropertiesParser = function() {
	haxe_ui_parsers_locale_LocaleParser.call(this);
};
$hxClasses["haxe.ui.parsers.locale.PropertiesParser"] = haxe_ui_parsers_locale_PropertiesParser;
haxe_ui_parsers_locale_PropertiesParser.__name__ = "haxe.ui.parsers.locale.PropertiesParser";
haxe_ui_parsers_locale_PropertiesParser.__super__ = haxe_ui_parsers_locale_LocaleParser;
haxe_ui_parsers_locale_PropertiesParser.prototype = $extend(haxe_ui_parsers_locale_LocaleParser.prototype,{
	parse: function(data) {
		var result = new haxe_ds_StringMap();
		var lines = data.split("\n");
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			line = StringTools.trim(line);
			if(line.length == 0 || StringTools.startsWith(line,"#")) {
				continue;
			}
			var separator = line.indexOf("=");
			if(separator == -1) {
				throw haxe_Exception.thrown("Locale parser: Invalid line " + line);
			}
			var key = StringTools.trim(HxOverrides.substr(line,0,separator));
			var content = StringTools.trim(HxOverrides.substr(line,separator + 1,null));
			result.h[key] = content;
		}
		return result;
	}
	,__class__: haxe_ui_parsers_locale_PropertiesParser
});
var haxe_ui_styles_Dimension = $hxEnums["haxe.ui.styles.Dimension"] = { __ename__:"haxe.ui.styles.Dimension",__constructs__:null
	,PERCENT: ($_=function(value) { return {_hx_index:0,value:value,__enum__:"haxe.ui.styles.Dimension",toString:$estr}; },$_._hx_name="PERCENT",$_.__params__ = ["value"],$_)
	,PX: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"haxe.ui.styles.Dimension",toString:$estr}; },$_._hx_name="PX",$_.__params__ = ["value"],$_)
	,VW: ($_=function(value) { return {_hx_index:2,value:value,__enum__:"haxe.ui.styles.Dimension",toString:$estr}; },$_._hx_name="VW",$_.__params__ = ["value"],$_)
	,VH: ($_=function(value) { return {_hx_index:3,value:value,__enum__:"haxe.ui.styles.Dimension",toString:$estr}; },$_._hx_name="VH",$_.__params__ = ["value"],$_)
	,REM: ($_=function(value) { return {_hx_index:4,value:value,__enum__:"haxe.ui.styles.Dimension",toString:$estr}; },$_._hx_name="REM",$_.__params__ = ["value"],$_)
	,CALC: ($_=function(s) { return {_hx_index:5,s:s,__enum__:"haxe.ui.styles.Dimension",toString:$estr}; },$_._hx_name="CALC",$_.__params__ = ["s"],$_)
};
haxe_ui_styles_Dimension.__constructs__ = [haxe_ui_styles_Dimension.PERCENT,haxe_ui_styles_Dimension.PX,haxe_ui_styles_Dimension.VW,haxe_ui_styles_Dimension.VH,haxe_ui_styles_Dimension.REM,haxe_ui_styles_Dimension.CALC];
haxe_ui_styles_Dimension.__empty_constructs__ = [];
var haxe_ui_styles_EasingFunction = $hxEnums["haxe.ui.styles.EasingFunction"] = { __ename__:"haxe.ui.styles.EasingFunction",__constructs__:null
	,LINEAR: {_hx_name:"LINEAR",_hx_index:0,__enum__:"haxe.ui.styles.EasingFunction",toString:$estr}
	,EASE: {_hx_name:"EASE",_hx_index:1,__enum__:"haxe.ui.styles.EasingFunction",toString:$estr}
	,EASE_IN: {_hx_name:"EASE_IN",_hx_index:2,__enum__:"haxe.ui.styles.EasingFunction",toString:$estr}
	,EASE_OUT: {_hx_name:"EASE_OUT",_hx_index:3,__enum__:"haxe.ui.styles.EasingFunction",toString:$estr}
	,EASE_IN_OUT: {_hx_name:"EASE_IN_OUT",_hx_index:4,__enum__:"haxe.ui.styles.EasingFunction",toString:$estr}
};
haxe_ui_styles_EasingFunction.__constructs__ = [haxe_ui_styles_EasingFunction.LINEAR,haxe_ui_styles_EasingFunction.EASE,haxe_ui_styles_EasingFunction.EASE_IN,haxe_ui_styles_EasingFunction.EASE_OUT,haxe_ui_styles_EasingFunction.EASE_IN_OUT];
haxe_ui_styles_EasingFunction.__empty_constructs__ = [haxe_ui_styles_EasingFunction.LINEAR,haxe_ui_styles_EasingFunction.EASE,haxe_ui_styles_EasingFunction.EASE_IN,haxe_ui_styles_EasingFunction.EASE_OUT,haxe_ui_styles_EasingFunction.EASE_IN_OUT];
var haxe_ui_styles_Parser = function() {
};
$hxClasses["haxe.ui.styles.Parser"] = haxe_ui_styles_Parser;
haxe_ui_styles_Parser.__name__ = "haxe.ui.styles.Parser";
haxe_ui_styles_Parser.prototype = {
	parse: function(source) {
		var _gthis = this;
		source = source.replace(haxe_ui_styles_Parser.cssCommentsRegex.r,"");
		if(source.indexOf("$") != -1) {
			var n1 = source.indexOf("$");
			while(n1 != -1) {
				var n2 = n1;
				while(n2 <= source.length - 1) {
					var c = source.charAt(n2);
					if(c == " " || c == ";" || c == "\n" || c == ",") {
						break;
					}
					++n2;
				}
				if(n2 != source.length - 1) {
					var key = source.substring(n1 + 1,n2);
					var value = haxe_ui_themes_ThemeManager.get_instance().currentThemeVars.h[key];
					if(value != null) {
						var before = source.substring(0,n1);
						var after = source.substring(n2);
						source = before + value + after;
						n2 = n1 + value.length;
					} else {
						haxe_Log.trace("WARNING: css variable '" + key + "' not defined",{ fileName : "haxe/ui/styles/Parser.hx", lineNumber : 50, className : "haxe.ui.styles.Parser", methodName : "parse"});
					}
				}
				n1 = source.indexOf("$",n2);
			}
		}
		if(source.indexOf("$") != -1) {
			haxe_Log.trace("WARNING: some css variables not resolved",{ fileName : "haxe/ui/styles/Parser.hx", lineNumber : 60, className : "haxe.ui.styles.Parser", methodName : "parse"});
		}
		var styleSheet = new haxe_ui_styles_StyleSheet();
		source = haxe_ui_styles_Parser.cssImportStatementRegex.map(source,function(e) {
			var i = e.matched(0);
			i = HxOverrides.substr(i,7,null);
			var _this_r = new RegExp("\"|'|;","g".split("u").join(""));
			i = i.replace(_this_r,"");
			i = StringTools.trim(i);
			styleSheet.addImport(new haxe_ui_styles_elements_ImportElement(i));
			return "";
		});
		source = haxe_ui_styles_Parser.cssKeyframesRegex.map(source,function(e) {
			var id = e.matched(1);
			var data = e.matched(2);
			var keyframes = [];
			haxe_ui_styles_Parser.cssKeyframeSelectorRegex.map(data,function(e) {
				var selector = e.matched(1);
				var directives = e.matched(2);
				if(selector == "from") {
					selector = "0%";
				} else if(selector == "to") {
					selector = "100%";
				}
				var keyframe = new haxe_ui_styles_elements_AnimationKeyFrame();
				keyframe.time = haxe_ui_styles_ValueTools.parse(selector);
				keyframe.directives = _gthis.parseDirectives(directives);
				keyframes.push(keyframe);
				return null;
			});
			var animation = new haxe_ui_styles_elements_AnimationKeyFrames(id,keyframes);
			styleSheet.addAnimation(animation);
			return "";
		});
		haxe_ui_styles_Parser.combinedCSSMediaRegex.map(source,function(e) {
			var selector = "";
			if(e.matched(2) == null) {
				selector = StringTools.trim(e.matched(5).split("\r\n").join("\n"));
			} else {
				selector = StringTools.trim(e.matched(2).split("\r\n").join("\n"));
			}
			selector = selector.replace(haxe_ui_styles_Parser.newlineRegex.r,"\n");
			if(selector.indexOf("@media") != -1) {
				var n1 = selector.indexOf("(");
				var n2 = selector.lastIndexOf(")");
				var mediaQuery = selector.substring(n1 + 1,n2);
				var mediaStyleSheet = new haxe_ui_styles_Parser().parse(e.matched(3) + "\n}");
				var mq = new haxe_ui_styles_elements_MediaQuery(_gthis.parseDirectives(mediaQuery),mediaStyleSheet);
				styleSheet.addMediaQuery(mq);
			} else {
				var directives = _gthis.parseDirectives(e.matched(6));
				var selectors = selector.split(",");
				var _g = 0;
				while(_g < selectors.length) {
					var s = selectors[_g];
					++_g;
					s = StringTools.trim(s);
					if(s.length > 0) {
						styleSheet.addRule(new haxe_ui_styles_elements_RuleElement(s,directives));
					}
				}
			}
			return null;
		});
		return styleSheet;
	}
	,parseDirectives: function(rulesString) {
		rulesString = rulesString.split("\r\n").join("\n");
		var ret = [];
		var rules = rulesString.split(";");
		var _g = 0;
		while(_g < rules.length) {
			var line = rules[_g];
			++_g;
			var d = this.parseDirective(line);
			if(d != null) {
				ret.push(d);
			}
		}
		return ret;
	}
	,parseDirective: function(line) {
		var d = null;
		line = StringTools.trim(line);
		if(line.length == 0) {
			return null;
		}
		if(line.indexOf(":") != -1) {
			var parts = line.split(":");
			var cssDirective = StringTools.trim(parts[0]);
			var cssValue = StringTools.trim(parts.slice(1).join(":"));
			if(cssDirective.length < 1 || cssValue.length < 1) {
				return null;
			}
			d = new haxe_ui_styles_elements_Directive(cssDirective,haxe_ui_styles_ValueTools.parse(cssValue));
		} else {
			d = new haxe_ui_styles_elements_Directive("",haxe_ui_styles_ValueTools.parse(line),true);
		}
		return d;
	}
	,__class__: haxe_ui_styles_Parser
};
var haxe_ui_styles_StyleBorderType = $hxEnums["haxe.ui.styles.StyleBorderType"] = { __ename__:"haxe.ui.styles.StyleBorderType",__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"haxe.ui.styles.StyleBorderType",toString:$estr}
	,Full: {_hx_name:"Full",_hx_index:1,__enum__:"haxe.ui.styles.StyleBorderType",toString:$estr}
	,Compound: {_hx_name:"Compound",_hx_index:2,__enum__:"haxe.ui.styles.StyleBorderType",toString:$estr}
};
haxe_ui_styles_StyleBorderType.__constructs__ = [haxe_ui_styles_StyleBorderType.None,haxe_ui_styles_StyleBorderType.Full,haxe_ui_styles_StyleBorderType.Compound];
haxe_ui_styles_StyleBorderType.__empty_constructs__ = [haxe_ui_styles_StyleBorderType.None,haxe_ui_styles_StyleBorderType.Full,haxe_ui_styles_StyleBorderType.Compound];
var haxe_ui_styles_Style = function(left,top,autoWidth,width,percentWidth,minWidth,minPercentWidth,maxWidth,maxPercentWidth,initialWidth,initialPercentWidth,autoHeight,height,percentHeight,minHeight,minPercentHeight,maxHeight,maxPercentHeight,initialHeight,initialPercentHeight,padding,paddingTop,paddingLeft,paddingRight,paddingBottom,marginTop,marginLeft,marginRight,marginBottom,horizontalSpacing,verticalSpacing,color,backgroundColor,backgroundOpacity,backgroundColorEnd,backgroundGradientStyle,backgroundImage,backgroundImageRepeat,backgroundPositionX,backgroundPositionY,backgroundImageClipTop,backgroundImageClipLeft,backgroundImageClipBottom,backgroundImageClipRight,backgroundImageSliceTop,backgroundImageSliceLeft,backgroundImageSliceBottom,backgroundImageSliceRight,borderColor,borderTopColor,borderLeftColor,borderBottomColor,borderRightColor,borderSize,borderTopSize,borderLeftSize,borderBottomSize,borderRightSize,borderRadius,borderRadiusTopLeft,borderRadiusTopRight,borderRadiusBottomLeft,borderRadiusBottomRight,borderOpacity,borderStyle,icon,iconPosition,horizontalAlign,verticalAlign,textAlign,opacity,clip,native,fontName,fontSize,fontBold,fontUnderline,fontItalic,fontStrikeThrough,cursor,hidden,filter,backdropFilter,resource,animationName,animationOptions,mode,pointerEvents,contentType,direction,contentWidth,contentWidthPercent,contentHeight,contentHeightPercent,wordWrap,imageRendering,layout,borderType,hasBorder,fullBorderSize) {
	this.left = left;
	this.top = top;
	this.autoWidth = autoWidth;
	this.width = width;
	this.percentWidth = percentWidth;
	this.minWidth = minWidth;
	this.minPercentWidth = minPercentWidth;
	this.maxWidth = maxWidth;
	this.maxPercentWidth = maxPercentWidth;
	this.initialWidth = initialWidth;
	this.initialPercentWidth = initialPercentWidth;
	this.autoHeight = autoHeight;
	this.height = height;
	this.percentHeight = percentHeight;
	this.minHeight = minHeight;
	this.minPercentHeight = minPercentHeight;
	this.maxHeight = maxHeight;
	this.maxPercentHeight = maxPercentHeight;
	this.initialHeight = initialHeight;
	this.initialPercentHeight = initialPercentHeight;
	this.padding = padding;
	this.paddingTop = paddingTop;
	this.paddingLeft = paddingLeft;
	this.paddingRight = paddingRight;
	this.paddingBottom = paddingBottom;
	this.marginTop = marginTop;
	this.marginLeft = marginLeft;
	this.marginRight = marginRight;
	this.marginBottom = marginBottom;
	this.horizontalSpacing = horizontalSpacing;
	this.verticalSpacing = verticalSpacing;
	this.color = color;
	this.backgroundColor = backgroundColor;
	this.backgroundOpacity = backgroundOpacity;
	this.backgroundColorEnd = backgroundColorEnd;
	this.backgroundGradientStyle = backgroundGradientStyle;
	this.backgroundImage = backgroundImage;
	this.backgroundImageRepeat = backgroundImageRepeat;
	this.backgroundPositionX = backgroundPositionX;
	this.backgroundPositionY = backgroundPositionY;
	this.backgroundImageClipTop = backgroundImageClipTop;
	this.backgroundImageClipLeft = backgroundImageClipLeft;
	this.backgroundImageClipBottom = backgroundImageClipBottom;
	this.backgroundImageClipRight = backgroundImageClipRight;
	this.backgroundImageSliceTop = backgroundImageSliceTop;
	this.backgroundImageSliceLeft = backgroundImageSliceLeft;
	this.backgroundImageSliceBottom = backgroundImageSliceBottom;
	this.backgroundImageSliceRight = backgroundImageSliceRight;
	this.borderColor = borderColor;
	this.borderTopColor = borderTopColor;
	this.borderLeftColor = borderLeftColor;
	this.borderBottomColor = borderBottomColor;
	this.borderRightColor = borderRightColor;
	this.borderSize = borderSize;
	this.borderTopSize = borderTopSize;
	this.borderLeftSize = borderLeftSize;
	this.borderBottomSize = borderBottomSize;
	this.borderRightSize = borderRightSize;
	this.borderRadius = borderRadius;
	this.borderRadiusTopLeft = borderRadiusTopLeft;
	this.borderRadiusTopRight = borderRadiusTopRight;
	this.borderRadiusBottomLeft = borderRadiusBottomLeft;
	this.borderRadiusBottomRight = borderRadiusBottomRight;
	this.borderOpacity = borderOpacity;
	this.borderStyle = borderStyle;
	this.icon = icon;
	this.iconPosition = iconPosition;
	this.horizontalAlign = horizontalAlign;
	this.verticalAlign = verticalAlign;
	this.textAlign = textAlign;
	this.opacity = opacity;
	this.clip = clip;
	this.native = native;
	this.fontName = fontName;
	this.fontSize = fontSize;
	this.fontBold = fontBold;
	this.fontUnderline = fontUnderline;
	this.fontItalic = fontItalic;
	this.fontStrikeThrough = fontStrikeThrough;
	this.cursor = cursor;
	this.hidden = hidden;
	this.filter = filter;
	this.backdropFilter = backdropFilter;
	this.resource = resource;
	this.animationName = animationName;
	this.animationOptions = animationOptions;
	this.mode = mode;
	this.pointerEvents = pointerEvents;
	this.contentType = contentType;
	this.direction = direction;
	this.contentWidth = contentWidth;
	this.contentWidthPercent = contentWidthPercent;
	this.contentHeight = contentHeight;
	this.contentHeightPercent = contentHeightPercent;
	this.wordWrap = wordWrap;
	this.imageRendering = imageRendering;
	this.layout = layout;
	this.borderType = borderType;
	this.hasBorder = hasBorder;
	this.fullBorderSize = fullBorderSize;
};
$hxClasses["haxe.ui.styles.Style"] = haxe_ui_styles_Style;
haxe_ui_styles_Style.__name__ = "haxe.ui.styles.Style";
haxe_ui_styles_Style.prototype = {
	left: null
	,top: null
	,autoWidth: null
	,width: null
	,percentWidth: null
	,minWidth: null
	,minPercentWidth: null
	,maxWidth: null
	,maxPercentWidth: null
	,initialWidth: null
	,initialPercentWidth: null
	,autoHeight: null
	,height: null
	,percentHeight: null
	,minHeight: null
	,minPercentHeight: null
	,maxHeight: null
	,maxPercentHeight: null
	,initialHeight: null
	,initialPercentHeight: null
	,padding: null
	,paddingTop: null
	,paddingLeft: null
	,paddingRight: null
	,paddingBottom: null
	,set_padding: function(value) {
		this.paddingTop = value;
		this.paddingLeft = value;
		this.paddingRight = value;
		this.paddingBottom = value;
		return value;
	}
	,marginTop: null
	,marginLeft: null
	,marginRight: null
	,marginBottom: null
	,horizontalSpacing: null
	,verticalSpacing: null
	,color: null
	,backgroundColor: null
	,backgroundOpacity: null
	,backgroundColorEnd: null
	,backgroundGradientStyle: null
	,backgroundImage: null
	,backgroundImageRepeat: null
	,backgroundPositionX: null
	,backgroundPositionY: null
	,backgroundImageClipTop: null
	,backgroundImageClipLeft: null
	,backgroundImageClipBottom: null
	,backgroundImageClipRight: null
	,backgroundImageSliceTop: null
	,backgroundImageSliceLeft: null
	,backgroundImageSliceBottom: null
	,backgroundImageSliceRight: null
	,borderColor: null
	,borderTopColor: null
	,borderLeftColor: null
	,borderBottomColor: null
	,borderRightColor: null
	,borderSize: null
	,borderTopSize: null
	,borderLeftSize: null
	,borderBottomSize: null
	,borderRightSize: null
	,borderRadius: null
	,borderRadiusTopLeft: null
	,borderRadiusTopRight: null
	,borderRadiusBottomLeft: null
	,borderRadiusBottomRight: null
	,borderOpacity: null
	,borderStyle: null
	,icon: null
	,iconPosition: null
	,horizontalAlign: null
	,verticalAlign: null
	,textAlign: null
	,opacity: null
	,clip: null
	,native: null
	,fontName: null
	,fontSize: null
	,fontBold: null
	,fontUnderline: null
	,fontItalic: null
	,fontStrikeThrough: null
	,cursor: null
	,hidden: null
	,filter: null
	,backdropFilter: null
	,resource: null
	,animationName: null
	,animationOptions: null
	,mode: null
	,pointerEvents: null
	,contentType: null
	,direction: null
	,contentWidth: null
	,contentWidthPercent: null
	,contentHeight: null
	,contentHeightPercent: null
	,wordWrap: null
	,imageRendering: null
	,layout: null
	,borderType: null
	,get_borderType: function() {
		var t = haxe_ui_styles_StyleBorderType.Compound;
		if(this.borderLeftSize != null && this.borderLeftSize > 0 && this.borderLeftSize == this.borderRightSize && this.borderLeftSize == this.borderBottomSize && this.borderLeftSize == this.borderTopSize) {
			t = haxe_ui_styles_StyleBorderType.Full;
		} else if((this.borderLeftSize == null || this.borderLeftSize <= 0) && (this.borderRightSize == null || this.borderRightSize <= 0) && (this.borderBottomSize == null || this.borderRightSize <= 0) && (this.borderTopSize == null || this.borderTopSize <= 0)) {
			t = haxe_ui_styles_StyleBorderType.None;
		}
		return t;
	}
	,hasBorder: null
	,get_hasBorder: function() {
		return this.get_borderType() != haxe_ui_styles_StyleBorderType.None;
	}
	,fullBorderSize: null
	,get_fullBorderSize: function() {
		if(this.get_borderType() == haxe_ui_styles_StyleBorderType.Full) {
			return this.borderLeftSize;
		}
		return 0;
	}
	,mergeDirectives: function(map) {
		var h = map.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			var v = map.h[key];
			switch(key) {
			case "animation-delay":
				if(this.animationOptions == null) {
					this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
				}
				this.animationOptions.delay = haxe_ui_styles_ValueTools.time(v.value);
				break;
			case "animation-direction":
				if(this.animationOptions == null) {
					this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
				}
				this.animationOptions.direction = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "animation-duration":
				if(this.animationOptions == null) {
					this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
				}
				this.animationOptions.duration = haxe_ui_styles_ValueTools.time(v.value);
				break;
			case "animation-fill-mode":
				if(this.animationOptions == null) {
					this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
				}
				this.animationOptions.fillMode = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "animation-iteration-count":
				if(this.animationOptions == null) {
					this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
				}
				var _g = v.value;
				var tmp;
				if(_g._hx_index == 6) {
					var val = _g.v;
					tmp = val == "infinite" ? -1 : 0;
				} else {
					tmp = haxe_ui_styles_ValueTools.int(v.value);
				}
				this.animationOptions.iterationCount = tmp;
				break;
			case "animation-name":
				this.animationName = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "animation-timing-function":
				if(this.animationOptions == null) {
					this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
				}
				this.animationOptions.easingFunction = haxe_ui_styles_ValueTools.calcEasing(v.value);
				break;
			case "backdrop-filter":
				var _g1 = v.value;
				switch(_g1._hx_index) {
				case 5:
					var f = _g1.f;
					var vl = _g1.vl;
					var arr = haxe_ui_styles_ValueTools.array(vl);
					arr.splice(0,0,f);
					this.backdropFilter = [haxe_ui_filters_FilterParser.parseFilter(arr)];
					break;
				case 6:
					var f1 = _g1.v;
					this.backdropFilter = [haxe_ui_filters_FilterParser.parseFilter([f1])];
					break;
				case 9:
					this.backdropFilter = null;
					break;
				default:
				}
				break;
			case "background-color":
				var _g2 = v.value;
				this.backgroundColor = haxe_ui_styles_ValueTools.int(v.value);
				if(Object.prototype.hasOwnProperty.call(map.h,"background-color-end")) {
					this.backgroundColorEnd = haxe_ui_styles_ValueTools.int(map.h["background-color-end"].value);
				} else {
					this.backgroundColorEnd = null;
				}
				break;
			case "background-color-end":
				this.backgroundColorEnd = haxe_ui_styles_ValueTools.int(v.value);
				break;
			case "background-gradient-style":
				this.backgroundGradientStyle = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "background-image":
				this.backgroundImage = haxe_ui_styles_ValueTools.variant(v.value);
				break;
			case "background-image-clip-bottom":
				this.backgroundImageClipBottom = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-image-clip-left":
				this.backgroundImageClipLeft = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-image-clip-right":
				this.backgroundImageClipRight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-image-clip-top":
				this.backgroundImageClipTop = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-image-repeat":
				this.backgroundImageRepeat = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "background-image-slice-bottom":
				this.backgroundImageSliceBottom = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-image-slice-left":
				this.backgroundImageSliceLeft = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-image-slice-right":
				this.backgroundImageSliceRight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-image-slice-top":
				this.backgroundImageSliceTop = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-opacity":
				this.backgroundOpacity = haxe_ui_styles_ValueTools.float(v.value);
				break;
			case "background-position-x":
				this.backgroundPositionX = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "background-position-y":
				this.backgroundPositionY = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "border-bottom-color":
				this.borderBottomColor = haxe_ui_styles_ValueTools.int(v.value);
				break;
			case "border-bottom-left-radius":
				this.borderRadiusBottomLeft = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "border-bottom-right-radius":
				this.borderRadiusBottomRight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "border-bottom-size":case "border-bottom-width":
				if(v.value == haxe_ui_styles_Value.VNone) {
					this.borderBottomSize = 0;
				} else {
					this.borderBottomSize = haxe_ui_styles_ValueTools.calcDimension(v.value);
				}
				break;
			case "border-color":
				this.borderColor = haxe_ui_styles_ValueTools.int(v.value);
				break;
			case "border-left-color":
				this.borderLeftColor = haxe_ui_styles_ValueTools.int(v.value);
				break;
			case "border-left-size":case "border-left-width":
				if(v.value == haxe_ui_styles_Value.VNone) {
					this.borderLeftSize = 0;
				} else {
					this.borderLeftSize = haxe_ui_styles_ValueTools.calcDimension(v.value);
				}
				break;
			case "border-opacity":
				this.borderOpacity = haxe_ui_styles_ValueTools.float(v.value);
				break;
			case "border-radius":
				this.borderRadius = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "border-right-color":
				this.borderRightColor = haxe_ui_styles_ValueTools.int(v.value);
				break;
			case "border-right-size":case "border-right-width":
				if(v.value == haxe_ui_styles_Value.VNone) {
					this.borderRightSize = 0;
				} else {
					this.borderRightSize = haxe_ui_styles_ValueTools.calcDimension(v.value);
				}
				break;
			case "border-style":
				this.borderStyle = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "border-top-color":
				this.borderTopColor = haxe_ui_styles_ValueTools.int(v.value);
				break;
			case "border-top-left-radius":
				this.borderRadiusTopLeft = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "border-top-right-radius":
				this.borderRadiusTopRight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "border-top-size":case "border-top-width":
				if(v.value == haxe_ui_styles_Value.VNone) {
					this.borderTopSize = 0;
				} else {
					this.borderTopSize = haxe_ui_styles_ValueTools.calcDimension(v.value);
				}
				break;
			case "clip":
				this.clip = haxe_ui_styles_ValueTools.bool(v.value);
				break;
			case "color":
				this.color = haxe_ui_styles_ValueTools.int(v.value);
				break;
			case "content-height":
				this.contentHeight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				this.contentHeightPercent = haxe_ui_styles_ValueTools.percent(v.value);
				break;
			case "content-type":
				this.contentType = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "content-width":
				this.contentWidth = haxe_ui_styles_ValueTools.calcDimension(v.value);
				this.contentWidthPercent = haxe_ui_styles_ValueTools.percent(v.value);
				break;
			case "cursor":
				this.cursor = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "direction":
				this.direction = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "display":
				this.hidden = haxe_ui_styles_ValueTools.none(v.value);
				break;
			case "filter":
				var _g3 = v.value;
				switch(_g3._hx_index) {
				case 5:
					var f2 = _g3.f;
					var vl1 = _g3.vl;
					var arr1 = haxe_ui_styles_ValueTools.array(vl1);
					arr1.splice(0,0,f2);
					this.filter = [haxe_ui_filters_FilterParser.parseFilter(arr1)];
					break;
				case 6:
					var f3 = _g3.v;
					this.filter = [haxe_ui_filters_FilterParser.parseFilter([f3])];
					break;
				case 9:
					this.filter = null;
					break;
				default:
				}
				break;
			case "font-bold":
				this.fontBold = haxe_ui_styles_ValueTools.bool(v.value);
				break;
			case "font-family":case "font-name":
				this.fontName = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "font-italic":
				this.fontItalic = haxe_ui_styles_ValueTools.bool(v.value);
				break;
			case "font-size":
				this.fontSize = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "font-style":
				if(haxe_ui_styles_ValueTools.string(v.value) != null) {
					this.fontItalic = haxe_ui_styles_ValueTools.string(v.value).toLowerCase() == "italic";
				}
				break;
			case "font-underline":
				this.fontUnderline = haxe_ui_styles_ValueTools.bool(v.value);
				break;
			case "font-weight":
				if(haxe_ui_styles_ValueTools.string(v.value) != null) {
					this.fontBold = haxe_ui_styles_ValueTools.string(v.value).toLowerCase() == "bold";
				}
				break;
			case "height":
				this.autoHeight = haxe_ui_styles_ValueTools.constant(v.value,"auto");
				this.height = haxe_ui_styles_ValueTools.calcDimension(v.value);
				this.percentHeight = haxe_ui_styles_ValueTools.percent(v.value);
				break;
			case "hidden":
				this.hidden = haxe_ui_styles_ValueTools.bool(v.value);
				break;
			case "horizontal-align":
				this.horizontalAlign = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "horizontal-spacing":
				this.horizontalSpacing = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "icon":
				if(v.value._hx_index == 9) {
					this.icon = null;
				} else {
					this.icon = haxe_ui_styles_ValueTools.variant(v.value);
				}
				break;
			case "icon-position":
				this.iconPosition = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "image-rendering":
				if(v.value._hx_index == 9) {
					this.imageRendering = null;
				} else {
					this.imageRendering = haxe_ui_styles_ValueTools.string(v.value);
				}
				break;
			case "initial-height":
				this.initialHeight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				this.initialPercentHeight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "initial-width":
				this.initialWidth = haxe_ui_styles_ValueTools.calcDimension(v.value);
				this.initialPercentWidth = haxe_ui_styles_ValueTools.percent(v.value);
				break;
			case "layout":
				if(v.value._hx_index == 9) {
					this.layout = null;
				} else {
					this.layout = haxe_ui_styles_ValueTools.string(v.value);
				}
				break;
			case "left":
				this.left = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "margin-bottom":
				this.marginBottom = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "margin-left":
				this.marginLeft = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "margin-right":
				this.marginRight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "margin-top":
				this.marginTop = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "max-height":
				this.maxHeight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				this.maxPercentHeight = haxe_ui_styles_ValueTools.percent(v.value);
				break;
			case "max-width":
				this.maxWidth = haxe_ui_styles_ValueTools.calcDimension(v.value);
				this.maxPercentWidth = haxe_ui_styles_ValueTools.percent(v.value);
				break;
			case "min-height":
				this.minHeight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				this.minPercentHeight = haxe_ui_styles_ValueTools.percent(v.value);
				break;
			case "min-width":
				this.minWidth = haxe_ui_styles_ValueTools.calcDimension(v.value);
				this.minPercentWidth = haxe_ui_styles_ValueTools.percent(v.value);
				break;
			case "mode":
				this.mode = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "native":
				this.native = haxe_ui_styles_ValueTools.bool(v.value);
				break;
			case "opacity":
				this.opacity = haxe_ui_styles_ValueTools.float(v.value);
				break;
			case "padding-bottom":
				this.paddingBottom = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "padding-left":
				this.paddingLeft = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "padding-right":
				this.paddingRight = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "padding-top":
				this.paddingTop = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "pointer-events":
				if(v.value._hx_index == 9) {
					this.pointerEvents = "none";
				} else {
					this.pointerEvents = haxe_ui_styles_ValueTools.string(v.value);
				}
				break;
			case "resource":
				this.resource = haxe_ui_styles_ValueTools.variant(v.value);
				break;
			case "text-align":
				this.textAlign = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "text-decoration":
				if(haxe_ui_styles_ValueTools.string(v.value) != null) {
					this.fontUnderline = haxe_ui_styles_ValueTools.string(v.value).toLowerCase() == "underline";
					this.fontStrikeThrough = haxe_ui_styles_ValueTools.string(v.value).toLowerCase() == "line-through";
				}
				break;
			case "top":
				this.top = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "vertical-align":
				this.verticalAlign = haxe_ui_styles_ValueTools.string(v.value);
				break;
			case "vertical-spacing":
				this.verticalSpacing = haxe_ui_styles_ValueTools.calcDimension(v.value);
				break;
			case "width":
				this.autoWidth = haxe_ui_styles_ValueTools.constant(v.value,"auto");
				this.width = haxe_ui_styles_ValueTools.calcDimension(v.value);
				this.percentWidth = haxe_ui_styles_ValueTools.percent(v.value);
				break;
			case "word-wrap":
				this.wordWrap = haxe_ui_styles_ValueTools.bool(v.value);
				break;
			}
		}
	}
	,apply: function(s) {
		if(s.cursor != null) {
			this.cursor = s.cursor;
		}
		if(s.hidden != null) {
			this.hidden = s.hidden;
		}
		if(s.left != null) {
			this.left = s.left;
		}
		if(s.top != null) {
			this.top = s.top;
		}
		if(s.autoWidth != null) {
			this.autoWidth = s.autoWidth;
		}
		if(s.autoHeight != null) {
			this.autoHeight = s.autoHeight;
		}
		if(s.verticalSpacing != null) {
			this.verticalSpacing = s.verticalSpacing;
		}
		if(s.horizontalSpacing != null) {
			this.horizontalSpacing = s.horizontalSpacing;
		}
		if(s.width != null) {
			this.width = s.width;
			this.autoWidth = false;
		}
		if(s.initialWidth != null) {
			this.initialWidth = s.initialWidth;
		}
		if(s.initialPercentWidth != null) {
			this.initialPercentWidth = s.initialPercentWidth;
		}
		if(s.minWidth != null) {
			this.minWidth = s.minWidth;
		}
		if(s.minPercentWidth != null) {
			this.minPercentWidth = s.minPercentWidth;
		}
		if(s.maxWidth != null) {
			this.maxWidth = s.maxWidth;
		}
		if(s.maxPercentWidth != null) {
			this.maxPercentWidth = s.maxPercentWidth;
		}
		if(s.height != null) {
			this.height = s.height;
			this.autoHeight = false;
		}
		if(s.initialHeight != null) {
			this.initialHeight = s.initialHeight;
		}
		if(s.initialPercentHeight != null) {
			this.initialPercentHeight = s.initialPercentHeight;
		}
		if(s.minHeight != null) {
			this.minHeight = s.minHeight;
		}
		if(s.minPercentHeight != null) {
			this.minPercentHeight = s.minPercentHeight;
		}
		if(s.maxHeight != null) {
			this.maxHeight = s.maxHeight;
		}
		if(s.maxPercentHeight != null) {
			this.maxPercentHeight = s.maxPercentHeight;
		}
		if(s.percentWidth != null) {
			this.percentWidth = s.percentWidth;
			this.autoWidth = false;
		}
		if(s.percentHeight != null) {
			this.percentHeight = s.percentHeight;
			this.autoHeight = false;
		}
		if(s.paddingTop != null) {
			this.paddingTop = s.paddingTop;
		}
		if(s.paddingLeft != null) {
			this.paddingLeft = s.paddingLeft;
		}
		if(s.paddingRight != null) {
			this.paddingRight = s.paddingRight;
		}
		if(s.paddingBottom != null) {
			this.paddingBottom = s.paddingBottom;
		}
		if(s.marginTop != null) {
			this.marginTop = s.marginTop;
		}
		if(s.marginLeft != null) {
			this.marginLeft = s.marginLeft;
		}
		if(s.marginRight != null) {
			this.marginRight = s.marginRight;
		}
		if(s.marginBottom != null) {
			this.marginBottom = s.marginBottom;
		}
		if(s.color != null) {
			this.color = s.color;
		}
		if(s.backgroundColor != null) {
			this.backgroundColor = s.backgroundColor;
			this.backgroundColorEnd = null;
		}
		if(s.backgroundColorEnd != null) {
			this.backgroundColorEnd = s.backgroundColorEnd;
		}
		if(s.backgroundGradientStyle != null) {
			this.backgroundGradientStyle = s.backgroundGradientStyle;
		}
		if(s.backgroundOpacity != null) {
			this.backgroundOpacity = s.backgroundOpacity;
		}
		if(s.backgroundImage != null) {
			this.backgroundImage = s.backgroundImage;
		}
		if(s.backgroundImageRepeat != null) {
			this.backgroundImageRepeat = s.backgroundImageRepeat;
		}
		if(s.backgroundImageClipTop != null) {
			this.backgroundImageClipTop = s.backgroundImageClipTop;
		}
		if(s.backgroundImageClipLeft != null) {
			this.backgroundImageClipLeft = s.backgroundImageClipLeft;
		}
		if(s.backgroundImageClipBottom != null) {
			this.backgroundImageClipBottom = s.backgroundImageClipBottom;
		}
		if(s.backgroundImageClipRight != null) {
			this.backgroundImageClipRight = s.backgroundImageClipRight;
		}
		if(s.backgroundImageSliceTop != null) {
			this.backgroundImageSliceTop = s.backgroundImageSliceTop;
		}
		if(s.backgroundImageSliceLeft != null) {
			this.backgroundImageSliceLeft = s.backgroundImageSliceLeft;
		}
		if(s.backgroundImageSliceBottom != null) {
			this.backgroundImageSliceBottom = s.backgroundImageSliceBottom;
		}
		if(s.backgroundImageSliceRight != null) {
			this.backgroundImageSliceRight = s.backgroundImageSliceRight;
		}
		if(s.borderColor != null) {
			this.borderColor = s.borderColor;
		}
		if(s.borderTopColor != null) {
			this.borderTopColor = s.borderTopColor;
		}
		if(s.borderLeftColor != null) {
			this.borderLeftColor = s.borderLeftColor;
		}
		if(s.borderBottomColor != null) {
			this.borderBottomColor = s.borderBottomColor;
		}
		if(s.borderRightColor != null) {
			this.borderRightColor = s.borderRightColor;
		}
		if(s.borderSize != null) {
			this.borderSize = s.borderSize;
		}
		if(s.borderTopSize != null) {
			this.borderTopSize = s.borderTopSize;
		}
		if(s.borderLeftSize != null) {
			this.borderLeftSize = s.borderLeftSize;
		}
		if(s.borderBottomSize != null) {
			this.borderBottomSize = s.borderBottomSize;
		}
		if(s.borderRightSize != null) {
			this.borderRightSize = s.borderRightSize;
		}
		if(s.borderRadius != null) {
			this.borderRadius = s.borderRadius;
		}
		if(s.borderRadiusTopLeft != null) {
			this.borderRadiusTopLeft = s.borderRadiusTopLeft;
		}
		if(s.borderRadiusTopRight != null) {
			this.borderRadiusTopRight = s.borderRadiusTopRight;
		}
		if(s.borderRadiusBottomLeft != null) {
			this.borderRadiusBottomLeft = s.borderRadiusBottomLeft;
		}
		if(s.borderRadiusBottomRight != null) {
			this.borderRadiusBottomRight = s.borderRadiusBottomRight;
		}
		if(s.borderOpacity != null) {
			this.borderOpacity = s.borderOpacity;
		}
		if(s.borderStyle != null) {
			this.borderStyle = s.borderStyle;
		}
		if(s.filter != null) {
			this.filter = s.filter.slice();
		}
		if(s.backdropFilter != null) {
			this.backdropFilter = s.backdropFilter.slice();
		}
		if(s.resource != null) {
			this.resource = s.resource;
		}
		if(s.icon != null) {
			this.icon = s.icon;
		}
		if(s.iconPosition != null) {
			this.iconPosition = s.iconPosition;
		}
		if(s.horizontalAlign != null) {
			this.horizontalAlign = s.horizontalAlign;
		}
		if(s.verticalAlign != null) {
			this.verticalAlign = s.verticalAlign;
		}
		if(s.textAlign != null) {
			this.textAlign = s.textAlign;
		}
		if(s.opacity != null) {
			this.opacity = s.opacity;
		}
		if(s.clip != null) {
			this.clip = s.clip;
		}
		if(s.native != null) {
			this.native = s.native;
		}
		if(s.fontName != null) {
			this.fontName = s.fontName;
		}
		if(s.fontSize != null) {
			this.fontSize = s.fontSize;
		}
		if(s.fontBold != null) {
			this.fontBold = s.fontBold;
		}
		if(s.fontUnderline != null) {
			this.fontUnderline = s.fontUnderline;
		}
		if(s.fontStrikeThrough != null) {
			this.fontStrikeThrough = s.fontStrikeThrough;
		}
		if(s.fontItalic != null) {
			this.fontItalic = s.fontItalic;
		}
		if(s.animationName != null) {
			this.animationName = s.animationName;
		}
		if(s.animationOptions != null) {
			if(this.animationOptions == null) {
				this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
			}
			if(s.animationOptions.duration != null) {
				this.animationOptions.duration = s.animationOptions.duration;
			}
			if(s.animationOptions.delay != null) {
				this.animationOptions.delay = s.animationOptions.delay;
			}
			if(s.animationOptions.iterationCount != null) {
				this.animationOptions.iterationCount = s.animationOptions.iterationCount;
			}
			if(s.animationOptions.easingFunction != null) {
				this.animationOptions.easingFunction = s.animationOptions.easingFunction;
			}
			if(s.animationOptions.direction != null) {
				this.animationOptions.direction = s.animationOptions.direction;
			}
			if(s.animationOptions.fillMode != null) {
				this.animationOptions.fillMode = s.animationOptions.fillMode;
			}
		}
		if(s.mode != null) {
			this.mode = s.mode;
		}
		if(s.pointerEvents != null) {
			this.pointerEvents = s.pointerEvents;
		}
		if(s.contentType != null) {
			this.contentType = s.contentType;
		}
		if(s.direction != null) {
			this.direction = s.direction;
		}
		if(s.contentWidth != null) {
			this.contentWidth = s.contentWidth;
		}
		if(s.contentWidthPercent != null) {
			this.contentWidthPercent = s.contentWidthPercent;
		}
		if(s.contentHeight != null) {
			this.contentHeight = s.contentHeight;
		}
		if(s.contentHeightPercent != null) {
			this.contentHeightPercent = s.contentHeightPercent;
		}
		if(s.wordWrap != null) {
			this.wordWrap = s.wordWrap;
		}
		if(s.imageRendering != null) {
			this.imageRendering = s.imageRendering;
		}
		if(s.layout != null) {
			this.layout = s.layout;
		}
	}
	,equalTo: function(s) {
		if(s.backgroundColor != this.backgroundColor) {
			return false;
		}
		if(s.backgroundColorEnd != this.backgroundColorEnd) {
			return false;
		}
		if(s.backgroundGradientStyle != this.backgroundGradientStyle) {
			return false;
		}
		if(s.backgroundOpacity != this.backgroundOpacity) {
			return false;
		}
		if(s.borderColor != this.borderColor) {
			return false;
		}
		if(s.borderTopColor != this.borderTopColor) {
			return false;
		}
		if(s.borderLeftColor != this.borderLeftColor) {
			return false;
		}
		if(s.borderBottomColor != this.borderBottomColor) {
			return false;
		}
		if(s.borderRightColor != this.borderRightColor) {
			return false;
		}
		if(s.borderSize != this.borderSize) {
			return false;
		}
		if(s.borderTopSize != this.borderTopSize) {
			return false;
		}
		if(s.borderLeftSize != this.borderLeftSize) {
			return false;
		}
		if(s.borderBottomSize != this.borderBottomSize) {
			return false;
		}
		if(s.borderRightSize != this.borderRightSize) {
			return false;
		}
		if(s.borderRadius != this.borderRadius) {
			return false;
		}
		if(s.borderRadiusTopLeft != this.borderRadiusTopLeft) {
			return false;
		}
		if(s.borderRadiusTopRight != this.borderRadiusTopRight) {
			return false;
		}
		if(s.borderRadiusBottomLeft != this.borderRadiusBottomLeft) {
			return false;
		}
		if(s.borderRadiusBottomRight != this.borderRadiusBottomRight) {
			return false;
		}
		if(s.borderOpacity != this.borderOpacity) {
			return false;
		}
		if(s.borderStyle != this.borderStyle) {
			return false;
		}
		if(s.color != this.color) {
			return false;
		}
		if(s.cursor != this.cursor) {
			return false;
		}
		if(s.hidden != this.hidden) {
			return false;
		}
		if(s.left != this.left) {
			return false;
		}
		if(s.top != this.top) {
			return false;
		}
		if(s.autoWidth != this.autoWidth) {
			return false;
		}
		if(s.autoHeight != this.autoHeight) {
			return false;
		}
		if(s.verticalSpacing != this.verticalSpacing) {
			return false;
		}
		if(s.horizontalSpacing != this.horizontalSpacing) {
			return false;
		}
		if(s.width != this.width) {
			return false;
		}
		if(s.initialWidth != this.initialWidth) {
			return false;
		}
		if(s.initialPercentWidth != this.initialPercentWidth) {
			return false;
		}
		if(s.minWidth != this.minWidth) {
			return false;
		}
		if(s.minPercentWidth != this.minPercentWidth) {
			return false;
		}
		if(s.maxWidth != this.maxWidth) {
			return false;
		}
		if(s.maxPercentWidth != this.maxPercentWidth) {
			return false;
		}
		if(s.height != this.height) {
			return false;
		}
		if(s.initialHeight != this.initialHeight) {
			return false;
		}
		if(s.initialPercentHeight != this.initialPercentHeight) {
			return false;
		}
		if(s.minHeight != this.minHeight) {
			return false;
		}
		if(s.minPercentHeight != this.minPercentHeight) {
			return false;
		}
		if(s.maxHeight != this.maxHeight) {
			return false;
		}
		if(s.maxPercentHeight != this.maxPercentHeight) {
			return false;
		}
		if(s.percentWidth != this.percentWidth) {
			return false;
		}
		if(s.percentHeight != this.percentHeight) {
			return false;
		}
		if(s.paddingTop != this.paddingTop) {
			return false;
		}
		if(s.paddingLeft != this.paddingLeft) {
			return false;
		}
		if(s.paddingRight != this.paddingRight) {
			return false;
		}
		if(s.paddingBottom != this.paddingBottom) {
			return false;
		}
		if(s.marginTop != this.marginTop) {
			return false;
		}
		if(s.marginLeft != this.marginLeft) {
			return false;
		}
		if(s.marginRight != this.marginRight) {
			return false;
		}
		if(s.marginBottom != this.marginBottom) {
			return false;
		}
		if(haxe_ui_util_Variant.neq(s.backgroundImage,this.backgroundImage)) {
			return false;
		}
		if(s.backgroundImageRepeat != this.backgroundImageRepeat) {
			return false;
		}
		if(s.backgroundImageClipTop != this.backgroundImageClipTop) {
			return false;
		}
		if(s.backgroundImageClipLeft != this.backgroundImageClipLeft) {
			return false;
		}
		if(s.backgroundImageClipBottom != this.backgroundImageClipBottom) {
			return false;
		}
		if(s.backgroundImageClipRight != this.backgroundImageClipRight) {
			return false;
		}
		if(s.backgroundImageSliceTop != this.backgroundImageSliceTop) {
			return false;
		}
		if(s.backgroundImageSliceLeft != this.backgroundImageSliceLeft) {
			return false;
		}
		if(s.backgroundImageSliceBottom != this.backgroundImageSliceBottom) {
			return false;
		}
		if(s.backgroundImageSliceRight != this.backgroundImageSliceRight) {
			return false;
		}
		if(s.filter != this.filter) {
			return false;
		}
		if(s.backdropFilter != this.backdropFilter) {
			return false;
		}
		if(haxe_ui_util_Variant.neq(s.resource,this.resource)) {
			return false;
		}
		if(haxe_ui_util_Variant.neq(s.icon,this.icon)) {
			return false;
		}
		if(s.iconPosition != this.iconPosition) {
			return false;
		}
		if(s.horizontalAlign != this.horizontalAlign) {
			return false;
		}
		if(s.verticalAlign != this.verticalAlign) {
			return false;
		}
		if(s.textAlign != this.textAlign) {
			return false;
		}
		if(s.opacity != this.opacity) {
			return false;
		}
		if(s.clip != this.clip) {
			return false;
		}
		if(s.native != this.native) {
			return false;
		}
		if(s.fontName != this.fontName) {
			return false;
		}
		if(s.fontSize != this.fontSize) {
			return false;
		}
		if(s.fontBold != this.fontBold) {
			return false;
		}
		if(s.fontUnderline != this.fontUnderline) {
			return false;
		}
		if(s.fontStrikeThrough != this.fontStrikeThrough) {
			return false;
		}
		if(s.fontItalic != this.fontItalic) {
			return false;
		}
		if(haxe_ui_util_Variant.neq(s.resource,this.resource)) {
			return false;
		}
		if(s.animationName != this.animationName) {
			return false;
		}
		if(this.animationOptions != null && this.animationOptions.compareTo(s.animationOptions) == false) {
			return false;
		}
		if(s.mode != this.mode) {
			return false;
		}
		if(s.pointerEvents != this.pointerEvents) {
			return false;
		}
		if(s.contentType != this.contentType) {
			return false;
		}
		if(s.direction != this.direction) {
			return false;
		}
		if(s.contentWidth != this.contentWidth) {
			return false;
		}
		if(s.contentWidthPercent != this.contentWidthPercent) {
			return false;
		}
		if(s.contentHeight != this.contentHeight) {
			return false;
		}
		if(s.contentHeightPercent != this.contentHeightPercent) {
			return false;
		}
		if(s.wordWrap != this.wordWrap) {
			return false;
		}
		if(s.imageRendering != this.imageRendering) {
			return false;
		}
		if(s.layout != this.layout) {
			return false;
		}
		return true;
	}
	,createAnimationOptions: function() {
		if(this.animationOptions == null) {
			this.animationOptions = new haxe_ui_styles_animation_AnimationOptions(null,null,null,null,null,null);
		}
	}
	,clone: function() {
		var c = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		c.apply(this);
		return c;
	}
	,__class__: haxe_ui_styles_Style
	,__properties__: {get_fullBorderSize:"get_fullBorderSize",get_hasBorder:"get_hasBorder",get_borderType:"get_borderType",set_padding:"set_padding"}
};
var haxe_ui_styles_StyleLookupMap = function() {
	this._valueMap = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.styles.StyleLookupMap"] = haxe_ui_styles_StyleLookupMap;
haxe_ui_styles_StyleLookupMap.__name__ = "haxe.ui.styles.StyleLookupMap";
haxe_ui_styles_StyleLookupMap.__properties__ = {get_instance:"get_instance"};
haxe_ui_styles_StyleLookupMap._instance = null;
haxe_ui_styles_StyleLookupMap.instance = null;
haxe_ui_styles_StyleLookupMap.get_instance = function() {
	if(haxe_ui_styles_StyleLookupMap._instance == null) {
		haxe_ui_styles_StyleLookupMap._instance = new haxe_ui_styles_StyleLookupMap();
	}
	return haxe_ui_styles_StyleLookupMap._instance;
};
haxe_ui_styles_StyleLookupMap.prototype = {
	_valueMap: null
	,set: function(name,value) {
		this._valueMap.h[name] = value;
	}
	,get: function(name) {
		return this._valueMap.h[name];
	}
	,remove: function(name) {
		var _this = this._valueMap;
		if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
			delete(_this.h[name]);
		}
	}
	,__class__: haxe_ui_styles_StyleLookupMap
};
var haxe_ui_styles_StyleSheet = function() {
	this._animations = new haxe_ds_StringMap();
	this._mediaQueries = [];
	this._rules = [];
	this._imports = [];
};
$hxClasses["haxe.ui.styles.StyleSheet"] = haxe_ui_styles_StyleSheet;
haxe_ui_styles_StyleSheet.__name__ = "haxe.ui.styles.StyleSheet";
haxe_ui_styles_StyleSheet.prototype = {
	name: null
	,_imports: null
	,_rules: null
	,_mediaQueries: null
	,_animations: null
	,get_animations: function() {
		return this._animations;
	}
	,addImport: function(el) {
		this._imports.push(el);
	}
	,imports: null
	,get_imports: function() {
		return this._imports;
	}
	,rules: null
	,get_rules: function() {
		var r = this._rules.slice();
		var _g = 0;
		var _g1 = this._mediaQueries;
		while(_g < _g1.length) {
			var mq = _g1[_g];
			++_g;
			if(mq.get_relevant()) {
				r = r.concat(mq.get_styleSheet().get_rules());
			}
		}
		return r;
	}
	,hasMediaQueries: null
	,get_hasMediaQueries: function() {
		return this._mediaQueries.length > 0;
	}
	,findRule: function(selector) {
		var _g = 0;
		var _g1 = this.get_rules();
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			if(r.selector.toString() == selector) {
				return r;
			}
		}
		return null;
	}
	,findMatchingRules: function(selector) {
		var m = [];
		var _g = 0;
		var _g1 = this.get_rules();
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			if(r.selector.toString() == selector) {
				m.push(r);
			}
		}
		return m;
	}
	,removeRule: function(selector) {
		var r = this.findRule(selector);
		if(r != null) {
			HxOverrides.remove(this._rules,r);
		}
	}
	,removeAllRules: function() {
		this._rules = [];
	}
	,clear: function() {
		this.removeAllRules();
		this._imports = [];
		this._mediaQueries = [];
		this._animations = new haxe_ds_StringMap();
	}
	,addRule: function(el) {
		if(el.directiveCount == 0) {
			return;
		}
		this._rules.push(el);
	}
	,addMediaQuery: function(el) {
		this._mediaQueries.push(el);
	}
	,addAnimation: function(el) {
		this._animations.h[el.id] = el;
	}
	,parse: function(css) {
		var parser = new haxe_ui_styles_Parser();
		var ss = parser.parse(css);
		var f = new haxe_ui_styles_StyleSheet();
		var _g = 0;
		var _g1 = ss.get_imports();
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var importCss = haxe_ui_ToolkitAssets.get_instance().getText(i.url);
			var importStyleSheet = new haxe_ui_styles_Parser().parse(importCss);
			f.merge(importStyleSheet);
		}
		f.merge(ss);
		this.merge(f);
	}
	,merge: function(styleSheet) {
		this._imports = this._imports.concat(styleSheet._imports);
		this._rules = this._rules.concat(styleSheet._rules);
		this._mediaQueries = this._mediaQueries.concat(styleSheet._mediaQueries);
		var h = styleSheet._animations.h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			this._animations.h[k] = styleSheet._animations.h[k];
		}
	}
	,buildStyleFor: function(c,style) {
		if(style == null) {
			style = new haxe_ui_styles_Style(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
		}
		var _g = 0;
		var _g1 = this.get_rules();
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			if(!r.match(c)) {
				continue;
			}
			style.mergeDirectives(r.directives);
		}
		return style;
	}
	,__class__: haxe_ui_styles_StyleSheet
	,__properties__: {get_hasMediaQueries:"get_hasMediaQueries",get_rules:"get_rules",get_imports:"get_imports",get_animations:"get_animations"}
};
var haxe_ui_styles_Value = $hxEnums["haxe.ui.styles.Value"] = { __ename__:"haxe.ui.styles.Value",__constructs__:null
	,VString: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_._hx_name="VString",$_.__params__ = ["v"],$_)
	,VNumber: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_._hx_name="VNumber",$_.__params__ = ["v"],$_)
	,VBool: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_._hx_name="VBool",$_.__params__ = ["v"],$_)
	,VDimension: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_._hx_name="VDimension",$_.__params__ = ["v"],$_)
	,VColor: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_._hx_name="VColor",$_.__params__ = ["v"],$_)
	,VCall: ($_=function(f,vl) { return {_hx_index:5,f:f,vl:vl,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_._hx_name="VCall",$_.__params__ = ["f","vl"],$_)
	,VConstant: ($_=function(v) { return {_hx_index:6,v:v,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_._hx_name="VConstant",$_.__params__ = ["v"],$_)
	,VComposite: ($_=function(vl) { return {_hx_index:7,vl:vl,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_._hx_name="VComposite",$_.__params__ = ["vl"],$_)
	,VTime: ($_=function(v,unit) { return {_hx_index:8,v:v,unit:unit,__enum__:"haxe.ui.styles.Value",toString:$estr}; },$_._hx_name="VTime",$_.__params__ = ["v","unit"],$_)
	,VNone: {_hx_name:"VNone",_hx_index:9,__enum__:"haxe.ui.styles.Value",toString:$estr}
};
haxe_ui_styles_Value.__constructs__ = [haxe_ui_styles_Value.VString,haxe_ui_styles_Value.VNumber,haxe_ui_styles_Value.VBool,haxe_ui_styles_Value.VDimension,haxe_ui_styles_Value.VColor,haxe_ui_styles_Value.VCall,haxe_ui_styles_Value.VConstant,haxe_ui_styles_Value.VComposite,haxe_ui_styles_Value.VTime,haxe_ui_styles_Value.VNone];
haxe_ui_styles_Value.__empty_constructs__ = [haxe_ui_styles_Value.VNone];
var haxe_ui_styles_ValueTools = function() { };
$hxClasses["haxe.ui.styles.ValueTools"] = haxe_ui_styles_ValueTools;
haxe_ui_styles_ValueTools.__name__ = "haxe.ui.styles.ValueTools";
haxe_ui_styles_ValueTools.parse = function(s) {
	var v = null;
	var hasSpace = s.indexOf(" ") != -1;
	if(StringTools.endsWith(s,"%") == true && hasSpace == false) {
		v = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PERCENT(parseFloat(s)));
	} else if(StringTools.endsWith(s,"px") == true && hasSpace == false) {
		v = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.PX(parseFloat(s)));
	} else if(StringTools.endsWith(s,"vw") == true && hasSpace == false) {
		v = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.VW(parseFloat(s)));
	} else if(StringTools.endsWith(s,"vh") == true && hasSpace == false) {
		v = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.VH(parseFloat(s)));
	} else if(StringTools.endsWith(s,"rem") == true && hasSpace == false) {
		v = haxe_ui_styles_Value.VDimension(haxe_ui_styles_Dimension.REM(parseFloat(s)));
	} else if(haxe_ui_styles_ValueTools.validColor(s)) {
		v = haxe_ui_styles_ValueTools.parseColor(s);
	} else if(s == "none") {
		v = haxe_ui_styles_Value.VNone;
	} else if(s.indexOf("(") != -1 && StringTools.endsWith(s,")")) {
		var n = s.indexOf("(");
		var f = HxOverrides.substr(s,0,n);
		var params = HxOverrides.substr(s,n + 1,s.length - n - 2);
		if(f == "calc") {
			params = "'" + params + "'";
		}
		var vl = [];
		var _g = 0;
		var _g1 = params.split(",");
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p = StringTools.trim(p);
			vl.push(haxe_ui_styles_ValueTools.parse(p));
		}
		v = haxe_ui_styles_Value.VCall(f,vl);
	} else if(StringTools.startsWith(s,"\"") && StringTools.endsWith(s,"\"")) {
		v = haxe_ui_styles_Value.VString(HxOverrides.substr(s,1,s.length - 2));
	} else if(StringTools.startsWith(s,"'") && StringTools.endsWith(s,"'")) {
		v = haxe_ui_styles_Value.VString(HxOverrides.substr(s,1,s.length - 2));
	} else if(haxe_ui_styles_ValueTools.isNum(s) == true) {
		v = haxe_ui_styles_Value.VNumber(parseFloat(s));
	} else if(s == "true" || s == "false") {
		v = haxe_ui_styles_Value.VBool(s == "true");
	} else if(haxe_ui_styles_ValueTools.timeEReg.match(s)) {
		v = haxe_ui_styles_Value.VTime(parseFloat(haxe_ui_styles_ValueTools.timeEReg.matched(1)),haxe_ui_styles_ValueTools.timeEReg.matched(2));
	} else {
		var arr = s.split(" ");
		if(arr.length == 1) {
			v = haxe_ui_styles_Value.VConstant(s);
		} else {
			var vl = [];
			var _g = 0;
			while(_g < arr.length) {
				var a = arr[_g];
				++_g;
				a = StringTools.trim(a);
				vl.push(haxe_ui_styles_ValueTools.parse(a));
			}
			v = haxe_ui_styles_Value.VComposite(vl);
		}
	}
	return v;
};
haxe_ui_styles_ValueTools.compositeParts = function(value) {
	if(value == null) {
		return 0;
	}
	if(value._hx_index == 7) {
		var vl = value.vl;
		return vl.length;
	} else {
		return 0;
	}
};
haxe_ui_styles_ValueTools.composite = function(value) {
	if(value == null) {
		return null;
	}
	switch(value._hx_index) {
	case 1:
		var _g = value.v;
		return [value];
	case 3:
		var _g = value.v;
		return [value];
	case 7:
		var vl = value.vl;
		return vl;
	case 9:
		return [];
	default:
		return null;
	}
};
haxe_ui_styles_ValueTools.isNum = function(s) {
	var b = true;
	var _g = 0;
	var _g1 = s.length;
	while(_g < _g1) {
		var i = _g++;
		var c = HxOverrides.cca(s,i);
		if(!(c >= 48 && c <= 57 || c == 46 || c == 45)) {
			b = false;
			break;
		}
	}
	return b;
};
haxe_ui_styles_ValueTools.parseColor = function(s) {
	if(StringTools.startsWith(s,"#")) {
		s = s.substring(1);
		if(s.length == 6) {
			return haxe_ui_styles_Value.VColor(Std.parseInt("0x" + s));
		} else if(s.length == 3) {
			return haxe_ui_styles_Value.VColor(Std.parseInt("0x" + s.charAt(0) + s.charAt(0) + s.charAt(1) + s.charAt(1) + s.charAt(2) + s.charAt(2)));
		}
	} else if(Object.prototype.hasOwnProperty.call(haxe_ui_styles_ValueTools.colors.h,s)) {
		return haxe_ui_styles_Value.VColor(haxe_ui_styles_ValueTools.colors.h[s]);
	}
	return null;
};
haxe_ui_styles_ValueTools.validColor = function(s) {
	if(StringTools.startsWith(s,"#") && (s.length == 7 || s.length == 4)) {
		return true;
	} else if(Object.prototype.hasOwnProperty.call(haxe_ui_styles_ValueTools.colors.h,s)) {
		return true;
	}
	return false;
};
haxe_ui_styles_ValueTools.time = function(value) {
	if(value == null) {
		return null;
	}
	if(value._hx_index == 8) {
		var v = value.v;
		var unit = value.unit;
		switch(unit) {
		case "ms":
			return v / 1000;
		case "s":
			return v;
		default:
			return null;
		}
	} else {
		return null;
	}
};
haxe_ui_styles_ValueTools.variant = function(value) {
	if(value == null) {
		return null;
	}
	switch(value._hx_index) {
	case 0:
		var v = value.v;
		return haxe_ui_util_Variant.fromDynamic(v);
	case 1:
		var v = value.v;
		return haxe_ui_util_Variant.fromDynamic(v);
	case 2:
		var v = value.v;
		return haxe_ui_util_Variant.fromDynamic(v);
	case 5:
		var f = value.f;
		var vl = value.vl;
		return haxe_ui_util_Variant.fromDynamic(haxe_ui_styles_ValueTools.call(f,vl));
	case 6:
		var v = value.v;
		return haxe_ui_util_Variant.fromDynamic(v);
	default:
		return null;
	}
};
haxe_ui_styles_ValueTools.string = function(value) {
	if(value == null) {
		return null;
	}
	switch(value._hx_index) {
	case 0:
		var v = value.v;
		return v;
	case 2:
		var v = value.v;
		if(v == null) {
			return "null";
		} else {
			return "" + v;
		}
		break;
	case 5:
		var f = value.f;
		var vl = value.vl;
		return haxe_ui_styles_ValueTools.call(f,vl);
	case 6:
		var v = value.v;
		return v;
	default:
		return null;
	}
};
haxe_ui_styles_ValueTools.bool = function(value) {
	if(value == null) {
		return null;
	}
	if(value._hx_index == 2) {
		var v = value.v;
		return v;
	} else {
		return null;
	}
};
haxe_ui_styles_ValueTools.none = function(value) {
	if(value == null) {
		return null;
	}
	if(value._hx_index == 9) {
		return true;
	} else {
		return null;
	}
};
haxe_ui_styles_ValueTools.int = function(value) {
	if(value == null) {
		return null;
	}
	switch(value._hx_index) {
	case 1:
		var v = value.v;
		return v | 0;
	case 4:
		var v = value.v;
		return v;
	case 5:
		var f = value.f;
		var vl = value.vl;
		return haxe_ui_styles_ValueTools.call(f,vl);
	case 9:
		return null;
	default:
		return null;
	}
};
haxe_ui_styles_ValueTools.float = function(value) {
	if(value == null) {
		return null;
	}
	switch(value._hx_index) {
	case 1:
		var v = value.v;
		return v;
	case 4:
		var v = value.v;
		return v;
	case 9:
		return null;
	default:
		return null;
	}
};
haxe_ui_styles_ValueTools.any = function(v) {
	if(v == null) {
		return null;
	}
	switch(v._hx_index) {
	case 1:
		var v1 = v.v;
		return v1;
	case 2:
		var v1 = v.v;
		return v1;
	case 3:
		var _g = v.v;
		if(_g._hx_index == 1) {
			var v1 = _g.value;
			return v1;
		} else {
			return null;
		}
		break;
	case 4:
		var v1 = v.v;
		return v1;
	default:
		return null;
	}
};
haxe_ui_styles_ValueTools.array = function(vl) {
	var arr = [];
	var _g = 0;
	while(_g < vl.length) {
		var v = vl[_g];
		++_g;
		var a = haxe_ui_styles_ValueTools.any(v);
		if(a != null) {
			arr.push(a);
		}
	}
	return arr;
};
haxe_ui_styles_ValueTools.percent = function(value) {
	if(value == null) {
		return null;
	}
	if(value._hx_index == 3) {
		var v = value.v;
		if(v._hx_index == 0) {
			var d = v.value;
			return d;
		} else {
			return null;
		}
	} else {
		return null;
	}
};
haxe_ui_styles_ValueTools.constant = function(value,required) {
	if(value == null) {
		return false;
	}
	if(value._hx_index == 6) {
		var v = value.v;
		return v == required;
	} else {
		return false;
	}
};
haxe_ui_styles_ValueTools.calcDimension = function(value) {
	if(value == null) {
		return null;
	}
	switch(value._hx_index) {
	case 1:
		var v = value.v;
		return v;
	case 3:
		var v = value.v;
		switch(v._hx_index) {
		case 1:
			var d = v.value;
			return d;
		case 2:
			var d = v.value;
			return d / 100 * haxe_ui_core_Screen.get_instance().get_width();
		case 3:
			var d = v.value;
			return d / 100 * haxe_ui_core_Screen.get_instance().get_height();
		case 4:
			var d = v.value;
			return d * haxe_ui_Toolkit.pixelsPerRem;
		default:
			return null;
		}
		break;
	case 5:
		var f = value.f;
		var vl = value.vl;
		return haxe_ui_styles_ValueTools.call(f,vl);
	case 9:
		return null;
	default:
		return null;
	}
};
haxe_ui_styles_ValueTools.calcEasing = function(value) {
	switch(value._hx_index) {
	case 0:
		var v = value.v;
		switch(v) {
		case "ease":
			return haxe_ui_styles_EasingFunction.EASE;
		case "ease-in":
			return haxe_ui_styles_EasingFunction.EASE_IN;
		case "ease-in-out":
			return haxe_ui_styles_EasingFunction.EASE_IN_OUT;
		case "ease-out":
			return haxe_ui_styles_EasingFunction.EASE_OUT;
		case "linear":
			return haxe_ui_styles_EasingFunction.LINEAR;
		default:
			return null;
		}
		break;
	case 6:
		var v = value.v;
		switch(v) {
		case "ease":
			return haxe_ui_styles_EasingFunction.EASE;
		case "ease-in":
			return haxe_ui_styles_EasingFunction.EASE_IN;
		case "ease-in-out":
			return haxe_ui_styles_EasingFunction.EASE_IN_OUT;
		case "ease-out":
			return haxe_ui_styles_EasingFunction.EASE_OUT;
		case "linear":
			return haxe_ui_styles_EasingFunction.LINEAR;
		default:
			return null;
		}
		break;
	default:
		return null;
	}
};
haxe_ui_styles_ValueTools.call = function(f,vl) {
	switch(f) {
	case "calc":
		return null;
	case "clamp":
		var valNum = haxe_ui_styles_ValueTools.calcDimension(vl[0]);
		var minNum = haxe_ui_styles_ValueTools.calcDimension(vl[1]);
		var maxNum = haxe_ui_styles_ValueTools.calcDimension(vl[2]);
		if(valNum == null || minNum == null || maxNum == null) {
			return null;
		} else if(valNum < minNum) {
			return minNum;
		} else if(valNum > maxNum) {
			return maxNum;
		} else {
			return valNum;
		}
		break;
	case "lookup":
		return haxe_ui_util_Variant.toDynamic(haxe_ui_styles_StyleLookupMap.get_instance().get(haxe_ui_styles_ValueTools.string(vl[0])));
	case "max":
		var maxv = -Infinity;
		var _g = 0;
		while(_g < vl.length) {
			var val = vl[_g];
			++_g;
			var num = haxe_ui_styles_ValueTools.calcDimension(val);
			if(num == null) {
				return null;
			} else if(num > maxv) {
				maxv = num;
			}
		}
		return maxv;
	case "min":
		var minv = Infinity;
		var _g = 0;
		while(_g < vl.length) {
			var val = vl[_g];
			++_g;
			var num = haxe_ui_styles_ValueTools.calcDimension(val);
			if(num == null) {
				return null;
			} else if(num < minv) {
				minv = num;
			}
		}
		return minv;
	case "platform-color":
		return haxe_ui_core_Platform.get_instance().getColor(haxe_ui_styles_ValueTools.string(vl[0]));
	case "rgb":
		return haxe_ui_util_Color.toInt(haxe_ui_util_Color.fromComponents(haxe_ui_styles_ValueTools.int(vl[0]),haxe_ui_styles_ValueTools.int(vl[1]),haxe_ui_styles_ValueTools.int(vl[2]),0));
	case "theme-icon":case "theme-image":
		return haxe_ui_themes_ThemeManager.get_instance().image(haxe_ui_styles_ValueTools.string(vl[0]));
	default:
		return null;
	}
};
var haxe_ui_styles_animation_AnimationOptions = function(duration,delay,iterationCount,easingFunction,direction,fillMode) {
	this.duration = duration;
	this.delay = delay;
	this.iterationCount = iterationCount;
	this.easingFunction = easingFunction;
	this.direction = direction;
	this.fillMode = fillMode;
};
$hxClasses["haxe.ui.styles.animation.AnimationOptions"] = haxe_ui_styles_animation_AnimationOptions;
haxe_ui_styles_animation_AnimationOptions.__name__ = "haxe.ui.styles.animation.AnimationOptions";
haxe_ui_styles_animation_AnimationOptions.prototype = {
	duration: null
	,delay: null
	,iterationCount: null
	,easingFunction: null
	,direction: null
	,fillMode: null
	,compareTo: function(op) {
		if(op != null && op.duration == this.duration && op.delay == this.delay && op.iterationCount == this.iterationCount && op.easingFunction == this.easingFunction && op.direction == this.direction) {
			return op.fillMode == this.fillMode;
		} else {
			return false;
		}
	}
	,compareToAnimation: function(anim) {
		if((this.duration == null && anim.duration == 0 || this.duration != null && anim.duration == this.duration) && (this.delay == null && anim.delay == 0 || this.delay != null && anim.delay == this.delay) && (this.iterationCount == null && anim.iterationCount == 1 || this.iterationCount != null && anim.iterationCount == this.iterationCount) && (this.easingFunction == null && anim.easingFunction == haxe_ui_styles_animation_AnimationOptions.DEFAULT_EASING_FUNCTION || this.easingFunction != null && anim.easingFunction == this.easingFunction) && (this.direction == null && anim.direction == "normal" || this.direction != null && anim.direction == this.direction)) {
			if(!(this.fillMode == null && anim.fillMode == "forwards")) {
				if(this.fillMode != null) {
					return anim.fillMode == this.fillMode;
				} else {
					return false;
				}
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,__class__: haxe_ui_styles_animation_AnimationOptions
};
var haxe_ui_styles_animation_Animation = function(target,options) {
	this._initialized = false;
	this._currentIterationCount = -1;
	this._currentKeyFrameIndex = -1;
	this.iterationCount = 1;
	this.fillMode = "forwards";
	this.easingFunction = haxe_ui_styles_animation_AnimationOptions.DEFAULT_EASING_FUNCTION;
	this.duration = 0;
	this.direction = "normal";
	this.delay = 0;
	this.target = target;
	if(options != null) {
		if(options.duration != null) {
			this.duration = options.duration;
		}
		if(options.easingFunction != null) {
			this.easingFunction = options.easingFunction;
		}
		if(options.delay != null) {
			this.delay = options.delay;
		}
		if(options.iterationCount != null) {
			this.iterationCount = options.iterationCount;
		}
		if(options.direction != null) {
			this.direction = options.direction;
		}
		if(options.fillMode != null) {
			this.fillMode = options.fillMode;
		}
	}
};
$hxClasses["haxe.ui.styles.animation.Animation"] = haxe_ui_styles_animation_Animation;
haxe_ui_styles_animation_Animation.__name__ = "haxe.ui.styles.animation.Animation";
haxe_ui_styles_animation_Animation.createWithKeyFrames = function(animationKeyFrames,target,options) {
	var animation = new haxe_ui_styles_animation_Animation(target,options);
	animation.name = animationKeyFrames.id;
	if(animation._keyframes == null) {
		animation._keyframes = [];
	}
	var _g = 0;
	var _g1 = animationKeyFrames.get_keyFrames();
	while(_g < _g1.length) {
		var keyFrame = _g1[_g];
		++_g;
		var kf = new haxe_ui_styles_animation_KeyFrame();
		var _g2 = keyFrame.time;
		if(_g2._hx_index == 3) {
			var v = _g2.v;
			if(v._hx_index == 0) {
				var p = v.value;
				kf.time = p / 100;
				kf.easingFunction = animation.easingFunction;
				kf.directives = keyFrame.directives;
				animation._keyframes.push(kf);
			}
		}
	}
	return animation;
};
haxe_ui_styles_animation_Animation.prototype = {
	delay: null
	,direction: null
	,duration: null
	,easingFunction: null
	,fillMode: null
	,iterationCount: null
	,name: null
	,running: null
	,target: null
	,run: function(onFinish) {
		if(this.get_keyframeCount() == 0 || this.running) {
			return;
		}
		if(!this._initialized) {
			this._initialize();
		}
		this._currentKeyFrameIndex = -1;
		this._currentIterationCount = 0;
		this.running = true;
		this._saveState();
		this._runNextKeyframe(onFinish);
	}
	,stop: function() {
		if(this.running == false) {
			return;
		}
		this.running = false;
		var currentKF = this.get_currentKeyFrame();
		if(currentKF != null) {
			currentKF.stop();
			this._currentKeyFrameIndex = -1;
		}
		this._keyframes = null;
		this._restoreState();
	}
	,_currentKeyFrameIndex: null
	,_currentIterationCount: null
	,_initialState: null
	,_initialized: null
	,_keyframes: null
	,get_keyframeCount: function() {
		if(this._keyframes == null) {
			return 0;
		} else {
			return this._keyframes.length;
		}
	}
	,get_currentKeyFrame: function() {
		if(this._currentKeyFrameIndex >= 0) {
			return this._keyframes[this._currentKeyFrameIndex];
		} else {
			return null;
		}
	}
	,_initialize: function() {
		switch(this.direction) {
		case "alternate":
			this._addAlternateKeyframes();
			break;
		case "alternate-reverse":
			this._reverseCurrentKeyframes();
			this._addAlternateKeyframes();
			break;
		case "normal":
			break;
		case "reverse":
			this._reverseCurrentKeyframes();
			break;
		}
		var currentTime = 0;
		var _g = 0;
		var _g1 = this._keyframes;
		while(_g < _g1.length) {
			var keyframe = _g1[_g];
			++_g;
			switch(this.direction) {
			case "alternate-reverse":case "reverse":
				keyframe.time = 1 - keyframe.time;
				break;
			case "alternate":case "normal":
				break;
			}
			keyframe.time = this.duration * keyframe.time - currentTime;
			currentTime += keyframe.time;
		}
		if(this.delay > 0) {
			var keyframe = new haxe_ui_styles_animation_KeyFrame();
			keyframe.time = this.delay;
			keyframe.easingFunction = this.easingFunction;
			this._keyframes.unshift(keyframe);
		} else if(this.delay < 0) {
			currentTime = 0;
			var lastKeyframe = null;
			while(this._keyframes.length > 0) {
				var keyframe = this._keyframes[0];
				currentTime -= keyframe.time;
				if(currentTime >= this.delay) {
					lastKeyframe = keyframe;
					this._keyframes.splice(0,1);
				} else {
					keyframe.delay = -(currentTime - this.delay + keyframe.time);
					if(lastKeyframe != null) {
						lastKeyframe.time = 0;
						this._keyframes.unshift(lastKeyframe);
					}
					break;
				}
			}
		}
		this._initialized = true;
	}
	,_runNextKeyframe: function(onFinish) {
		if(this.running == false) {
			return;
		}
		if(++this._currentKeyFrameIndex >= this._keyframes.length) {
			this._currentKeyFrameIndex = -1;
			this._restoreState();
			if(this.iterationCount == -1 || ++this._currentIterationCount < this.iterationCount) {
				this._saveState();
				this._runNextKeyframe(onFinish);
			} else {
				this.running = false;
				if(onFinish != null) {
					onFinish();
				}
			}
			return;
		} else {
			var _g = $bind(this,this._runNextKeyframe);
			var onFinish1 = onFinish;
			var tmp = function() {
				_g(onFinish1);
			};
			this.get_currentKeyFrame().run(this.target,tmp);
		}
	}
	,_addAlternateKeyframes: function() {
		var i = this._keyframes.length;
		while(--i >= 0) {
			var keyframe = this._keyframes[i];
			var newKeyframe = new haxe_ui_styles_animation_KeyFrame();
			newKeyframe.time = 1 - keyframe.time;
			newKeyframe.easingFunction = this._getReverseEasingFunction(keyframe.easingFunction);
			newKeyframe.directives = keyframe.directives;
			this._keyframes.push(newKeyframe);
		}
	}
	,_reverseCurrentKeyframes: function() {
		this._keyframes.reverse();
		var func = this._getReverseEasingFunction(this.easingFunction);
		var _g = 0;
		var _g1 = this._keyframes;
		while(_g < _g1.length) {
			var keyframe = _g1[_g];
			++_g;
			keyframe.easingFunction = func;
		}
	}
	,_getReverseEasingFunction: function(easingFunction) {
		switch(easingFunction._hx_index) {
		case 2:
			return haxe_ui_styles_EasingFunction.EASE_OUT;
		case 3:
			return haxe_ui_styles_EasingFunction.EASE_IN;
		default:
			return easingFunction;
		}
	}
	,_saveState: function() {
		if(!this._shouldRestoreState()) {
			return;
		}
		if(this._initialState == null) {
			this._initialState = new haxe_ds_StringMap();
		}
		var _g = 0;
		var _g1 = this._keyframes;
		while(_g < _g1.length) {
			var keyframe = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = keyframe.directives;
			while(_g2 < _g3.length) {
				var directive = _g3[_g2];
				++_g2;
				var property = haxe_ui_util_StyleUtil.styleProperty2ComponentProperty(directive.directive);
				if(!Object.prototype.hasOwnProperty.call(this._initialState.h,property)) {
					var this1 = this._initialState;
					var value = Reflect.getProperty(this.target,property);
					this1.h[property] = value;
				}
			}
		}
	}
	,_restoreState: function() {
		if(!this._shouldRestoreState()) {
			return;
		}
		if(this._initialState != null) {
			var h = this._initialState.h;
			var property_h = h;
			var property_keys = Object.keys(h);
			var property_length = property_keys.length;
			var property_current = 0;
			while(property_current < property_length) {
				var property = property_keys[property_current++];
				Reflect.setProperty(this.target,property,this._initialState.h[property]);
			}
			this._initialState = null;
		}
	}
	,_shouldRestoreState: function() {
		if(!(this.fillMode == "none" || this.fillMode == "forwards" && this.direction != "normal" && this.direction != "alternate")) {
			if(this.fillMode == "backwards" && this.direction != "reverse") {
				return this.direction != "alternate-reverse";
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: haxe_ui_styles_animation_Animation
	,__properties__: {get_keyframeCount:"get_keyframeCount",get_currentKeyFrame:"get_currentKeyFrame"}
};
var haxe_ui_styles_animation_KeyFrame = function() {
	this.delay = 0;
	this.time = 0;
	this.directives = [];
};
$hxClasses["haxe.ui.styles.animation.KeyFrame"] = haxe_ui_styles_animation_KeyFrame;
haxe_ui_styles_animation_KeyFrame.__name__ = "haxe.ui.styles.animation.KeyFrame";
haxe_ui_styles_animation_KeyFrame.prototype = {
	directives: null
	,time: null
	,delay: null
	,easingFunction: null
	,_actuator: null
	,stop: function() {
		if(this._actuator != null) {
			this._actuator.stop();
			this._actuator = null;
		}
	}
	,run: function(target,cb) {
		var _gthis = this;
		if(this._actuator != null) {
			return;
		}
		var properties = { };
		var _g = 0;
		var _g1 = this.directives;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			properties[d.directive] = d.value;
		}
		var hasFrameEvent = target.hasEvent("animationframe");
		this._actuator = new haxe_ui_styles_animation_util_Actuator(target,properties,this.time,new haxe_ui_styles_animation_util_ActuatorOptions(this.delay,this.easingFunction,function() {
			_gthis._actuator = null;
			cb();
		},function(time,delta,position) {
			if(hasFrameEvent) {
				var event = new haxe_ui_events_AnimationEvent("animationframe");
				event.currentTime = time;
				event.delta = delta;
				event.position = position;
				target.dispatch(event);
			}
		}));
		this._actuator.run();
	}
	,__class__: haxe_ui_styles_animation_KeyFrame
};
var haxe_ui_styles_animation_util_ActuatorOptions = function(delay,easingFunction,onComplete,onUpdate) {
	this.delay = delay;
	this.easingFunction = easingFunction;
	this.onComplete = onComplete;
	this.onUpdate = onUpdate;
};
$hxClasses["haxe.ui.styles.animation.util.ActuatorOptions"] = haxe_ui_styles_animation_util_ActuatorOptions;
haxe_ui_styles_animation_util_ActuatorOptions.__name__ = "haxe.ui.styles.animation.util.ActuatorOptions";
haxe_ui_styles_animation_util_ActuatorOptions.prototype = {
	delay: null
	,easingFunction: null
	,onComplete: null
	,onUpdate: null
	,__class__: haxe_ui_styles_animation_util_ActuatorOptions
};
var haxe_ui_styles_animation_util_Actuator = function(target,properties,duration,options) {
	this.delay = 0;
	this.duration = 0;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	if(options != null) {
		this._easeFunc = haxe_ui_styles_animation_util__$Actuator_Ease.get(options.easingFunction != null ? options.easingFunction : haxe_ui_styles_EasingFunction.EASE);
		if(options.delay != null) {
			this.delay = options.delay;
		}
		if(options.onComplete != null) {
			this._onComplete = options.onComplete;
		}
		if(options.onUpdate != null) {
			this._onUpdate = options.onUpdate;
		}
	}
};
$hxClasses["haxe.ui.styles.animation.util.Actuator"] = haxe_ui_styles_animation_util_Actuator;
haxe_ui_styles_animation_util_Actuator.__name__ = "haxe.ui.styles.animation.util.Actuator";
haxe_ui_styles_animation_util_Actuator.tween = function(target,properties,duration,options) {
	var actuator = new haxe_ui_styles_animation_util_Actuator(target,properties,duration,options);
	actuator.run();
	return actuator;
};
haxe_ui_styles_animation_util_Actuator.prototype = {
	target: null
	,properties: null
	,duration: null
	,delay: null
	,stop: function() {
		this._stopped = true;
		this.target = null;
	}
	,run: function() {
		this._initialize();
		this._stopped = false;
		if(this.duration == 0) {
			this._apply(1);
			this._finish();
		} else {
			this._currentTime = HxOverrides.now() / 1000;
			if(this.delay > 0) {
				haxe_ui_util_Timer.delay($bind(this,this._nextFrame),this.delay * 1000 | 0);
			} else {
				new haxe_ui_CallLater($bind(this,this._nextFrame));
			}
		}
	}
	,_currentTime: null
	,_easeFunc: null
	,_onComplete: null
	,_onUpdate: null
	,_stopped: null
	,_propertyDetails: null
	,_colorPropertyDetails: null
	,_stringPropertyDetails: null
	,_initialize: function() {
		if(this._isValid() == false) {
			this.stop();
			return;
		}
		this._propertyDetails = [];
		this._colorPropertyDetails = [];
		this._stringPropertyDetails = [];
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var componentProperty = haxe_ui_util_StyleUtil.styleProperty2ComponentProperty(p);
			var end = Reflect.getProperty(this.properties,p);
			if(end._hx_index == 3) {
				var _g2 = end.v;
				if(_g2._hx_index == 0) {
					var v = _g2.value;
					componentProperty = "percent" + haxe_ui_util_StringUtil.capitalizeFirstLetter(componentProperty);
				}
			}
			var start = Reflect.getProperty(this.target,componentProperty);
			if(start == null) {
				switch(end._hx_index) {
				case 0:
					var v1 = end.v;
					start = v1;
					break;
				case 1:
					var v2 = end.v;
					start = 0;
					break;
				case 3:
					var _g3 = end.v;
					if(_g3._hx_index == 0) {
						var v3 = _g3.value;
						start = 0;
					}
					break;
				default:
				}
			}
			var isVariant = false;
			if(start != null) {
				try {
					if(start._hx_index == 2) {
						var v4 = start.s;
						start = v4;
						isVariant = true;
					}
				} catch( _g4 ) {
					haxe_NativeStackTrace.lastError = _g4;
				}
			}
			if(end != null) {
				try {
					if(end._hx_index == 2) {
						var v5 = end.s;
						end = v5;
						isVariant = true;
					}
				} catch( _g5 ) {
					haxe_NativeStackTrace.lastError = _g5;
				}
			}
			if(start == null || end == null) {
				continue;
			}
			switch(end._hx_index) {
			case 0:
				var v6 = end.v;
				var startVal = start;
				var endVal = haxe_ui_styles_ValueTools.string(end);
				if(endVal.indexOf("[[") != -1) {
					var n1 = endVal.indexOf("[[");
					var n2 = endVal.indexOf("]]") + 2;
					var before = HxOverrides.substr(endVal,0,n1);
					var after = HxOverrides.substr(endVal,n2,null);
					var s = StringTools.replace(startVal,before,"");
					s = StringTools.replace(s,after,"");
					var startInt = Std.parseInt(s);
					var s1 = StringTools.replace(endVal,before + "[[","");
					s1 = StringTools.replace(s1,"]]" + after,"");
					var endInt = Std.parseInt(s1);
					var details = new haxe_ui_styles_animation_util_StringPropertyDetails(this.target,componentProperty,startVal,endVal);
					details.pattern = before + "[[n]]" + after;
					details.startInt = startInt;
					details.changeInt = endInt - startInt;
					var c = js_Boot.getClass(this.target);
					var typeInfo = haxe_ui_core_TypeMap.getTypeInfo(c.__name__,componentProperty);
					if(typeInfo != null && isVariant == false && typeInfo == "Variant") {
						isVariant = true;
					}
					details.isVariant = isVariant;
					this._stringPropertyDetails.push(details);
				} else {
					var details1 = new haxe_ui_styles_animation_util_StringPropertyDetails(this.target,componentProperty,startVal,endVal);
					this._stringPropertyDetails.push(details1);
				}
				break;
			case 3:
				var _g6 = end.v;
				if(_g6._hx_index == 0) {
					var v7 = _g6.value;
					var val = v7;
					if(val != null) {
						var details2 = new haxe_ui_styles_animation_util_PropertyDetails(this.target,componentProperty,start,val - start);
						this._propertyDetails.push(details2);
					}
				} else {
					var val1 = haxe_ui_styles_ValueTools.calcDimension(end);
					if(val1 != null) {
						var details3 = new haxe_ui_styles_animation_util_PropertyDetails(this.target,componentProperty,start,val1 - start);
						this._propertyDetails.push(details3);
					} else {
						var details4 = new haxe_ui_styles_animation_util_PropertyDetails(this.target,componentProperty,start,end - start);
						this._propertyDetails.push(details4);
					}
				}
				break;
			case 4:
				var v8 = end.v;
				var startColor = js_Boot.__cast(start , Int);
				var endColor = v8;
				var details5 = new haxe_ui_styles_animation_util_ColorPropertyDetails(this.target,componentProperty,startColor,(endColor >> 16 & 255) - (startColor >> 16 & 255),(endColor >> 8 & 255) - (startColor >> 8 & 255),(endColor & 255) - (startColor & 255),(endColor >> 24 & 255) - (startColor >> 24 & 255));
				if(this._colorPropertyDetails == null) {
					this._colorPropertyDetails = [];
				}
				this._colorPropertyDetails.push(details5);
				break;
			default:
				var val2 = haxe_ui_styles_ValueTools.calcDimension(end);
				if(val2 != null) {
					var details6 = new haxe_ui_styles_animation_util_PropertyDetails(this.target,componentProperty,start,val2 - start);
					this._propertyDetails.push(details6);
				} else {
					var details7 = new haxe_ui_styles_animation_util_PropertyDetails(this.target,componentProperty,start,end - start);
					this._propertyDetails.push(details7);
				}
			}
		}
	}
	,_nextFrame: function() {
		if(this._stopped == true) {
			return;
		}
		var currentTime = HxOverrides.now() / 1000;
		var delta = currentTime - this._currentTime;
		if(this.delay < 0) {
			delta += -this.delay;
		}
		var tweenPosition = delta / this.duration;
		if(tweenPosition > 1) {
			tweenPosition = 1;
		}
		this._apply(tweenPosition);
		if(this._onUpdate != null) {
			this._onUpdate(currentTime,delta,tweenPosition);
		}
		if(delta >= this.duration) {
			this._finish();
		} else {
			new haxe_ui_CallLater($bind(this,this._nextFrame));
		}
	}
	,_isValid: function() {
		if(this.target == null) {
			return false;
		}
		if(((this.target) instanceof haxe_ui_core_Component)) {
			var c = this.target;
			if(c._isDisposed == true) {
				return false;
			}
		}
		return true;
	}
	,_apply: function(position) {
		if(this._isValid() == false) {
			this.stop();
			return;
		}
		position = this._easeFunc(position);
		var _g = 0;
		var _g1 = this._propertyDetails;
		while(_g < _g1.length) {
			var details = _g1[_g];
			++_g;
			Reflect.setProperty(this.target,details.propertyName,details.start + details.change * position);
		}
		var _g = 0;
		var _g1 = this._stringPropertyDetails;
		while(_g < _g1.length) {
			var details = _g1[_g];
			++_g;
			if(details.pattern != null) {
				var newInt = details.startInt + position * details.changeInt | 0;
				var newString = StringTools.replace(details.pattern,"[[n]]","" + newInt);
				if(details.isVariant) {
					var v = haxe_ui_util_Variant.fromString(newString);
					Reflect.setProperty(this.target,details.propertyName,v);
				} else {
					Reflect.setProperty(this.target,details.propertyName,newString);
				}
			} else if(position != 1) {
				Reflect.setProperty(this.target,details.propertyName,details.start);
			} else {
				Reflect.setProperty(this.target,details.propertyName,details.end);
			}
		}
		var _g = 0;
		var _g1 = this._colorPropertyDetails;
		while(_g < _g1.length) {
			var details = _g1[_g];
			++_g;
			var currentColor = haxe_ui_util_Color.fromComponents((details.start >> 16 & 255) + details.changeR * position | 0,(details.start >> 8 & 255) + details.changeG * position | 0,(details.start & 255) + details.changeB * position | 0,(details.start >> 24 & 255) + details.changeA * position | 0);
			Reflect.setProperty(details.target,details.propertyName,currentColor);
		}
	}
	,_finish: function() {
		this._stopped = true;
		this.target = null;
		if(this._onComplete != null) {
			this._onComplete();
		}
	}
	,__class__: haxe_ui_styles_animation_util_Actuator
};
var haxe_ui_styles_animation_util__$Actuator_Ease = function() { };
$hxClasses["haxe.ui.styles.animation.util._Actuator.Ease"] = haxe_ui_styles_animation_util__$Actuator_Ease;
haxe_ui_styles_animation_util__$Actuator_Ease.__name__ = "haxe.ui.styles.animation.util._Actuator.Ease";
haxe_ui_styles_animation_util__$Actuator_Ease.get = function(easingFunction) {
	switch(easingFunction._hx_index) {
	case 0:
		return haxe_ui_styles_animation_util__$Actuator_Ease.linear;
	case 2:
		return haxe_ui_styles_animation_util__$Actuator_Ease.easeIn;
	case 3:
		return haxe_ui_styles_animation_util__$Actuator_Ease.easeOut;
	case 1:case 4:
		return haxe_ui_styles_animation_util__$Actuator_Ease.easeInOut;
	}
};
haxe_ui_styles_animation_util__$Actuator_Ease.linear = function(k) {
	return k;
};
haxe_ui_styles_animation_util__$Actuator_Ease.easeIn = function(k) {
	return k * k * k;
};
haxe_ui_styles_animation_util__$Actuator_Ease.easeOut = function(k) {
	return --k * k * k + 1;
};
haxe_ui_styles_animation_util__$Actuator_Ease.easeInOut = function(k) {
	if((k /= 0.5) < 1) {
		return 0.5 * k * k * k;
	} else {
		return 0.5 * ((k -= 2) * k * k + 2);
	}
};
var haxe_ui_styles_animation_util_ColorPropertyDetails = function(target,propertyName,start,changeR,changeG,changeB,changeA) {
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.changeR = changeR;
	this.changeG = changeG;
	this.changeB = changeB;
	this.changeA = changeA;
};
$hxClasses["haxe.ui.styles.animation.util.ColorPropertyDetails"] = haxe_ui_styles_animation_util_ColorPropertyDetails;
haxe_ui_styles_animation_util_ColorPropertyDetails.__name__ = "haxe.ui.styles.animation.util.ColorPropertyDetails";
haxe_ui_styles_animation_util_ColorPropertyDetails.prototype = {
	changeR: null
	,changeG: null
	,changeB: null
	,changeA: null
	,propertyName: null
	,start: null
	,target: null
	,__class__: haxe_ui_styles_animation_util_ColorPropertyDetails
};
var haxe_ui_styles_animation_util_PropertyDetails = function(target,propertyName,start,change) {
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
};
$hxClasses["haxe.ui.styles.animation.util.PropertyDetails"] = haxe_ui_styles_animation_util_PropertyDetails;
haxe_ui_styles_animation_util_PropertyDetails.__name__ = "haxe.ui.styles.animation.util.PropertyDetails";
haxe_ui_styles_animation_util_PropertyDetails.prototype = {
	change: null
	,propertyName: null
	,start: null
	,target: null
	,__class__: haxe_ui_styles_animation_util_PropertyDetails
};
var haxe_ui_styles_animation_util_StringPropertyDetails = function(target,propertyName,start,end) {
	this.isVariant = false;
	this.pattern = null;
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.end = end;
};
$hxClasses["haxe.ui.styles.animation.util.StringPropertyDetails"] = haxe_ui_styles_animation_util_StringPropertyDetails;
haxe_ui_styles_animation_util_StringPropertyDetails.__name__ = "haxe.ui.styles.animation.util.StringPropertyDetails";
haxe_ui_styles_animation_util_StringPropertyDetails.prototype = {
	propertyName: null
	,start: null
	,end: null
	,target: null
	,startInt: null
	,changeInt: null
	,pattern: null
	,isVariant: null
	,__class__: haxe_ui_styles_animation_util_StringPropertyDetails
};
var haxe_ui_styles_elements_AnimationKeyFrame = function() {
};
$hxClasses["haxe.ui.styles.elements.AnimationKeyFrame"] = haxe_ui_styles_elements_AnimationKeyFrame;
haxe_ui_styles_elements_AnimationKeyFrame.__name__ = "haxe.ui.styles.elements.AnimationKeyFrame";
haxe_ui_styles_elements_AnimationKeyFrame.prototype = {
	time: null
	,directives: null
	,set: function(directive) {
		var found = false;
		var _g = 0;
		var _g1 = this.directives;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d.directive == directive.directive) {
				d.value = directive.value;
				found = true;
			}
		}
		if(found == false) {
			this.directives.push(directive);
		}
	}
	,find: function(id) {
		var _g = 0;
		var _g1 = this.directives;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d.directive == id) {
				return d;
			}
		}
		return null;
	}
	,clear: function() {
		this.directives = [];
	}
	,__class__: haxe_ui_styles_elements_AnimationKeyFrame
};
var haxe_ui_styles_elements_AnimationKeyFrames = function(id,keyframes) {
	this._keyframes = [];
	this.id = id;
	this._keyframes = keyframes;
};
$hxClasses["haxe.ui.styles.elements.AnimationKeyFrames"] = haxe_ui_styles_elements_AnimationKeyFrames;
haxe_ui_styles_elements_AnimationKeyFrames.__name__ = "haxe.ui.styles.elements.AnimationKeyFrames";
haxe_ui_styles_elements_AnimationKeyFrames.prototype = {
	id: null
	,_keyframes: null
	,keyFrames: null
	,get_keyFrames: function() {
		return this._keyframes;
	}
	,__class__: haxe_ui_styles_elements_AnimationKeyFrames
	,__properties__: {get_keyFrames:"get_keyFrames"}
};
var haxe_ui_styles_elements_Directive = function(directive,value,defective) {
	if(defective == null) {
		defective = false;
	}
	this.defective = false;
	this.value = null;
	this.directive = null;
	this.directive = directive;
	this.value = value;
	this.defective = defective;
};
$hxClasses["haxe.ui.styles.elements.Directive"] = haxe_ui_styles_elements_Directive;
haxe_ui_styles_elements_Directive.__name__ = "haxe.ui.styles.elements.Directive";
haxe_ui_styles_elements_Directive.prototype = {
	directive: null
	,value: null
	,defective: null
	,__class__: haxe_ui_styles_elements_Directive
};
var haxe_ui_styles_elements_ImportElement = function(url) {
	this.url = url;
};
$hxClasses["haxe.ui.styles.elements.ImportElement"] = haxe_ui_styles_elements_ImportElement;
haxe_ui_styles_elements_ImportElement.__name__ = "haxe.ui.styles.elements.ImportElement";
haxe_ui_styles_elements_ImportElement.prototype = {
	url: null
	,__class__: haxe_ui_styles_elements_ImportElement
};
var haxe_ui_styles_elements_MediaQuery = function(directives,styleSheet) {
	this._directives = [];
	this._directives = directives;
	this._styleSheet = styleSheet;
};
$hxClasses["haxe.ui.styles.elements.MediaQuery"] = haxe_ui_styles_elements_MediaQuery;
haxe_ui_styles_elements_MediaQuery.__name__ = "haxe.ui.styles.elements.MediaQuery";
haxe_ui_styles_elements_MediaQuery.prototype = {
	_directives: null
	,_styleSheet: null
	,addDirective: function(el) {
		this._directives.push(el);
	}
	,relevant: null
	,get_relevant: function() {
		var b = true;
		var _g = 0;
		var _g1 = this._directives;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			switch(d.directive) {
			case "backend":
				b = b && haxe_ui_Backend.get_id() == haxe_ui_styles_ValueTools.string(d.value);
				break;
			case "max-aspect-ratio":
				var sr = haxe_ui_core_Screen.get_instance().get_width() / haxe_ui_core_Screen.get_instance().get_height();
				b = b && sr < this.buildRatio(haxe_ui_styles_ValueTools.string(d.value));
				break;
			case "max-height":
				b = b && haxe_ui_core_Screen.get_instance().get_height() < haxe_ui_styles_ValueTools.calcDimension(d.value);
				break;
			case "max-width":
				b = b && haxe_ui_core_Screen.get_instance().get_width() < haxe_ui_styles_ValueTools.calcDimension(d.value);
				break;
			case "min-aspect-ratio":
				var sr1 = haxe_ui_core_Screen.get_instance().get_width() / haxe_ui_core_Screen.get_instance().get_height();
				b = b && sr1 > this.buildRatio(haxe_ui_styles_ValueTools.string(d.value));
				break;
			case "min-height":
				b = b && haxe_ui_core_Screen.get_instance().get_height() > haxe_ui_styles_ValueTools.calcDimension(d.value);
				break;
			case "min-width":
				b = b && haxe_ui_core_Screen.get_instance().get_width() > haxe_ui_styles_ValueTools.calcDimension(d.value);
				break;
			case "orientation":
				var v = haxe_ui_styles_ValueTools.string(d.value);
				if(v == "landscape") {
					b = b && haxe_ui_core_Screen.get_instance().get_width() > haxe_ui_core_Screen.get_instance().get_height();
				} else if(v == "portrait") {
					b = b && haxe_ui_core_Screen.get_instance().get_height() > haxe_ui_core_Screen.get_instance().get_width();
				}
				break;
			default:
				haxe_Log.trace("WARN: media query \"" + d.directive + "\" not recognized",{ fileName : "haxe/ui/styles/elements/MediaQuery.hx", lineNumber : 49, className : "haxe.ui.styles.elements.MediaQuery", methodName : "get_relevant"});
			}
		}
		return b;
	}
	,buildRatio: function(s) {
		var p = s.split("/");
		var w = Std.parseInt(StringTools.trim(p[0]));
		var h = Std.parseInt(StringTools.trim(p[1]));
		return w / h;
	}
	,styleSheet: null
	,get_styleSheet: function() {
		return this._styleSheet;
	}
	,__class__: haxe_ui_styles_elements_MediaQuery
	,__properties__: {get_styleSheet:"get_styleSheet",get_relevant:"get_relevant"}
};
var haxe_ui_styles_elements_RuleElement = function(selector,directives) {
	this.directiveCount = 0;
	this.directives = new haxe_ds_StringMap();
	this.selector = new haxe_ui_styles_elements_Selector(selector);
	var _g = 0;
	while(_g < directives.length) {
		var d = directives[_g];
		++_g;
		this.processDirective(d);
		this.directiveCount++;
	}
};
$hxClasses["haxe.ui.styles.elements.RuleElement"] = haxe_ui_styles_elements_RuleElement;
haxe_ui_styles_elements_RuleElement.__name__ = "haxe.ui.styles.elements.RuleElement";
haxe_ui_styles_elements_RuleElement.ruleMatch = function(c,d) {
	if(c.nodeName == "*") {
		return true;
	}
	if(c.id != null && c.id != d.get_id()) {
		return false;
	}
	if(c.className != null) {
		var _g = 0;
		var _g1 = c.get_classNameParts();
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(d.classes.indexOf(p) != -1 == false) {
				return false;
			}
		}
	}
	if(c.pseudoClass != null) {
		var pc = ":" + c.pseudoClass;
		if(d.classes.indexOf(pc) != -1 == false) {
			return false;
		}
	}
	if(c.nodeName != null) {
		var classNodeName = d.get_nodeName();
		if(c.nodeName != classNodeName) {
			return false;
		}
	}
	if(c.parent != null) {
		if(c.direct == true) {
			var p = d.parentComponent;
			if(p == null) {
				return false;
			}
			if(!haxe_ui_styles_elements_RuleElement.ruleMatch(c.parent,p)) {
				return false;
			}
		} else {
			var p = d.parentComponent;
			while(p != null) {
				if(haxe_ui_styles_elements_RuleElement.ruleMatch(c.parent,p)) {
					break;
				}
				p = p.parentComponent;
			}
			if(p == null) {
				return false;
			}
		}
	}
	return true;
};
haxe_ui_styles_elements_RuleElement.prototype = {
	selector: null
	,directives: null
	,directiveCount: null
	,addDirective: function(directive,value) {
		var d = new haxe_ui_styles_elements_Directive(directive,value);
		this.processDirective(d);
	}
	,match: function(d) {
		return haxe_ui_styles_elements_RuleElement.ruleMatch(this.selector.parts[this.selector.parts.length - 1],d);
	}
	,processDirective: function(d) {
		switch(d.directive) {
		case "animation":
			this.processComposite(d,["animation-name","animation-duration","animation-timing-function","animation-delay","animation-iteration-count","animation-direction","animation-fill-mode"]);
			break;
		case "background":
			this.processComposite(d,["background-color","background-color-end","background-gradient-style"]);
			break;
		case "background-image-clip":
			this.processComposite(d,["background-image-clip-top","background-image-clip-left","background-image-clip-bottom","background-image-clip-right"]);
			break;
		case "background-image-slice":
			this.processComposite(d,["background-image-slice-top","background-image-slice-left","background-image-slice-bottom","background-image-slice-right"]);
			break;
		case "background-position":
			this.processComposite(d,["background-position-x","background-position-y"]);
			break;
		case "border":
			this.processComposite(d,["border-size","border-style","border-color"]);
			break;
		case "border-bottom":
			this.processComposite(d,["border-bottom-size","border-style","border-bottom-color"]);
			break;
		case "border-color":
			this.processComposite(d,["border-top-color","border-left-color","border-right-color","border-bottom-color"],true);
			break;
		case "border-left":
			this.processComposite(d,["border-left-size","border-style","border-left-color"]);
			break;
		case "border-right":
			this.processComposite(d,["border-right-size","border-style","border-right-color"]);
			break;
		case "border-size":
			this.processComposite(d,["border-top-size","border-left-size","border-right-size","border-bottom-size"]);
			break;
		case "border-top":
			this.processComposite(d,["border-top-size","border-style","border-top-color"]);
			break;
		case "font-style":
			var v1 = haxe_ui_styles_ValueTools.composite(d.value);
			if(v1 == null) {
				v1 = [d.value];
			}
			var _g = 0;
			while(_g < v1.length) {
				var v = v1[_g];
				++_g;
				var s = haxe_ui_styles_ValueTools.string(v).toLowerCase();
				if(s == "bold") {
					var this1 = this.directives;
					var value = new haxe_ui_styles_elements_Directive("font-bold",haxe_ui_styles_Value.VBool(true));
					this1.h["font-bold"] = value;
				} else if(s == "italic") {
					var this2 = this.directives;
					var value1 = new haxe_ui_styles_elements_Directive("font-italic",haxe_ui_styles_Value.VBool(true));
					this2.h["font-italic"] = value1;
				} else if(s == "underline") {
					var this3 = this.directives;
					var value2 = new haxe_ui_styles_elements_Directive("font-underline",haxe_ui_styles_Value.VBool(true));
					this3.h["font-underline"] = value2;
				}
			}
			break;
		case "margin":
			var vl = haxe_ui_styles_ValueTools.composite(d.value);
			if(vl.length == 4 || vl.length == 1) {
				this.processComposite(d,["margin-top","margin-left","margin-right","margin-bottom"]);
			} else if(vl.length == 2) {
				this.processComposite(new haxe_ui_styles_elements_Directive("",vl[0]),["margin-top","margin-bottom"]);
				this.processComposite(new haxe_ui_styles_elements_Directive("",vl[1]),["margin-left","margin-right"]);
			}
			break;
		case "padding":
			var vl = haxe_ui_styles_ValueTools.composite(d.value);
			if(vl.length == 4 || vl.length == 1) {
				this.processComposite(d,["padding-top","padding-left","padding-right","padding-bottom"]);
			} else if(vl.length == 2) {
				this.processComposite(new haxe_ui_styles_elements_Directive("",vl[0]),["padding-top","padding-bottom"]);
				this.processComposite(new haxe_ui_styles_elements_Directive("",vl[1]),["padding-left","padding-right"]);
			} else if(vl.length == 0) {
				this.processComposite(d,["padding-top","padding-left","padding-right","padding-bottom"]);
			}
			break;
		case "spacing":
			this.processComposite(d,["horizontal-spacing","vertical-spacing"]);
			break;
		default:
			this.directives.h[d.directive] = d;
		}
	}
	,processComposite: function(d,parts,duplicate) {
		if(duplicate == null) {
			duplicate = false;
		}
		var _g = 0;
		while(_g < parts.length) {
			var p = parts[_g];
			++_g;
			var _this = this.directives;
			if(Object.prototype.hasOwnProperty.call(_this.h,p)) {
				delete(_this.h[p]);
			}
		}
		var _g = d.value;
		switch(_g._hx_index) {
		case 1:
			var _g1 = _g.v;
			var _g1 = 0;
			while(_g1 < parts.length) {
				var p = parts[_g1];
				++_g1;
				var this1 = this.directives;
				var value = new haxe_ui_styles_elements_Directive(p,d.value);
				this1.h[p] = value;
			}
			break;
		case 3:
			var v = _g.v;
			var _g1 = 0;
			while(_g1 < parts.length) {
				var p = parts[_g1];
				++_g1;
				var this1 = this.directives;
				var value = new haxe_ui_styles_elements_Directive(p,haxe_ui_styles_Value.VDimension(v));
				this1.h[p] = value;
			}
			break;
		case 4:
			var _g1 = _g.v;
			if(duplicate == false) {
				var this1 = this.directives;
				var value = new haxe_ui_styles_elements_Directive(parts[0],d.value);
				this1.h[parts[0]] = value;
			} else {
				var _g1 = 0;
				while(_g1 < parts.length) {
					var p = parts[_g1];
					++_g1;
					var this1 = this.directives;
					var value = new haxe_ui_styles_elements_Directive(p,d.value);
					this1.h[p] = value;
				}
			}
			break;
		case 6:
			var _g1 = _g.v;
			break;
		case 7:
			var vl = _g.vl;
			var n = 0;
			var _g = 0;
			while(_g < parts.length) {
				var p = parts[_g];
				++_g;
				if(vl[n] != null) {
					var nd = new haxe_ui_styles_elements_Directive(p,vl[n]);
					this.processDirective(nd);
					this.directives.h[p] = nd;
				}
				++n;
			}
			break;
		case 9:
			var _g = 0;
			while(_g < parts.length) {
				var p = parts[_g];
				++_g;
				var nd = new haxe_ui_styles_elements_Directive(p,d.value);
				this.processDirective(nd);
				this.directives.h[p] = nd;
			}
			break;
		default:
		}
	}
	,__class__: haxe_ui_styles_elements_RuleElement
};
var haxe_ui_styles_elements_Selector = function(s) {
	this.parts = [];
	s = StringTools.replace(s,">"," > ");
	var p = s.split(" ");
	var parent = null;
	var nextDirect = false;
	var _g = 0;
	while(_g < p.length) {
		var i = p[_g];
		++_g;
		i = StringTools.trim(i);
		if(i.length == 0) {
			continue;
		}
		if(i == ">") {
			nextDirect = true;
			continue;
		}
		var current = new haxe_ui_styles_elements_SelectorPart();
		if(nextDirect == true) {
			current.direct = true;
			nextDirect = false;
		}
		current.parent = parent;
		var p1 = i.split(":");
		current.pseudoClass = p1[1];
		var main = p1[0];
		if(main.charAt(0) == ".") {
			current.className = main.substring(1);
		} else {
			var p2 = main.split(".");
			if(p2[0].charAt(0) == "#") {
				current.id = p2[0].substring(1);
			} else {
				current.nodeName = p2[0].toLowerCase();
			}
			current.className = p2[1];
		}
		this.parts.push(current);
		parent = current;
	}
};
$hxClasses["haxe.ui.styles.elements.Selector"] = haxe_ui_styles_elements_Selector;
haxe_ui_styles_elements_Selector.__name__ = "haxe.ui.styles.elements.Selector";
haxe_ui_styles_elements_Selector.prototype = {
	parts: null
	,toString: function() {
		return this.parts.join(" ");
	}
	,__class__: haxe_ui_styles_elements_Selector
};
var haxe_ui_styles_elements_SelectorPart = function() {
	this._parts = null;
	this.direct = false;
	this.nodeName = null;
	this.id = null;
	this.className = null;
	this.pseudoClass = null;
	this.parent = null;
};
$hxClasses["haxe.ui.styles.elements.SelectorPart"] = haxe_ui_styles_elements_SelectorPart;
haxe_ui_styles_elements_SelectorPart.__name__ = "haxe.ui.styles.elements.SelectorPart";
haxe_ui_styles_elements_SelectorPart.prototype = {
	parent: null
	,pseudoClass: null
	,className: null
	,id: null
	,nodeName: null
	,direct: null
	,_parts: null
	,classNameParts: null
	,get_classNameParts: function() {
		if(this.className == null) {
			return null;
		}
		if(this._parts == null) {
			this._parts = this.className.split(".");
		}
		return this._parts;
	}
	,toString: function() {
		var sb_b = "";
		if(this.id != null) {
			sb_b += Std.string("#" + this.id);
		}
		if(this.nodeName != null) {
			sb_b += Std.string(this.nodeName);
		}
		if(this.className != null) {
			sb_b += Std.string("." + this.className);
		}
		if(this.pseudoClass != null) {
			sb_b += Std.string(":" + this.pseudoClass);
		}
		return sb_b;
	}
	,__class__: haxe_ui_styles_elements_SelectorPart
	,__properties__: {get_classNameParts:"get_classNameParts"}
};
var haxe_ui_themes_Theme = function() {
	this.styles = [];
	this.images = [];
	this.vars = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.themes.Theme"] = haxe_ui_themes_Theme;
haxe_ui_themes_Theme.__name__ = "haxe.ui.themes.Theme";
haxe_ui_themes_Theme.prototype = {
	parent: null
	,styles: null
	,images: null
	,vars: null
	,__class__: haxe_ui_themes_Theme
};
var haxe_ui_themes_ThemeManager = function() {
	this.currentThemeVars = new haxe_ds_StringMap();
	this._eventMap = null;
	this._themes = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.themes.ThemeManager"] = haxe_ui_themes_ThemeManager;
haxe_ui_themes_ThemeManager.__name__ = "haxe.ui.themes.ThemeManager";
haxe_ui_themes_ThemeManager.__properties__ = {get_instance:"get_instance"};
haxe_ui_themes_ThemeManager._instance = null;
haxe_ui_themes_ThemeManager.instance = null;
haxe_ui_themes_ThemeManager.get_instance = function() {
	if(haxe_ui_themes_ThemeManager._instance == null) {
		haxe_ui_themes_ThemeManager._instance = new haxe_ui_themes_ThemeManager();
	}
	return haxe_ui_themes_ThemeManager._instance;
};
haxe_ui_themes_ThemeManager.prototype = {
	_themes: null
	,_themeImages: null
	,_eventMap: null
	,registerEvent: function(type,listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(this._eventMap == null) {
			this._eventMap = new haxe_ui_util_EventMap();
		}
		this._eventMap.add(type,listener);
	}
	,unregisterEvent: function(type,listener) {
		if(this._eventMap == null) {
			return;
		}
		this._eventMap.remove(type,listener);
	}
	,dispatch: function(event) {
		if(this._eventMap == null) {
			return;
		}
		this._eventMap.invoke(event.type,new haxe_ui_events_ThemeEvent(haxe_ui_events_ThemeEvent.THEME_CHANGED));
	}
	,getTheme: function(themeName) {
		var theme = this._themes.h[themeName];
		if(theme == null) {
			theme = new haxe_ui_themes_Theme();
			this._themes.h[themeName] = theme;
		}
		return theme;
	}
	,addStyleResource: function(themeName,resourceId,priority,styleData) {
		if(priority == null) {
			priority = 0;
		}
		this.getTheme(themeName).styles.push({ resourceId : resourceId, priority : priority, styleData : styleData});
	}
	,setThemeVar: function(themeName,varName,varValue) {
		var theme = this.getTheme(themeName);
		if(theme == null) {
			return;
		}
		theme.vars.h[varName] = varValue;
	}
	,setCurrentThemeVar: function(varName,varValue) {
		this.setThemeVar(haxe_ui_Toolkit.get_theme(),varName,varValue);
	}
	,addImageResource: function(themeName,id,resourceId,priority) {
		if(priority == null) {
			priority = 0;
		}
		this.getTheme(themeName).images.push({ id : id, resourceId : resourceId, priority : priority});
	}
	,currentThemeVars: null
	,applyTheme: function(themeName) {
		haxe_ui_Toolkit.styleSheet.clear("default");
		var finalVars = new haxe_ds_StringMap();
		this.buildThemeVars("global",finalVars);
		this.buildThemeVars(themeName,finalVars);
		this.currentThemeVars = new haxe_ds_StringMap();
		var h = finalVars.h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			this.currentThemeVars.h[k] = finalVars.h[k];
		}
		var entries = [];
		this.buildThemeEntries("global",entries);
		this.buildThemeEntries(themeName,entries);
		haxe_ds_ArraySort.sort(entries,function(a,b) {
			if(a.priority < b.priority) {
				return -1;
			} else if(a.priority > b.priority) {
				return 1;
			}
			return 0;
		});
		var _g = 0;
		while(_g < entries.length) {
			var e = entries[_g];
			++_g;
			this.applyResource(e.resourceId,e.styleData);
		}
		var images = [];
		this.buildThemeImages("global",images);
		this.buildThemeImages(themeName,images);
		haxe_ds_ArraySort.sort(images,function(a,b) {
			if(a.priority < b.priority) {
				return -1;
			} else if(a.priority > b.priority) {
				return 1;
			}
			return 0;
		});
		var _g = 0;
		while(_g < images.length) {
			var i = images[_g];
			++_g;
			if(this._themeImages == null) {
				this._themeImages = new haxe_ds_StringMap();
			}
			this._themeImages.h[i.id] = i;
		}
		this.dispatch(new haxe_ui_events_ThemeEvent(haxe_ui_events_ThemeEvent.THEME_CHANGED));
	}
	,applyResource: function(resourceId,styleData) {
		var style = "";
		if(resourceId != null) {
			style = haxe_ui_Toolkit.get_assets().getText(resourceId);
		}
		if(styleData != null) {
			if(style == null) {
				style = "";
			}
			style += "\n" + styleData;
		}
		if(style != null) {
			this.addStyleString(style);
		} else {
			haxe_Log.trace("WARNING: could not find " + resourceId,{ fileName : "haxe/ui/themes/ThemeManager.hx", lineNumber : 155, className : "haxe.ui.themes.ThemeManager", methodName : "applyResource"});
		}
	}
	,addStyleString: function(style) {
		haxe_ui_Toolkit.styleSheet.parse(style);
	}
	,buildThemeVars: function(themeName,vars) {
		var theme = this._themes.h[themeName];
		if(theme == null) {
			return;
		}
		if(theme.parent != null) {
			this.buildThemeVars(theme.parent,vars);
		}
		var h = theme.vars.h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			var v = theme.vars.h[k];
			vars.h[k] = v;
		}
	}
	,buildThemeEntries: function(themeName,arr) {
		var theme = this._themes.h[themeName];
		if(theme == null) {
			return;
		}
		if(theme.parent != null) {
			this.buildThemeEntries(theme.parent,arr);
		}
		var _g = 0;
		var _g1 = theme.styles;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			arr.push(s);
		}
	}
	,buildThemeImages: function(themeName,arr) {
		var theme = this._themes.h[themeName];
		if(theme == null) {
			return;
		}
		if(theme.parent != null) {
			this.buildThemeImages(theme.parent,arr);
		}
		var _g = 0;
		var _g1 = theme.images;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			arr.push(s);
		}
	}
	,image: function(id) {
		var image = this._themeImages.h[id];
		if(image == null) {
			return null;
		}
		return image.resourceId;
	}
	,icon: function(id) {
		return this.image(id);
	}
	,__class__: haxe_ui_themes_ThemeManager
};
var haxe_ui_tooltips_ToolTip = function() {
	haxe_ui_containers_Box.call(this);
};
$hxClasses["haxe.ui.tooltips.ToolTip"] = haxe_ui_tooltips_ToolTip;
haxe_ui_tooltips_ToolTip.__name__ = "haxe.ui.tooltips.ToolTip";
haxe_ui_tooltips_ToolTip.__super__ = haxe_ui_containers_Box;
haxe_ui_tooltips_ToolTip.prototype = $extend(haxe_ui_containers_Box.prototype,{
	registerBehaviours: function() {
		haxe_ui_containers_Box.prototype.registerBehaviours.call(this);
	}
	,cloneComponent: function() {
		var c = haxe_ui_containers_Box.prototype.cloneComponent.call(this);
		if((this._children == null ? [] : this._children).length != (c._children == null ? [] : c._children).length) {
			var _g = 0;
			var _g1 = this._children == null ? [] : this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				c.addComponent(child.cloneComponent());
			}
		}
		this.postCloneComponent(c);
		return c;
	}
	,self: function() {
		return new haxe_ui_tooltips_ToolTip();
	}
	,__class__: haxe_ui_tooltips_ToolTip
});
var haxe_ui_tooltips_ToolTipManager = function() {
	this._toolTipContents = null;
	this._toolTip = null;
	this._timer = null;
	this._currentComponent = null;
	this._lastMouseEvent = null;
	this._toolTipOptions = new haxe_ds_ObjectMap();
};
$hxClasses["haxe.ui.tooltips.ToolTipManager"] = haxe_ui_tooltips_ToolTipManager;
haxe_ui_tooltips_ToolTipManager.__name__ = "haxe.ui.tooltips.ToolTipManager";
haxe_ui_tooltips_ToolTipManager.__properties__ = {get_instance:"get_instance"};
haxe_ui_tooltips_ToolTipManager._instance = null;
haxe_ui_tooltips_ToolTipManager.instance = null;
haxe_ui_tooltips_ToolTipManager.get_instance = function() {
	if(haxe_ui_tooltips_ToolTipManager._instance == null) {
		haxe_ui_tooltips_ToolTipManager._instance = new haxe_ui_tooltips_ToolTipManager();
	}
	return haxe_ui_tooltips_ToolTipManager._instance;
};
haxe_ui_tooltips_ToolTipManager.prototype = {
	_lastMouseEvent: null
	,_toolTipOptions: null
	,registerTooltip: function(target,options) {
		if(this._toolTipOptions.h.__keys__[target.__id__] != null) {
			return;
		}
		if(options == null) {
			options = { };
		}
		if(options.tipData == null) {
			options.tipData = { text : target.get_tooltip()};
		}
		this._toolTipOptions.set(target,options);
		target.registerEvent("mouseover",$bind(this,this.onTargetMouseOver));
	}
	,unregisterTooltip: function(target) {
		target.unregisterEvent("mouseover",$bind(this,this.onTargetMouseOver));
		target.unregisterEvent("mouseout",$bind(this,this.onTargetMouseOut));
		target.unregisterEvent("mousemove",$bind(this,this.onTargetMouseMove));
		this._toolTipOptions.remove(target);
	}
	,getTooltipOptions: function(target) {
		return this._toolTipOptions.h[target.__id__];
	}
	,updateTooltipRenderer: function(target,renderer) {
		if(this._toolTipOptions.h.__keys__[target.__id__] == null) {
			return;
		}
		var options = this._toolTipOptions.h[target.__id__];
		options.renderer = renderer;
	}
	,_currentComponent: null
	,_timer: null
	,onTargetMouseOver: function(event) {
		this.stopCurrent();
		this._lastMouseEvent = event;
		this._currentComponent = event.target;
		event.target.registerEvent("mouseout",$bind(this,this.onTargetMouseOut));
		event.target.registerEvent("mousemove",$bind(this,this.onTargetMouseMove));
		haxe_ui_core_Screen.get_instance().registerEvent("mousemove",$bind(this,this.onScreenMouseMove));
		this.startTimer();
	}
	,onTargetMouseMove: function(event) {
		if(this._toolTip != null && this._toolTip.get_hidden() == false) {
			return;
		}
		this.stopTimer();
		this.startTimer();
	}
	,onTargetMouseOut: function(event) {
		this.stopCurrent();
		this.hideToolTip();
	}
	,onDelayTimer: function() {
		this._timer.stop();
		this._timer = null;
		this.showToolTip();
	}
	,onScreenMouseMove: function(event) {
		this._lastMouseEvent = event;
	}
	,onScreenMouseDown: function(event) {
		this.hideToolTip();
	}
	,startTimer: function() {
		this._timer = new haxe_ui_util_Timer(haxe_ui_tooltips_ToolTipManager.defaultDelay,$bind(this,this.onDelayTimer));
	}
	,stopTimer: function() {
		if(this._timer != null) {
			this._timer.stop();
			this._timer = null;
		}
	}
	,stopCurrent: function() {
		if(this._currentComponent != null) {
			this._currentComponent.unregisterEvent("mouseout",$bind(this,this.onTargetMouseOut));
			this._currentComponent = null;
		}
		this.stopTimer();
		haxe_ui_core_Screen.get_instance().unregisterEvent("mousemove",$bind(this,this.onScreenMouseMove));
	}
	,_toolTip: null
	,_toolTipContents: null
	,createToolTip: function() {
		if(this._toolTip != null) {
			return;
		}
		this._toolTip = new haxe_ui_tooltips_ToolTip();
	}
	,showToolTip: function() {
		var _gthis = this;
		if(this._currentComponent == null) {
			return;
		}
		if(this._currentComponent.get_disabled() == true || this._currentComponent.get_hidden() == true) {
			this.stopCurrent();
			return;
		}
		this.createToolTip();
		this._toolTip.hide();
		var options = this._toolTipOptions.h[this._currentComponent.__id__];
		var renderer = this.createToolTipRenderer(options);
		var _this = this._toolTip;
		if((_this._children == null ? [] : _this._children)[0] != renderer) {
			var _this = this._toolTip;
			if((_this._children == null ? [] : _this._children).length > 0) {
				this._toolTip.removeComponentAt(0,false);
			}
			this._toolTip.addComponent(renderer);
		}
		renderer.set_data(options.tipData);
		haxe_ui_core_Screen.get_instance().addComponent(this._toolTip);
		haxe_ui_core_Screen.get_instance().setComponentIndex(this._toolTip,haxe_ui_core_Screen.get_instance().rootComponents.length - 1);
		this._toolTip.validateNow();
		this.positionToolTip();
		haxe_ui_Toolkit.callLater(function() {
			if(haxe_ui_tooltips_ToolTipManager.fade == true) {
				_gthis._toolTip.fadeIn();
			} else {
				_gthis._toolTip.show();
			}
		});
		haxe_ui_core_Screen.get_instance().registerEvent("mousedown",$bind(this,this.onScreenMouseDown));
	}
	,positionToolTip: function() {
		var x = this._lastMouseEvent.screenX + this._toolTip.get_marginLeft();
		var y = this._lastMouseEvent.screenY + this._toolTip.get_marginTop();
		var w = this._toolTip.get_width();
		var h = this._toolTip.get_height();
		var maxX = haxe_ui_core_Screen.get_instance().get_width();
		var maxY = haxe_ui_core_Screen.get_instance().get_height();
		if(x + w > maxX) {
			x -= w;
		}
		if(y + h > maxY) {
			y = this._lastMouseEvent.screenY - h - this._toolTip.get_marginTop() / 2;
		}
		this._toolTip.set_left(x * haxe_ui_Toolkit.get_scale());
		this._toolTip.set_top(y * haxe_ui_Toolkit.get_scale());
	}
	,hideToolTip: function() {
		if(this._toolTip != null) {
			if(haxe_ui_tooltips_ToolTipManager.fade == true) {
				this._toolTip.fadeOut();
			} else {
				this._toolTip.hide();
			}
		}
		haxe_ui_core_Screen.get_instance().unregisterEvent("mousedown",$bind(this,this.onScreenMouseDown));
	}
	,createToolTipRenderer: function(options) {
		if(options.renderer != null) {
			return options.renderer;
		}
		if(haxe_ui_tooltips_ToolTipManager.defaultRenderer != null) {
			return haxe_ui_tooltips_ToolTipManager.defaultRenderer;
		}
		if(this._toolTipContents != null) {
			return this._toolTipContents;
		}
		this._toolTipContents = new haxe_ui_core_ItemRenderer();
		var label = new haxe_ui_components_Label();
		label.set_id("text");
		this._toolTipContents.addComponent(label);
		return this._toolTipContents;
	}
	,__class__: haxe_ui_tooltips_ToolTipManager
};
var haxe_ui_util_CallbackMap = function() {
	this._map = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.util.CallbackMap"] = haxe_ui_util_CallbackMap;
haxe_ui_util_CallbackMap.__name__ = "haxe.ui.util.CallbackMap";
haxe_ui_util_CallbackMap.prototype = {
	_map: null
	,add: function(key,callback,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(callback == null) {
			return false;
		}
		var b = false;
		var arr = this._map.h[key];
		if(arr == null) {
			arr = new haxe_ui_util_FunctionArray();
			arr.push(callback,priority);
			this._map.h[key] = arr;
			b = true;
		} else if(arr.contains(callback) == false) {
			arr.push(callback,priority);
		}
		return b;
	}
	,remove: function(key,callback) {
		var b = false;
		var arr = this._map.h[key];
		if(arr != null) {
			arr.remove(callback);
			if(arr.get_length() == 0) {
				var _this = this._map;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
				b = true;
			}
		}
		return b;
	}
	,removeAll: function(key) {
		var arr = this._map.h[key];
		if(arr != null) {
			while(arr.get_length() > 0) arr.remove(arr.get(0));
			var _this = this._map;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
	}
	,invoke: function(key,param) {
		var arr = this._map.h[key];
		if(arr != null) {
			arr = arr.copy();
			var listener = arr.iterator();
			while(listener.hasNext()) {
				var listener1 = listener.next();
				listener1.callback(param);
			}
		}
	}
	,invokeAndRemove: function(key,param) {
		var arr = this._map.h[key];
		if(arr != null) {
			arr = arr.copy();
			this.removeAll(key);
			var listener = arr.iterator();
			while(listener.hasNext()) {
				var listener1 = listener.next();
				listener1.callback(param);
			}
		}
	}
	,count: function(key) {
		var n = 0;
		var arr = this._map.h[key];
		if(arr != null) {
			n = arr.get_length();
		}
		return n;
	}
	,__class__: haxe_ui_util_CallbackMap
};
var haxe_ui_util_Color = {};
haxe_ui_util_Color.__properties__ = {set_a:"set_a",get_a:"get_a",set_b:"set_b",get_b:"get_b",set_g:"set_g",get_g:"get_g",set_r:"set_r",get_r:"get_r"};
haxe_ui_util_Color.fromString = function(s) {
	if(StringTools.startsWith(s,"0x") || StringTools.startsWith(s,"#")) {
		return Std.parseInt("0x" + s.substring(s.length - 6));
	}
	switch(s) {
	case "aliceblue":
		return 15792383;
	case "antiquewhite":
		return 16444375;
	case "aqua":
		return 65535;
	case "aquamarine":
		return 8388564;
	case "azure":
		return 15794175;
	case "beige":
		return 16119260;
	case "bisque":
		return 16770244;
	case "black":
		return 0;
	case "blanchedalmond":
		return 16772045;
	case "blue":
		return 255;
	case "blueviolet":
		return 9055202;
	case "brown":
		return 10824234;
	case "burlywood":
		return 14596231;
	case "cadetblue":
		return 6266528;
	case "chartreuse":
		return 8388352;
	case "chocolate":
		return 13789470;
	case "coral":
		return 16744272;
	case "cornflowerblue":
		return 6591981;
	case "cornsilk":
		return 16775388;
	case "crimson":
		return 14423100;
	case "cyan":
		return 65535;
	case "darkblue":
		return 139;
	case "darkcyan":
		return 35723;
	case "darkgoldenrod":
		return 12092939;
	case "darkgray":
		return 11119017;
	case "darkgreen":
		return 25600;
	case "darkkhaki":
		return 12433259;
	case "darkmagenta":
		return 9109643;
	case "darkolivegreen":
		return 5597999;
	case "darkorange":
		return 16747520;
	case "darkorchid":
		return 10040012;
	case "darkred":
		return 9109504;
	case "darksalmon":
		return 15308410;
	case "darkseagreen":
		return 9419919;
	case "darkslateblue":
		return 4734347;
	case "darkslategray":
		return 3100495;
	case "darkturquoise":
		return 52945;
	case "darkviolet":
		return 9699539;
	case "deeppink":
		return 16716947;
	case "deepskyblue":
		return 49151;
	case "dimgray":
		return 6908265;
	case "dodgerblue":
		return 2003199;
	case "firebrick":
		return 11674146;
	case "floralwhite":
		return 16775920;
	case "forestgreen":
		return 2263842;
	case "fuchsia":
		return 16711935;
	case "gainsboro":
		return 14474460;
	case "ghostwhite":
		return 16316671;
	case "gold":
		return 16766720;
	case "goldenrod":
		return 14329120;
	case "green":
		return 32768;
	case "greenyellow":
		return 11403055;
	case "gray":case "grey":
		return 8421504;
	case "honeydew":
		return 15794160;
	case "hotpink":
		return 16738740;
	case "indianred":
		return 13458524;
	case "indigo":
		return 4915330;
	case "ivory":
		return 16777200;
	case "khaki":
		return 15787660;
	case "lavender":
		return 15132410;
	case "lavenderblush":
		return 16773365;
	case "lawngreen":
		return 8190976;
	case "lemonchiffon":
		return 16775885;
	case "lightblue":
		return 11393254;
	case "lightcoral":
		return 15761536;
	case "lightcyan":
		return 14745599;
	case "lightgoldenrodyellow":
		return 16448210;
	case "lightgray":
		return 13882323;
	case "lightgreen":
		return 9498256;
	case "lightpink":
		return 16758465;
	case "lightsalmon":
		return 16752762;
	case "lightseagreen":
		return 2142890;
	case "lightskyblue":
		return 8900346;
	case "lightslategray":
		return 7833753;
	case "lightsteelblue":
		return 11584734;
	case "lightyellow":
		return 16777184;
	case "lime":
		return 65280;
	case "limegreen":
		return 3329330;
	case "linen":
		return 16445670;
	case "magenta":
		return 16711935;
	case "maroon":
		return 8388608;
	case "mediumaquamarine":
		return 6737322;
	case "mediumblue":
		return 205;
	case "mediumorchid":
		return 12211667;
	case "mediumpurple":
		return 9662683;
	case "mediumseagreen":
		return 3978097;
	case "mediumslateblue":
		return 8087790;
	case "mediumspringgreen":
		return 64154;
	case "mediumturquoise":
		return 4772300;
	case "mediumvioletred":
		return 13047173;
	case "midnightblue":
		return 1644912;
	case "mintcream":
		return 16121850;
	case "mistyrose":
		return 16770273;
	case "moccasin":
		return 16770229;
	case "navajowhite":
		return 16768685;
	case "navy":
		return 128;
	case "oldlace":
		return 16643558;
	case "olive":
		return 8421376;
	case "olivedrab":
		return 7048739;
	case "orange":
		return 16753920;
	case "orangered":
		return 16729344;
	case "orchid":
		return 14315734;
	case "palegoldenrod":
		return 15657130;
	case "palegreen":
		return 10025880;
	case "paleturquoise":
		return 11529966;
	case "palevioletred":
		return 14381203;
	case "papayawhip":
		return 16773077;
	case "peachpuff":
		return 16767673;
	case "peru":
		return 13468991;
	case "pink":
		return 16761035;
	case "plum":
		return 14524637;
	case "powderblue":
		return 11591910;
	case "purple":
		return 8388736;
	case "red":
		return 16711680;
	case "rosybrown":
		return 12357519;
	case "royalblue":
		return 4286945;
	case "saddlebrown":
		return 9127187;
	case "salmon":
		return 16416882;
	case "sandybrown":
		return 16032864;
	case "seagreen":
		return 3050327;
	case "seashell":
		return 16774638;
	case "sienna":
		return 10506797;
	case "silver":
		return 12632256;
	case "skyblue":
		return 8900331;
	case "slateblue":
		return 6970061;
	case "slategray":
		return 7372944;
	case "snow":
		return 16775930;
	case "springgreen":
		return 65407;
	case "steelblue":
		return 4620980;
	case "tan":
		return 13808780;
	case "teal":
		return 32896;
	case "thistle":
		return 14204888;
	case "tomato":
		return 16737095;
	case "turquoise":
		return 4251856;
	case "violet":
		return 15631086;
	case "wheat":
		return 16113331;
	case "white":
		return 16777215;
	case "whitesmoke":
		return 16119285;
	case "yellow":
		return 16776960;
	case "yellowgreen":
		return 10145074;
	default:
		return 0;
	}
};
haxe_ui_util_Color.fromComponents = function(r,g,b,a) {
	var result = (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return result;
};
haxe_ui_util_Color.get_r = function(this1) {
	return this1 >> 16 & 255;
};
haxe_ui_util_Color.set_r = function(this1,value) {
	this1 = (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return this1;
};
haxe_ui_util_Color.get_g = function(this1) {
	return this1 >> 8 & 255;
};
haxe_ui_util_Color.set_g = function(this1,value) {
	this1 = (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return this1;
};
haxe_ui_util_Color.get_b = function(this1) {
	return this1 & 255;
};
haxe_ui_util_Color.set_b = function(this1,value) {
	this1 = (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return this1;
};
haxe_ui_util_Color.get_a = function(this1) {
	return this1 >> 24 & 255;
};
haxe_ui_util_Color.set_a = function(this1,value) {
	this1 = (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return this1;
};
haxe_ui_util_Color.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return this1;
};
haxe_ui_util_Color.toInt = function(this1) {
	return this1;
};
haxe_ui_util_Color.toHex = function(this1) {
	return "#" + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
};
haxe_ui_util_Color.or = function(a,b) {
	return haxe_ui_util_Color.toInt(a) | haxe_ui_util_Color.toInt(b);
};
haxe_ui_util_Color.sumColor = function(a,b) {
	return haxe_ui_util_Color.toInt(haxe_ui_util_Color.fromComponents((a >> 16 & 255) + (b >> 16 & 255),(a >> 8 & 255) + (b >> 8 & 255),(a & 255) + (b & 255),(a >> 24 & 255) + (b >> 24 & 255)));
};
haxe_ui_util_Color.restColor = function(a,b) {
	return haxe_ui_util_Color.toInt(haxe_ui_util_Color.fromComponents((a >> 16 & 255) - (b >> 16 & 255),(a >> 8 & 255) - (b >> 8 & 255),(a & 255) - (b & 255),(a >> 24 & 255) - (b >> 24 & 255)));
};
haxe_ui_util_Color.sumFloat = function(a,b) {
	var bInt = b | 0;
	return haxe_ui_util_Color.toInt(haxe_ui_util_Color.fromComponents((a >> 16 & 255) - bInt,(a >> 8 & 255) - bInt,(a & 255) - bInt,(a >> 24 & 255) - bInt));
};
haxe_ui_util_Color.mulFloat = function(a,b) {
	return haxe_ui_util_Color.toInt(haxe_ui_util_Color.fromComponents((a >> 16 & 255) * b | 0,(a >> 8 & 255) * b | 0,(a & 255) * b | 0,(a >> 24 & 255) * b | 0));
};
var haxe_ui_util_ColorUtil = function() { };
$hxClasses["haxe.ui.util.ColorUtil"] = haxe_ui_util_ColorUtil;
haxe_ui_util_ColorUtil.__name__ = "haxe.ui.util.ColorUtil";
haxe_ui_util_ColorUtil.toHSL = function(color) {
	var r = (color >> 16 & 255) / 255;
	var g = (color >> 8 & 255) / 255;
	var b = (color & 255) / 255;
	var numbers = [r,g,b];
	var r1 = numbers[0];
	var _g = 0;
	while(_g < numbers.length) {
		var n = numbers[_g];
		++_g;
		if(n < r1) {
			r1 = n;
		}
	}
	var min = r1;
	var numbers = [r,g,b];
	var r1 = numbers[0];
	var _g = 0;
	while(_g < numbers.length) {
		var n = numbers[_g];
		++_g;
		if(n > r1) {
			r1 = n;
		}
	}
	var max = r1;
	var delta = max - min;
	var h = 0;
	var s = 0;
	var l = (max + min) / 2;
	if(delta == 0.0) {
		h = 0.0;
		s = h;
	} else {
		s = l < 0.5 ? delta / (max + min) : delta / (2 - max - min);
		if(r == max) {
			h = (g - b) / delta + (g < b ? 6 : 0);
		} else if(g == max) {
			h = (b - r) / delta + 2;
		} else {
			h = (r - g) / delta + 4;
		}
		h *= 60;
	}
	return { h : Math.round(h), s : s * 100, l : l * 100};
};
haxe_ui_util_ColorUtil.fromHSL = function(hue,saturation,luminosity) {
	saturation /= 100;
	luminosity /= 100;
	var _c = function(d,s,l) {
		var m2 = l <= 0.5 ? l * (1 + s) : l + s - l * s;
		var m1 = 2 * l - m2;
		var v = d;
		v %= 360;
		if(v < 0) {
			v += 360;
		}
		d = v;
		if(d < 60) {
			return m1 + (m2 - m1) * d / 60;
		} else if(d < 180) {
			return m2;
		} else if(d < 240) {
			return m1 + (m2 - m1) * (240 - d) / 60;
		}
		return m1;
	};
	return haxe_ui_util_Color.fromComponents(Math.round(_c(hue + 120,saturation,luminosity) * 255),Math.round(_c(hue,saturation,luminosity) * 255),Math.round(_c(hue - 120,saturation,luminosity) * 255),255);
};
haxe_ui_util_ColorUtil.toHSV = function(color) {
	var r = (color >> 16 & 255) / 255;
	var g = (color >> 8 & 255) / 255;
	var b = (color & 255) / 255;
	var numbers = [r,g,b];
	var r1 = numbers[0];
	var _g = 0;
	while(_g < numbers.length) {
		var n = numbers[_g];
		++_g;
		if(n < r1) {
			r1 = n;
		}
	}
	var min = r1;
	var numbers = [r,g,b];
	var r1 = numbers[0];
	var _g = 0;
	while(_g < numbers.length) {
		var n = numbers[_g];
		++_g;
		if(n > r1) {
			r1 = n;
		}
	}
	var max = r1;
	var delta = max - min;
	var h = 0;
	var s = 0;
	var v = max;
	if(delta != 0) {
		s = delta / max;
	} else {
		s = 0;
		h = 0;
		return { h : Math.round(h), s : s * 100, v : v * 100};
	}
	if(r == max) {
		h = (g - b) / delta;
	} else if(g == max) {
		h = 2 + (b - r) / delta;
	} else {
		h = 4 + (r - g) / delta;
	}
	h *= 60;
	if(h < 0) {
		h += 360;
	}
	return { h : Math.round(h), s : s * 100, v : v * 100};
};
haxe_ui_util_ColorUtil.fromHSV = function(hue,saturation,value) {
	if(saturation == 0) {
		return haxe_ui_util_Color.fromComponents(value | 0,value | 0,value | 0,255);
	}
	saturation /= 100;
	value /= 100;
	var r;
	var g;
	var b;
	var h = hue / 60;
	var i = Math.floor(h);
	var f = h - i;
	var p = value * (1 - saturation);
	var q = value * (1 - f * saturation);
	var t = value * (1 - (1 - f) * saturation);
	switch(i) {
	case 0:
		r = value;
		g = t;
		b = p;
		break;
	case 1:
		r = q;
		g = value;
		b = p;
		break;
	case 2:
		r = p;
		g = value;
		b = t;
		break;
	case 3:
		r = p;
		g = q;
		b = value;
		break;
	case 4:
		r = t;
		g = p;
		b = value;
		break;
	default:
		r = value;
		g = p;
		b = q;
	}
	return haxe_ui_util_Color.fromComponents(Math.round(r * 255),Math.round(g * 255),Math.round(b * 255),255);
};
haxe_ui_util_ColorUtil.hsvToRGBF = function(hue,saturation,value) {
	var tmp = hue == 0 && saturation == 0 && value == 100;
	var tmp = saturation == 0;
	saturation /= 100;
	value /= 100;
	var r;
	var g;
	var b;
	var h = hue / 60;
	var i = Math.floor(h);
	var f = h - i;
	var p = value * (1 - saturation);
	var q = value * (1 - f * saturation);
	var t = value * (1 - (1 - f) * saturation);
	switch(i) {
	case 0:
		r = value;
		g = t;
		b = p;
		break;
	case 1:
		r = q;
		g = value;
		b = p;
		break;
	case 2:
		r = p;
		g = value;
		b = t;
		break;
	case 3:
		r = p;
		g = q;
		b = value;
		break;
	case 4:
		r = t;
		g = p;
		b = value;
		break;
	default:
		r = value;
		g = p;
		b = q;
	}
	return { r : r * 255, g : g * 255, b : b * 255};
};
haxe_ui_util_ColorUtil.rgbToGray = function(r,g,b) {
	var g1 = 0.3 * r + 0.59 * g + 0.11 * b;
	return Math.round(g1);
};
haxe_ui_util_ColorUtil.rgbfToHSV = function(r,g,b) {
	var tmp = Math.round(r) == 255 && Math.round(g) == 255 && Math.round(b) == 255;
	var r1 = r / 255;
	var g1 = g / 255;
	var b1 = b / 255;
	var numbers = [r1,g1,b1];
	var r = numbers[0];
	var _g = 0;
	while(_g < numbers.length) {
		var n = numbers[_g];
		++_g;
		if(n < r) {
			r = n;
		}
	}
	var min = r;
	var numbers = [r1,g1,b1];
	var r = numbers[0];
	var _g = 0;
	while(_g < numbers.length) {
		var n = numbers[_g];
		++_g;
		if(n > r) {
			r = n;
		}
	}
	var max = r;
	var delta = max - min;
	var h = 0;
	var s = 0;
	var v = max;
	if(delta != 0) {
		s = delta / max;
	} else {
		s = 0;
		h = 0;
		return { h : h, s : s * 100, v : v * 100};
	}
	if(r1 == max) {
		h = (g1 - b1) / delta;
	} else if(g1 == max) {
		h = 2 + (b1 - r1) / delta;
	} else {
		h = 4 + (r1 - g1) / delta;
	}
	h *= 60;
	if(h < 0) {
		h += 360;
	}
	if(Math.round(r1) == 255 && Math.round(g1) == 255 && Math.round(b1) == 255) {
		return { h : h, s : 0, v : 100};
	}
	return { h : h, s : s * 100, v : v * 100};
};
haxe_ui_util_ColorUtil.buildColorArray = function(startColor,endColor,size) {
	var array = [];
	var r1 = startColor >> 16 & 255;
	var g1 = startColor >> 8 & 255;
	var b1 = startColor & 255;
	var r2 = endColor >> 16 & 255;
	var g2 = endColor >> 8 & 255;
	var b2 = endColor & 255;
	var rd = r2 - r1;
	var gd = g2 - g1;
	var bd = b2 - b1;
	var ri = rd / (size - 1);
	var gi = gd / (size - 1);
	var bi = bd / (size - 1);
	var r = r1;
	var g = g1;
	var b = b1;
	var c;
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		var n = _g++;
		c = (Math.round(r) & 255) << 16 | (Math.round(g) & 255) << 8 | Math.round(b) & 255;
		array.push(haxe_ui_util_Color.toInt(c));
		r += ri;
		g += gi;
		b += bi;
	}
	return array;
};
haxe_ui_util_ColorUtil.parseColor = function(s) {
	if(StringTools.startsWith(s,"#")) {
		s = s.substring(1,s.length);
	} else if(StringTools.startsWith(s,"0x")) {
		s = s.substring(2,s.length);
	}
	return Std.parseInt("0x" + s);
};
var haxe_ui_util_ComponentUtil = function() { };
$hxClasses["haxe.ui.util.ComponentUtil"] = haxe_ui_util_ComponentUtil;
haxe_ui_util_ComponentUtil.__name__ = "haxe.ui.util.ComponentUtil";
haxe_ui_util_ComponentUtil.getDepth = function(target) {
	var count = 0;
	while(target.parentComponent != null) {
		target = target.parentComponent;
		++count;
	}
	return count;
};
haxe_ui_util_ComponentUtil.dumpComponentTree = function(from,verbose) {
	if(verbose == null) {
		verbose = false;
	}
	haxe_ui_util_ComponentUtil.recurseTreeGrouped(from,verbose);
};
haxe_ui_util_ComponentUtil.walkComponentTree = function(from,cb) {
	haxe_ui_util_ComponentUtil.recurseTree(0,from,cb);
};
haxe_ui_util_ComponentUtil.recurseTree = function(depth,c,cb) {
	cb(depth,c);
	var _g = 0;
	var _g1 = c._children == null ? [] : c._children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		haxe_ui_util_ComponentUtil.recurseTree(depth + 1,child,cb);
	}
};
haxe_ui_util_ComponentUtil.recurseTreeTrace = function(c,level,verbose) {
	var display = c.get_className();
	if(c.get_id() != null) {
		display += "#" + c.get_id();
	}
	var space = StringTools.lpad(""," ",level * 4);
	display = space + display;
	haxe_Log.trace(display,{ fileName : "haxe/ui/util/ComponentUtil.hx", lineNumber : 42, className : "haxe.ui.util.ComponentUtil", methodName : "recurseTreeTrace"});
	var _g = 0;
	var _g1 = c._children == null ? [] : c._children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		haxe_ui_util_ComponentUtil.recurseTreeTrace(child,level + 1,verbose);
	}
};
haxe_ui_util_ComponentUtil.recurseTreeGrouped = function(c,verbose) {
	var display = c.get_className();
	if(c.get_id() != null) {
		display += "#" + c.get_id();
	}
	$global.console.groupCollapsed(display);
	if(verbose == true) {
		$global.console.groupCollapsed("Component Details");
		$global.console.log(c.element);
		$global.console.groupEnd();
	}
	var _g = 0;
	var _g1 = c._children == null ? [] : c._children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		haxe_ui_util_ComponentUtil.recurseTreeGrouped(child,verbose);
	}
	$global.console.groupEnd();
};
var haxe_ui_util_Defines = function() { };
$hxClasses["haxe.ui.util.Defines"] = haxe_ui_util_Defines;
haxe_ui_util_Defines.__name__ = "haxe.ui.util.Defines";
haxe_ui_util_Defines.getAll = function() {
	haxe_ui_util_Defines.popuplate();
	return haxe_ui_util_Defines._map;
};
haxe_ui_util_Defines.set = function(name,value,overwrite) {
	if(overwrite == null) {
		overwrite = false;
	}
	haxe_ui_util_Defines.popuplate();
	if(overwrite == false && Object.prototype.hasOwnProperty.call(haxe_ui_util_Defines._map.h,name)) {
		return;
	}
	haxe_ui_util_Defines._map.h[name] = value;
};
haxe_ui_util_Defines.popuplate = function() {
	if(haxe_ui_util_Defines._map != null) {
		return;
	}
	haxe_ui_util_Defines._map = new haxe_ds_StringMap();
	if(haxe_ui_core_Platform.get_instance().get_isWindows()) {
		haxe_ui_util_Defines.set("windows","1");
	} else if(haxe_ui_core_Platform.get_instance().get_isLinux()) {
		haxe_ui_util_Defines.set("linux","1");
	} else if(haxe_ui_core_Platform.get_instance().get_isMac()) {
		haxe_ui_util_Defines.set("mac","1");
	}
};
haxe_ui_util_Defines.toObject = function() {
	haxe_ui_util_Defines.popuplate();
	var o = { };
	var h = haxe_ui_util_Defines._map.h;
	var k_h = h;
	var k_keys = Object.keys(h);
	var k_length = k_keys.length;
	var k_current = 0;
	while(k_current < k_length) {
		var k = k_keys[k_current++];
		var v = haxe_ui_util_Defines._map.h[k];
		o[k] = v;
	}
	return o;
};
var haxe_ui_util_EventMap = function() {
	this._map = new haxe_ds_StringMap();
};
$hxClasses["haxe.ui.util.EventMap"] = haxe_ui_util_EventMap;
haxe_ui_util_EventMap.__name__ = "haxe.ui.util.EventMap";
haxe_ui_util_EventMap.prototype = {
	_map: null
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this._map.h);
	}
	,add: function(type,listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(listener == null) {
			return false;
		}
		var b = false;
		var arr = this._map.h[type];
		if(arr == null) {
			arr = new haxe_ui_util_FunctionArray();
			arr.push(listener,priority);
			this._map.h[type] = arr;
			b = true;
		} else if(arr.contains(listener) == false) {
			arr.push(listener,priority);
		}
		return b;
	}
	,remove: function(type,listener) {
		if(listener == null) {
			return false;
		}
		var b = false;
		var arr = this._map.h[type];
		if(arr != null) {
			arr.remove(listener);
			if(arr.get_length() == 0) {
				var _this = this._map;
				if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
					delete(_this.h[type]);
				}
				b = true;
			}
		}
		return b;
	}
	,contains: function(type,listener) {
		var b = false;
		var arr = this._map.h[type];
		if(arr != null) {
			b = listener != null ? arr.contains(listener) : true;
		}
		return b;
	}
	,invoke: function(type,event,target) {
		if(event.bubble && event.target == null) {
			event.target = target;
		}
		var arr = this._map.h[type];
		if(arr != null && arr.get_length() > 0) {
			arr = arr.copy();
			var listener = arr.iterator();
			while(listener.hasNext()) {
				var listener1 = listener.next();
				if(event.canceled) {
					break;
				}
				var c = event.clone();
				if(c.target == null) {
					c.target = target;
				}
				listener1.callback(c);
				event.copyFrom(c);
				event.canceled = c.canceled;
			}
		}
	}
	,listenerCount: function(type) {
		var n = 0;
		var arr = this._map.h[type];
		if(arr != null) {
			n = arr.get_length();
		}
		return n;
	}
	,listeners: function(type) {
		var arr = this._map.h[type];
		if(arr == null) {
			return null;
		}
		return arr;
	}
	,__class__: haxe_ui_util_EventMap
};
var haxe_ui_util_ExpressionUtil = function() { };
$hxClasses["haxe.ui.util.ExpressionUtil"] = haxe_ui_util_ExpressionUtil;
haxe_ui_util_ExpressionUtil.__name__ = "haxe.ui.util.ExpressionUtil";
haxe_ui_util_ExpressionUtil.stringToLanguageExpression = function(s,localeManager) {
	if(localeManager == null) {
		localeManager = "haxe.ui.locale.LocaleManager";
	}
	var fixedParts = [];
	var beforePos = 0;
	var n1 = s.indexOf("{{");
	while(n1 != -1) {
		var before = s.substring(beforePos,n1);
		if(before.length > 0) {
			fixedParts.push("'" + before + "'");
		}
		var n2 = s.indexOf("}}",n1);
		var code = s.substring(n1 + 2,n2);
		var parts = code.split(",");
		var stringId = parts.shift();
		var callString = localeManager + ".instance.lookupString('";
		callString += stringId;
		callString += "'";
		if(parts.length > 0) {
			callString += ", ";
			callString += parts.join(", ");
		}
		callString += ")";
		fixedParts.push(callString);
		n1 = s.indexOf("{{",n2);
		beforePos = n2 + 2;
	}
	if(beforePos < s.length) {
		var before = s.substring(beforePos,s.length);
		if(before.length > 0) {
			fixedParts.push("'" + before + "'");
		}
	}
	var fixedCode = fixedParts.join(" + ");
	return fixedCode;
};
var haxe_ui_util_FunctionArray = function() {
	this._array = [];
};
$hxClasses["haxe.ui.util.FunctionArray"] = haxe_ui_util_FunctionArray;
haxe_ui_util_FunctionArray.__name__ = "haxe.ui.util.FunctionArray";
haxe_ui_util_FunctionArray.prototype = {
	_array: null
	,get: function(index) {
		return this._array[index].callback;
	}
	,length: null
	,get_length: function() {
		return this._array.length;
	}
	,push: function(x,priority) {
		if(priority == null) {
			priority = 0;
		}
		var this1 = new haxe_ui_util__$Listener_ListenerInternal(x,priority);
		var listener = this1;
		var _g = 0;
		var _g1 = this._array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this._array[i].priority < priority) {
				this._array.splice(i,0,listener);
				return i;
			}
		}
		return this._array.push(listener);
	}
	,pop: function() {
		return this._array.pop().callback;
	}
	,indexOf: function(x,fromIndex) {
		if(fromIndex == null) {
			fromIndex = 0;
		}
		var _g = fromIndex;
		var _g1 = this._array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this._array[i].callback == x) {
				return i;
			}
		}
		return -1;
	}
	,remove: function(x) {
		var index = this.indexOf(x);
		if(index != -1) {
			this._array.splice(index,1);
		}
		return index != -1;
	}
	,contains: function(x) {
		return this.indexOf(x) != -1;
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this._array);
	}
	,copy: function() {
		var fa = new haxe_ui_util_FunctionArray();
		fa._array = this._array.slice();
		return fa;
	}
	,toString: function() {
		var s = "[";
		var iter = this.iterator();
		while(iter.hasNext()) {
			s += Std.string(iter.next());
			if(iter.hasNext()) {
				s += ", ";
			}
		}
		s += "]";
		return s;
	}
	,__class__: haxe_ui_util_FunctionArray
	,__properties__: {get_length:"get_length"}
};
var haxe_ui_util_GUID = function() { };
$hxClasses["haxe.ui.util.GUID"] = haxe_ui_util_GUID;
haxe_ui_util_GUID.__name__ = "haxe.ui.util.GUID";
haxe_ui_util_GUID.randomIntegerWithinRange = function(min,max) {
	return Math.floor(Math.random() * (1 + max - min) + min);
};
haxe_ui_util_GUID.createRandomIdentifier = function(length,radix) {
	if(radix == null) {
		radix = 61;
	}
	var characters = ["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];
	var id = [];
	if(radix > 61) {
		radix = 61;
	}
	while(length-- > 0) id.push(characters[Math.floor(Math.random() * (1 + radix))]);
	return id.join("");
};
haxe_ui_util_GUID.uuid = function() {
	var specialChars = ["8","9","A","B"];
	return haxe_ui_util_GUID.createRandomIdentifier(8,15) + "-" + haxe_ui_util_GUID.createRandomIdentifier(4,15) + "-4" + haxe_ui_util_GUID.createRandomIdentifier(3,15) + "-" + specialChars[Math.floor(Math.random() * 4)] + haxe_ui_util_GUID.createRandomIdentifier(3,15) + "-" + haxe_ui_util_GUID.createRandomIdentifier(12,15);
};
var haxe_ui_util_ImageLoader = function(resource) {
	this._resource = resource;
};
$hxClasses["haxe.ui.util.ImageLoader"] = haxe_ui_util_ImageLoader;
haxe_ui_util_ImageLoader.__name__ = "haxe.ui.util.ImageLoader";
haxe_ui_util_ImageLoader.prototype = {
	_resource: null
	,load: function(callback,useCache) {
		if(useCache == null) {
			useCache = true;
		}
		if(haxe_ui_util_Variant.get_isString(this._resource)) {
			var stringResource = haxe_ui_util_Variant.toString(this._resource);
			if(useCache == true) {
				var cachedImage = haxe_ui_ToolkitAssets.get_instance().getCachedImage(stringResource);
				if(cachedImage != null) {
					callback(cachedImage);
					return;
				}
			}
			stringResource = StringTools.trim(stringResource);
			if(StringTools.startsWith(stringResource,"http://") || StringTools.startsWith(stringResource,"https://")) {
				this.loadFromHttp(stringResource,function(imageInfo) {
					haxe_ui_ToolkitAssets.get_instance().cacheImage(stringResource,imageInfo);
					callback(imageInfo);
				});
			} else if(StringTools.startsWith(stringResource,"file://")) {
				var tmp = HxOverrides.substr(stringResource,7,null);
				haxe_ui_Toolkit.get_assets().imageFromFile(tmp,function(imageInfo) {
					haxe_ui_ToolkitAssets.get_instance().cacheImage(stringResource,imageInfo);
					callback(imageInfo);
				});
			} else {
				haxe_ui_Toolkit.get_assets().getImage(stringResource,callback);
			}
		} else if(haxe_ui_util_Variant.get_isImageData(this._resource)) {
			var imageData = haxe_ui_util_Variant.toImageData(this._resource);
			if(callback != null) {
				callback(haxe_ui_ToolkitAssets.get_instance().imageInfoFromImageData(imageData));
			}
		}
	}
	,loadFromHttp: function(url,callback) {
		var request = new XMLHttpRequest();
		request.open("GET",url);
		request.responseType = "arraybuffer";
		request.onreadystatechange = function(_) {
			if(request.readyState != 4) {
				return;
			}
			var s;
			try {
				s = request.status;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				s = null;
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null && s >= 200 && s < 400) {
				haxe_ui_Toolkit.get_assets().imageFromBytes(haxe_io_Bytes.ofData(request.response),callback);
			} else if(s == null) {
				callback(null);
			} else {
				var error = "Http Error #" + request.status;
				if(s != null) {
					switch(s) {
					case 12007:
						error = "Unknown host";
						break;
					case 12029:
						error = "Failed to connect to host";
						break;
					default:
					}
				}
				haxe_Log.trace(error,{ fileName : "haxe/ui/util/ImageLoader.hx", lineNumber : 93, className : "haxe.ui.util.ImageLoader", methodName : "loadFromHttp"});
				if(s == 0) {
					haxe_ui_Toolkit.get_assets().getImage(url,callback);
					return;
				}
				callback(null);
			}
		};
		request.onerror = function(x) {
		};
		request.send();
	}
	,__class__: haxe_ui_util_ImageLoader
};
var haxe_ui_util_Listener = {};
haxe_ui_util_Listener._new = function(callback,priority) {
	var this1 = new haxe_ui_util__$Listener_ListenerInternal(callback,priority);
	return this1;
};
haxe_ui_util_Listener.compareListener = function(a,b) {
	return a.callback == b.callback;
};
haxe_ui_util_Listener.compareFunction = function(a,b) {
	return a.callback == b;
};
haxe_ui_util_Listener.toFunc = function(this1) {
	return this1.callback;
};
var haxe_ui_util__$Listener_ListenerInternal = function(callback,priority) {
	this.callback = callback;
	this.priority = priority;
};
$hxClasses["haxe.ui.util._Listener.ListenerInternal"] = haxe_ui_util__$Listener_ListenerInternal;
haxe_ui_util__$Listener_ListenerInternal.__name__ = "haxe.ui.util._Listener.ListenerInternal";
haxe_ui_util__$Listener_ListenerInternal.prototype = {
	callback: null
	,priority: null
	,__class__: haxe_ui_util__$Listener_ListenerInternal
};
var haxe_ui_util_MathUtil = function() { };
$hxClasses["haxe.ui.util.MathUtil"] = haxe_ui_util_MathUtil;
haxe_ui_util_MathUtil.__name__ = "haxe.ui.util.MathUtil";
haxe_ui_util_MathUtil.distance = function(x1,y1,x2,y2) {
	return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
};
haxe_ui_util_MathUtil.round = function(v,precision) {
	if(precision == null) {
		precision = 0;
	}
	return Math.round(v * Math.pow(10,precision)) / Math.pow(10,precision);
};
haxe_ui_util_MathUtil.roundToNearest = function(v,n) {
	var r = v % n;
	if(r <= n / 2) {
		return Math.round(v - r);
	}
	return Math.round(v + n - r);
};
haxe_ui_util_MathUtil.clamp = function(v,min,max) {
	if(v == null || isNaN(v)) {
		return min;
	}
	if(min != null && v < min) {
		v = min;
	} else if(max != null && v > max) {
		v = max;
	}
	return v;
};
haxe_ui_util_MathUtil.min = function(numbers) {
	var r = numbers[0];
	var _g = 0;
	while(_g < numbers.length) {
		var n = numbers[_g];
		++_g;
		if(n < r) {
			r = n;
		}
	}
	return r;
};
haxe_ui_util_MathUtil.max = function(numbers) {
	var r = numbers[0];
	var _g = 0;
	while(_g < numbers.length) {
		var n = numbers[_g];
		++_g;
		if(n > r) {
			r = n;
		}
	}
	return r;
};
haxe_ui_util_MathUtil.wrapCircular = function(v,max) {
	v %= max;
	if(v < 0) {
		v += max;
	}
	return v;
};
var haxe_ui_util_RTTI = function() { };
$hxClasses["haxe.ui.util.RTTI"] = haxe_ui_util_RTTI;
haxe_ui_util_RTTI.__name__ = "haxe.ui.util.RTTI";
haxe_ui_util_RTTI.addClassProperty = function(className,propertyName,propertyType) {
	className = className.toLowerCase();
	propertyName = propertyName.toLowerCase();
	propertyType = propertyType.toLowerCase();
	if(propertyType == "null<bool>") {
		propertyType = "bool";
	}
	if(propertyType == "null<int>") {
		propertyType = "int";
	}
	if(propertyType == "null<float>") {
		propertyType = "float";
	}
	if(haxe_ui_util_RTTI.classInfo == null) {
		haxe_ui_util_RTTI.classInfo = new haxe_ds_StringMap();
	}
	var entry = haxe_ui_util_RTTI.classInfo.h[className];
	if(entry == null) {
		entry = { };
		haxe_ui_util_RTTI.classInfo.h[className] = entry;
	}
	if(entry.properties == null) {
		entry.properties = new haxe_ds_StringMap();
	}
	entry.properties.h[propertyName] = { propertyName : propertyName, propertyType : propertyType};
};
haxe_ui_util_RTTI.setSuperClass = function(className,superClassName) {
	if(haxe_ui_util_RTTI.classInfo == null) {
		haxe_ui_util_RTTI.classInfo = new haxe_ds_StringMap();
	}
	className = className.toLowerCase();
	superClassName = superClassName.toLowerCase();
	if(StringTools.startsWith(superClassName,".")) {
		superClassName = HxOverrides.substr(superClassName,1,null);
	}
	var entry = haxe_ui_util_RTTI.classInfo.h[className];
	if(entry == null) {
		entry = { properties : new haxe_ds_StringMap()};
		haxe_ui_util_RTTI.classInfo.h[className] = entry;
	}
	entry.superClass = superClassName;
};
haxe_ui_util_RTTI.hasSuperClass = function(className,superClassName) {
	haxe_ui_util_RTTI.load();
	className = className.toLowerCase();
	superClassName = superClassName.toLowerCase();
	if(StringTools.startsWith(superClassName,".")) {
		superClassName = HxOverrides.substr(superClassName,1,null);
	}
	var entry = haxe_ui_util_RTTI.classInfo.h[className];
	if(entry == null) {
		return false;
	}
	if(className == superClassName) {
		return true;
	}
	var testSuper = entry.superClass;
	while(testSuper != null) {
		if(testSuper == superClassName) {
			return true;
		}
		entry = haxe_ui_util_RTTI.classInfo.h[testSuper];
		if(entry == null) {
			return false;
		}
		testSuper = entry.superClass;
	}
	return false;
};
haxe_ui_util_RTTI.hasClassProperty = function(className,propertyName) {
	return haxe_ui_util_RTTI.getClassProperty(className,propertyName) != null;
};
haxe_ui_util_RTTI.load = function() {
	if(haxe_ui_util_RTTI.classInfo != null) {
		return;
	}
	var s = haxe_Resource.getString("haxeui_rtti");
	if(s == null) {
		return;
	}
	var unserializer = new haxe_Unserializer(s);
	haxe_ui_util_RTTI.classInfo = unserializer.unserialize();
};
haxe_ui_util_RTTI.getClassInfo = function(className) {
	haxe_ui_util_RTTI.load();
	if(haxe_ui_util_RTTI.classInfo == null) {
		return null;
	}
	className = className.toLowerCase();
	var entry = haxe_ui_util_RTTI.classInfo.h[className];
	return entry;
};
haxe_ui_util_RTTI.getClassProperty = function(className,propertyName) {
	if(className == null || propertyName == null) {
		return null;
	}
	className = className.toLowerCase();
	propertyName = propertyName.toLowerCase();
	var entry = haxe_ui_util_RTTI.getClassInfo(className);
	if(entry == null) {
		return null;
	}
	var propInfo = null;
	if(entry.properties != null && Object.prototype.hasOwnProperty.call(entry.properties.h,propertyName)) {
		propInfo = entry.properties.h[propertyName];
	}
	if(propInfo == null && entry.superClass != null) {
		propInfo = haxe_ui_util_RTTI.getClassProperty(entry.superClass,propertyName);
	}
	return propInfo;
};
haxe_ui_util_RTTI.save = function() {
};
var haxe_ui_util_SimpleExpressionEvaluatorOperation = $hxEnums["haxe.ui.util.SimpleExpressionEvaluatorOperation"] = { __ename__:"haxe.ui.util.SimpleExpressionEvaluatorOperation",__constructs__:null
	,Add: {_hx_name:"Add",_hx_index:0,__enum__:"haxe.ui.util.SimpleExpressionEvaluatorOperation",toString:$estr}
	,Subtract: {_hx_name:"Subtract",_hx_index:1,__enum__:"haxe.ui.util.SimpleExpressionEvaluatorOperation",toString:$estr}
	,Multiply: {_hx_name:"Multiply",_hx_index:2,__enum__:"haxe.ui.util.SimpleExpressionEvaluatorOperation",toString:$estr}
	,Divide: {_hx_name:"Divide",_hx_index:3,__enum__:"haxe.ui.util.SimpleExpressionEvaluatorOperation",toString:$estr}
	,Equals: {_hx_name:"Equals",_hx_index:4,__enum__:"haxe.ui.util.SimpleExpressionEvaluatorOperation",toString:$estr}
	,NotEquals: {_hx_name:"NotEquals",_hx_index:5,__enum__:"haxe.ui.util.SimpleExpressionEvaluatorOperation",toString:$estr}
	,GreaterThan: {_hx_name:"GreaterThan",_hx_index:6,__enum__:"haxe.ui.util.SimpleExpressionEvaluatorOperation",toString:$estr}
	,GreaterThanOrEquals: {_hx_name:"GreaterThanOrEquals",_hx_index:7,__enum__:"haxe.ui.util.SimpleExpressionEvaluatorOperation",toString:$estr}
	,LessThan: {_hx_name:"LessThan",_hx_index:8,__enum__:"haxe.ui.util.SimpleExpressionEvaluatorOperation",toString:$estr}
	,LessThanOrEquals: {_hx_name:"LessThanOrEquals",_hx_index:9,__enum__:"haxe.ui.util.SimpleExpressionEvaluatorOperation",toString:$estr}
	,LogicalAnd: {_hx_name:"LogicalAnd",_hx_index:10,__enum__:"haxe.ui.util.SimpleExpressionEvaluatorOperation",toString:$estr}
	,LogicalOr: {_hx_name:"LogicalOr",_hx_index:11,__enum__:"haxe.ui.util.SimpleExpressionEvaluatorOperation",toString:$estr}
};
haxe_ui_util_SimpleExpressionEvaluatorOperation.__constructs__ = [haxe_ui_util_SimpleExpressionEvaluatorOperation.Add,haxe_ui_util_SimpleExpressionEvaluatorOperation.Subtract,haxe_ui_util_SimpleExpressionEvaluatorOperation.Multiply,haxe_ui_util_SimpleExpressionEvaluatorOperation.Divide,haxe_ui_util_SimpleExpressionEvaluatorOperation.Equals,haxe_ui_util_SimpleExpressionEvaluatorOperation.NotEquals,haxe_ui_util_SimpleExpressionEvaluatorOperation.GreaterThan,haxe_ui_util_SimpleExpressionEvaluatorOperation.GreaterThanOrEquals,haxe_ui_util_SimpleExpressionEvaluatorOperation.LessThan,haxe_ui_util_SimpleExpressionEvaluatorOperation.LessThanOrEquals,haxe_ui_util_SimpleExpressionEvaluatorOperation.LogicalAnd,haxe_ui_util_SimpleExpressionEvaluatorOperation.LogicalOr];
haxe_ui_util_SimpleExpressionEvaluatorOperation.__empty_constructs__ = [haxe_ui_util_SimpleExpressionEvaluatorOperation.Add,haxe_ui_util_SimpleExpressionEvaluatorOperation.Subtract,haxe_ui_util_SimpleExpressionEvaluatorOperation.Multiply,haxe_ui_util_SimpleExpressionEvaluatorOperation.Divide,haxe_ui_util_SimpleExpressionEvaluatorOperation.Equals,haxe_ui_util_SimpleExpressionEvaluatorOperation.NotEquals,haxe_ui_util_SimpleExpressionEvaluatorOperation.GreaterThan,haxe_ui_util_SimpleExpressionEvaluatorOperation.GreaterThanOrEquals,haxe_ui_util_SimpleExpressionEvaluatorOperation.LessThan,haxe_ui_util_SimpleExpressionEvaluatorOperation.LessThanOrEquals,haxe_ui_util_SimpleExpressionEvaluatorOperation.LogicalAnd,haxe_ui_util_SimpleExpressionEvaluatorOperation.LogicalOr];
var haxe_ui_util_SimpleExpressionEvaluator = function() { };
$hxClasses["haxe.ui.util.SimpleExpressionEvaluator"] = haxe_ui_util_SimpleExpressionEvaluator;
haxe_ui_util_SimpleExpressionEvaluator.__name__ = "haxe.ui.util.SimpleExpressionEvaluator";
haxe_ui_util_SimpleExpressionEvaluator.evalCondition = function(condition) {
	return haxe_ui_util_SimpleExpressionEvaluator.eval(condition,{ Backend : haxe_ui_Backend, backend : haxe_ui_Backend.get_id(), defined : haxe_ui_util_SimpleExpressionEvaluator.defined});
};
haxe_ui_util_SimpleExpressionEvaluator.defined = function(key) {
	var this1 = haxe_ui_util_Defines.getAll();
	return Object.prototype.hasOwnProperty.call(this1.h,key);
};
haxe_ui_util_SimpleExpressionEvaluator.eval = function(s,context) {
	var r = null;
	if(s.indexOf("||") != -1) {
		var parts = s.split("||");
		var _g = 0;
		while(_g < parts.length) {
			var p = parts[_g];
			++_g;
			if(r == null) {
				r = haxe_ui_util_SimpleExpressionEvaluator.evalSingle(StringTools.trim(p),context);
			} else {
				r = r || haxe_ui_util_SimpleExpressionEvaluator.evalSingle(StringTools.trim(p),context);
			}
		}
	} else if(s.indexOf("&&") != -1) {
		var parts = s.split("&&");
		var _g = 0;
		while(_g < parts.length) {
			var p = parts[_g];
			++_g;
			if(r == null) {
				r = haxe_ui_util_SimpleExpressionEvaluator.evalSingle(StringTools.trim(p),context);
			} else {
				r = r && haxe_ui_util_SimpleExpressionEvaluator.evalSingle(StringTools.trim(p),context);
			}
		}
	} else {
		r = haxe_ui_util_SimpleExpressionEvaluator.evalSingle(s,context);
	}
	return r;
};
haxe_ui_util_SimpleExpressionEvaluator.evalSingle = function(s,context) {
	var result = null;
	var operation = null;
	var token = "";
	var inString = false;
	var _g = 0;
	var _g1 = s.length;
	while(_g < _g1) {
		var i = _g++;
		var ch = s.charAt(i);
		var next = s.charAt(i + 1);
		if(ch == "'" || ch == "\"") {
			inString = !inString;
		}
		if(inString == false) {
			if(ch == "+") {
				operation = haxe_ui_util_SimpleExpressionEvaluatorOperation.Add;
				s = HxOverrides.substr(s,i + 1,null);
				break;
			} else if(ch == "-") {
				operation = haxe_ui_util_SimpleExpressionEvaluatorOperation.Subtract;
				s = HxOverrides.substr(s,i + 1,null);
				break;
			} else if(ch == "*") {
				operation = haxe_ui_util_SimpleExpressionEvaluatorOperation.Multiply;
				s = HxOverrides.substr(s,i + 1,null);
				break;
			} else if(ch == "/") {
				operation = haxe_ui_util_SimpleExpressionEvaluatorOperation.Divide;
				s = HxOverrides.substr(s,i + 1,null);
				break;
			} else if(ch == ">" && next != "=") {
				operation = haxe_ui_util_SimpleExpressionEvaluatorOperation.GreaterThan;
				s = HxOverrides.substr(s,i + 1,null);
				break;
			} else if(ch == "<" && next != "=") {
				operation = haxe_ui_util_SimpleExpressionEvaluatorOperation.LessThan;
				s = HxOverrides.substr(s,i + 1,null);
				break;
			} else if(ch == "=" && next == "=") {
				operation = haxe_ui_util_SimpleExpressionEvaluatorOperation.Equals;
				s = HxOverrides.substr(s,i + 2,null);
				break;
			} else if(ch == "!" && next == "=") {
				operation = haxe_ui_util_SimpleExpressionEvaluatorOperation.NotEquals;
				s = HxOverrides.substr(s,i + 2,null);
				break;
			} else if(ch == ">" && next == "=") {
				operation = haxe_ui_util_SimpleExpressionEvaluatorOperation.GreaterThanOrEquals;
				s = HxOverrides.substr(s,i + 2,null);
				break;
			} else if(ch == "<" && next == "=") {
				operation = haxe_ui_util_SimpleExpressionEvaluatorOperation.LessThanOrEquals;
				s = HxOverrides.substr(s,i + 2,null);
				break;
			} else if(ch == "&" && next == "&") {
				operation = haxe_ui_util_SimpleExpressionEvaluatorOperation.LogicalAnd;
				s = HxOverrides.substr(s,i + 2,null);
				break;
			} else if(ch == "|" && next == "|") {
				operation = haxe_ui_util_SimpleExpressionEvaluatorOperation.LogicalOr;
				s = HxOverrides.substr(s,i + 2,null);
				break;
			}
		}
		token += ch;
		if(i == s.length - 1) {
			s = "";
			break;
		}
	}
	var r = null;
	if(s.length > 0) {
		r = haxe_ui_util_SimpleExpressionEvaluator.evalSingle(s,context);
	}
	var trimmedToken = StringTools.trim(token);
	var v = parseFloat(trimmedToken);
	if(!isNaN(v) && isFinite(v)) {
		result = parseFloat(trimmedToken);
	} else {
		var value = trimmedToken;
		value = value.toLowerCase();
		if(value == "true" || value == "false") {
			result = trimmedToken.toLowerCase() == "true";
		} else if(StringTools.startsWith(trimmedToken,"'") && StringTools.endsWith(trimmedToken,"'") ? true : StringTools.startsWith(trimmedToken,"\"") && StringTools.endsWith(trimmedToken,"\"")) {
			result = HxOverrides.substr(trimmedToken,1,trimmedToken.length - 2);
		} else {
			var token = "";
			var bracketsOpen = 0;
			var call = null;
			var callParams = null;
			var _g = 0;
			var _g1 = trimmedToken.length;
			while(_g < _g1) {
				var i = _g++;
				var ch = trimmedToken.charAt(i);
				if(ch == "(") {
					++bracketsOpen;
					if(bracketsOpen == 1) {
						call = token;
						token = "";
					} else {
						token += ch;
					}
				} else if(ch == ")") {
					--bracketsOpen;
					if(bracketsOpen == 0) {
						callParams = token;
					} else {
						token += ")";
					}
				} else {
					token += ch;
				}
			}
			var prop = null;
			if(call == null) {
				prop = token;
			}
			var parsedCallParams = [];
			if(callParams != null) {
				bracketsOpen = 0;
				token = "";
				var _g = 0;
				var _g1 = callParams.length;
				while(_g < _g1) {
					var i = _g++;
					var ch = callParams.charAt(i);
					if(ch == "(") {
						++bracketsOpen;
					} else if(ch == ")") {
						--bracketsOpen;
					}
					if(ch == ",") {
						if(bracketsOpen == 0) {
							parsedCallParams.push(token);
							token = "";
						} else {
							token += ch;
						}
					} else {
						token += ch;
					}
				}
				if(token.length != 0) {
					parsedCallParams.push(token);
				}
			}
			if(call != null) {
				var trimmedCall = StringTools.trim(call);
				if(trimmedCall.length > 0) {
					var callParts = trimmedCall.split(".");
					var ref = context;
					var prevRef = null;
					var _g = 0;
					while(_g < callParts.length) {
						var callPart = callParts[_g];
						++_g;
						prevRef = ref;
						if(Object.prototype.hasOwnProperty.call(ref,callPart)) {
							ref = Reflect.field(ref,callPart);
						} else {
							ref = Reflect.getProperty(ref,callPart);
						}
						if(ref == null) {
							throw haxe_Exception.thrown(callPart + " not found");
						}
					}
					if(ref != null && Reflect.isFunction(ref)) {
						var paramValues = [];
						var _g = 0;
						while(_g < parsedCallParams.length) {
							var param = parsedCallParams[_g];
							++_g;
							var paramResult = haxe_ui_util_SimpleExpressionEvaluator.evalSingle(param,context);
							paramValues.push(paramResult);
						}
						result = ref.apply(prevRef,paramValues);
					}
				}
			} else if(prop != null) {
				var trimmedProp = StringTools.trim(prop);
				if(trimmedProp.length > 0) {
					var propParts = trimmedProp.split(".");
					var propName = propParts.pop();
					var ref = context;
					var _g = 0;
					while(_g < propParts.length) {
						var propPart = propParts[_g];
						++_g;
						ref = Reflect.field(ref,propPart);
					}
					if(Object.prototype.hasOwnProperty.call(ref,propName)) {
						result = Reflect.field(ref,propName);
					} else {
						result = Reflect.getProperty(ref,propName);
					}
				}
			}
		}
	}
	if(r != null) {
		switch(operation._hx_index) {
		case 0:
			result += r;
			break;
		case 1:
			result -= r;
			break;
		case 2:
			result *= r;
			break;
		case 3:
			result /= r;
			break;
		case 4:
			result = result == r;
			break;
		case 5:
			result = result != r;
			break;
		case 6:
			result = result > r;
			break;
		case 7:
			result = result >= r;
			break;
		case 8:
			result = result < r;
			break;
		case 9:
			result = result <= r;
			break;
		case 10:
			result = result && r;
			break;
		case 11:
			result = result || r;
			break;
		}
	}
	return result;
};
haxe_ui_util_SimpleExpressionEvaluator.isNum = function(value) {
	var v = parseFloat(value);
	if(!isNaN(v)) {
		return isFinite(v);
	} else {
		return false;
	}
};
haxe_ui_util_SimpleExpressionEvaluator.isString = function(value) {
	if(StringTools.startsWith(value,"'") && StringTools.endsWith(value,"'")) {
		return true;
	}
	if(StringTools.startsWith(value,"\"") && StringTools.endsWith(value,"\"")) {
		return true;
	}
	return false;
};
haxe_ui_util_SimpleExpressionEvaluator.isBool = function(value) {
	value = value.toLowerCase();
	if(value != "true") {
		return value == "false";
	} else {
		return true;
	}
};
var haxe_ui_util_StringUtil = function() { };
$hxClasses["haxe.ui.util.StringUtil"] = haxe_ui_util_StringUtil;
haxe_ui_util_StringUtil.__name__ = "haxe.ui.util.StringUtil";
haxe_ui_util_StringUtil.uncapitalizeFirstLetter = function(s) {
	s = HxOverrides.substr(s,0,1).toLowerCase() + HxOverrides.substr(s,1,s.length);
	return s;
};
haxe_ui_util_StringUtil.capitalizeFirstLetter = function(s) {
	s = HxOverrides.substr(s,0,1).toUpperCase() + HxOverrides.substr(s,1,s.length);
	return s;
};
haxe_ui_util_StringUtil.capitalizeHyphens = function(s) {
	return haxe_ui_util_StringUtil.capitalizeDelim(s,"-");
};
haxe_ui_util_StringUtil.capitalizeDelim = function(s,d) {
	var r = s;
	var n = r.indexOf(d);
	while(n != -1) {
		var before = HxOverrides.substr(r,0,n);
		var after = HxOverrides.substr(r,n + 1,r.length);
		r = before + haxe_ui_util_StringUtil.capitalizeFirstLetter(after);
		n = r.indexOf(d,n + 1);
	}
	return r;
};
haxe_ui_util_StringUtil.toDashes = function(s,toLower) {
	if(toLower == null) {
		toLower = true;
	}
	var s1 = new EReg("([a-zA-Z])(?=[A-Z])","g").map(s,function(re) {
		return "" + re.matched(1) + "-";
	});
	if(toLower == true) {
		s1 = s1.toLowerCase();
	}
	return s1;
};
haxe_ui_util_StringUtil.replaceVars = function(s,params) {
	if(params != null) {
		var h = params.h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			s = StringTools.replace(s,"${" + k + "}",params.h[k]);
		}
	}
	return s;
};
haxe_ui_util_StringUtil.rpad = function(s,count,c) {
	if(c == null) {
		c = " ";
	}
	var _g = 0;
	var _g1 = count;
	while(_g < _g1) {
		var i = _g++;
		s += c;
	}
	return s;
};
haxe_ui_util_StringUtil.padDecimal = function(v,precision) {
	var s = v == null ? "null" : "" + v;
	if(precision == null || precision <= 0) {
		return s;
	}
	var n = s.indexOf(".");
	if(n == -1) {
		n = s.length;
		s += ".";
	}
	var delta = precision - (s.length - n - 1);
	return haxe_ui_util_StringUtil.rpad(s,delta,"0");
};
haxe_ui_util_StringUtil.countTokens = function(s,token) {
	if(s == null || s == "") {
		return 0;
	}
	return s.split(token).length - 1;
};
var haxe_ui_util_StyleUtil = function() { };
$hxClasses["haxe.ui.util.StyleUtil"] = haxe_ui_util_StyleUtil;
haxe_ui_util_StyleUtil.__name__ = "haxe.ui.util.StyleUtil";
haxe_ui_util_StyleUtil.styleProperty2ComponentProperty = function(property) {
	return haxe_ui_util_StyleUtil.style2ComponentEReg.map(property,function(re) {
		return re.matched(1).toUpperCase();
	});
};
haxe_ui_util_StyleUtil.componentProperty2StyleProperty = function(property) {
	return haxe_ui_util_StyleUtil.component2StyleEReg.map(property,function(re) {
		return "-" + re.matched(1).toLowerCase();
	});
};
var haxe_ui_util_Timer = function(delay,callback) {
	haxe_ui_backend_TimerImpl.call(this,delay,callback);
};
$hxClasses["haxe.ui.util.Timer"] = haxe_ui_util_Timer;
haxe_ui_util_Timer.__name__ = "haxe.ui.util.Timer";
haxe_ui_util_Timer.delay = function(f,timeMs) {
	var t = null;
	t = new haxe_ui_util_Timer(timeMs,function() {
		t.stop();
		f();
	});
	return t;
};
haxe_ui_util_Timer.__super__ = haxe_ui_backend_TimerImpl;
haxe_ui_util_Timer.prototype = $extend(haxe_ui_backend_TimerImpl.prototype,{
	stop: function() {
		haxe_ui_backend_TimerImpl.prototype.stop.call(this);
	}
	,__class__: haxe_ui_util_Timer
});
var haxe_ui_util_TypeConverter = function() { };
$hxClasses["haxe.ui.util.TypeConverter"] = haxe_ui_util_TypeConverter;
haxe_ui_util_TypeConverter.__name__ = "haxe.ui.util.TypeConverter";
haxe_ui_util_TypeConverter.convertFrom = function(input) {
	var output = input;
	var _g = Type.typeof(input);
	if(_g._hx_index == 6) {
		if(_g.c == String) {
			var s = Std.string(input);
			if(s == "true" || s == "false") {
				output = s == "true";
			} else if(new EReg("^-?[0-9]*$","i").match(s == null ? "null" : "" + s)) {
				output = Std.parseInt(s);
			} else if(new EReg("^-?[0-9]*\\.[0-9]*$","i").match(s == null ? "null" : "" + s)) {
				output = parseFloat(s);
			}
		}
	}
	return output;
};
haxe_ui_util_TypeConverter.convertTo = function(input,type) {
	if(type == null) {
		return input;
	}
	switch(type.toLowerCase()) {
	case "bool":
		return Std.string(input) == "true";
	case "float":
		if(input == null) {
			return 0;
		}
		var r = parseFloat(Std.string(input));
		if(isNaN(r)) {
			return 0;
		}
		return r;
	case "int":
		if(input == null) {
			return 0;
		}
		var r = Std.parseInt(Std.string(input));
		if(r == null) {
			return 0;
		}
		return r;
	case "string":
		return Std.string(input);
	case "dynamic":case "scalemode":case "variant":
		return input;
	default:
		haxe_Log.trace("dont know how to convert from type '" + type + "', returning input",{ fileName : "haxe/ui/util/TypeConverter.hx", lineNumber : 56, className : "haxe.ui.util.TypeConverter", methodName : "convertTo"});
	}
	return input;
};
var haxe_ui_util_VariantType = $hxEnums["haxe.ui.util.VariantType"] = { __ename__:"haxe.ui.util.VariantType",__constructs__:null
	,VT_Int: ($_=function(s) { return {_hx_index:0,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_._hx_name="VT_Int",$_.__params__ = ["s"],$_)
	,VT_Float: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_._hx_name="VT_Float",$_.__params__ = ["s"],$_)
	,VT_String: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_._hx_name="VT_String",$_.__params__ = ["s"],$_)
	,VT_Bool: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_._hx_name="VT_Bool",$_.__params__ = ["s"],$_)
	,VT_Array: ($_=function(s) { return {_hx_index:4,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_._hx_name="VT_Array",$_.__params__ = ["s"],$_)
	,VT_DataSource: ($_=function(s) { return {_hx_index:5,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_._hx_name="VT_DataSource",$_.__params__ = ["s"],$_)
	,VT_Component: ($_=function(s) { return {_hx_index:6,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_._hx_name="VT_Component",$_.__params__ = ["s"],$_)
	,VT_Date: ($_=function(s) { return {_hx_index:7,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_._hx_name="VT_Date",$_.__params__ = ["s"],$_)
	,VT_ImageData: ($_=function(s) { return {_hx_index:8,s:s,__enum__:"haxe.ui.util.VariantType",toString:$estr}; },$_._hx_name="VT_ImageData",$_.__params__ = ["s"],$_)
};
haxe_ui_util_VariantType.__constructs__ = [haxe_ui_util_VariantType.VT_Int,haxe_ui_util_VariantType.VT_Float,haxe_ui_util_VariantType.VT_String,haxe_ui_util_VariantType.VT_Bool,haxe_ui_util_VariantType.VT_Array,haxe_ui_util_VariantType.VT_DataSource,haxe_ui_util_VariantType.VT_Component,haxe_ui_util_VariantType.VT_Date,haxe_ui_util_VariantType.VT_ImageData];
haxe_ui_util_VariantType.__empty_constructs__ = [];
var haxe_ui_util_Variant = {};
haxe_ui_util_Variant.__properties__ = {get_isNull:"get_isNull",get_isDataSource:"get_isDataSource",get_isImageData:"get_isImageData",get_isComponent:"get_isComponent",get_isDate:"get_isDate",get_isArray:"get_isArray",get_isBool:"get_isBool",get_isNumber:"get_isNumber",get_isInt:"get_isInt",get_isFloat:"get_isFloat",get_isString:"get_isString"};
haxe_ui_util_Variant.fromString = function(s) {
	return haxe_ui_util_VariantType.VT_String(s);
};
haxe_ui_util_Variant.toString = function(this1) {
	if(this1 == null) {
		return null;
	}
	switch(this1._hx_index) {
	case 0:
		var s = this1.s;
		if(s == null) {
			return "null";
		} else {
			return "" + s;
		}
		break;
	case 1:
		var s = this1.s;
		if(s == null) {
			return "null";
		} else {
			return "" + s;
		}
		break;
	case 2:
		var s = this1.s;
		return s;
	case 3:
		var s = this1.s;
		if(s == null) {
			return "null";
		} else {
			return "" + s;
		}
		break;
	case 4:
		var s = this1.s;
		return Std.string(s);
	case 5:
		var s = this1.s;
		if(s == null) {
			return null;
		} else {
			return "";
		}
		break;
	case 6:
		var s = this1.s;
		if(s == null) {
			return null;
		} else {
			return "";
		}
		break;
	case 7:
		var s = this1.s;
		return Std.string(s);
	case 8:
		var s = this1.s;
		if(s == null) {
			return null;
		} else {
			return "";
		}
		break;
	}
};
haxe_ui_util_Variant.get_isString = function(this1) {
	if(this1._hx_index == 2) {
		var _g = this1.s;
		return true;
	} else {
		return false;
	}
};
haxe_ui_util_Variant.fromFloat = function(s) {
	return haxe_ui_util_VariantType.VT_Float(s);
};
haxe_ui_util_Variant.toFloat = function(this1) {
	if(haxe_ui_util_Variant.get_isNull(this1)) {
		return null;
	}
	switch(this1._hx_index) {
	case 0:
		var s = this1.s;
		return s;
	case 1:
		var s = this1.s;
		return s;
	default:
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.get_isFloat = function(this1) {
	if(this1._hx_index == 1) {
		var _g = this1.s;
		return true;
	} else {
		return false;
	}
};
haxe_ui_util_Variant.fromInt = function(s) {
	return haxe_ui_util_VariantType.VT_Int(s);
};
haxe_ui_util_Variant.toInt = function(this1) {
	if(haxe_ui_util_Variant.get_isNull(this1)) {
		return null;
	}
	switch(this1._hx_index) {
	case 0:
		var s = this1.s;
		return s;
	case 1:
		var s = this1.s;
		return s | 0;
	default:
		throw haxe_Exception.thrown("Variant Type Error " + Std.string(this1));
	}
};
haxe_ui_util_Variant.get_isInt = function(this1) {
	if(this1._hx_index == 0) {
		var _g = this1.s;
		return true;
	} else {
		return false;
	}
};
haxe_ui_util_Variant.get_isNumber = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		return true;
	case 1:
		var _g = this1.s;
		return true;
	default:
		return false;
	}
};
haxe_ui_util_Variant.toNumber = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var s = this1.s;
		return s;
	case 1:
		var s = this1.s;
		return s;
	default:
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.fromBool = function(s) {
	return haxe_ui_util_VariantType.VT_Bool(s);
};
haxe_ui_util_Variant.toBool = function(this1) {
	if(this1 == null) {
		return false;
	}
	switch(this1._hx_index) {
	case 2:
		var s = this1.s;
		return s == "true";
	case 3:
		var s = this1.s;
		return s;
	default:
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.get_isBool = function(this1) {
	if(this1._hx_index == 3) {
		var _g = this1.s;
		return true;
	}
	return false;
};
haxe_ui_util_Variant.fromArray = function(s) {
	if(s == null) {
		return null;
	} else {
		return haxe_ui_util_VariantType.VT_Array(s);
	}
};
haxe_ui_util_Variant.toArray = function(this1) {
	if(this1 == null) {
		return null;
	}
	if(this1._hx_index == 4) {
		var s = this1.s;
		return s;
	} else {
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.get_isArray = function(this1) {
	if(this1._hx_index == 4) {
		var _g = this1.s;
		return true;
	}
	return false;
};
haxe_ui_util_Variant.fromDate = function(s) {
	return haxe_ui_util_VariantType.VT_Date(s);
};
haxe_ui_util_Variant.toDate = function(this1) {
	if(this1 == null) {
		return null;
	}
	if(this1._hx_index == 7) {
		var s = this1.s;
		return s;
	} else {
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.get_isDate = function(this1) {
	if(this1._hx_index == 7) {
		var _g = this1.s;
		return true;
	}
	return false;
};
haxe_ui_util_Variant.fromComponent = function(s) {
	return haxe_ui_util_VariantType.VT_Component(s);
};
haxe_ui_util_Variant.toComponent = function(this1) {
	if(this1 == null) {
		return null;
	}
	if(this1._hx_index == 6) {
		var s = this1.s;
		return s;
	} else {
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.get_isComponent = function(this1) {
	if(this1._hx_index == 6) {
		var _g = this1.s;
		return true;
	}
	return false;
};
haxe_ui_util_Variant.fromImageData = function(s) {
	return haxe_ui_util_VariantType.VT_ImageData(s);
};
haxe_ui_util_Variant.toImageData = function(this1) {
	if(this1 == null) {
		return null;
	}
	if(this1._hx_index == 8) {
		var s = this1.s;
		return s;
	} else {
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.get_isImageData = function(this1) {
	if(this1._hx_index == 8) {
		var _g = this1.s;
		return true;
	}
	return false;
};
haxe_ui_util_Variant.fromDataSource = function(s) {
	return haxe_ui_util_VariantType.VT_DataSource(s);
};
haxe_ui_util_Variant.toDataSource = function(this1) {
	if(this1 == null) {
		return null;
	}
	if(this1._hx_index == 5) {
		var s = this1.s;
		return s;
	} else {
		throw haxe_Exception.thrown("Variant Type Error");
	}
};
haxe_ui_util_Variant.get_isDataSource = function(this1) {
	if(this1._hx_index == 5) {
		var _g = this1.s;
		return true;
	}
	return false;
};
haxe_ui_util_Variant.addFloat = function(lhs,rhs) {
	return lhs + haxe_ui_util_Variant.toNumber(rhs);
};
haxe_ui_util_Variant.addInt = function(lhs,rhs) {
	return lhs + haxe_ui_util_Variant.toInt(rhs);
};
haxe_ui_util_Variant.subtractFloat = function(lhs,rhs) {
	return lhs - haxe_ui_util_Variant.toNumber(rhs);
};
haxe_ui_util_Variant.subtractInt = function(lhs,rhs) {
	return lhs - haxe_ui_util_Variant.toInt(rhs);
};
haxe_ui_util_Variant.add = function(this1,rhs) {
	var tmp;
	var tmp1;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp1 = true;
		break;
	case 1:
		var _g = this1.s;
		tmp1 = true;
		break;
	default:
		tmp1 = false;
	}
	if(tmp1) {
		switch(rhs._hx_index) {
		case 0:
			var _g = rhs.s;
			tmp = true;
			break;
		case 1:
			var _g = rhs.s;
			tmp = true;
			break;
		default:
			tmp = false;
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.fromFloat(haxe_ui_util_Variant.toNumber(this1) + haxe_ui_util_Variant.toNumber(rhs));
	} else if(haxe_ui_util_Variant.get_isString(this1) && haxe_ui_util_Variant.get_isString(rhs)) {
		return haxe_ui_util_Variant.fromString(haxe_ui_util_Variant.toString(this1) + haxe_ui_util_Variant.toString(rhs));
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.postInc = function(this1) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		var old = this1;
		this1 = haxe_ui_util_VariantType.VT_Float(haxe_ui_util_Variant.toNumber(this1) + 1);
		return old;
	} else {
		throw haxe_Exception.thrown("Variant operation error");
	}
};
haxe_ui_util_Variant.preInc = function(this1) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		this1 = haxe_ui_util_VariantType.VT_Float(haxe_ui_util_Variant.toNumber(this1) + 1);
		return this1;
	} else {
		throw haxe_Exception.thrown("Variant operation error");
	}
};
haxe_ui_util_Variant.subtract = function(this1,rhs) {
	var tmp;
	var tmp1;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp1 = true;
		break;
	case 1:
		var _g = this1.s;
		tmp1 = true;
		break;
	default:
		tmp1 = false;
	}
	if(tmp1) {
		switch(rhs._hx_index) {
		case 0:
			var _g = rhs.s;
			tmp = true;
			break;
		case 1:
			var _g = rhs.s;
			tmp = true;
			break;
		default:
			tmp = false;
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.fromFloat(haxe_ui_util_Variant.toNumber(this1) - haxe_ui_util_Variant.toNumber(rhs));
	} else if(haxe_ui_util_Variant.get_isString(this1) && haxe_ui_util_Variant.get_isString(rhs)) {
		return haxe_ui_util_Variant.fromString(StringTools.replace(haxe_ui_util_Variant.toString(this1),haxe_ui_util_Variant.toString(rhs),""));
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.postDeinc = function(this1) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		var old = this1;
		this1 = haxe_ui_util_VariantType.VT_Float(haxe_ui_util_Variant.toNumber(this1) - 1);
		return old;
	} else {
		throw haxe_Exception.thrown("Variant operation error");
	}
};
haxe_ui_util_Variant.preDeinc = function(this1) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		this1 = haxe_ui_util_VariantType.VT_Float(haxe_ui_util_Variant.toNumber(this1) - 1);
		return this1;
	} else {
		throw haxe_Exception.thrown("Variant operation error");
	}
};
haxe_ui_util_Variant.multiply = function(this1,rhs) {
	var tmp;
	var tmp1;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp1 = true;
		break;
	case 1:
		var _g = this1.s;
		tmp1 = true;
		break;
	default:
		tmp1 = false;
	}
	if(tmp1) {
		switch(rhs._hx_index) {
		case 0:
			var _g = rhs.s;
			tmp = true;
			break;
		case 1:
			var _g = rhs.s;
			tmp = true;
			break;
		default:
			tmp = false;
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.fromFloat(haxe_ui_util_Variant.toNumber(this1) * haxe_ui_util_Variant.toNumber(rhs));
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.divide = function(this1,rhs) {
	var tmp;
	var tmp1;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp1 = true;
		break;
	case 1:
		var _g = this1.s;
		tmp1 = true;
		break;
	default:
		tmp1 = false;
	}
	if(tmp1) {
		switch(rhs._hx_index) {
		case 0:
			var _g = rhs.s;
			tmp = true;
			break;
		case 1:
			var _g = rhs.s;
			tmp = true;
			break;
		default:
			tmp = false;
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.fromFloat(haxe_ui_util_Variant.toNumber(this1) / haxe_ui_util_Variant.toNumber(rhs));
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.gt = function(this1,rhs) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.toNumber(this1) > haxe_ui_util_Variant.toNumber(rhs);
	} else if(haxe_ui_util_Variant.get_isString(this1)) {
		return haxe_ui_util_Variant.toString(this1) > haxe_ui_util_Variant.toString(rhs);
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.gte = function(this1,rhs) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.toNumber(this1) >= haxe_ui_util_Variant.toNumber(rhs);
	} else if(haxe_ui_util_Variant.get_isString(this1)) {
		return haxe_ui_util_Variant.toString(this1) >= haxe_ui_util_Variant.toString(rhs);
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.lt = function(this1,rhs) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.toNumber(this1) < haxe_ui_util_Variant.toNumber(rhs);
	} else if(haxe_ui_util_Variant.get_isString(this1)) {
		return haxe_ui_util_Variant.toString(this1) < haxe_ui_util_Variant.toString(rhs);
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.lte = function(this1,rhs) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.toNumber(this1) <= haxe_ui_util_Variant.toNumber(rhs);
	} else if(haxe_ui_util_Variant.get_isString(this1)) {
		return haxe_ui_util_Variant.toString(this1) <= haxe_ui_util_Variant.toString(rhs);
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.negate = function(this1) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp = true;
		break;
	case 1:
		var _g = this1.s;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.fromFloat(-haxe_ui_util_Variant.toNumber(this1));
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.invert = function(this1) {
	if(haxe_ui_util_Variant.get_isBool(this1)) {
		var v = haxe_ui_util_Variant.toBool(this1);
		v = !v;
		return haxe_ui_util_Variant.fromBool(v);
	}
	throw haxe_Exception.thrown("Variant operation error");
};
haxe_ui_util_Variant.eq = function(this1,rhs) {
	if(haxe_ui_util_Variant.get_isNull(this1) && haxe_ui_util_Variant.get_isNull(rhs)) {
		return true;
	}
	if(haxe_ui_util_Variant.get_isNull(this1) && !haxe_ui_util_Variant.get_isNull(rhs)) {
		return false;
	}
	if(!haxe_ui_util_Variant.get_isNull(this1) && haxe_ui_util_Variant.get_isNull(rhs)) {
		return false;
	}
	var tmp;
	var tmp1;
	switch(this1._hx_index) {
	case 0:
		var _g = this1.s;
		tmp1 = true;
		break;
	case 1:
		var _g = this1.s;
		tmp1 = true;
		break;
	default:
		tmp1 = false;
	}
	if(tmp1) {
		switch(rhs._hx_index) {
		case 0:
			var _g = rhs.s;
			tmp = true;
			break;
		case 1:
			var _g = rhs.s;
			tmp = true;
			break;
		default:
			tmp = false;
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		return haxe_ui_util_Variant.toNumber(this1) == haxe_ui_util_Variant.toNumber(rhs);
	} else if(haxe_ui_util_Variant.get_isBool(this1) && haxe_ui_util_Variant.get_isBool(rhs)) {
		return haxe_ui_util_Variant.toBool(this1) == haxe_ui_util_Variant.toBool(rhs);
	} else if(haxe_ui_util_Variant.get_isString(this1) && haxe_ui_util_Variant.get_isString(rhs)) {
		return haxe_ui_util_Variant.toString(this1) == haxe_ui_util_Variant.toString(rhs);
	}
	return false;
};
haxe_ui_util_Variant.neq = function(this1,rhs) {
	return !haxe_ui_util_Variant.eq(this1,rhs);
};
haxe_ui_util_Variant.get_isNull = function(this1) {
	if(this1 == null) {
		return true;
	}
	return haxe_ui_util_Variant.toString(this1) == null;
};
haxe_ui_util_Variant.fromDynamic = function(r) {
	var v = null;
	if(r != null) {
		var unstringable = ((r) instanceof haxe_ui_core_Component) || ((r) instanceof HTMLImageElement) || ((r) instanceof Array) || ((r) instanceof haxe_ui_data_DataSource);
		if(unstringable == false) {
			var tmp;
			if(haxe_ui_util_Variant.containsOnlyDigits(r)) {
				var f = parseFloat(("" + Std.string(r)));
				tmp = isNaN(f) == false;
			} else {
				tmp = false;
			}
			if(tmp) {
				if(Std.string(r).indexOf(".") != -1) {
					v = haxe_ui_util_Variant.fromFloat(parseFloat(("" + Std.string(r))));
				} else {
					v = haxe_ui_util_Variant.fromInt(Std.parseInt("" + Std.string(r)));
				}
			} else if("" + Std.string(r) == "true" || Std.string(r) + "" == "false") {
				v = haxe_ui_util_Variant.fromBool("" + Std.string(r) == "true");
			} else if(typeof(r) == "string") {
				v = haxe_ui_util_Variant.fromString(js_Boot.__cast(r , String));
			} else {
				v = r;
			}
		} else if(((r) instanceof haxe_ui_core_Component)) {
			v = haxe_ui_util_Variant.fromComponent(js_Boot.__cast(r , haxe_ui_core_Component));
		} else if(((r) instanceof haxe_ui_data_DataSource)) {
			v = r;
		} else if(((r) instanceof Array)) {
			v = r;
		} else if(((r) instanceof Date)) {
			v = haxe_ui_util_Variant.fromDate(js_Boot.__cast(r , Date));
		} else if(((r) instanceof HTMLImageElement)) {
			v = haxe_ui_util_Variant.fromImageData(js_Boot.__cast(r , HTMLImageElement));
		} else {
			v = r;
		}
	}
	return v;
};
haxe_ui_util_Variant.containsOnlyDigits = function(s) {
	if(((s) instanceof haxe_ui_core_Component) || ((s) instanceof HTMLImageElement) || ((s) instanceof Array) || ((s) instanceof haxe_ui_data_DataSource)) {
		return false;
	}
	if(typeof(s) == "number" && ((s | 0) === s) || typeof(s) == "number") {
		return true;
	}
	var t = Std.string(s);
	var _g = 0;
	var _g1 = t.length;
	while(_g < _g1) {
		var i = _g++;
		var c = t.charAt(i);
		if(c != "0" && c != "1" && c != "2" && c != "3" && c != "4" && c != "5" && c != "6" && c != "7" && c != "8" && c != "9" && c != "." && c != "-") {
			return false;
		}
	}
	return true;
};
haxe_ui_util_Variant.toDynamic = function(v) {
	var d = v;
	if(v != null) {
		switch(v._hx_index) {
		case 0:
			var y = v.s;
			d = y;
			break;
		case 1:
			var y = v.s;
			d = y;
			break;
		case 2:
			var y = v.s;
			d = y;
			break;
		case 3:
			var y = v.s;
			d = y;
			break;
		case 4:
			var y = v.s;
			d = y;
			break;
		case 5:
			var y = v.s;
			d = y;
			break;
		case 6:
			var y = v.s;
			d = y;
			break;
		case 7:
			var y = v.s;
			d = y;
			break;
		case 8:
			var y = v.s;
			d = y;
			break;
		}
	}
	return d;
};
var haxe_ui_validation_ValidationManager = function() {
	this._displayQueue = [];
	this._queue = [];
	this.isValidating = false;
	this.isPending = false;
};
$hxClasses["haxe.ui.validation.ValidationManager"] = haxe_ui_validation_ValidationManager;
haxe_ui_validation_ValidationManager.__name__ = "haxe.ui.validation.ValidationManager";
haxe_ui_validation_ValidationManager.__properties__ = {get_instance:"get_instance"};
haxe_ui_validation_ValidationManager.instance = null;
haxe_ui_validation_ValidationManager.get_instance = function() {
	if(haxe_ui_validation_ValidationManager.instance == null) {
		haxe_ui_validation_ValidationManager.instance = new haxe_ui_validation_ValidationManager();
	}
	return haxe_ui_validation_ValidationManager.instance;
};
haxe_ui_validation_ValidationManager.prototype = {
	isValidating: null
	,isPending: null
	,_queue: null
	,_displayQueue: null
	,_events: null
	,registerEvent: function(type,listener) {
		if(this._events == null) {
			this._events = new haxe_ui_util_EventMap();
		}
		this._events.add(type,listener);
	}
	,unregisterEvent: function(type,listener) {
		if(this._events == null) {
			this._events.remove(type,listener);
		}
	}
	,dispatch: function(event) {
		if(this._events != null) {
			this._events.invoke(event.type,event);
		}
	}
	,dispose: function() {
		this.isValidating = false;
		this._queue.splice(0,this._queue.length);
	}
	,add: function(object) {
		if(this._queue.indexOf(object) != -1) {
			return;
		}
		var queueLength = this._queue.length;
		if(this.isValidating == true) {
			var depth = object.get_depth();
			var min = 0;
			var max = queueLength;
			var i = 0;
			var otherDepth = 0;
			while(max > min) {
				i = min + max >>> 1;
				otherDepth = this._queue[i].get_depth();
				if(otherDepth == depth) {
					break;
				} else if(otherDepth < depth) {
					max = i;
				} else {
					min = i + 1;
				}
			}
			if(otherDepth >= depth) {
				++i;
			}
			this._queue.splice(i,0,object);
		} else {
			this._queue[queueLength] = object;
			if(this.isPending == false) {
				this.isPending = true;
				haxe_ui_Toolkit.callLater($bind(this,this.process));
			}
		}
	}
	,addDisplay: function(item,nextFrame) {
		if(nextFrame == null) {
			nextFrame = true;
		}
		if(this._displayQueue.indexOf(item) == -1) {
			this._displayQueue.push(item);
		}
		if(nextFrame == false) {
			this.process();
		}
	}
	,process: function() {
		if(this.isValidating == true || this.isPending == false) {
			return;
		}
		var queueLength = this._queue.length;
		if(queueLength == 0) {
			this.isPending = false;
			return;
		}
		this.isValidating = true;
		if(queueLength > 1) {
			this._queue.sort($bind(this,this.queueSortFunction));
		}
		this.dispatch(new haxe_ui_events_ValidationEvent("validationstart"));
		while(this._queue.length > 0) {
			var item = this._queue.shift();
			if(item.get_depth() < 0) {
				continue;
			}
			item.validateComponent();
		}
		var _g = 0;
		var _g1 = this._displayQueue.length;
		while(_g < _g1) {
			var i = _g++;
			var item = this._displayQueue[i];
			item.updateComponentDisplay();
		}
		this._displayQueue.splice(0,this._displayQueue.length);
		this.isValidating = false;
		this.isPending = false;
		this.dispatch(new haxe_ui_events_ValidationEvent("validationstop"));
	}
	,queueSortFunction: function(first,second) {
		var difference = second.get_depth() - first.get_depth();
		if(difference > 0) {
			return 1;
		} else if(difference < 0) {
			return -1;
		} else {
			return 0;
		}
	}
	,__class__: haxe_ui_validation_ValidationManager
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isInterface = function(o) {
	return o.__isInterface__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__toStr = null;
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.__properties__ = {get_supported:"get_supported",get_self:"get_self"};
js_Browser.get_self = function() {
	return $global;
};
js_Browser.get_supported = function() {
	if(typeof(window) != "undefined" && typeof(window.location) != "undefined") {
		return typeof(window.location.protocol) == "string";
	} else {
		return false;
	}
};
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
js_Browser.getSessionStorage = function() {
	try {
		var s = window.sessionStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
};
js_Browser.alert = function(v) {
	window.alert(Std.string(v));
};
var js_Lib = function() { };
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = "js.Lib";
js_Lib.__properties__ = {get_undefined:"get_undefined"};
js_Lib.debug = function() {
	debugger;
};
js_Lib.alert = function(v) {
	alert(js_Boot.__string_rec(v,""));
};
js_Lib.eval = function(code) {
	return eval(code);
};
js_Lib.get_undefined = function() {
	return undefined;
};
js_Lib.rethrow = function() {
};
js_Lib.getOriginalException = function() {
	return null;
};
js_Lib.getNextHaxeUID = function() {
	return $global.$haxeUID++;
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var js_lib_KeyValue = {};
js_lib_KeyValue.__properties__ = {get_value:"get_value",get_key:"get_key"};
js_lib_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_lib_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_lib_ObjectEntry = {};
js_lib_ObjectEntry.__properties__ = {get_value:"get_value",get_key:"get_key"};
js_lib_ObjectEntry.get_key = function(this1) {
	return this1[0];
};
js_lib_ObjectEntry.get_value = function(this1) {
	return this1[1];
};
var vision_Vision = function() { };
$hxClasses["vision.Vision"] = vision_Vision;
vision_Vision.__name__ = "vision.Vision";
vision_Vision.combine = function(image,$with,percentage) {
	if(percentage == null) {
		percentage = 50;
	}
	if($with == null) {
		var width = image.getUInt16(0);
		var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
		var this2 = this1;
		this2.setUInt16(0,width);
		this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
		this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
		this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
		this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
		this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
		var i = vision_ds_Image.OFFSET;
		while(i < this2.length) {
			this2.b[i] = 0;
			this2.b[i + 1] = 0;
			this2.b[i + 2] = 0;
			this2.b[i + 3] = 0;
			i += 4;
		}
		$with = this2;
	}
	var translated = percentage / 100;
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var first = this1;
				var second;
				if(!(x >= 0 && y >= 0 && x < $with.getUInt16(0) && y < Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4)))) {
					var this2 = [x,$with.getUInt16(0) - 1];
					var values = this2;
					var max = values[0];
					var _g4 = 0;
					var _g5 = values.length;
					while(_g4 < _g5) {
						var i = _g4++;
						if(values[i] > max) {
							max = values[i];
						}
					}
					var this3 = [max,0];
					var values1 = this3;
					var min = values1[0];
					var _g6 = 0;
					var _g7 = values1.length;
					while(_g6 < _g7) {
						var i1 = _g6++;
						if(values1[i1] < min) {
							min = values1[i1];
						}
					}
					var x1 = min;
					var this4 = [y,Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4)) - 1];
					var values2 = this4;
					var max1 = values2[0];
					var _g8 = 0;
					var _g9 = values2.length;
					while(_g8 < _g9) {
						var i2 = _g8++;
						if(values2[i2] > max1) {
							max1 = values2[i2];
						}
					}
					var this5 = [max1,0];
					var values3 = this5;
					var min1 = values3[0];
					var _g10 = 0;
					var _g11 = values3.length;
					while(_g10 < _g11) {
						var i3 = _g10++;
						if(values3[i3] < min1) {
							min1 = values3[i3];
						}
					}
					var y1 = min1;
					if(!(x1 >= 0 && y1 >= 0 && x1 < $with.getUInt16(0) && y1 < Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4)))) {
						var this_x = x1;
						var this_y = y1;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds($with,new vision_ds_Point2D(this_x,this_y)));
					}
					var position1 = (y1 * $with.getUInt16(0) + x1) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = $with.b[position1] << 24 | $with.b[position1 + 1] << 16 | $with.b[position1 + 2] << 8 | $with.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this6 = value1;
					second = this6;
				} else {
					if(!(x >= 0 && y >= 0 && x < $with.getUInt16(0) && y < Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4)))) {
						var this_x1 = x;
						var this_y1 = y;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds($with,new vision_ds_Point2D(this_x1,this_y1)));
					}
					var position2 = (y * $with.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					var value2 = $with.b[position2] << 24 | $with.b[position2 + 1] << 16 | $with.b[position2 + 2] << 8 | $with.b[position2 + 3];
					if(value2 == null) {
						value2 = 0;
					}
					var this7 = value2;
					second = this7;
				}
				var value3 = Math.round((first >> 16 & 255) * (1 - translated) + (second >> 16 & 255) * translated);
				first &= -16711681;
				first |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 16;
				var value4 = Math.round((first & 255) * (1 - translated) + (second & 255) * translated);
				first &= -256;
				first |= value4 > 255 ? 255 : value4 < 0 ? 0 : value4;
				var value5 = Math.round((first >> 8 & 255) * (1 - translated) + (second >> 8 & 255) * translated);
				first &= -65281;
				first |= (value5 > 255 ? 255 : value5 < 0 ? 0 : value5) << 8;
				var position3 = (y * image.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				image.b[position3] = first >> 24 & 255;
				image.b[position3 + 1] = first >> 16 & 255;
				image.b[position3 + 2] = first >> 8 & 255;
				image.b[position3 + 3] = first & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var first = this1;
					var second;
					if(!(x >= 0 && y >= 0 && x < $with.getUInt16(0) && y < Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4)))) {
						var this2 = [x,$with.getUInt16(0) - 1];
						var values = this2;
						var max = values[0];
						var _g7 = 0;
						var _g8 = values.length;
						while(_g7 < _g8) {
							var i = _g7++;
							if(values[i] > max) {
								max = values[i];
							}
						}
						var this3 = [max,0];
						var values1 = this3;
						var min = values1[0];
						var _g9 = 0;
						var _g10 = values1.length;
						while(_g9 < _g10) {
							var i1 = _g9++;
							if(values1[i1] < min) {
								min = values1[i1];
							}
						}
						var x14 = min;
						var this4 = [y,Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4)) - 1];
						var values2 = this4;
						var max1 = values2[0];
						var _g11 = 0;
						var _g12 = values2.length;
						while(_g11 < _g12) {
							var i2 = _g11++;
							if(values2[i2] > max1) {
								max1 = values2[i2];
							}
						}
						var this5 = [max1,0];
						var values3 = this5;
						var min1 = values3[0];
						var _g13 = 0;
						var _g14 = values3.length;
						while(_g13 < _g14) {
							var i3 = _g13++;
							if(values3[i3] < min1) {
								min1 = values3[i3];
							}
						}
						var y14 = min1;
						if(!(x14 >= 0 && y14 >= 0 && x14 < $with.getUInt16(0) && y14 < Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4)))) {
							var this_x = x14;
							var this_y = y14;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds($with,new vision_ds_Point2D(this_x,this_y)));
						}
						var position1 = (y14 * $with.getUInt16(0) + x14) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = $with.b[position1] << 24 | $with.b[position1 + 1] << 16 | $with.b[position1 + 2] << 8 | $with.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this6 = value1;
						second = this6;
					} else {
						if(!(x >= 0 && y >= 0 && x < $with.getUInt16(0) && y < Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4)))) {
							var this_x1 = x;
							var this_y1 = y;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds($with,new vision_ds_Point2D(this_x1,this_y1)));
						}
						var position2 = (y * $with.getUInt16(0) + x) * 4;
						position2 += vision_ds_Image.OFFSET;
						var value2 = $with.b[position2] << 24 | $with.b[position2 + 1] << 16 | $with.b[position2 + 2] << 8 | $with.b[position2 + 3];
						if(value2 == null) {
							value2 = 0;
						}
						var this7 = value2;
						second = this7;
					}
					var value3 = Math.round((first >> 16 & 255) * (1 - translated) + (second >> 16 & 255) * translated);
					first &= -16711681;
					first |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 16;
					var value4 = Math.round((first & 255) * (1 - translated) + (second & 255) * translated);
					first &= -256;
					first |= value4 > 255 ? 255 : value4 < 0 ? 0 : value4;
					var value5 = Math.round((first >> 8 & 255) * (1 - translated) + (second >> 8 & 255) * translated);
					first &= -65281;
					first |= (value5 > 255 ? 255 : value5 < 0 ? 0 : value5) << 8;
					var position3 = (y * image.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					image.b[position3] = first >> 24 & 255;
					image.b[position3 + 1] = first >> 16 & 255;
					image.b[position3 + 2] = first >> 8 & 255;
					image.b[position3 + 3] = first & 255;
				}
			}
		}
	}
	return image;
};
vision_Vision.grayscale = function(image,simpleGrayscale) {
	if(simpleGrayscale == null) {
		simpleGrayscale = false;
	}
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var pixel = this1;
				var gray = !simpleGrayscale ? 0.2126 * (pixel >> 16 & 255) + 0.7152 * (pixel >> 8 & 255) + 0.0722 * (pixel & 255) | 0 : ((pixel >> 16 & 255) + (pixel >> 8 & 255) + (pixel & 255)) / 3 | 0;
				var this2 = 0;
				var color = this2;
				var Alpha = 255;
				if(Alpha == null) {
					Alpha = 255;
				}
				color &= -16711681;
				color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
				color &= -65281;
				color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
				color &= -256;
				color |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
				color &= 16777215;
				color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
				var color1 = color;
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = color1 >> 24 & 255;
				image.b[position1 + 1] = color1 >> 16 & 255;
				image.b[position1 + 2] = color1 >> 8 & 255;
				image.b[position1 + 3] = color1 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var pixel = this1;
					var gray = !simpleGrayscale ? 0.2126 * (pixel >> 16 & 255) + 0.7152 * (pixel >> 8 & 255) + 0.0722 * (pixel & 255) | 0 : ((pixel >> 16 & 255) + (pixel >> 8 & 255) + (pixel & 255)) / 3 | 0;
					var this2 = 0;
					var color = this2;
					var Alpha = 255;
					if(Alpha == null) {
						Alpha = 255;
					}
					color &= -16711681;
					color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
					color &= -65281;
					color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
					color &= -256;
					color |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
					color &= 16777215;
					color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
					var color1 = color;
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					image.b[position1] = color1 >> 24 & 255;
					image.b[position1 + 1] = color1 >> 16 & 255;
					image.b[position1 + 2] = color1 >> 8 & 255;
					image.b[position1 + 3] = color1 & 255;
				}
			}
		}
	}
	return image;
};
vision_Vision.invert = function(image) {
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var pixel = this1;
				var Red = 255 - (pixel >> 16 & 255);
				var Green = 255 - (pixel >> 8 & 255);
				var Blue = 255 - (pixel & 255);
				var this2 = 0;
				var color = this2;
				var Alpha = 255;
				if(Alpha == null) {
					Alpha = 255;
				}
				color &= -16711681;
				color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
				color &= -65281;
				color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
				color &= -256;
				color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
				color &= 16777215;
				color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
				var color1 = color;
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = color1 >> 24 & 255;
				image.b[position1 + 1] = color1 >> 16 & 255;
				image.b[position1 + 2] = color1 >> 8 & 255;
				image.b[position1 + 3] = color1 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var pixel = this1;
					var Red = 255 - (pixel >> 16 & 255);
					var Green = 255 - (pixel >> 8 & 255);
					var Blue = 255 - (pixel & 255);
					var this2 = 0;
					var color = this2;
					var Alpha = 255;
					if(Alpha == null) {
						Alpha = 255;
					}
					color &= -16711681;
					color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
					color &= -65281;
					color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
					color &= -256;
					color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
					color &= 16777215;
					color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
					var color1 = color;
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					image.b[position1] = color1 >> 24 & 255;
					image.b[position1 + 1] = color1 >> 16 & 255;
					image.b[position1 + 2] = color1 >> 8 & 255;
					image.b[position1 + 3] = color1 & 255;
				}
			}
		}
	}
	return image;
};
vision_Vision.blackAndWhite = function(image,threshold) {
	if(threshold == null) {
		threshold = 128;
	}
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var pixel = this1;
				var this2 = [pixel >> 16 & 255,pixel >> 8 & 255,pixel & 255];
				var values = this2;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i = _g4++;
					if(values[i] > max) {
						max = values[i];
					}
				}
				var colorValue = max;
				if(colorValue > threshold) {
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					image.b[position1] = 255;
					image.b[position1 + 1] = 255;
					image.b[position1 + 2] = 255;
					image.b[position1 + 3] = 255;
				} else {
					var position2 = (y * image.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					image.b[position2] = 255;
					image.b[position2 + 1] = 0;
					image.b[position2 + 2] = 0;
					image.b[position2 + 3] = 0;
				}
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var pixel = this1;
					var this2 = [pixel >> 16 & 255,pixel >> 8 & 255,pixel & 255];
					var values = this2;
					var max = values[0];
					var _g7 = 0;
					var _g8 = values.length;
					while(_g7 < _g8) {
						var i = _g7++;
						if(values[i] > max) {
							max = values[i];
						}
					}
					var colorValue = max;
					if(colorValue > threshold) {
						var position1 = (y * image.getUInt16(0) + x) * 4;
						position1 += vision_ds_Image.OFFSET;
						image.b[position1] = 255;
						image.b[position1 + 1] = 255;
						image.b[position1 + 2] = 255;
						image.b[position1 + 3] = 255;
					} else {
						var position2 = (y * image.getUInt16(0) + x) * 4;
						position2 += vision_ds_Image.OFFSET;
						image.b[position2] = 255;
						image.b[position2 + 1] = 0;
						image.b[position2 + 2] = 0;
						image.b[position2 + 3] = 0;
					}
				}
			}
		}
	}
	return image;
};
vision_Vision.contrast = function(image) {
	return vision_Vision.convolve(image,vision_ds_Kernal2D.UnsharpMasking);
};
vision_Vision.sharpen = function(image) {
	return vision_Vision.convolve(image,vision_ds_Kernal2D.Sharpen);
};
vision_Vision.deepfry = function(image,iterations) {
	if(iterations == null) {
		iterations = 2;
	}
	var _g = 0;
	var _g1 = iterations;
	while(_g < _g1) {
		var i = _g++;
		image = vision_Vision.sharpen(image);
	}
	return image;
};
vision_Vision.dilate = function(image,dilationRadius,colorImportanceOrder,circularKernal) {
	if(circularKernal == null) {
		circularKernal = true;
	}
	if(colorImportanceOrder == null) {
		colorImportanceOrder = -259;
	}
	if(dilationRadius == null) {
		dilationRadius = 2;
	}
	var intermediate = vision_ds_Image.clone(image);
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var c = this1;
				var maxColor = 0;
				var circular = circularKernal;
				if(circular == null) {
					circular = false;
				}
				var circular1 = circular;
				if(circular1 == null) {
					circular1 = false;
				}
				var color_image = image;
				var color_roundedDown = dilationRadius * 2 + 1 - 1 >> 1;
				var color_x = x;
				var color_y = y;
				var color_circular = circular1;
				var color_X = -color_roundedDown;
				var color_Y = -color_roundedDown;
				while(color_X <= color_roundedDown && color_Y <= color_roundedDown) {
					while(true) {
						++color_Y;
						if(color_Y > color_roundedDown) {
							color_Y = -color_roundedDown;
							++color_X;
						}
						var tmp;
						if(color_circular) {
							var x1 = color_X;
							var y1 = color_Y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x2 = color_roundedDown;
							var y2 = color_roundedDown;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x3 = point2_x - point1_x;
							var y3 = point2_y - point1_y;
							tmp = Math.sqrt(x3 * x3 + y3 * y3) > color_roundedDown;
						} else {
							tmp = false;
						}
						if(!tmp) {
							break;
						}
					}
					var this2 = color_image;
					var x4 = color_x + color_X;
					var y4 = color_y + color_Y;
					var color;
					if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this3 = [x4,this2.getUInt16(0) - 1];
						var values = this3;
						var max = values[0];
						var _g4 = 0;
						var _g5 = values.length;
						while(_g4 < _g5) {
							var i = _g4++;
							if(values[i] > max) {
								max = values[i];
							}
						}
						var this4 = [max,0];
						var values1 = this4;
						var min = values1[0];
						var _g6 = 0;
						var _g7 = values1.length;
						while(_g6 < _g7) {
							var i1 = _g6++;
							if(values1[i1] < min) {
								min = values1[i1];
							}
						}
						var x5 = min;
						var this5 = [y4,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1];
						var values2 = this5;
						var max1 = values2[0];
						var _g8 = 0;
						var _g9 = values2.length;
						while(_g8 < _g9) {
							var i2 = _g8++;
							if(values2[i2] > max1) {
								max1 = values2[i2];
							}
						}
						var this6 = [max1,0];
						var values3 = this6;
						var min1 = values3[0];
						var _g10 = 0;
						var _g11 = values3.length;
						while(_g10 < _g11) {
							var i3 = _g10++;
							if(values3[i3] < min1) {
								min1 = values3[i3];
							}
						}
						var y5 = min1;
						if(!(x5 >= 0 && y5 >= 0 && x5 < this2.getUInt16(0) && y5 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x = x5;
							var this_y = y5;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
						}
						var position1 = (y5 * this2.getUInt16(0) + x5) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this7 = value1;
						color = this7;
					} else {
						if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x1 = x4;
							var this_y1 = y4;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
						}
						var position2 = (y4 * this2.getUInt16(0) + x4) * 4;
						position2 += vision_ds_Image.OFFSET;
						var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
						if(value2 == null) {
							value2 = 0;
						}
						var this8 = value2;
						color = this8;
					}
					color = color & colorImportanceOrder;
					var redLarger = (color >> 16 & 255) > (maxColor >> 16 & 255) ? 1 : 0;
					var greenLarger = (color >> 8 & 255) > (maxColor >> 8 & 255) ? 1 : 0;
					var blueLarger = (color & 255) > (maxColor & 255) ? 1 : 0;
					if(redLarger + blueLarger + greenLarger >= 2) {
						maxColor = color;
					}
				}
				var position3 = (y * intermediate.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				intermediate.b[position3] = maxColor >> 24 & 255;
				intermediate.b[position3 + 1] = maxColor >> 16 & 255;
				intermediate.b[position3 + 2] = maxColor >> 8 & 255;
				intermediate.b[position3 + 3] = maxColor & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var c2 = this1;
					var maxColor = 0;
					var circular = circularKernal;
					if(circular == null) {
						circular = false;
					}
					var circular1 = circular;
					if(circular1 == null) {
						circular1 = false;
					}
					var color_image = image;
					var color_roundedDown = dilationRadius * 2 + 1 - 1 >> 1;
					var color_x = x;
					var color_y = y;
					var color_circular = circular1;
					var color_X = -color_roundedDown;
					var color_Y = -color_roundedDown;
					while(color_X <= color_roundedDown && color_Y <= color_roundedDown) {
						while(true) {
							++color_Y;
							if(color_Y > color_roundedDown) {
								color_Y = -color_roundedDown;
								++color_X;
							}
							var tmp1;
							if(color_circular) {
								var x14 = color_X;
								var y14 = color_Y;
								if(y14 == null) {
									y14 = 0;
								}
								if(x14 == null) {
									x14 = 0;
								}
								var point1_x1 = x14;
								var point1_y1 = y14;
								var x15 = color_roundedDown;
								var y15 = color_roundedDown;
								if(y15 == null) {
									y15 = 0;
								}
								if(x15 == null) {
									x15 = 0;
								}
								var point2_x1 = x15;
								var point2_y1 = y15;
								var x16 = point2_x1 - point1_x1;
								var y16 = point2_y1 - point1_y1;
								tmp1 = Math.sqrt(x16 * x16 + y16 * y16) > color_roundedDown;
							} else {
								tmp1 = false;
							}
							if(!tmp1) {
								break;
							}
						}
						var this2 = color_image;
						var x17 = color_x + color_X;
						var y17 = color_y + color_Y;
						var color;
						if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this3 = [x17,this2.getUInt16(0) - 1];
							var values = this3;
							var max = values[0];
							var _g7 = 0;
							var _g8 = values.length;
							while(_g7 < _g8) {
								var i = _g7++;
								if(values[i] > max) {
									max = values[i];
								}
							}
							var this4 = [max,0];
							var values1 = this4;
							var min = values1[0];
							var _g9 = 0;
							var _g10 = values1.length;
							while(_g9 < _g10) {
								var i1 = _g9++;
								if(values1[i1] < min) {
									min = values1[i1];
								}
							}
							var x18 = min;
							var this5 = [y17,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1];
							var values2 = this5;
							var max1 = values2[0];
							var _g11 = 0;
							var _g12 = values2.length;
							while(_g11 < _g12) {
								var i2 = _g11++;
								if(values2[i2] > max1) {
									max1 = values2[i2];
								}
							}
							var this6 = [max1,0];
							var values3 = this6;
							var min1 = values3[0];
							var _g13 = 0;
							var _g14 = values3.length;
							while(_g13 < _g14) {
								var i3 = _g13++;
								if(values3[i3] < min1) {
									min1 = values3[i3];
								}
							}
							var y18 = min1;
							if(!(x18 >= 0 && y18 >= 0 && x18 < this2.getUInt16(0) && y18 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x = x18;
								var this_y = y18;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
							}
							var position1 = (y18 * this2.getUInt16(0) + x18) * 4;
							position1 += vision_ds_Image.OFFSET;
							var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
							if(value1 == null) {
								value1 = 0;
							}
							var this7 = value1;
							color = this7;
						} else {
							if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x1 = x17;
								var this_y1 = y17;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
							}
							var position2 = (y17 * this2.getUInt16(0) + x17) * 4;
							position2 += vision_ds_Image.OFFSET;
							var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
							if(value2 == null) {
								value2 = 0;
							}
							var this8 = value2;
							color = this8;
						}
						color = color & colorImportanceOrder;
						var redLarger = (color >> 16 & 255) > (maxColor >> 16 & 255) ? 1 : 0;
						var greenLarger = (color >> 8 & 255) > (maxColor >> 8 & 255) ? 1 : 0;
						var blueLarger = (color & 255) > (maxColor & 255) ? 1 : 0;
						if(redLarger + blueLarger + greenLarger >= 2) {
							maxColor = color;
						}
					}
					var position3 = (y * intermediate.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					intermediate.b[position3] = maxColor >> 24 & 255;
					intermediate.b[position3 + 1] = maxColor >> 16 & 255;
					intermediate.b[position3 + 2] = maxColor >> 8 & 255;
					intermediate.b[position3 + 3] = maxColor & 255;
				}
			}
		}
	}
	image = intermediate;
	return image;
};
vision_Vision.erode = function(image,erosionRadius,colorImportanceOrder,circularKernal) {
	if(circularKernal == null) {
		circularKernal = true;
	}
	if(colorImportanceOrder == null) {
		colorImportanceOrder = -259;
	}
	if(erosionRadius == null) {
		erosionRadius = 2;
	}
	var intermediate = vision_ds_Image.clone(image);
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var c = this1;
				var minColor = -1;
				var circular = circularKernal;
				if(circular == null) {
					circular = false;
				}
				var circular1 = circular;
				if(circular1 == null) {
					circular1 = false;
				}
				var color_image = image;
				var color_roundedDown = erosionRadius * 2 + 1 - 1 >> 1;
				var color_x = x;
				var color_y = y;
				var color_circular = circular1;
				var color_X = -color_roundedDown;
				var color_Y = -color_roundedDown;
				while(color_X <= color_roundedDown && color_Y <= color_roundedDown) {
					while(true) {
						++color_Y;
						if(color_Y > color_roundedDown) {
							color_Y = -color_roundedDown;
							++color_X;
						}
						var tmp;
						if(color_circular) {
							var x1 = color_X;
							var y1 = color_Y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x2 = color_roundedDown;
							var y2 = color_roundedDown;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x3 = point2_x - point1_x;
							var y3 = point2_y - point1_y;
							tmp = Math.sqrt(x3 * x3 + y3 * y3) > color_roundedDown;
						} else {
							tmp = false;
						}
						if(!tmp) {
							break;
						}
					}
					var this2 = color_image;
					var x4 = color_x + color_X;
					var y4 = color_y + color_Y;
					var color;
					if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this3 = [x4,this2.getUInt16(0) - 1];
						var values = this3;
						var max = values[0];
						var _g4 = 0;
						var _g5 = values.length;
						while(_g4 < _g5) {
							var i = _g4++;
							if(values[i] > max) {
								max = values[i];
							}
						}
						var this4 = [max,0];
						var values1 = this4;
						var min = values1[0];
						var _g6 = 0;
						var _g7 = values1.length;
						while(_g6 < _g7) {
							var i1 = _g6++;
							if(values1[i1] < min) {
								min = values1[i1];
							}
						}
						var x5 = min;
						var this5 = [y4,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1];
						var values2 = this5;
						var max1 = values2[0];
						var _g8 = 0;
						var _g9 = values2.length;
						while(_g8 < _g9) {
							var i2 = _g8++;
							if(values2[i2] > max1) {
								max1 = values2[i2];
							}
						}
						var this6 = [max1,0];
						var values3 = this6;
						var min1 = values3[0];
						var _g10 = 0;
						var _g11 = values3.length;
						while(_g10 < _g11) {
							var i3 = _g10++;
							if(values3[i3] < min1) {
								min1 = values3[i3];
							}
						}
						var y5 = min1;
						if(!(x5 >= 0 && y5 >= 0 && x5 < this2.getUInt16(0) && y5 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x = x5;
							var this_y = y5;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
						}
						var position1 = (y5 * this2.getUInt16(0) + x5) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this7 = value1;
						color = this7;
					} else {
						if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x1 = x4;
							var this_y1 = y4;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
						}
						var position2 = (y4 * this2.getUInt16(0) + x4) * 4;
						position2 += vision_ds_Image.OFFSET;
						var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
						if(value2 == null) {
							value2 = 0;
						}
						var this8 = value2;
						color = this8;
					}
					color = color & colorImportanceOrder;
					var redSmaller = (color >> 16 & 255) < (minColor >> 16 & 255) ? 1 : 0;
					var greenSmaller = (color >> 8 & 255) < (minColor >> 8 & 255) ? 1 : 0;
					var blueSmaller = (color & 255) < (minColor & 255) ? 1 : 0;
					if(redSmaller + blueSmaller + greenSmaller >= 2) {
						minColor = color;
					}
				}
				var position3 = (y * intermediate.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				intermediate.b[position3] = minColor >> 24 & 255;
				intermediate.b[position3 + 1] = minColor >> 16 & 255;
				intermediate.b[position3 + 2] = minColor >> 8 & 255;
				intermediate.b[position3 + 3] = minColor & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var c2 = this1;
					var minColor = -1;
					var circular = circularKernal;
					if(circular == null) {
						circular = false;
					}
					var circular1 = circular;
					if(circular1 == null) {
						circular1 = false;
					}
					var color_image = image;
					var color_roundedDown = erosionRadius * 2 + 1 - 1 >> 1;
					var color_x = x;
					var color_y = y;
					var color_circular = circular1;
					var color_X = -color_roundedDown;
					var color_Y = -color_roundedDown;
					while(color_X <= color_roundedDown && color_Y <= color_roundedDown) {
						while(true) {
							++color_Y;
							if(color_Y > color_roundedDown) {
								color_Y = -color_roundedDown;
								++color_X;
							}
							var tmp1;
							if(color_circular) {
								var x14 = color_X;
								var y14 = color_Y;
								if(y14 == null) {
									y14 = 0;
								}
								if(x14 == null) {
									x14 = 0;
								}
								var point1_x1 = x14;
								var point1_y1 = y14;
								var x15 = color_roundedDown;
								var y15 = color_roundedDown;
								if(y15 == null) {
									y15 = 0;
								}
								if(x15 == null) {
									x15 = 0;
								}
								var point2_x1 = x15;
								var point2_y1 = y15;
								var x16 = point2_x1 - point1_x1;
								var y16 = point2_y1 - point1_y1;
								tmp1 = Math.sqrt(x16 * x16 + y16 * y16) > color_roundedDown;
							} else {
								tmp1 = false;
							}
							if(!tmp1) {
								break;
							}
						}
						var this2 = color_image;
						var x17 = color_x + color_X;
						var y17 = color_y + color_Y;
						var color;
						if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this3 = [x17,this2.getUInt16(0) - 1];
							var values = this3;
							var max = values[0];
							var _g7 = 0;
							var _g8 = values.length;
							while(_g7 < _g8) {
								var i = _g7++;
								if(values[i] > max) {
									max = values[i];
								}
							}
							var this4 = [max,0];
							var values1 = this4;
							var min = values1[0];
							var _g9 = 0;
							var _g10 = values1.length;
							while(_g9 < _g10) {
								var i1 = _g9++;
								if(values1[i1] < min) {
									min = values1[i1];
								}
							}
							var x18 = min;
							var this5 = [y17,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1];
							var values2 = this5;
							var max1 = values2[0];
							var _g11 = 0;
							var _g12 = values2.length;
							while(_g11 < _g12) {
								var i2 = _g11++;
								if(values2[i2] > max1) {
									max1 = values2[i2];
								}
							}
							var this6 = [max1,0];
							var values3 = this6;
							var min1 = values3[0];
							var _g13 = 0;
							var _g14 = values3.length;
							while(_g13 < _g14) {
								var i3 = _g13++;
								if(values3[i3] < min1) {
									min1 = values3[i3];
								}
							}
							var y18 = min1;
							if(!(x18 >= 0 && y18 >= 0 && x18 < this2.getUInt16(0) && y18 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x = x18;
								var this_y = y18;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
							}
							var position1 = (y18 * this2.getUInt16(0) + x18) * 4;
							position1 += vision_ds_Image.OFFSET;
							var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
							if(value1 == null) {
								value1 = 0;
							}
							var this7 = value1;
							color = this7;
						} else {
							if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x1 = x17;
								var this_y1 = y17;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
							}
							var position2 = (y17 * this2.getUInt16(0) + x17) * 4;
							position2 += vision_ds_Image.OFFSET;
							var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
							if(value2 == null) {
								value2 = 0;
							}
							var this8 = value2;
							color = this8;
						}
						color = color & colorImportanceOrder;
						var redSmaller = (color >> 16 & 255) < (minColor >> 16 & 255) ? 1 : 0;
						var greenSmaller = (color >> 8 & 255) < (minColor >> 8 & 255) ? 1 : 0;
						var blueSmaller = (color & 255) < (minColor & 255) ? 1 : 0;
						if(redSmaller + blueSmaller + greenSmaller >= 2) {
							minColor = color;
						}
					}
					var position3 = (y * intermediate.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					intermediate.b[position3] = minColor >> 24 & 255;
					intermediate.b[position3 + 1] = minColor >> 16 & 255;
					intermediate.b[position3 + 2] = minColor >> 8 & 255;
					intermediate.b[position3 + 3] = minColor & 255;
				}
			}
		}
	}
	image = intermediate;
	return image;
};
vision_Vision.saltAndPepperNoise = function(image,percentage) {
	if(percentage == null) {
		percentage = 25;
	}
	var translated = percentage / 100;
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				var multiplierCounter = 1;
				var multiplier = 1;
				var diff = color;
				while(multiplierCounter < 32) {
					if(Math.random() < translated) {
						diff = diff | multiplier;
					}
					multiplier *= 2;
					++multiplierCounter;
				}
				var r = ((diff >> 16 & 255) - (color >> 16 & 255)) * 0.5 + (color >> 16 & 255) | 0;
				var g = ((diff >> 8 & 255) - (color >> 8 & 255)) * 0.5 + (color >> 8 & 255) | 0;
				var b = ((diff & 255) - (color & 255)) * 0.5 + (color & 255) | 0;
				var a = ((diff >> 24 & 255) - (color >> 24 & 255)) * 0.5 + (color >> 24 & 255) | 0;
				var Alpha = a;
				if(Alpha == null) {
					Alpha = 255;
				}
				var this2 = 0;
				var color1 = this2;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 255;
				}
				color1 &= -16711681;
				color1 |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
				color1 &= -65281;
				color1 |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
				color1 &= -256;
				color1 |= b > 255 ? 255 : b < 0 ? 0 : b;
				color1 &= 16777215;
				color1 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
				var color2 = color1;
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = color2 >> 24 & 255;
				image.b[position1 + 1] = color2 >> 16 & 255;
				image.b[position1 + 2] = color2 >> 8 & 255;
				image.b[position1 + 3] = color2 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					var multiplierCounter = 1;
					var multiplier = 1;
					var diff = color;
					while(multiplierCounter < 32) {
						if(Math.random() < translated) {
							diff = diff | multiplier;
						}
						multiplier *= 2;
						++multiplierCounter;
					}
					var r = ((diff >> 16 & 255) - (color >> 16 & 255)) * 0.5 + (color >> 16 & 255) | 0;
					var g = ((diff >> 8 & 255) - (color >> 8 & 255)) * 0.5 + (color >> 8 & 255) | 0;
					var b2 = ((diff & 255) - (color & 255)) * 0.5 + (color & 255) | 0;
					var a2 = ((diff >> 24 & 255) - (color >> 24 & 255)) * 0.5 + (color >> 24 & 255) | 0;
					var Alpha = a2;
					if(Alpha == null) {
						Alpha = 255;
					}
					var this2 = 0;
					var color1 = this2;
					var Alpha1 = Alpha;
					if(Alpha1 == null) {
						Alpha1 = 255;
					}
					color1 &= -16711681;
					color1 |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
					color1 &= -65281;
					color1 |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
					color1 &= -256;
					color1 |= b2 > 255 ? 255 : b2 < 0 ? 0 : b2;
					color1 &= 16777215;
					color1 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
					var color2 = color1;
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					image.b[position1] = color2 >> 24 & 255;
					image.b[position1 + 1] = color2 >> 16 & 255;
					image.b[position1 + 2] = color2 >> 8 & 255;
					image.b[position1 + 3] = color2 & 255;
				}
			}
		}
	}
	return image;
};
vision_Vision.dropOutNoise = function(image,percentage,threshold) {
	if(threshold == null) {
		threshold = 128;
	}
	if(percentage == null) {
		percentage = 5;
	}
	var translated = percentage / 100;
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				if(!(Math.random() > translated)) {
					if((color >> 16 & 255) > threshold || (color & 255) > threshold || (color >> 8 & 255) > threshold) {
						var position1 = (y * image.getUInt16(0) + x) * 4;
						position1 += vision_ds_Image.OFFSET;
						image.b[position1] = 0;
						image.b[position1 + 1] = 0;
						image.b[position1 + 2] = 0;
						image.b[position1 + 3] = 0;
					} else {
						var position2 = (y * image.getUInt16(0) + x) * 4;
						position2 += vision_ds_Image.OFFSET;
						image.b[position2] = 255;
						image.b[position2 + 1] = 255;
						image.b[position2 + 2] = 255;
						image.b[position2 + 3] = 255;
					}
				}
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					if(!(Math.random() > translated)) {
						if((color >> 16 & 255) > threshold || (color & 255) > threshold || (color >> 8 & 255) > threshold) {
							var position1 = (y * image.getUInt16(0) + x) * 4;
							position1 += vision_ds_Image.OFFSET;
							image.b[position1] = 0;
							image.b[position1 + 1] = 0;
							image.b[position1 + 2] = 0;
							image.b[position1 + 3] = 0;
						} else {
							var position2 = (y * image.getUInt16(0) + x) * 4;
							position2 += vision_ds_Image.OFFSET;
							image.b[position2] = 255;
							image.b[position2 + 1] = 255;
							image.b[position2 + 2] = 255;
							image.b[position2 + 3] = 255;
						}
					}
				}
			}
		}
	}
	return image;
};
vision_Vision.whiteNoise = function(image,percentage,whiteNoiseRange) {
	if(whiteNoiseRange == null) {
		whiteNoiseRange = 16;
	}
	if(percentage == null) {
		percentage = 25;
	}
	var this1 = new Array(whiteNoiseRange);
	var colorVector = this1;
	colorVector[0] = 0;
	colorVector[colorVector.length - 1] = 255;
	var step = Math.round(256 / whiteNoiseRange);
	var _g = 1;
	var _g1 = whiteNoiseRange - 1;
	while(_g < _g1) {
		var i = _g++;
		colorVector[i] = step * i;
	}
	var translated = percentage / 100;
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var first = this1;
				var randomAtRange = Math.floor(Math.random() * whiteNoiseRange);
				var value1 = Math.round((first >> 16 & 255) * (1 - translated) + colorVector[randomAtRange] * translated);
				first &= -16711681;
				first |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
				var value2 = Math.round((first & 255) * (1 - translated) + colorVector[randomAtRange] * translated);
				first &= -256;
				first |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
				var value3 = Math.round((first >> 8 & 255) * (1 - translated) + colorVector[randomAtRange] * translated);
				first &= -65281;
				first |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 8;
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = first >> 24 & 255;
				image.b[position1 + 1] = first >> 16 & 255;
				image.b[position1 + 2] = first >> 8 & 255;
				image.b[position1 + 3] = first & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var first = this1;
					var randomAtRange = Math.floor(Math.random() * whiteNoiseRange);
					var value1 = Math.round((first >> 16 & 255) * (1 - translated) + colorVector[randomAtRange] * translated);
					first &= -16711681;
					first |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
					var value2 = Math.round((first & 255) * (1 - translated) + colorVector[randomAtRange] * translated);
					first &= -256;
					first |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
					var value3 = Math.round((first >> 8 & 255) * (1 - translated) + colorVector[randomAtRange] * translated);
					first &= -65281;
					first |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 8;
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					image.b[position1] = first >> 24 & 255;
					image.b[position1 + 1] = first >> 16 & 255;
					image.b[position1 + 2] = first >> 8 & 255;
					image.b[position1 + 3] = first & 255;
				}
			}
		}
	}
	return image;
};
vision_Vision.normalize = function(image,rangeStart,rangeEnd) {
	if(rangeEnd == null) {
		rangeEnd = -1;
	}
	if(rangeStart == null) {
		rangeStart = 0;
	}
	var max = 0;
	var min = 0;
	var step = 0;
	var this1 = [rangeStart >> 16 & 255,rangeEnd >> 16 & 255];
	var values = this1;
	var max1 = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max1) {
			max1 = values[i];
		}
	}
	var value = max1;
	max &= -16711681;
	max |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var this1 = [rangeStart >> 16 & 255,rangeEnd >> 16 & 255];
	var values = this1;
	var min1 = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min1) {
			min1 = values[i];
		}
	}
	var value = min1;
	min &= -16711681;
	min |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var this1 = [rangeStart >> 8 & 255,rangeEnd >> 8 & 255];
	var values = this1;
	var max1 = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max1) {
			max1 = values[i];
		}
	}
	var value = max1;
	max &= -65281;
	max |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var this1 = [rangeStart >> 8 & 255,rangeEnd >> 8 & 255];
	var values = this1;
	var min1 = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min1) {
			min1 = values[i];
		}
	}
	var value = min1;
	min &= -65281;
	min |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var this1 = [rangeStart & 255,rangeEnd & 255];
	var values = this1;
	var max1 = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max1) {
			max1 = values[i];
		}
	}
	var value = max1;
	max &= -256;
	max |= value > 255 ? 255 : value < 0 ? 0 : value;
	var this1 = [rangeStart & 255,rangeEnd & 255];
	var values = this1;
	var min1 = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min1) {
			min1 = values[i];
		}
	}
	var value = min1;
	min &= -256;
	min |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = ((max >> 16 & 255) - (min >> 16 & 255)) / 255;
	var value1 = Math.round(value * 255);
	step &= -16711681;
	step |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	var value = ((max & 255) - (min & 255)) / 255;
	var value1 = Math.round(value * 255);
	step &= -256;
	step |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	var value = ((max >> 8 & 255) - (min >> 8 & 255)) / 255;
	var value1 = Math.round(value * 255);
	step &= -65281;
	step |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				var value1 = (color >> 16 & 255) / 255 * ((step >> 16 & 255) / 255);
				var value2 = Math.round(value1 * 255);
				color &= -16711681;
				color |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
				var value3 = (color & 255) / 255 * ((step & 255) / 255);
				var value4 = Math.round(value3 * 255);
				color &= -256;
				color |= value4 > 255 ? 255 : value4 < 0 ? 0 : value4;
				var value5 = (color >> 8 & 255) / 255 * ((step >> 8 & 255) / 255);
				var value6 = Math.round(value5 * 255);
				color &= -65281;
				color |= (value6 > 255 ? 255 : value6 < 0 ? 0 : value6) << 8;
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = color >> 24 & 255;
				image.b[position1 + 1] = color >> 16 & 255;
				image.b[position1 + 2] = color >> 8 & 255;
				image.b[position1 + 3] = color & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					var value1 = (color >> 16 & 255) / 255 * ((step >> 16 & 255) / 255);
					var value2 = Math.round(value1 * 255);
					color &= -16711681;
					color |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
					var value3 = (color & 255) / 255 * ((step & 255) / 255);
					var value4 = Math.round(value3 * 255);
					color &= -256;
					color |= value4 > 255 ? 255 : value4 < 0 ? 0 : value4;
					var value5 = (color >> 8 & 255) / 255 * ((step >> 8 & 255) / 255);
					var value6 = Math.round(value5 * 255);
					color &= -65281;
					color |= (value6 > 255 ? 255 : value6 < 0 ? 0 : value6) << 8;
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					image.b[position1] = color >> 24 & 255;
					image.b[position1 + 1] = color >> 16 & 255;
					image.b[position1 + 2] = color >> 8 & 255;
					image.b[position1 + 3] = color & 255;
				}
			}
		}
	}
	return image;
};
vision_Vision.limitColorRanges = function(image,rangeStart,rangeEnd) {
	if(rangeEnd == null) {
		rangeEnd = -1;
	}
	if(rangeStart == null) {
		rangeStart = 0;
	}
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				var value1 = vision_tools_MathTools.boundInt(color >> 16 & 255,rangeStart >> 16 & 255,rangeEnd >> 16 & 255);
				color &= -16711681;
				color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
				var value2 = vision_tools_MathTools.boundInt(color & 255,rangeStart & 255,rangeEnd & 255);
				color &= -256;
				color |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
				var value3 = vision_tools_MathTools.boundInt(color >> 8 & 255,rangeStart >> 8 & 255,rangeEnd >> 8 & 255);
				color &= -65281;
				color |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 8;
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = color >> 24 & 255;
				image.b[position1 + 1] = color >> 16 & 255;
				image.b[position1 + 2] = color >> 8 & 255;
				image.b[position1 + 3] = color & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					var value1 = vision_tools_MathTools.boundInt(color >> 16 & 255,rangeStart >> 16 & 255,rangeEnd >> 16 & 255);
					color &= -16711681;
					color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
					var value2 = vision_tools_MathTools.boundInt(color & 255,rangeStart & 255,rangeEnd & 255);
					color &= -256;
					color |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
					var value3 = vision_tools_MathTools.boundInt(color >> 8 & 255,rangeStart >> 8 & 255,rangeEnd >> 8 & 255);
					color &= -65281;
					color |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 8;
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					image.b[position1] = color >> 24 & 255;
					image.b[position1 + 1] = color >> 16 & 255;
					image.b[position1 + 2] = color >> 8 & 255;
					image.b[position1 + 3] = color & 255;
				}
			}
		}
	}
	return image;
};
vision_Vision.replaceColorRanges = function(image,ranges) {
	if(ranges == null) {
		return image;
	}
	var _g = 0;
	while(_g < ranges.length) {
		var range = ranges[_g];
		++_g;
		var rangeStart = range.rangeStart;
		var rangeEnd = range.rangeEnd;
		var $with = range.replacement;
		if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
			var _g1 = 0;
			var _g2 = image.getUInt16(0);
			while(_g1 < _g2) {
				var x = _g1++;
				var _g3 = 0;
				var _g4 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				while(_g3 < _g4) {
					var y = _g3++;
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					var original = color;
					var value1 = vision_tools_MathTools.isBetweenRanges(color >> 16 & 255,{ start : rangeStart >> 16 & 255, end : rangeEnd >> 16 & 255}) ? color >> 16 & 255 : $with >> 16 & 255;
					color &= -16711681;
					color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
					var value2 = vision_tools_MathTools.isBetweenRanges(color & 255,{ start : rangeStart & 255, end : rangeEnd & 255}) ? color & 255 : $with & 255;
					color &= -256;
					color |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
					var value3 = vision_tools_MathTools.isBetweenRanges(color >> 8 & 255,{ start : rangeStart >> 8 & 255, end : rangeEnd >> 8 & 255}) ? color >> 8 & 255 : $with >> 8 & 255;
					color &= -65281;
					color |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 8;
					if(color == original) {
						var position1 = (y * image.getUInt16(0) + x) * 4;
						position1 += vision_ds_Image.OFFSET;
						image.b[position1] = color >> 24 & 255;
						image.b[position1 + 1] = color >> 16 & 255;
						image.b[position1 + 2] = color >> 8 & 255;
						image.b[position1 + 3] = color & 255;
					} else {
						var position2 = (y * image.getUInt16(0) + x) * 4;
						position2 += vision_ds_Image.OFFSET;
						image.b[position2] = $with >> 24 & 255;
						image.b[position2 + 1] = $with >> 16 & 255;
						image.b[position2 + 2] = $with >> 8 & 255;
						image.b[position2 + 3] = $with & 255;
					}
				}
			}
		} else {
			var _g5 = 0;
			var _g6 = image.getUInt16(0);
			while(_g5 < _g6) {
				var x1 = _g5++;
				var _g7 = 0;
				var _g8 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				while(_g7 < _g8) {
					var y1 = _g7++;
					var v = null;
					var tmp;
					if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g9 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g10 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g11 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var image1 = image.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g9,_g10,_g11,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x3 = view.x + view.width / 2 + c;
								var y3 = view.y + view.height / 2;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var f2_x = x3;
								var f2_y = y3;
								var x4 = x1;
								var y4 = y1;
								if(y4 == null) {
									y4 = 0;
								}
								if(x4 == null) {
									x4 = 0;
								}
								var p_x = x4;
								var p_y = y4;
								var x5 = p_x - f1_x;
								var y5 = p_y - f1_y;
								var x6 = p_x - f2_x;
								var y6 = p_y - f2_y;
								has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 - c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f1_x1 = x7;
								var f1_y1 = y7;
								var x8 = view.x + view.width / 2;
								var y8 = view.y + view.height / 2 + c1;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var f2_x1 = x8;
								var f2_y1 = y8;
								var x9 = x1;
								var y9 = y1;
								if(y9 == null) {
									y9 = 0;
								}
								if(x9 == null) {
									x9 = 0;
								}
								var p_x1 = x9;
								var p_y1 = y9;
								var x10 = p_x1 - f1_x1;
								var y10 = p_y1 - f1_y1;
								var x11 = p_x1 - f2_x1;
								var y11 = p_y1 - f2_y1;
								has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x12 = x1;
								var y12 = y1;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var point1_x = x12;
								var point1_y = y12;
								var x13 = view.x + view.width / 2;
								var y13 = view.y + view.height / 2;
								if(y13 == null) {
									y13 = 0;
								}
								if(x13 == null) {
									x13 = 0;
								}
								var point2_x = x13;
								var point2_y = y13;
								var x14 = point2_x - point1_x;
								var y14 = point2_y - point1_y;
								has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position3 = (y1 * image.getUInt16(0) + x1) * 4;
						position3 += vision_ds_Image.OFFSET;
						var value4 = image.b[position3] << 24 | image.b[position3 + 1] << 16 | image.b[position3 + 2] << 8 | image.b[position3 + 3];
						if(value4 == null) {
							value4 = 0;
						}
						var this2 = value4;
						var color1 = this2;
						var original1 = color1;
						var value5 = vision_tools_MathTools.isBetweenRanges(color1 >> 16 & 255,{ start : rangeStart >> 16 & 255, end : rangeEnd >> 16 & 255}) ? color1 >> 16 & 255 : $with >> 16 & 255;
						color1 &= -16711681;
						color1 |= (value5 > 255 ? 255 : value5 < 0 ? 0 : value5) << 16;
						var value6 = vision_tools_MathTools.isBetweenRanges(color1 & 255,{ start : rangeStart & 255, end : rangeEnd & 255}) ? color1 & 255 : $with & 255;
						color1 &= -256;
						color1 |= value6 > 255 ? 255 : value6 < 0 ? 0 : value6;
						var value7 = vision_tools_MathTools.isBetweenRanges(color1 >> 8 & 255,{ start : rangeStart >> 8 & 255, end : rangeEnd >> 8 & 255}) ? color1 >> 8 & 255 : $with >> 8 & 255;
						color1 &= -65281;
						color1 |= (value7 > 255 ? 255 : value7 < 0 ? 0 : value7) << 8;
						if(color1 == original1) {
							var position4 = (y1 * image.getUInt16(0) + x1) * 4;
							position4 += vision_ds_Image.OFFSET;
							image.b[position4] = color1 >> 24 & 255;
							image.b[position4 + 1] = color1 >> 16 & 255;
							image.b[position4 + 2] = color1 >> 8 & 255;
							image.b[position4 + 3] = color1 & 255;
						} else {
							var position5 = (y1 * image.getUInt16(0) + x1) * 4;
							position5 += vision_ds_Image.OFFSET;
							image.b[position5] = $with >> 24 & 255;
							image.b[position5 + 1] = $with >> 16 & 255;
							image.b[position5 + 2] = $with >> 8 & 255;
							image.b[position5 + 3] = $with & 255;
						}
					}
				}
			}
		}
	}
	return image;
};
vision_Vision.convolve = function(image,kernal) {
	if(kernal == null) {
		kernal = vision_ds_Kernal2D.Identity;
	}
	var matrix;
	if(((kernal) instanceof Array)) {
		matrix = kernal;
	} else {
		var _g = js_Boot.__cast(kernal , vision_ds_Kernal2D);
		switch(_g._hx_index) {
		case 0:
			matrix = [[0,0,0],[0,1,0],[0,0,0]];
			break;
		case 1:
			matrix = [[1,1,1],[1,1,1],[1,1,1]];
			break;
		case 2:
			matrix = [[0,1,0],[1,-4,1],[0,1,0]];
			break;
		case 3:
			matrix = [[0,-1,0],[-1,4,-1],[0,-1,0]];
			break;
		case 4:
			matrix = [[-1,-1,-1],[-1,4,-1],[-1,-1,-1]];
			break;
		case 5:
			matrix = [[-1,-1,-1],[-1,7.75,-1],[-1,-1,-1]];
			break;
		case 6:
			matrix = [[0,-1,0],[-1,5,-1],[0,-1,0]];
			break;
		case 7:
			matrix = [[1,4,6,4,1],[4,16,24,16,4],[6,24,-476,24,6],[4,16,24,16,4],[1,4,6,4,1]];
			break;
		case 8:
			var corner = _g.corner;
			var edge = _g.edge;
			var center = _g.center;
			matrix = [[corner,edge,corner],[edge,center,edge],[corner,edge,corner]];
			break;
		case 9:
			var farCorner = _g.farCorner;
			var farEdge = _g.farEdge;
			var edge = _g.edge;
			var midCorner = _g.midCorner;
			var midEdge = _g.midEdge;
			var center = _g.center;
			matrix = [[farCorner,farEdge,edge,farEdge,farCorner],[farEdge,midCorner,midEdge,midCorner,farEdge],[edge,midEdge,center,midEdge,edge],[farEdge,midCorner,midEdge,midCorner,farEdge],[farCorner,farEdge,edge,farEdge,farCorner]];
			break;
		case 10:
			var kernal = _g.kernal;
			matrix = kernal;
			break;
		case 11:
			var size = _g.size;
			var sigma = _g.sigma;
			var array = vision_algorithms_Gaussian.create2DKernelOfSize(size,sigma).inner;
			var raised = [];
			var _g = 0;
			var _g1 = array.length;
			while(_g < _g1) {
				var i = _g++;
				if(raised[Math.floor(i / size)] == null) {
					raised[Math.floor(i / size)] = [];
				}
				raised[Math.floor(i / size)][i % size] = array[i];
			}
			matrix = raised;
			break;
		}
	}
	var convolved = vision_ds_Image.clone(image);
	var maxLength = -1;
	var _g = 0;
	while(_g < matrix.length) {
		var array = matrix[_g];
		++_g;
		if(array.length > maxLength) {
			maxLength = array.length;
		}
	}
	var flat = [];
	var _g = 0;
	while(_g < matrix.length) {
		var item = matrix[_g];
		++_g;
		flat = flat.concat(item);
	}
	var flatMatrix = flat;
	var denominator = 0.;
	var _g = 0;
	while(_g < flatMatrix.length) {
		var number = flatMatrix[_g];
		++_g;
		denominator += number;
	}
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var _ = this1;
				var i = 0;
				var red = 0.;
				var green = 0.;
				var blue = 0.;
				var circular = false;
				if(circular == null) {
					circular = false;
				}
				var _g2_image = image;
				var _g2_roundedDown = maxLength - 1 >> 1;
				var _g2_x = x;
				var _g2_y = y;
				var _g2_circular = circular;
				var _g2_X = -_g2_roundedDown;
				var _g2_Y = -_g2_roundedDown;
				while(_g2_X <= _g2_roundedDown && _g2_Y <= _g2_roundedDown) {
					while(true) {
						++_g2_Y;
						if(_g2_Y > _g2_roundedDown) {
							_g2_Y = -_g2_roundedDown;
							++_g2_X;
						}
						var tmp;
						if(_g2_circular) {
							var x1 = _g2_X;
							var y1 = _g2_Y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x2 = _g2_roundedDown;
							var y2 = _g2_roundedDown;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x3 = point2_x - point1_x;
							var y3 = point2_y - point1_y;
							tmp = Math.sqrt(x3 * x3 + y3 * y3) > _g2_roundedDown;
						} else {
							tmp = false;
						}
						if(!tmp) {
							break;
						}
					}
					var this2 = _g2_image;
					var x4 = _g2_x + _g2_X;
					var y4 = _g2_y + _g2_Y;
					var color;
					if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this3 = [x4,this2.getUInt16(0) - 1];
						var values = this3;
						var max = values[0];
						var _g4 = 0;
						var _g5 = values.length;
						while(_g4 < _g5) {
							var i1 = _g4++;
							if(values[i1] > max) {
								max = values[i1];
							}
						}
						var this4 = [max,0];
						var values1 = this4;
						var min = values1[0];
						var _g6 = 0;
						var _g7 = values1.length;
						while(_g6 < _g7) {
							var i2 = _g6++;
							if(values1[i2] < min) {
								min = values1[i2];
							}
						}
						var x5 = min;
						var this5 = [y4,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1];
						var values2 = this5;
						var max1 = values2[0];
						var _g8 = 0;
						var _g9 = values2.length;
						while(_g8 < _g9) {
							var i3 = _g8++;
							if(values2[i3] > max1) {
								max1 = values2[i3];
							}
						}
						var this6 = [max1,0];
						var values3 = this6;
						var min1 = values3[0];
						var _g10 = 0;
						var _g11 = values3.length;
						while(_g10 < _g11) {
							var i4 = _g10++;
							if(values3[i4] < min1) {
								min1 = values3[i4];
							}
						}
						var y5 = min1;
						if(!(x5 >= 0 && y5 >= 0 && x5 < this2.getUInt16(0) && y5 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x = x5;
							var this_y = y5;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
						}
						var position1 = (y5 * this2.getUInt16(0) + x5) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this7 = value1;
						color = this7;
					} else {
						if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x1 = x4;
							var this_y1 = y4;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
						}
						var position2 = (y4 * this2.getUInt16(0) + x4) * 4;
						position2 += vision_ds_Image.OFFSET;
						var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
						if(value2 == null) {
							value2 = 0;
						}
						var this8 = value2;
						color = this8;
					}
					red += flatMatrix[i] * (color >> 16 & 255);
					blue += flatMatrix[i] * (color & 255);
					green += flatMatrix[i] * (color >> 8 & 255);
					++i;
				}
				red /= denominator;
				green /= denominator;
				blue /= denominator;
				var Red = red | 0;
				var Green = green | 0;
				var Blue = blue | 0;
				var this9 = 0;
				var color1 = this9;
				var Alpha = 255;
				if(Alpha == null) {
					Alpha = 255;
				}
				color1 &= -16711681;
				color1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
				color1 &= -65281;
				color1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
				color1 &= -256;
				color1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
				color1 &= 16777215;
				color1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
				var color2 = color1;
				var position3 = (y * convolved.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				convolved.b[position3] = color2 >> 24 & 255;
				convolved.b[position3 + 1] = color2 >> 16 & 255;
				convolved.b[position3 + 2] = color2 >> 8 & 255;
				convolved.b[position3 + 3] = color2 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var _ = this1;
					var i = 0;
					var red = 0.;
					var green = 0.;
					var blue = 0.;
					var circular = false;
					if(circular == null) {
						circular = false;
					}
					var _g2_image = image;
					var _g2_roundedDown = maxLength - 1 >> 1;
					var _g2_x = x;
					var _g2_y = y;
					var _g2_circular = circular;
					var _g2_X = -_g2_roundedDown;
					var _g2_Y = -_g2_roundedDown;
					while(_g2_X <= _g2_roundedDown && _g2_Y <= _g2_roundedDown) {
						while(true) {
							++_g2_Y;
							if(_g2_Y > _g2_roundedDown) {
								_g2_Y = -_g2_roundedDown;
								++_g2_X;
							}
							var tmp1;
							if(_g2_circular) {
								var x14 = _g2_X;
								var y14 = _g2_Y;
								if(y14 == null) {
									y14 = 0;
								}
								if(x14 == null) {
									x14 = 0;
								}
								var point1_x1 = x14;
								var point1_y1 = y14;
								var x15 = _g2_roundedDown;
								var y15 = _g2_roundedDown;
								if(y15 == null) {
									y15 = 0;
								}
								if(x15 == null) {
									x15 = 0;
								}
								var point2_x1 = x15;
								var point2_y1 = y15;
								var x16 = point2_x1 - point1_x1;
								var y16 = point2_y1 - point1_y1;
								tmp1 = Math.sqrt(x16 * x16 + y16 * y16) > _g2_roundedDown;
							} else {
								tmp1 = false;
							}
							if(!tmp1) {
								break;
							}
						}
						var this2 = _g2_image;
						var x17 = _g2_x + _g2_X;
						var y17 = _g2_y + _g2_Y;
						var color;
						if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this3 = [x17,this2.getUInt16(0) - 1];
							var values = this3;
							var max = values[0];
							var _g7 = 0;
							var _g8 = values.length;
							while(_g7 < _g8) {
								var i1 = _g7++;
								if(values[i1] > max) {
									max = values[i1];
								}
							}
							var this4 = [max,0];
							var values1 = this4;
							var min = values1[0];
							var _g9 = 0;
							var _g10 = values1.length;
							while(_g9 < _g10) {
								var i2 = _g9++;
								if(values1[i2] < min) {
									min = values1[i2];
								}
							}
							var x18 = min;
							var this5 = [y17,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1];
							var values2 = this5;
							var max1 = values2[0];
							var _g11 = 0;
							var _g12 = values2.length;
							while(_g11 < _g12) {
								var i3 = _g11++;
								if(values2[i3] > max1) {
									max1 = values2[i3];
								}
							}
							var this6 = [max1,0];
							var values3 = this6;
							var min1 = values3[0];
							var _g13 = 0;
							var _g14 = values3.length;
							while(_g13 < _g14) {
								var i4 = _g13++;
								if(values3[i4] < min1) {
									min1 = values3[i4];
								}
							}
							var y18 = min1;
							if(!(x18 >= 0 && y18 >= 0 && x18 < this2.getUInt16(0) && y18 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x = x18;
								var this_y = y18;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
							}
							var position1 = (y18 * this2.getUInt16(0) + x18) * 4;
							position1 += vision_ds_Image.OFFSET;
							var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
							if(value1 == null) {
								value1 = 0;
							}
							var this7 = value1;
							color = this7;
						} else {
							if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x1 = x17;
								var this_y1 = y17;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
							}
							var position2 = (y17 * this2.getUInt16(0) + x17) * 4;
							position2 += vision_ds_Image.OFFSET;
							var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
							if(value2 == null) {
								value2 = 0;
							}
							var this8 = value2;
							color = this8;
						}
						red += flatMatrix[i] * (color >> 16 & 255);
						blue += flatMatrix[i] * (color & 255);
						green += flatMatrix[i] * (color >> 8 & 255);
						++i;
					}
					red /= denominator;
					green /= denominator;
					blue /= denominator;
					var Red = red | 0;
					var Green = green | 0;
					var Blue = blue | 0;
					var this9 = 0;
					var color1 = this9;
					var Alpha = 255;
					if(Alpha == null) {
						Alpha = 255;
					}
					color1 &= -16711681;
					color1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
					color1 &= -65281;
					color1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
					color1 &= -256;
					color1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
					color1 &= 16777215;
					color1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
					var color2 = color1;
					var position3 = (y * convolved.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					convolved.b[position3] = color2 >> 24 & 255;
					convolved.b[position3 + 1] = color2 >> 16 & 255;
					convolved.b[position3 + 2] = color2 >> 8 & 255;
					convolved.b[position3 + 3] = color2 & 255;
				}
			}
		}
	}
	image = convolved;
	return image;
};
vision_Vision.nearestNeighborBlur = function(image,iterations) {
	if(iterations == null) {
		iterations = 1;
	}
	var _g = 0;
	var _g1 = iterations;
	while(_g < _g1) {
		var i = _g++;
		image = vision_Vision.convolve(image,vision_ds_Kernal2D.BoxBlur);
	}
	return image;
};
vision_Vision.gaussianBlur = function(image,sigma,kernalSize) {
	if(kernalSize == null) {
		kernalSize = 5;
	}
	if(sigma == null) {
		sigma = 1;
	}
	return vision_Vision.convolve(image,vision_ds_Kernal2D.GaussianBlur(kernalSize,sigma));
};
vision_Vision.medianBlur = function(image,kernalSize) {
	if(kernalSize == null) {
		kernalSize = 5;
	}
	var median = vision_ds_Image.clone(image);
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				var width = kernalSize;
				var height = kernalSize;
				var fillWith = null;
				var neighbors_width = width;
				var neighbors_height = height;
				haxe_Log.trace(width,{ fileName : "vision/ds/Array2D.hx", lineNumber : 41, className : "vision.ds.Array2D", methodName : "new", customParams : [height]});
				var neighbors_inner = [];
				neighbors_inner.length = width * height;
				if(fillWith != null) {
					var _g4 = 0;
					var _g5 = neighbors_inner.length;
					while(_g4 < _g5) {
						var i = _g4++;
						neighbors_inner[i] = fillWith;
					}
				}
				var i1 = 0;
				var circular = false;
				if(circular == null) {
					circular = false;
				}
				var _g_image = image;
				var _g_roundedDown = kernalSize - 1 >> 1;
				var _g_x = x;
				var _g_y = y;
				var _g_circular = circular;
				var _g_X = -_g_roundedDown;
				var _g_Y = -_g_roundedDown;
				while(_g_X <= _g_roundedDown && _g_Y <= _g_roundedDown) {
					while(true) {
						++_g_Y;
						if(_g_Y > _g_roundedDown) {
							_g_Y = -_g_roundedDown;
							++_g_X;
						}
						var tmp;
						if(_g_circular) {
							var x1 = _g_X;
							var y1 = _g_Y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x2 = _g_roundedDown;
							var y2 = _g_roundedDown;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x3 = point2_x - point1_x;
							var y3 = point2_y - point1_y;
							tmp = Math.sqrt(x3 * x3 + y3 * y3) > _g_roundedDown;
						} else {
							tmp = false;
						}
						if(!tmp) {
							break;
						}
					}
					var this2 = _g_image;
					var x4 = _g_x + _g_X;
					var y4 = _g_y + _g_Y;
					var neighbor;
					if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this3 = [x4,this2.getUInt16(0) - 1];
						var values = this3;
						var max = values[0];
						var _g6 = 0;
						var _g7 = values.length;
						while(_g6 < _g7) {
							var i2 = _g6++;
							if(values[i2] > max) {
								max = values[i2];
							}
						}
						var this4 = [max,0];
						var values1 = this4;
						var min = values1[0];
						var _g8 = 0;
						var _g9 = values1.length;
						while(_g8 < _g9) {
							var i3 = _g8++;
							if(values1[i3] < min) {
								min = values1[i3];
							}
						}
						var x5 = min;
						var this5 = [y4,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1];
						var values2 = this5;
						var max1 = values2[0];
						var _g10 = 0;
						var _g11 = values2.length;
						while(_g10 < _g11) {
							var i4 = _g10++;
							if(values2[i4] > max1) {
								max1 = values2[i4];
							}
						}
						var this6 = [max1,0];
						var values3 = this6;
						var min1 = values3[0];
						var _g12 = 0;
						var _g13 = values3.length;
						while(_g12 < _g13) {
							var i5 = _g12++;
							if(values3[i5] < min1) {
								min1 = values3[i5];
							}
						}
						var y5 = min1;
						if(!(x5 >= 0 && y5 >= 0 && x5 < this2.getUInt16(0) && y5 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x = x5;
							var this_y = y5;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
						}
						var position1 = (y5 * this2.getUInt16(0) + x5) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this7 = value1;
						neighbor = this7;
					} else {
						if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x1 = x4;
							var this_y1 = y4;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
						}
						var position2 = (y4 * this2.getUInt16(0) + x4) * 4;
						position2 += vision_ds_Image.OFFSET;
						var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
						if(value2 == null) {
							value2 = 0;
						}
						var this8 = value2;
						neighbor = this8;
					}
					neighbors_inner[i1++] = neighbor;
				}
				var neighbors = neighbors_inner;
				haxe_ds_ArraySort.sort(neighbors,function(a,b) {
					return a - b;
				});
				var color1 = neighbors[neighbors.length / 2 | 0];
				var position3 = (y * median.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				median.b[position3] = color1 >> 24 & 255;
				median.b[position3 + 1] = color1 >> 16 & 255;
				median.b[position3 + 2] = color1 >> 8 & 255;
				median.b[position3 + 3] = color1 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					var width = kernalSize;
					var height = kernalSize;
					var fillWith = null;
					var neighbors_width = width;
					var neighbors_height = height;
					haxe_Log.trace(width,{ fileName : "vision/ds/Array2D.hx", lineNumber : 41, className : "vision.ds.Array2D", methodName : "new", customParams : [height]});
					var neighbors_inner = [];
					neighbors_inner.length = width * height;
					if(fillWith != null) {
						var _g7 = 0;
						var _g8 = neighbors_inner.length;
						while(_g7 < _g8) {
							var i = _g7++;
							neighbors_inner[i] = fillWith;
						}
					}
					var i1 = 0;
					var circular = false;
					if(circular == null) {
						circular = false;
					}
					var _g_image = image;
					var _g_roundedDown = kernalSize - 1 >> 1;
					var _g_x = x;
					var _g_y = y;
					var _g_circular = circular;
					var _g_X = -_g_roundedDown;
					var _g_Y = -_g_roundedDown;
					while(_g_X <= _g_roundedDown && _g_Y <= _g_roundedDown) {
						while(true) {
							++_g_Y;
							if(_g_Y > _g_roundedDown) {
								_g_Y = -_g_roundedDown;
								++_g_X;
							}
							var tmp1;
							if(_g_circular) {
								var x14 = _g_X;
								var y14 = _g_Y;
								if(y14 == null) {
									y14 = 0;
								}
								if(x14 == null) {
									x14 = 0;
								}
								var point1_x1 = x14;
								var point1_y1 = y14;
								var x15 = _g_roundedDown;
								var y15 = _g_roundedDown;
								if(y15 == null) {
									y15 = 0;
								}
								if(x15 == null) {
									x15 = 0;
								}
								var point2_x1 = x15;
								var point2_y1 = y15;
								var x16 = point2_x1 - point1_x1;
								var y16 = point2_y1 - point1_y1;
								tmp1 = Math.sqrt(x16 * x16 + y16 * y16) > _g_roundedDown;
							} else {
								tmp1 = false;
							}
							if(!tmp1) {
								break;
							}
						}
						var this2 = _g_image;
						var x17 = _g_x + _g_X;
						var y17 = _g_y + _g_Y;
						var neighbor;
						if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this3 = [x17,this2.getUInt16(0) - 1];
							var values = this3;
							var max = values[0];
							var _g9 = 0;
							var _g10 = values.length;
							while(_g9 < _g10) {
								var i2 = _g9++;
								if(values[i2] > max) {
									max = values[i2];
								}
							}
							var this4 = [max,0];
							var values1 = this4;
							var min = values1[0];
							var _g11 = 0;
							var _g12 = values1.length;
							while(_g11 < _g12) {
								var i3 = _g11++;
								if(values1[i3] < min) {
									min = values1[i3];
								}
							}
							var x18 = min;
							var this5 = [y17,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1];
							var values2 = this5;
							var max1 = values2[0];
							var _g13 = 0;
							var _g14 = values2.length;
							while(_g13 < _g14) {
								var i4 = _g13++;
								if(values2[i4] > max1) {
									max1 = values2[i4];
								}
							}
							var this6 = [max1,0];
							var values3 = this6;
							var min1 = values3[0];
							var _g15 = 0;
							var _g16 = values3.length;
							while(_g15 < _g16) {
								var i5 = _g15++;
								if(values3[i5] < min1) {
									min1 = values3[i5];
								}
							}
							var y18 = min1;
							if(!(x18 >= 0 && y18 >= 0 && x18 < this2.getUInt16(0) && y18 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x = x18;
								var this_y = y18;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
							}
							var position1 = (y18 * this2.getUInt16(0) + x18) * 4;
							position1 += vision_ds_Image.OFFSET;
							var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
							if(value1 == null) {
								value1 = 0;
							}
							var this7 = value1;
							neighbor = this7;
						} else {
							if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x1 = x17;
								var this_y1 = y17;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
							}
							var position2 = (y17 * this2.getUInt16(0) + x17) * 4;
							position2 += vision_ds_Image.OFFSET;
							var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
							if(value2 == null) {
								value2 = 0;
							}
							var this8 = value2;
							neighbor = this8;
						}
						neighbors_inner[i1++] = neighbor;
					}
					var neighbors = neighbors_inner;
					haxe_ds_ArraySort.sort(neighbors,function(a,b) {
						return a - b;
					});
					var color1 = neighbors[neighbors.length / 2 | 0];
					var position3 = (y * median.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					median.b[position3] = color1 >> 24 & 255;
					median.b[position3 + 1] = color1 >> 16 & 255;
					median.b[position3 + 2] = color1 >> 8 & 255;
					median.b[position3 + 3] = color1 & 255;
				}
			}
		}
	}
	image = median;
	return image;
};
vision_Vision.simpleLine2DDetection = function(image,accuracy,minLineLength,speedToAccuracyRatio) {
	if(speedToAccuracyRatio == null) {
		speedToAccuracyRatio = vision_ds_specifics_AlgorithmSettings.Medium_Intermediate;
	}
	if(minLineLength == null) {
		minLineLength = 10;
	}
	if(accuracy == null) {
		accuracy = 50;
	}
	var kernalSize;
	switch(speedToAccuracyRatio._hx_index) {
	case 0:
		kernalSize = 1;
		break;
	case 1:
		kernalSize = 3;
		break;
	case 2:
		kernalSize = 5;
		break;
	case 3:
		kernalSize = 7;
		break;
	case 4:
		kernalSize = 9;
		break;
	}
	var this1 = vision_ds_Image.clone(image);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,this1.getUInt16(0));
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var lhs = vision_Vision.cannyEdgeDetection(this1,1,kernalSize,0.05,0.16);
	var this1 = vision_ds_Image.clone(image);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,this1.getUInt16(0));
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var this2 = this1;
	var inter = vision_ds_Image.clone(this2);
	if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = this2.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * this2.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				var x1 = inter.getUInt16(0) - x - 1;
				var position1 = (y * inter.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this3 = value1;
				var color1 = this3;
				var position2 = (y * this2.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				this2.b[position2] = color1 >> 24 & 255;
				this2.b[position2 + 1] = color1 >> 16 & 255;
				this2.b[position2 + 2] = color1 >> 8 & 255;
				this2.b[position2 + 3] = color1 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = this2.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var this1;
				if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					this1 = x >= 0 && y >= 0 && x < this2.getUInt16(0) && y < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this3 = this2.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					this1 = has;
				}
				if(this1) {
					var position = (y * this2.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this4 = value;
					var color = this4;
					var x14 = inter.getUInt16(0) - x - 1;
					var position1 = (y * inter.getUInt16(0) + x14) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this5 = value1;
					var color1 = this5;
					var position2 = (y * this2.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					this2.b[position2] = color1 >> 24 & 255;
					this2.b[position2 + 1] = color1 >> 16 & 255;
					this2.b[position2 + 2] = color1 >> 8 & 255;
					this2.b[position2 + 3] = color1 & 255;
				}
			}
		}
	}
	var this1 = vision_Vision.cannyEdgeDetection(this2,1,kernalSize,0.05,0.16);
	var inter = vision_ds_Image.clone(this1);
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this2 = value;
				var color = this2;
				var x1 = inter.getUInt16(0) - x - 1;
				var position1 = (y * inter.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this3 = value1;
				var color1 = this3;
				var position2 = (y * this1.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color1 >> 24 & 255;
				this1.b[position2 + 1] = color1 >> 16 & 255;
				this1.b[position2 + 2] = color1 >> 8 & 255;
				this1.b[position2 + 3] = color1 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this3 = value;
					var color = this3;
					var x14 = inter.getUInt16(0) - x - 1;
					var position1 = (y * inter.getUInt16(0) + x14) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this4 = value1;
					var color1 = this4;
					var position2 = (y * this1.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					this1.b[position2] = color1 >> 24 & 255;
					this1.b[position2 + 1] = color1 >> 16 & 255;
					this1.b[position2 + 2] = color1 >> 8 & 255;
					this1.b[position2 + 3] = color1 & 255;
				}
			}
		}
	}
	var rhs = this1;
	if(!(lhs.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != lhs.getUInt16(0) || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4)) || lhs.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = lhs.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * lhs.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = lhs.b[position] << 24 | lhs.b[position + 1] << 16 | lhs.b[position + 2] << 8 | lhs.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var position1 = (y * rhs.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = rhs.b[position1] << 24 | rhs.b[position1 + 1] << 16 | rhs.b[position1 + 2] << 8 | rhs.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this2 = value1;
				var color = this1 | this2;
				var position2 = (y * lhs.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				lhs.b[position2] = color >> 24 & 255;
				lhs.b[position2 + 1] = color >> 16 & 255;
				lhs.b[position2 + 2] = color >> 8 & 255;
				lhs.b[position2 + 3] = color & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = lhs.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(lhs.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != lhs.getUInt16(0) || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4)) || lhs.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < lhs.getUInt16(0) && y < Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var lhs1 = lhs.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),lhs1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * lhs.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = lhs.b[position] << 24 | lhs.b[position + 1] << 16 | lhs.b[position + 2] << 8 | lhs.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var position1 = (y * rhs.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = rhs.b[position1] << 24 | rhs.b[position1 + 1] << 16 | rhs.b[position1 + 2] << 8 | rhs.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this2 = value1;
					var color = this1 | this2;
					var position2 = (y * lhs.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					lhs.b[position2] = color >> 24 & 255;
					lhs.b[position2 + 1] = color >> 16 & 255;
					lhs.b[position2 + 2] = color >> 8 & 255;
					lhs.b[position2 + 3] = color & 255;
				}
			}
		}
	}
	vision_algorithms_SimpleLineDetector.image = lhs;
	var lines = [];
	var actualLines = [];
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var X = x;
			var Y = y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var this1 = (X & 32767) - (X >> 31) * 32767 | (Y & 32767) - (Y >> 31) * 32767 << 16;
			lines.push(vision_algorithms_SimpleLineDetector.findLineFromPoint(this1,minLineLength));
		}
	}
	var _g = 0;
	while(_g < lines.length) {
		var l = lines[_g];
		++_g;
		if(l == null) {
			continue;
		}
		if(vision_algorithms_SimpleLineDetector.lineCoveragePercentage(vision_algorithms_SimpleLineDetector.image,l) < accuracy) {
			continue;
		}
		actualLines.push(l);
	}
	return actualLines;
};
vision_Vision.sobelEdgeDiffOperator = function(image) {
	return vision_algorithms_Sobel.convolveWithSobelOperator(vision_Vision.grayscale(vision_ds_Image.clone(image)));
};
vision_Vision.perwittEdgeDiffOperator = function(image) {
	return vision_algorithms_Perwitt.convolveWithPerwittOperator(vision_Vision.grayscale(vision_ds_Image.clone(image)));
};
vision_Vision.robertEdgeDiffOperator = function(image) {
	return vision_algorithms_RobertsCross.convolveWithRobertsCross(vision_Vision.grayscale(vision_ds_Image.clone(image)));
};
vision_Vision.laplacianEdgeDiffOperator = function(image,filterPositive) {
	if(filterPositive == null) {
		filterPositive = true;
	}
	return vision_algorithms_Laplacian.convolveWithLaplacianOperator(vision_ds_Image.clone(image),filterPositive);
};
vision_Vision.cannyEdgeDetection = function(image,sigma,kernalSize,lowThreshold,highThreshold) {
	if(highThreshold == null) {
		highThreshold = 0.2;
	}
	if(lowThreshold == null) {
		lowThreshold = 0.05;
	}
	if(kernalSize == null) {
		kernalSize = 5;
	}
	if(sigma == null) {
		sigma = 1;
	}
	var this1 = vision_ds_Image.clone(image);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,this1.getUInt16(0));
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var cannyObject = this1;
	return vision_Vision.blackAndWhite(vision_algorithms_Canny.applyHysteresis(vision_algorithms_Canny.nonMaxSuppression(vision_algorithms_Canny.applySobelFilters(vision_algorithms_Canny.applyGaussian(vision_algorithms_Canny.grayscale(cannyObject),kernalSize,sigma))),highThreshold,lowThreshold),40);
};
vision_Vision.sobelEdgeDetection = function(image,threshold) {
	if(threshold == null) {
		threshold = 500;
	}
	return vision_algorithms_Sobel.detectEdges(image,threshold);
};
vision_Vision.perwittEdgeDetection = function(image,threshold) {
	if(threshold == null) {
		threshold = 100;
	}
	return vision_algorithms_Perwitt.detectEdges(image,threshold);
};
vision_Vision.laplacianOfGaussianEdgeDetection = function(image,threshold,filterPositive,sigma,kernalSize) {
	if(kernalSize == null) {
		kernalSize = 3;
	}
	if(sigma == null) {
		sigma = 1;
	}
	if(filterPositive == null) {
		filterPositive = true;
	}
	if(threshold == null) {
		threshold = 2;
	}
	return vision_algorithms_Laplacian.laplacianOfGaussian(image,kernalSize,sigma,threshold,filterPositive);
};
vision_Vision.convolutionRidgeDetection = function(image,normalizationRangeStart,normalizationRangeEnd,refine) {
	if(refine == null) {
		refine = false;
	}
	if(normalizationRangeEnd == null) {
		normalizationRangeEnd = -4473925;
	}
	if(normalizationRangeStart == null) {
		normalizationRangeStart = -12303292;
	}
	var this1 = vision_ds_Image.clone(image);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,this1.getUInt16(0));
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var clone = this1;
	vision_Vision.grayscale(clone);
	vision_Vision.normalize(clone,normalizationRangeStart,normalizationRangeEnd);
	clone = vision_Vision.convolve(clone,vision_ds_Kernal2D.RidgeDetectionAggressive);
	clone = vision_Vision.replaceColorRanges(clone,[{ rangeStart : -16777216, rangeEnd : -5592406, replacement : -16777216}]);
	if(!refine) {
		return clone;
	}
	vision_Vision.blackAndWhite(clone);
	var _g = 0;
	var _g1 = clone.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((clone.length - vision_ds_Image.OFFSET) / (clone.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * clone.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = clone.b[position] << 24 | clone.b[position + 1] << 16 | clone.b[position + 2] << 8 | clone.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			var color = this1;
			var circular = false;
			if(circular == null) {
				circular = false;
			}
			var c_image = clone;
			var c_roundedDown = 1;
			var c_x = x;
			var c_y = y;
			var c_circular = circular;
			var c_X = -c_roundedDown;
			var c_Y = -c_roundedDown;
			var count = 0;
			while(c_X <= c_roundedDown && c_Y <= c_roundedDown) {
				while(true) {
					++c_Y;
					if(c_Y > c_roundedDown) {
						c_Y = -c_roundedDown;
						++c_X;
					}
					var tmp;
					if(c_circular) {
						var x1 = c_X;
						var y1 = c_Y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point1_x = x1;
						var point1_y = y1;
						var x2 = c_roundedDown;
						var y2 = c_roundedDown;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var point2_x = x2;
						var point2_y = y2;
						var x3 = point2_x - point1_x;
						var y3 = point2_y - point1_y;
						tmp = Math.sqrt(x3 * x3 + y3 * y3) > c_roundedDown;
					} else {
						tmp = false;
					}
					if(!tmp) {
						break;
					}
				}
				var this2 = c_image;
				var x4 = c_x + c_X;
				var y4 = c_y + c_Y;
				var c;
				if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
					var this3 = [x4,this2.getUInt16(0) - 1];
					var values = this3;
					var max = values[0];
					var _g4 = 0;
					var _g5 = values.length;
					while(_g4 < _g5) {
						var i = _g4++;
						if(values[i] > max) {
							max = values[i];
						}
					}
					var this4 = [max,0];
					var values1 = this4;
					var min = values1[0];
					var _g6 = 0;
					var _g7 = values1.length;
					while(_g6 < _g7) {
						var i1 = _g6++;
						if(values1[i1] < min) {
							min = values1[i1];
						}
					}
					var x5 = min;
					var this5 = [y4,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1];
					var values2 = this5;
					var max1 = values2[0];
					var _g8 = 0;
					var _g9 = values2.length;
					while(_g8 < _g9) {
						var i2 = _g8++;
						if(values2[i2] > max1) {
							max1 = values2[i2];
						}
					}
					var this6 = [max1,0];
					var values3 = this6;
					var min1 = values3[0];
					var _g10 = 0;
					var _g11 = values3.length;
					while(_g10 < _g11) {
						var i3 = _g10++;
						if(values3[i3] < min1) {
							min1 = values3[i3];
						}
					}
					var y5 = min1;
					if(!(x5 >= 0 && y5 >= 0 && x5 < this2.getUInt16(0) && y5 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x = x5;
						var this_y = y5;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
					}
					var position1 = (y5 * this2.getUInt16(0) + x5) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this7 = value1;
					c = this7;
				} else {
					if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x1 = x4;
						var this_y1 = y4;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
					}
					var position2 = (y4 * this2.getUInt16(0) + x4) * 4;
					position2 += vision_ds_Image.OFFSET;
					var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
					if(value2 == null) {
						value2 = 0;
					}
					var this8 = value2;
					c = this8;
				}
				if(c == color) {
					++count;
				}
			}
			if(count <= 1) {
				var position3 = (y * clone.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				clone.b[position3] = 0;
				clone.b[position3 + 1] = 0;
				clone.b[position3 + 2] = 0;
				clone.b[position3 + 3] = 0;
			}
		}
	}
	return clone;
};
vision_Vision.bilateralDenoise = function(image,gaussianSigma,intensitySigma) {
	if(intensitySigma == null) {
		intensitySigma = 50;
	}
	if(gaussianSigma == null) {
		gaussianSigma = 0.8;
	}
	return vision_algorithms_BilateralFilter.filter(image,gaussianSigma,intensitySigma);
};
var vision_algorithms_BilateralFilter = function() { };
$hxClasses["vision.algorithms.BilateralFilter"] = vision_algorithms_BilateralFilter;
vision_algorithms_BilateralFilter.__name__ = "vision.algorithms.BilateralFilter";
vision_algorithms_BilateralFilter.filter = function(image,distanceSigma,intensitySigma) {
	var kernelSize = Math.floor(6 * distanceSigma) + 1;
	if(kernelSize % 2 == 0) {
		++kernelSize;
	}
	var gaussianKernelMatrix = vision_algorithms_Gaussian.create2DKernelOfSize(kernelSize,distanceSigma);
	var this1 = new Array(442);
	var intensityVector = this1;
	var _g = 0;
	var _g1 = intensityVector.length;
	while(_g < _g1) {
		var i = _g++;
		intensityVector[i] = Math.exp(-(i / (2 * intensitySigma * intensitySigma)));
	}
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				var numeratorSumR = 0.;
				var numeratorSumG = 0.;
				var numeratorSumB = 0.;
				var denominatorSum = 0.;
				var kernelPositionWeight = 0.;
				var halfKernelSize = Math.floor(kernelSize / 2);
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this2 = value1;
				var kernelCenterIntensity = this2;
				var _g4 = x - halfKernelSize;
				var _g5 = x + halfKernelSize;
				while(_g4 < _g5) {
					var i = _g4++;
					var _g6 = y - halfKernelSize;
					var _g7 = y + halfKernelSize;
					while(_g6 < _g7) {
						var j = _g6++;
						if(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))) {
							var position2 = (j * image.getUInt16(0) + i) * 4;
							position2 += vision_ds_Image.OFFSET;
							var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
							if(value2 == null) {
								value2 = 0;
							}
							var this3 = value2;
							var kernelPositionIntensity = this3;
							var redDifference = (kernelPositionIntensity >> 16 & 255) - (kernelCenterIntensity >> 16 & 255);
							var greenDifference = (kernelPositionIntensity >> 8 & 255) - (kernelCenterIntensity >> 8 & 255);
							var blueDifference = (kernelPositionIntensity & 255) - (kernelCenterIntensity & 255);
							kernelPositionWeight = gaussianKernelMatrix.inner[(y - j + halfKernelSize) * gaussianKernelMatrix.height + (x - i + halfKernelSize)] * intensityVector[Math.sqrt(redDifference * redDifference + greenDifference * greenDifference + blueDifference * blueDifference) | 0];
							numeratorSumR += kernelPositionWeight * (kernelPositionIntensity >> 16 & 255);
							numeratorSumG += kernelPositionWeight * (kernelPositionIntensity >> 8 & 255);
							numeratorSumB += kernelPositionWeight * (kernelPositionIntensity & 255);
							denominatorSum += kernelPositionWeight;
						}
					}
				}
				var Red = (numeratorSumR / denominatorSum | 0) & 255;
				var Green = (numeratorSumG / denominatorSum | 0) & 255;
				var Blue = (numeratorSumB / denominatorSum | 0) & 255;
				var this4 = 0;
				var color1 = this4;
				var Alpha = 255;
				if(Alpha == null) {
					Alpha = 255;
				}
				color1 &= -16711681;
				color1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
				color1 &= -65281;
				color1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
				color1 &= -256;
				color1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
				color1 &= 16777215;
				color1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
				var color2 = color1;
				if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x;
					var this_y = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g8 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g9 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g10 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var image1 = image.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g8,_g9,_g10,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x1 = view.x + view.width / 2 - c;
								var y1 = view.y + view.height / 2;
								if(y1 == null) {
									y1 = 0;
								}
								if(x1 == null) {
									x1 = 0;
								}
								var f1_x = x1;
								var f1_y = y1;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x3 = x;
								var y3 = y;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var p_x = x3;
								var p_y = y3;
								var x4 = p_x - f1_x;
								var y4 = p_y - f1_y;
								var x5 = p_x - f2_x;
								var y5 = p_y - f2_y;
								has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x6 = view.x + view.width / 2;
								var y6 = view.y + view.height / 2 - c1;
								if(y6 == null) {
									y6 = 0;
								}
								if(x6 == null) {
									x6 = 0;
								}
								var f1_x1 = x6;
								var f1_y1 = y6;
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 + c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f2_x1 = x7;
								var f2_y1 = y7;
								var x8 = x;
								var y8 = y;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var p_x1 = x8;
								var p_y1 = y8;
								var x9 = p_x1 - f1_x1;
								var y9 = p_y1 - f1_y1;
								var x10 = p_x1 - f2_x1;
								var y10 = p_y1 - f2_y1;
								has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x11 = x;
								var y11 = y;
								if(y11 == null) {
									y11 = 0;
								}
								if(x11 == null) {
									x11 = 0;
								}
								var point1_x = x11;
								var point1_y = y11;
								var x12 = view.x + view.width / 2;
								var y12 = view.y + view.height / 2;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var point2_x = x12;
								var point2_y = y12;
								var x13 = point2_x - point1_x;
								var y13 = point2_y - point1_y;
								has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position3 = (y * image.getUInt16(0) + x) * 4;
						position3 += vision_ds_Image.OFFSET;
						image.b[position3] = color2 >> 24 & 255;
						image.b[position3 + 1] = color2 >> 16 & 255;
						image.b[position3 + 2] = color2 >> 8 & 255;
						image.b[position3 + 3] = color2 & 255;
					}
				} else {
					var position4 = (y * image.getUInt16(0) + x) * 4;
					position4 += vision_ds_Image.OFFSET;
					image.b[position4] = color2 >> 24 & 255;
					image.b[position4 + 1] = color2 >> 16 & 255;
					image.b[position4 + 2] = color2 >> 8 & 255;
					image.b[position4 + 3] = color2 & 255;
				}
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					var numeratorSumR = 0.;
					var numeratorSumG = 0.;
					var numeratorSumB = 0.;
					var denominatorSum = 0.;
					var kernelPositionWeight = 0.;
					var halfKernelSize = Math.floor(kernelSize / 2);
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this2 = value1;
					var kernelCenterIntensity = this2;
					var _g7 = x - halfKernelSize;
					var _g8 = x + halfKernelSize;
					while(_g7 < _g8) {
						var i = _g7++;
						var _g9 = y - halfKernelSize;
						var _g10 = y + halfKernelSize;
						while(_g9 < _g10) {
							var j = _g9++;
							if(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))) {
								var position2 = (j * image.getUInt16(0) + i) * 4;
								position2 += vision_ds_Image.OFFSET;
								var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
								if(value2 == null) {
									value2 = 0;
								}
								var this3 = value2;
								var kernelPositionIntensity = this3;
								var redDifference = (kernelPositionIntensity >> 16 & 255) - (kernelCenterIntensity >> 16 & 255);
								var greenDifference = (kernelPositionIntensity >> 8 & 255) - (kernelCenterIntensity >> 8 & 255);
								var blueDifference = (kernelPositionIntensity & 255) - (kernelCenterIntensity & 255);
								kernelPositionWeight = gaussianKernelMatrix.inner[(y - j + halfKernelSize) * gaussianKernelMatrix.height + (x - i + halfKernelSize)] * intensityVector[Math.sqrt(redDifference * redDifference + greenDifference * greenDifference + blueDifference * blueDifference) | 0];
								numeratorSumR += kernelPositionWeight * (kernelPositionIntensity >> 16 & 255);
								numeratorSumG += kernelPositionWeight * (kernelPositionIntensity >> 8 & 255);
								numeratorSumB += kernelPositionWeight * (kernelPositionIntensity & 255);
								denominatorSum += kernelPositionWeight;
							}
						}
					}
					var Red = (numeratorSumR / denominatorSum | 0) & 255;
					var Green = (numeratorSumG / denominatorSum | 0) & 255;
					var Blue = (numeratorSumB / denominatorSum | 0) & 255;
					var this4 = 0;
					var color1 = this4;
					var Alpha = 255;
					if(Alpha == null) {
						Alpha = 255;
					}
					color1 &= -16711681;
					color1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
					color1 &= -65281;
					color1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
					color1 &= -256;
					color1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
					color1 &= 16777215;
					color1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
					var color2 = color1;
					if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this_x = x;
						var this_y = y;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
					} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
						var v1 = null;
						var tmp1;
						if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
							tmp1 = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
						} else {
							var has1 = false;
							var view2;
							if(v1 != null) {
								view2 = v1;
							} else {
								var _g11 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
								var _g12 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
								var _g13 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
								var image2 = image.b;
								var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
								view2 = new vision_ds_ImageView(_g11,_g12,_g13,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image2[view3]);
							}
							switch(view2.shape) {
							case 0:
								has1 = x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y;
								break;
							case 1:
								has1 = !(x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y);
								break;
							case 2:case 3:
								if(view2.width > view2.height) {
									var a2 = view2.width / 2;
									var b2 = view2.height / 2;
									var c2 = Math.sqrt(a2 * a2 - b2 * b2);
									var x14 = view2.x + view2.width / 2 - c2;
									var y14 = view2.y + view2.height / 2;
									if(y14 == null) {
										y14 = 0;
									}
									if(x14 == null) {
										x14 = 0;
									}
									var f1_x2 = x14;
									var f1_y2 = y14;
									var x15 = view2.x + view2.width / 2 + c2;
									var y15 = view2.y + view2.height / 2;
									if(y15 == null) {
										y15 = 0;
									}
									if(x15 == null) {
										x15 = 0;
									}
									var f2_x2 = x15;
									var f2_y2 = y15;
									var x16 = x;
									var y16 = y;
									if(y16 == null) {
										y16 = 0;
									}
									if(x16 == null) {
										x16 = 0;
									}
									var p_x2 = x16;
									var p_y2 = y16;
									var x17 = p_x2 - f1_x2;
									var y17 = p_y2 - f1_y2;
									var x18 = p_x2 - f2_x2;
									var y18 = p_y2 - f2_y2;
									has1 = Math.sqrt(x17 * x17 + y17 * y17) + Math.sqrt(x18 * x18 + y18 * y18) <= view2.width;
									if(view2.shape == 3) {
										has1 = !has1;
									}
								} else if(view2.height > view2.width) {
									var a3 = view2.height / 2;
									var b3 = view2.width / 2;
									var c3 = Math.sqrt(a3 * a3 - b3 * b3);
									var x19 = view2.x + view2.width / 2;
									var y19 = view2.y + view2.height / 2 - c3;
									if(y19 == null) {
										y19 = 0;
									}
									if(x19 == null) {
										x19 = 0;
									}
									var f1_x3 = x19;
									var f1_y3 = y19;
									var x20 = view2.x + view2.width / 2;
									var y20 = view2.y + view2.height / 2 + c3;
									if(y20 == null) {
										y20 = 0;
									}
									if(x20 == null) {
										x20 = 0;
									}
									var f2_x3 = x20;
									var f2_y3 = y20;
									var x21 = x;
									var y21 = y;
									if(y21 == null) {
										y21 = 0;
									}
									if(x21 == null) {
										x21 = 0;
									}
									var p_x3 = x21;
									var p_y3 = y21;
									var x22 = p_x3 - f1_x3;
									var y22 = p_y3 - f1_y3;
									var x23 = p_x3 - f2_x3;
									var y23 = p_y3 - f2_y3;
									has1 = Math.sqrt(x22 * x22 + y22 * y22) + Math.sqrt(x23 * x23 + y23 * y23) <= view2.height;
									if(view2.shape == 3) {
										has1 = !has1;
									}
								} else {
									var x24 = x;
									var y24 = y;
									if(y24 == null) {
										y24 = 0;
									}
									if(x24 == null) {
										x24 = 0;
									}
									var point1_x1 = x24;
									var point1_y1 = y24;
									var x25 = view2.x + view2.width / 2;
									var y25 = view2.y + view2.height / 2;
									if(y25 == null) {
										y25 = 0;
									}
									if(x25 == null) {
										x25 = 0;
									}
									var point2_x1 = x25;
									var point2_y1 = y25;
									var x26 = point2_x1 - point1_x1;
									var y26 = point2_y1 - point1_y1;
									has1 = Math.sqrt(x26 * x26 + y26 * y26) <= view2.width / 2;
									if(view2.shape == 3) {
										has1 = !has1;
									}
								}
								break;
							case 4:
								has1 = Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
								break;
							case 5:
								has1 = !(Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
								break;
							}
							tmp1 = has1;
						}
						if(tmp1) {
							var position3 = (y * image.getUInt16(0) + x) * 4;
							position3 += vision_ds_Image.OFFSET;
							image.b[position3] = color2 >> 24 & 255;
							image.b[position3 + 1] = color2 >> 16 & 255;
							image.b[position3 + 2] = color2 >> 8 & 255;
							image.b[position3 + 3] = color2 & 255;
						}
					} else {
						var position4 = (y * image.getUInt16(0) + x) * 4;
						position4 += vision_ds_Image.OFFSET;
						image.b[position4] = color2 >> 24 & 255;
						image.b[position4 + 1] = color2 >> 16 & 255;
						image.b[position4 + 2] = color2 >> 8 & 255;
						image.b[position4 + 3] = color2 & 255;
					}
				}
			}
		}
	}
	kernelSize = 0;
	distanceSigma = kernelSize;
	intensitySigma = distanceSigma;
	intensityVector = null;
	gaussianKernelMatrix = null;
	return image;
};
var vision_algorithms_BilinearInterpolation = function() { };
$hxClasses["vision.algorithms.BilinearInterpolation"] = vision_algorithms_BilinearInterpolation;
vision_algorithms_BilinearInterpolation.__name__ = "vision.algorithms.BilinearInterpolation";
vision_algorithms_BilinearInterpolation.interpolate = function(image,width,height) {
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var resized = this2;
	var xMultiplier = image.getUInt16(0) / width - 1 / width;
	var yMultiplier = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) / height - 1 / height;
	var _g = 0;
	var _g1 = resized.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((resized.length - vision_ds_Image.OFFSET) / (resized.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * resized.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = resized.b[position] << 24 | resized.b[position + 1] << 16 | resized.b[position + 2] << 8 | resized.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			var c = this1;
			var x1 = x * xMultiplier;
			var y1 = y * yMultiplier;
			var color;
			var x2 = Math.ceil(x1);
			var y2 = Math.ceil(y1);
			if(!(x2 >= 0 && y2 >= 0 && x2 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this2 = image;
				var x3 = vision_tools_MathTools.boundFloat(x1,0,image.getUInt16(0) - 1);
				var y3 = vision_tools_MathTools.boundFloat(y1,0,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1);
				var x4 = Math.ceil(x3);
				var y4 = Math.ceil(y3);
				if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
					var this3 = this2;
					var x5 = vision_tools_MathTools.boundFloat(x3,0,this2.getUInt16(0) - 1);
					var y5 = vision_tools_MathTools.boundFloat(y3,0,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1);
					var x6 = Math.ceil(x5);
					var y6 = Math.ceil(y5);
					if(!(x6 >= 0 && y6 >= 0 && x6 < this3.getUInt16(0) && y6 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
						var this4 = this3;
						var x7 = vision_tools_MathTools.boundFloat(x5,0,this3.getUInt16(0) - 1);
						var y7 = vision_tools_MathTools.boundFloat(y5,0,Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)) - 1);
						var x8 = Math.ceil(x7);
						var y8 = Math.ceil(y7);
						if(!(x8 >= 0 && y8 >= 0 && x8 < this4.getUInt16(0) && y8 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
							color = vision_ds_Image.getFloatingPixel(this4,vision_tools_MathTools.boundFloat(x7,0,this4.getUInt16(0) - 1),vision_tools_MathTools.boundFloat(y7,0,Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)) - 1));
						} else {
							var yFraction = y7 - (y7 | 0);
							var xFraction = x7 - (x7 | 0);
							var x9 = x7 | 0;
							var y9 = y7 | 0;
							if(!(x9 >= 0 && y9 >= 0 && x9 < this4.getUInt16(0) && y9 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x = x9;
								var this_y = y9;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x,this_y)));
							}
							var position1 = (y9 * this4.getUInt16(0) + x9) * 4;
							position1 += vision_ds_Image.OFFSET;
							var value1 = this4.b[position1] << 24 | this4.b[position1 + 1] << 16 | this4.b[position1 + 2] << 8 | this4.b[position1 + 3];
							if(value1 == null) {
								value1 = 0;
							}
							var this5 = value1;
							var x10 = (x7 | 0) + 1;
							var y10 = y7 | 0;
							if(!(x10 >= 0 && y10 >= 0 && x10 < this4.getUInt16(0) && y10 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x1 = x10;
								var this_y1 = y10;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x1,this_y1)));
							}
							var position2 = (y10 * this4.getUInt16(0) + x10) * 4;
							position2 += vision_ds_Image.OFFSET;
							var value2 = this4.b[position2] << 24 | this4.b[position2 + 1] << 16 | this4.b[position2 + 2] << 8 | this4.b[position2 + 3];
							if(value2 == null) {
								value2 = 0;
							}
							var this6 = value2;
							var x11 = x7 | 0;
							var y11 = (y7 | 0) + 1;
							if(!(x11 >= 0 && y11 >= 0 && x11 < this4.getUInt16(0) && y11 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x2 = x11;
								var this_y2 = y11;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x2,this_y2)));
							}
							var position3 = (y11 * this4.getUInt16(0) + x11) * 4;
							position3 += vision_ds_Image.OFFSET;
							var value3 = this4.b[position3] << 24 | this4.b[position3 + 1] << 16 | this4.b[position3 + 2] << 8 | this4.b[position3 + 3];
							if(value3 == null) {
								value3 = 0;
							}
							var this7 = value3;
							var x12 = (x7 | 0) + 1;
							var y12 = (y7 | 0) + 1;
							if(!(x12 >= 0 && y12 >= 0 && x12 < this4.getUInt16(0) && y12 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x3 = x12;
								var this_y3 = y12;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x3,this_y3)));
							}
							var position4 = (y12 * this4.getUInt16(0) + x12) * 4;
							position4 += vision_ds_Image.OFFSET;
							var value4 = this4.b[position4] << 24 | this4.b[position4 + 1] << 16 | this4.b[position4 + 2] << 8 | this4.b[position4 + 3];
							if(value4 == null) {
								value4 = 0;
							}
							var this8 = value4;
							var red = (1 - yFraction) * ((1 - xFraction) * (this5 >> 16 & 255) + xFraction * (this6 >> 16 & 255)) + yFraction * ((1 - xFraction) * (this7 >> 16 & 255) + xFraction * (this8 >> 16 & 255)) | 0;
							var x13 = x7 | 0;
							var y13 = y7 | 0;
							if(!(x13 >= 0 && y13 >= 0 && x13 < this4.getUInt16(0) && y13 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x4 = x13;
								var this_y4 = y13;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x4,this_y4)));
							}
							var position5 = (y13 * this4.getUInt16(0) + x13) * 4;
							position5 += vision_ds_Image.OFFSET;
							var value5 = this4.b[position5] << 24 | this4.b[position5 + 1] << 16 | this4.b[position5 + 2] << 8 | this4.b[position5 + 3];
							if(value5 == null) {
								value5 = 0;
							}
							var this9 = value5;
							var x14 = (x7 | 0) + 1;
							var y14 = y7 | 0;
							if(!(x14 >= 0 && y14 >= 0 && x14 < this4.getUInt16(0) && y14 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x5 = x14;
								var this_y5 = y14;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x5,this_y5)));
							}
							var position6 = (y14 * this4.getUInt16(0) + x14) * 4;
							position6 += vision_ds_Image.OFFSET;
							var value6 = this4.b[position6] << 24 | this4.b[position6 + 1] << 16 | this4.b[position6 + 2] << 8 | this4.b[position6 + 3];
							if(value6 == null) {
								value6 = 0;
							}
							var this10 = value6;
							var x15 = x7 | 0;
							var y15 = (y7 | 0) + 1;
							if(!(x15 >= 0 && y15 >= 0 && x15 < this4.getUInt16(0) && y15 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x6 = x15;
								var this_y6 = y15;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x6,this_y6)));
							}
							var position7 = (y15 * this4.getUInt16(0) + x15) * 4;
							position7 += vision_ds_Image.OFFSET;
							var value7 = this4.b[position7] << 24 | this4.b[position7 + 1] << 16 | this4.b[position7 + 2] << 8 | this4.b[position7 + 3];
							if(value7 == null) {
								value7 = 0;
							}
							var this11 = value7;
							var x16 = (x7 | 0) + 1;
							var y16 = (y7 | 0) + 1;
							if(!(x16 >= 0 && y16 >= 0 && x16 < this4.getUInt16(0) && y16 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x7 = x16;
								var this_y7 = y16;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x7,this_y7)));
							}
							var position8 = (y16 * this4.getUInt16(0) + x16) * 4;
							position8 += vision_ds_Image.OFFSET;
							var value8 = this4.b[position8] << 24 | this4.b[position8 + 1] << 16 | this4.b[position8 + 2] << 8 | this4.b[position8 + 3];
							if(value8 == null) {
								value8 = 0;
							}
							var this12 = value8;
							var green = (1 - yFraction) * ((1 - xFraction) * (this9 >> 8 & 255) + xFraction * (this10 >> 8 & 255)) + yFraction * ((1 - xFraction) * (this11 >> 8 & 255) + xFraction * (this12 >> 8 & 255)) | 0;
							var x17 = x7 | 0;
							var y17 = y7 | 0;
							if(!(x17 >= 0 && y17 >= 0 && x17 < this4.getUInt16(0) && y17 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x8 = x17;
								var this_y8 = y17;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x8,this_y8)));
							}
							var position9 = (y17 * this4.getUInt16(0) + x17) * 4;
							position9 += vision_ds_Image.OFFSET;
							var value9 = this4.b[position9] << 24 | this4.b[position9 + 1] << 16 | this4.b[position9 + 2] << 8 | this4.b[position9 + 3];
							if(value9 == null) {
								value9 = 0;
							}
							var this13 = value9;
							var x18 = (x7 | 0) + 1;
							var y18 = y7 | 0;
							if(!(x18 >= 0 && y18 >= 0 && x18 < this4.getUInt16(0) && y18 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x9 = x18;
								var this_y9 = y18;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x9,this_y9)));
							}
							var position10 = (y18 * this4.getUInt16(0) + x18) * 4;
							position10 += vision_ds_Image.OFFSET;
							var value10 = this4.b[position10] << 24 | this4.b[position10 + 1] << 16 | this4.b[position10 + 2] << 8 | this4.b[position10 + 3];
							if(value10 == null) {
								value10 = 0;
							}
							var this14 = value10;
							var x19 = x7 | 0;
							var y19 = (y7 | 0) + 1;
							if(!(x19 >= 0 && y19 >= 0 && x19 < this4.getUInt16(0) && y19 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x10 = x19;
								var this_y10 = y19;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x10,this_y10)));
							}
							var position11 = (y19 * this4.getUInt16(0) + x19) * 4;
							position11 += vision_ds_Image.OFFSET;
							var value11 = this4.b[position11] << 24 | this4.b[position11 + 1] << 16 | this4.b[position11 + 2] << 8 | this4.b[position11 + 3];
							if(value11 == null) {
								value11 = 0;
							}
							var this15 = value11;
							var x20 = (x7 | 0) + 1;
							var y20 = (y7 | 0) + 1;
							if(!(x20 >= 0 && y20 >= 0 && x20 < this4.getUInt16(0) && y20 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x11 = x20;
								var this_y11 = y20;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x11,this_y11)));
							}
							var position12 = (y20 * this4.getUInt16(0) + x20) * 4;
							position12 += vision_ds_Image.OFFSET;
							var value12 = this4.b[position12] << 24 | this4.b[position12 + 1] << 16 | this4.b[position12 + 2] << 8 | this4.b[position12 + 3];
							if(value12 == null) {
								value12 = 0;
							}
							var this16 = value12;
							var blue = (1 - yFraction) * ((1 - xFraction) * (this13 & 255) + xFraction * (this14 & 255)) + yFraction * ((1 - xFraction) * (this15 & 255) + xFraction * (this16 & 255)) | 0;
							var x21 = x7 | 0;
							var y21 = y7 | 0;
							if(!(x21 >= 0 && y21 >= 0 && x21 < this4.getUInt16(0) && y21 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x12 = x21;
								var this_y12 = y21;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x12,this_y12)));
							}
							var position13 = (y21 * this4.getUInt16(0) + x21) * 4;
							position13 += vision_ds_Image.OFFSET;
							var value13 = this4.b[position13] << 24 | this4.b[position13 + 1] << 16 | this4.b[position13 + 2] << 8 | this4.b[position13 + 3];
							if(value13 == null) {
								value13 = 0;
							}
							var this17 = value13;
							var x22 = (x7 | 0) + 1;
							var y22 = y7 | 0;
							if(!(x22 >= 0 && y22 >= 0 && x22 < this4.getUInt16(0) && y22 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x13 = x22;
								var this_y13 = y22;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x13,this_y13)));
							}
							var position14 = (y22 * this4.getUInt16(0) + x22) * 4;
							position14 += vision_ds_Image.OFFSET;
							var value14 = this4.b[position14] << 24 | this4.b[position14 + 1] << 16 | this4.b[position14 + 2] << 8 | this4.b[position14 + 3];
							if(value14 == null) {
								value14 = 0;
							}
							var this18 = value14;
							var x23 = x7 | 0;
							var y23 = (y7 | 0) + 1;
							if(!(x23 >= 0 && y23 >= 0 && x23 < this4.getUInt16(0) && y23 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x14 = x23;
								var this_y14 = y23;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x14,this_y14)));
							}
							var position15 = (y23 * this4.getUInt16(0) + x23) * 4;
							position15 += vision_ds_Image.OFFSET;
							var value15 = this4.b[position15] << 24 | this4.b[position15 + 1] << 16 | this4.b[position15 + 2] << 8 | this4.b[position15 + 3];
							if(value15 == null) {
								value15 = 0;
							}
							var this19 = value15;
							var x24 = (x7 | 0) + 1;
							var y24 = (y7 | 0) + 1;
							if(!(x24 >= 0 && y24 >= 0 && x24 < this4.getUInt16(0) && y24 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
								var this_x15 = x24;
								var this_y15 = y24;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x15,this_y15)));
							}
							var position16 = (y24 * this4.getUInt16(0) + x24) * 4;
							position16 += vision_ds_Image.OFFSET;
							var value16 = this4.b[position16] << 24 | this4.b[position16 + 1] << 16 | this4.b[position16 + 2] << 8 | this4.b[position16 + 3];
							if(value16 == null) {
								value16 = 0;
							}
							var this20 = value16;
							var alpha = (1 - yFraction) * ((1 - xFraction) * (this17 >> 24 & 255) + xFraction * (this18 >> 24 & 255)) + yFraction * ((1 - xFraction) * (this19 >> 24 & 255) + xFraction * (this20 >> 24 & 255)) | 0;
							var Alpha = alpha;
							if(Alpha == null) {
								Alpha = 255;
							}
							var this21 = 0;
							var color1 = this21;
							var Alpha1 = Alpha;
							if(Alpha1 == null) {
								Alpha1 = 255;
							}
							color1 &= -16711681;
							color1 |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
							color1 &= -65281;
							color1 |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
							color1 &= -256;
							color1 |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
							color1 &= 16777215;
							color1 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
							color = color1;
						}
					} else {
						var yFraction1 = y5 - (y5 | 0);
						var xFraction1 = x5 - (x5 | 0);
						var x25 = x5 | 0;
						var y25 = y5 | 0;
						if(!(x25 >= 0 && y25 >= 0 && x25 < this3.getUInt16(0) && y25 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x16 = x25;
							var this_y16 = y25;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x16,this_y16)));
						}
						var position17 = (y25 * this3.getUInt16(0) + x25) * 4;
						position17 += vision_ds_Image.OFFSET;
						var value17 = this3.b[position17] << 24 | this3.b[position17 + 1] << 16 | this3.b[position17 + 2] << 8 | this3.b[position17 + 3];
						if(value17 == null) {
							value17 = 0;
						}
						var this22 = value17;
						var x26 = (x5 | 0) + 1;
						var y26 = y5 | 0;
						if(!(x26 >= 0 && y26 >= 0 && x26 < this3.getUInt16(0) && y26 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x17 = x26;
							var this_y17 = y26;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x17,this_y17)));
						}
						var position18 = (y26 * this3.getUInt16(0) + x26) * 4;
						position18 += vision_ds_Image.OFFSET;
						var value18 = this3.b[position18] << 24 | this3.b[position18 + 1] << 16 | this3.b[position18 + 2] << 8 | this3.b[position18 + 3];
						if(value18 == null) {
							value18 = 0;
						}
						var this23 = value18;
						var x27 = x5 | 0;
						var y27 = (y5 | 0) + 1;
						if(!(x27 >= 0 && y27 >= 0 && x27 < this3.getUInt16(0) && y27 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x18 = x27;
							var this_y18 = y27;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x18,this_y18)));
						}
						var position19 = (y27 * this3.getUInt16(0) + x27) * 4;
						position19 += vision_ds_Image.OFFSET;
						var value19 = this3.b[position19] << 24 | this3.b[position19 + 1] << 16 | this3.b[position19 + 2] << 8 | this3.b[position19 + 3];
						if(value19 == null) {
							value19 = 0;
						}
						var this24 = value19;
						var x28 = (x5 | 0) + 1;
						var y28 = (y5 | 0) + 1;
						if(!(x28 >= 0 && y28 >= 0 && x28 < this3.getUInt16(0) && y28 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x19 = x28;
							var this_y19 = y28;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x19,this_y19)));
						}
						var position20 = (y28 * this3.getUInt16(0) + x28) * 4;
						position20 += vision_ds_Image.OFFSET;
						var value20 = this3.b[position20] << 24 | this3.b[position20 + 1] << 16 | this3.b[position20 + 2] << 8 | this3.b[position20 + 3];
						if(value20 == null) {
							value20 = 0;
						}
						var this25 = value20;
						var red1 = (1 - yFraction1) * ((1 - xFraction1) * (this22 >> 16 & 255) + xFraction1 * (this23 >> 16 & 255)) + yFraction1 * ((1 - xFraction1) * (this24 >> 16 & 255) + xFraction1 * (this25 >> 16 & 255)) | 0;
						var x29 = x5 | 0;
						var y29 = y5 | 0;
						if(!(x29 >= 0 && y29 >= 0 && x29 < this3.getUInt16(0) && y29 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x20 = x29;
							var this_y20 = y29;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x20,this_y20)));
						}
						var position21 = (y29 * this3.getUInt16(0) + x29) * 4;
						position21 += vision_ds_Image.OFFSET;
						var value21 = this3.b[position21] << 24 | this3.b[position21 + 1] << 16 | this3.b[position21 + 2] << 8 | this3.b[position21 + 3];
						if(value21 == null) {
							value21 = 0;
						}
						var this26 = value21;
						var x30 = (x5 | 0) + 1;
						var y30 = y5 | 0;
						if(!(x30 >= 0 && y30 >= 0 && x30 < this3.getUInt16(0) && y30 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x21 = x30;
							var this_y21 = y30;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x21,this_y21)));
						}
						var position22 = (y30 * this3.getUInt16(0) + x30) * 4;
						position22 += vision_ds_Image.OFFSET;
						var value22 = this3.b[position22] << 24 | this3.b[position22 + 1] << 16 | this3.b[position22 + 2] << 8 | this3.b[position22 + 3];
						if(value22 == null) {
							value22 = 0;
						}
						var this27 = value22;
						var x31 = x5 | 0;
						var y31 = (y5 | 0) + 1;
						if(!(x31 >= 0 && y31 >= 0 && x31 < this3.getUInt16(0) && y31 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x22 = x31;
							var this_y22 = y31;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x22,this_y22)));
						}
						var position23 = (y31 * this3.getUInt16(0) + x31) * 4;
						position23 += vision_ds_Image.OFFSET;
						var value23 = this3.b[position23] << 24 | this3.b[position23 + 1] << 16 | this3.b[position23 + 2] << 8 | this3.b[position23 + 3];
						if(value23 == null) {
							value23 = 0;
						}
						var this28 = value23;
						var x32 = (x5 | 0) + 1;
						var y32 = (y5 | 0) + 1;
						if(!(x32 >= 0 && y32 >= 0 && x32 < this3.getUInt16(0) && y32 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x23 = x32;
							var this_y23 = y32;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x23,this_y23)));
						}
						var position24 = (y32 * this3.getUInt16(0) + x32) * 4;
						position24 += vision_ds_Image.OFFSET;
						var value24 = this3.b[position24] << 24 | this3.b[position24 + 1] << 16 | this3.b[position24 + 2] << 8 | this3.b[position24 + 3];
						if(value24 == null) {
							value24 = 0;
						}
						var this29 = value24;
						var green1 = (1 - yFraction1) * ((1 - xFraction1) * (this26 >> 8 & 255) + xFraction1 * (this27 >> 8 & 255)) + yFraction1 * ((1 - xFraction1) * (this28 >> 8 & 255) + xFraction1 * (this29 >> 8 & 255)) | 0;
						var x33 = x5 | 0;
						var y33 = y5 | 0;
						if(!(x33 >= 0 && y33 >= 0 && x33 < this3.getUInt16(0) && y33 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x24 = x33;
							var this_y24 = y33;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x24,this_y24)));
						}
						var position25 = (y33 * this3.getUInt16(0) + x33) * 4;
						position25 += vision_ds_Image.OFFSET;
						var value25 = this3.b[position25] << 24 | this3.b[position25 + 1] << 16 | this3.b[position25 + 2] << 8 | this3.b[position25 + 3];
						if(value25 == null) {
							value25 = 0;
						}
						var this30 = value25;
						var x34 = (x5 | 0) + 1;
						var y34 = y5 | 0;
						if(!(x34 >= 0 && y34 >= 0 && x34 < this3.getUInt16(0) && y34 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x25 = x34;
							var this_y25 = y34;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x25,this_y25)));
						}
						var position26 = (y34 * this3.getUInt16(0) + x34) * 4;
						position26 += vision_ds_Image.OFFSET;
						var value26 = this3.b[position26] << 24 | this3.b[position26 + 1] << 16 | this3.b[position26 + 2] << 8 | this3.b[position26 + 3];
						if(value26 == null) {
							value26 = 0;
						}
						var this31 = value26;
						var x35 = x5 | 0;
						var y35 = (y5 | 0) + 1;
						if(!(x35 >= 0 && y35 >= 0 && x35 < this3.getUInt16(0) && y35 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x26 = x35;
							var this_y26 = y35;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x26,this_y26)));
						}
						var position27 = (y35 * this3.getUInt16(0) + x35) * 4;
						position27 += vision_ds_Image.OFFSET;
						var value27 = this3.b[position27] << 24 | this3.b[position27 + 1] << 16 | this3.b[position27 + 2] << 8 | this3.b[position27 + 3];
						if(value27 == null) {
							value27 = 0;
						}
						var this32 = value27;
						var x36 = (x5 | 0) + 1;
						var y36 = (y5 | 0) + 1;
						if(!(x36 >= 0 && y36 >= 0 && x36 < this3.getUInt16(0) && y36 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x27 = x36;
							var this_y27 = y36;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x27,this_y27)));
						}
						var position28 = (y36 * this3.getUInt16(0) + x36) * 4;
						position28 += vision_ds_Image.OFFSET;
						var value28 = this3.b[position28] << 24 | this3.b[position28 + 1] << 16 | this3.b[position28 + 2] << 8 | this3.b[position28 + 3];
						if(value28 == null) {
							value28 = 0;
						}
						var this33 = value28;
						var blue1 = (1 - yFraction1) * ((1 - xFraction1) * (this30 & 255) + xFraction1 * (this31 & 255)) + yFraction1 * ((1 - xFraction1) * (this32 & 255) + xFraction1 * (this33 & 255)) | 0;
						var x37 = x5 | 0;
						var y37 = y5 | 0;
						if(!(x37 >= 0 && y37 >= 0 && x37 < this3.getUInt16(0) && y37 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x28 = x37;
							var this_y28 = y37;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x28,this_y28)));
						}
						var position29 = (y37 * this3.getUInt16(0) + x37) * 4;
						position29 += vision_ds_Image.OFFSET;
						var value29 = this3.b[position29] << 24 | this3.b[position29 + 1] << 16 | this3.b[position29 + 2] << 8 | this3.b[position29 + 3];
						if(value29 == null) {
							value29 = 0;
						}
						var this34 = value29;
						var x38 = (x5 | 0) + 1;
						var y38 = y5 | 0;
						if(!(x38 >= 0 && y38 >= 0 && x38 < this3.getUInt16(0) && y38 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x29 = x38;
							var this_y29 = y38;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x29,this_y29)));
						}
						var position30 = (y38 * this3.getUInt16(0) + x38) * 4;
						position30 += vision_ds_Image.OFFSET;
						var value30 = this3.b[position30] << 24 | this3.b[position30 + 1] << 16 | this3.b[position30 + 2] << 8 | this3.b[position30 + 3];
						if(value30 == null) {
							value30 = 0;
						}
						var this35 = value30;
						var x39 = x5 | 0;
						var y39 = (y5 | 0) + 1;
						if(!(x39 >= 0 && y39 >= 0 && x39 < this3.getUInt16(0) && y39 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x30 = x39;
							var this_y30 = y39;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x30,this_y30)));
						}
						var position31 = (y39 * this3.getUInt16(0) + x39) * 4;
						position31 += vision_ds_Image.OFFSET;
						var value31 = this3.b[position31] << 24 | this3.b[position31 + 1] << 16 | this3.b[position31 + 2] << 8 | this3.b[position31 + 3];
						if(value31 == null) {
							value31 = 0;
						}
						var this36 = value31;
						var x40 = (x5 | 0) + 1;
						var y40 = (y5 | 0) + 1;
						if(!(x40 >= 0 && y40 >= 0 && x40 < this3.getUInt16(0) && y40 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
							var this_x31 = x40;
							var this_y31 = y40;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x31,this_y31)));
						}
						var position32 = (y40 * this3.getUInt16(0) + x40) * 4;
						position32 += vision_ds_Image.OFFSET;
						var value32 = this3.b[position32] << 24 | this3.b[position32 + 1] << 16 | this3.b[position32 + 2] << 8 | this3.b[position32 + 3];
						if(value32 == null) {
							value32 = 0;
						}
						var this37 = value32;
						var alpha1 = (1 - yFraction1) * ((1 - xFraction1) * (this34 >> 24 & 255) + xFraction1 * (this35 >> 24 & 255)) + yFraction1 * ((1 - xFraction1) * (this36 >> 24 & 255) + xFraction1 * (this37 >> 24 & 255)) | 0;
						var Alpha2 = alpha1;
						if(Alpha2 == null) {
							Alpha2 = 255;
						}
						var this38 = 0;
						var color2 = this38;
						var Alpha3 = Alpha2;
						if(Alpha3 == null) {
							Alpha3 = 255;
						}
						color2 &= -16711681;
						color2 |= (red1 > 255 ? 255 : red1 < 0 ? 0 : red1) << 16;
						color2 &= -65281;
						color2 |= (green1 > 255 ? 255 : green1 < 0 ? 0 : green1) << 8;
						color2 &= -256;
						color2 |= blue1 > 255 ? 255 : blue1 < 0 ? 0 : blue1;
						color2 &= 16777215;
						color2 |= (Alpha3 > 255 ? 255 : Alpha3 < 0 ? 0 : Alpha3) << 24;
						color = color2;
					}
				} else {
					var yFraction2 = y3 - (y3 | 0);
					var xFraction2 = x3 - (x3 | 0);
					var x41 = x3 | 0;
					var y41 = y3 | 0;
					if(!(x41 >= 0 && y41 >= 0 && x41 < this2.getUInt16(0) && y41 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x32 = x41;
						var this_y32 = y41;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x32,this_y32)));
					}
					var position33 = (y41 * this2.getUInt16(0) + x41) * 4;
					position33 += vision_ds_Image.OFFSET;
					var value33 = this2.b[position33] << 24 | this2.b[position33 + 1] << 16 | this2.b[position33 + 2] << 8 | this2.b[position33 + 3];
					if(value33 == null) {
						value33 = 0;
					}
					var this39 = value33;
					var x42 = (x3 | 0) + 1;
					var y42 = y3 | 0;
					if(!(x42 >= 0 && y42 >= 0 && x42 < this2.getUInt16(0) && y42 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x33 = x42;
						var this_y33 = y42;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x33,this_y33)));
					}
					var position34 = (y42 * this2.getUInt16(0) + x42) * 4;
					position34 += vision_ds_Image.OFFSET;
					var value34 = this2.b[position34] << 24 | this2.b[position34 + 1] << 16 | this2.b[position34 + 2] << 8 | this2.b[position34 + 3];
					if(value34 == null) {
						value34 = 0;
					}
					var this40 = value34;
					var x43 = x3 | 0;
					var y43 = (y3 | 0) + 1;
					if(!(x43 >= 0 && y43 >= 0 && x43 < this2.getUInt16(0) && y43 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x34 = x43;
						var this_y34 = y43;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x34,this_y34)));
					}
					var position35 = (y43 * this2.getUInt16(0) + x43) * 4;
					position35 += vision_ds_Image.OFFSET;
					var value35 = this2.b[position35] << 24 | this2.b[position35 + 1] << 16 | this2.b[position35 + 2] << 8 | this2.b[position35 + 3];
					if(value35 == null) {
						value35 = 0;
					}
					var this41 = value35;
					var x44 = (x3 | 0) + 1;
					var y44 = (y3 | 0) + 1;
					if(!(x44 >= 0 && y44 >= 0 && x44 < this2.getUInt16(0) && y44 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x35 = x44;
						var this_y35 = y44;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x35,this_y35)));
					}
					var position36 = (y44 * this2.getUInt16(0) + x44) * 4;
					position36 += vision_ds_Image.OFFSET;
					var value36 = this2.b[position36] << 24 | this2.b[position36 + 1] << 16 | this2.b[position36 + 2] << 8 | this2.b[position36 + 3];
					if(value36 == null) {
						value36 = 0;
					}
					var this42 = value36;
					var red2 = (1 - yFraction2) * ((1 - xFraction2) * (this39 >> 16 & 255) + xFraction2 * (this40 >> 16 & 255)) + yFraction2 * ((1 - xFraction2) * (this41 >> 16 & 255) + xFraction2 * (this42 >> 16 & 255)) | 0;
					var x45 = x3 | 0;
					var y45 = y3 | 0;
					if(!(x45 >= 0 && y45 >= 0 && x45 < this2.getUInt16(0) && y45 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x36 = x45;
						var this_y36 = y45;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x36,this_y36)));
					}
					var position37 = (y45 * this2.getUInt16(0) + x45) * 4;
					position37 += vision_ds_Image.OFFSET;
					var value37 = this2.b[position37] << 24 | this2.b[position37 + 1] << 16 | this2.b[position37 + 2] << 8 | this2.b[position37 + 3];
					if(value37 == null) {
						value37 = 0;
					}
					var this43 = value37;
					var x46 = (x3 | 0) + 1;
					var y46 = y3 | 0;
					if(!(x46 >= 0 && y46 >= 0 && x46 < this2.getUInt16(0) && y46 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x37 = x46;
						var this_y37 = y46;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x37,this_y37)));
					}
					var position38 = (y46 * this2.getUInt16(0) + x46) * 4;
					position38 += vision_ds_Image.OFFSET;
					var value38 = this2.b[position38] << 24 | this2.b[position38 + 1] << 16 | this2.b[position38 + 2] << 8 | this2.b[position38 + 3];
					if(value38 == null) {
						value38 = 0;
					}
					var this44 = value38;
					var x47 = x3 | 0;
					var y47 = (y3 | 0) + 1;
					if(!(x47 >= 0 && y47 >= 0 && x47 < this2.getUInt16(0) && y47 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x38 = x47;
						var this_y38 = y47;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x38,this_y38)));
					}
					var position39 = (y47 * this2.getUInt16(0) + x47) * 4;
					position39 += vision_ds_Image.OFFSET;
					var value39 = this2.b[position39] << 24 | this2.b[position39 + 1] << 16 | this2.b[position39 + 2] << 8 | this2.b[position39 + 3];
					if(value39 == null) {
						value39 = 0;
					}
					var this45 = value39;
					var x48 = (x3 | 0) + 1;
					var y48 = (y3 | 0) + 1;
					if(!(x48 >= 0 && y48 >= 0 && x48 < this2.getUInt16(0) && y48 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x39 = x48;
						var this_y39 = y48;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x39,this_y39)));
					}
					var position40 = (y48 * this2.getUInt16(0) + x48) * 4;
					position40 += vision_ds_Image.OFFSET;
					var value40 = this2.b[position40] << 24 | this2.b[position40 + 1] << 16 | this2.b[position40 + 2] << 8 | this2.b[position40 + 3];
					if(value40 == null) {
						value40 = 0;
					}
					var this46 = value40;
					var green2 = (1 - yFraction2) * ((1 - xFraction2) * (this43 >> 8 & 255) + xFraction2 * (this44 >> 8 & 255)) + yFraction2 * ((1 - xFraction2) * (this45 >> 8 & 255) + xFraction2 * (this46 >> 8 & 255)) | 0;
					var x49 = x3 | 0;
					var y49 = y3 | 0;
					if(!(x49 >= 0 && y49 >= 0 && x49 < this2.getUInt16(0) && y49 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x40 = x49;
						var this_y40 = y49;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x40,this_y40)));
					}
					var position41 = (y49 * this2.getUInt16(0) + x49) * 4;
					position41 += vision_ds_Image.OFFSET;
					var value41 = this2.b[position41] << 24 | this2.b[position41 + 1] << 16 | this2.b[position41 + 2] << 8 | this2.b[position41 + 3];
					if(value41 == null) {
						value41 = 0;
					}
					var this47 = value41;
					var x50 = (x3 | 0) + 1;
					var y50 = y3 | 0;
					if(!(x50 >= 0 && y50 >= 0 && x50 < this2.getUInt16(0) && y50 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x41 = x50;
						var this_y41 = y50;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x41,this_y41)));
					}
					var position42 = (y50 * this2.getUInt16(0) + x50) * 4;
					position42 += vision_ds_Image.OFFSET;
					var value42 = this2.b[position42] << 24 | this2.b[position42 + 1] << 16 | this2.b[position42 + 2] << 8 | this2.b[position42 + 3];
					if(value42 == null) {
						value42 = 0;
					}
					var this48 = value42;
					var x51 = x3 | 0;
					var y51 = (y3 | 0) + 1;
					if(!(x51 >= 0 && y51 >= 0 && x51 < this2.getUInt16(0) && y51 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x42 = x51;
						var this_y42 = y51;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x42,this_y42)));
					}
					var position43 = (y51 * this2.getUInt16(0) + x51) * 4;
					position43 += vision_ds_Image.OFFSET;
					var value43 = this2.b[position43] << 24 | this2.b[position43 + 1] << 16 | this2.b[position43 + 2] << 8 | this2.b[position43 + 3];
					if(value43 == null) {
						value43 = 0;
					}
					var this49 = value43;
					var x52 = (x3 | 0) + 1;
					var y52 = (y3 | 0) + 1;
					if(!(x52 >= 0 && y52 >= 0 && x52 < this2.getUInt16(0) && y52 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x43 = x52;
						var this_y43 = y52;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x43,this_y43)));
					}
					var position44 = (y52 * this2.getUInt16(0) + x52) * 4;
					position44 += vision_ds_Image.OFFSET;
					var value44 = this2.b[position44] << 24 | this2.b[position44 + 1] << 16 | this2.b[position44 + 2] << 8 | this2.b[position44 + 3];
					if(value44 == null) {
						value44 = 0;
					}
					var this50 = value44;
					var blue2 = (1 - yFraction2) * ((1 - xFraction2) * (this47 & 255) + xFraction2 * (this48 & 255)) + yFraction2 * ((1 - xFraction2) * (this49 & 255) + xFraction2 * (this50 & 255)) | 0;
					var x53 = x3 | 0;
					var y53 = y3 | 0;
					if(!(x53 >= 0 && y53 >= 0 && x53 < this2.getUInt16(0) && y53 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x44 = x53;
						var this_y44 = y53;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x44,this_y44)));
					}
					var position45 = (y53 * this2.getUInt16(0) + x53) * 4;
					position45 += vision_ds_Image.OFFSET;
					var value45 = this2.b[position45] << 24 | this2.b[position45 + 1] << 16 | this2.b[position45 + 2] << 8 | this2.b[position45 + 3];
					if(value45 == null) {
						value45 = 0;
					}
					var this51 = value45;
					var x54 = (x3 | 0) + 1;
					var y54 = y3 | 0;
					if(!(x54 >= 0 && y54 >= 0 && x54 < this2.getUInt16(0) && y54 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x45 = x54;
						var this_y45 = y54;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x45,this_y45)));
					}
					var position46 = (y54 * this2.getUInt16(0) + x54) * 4;
					position46 += vision_ds_Image.OFFSET;
					var value46 = this2.b[position46] << 24 | this2.b[position46 + 1] << 16 | this2.b[position46 + 2] << 8 | this2.b[position46 + 3];
					if(value46 == null) {
						value46 = 0;
					}
					var this52 = value46;
					var x55 = x3 | 0;
					var y55 = (y3 | 0) + 1;
					if(!(x55 >= 0 && y55 >= 0 && x55 < this2.getUInt16(0) && y55 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x46 = x55;
						var this_y46 = y55;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x46,this_y46)));
					}
					var position47 = (y55 * this2.getUInt16(0) + x55) * 4;
					position47 += vision_ds_Image.OFFSET;
					var value47 = this2.b[position47] << 24 | this2.b[position47 + 1] << 16 | this2.b[position47 + 2] << 8 | this2.b[position47 + 3];
					if(value47 == null) {
						value47 = 0;
					}
					var this53 = value47;
					var x56 = (x3 | 0) + 1;
					var y56 = (y3 | 0) + 1;
					if(!(x56 >= 0 && y56 >= 0 && x56 < this2.getUInt16(0) && y56 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x47 = x56;
						var this_y47 = y56;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x47,this_y47)));
					}
					var position48 = (y56 * this2.getUInt16(0) + x56) * 4;
					position48 += vision_ds_Image.OFFSET;
					var value48 = this2.b[position48] << 24 | this2.b[position48 + 1] << 16 | this2.b[position48 + 2] << 8 | this2.b[position48 + 3];
					if(value48 == null) {
						value48 = 0;
					}
					var this54 = value48;
					var alpha2 = (1 - yFraction2) * ((1 - xFraction2) * (this51 >> 24 & 255) + xFraction2 * (this52 >> 24 & 255)) + yFraction2 * ((1 - xFraction2) * (this53 >> 24 & 255) + xFraction2 * (this54 >> 24 & 255)) | 0;
					var Alpha4 = alpha2;
					if(Alpha4 == null) {
						Alpha4 = 255;
					}
					var this55 = 0;
					var color3 = this55;
					var Alpha5 = Alpha4;
					if(Alpha5 == null) {
						Alpha5 = 255;
					}
					color3 &= -16711681;
					color3 |= (red2 > 255 ? 255 : red2 < 0 ? 0 : red2) << 16;
					color3 &= -65281;
					color3 |= (green2 > 255 ? 255 : green2 < 0 ? 0 : green2) << 8;
					color3 &= -256;
					color3 |= blue2 > 255 ? 255 : blue2 < 0 ? 0 : blue2;
					color3 &= 16777215;
					color3 |= (Alpha5 > 255 ? 255 : Alpha5 < 0 ? 0 : Alpha5) << 24;
					color = color3;
				}
			} else {
				var yFraction3 = y1 - (y1 | 0);
				var xFraction3 = x1 - (x1 | 0);
				var x57 = x1 | 0;
				var y57 = y1 | 0;
				if(!(x57 >= 0 && y57 >= 0 && x57 < image.getUInt16(0) && y57 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x48 = x57;
					var this_y48 = y57;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x48,this_y48)));
				}
				var position49 = (y57 * image.getUInt16(0) + x57) * 4;
				position49 += vision_ds_Image.OFFSET;
				var value49 = image.b[position49] << 24 | image.b[position49 + 1] << 16 | image.b[position49 + 2] << 8 | image.b[position49 + 3];
				if(value49 == null) {
					value49 = 0;
				}
				var this56 = value49;
				var x58 = (x1 | 0) + 1;
				var y58 = y1 | 0;
				if(!(x58 >= 0 && y58 >= 0 && x58 < image.getUInt16(0) && y58 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x49 = x58;
					var this_y49 = y58;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x49,this_y49)));
				}
				var position50 = (y58 * image.getUInt16(0) + x58) * 4;
				position50 += vision_ds_Image.OFFSET;
				var value50 = image.b[position50] << 24 | image.b[position50 + 1] << 16 | image.b[position50 + 2] << 8 | image.b[position50 + 3];
				if(value50 == null) {
					value50 = 0;
				}
				var this57 = value50;
				var x59 = x1 | 0;
				var y59 = (y1 | 0) + 1;
				if(!(x59 >= 0 && y59 >= 0 && x59 < image.getUInt16(0) && y59 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x50 = x59;
					var this_y50 = y59;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x50,this_y50)));
				}
				var position51 = (y59 * image.getUInt16(0) + x59) * 4;
				position51 += vision_ds_Image.OFFSET;
				var value51 = image.b[position51] << 24 | image.b[position51 + 1] << 16 | image.b[position51 + 2] << 8 | image.b[position51 + 3];
				if(value51 == null) {
					value51 = 0;
				}
				var this58 = value51;
				var x60 = (x1 | 0) + 1;
				var y60 = (y1 | 0) + 1;
				if(!(x60 >= 0 && y60 >= 0 && x60 < image.getUInt16(0) && y60 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x51 = x60;
					var this_y51 = y60;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x51,this_y51)));
				}
				var position52 = (y60 * image.getUInt16(0) + x60) * 4;
				position52 += vision_ds_Image.OFFSET;
				var value52 = image.b[position52] << 24 | image.b[position52 + 1] << 16 | image.b[position52 + 2] << 8 | image.b[position52 + 3];
				if(value52 == null) {
					value52 = 0;
				}
				var this59 = value52;
				var red3 = (1 - yFraction3) * ((1 - xFraction3) * (this56 >> 16 & 255) + xFraction3 * (this57 >> 16 & 255)) + yFraction3 * ((1 - xFraction3) * (this58 >> 16 & 255) + xFraction3 * (this59 >> 16 & 255)) | 0;
				var x61 = x1 | 0;
				var y61 = y1 | 0;
				if(!(x61 >= 0 && y61 >= 0 && x61 < image.getUInt16(0) && y61 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x52 = x61;
					var this_y52 = y61;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x52,this_y52)));
				}
				var position53 = (y61 * image.getUInt16(0) + x61) * 4;
				position53 += vision_ds_Image.OFFSET;
				var value53 = image.b[position53] << 24 | image.b[position53 + 1] << 16 | image.b[position53 + 2] << 8 | image.b[position53 + 3];
				if(value53 == null) {
					value53 = 0;
				}
				var this60 = value53;
				var x62 = (x1 | 0) + 1;
				var y62 = y1 | 0;
				if(!(x62 >= 0 && y62 >= 0 && x62 < image.getUInt16(0) && y62 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x53 = x62;
					var this_y53 = y62;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x53,this_y53)));
				}
				var position54 = (y62 * image.getUInt16(0) + x62) * 4;
				position54 += vision_ds_Image.OFFSET;
				var value54 = image.b[position54] << 24 | image.b[position54 + 1] << 16 | image.b[position54 + 2] << 8 | image.b[position54 + 3];
				if(value54 == null) {
					value54 = 0;
				}
				var this61 = value54;
				var x63 = x1 | 0;
				var y63 = (y1 | 0) + 1;
				if(!(x63 >= 0 && y63 >= 0 && x63 < image.getUInt16(0) && y63 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x54 = x63;
					var this_y54 = y63;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x54,this_y54)));
				}
				var position55 = (y63 * image.getUInt16(0) + x63) * 4;
				position55 += vision_ds_Image.OFFSET;
				var value55 = image.b[position55] << 24 | image.b[position55 + 1] << 16 | image.b[position55 + 2] << 8 | image.b[position55 + 3];
				if(value55 == null) {
					value55 = 0;
				}
				var this62 = value55;
				var x64 = (x1 | 0) + 1;
				var y64 = (y1 | 0) + 1;
				if(!(x64 >= 0 && y64 >= 0 && x64 < image.getUInt16(0) && y64 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x55 = x64;
					var this_y55 = y64;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x55,this_y55)));
				}
				var position56 = (y64 * image.getUInt16(0) + x64) * 4;
				position56 += vision_ds_Image.OFFSET;
				var value56 = image.b[position56] << 24 | image.b[position56 + 1] << 16 | image.b[position56 + 2] << 8 | image.b[position56 + 3];
				if(value56 == null) {
					value56 = 0;
				}
				var this63 = value56;
				var green3 = (1 - yFraction3) * ((1 - xFraction3) * (this60 >> 8 & 255) + xFraction3 * (this61 >> 8 & 255)) + yFraction3 * ((1 - xFraction3) * (this62 >> 8 & 255) + xFraction3 * (this63 >> 8 & 255)) | 0;
				var x65 = x1 | 0;
				var y65 = y1 | 0;
				if(!(x65 >= 0 && y65 >= 0 && x65 < image.getUInt16(0) && y65 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x56 = x65;
					var this_y56 = y65;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x56,this_y56)));
				}
				var position57 = (y65 * image.getUInt16(0) + x65) * 4;
				position57 += vision_ds_Image.OFFSET;
				var value57 = image.b[position57] << 24 | image.b[position57 + 1] << 16 | image.b[position57 + 2] << 8 | image.b[position57 + 3];
				if(value57 == null) {
					value57 = 0;
				}
				var this64 = value57;
				var x66 = (x1 | 0) + 1;
				var y66 = y1 | 0;
				if(!(x66 >= 0 && y66 >= 0 && x66 < image.getUInt16(0) && y66 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x57 = x66;
					var this_y57 = y66;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x57,this_y57)));
				}
				var position58 = (y66 * image.getUInt16(0) + x66) * 4;
				position58 += vision_ds_Image.OFFSET;
				var value58 = image.b[position58] << 24 | image.b[position58 + 1] << 16 | image.b[position58 + 2] << 8 | image.b[position58 + 3];
				if(value58 == null) {
					value58 = 0;
				}
				var this65 = value58;
				var x67 = x1 | 0;
				var y67 = (y1 | 0) + 1;
				if(!(x67 >= 0 && y67 >= 0 && x67 < image.getUInt16(0) && y67 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x58 = x67;
					var this_y58 = y67;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x58,this_y58)));
				}
				var position59 = (y67 * image.getUInt16(0) + x67) * 4;
				position59 += vision_ds_Image.OFFSET;
				var value59 = image.b[position59] << 24 | image.b[position59 + 1] << 16 | image.b[position59 + 2] << 8 | image.b[position59 + 3];
				if(value59 == null) {
					value59 = 0;
				}
				var this66 = value59;
				var x68 = (x1 | 0) + 1;
				var y68 = (y1 | 0) + 1;
				if(!(x68 >= 0 && y68 >= 0 && x68 < image.getUInt16(0) && y68 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x59 = x68;
					var this_y59 = y68;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x59,this_y59)));
				}
				var position60 = (y68 * image.getUInt16(0) + x68) * 4;
				position60 += vision_ds_Image.OFFSET;
				var value60 = image.b[position60] << 24 | image.b[position60 + 1] << 16 | image.b[position60 + 2] << 8 | image.b[position60 + 3];
				if(value60 == null) {
					value60 = 0;
				}
				var this67 = value60;
				var blue3 = (1 - yFraction3) * ((1 - xFraction3) * (this64 & 255) + xFraction3 * (this65 & 255)) + yFraction3 * ((1 - xFraction3) * (this66 & 255) + xFraction3 * (this67 & 255)) | 0;
				var x69 = x1 | 0;
				var y69 = y1 | 0;
				if(!(x69 >= 0 && y69 >= 0 && x69 < image.getUInt16(0) && y69 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x60 = x69;
					var this_y60 = y69;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x60,this_y60)));
				}
				var position61 = (y69 * image.getUInt16(0) + x69) * 4;
				position61 += vision_ds_Image.OFFSET;
				var value61 = image.b[position61] << 24 | image.b[position61 + 1] << 16 | image.b[position61 + 2] << 8 | image.b[position61 + 3];
				if(value61 == null) {
					value61 = 0;
				}
				var this68 = value61;
				var x70 = (x1 | 0) + 1;
				var y70 = y1 | 0;
				if(!(x70 >= 0 && y70 >= 0 && x70 < image.getUInt16(0) && y70 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x61 = x70;
					var this_y61 = y70;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x61,this_y61)));
				}
				var position62 = (y70 * image.getUInt16(0) + x70) * 4;
				position62 += vision_ds_Image.OFFSET;
				var value62 = image.b[position62] << 24 | image.b[position62 + 1] << 16 | image.b[position62 + 2] << 8 | image.b[position62 + 3];
				if(value62 == null) {
					value62 = 0;
				}
				var this69 = value62;
				var x71 = x1 | 0;
				var y71 = (y1 | 0) + 1;
				if(!(x71 >= 0 && y71 >= 0 && x71 < image.getUInt16(0) && y71 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x62 = x71;
					var this_y62 = y71;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x62,this_y62)));
				}
				var position63 = (y71 * image.getUInt16(0) + x71) * 4;
				position63 += vision_ds_Image.OFFSET;
				var value63 = image.b[position63] << 24 | image.b[position63 + 1] << 16 | image.b[position63 + 2] << 8 | image.b[position63 + 3];
				if(value63 == null) {
					value63 = 0;
				}
				var this70 = value63;
				var x72 = (x1 | 0) + 1;
				var y72 = (y1 | 0) + 1;
				if(!(x72 >= 0 && y72 >= 0 && x72 < image.getUInt16(0) && y72 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x63 = x72;
					var this_y63 = y72;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x63,this_y63)));
				}
				var position64 = (y72 * image.getUInt16(0) + x72) * 4;
				position64 += vision_ds_Image.OFFSET;
				var value64 = image.b[position64] << 24 | image.b[position64 + 1] << 16 | image.b[position64 + 2] << 8 | image.b[position64 + 3];
				if(value64 == null) {
					value64 = 0;
				}
				var this71 = value64;
				var alpha3 = (1 - yFraction3) * ((1 - xFraction3) * (this68 >> 24 & 255) + xFraction3 * (this69 >> 24 & 255)) + yFraction3 * ((1 - xFraction3) * (this70 >> 24 & 255) + xFraction3 * (this71 >> 24 & 255)) | 0;
				var Alpha6 = alpha3;
				if(Alpha6 == null) {
					Alpha6 = 255;
				}
				var this72 = 0;
				var color4 = this72;
				var Alpha7 = Alpha6;
				if(Alpha7 == null) {
					Alpha7 = 255;
				}
				color4 &= -16711681;
				color4 |= (red3 > 255 ? 255 : red3 < 0 ? 0 : red3) << 16;
				color4 &= -65281;
				color4 |= (green3 > 255 ? 255 : green3 < 0 ? 0 : green3) << 8;
				color4 &= -256;
				color4 |= blue3 > 255 ? 255 : blue3 < 0 ? 0 : blue3;
				color4 &= 16777215;
				color4 |= (Alpha7 > 255 ? 255 : Alpha7 < 0 ? 0 : Alpha7) << 24;
				color = color4;
			}
			if(!(x >= 0 && y >= 0 && x < resized.getUInt16(0) && y < Math.ceil((resized.length - vision_ds_Image.OFFSET) / (resized.getUInt16(0) * 4)))) {
				var this_x64 = x;
				var this_y64 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(resized,new vision_ds_Point2D(this_x64,this_y64)));
			} else if(resized.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != resized.getUInt16(0) || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((resized.length - vision_ds_Image.OFFSET) / (resized.getUInt16(0) * 4)) || resized.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(resized.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != resized.getUInt16(0) || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((resized.length - vision_ds_Image.OFFSET) / (resized.getUInt16(0) * 4)) || resized.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < resized.getUInt16(0) && y < Math.ceil((resized.length - vision_ds_Image.OFFSET) / (resized.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = resized.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var resized1 = resized.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),resized1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c1 = Math.sqrt(a * a - b * b);
							var x73 = view.x + view.width / 2 - c1;
							var y73 = view.y + view.height / 2;
							if(y73 == null) {
								y73 = 0;
							}
							if(x73 == null) {
								x73 = 0;
							}
							var f1_x = x73;
							var f1_y = y73;
							var x74 = view.x + view.width / 2 + c1;
							var y74 = view.y + view.height / 2;
							if(y74 == null) {
								y74 = 0;
							}
							if(x74 == null) {
								x74 = 0;
							}
							var f2_x = x74;
							var f2_y = y74;
							var x75 = x;
							var y75 = y;
							if(y75 == null) {
								y75 = 0;
							}
							if(x75 == null) {
								x75 = 0;
							}
							var p_x = x75;
							var p_y = y75;
							var x76 = p_x - f1_x;
							var y76 = p_y - f1_y;
							var x77 = p_x - f2_x;
							var y77 = p_y - f2_y;
							has = Math.sqrt(x76 * x76 + y76 * y76) + Math.sqrt(x77 * x77 + y77 * y77) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c2 = Math.sqrt(a1 * a1 - b1 * b1);
							var x78 = view.x + view.width / 2;
							var y78 = view.y + view.height / 2 - c2;
							if(y78 == null) {
								y78 = 0;
							}
							if(x78 == null) {
								x78 = 0;
							}
							var f1_x1 = x78;
							var f1_y1 = y78;
							var x79 = view.x + view.width / 2;
							var y79 = view.y + view.height / 2 + c2;
							if(y79 == null) {
								y79 = 0;
							}
							if(x79 == null) {
								x79 = 0;
							}
							var f2_x1 = x79;
							var f2_y1 = y79;
							var x80 = x;
							var y80 = y;
							if(y80 == null) {
								y80 = 0;
							}
							if(x80 == null) {
								x80 = 0;
							}
							var p_x1 = x80;
							var p_y1 = y80;
							var x81 = p_x1 - f1_x1;
							var y81 = p_y1 - f1_y1;
							var x82 = p_x1 - f2_x1;
							var y82 = p_y1 - f2_y1;
							has = Math.sqrt(x81 * x81 + y81 * y81) + Math.sqrt(x82 * x82 + y82 * y82) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x83 = x;
							var y83 = y;
							if(y83 == null) {
								y83 = 0;
							}
							if(x83 == null) {
								x83 = 0;
							}
							var point1_x = x83;
							var point1_y = y83;
							var x84 = view.x + view.width / 2;
							var y84 = view.y + view.height / 2;
							if(y84 == null) {
								y84 = 0;
							}
							if(x84 == null) {
								x84 = 0;
							}
							var point2_x = x84;
							var point2_y = y84;
							var x85 = point2_x - point1_x;
							var y85 = point2_y - point1_y;
							has = Math.sqrt(x85 * x85 + y85 * y85) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position65 = (y * resized.getUInt16(0) + x) * 4;
					position65 += vision_ds_Image.OFFSET;
					resized.b[position65] = color >> 24 & 255;
					resized.b[position65 + 1] = color >> 16 & 255;
					resized.b[position65 + 2] = color >> 8 & 255;
					resized.b[position65 + 3] = color & 255;
				}
			} else {
				var position66 = (y * resized.getUInt16(0) + x) * 4;
				position66 += vision_ds_Image.OFFSET;
				resized.b[position66] = color >> 24 & 255;
				resized.b[position66 + 1] = color >> 16 & 255;
				resized.b[position66 + 2] = color >> 8 & 255;
				resized.b[position66 + 3] = color & 255;
			}
		}
	}
	return resized;
};
var vision_algorithms_Canny = function() { };
$hxClasses["vision.algorithms.Canny"] = vision_algorithms_Canny;
vision_algorithms_Canny.__name__ = "vision.algorithms.Canny";
vision_algorithms_Canny.grayscale = function(image) {
	return vision_Vision.grayscale(image);
};
vision_algorithms_Canny.applyGaussian = function(image,size,sigma) {
	return vision_algorithms_Gaussian.fastBlur(image,size,sigma);
};
vision_algorithms_Canny.applySobelFilters = function(image) {
	return vision_Vision.sobelEdgeDiffOperator(image);
};
vision_algorithms_Canny.nonMaxSuppression = function(image) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var filtered = this2;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var n = vision_algorithms_Canny.getNeighbors(3,x,y,image);
			if(n[1][1] > n[0][1] && n[1][1] > n[2][1]) {
				var color = n[1][1];
				if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
					var this_x = x;
					var this_y = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x,this_y)));
				} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g4 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g5 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g6 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var filtered1 = filtered.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g4,_g5,_g6,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x1 = view.x + view.width / 2 - c;
								var y1 = view.y + view.height / 2;
								if(y1 == null) {
									y1 = 0;
								}
								if(x1 == null) {
									x1 = 0;
								}
								var f1_x = x1;
								var f1_y = y1;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x3 = x;
								var y3 = y;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var p_x = x3;
								var p_y = y3;
								var x4 = p_x - f1_x;
								var y4 = p_y - f1_y;
								var x5 = p_x - f2_x;
								var y5 = p_y - f2_y;
								has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x6 = view.x + view.width / 2;
								var y6 = view.y + view.height / 2 - c1;
								if(y6 == null) {
									y6 = 0;
								}
								if(x6 == null) {
									x6 = 0;
								}
								var f1_x1 = x6;
								var f1_y1 = y6;
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 + c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f2_x1 = x7;
								var f2_y1 = y7;
								var x8 = x;
								var y8 = y;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var p_x1 = x8;
								var p_y1 = y8;
								var x9 = p_x1 - f1_x1;
								var y9 = p_y1 - f1_y1;
								var x10 = p_x1 - f2_x1;
								var y10 = p_y1 - f2_y1;
								has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x11 = x;
								var y11 = y;
								if(y11 == null) {
									y11 = 0;
								}
								if(x11 == null) {
									x11 = 0;
								}
								var point1_x = x11;
								var point1_y = y11;
								var x12 = view.x + view.width / 2;
								var y12 = view.y + view.height / 2;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var point2_x = x12;
								var point2_y = y12;
								var x13 = point2_x - point1_x;
								var y13 = point2_y - point1_y;
								has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position = (y * filtered.getUInt16(0) + x) * 4;
						position += vision_ds_Image.OFFSET;
						filtered.b[position] = color >> 24 & 255;
						filtered.b[position + 1] = color >> 16 & 255;
						filtered.b[position + 2] = color >> 8 & 255;
						filtered.b[position + 3] = color & 255;
					}
				} else {
					var position1 = (y * filtered.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					filtered.b[position1] = color >> 24 & 255;
					filtered.b[position1 + 1] = color >> 16 & 255;
					filtered.b[position1 + 2] = color >> 8 & 255;
					filtered.b[position1 + 3] = color & 255;
				}
			} else if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
				var this_x1 = x;
				var this_y1 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x1,this_y1)));
			} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v1 = null;
				var tmp1;
				if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
					tmp1 = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
				} else {
					var has1 = false;
					var view2;
					if(v1 != null) {
						view2 = v1;
					} else {
						var _g7 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g8 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g9 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var filtered2 = filtered.b;
						var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view2 = new vision_ds_ImageView(_g7,_g8,_g9,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered2[view3]);
					}
					switch(view2.shape) {
					case 0:
						has1 = x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y;
						break;
					case 1:
						has1 = !(x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y);
						break;
					case 2:case 3:
						if(view2.width > view2.height) {
							var a2 = view2.width / 2;
							var b2 = view2.height / 2;
							var c2 = Math.sqrt(a2 * a2 - b2 * b2);
							var x14 = view2.x + view2.width / 2 - c2;
							var y14 = view2.y + view2.height / 2;
							if(y14 == null) {
								y14 = 0;
							}
							if(x14 == null) {
								x14 = 0;
							}
							var f1_x2 = x14;
							var f1_y2 = y14;
							var x15 = view2.x + view2.width / 2 + c2;
							var y15 = view2.y + view2.height / 2;
							if(y15 == null) {
								y15 = 0;
							}
							if(x15 == null) {
								x15 = 0;
							}
							var f2_x2 = x15;
							var f2_y2 = y15;
							var x16 = x;
							var y16 = y;
							if(y16 == null) {
								y16 = 0;
							}
							if(x16 == null) {
								x16 = 0;
							}
							var p_x2 = x16;
							var p_y2 = y16;
							var x17 = p_x2 - f1_x2;
							var y17 = p_y2 - f1_y2;
							var x18 = p_x2 - f2_x2;
							var y18 = p_y2 - f2_y2;
							has1 = Math.sqrt(x17 * x17 + y17 * y17) + Math.sqrt(x18 * x18 + y18 * y18) <= view2.width;
							if(view2.shape == 3) {
								has1 = !has1;
							}
						} else if(view2.height > view2.width) {
							var a3 = view2.height / 2;
							var b3 = view2.width / 2;
							var c3 = Math.sqrt(a3 * a3 - b3 * b3);
							var x19 = view2.x + view2.width / 2;
							var y19 = view2.y + view2.height / 2 - c3;
							if(y19 == null) {
								y19 = 0;
							}
							if(x19 == null) {
								x19 = 0;
							}
							var f1_x3 = x19;
							var f1_y3 = y19;
							var x20 = view2.x + view2.width / 2;
							var y20 = view2.y + view2.height / 2 + c3;
							if(y20 == null) {
								y20 = 0;
							}
							if(x20 == null) {
								x20 = 0;
							}
							var f2_x3 = x20;
							var f2_y3 = y20;
							var x21 = x;
							var y21 = y;
							if(y21 == null) {
								y21 = 0;
							}
							if(x21 == null) {
								x21 = 0;
							}
							var p_x3 = x21;
							var p_y3 = y21;
							var x22 = p_x3 - f1_x3;
							var y22 = p_y3 - f1_y3;
							var x23 = p_x3 - f2_x3;
							var y23 = p_y3 - f2_y3;
							has1 = Math.sqrt(x22 * x22 + y22 * y22) + Math.sqrt(x23 * x23 + y23 * y23) <= view2.height;
							if(view2.shape == 3) {
								has1 = !has1;
							}
						} else {
							var x24 = x;
							var y24 = y;
							if(y24 == null) {
								y24 = 0;
							}
							if(x24 == null) {
								x24 = 0;
							}
							var point1_x1 = x24;
							var point1_y1 = y24;
							var x25 = view2.x + view2.width / 2;
							var y25 = view2.y + view2.height / 2;
							if(y25 == null) {
								y25 = 0;
							}
							if(x25 == null) {
								x25 = 0;
							}
							var point2_x1 = x25;
							var point2_y1 = y25;
							var x26 = point2_x1 - point1_x1;
							var y26 = point2_y1 - point1_y1;
							has1 = Math.sqrt(x26 * x26 + y26 * y26) <= view2.width / 2;
							if(view2.shape == 3) {
								has1 = !has1;
							}
						}
						break;
					case 4:
						has1 = Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
						break;
					case 5:
						has1 = !(Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
						break;
					}
					tmp1 = has1;
				}
				if(tmp1) {
					var position2 = (y * filtered.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					filtered.b[position2] = 0;
					filtered.b[position2 + 1] = 0;
					filtered.b[position2 + 2] = 0;
					filtered.b[position2 + 3] = 0;
				}
			} else {
				var position3 = (y * filtered.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				filtered.b[position3] = 0;
				filtered.b[position3 + 1] = 0;
				filtered.b[position3 + 2] = 0;
				filtered.b[position3 + 3] = 0;
			}
			if(n[1][1] > n[0][2] && n[1][1] > n[2][0]) {
				var color1 = n[1][1];
				if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
					var this_x2 = x;
					var this_y2 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x2,this_y2)));
				} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v2 = null;
					var tmp2;
					if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
						tmp2 = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
					} else {
						var has2 = false;
						var view4;
						if(v2 != null) {
							view4 = v2;
						} else {
							var _g10 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g11 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g12 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var filtered3 = filtered.b;
							var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view4 = new vision_ds_ImageView(_g10,_g11,_g12,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered3[view5]);
						}
						switch(view4.shape) {
						case 0:
							has2 = x < view4.x + view4.width && y < view4.y + view4.height && x >= view4.x && y >= view4.y;
							break;
						case 1:
							has2 = !(x < view4.x + view4.width && y < view4.y + view4.height && x >= view4.x && y >= view4.y);
							break;
						case 2:case 3:
							if(view4.width > view4.height) {
								var a4 = view4.width / 2;
								var b4 = view4.height / 2;
								var c4 = Math.sqrt(a4 * a4 - b4 * b4);
								var x27 = view4.x + view4.width / 2 - c4;
								var y27 = view4.y + view4.height / 2;
								if(y27 == null) {
									y27 = 0;
								}
								if(x27 == null) {
									x27 = 0;
								}
								var f1_x4 = x27;
								var f1_y4 = y27;
								var x28 = view4.x + view4.width / 2 + c4;
								var y28 = view4.y + view4.height / 2;
								if(y28 == null) {
									y28 = 0;
								}
								if(x28 == null) {
									x28 = 0;
								}
								var f2_x4 = x28;
								var f2_y4 = y28;
								var x29 = x;
								var y29 = y;
								if(y29 == null) {
									y29 = 0;
								}
								if(x29 == null) {
									x29 = 0;
								}
								var p_x4 = x29;
								var p_y4 = y29;
								var x30 = p_x4 - f1_x4;
								var y30 = p_y4 - f1_y4;
								var x31 = p_x4 - f2_x4;
								var y31 = p_y4 - f2_y4;
								has2 = Math.sqrt(x30 * x30 + y30 * y30) + Math.sqrt(x31 * x31 + y31 * y31) <= view4.width;
								if(view4.shape == 3) {
									has2 = !has2;
								}
							} else if(view4.height > view4.width) {
								var a5 = view4.height / 2;
								var b5 = view4.width / 2;
								var c5 = Math.sqrt(a5 * a5 - b5 * b5);
								var x32 = view4.x + view4.width / 2;
								var y32 = view4.y + view4.height / 2 - c5;
								if(y32 == null) {
									y32 = 0;
								}
								if(x32 == null) {
									x32 = 0;
								}
								var f1_x5 = x32;
								var f1_y5 = y32;
								var x33 = view4.x + view4.width / 2;
								var y33 = view4.y + view4.height / 2 + c5;
								if(y33 == null) {
									y33 = 0;
								}
								if(x33 == null) {
									x33 = 0;
								}
								var f2_x5 = x33;
								var f2_y5 = y33;
								var x34 = x;
								var y34 = y;
								if(y34 == null) {
									y34 = 0;
								}
								if(x34 == null) {
									x34 = 0;
								}
								var p_x5 = x34;
								var p_y5 = y34;
								var x35 = p_x5 - f1_x5;
								var y35 = p_y5 - f1_y5;
								var x36 = p_x5 - f2_x5;
								var y36 = p_y5 - f2_y5;
								has2 = Math.sqrt(x35 * x35 + y35 * y35) + Math.sqrt(x36 * x36 + y36 * y36) <= view4.height;
								if(view4.shape == 3) {
									has2 = !has2;
								}
							} else {
								var x37 = x;
								var y37 = y;
								if(y37 == null) {
									y37 = 0;
								}
								if(x37 == null) {
									x37 = 0;
								}
								var point1_x2 = x37;
								var point1_y2 = y37;
								var x38 = view4.x + view4.width / 2;
								var y38 = view4.y + view4.height / 2;
								if(y38 == null) {
									y38 = 0;
								}
								if(x38 == null) {
									x38 = 0;
								}
								var point2_x2 = x38;
								var point2_y2 = y38;
								var x39 = point2_x2 - point1_x2;
								var y39 = point2_y2 - point1_y2;
								has2 = Math.sqrt(x39 * x39 + y39 * y39) <= view4.width / 2;
								if(view4.shape == 3) {
									has2 = !has2;
								}
							}
							break;
						case 4:
							has2 = Math.abs(x - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
							break;
						case 5:
							has2 = !(Math.abs(x - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
							break;
						}
						tmp2 = has2;
					}
					if(tmp2) {
						var position4 = (y * filtered.getUInt16(0) + x) * 4;
						position4 += vision_ds_Image.OFFSET;
						filtered.b[position4] = color1 >> 24 & 255;
						filtered.b[position4 + 1] = color1 >> 16 & 255;
						filtered.b[position4 + 2] = color1 >> 8 & 255;
						filtered.b[position4 + 3] = color1 & 255;
					}
				} else {
					var position5 = (y * filtered.getUInt16(0) + x) * 4;
					position5 += vision_ds_Image.OFFSET;
					filtered.b[position5] = color1 >> 24 & 255;
					filtered.b[position5 + 1] = color1 >> 16 & 255;
					filtered.b[position5 + 2] = color1 >> 8 & 255;
					filtered.b[position5 + 3] = color1 & 255;
				}
			} else if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
				var this_x3 = x;
				var this_y3 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x3,this_y3)));
			} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v3 = null;
				var tmp3;
				if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
					tmp3 = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
				} else {
					var has3 = false;
					var view6;
					if(v3 != null) {
						view6 = v3;
					} else {
						var _g13 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g14 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g15 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var filtered4 = filtered.b;
						var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view6 = new vision_ds_ImageView(_g13,_g14,_g15,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered4[view7]);
					}
					switch(view6.shape) {
					case 0:
						has3 = x < view6.x + view6.width && y < view6.y + view6.height && x >= view6.x && y >= view6.y;
						break;
					case 1:
						has3 = !(x < view6.x + view6.width && y < view6.y + view6.height && x >= view6.x && y >= view6.y);
						break;
					case 2:case 3:
						if(view6.width > view6.height) {
							var a6 = view6.width / 2;
							var b6 = view6.height / 2;
							var c6 = Math.sqrt(a6 * a6 - b6 * b6);
							var x40 = view6.x + view6.width / 2 - c6;
							var y40 = view6.y + view6.height / 2;
							if(y40 == null) {
								y40 = 0;
							}
							if(x40 == null) {
								x40 = 0;
							}
							var f1_x6 = x40;
							var f1_y6 = y40;
							var x41 = view6.x + view6.width / 2 + c6;
							var y41 = view6.y + view6.height / 2;
							if(y41 == null) {
								y41 = 0;
							}
							if(x41 == null) {
								x41 = 0;
							}
							var f2_x6 = x41;
							var f2_y6 = y41;
							var x42 = x;
							var y42 = y;
							if(y42 == null) {
								y42 = 0;
							}
							if(x42 == null) {
								x42 = 0;
							}
							var p_x6 = x42;
							var p_y6 = y42;
							var x43 = p_x6 - f1_x6;
							var y43 = p_y6 - f1_y6;
							var x44 = p_x6 - f2_x6;
							var y44 = p_y6 - f2_y6;
							has3 = Math.sqrt(x43 * x43 + y43 * y43) + Math.sqrt(x44 * x44 + y44 * y44) <= view6.width;
							if(view6.shape == 3) {
								has3 = !has3;
							}
						} else if(view6.height > view6.width) {
							var a7 = view6.height / 2;
							var b7 = view6.width / 2;
							var c7 = Math.sqrt(a7 * a7 - b7 * b7);
							var x45 = view6.x + view6.width / 2;
							var y45 = view6.y + view6.height / 2 - c7;
							if(y45 == null) {
								y45 = 0;
							}
							if(x45 == null) {
								x45 = 0;
							}
							var f1_x7 = x45;
							var f1_y7 = y45;
							var x46 = view6.x + view6.width / 2;
							var y46 = view6.y + view6.height / 2 + c7;
							if(y46 == null) {
								y46 = 0;
							}
							if(x46 == null) {
								x46 = 0;
							}
							var f2_x7 = x46;
							var f2_y7 = y46;
							var x47 = x;
							var y47 = y;
							if(y47 == null) {
								y47 = 0;
							}
							if(x47 == null) {
								x47 = 0;
							}
							var p_x7 = x47;
							var p_y7 = y47;
							var x48 = p_x7 - f1_x7;
							var y48 = p_y7 - f1_y7;
							var x49 = p_x7 - f2_x7;
							var y49 = p_y7 - f2_y7;
							has3 = Math.sqrt(x48 * x48 + y48 * y48) + Math.sqrt(x49 * x49 + y49 * y49) <= view6.height;
							if(view6.shape == 3) {
								has3 = !has3;
							}
						} else {
							var x50 = x;
							var y50 = y;
							if(y50 == null) {
								y50 = 0;
							}
							if(x50 == null) {
								x50 = 0;
							}
							var point1_x3 = x50;
							var point1_y3 = y50;
							var x51 = view6.x + view6.width / 2;
							var y51 = view6.y + view6.height / 2;
							if(y51 == null) {
								y51 = 0;
							}
							if(x51 == null) {
								x51 = 0;
							}
							var point2_x3 = x51;
							var point2_y3 = y51;
							var x52 = point2_x3 - point1_x3;
							var y52 = point2_y3 - point1_y3;
							has3 = Math.sqrt(x52 * x52 + y52 * y52) <= view6.width / 2;
							if(view6.shape == 3) {
								has3 = !has3;
							}
						}
						break;
					case 4:
						has3 = Math.abs(x - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
						break;
					case 5:
						has3 = !(Math.abs(x - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
						break;
					}
					tmp3 = has3;
				}
				if(tmp3) {
					var position6 = (y * filtered.getUInt16(0) + x) * 4;
					position6 += vision_ds_Image.OFFSET;
					filtered.b[position6] = 0;
					filtered.b[position6 + 1] = 0;
					filtered.b[position6 + 2] = 0;
					filtered.b[position6 + 3] = 0;
				}
			} else {
				var position7 = (y * filtered.getUInt16(0) + x) * 4;
				position7 += vision_ds_Image.OFFSET;
				filtered.b[position7] = 0;
				filtered.b[position7 + 1] = 0;
				filtered.b[position7 + 2] = 0;
				filtered.b[position7 + 3] = 0;
			}
			if(n[1][1] > n[1][0] && n[1][1] > n[1][2]) {
				var color2 = n[1][1];
				if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
					var this_x4 = x;
					var this_y4 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x4,this_y4)));
				} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v4 = null;
					var tmp4;
					if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v4 == null) {
						tmp4 = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
					} else {
						var has4 = false;
						var view8;
						if(v4 != null) {
							view8 = v4;
						} else {
							var _g16 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g17 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g18 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var filtered5 = filtered.b;
							var view9 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view8 = new vision_ds_ImageView(_g16,_g17,_g18,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered5[view9]);
						}
						switch(view8.shape) {
						case 0:
							has4 = x < view8.x + view8.width && y < view8.y + view8.height && x >= view8.x && y >= view8.y;
							break;
						case 1:
							has4 = !(x < view8.x + view8.width && y < view8.y + view8.height && x >= view8.x && y >= view8.y);
							break;
						case 2:case 3:
							if(view8.width > view8.height) {
								var a8 = view8.width / 2;
								var b8 = view8.height / 2;
								var c8 = Math.sqrt(a8 * a8 - b8 * b8);
								var x53 = view8.x + view8.width / 2 - c8;
								var y53 = view8.y + view8.height / 2;
								if(y53 == null) {
									y53 = 0;
								}
								if(x53 == null) {
									x53 = 0;
								}
								var f1_x8 = x53;
								var f1_y8 = y53;
								var x54 = view8.x + view8.width / 2 + c8;
								var y54 = view8.y + view8.height / 2;
								if(y54 == null) {
									y54 = 0;
								}
								if(x54 == null) {
									x54 = 0;
								}
								var f2_x8 = x54;
								var f2_y8 = y54;
								var x55 = x;
								var y55 = y;
								if(y55 == null) {
									y55 = 0;
								}
								if(x55 == null) {
									x55 = 0;
								}
								var p_x8 = x55;
								var p_y8 = y55;
								var x56 = p_x8 - f1_x8;
								var y56 = p_y8 - f1_y8;
								var x57 = p_x8 - f2_x8;
								var y57 = p_y8 - f2_y8;
								has4 = Math.sqrt(x56 * x56 + y56 * y56) + Math.sqrt(x57 * x57 + y57 * y57) <= view8.width;
								if(view8.shape == 3) {
									has4 = !has4;
								}
							} else if(view8.height > view8.width) {
								var a9 = view8.height / 2;
								var b9 = view8.width / 2;
								var c9 = Math.sqrt(a9 * a9 - b9 * b9);
								var x58 = view8.x + view8.width / 2;
								var y58 = view8.y + view8.height / 2 - c9;
								if(y58 == null) {
									y58 = 0;
								}
								if(x58 == null) {
									x58 = 0;
								}
								var f1_x9 = x58;
								var f1_y9 = y58;
								var x59 = view8.x + view8.width / 2;
								var y59 = view8.y + view8.height / 2 + c9;
								if(y59 == null) {
									y59 = 0;
								}
								if(x59 == null) {
									x59 = 0;
								}
								var f2_x9 = x59;
								var f2_y9 = y59;
								var x60 = x;
								var y60 = y;
								if(y60 == null) {
									y60 = 0;
								}
								if(x60 == null) {
									x60 = 0;
								}
								var p_x9 = x60;
								var p_y9 = y60;
								var x61 = p_x9 - f1_x9;
								var y61 = p_y9 - f1_y9;
								var x62 = p_x9 - f2_x9;
								var y62 = p_y9 - f2_y9;
								has4 = Math.sqrt(x61 * x61 + y61 * y61) + Math.sqrt(x62 * x62 + y62 * y62) <= view8.height;
								if(view8.shape == 3) {
									has4 = !has4;
								}
							} else {
								var x63 = x;
								var y63 = y;
								if(y63 == null) {
									y63 = 0;
								}
								if(x63 == null) {
									x63 = 0;
								}
								var point1_x4 = x63;
								var point1_y4 = y63;
								var x64 = view8.x + view8.width / 2;
								var y64 = view8.y + view8.height / 2;
								if(y64 == null) {
									y64 = 0;
								}
								if(x64 == null) {
									x64 = 0;
								}
								var point2_x4 = x64;
								var point2_y4 = y64;
								var x65 = point2_x4 - point1_x4;
								var y65 = point2_y4 - point1_y4;
								has4 = Math.sqrt(x65 * x65 + y65 * y65) <= view8.width / 2;
								if(view8.shape == 3) {
									has4 = !has4;
								}
							}
							break;
						case 4:
							has4 = Math.abs(x - view8.x - view8.width / 2) / (view8.width / 2) + Math.abs(y - view8.y - view8.height / 2) / (view8.height / 2) <= 1;
							break;
						case 5:
							has4 = !(Math.abs(x - view8.x - view8.width / 2) / (view8.width / 2) + Math.abs(y - view8.y - view8.height / 2) / (view8.height / 2) <= 1);
							break;
						}
						tmp4 = has4;
					}
					if(tmp4) {
						var position8 = (y * filtered.getUInt16(0) + x) * 4;
						position8 += vision_ds_Image.OFFSET;
						filtered.b[position8] = color2 >> 24 & 255;
						filtered.b[position8 + 1] = color2 >> 16 & 255;
						filtered.b[position8 + 2] = color2 >> 8 & 255;
						filtered.b[position8 + 3] = color2 & 255;
					}
				} else {
					var position9 = (y * filtered.getUInt16(0) + x) * 4;
					position9 += vision_ds_Image.OFFSET;
					filtered.b[position9] = color2 >> 24 & 255;
					filtered.b[position9 + 1] = color2 >> 16 & 255;
					filtered.b[position9 + 2] = color2 >> 8 & 255;
					filtered.b[position9 + 3] = color2 & 255;
				}
			} else if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
				var this_x5 = x;
				var this_y5 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x5,this_y5)));
			} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v5 = null;
				var tmp5;
				if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v5 == null) {
					tmp5 = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
				} else {
					var has5 = false;
					var view10;
					if(v5 != null) {
						view10 = v5;
					} else {
						var _g19 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g20 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g21 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var filtered6 = filtered.b;
						var view11 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view10 = new vision_ds_ImageView(_g19,_g20,_g21,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered6[view11]);
					}
					switch(view10.shape) {
					case 0:
						has5 = x < view10.x + view10.width && y < view10.y + view10.height && x >= view10.x && y >= view10.y;
						break;
					case 1:
						has5 = !(x < view10.x + view10.width && y < view10.y + view10.height && x >= view10.x && y >= view10.y);
						break;
					case 2:case 3:
						if(view10.width > view10.height) {
							var a10 = view10.width / 2;
							var b10 = view10.height / 2;
							var c10 = Math.sqrt(a10 * a10 - b10 * b10);
							var x66 = view10.x + view10.width / 2 - c10;
							var y66 = view10.y + view10.height / 2;
							if(y66 == null) {
								y66 = 0;
							}
							if(x66 == null) {
								x66 = 0;
							}
							var f1_x10 = x66;
							var f1_y10 = y66;
							var x67 = view10.x + view10.width / 2 + c10;
							var y67 = view10.y + view10.height / 2;
							if(y67 == null) {
								y67 = 0;
							}
							if(x67 == null) {
								x67 = 0;
							}
							var f2_x10 = x67;
							var f2_y10 = y67;
							var x68 = x;
							var y68 = y;
							if(y68 == null) {
								y68 = 0;
							}
							if(x68 == null) {
								x68 = 0;
							}
							var p_x10 = x68;
							var p_y10 = y68;
							var x69 = p_x10 - f1_x10;
							var y69 = p_y10 - f1_y10;
							var x70 = p_x10 - f2_x10;
							var y70 = p_y10 - f2_y10;
							has5 = Math.sqrt(x69 * x69 + y69 * y69) + Math.sqrt(x70 * x70 + y70 * y70) <= view10.width;
							if(view10.shape == 3) {
								has5 = !has5;
							}
						} else if(view10.height > view10.width) {
							var a11 = view10.height / 2;
							var b11 = view10.width / 2;
							var c11 = Math.sqrt(a11 * a11 - b11 * b11);
							var x71 = view10.x + view10.width / 2;
							var y71 = view10.y + view10.height / 2 - c11;
							if(y71 == null) {
								y71 = 0;
							}
							if(x71 == null) {
								x71 = 0;
							}
							var f1_x11 = x71;
							var f1_y11 = y71;
							var x72 = view10.x + view10.width / 2;
							var y72 = view10.y + view10.height / 2 + c11;
							if(y72 == null) {
								y72 = 0;
							}
							if(x72 == null) {
								x72 = 0;
							}
							var f2_x11 = x72;
							var f2_y11 = y72;
							var x73 = x;
							var y73 = y;
							if(y73 == null) {
								y73 = 0;
							}
							if(x73 == null) {
								x73 = 0;
							}
							var p_x11 = x73;
							var p_y11 = y73;
							var x74 = p_x11 - f1_x11;
							var y74 = p_y11 - f1_y11;
							var x75 = p_x11 - f2_x11;
							var y75 = p_y11 - f2_y11;
							has5 = Math.sqrt(x74 * x74 + y74 * y74) + Math.sqrt(x75 * x75 + y75 * y75) <= view10.height;
							if(view10.shape == 3) {
								has5 = !has5;
							}
						} else {
							var x76 = x;
							var y76 = y;
							if(y76 == null) {
								y76 = 0;
							}
							if(x76 == null) {
								x76 = 0;
							}
							var point1_x5 = x76;
							var point1_y5 = y76;
							var x77 = view10.x + view10.width / 2;
							var y77 = view10.y + view10.height / 2;
							if(y77 == null) {
								y77 = 0;
							}
							if(x77 == null) {
								x77 = 0;
							}
							var point2_x5 = x77;
							var point2_y5 = y77;
							var x78 = point2_x5 - point1_x5;
							var y78 = point2_y5 - point1_y5;
							has5 = Math.sqrt(x78 * x78 + y78 * y78) <= view10.width / 2;
							if(view10.shape == 3) {
								has5 = !has5;
							}
						}
						break;
					case 4:
						has5 = Math.abs(x - view10.x - view10.width / 2) / (view10.width / 2) + Math.abs(y - view10.y - view10.height / 2) / (view10.height / 2) <= 1;
						break;
					case 5:
						has5 = !(Math.abs(x - view10.x - view10.width / 2) / (view10.width / 2) + Math.abs(y - view10.y - view10.height / 2) / (view10.height / 2) <= 1);
						break;
					}
					tmp5 = has5;
				}
				if(tmp5) {
					var position10 = (y * filtered.getUInt16(0) + x) * 4;
					position10 += vision_ds_Image.OFFSET;
					filtered.b[position10] = 0;
					filtered.b[position10 + 1] = 0;
					filtered.b[position10 + 2] = 0;
					filtered.b[position10 + 3] = 0;
				}
			} else {
				var position11 = (y * filtered.getUInt16(0) + x) * 4;
				position11 += vision_ds_Image.OFFSET;
				filtered.b[position11] = 0;
				filtered.b[position11 + 1] = 0;
				filtered.b[position11 + 2] = 0;
				filtered.b[position11 + 3] = 0;
			}
			if(n[1][1] > n[0][0] && n[1][1] > n[2][2]) {
				var color3 = n[1][1];
				if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
					var this_x6 = x;
					var this_y6 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x6,this_y6)));
				} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v6 = null;
					var tmp6;
					if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v6 == null) {
						tmp6 = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
					} else {
						var has6 = false;
						var view12;
						if(v6 != null) {
							view12 = v6;
						} else {
							var _g22 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g23 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g24 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var filtered7 = filtered.b;
							var view13 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view12 = new vision_ds_ImageView(_g22,_g23,_g24,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered7[view13]);
						}
						switch(view12.shape) {
						case 0:
							has6 = x < view12.x + view12.width && y < view12.y + view12.height && x >= view12.x && y >= view12.y;
							break;
						case 1:
							has6 = !(x < view12.x + view12.width && y < view12.y + view12.height && x >= view12.x && y >= view12.y);
							break;
						case 2:case 3:
							if(view12.width > view12.height) {
								var a12 = view12.width / 2;
								var b12 = view12.height / 2;
								var c12 = Math.sqrt(a12 * a12 - b12 * b12);
								var x79 = view12.x + view12.width / 2 - c12;
								var y79 = view12.y + view12.height / 2;
								if(y79 == null) {
									y79 = 0;
								}
								if(x79 == null) {
									x79 = 0;
								}
								var f1_x12 = x79;
								var f1_y12 = y79;
								var x80 = view12.x + view12.width / 2 + c12;
								var y80 = view12.y + view12.height / 2;
								if(y80 == null) {
									y80 = 0;
								}
								if(x80 == null) {
									x80 = 0;
								}
								var f2_x12 = x80;
								var f2_y12 = y80;
								var x81 = x;
								var y81 = y;
								if(y81 == null) {
									y81 = 0;
								}
								if(x81 == null) {
									x81 = 0;
								}
								var p_x12 = x81;
								var p_y12 = y81;
								var x82 = p_x12 - f1_x12;
								var y82 = p_y12 - f1_y12;
								var x83 = p_x12 - f2_x12;
								var y83 = p_y12 - f2_y12;
								has6 = Math.sqrt(x82 * x82 + y82 * y82) + Math.sqrt(x83 * x83 + y83 * y83) <= view12.width;
								if(view12.shape == 3) {
									has6 = !has6;
								}
							} else if(view12.height > view12.width) {
								var a13 = view12.height / 2;
								var b13 = view12.width / 2;
								var c13 = Math.sqrt(a13 * a13 - b13 * b13);
								var x84 = view12.x + view12.width / 2;
								var y84 = view12.y + view12.height / 2 - c13;
								if(y84 == null) {
									y84 = 0;
								}
								if(x84 == null) {
									x84 = 0;
								}
								var f1_x13 = x84;
								var f1_y13 = y84;
								var x85 = view12.x + view12.width / 2;
								var y85 = view12.y + view12.height / 2 + c13;
								if(y85 == null) {
									y85 = 0;
								}
								if(x85 == null) {
									x85 = 0;
								}
								var f2_x13 = x85;
								var f2_y13 = y85;
								var x86 = x;
								var y86 = y;
								if(y86 == null) {
									y86 = 0;
								}
								if(x86 == null) {
									x86 = 0;
								}
								var p_x13 = x86;
								var p_y13 = y86;
								var x87 = p_x13 - f1_x13;
								var y87 = p_y13 - f1_y13;
								var x88 = p_x13 - f2_x13;
								var y88 = p_y13 - f2_y13;
								has6 = Math.sqrt(x87 * x87 + y87 * y87) + Math.sqrt(x88 * x88 + y88 * y88) <= view12.height;
								if(view12.shape == 3) {
									has6 = !has6;
								}
							} else {
								var x89 = x;
								var y89 = y;
								if(y89 == null) {
									y89 = 0;
								}
								if(x89 == null) {
									x89 = 0;
								}
								var point1_x6 = x89;
								var point1_y6 = y89;
								var x90 = view12.x + view12.width / 2;
								var y90 = view12.y + view12.height / 2;
								if(y90 == null) {
									y90 = 0;
								}
								if(x90 == null) {
									x90 = 0;
								}
								var point2_x6 = x90;
								var point2_y6 = y90;
								var x91 = point2_x6 - point1_x6;
								var y91 = point2_y6 - point1_y6;
								has6 = Math.sqrt(x91 * x91 + y91 * y91) <= view12.width / 2;
								if(view12.shape == 3) {
									has6 = !has6;
								}
							}
							break;
						case 4:
							has6 = Math.abs(x - view12.x - view12.width / 2) / (view12.width / 2) + Math.abs(y - view12.y - view12.height / 2) / (view12.height / 2) <= 1;
							break;
						case 5:
							has6 = !(Math.abs(x - view12.x - view12.width / 2) / (view12.width / 2) + Math.abs(y - view12.y - view12.height / 2) / (view12.height / 2) <= 1);
							break;
						}
						tmp6 = has6;
					}
					if(tmp6) {
						var position12 = (y * filtered.getUInt16(0) + x) * 4;
						position12 += vision_ds_Image.OFFSET;
						filtered.b[position12] = color3 >> 24 & 255;
						filtered.b[position12 + 1] = color3 >> 16 & 255;
						filtered.b[position12 + 2] = color3 >> 8 & 255;
						filtered.b[position12 + 3] = color3 & 255;
					}
				} else {
					var position13 = (y * filtered.getUInt16(0) + x) * 4;
					position13 += vision_ds_Image.OFFSET;
					filtered.b[position13] = color3 >> 24 & 255;
					filtered.b[position13 + 1] = color3 >> 16 & 255;
					filtered.b[position13 + 2] = color3 >> 8 & 255;
					filtered.b[position13 + 3] = color3 & 255;
				}
			} else if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
				var this_x7 = x;
				var this_y7 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x7,this_y7)));
			} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v7 = null;
				var tmp7;
				if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v7 == null) {
					tmp7 = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
				} else {
					var has7 = false;
					var view14;
					if(v7 != null) {
						view14 = v7;
					} else {
						var _g25 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g26 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g27 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var filtered8 = filtered.b;
						var view15 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view14 = new vision_ds_ImageView(_g25,_g26,_g27,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered8[view15]);
					}
					switch(view14.shape) {
					case 0:
						has7 = x < view14.x + view14.width && y < view14.y + view14.height && x >= view14.x && y >= view14.y;
						break;
					case 1:
						has7 = !(x < view14.x + view14.width && y < view14.y + view14.height && x >= view14.x && y >= view14.y);
						break;
					case 2:case 3:
						if(view14.width > view14.height) {
							var a14 = view14.width / 2;
							var b14 = view14.height / 2;
							var c14 = Math.sqrt(a14 * a14 - b14 * b14);
							var x92 = view14.x + view14.width / 2 - c14;
							var y92 = view14.y + view14.height / 2;
							if(y92 == null) {
								y92 = 0;
							}
							if(x92 == null) {
								x92 = 0;
							}
							var f1_x14 = x92;
							var f1_y14 = y92;
							var x93 = view14.x + view14.width / 2 + c14;
							var y93 = view14.y + view14.height / 2;
							if(y93 == null) {
								y93 = 0;
							}
							if(x93 == null) {
								x93 = 0;
							}
							var f2_x14 = x93;
							var f2_y14 = y93;
							var x94 = x;
							var y94 = y;
							if(y94 == null) {
								y94 = 0;
							}
							if(x94 == null) {
								x94 = 0;
							}
							var p_x14 = x94;
							var p_y14 = y94;
							var x95 = p_x14 - f1_x14;
							var y95 = p_y14 - f1_y14;
							var x96 = p_x14 - f2_x14;
							var y96 = p_y14 - f2_y14;
							has7 = Math.sqrt(x95 * x95 + y95 * y95) + Math.sqrt(x96 * x96 + y96 * y96) <= view14.width;
							if(view14.shape == 3) {
								has7 = !has7;
							}
						} else if(view14.height > view14.width) {
							var a15 = view14.height / 2;
							var b15 = view14.width / 2;
							var c15 = Math.sqrt(a15 * a15 - b15 * b15);
							var x97 = view14.x + view14.width / 2;
							var y97 = view14.y + view14.height / 2 - c15;
							if(y97 == null) {
								y97 = 0;
							}
							if(x97 == null) {
								x97 = 0;
							}
							var f1_x15 = x97;
							var f1_y15 = y97;
							var x98 = view14.x + view14.width / 2;
							var y98 = view14.y + view14.height / 2 + c15;
							if(y98 == null) {
								y98 = 0;
							}
							if(x98 == null) {
								x98 = 0;
							}
							var f2_x15 = x98;
							var f2_y15 = y98;
							var x99 = x;
							var y99 = y;
							if(y99 == null) {
								y99 = 0;
							}
							if(x99 == null) {
								x99 = 0;
							}
							var p_x15 = x99;
							var p_y15 = y99;
							var x100 = p_x15 - f1_x15;
							var y100 = p_y15 - f1_y15;
							var x101 = p_x15 - f2_x15;
							var y101 = p_y15 - f2_y15;
							has7 = Math.sqrt(x100 * x100 + y100 * y100) + Math.sqrt(x101 * x101 + y101 * y101) <= view14.height;
							if(view14.shape == 3) {
								has7 = !has7;
							}
						} else {
							var x102 = x;
							var y102 = y;
							if(y102 == null) {
								y102 = 0;
							}
							if(x102 == null) {
								x102 = 0;
							}
							var point1_x7 = x102;
							var point1_y7 = y102;
							var x103 = view14.x + view14.width / 2;
							var y103 = view14.y + view14.height / 2;
							if(y103 == null) {
								y103 = 0;
							}
							if(x103 == null) {
								x103 = 0;
							}
							var point2_x7 = x103;
							var point2_y7 = y103;
							var x104 = point2_x7 - point1_x7;
							var y104 = point2_y7 - point1_y7;
							has7 = Math.sqrt(x104 * x104 + y104 * y104) <= view14.width / 2;
							if(view14.shape == 3) {
								has7 = !has7;
							}
						}
						break;
					case 4:
						has7 = Math.abs(x - view14.x - view14.width / 2) / (view14.width / 2) + Math.abs(y - view14.y - view14.height / 2) / (view14.height / 2) <= 1;
						break;
					case 5:
						has7 = !(Math.abs(x - view14.x - view14.width / 2) / (view14.width / 2) + Math.abs(y - view14.y - view14.height / 2) / (view14.height / 2) <= 1);
						break;
					}
					tmp7 = has7;
				}
				if(tmp7) {
					var position14 = (y * filtered.getUInt16(0) + x) * 4;
					position14 += vision_ds_Image.OFFSET;
					filtered.b[position14] = 0;
					filtered.b[position14 + 1] = 0;
					filtered.b[position14 + 2] = 0;
					filtered.b[position14 + 3] = 0;
				}
			} else {
				var position15 = (y * filtered.getUInt16(0) + x) * 4;
				position15 += vision_ds_Image.OFFSET;
				filtered.b[position15] = 0;
				filtered.b[position15 + 1] = 0;
				filtered.b[position15 + 2] = 0;
				filtered.b[position15 + 3] = 0;
			}
		}
	}
	return filtered;
};
vision_algorithms_Canny.applyHysteresis = function(image,highThreshold,lowThreshold) {
	var copy = vision_ds_Image.clone(image);
	var traverseEdge = null;
	traverseEdge = function(x,y) {
		if(x == 0 || y == 0 || x == image.getUInt16(0) - 1 || y == Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1) {
			return;
		}
		if(!(x >= 0 && y >= 0 && x < copy.getUInt16(0) && y < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(copy,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * copy.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = copy.b[position] << 24 | copy.b[position + 1] << 16 | copy.b[position + 2] << 8 | copy.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this1 = value;
		if((this1 >> 16 & 255) / 255 > highThreshold) {
			var neighbors = vision_algorithms_Canny.getNeighbors(3,x,y,copy);
			var edge = neighbors[0][0];
			if((edge >> 16 & 255) / 255 <= highThreshold && (edge >> 16 & 255) / 255 >= lowThreshold) {
				var x1 = x - 1;
				var y1 = y - 1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(copy,new vision_ds_Point2D(this_x,this_y)));
				} else if(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var traverseEdge1;
					if(!(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						traverseEdge1 = x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = copy.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var copy1 = copy.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),copy1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						traverseEdge1 = has;
					}
					if(traverseEdge1) {
						var position = (y1 * copy.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						copy.b[position] = 0;
						copy.b[position + 1] = 255;
						copy.b[position + 2] = 255;
						copy.b[position + 3] = 255;
					}
				} else {
					var position = (y1 * copy.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					copy.b[position] = 0;
					copy.b[position + 1] = 255;
					copy.b[position + 2] = 255;
					copy.b[position + 3] = 255;
				}
				traverseEdge(x - 1,y - 1);
			}
			var edge = neighbors[0][1];
			if((edge >> 16 & 255) / 255 <= highThreshold && (edge >> 16 & 255) / 255 >= lowThreshold) {
				var x1 = x - 1;
				var y1 = y - 1 + 1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(copy,new vision_ds_Point2D(this_x,this_y)));
				} else if(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var traverseEdge1;
					if(!(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						traverseEdge1 = x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = copy.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var copy1 = copy.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),copy1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						traverseEdge1 = has;
					}
					if(traverseEdge1) {
						var position = (y1 * copy.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						copy.b[position] = 0;
						copy.b[position + 1] = 255;
						copy.b[position + 2] = 255;
						copy.b[position + 3] = 255;
					}
				} else {
					var position = (y1 * copy.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					copy.b[position] = 0;
					copy.b[position + 1] = 255;
					copy.b[position + 2] = 255;
					copy.b[position + 3] = 255;
				}
				traverseEdge(x - 1,y - 1 + 1);
			}
			var edge = neighbors[1][0];
			if((edge >> 16 & 255) / 255 <= highThreshold && (edge >> 16 & 255) / 255 >= lowThreshold) {
				var x1 = x - 1 + 1;
				var y1 = y - 1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(copy,new vision_ds_Point2D(this_x,this_y)));
				} else if(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var traverseEdge1;
					if(!(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						traverseEdge1 = x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = copy.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var copy1 = copy.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),copy1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						traverseEdge1 = has;
					}
					if(traverseEdge1) {
						var position = (y1 * copy.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						copy.b[position] = 0;
						copy.b[position + 1] = 255;
						copy.b[position + 2] = 255;
						copy.b[position + 3] = 255;
					}
				} else {
					var position = (y1 * copy.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					copy.b[position] = 0;
					copy.b[position + 1] = 255;
					copy.b[position + 2] = 255;
					copy.b[position + 3] = 255;
				}
				traverseEdge(x - 1 + 1,y - 1);
			}
			var edge = neighbors[1][1];
			if((edge >> 16 & 255) / 255 <= highThreshold && (edge >> 16 & 255) / 255 >= lowThreshold) {
				var x1 = x - 1 + 1;
				var y1 = y - 1 + 1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(copy,new vision_ds_Point2D(this_x,this_y)));
				} else if(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var traverseEdge1;
					if(!(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						traverseEdge1 = x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = copy.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var copy1 = copy.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),copy1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						traverseEdge1 = has;
					}
					if(traverseEdge1) {
						var position = (y1 * copy.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						copy.b[position] = 0;
						copy.b[position + 1] = 255;
						copy.b[position + 2] = 255;
						copy.b[position + 3] = 255;
					}
				} else {
					var position = (y1 * copy.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					copy.b[position] = 0;
					copy.b[position + 1] = 255;
					copy.b[position + 2] = 255;
					copy.b[position + 3] = 255;
				}
				traverseEdge(x - 1 + 1,y - 1 + 1);
			}
		}
	};
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			traverseEdge(x,y);
		}
	}
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			if(!(x >= 0 && y >= 0 && x < copy.getUInt16(0) && y < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(copy,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y * copy.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = copy.b[position] << 24 | copy.b[position + 1] << 16 | copy.b[position + 2] << 8 | copy.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			if(!((this1 >> 16 & 255) / 255 > highThreshold)) {
				if(!(x >= 0 && y >= 0 && x < copy.getUInt16(0) && y < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(copy,new vision_ds_Point2D(this_x1,this_y1)));
				} else if(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < copy.getUInt16(0) && y < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g4 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g5 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g6 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var copy1 = copy.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g4,_g5,_g6,copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),copy1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x1 = view.x + view.width / 2 - c;
								var y1 = view.y + view.height / 2;
								if(y1 == null) {
									y1 = 0;
								}
								if(x1 == null) {
									x1 = 0;
								}
								var f1_x = x1;
								var f1_y = y1;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x3 = x;
								var y3 = y;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var p_x = x3;
								var p_y = y3;
								var x4 = p_x - f1_x;
								var y4 = p_y - f1_y;
								var x5 = p_x - f2_x;
								var y5 = p_y - f2_y;
								has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x6 = view.x + view.width / 2;
								var y6 = view.y + view.height / 2 - c1;
								if(y6 == null) {
									y6 = 0;
								}
								if(x6 == null) {
									x6 = 0;
								}
								var f1_x1 = x6;
								var f1_y1 = y6;
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 + c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f2_x1 = x7;
								var f2_y1 = y7;
								var x8 = x;
								var y8 = y;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var p_x1 = x8;
								var p_y1 = y8;
								var x9 = p_x1 - f1_x1;
								var y9 = p_y1 - f1_y1;
								var x10 = p_x1 - f2_x1;
								var y10 = p_y1 - f2_y1;
								has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x11 = x;
								var y11 = y;
								if(y11 == null) {
									y11 = 0;
								}
								if(x11 == null) {
									x11 = 0;
								}
								var point1_x = x11;
								var point1_y = y11;
								var x12 = view.x + view.width / 2;
								var y12 = view.y + view.height / 2;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var point2_x = x12;
								var point2_y = y12;
								var x13 = point2_x - point1_x;
								var y13 = point2_y - point1_y;
								has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position1 = (y * copy.getUInt16(0) + x) * 4;
						position1 += vision_ds_Image.OFFSET;
						copy.b[position1] = 0;
						copy.b[position1 + 1] = 0;
						copy.b[position1 + 2] = 0;
						copy.b[position1 + 3] = 0;
					}
				} else {
					var position2 = (y * copy.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					copy.b[position2] = 0;
					copy.b[position2 + 1] = 0;
					copy.b[position2 + 2] = 0;
					copy.b[position2 + 3] = 0;
				}
			}
		}
	}
	return copy;
};
vision_algorithms_Canny.getNeighbors = function(kernalSize,x,y,image) {
	var neighbors = [];
	var _g = 0;
	var _g1 = kernalSize + 1;
	while(_g < _g1) {
		var i = _g++;
		neighbors[i] = [];
	}
	var roundedDown = (kernalSize - 1) / 2 | 0;
	var _g = -roundedDown;
	var _g1 = roundedDown + 1;
	while(_g < _g1) {
		var X = _g++;
		var _g2 = -roundedDown;
		var _g3 = roundedDown + 1;
		while(_g2 < _g3) {
			var Y = _g2++;
			var tmp = X + roundedDown;
			var x1 = x + X;
			var y1 = y + Y;
			var tmp1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this1 = [x1,image.getUInt16(0) - 1];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i = _g4++;
					if(values[i] > max) {
						max = values[i];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i1 = _g6++;
					if(values1[i1] < min) {
						min = values1[i1];
					}
				}
				var x2 = min;
				var this3 = [y1,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i2 = _g8++;
					if(values2[i2] > max1) {
						max1 = values2[i2];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i3 = _g10++;
					if(values3[i3] < min1) {
						min1 = values3[i3];
					}
				}
				var y2 = min1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y2 * image.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				tmp1 = this5;
			} else {
				if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x1;
					var this_y1 = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y1 * image.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				tmp1 = this6;
			}
			neighbors[tmp].push(tmp1);
		}
	}
	return neighbors;
};
var vision_algorithms_Gaussian = function() { };
$hxClasses["vision.algorithms.Gaussian"] = vision_algorithms_Gaussian;
vision_algorithms_Gaussian.__name__ = "vision.algorithms.Gaussian";
vision_algorithms_Gaussian.create1x1Kernal = function(sigma) {
	return [[1]];
};
vision_algorithms_Gaussian.create3x3Kernal = function(sigma) {
	var r;
	var s = 2.0 * sigma * sigma;
	var kernal = [[],[],[],[]];
	var sum = 0.0;
	r = Math.sqrt(2);
	kernal[0][0] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[0][0];
	r = Math.sqrt(1);
	kernal[0][1] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[0][1];
	r = Math.sqrt(2);
	kernal[0][2] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[0][2];
	r = Math.sqrt(1);
	kernal[1][0] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[1][0];
	r = Math.sqrt(0);
	kernal[1][1] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[1][1];
	r = Math.sqrt(1);
	kernal[1][2] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[1][2];
	r = Math.sqrt(2);
	kernal[2][0] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[2][0];
	r = Math.sqrt(1);
	kernal[2][1] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[2][1];
	r = Math.sqrt(2);
	kernal[2][2] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[2][2];
	kernal[0][0] /= sum;
	kernal[0][1] /= sum;
	kernal[0][2] /= sum;
	kernal[1][0] /= sum;
	kernal[1][1] /= sum;
	kernal[1][2] /= sum;
	kernal[2][0] /= sum;
	kernal[2][1] /= sum;
	kernal[2][2] /= sum;
	return kernal;
};
vision_algorithms_Gaussian.create5x5Kernal = function(sigma) {
	var r;
	var s = 2.0 * sigma * sigma;
	var kernal = [[],[],[],[],[],[]];
	var sum = 0.0;
	var _g = -2;
	while(_g < 3) {
		var x = _g++;
		var _g1 = -2;
		while(_g1 < 3) {
			var y = _g1++;
			r = Math.sqrt(x * x + y * y);
			kernal[x + 2][y + 2] = Math.exp(-(r * r) / s) / (Math.PI * s);
			sum += kernal[x + 2][y + 2];
		}
	}
	kernal[0][0] /= sum;
	kernal[0][1] /= sum;
	kernal[0][2] /= sum;
	kernal[0][3] /= sum;
	kernal[0][4] /= sum;
	kernal[1][0] /= sum;
	kernal[1][1] /= sum;
	kernal[1][2] /= sum;
	kernal[1][3] /= sum;
	kernal[1][4] /= sum;
	kernal[2][0] /= sum;
	kernal[2][1] /= sum;
	kernal[2][2] /= sum;
	kernal[2][3] /= sum;
	kernal[2][4] /= sum;
	kernal[3][0] /= sum;
	kernal[3][1] /= sum;
	kernal[3][2] /= sum;
	kernal[3][3] /= sum;
	kernal[3][4] /= sum;
	kernal[4][0] /= sum;
	kernal[4][1] /= sum;
	kernal[4][2] /= sum;
	kernal[4][3] /= sum;
	kernal[4][4] /= sum;
	return kernal;
};
vision_algorithms_Gaussian.create7x7Kernal = function(sigma) {
	var r;
	var s = 2.0 * sigma * sigma;
	var kernal = [[],[],[],[],[],[],[],[]];
	var sum = 0.0;
	var _g = -3;
	while(_g < 4) {
		var x = _g++;
		var _g1 = -3;
		while(_g1 < 4) {
			var y = _g1++;
			r = Math.sqrt(x * x + y * y);
			kernal[x + 3][y + 3] = Math.exp(-(r * r) / s) / (Math.PI * s);
			sum += kernal[x + 3][y + 3];
		}
	}
	kernal[0][0] /= sum;
	kernal[0][1] /= sum;
	kernal[0][2] /= sum;
	kernal[0][3] /= sum;
	kernal[0][4] /= sum;
	kernal[0][5] /= sum;
	kernal[0][6] /= sum;
	kernal[1][0] /= sum;
	kernal[1][1] /= sum;
	kernal[1][2] /= sum;
	kernal[1][3] /= sum;
	kernal[1][4] /= sum;
	kernal[1][5] /= sum;
	kernal[1][6] /= sum;
	kernal[2][0] /= sum;
	kernal[2][1] /= sum;
	kernal[2][2] /= sum;
	kernal[2][3] /= sum;
	kernal[2][4] /= sum;
	kernal[2][5] /= sum;
	kernal[2][6] /= sum;
	kernal[3][0] /= sum;
	kernal[3][1] /= sum;
	kernal[3][2] /= sum;
	kernal[3][3] /= sum;
	kernal[3][4] /= sum;
	kernal[3][5] /= sum;
	kernal[3][6] /= sum;
	kernal[4][0] /= sum;
	kernal[4][1] /= sum;
	kernal[4][2] /= sum;
	kernal[4][3] /= sum;
	kernal[4][4] /= sum;
	kernal[4][5] /= sum;
	kernal[4][6] /= sum;
	kernal[5][0] /= sum;
	kernal[5][1] /= sum;
	kernal[5][2] /= sum;
	kernal[5][3] /= sum;
	kernal[5][4] /= sum;
	kernal[5][5] /= sum;
	kernal[5][6] /= sum;
	kernal[6][0] /= sum;
	kernal[6][1] /= sum;
	kernal[6][2] /= sum;
	kernal[6][3] /= sum;
	kernal[6][4] /= sum;
	kernal[6][5] /= sum;
	kernal[6][6] /= sum;
	return kernal;
};
vision_algorithms_Gaussian.create9x9Kernal = function(sigma) {
	var r;
	var s = 2.0 * sigma * sigma;
	var kernal = [[],[],[],[],[],[],[],[],[],[]];
	var sum = 0.0;
	var _g = -4;
	while(_g < 5) {
		var x = _g++;
		var _g1 = -4;
		while(_g1 < 5) {
			var y = _g1++;
			r = Math.sqrt(x * x + y * y);
			kernal[x + 4][y + 4] = Math.exp(-(r * r) / s) / (Math.PI * s);
			sum += kernal[x + 4][y + 4];
		}
	}
	kernal[0][0] /= sum;
	kernal[0][1] /= sum;
	kernal[0][2] /= sum;
	kernal[0][3] /= sum;
	kernal[0][4] /= sum;
	kernal[0][5] /= sum;
	kernal[0][6] /= sum;
	kernal[0][7] /= sum;
	kernal[0][8] /= sum;
	kernal[1][0] /= sum;
	kernal[1][1] /= sum;
	kernal[1][2] /= sum;
	kernal[1][3] /= sum;
	kernal[1][4] /= sum;
	kernal[1][5] /= sum;
	kernal[1][6] /= sum;
	kernal[1][7] /= sum;
	kernal[1][8] /= sum;
	kernal[2][0] /= sum;
	kernal[2][1] /= sum;
	kernal[2][2] /= sum;
	kernal[2][3] /= sum;
	kernal[2][4] /= sum;
	kernal[2][5] /= sum;
	kernal[2][6] /= sum;
	kernal[2][7] /= sum;
	kernal[2][8] /= sum;
	kernal[3][0] /= sum;
	kernal[3][1] /= sum;
	kernal[3][2] /= sum;
	kernal[3][3] /= sum;
	kernal[3][4] /= sum;
	kernal[3][5] /= sum;
	kernal[3][6] /= sum;
	kernal[3][7] /= sum;
	kernal[3][8] /= sum;
	kernal[4][0] /= sum;
	kernal[4][1] /= sum;
	kernal[4][2] /= sum;
	kernal[4][3] /= sum;
	kernal[4][4] /= sum;
	kernal[4][5] /= sum;
	kernal[4][6] /= sum;
	kernal[4][7] /= sum;
	kernal[4][8] /= sum;
	kernal[5][0] /= sum;
	kernal[5][1] /= sum;
	kernal[5][2] /= sum;
	kernal[5][3] /= sum;
	kernal[5][4] /= sum;
	kernal[5][5] /= sum;
	kernal[5][6] /= sum;
	kernal[5][7] /= sum;
	kernal[5][8] /= sum;
	kernal[6][0] /= sum;
	kernal[6][1] /= sum;
	kernal[6][2] /= sum;
	kernal[6][3] /= sum;
	kernal[6][4] /= sum;
	kernal[6][5] /= sum;
	kernal[6][6] /= sum;
	kernal[6][7] /= sum;
	kernal[6][8] /= sum;
	kernal[7][0] /= sum;
	kernal[7][1] /= sum;
	kernal[7][2] /= sum;
	kernal[7][3] /= sum;
	kernal[7][4] /= sum;
	kernal[7][5] /= sum;
	kernal[7][6] /= sum;
	kernal[7][7] /= sum;
	kernal[7][8] /= sum;
	kernal[8][0] /= sum;
	kernal[8][1] /= sum;
	kernal[8][2] /= sum;
	kernal[8][3] /= sum;
	kernal[8][4] /= sum;
	kernal[8][5] /= sum;
	kernal[8][6] /= sum;
	kernal[8][7] /= sum;
	kernal[8][8] /= sum;
	return kernal;
};
vision_algorithms_Gaussian.createKernalOfSize = function(size,sigma) {
	return vision_algorithms_Gaussian.create2DKernelOfSize(size,sigma);
};
vision_algorithms_Gaussian.create2DKernelOfSize = function(size,sigma) {
	if(size % 2 == 0 || size <= 0) {
		throw haxe_Exception.thrown(new vision_exceptions_InvalidGaussianKernalSize(size));
	}
	var r;
	var s = 2.0 * sigma * sigma;
	var sum = 0.;
	var kernal = new vision_ds_Array2D(size,size);
	var avg = (size - 1) / 2 | 0;
	var _g = -avg;
	var _g1 = avg + 1;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = -avg;
		var _g3 = avg + 1;
		while(_g2 < _g3) {
			var y = _g2++;
			r = Math.sqrt(x * x + y * y);
			kernal.inner[x + avg + (y + avg) * kernal.height] = Math.exp(-(r * r) / s) / (Math.PI * s);
			sum += kernal.inner[(y + avg) * kernal.height + (x + avg)];
		}
	}
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = size;
		while(_g2 < _g3) {
			var j = _g2++;
			kernal.inner[i + j * kernal.height] = kernal.inner[j * kernal.height + i] / sum;
		}
	}
	return kernal;
};
vision_algorithms_Gaussian.create1DKernelOfSize = function(size,sigma) {
	if(size % 2 == 0 || size <= 0) {
		throw haxe_Exception.thrown(new vision_exceptions_InvalidGaussianKernalSize(size));
	}
	var r = size / 2;
	var sum = 0.;
	var kernel = [];
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		var i = _g++;
		kernel[i] = Math.exp((i - r) * (i - r) / (-2 * sigma * sigma)) / (Math.sqrt(2 * Math.PI) * sigma);
		sum += kernel[i];
	}
	var _g = 0;
	var _g1 = kernel.length;
	while(_g < _g1) {
		var i = _g++;
		kernel[i] /= sum;
	}
	return kernel;
};
vision_algorithms_Gaussian.fastBlur = function(image,size,sigma) {
	var preprocessed = vision_ds_Image.clone(image);
	if(size % 2 == 0 || size <= 0) {
		throw haxe_Exception.thrown(new vision_exceptions_InvalidGaussianKernalSize(size));
	}
	var radius = (size - 1) / 2 | 0;
	var kernel = vision_algorithms_Gaussian.create1DKernelOfSize(size,sigma);
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				var red = 0.;
				var green = 0.;
				var blue = 0.;
				var _g4 = -radius;
				var _g5 = radius + 1;
				while(_g4 < _g5) {
					var i = _g4++;
					var y1 = y + i;
					var pixel;
					if(!(x >= 0 && y1 >= 0 && x < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this2 = [x,image.getUInt16(0) - 1];
						var values = this2;
						var max = values[0];
						var _g6 = 0;
						var _g7 = values.length;
						while(_g6 < _g7) {
							var i1 = _g6++;
							if(values[i1] > max) {
								max = values[i1];
							}
						}
						var this3 = [max,0];
						var values1 = this3;
						var min = values1[0];
						var _g8 = 0;
						var _g9 = values1.length;
						while(_g8 < _g9) {
							var i2 = _g8++;
							if(values1[i2] < min) {
								min = values1[i2];
							}
						}
						var x1 = min;
						var this4 = [y1,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
						var values2 = this4;
						var max1 = values2[0];
						var _g10 = 0;
						var _g11 = values2.length;
						while(_g10 < _g11) {
							var i3 = _g10++;
							if(values2[i3] > max1) {
								max1 = values2[i3];
							}
						}
						var this5 = [max1,0];
						var values3 = this5;
						var min1 = values3[0];
						var _g12 = 0;
						var _g13 = values3.length;
						while(_g12 < _g13) {
							var i4 = _g12++;
							if(values3[i4] < min1) {
								min1 = values3[i4];
							}
						}
						var y2 = min1;
						if(!(x1 >= 0 && y2 >= 0 && x1 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
							var this_x = x1;
							var this_y = y2;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
						}
						var position1 = (y2 * image.getUInt16(0) + x1) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this6 = value1;
						pixel = this6;
					} else {
						if(!(x >= 0 && y1 >= 0 && x < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
							var this_x1 = x;
							var this_y1 = y1;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
						}
						var position2 = (y1 * image.getUInt16(0) + x) * 4;
						position2 += vision_ds_Image.OFFSET;
						var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
						if(value2 == null) {
							value2 = 0;
						}
						var this7 = value2;
						pixel = this7;
					}
					red += (pixel >> 16 & 255) * kernel[i + radius];
					green += (pixel >> 8 & 255) * kernel[i + radius];
					blue += (pixel & 255) * kernel[i + radius];
				}
				var Red = red | 0;
				var Green = green | 0;
				var Blue = blue | 0;
				var this8 = 0;
				var color1 = this8;
				var Alpha = 255;
				if(Alpha == null) {
					Alpha = 255;
				}
				color1 &= -16711681;
				color1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
				color1 &= -65281;
				color1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
				color1 &= -256;
				color1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
				color1 &= 16777215;
				color1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
				var color2 = color1;
				var position3 = (y * preprocessed.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				preprocessed.b[position3] = color2 >> 24 & 255;
				preprocessed.b[position3 + 1] = color2 >> 16 & 255;
				preprocessed.b[position3 + 2] = color2 >> 8 & 255;
				preprocessed.b[position3 + 3] = color2 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					var red = 0.;
					var green = 0.;
					var blue = 0.;
					var _g7 = -radius;
					var _g8 = radius + 1;
					while(_g7 < _g8) {
						var i = _g7++;
						var y14 = y + i;
						var pixel;
						if(!(x >= 0 && y14 >= 0 && x < image.getUInt16(0) && y14 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
							var this2 = [x,image.getUInt16(0) - 1];
							var values = this2;
							var max = values[0];
							var _g9 = 0;
							var _g10 = values.length;
							while(_g9 < _g10) {
								var i1 = _g9++;
								if(values[i1] > max) {
									max = values[i1];
								}
							}
							var this3 = [max,0];
							var values1 = this3;
							var min = values1[0];
							var _g11 = 0;
							var _g12 = values1.length;
							while(_g11 < _g12) {
								var i2 = _g11++;
								if(values1[i2] < min) {
									min = values1[i2];
								}
							}
							var x14 = min;
							var this4 = [y14,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
							var values2 = this4;
							var max1 = values2[0];
							var _g13 = 0;
							var _g14 = values2.length;
							while(_g13 < _g14) {
								var i3 = _g13++;
								if(values2[i3] > max1) {
									max1 = values2[i3];
								}
							}
							var this5 = [max1,0];
							var values3 = this5;
							var min1 = values3[0];
							var _g15 = 0;
							var _g16 = values3.length;
							while(_g15 < _g16) {
								var i4 = _g15++;
								if(values3[i4] < min1) {
									min1 = values3[i4];
								}
							}
							var y15 = min1;
							if(!(x14 >= 0 && y15 >= 0 && x14 < image.getUInt16(0) && y15 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
								var this_x = x14;
								var this_y = y15;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
							}
							var position1 = (y15 * image.getUInt16(0) + x14) * 4;
							position1 += vision_ds_Image.OFFSET;
							var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
							if(value1 == null) {
								value1 = 0;
							}
							var this6 = value1;
							pixel = this6;
						} else {
							if(!(x >= 0 && y14 >= 0 && x < image.getUInt16(0) && y14 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
								var this_x1 = x;
								var this_y1 = y14;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
							}
							var position2 = (y14 * image.getUInt16(0) + x) * 4;
							position2 += vision_ds_Image.OFFSET;
							var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
							if(value2 == null) {
								value2 = 0;
							}
							var this7 = value2;
							pixel = this7;
						}
						red += (pixel >> 16 & 255) * kernel[i + radius];
						green += (pixel >> 8 & 255) * kernel[i + radius];
						blue += (pixel & 255) * kernel[i + radius];
					}
					var Red = red | 0;
					var Green = green | 0;
					var Blue = blue | 0;
					var this8 = 0;
					var color1 = this8;
					var Alpha = 255;
					if(Alpha == null) {
						Alpha = 255;
					}
					color1 &= -16711681;
					color1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
					color1 &= -65281;
					color1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
					color1 &= -256;
					color1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
					color1 &= 16777215;
					color1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
					var color2 = color1;
					var position3 = (y * preprocessed.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					preprocessed.b[position3] = color2 >> 24 & 255;
					preprocessed.b[position3 + 1] = color2 >> 16 & 255;
					preprocessed.b[position3 + 2] = color2 >> 8 & 255;
					preprocessed.b[position3 + 3] = color2 & 255;
				}
			}
		}
	}
	var processed = vision_ds_Image.clone(image);
	var kernel = vision_algorithms_Gaussian.create1DKernelOfSize(size,sigma);
	if(!(preprocessed.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || preprocessed.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || preprocessed.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != preprocessed.getUInt16(0) || preprocessed.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((preprocessed.length - vision_ds_Image.OFFSET) / (preprocessed.getUInt16(0) * 4)) || preprocessed.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = preprocessed.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((preprocessed.length - vision_ds_Image.OFFSET) / (preprocessed.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * preprocessed.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = preprocessed.b[position] << 24 | preprocessed.b[position + 1] << 16 | preprocessed.b[position + 2] << 8 | preprocessed.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				var red = 0.;
				var green = 0.;
				var blue = 0.;
				var _g4 = -radius;
				var _g5 = radius + 1;
				while(_g4 < _g5) {
					var i = _g4++;
					var x1 = x + i;
					var pixel;
					if(!(x1 >= 0 && y >= 0 && x1 < preprocessed.getUInt16(0) && y < Math.ceil((preprocessed.length - vision_ds_Image.OFFSET) / (preprocessed.getUInt16(0) * 4)))) {
						var this2 = [x1,preprocessed.getUInt16(0) - 1];
						var values = this2;
						var max = values[0];
						var _g6 = 0;
						var _g7 = values.length;
						while(_g6 < _g7) {
							var i1 = _g6++;
							if(values[i1] > max) {
								max = values[i1];
							}
						}
						var this3 = [max,0];
						var values1 = this3;
						var min = values1[0];
						var _g8 = 0;
						var _g9 = values1.length;
						while(_g8 < _g9) {
							var i2 = _g8++;
							if(values1[i2] < min) {
								min = values1[i2];
							}
						}
						var x2 = min;
						var this4 = [y,Math.ceil((preprocessed.length - vision_ds_Image.OFFSET) / (preprocessed.getUInt16(0) * 4)) - 1];
						var values2 = this4;
						var max1 = values2[0];
						var _g10 = 0;
						var _g11 = values2.length;
						while(_g10 < _g11) {
							var i3 = _g10++;
							if(values2[i3] > max1) {
								max1 = values2[i3];
							}
						}
						var this5 = [max1,0];
						var values3 = this5;
						var min1 = values3[0];
						var _g12 = 0;
						var _g13 = values3.length;
						while(_g12 < _g13) {
							var i4 = _g12++;
							if(values3[i4] < min1) {
								min1 = values3[i4];
							}
						}
						var y1 = min1;
						if(!(x2 >= 0 && y1 >= 0 && x2 < preprocessed.getUInt16(0) && y1 < Math.ceil((preprocessed.length - vision_ds_Image.OFFSET) / (preprocessed.getUInt16(0) * 4)))) {
							var this_x = x2;
							var this_y = y1;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(preprocessed,new vision_ds_Point2D(this_x,this_y)));
						}
						var position1 = (y1 * preprocessed.getUInt16(0) + x2) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = preprocessed.b[position1] << 24 | preprocessed.b[position1 + 1] << 16 | preprocessed.b[position1 + 2] << 8 | preprocessed.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this6 = value1;
						pixel = this6;
					} else {
						if(!(x1 >= 0 && y >= 0 && x1 < preprocessed.getUInt16(0) && y < Math.ceil((preprocessed.length - vision_ds_Image.OFFSET) / (preprocessed.getUInt16(0) * 4)))) {
							var this_x1 = x1;
							var this_y1 = y;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(preprocessed,new vision_ds_Point2D(this_x1,this_y1)));
						}
						var position2 = (y * preprocessed.getUInt16(0) + x1) * 4;
						position2 += vision_ds_Image.OFFSET;
						var value2 = preprocessed.b[position2] << 24 | preprocessed.b[position2 + 1] << 16 | preprocessed.b[position2 + 2] << 8 | preprocessed.b[position2 + 3];
						if(value2 == null) {
							value2 = 0;
						}
						var this7 = value2;
						pixel = this7;
					}
					red += (pixel >> 16 & 255) * kernel[i + radius];
					green += (pixel >> 8 & 255) * kernel[i + radius];
					blue += (pixel & 255) * kernel[i + radius];
				}
				var Red = red | 0;
				var Green = green | 0;
				var Blue = blue | 0;
				var this8 = 0;
				var color1 = this8;
				var Alpha = 255;
				if(Alpha == null) {
					Alpha = 255;
				}
				color1 &= -16711681;
				color1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
				color1 &= -65281;
				color1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
				color1 &= -256;
				color1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
				color1 &= 16777215;
				color1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
				var color2 = color1;
				var position3 = (y * processed.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				processed.b[position3] = color2 >> 24 & 255;
				processed.b[position3 + 1] = color2 >> 16 & 255;
				processed.b[position3 + 2] = color2 >> 8 & 255;
				processed.b[position3 + 3] = color2 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = preprocessed.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((preprocessed.length - vision_ds_Image.OFFSET) / (preprocessed.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(preprocessed.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || preprocessed.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || preprocessed.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != preprocessed.getUInt16(0) || preprocessed.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((preprocessed.length - vision_ds_Image.OFFSET) / (preprocessed.getUInt16(0) * 4)) || preprocessed.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < preprocessed.getUInt16(0) && y < Math.ceil((preprocessed.length - vision_ds_Image.OFFSET) / (preprocessed.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = preprocessed.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = preprocessed.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = preprocessed.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var preprocessed1 = preprocessed.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,preprocessed.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),preprocessed1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * preprocessed.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = preprocessed.b[position] << 24 | preprocessed.b[position + 1] << 16 | preprocessed.b[position + 2] << 8 | preprocessed.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					var red = 0.;
					var green = 0.;
					var blue = 0.;
					var _g7 = -radius;
					var _g8 = radius + 1;
					while(_g7 < _g8) {
						var i = _g7++;
						var x14 = x + i;
						var pixel;
						if(!(x14 >= 0 && y >= 0 && x14 < preprocessed.getUInt16(0) && y < Math.ceil((preprocessed.length - vision_ds_Image.OFFSET) / (preprocessed.getUInt16(0) * 4)))) {
							var this2 = [x14,preprocessed.getUInt16(0) - 1];
							var values = this2;
							var max = values[0];
							var _g9 = 0;
							var _g10 = values.length;
							while(_g9 < _g10) {
								var i1 = _g9++;
								if(values[i1] > max) {
									max = values[i1];
								}
							}
							var this3 = [max,0];
							var values1 = this3;
							var min = values1[0];
							var _g11 = 0;
							var _g12 = values1.length;
							while(_g11 < _g12) {
								var i2 = _g11++;
								if(values1[i2] < min) {
									min = values1[i2];
								}
							}
							var x15 = min;
							var this4 = [y,Math.ceil((preprocessed.length - vision_ds_Image.OFFSET) / (preprocessed.getUInt16(0) * 4)) - 1];
							var values2 = this4;
							var max1 = values2[0];
							var _g13 = 0;
							var _g14 = values2.length;
							while(_g13 < _g14) {
								var i3 = _g13++;
								if(values2[i3] > max1) {
									max1 = values2[i3];
								}
							}
							var this5 = [max1,0];
							var values3 = this5;
							var min1 = values3[0];
							var _g15 = 0;
							var _g16 = values3.length;
							while(_g15 < _g16) {
								var i4 = _g15++;
								if(values3[i4] < min1) {
									min1 = values3[i4];
								}
							}
							var y14 = min1;
							if(!(x15 >= 0 && y14 >= 0 && x15 < preprocessed.getUInt16(0) && y14 < Math.ceil((preprocessed.length - vision_ds_Image.OFFSET) / (preprocessed.getUInt16(0) * 4)))) {
								var this_x = x15;
								var this_y = y14;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(preprocessed,new vision_ds_Point2D(this_x,this_y)));
							}
							var position1 = (y14 * preprocessed.getUInt16(0) + x15) * 4;
							position1 += vision_ds_Image.OFFSET;
							var value1 = preprocessed.b[position1] << 24 | preprocessed.b[position1 + 1] << 16 | preprocessed.b[position1 + 2] << 8 | preprocessed.b[position1 + 3];
							if(value1 == null) {
								value1 = 0;
							}
							var this6 = value1;
							pixel = this6;
						} else {
							if(!(x14 >= 0 && y >= 0 && x14 < preprocessed.getUInt16(0) && y < Math.ceil((preprocessed.length - vision_ds_Image.OFFSET) / (preprocessed.getUInt16(0) * 4)))) {
								var this_x1 = x14;
								var this_y1 = y;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(preprocessed,new vision_ds_Point2D(this_x1,this_y1)));
							}
							var position2 = (y * preprocessed.getUInt16(0) + x14) * 4;
							position2 += vision_ds_Image.OFFSET;
							var value2 = preprocessed.b[position2] << 24 | preprocessed.b[position2 + 1] << 16 | preprocessed.b[position2 + 2] << 8 | preprocessed.b[position2 + 3];
							if(value2 == null) {
								value2 = 0;
							}
							var this7 = value2;
							pixel = this7;
						}
						red += (pixel >> 16 & 255) * kernel[i + radius];
						green += (pixel >> 8 & 255) * kernel[i + radius];
						blue += (pixel & 255) * kernel[i + radius];
					}
					var Red = red | 0;
					var Green = green | 0;
					var Blue = blue | 0;
					var this8 = 0;
					var color1 = this8;
					var Alpha = 255;
					if(Alpha == null) {
						Alpha = 255;
					}
					color1 &= -16711681;
					color1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
					color1 &= -65281;
					color1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
					color1 &= -256;
					color1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
					color1 &= 16777215;
					color1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
					var color2 = color1;
					var position3 = (y * processed.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					processed.b[position3] = color2 >> 24 & 255;
					processed.b[position3 + 1] = color2 >> 16 & 255;
					processed.b[position3 + 2] = color2 >> 8 & 255;
					processed.b[position3 + 3] = color2 & 255;
				}
			}
		}
	}
	return processed;
};
var vision_algorithms_Hough = function() { };
$hxClasses["vision.algorithms.Hough"] = vision_algorithms_Hough;
vision_algorithms_Hough.__name__ = "vision.algorithms.Hough";
vision_algorithms_Hough.maxRho = null;
vision_algorithms_Hough.generateHoughSpace = function(image) {
	vision_algorithms_Hough.maxRho = 2 * Math.ceil(Math.sqrt(image.getUInt16(0) * image.getUInt16(0) + Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) * Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))));
	var maxThetaIndex = 360;
	var width = maxThetaIndex + 1;
	var height = vision_algorithms_Hough.maxRho;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var accumulator = this2;
	var calcLine_slope;
	var calcLine_radians;
	var calcLine_degrees;
	var x = 0;
	var y = 0;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var calcLine_point_x = x;
	var calcLine_point_y = y;
	var m = null;
	var radians = null;
	if(m != null) {
		calcLine_degrees = Math.atan(m) * 180 / Math.PI;
		calcLine_radians = Math.atan(m);
		calcLine_slope = m;
		var value = Math.atan(m) * 180 / Math.PI;
		calcLine_slope = Math.tan(value * Math.PI / 180);
		calcLine_radians = value * Math.PI / 180;
		calcLine_degrees = value;
		var value = Math.atan(m);
		calcLine_slope = Math.tan(value);
		calcLine_degrees = value * 180 / Math.PI;
		calcLine_radians = value;
	} else {
		calcLine_slope = Math.tan(0 * Math.PI / 180);
		calcLine_radians = 0 * Math.PI / 180;
		calcLine_degrees = 0;
		var value = Math.tan(0 * Math.PI / 180);
		calcLine_degrees = Math.atan(value) * 180 / Math.PI;
		calcLine_radians = Math.atan(value);
		calcLine_slope = value;
		var value = 0 * Math.PI / 180;
		calcLine_slope = Math.tan(value);
		calcLine_degrees = value * 180 / Math.PI;
		calcLine_radians = value;
	}
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * image.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			if((this1 >> 16 & 255) == 255) {
				calcLine_point_x = x;
				calcLine_point_y = y;
				var _g4 = 0;
				var _g5 = maxThetaIndex;
				while(_g4 < _g5) {
					var deg = _g4++;
					calcLine_slope = Math.tan(deg * Math.PI / 180);
					calcLine_radians = deg * Math.PI / 180;
					calcLine_degrees = deg;
					var rho = x * Math.cos(deg * Math.PI / 180) + y * Math.sin(deg * Math.PI / 180);
					var rhoIndex = rho + Math.ceil(vision_algorithms_Hough.maxRho / 2);
					if(rhoIndex < 0) {
						haxe_Log.trace(rhoIndex,{ fileName : "vision/algorithms/Hough.hx", lineNumber : 31, className : "vision.algorithms.Hough", methodName : "generateHoughSpace"});
					} else {
						var lhs;
						var x1 = Math.ceil(deg);
						var y1 = Math.ceil(rhoIndex);
						if(!(x1 >= 0 && y1 >= 0 && x1 < accumulator.getUInt16(0) && y1 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
							var this2 = accumulator;
							var x2 = vision_tools_MathTools.boundFloat(deg,0,accumulator.getUInt16(0) - 1);
							var y2 = vision_tools_MathTools.boundFloat(rhoIndex,0,Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)) - 1);
							var x3 = Math.ceil(x2);
							var y3 = Math.ceil(y2);
							if(!(x3 >= 0 && y3 >= 0 && x3 < this2.getUInt16(0) && y3 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this3 = this2;
								var x4 = vision_tools_MathTools.boundFloat(x2,0,this2.getUInt16(0) - 1);
								var y4 = vision_tools_MathTools.boundFloat(y2,0,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1);
								var x5 = Math.ceil(x4);
								var y5 = Math.ceil(y4);
								if(!(x5 >= 0 && y5 >= 0 && x5 < this3.getUInt16(0) && y5 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
									var this4 = this3;
									var x6 = vision_tools_MathTools.boundFloat(x4,0,this3.getUInt16(0) - 1);
									var y6 = vision_tools_MathTools.boundFloat(y4,0,Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)) - 1);
									var x7 = Math.ceil(x6);
									var y7 = Math.ceil(y6);
									if(!(x7 >= 0 && y7 >= 0 && x7 < this4.getUInt16(0) && y7 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
										var this5 = this4;
										var x8 = vision_tools_MathTools.boundFloat(x6,0,this4.getUInt16(0) - 1);
										var y8 = vision_tools_MathTools.boundFloat(y6,0,Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)) - 1);
										var x9 = Math.ceil(x8);
										var y9 = Math.ceil(y8);
										if(!(x9 >= 0 && y9 >= 0 && x9 < this5.getUInt16(0) && y9 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
											var this6 = this5;
											var x10 = vision_tools_MathTools.boundFloat(x8,0,this5.getUInt16(0) - 1);
											var y10 = vision_tools_MathTools.boundFloat(y8,0,Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)) - 1);
											var x11 = Math.ceil(x10);
											var y11 = Math.ceil(y10);
											if(!(x11 >= 0 && y11 >= 0 && x11 < this6.getUInt16(0) && y11 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
												lhs = vision_ds_Image.getFloatingPixel(this6,vision_tools_MathTools.boundFloat(x10,0,this6.getUInt16(0) - 1),vision_tools_MathTools.boundFloat(y10,0,Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)) - 1));
											} else {
												var yFraction = y10 - (y10 | 0);
												var xFraction = x10 - (x10 | 0);
												var x12 = x10 | 0;
												var y12 = y10 | 0;
												if(!(x12 >= 0 && y12 >= 0 && x12 < this6.getUInt16(0) && y12 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x = x12;
													var this_y = y12;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x,this_y)));
												}
												var position1 = (y12 * this6.getUInt16(0) + x12) * 4;
												position1 += vision_ds_Image.OFFSET;
												var value1 = this6.b[position1] << 24 | this6.b[position1 + 1] << 16 | this6.b[position1 + 2] << 8 | this6.b[position1 + 3];
												if(value1 == null) {
													value1 = 0;
												}
												var this7 = value1;
												var x13 = (x10 | 0) + 1;
												var y13 = y10 | 0;
												if(!(x13 >= 0 && y13 >= 0 && x13 < this6.getUInt16(0) && y13 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x1 = x13;
													var this_y1 = y13;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x1,this_y1)));
												}
												var position2 = (y13 * this6.getUInt16(0) + x13) * 4;
												position2 += vision_ds_Image.OFFSET;
												var value2 = this6.b[position2] << 24 | this6.b[position2 + 1] << 16 | this6.b[position2 + 2] << 8 | this6.b[position2 + 3];
												if(value2 == null) {
													value2 = 0;
												}
												var this8 = value2;
												var x14 = x10 | 0;
												var y14 = (y10 | 0) + 1;
												if(!(x14 >= 0 && y14 >= 0 && x14 < this6.getUInt16(0) && y14 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x2 = x14;
													var this_y2 = y14;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x2,this_y2)));
												}
												var position3 = (y14 * this6.getUInt16(0) + x14) * 4;
												position3 += vision_ds_Image.OFFSET;
												var value3 = this6.b[position3] << 24 | this6.b[position3 + 1] << 16 | this6.b[position3 + 2] << 8 | this6.b[position3 + 3];
												if(value3 == null) {
													value3 = 0;
												}
												var this9 = value3;
												var x15 = (x10 | 0) + 1;
												var y15 = (y10 | 0) + 1;
												if(!(x15 >= 0 && y15 >= 0 && x15 < this6.getUInt16(0) && y15 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x3 = x15;
													var this_y3 = y15;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x3,this_y3)));
												}
												var position4 = (y15 * this6.getUInt16(0) + x15) * 4;
												position4 += vision_ds_Image.OFFSET;
												var value4 = this6.b[position4] << 24 | this6.b[position4 + 1] << 16 | this6.b[position4 + 2] << 8 | this6.b[position4 + 3];
												if(value4 == null) {
													value4 = 0;
												}
												var this10 = value4;
												var red = (1 - yFraction) * ((1 - xFraction) * (this7 >> 16 & 255) + xFraction * (this8 >> 16 & 255)) + yFraction * ((1 - xFraction) * (this9 >> 16 & 255) + xFraction * (this10 >> 16 & 255)) | 0;
												var x16 = x10 | 0;
												var y16 = y10 | 0;
												if(!(x16 >= 0 && y16 >= 0 && x16 < this6.getUInt16(0) && y16 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x4 = x16;
													var this_y4 = y16;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x4,this_y4)));
												}
												var position5 = (y16 * this6.getUInt16(0) + x16) * 4;
												position5 += vision_ds_Image.OFFSET;
												var value5 = this6.b[position5] << 24 | this6.b[position5 + 1] << 16 | this6.b[position5 + 2] << 8 | this6.b[position5 + 3];
												if(value5 == null) {
													value5 = 0;
												}
												var this11 = value5;
												var x17 = (x10 | 0) + 1;
												var y17 = y10 | 0;
												if(!(x17 >= 0 && y17 >= 0 && x17 < this6.getUInt16(0) && y17 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x5 = x17;
													var this_y5 = y17;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x5,this_y5)));
												}
												var position6 = (y17 * this6.getUInt16(0) + x17) * 4;
												position6 += vision_ds_Image.OFFSET;
												var value6 = this6.b[position6] << 24 | this6.b[position6 + 1] << 16 | this6.b[position6 + 2] << 8 | this6.b[position6 + 3];
												if(value6 == null) {
													value6 = 0;
												}
												var this12 = value6;
												var x18 = x10 | 0;
												var y18 = (y10 | 0) + 1;
												if(!(x18 >= 0 && y18 >= 0 && x18 < this6.getUInt16(0) && y18 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x6 = x18;
													var this_y6 = y18;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x6,this_y6)));
												}
												var position7 = (y18 * this6.getUInt16(0) + x18) * 4;
												position7 += vision_ds_Image.OFFSET;
												var value7 = this6.b[position7] << 24 | this6.b[position7 + 1] << 16 | this6.b[position7 + 2] << 8 | this6.b[position7 + 3];
												if(value7 == null) {
													value7 = 0;
												}
												var this13 = value7;
												var x19 = (x10 | 0) + 1;
												var y19 = (y10 | 0) + 1;
												if(!(x19 >= 0 && y19 >= 0 && x19 < this6.getUInt16(0) && y19 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x7 = x19;
													var this_y7 = y19;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x7,this_y7)));
												}
												var position8 = (y19 * this6.getUInt16(0) + x19) * 4;
												position8 += vision_ds_Image.OFFSET;
												var value8 = this6.b[position8] << 24 | this6.b[position8 + 1] << 16 | this6.b[position8 + 2] << 8 | this6.b[position8 + 3];
												if(value8 == null) {
													value8 = 0;
												}
												var this14 = value8;
												var green = (1 - yFraction) * ((1 - xFraction) * (this11 >> 8 & 255) + xFraction * (this12 >> 8 & 255)) + yFraction * ((1 - xFraction) * (this13 >> 8 & 255) + xFraction * (this14 >> 8 & 255)) | 0;
												var x20 = x10 | 0;
												var y20 = y10 | 0;
												if(!(x20 >= 0 && y20 >= 0 && x20 < this6.getUInt16(0) && y20 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x8 = x20;
													var this_y8 = y20;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x8,this_y8)));
												}
												var position9 = (y20 * this6.getUInt16(0) + x20) * 4;
												position9 += vision_ds_Image.OFFSET;
												var value9 = this6.b[position9] << 24 | this6.b[position9 + 1] << 16 | this6.b[position9 + 2] << 8 | this6.b[position9 + 3];
												if(value9 == null) {
													value9 = 0;
												}
												var this15 = value9;
												var x21 = (x10 | 0) + 1;
												var y21 = y10 | 0;
												if(!(x21 >= 0 && y21 >= 0 && x21 < this6.getUInt16(0) && y21 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x9 = x21;
													var this_y9 = y21;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x9,this_y9)));
												}
												var position10 = (y21 * this6.getUInt16(0) + x21) * 4;
												position10 += vision_ds_Image.OFFSET;
												var value10 = this6.b[position10] << 24 | this6.b[position10 + 1] << 16 | this6.b[position10 + 2] << 8 | this6.b[position10 + 3];
												if(value10 == null) {
													value10 = 0;
												}
												var this16 = value10;
												var x22 = x10 | 0;
												var y22 = (y10 | 0) + 1;
												if(!(x22 >= 0 && y22 >= 0 && x22 < this6.getUInt16(0) && y22 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x10 = x22;
													var this_y10 = y22;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x10,this_y10)));
												}
												var position11 = (y22 * this6.getUInt16(0) + x22) * 4;
												position11 += vision_ds_Image.OFFSET;
												var value11 = this6.b[position11] << 24 | this6.b[position11 + 1] << 16 | this6.b[position11 + 2] << 8 | this6.b[position11 + 3];
												if(value11 == null) {
													value11 = 0;
												}
												var this17 = value11;
												var x23 = (x10 | 0) + 1;
												var y23 = (y10 | 0) + 1;
												if(!(x23 >= 0 && y23 >= 0 && x23 < this6.getUInt16(0) && y23 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x11 = x23;
													var this_y11 = y23;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x11,this_y11)));
												}
												var position12 = (y23 * this6.getUInt16(0) + x23) * 4;
												position12 += vision_ds_Image.OFFSET;
												var value12 = this6.b[position12] << 24 | this6.b[position12 + 1] << 16 | this6.b[position12 + 2] << 8 | this6.b[position12 + 3];
												if(value12 == null) {
													value12 = 0;
												}
												var this18 = value12;
												var blue = (1 - yFraction) * ((1 - xFraction) * (this15 & 255) + xFraction * (this16 & 255)) + yFraction * ((1 - xFraction) * (this17 & 255) + xFraction * (this18 & 255)) | 0;
												var x24 = x10 | 0;
												var y24 = y10 | 0;
												if(!(x24 >= 0 && y24 >= 0 && x24 < this6.getUInt16(0) && y24 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x12 = x24;
													var this_y12 = y24;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x12,this_y12)));
												}
												var position13 = (y24 * this6.getUInt16(0) + x24) * 4;
												position13 += vision_ds_Image.OFFSET;
												var value13 = this6.b[position13] << 24 | this6.b[position13 + 1] << 16 | this6.b[position13 + 2] << 8 | this6.b[position13 + 3];
												if(value13 == null) {
													value13 = 0;
												}
												var this19 = value13;
												var x25 = (x10 | 0) + 1;
												var y25 = y10 | 0;
												if(!(x25 >= 0 && y25 >= 0 && x25 < this6.getUInt16(0) && y25 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x13 = x25;
													var this_y13 = y25;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x13,this_y13)));
												}
												var position14 = (y25 * this6.getUInt16(0) + x25) * 4;
												position14 += vision_ds_Image.OFFSET;
												var value14 = this6.b[position14] << 24 | this6.b[position14 + 1] << 16 | this6.b[position14 + 2] << 8 | this6.b[position14 + 3];
												if(value14 == null) {
													value14 = 0;
												}
												var this20 = value14;
												var x26 = x10 | 0;
												var y26 = (y10 | 0) + 1;
												if(!(x26 >= 0 && y26 >= 0 && x26 < this6.getUInt16(0) && y26 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x14 = x26;
													var this_y14 = y26;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x14,this_y14)));
												}
												var position15 = (y26 * this6.getUInt16(0) + x26) * 4;
												position15 += vision_ds_Image.OFFSET;
												var value15 = this6.b[position15] << 24 | this6.b[position15 + 1] << 16 | this6.b[position15 + 2] << 8 | this6.b[position15 + 3];
												if(value15 == null) {
													value15 = 0;
												}
												var this21 = value15;
												var x27 = (x10 | 0) + 1;
												var y27 = (y10 | 0) + 1;
												if(!(x27 >= 0 && y27 >= 0 && x27 < this6.getUInt16(0) && y27 < Math.ceil((this6.length - vision_ds_Image.OFFSET) / (this6.getUInt16(0) * 4)))) {
													var this_x15 = x27;
													var this_y15 = y27;
													throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this6,new vision_ds_Point2D(this_x15,this_y15)));
												}
												var position16 = (y27 * this6.getUInt16(0) + x27) * 4;
												position16 += vision_ds_Image.OFFSET;
												var value16 = this6.b[position16] << 24 | this6.b[position16 + 1] << 16 | this6.b[position16 + 2] << 8 | this6.b[position16 + 3];
												if(value16 == null) {
													value16 = 0;
												}
												var this22 = value16;
												var alpha = (1 - yFraction) * ((1 - xFraction) * (this19 >> 24 & 255) + xFraction * (this20 >> 24 & 255)) + yFraction * ((1 - xFraction) * (this21 >> 24 & 255) + xFraction * (this22 >> 24 & 255)) | 0;
												var Alpha = alpha;
												if(Alpha == null) {
													Alpha = 255;
												}
												var this23 = 0;
												var color = this23;
												var Alpha1 = Alpha;
												if(Alpha1 == null) {
													Alpha1 = 255;
												}
												color &= -16711681;
												color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
												color &= -65281;
												color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
												color &= -256;
												color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
												color &= 16777215;
												color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
												lhs = color;
											}
										} else {
											var yFraction1 = y8 - (y8 | 0);
											var xFraction1 = x8 - (x8 | 0);
											var x28 = x8 | 0;
											var y28 = y8 | 0;
											if(!(x28 >= 0 && y28 >= 0 && x28 < this5.getUInt16(0) && y28 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x16 = x28;
												var this_y16 = y28;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x16,this_y16)));
											}
											var position17 = (y28 * this5.getUInt16(0) + x28) * 4;
											position17 += vision_ds_Image.OFFSET;
											var value17 = this5.b[position17] << 24 | this5.b[position17 + 1] << 16 | this5.b[position17 + 2] << 8 | this5.b[position17 + 3];
											if(value17 == null) {
												value17 = 0;
											}
											var this24 = value17;
											var x29 = (x8 | 0) + 1;
											var y29 = y8 | 0;
											if(!(x29 >= 0 && y29 >= 0 && x29 < this5.getUInt16(0) && y29 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x17 = x29;
												var this_y17 = y29;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x17,this_y17)));
											}
											var position18 = (y29 * this5.getUInt16(0) + x29) * 4;
											position18 += vision_ds_Image.OFFSET;
											var value18 = this5.b[position18] << 24 | this5.b[position18 + 1] << 16 | this5.b[position18 + 2] << 8 | this5.b[position18 + 3];
											if(value18 == null) {
												value18 = 0;
											}
											var this25 = value18;
											var x30 = x8 | 0;
											var y30 = (y8 | 0) + 1;
											if(!(x30 >= 0 && y30 >= 0 && x30 < this5.getUInt16(0) && y30 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x18 = x30;
												var this_y18 = y30;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x18,this_y18)));
											}
											var position19 = (y30 * this5.getUInt16(0) + x30) * 4;
											position19 += vision_ds_Image.OFFSET;
											var value19 = this5.b[position19] << 24 | this5.b[position19 + 1] << 16 | this5.b[position19 + 2] << 8 | this5.b[position19 + 3];
											if(value19 == null) {
												value19 = 0;
											}
											var this26 = value19;
											var x31 = (x8 | 0) + 1;
											var y31 = (y8 | 0) + 1;
											if(!(x31 >= 0 && y31 >= 0 && x31 < this5.getUInt16(0) && y31 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x19 = x31;
												var this_y19 = y31;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x19,this_y19)));
											}
											var position20 = (y31 * this5.getUInt16(0) + x31) * 4;
											position20 += vision_ds_Image.OFFSET;
											var value20 = this5.b[position20] << 24 | this5.b[position20 + 1] << 16 | this5.b[position20 + 2] << 8 | this5.b[position20 + 3];
											if(value20 == null) {
												value20 = 0;
											}
											var this27 = value20;
											var red1 = (1 - yFraction1) * ((1 - xFraction1) * (this24 >> 16 & 255) + xFraction1 * (this25 >> 16 & 255)) + yFraction1 * ((1 - xFraction1) * (this26 >> 16 & 255) + xFraction1 * (this27 >> 16 & 255)) | 0;
											var x32 = x8 | 0;
											var y32 = y8 | 0;
											if(!(x32 >= 0 && y32 >= 0 && x32 < this5.getUInt16(0) && y32 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x20 = x32;
												var this_y20 = y32;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x20,this_y20)));
											}
											var position21 = (y32 * this5.getUInt16(0) + x32) * 4;
											position21 += vision_ds_Image.OFFSET;
											var value21 = this5.b[position21] << 24 | this5.b[position21 + 1] << 16 | this5.b[position21 + 2] << 8 | this5.b[position21 + 3];
											if(value21 == null) {
												value21 = 0;
											}
											var this28 = value21;
											var x33 = (x8 | 0) + 1;
											var y33 = y8 | 0;
											if(!(x33 >= 0 && y33 >= 0 && x33 < this5.getUInt16(0) && y33 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x21 = x33;
												var this_y21 = y33;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x21,this_y21)));
											}
											var position22 = (y33 * this5.getUInt16(0) + x33) * 4;
											position22 += vision_ds_Image.OFFSET;
											var value22 = this5.b[position22] << 24 | this5.b[position22 + 1] << 16 | this5.b[position22 + 2] << 8 | this5.b[position22 + 3];
											if(value22 == null) {
												value22 = 0;
											}
											var this29 = value22;
											var x34 = x8 | 0;
											var y34 = (y8 | 0) + 1;
											if(!(x34 >= 0 && y34 >= 0 && x34 < this5.getUInt16(0) && y34 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x22 = x34;
												var this_y22 = y34;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x22,this_y22)));
											}
											var position23 = (y34 * this5.getUInt16(0) + x34) * 4;
											position23 += vision_ds_Image.OFFSET;
											var value23 = this5.b[position23] << 24 | this5.b[position23 + 1] << 16 | this5.b[position23 + 2] << 8 | this5.b[position23 + 3];
											if(value23 == null) {
												value23 = 0;
											}
											var this30 = value23;
											var x35 = (x8 | 0) + 1;
											var y35 = (y8 | 0) + 1;
											if(!(x35 >= 0 && y35 >= 0 && x35 < this5.getUInt16(0) && y35 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x23 = x35;
												var this_y23 = y35;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x23,this_y23)));
											}
											var position24 = (y35 * this5.getUInt16(0) + x35) * 4;
											position24 += vision_ds_Image.OFFSET;
											var value24 = this5.b[position24] << 24 | this5.b[position24 + 1] << 16 | this5.b[position24 + 2] << 8 | this5.b[position24 + 3];
											if(value24 == null) {
												value24 = 0;
											}
											var this31 = value24;
											var green1 = (1 - yFraction1) * ((1 - xFraction1) * (this28 >> 8 & 255) + xFraction1 * (this29 >> 8 & 255)) + yFraction1 * ((1 - xFraction1) * (this30 >> 8 & 255) + xFraction1 * (this31 >> 8 & 255)) | 0;
											var x36 = x8 | 0;
											var y36 = y8 | 0;
											if(!(x36 >= 0 && y36 >= 0 && x36 < this5.getUInt16(0) && y36 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x24 = x36;
												var this_y24 = y36;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x24,this_y24)));
											}
											var position25 = (y36 * this5.getUInt16(0) + x36) * 4;
											position25 += vision_ds_Image.OFFSET;
											var value25 = this5.b[position25] << 24 | this5.b[position25 + 1] << 16 | this5.b[position25 + 2] << 8 | this5.b[position25 + 3];
											if(value25 == null) {
												value25 = 0;
											}
											var this32 = value25;
											var x37 = (x8 | 0) + 1;
											var y37 = y8 | 0;
											if(!(x37 >= 0 && y37 >= 0 && x37 < this5.getUInt16(0) && y37 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x25 = x37;
												var this_y25 = y37;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x25,this_y25)));
											}
											var position26 = (y37 * this5.getUInt16(0) + x37) * 4;
											position26 += vision_ds_Image.OFFSET;
											var value26 = this5.b[position26] << 24 | this5.b[position26 + 1] << 16 | this5.b[position26 + 2] << 8 | this5.b[position26 + 3];
											if(value26 == null) {
												value26 = 0;
											}
											var this33 = value26;
											var x38 = x8 | 0;
											var y38 = (y8 | 0) + 1;
											if(!(x38 >= 0 && y38 >= 0 && x38 < this5.getUInt16(0) && y38 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x26 = x38;
												var this_y26 = y38;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x26,this_y26)));
											}
											var position27 = (y38 * this5.getUInt16(0) + x38) * 4;
											position27 += vision_ds_Image.OFFSET;
											var value27 = this5.b[position27] << 24 | this5.b[position27 + 1] << 16 | this5.b[position27 + 2] << 8 | this5.b[position27 + 3];
											if(value27 == null) {
												value27 = 0;
											}
											var this34 = value27;
											var x39 = (x8 | 0) + 1;
											var y39 = (y8 | 0) + 1;
											if(!(x39 >= 0 && y39 >= 0 && x39 < this5.getUInt16(0) && y39 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x27 = x39;
												var this_y27 = y39;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x27,this_y27)));
											}
											var position28 = (y39 * this5.getUInt16(0) + x39) * 4;
											position28 += vision_ds_Image.OFFSET;
											var value28 = this5.b[position28] << 24 | this5.b[position28 + 1] << 16 | this5.b[position28 + 2] << 8 | this5.b[position28 + 3];
											if(value28 == null) {
												value28 = 0;
											}
											var this35 = value28;
											var blue1 = (1 - yFraction1) * ((1 - xFraction1) * (this32 & 255) + xFraction1 * (this33 & 255)) + yFraction1 * ((1 - xFraction1) * (this34 & 255) + xFraction1 * (this35 & 255)) | 0;
											var x40 = x8 | 0;
											var y40 = y8 | 0;
											if(!(x40 >= 0 && y40 >= 0 && x40 < this5.getUInt16(0) && y40 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x28 = x40;
												var this_y28 = y40;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x28,this_y28)));
											}
											var position29 = (y40 * this5.getUInt16(0) + x40) * 4;
											position29 += vision_ds_Image.OFFSET;
											var value29 = this5.b[position29] << 24 | this5.b[position29 + 1] << 16 | this5.b[position29 + 2] << 8 | this5.b[position29 + 3];
											if(value29 == null) {
												value29 = 0;
											}
											var this36 = value29;
											var x41 = (x8 | 0) + 1;
											var y41 = y8 | 0;
											if(!(x41 >= 0 && y41 >= 0 && x41 < this5.getUInt16(0) && y41 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x29 = x41;
												var this_y29 = y41;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x29,this_y29)));
											}
											var position30 = (y41 * this5.getUInt16(0) + x41) * 4;
											position30 += vision_ds_Image.OFFSET;
											var value30 = this5.b[position30] << 24 | this5.b[position30 + 1] << 16 | this5.b[position30 + 2] << 8 | this5.b[position30 + 3];
											if(value30 == null) {
												value30 = 0;
											}
											var this37 = value30;
											var x42 = x8 | 0;
											var y42 = (y8 | 0) + 1;
											if(!(x42 >= 0 && y42 >= 0 && x42 < this5.getUInt16(0) && y42 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x30 = x42;
												var this_y30 = y42;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x30,this_y30)));
											}
											var position31 = (y42 * this5.getUInt16(0) + x42) * 4;
											position31 += vision_ds_Image.OFFSET;
											var value31 = this5.b[position31] << 24 | this5.b[position31 + 1] << 16 | this5.b[position31 + 2] << 8 | this5.b[position31 + 3];
											if(value31 == null) {
												value31 = 0;
											}
											var this38 = value31;
											var x43 = (x8 | 0) + 1;
											var y43 = (y8 | 0) + 1;
											if(!(x43 >= 0 && y43 >= 0 && x43 < this5.getUInt16(0) && y43 < Math.ceil((this5.length - vision_ds_Image.OFFSET) / (this5.getUInt16(0) * 4)))) {
												var this_x31 = x43;
												var this_y31 = y43;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this5,new vision_ds_Point2D(this_x31,this_y31)));
											}
											var position32 = (y43 * this5.getUInt16(0) + x43) * 4;
											position32 += vision_ds_Image.OFFSET;
											var value32 = this5.b[position32] << 24 | this5.b[position32 + 1] << 16 | this5.b[position32 + 2] << 8 | this5.b[position32 + 3];
											if(value32 == null) {
												value32 = 0;
											}
											var this39 = value32;
											var alpha1 = (1 - yFraction1) * ((1 - xFraction1) * (this36 >> 24 & 255) + xFraction1 * (this37 >> 24 & 255)) + yFraction1 * ((1 - xFraction1) * (this38 >> 24 & 255) + xFraction1 * (this39 >> 24 & 255)) | 0;
											var Alpha2 = alpha1;
											if(Alpha2 == null) {
												Alpha2 = 255;
											}
											var this40 = 0;
											var color1 = this40;
											var Alpha3 = Alpha2;
											if(Alpha3 == null) {
												Alpha3 = 255;
											}
											color1 &= -16711681;
											color1 |= (red1 > 255 ? 255 : red1 < 0 ? 0 : red1) << 16;
											color1 &= -65281;
											color1 |= (green1 > 255 ? 255 : green1 < 0 ? 0 : green1) << 8;
											color1 &= -256;
											color1 |= blue1 > 255 ? 255 : blue1 < 0 ? 0 : blue1;
											color1 &= 16777215;
											color1 |= (Alpha3 > 255 ? 255 : Alpha3 < 0 ? 0 : Alpha3) << 24;
											lhs = color1;
										}
									} else {
										var yFraction2 = y6 - (y6 | 0);
										var xFraction2 = x6 - (x6 | 0);
										var x44 = x6 | 0;
										var y44 = y6 | 0;
										if(!(x44 >= 0 && y44 >= 0 && x44 < this4.getUInt16(0) && y44 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x32 = x44;
											var this_y32 = y44;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x32,this_y32)));
										}
										var position33 = (y44 * this4.getUInt16(0) + x44) * 4;
										position33 += vision_ds_Image.OFFSET;
										var value33 = this4.b[position33] << 24 | this4.b[position33 + 1] << 16 | this4.b[position33 + 2] << 8 | this4.b[position33 + 3];
										if(value33 == null) {
											value33 = 0;
										}
										var this41 = value33;
										var x45 = (x6 | 0) + 1;
										var y45 = y6 | 0;
										if(!(x45 >= 0 && y45 >= 0 && x45 < this4.getUInt16(0) && y45 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x33 = x45;
											var this_y33 = y45;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x33,this_y33)));
										}
										var position34 = (y45 * this4.getUInt16(0) + x45) * 4;
										position34 += vision_ds_Image.OFFSET;
										var value34 = this4.b[position34] << 24 | this4.b[position34 + 1] << 16 | this4.b[position34 + 2] << 8 | this4.b[position34 + 3];
										if(value34 == null) {
											value34 = 0;
										}
										var this42 = value34;
										var x46 = x6 | 0;
										var y46 = (y6 | 0) + 1;
										if(!(x46 >= 0 && y46 >= 0 && x46 < this4.getUInt16(0) && y46 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x34 = x46;
											var this_y34 = y46;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x34,this_y34)));
										}
										var position35 = (y46 * this4.getUInt16(0) + x46) * 4;
										position35 += vision_ds_Image.OFFSET;
										var value35 = this4.b[position35] << 24 | this4.b[position35 + 1] << 16 | this4.b[position35 + 2] << 8 | this4.b[position35 + 3];
										if(value35 == null) {
											value35 = 0;
										}
										var this43 = value35;
										var x47 = (x6 | 0) + 1;
										var y47 = (y6 | 0) + 1;
										if(!(x47 >= 0 && y47 >= 0 && x47 < this4.getUInt16(0) && y47 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x35 = x47;
											var this_y35 = y47;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x35,this_y35)));
										}
										var position36 = (y47 * this4.getUInt16(0) + x47) * 4;
										position36 += vision_ds_Image.OFFSET;
										var value36 = this4.b[position36] << 24 | this4.b[position36 + 1] << 16 | this4.b[position36 + 2] << 8 | this4.b[position36 + 3];
										if(value36 == null) {
											value36 = 0;
										}
										var this44 = value36;
										var red2 = (1 - yFraction2) * ((1 - xFraction2) * (this41 >> 16 & 255) + xFraction2 * (this42 >> 16 & 255)) + yFraction2 * ((1 - xFraction2) * (this43 >> 16 & 255) + xFraction2 * (this44 >> 16 & 255)) | 0;
										var x48 = x6 | 0;
										var y48 = y6 | 0;
										if(!(x48 >= 0 && y48 >= 0 && x48 < this4.getUInt16(0) && y48 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x36 = x48;
											var this_y36 = y48;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x36,this_y36)));
										}
										var position37 = (y48 * this4.getUInt16(0) + x48) * 4;
										position37 += vision_ds_Image.OFFSET;
										var value37 = this4.b[position37] << 24 | this4.b[position37 + 1] << 16 | this4.b[position37 + 2] << 8 | this4.b[position37 + 3];
										if(value37 == null) {
											value37 = 0;
										}
										var this45 = value37;
										var x49 = (x6 | 0) + 1;
										var y49 = y6 | 0;
										if(!(x49 >= 0 && y49 >= 0 && x49 < this4.getUInt16(0) && y49 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x37 = x49;
											var this_y37 = y49;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x37,this_y37)));
										}
										var position38 = (y49 * this4.getUInt16(0) + x49) * 4;
										position38 += vision_ds_Image.OFFSET;
										var value38 = this4.b[position38] << 24 | this4.b[position38 + 1] << 16 | this4.b[position38 + 2] << 8 | this4.b[position38 + 3];
										if(value38 == null) {
											value38 = 0;
										}
										var this46 = value38;
										var x50 = x6 | 0;
										var y50 = (y6 | 0) + 1;
										if(!(x50 >= 0 && y50 >= 0 && x50 < this4.getUInt16(0) && y50 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x38 = x50;
											var this_y38 = y50;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x38,this_y38)));
										}
										var position39 = (y50 * this4.getUInt16(0) + x50) * 4;
										position39 += vision_ds_Image.OFFSET;
										var value39 = this4.b[position39] << 24 | this4.b[position39 + 1] << 16 | this4.b[position39 + 2] << 8 | this4.b[position39 + 3];
										if(value39 == null) {
											value39 = 0;
										}
										var this47 = value39;
										var x51 = (x6 | 0) + 1;
										var y51 = (y6 | 0) + 1;
										if(!(x51 >= 0 && y51 >= 0 && x51 < this4.getUInt16(0) && y51 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x39 = x51;
											var this_y39 = y51;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x39,this_y39)));
										}
										var position40 = (y51 * this4.getUInt16(0) + x51) * 4;
										position40 += vision_ds_Image.OFFSET;
										var value40 = this4.b[position40] << 24 | this4.b[position40 + 1] << 16 | this4.b[position40 + 2] << 8 | this4.b[position40 + 3];
										if(value40 == null) {
											value40 = 0;
										}
										var this48 = value40;
										var green2 = (1 - yFraction2) * ((1 - xFraction2) * (this45 >> 8 & 255) + xFraction2 * (this46 >> 8 & 255)) + yFraction2 * ((1 - xFraction2) * (this47 >> 8 & 255) + xFraction2 * (this48 >> 8 & 255)) | 0;
										var x52 = x6 | 0;
										var y52 = y6 | 0;
										if(!(x52 >= 0 && y52 >= 0 && x52 < this4.getUInt16(0) && y52 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x40 = x52;
											var this_y40 = y52;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x40,this_y40)));
										}
										var position41 = (y52 * this4.getUInt16(0) + x52) * 4;
										position41 += vision_ds_Image.OFFSET;
										var value41 = this4.b[position41] << 24 | this4.b[position41 + 1] << 16 | this4.b[position41 + 2] << 8 | this4.b[position41 + 3];
										if(value41 == null) {
											value41 = 0;
										}
										var this49 = value41;
										var x53 = (x6 | 0) + 1;
										var y53 = y6 | 0;
										if(!(x53 >= 0 && y53 >= 0 && x53 < this4.getUInt16(0) && y53 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x41 = x53;
											var this_y41 = y53;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x41,this_y41)));
										}
										var position42 = (y53 * this4.getUInt16(0) + x53) * 4;
										position42 += vision_ds_Image.OFFSET;
										var value42 = this4.b[position42] << 24 | this4.b[position42 + 1] << 16 | this4.b[position42 + 2] << 8 | this4.b[position42 + 3];
										if(value42 == null) {
											value42 = 0;
										}
										var this50 = value42;
										var x54 = x6 | 0;
										var y54 = (y6 | 0) + 1;
										if(!(x54 >= 0 && y54 >= 0 && x54 < this4.getUInt16(0) && y54 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x42 = x54;
											var this_y42 = y54;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x42,this_y42)));
										}
										var position43 = (y54 * this4.getUInt16(0) + x54) * 4;
										position43 += vision_ds_Image.OFFSET;
										var value43 = this4.b[position43] << 24 | this4.b[position43 + 1] << 16 | this4.b[position43 + 2] << 8 | this4.b[position43 + 3];
										if(value43 == null) {
											value43 = 0;
										}
										var this51 = value43;
										var x55 = (x6 | 0) + 1;
										var y55 = (y6 | 0) + 1;
										if(!(x55 >= 0 && y55 >= 0 && x55 < this4.getUInt16(0) && y55 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x43 = x55;
											var this_y43 = y55;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x43,this_y43)));
										}
										var position44 = (y55 * this4.getUInt16(0) + x55) * 4;
										position44 += vision_ds_Image.OFFSET;
										var value44 = this4.b[position44] << 24 | this4.b[position44 + 1] << 16 | this4.b[position44 + 2] << 8 | this4.b[position44 + 3];
										if(value44 == null) {
											value44 = 0;
										}
										var this52 = value44;
										var blue2 = (1 - yFraction2) * ((1 - xFraction2) * (this49 & 255) + xFraction2 * (this50 & 255)) + yFraction2 * ((1 - xFraction2) * (this51 & 255) + xFraction2 * (this52 & 255)) | 0;
										var x56 = x6 | 0;
										var y56 = y6 | 0;
										if(!(x56 >= 0 && y56 >= 0 && x56 < this4.getUInt16(0) && y56 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x44 = x56;
											var this_y44 = y56;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x44,this_y44)));
										}
										var position45 = (y56 * this4.getUInt16(0) + x56) * 4;
										position45 += vision_ds_Image.OFFSET;
										var value45 = this4.b[position45] << 24 | this4.b[position45 + 1] << 16 | this4.b[position45 + 2] << 8 | this4.b[position45 + 3];
										if(value45 == null) {
											value45 = 0;
										}
										var this53 = value45;
										var x57 = (x6 | 0) + 1;
										var y57 = y6 | 0;
										if(!(x57 >= 0 && y57 >= 0 && x57 < this4.getUInt16(0) && y57 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x45 = x57;
											var this_y45 = y57;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x45,this_y45)));
										}
										var position46 = (y57 * this4.getUInt16(0) + x57) * 4;
										position46 += vision_ds_Image.OFFSET;
										var value46 = this4.b[position46] << 24 | this4.b[position46 + 1] << 16 | this4.b[position46 + 2] << 8 | this4.b[position46 + 3];
										if(value46 == null) {
											value46 = 0;
										}
										var this54 = value46;
										var x58 = x6 | 0;
										var y58 = (y6 | 0) + 1;
										if(!(x58 >= 0 && y58 >= 0 && x58 < this4.getUInt16(0) && y58 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x46 = x58;
											var this_y46 = y58;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x46,this_y46)));
										}
										var position47 = (y58 * this4.getUInt16(0) + x58) * 4;
										position47 += vision_ds_Image.OFFSET;
										var value47 = this4.b[position47] << 24 | this4.b[position47 + 1] << 16 | this4.b[position47 + 2] << 8 | this4.b[position47 + 3];
										if(value47 == null) {
											value47 = 0;
										}
										var this55 = value47;
										var x59 = (x6 | 0) + 1;
										var y59 = (y6 | 0) + 1;
										if(!(x59 >= 0 && y59 >= 0 && x59 < this4.getUInt16(0) && y59 < Math.ceil((this4.length - vision_ds_Image.OFFSET) / (this4.getUInt16(0) * 4)))) {
											var this_x47 = x59;
											var this_y47 = y59;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this4,new vision_ds_Point2D(this_x47,this_y47)));
										}
										var position48 = (y59 * this4.getUInt16(0) + x59) * 4;
										position48 += vision_ds_Image.OFFSET;
										var value48 = this4.b[position48] << 24 | this4.b[position48 + 1] << 16 | this4.b[position48 + 2] << 8 | this4.b[position48 + 3];
										if(value48 == null) {
											value48 = 0;
										}
										var this56 = value48;
										var alpha2 = (1 - yFraction2) * ((1 - xFraction2) * (this53 >> 24 & 255) + xFraction2 * (this54 >> 24 & 255)) + yFraction2 * ((1 - xFraction2) * (this55 >> 24 & 255) + xFraction2 * (this56 >> 24 & 255)) | 0;
										var Alpha4 = alpha2;
										if(Alpha4 == null) {
											Alpha4 = 255;
										}
										var this57 = 0;
										var color2 = this57;
										var Alpha5 = Alpha4;
										if(Alpha5 == null) {
											Alpha5 = 255;
										}
										color2 &= -16711681;
										color2 |= (red2 > 255 ? 255 : red2 < 0 ? 0 : red2) << 16;
										color2 &= -65281;
										color2 |= (green2 > 255 ? 255 : green2 < 0 ? 0 : green2) << 8;
										color2 &= -256;
										color2 |= blue2 > 255 ? 255 : blue2 < 0 ? 0 : blue2;
										color2 &= 16777215;
										color2 |= (Alpha5 > 255 ? 255 : Alpha5 < 0 ? 0 : Alpha5) << 24;
										lhs = color2;
									}
								} else {
									var yFraction3 = y4 - (y4 | 0);
									var xFraction3 = x4 - (x4 | 0);
									var x60 = x4 | 0;
									var y60 = y4 | 0;
									if(!(x60 >= 0 && y60 >= 0 && x60 < this3.getUInt16(0) && y60 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x48 = x60;
										var this_y48 = y60;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x48,this_y48)));
									}
									var position49 = (y60 * this3.getUInt16(0) + x60) * 4;
									position49 += vision_ds_Image.OFFSET;
									var value49 = this3.b[position49] << 24 | this3.b[position49 + 1] << 16 | this3.b[position49 + 2] << 8 | this3.b[position49 + 3];
									if(value49 == null) {
										value49 = 0;
									}
									var this58 = value49;
									var x61 = (x4 | 0) + 1;
									var y61 = y4 | 0;
									if(!(x61 >= 0 && y61 >= 0 && x61 < this3.getUInt16(0) && y61 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x49 = x61;
										var this_y49 = y61;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x49,this_y49)));
									}
									var position50 = (y61 * this3.getUInt16(0) + x61) * 4;
									position50 += vision_ds_Image.OFFSET;
									var value50 = this3.b[position50] << 24 | this3.b[position50 + 1] << 16 | this3.b[position50 + 2] << 8 | this3.b[position50 + 3];
									if(value50 == null) {
										value50 = 0;
									}
									var this59 = value50;
									var x62 = x4 | 0;
									var y62 = (y4 | 0) + 1;
									if(!(x62 >= 0 && y62 >= 0 && x62 < this3.getUInt16(0) && y62 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x50 = x62;
										var this_y50 = y62;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x50,this_y50)));
									}
									var position51 = (y62 * this3.getUInt16(0) + x62) * 4;
									position51 += vision_ds_Image.OFFSET;
									var value51 = this3.b[position51] << 24 | this3.b[position51 + 1] << 16 | this3.b[position51 + 2] << 8 | this3.b[position51 + 3];
									if(value51 == null) {
										value51 = 0;
									}
									var this60 = value51;
									var x63 = (x4 | 0) + 1;
									var y63 = (y4 | 0) + 1;
									if(!(x63 >= 0 && y63 >= 0 && x63 < this3.getUInt16(0) && y63 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x51 = x63;
										var this_y51 = y63;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x51,this_y51)));
									}
									var position52 = (y63 * this3.getUInt16(0) + x63) * 4;
									position52 += vision_ds_Image.OFFSET;
									var value52 = this3.b[position52] << 24 | this3.b[position52 + 1] << 16 | this3.b[position52 + 2] << 8 | this3.b[position52 + 3];
									if(value52 == null) {
										value52 = 0;
									}
									var this61 = value52;
									var red3 = (1 - yFraction3) * ((1 - xFraction3) * (this58 >> 16 & 255) + xFraction3 * (this59 >> 16 & 255)) + yFraction3 * ((1 - xFraction3) * (this60 >> 16 & 255) + xFraction3 * (this61 >> 16 & 255)) | 0;
									var x64 = x4 | 0;
									var y64 = y4 | 0;
									if(!(x64 >= 0 && y64 >= 0 && x64 < this3.getUInt16(0) && y64 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x52 = x64;
										var this_y52 = y64;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x52,this_y52)));
									}
									var position53 = (y64 * this3.getUInt16(0) + x64) * 4;
									position53 += vision_ds_Image.OFFSET;
									var value53 = this3.b[position53] << 24 | this3.b[position53 + 1] << 16 | this3.b[position53 + 2] << 8 | this3.b[position53 + 3];
									if(value53 == null) {
										value53 = 0;
									}
									var this62 = value53;
									var x65 = (x4 | 0) + 1;
									var y65 = y4 | 0;
									if(!(x65 >= 0 && y65 >= 0 && x65 < this3.getUInt16(0) && y65 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x53 = x65;
										var this_y53 = y65;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x53,this_y53)));
									}
									var position54 = (y65 * this3.getUInt16(0) + x65) * 4;
									position54 += vision_ds_Image.OFFSET;
									var value54 = this3.b[position54] << 24 | this3.b[position54 + 1] << 16 | this3.b[position54 + 2] << 8 | this3.b[position54 + 3];
									if(value54 == null) {
										value54 = 0;
									}
									var this63 = value54;
									var x66 = x4 | 0;
									var y66 = (y4 | 0) + 1;
									if(!(x66 >= 0 && y66 >= 0 && x66 < this3.getUInt16(0) && y66 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x54 = x66;
										var this_y54 = y66;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x54,this_y54)));
									}
									var position55 = (y66 * this3.getUInt16(0) + x66) * 4;
									position55 += vision_ds_Image.OFFSET;
									var value55 = this3.b[position55] << 24 | this3.b[position55 + 1] << 16 | this3.b[position55 + 2] << 8 | this3.b[position55 + 3];
									if(value55 == null) {
										value55 = 0;
									}
									var this64 = value55;
									var x67 = (x4 | 0) + 1;
									var y67 = (y4 | 0) + 1;
									if(!(x67 >= 0 && y67 >= 0 && x67 < this3.getUInt16(0) && y67 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x55 = x67;
										var this_y55 = y67;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x55,this_y55)));
									}
									var position56 = (y67 * this3.getUInt16(0) + x67) * 4;
									position56 += vision_ds_Image.OFFSET;
									var value56 = this3.b[position56] << 24 | this3.b[position56 + 1] << 16 | this3.b[position56 + 2] << 8 | this3.b[position56 + 3];
									if(value56 == null) {
										value56 = 0;
									}
									var this65 = value56;
									var green3 = (1 - yFraction3) * ((1 - xFraction3) * (this62 >> 8 & 255) + xFraction3 * (this63 >> 8 & 255)) + yFraction3 * ((1 - xFraction3) * (this64 >> 8 & 255) + xFraction3 * (this65 >> 8 & 255)) | 0;
									var x68 = x4 | 0;
									var y68 = y4 | 0;
									if(!(x68 >= 0 && y68 >= 0 && x68 < this3.getUInt16(0) && y68 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x56 = x68;
										var this_y56 = y68;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x56,this_y56)));
									}
									var position57 = (y68 * this3.getUInt16(0) + x68) * 4;
									position57 += vision_ds_Image.OFFSET;
									var value57 = this3.b[position57] << 24 | this3.b[position57 + 1] << 16 | this3.b[position57 + 2] << 8 | this3.b[position57 + 3];
									if(value57 == null) {
										value57 = 0;
									}
									var this66 = value57;
									var x69 = (x4 | 0) + 1;
									var y69 = y4 | 0;
									if(!(x69 >= 0 && y69 >= 0 && x69 < this3.getUInt16(0) && y69 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x57 = x69;
										var this_y57 = y69;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x57,this_y57)));
									}
									var position58 = (y69 * this3.getUInt16(0) + x69) * 4;
									position58 += vision_ds_Image.OFFSET;
									var value58 = this3.b[position58] << 24 | this3.b[position58 + 1] << 16 | this3.b[position58 + 2] << 8 | this3.b[position58 + 3];
									if(value58 == null) {
										value58 = 0;
									}
									var this67 = value58;
									var x70 = x4 | 0;
									var y70 = (y4 | 0) + 1;
									if(!(x70 >= 0 && y70 >= 0 && x70 < this3.getUInt16(0) && y70 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x58 = x70;
										var this_y58 = y70;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x58,this_y58)));
									}
									var position59 = (y70 * this3.getUInt16(0) + x70) * 4;
									position59 += vision_ds_Image.OFFSET;
									var value59 = this3.b[position59] << 24 | this3.b[position59 + 1] << 16 | this3.b[position59 + 2] << 8 | this3.b[position59 + 3];
									if(value59 == null) {
										value59 = 0;
									}
									var this68 = value59;
									var x71 = (x4 | 0) + 1;
									var y71 = (y4 | 0) + 1;
									if(!(x71 >= 0 && y71 >= 0 && x71 < this3.getUInt16(0) && y71 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x59 = x71;
										var this_y59 = y71;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x59,this_y59)));
									}
									var position60 = (y71 * this3.getUInt16(0) + x71) * 4;
									position60 += vision_ds_Image.OFFSET;
									var value60 = this3.b[position60] << 24 | this3.b[position60 + 1] << 16 | this3.b[position60 + 2] << 8 | this3.b[position60 + 3];
									if(value60 == null) {
										value60 = 0;
									}
									var this69 = value60;
									var blue3 = (1 - yFraction3) * ((1 - xFraction3) * (this66 & 255) + xFraction3 * (this67 & 255)) + yFraction3 * ((1 - xFraction3) * (this68 & 255) + xFraction3 * (this69 & 255)) | 0;
									var x72 = x4 | 0;
									var y72 = y4 | 0;
									if(!(x72 >= 0 && y72 >= 0 && x72 < this3.getUInt16(0) && y72 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x60 = x72;
										var this_y60 = y72;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x60,this_y60)));
									}
									var position61 = (y72 * this3.getUInt16(0) + x72) * 4;
									position61 += vision_ds_Image.OFFSET;
									var value61 = this3.b[position61] << 24 | this3.b[position61 + 1] << 16 | this3.b[position61 + 2] << 8 | this3.b[position61 + 3];
									if(value61 == null) {
										value61 = 0;
									}
									var this70 = value61;
									var x73 = (x4 | 0) + 1;
									var y73 = y4 | 0;
									if(!(x73 >= 0 && y73 >= 0 && x73 < this3.getUInt16(0) && y73 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x61 = x73;
										var this_y61 = y73;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x61,this_y61)));
									}
									var position62 = (y73 * this3.getUInt16(0) + x73) * 4;
									position62 += vision_ds_Image.OFFSET;
									var value62 = this3.b[position62] << 24 | this3.b[position62 + 1] << 16 | this3.b[position62 + 2] << 8 | this3.b[position62 + 3];
									if(value62 == null) {
										value62 = 0;
									}
									var this71 = value62;
									var x74 = x4 | 0;
									var y74 = (y4 | 0) + 1;
									if(!(x74 >= 0 && y74 >= 0 && x74 < this3.getUInt16(0) && y74 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x62 = x74;
										var this_y62 = y74;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x62,this_y62)));
									}
									var position63 = (y74 * this3.getUInt16(0) + x74) * 4;
									position63 += vision_ds_Image.OFFSET;
									var value63 = this3.b[position63] << 24 | this3.b[position63 + 1] << 16 | this3.b[position63 + 2] << 8 | this3.b[position63 + 3];
									if(value63 == null) {
										value63 = 0;
									}
									var this72 = value63;
									var x75 = (x4 | 0) + 1;
									var y75 = (y4 | 0) + 1;
									if(!(x75 >= 0 && y75 >= 0 && x75 < this3.getUInt16(0) && y75 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
										var this_x63 = x75;
										var this_y63 = y75;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x63,this_y63)));
									}
									var position64 = (y75 * this3.getUInt16(0) + x75) * 4;
									position64 += vision_ds_Image.OFFSET;
									var value64 = this3.b[position64] << 24 | this3.b[position64 + 1] << 16 | this3.b[position64 + 2] << 8 | this3.b[position64 + 3];
									if(value64 == null) {
										value64 = 0;
									}
									var this73 = value64;
									var alpha3 = (1 - yFraction3) * ((1 - xFraction3) * (this70 >> 24 & 255) + xFraction3 * (this71 >> 24 & 255)) + yFraction3 * ((1 - xFraction3) * (this72 >> 24 & 255) + xFraction3 * (this73 >> 24 & 255)) | 0;
									var Alpha6 = alpha3;
									if(Alpha6 == null) {
										Alpha6 = 255;
									}
									var this74 = 0;
									var color3 = this74;
									var Alpha7 = Alpha6;
									if(Alpha7 == null) {
										Alpha7 = 255;
									}
									color3 &= -16711681;
									color3 |= (red3 > 255 ? 255 : red3 < 0 ? 0 : red3) << 16;
									color3 &= -65281;
									color3 |= (green3 > 255 ? 255 : green3 < 0 ? 0 : green3) << 8;
									color3 &= -256;
									color3 |= blue3 > 255 ? 255 : blue3 < 0 ? 0 : blue3;
									color3 &= 16777215;
									color3 |= (Alpha7 > 255 ? 255 : Alpha7 < 0 ? 0 : Alpha7) << 24;
									lhs = color3;
								}
							} else {
								var yFraction4 = y2 - (y2 | 0);
								var xFraction4 = x2 - (x2 | 0);
								var x76 = x2 | 0;
								var y76 = y2 | 0;
								if(!(x76 >= 0 && y76 >= 0 && x76 < this2.getUInt16(0) && y76 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x64 = x76;
									var this_y64 = y76;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x64,this_y64)));
								}
								var position65 = (y76 * this2.getUInt16(0) + x76) * 4;
								position65 += vision_ds_Image.OFFSET;
								var value65 = this2.b[position65] << 24 | this2.b[position65 + 1] << 16 | this2.b[position65 + 2] << 8 | this2.b[position65 + 3];
								if(value65 == null) {
									value65 = 0;
								}
								var this75 = value65;
								var x77 = (x2 | 0) + 1;
								var y77 = y2 | 0;
								if(!(x77 >= 0 && y77 >= 0 && x77 < this2.getUInt16(0) && y77 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x65 = x77;
									var this_y65 = y77;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x65,this_y65)));
								}
								var position66 = (y77 * this2.getUInt16(0) + x77) * 4;
								position66 += vision_ds_Image.OFFSET;
								var value66 = this2.b[position66] << 24 | this2.b[position66 + 1] << 16 | this2.b[position66 + 2] << 8 | this2.b[position66 + 3];
								if(value66 == null) {
									value66 = 0;
								}
								var this76 = value66;
								var x78 = x2 | 0;
								var y78 = (y2 | 0) + 1;
								if(!(x78 >= 0 && y78 >= 0 && x78 < this2.getUInt16(0) && y78 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x66 = x78;
									var this_y66 = y78;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x66,this_y66)));
								}
								var position67 = (y78 * this2.getUInt16(0) + x78) * 4;
								position67 += vision_ds_Image.OFFSET;
								var value67 = this2.b[position67] << 24 | this2.b[position67 + 1] << 16 | this2.b[position67 + 2] << 8 | this2.b[position67 + 3];
								if(value67 == null) {
									value67 = 0;
								}
								var this77 = value67;
								var x79 = (x2 | 0) + 1;
								var y79 = (y2 | 0) + 1;
								if(!(x79 >= 0 && y79 >= 0 && x79 < this2.getUInt16(0) && y79 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x67 = x79;
									var this_y67 = y79;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x67,this_y67)));
								}
								var position68 = (y79 * this2.getUInt16(0) + x79) * 4;
								position68 += vision_ds_Image.OFFSET;
								var value68 = this2.b[position68] << 24 | this2.b[position68 + 1] << 16 | this2.b[position68 + 2] << 8 | this2.b[position68 + 3];
								if(value68 == null) {
									value68 = 0;
								}
								var this78 = value68;
								var red4 = (1 - yFraction4) * ((1 - xFraction4) * (this75 >> 16 & 255) + xFraction4 * (this76 >> 16 & 255)) + yFraction4 * ((1 - xFraction4) * (this77 >> 16 & 255) + xFraction4 * (this78 >> 16 & 255)) | 0;
								var x80 = x2 | 0;
								var y80 = y2 | 0;
								if(!(x80 >= 0 && y80 >= 0 && x80 < this2.getUInt16(0) && y80 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x68 = x80;
									var this_y68 = y80;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x68,this_y68)));
								}
								var position69 = (y80 * this2.getUInt16(0) + x80) * 4;
								position69 += vision_ds_Image.OFFSET;
								var value69 = this2.b[position69] << 24 | this2.b[position69 + 1] << 16 | this2.b[position69 + 2] << 8 | this2.b[position69 + 3];
								if(value69 == null) {
									value69 = 0;
								}
								var this79 = value69;
								var x81 = (x2 | 0) + 1;
								var y81 = y2 | 0;
								if(!(x81 >= 0 && y81 >= 0 && x81 < this2.getUInt16(0) && y81 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x69 = x81;
									var this_y69 = y81;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x69,this_y69)));
								}
								var position70 = (y81 * this2.getUInt16(0) + x81) * 4;
								position70 += vision_ds_Image.OFFSET;
								var value70 = this2.b[position70] << 24 | this2.b[position70 + 1] << 16 | this2.b[position70 + 2] << 8 | this2.b[position70 + 3];
								if(value70 == null) {
									value70 = 0;
								}
								var this80 = value70;
								var x82 = x2 | 0;
								var y82 = (y2 | 0) + 1;
								if(!(x82 >= 0 && y82 >= 0 && x82 < this2.getUInt16(0) && y82 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x70 = x82;
									var this_y70 = y82;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x70,this_y70)));
								}
								var position71 = (y82 * this2.getUInt16(0) + x82) * 4;
								position71 += vision_ds_Image.OFFSET;
								var value71 = this2.b[position71] << 24 | this2.b[position71 + 1] << 16 | this2.b[position71 + 2] << 8 | this2.b[position71 + 3];
								if(value71 == null) {
									value71 = 0;
								}
								var this81 = value71;
								var x83 = (x2 | 0) + 1;
								var y83 = (y2 | 0) + 1;
								if(!(x83 >= 0 && y83 >= 0 && x83 < this2.getUInt16(0) && y83 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x71 = x83;
									var this_y71 = y83;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x71,this_y71)));
								}
								var position72 = (y83 * this2.getUInt16(0) + x83) * 4;
								position72 += vision_ds_Image.OFFSET;
								var value72 = this2.b[position72] << 24 | this2.b[position72 + 1] << 16 | this2.b[position72 + 2] << 8 | this2.b[position72 + 3];
								if(value72 == null) {
									value72 = 0;
								}
								var this82 = value72;
								var green4 = (1 - yFraction4) * ((1 - xFraction4) * (this79 >> 8 & 255) + xFraction4 * (this80 >> 8 & 255)) + yFraction4 * ((1 - xFraction4) * (this81 >> 8 & 255) + xFraction4 * (this82 >> 8 & 255)) | 0;
								var x84 = x2 | 0;
								var y84 = y2 | 0;
								if(!(x84 >= 0 && y84 >= 0 && x84 < this2.getUInt16(0) && y84 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x72 = x84;
									var this_y72 = y84;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x72,this_y72)));
								}
								var position73 = (y84 * this2.getUInt16(0) + x84) * 4;
								position73 += vision_ds_Image.OFFSET;
								var value73 = this2.b[position73] << 24 | this2.b[position73 + 1] << 16 | this2.b[position73 + 2] << 8 | this2.b[position73 + 3];
								if(value73 == null) {
									value73 = 0;
								}
								var this83 = value73;
								var x85 = (x2 | 0) + 1;
								var y85 = y2 | 0;
								if(!(x85 >= 0 && y85 >= 0 && x85 < this2.getUInt16(0) && y85 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x73 = x85;
									var this_y73 = y85;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x73,this_y73)));
								}
								var position74 = (y85 * this2.getUInt16(0) + x85) * 4;
								position74 += vision_ds_Image.OFFSET;
								var value74 = this2.b[position74] << 24 | this2.b[position74 + 1] << 16 | this2.b[position74 + 2] << 8 | this2.b[position74 + 3];
								if(value74 == null) {
									value74 = 0;
								}
								var this84 = value74;
								var x86 = x2 | 0;
								var y86 = (y2 | 0) + 1;
								if(!(x86 >= 0 && y86 >= 0 && x86 < this2.getUInt16(0) && y86 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x74 = x86;
									var this_y74 = y86;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x74,this_y74)));
								}
								var position75 = (y86 * this2.getUInt16(0) + x86) * 4;
								position75 += vision_ds_Image.OFFSET;
								var value75 = this2.b[position75] << 24 | this2.b[position75 + 1] << 16 | this2.b[position75 + 2] << 8 | this2.b[position75 + 3];
								if(value75 == null) {
									value75 = 0;
								}
								var this85 = value75;
								var x87 = (x2 | 0) + 1;
								var y87 = (y2 | 0) + 1;
								if(!(x87 >= 0 && y87 >= 0 && x87 < this2.getUInt16(0) && y87 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x75 = x87;
									var this_y75 = y87;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x75,this_y75)));
								}
								var position76 = (y87 * this2.getUInt16(0) + x87) * 4;
								position76 += vision_ds_Image.OFFSET;
								var value76 = this2.b[position76] << 24 | this2.b[position76 + 1] << 16 | this2.b[position76 + 2] << 8 | this2.b[position76 + 3];
								if(value76 == null) {
									value76 = 0;
								}
								var this86 = value76;
								var blue4 = (1 - yFraction4) * ((1 - xFraction4) * (this83 & 255) + xFraction4 * (this84 & 255)) + yFraction4 * ((1 - xFraction4) * (this85 & 255) + xFraction4 * (this86 & 255)) | 0;
								var x88 = x2 | 0;
								var y88 = y2 | 0;
								if(!(x88 >= 0 && y88 >= 0 && x88 < this2.getUInt16(0) && y88 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x76 = x88;
									var this_y76 = y88;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x76,this_y76)));
								}
								var position77 = (y88 * this2.getUInt16(0) + x88) * 4;
								position77 += vision_ds_Image.OFFSET;
								var value77 = this2.b[position77] << 24 | this2.b[position77 + 1] << 16 | this2.b[position77 + 2] << 8 | this2.b[position77 + 3];
								if(value77 == null) {
									value77 = 0;
								}
								var this87 = value77;
								var x89 = (x2 | 0) + 1;
								var y89 = y2 | 0;
								if(!(x89 >= 0 && y89 >= 0 && x89 < this2.getUInt16(0) && y89 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x77 = x89;
									var this_y77 = y89;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x77,this_y77)));
								}
								var position78 = (y89 * this2.getUInt16(0) + x89) * 4;
								position78 += vision_ds_Image.OFFSET;
								var value78 = this2.b[position78] << 24 | this2.b[position78 + 1] << 16 | this2.b[position78 + 2] << 8 | this2.b[position78 + 3];
								if(value78 == null) {
									value78 = 0;
								}
								var this88 = value78;
								var x90 = x2 | 0;
								var y90 = (y2 | 0) + 1;
								if(!(x90 >= 0 && y90 >= 0 && x90 < this2.getUInt16(0) && y90 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x78 = x90;
									var this_y78 = y90;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x78,this_y78)));
								}
								var position79 = (y90 * this2.getUInt16(0) + x90) * 4;
								position79 += vision_ds_Image.OFFSET;
								var value79 = this2.b[position79] << 24 | this2.b[position79 + 1] << 16 | this2.b[position79 + 2] << 8 | this2.b[position79 + 3];
								if(value79 == null) {
									value79 = 0;
								}
								var this89 = value79;
								var x91 = (x2 | 0) + 1;
								var y91 = (y2 | 0) + 1;
								if(!(x91 >= 0 && y91 >= 0 && x91 < this2.getUInt16(0) && y91 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x79 = x91;
									var this_y79 = y91;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x79,this_y79)));
								}
								var position80 = (y91 * this2.getUInt16(0) + x91) * 4;
								position80 += vision_ds_Image.OFFSET;
								var value80 = this2.b[position80] << 24 | this2.b[position80 + 1] << 16 | this2.b[position80 + 2] << 8 | this2.b[position80 + 3];
								if(value80 == null) {
									value80 = 0;
								}
								var this90 = value80;
								var alpha4 = (1 - yFraction4) * ((1 - xFraction4) * (this87 >> 24 & 255) + xFraction4 * (this88 >> 24 & 255)) + yFraction4 * ((1 - xFraction4) * (this89 >> 24 & 255) + xFraction4 * (this90 >> 24 & 255)) | 0;
								var Alpha8 = alpha4;
								if(Alpha8 == null) {
									Alpha8 = 255;
								}
								var this91 = 0;
								var color4 = this91;
								var Alpha9 = Alpha8;
								if(Alpha9 == null) {
									Alpha9 = 255;
								}
								color4 &= -16711681;
								color4 |= (red4 > 255 ? 255 : red4 < 0 ? 0 : red4) << 16;
								color4 &= -65281;
								color4 |= (green4 > 255 ? 255 : green4 < 0 ? 0 : green4) << 8;
								color4 &= -256;
								color4 |= blue4 > 255 ? 255 : blue4 < 0 ? 0 : blue4;
								color4 &= 16777215;
								color4 |= (Alpha9 > 255 ? 255 : Alpha9 < 0 ? 0 : Alpha9) << 24;
								lhs = color4;
							}
						} else {
							var yFraction5 = rhoIndex - (rhoIndex | 0);
							var xFraction5 = deg - (deg | 0);
							var x92 = deg | 0;
							var y92 = rhoIndex | 0;
							if(!(x92 >= 0 && y92 >= 0 && x92 < accumulator.getUInt16(0) && y92 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x80 = x92;
								var this_y80 = y92;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x80,this_y80)));
							}
							var position81 = (y92 * accumulator.getUInt16(0) + x92) * 4;
							position81 += vision_ds_Image.OFFSET;
							var value81 = accumulator.b[position81] << 24 | accumulator.b[position81 + 1] << 16 | accumulator.b[position81 + 2] << 8 | accumulator.b[position81 + 3];
							if(value81 == null) {
								value81 = 0;
							}
							var this92 = value81;
							var x93 = (deg | 0) + 1;
							var y93 = rhoIndex | 0;
							if(!(x93 >= 0 && y93 >= 0 && x93 < accumulator.getUInt16(0) && y93 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x81 = x93;
								var this_y81 = y93;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x81,this_y81)));
							}
							var position82 = (y93 * accumulator.getUInt16(0) + x93) * 4;
							position82 += vision_ds_Image.OFFSET;
							var value82 = accumulator.b[position82] << 24 | accumulator.b[position82 + 1] << 16 | accumulator.b[position82 + 2] << 8 | accumulator.b[position82 + 3];
							if(value82 == null) {
								value82 = 0;
							}
							var this93 = value82;
							var x94 = deg | 0;
							var y94 = (rhoIndex | 0) + 1;
							if(!(x94 >= 0 && y94 >= 0 && x94 < accumulator.getUInt16(0) && y94 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x82 = x94;
								var this_y82 = y94;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x82,this_y82)));
							}
							var position83 = (y94 * accumulator.getUInt16(0) + x94) * 4;
							position83 += vision_ds_Image.OFFSET;
							var value83 = accumulator.b[position83] << 24 | accumulator.b[position83 + 1] << 16 | accumulator.b[position83 + 2] << 8 | accumulator.b[position83 + 3];
							if(value83 == null) {
								value83 = 0;
							}
							var this94 = value83;
							var x95 = (deg | 0) + 1;
							var y95 = (rhoIndex | 0) + 1;
							if(!(x95 >= 0 && y95 >= 0 && x95 < accumulator.getUInt16(0) && y95 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x83 = x95;
								var this_y83 = y95;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x83,this_y83)));
							}
							var position84 = (y95 * accumulator.getUInt16(0) + x95) * 4;
							position84 += vision_ds_Image.OFFSET;
							var value84 = accumulator.b[position84] << 24 | accumulator.b[position84 + 1] << 16 | accumulator.b[position84 + 2] << 8 | accumulator.b[position84 + 3];
							if(value84 == null) {
								value84 = 0;
							}
							var this95 = value84;
							var red5 = (1 - yFraction5) * ((1 - xFraction5) * (this92 >> 16 & 255) + xFraction5 * (this93 >> 16 & 255)) + yFraction5 * ((1 - xFraction5) * (this94 >> 16 & 255) + xFraction5 * (this95 >> 16 & 255)) | 0;
							var x96 = deg | 0;
							var y96 = rhoIndex | 0;
							if(!(x96 >= 0 && y96 >= 0 && x96 < accumulator.getUInt16(0) && y96 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x84 = x96;
								var this_y84 = y96;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x84,this_y84)));
							}
							var position85 = (y96 * accumulator.getUInt16(0) + x96) * 4;
							position85 += vision_ds_Image.OFFSET;
							var value85 = accumulator.b[position85] << 24 | accumulator.b[position85 + 1] << 16 | accumulator.b[position85 + 2] << 8 | accumulator.b[position85 + 3];
							if(value85 == null) {
								value85 = 0;
							}
							var this96 = value85;
							var x97 = (deg | 0) + 1;
							var y97 = rhoIndex | 0;
							if(!(x97 >= 0 && y97 >= 0 && x97 < accumulator.getUInt16(0) && y97 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x85 = x97;
								var this_y85 = y97;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x85,this_y85)));
							}
							var position86 = (y97 * accumulator.getUInt16(0) + x97) * 4;
							position86 += vision_ds_Image.OFFSET;
							var value86 = accumulator.b[position86] << 24 | accumulator.b[position86 + 1] << 16 | accumulator.b[position86 + 2] << 8 | accumulator.b[position86 + 3];
							if(value86 == null) {
								value86 = 0;
							}
							var this97 = value86;
							var x98 = deg | 0;
							var y98 = (rhoIndex | 0) + 1;
							if(!(x98 >= 0 && y98 >= 0 && x98 < accumulator.getUInt16(0) && y98 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x86 = x98;
								var this_y86 = y98;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x86,this_y86)));
							}
							var position87 = (y98 * accumulator.getUInt16(0) + x98) * 4;
							position87 += vision_ds_Image.OFFSET;
							var value87 = accumulator.b[position87] << 24 | accumulator.b[position87 + 1] << 16 | accumulator.b[position87 + 2] << 8 | accumulator.b[position87 + 3];
							if(value87 == null) {
								value87 = 0;
							}
							var this98 = value87;
							var x99 = (deg | 0) + 1;
							var y99 = (rhoIndex | 0) + 1;
							if(!(x99 >= 0 && y99 >= 0 && x99 < accumulator.getUInt16(0) && y99 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x87 = x99;
								var this_y87 = y99;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x87,this_y87)));
							}
							var position88 = (y99 * accumulator.getUInt16(0) + x99) * 4;
							position88 += vision_ds_Image.OFFSET;
							var value88 = accumulator.b[position88] << 24 | accumulator.b[position88 + 1] << 16 | accumulator.b[position88 + 2] << 8 | accumulator.b[position88 + 3];
							if(value88 == null) {
								value88 = 0;
							}
							var this99 = value88;
							var green5 = (1 - yFraction5) * ((1 - xFraction5) * (this96 >> 8 & 255) + xFraction5 * (this97 >> 8 & 255)) + yFraction5 * ((1 - xFraction5) * (this98 >> 8 & 255) + xFraction5 * (this99 >> 8 & 255)) | 0;
							var x100 = deg | 0;
							var y100 = rhoIndex | 0;
							if(!(x100 >= 0 && y100 >= 0 && x100 < accumulator.getUInt16(0) && y100 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x88 = x100;
								var this_y88 = y100;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x88,this_y88)));
							}
							var position89 = (y100 * accumulator.getUInt16(0) + x100) * 4;
							position89 += vision_ds_Image.OFFSET;
							var value89 = accumulator.b[position89] << 24 | accumulator.b[position89 + 1] << 16 | accumulator.b[position89 + 2] << 8 | accumulator.b[position89 + 3];
							if(value89 == null) {
								value89 = 0;
							}
							var this100 = value89;
							var x101 = (deg | 0) + 1;
							var y101 = rhoIndex | 0;
							if(!(x101 >= 0 && y101 >= 0 && x101 < accumulator.getUInt16(0) && y101 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x89 = x101;
								var this_y89 = y101;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x89,this_y89)));
							}
							var position90 = (y101 * accumulator.getUInt16(0) + x101) * 4;
							position90 += vision_ds_Image.OFFSET;
							var value90 = accumulator.b[position90] << 24 | accumulator.b[position90 + 1] << 16 | accumulator.b[position90 + 2] << 8 | accumulator.b[position90 + 3];
							if(value90 == null) {
								value90 = 0;
							}
							var this101 = value90;
							var x102 = deg | 0;
							var y102 = (rhoIndex | 0) + 1;
							if(!(x102 >= 0 && y102 >= 0 && x102 < accumulator.getUInt16(0) && y102 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x90 = x102;
								var this_y90 = y102;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x90,this_y90)));
							}
							var position91 = (y102 * accumulator.getUInt16(0) + x102) * 4;
							position91 += vision_ds_Image.OFFSET;
							var value91 = accumulator.b[position91] << 24 | accumulator.b[position91 + 1] << 16 | accumulator.b[position91 + 2] << 8 | accumulator.b[position91 + 3];
							if(value91 == null) {
								value91 = 0;
							}
							var this102 = value91;
							var x103 = (deg | 0) + 1;
							var y103 = (rhoIndex | 0) + 1;
							if(!(x103 >= 0 && y103 >= 0 && x103 < accumulator.getUInt16(0) && y103 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x91 = x103;
								var this_y91 = y103;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x91,this_y91)));
							}
							var position92 = (y103 * accumulator.getUInt16(0) + x103) * 4;
							position92 += vision_ds_Image.OFFSET;
							var value92 = accumulator.b[position92] << 24 | accumulator.b[position92 + 1] << 16 | accumulator.b[position92 + 2] << 8 | accumulator.b[position92 + 3];
							if(value92 == null) {
								value92 = 0;
							}
							var this103 = value92;
							var blue5 = (1 - yFraction5) * ((1 - xFraction5) * (this100 & 255) + xFraction5 * (this101 & 255)) + yFraction5 * ((1 - xFraction5) * (this102 & 255) + xFraction5 * (this103 & 255)) | 0;
							var x104 = deg | 0;
							var y104 = rhoIndex | 0;
							if(!(x104 >= 0 && y104 >= 0 && x104 < accumulator.getUInt16(0) && y104 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x92 = x104;
								var this_y92 = y104;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x92,this_y92)));
							}
							var position93 = (y104 * accumulator.getUInt16(0) + x104) * 4;
							position93 += vision_ds_Image.OFFSET;
							var value93 = accumulator.b[position93] << 24 | accumulator.b[position93 + 1] << 16 | accumulator.b[position93 + 2] << 8 | accumulator.b[position93 + 3];
							if(value93 == null) {
								value93 = 0;
							}
							var this104 = value93;
							var x105 = (deg | 0) + 1;
							var y105 = rhoIndex | 0;
							if(!(x105 >= 0 && y105 >= 0 && x105 < accumulator.getUInt16(0) && y105 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x93 = x105;
								var this_y93 = y105;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x93,this_y93)));
							}
							var position94 = (y105 * accumulator.getUInt16(0) + x105) * 4;
							position94 += vision_ds_Image.OFFSET;
							var value94 = accumulator.b[position94] << 24 | accumulator.b[position94 + 1] << 16 | accumulator.b[position94 + 2] << 8 | accumulator.b[position94 + 3];
							if(value94 == null) {
								value94 = 0;
							}
							var this105 = value94;
							var x106 = deg | 0;
							var y106 = (rhoIndex | 0) + 1;
							if(!(x106 >= 0 && y106 >= 0 && x106 < accumulator.getUInt16(0) && y106 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x94 = x106;
								var this_y94 = y106;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x94,this_y94)));
							}
							var position95 = (y106 * accumulator.getUInt16(0) + x106) * 4;
							position95 += vision_ds_Image.OFFSET;
							var value95 = accumulator.b[position95] << 24 | accumulator.b[position95 + 1] << 16 | accumulator.b[position95 + 2] << 8 | accumulator.b[position95 + 3];
							if(value95 == null) {
								value95 = 0;
							}
							var this106 = value95;
							var x107 = (deg | 0) + 1;
							var y107 = (rhoIndex | 0) + 1;
							if(!(x107 >= 0 && y107 >= 0 && x107 < accumulator.getUInt16(0) && y107 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x95 = x107;
								var this_y95 = y107;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x95,this_y95)));
							}
							var position96 = (y107 * accumulator.getUInt16(0) + x107) * 4;
							position96 += vision_ds_Image.OFFSET;
							var value96 = accumulator.b[position96] << 24 | accumulator.b[position96 + 1] << 16 | accumulator.b[position96 + 2] << 8 | accumulator.b[position96 + 3];
							if(value96 == null) {
								value96 = 0;
							}
							var this107 = value96;
							var alpha5 = (1 - yFraction5) * ((1 - xFraction5) * (this104 >> 24 & 255) + xFraction5 * (this105 >> 24 & 255)) + yFraction5 * ((1 - xFraction5) * (this106 >> 24 & 255) + xFraction5 * (this107 >> 24 & 255)) | 0;
							var Alpha10 = alpha5;
							if(Alpha10 == null) {
								Alpha10 = 255;
							}
							var this108 = 0;
							var color5 = this108;
							var Alpha11 = Alpha10;
							if(Alpha11 == null) {
								Alpha11 = 255;
							}
							color5 &= -16711681;
							color5 |= (red5 > 255 ? 255 : red5 < 0 ? 0 : red5) << 16;
							color5 &= -65281;
							color5 |= (green5 > 255 ? 255 : green5 < 0 ? 0 : green5) << 8;
							color5 &= -256;
							color5 |= blue5 > 255 ? 255 : blue5 < 0 ? 0 : blue5;
							color5 &= 16777215;
							color5 |= (Alpha11 > 255 ? 255 : Alpha11 < 0 ? 0 : Alpha11) << 24;
							lhs = color5;
						}
						var Red = lhs >> 16 & 255;
						var Green = lhs >> 8 & 255;
						var Blue = (lhs & 255) + 100;
						var Alpha12 = lhs >> 24 & 255;
						if(Alpha12 == null) {
							Alpha12 = 255;
						}
						var this109 = 0;
						var color6 = this109;
						var Alpha13 = Alpha12;
						if(Alpha13 == null) {
							Alpha13 = 255;
						}
						color6 &= -16711681;
						color6 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
						color6 &= -65281;
						color6 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
						color6 &= -256;
						color6 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
						color6 &= 16777215;
						color6 |= (Alpha13 > 255 ? 255 : Alpha13 < 0 ? 0 : Alpha13) << 24;
						var color7 = color6;
						var x108 = Math.ceil(deg);
						var y108 = Math.ceil(rhoIndex);
						if(!(x108 >= 0 && y108 >= 0 && x108 < accumulator.getUInt16(0) && y108 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
							var this110 = accumulator;
							var x109 = vision_tools_MathTools.boundFloat(deg,0,accumulator.getUInt16(0) - 1);
							var y109 = vision_tools_MathTools.boundFloat(rhoIndex,0,Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)) - 1);
							var x110 = Math.ceil(x109);
							var y110 = Math.ceil(y109);
							if(!(x110 >= 0 && y110 >= 0 && x110 < this110.getUInt16(0) && y110 < Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4)))) {
								var this111 = this110;
								var x111 = vision_tools_MathTools.boundFloat(x109,0,this110.getUInt16(0) - 1);
								var y111 = vision_tools_MathTools.boundFloat(y109,0,Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4)) - 1);
								var x112 = Math.ceil(x111);
								var y112 = Math.ceil(y111);
								if(!(x112 >= 0 && y112 >= 0 && x112 < this111.getUInt16(0) && y112 < Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4)))) {
									var this112 = this111;
									var x113 = vision_tools_MathTools.boundFloat(x111,0,this111.getUInt16(0) - 1);
									var y113 = vision_tools_MathTools.boundFloat(y111,0,Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4)) - 1);
									var x114 = Math.ceil(x113);
									var y114 = Math.ceil(y113);
									if(!(x114 >= 0 && y114 >= 0 && x114 < this112.getUInt16(0) && y114 < Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4)))) {
										vision_ds_Image.setFloatingPixel(this112,vision_tools_MathTools.boundFloat(x113,0,this112.getUInt16(0) - 1),vision_tools_MathTools.boundFloat(y113,0,Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4)) - 1),color7);
									} else {
										var yFraction6 = y113 - (y113 | 0);
										var xFraction6 = x113 - (x113 | 0);
										var x115 = Math.floor(x113);
										var y115 = Math.floor(y113);
										var Red1 = (1 - xFraction6 + (1 - yFraction6)) / 2 * ((color7 >> 16 & 255) / 255);
										var Green1 = (1 - xFraction6 + (1 - yFraction6)) / 2 * ((color7 >> 8 & 255) / 255);
										var Blue1 = (1 - xFraction6 + (1 - yFraction6)) / 2 * ((color7 & 255) / 255);
										var Alpha14 = (color7 >> 24 & 255) / 255;
										if(Alpha14 == null) {
											Alpha14 = 1;
										}
										var this113 = 0;
										var color8 = this113;
										var Alpha15 = Alpha14;
										if(Alpha15 == null) {
											Alpha15 = 1;
										}
										var value97 = Math.round(Red1 * 255);
										color8 &= -16711681;
										color8 |= (value97 > 255 ? 255 : value97 < 0 ? 0 : value97) << 16;
										var value98 = Math.round(Green1 * 255);
										color8 &= -65281;
										color8 |= (value98 > 255 ? 255 : value98 < 0 ? 0 : value98) << 8;
										var value99 = Math.round(Blue1 * 255);
										color8 &= -256;
										color8 |= value99 > 255 ? 255 : value99 < 0 ? 0 : value99;
										var value100 = Math.round(Alpha15 * 255);
										color8 &= 16777215;
										color8 |= (value100 > 255 ? 255 : value100 < 0 ? 0 : value100) << 24;
										var color9 = color8;
										if(!(x115 >= 0 && y115 >= 0 && x115 < this112.getUInt16(0) && y115 < Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4)))) {
											var this_x96 = x115;
											var this_y96 = y115;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this112,new vision_ds_Point2D(this_x96,this_y96)));
										} else if(this112.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this112.getUInt16(0) || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4)) || this112.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
											var v = null;
											var tmp;
											if(!(this112.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this112.getUInt16(0) || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4)) || this112.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
												tmp = x115 >= 0 && y115 >= 0 && x115 < this112.getUInt16(0) && y115 < Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4));
											} else {
												var has = false;
												var view;
												if(v != null) {
													view = v;
												} else {
													var _g6 = this112.getUInt16(vision_ds_Image.WIDTH_BYTES);
													var _g7 = this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
													var _g8 = this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
													var this114 = this112.b;
													var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
													view = new vision_ds_ImageView(_g6,_g7,_g8,this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this114[view1]);
												}
												switch(view.shape) {
												case 0:
													has = x115 < view.x + view.width && y115 < view.y + view.height && x115 >= view.x && y115 >= view.y;
													break;
												case 1:
													has = !(x115 < view.x + view.width && y115 < view.y + view.height && x115 >= view.x && y115 >= view.y);
													break;
												case 2:case 3:
													if(view.width > view.height) {
														var a = view.width / 2;
														var b = view.height / 2;
														var c = Math.sqrt(a * a - b * b);
														var x116 = view.x + view.width / 2 - c;
														var y116 = view.y + view.height / 2;
														if(y116 == null) {
															y116 = 0;
														}
														if(x116 == null) {
															x116 = 0;
														}
														var f1_x = x116;
														var f1_y = y116;
														var x117 = view.x + view.width / 2 + c;
														var y117 = view.y + view.height / 2;
														if(y117 == null) {
															y117 = 0;
														}
														if(x117 == null) {
															x117 = 0;
														}
														var f2_x = x117;
														var f2_y = y117;
														var x118 = x115;
														var y118 = y115;
														if(y118 == null) {
															y118 = 0;
														}
														if(x118 == null) {
															x118 = 0;
														}
														var p_x = x118;
														var p_y = y118;
														var x119 = p_x - f1_x;
														var y119 = p_y - f1_y;
														var x120 = p_x - f2_x;
														var y120 = p_y - f2_y;
														has = Math.sqrt(x119 * x119 + y119 * y119) + Math.sqrt(x120 * x120 + y120 * y120) <= view.width;
														if(view.shape == 3) {
															has = !has;
														}
													} else if(view.height > view.width) {
														var a1 = view.height / 2;
														var b1 = view.width / 2;
														var c1 = Math.sqrt(a1 * a1 - b1 * b1);
														var x121 = view.x + view.width / 2;
														var y121 = view.y + view.height / 2 - c1;
														if(y121 == null) {
															y121 = 0;
														}
														if(x121 == null) {
															x121 = 0;
														}
														var f1_x1 = x121;
														var f1_y1 = y121;
														var x122 = view.x + view.width / 2;
														var y122 = view.y + view.height / 2 + c1;
														if(y122 == null) {
															y122 = 0;
														}
														if(x122 == null) {
															x122 = 0;
														}
														var f2_x1 = x122;
														var f2_y1 = y122;
														var x123 = x115;
														var y123 = y115;
														if(y123 == null) {
															y123 = 0;
														}
														if(x123 == null) {
															x123 = 0;
														}
														var p_x1 = x123;
														var p_y1 = y123;
														var x124 = p_x1 - f1_x1;
														var y124 = p_y1 - f1_y1;
														var x125 = p_x1 - f2_x1;
														var y125 = p_y1 - f2_y1;
														has = Math.sqrt(x124 * x124 + y124 * y124) + Math.sqrt(x125 * x125 + y125 * y125) <= view.height;
														if(view.shape == 3) {
															has = !has;
														}
													} else {
														var x126 = x115;
														var y126 = y115;
														if(y126 == null) {
															y126 = 0;
														}
														if(x126 == null) {
															x126 = 0;
														}
														var point1_x = x126;
														var point1_y = y126;
														var x127 = view.x + view.width / 2;
														var y127 = view.y + view.height / 2;
														if(y127 == null) {
															y127 = 0;
														}
														if(x127 == null) {
															x127 = 0;
														}
														var point2_x = x127;
														var point2_y = y127;
														var x128 = point2_x - point1_x;
														var y128 = point2_y - point1_y;
														has = Math.sqrt(x128 * x128 + y128 * y128) <= view.width / 2;
														if(view.shape == 3) {
															has = !has;
														}
													}
													break;
												case 4:
													has = Math.abs(x115 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y115 - view.y - view.height / 2) / (view.height / 2) <= 1;
													break;
												case 5:
													has = !(Math.abs(x115 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y115 - view.y - view.height / 2) / (view.height / 2) <= 1);
													break;
												}
												tmp = has;
											}
											if(tmp) {
												var position97 = (y115 * this112.getUInt16(0) + x115) * 4;
												position97 += vision_ds_Image.OFFSET;
												this112.b[position97] = color9 >> 24 & 255;
												this112.b[position97 + 1] = color9 >> 16 & 255;
												this112.b[position97 + 2] = color9 >> 8 & 255;
												this112.b[position97 + 3] = color9 & 255;
											}
										} else {
											var position98 = (y115 * this112.getUInt16(0) + x115) * 4;
											position98 += vision_ds_Image.OFFSET;
											this112.b[position98] = color9 >> 24 & 255;
											this112.b[position98 + 1] = color9 >> 16 & 255;
											this112.b[position98 + 2] = color9 >> 8 & 255;
											this112.b[position98 + 3] = color9 & 255;
										}
										if(y113 != (y113 | 0)) {
											var x129 = Math.floor(x113);
											var y129 = Math.ceil(y113);
											var Red2 = (1 - xFraction6 + yFraction6) / 2 * ((color7 >> 16 & 255) / 255);
											var Green2 = (1 - xFraction6 + yFraction6) / 2 * ((color7 >> 8 & 255) / 255);
											var Blue2 = (1 - xFraction6 + yFraction6) / 2 * ((color7 & 255) / 255);
											var Alpha16 = (color7 >> 24 & 255) / 255;
											if(Alpha16 == null) {
												Alpha16 = 1;
											}
											var this115 = 0;
											var color10 = this115;
											var Alpha17 = Alpha16;
											if(Alpha17 == null) {
												Alpha17 = 1;
											}
											var value101 = Math.round(Red2 * 255);
											color10 &= -16711681;
											color10 |= (value101 > 255 ? 255 : value101 < 0 ? 0 : value101) << 16;
											var value102 = Math.round(Green2 * 255);
											color10 &= -65281;
											color10 |= (value102 > 255 ? 255 : value102 < 0 ? 0 : value102) << 8;
											var value103 = Math.round(Blue2 * 255);
											color10 &= -256;
											color10 |= value103 > 255 ? 255 : value103 < 0 ? 0 : value103;
											var value104 = Math.round(Alpha17 * 255);
											color10 &= 16777215;
											color10 |= (value104 > 255 ? 255 : value104 < 0 ? 0 : value104) << 24;
											var color11 = color10;
											if(!(x129 >= 0 && y129 >= 0 && x129 < this112.getUInt16(0) && y129 < Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4)))) {
												var this_x97 = x129;
												var this_y97 = y129;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this112,new vision_ds_Point2D(this_x97,this_y97)));
											} else if(this112.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this112.getUInt16(0) || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4)) || this112.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
												var v1 = null;
												var tmp1;
												if(!(this112.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this112.getUInt16(0) || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4)) || this112.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
													tmp1 = x129 >= 0 && y129 >= 0 && x129 < this112.getUInt16(0) && y129 < Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4));
												} else {
													var has1 = false;
													var view2;
													if(v1 != null) {
														view2 = v1;
													} else {
														var _g9 = this112.getUInt16(vision_ds_Image.WIDTH_BYTES);
														var _g10 = this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
														var _g11 = this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
														var this116 = this112.b;
														var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
														view2 = new vision_ds_ImageView(_g9,_g10,_g11,this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this116[view3]);
													}
													switch(view2.shape) {
													case 0:
														has1 = x129 < view2.x + view2.width && y129 < view2.y + view2.height && x129 >= view2.x && y129 >= view2.y;
														break;
													case 1:
														has1 = !(x129 < view2.x + view2.width && y129 < view2.y + view2.height && x129 >= view2.x && y129 >= view2.y);
														break;
													case 2:case 3:
														if(view2.width > view2.height) {
															var a2 = view2.width / 2;
															var b2 = view2.height / 2;
															var c2 = Math.sqrt(a2 * a2 - b2 * b2);
															var x130 = view2.x + view2.width / 2 - c2;
															var y130 = view2.y + view2.height / 2;
															if(y130 == null) {
																y130 = 0;
															}
															if(x130 == null) {
																x130 = 0;
															}
															var f1_x2 = x130;
															var f1_y2 = y130;
															var x131 = view2.x + view2.width / 2 + c2;
															var y131 = view2.y + view2.height / 2;
															if(y131 == null) {
																y131 = 0;
															}
															if(x131 == null) {
																x131 = 0;
															}
															var f2_x2 = x131;
															var f2_y2 = y131;
															var x132 = x129;
															var y132 = y129;
															if(y132 == null) {
																y132 = 0;
															}
															if(x132 == null) {
																x132 = 0;
															}
															var p_x2 = x132;
															var p_y2 = y132;
															var x133 = p_x2 - f1_x2;
															var y133 = p_y2 - f1_y2;
															var x134 = p_x2 - f2_x2;
															var y134 = p_y2 - f2_y2;
															has1 = Math.sqrt(x133 * x133 + y133 * y133) + Math.sqrt(x134 * x134 + y134 * y134) <= view2.width;
															if(view2.shape == 3) {
																has1 = !has1;
															}
														} else if(view2.height > view2.width) {
															var a3 = view2.height / 2;
															var b3 = view2.width / 2;
															var c3 = Math.sqrt(a3 * a3 - b3 * b3);
															var x135 = view2.x + view2.width / 2;
															var y135 = view2.y + view2.height / 2 - c3;
															if(y135 == null) {
																y135 = 0;
															}
															if(x135 == null) {
																x135 = 0;
															}
															var f1_x3 = x135;
															var f1_y3 = y135;
															var x136 = view2.x + view2.width / 2;
															var y136 = view2.y + view2.height / 2 + c3;
															if(y136 == null) {
																y136 = 0;
															}
															if(x136 == null) {
																x136 = 0;
															}
															var f2_x3 = x136;
															var f2_y3 = y136;
															var x137 = x129;
															var y137 = y129;
															if(y137 == null) {
																y137 = 0;
															}
															if(x137 == null) {
																x137 = 0;
															}
															var p_x3 = x137;
															var p_y3 = y137;
															var x138 = p_x3 - f1_x3;
															var y138 = p_y3 - f1_y3;
															var x139 = p_x3 - f2_x3;
															var y139 = p_y3 - f2_y3;
															has1 = Math.sqrt(x138 * x138 + y138 * y138) + Math.sqrt(x139 * x139 + y139 * y139) <= view2.height;
															if(view2.shape == 3) {
																has1 = !has1;
															}
														} else {
															var x140 = x129;
															var y140 = y129;
															if(y140 == null) {
																y140 = 0;
															}
															if(x140 == null) {
																x140 = 0;
															}
															var point1_x1 = x140;
															var point1_y1 = y140;
															var x141 = view2.x + view2.width / 2;
															var y141 = view2.y + view2.height / 2;
															if(y141 == null) {
																y141 = 0;
															}
															if(x141 == null) {
																x141 = 0;
															}
															var point2_x1 = x141;
															var point2_y1 = y141;
															var x142 = point2_x1 - point1_x1;
															var y142 = point2_y1 - point1_y1;
															has1 = Math.sqrt(x142 * x142 + y142 * y142) <= view2.width / 2;
															if(view2.shape == 3) {
																has1 = !has1;
															}
														}
														break;
													case 4:
														has1 = Math.abs(x129 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y129 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
														break;
													case 5:
														has1 = !(Math.abs(x129 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y129 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
														break;
													}
													tmp1 = has1;
												}
												if(tmp1) {
													var position99 = (y129 * this112.getUInt16(0) + x129) * 4;
													position99 += vision_ds_Image.OFFSET;
													this112.b[position99] = color11 >> 24 & 255;
													this112.b[position99 + 1] = color11 >> 16 & 255;
													this112.b[position99 + 2] = color11 >> 8 & 255;
													this112.b[position99 + 3] = color11 & 255;
												}
											} else {
												var position100 = (y129 * this112.getUInt16(0) + x129) * 4;
												position100 += vision_ds_Image.OFFSET;
												this112.b[position100] = color11 >> 24 & 255;
												this112.b[position100 + 1] = color11 >> 16 & 255;
												this112.b[position100 + 2] = color11 >> 8 & 255;
												this112.b[position100 + 3] = color11 & 255;
											}
										}
										if(x113 != (x113 | 0)) {
											var x143 = Math.ceil(x113);
											var y143 = Math.floor(y113);
											var Red3 = (xFraction6 + (1 - yFraction6)) / 2 * ((color7 >> 16 & 255) / 255);
											var Green3 = (xFraction6 + (1 - yFraction6)) / 2 * ((color7 >> 8 & 255) / 255);
											var Blue3 = (xFraction6 + (1 - yFraction6)) / 2 * ((color7 & 255) / 255);
											var Alpha18 = (color7 >> 24 & 255) / 255;
											if(Alpha18 == null) {
												Alpha18 = 1;
											}
											var this117 = 0;
											var color12 = this117;
											var Alpha19 = Alpha18;
											if(Alpha19 == null) {
												Alpha19 = 1;
											}
											var value105 = Math.round(Red3 * 255);
											color12 &= -16711681;
											color12 |= (value105 > 255 ? 255 : value105 < 0 ? 0 : value105) << 16;
											var value106 = Math.round(Green3 * 255);
											color12 &= -65281;
											color12 |= (value106 > 255 ? 255 : value106 < 0 ? 0 : value106) << 8;
											var value107 = Math.round(Blue3 * 255);
											color12 &= -256;
											color12 |= value107 > 255 ? 255 : value107 < 0 ? 0 : value107;
											var value108 = Math.round(Alpha19 * 255);
											color12 &= 16777215;
											color12 |= (value108 > 255 ? 255 : value108 < 0 ? 0 : value108) << 24;
											var color13 = color12;
											if(!(x143 >= 0 && y143 >= 0 && x143 < this112.getUInt16(0) && y143 < Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4)))) {
												var this_x98 = x143;
												var this_y98 = y143;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this112,new vision_ds_Point2D(this_x98,this_y98)));
											} else if(this112.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this112.getUInt16(0) || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4)) || this112.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
												var v2 = null;
												var tmp2;
												if(!(this112.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this112.getUInt16(0) || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4)) || this112.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
													tmp2 = x143 >= 0 && y143 >= 0 && x143 < this112.getUInt16(0) && y143 < Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4));
												} else {
													var has2 = false;
													var view4;
													if(v2 != null) {
														view4 = v2;
													} else {
														var _g12 = this112.getUInt16(vision_ds_Image.WIDTH_BYTES);
														var _g13 = this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
														var _g14 = this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
														var this118 = this112.b;
														var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
														view4 = new vision_ds_ImageView(_g12,_g13,_g14,this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this118[view5]);
													}
													switch(view4.shape) {
													case 0:
														has2 = x143 < view4.x + view4.width && y143 < view4.y + view4.height && x143 >= view4.x && y143 >= view4.y;
														break;
													case 1:
														has2 = !(x143 < view4.x + view4.width && y143 < view4.y + view4.height && x143 >= view4.x && y143 >= view4.y);
														break;
													case 2:case 3:
														if(view4.width > view4.height) {
															var a4 = view4.width / 2;
															var b4 = view4.height / 2;
															var c4 = Math.sqrt(a4 * a4 - b4 * b4);
															var x144 = view4.x + view4.width / 2 - c4;
															var y144 = view4.y + view4.height / 2;
															if(y144 == null) {
																y144 = 0;
															}
															if(x144 == null) {
																x144 = 0;
															}
															var f1_x4 = x144;
															var f1_y4 = y144;
															var x145 = view4.x + view4.width / 2 + c4;
															var y145 = view4.y + view4.height / 2;
															if(y145 == null) {
																y145 = 0;
															}
															if(x145 == null) {
																x145 = 0;
															}
															var f2_x4 = x145;
															var f2_y4 = y145;
															var x146 = x143;
															var y146 = y143;
															if(y146 == null) {
																y146 = 0;
															}
															if(x146 == null) {
																x146 = 0;
															}
															var p_x4 = x146;
															var p_y4 = y146;
															var x147 = p_x4 - f1_x4;
															var y147 = p_y4 - f1_y4;
															var x148 = p_x4 - f2_x4;
															var y148 = p_y4 - f2_y4;
															has2 = Math.sqrt(x147 * x147 + y147 * y147) + Math.sqrt(x148 * x148 + y148 * y148) <= view4.width;
															if(view4.shape == 3) {
																has2 = !has2;
															}
														} else if(view4.height > view4.width) {
															var a5 = view4.height / 2;
															var b5 = view4.width / 2;
															var c5 = Math.sqrt(a5 * a5 - b5 * b5);
															var x149 = view4.x + view4.width / 2;
															var y149 = view4.y + view4.height / 2 - c5;
															if(y149 == null) {
																y149 = 0;
															}
															if(x149 == null) {
																x149 = 0;
															}
															var f1_x5 = x149;
															var f1_y5 = y149;
															var x150 = view4.x + view4.width / 2;
															var y150 = view4.y + view4.height / 2 + c5;
															if(y150 == null) {
																y150 = 0;
															}
															if(x150 == null) {
																x150 = 0;
															}
															var f2_x5 = x150;
															var f2_y5 = y150;
															var x151 = x143;
															var y151 = y143;
															if(y151 == null) {
																y151 = 0;
															}
															if(x151 == null) {
																x151 = 0;
															}
															var p_x5 = x151;
															var p_y5 = y151;
															var x152 = p_x5 - f1_x5;
															var y152 = p_y5 - f1_y5;
															var x153 = p_x5 - f2_x5;
															var y153 = p_y5 - f2_y5;
															has2 = Math.sqrt(x152 * x152 + y152 * y152) + Math.sqrt(x153 * x153 + y153 * y153) <= view4.height;
															if(view4.shape == 3) {
																has2 = !has2;
															}
														} else {
															var x154 = x143;
															var y154 = y143;
															if(y154 == null) {
																y154 = 0;
															}
															if(x154 == null) {
																x154 = 0;
															}
															var point1_x2 = x154;
															var point1_y2 = y154;
															var x155 = view4.x + view4.width / 2;
															var y155 = view4.y + view4.height / 2;
															if(y155 == null) {
																y155 = 0;
															}
															if(x155 == null) {
																x155 = 0;
															}
															var point2_x2 = x155;
															var point2_y2 = y155;
															var x156 = point2_x2 - point1_x2;
															var y156 = point2_y2 - point1_y2;
															has2 = Math.sqrt(x156 * x156 + y156 * y156) <= view4.width / 2;
															if(view4.shape == 3) {
																has2 = !has2;
															}
														}
														break;
													case 4:
														has2 = Math.abs(x143 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y143 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
														break;
													case 5:
														has2 = !(Math.abs(x143 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y143 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
														break;
													}
													tmp2 = has2;
												}
												if(tmp2) {
													var position101 = (y143 * this112.getUInt16(0) + x143) * 4;
													position101 += vision_ds_Image.OFFSET;
													this112.b[position101] = color13 >> 24 & 255;
													this112.b[position101 + 1] = color13 >> 16 & 255;
													this112.b[position101 + 2] = color13 >> 8 & 255;
													this112.b[position101 + 3] = color13 & 255;
												}
											} else {
												var position102 = (y143 * this112.getUInt16(0) + x143) * 4;
												position102 += vision_ds_Image.OFFSET;
												this112.b[position102] = color13 >> 24 & 255;
												this112.b[position102 + 1] = color13 >> 16 & 255;
												this112.b[position102 + 2] = color13 >> 8 & 255;
												this112.b[position102 + 3] = color13 & 255;
											}
										}
										if(x113 != (x113 | 0) && y113 != (y113 | 0)) {
											var x157 = Math.ceil(x113);
											var y157 = Math.ceil(y113);
											var Red4 = (xFraction6 + yFraction6) / 2 * ((color7 >> 16 & 255) / 255);
											var Green4 = (xFraction6 + yFraction6) / 2 * ((color7 >> 8 & 255) / 255);
											var Blue4 = (xFraction6 + yFraction6) / 2 * ((color7 & 255) / 255);
											var Alpha20 = (color7 >> 24 & 255) / 255;
											if(Alpha20 == null) {
												Alpha20 = 1;
											}
											var this119 = 0;
											var color14 = this119;
											var Alpha21 = Alpha20;
											if(Alpha21 == null) {
												Alpha21 = 1;
											}
											var value109 = Math.round(Red4 * 255);
											color14 &= -16711681;
											color14 |= (value109 > 255 ? 255 : value109 < 0 ? 0 : value109) << 16;
											var value110 = Math.round(Green4 * 255);
											color14 &= -65281;
											color14 |= (value110 > 255 ? 255 : value110 < 0 ? 0 : value110) << 8;
											var value111 = Math.round(Blue4 * 255);
											color14 &= -256;
											color14 |= value111 > 255 ? 255 : value111 < 0 ? 0 : value111;
											var value112 = Math.round(Alpha21 * 255);
											color14 &= 16777215;
											color14 |= (value112 > 255 ? 255 : value112 < 0 ? 0 : value112) << 24;
											var color15 = color14;
											if(!(x157 >= 0 && y157 >= 0 && x157 < this112.getUInt16(0) && y157 < Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4)))) {
												var this_x99 = x157;
												var this_y99 = y157;
												throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this112,new vision_ds_Point2D(this_x99,this_y99)));
											} else if(this112.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this112.getUInt16(0) || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4)) || this112.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
												var v3 = null;
												var tmp3;
												if(!(this112.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this112.getUInt16(0) || this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4)) || this112.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
													tmp3 = x157 >= 0 && y157 >= 0 && x157 < this112.getUInt16(0) && y157 < Math.ceil((this112.length - vision_ds_Image.OFFSET) / (this112.getUInt16(0) * 4));
												} else {
													var has3 = false;
													var view6;
													if(v3 != null) {
														view6 = v3;
													} else {
														var _g15 = this112.getUInt16(vision_ds_Image.WIDTH_BYTES);
														var _g16 = this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
														var _g17 = this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
														var this120 = this112.b;
														var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
														view6 = new vision_ds_ImageView(_g15,_g16,_g17,this112.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this120[view7]);
													}
													switch(view6.shape) {
													case 0:
														has3 = x157 < view6.x + view6.width && y157 < view6.y + view6.height && x157 >= view6.x && y157 >= view6.y;
														break;
													case 1:
														has3 = !(x157 < view6.x + view6.width && y157 < view6.y + view6.height && x157 >= view6.x && y157 >= view6.y);
														break;
													case 2:case 3:
														if(view6.width > view6.height) {
															var a6 = view6.width / 2;
															var b6 = view6.height / 2;
															var c6 = Math.sqrt(a6 * a6 - b6 * b6);
															var x158 = view6.x + view6.width / 2 - c6;
															var y158 = view6.y + view6.height / 2;
															if(y158 == null) {
																y158 = 0;
															}
															if(x158 == null) {
																x158 = 0;
															}
															var f1_x6 = x158;
															var f1_y6 = y158;
															var x159 = view6.x + view6.width / 2 + c6;
															var y159 = view6.y + view6.height / 2;
															if(y159 == null) {
																y159 = 0;
															}
															if(x159 == null) {
																x159 = 0;
															}
															var f2_x6 = x159;
															var f2_y6 = y159;
															var x160 = x157;
															var y160 = y157;
															if(y160 == null) {
																y160 = 0;
															}
															if(x160 == null) {
																x160 = 0;
															}
															var p_x6 = x160;
															var p_y6 = y160;
															var x161 = p_x6 - f1_x6;
															var y161 = p_y6 - f1_y6;
															var x162 = p_x6 - f2_x6;
															var y162 = p_y6 - f2_y6;
															has3 = Math.sqrt(x161 * x161 + y161 * y161) + Math.sqrt(x162 * x162 + y162 * y162) <= view6.width;
															if(view6.shape == 3) {
																has3 = !has3;
															}
														} else if(view6.height > view6.width) {
															var a7 = view6.height / 2;
															var b7 = view6.width / 2;
															var c7 = Math.sqrt(a7 * a7 - b7 * b7);
															var x163 = view6.x + view6.width / 2;
															var y163 = view6.y + view6.height / 2 - c7;
															if(y163 == null) {
																y163 = 0;
															}
															if(x163 == null) {
																x163 = 0;
															}
															var f1_x7 = x163;
															var f1_y7 = y163;
															var x164 = view6.x + view6.width / 2;
															var y164 = view6.y + view6.height / 2 + c7;
															if(y164 == null) {
																y164 = 0;
															}
															if(x164 == null) {
																x164 = 0;
															}
															var f2_x7 = x164;
															var f2_y7 = y164;
															var x165 = x157;
															var y165 = y157;
															if(y165 == null) {
																y165 = 0;
															}
															if(x165 == null) {
																x165 = 0;
															}
															var p_x7 = x165;
															var p_y7 = y165;
															var x166 = p_x7 - f1_x7;
															var y166 = p_y7 - f1_y7;
															var x167 = p_x7 - f2_x7;
															var y167 = p_y7 - f2_y7;
															has3 = Math.sqrt(x166 * x166 + y166 * y166) + Math.sqrt(x167 * x167 + y167 * y167) <= view6.height;
															if(view6.shape == 3) {
																has3 = !has3;
															}
														} else {
															var x168 = x157;
															var y168 = y157;
															if(y168 == null) {
																y168 = 0;
															}
															if(x168 == null) {
																x168 = 0;
															}
															var point1_x3 = x168;
															var point1_y3 = y168;
															var x169 = view6.x + view6.width / 2;
															var y169 = view6.y + view6.height / 2;
															if(y169 == null) {
																y169 = 0;
															}
															if(x169 == null) {
																x169 = 0;
															}
															var point2_x3 = x169;
															var point2_y3 = y169;
															var x170 = point2_x3 - point1_x3;
															var y170 = point2_y3 - point1_y3;
															has3 = Math.sqrt(x170 * x170 + y170 * y170) <= view6.width / 2;
															if(view6.shape == 3) {
																has3 = !has3;
															}
														}
														break;
													case 4:
														has3 = Math.abs(x157 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y157 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
														break;
													case 5:
														has3 = !(Math.abs(x157 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y157 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
														break;
													}
													tmp3 = has3;
												}
												if(tmp3) {
													var position103 = (y157 * this112.getUInt16(0) + x157) * 4;
													position103 += vision_ds_Image.OFFSET;
													this112.b[position103] = color15 >> 24 & 255;
													this112.b[position103 + 1] = color15 >> 16 & 255;
													this112.b[position103 + 2] = color15 >> 8 & 255;
													this112.b[position103 + 3] = color15 & 255;
												}
											} else {
												var position104 = (y157 * this112.getUInt16(0) + x157) * 4;
												position104 += vision_ds_Image.OFFSET;
												this112.b[position104] = color15 >> 24 & 255;
												this112.b[position104 + 1] = color15 >> 16 & 255;
												this112.b[position104 + 2] = color15 >> 8 & 255;
												this112.b[position104 + 3] = color15 & 255;
											}
										}
									}
								} else {
									var yFraction7 = y111 - (y111 | 0);
									var xFraction7 = x111 - (x111 | 0);
									var x171 = Math.floor(x111);
									var y171 = Math.floor(y111);
									var Red5 = (1 - xFraction7 + (1 - yFraction7)) / 2 * ((color7 >> 16 & 255) / 255);
									var Green5 = (1 - xFraction7 + (1 - yFraction7)) / 2 * ((color7 >> 8 & 255) / 255);
									var Blue5 = (1 - xFraction7 + (1 - yFraction7)) / 2 * ((color7 & 255) / 255);
									var Alpha22 = (color7 >> 24 & 255) / 255;
									if(Alpha22 == null) {
										Alpha22 = 1;
									}
									var this121 = 0;
									var color16 = this121;
									var Alpha23 = Alpha22;
									if(Alpha23 == null) {
										Alpha23 = 1;
									}
									var value113 = Math.round(Red5 * 255);
									color16 &= -16711681;
									color16 |= (value113 > 255 ? 255 : value113 < 0 ? 0 : value113) << 16;
									var value114 = Math.round(Green5 * 255);
									color16 &= -65281;
									color16 |= (value114 > 255 ? 255 : value114 < 0 ? 0 : value114) << 8;
									var value115 = Math.round(Blue5 * 255);
									color16 &= -256;
									color16 |= value115 > 255 ? 255 : value115 < 0 ? 0 : value115;
									var value116 = Math.round(Alpha23 * 255);
									color16 &= 16777215;
									color16 |= (value116 > 255 ? 255 : value116 < 0 ? 0 : value116) << 24;
									var color17 = color16;
									if(!(x171 >= 0 && y171 >= 0 && x171 < this111.getUInt16(0) && y171 < Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4)))) {
										var this_x100 = x171;
										var this_y100 = y171;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this111,new vision_ds_Point2D(this_x100,this_y100)));
									} else if(this111.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this111.getUInt16(0) || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4)) || this111.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
										var v4 = null;
										var tmp4;
										if(!(this111.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this111.getUInt16(0) || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4)) || this111.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v4 == null) {
											tmp4 = x171 >= 0 && y171 >= 0 && x171 < this111.getUInt16(0) && y171 < Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4));
										} else {
											var has4 = false;
											var view8;
											if(v4 != null) {
												view8 = v4;
											} else {
												var _g18 = this111.getUInt16(vision_ds_Image.WIDTH_BYTES);
												var _g19 = this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
												var _g20 = this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
												var this122 = this111.b;
												var view9 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
												view8 = new vision_ds_ImageView(_g18,_g19,_g20,this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this122[view9]);
											}
											switch(view8.shape) {
											case 0:
												has4 = x171 < view8.x + view8.width && y171 < view8.y + view8.height && x171 >= view8.x && y171 >= view8.y;
												break;
											case 1:
												has4 = !(x171 < view8.x + view8.width && y171 < view8.y + view8.height && x171 >= view8.x && y171 >= view8.y);
												break;
											case 2:case 3:
												if(view8.width > view8.height) {
													var a8 = view8.width / 2;
													var b8 = view8.height / 2;
													var c8 = Math.sqrt(a8 * a8 - b8 * b8);
													var x172 = view8.x + view8.width / 2 - c8;
													var y172 = view8.y + view8.height / 2;
													if(y172 == null) {
														y172 = 0;
													}
													if(x172 == null) {
														x172 = 0;
													}
													var f1_x8 = x172;
													var f1_y8 = y172;
													var x173 = view8.x + view8.width / 2 + c8;
													var y173 = view8.y + view8.height / 2;
													if(y173 == null) {
														y173 = 0;
													}
													if(x173 == null) {
														x173 = 0;
													}
													var f2_x8 = x173;
													var f2_y8 = y173;
													var x174 = x171;
													var y174 = y171;
													if(y174 == null) {
														y174 = 0;
													}
													if(x174 == null) {
														x174 = 0;
													}
													var p_x8 = x174;
													var p_y8 = y174;
													var x175 = p_x8 - f1_x8;
													var y175 = p_y8 - f1_y8;
													var x176 = p_x8 - f2_x8;
													var y176 = p_y8 - f2_y8;
													has4 = Math.sqrt(x175 * x175 + y175 * y175) + Math.sqrt(x176 * x176 + y176 * y176) <= view8.width;
													if(view8.shape == 3) {
														has4 = !has4;
													}
												} else if(view8.height > view8.width) {
													var a9 = view8.height / 2;
													var b9 = view8.width / 2;
													var c9 = Math.sqrt(a9 * a9 - b9 * b9);
													var x177 = view8.x + view8.width / 2;
													var y177 = view8.y + view8.height / 2 - c9;
													if(y177 == null) {
														y177 = 0;
													}
													if(x177 == null) {
														x177 = 0;
													}
													var f1_x9 = x177;
													var f1_y9 = y177;
													var x178 = view8.x + view8.width / 2;
													var y178 = view8.y + view8.height / 2 + c9;
													if(y178 == null) {
														y178 = 0;
													}
													if(x178 == null) {
														x178 = 0;
													}
													var f2_x9 = x178;
													var f2_y9 = y178;
													var x179 = x171;
													var y179 = y171;
													if(y179 == null) {
														y179 = 0;
													}
													if(x179 == null) {
														x179 = 0;
													}
													var p_x9 = x179;
													var p_y9 = y179;
													var x180 = p_x9 - f1_x9;
													var y180 = p_y9 - f1_y9;
													var x181 = p_x9 - f2_x9;
													var y181 = p_y9 - f2_y9;
													has4 = Math.sqrt(x180 * x180 + y180 * y180) + Math.sqrt(x181 * x181 + y181 * y181) <= view8.height;
													if(view8.shape == 3) {
														has4 = !has4;
													}
												} else {
													var x182 = x171;
													var y182 = y171;
													if(y182 == null) {
														y182 = 0;
													}
													if(x182 == null) {
														x182 = 0;
													}
													var point1_x4 = x182;
													var point1_y4 = y182;
													var x183 = view8.x + view8.width / 2;
													var y183 = view8.y + view8.height / 2;
													if(y183 == null) {
														y183 = 0;
													}
													if(x183 == null) {
														x183 = 0;
													}
													var point2_x4 = x183;
													var point2_y4 = y183;
													var x184 = point2_x4 - point1_x4;
													var y184 = point2_y4 - point1_y4;
													has4 = Math.sqrt(x184 * x184 + y184 * y184) <= view8.width / 2;
													if(view8.shape == 3) {
														has4 = !has4;
													}
												}
												break;
											case 4:
												has4 = Math.abs(x171 - view8.x - view8.width / 2) / (view8.width / 2) + Math.abs(y171 - view8.y - view8.height / 2) / (view8.height / 2) <= 1;
												break;
											case 5:
												has4 = !(Math.abs(x171 - view8.x - view8.width / 2) / (view8.width / 2) + Math.abs(y171 - view8.y - view8.height / 2) / (view8.height / 2) <= 1);
												break;
											}
											tmp4 = has4;
										}
										if(tmp4) {
											var position105 = (y171 * this111.getUInt16(0) + x171) * 4;
											position105 += vision_ds_Image.OFFSET;
											this111.b[position105] = color17 >> 24 & 255;
											this111.b[position105 + 1] = color17 >> 16 & 255;
											this111.b[position105 + 2] = color17 >> 8 & 255;
											this111.b[position105 + 3] = color17 & 255;
										}
									} else {
										var position106 = (y171 * this111.getUInt16(0) + x171) * 4;
										position106 += vision_ds_Image.OFFSET;
										this111.b[position106] = color17 >> 24 & 255;
										this111.b[position106 + 1] = color17 >> 16 & 255;
										this111.b[position106 + 2] = color17 >> 8 & 255;
										this111.b[position106 + 3] = color17 & 255;
									}
									if(y111 != (y111 | 0)) {
										var x185 = Math.floor(x111);
										var y185 = Math.ceil(y111);
										var Red6 = (1 - xFraction7 + yFraction7) / 2 * ((color7 >> 16 & 255) / 255);
										var Green6 = (1 - xFraction7 + yFraction7) / 2 * ((color7 >> 8 & 255) / 255);
										var Blue6 = (1 - xFraction7 + yFraction7) / 2 * ((color7 & 255) / 255);
										var Alpha24 = (color7 >> 24 & 255) / 255;
										if(Alpha24 == null) {
											Alpha24 = 1;
										}
										var this123 = 0;
										var color18 = this123;
										var Alpha25 = Alpha24;
										if(Alpha25 == null) {
											Alpha25 = 1;
										}
										var value117 = Math.round(Red6 * 255);
										color18 &= -16711681;
										color18 |= (value117 > 255 ? 255 : value117 < 0 ? 0 : value117) << 16;
										var value118 = Math.round(Green6 * 255);
										color18 &= -65281;
										color18 |= (value118 > 255 ? 255 : value118 < 0 ? 0 : value118) << 8;
										var value119 = Math.round(Blue6 * 255);
										color18 &= -256;
										color18 |= value119 > 255 ? 255 : value119 < 0 ? 0 : value119;
										var value120 = Math.round(Alpha25 * 255);
										color18 &= 16777215;
										color18 |= (value120 > 255 ? 255 : value120 < 0 ? 0 : value120) << 24;
										var color19 = color18;
										if(!(x185 >= 0 && y185 >= 0 && x185 < this111.getUInt16(0) && y185 < Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4)))) {
											var this_x101 = x185;
											var this_y101 = y185;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this111,new vision_ds_Point2D(this_x101,this_y101)));
										} else if(this111.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this111.getUInt16(0) || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4)) || this111.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
											var v5 = null;
											var tmp5;
											if(!(this111.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this111.getUInt16(0) || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4)) || this111.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v5 == null) {
												tmp5 = x185 >= 0 && y185 >= 0 && x185 < this111.getUInt16(0) && y185 < Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4));
											} else {
												var has5 = false;
												var view10;
												if(v5 != null) {
													view10 = v5;
												} else {
													var _g21 = this111.getUInt16(vision_ds_Image.WIDTH_BYTES);
													var _g22 = this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
													var _g23 = this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
													var this124 = this111.b;
													var view11 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
													view10 = new vision_ds_ImageView(_g21,_g22,_g23,this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this124[view11]);
												}
												switch(view10.shape) {
												case 0:
													has5 = x185 < view10.x + view10.width && y185 < view10.y + view10.height && x185 >= view10.x && y185 >= view10.y;
													break;
												case 1:
													has5 = !(x185 < view10.x + view10.width && y185 < view10.y + view10.height && x185 >= view10.x && y185 >= view10.y);
													break;
												case 2:case 3:
													if(view10.width > view10.height) {
														var a10 = view10.width / 2;
														var b10 = view10.height / 2;
														var c10 = Math.sqrt(a10 * a10 - b10 * b10);
														var x186 = view10.x + view10.width / 2 - c10;
														var y186 = view10.y + view10.height / 2;
														if(y186 == null) {
															y186 = 0;
														}
														if(x186 == null) {
															x186 = 0;
														}
														var f1_x10 = x186;
														var f1_y10 = y186;
														var x187 = view10.x + view10.width / 2 + c10;
														var y187 = view10.y + view10.height / 2;
														if(y187 == null) {
															y187 = 0;
														}
														if(x187 == null) {
															x187 = 0;
														}
														var f2_x10 = x187;
														var f2_y10 = y187;
														var x188 = x185;
														var y188 = y185;
														if(y188 == null) {
															y188 = 0;
														}
														if(x188 == null) {
															x188 = 0;
														}
														var p_x10 = x188;
														var p_y10 = y188;
														var x189 = p_x10 - f1_x10;
														var y189 = p_y10 - f1_y10;
														var x190 = p_x10 - f2_x10;
														var y190 = p_y10 - f2_y10;
														has5 = Math.sqrt(x189 * x189 + y189 * y189) + Math.sqrt(x190 * x190 + y190 * y190) <= view10.width;
														if(view10.shape == 3) {
															has5 = !has5;
														}
													} else if(view10.height > view10.width) {
														var a11 = view10.height / 2;
														var b11 = view10.width / 2;
														var c11 = Math.sqrt(a11 * a11 - b11 * b11);
														var x191 = view10.x + view10.width / 2;
														var y191 = view10.y + view10.height / 2 - c11;
														if(y191 == null) {
															y191 = 0;
														}
														if(x191 == null) {
															x191 = 0;
														}
														var f1_x11 = x191;
														var f1_y11 = y191;
														var x192 = view10.x + view10.width / 2;
														var y192 = view10.y + view10.height / 2 + c11;
														if(y192 == null) {
															y192 = 0;
														}
														if(x192 == null) {
															x192 = 0;
														}
														var f2_x11 = x192;
														var f2_y11 = y192;
														var x193 = x185;
														var y193 = y185;
														if(y193 == null) {
															y193 = 0;
														}
														if(x193 == null) {
															x193 = 0;
														}
														var p_x11 = x193;
														var p_y11 = y193;
														var x194 = p_x11 - f1_x11;
														var y194 = p_y11 - f1_y11;
														var x195 = p_x11 - f2_x11;
														var y195 = p_y11 - f2_y11;
														has5 = Math.sqrt(x194 * x194 + y194 * y194) + Math.sqrt(x195 * x195 + y195 * y195) <= view10.height;
														if(view10.shape == 3) {
															has5 = !has5;
														}
													} else {
														var x196 = x185;
														var y196 = y185;
														if(y196 == null) {
															y196 = 0;
														}
														if(x196 == null) {
															x196 = 0;
														}
														var point1_x5 = x196;
														var point1_y5 = y196;
														var x197 = view10.x + view10.width / 2;
														var y197 = view10.y + view10.height / 2;
														if(y197 == null) {
															y197 = 0;
														}
														if(x197 == null) {
															x197 = 0;
														}
														var point2_x5 = x197;
														var point2_y5 = y197;
														var x198 = point2_x5 - point1_x5;
														var y198 = point2_y5 - point1_y5;
														has5 = Math.sqrt(x198 * x198 + y198 * y198) <= view10.width / 2;
														if(view10.shape == 3) {
															has5 = !has5;
														}
													}
													break;
												case 4:
													has5 = Math.abs(x185 - view10.x - view10.width / 2) / (view10.width / 2) + Math.abs(y185 - view10.y - view10.height / 2) / (view10.height / 2) <= 1;
													break;
												case 5:
													has5 = !(Math.abs(x185 - view10.x - view10.width / 2) / (view10.width / 2) + Math.abs(y185 - view10.y - view10.height / 2) / (view10.height / 2) <= 1);
													break;
												}
												tmp5 = has5;
											}
											if(tmp5) {
												var position107 = (y185 * this111.getUInt16(0) + x185) * 4;
												position107 += vision_ds_Image.OFFSET;
												this111.b[position107] = color19 >> 24 & 255;
												this111.b[position107 + 1] = color19 >> 16 & 255;
												this111.b[position107 + 2] = color19 >> 8 & 255;
												this111.b[position107 + 3] = color19 & 255;
											}
										} else {
											var position108 = (y185 * this111.getUInt16(0) + x185) * 4;
											position108 += vision_ds_Image.OFFSET;
											this111.b[position108] = color19 >> 24 & 255;
											this111.b[position108 + 1] = color19 >> 16 & 255;
											this111.b[position108 + 2] = color19 >> 8 & 255;
											this111.b[position108 + 3] = color19 & 255;
										}
									}
									if(x111 != (x111 | 0)) {
										var x199 = Math.ceil(x111);
										var y199 = Math.floor(y111);
										var Red7 = (xFraction7 + (1 - yFraction7)) / 2 * ((color7 >> 16 & 255) / 255);
										var Green7 = (xFraction7 + (1 - yFraction7)) / 2 * ((color7 >> 8 & 255) / 255);
										var Blue7 = (xFraction7 + (1 - yFraction7)) / 2 * ((color7 & 255) / 255);
										var Alpha26 = (color7 >> 24 & 255) / 255;
										if(Alpha26 == null) {
											Alpha26 = 1;
										}
										var this125 = 0;
										var color20 = this125;
										var Alpha27 = Alpha26;
										if(Alpha27 == null) {
											Alpha27 = 1;
										}
										var value121 = Math.round(Red7 * 255);
										color20 &= -16711681;
										color20 |= (value121 > 255 ? 255 : value121 < 0 ? 0 : value121) << 16;
										var value122 = Math.round(Green7 * 255);
										color20 &= -65281;
										color20 |= (value122 > 255 ? 255 : value122 < 0 ? 0 : value122) << 8;
										var value123 = Math.round(Blue7 * 255);
										color20 &= -256;
										color20 |= value123 > 255 ? 255 : value123 < 0 ? 0 : value123;
										var value124 = Math.round(Alpha27 * 255);
										color20 &= 16777215;
										color20 |= (value124 > 255 ? 255 : value124 < 0 ? 0 : value124) << 24;
										var color21 = color20;
										if(!(x199 >= 0 && y199 >= 0 && x199 < this111.getUInt16(0) && y199 < Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4)))) {
											var this_x102 = x199;
											var this_y102 = y199;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this111,new vision_ds_Point2D(this_x102,this_y102)));
										} else if(this111.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this111.getUInt16(0) || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4)) || this111.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
											var v6 = null;
											var tmp6;
											if(!(this111.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this111.getUInt16(0) || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4)) || this111.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v6 == null) {
												tmp6 = x199 >= 0 && y199 >= 0 && x199 < this111.getUInt16(0) && y199 < Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4));
											} else {
												var has6 = false;
												var view12;
												if(v6 != null) {
													view12 = v6;
												} else {
													var _g24 = this111.getUInt16(vision_ds_Image.WIDTH_BYTES);
													var _g25 = this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
													var _g26 = this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
													var this126 = this111.b;
													var view13 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
													view12 = new vision_ds_ImageView(_g24,_g25,_g26,this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this126[view13]);
												}
												switch(view12.shape) {
												case 0:
													has6 = x199 < view12.x + view12.width && y199 < view12.y + view12.height && x199 >= view12.x && y199 >= view12.y;
													break;
												case 1:
													has6 = !(x199 < view12.x + view12.width && y199 < view12.y + view12.height && x199 >= view12.x && y199 >= view12.y);
													break;
												case 2:case 3:
													if(view12.width > view12.height) {
														var a12 = view12.width / 2;
														var b12 = view12.height / 2;
														var c12 = Math.sqrt(a12 * a12 - b12 * b12);
														var x200 = view12.x + view12.width / 2 - c12;
														var y200 = view12.y + view12.height / 2;
														if(y200 == null) {
															y200 = 0;
														}
														if(x200 == null) {
															x200 = 0;
														}
														var f1_x12 = x200;
														var f1_y12 = y200;
														var x201 = view12.x + view12.width / 2 + c12;
														var y201 = view12.y + view12.height / 2;
														if(y201 == null) {
															y201 = 0;
														}
														if(x201 == null) {
															x201 = 0;
														}
														var f2_x12 = x201;
														var f2_y12 = y201;
														var x202 = x199;
														var y202 = y199;
														if(y202 == null) {
															y202 = 0;
														}
														if(x202 == null) {
															x202 = 0;
														}
														var p_x12 = x202;
														var p_y12 = y202;
														var x203 = p_x12 - f1_x12;
														var y203 = p_y12 - f1_y12;
														var x204 = p_x12 - f2_x12;
														var y204 = p_y12 - f2_y12;
														has6 = Math.sqrt(x203 * x203 + y203 * y203) + Math.sqrt(x204 * x204 + y204 * y204) <= view12.width;
														if(view12.shape == 3) {
															has6 = !has6;
														}
													} else if(view12.height > view12.width) {
														var a13 = view12.height / 2;
														var b13 = view12.width / 2;
														var c13 = Math.sqrt(a13 * a13 - b13 * b13);
														var x205 = view12.x + view12.width / 2;
														var y205 = view12.y + view12.height / 2 - c13;
														if(y205 == null) {
															y205 = 0;
														}
														if(x205 == null) {
															x205 = 0;
														}
														var f1_x13 = x205;
														var f1_y13 = y205;
														var x206 = view12.x + view12.width / 2;
														var y206 = view12.y + view12.height / 2 + c13;
														if(y206 == null) {
															y206 = 0;
														}
														if(x206 == null) {
															x206 = 0;
														}
														var f2_x13 = x206;
														var f2_y13 = y206;
														var x207 = x199;
														var y207 = y199;
														if(y207 == null) {
															y207 = 0;
														}
														if(x207 == null) {
															x207 = 0;
														}
														var p_x13 = x207;
														var p_y13 = y207;
														var x208 = p_x13 - f1_x13;
														var y208 = p_y13 - f1_y13;
														var x209 = p_x13 - f2_x13;
														var y209 = p_y13 - f2_y13;
														has6 = Math.sqrt(x208 * x208 + y208 * y208) + Math.sqrt(x209 * x209 + y209 * y209) <= view12.height;
														if(view12.shape == 3) {
															has6 = !has6;
														}
													} else {
														var x210 = x199;
														var y210 = y199;
														if(y210 == null) {
															y210 = 0;
														}
														if(x210 == null) {
															x210 = 0;
														}
														var point1_x6 = x210;
														var point1_y6 = y210;
														var x211 = view12.x + view12.width / 2;
														var y211 = view12.y + view12.height / 2;
														if(y211 == null) {
															y211 = 0;
														}
														if(x211 == null) {
															x211 = 0;
														}
														var point2_x6 = x211;
														var point2_y6 = y211;
														var x212 = point2_x6 - point1_x6;
														var y212 = point2_y6 - point1_y6;
														has6 = Math.sqrt(x212 * x212 + y212 * y212) <= view12.width / 2;
														if(view12.shape == 3) {
															has6 = !has6;
														}
													}
													break;
												case 4:
													has6 = Math.abs(x199 - view12.x - view12.width / 2) / (view12.width / 2) + Math.abs(y199 - view12.y - view12.height / 2) / (view12.height / 2) <= 1;
													break;
												case 5:
													has6 = !(Math.abs(x199 - view12.x - view12.width / 2) / (view12.width / 2) + Math.abs(y199 - view12.y - view12.height / 2) / (view12.height / 2) <= 1);
													break;
												}
												tmp6 = has6;
											}
											if(tmp6) {
												var position109 = (y199 * this111.getUInt16(0) + x199) * 4;
												position109 += vision_ds_Image.OFFSET;
												this111.b[position109] = color21 >> 24 & 255;
												this111.b[position109 + 1] = color21 >> 16 & 255;
												this111.b[position109 + 2] = color21 >> 8 & 255;
												this111.b[position109 + 3] = color21 & 255;
											}
										} else {
											var position110 = (y199 * this111.getUInt16(0) + x199) * 4;
											position110 += vision_ds_Image.OFFSET;
											this111.b[position110] = color21 >> 24 & 255;
											this111.b[position110 + 1] = color21 >> 16 & 255;
											this111.b[position110 + 2] = color21 >> 8 & 255;
											this111.b[position110 + 3] = color21 & 255;
										}
									}
									if(x111 != (x111 | 0) && y111 != (y111 | 0)) {
										var x213 = Math.ceil(x111);
										var y213 = Math.ceil(y111);
										var Red8 = (xFraction7 + yFraction7) / 2 * ((color7 >> 16 & 255) / 255);
										var Green8 = (xFraction7 + yFraction7) / 2 * ((color7 >> 8 & 255) / 255);
										var Blue8 = (xFraction7 + yFraction7) / 2 * ((color7 & 255) / 255);
										var Alpha28 = (color7 >> 24 & 255) / 255;
										if(Alpha28 == null) {
											Alpha28 = 1;
										}
										var this127 = 0;
										var color22 = this127;
										var Alpha29 = Alpha28;
										if(Alpha29 == null) {
											Alpha29 = 1;
										}
										var value125 = Math.round(Red8 * 255);
										color22 &= -16711681;
										color22 |= (value125 > 255 ? 255 : value125 < 0 ? 0 : value125) << 16;
										var value126 = Math.round(Green8 * 255);
										color22 &= -65281;
										color22 |= (value126 > 255 ? 255 : value126 < 0 ? 0 : value126) << 8;
										var value127 = Math.round(Blue8 * 255);
										color22 &= -256;
										color22 |= value127 > 255 ? 255 : value127 < 0 ? 0 : value127;
										var value128 = Math.round(Alpha29 * 255);
										color22 &= 16777215;
										color22 |= (value128 > 255 ? 255 : value128 < 0 ? 0 : value128) << 24;
										var color23 = color22;
										if(!(x213 >= 0 && y213 >= 0 && x213 < this111.getUInt16(0) && y213 < Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4)))) {
											var this_x103 = x213;
											var this_y103 = y213;
											throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this111,new vision_ds_Point2D(this_x103,this_y103)));
										} else if(this111.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this111.getUInt16(0) || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4)) || this111.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
											var v7 = null;
											var tmp7;
											if(!(this111.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this111.getUInt16(0) || this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4)) || this111.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v7 == null) {
												tmp7 = x213 >= 0 && y213 >= 0 && x213 < this111.getUInt16(0) && y213 < Math.ceil((this111.length - vision_ds_Image.OFFSET) / (this111.getUInt16(0) * 4));
											} else {
												var has7 = false;
												var view14;
												if(v7 != null) {
													view14 = v7;
												} else {
													var _g27 = this111.getUInt16(vision_ds_Image.WIDTH_BYTES);
													var _g28 = this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
													var _g29 = this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
													var this128 = this111.b;
													var view15 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
													view14 = new vision_ds_ImageView(_g27,_g28,_g29,this111.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this128[view15]);
												}
												switch(view14.shape) {
												case 0:
													has7 = x213 < view14.x + view14.width && y213 < view14.y + view14.height && x213 >= view14.x && y213 >= view14.y;
													break;
												case 1:
													has7 = !(x213 < view14.x + view14.width && y213 < view14.y + view14.height && x213 >= view14.x && y213 >= view14.y);
													break;
												case 2:case 3:
													if(view14.width > view14.height) {
														var a14 = view14.width / 2;
														var b14 = view14.height / 2;
														var c14 = Math.sqrt(a14 * a14 - b14 * b14);
														var x214 = view14.x + view14.width / 2 - c14;
														var y214 = view14.y + view14.height / 2;
														if(y214 == null) {
															y214 = 0;
														}
														if(x214 == null) {
															x214 = 0;
														}
														var f1_x14 = x214;
														var f1_y14 = y214;
														var x215 = view14.x + view14.width / 2 + c14;
														var y215 = view14.y + view14.height / 2;
														if(y215 == null) {
															y215 = 0;
														}
														if(x215 == null) {
															x215 = 0;
														}
														var f2_x14 = x215;
														var f2_y14 = y215;
														var x216 = x213;
														var y216 = y213;
														if(y216 == null) {
															y216 = 0;
														}
														if(x216 == null) {
															x216 = 0;
														}
														var p_x14 = x216;
														var p_y14 = y216;
														var x217 = p_x14 - f1_x14;
														var y217 = p_y14 - f1_y14;
														var x218 = p_x14 - f2_x14;
														var y218 = p_y14 - f2_y14;
														has7 = Math.sqrt(x217 * x217 + y217 * y217) + Math.sqrt(x218 * x218 + y218 * y218) <= view14.width;
														if(view14.shape == 3) {
															has7 = !has7;
														}
													} else if(view14.height > view14.width) {
														var a15 = view14.height / 2;
														var b15 = view14.width / 2;
														var c15 = Math.sqrt(a15 * a15 - b15 * b15);
														var x219 = view14.x + view14.width / 2;
														var y219 = view14.y + view14.height / 2 - c15;
														if(y219 == null) {
															y219 = 0;
														}
														if(x219 == null) {
															x219 = 0;
														}
														var f1_x15 = x219;
														var f1_y15 = y219;
														var x220 = view14.x + view14.width / 2;
														var y220 = view14.y + view14.height / 2 + c15;
														if(y220 == null) {
															y220 = 0;
														}
														if(x220 == null) {
															x220 = 0;
														}
														var f2_x15 = x220;
														var f2_y15 = y220;
														var x221 = x213;
														var y221 = y213;
														if(y221 == null) {
															y221 = 0;
														}
														if(x221 == null) {
															x221 = 0;
														}
														var p_x15 = x221;
														var p_y15 = y221;
														var x222 = p_x15 - f1_x15;
														var y222 = p_y15 - f1_y15;
														var x223 = p_x15 - f2_x15;
														var y223 = p_y15 - f2_y15;
														has7 = Math.sqrt(x222 * x222 + y222 * y222) + Math.sqrt(x223 * x223 + y223 * y223) <= view14.height;
														if(view14.shape == 3) {
															has7 = !has7;
														}
													} else {
														var x224 = x213;
														var y224 = y213;
														if(y224 == null) {
															y224 = 0;
														}
														if(x224 == null) {
															x224 = 0;
														}
														var point1_x7 = x224;
														var point1_y7 = y224;
														var x225 = view14.x + view14.width / 2;
														var y225 = view14.y + view14.height / 2;
														if(y225 == null) {
															y225 = 0;
														}
														if(x225 == null) {
															x225 = 0;
														}
														var point2_x7 = x225;
														var point2_y7 = y225;
														var x226 = point2_x7 - point1_x7;
														var y226 = point2_y7 - point1_y7;
														has7 = Math.sqrt(x226 * x226 + y226 * y226) <= view14.width / 2;
														if(view14.shape == 3) {
															has7 = !has7;
														}
													}
													break;
												case 4:
													has7 = Math.abs(x213 - view14.x - view14.width / 2) / (view14.width / 2) + Math.abs(y213 - view14.y - view14.height / 2) / (view14.height / 2) <= 1;
													break;
												case 5:
													has7 = !(Math.abs(x213 - view14.x - view14.width / 2) / (view14.width / 2) + Math.abs(y213 - view14.y - view14.height / 2) / (view14.height / 2) <= 1);
													break;
												}
												tmp7 = has7;
											}
											if(tmp7) {
												var position111 = (y213 * this111.getUInt16(0) + x213) * 4;
												position111 += vision_ds_Image.OFFSET;
												this111.b[position111] = color23 >> 24 & 255;
												this111.b[position111 + 1] = color23 >> 16 & 255;
												this111.b[position111 + 2] = color23 >> 8 & 255;
												this111.b[position111 + 3] = color23 & 255;
											}
										} else {
											var position112 = (y213 * this111.getUInt16(0) + x213) * 4;
											position112 += vision_ds_Image.OFFSET;
											this111.b[position112] = color23 >> 24 & 255;
											this111.b[position112 + 1] = color23 >> 16 & 255;
											this111.b[position112 + 2] = color23 >> 8 & 255;
											this111.b[position112 + 3] = color23 & 255;
										}
									}
								}
							} else {
								var yFraction8 = y109 - (y109 | 0);
								var xFraction8 = x109 - (x109 | 0);
								var x227 = Math.floor(x109);
								var y227 = Math.floor(y109);
								var Red9 = (1 - xFraction8 + (1 - yFraction8)) / 2 * ((color7 >> 16 & 255) / 255);
								var Green9 = (1 - xFraction8 + (1 - yFraction8)) / 2 * ((color7 >> 8 & 255) / 255);
								var Blue9 = (1 - xFraction8 + (1 - yFraction8)) / 2 * ((color7 & 255) / 255);
								var Alpha30 = (color7 >> 24 & 255) / 255;
								if(Alpha30 == null) {
									Alpha30 = 1;
								}
								var this129 = 0;
								var color24 = this129;
								var Alpha31 = Alpha30;
								if(Alpha31 == null) {
									Alpha31 = 1;
								}
								var value129 = Math.round(Red9 * 255);
								color24 &= -16711681;
								color24 |= (value129 > 255 ? 255 : value129 < 0 ? 0 : value129) << 16;
								var value130 = Math.round(Green9 * 255);
								color24 &= -65281;
								color24 |= (value130 > 255 ? 255 : value130 < 0 ? 0 : value130) << 8;
								var value131 = Math.round(Blue9 * 255);
								color24 &= -256;
								color24 |= value131 > 255 ? 255 : value131 < 0 ? 0 : value131;
								var value132 = Math.round(Alpha31 * 255);
								color24 &= 16777215;
								color24 |= (value132 > 255 ? 255 : value132 < 0 ? 0 : value132) << 24;
								var color25 = color24;
								if(!(x227 >= 0 && y227 >= 0 && x227 < this110.getUInt16(0) && y227 < Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4)))) {
									var this_x104 = x227;
									var this_y104 = y227;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this110,new vision_ds_Point2D(this_x104,this_y104)));
								} else if(this110.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this110.getUInt16(0) || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4)) || this110.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
									var v8 = null;
									var tmp8;
									if(!(this110.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this110.getUInt16(0) || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4)) || this110.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v8 == null) {
										tmp8 = x227 >= 0 && y227 >= 0 && x227 < this110.getUInt16(0) && y227 < Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4));
									} else {
										var has8 = false;
										var view16;
										if(v8 != null) {
											view16 = v8;
										} else {
											var _g30 = this110.getUInt16(vision_ds_Image.WIDTH_BYTES);
											var _g31 = this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
											var _g32 = this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
											var this130 = this110.b;
											var view17 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
											view16 = new vision_ds_ImageView(_g30,_g31,_g32,this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this130[view17]);
										}
										switch(view16.shape) {
										case 0:
											has8 = x227 < view16.x + view16.width && y227 < view16.y + view16.height && x227 >= view16.x && y227 >= view16.y;
											break;
										case 1:
											has8 = !(x227 < view16.x + view16.width && y227 < view16.y + view16.height && x227 >= view16.x && y227 >= view16.y);
											break;
										case 2:case 3:
											if(view16.width > view16.height) {
												var a16 = view16.width / 2;
												var b16 = view16.height / 2;
												var c16 = Math.sqrt(a16 * a16 - b16 * b16);
												var x228 = view16.x + view16.width / 2 - c16;
												var y228 = view16.y + view16.height / 2;
												if(y228 == null) {
													y228 = 0;
												}
												if(x228 == null) {
													x228 = 0;
												}
												var f1_x16 = x228;
												var f1_y16 = y228;
												var x229 = view16.x + view16.width / 2 + c16;
												var y229 = view16.y + view16.height / 2;
												if(y229 == null) {
													y229 = 0;
												}
												if(x229 == null) {
													x229 = 0;
												}
												var f2_x16 = x229;
												var f2_y16 = y229;
												var x230 = x227;
												var y230 = y227;
												if(y230 == null) {
													y230 = 0;
												}
												if(x230 == null) {
													x230 = 0;
												}
												var p_x16 = x230;
												var p_y16 = y230;
												var x231 = p_x16 - f1_x16;
												var y231 = p_y16 - f1_y16;
												var x232 = p_x16 - f2_x16;
												var y232 = p_y16 - f2_y16;
												has8 = Math.sqrt(x231 * x231 + y231 * y231) + Math.sqrt(x232 * x232 + y232 * y232) <= view16.width;
												if(view16.shape == 3) {
													has8 = !has8;
												}
											} else if(view16.height > view16.width) {
												var a17 = view16.height / 2;
												var b17 = view16.width / 2;
												var c17 = Math.sqrt(a17 * a17 - b17 * b17);
												var x233 = view16.x + view16.width / 2;
												var y233 = view16.y + view16.height / 2 - c17;
												if(y233 == null) {
													y233 = 0;
												}
												if(x233 == null) {
													x233 = 0;
												}
												var f1_x17 = x233;
												var f1_y17 = y233;
												var x234 = view16.x + view16.width / 2;
												var y234 = view16.y + view16.height / 2 + c17;
												if(y234 == null) {
													y234 = 0;
												}
												if(x234 == null) {
													x234 = 0;
												}
												var f2_x17 = x234;
												var f2_y17 = y234;
												var x235 = x227;
												var y235 = y227;
												if(y235 == null) {
													y235 = 0;
												}
												if(x235 == null) {
													x235 = 0;
												}
												var p_x17 = x235;
												var p_y17 = y235;
												var x236 = p_x17 - f1_x17;
												var y236 = p_y17 - f1_y17;
												var x237 = p_x17 - f2_x17;
												var y237 = p_y17 - f2_y17;
												has8 = Math.sqrt(x236 * x236 + y236 * y236) + Math.sqrt(x237 * x237 + y237 * y237) <= view16.height;
												if(view16.shape == 3) {
													has8 = !has8;
												}
											} else {
												var x238 = x227;
												var y238 = y227;
												if(y238 == null) {
													y238 = 0;
												}
												if(x238 == null) {
													x238 = 0;
												}
												var point1_x8 = x238;
												var point1_y8 = y238;
												var x239 = view16.x + view16.width / 2;
												var y239 = view16.y + view16.height / 2;
												if(y239 == null) {
													y239 = 0;
												}
												if(x239 == null) {
													x239 = 0;
												}
												var point2_x8 = x239;
												var point2_y8 = y239;
												var x240 = point2_x8 - point1_x8;
												var y240 = point2_y8 - point1_y8;
												has8 = Math.sqrt(x240 * x240 + y240 * y240) <= view16.width / 2;
												if(view16.shape == 3) {
													has8 = !has8;
												}
											}
											break;
										case 4:
											has8 = Math.abs(x227 - view16.x - view16.width / 2) / (view16.width / 2) + Math.abs(y227 - view16.y - view16.height / 2) / (view16.height / 2) <= 1;
											break;
										case 5:
											has8 = !(Math.abs(x227 - view16.x - view16.width / 2) / (view16.width / 2) + Math.abs(y227 - view16.y - view16.height / 2) / (view16.height / 2) <= 1);
											break;
										}
										tmp8 = has8;
									}
									if(tmp8) {
										var position113 = (y227 * this110.getUInt16(0) + x227) * 4;
										position113 += vision_ds_Image.OFFSET;
										this110.b[position113] = color25 >> 24 & 255;
										this110.b[position113 + 1] = color25 >> 16 & 255;
										this110.b[position113 + 2] = color25 >> 8 & 255;
										this110.b[position113 + 3] = color25 & 255;
									}
								} else {
									var position114 = (y227 * this110.getUInt16(0) + x227) * 4;
									position114 += vision_ds_Image.OFFSET;
									this110.b[position114] = color25 >> 24 & 255;
									this110.b[position114 + 1] = color25 >> 16 & 255;
									this110.b[position114 + 2] = color25 >> 8 & 255;
									this110.b[position114 + 3] = color25 & 255;
								}
								if(y109 != (y109 | 0)) {
									var x241 = Math.floor(x109);
									var y241 = Math.ceil(y109);
									var Red10 = (1 - xFraction8 + yFraction8) / 2 * ((color7 >> 16 & 255) / 255);
									var Green10 = (1 - xFraction8 + yFraction8) / 2 * ((color7 >> 8 & 255) / 255);
									var Blue10 = (1 - xFraction8 + yFraction8) / 2 * ((color7 & 255) / 255);
									var Alpha32 = (color7 >> 24 & 255) / 255;
									if(Alpha32 == null) {
										Alpha32 = 1;
									}
									var this131 = 0;
									var color26 = this131;
									var Alpha33 = Alpha32;
									if(Alpha33 == null) {
										Alpha33 = 1;
									}
									var value133 = Math.round(Red10 * 255);
									color26 &= -16711681;
									color26 |= (value133 > 255 ? 255 : value133 < 0 ? 0 : value133) << 16;
									var value134 = Math.round(Green10 * 255);
									color26 &= -65281;
									color26 |= (value134 > 255 ? 255 : value134 < 0 ? 0 : value134) << 8;
									var value135 = Math.round(Blue10 * 255);
									color26 &= -256;
									color26 |= value135 > 255 ? 255 : value135 < 0 ? 0 : value135;
									var value136 = Math.round(Alpha33 * 255);
									color26 &= 16777215;
									color26 |= (value136 > 255 ? 255 : value136 < 0 ? 0 : value136) << 24;
									var color27 = color26;
									if(!(x241 >= 0 && y241 >= 0 && x241 < this110.getUInt16(0) && y241 < Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4)))) {
										var this_x105 = x241;
										var this_y105 = y241;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this110,new vision_ds_Point2D(this_x105,this_y105)));
									} else if(this110.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this110.getUInt16(0) || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4)) || this110.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
										var v9 = null;
										var tmp9;
										if(!(this110.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this110.getUInt16(0) || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4)) || this110.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v9 == null) {
											tmp9 = x241 >= 0 && y241 >= 0 && x241 < this110.getUInt16(0) && y241 < Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4));
										} else {
											var has9 = false;
											var view18;
											if(v9 != null) {
												view18 = v9;
											} else {
												var _g33 = this110.getUInt16(vision_ds_Image.WIDTH_BYTES);
												var _g34 = this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
												var _g35 = this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
												var this132 = this110.b;
												var view19 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
												view18 = new vision_ds_ImageView(_g33,_g34,_g35,this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this132[view19]);
											}
											switch(view18.shape) {
											case 0:
												has9 = x241 < view18.x + view18.width && y241 < view18.y + view18.height && x241 >= view18.x && y241 >= view18.y;
												break;
											case 1:
												has9 = !(x241 < view18.x + view18.width && y241 < view18.y + view18.height && x241 >= view18.x && y241 >= view18.y);
												break;
											case 2:case 3:
												if(view18.width > view18.height) {
													var a18 = view18.width / 2;
													var b18 = view18.height / 2;
													var c18 = Math.sqrt(a18 * a18 - b18 * b18);
													var x242 = view18.x + view18.width / 2 - c18;
													var y242 = view18.y + view18.height / 2;
													if(y242 == null) {
														y242 = 0;
													}
													if(x242 == null) {
														x242 = 0;
													}
													var f1_x18 = x242;
													var f1_y18 = y242;
													var x243 = view18.x + view18.width / 2 + c18;
													var y243 = view18.y + view18.height / 2;
													if(y243 == null) {
														y243 = 0;
													}
													if(x243 == null) {
														x243 = 0;
													}
													var f2_x18 = x243;
													var f2_y18 = y243;
													var x244 = x241;
													var y244 = y241;
													if(y244 == null) {
														y244 = 0;
													}
													if(x244 == null) {
														x244 = 0;
													}
													var p_x18 = x244;
													var p_y18 = y244;
													var x245 = p_x18 - f1_x18;
													var y245 = p_y18 - f1_y18;
													var x246 = p_x18 - f2_x18;
													var y246 = p_y18 - f2_y18;
													has9 = Math.sqrt(x245 * x245 + y245 * y245) + Math.sqrt(x246 * x246 + y246 * y246) <= view18.width;
													if(view18.shape == 3) {
														has9 = !has9;
													}
												} else if(view18.height > view18.width) {
													var a19 = view18.height / 2;
													var b19 = view18.width / 2;
													var c19 = Math.sqrt(a19 * a19 - b19 * b19);
													var x247 = view18.x + view18.width / 2;
													var y247 = view18.y + view18.height / 2 - c19;
													if(y247 == null) {
														y247 = 0;
													}
													if(x247 == null) {
														x247 = 0;
													}
													var f1_x19 = x247;
													var f1_y19 = y247;
													var x248 = view18.x + view18.width / 2;
													var y248 = view18.y + view18.height / 2 + c19;
													if(y248 == null) {
														y248 = 0;
													}
													if(x248 == null) {
														x248 = 0;
													}
													var f2_x19 = x248;
													var f2_y19 = y248;
													var x249 = x241;
													var y249 = y241;
													if(y249 == null) {
														y249 = 0;
													}
													if(x249 == null) {
														x249 = 0;
													}
													var p_x19 = x249;
													var p_y19 = y249;
													var x250 = p_x19 - f1_x19;
													var y250 = p_y19 - f1_y19;
													var x251 = p_x19 - f2_x19;
													var y251 = p_y19 - f2_y19;
													has9 = Math.sqrt(x250 * x250 + y250 * y250) + Math.sqrt(x251 * x251 + y251 * y251) <= view18.height;
													if(view18.shape == 3) {
														has9 = !has9;
													}
												} else {
													var x252 = x241;
													var y252 = y241;
													if(y252 == null) {
														y252 = 0;
													}
													if(x252 == null) {
														x252 = 0;
													}
													var point1_x9 = x252;
													var point1_y9 = y252;
													var x253 = view18.x + view18.width / 2;
													var y253 = view18.y + view18.height / 2;
													if(y253 == null) {
														y253 = 0;
													}
													if(x253 == null) {
														x253 = 0;
													}
													var point2_x9 = x253;
													var point2_y9 = y253;
													var x254 = point2_x9 - point1_x9;
													var y254 = point2_y9 - point1_y9;
													has9 = Math.sqrt(x254 * x254 + y254 * y254) <= view18.width / 2;
													if(view18.shape == 3) {
														has9 = !has9;
													}
												}
												break;
											case 4:
												has9 = Math.abs(x241 - view18.x - view18.width / 2) / (view18.width / 2) + Math.abs(y241 - view18.y - view18.height / 2) / (view18.height / 2) <= 1;
												break;
											case 5:
												has9 = !(Math.abs(x241 - view18.x - view18.width / 2) / (view18.width / 2) + Math.abs(y241 - view18.y - view18.height / 2) / (view18.height / 2) <= 1);
												break;
											}
											tmp9 = has9;
										}
										if(tmp9) {
											var position115 = (y241 * this110.getUInt16(0) + x241) * 4;
											position115 += vision_ds_Image.OFFSET;
											this110.b[position115] = color27 >> 24 & 255;
											this110.b[position115 + 1] = color27 >> 16 & 255;
											this110.b[position115 + 2] = color27 >> 8 & 255;
											this110.b[position115 + 3] = color27 & 255;
										}
									} else {
										var position116 = (y241 * this110.getUInt16(0) + x241) * 4;
										position116 += vision_ds_Image.OFFSET;
										this110.b[position116] = color27 >> 24 & 255;
										this110.b[position116 + 1] = color27 >> 16 & 255;
										this110.b[position116 + 2] = color27 >> 8 & 255;
										this110.b[position116 + 3] = color27 & 255;
									}
								}
								if(x109 != (x109 | 0)) {
									var x255 = Math.ceil(x109);
									var y255 = Math.floor(y109);
									var Red11 = (xFraction8 + (1 - yFraction8)) / 2 * ((color7 >> 16 & 255) / 255);
									var Green11 = (xFraction8 + (1 - yFraction8)) / 2 * ((color7 >> 8 & 255) / 255);
									var Blue11 = (xFraction8 + (1 - yFraction8)) / 2 * ((color7 & 255) / 255);
									var Alpha34 = (color7 >> 24 & 255) / 255;
									if(Alpha34 == null) {
										Alpha34 = 1;
									}
									var this133 = 0;
									var color28 = this133;
									var Alpha35 = Alpha34;
									if(Alpha35 == null) {
										Alpha35 = 1;
									}
									var value137 = Math.round(Red11 * 255);
									color28 &= -16711681;
									color28 |= (value137 > 255 ? 255 : value137 < 0 ? 0 : value137) << 16;
									var value138 = Math.round(Green11 * 255);
									color28 &= -65281;
									color28 |= (value138 > 255 ? 255 : value138 < 0 ? 0 : value138) << 8;
									var value139 = Math.round(Blue11 * 255);
									color28 &= -256;
									color28 |= value139 > 255 ? 255 : value139 < 0 ? 0 : value139;
									var value140 = Math.round(Alpha35 * 255);
									color28 &= 16777215;
									color28 |= (value140 > 255 ? 255 : value140 < 0 ? 0 : value140) << 24;
									var color29 = color28;
									if(!(x255 >= 0 && y255 >= 0 && x255 < this110.getUInt16(0) && y255 < Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4)))) {
										var this_x106 = x255;
										var this_y106 = y255;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this110,new vision_ds_Point2D(this_x106,this_y106)));
									} else if(this110.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this110.getUInt16(0) || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4)) || this110.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
										var v10 = null;
										var tmp10;
										if(!(this110.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this110.getUInt16(0) || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4)) || this110.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v10 == null) {
											tmp10 = x255 >= 0 && y255 >= 0 && x255 < this110.getUInt16(0) && y255 < Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4));
										} else {
											var has10 = false;
											var view20;
											if(v10 != null) {
												view20 = v10;
											} else {
												var _g36 = this110.getUInt16(vision_ds_Image.WIDTH_BYTES);
												var _g37 = this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
												var _g38 = this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
												var this134 = this110.b;
												var view21 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
												view20 = new vision_ds_ImageView(_g36,_g37,_g38,this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this134[view21]);
											}
											switch(view20.shape) {
											case 0:
												has10 = x255 < view20.x + view20.width && y255 < view20.y + view20.height && x255 >= view20.x && y255 >= view20.y;
												break;
											case 1:
												has10 = !(x255 < view20.x + view20.width && y255 < view20.y + view20.height && x255 >= view20.x && y255 >= view20.y);
												break;
											case 2:case 3:
												if(view20.width > view20.height) {
													var a20 = view20.width / 2;
													var b20 = view20.height / 2;
													var c20 = Math.sqrt(a20 * a20 - b20 * b20);
													var x256 = view20.x + view20.width / 2 - c20;
													var y256 = view20.y + view20.height / 2;
													if(y256 == null) {
														y256 = 0;
													}
													if(x256 == null) {
														x256 = 0;
													}
													var f1_x20 = x256;
													var f1_y20 = y256;
													var x257 = view20.x + view20.width / 2 + c20;
													var y257 = view20.y + view20.height / 2;
													if(y257 == null) {
														y257 = 0;
													}
													if(x257 == null) {
														x257 = 0;
													}
													var f2_x20 = x257;
													var f2_y20 = y257;
													var x258 = x255;
													var y258 = y255;
													if(y258 == null) {
														y258 = 0;
													}
													if(x258 == null) {
														x258 = 0;
													}
													var p_x20 = x258;
													var p_y20 = y258;
													var x259 = p_x20 - f1_x20;
													var y259 = p_y20 - f1_y20;
													var x260 = p_x20 - f2_x20;
													var y260 = p_y20 - f2_y20;
													has10 = Math.sqrt(x259 * x259 + y259 * y259) + Math.sqrt(x260 * x260 + y260 * y260) <= view20.width;
													if(view20.shape == 3) {
														has10 = !has10;
													}
												} else if(view20.height > view20.width) {
													var a21 = view20.height / 2;
													var b21 = view20.width / 2;
													var c21 = Math.sqrt(a21 * a21 - b21 * b21);
													var x261 = view20.x + view20.width / 2;
													var y261 = view20.y + view20.height / 2 - c21;
													if(y261 == null) {
														y261 = 0;
													}
													if(x261 == null) {
														x261 = 0;
													}
													var f1_x21 = x261;
													var f1_y21 = y261;
													var x262 = view20.x + view20.width / 2;
													var y262 = view20.y + view20.height / 2 + c21;
													if(y262 == null) {
														y262 = 0;
													}
													if(x262 == null) {
														x262 = 0;
													}
													var f2_x21 = x262;
													var f2_y21 = y262;
													var x263 = x255;
													var y263 = y255;
													if(y263 == null) {
														y263 = 0;
													}
													if(x263 == null) {
														x263 = 0;
													}
													var p_x21 = x263;
													var p_y21 = y263;
													var x264 = p_x21 - f1_x21;
													var y264 = p_y21 - f1_y21;
													var x265 = p_x21 - f2_x21;
													var y265 = p_y21 - f2_y21;
													has10 = Math.sqrt(x264 * x264 + y264 * y264) + Math.sqrt(x265 * x265 + y265 * y265) <= view20.height;
													if(view20.shape == 3) {
														has10 = !has10;
													}
												} else {
													var x266 = x255;
													var y266 = y255;
													if(y266 == null) {
														y266 = 0;
													}
													if(x266 == null) {
														x266 = 0;
													}
													var point1_x10 = x266;
													var point1_y10 = y266;
													var x267 = view20.x + view20.width / 2;
													var y267 = view20.y + view20.height / 2;
													if(y267 == null) {
														y267 = 0;
													}
													if(x267 == null) {
														x267 = 0;
													}
													var point2_x10 = x267;
													var point2_y10 = y267;
													var x268 = point2_x10 - point1_x10;
													var y268 = point2_y10 - point1_y10;
													has10 = Math.sqrt(x268 * x268 + y268 * y268) <= view20.width / 2;
													if(view20.shape == 3) {
														has10 = !has10;
													}
												}
												break;
											case 4:
												has10 = Math.abs(x255 - view20.x - view20.width / 2) / (view20.width / 2) + Math.abs(y255 - view20.y - view20.height / 2) / (view20.height / 2) <= 1;
												break;
											case 5:
												has10 = !(Math.abs(x255 - view20.x - view20.width / 2) / (view20.width / 2) + Math.abs(y255 - view20.y - view20.height / 2) / (view20.height / 2) <= 1);
												break;
											}
											tmp10 = has10;
										}
										if(tmp10) {
											var position117 = (y255 * this110.getUInt16(0) + x255) * 4;
											position117 += vision_ds_Image.OFFSET;
											this110.b[position117] = color29 >> 24 & 255;
											this110.b[position117 + 1] = color29 >> 16 & 255;
											this110.b[position117 + 2] = color29 >> 8 & 255;
											this110.b[position117 + 3] = color29 & 255;
										}
									} else {
										var position118 = (y255 * this110.getUInt16(0) + x255) * 4;
										position118 += vision_ds_Image.OFFSET;
										this110.b[position118] = color29 >> 24 & 255;
										this110.b[position118 + 1] = color29 >> 16 & 255;
										this110.b[position118 + 2] = color29 >> 8 & 255;
										this110.b[position118 + 3] = color29 & 255;
									}
								}
								if(x109 != (x109 | 0) && y109 != (y109 | 0)) {
									var x269 = Math.ceil(x109);
									var y269 = Math.ceil(y109);
									var Red12 = (xFraction8 + yFraction8) / 2 * ((color7 >> 16 & 255) / 255);
									var Green12 = (xFraction8 + yFraction8) / 2 * ((color7 >> 8 & 255) / 255);
									var Blue12 = (xFraction8 + yFraction8) / 2 * ((color7 & 255) / 255);
									var Alpha36 = (color7 >> 24 & 255) / 255;
									if(Alpha36 == null) {
										Alpha36 = 1;
									}
									var this135 = 0;
									var color30 = this135;
									var Alpha37 = Alpha36;
									if(Alpha37 == null) {
										Alpha37 = 1;
									}
									var value141 = Math.round(Red12 * 255);
									color30 &= -16711681;
									color30 |= (value141 > 255 ? 255 : value141 < 0 ? 0 : value141) << 16;
									var value142 = Math.round(Green12 * 255);
									color30 &= -65281;
									color30 |= (value142 > 255 ? 255 : value142 < 0 ? 0 : value142) << 8;
									var value143 = Math.round(Blue12 * 255);
									color30 &= -256;
									color30 |= value143 > 255 ? 255 : value143 < 0 ? 0 : value143;
									var value144 = Math.round(Alpha37 * 255);
									color30 &= 16777215;
									color30 |= (value144 > 255 ? 255 : value144 < 0 ? 0 : value144) << 24;
									var color31 = color30;
									if(!(x269 >= 0 && y269 >= 0 && x269 < this110.getUInt16(0) && y269 < Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4)))) {
										var this_x107 = x269;
										var this_y107 = y269;
										throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this110,new vision_ds_Point2D(this_x107,this_y107)));
									} else if(this110.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this110.getUInt16(0) || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4)) || this110.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
										var v11 = null;
										var tmp11;
										if(!(this110.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this110.getUInt16(0) || this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4)) || this110.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v11 == null) {
											tmp11 = x269 >= 0 && y269 >= 0 && x269 < this110.getUInt16(0) && y269 < Math.ceil((this110.length - vision_ds_Image.OFFSET) / (this110.getUInt16(0) * 4));
										} else {
											var has11 = false;
											var view22;
											if(v11 != null) {
												view22 = v11;
											} else {
												var _g39 = this110.getUInt16(vision_ds_Image.WIDTH_BYTES);
												var _g40 = this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
												var _g41 = this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
												var this136 = this110.b;
												var view23 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
												view22 = new vision_ds_ImageView(_g39,_g40,_g41,this110.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this136[view23]);
											}
											switch(view22.shape) {
											case 0:
												has11 = x269 < view22.x + view22.width && y269 < view22.y + view22.height && x269 >= view22.x && y269 >= view22.y;
												break;
											case 1:
												has11 = !(x269 < view22.x + view22.width && y269 < view22.y + view22.height && x269 >= view22.x && y269 >= view22.y);
												break;
											case 2:case 3:
												if(view22.width > view22.height) {
													var a22 = view22.width / 2;
													var b22 = view22.height / 2;
													var c22 = Math.sqrt(a22 * a22 - b22 * b22);
													var x270 = view22.x + view22.width / 2 - c22;
													var y270 = view22.y + view22.height / 2;
													if(y270 == null) {
														y270 = 0;
													}
													if(x270 == null) {
														x270 = 0;
													}
													var f1_x22 = x270;
													var f1_y22 = y270;
													var x271 = view22.x + view22.width / 2 + c22;
													var y271 = view22.y + view22.height / 2;
													if(y271 == null) {
														y271 = 0;
													}
													if(x271 == null) {
														x271 = 0;
													}
													var f2_x22 = x271;
													var f2_y22 = y271;
													var x272 = x269;
													var y272 = y269;
													if(y272 == null) {
														y272 = 0;
													}
													if(x272 == null) {
														x272 = 0;
													}
													var p_x22 = x272;
													var p_y22 = y272;
													var x273 = p_x22 - f1_x22;
													var y273 = p_y22 - f1_y22;
													var x274 = p_x22 - f2_x22;
													var y274 = p_y22 - f2_y22;
													has11 = Math.sqrt(x273 * x273 + y273 * y273) + Math.sqrt(x274 * x274 + y274 * y274) <= view22.width;
													if(view22.shape == 3) {
														has11 = !has11;
													}
												} else if(view22.height > view22.width) {
													var a23 = view22.height / 2;
													var b23 = view22.width / 2;
													var c23 = Math.sqrt(a23 * a23 - b23 * b23);
													var x275 = view22.x + view22.width / 2;
													var y275 = view22.y + view22.height / 2 - c23;
													if(y275 == null) {
														y275 = 0;
													}
													if(x275 == null) {
														x275 = 0;
													}
													var f1_x23 = x275;
													var f1_y23 = y275;
													var x276 = view22.x + view22.width / 2;
													var y276 = view22.y + view22.height / 2 + c23;
													if(y276 == null) {
														y276 = 0;
													}
													if(x276 == null) {
														x276 = 0;
													}
													var f2_x23 = x276;
													var f2_y23 = y276;
													var x277 = x269;
													var y277 = y269;
													if(y277 == null) {
														y277 = 0;
													}
													if(x277 == null) {
														x277 = 0;
													}
													var p_x23 = x277;
													var p_y23 = y277;
													var x278 = p_x23 - f1_x23;
													var y278 = p_y23 - f1_y23;
													var x279 = p_x23 - f2_x23;
													var y279 = p_y23 - f2_y23;
													has11 = Math.sqrt(x278 * x278 + y278 * y278) + Math.sqrt(x279 * x279 + y279 * y279) <= view22.height;
													if(view22.shape == 3) {
														has11 = !has11;
													}
												} else {
													var x280 = x269;
													var y280 = y269;
													if(y280 == null) {
														y280 = 0;
													}
													if(x280 == null) {
														x280 = 0;
													}
													var point1_x11 = x280;
													var point1_y11 = y280;
													var x281 = view22.x + view22.width / 2;
													var y281 = view22.y + view22.height / 2;
													if(y281 == null) {
														y281 = 0;
													}
													if(x281 == null) {
														x281 = 0;
													}
													var point2_x11 = x281;
													var point2_y11 = y281;
													var x282 = point2_x11 - point1_x11;
													var y282 = point2_y11 - point1_y11;
													has11 = Math.sqrt(x282 * x282 + y282 * y282) <= view22.width / 2;
													if(view22.shape == 3) {
														has11 = !has11;
													}
												}
												break;
											case 4:
												has11 = Math.abs(x269 - view22.x - view22.width / 2) / (view22.width / 2) + Math.abs(y269 - view22.y - view22.height / 2) / (view22.height / 2) <= 1;
												break;
											case 5:
												has11 = !(Math.abs(x269 - view22.x - view22.width / 2) / (view22.width / 2) + Math.abs(y269 - view22.y - view22.height / 2) / (view22.height / 2) <= 1);
												break;
											}
											tmp11 = has11;
										}
										if(tmp11) {
											var position119 = (y269 * this110.getUInt16(0) + x269) * 4;
											position119 += vision_ds_Image.OFFSET;
											this110.b[position119] = color31 >> 24 & 255;
											this110.b[position119 + 1] = color31 >> 16 & 255;
											this110.b[position119 + 2] = color31 >> 8 & 255;
											this110.b[position119 + 3] = color31 & 255;
										}
									} else {
										var position120 = (y269 * this110.getUInt16(0) + x269) * 4;
										position120 += vision_ds_Image.OFFSET;
										this110.b[position120] = color31 >> 24 & 255;
										this110.b[position120 + 1] = color31 >> 16 & 255;
										this110.b[position120 + 2] = color31 >> 8 & 255;
										this110.b[position120 + 3] = color31 & 255;
									}
								}
							}
						} else {
							var yFraction9 = rhoIndex - (rhoIndex | 0);
							var xFraction9 = deg - (deg | 0);
							var x283 = Math.floor(deg);
							var y283 = Math.floor(rhoIndex);
							var Red13 = (1 - xFraction9 + (1 - yFraction9)) / 2 * ((color7 >> 16 & 255) / 255);
							var Green13 = (1 - xFraction9 + (1 - yFraction9)) / 2 * ((color7 >> 8 & 255) / 255);
							var Blue13 = (1 - xFraction9 + (1 - yFraction9)) / 2 * ((color7 & 255) / 255);
							var Alpha38 = (color7 >> 24 & 255) / 255;
							if(Alpha38 == null) {
								Alpha38 = 1;
							}
							var this137 = 0;
							var color32 = this137;
							var Alpha39 = Alpha38;
							if(Alpha39 == null) {
								Alpha39 = 1;
							}
							var value145 = Math.round(Red13 * 255);
							color32 &= -16711681;
							color32 |= (value145 > 255 ? 255 : value145 < 0 ? 0 : value145) << 16;
							var value146 = Math.round(Green13 * 255);
							color32 &= -65281;
							color32 |= (value146 > 255 ? 255 : value146 < 0 ? 0 : value146) << 8;
							var value147 = Math.round(Blue13 * 255);
							color32 &= -256;
							color32 |= value147 > 255 ? 255 : value147 < 0 ? 0 : value147;
							var value148 = Math.round(Alpha39 * 255);
							color32 &= 16777215;
							color32 |= (value148 > 255 ? 255 : value148 < 0 ? 0 : value148) << 24;
							var color33 = color32;
							if(!(x283 >= 0 && y283 >= 0 && x283 < accumulator.getUInt16(0) && y283 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
								var this_x108 = x283;
								var this_y108 = y283;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x108,this_y108)));
							} else if(accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != accumulator.getUInt16(0) || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)) || accumulator.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v12 = null;
								var tmp12;
								if(!(accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != accumulator.getUInt16(0) || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)) || accumulator.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v12 == null) {
									tmp12 = x283 >= 0 && y283 >= 0 && x283 < accumulator.getUInt16(0) && y283 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4));
								} else {
									var has12 = false;
									var view24;
									if(v12 != null) {
										view24 = v12;
									} else {
										var _g42 = accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g43 = accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g44 = accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var accumulator1 = accumulator.b;
										var view25 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view24 = new vision_ds_ImageView(_g42,_g43,_g44,accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),accumulator1[view25]);
									}
									switch(view24.shape) {
									case 0:
										has12 = x283 < view24.x + view24.width && y283 < view24.y + view24.height && x283 >= view24.x && y283 >= view24.y;
										break;
									case 1:
										has12 = !(x283 < view24.x + view24.width && y283 < view24.y + view24.height && x283 >= view24.x && y283 >= view24.y);
										break;
									case 2:case 3:
										if(view24.width > view24.height) {
											var a24 = view24.width / 2;
											var b24 = view24.height / 2;
											var c24 = Math.sqrt(a24 * a24 - b24 * b24);
											var x284 = view24.x + view24.width / 2 - c24;
											var y284 = view24.y + view24.height / 2;
											if(y284 == null) {
												y284 = 0;
											}
											if(x284 == null) {
												x284 = 0;
											}
											var f1_x24 = x284;
											var f1_y24 = y284;
											var x285 = view24.x + view24.width / 2 + c24;
											var y285 = view24.y + view24.height / 2;
											if(y285 == null) {
												y285 = 0;
											}
											if(x285 == null) {
												x285 = 0;
											}
											var f2_x24 = x285;
											var f2_y24 = y285;
											var x286 = x283;
											var y286 = y283;
											if(y286 == null) {
												y286 = 0;
											}
											if(x286 == null) {
												x286 = 0;
											}
											var p_x24 = x286;
											var p_y24 = y286;
											var x287 = p_x24 - f1_x24;
											var y287 = p_y24 - f1_y24;
											var x288 = p_x24 - f2_x24;
											var y288 = p_y24 - f2_y24;
											has12 = Math.sqrt(x287 * x287 + y287 * y287) + Math.sqrt(x288 * x288 + y288 * y288) <= view24.width;
											if(view24.shape == 3) {
												has12 = !has12;
											}
										} else if(view24.height > view24.width) {
											var a25 = view24.height / 2;
											var b25 = view24.width / 2;
											var c25 = Math.sqrt(a25 * a25 - b25 * b25);
											var x289 = view24.x + view24.width / 2;
											var y289 = view24.y + view24.height / 2 - c25;
											if(y289 == null) {
												y289 = 0;
											}
											if(x289 == null) {
												x289 = 0;
											}
											var f1_x25 = x289;
											var f1_y25 = y289;
											var x290 = view24.x + view24.width / 2;
											var y290 = view24.y + view24.height / 2 + c25;
											if(y290 == null) {
												y290 = 0;
											}
											if(x290 == null) {
												x290 = 0;
											}
											var f2_x25 = x290;
											var f2_y25 = y290;
											var x291 = x283;
											var y291 = y283;
											if(y291 == null) {
												y291 = 0;
											}
											if(x291 == null) {
												x291 = 0;
											}
											var p_x25 = x291;
											var p_y25 = y291;
											var x292 = p_x25 - f1_x25;
											var y292 = p_y25 - f1_y25;
											var x293 = p_x25 - f2_x25;
											var y293 = p_y25 - f2_y25;
											has12 = Math.sqrt(x292 * x292 + y292 * y292) + Math.sqrt(x293 * x293 + y293 * y293) <= view24.height;
											if(view24.shape == 3) {
												has12 = !has12;
											}
										} else {
											var x294 = x283;
											var y294 = y283;
											if(y294 == null) {
												y294 = 0;
											}
											if(x294 == null) {
												x294 = 0;
											}
											var point1_x12 = x294;
											var point1_y12 = y294;
											var x295 = view24.x + view24.width / 2;
											var y295 = view24.y + view24.height / 2;
											if(y295 == null) {
												y295 = 0;
											}
											if(x295 == null) {
												x295 = 0;
											}
											var point2_x12 = x295;
											var point2_y12 = y295;
											var x296 = point2_x12 - point1_x12;
											var y296 = point2_y12 - point1_y12;
											has12 = Math.sqrt(x296 * x296 + y296 * y296) <= view24.width / 2;
											if(view24.shape == 3) {
												has12 = !has12;
											}
										}
										break;
									case 4:
										has12 = Math.abs(x283 - view24.x - view24.width / 2) / (view24.width / 2) + Math.abs(y283 - view24.y - view24.height / 2) / (view24.height / 2) <= 1;
										break;
									case 5:
										has12 = !(Math.abs(x283 - view24.x - view24.width / 2) / (view24.width / 2) + Math.abs(y283 - view24.y - view24.height / 2) / (view24.height / 2) <= 1);
										break;
									}
									tmp12 = has12;
								}
								if(tmp12) {
									var position121 = (y283 * accumulator.getUInt16(0) + x283) * 4;
									position121 += vision_ds_Image.OFFSET;
									accumulator.b[position121] = color33 >> 24 & 255;
									accumulator.b[position121 + 1] = color33 >> 16 & 255;
									accumulator.b[position121 + 2] = color33 >> 8 & 255;
									accumulator.b[position121 + 3] = color33 & 255;
								}
							} else {
								var position122 = (y283 * accumulator.getUInt16(0) + x283) * 4;
								position122 += vision_ds_Image.OFFSET;
								accumulator.b[position122] = color33 >> 24 & 255;
								accumulator.b[position122 + 1] = color33 >> 16 & 255;
								accumulator.b[position122 + 2] = color33 >> 8 & 255;
								accumulator.b[position122 + 3] = color33 & 255;
							}
							if(rhoIndex != (rhoIndex | 0)) {
								var x297 = Math.floor(deg);
								var y297 = Math.ceil(rhoIndex);
								var Red14 = (1 - xFraction9 + yFraction9) / 2 * ((color7 >> 16 & 255) / 255);
								var Green14 = (1 - xFraction9 + yFraction9) / 2 * ((color7 >> 8 & 255) / 255);
								var Blue14 = (1 - xFraction9 + yFraction9) / 2 * ((color7 & 255) / 255);
								var Alpha40 = (color7 >> 24 & 255) / 255;
								if(Alpha40 == null) {
									Alpha40 = 1;
								}
								var this138 = 0;
								var color34 = this138;
								var Alpha41 = Alpha40;
								if(Alpha41 == null) {
									Alpha41 = 1;
								}
								var value149 = Math.round(Red14 * 255);
								color34 &= -16711681;
								color34 |= (value149 > 255 ? 255 : value149 < 0 ? 0 : value149) << 16;
								var value150 = Math.round(Green14 * 255);
								color34 &= -65281;
								color34 |= (value150 > 255 ? 255 : value150 < 0 ? 0 : value150) << 8;
								var value151 = Math.round(Blue14 * 255);
								color34 &= -256;
								color34 |= value151 > 255 ? 255 : value151 < 0 ? 0 : value151;
								var value152 = Math.round(Alpha41 * 255);
								color34 &= 16777215;
								color34 |= (value152 > 255 ? 255 : value152 < 0 ? 0 : value152) << 24;
								var color35 = color34;
								if(!(x297 >= 0 && y297 >= 0 && x297 < accumulator.getUInt16(0) && y297 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
									var this_x109 = x297;
									var this_y109 = y297;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x109,this_y109)));
								} else if(accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != accumulator.getUInt16(0) || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)) || accumulator.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
									var v13 = null;
									var tmp13;
									if(!(accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != accumulator.getUInt16(0) || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)) || accumulator.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v13 == null) {
										tmp13 = x297 >= 0 && y297 >= 0 && x297 < accumulator.getUInt16(0) && y297 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4));
									} else {
										var has13 = false;
										var view26;
										if(v13 != null) {
											view26 = v13;
										} else {
											var _g45 = accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES);
											var _g46 = accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
											var _g47 = accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
											var accumulator2 = accumulator.b;
											var view27 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
											view26 = new vision_ds_ImageView(_g45,_g46,_g47,accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),accumulator2[view27]);
										}
										switch(view26.shape) {
										case 0:
											has13 = x297 < view26.x + view26.width && y297 < view26.y + view26.height && x297 >= view26.x && y297 >= view26.y;
											break;
										case 1:
											has13 = !(x297 < view26.x + view26.width && y297 < view26.y + view26.height && x297 >= view26.x && y297 >= view26.y);
											break;
										case 2:case 3:
											if(view26.width > view26.height) {
												var a26 = view26.width / 2;
												var b26 = view26.height / 2;
												var c26 = Math.sqrt(a26 * a26 - b26 * b26);
												var x298 = view26.x + view26.width / 2 - c26;
												var y298 = view26.y + view26.height / 2;
												if(y298 == null) {
													y298 = 0;
												}
												if(x298 == null) {
													x298 = 0;
												}
												var f1_x26 = x298;
												var f1_y26 = y298;
												var x299 = view26.x + view26.width / 2 + c26;
												var y299 = view26.y + view26.height / 2;
												if(y299 == null) {
													y299 = 0;
												}
												if(x299 == null) {
													x299 = 0;
												}
												var f2_x26 = x299;
												var f2_y26 = y299;
												var x300 = x297;
												var y300 = y297;
												if(y300 == null) {
													y300 = 0;
												}
												if(x300 == null) {
													x300 = 0;
												}
												var p_x26 = x300;
												var p_y26 = y300;
												var x301 = p_x26 - f1_x26;
												var y301 = p_y26 - f1_y26;
												var x302 = p_x26 - f2_x26;
												var y302 = p_y26 - f2_y26;
												has13 = Math.sqrt(x301 * x301 + y301 * y301) + Math.sqrt(x302 * x302 + y302 * y302) <= view26.width;
												if(view26.shape == 3) {
													has13 = !has13;
												}
											} else if(view26.height > view26.width) {
												var a27 = view26.height / 2;
												var b27 = view26.width / 2;
												var c27 = Math.sqrt(a27 * a27 - b27 * b27);
												var x303 = view26.x + view26.width / 2;
												var y303 = view26.y + view26.height / 2 - c27;
												if(y303 == null) {
													y303 = 0;
												}
												if(x303 == null) {
													x303 = 0;
												}
												var f1_x27 = x303;
												var f1_y27 = y303;
												var x304 = view26.x + view26.width / 2;
												var y304 = view26.y + view26.height / 2 + c27;
												if(y304 == null) {
													y304 = 0;
												}
												if(x304 == null) {
													x304 = 0;
												}
												var f2_x27 = x304;
												var f2_y27 = y304;
												var x305 = x297;
												var y305 = y297;
												if(y305 == null) {
													y305 = 0;
												}
												if(x305 == null) {
													x305 = 0;
												}
												var p_x27 = x305;
												var p_y27 = y305;
												var x306 = p_x27 - f1_x27;
												var y306 = p_y27 - f1_y27;
												var x307 = p_x27 - f2_x27;
												var y307 = p_y27 - f2_y27;
												has13 = Math.sqrt(x306 * x306 + y306 * y306) + Math.sqrt(x307 * x307 + y307 * y307) <= view26.height;
												if(view26.shape == 3) {
													has13 = !has13;
												}
											} else {
												var x308 = x297;
												var y308 = y297;
												if(y308 == null) {
													y308 = 0;
												}
												if(x308 == null) {
													x308 = 0;
												}
												var point1_x13 = x308;
												var point1_y13 = y308;
												var x309 = view26.x + view26.width / 2;
												var y309 = view26.y + view26.height / 2;
												if(y309 == null) {
													y309 = 0;
												}
												if(x309 == null) {
													x309 = 0;
												}
												var point2_x13 = x309;
												var point2_y13 = y309;
												var x310 = point2_x13 - point1_x13;
												var y310 = point2_y13 - point1_y13;
												has13 = Math.sqrt(x310 * x310 + y310 * y310) <= view26.width / 2;
												if(view26.shape == 3) {
													has13 = !has13;
												}
											}
											break;
										case 4:
											has13 = Math.abs(x297 - view26.x - view26.width / 2) / (view26.width / 2) + Math.abs(y297 - view26.y - view26.height / 2) / (view26.height / 2) <= 1;
											break;
										case 5:
											has13 = !(Math.abs(x297 - view26.x - view26.width / 2) / (view26.width / 2) + Math.abs(y297 - view26.y - view26.height / 2) / (view26.height / 2) <= 1);
											break;
										}
										tmp13 = has13;
									}
									if(tmp13) {
										var position123 = (y297 * accumulator.getUInt16(0) + x297) * 4;
										position123 += vision_ds_Image.OFFSET;
										accumulator.b[position123] = color35 >> 24 & 255;
										accumulator.b[position123 + 1] = color35 >> 16 & 255;
										accumulator.b[position123 + 2] = color35 >> 8 & 255;
										accumulator.b[position123 + 3] = color35 & 255;
									}
								} else {
									var position124 = (y297 * accumulator.getUInt16(0) + x297) * 4;
									position124 += vision_ds_Image.OFFSET;
									accumulator.b[position124] = color35 >> 24 & 255;
									accumulator.b[position124 + 1] = color35 >> 16 & 255;
									accumulator.b[position124 + 2] = color35 >> 8 & 255;
									accumulator.b[position124 + 3] = color35 & 255;
								}
							}
							if(deg != (deg | 0)) {
								var x311 = Math.ceil(deg);
								var y311 = Math.floor(rhoIndex);
								var Red15 = (xFraction9 + (1 - yFraction9)) / 2 * ((color7 >> 16 & 255) / 255);
								var Green15 = (xFraction9 + (1 - yFraction9)) / 2 * ((color7 >> 8 & 255) / 255);
								var Blue15 = (xFraction9 + (1 - yFraction9)) / 2 * ((color7 & 255) / 255);
								var Alpha42 = (color7 >> 24 & 255) / 255;
								if(Alpha42 == null) {
									Alpha42 = 1;
								}
								var this139 = 0;
								var color36 = this139;
								var Alpha43 = Alpha42;
								if(Alpha43 == null) {
									Alpha43 = 1;
								}
								var value153 = Math.round(Red15 * 255);
								color36 &= -16711681;
								color36 |= (value153 > 255 ? 255 : value153 < 0 ? 0 : value153) << 16;
								var value154 = Math.round(Green15 * 255);
								color36 &= -65281;
								color36 |= (value154 > 255 ? 255 : value154 < 0 ? 0 : value154) << 8;
								var value155 = Math.round(Blue15 * 255);
								color36 &= -256;
								color36 |= value155 > 255 ? 255 : value155 < 0 ? 0 : value155;
								var value156 = Math.round(Alpha43 * 255);
								color36 &= 16777215;
								color36 |= (value156 > 255 ? 255 : value156 < 0 ? 0 : value156) << 24;
								var color37 = color36;
								if(!(x311 >= 0 && y311 >= 0 && x311 < accumulator.getUInt16(0) && y311 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
									var this_x110 = x311;
									var this_y110 = y311;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x110,this_y110)));
								} else if(accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != accumulator.getUInt16(0) || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)) || accumulator.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
									var v14 = null;
									var tmp14;
									if(!(accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != accumulator.getUInt16(0) || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)) || accumulator.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v14 == null) {
										tmp14 = x311 >= 0 && y311 >= 0 && x311 < accumulator.getUInt16(0) && y311 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4));
									} else {
										var has14 = false;
										var view28;
										if(v14 != null) {
											view28 = v14;
										} else {
											var _g48 = accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES);
											var _g49 = accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
											var _g50 = accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
											var accumulator3 = accumulator.b;
											var view29 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
											view28 = new vision_ds_ImageView(_g48,_g49,_g50,accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),accumulator3[view29]);
										}
										switch(view28.shape) {
										case 0:
											has14 = x311 < view28.x + view28.width && y311 < view28.y + view28.height && x311 >= view28.x && y311 >= view28.y;
											break;
										case 1:
											has14 = !(x311 < view28.x + view28.width && y311 < view28.y + view28.height && x311 >= view28.x && y311 >= view28.y);
											break;
										case 2:case 3:
											if(view28.width > view28.height) {
												var a28 = view28.width / 2;
												var b28 = view28.height / 2;
												var c28 = Math.sqrt(a28 * a28 - b28 * b28);
												var x312 = view28.x + view28.width / 2 - c28;
												var y312 = view28.y + view28.height / 2;
												if(y312 == null) {
													y312 = 0;
												}
												if(x312 == null) {
													x312 = 0;
												}
												var f1_x28 = x312;
												var f1_y28 = y312;
												var x313 = view28.x + view28.width / 2 + c28;
												var y313 = view28.y + view28.height / 2;
												if(y313 == null) {
													y313 = 0;
												}
												if(x313 == null) {
													x313 = 0;
												}
												var f2_x28 = x313;
												var f2_y28 = y313;
												var x314 = x311;
												var y314 = y311;
												if(y314 == null) {
													y314 = 0;
												}
												if(x314 == null) {
													x314 = 0;
												}
												var p_x28 = x314;
												var p_y28 = y314;
												var x315 = p_x28 - f1_x28;
												var y315 = p_y28 - f1_y28;
												var x316 = p_x28 - f2_x28;
												var y316 = p_y28 - f2_y28;
												has14 = Math.sqrt(x315 * x315 + y315 * y315) + Math.sqrt(x316 * x316 + y316 * y316) <= view28.width;
												if(view28.shape == 3) {
													has14 = !has14;
												}
											} else if(view28.height > view28.width) {
												var a29 = view28.height / 2;
												var b29 = view28.width / 2;
												var c29 = Math.sqrt(a29 * a29 - b29 * b29);
												var x317 = view28.x + view28.width / 2;
												var y317 = view28.y + view28.height / 2 - c29;
												if(y317 == null) {
													y317 = 0;
												}
												if(x317 == null) {
													x317 = 0;
												}
												var f1_x29 = x317;
												var f1_y29 = y317;
												var x318 = view28.x + view28.width / 2;
												var y318 = view28.y + view28.height / 2 + c29;
												if(y318 == null) {
													y318 = 0;
												}
												if(x318 == null) {
													x318 = 0;
												}
												var f2_x29 = x318;
												var f2_y29 = y318;
												var x319 = x311;
												var y319 = y311;
												if(y319 == null) {
													y319 = 0;
												}
												if(x319 == null) {
													x319 = 0;
												}
												var p_x29 = x319;
												var p_y29 = y319;
												var x320 = p_x29 - f1_x29;
												var y320 = p_y29 - f1_y29;
												var x321 = p_x29 - f2_x29;
												var y321 = p_y29 - f2_y29;
												has14 = Math.sqrt(x320 * x320 + y320 * y320) + Math.sqrt(x321 * x321 + y321 * y321) <= view28.height;
												if(view28.shape == 3) {
													has14 = !has14;
												}
											} else {
												var x322 = x311;
												var y322 = y311;
												if(y322 == null) {
													y322 = 0;
												}
												if(x322 == null) {
													x322 = 0;
												}
												var point1_x14 = x322;
												var point1_y14 = y322;
												var x323 = view28.x + view28.width / 2;
												var y323 = view28.y + view28.height / 2;
												if(y323 == null) {
													y323 = 0;
												}
												if(x323 == null) {
													x323 = 0;
												}
												var point2_x14 = x323;
												var point2_y14 = y323;
												var x324 = point2_x14 - point1_x14;
												var y324 = point2_y14 - point1_y14;
												has14 = Math.sqrt(x324 * x324 + y324 * y324) <= view28.width / 2;
												if(view28.shape == 3) {
													has14 = !has14;
												}
											}
											break;
										case 4:
											has14 = Math.abs(x311 - view28.x - view28.width / 2) / (view28.width / 2) + Math.abs(y311 - view28.y - view28.height / 2) / (view28.height / 2) <= 1;
											break;
										case 5:
											has14 = !(Math.abs(x311 - view28.x - view28.width / 2) / (view28.width / 2) + Math.abs(y311 - view28.y - view28.height / 2) / (view28.height / 2) <= 1);
											break;
										}
										tmp14 = has14;
									}
									if(tmp14) {
										var position125 = (y311 * accumulator.getUInt16(0) + x311) * 4;
										position125 += vision_ds_Image.OFFSET;
										accumulator.b[position125] = color37 >> 24 & 255;
										accumulator.b[position125 + 1] = color37 >> 16 & 255;
										accumulator.b[position125 + 2] = color37 >> 8 & 255;
										accumulator.b[position125 + 3] = color37 & 255;
									}
								} else {
									var position126 = (y311 * accumulator.getUInt16(0) + x311) * 4;
									position126 += vision_ds_Image.OFFSET;
									accumulator.b[position126] = color37 >> 24 & 255;
									accumulator.b[position126 + 1] = color37 >> 16 & 255;
									accumulator.b[position126 + 2] = color37 >> 8 & 255;
									accumulator.b[position126 + 3] = color37 & 255;
								}
							}
							if(deg != (deg | 0) && rhoIndex != (rhoIndex | 0)) {
								var x325 = Math.ceil(deg);
								var y325 = Math.ceil(rhoIndex);
								var Red16 = (xFraction9 + yFraction9) / 2 * ((color7 >> 16 & 255) / 255);
								var Green16 = (xFraction9 + yFraction9) / 2 * ((color7 >> 8 & 255) / 255);
								var Blue16 = (xFraction9 + yFraction9) / 2 * ((color7 & 255) / 255);
								var Alpha44 = (color7 >> 24 & 255) / 255;
								if(Alpha44 == null) {
									Alpha44 = 1;
								}
								var this140 = 0;
								var color38 = this140;
								var Alpha45 = Alpha44;
								if(Alpha45 == null) {
									Alpha45 = 1;
								}
								var value157 = Math.round(Red16 * 255);
								color38 &= -16711681;
								color38 |= (value157 > 255 ? 255 : value157 < 0 ? 0 : value157) << 16;
								var value158 = Math.round(Green16 * 255);
								color38 &= -65281;
								color38 |= (value158 > 255 ? 255 : value158 < 0 ? 0 : value158) << 8;
								var value159 = Math.round(Blue16 * 255);
								color38 &= -256;
								color38 |= value159 > 255 ? 255 : value159 < 0 ? 0 : value159;
								var value160 = Math.round(Alpha45 * 255);
								color38 &= 16777215;
								color38 |= (value160 > 255 ? 255 : value160 < 0 ? 0 : value160) << 24;
								var color39 = color38;
								if(!(x325 >= 0 && y325 >= 0 && x325 < accumulator.getUInt16(0) && y325 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)))) {
									var this_x111 = x325;
									var this_y111 = y325;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(accumulator,new vision_ds_Point2D(this_x111,this_y111)));
								} else if(accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != accumulator.getUInt16(0) || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)) || accumulator.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
									var v15 = null;
									var tmp15;
									if(!(accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != accumulator.getUInt16(0) || accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4)) || accumulator.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v15 == null) {
										tmp15 = x325 >= 0 && y325 >= 0 && x325 < accumulator.getUInt16(0) && y325 < Math.ceil((accumulator.length - vision_ds_Image.OFFSET) / (accumulator.getUInt16(0) * 4));
									} else {
										var has15 = false;
										var view30;
										if(v15 != null) {
											view30 = v15;
										} else {
											var _g51 = accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES);
											var _g52 = accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
											var _g53 = accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
											var accumulator4 = accumulator.b;
											var view31 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
											view30 = new vision_ds_ImageView(_g51,_g52,_g53,accumulator.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),accumulator4[view31]);
										}
										switch(view30.shape) {
										case 0:
											has15 = x325 < view30.x + view30.width && y325 < view30.y + view30.height && x325 >= view30.x && y325 >= view30.y;
											break;
										case 1:
											has15 = !(x325 < view30.x + view30.width && y325 < view30.y + view30.height && x325 >= view30.x && y325 >= view30.y);
											break;
										case 2:case 3:
											if(view30.width > view30.height) {
												var a30 = view30.width / 2;
												var b30 = view30.height / 2;
												var c30 = Math.sqrt(a30 * a30 - b30 * b30);
												var x326 = view30.x + view30.width / 2 - c30;
												var y326 = view30.y + view30.height / 2;
												if(y326 == null) {
													y326 = 0;
												}
												if(x326 == null) {
													x326 = 0;
												}
												var f1_x30 = x326;
												var f1_y30 = y326;
												var x327 = view30.x + view30.width / 2 + c30;
												var y327 = view30.y + view30.height / 2;
												if(y327 == null) {
													y327 = 0;
												}
												if(x327 == null) {
													x327 = 0;
												}
												var f2_x30 = x327;
												var f2_y30 = y327;
												var x328 = x325;
												var y328 = y325;
												if(y328 == null) {
													y328 = 0;
												}
												if(x328 == null) {
													x328 = 0;
												}
												var p_x30 = x328;
												var p_y30 = y328;
												var x329 = p_x30 - f1_x30;
												var y329 = p_y30 - f1_y30;
												var x330 = p_x30 - f2_x30;
												var y330 = p_y30 - f2_y30;
												has15 = Math.sqrt(x329 * x329 + y329 * y329) + Math.sqrt(x330 * x330 + y330 * y330) <= view30.width;
												if(view30.shape == 3) {
													has15 = !has15;
												}
											} else if(view30.height > view30.width) {
												var a31 = view30.height / 2;
												var b31 = view30.width / 2;
												var c31 = Math.sqrt(a31 * a31 - b31 * b31);
												var x331 = view30.x + view30.width / 2;
												var y331 = view30.y + view30.height / 2 - c31;
												if(y331 == null) {
													y331 = 0;
												}
												if(x331 == null) {
													x331 = 0;
												}
												var f1_x31 = x331;
												var f1_y31 = y331;
												var x332 = view30.x + view30.width / 2;
												var y332 = view30.y + view30.height / 2 + c31;
												if(y332 == null) {
													y332 = 0;
												}
												if(x332 == null) {
													x332 = 0;
												}
												var f2_x31 = x332;
												var f2_y31 = y332;
												var x333 = x325;
												var y333 = y325;
												if(y333 == null) {
													y333 = 0;
												}
												if(x333 == null) {
													x333 = 0;
												}
												var p_x31 = x333;
												var p_y31 = y333;
												var x334 = p_x31 - f1_x31;
												var y334 = p_y31 - f1_y31;
												var x335 = p_x31 - f2_x31;
												var y335 = p_y31 - f2_y31;
												has15 = Math.sqrt(x334 * x334 + y334 * y334) + Math.sqrt(x335 * x335 + y335 * y335) <= view30.height;
												if(view30.shape == 3) {
													has15 = !has15;
												}
											} else {
												var x336 = x325;
												var y336 = y325;
												if(y336 == null) {
													y336 = 0;
												}
												if(x336 == null) {
													x336 = 0;
												}
												var point1_x15 = x336;
												var point1_y15 = y336;
												var x337 = view30.x + view30.width / 2;
												var y337 = view30.y + view30.height / 2;
												if(y337 == null) {
													y337 = 0;
												}
												if(x337 == null) {
													x337 = 0;
												}
												var point2_x15 = x337;
												var point2_y15 = y337;
												var x338 = point2_x15 - point1_x15;
												var y338 = point2_y15 - point1_y15;
												has15 = Math.sqrt(x338 * x338 + y338 * y338) <= view30.width / 2;
												if(view30.shape == 3) {
													has15 = !has15;
												}
											}
											break;
										case 4:
											has15 = Math.abs(x325 - view30.x - view30.width / 2) / (view30.width / 2) + Math.abs(y325 - view30.y - view30.height / 2) / (view30.height / 2) <= 1;
											break;
										case 5:
											has15 = !(Math.abs(x325 - view30.x - view30.width / 2) / (view30.width / 2) + Math.abs(y325 - view30.y - view30.height / 2) / (view30.height / 2) <= 1);
											break;
										}
										tmp15 = has15;
									}
									if(tmp15) {
										var position127 = (y325 * accumulator.getUInt16(0) + x325) * 4;
										position127 += vision_ds_Image.OFFSET;
										accumulator.b[position127] = color39 >> 24 & 255;
										accumulator.b[position127 + 1] = color39 >> 16 & 255;
										accumulator.b[position127 + 2] = color39 >> 8 & 255;
										accumulator.b[position127 + 3] = color39 & 255;
									}
								} else {
									var position128 = (y325 * accumulator.getUInt16(0) + x325) * 4;
									position128 += vision_ds_Image.OFFSET;
									accumulator.b[position128] = color39 >> 24 & 255;
									accumulator.b[position128 + 1] = color39 >> 16 & 255;
									accumulator.b[position128 + 2] = color39 >> 8 & 255;
									accumulator.b[position128 + 3] = color39 & 255;
								}
							}
						}
					}
				}
			}
		}
	}
	return accumulator;
};
vision_algorithms_Hough.extractLocalMaximas = function(space) {
	var _g = 0;
	var _g1 = space.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			if(!(x >= 0 && y >= 0 && x < space.getUInt16(0) && y < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y * space.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = space.b[position] << 24 | space.b[position + 1] << 16 | space.b[position + 2] << 8 | space.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			var value1 = this1;
			var x1 = x - 1;
			var y1 = y - 1;
			var neighbors;
			if(!(x1 >= 0 && y1 >= 0 && x1 < space.getUInt16(0) && y1 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
				var this2 = [x1,space.getUInt16(0) - 1];
				var values = this2;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i = _g4++;
					if(values[i] > max) {
						max = values[i];
					}
				}
				var this3 = [max,0];
				var values1 = this3;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i1 = _g6++;
					if(values1[i1] < min) {
						min = values1[i1];
					}
				}
				var x2 = min;
				var this4 = [y1,Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)) - 1];
				var values2 = this4;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i2 = _g8++;
					if(values2[i2] > max1) {
						max1 = values2[i2];
					}
				}
				var this5 = [max1,0];
				var values3 = this5;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i3 = _g10++;
					if(values3[i3] < min1) {
						min1 = values3[i3];
					}
				}
				var y2 = min1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < space.getUInt16(0) && y2 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x1 = x2;
					var this_y1 = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y2 * space.getUInt16(0) + x2) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value2 = space.b[position1] << 24 | space.b[position1 + 1] << 16 | space.b[position1 + 2] << 8 | space.b[position1 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var this6 = value2;
				neighbors = this6;
			} else {
				if(!(x1 >= 0 && y1 >= 0 && x1 < space.getUInt16(0) && y1 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x2 = x1;
					var this_y2 = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position2 = (y1 * space.getUInt16(0) + x1) * 4;
				position2 += vision_ds_Image.OFFSET;
				var value3 = space.b[position2] << 24 | space.b[position2 + 1] << 16 | space.b[position2 + 2] << 8 | space.b[position2 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var this7 = value3;
				neighbors = this7;
			}
			var y3 = y - 1;
			var neighbors1;
			if(!(x >= 0 && y3 >= 0 && x < space.getUInt16(0) && y3 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
				var this8 = [x,space.getUInt16(0) - 1];
				var values4 = this8;
				var max2 = values4[0];
				var _g12 = 0;
				var _g13 = values4.length;
				while(_g12 < _g13) {
					var i4 = _g12++;
					if(values4[i4] > max2) {
						max2 = values4[i4];
					}
				}
				var this9 = [max2,0];
				var values5 = this9;
				var min2 = values5[0];
				var _g14 = 0;
				var _g15 = values5.length;
				while(_g14 < _g15) {
					var i5 = _g14++;
					if(values5[i5] < min2) {
						min2 = values5[i5];
					}
				}
				var x3 = min2;
				var this10 = [y3,Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)) - 1];
				var values6 = this10;
				var max3 = values6[0];
				var _g16 = 0;
				var _g17 = values6.length;
				while(_g16 < _g17) {
					var i6 = _g16++;
					if(values6[i6] > max3) {
						max3 = values6[i6];
					}
				}
				var this11 = [max3,0];
				var values7 = this11;
				var min3 = values7[0];
				var _g18 = 0;
				var _g19 = values7.length;
				while(_g18 < _g19) {
					var i7 = _g18++;
					if(values7[i7] < min3) {
						min3 = values7[i7];
					}
				}
				var y4 = min3;
				if(!(x3 >= 0 && y4 >= 0 && x3 < space.getUInt16(0) && y4 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x3 = x3;
					var this_y3 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x3,this_y3)));
				}
				var position3 = (y4 * space.getUInt16(0) + x3) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value4 = space.b[position3] << 24 | space.b[position3 + 1] << 16 | space.b[position3 + 2] << 8 | space.b[position3 + 3];
				if(value4 == null) {
					value4 = 0;
				}
				var this12 = value4;
				neighbors1 = this12;
			} else {
				if(!(x >= 0 && y3 >= 0 && x < space.getUInt16(0) && y3 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x4 = x;
					var this_y4 = y3;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position4 = (y3 * space.getUInt16(0) + x) * 4;
				position4 += vision_ds_Image.OFFSET;
				var value5 = space.b[position4] << 24 | space.b[position4 + 1] << 16 | space.b[position4 + 2] << 8 | space.b[position4 + 3];
				if(value5 == null) {
					value5 = 0;
				}
				var this13 = value5;
				neighbors1 = this13;
			}
			var x4 = x + 1;
			var y5 = y - 1;
			var neighbors2;
			if(!(x4 >= 0 && y5 >= 0 && x4 < space.getUInt16(0) && y5 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
				var this14 = [x4,space.getUInt16(0) - 1];
				var values8 = this14;
				var max4 = values8[0];
				var _g20 = 0;
				var _g21 = values8.length;
				while(_g20 < _g21) {
					var i8 = _g20++;
					if(values8[i8] > max4) {
						max4 = values8[i8];
					}
				}
				var this15 = [max4,0];
				var values9 = this15;
				var min4 = values9[0];
				var _g22 = 0;
				var _g23 = values9.length;
				while(_g22 < _g23) {
					var i9 = _g22++;
					if(values9[i9] < min4) {
						min4 = values9[i9];
					}
				}
				var x5 = min4;
				var this16 = [y5,Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)) - 1];
				var values10 = this16;
				var max5 = values10[0];
				var _g24 = 0;
				var _g25 = values10.length;
				while(_g24 < _g25) {
					var i10 = _g24++;
					if(values10[i10] > max5) {
						max5 = values10[i10];
					}
				}
				var this17 = [max5,0];
				var values11 = this17;
				var min5 = values11[0];
				var _g26 = 0;
				var _g27 = values11.length;
				while(_g26 < _g27) {
					var i11 = _g26++;
					if(values11[i11] < min5) {
						min5 = values11[i11];
					}
				}
				var y6 = min5;
				if(!(x5 >= 0 && y6 >= 0 && x5 < space.getUInt16(0) && y6 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x5 = x5;
					var this_y5 = y6;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x5,this_y5)));
				}
				var position5 = (y6 * space.getUInt16(0) + x5) * 4;
				position5 += vision_ds_Image.OFFSET;
				var value6 = space.b[position5] << 24 | space.b[position5 + 1] << 16 | space.b[position5 + 2] << 8 | space.b[position5 + 3];
				if(value6 == null) {
					value6 = 0;
				}
				var this18 = value6;
				neighbors2 = this18;
			} else {
				if(!(x4 >= 0 && y5 >= 0 && x4 < space.getUInt16(0) && y5 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x6 = x4;
					var this_y6 = y5;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position6 = (y5 * space.getUInt16(0) + x4) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value7 = space.b[position6] << 24 | space.b[position6 + 1] << 16 | space.b[position6 + 2] << 8 | space.b[position6 + 3];
				if(value7 == null) {
					value7 = 0;
				}
				var this19 = value7;
				neighbors2 = this19;
			}
			var x6 = x - 1;
			var neighbors3;
			if(!(x6 >= 0 && x6 < space.getUInt16(0) && 0 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
				var this20 = [x6,space.getUInt16(0) - 1];
				var values12 = this20;
				var max6 = values12[0];
				var _g28 = 0;
				var _g29 = values12.length;
				while(_g28 < _g29) {
					var i12 = _g28++;
					if(values12[i12] > max6) {
						max6 = values12[i12];
					}
				}
				var this21 = [max6,0];
				var values13 = this21;
				var min6 = values13[0];
				var _g30 = 0;
				var _g31 = values13.length;
				while(_g30 < _g31) {
					var i13 = _g30++;
					if(values13[i13] < min6) {
						min6 = values13[i13];
					}
				}
				var x7 = min6;
				var this22 = [0,Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)) - 1];
				var values14 = this22;
				var max7 = values14[0];
				var _g32 = 0;
				var _g33 = values14.length;
				while(_g32 < _g33) {
					var i14 = _g32++;
					if(values14[i14] > max7) {
						max7 = values14[i14];
					}
				}
				var this23 = [max7,0];
				var values15 = this23;
				var min7 = values15[0];
				var _g34 = 0;
				var _g35 = values15.length;
				while(_g34 < _g35) {
					var i15 = _g34++;
					if(values15[i15] < min7) {
						min7 = values15[i15];
					}
				}
				var y7 = min7;
				if(!(x7 >= 0 && y7 >= 0 && x7 < space.getUInt16(0) && y7 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x7 = x7;
					var this_y7 = y7;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x7,this_y7)));
				}
				var position7 = (y7 * space.getUInt16(0) + x7) * 4;
				position7 += vision_ds_Image.OFFSET;
				var value8 = space.b[position7] << 24 | space.b[position7 + 1] << 16 | space.b[position7 + 2] << 8 | space.b[position7 + 3];
				if(value8 == null) {
					value8 = 0;
				}
				var this24 = value8;
				neighbors3 = this24;
			} else {
				if(!(x6 >= 0 && x6 < space.getUInt16(0) && 0 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x8 = x6;
					var this_y8 = 0;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x8,this_y8)));
				}
				var position8 = (0 * space.getUInt16(0) + x6) * 4;
				position8 += vision_ds_Image.OFFSET;
				var value9 = space.b[position8] << 24 | space.b[position8 + 1] << 16 | space.b[position8 + 2] << 8 | space.b[position8 + 3];
				if(value9 == null) {
					value9 = 0;
				}
				var this25 = value9;
				neighbors3 = this25;
			}
			var x8 = x + 1;
			var neighbors4;
			if(!(x8 >= 0 && x8 < space.getUInt16(0) && 0 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
				var this26 = [x8,space.getUInt16(0) - 1];
				var values16 = this26;
				var max8 = values16[0];
				var _g36 = 0;
				var _g37 = values16.length;
				while(_g36 < _g37) {
					var i16 = _g36++;
					if(values16[i16] > max8) {
						max8 = values16[i16];
					}
				}
				var this27 = [max8,0];
				var values17 = this27;
				var min8 = values17[0];
				var _g38 = 0;
				var _g39 = values17.length;
				while(_g38 < _g39) {
					var i17 = _g38++;
					if(values17[i17] < min8) {
						min8 = values17[i17];
					}
				}
				var x9 = min8;
				var this28 = [0,Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)) - 1];
				var values18 = this28;
				var max9 = values18[0];
				var _g40 = 0;
				var _g41 = values18.length;
				while(_g40 < _g41) {
					var i18 = _g40++;
					if(values18[i18] > max9) {
						max9 = values18[i18];
					}
				}
				var this29 = [max9,0];
				var values19 = this29;
				var min9 = values19[0];
				var _g42 = 0;
				var _g43 = values19.length;
				while(_g42 < _g43) {
					var i19 = _g42++;
					if(values19[i19] < min9) {
						min9 = values19[i19];
					}
				}
				var y8 = min9;
				if(!(x9 >= 0 && y8 >= 0 && x9 < space.getUInt16(0) && y8 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x9 = x9;
					var this_y9 = y8;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x9,this_y9)));
				}
				var position9 = (y8 * space.getUInt16(0) + x9) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value10 = space.b[position9] << 24 | space.b[position9 + 1] << 16 | space.b[position9 + 2] << 8 | space.b[position9 + 3];
				if(value10 == null) {
					value10 = 0;
				}
				var this30 = value10;
				neighbors4 = this30;
			} else {
				if(!(x8 >= 0 && x8 < space.getUInt16(0) && 0 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x10 = x8;
					var this_y10 = 0;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x10,this_y10)));
				}
				var position10 = (0 * space.getUInt16(0) + x8) * 4;
				position10 += vision_ds_Image.OFFSET;
				var value11 = space.b[position10] << 24 | space.b[position10 + 1] << 16 | space.b[position10 + 2] << 8 | space.b[position10 + 3];
				if(value11 == null) {
					value11 = 0;
				}
				var this31 = value11;
				neighbors4 = this31;
			}
			var x10 = x - 1;
			var y9 = y + 1;
			var neighbors5;
			if(!(x10 >= 0 && y9 >= 0 && x10 < space.getUInt16(0) && y9 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
				var this32 = [x10,space.getUInt16(0) - 1];
				var values20 = this32;
				var max10 = values20[0];
				var _g44 = 0;
				var _g45 = values20.length;
				while(_g44 < _g45) {
					var i20 = _g44++;
					if(values20[i20] > max10) {
						max10 = values20[i20];
					}
				}
				var this33 = [max10,0];
				var values21 = this33;
				var min10 = values21[0];
				var _g46 = 0;
				var _g47 = values21.length;
				while(_g46 < _g47) {
					var i21 = _g46++;
					if(values21[i21] < min10) {
						min10 = values21[i21];
					}
				}
				var x11 = min10;
				var this34 = [y9,Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)) - 1];
				var values22 = this34;
				var max11 = values22[0];
				var _g48 = 0;
				var _g49 = values22.length;
				while(_g48 < _g49) {
					var i22 = _g48++;
					if(values22[i22] > max11) {
						max11 = values22[i22];
					}
				}
				var this35 = [max11,0];
				var values23 = this35;
				var min11 = values23[0];
				var _g50 = 0;
				var _g51 = values23.length;
				while(_g50 < _g51) {
					var i23 = _g50++;
					if(values23[i23] < min11) {
						min11 = values23[i23];
					}
				}
				var y10 = min11;
				if(!(x11 >= 0 && y10 >= 0 && x11 < space.getUInt16(0) && y10 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x11 = x11;
					var this_y11 = y10;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x11,this_y11)));
				}
				var position11 = (y10 * space.getUInt16(0) + x11) * 4;
				position11 += vision_ds_Image.OFFSET;
				var value12 = space.b[position11] << 24 | space.b[position11 + 1] << 16 | space.b[position11 + 2] << 8 | space.b[position11 + 3];
				if(value12 == null) {
					value12 = 0;
				}
				var this36 = value12;
				neighbors5 = this36;
			} else {
				if(!(x10 >= 0 && y9 >= 0 && x10 < space.getUInt16(0) && y9 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x12 = x10;
					var this_y12 = y9;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x12,this_y12)));
				}
				var position12 = (y9 * space.getUInt16(0) + x10) * 4;
				position12 += vision_ds_Image.OFFSET;
				var value13 = space.b[position12] << 24 | space.b[position12 + 1] << 16 | space.b[position12 + 2] << 8 | space.b[position12 + 3];
				if(value13 == null) {
					value13 = 0;
				}
				var this37 = value13;
				neighbors5 = this37;
			}
			var y11 = y + 1;
			var neighbors6;
			if(!(x >= 0 && y11 >= 0 && x < space.getUInt16(0) && y11 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
				var this38 = [x,space.getUInt16(0) - 1];
				var values24 = this38;
				var max12 = values24[0];
				var _g52 = 0;
				var _g53 = values24.length;
				while(_g52 < _g53) {
					var i24 = _g52++;
					if(values24[i24] > max12) {
						max12 = values24[i24];
					}
				}
				var this39 = [max12,0];
				var values25 = this39;
				var min12 = values25[0];
				var _g54 = 0;
				var _g55 = values25.length;
				while(_g54 < _g55) {
					var i25 = _g54++;
					if(values25[i25] < min12) {
						min12 = values25[i25];
					}
				}
				var x12 = min12;
				var this40 = [y11,Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)) - 1];
				var values26 = this40;
				var max13 = values26[0];
				var _g56 = 0;
				var _g57 = values26.length;
				while(_g56 < _g57) {
					var i26 = _g56++;
					if(values26[i26] > max13) {
						max13 = values26[i26];
					}
				}
				var this41 = [max13,0];
				var values27 = this41;
				var min13 = values27[0];
				var _g58 = 0;
				var _g59 = values27.length;
				while(_g58 < _g59) {
					var i27 = _g58++;
					if(values27[i27] < min13) {
						min13 = values27[i27];
					}
				}
				var y12 = min13;
				if(!(x12 >= 0 && y12 >= 0 && x12 < space.getUInt16(0) && y12 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x13 = x12;
					var this_y13 = y12;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x13,this_y13)));
				}
				var position13 = (y12 * space.getUInt16(0) + x12) * 4;
				position13 += vision_ds_Image.OFFSET;
				var value14 = space.b[position13] << 24 | space.b[position13 + 1] << 16 | space.b[position13 + 2] << 8 | space.b[position13 + 3];
				if(value14 == null) {
					value14 = 0;
				}
				var this42 = value14;
				neighbors6 = this42;
			} else {
				if(!(x >= 0 && y11 >= 0 && x < space.getUInt16(0) && y11 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x14 = x;
					var this_y14 = y11;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x14,this_y14)));
				}
				var position14 = (y11 * space.getUInt16(0) + x) * 4;
				position14 += vision_ds_Image.OFFSET;
				var value15 = space.b[position14] << 24 | space.b[position14 + 1] << 16 | space.b[position14 + 2] << 8 | space.b[position14 + 3];
				if(value15 == null) {
					value15 = 0;
				}
				var this43 = value15;
				neighbors6 = this43;
			}
			var x13 = x + 1;
			var y13 = y + 1;
			var neighbors7;
			if(!(x13 >= 0 && y13 >= 0 && x13 < space.getUInt16(0) && y13 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
				var this44 = [x13,space.getUInt16(0) - 1];
				var values28 = this44;
				var max14 = values28[0];
				var _g60 = 0;
				var _g61 = values28.length;
				while(_g60 < _g61) {
					var i28 = _g60++;
					if(values28[i28] > max14) {
						max14 = values28[i28];
					}
				}
				var this45 = [max14,0];
				var values29 = this45;
				var min14 = values29[0];
				var _g62 = 0;
				var _g63 = values29.length;
				while(_g62 < _g63) {
					var i29 = _g62++;
					if(values29[i29] < min14) {
						min14 = values29[i29];
					}
				}
				var x14 = min14;
				var this46 = [y13,Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)) - 1];
				var values30 = this46;
				var max15 = values30[0];
				var _g64 = 0;
				var _g65 = values30.length;
				while(_g64 < _g65) {
					var i30 = _g64++;
					if(values30[i30] > max15) {
						max15 = values30[i30];
					}
				}
				var this47 = [max15,0];
				var values31 = this47;
				var min15 = values31[0];
				var _g66 = 0;
				var _g67 = values31.length;
				while(_g66 < _g67) {
					var i31 = _g66++;
					if(values31[i31] < min15) {
						min15 = values31[i31];
					}
				}
				var y14 = min15;
				if(!(x14 >= 0 && y14 >= 0 && x14 < space.getUInt16(0) && y14 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x15 = x14;
					var this_y15 = y14;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x15,this_y15)));
				}
				var position15 = (y14 * space.getUInt16(0) + x14) * 4;
				position15 += vision_ds_Image.OFFSET;
				var value16 = space.b[position15] << 24 | space.b[position15 + 1] << 16 | space.b[position15 + 2] << 8 | space.b[position15 + 3];
				if(value16 == null) {
					value16 = 0;
				}
				var this48 = value16;
				neighbors7 = this48;
			} else {
				if(!(x13 >= 0 && y13 >= 0 && x13 < space.getUInt16(0) && y13 < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x16 = x13;
					var this_y16 = y13;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x16,this_y16)));
				}
				var position16 = (y13 * space.getUInt16(0) + x13) * 4;
				position16 += vision_ds_Image.OFFSET;
				var value17 = space.b[position16] << 24 | space.b[position16 + 1] << 16 | space.b[position16 + 2] << 8 | space.b[position16 + 3];
				if(value17 == null) {
					value17 = 0;
				}
				var this49 = value17;
				neighbors7 = this49;
			}
			var neighbors8 = [neighbors,neighbors1,neighbors2,neighbors3,neighbors4,neighbors5,neighbors6,neighbors7];
			var _g68 = 0;
			var _g69 = neighbors8.length;
			while(_g68 < _g69) {
				var i32 = _g68++;
				if(neighbors8[i32] > value1) {
					if(!(x >= 0 && y >= 0 && x < space.getUInt16(0) && y < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
						var this_x17 = x;
						var this_y17 = y;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x17,this_y17)));
					} else if(space.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != space.getUInt16(0) || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)) || space.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
						var v = null;
						var tmp;
						if(!(space.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != space.getUInt16(0) || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)) || space.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
							tmp = x >= 0 && y >= 0 && x < space.getUInt16(0) && y < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4));
						} else {
							var has = false;
							var view;
							if(v != null) {
								view = v;
							} else {
								var _g70 = space.getUInt16(vision_ds_Image.WIDTH_BYTES);
								var _g71 = space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
								var _g72 = space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
								var space1 = space.b;
								var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
								view = new vision_ds_ImageView(_g70,_g71,_g72,space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),space1[view1]);
							}
							switch(view.shape) {
							case 0:
								has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
								break;
							case 1:
								has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
								break;
							case 2:case 3:
								if(view.width > view.height) {
									var a = view.width / 2;
									var b = view.height / 2;
									var c = Math.sqrt(a * a - b * b);
									var x15 = view.x + view.width / 2 - c;
									var y15 = view.y + view.height / 2;
									if(y15 == null) {
										y15 = 0;
									}
									if(x15 == null) {
										x15 = 0;
									}
									var f1_x = x15;
									var f1_y = y15;
									var x16 = view.x + view.width / 2 + c;
									var y16 = view.y + view.height / 2;
									if(y16 == null) {
										y16 = 0;
									}
									if(x16 == null) {
										x16 = 0;
									}
									var f2_x = x16;
									var f2_y = y16;
									var x17 = x;
									var y17 = y;
									if(y17 == null) {
										y17 = 0;
									}
									if(x17 == null) {
										x17 = 0;
									}
									var p_x = x17;
									var p_y = y17;
									var x18 = p_x - f1_x;
									var y18 = p_y - f1_y;
									var x19 = p_x - f2_x;
									var y19 = p_y - f2_y;
									has = Math.sqrt(x18 * x18 + y18 * y18) + Math.sqrt(x19 * x19 + y19 * y19) <= view.width;
									if(view.shape == 3) {
										has = !has;
									}
								} else if(view.height > view.width) {
									var a1 = view.height / 2;
									var b1 = view.width / 2;
									var c1 = Math.sqrt(a1 * a1 - b1 * b1);
									var x20 = view.x + view.width / 2;
									var y20 = view.y + view.height / 2 - c1;
									if(y20 == null) {
										y20 = 0;
									}
									if(x20 == null) {
										x20 = 0;
									}
									var f1_x1 = x20;
									var f1_y1 = y20;
									var x21 = view.x + view.width / 2;
									var y21 = view.y + view.height / 2 + c1;
									if(y21 == null) {
										y21 = 0;
									}
									if(x21 == null) {
										x21 = 0;
									}
									var f2_x1 = x21;
									var f2_y1 = y21;
									var x22 = x;
									var y22 = y;
									if(y22 == null) {
										y22 = 0;
									}
									if(x22 == null) {
										x22 = 0;
									}
									var p_x1 = x22;
									var p_y1 = y22;
									var x23 = p_x1 - f1_x1;
									var y23 = p_y1 - f1_y1;
									var x24 = p_x1 - f2_x1;
									var y24 = p_y1 - f2_y1;
									has = Math.sqrt(x23 * x23 + y23 * y23) + Math.sqrt(x24 * x24 + y24 * y24) <= view.height;
									if(view.shape == 3) {
										has = !has;
									}
								} else {
									var x25 = x;
									var y25 = y;
									if(y25 == null) {
										y25 = 0;
									}
									if(x25 == null) {
										x25 = 0;
									}
									var point1_x = x25;
									var point1_y = y25;
									var x26 = view.x + view.width / 2;
									var y26 = view.y + view.height / 2;
									if(y26 == null) {
										y26 = 0;
									}
									if(x26 == null) {
										x26 = 0;
									}
									var point2_x = x26;
									var point2_y = y26;
									var x27 = point2_x - point1_x;
									var y27 = point2_y - point1_y;
									has = Math.sqrt(x27 * x27 + y27 * y27) <= view.width / 2;
									if(view.shape == 3) {
										has = !has;
									}
								}
								break;
							case 4:
								has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
								break;
							case 5:
								has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
								break;
							}
							tmp = has;
						}
						if(tmp) {
							var position17 = (y * space.getUInt16(0) + x) * 4;
							position17 += vision_ds_Image.OFFSET;
							space.b[position17] = 0;
							space.b[position17 + 1] = 0;
							space.b[position17 + 2] = 0;
							space.b[position17 + 3] = 0;
						}
					} else {
						var position18 = (y * space.getUInt16(0) + x) * 4;
						position18 += vision_ds_Image.OFFSET;
						space.b[position18] = 0;
						space.b[position18 + 1] = 0;
						space.b[position18 + 2] = 0;
						space.b[position18 + 3] = 0;
					}
				}
			}
		}
	}
	var _g = 0;
	var _g1 = space.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * space.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = space.b[position] << 24 | space.b[position + 1] << 16 | space.b[position + 2] << 8 | space.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			var color = this1;
			if(color != 0) {
				haxe_Log.trace(vision_ds_Color.toInt(color),{ fileName : "vision/algorithms/Hough.hx", lineNumber : 60, className : "vision.algorithms.Hough", methodName : "extractLocalMaximas"});
			}
		}
	}
	return space;
};
vision_algorithms_Hough.threshold = function(space,value) {
	var _g = 0;
	var _g1 = space.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * space.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value1 = space.b[position] << 24 | space.b[position + 1] << 16 | space.b[position + 2] << 8 | space.b[position + 3];
			if(value1 == null) {
				value1 = 0;
			}
			var this1 = value1;
			if(this1 > value) {
				if(!(x >= 0 && y >= 0 && x < space.getUInt16(0) && y < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
					var this_x = x;
					var this_y = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x,this_y)));
				} else if(space.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != space.getUInt16(0) || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)) || space.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(space.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != space.getUInt16(0) || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)) || space.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < space.getUInt16(0) && y < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g4 = space.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g5 = space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g6 = space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var space1 = space.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g4,_g5,_g6,space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),space1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x1 = view.x + view.width / 2 - c;
								var y1 = view.y + view.height / 2;
								if(y1 == null) {
									y1 = 0;
								}
								if(x1 == null) {
									x1 = 0;
								}
								var f1_x = x1;
								var f1_y = y1;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x3 = x;
								var y3 = y;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var p_x = x3;
								var p_y = y3;
								var x4 = p_x - f1_x;
								var y4 = p_y - f1_y;
								var x5 = p_x - f2_x;
								var y5 = p_y - f2_y;
								has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x6 = view.x + view.width / 2;
								var y6 = view.y + view.height / 2 - c1;
								if(y6 == null) {
									y6 = 0;
								}
								if(x6 == null) {
									x6 = 0;
								}
								var f1_x1 = x6;
								var f1_y1 = y6;
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 + c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f2_x1 = x7;
								var f2_y1 = y7;
								var x8 = x;
								var y8 = y;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var p_x1 = x8;
								var p_y1 = y8;
								var x9 = p_x1 - f1_x1;
								var y9 = p_y1 - f1_y1;
								var x10 = p_x1 - f2_x1;
								var y10 = p_y1 - f2_y1;
								has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x11 = x;
								var y11 = y;
								if(y11 == null) {
									y11 = 0;
								}
								if(x11 == null) {
									x11 = 0;
								}
								var point1_x = x11;
								var point1_y = y11;
								var x12 = view.x + view.width / 2;
								var y12 = view.y + view.height / 2;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var point2_x = x12;
								var point2_y = y12;
								var x13 = point2_x - point1_x;
								var y13 = point2_y - point1_y;
								has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position1 = (y * space.getUInt16(0) + x) * 4;
						position1 += vision_ds_Image.OFFSET;
						space.b[position1] = 255;
						space.b[position1 + 1] = 255;
						space.b[position1 + 2] = 255;
						space.b[position1 + 3] = 255;
					}
				} else {
					var position2 = (y * space.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					space.b[position2] = 255;
					space.b[position2 + 1] = 255;
					space.b[position2 + 2] = 255;
					space.b[position2 + 3] = 255;
				}
			} else if(!(x >= 0 && y >= 0 && x < space.getUInt16(0) && y < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)))) {
				var this_x1 = x;
				var this_y1 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(space,new vision_ds_Point2D(this_x1,this_y1)));
			} else if(space.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != space.getUInt16(0) || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)) || space.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v1 = null;
				var tmp1;
				if(!(space.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != space.getUInt16(0) || space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4)) || space.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
					tmp1 = x >= 0 && y >= 0 && x < space.getUInt16(0) && y < Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4));
				} else {
					var has1 = false;
					var view2;
					if(v1 != null) {
						view2 = v1;
					} else {
						var _g7 = space.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g8 = space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g9 = space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var space2 = space.b;
						var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view2 = new vision_ds_ImageView(_g7,_g8,_g9,space.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),space2[view3]);
					}
					switch(view2.shape) {
					case 0:
						has1 = x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y;
						break;
					case 1:
						has1 = !(x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y);
						break;
					case 2:case 3:
						if(view2.width > view2.height) {
							var a2 = view2.width / 2;
							var b2 = view2.height / 2;
							var c2 = Math.sqrt(a2 * a2 - b2 * b2);
							var x14 = view2.x + view2.width / 2 - c2;
							var y14 = view2.y + view2.height / 2;
							if(y14 == null) {
								y14 = 0;
							}
							if(x14 == null) {
								x14 = 0;
							}
							var f1_x2 = x14;
							var f1_y2 = y14;
							var x15 = view2.x + view2.width / 2 + c2;
							var y15 = view2.y + view2.height / 2;
							if(y15 == null) {
								y15 = 0;
							}
							if(x15 == null) {
								x15 = 0;
							}
							var f2_x2 = x15;
							var f2_y2 = y15;
							var x16 = x;
							var y16 = y;
							if(y16 == null) {
								y16 = 0;
							}
							if(x16 == null) {
								x16 = 0;
							}
							var p_x2 = x16;
							var p_y2 = y16;
							var x17 = p_x2 - f1_x2;
							var y17 = p_y2 - f1_y2;
							var x18 = p_x2 - f2_x2;
							var y18 = p_y2 - f2_y2;
							has1 = Math.sqrt(x17 * x17 + y17 * y17) + Math.sqrt(x18 * x18 + y18 * y18) <= view2.width;
							if(view2.shape == 3) {
								has1 = !has1;
							}
						} else if(view2.height > view2.width) {
							var a3 = view2.height / 2;
							var b3 = view2.width / 2;
							var c3 = Math.sqrt(a3 * a3 - b3 * b3);
							var x19 = view2.x + view2.width / 2;
							var y19 = view2.y + view2.height / 2 - c3;
							if(y19 == null) {
								y19 = 0;
							}
							if(x19 == null) {
								x19 = 0;
							}
							var f1_x3 = x19;
							var f1_y3 = y19;
							var x20 = view2.x + view2.width / 2;
							var y20 = view2.y + view2.height / 2 + c3;
							if(y20 == null) {
								y20 = 0;
							}
							if(x20 == null) {
								x20 = 0;
							}
							var f2_x3 = x20;
							var f2_y3 = y20;
							var x21 = x;
							var y21 = y;
							if(y21 == null) {
								y21 = 0;
							}
							if(x21 == null) {
								x21 = 0;
							}
							var p_x3 = x21;
							var p_y3 = y21;
							var x22 = p_x3 - f1_x3;
							var y22 = p_y3 - f1_y3;
							var x23 = p_x3 - f2_x3;
							var y23 = p_y3 - f2_y3;
							has1 = Math.sqrt(x22 * x22 + y22 * y22) + Math.sqrt(x23 * x23 + y23 * y23) <= view2.height;
							if(view2.shape == 3) {
								has1 = !has1;
							}
						} else {
							var x24 = x;
							var y24 = y;
							if(y24 == null) {
								y24 = 0;
							}
							if(x24 == null) {
								x24 = 0;
							}
							var point1_x1 = x24;
							var point1_y1 = y24;
							var x25 = view2.x + view2.width / 2;
							var y25 = view2.y + view2.height / 2;
							if(y25 == null) {
								y25 = 0;
							}
							if(x25 == null) {
								x25 = 0;
							}
							var point2_x1 = x25;
							var point2_y1 = y25;
							var x26 = point2_x1 - point1_x1;
							var y26 = point2_y1 - point1_y1;
							has1 = Math.sqrt(x26 * x26 + y26 * y26) <= view2.width / 2;
							if(view2.shape == 3) {
								has1 = !has1;
							}
						}
						break;
					case 4:
						has1 = Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
						break;
					case 5:
						has1 = !(Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
						break;
					}
					tmp1 = has1;
				}
				if(tmp1) {
					var position3 = (y * space.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					space.b[position3] = 0;
					space.b[position3 + 1] = 0;
					space.b[position3 + 2] = 0;
					space.b[position3 + 3] = 0;
				}
			} else {
				var position4 = (y * space.getUInt16(0) + x) * 4;
				position4 += vision_ds_Image.OFFSET;
				space.b[position4] = 0;
				space.b[position4 + 1] = 0;
				space.b[position4 + 2] = 0;
				space.b[position4 + 3] = 0;
			}
		}
	}
	return space;
};
vision_algorithms_Hough.mapLines = function(image,space) {
	var _g = 0;
	var _g1 = space.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((space.length - vision_ds_Image.OFFSET) / (space.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var y1 = y;
			var position = (y * space.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = space.b[position] << 24 | space.b[position + 1] << 16 | space.b[position + 2] << 8 | space.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			if(this1 == -1) {
				var radians = x * Math.PI / 180;
				y1 -= Math.ceil(vision_algorithms_Hough.maxRho / 2);
				var locX = y1 * Math.cos(radians);
				var locY = y1 * Math.sin(radians);
				var ray_slope;
				var ray_radians;
				var ray_degrees;
				var x1 = locX;
				var y2 = locY;
				if(y2 == null) {
					y2 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var ray_point_x = x1;
				var ray_point_y = y2;
				var m = null;
				var degrees = x != 0 ? x + 90 : 0;
				var radians1 = null;
				if(m != null) {
					ray_degrees = Math.atan(m) * 180 / Math.PI;
					ray_radians = Math.atan(m);
					ray_slope = m;
					var value1 = Math.atan(m) * 180 / Math.PI;
					ray_slope = Math.tan(value1 * Math.PI / 180);
					ray_radians = value1 * Math.PI / 180;
					ray_degrees = value1;
					var value2 = Math.atan(m);
					ray_slope = Math.tan(value2);
					ray_degrees = value2 * 180 / Math.PI;
					ray_radians = value2;
				} else if(degrees != null) {
					ray_slope = Math.tan(degrees * Math.PI / 180);
					ray_radians = degrees * Math.PI / 180;
					ray_degrees = degrees;
					var value3 = Math.tan(degrees * Math.PI / 180);
					ray_degrees = Math.atan(value3) * 180 / Math.PI;
					ray_radians = Math.atan(value3);
					ray_slope = value3;
					var value4 = degrees * Math.PI / 180;
					ray_slope = Math.tan(value4);
					ray_degrees = value4 * 180 / Math.PI;
					ray_radians = value4;
				} else if(radians1 != null) {
					ray_slope = Math.tan(radians1);
					ray_degrees = radians1 * 180 / Math.PI;
					ray_radians = radians1;
					var value5 = Math.tan(radians1);
					ray_degrees = Math.atan(value5) * 180 / Math.PI;
					ray_radians = Math.atan(value5);
					ray_slope = value5;
					var value6 = radians1 * 180 / Math.PI;
					ray_slope = Math.tan(value6 * Math.PI / 180);
					ray_radians = value6 * Math.PI / 180;
					ray_degrees = value6;
				}
				var color = -16711681;
				var px = ray_point_x;
				var py = ray_point_y;
				var x2 = (0 - (px > 0 ? py - ray_slope * px : py + ray_slope * px)) / ray_slope;
				var y3 = 0;
				if(y3 == null) {
					y3 = 0;
				}
				if(x2 == null) {
					x2 = 0;
				}
				var p_x = x2;
				var p_y = y3;
				var p1_x = p_x | 0;
				var p1_y = p_y | 0;
				var y4 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
				var px1 = ray_point_x;
				var py1 = ray_point_y;
				var x3 = (y4 - (px1 > 0 ? py1 - ray_slope * px1 : py1 + ray_slope * px1)) / ray_slope;
				var y5 = y4;
				if(y5 == null) {
					y5 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var p_x1 = x3;
				var p_y1 = y5;
				var p2_x = p_x1 | 0;
				var p2_y = p_y1 | 0;
				var x11 = p1_x;
				var y11 = p1_y;
				var x21 = p2_x;
				var y21 = p2_y;
				var dx = Math.abs(x21 - x11);
				var dy = Math.abs(y21 - y11);
				var sx = x11 < x21 ? 1 : -1;
				var sy = y11 < y21 ? 1 : -1;
				var err = dx - dy;
				var safetyNet = 0;
				while(safetyNet++ <= 10000) {
					if(x11 >= 0 && y11 >= 0 && x11 < image.getUInt16(0) && y11 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))) {
						if(!(x11 >= 0 && y11 >= 0 && x11 < image.getUInt16(0) && y11 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
							var this_x = x11;
							var this_y = y11;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
						} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
							var v = null;
							var tmp;
							if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
								tmp = x11 >= 0 && y11 >= 0 && x11 < image.getUInt16(0) && y11 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
							} else {
								var has = false;
								var view;
								if(v != null) {
									view = v;
								} else {
									var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
									var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
									var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
									var image1 = image.b;
									var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
									view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
								}
								switch(view.shape) {
								case 0:
									has = x11 < view.x + view.width && y11 < view.y + view.height && x11 >= view.x && y11 >= view.y;
									break;
								case 1:
									has = !(x11 < view.x + view.width && y11 < view.y + view.height && x11 >= view.x && y11 >= view.y);
									break;
								case 2:case 3:
									if(view.width > view.height) {
										var a = view.width / 2;
										var b = view.height / 2;
										var c = Math.sqrt(a * a - b * b);
										var x4 = view.x + view.width / 2 - c;
										var y6 = view.y + view.height / 2;
										if(y6 == null) {
											y6 = 0;
										}
										if(x4 == null) {
											x4 = 0;
										}
										var f1_x = x4;
										var f1_y = y6;
										var x5 = view.x + view.width / 2 + c;
										var y7 = view.y + view.height / 2;
										if(y7 == null) {
											y7 = 0;
										}
										if(x5 == null) {
											x5 = 0;
										}
										var f2_x = x5;
										var f2_y = y7;
										var x6 = x11;
										var y8 = y11;
										if(y8 == null) {
											y8 = 0;
										}
										if(x6 == null) {
											x6 = 0;
										}
										var p_x2 = x6;
										var p_y2 = y8;
										var x7 = p_x2 - f1_x;
										var y9 = p_y2 - f1_y;
										var x8 = p_x2 - f2_x;
										var y10 = p_y2 - f2_y;
										has = Math.sqrt(x7 * x7 + y9 * y9) + Math.sqrt(x8 * x8 + y10 * y10) <= view.width;
										if(view.shape == 3) {
											has = !has;
										}
									} else if(view.height > view.width) {
										var a1 = view.height / 2;
										var b1 = view.width / 2;
										var c1 = Math.sqrt(a1 * a1 - b1 * b1);
										var x9 = view.x + view.width / 2;
										var y12 = view.y + view.height / 2 - c1;
										if(y12 == null) {
											y12 = 0;
										}
										if(x9 == null) {
											x9 = 0;
										}
										var f1_x1 = x9;
										var f1_y1 = y12;
										var x10 = view.x + view.width / 2;
										var y13 = view.y + view.height / 2 + c1;
										if(y13 == null) {
											y13 = 0;
										}
										if(x10 == null) {
											x10 = 0;
										}
										var f2_x1 = x10;
										var f2_y1 = y13;
										var x12 = x11;
										var y14 = y11;
										if(y14 == null) {
											y14 = 0;
										}
										if(x12 == null) {
											x12 = 0;
										}
										var p_x3 = x12;
										var p_y3 = y14;
										var x13 = p_x3 - f1_x1;
										var y15 = p_y3 - f1_y1;
										var x14 = p_x3 - f2_x1;
										var y16 = p_y3 - f2_y1;
										has = Math.sqrt(x13 * x13 + y15 * y15) + Math.sqrt(x14 * x14 + y16 * y16) <= view.height;
										if(view.shape == 3) {
											has = !has;
										}
									} else {
										var x15 = x11;
										var y17 = y11;
										if(y17 == null) {
											y17 = 0;
										}
										if(x15 == null) {
											x15 = 0;
										}
										var point1_x = x15;
										var point1_y = y17;
										var x16 = view.x + view.width / 2;
										var y18 = view.y + view.height / 2;
										if(y18 == null) {
											y18 = 0;
										}
										if(x16 == null) {
											x16 = 0;
										}
										var point2_x = x16;
										var point2_y = y18;
										var x17 = point2_x - point1_x;
										var y19 = point2_y - point1_y;
										has = Math.sqrt(x17 * x17 + y19 * y19) <= view.width / 2;
										if(view.shape == 3) {
											has = !has;
										}
									}
									break;
								case 4:
									has = Math.abs(x11 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y11 - view.y - view.height / 2) / (view.height / 2) <= 1;
									break;
								case 5:
									has = !(Math.abs(x11 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y11 - view.y - view.height / 2) / (view.height / 2) <= 1);
									break;
								}
								tmp = has;
							}
							if(tmp) {
								var position1 = (y11 * image.getUInt16(0) + x11) * 4;
								position1 += vision_ds_Image.OFFSET;
								image.b[position1] = color >> 24 & 255;
								image.b[position1 + 1] = color >> 16 & 255;
								image.b[position1 + 2] = color >> 8 & 255;
								image.b[position1 + 3] = color & 255;
							}
						} else {
							var position2 = (y11 * image.getUInt16(0) + x11) * 4;
							position2 += vision_ds_Image.OFFSET;
							image.b[position2] = color >> 24 & 255;
							image.b[position2 + 1] = color >> 16 & 255;
							image.b[position2 + 2] = color >> 8 & 255;
							image.b[position2 + 3] = color & 255;
						}
					}
					if(x11 == x21 && y11 == y21) {
						break;
					}
					var e2 = 2 * err;
					if(e2 > -dy) {
						err -= dy;
						x11 += sx;
					}
					if(e2 < dx) {
						err += dx;
						y11 += sy;
					}
				}
			}
		}
	}
	return image;
};
var vision_algorithms_Laplacian = function() { };
$hxClasses["vision.algorithms.Laplacian"] = vision_algorithms_Laplacian;
vision_algorithms_Laplacian.__name__ = "vision.algorithms.Laplacian";
vision_algorithms_Laplacian.convolveWithLaplacianOperator = function(image,positive) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var edgeColors = this2;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var j = _g2++;
			var sign = positive ? 1 : -1;
			var x = i - 1;
			var pixel;
			if(!(x >= 0 && j >= 0 && x < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this1 = [x,image.getUInt16(0) - 1];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i1 = _g4++;
					if(values[i1] > max) {
						max = values[i1];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i2 = _g6++;
					if(values1[i2] < min) {
						min = values1[i2];
					}
				}
				var x1 = min;
				var this3 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i3 = _g8++;
					if(values2[i3] > max1) {
						max1 = values2[i3];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i4 = _g10++;
					if(values3[i4] < min1) {
						min1 = values3[i4];
					}
				}
				var y = min1;
				if(!(x1 >= 0 && y >= 0 && x1 < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y * image.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				pixel = this5;
			} else {
				if(!(x >= 0 && j >= 0 && x < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (j * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				pixel = this6;
			}
			var gray = ((pixel >> 16 & 255) + (pixel >> 8 & 255) + (pixel & 255)) / 3 | 0;
			var Alpha = pixel >> 24 & 255;
			if(Alpha == null) {
				Alpha = 255;
			}
			var this7 = 0;
			var color = this7;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 255;
			}
			color &= -16711681;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
			color &= -65281;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
			color &= -256;
			color |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
			color &= 16777215;
			color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
			var pos01 = (color >> 16 & 255) * sign;
			var y1 = j - 1;
			var pixel1;
			if(!(i >= 0 && y1 >= 0 && i < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this8 = [i,image.getUInt16(0) - 1];
				var values4 = this8;
				var max2 = values4[0];
				var _g12 = 0;
				var _g13 = values4.length;
				while(_g12 < _g13) {
					var i5 = _g12++;
					if(values4[i5] > max2) {
						max2 = values4[i5];
					}
				}
				var this9 = [max2,0];
				var values5 = this9;
				var min2 = values5[0];
				var _g14 = 0;
				var _g15 = values5.length;
				while(_g14 < _g15) {
					var i6 = _g14++;
					if(values5[i6] < min2) {
						min2 = values5[i6];
					}
				}
				var x2 = min2;
				var this10 = [y1,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values6 = this10;
				var max3 = values6[0];
				var _g16 = 0;
				var _g17 = values6.length;
				while(_g16 < _g17) {
					var i7 = _g16++;
					if(values6[i7] > max3) {
						max3 = values6[i7];
					}
				}
				var this11 = [max3,0];
				var values7 = this11;
				var min3 = values7[0];
				var _g18 = 0;
				var _g19 = values7.length;
				while(_g18 < _g19) {
					var i8 = _g18++;
					if(values7[i8] < min3) {
						min3 = values7[i8];
					}
				}
				var y2 = min3;
				if(!(x2 >= 0 && y2 >= 0 && x2 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x2 = x2;
					var this_y2 = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position2 = (y2 * image.getUInt16(0) + x2) * 4;
				position2 += vision_ds_Image.OFFSET;
				var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var this12 = value2;
				pixel1 = this12;
			} else {
				if(!(i >= 0 && y1 >= 0 && i < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x3 = i;
					var this_y3 = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x3,this_y3)));
				}
				var position3 = (y1 * image.getUInt16(0) + i) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value3 = image.b[position3] << 24 | image.b[position3 + 1] << 16 | image.b[position3 + 2] << 8 | image.b[position3 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var this13 = value3;
				pixel1 = this13;
			}
			var gray1 = ((pixel1 >> 16 & 255) + (pixel1 >> 8 & 255) + (pixel1 & 255)) / 3 | 0;
			var Alpha2 = pixel1 >> 24 & 255;
			if(Alpha2 == null) {
				Alpha2 = 255;
			}
			var this14 = 0;
			var color1 = this14;
			var Alpha3 = Alpha2;
			if(Alpha3 == null) {
				Alpha3 = 255;
			}
			color1 &= -16711681;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 16;
			color1 &= -65281;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 8;
			color1 &= -256;
			color1 |= gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1;
			color1 &= 16777215;
			color1 |= (Alpha3 > 255 ? 255 : Alpha3 < 0 ? 0 : Alpha3) << 24;
			var pos10 = (color1 >> 16 & 255) * sign;
			var pixel2;
			if(!(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this15 = [i,image.getUInt16(0) - 1];
				var values8 = this15;
				var max4 = values8[0];
				var _g20 = 0;
				var _g21 = values8.length;
				while(_g20 < _g21) {
					var i9 = _g20++;
					if(values8[i9] > max4) {
						max4 = values8[i9];
					}
				}
				var this16 = [max4,0];
				var values9 = this16;
				var min4 = values9[0];
				var _g22 = 0;
				var _g23 = values9.length;
				while(_g22 < _g23) {
					var i10 = _g22++;
					if(values9[i10] < min4) {
						min4 = values9[i10];
					}
				}
				var x3 = min4;
				var this17 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values10 = this17;
				var max5 = values10[0];
				var _g24 = 0;
				var _g25 = values10.length;
				while(_g24 < _g25) {
					var i11 = _g24++;
					if(values10[i11] > max5) {
						max5 = values10[i11];
					}
				}
				var this18 = [max5,0];
				var values11 = this18;
				var min5 = values11[0];
				var _g26 = 0;
				var _g27 = values11.length;
				while(_g26 < _g27) {
					var i12 = _g26++;
					if(values11[i12] < min5) {
						min5 = values11[i12];
					}
				}
				var y3 = min5;
				if(!(x3 >= 0 && y3 >= 0 && x3 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x4 = x3;
					var this_y4 = y3;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position4 = (y3 * image.getUInt16(0) + x3) * 4;
				position4 += vision_ds_Image.OFFSET;
				var value4 = image.b[position4] << 24 | image.b[position4 + 1] << 16 | image.b[position4 + 2] << 8 | image.b[position4 + 3];
				if(value4 == null) {
					value4 = 0;
				}
				var this19 = value4;
				pixel2 = this19;
			} else {
				if(!(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x5 = i;
					var this_y5 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x5,this_y5)));
				}
				var position5 = (j * image.getUInt16(0) + i) * 4;
				position5 += vision_ds_Image.OFFSET;
				var value5 = image.b[position5] << 24 | image.b[position5 + 1] << 16 | image.b[position5 + 2] << 8 | image.b[position5 + 3];
				if(value5 == null) {
					value5 = 0;
				}
				var this20 = value5;
				pixel2 = this20;
			}
			var gray2 = ((pixel2 >> 16 & 255) + (pixel2 >> 8 & 255) + (pixel2 & 255)) / 3 | 0;
			var Alpha4 = pixel2 >> 24 & 255;
			if(Alpha4 == null) {
				Alpha4 = 255;
			}
			var this21 = 0;
			var color2 = this21;
			var Alpha5 = Alpha4;
			if(Alpha5 == null) {
				Alpha5 = 255;
			}
			color2 &= -16711681;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 16;
			color2 &= -65281;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 8;
			color2 &= -256;
			color2 |= gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2;
			color2 &= 16777215;
			color2 |= (Alpha5 > 255 ? 255 : Alpha5 < 0 ? 0 : Alpha5) << 24;
			var pos11 = (color2 >> 16 & 255) * -4 * sign;
			var y4 = j + 1;
			var pixel3;
			if(!(i >= 0 && y4 >= 0 && i < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this22 = [i,image.getUInt16(0) - 1];
				var values12 = this22;
				var max6 = values12[0];
				var _g28 = 0;
				var _g29 = values12.length;
				while(_g28 < _g29) {
					var i13 = _g28++;
					if(values12[i13] > max6) {
						max6 = values12[i13];
					}
				}
				var this23 = [max6,0];
				var values13 = this23;
				var min6 = values13[0];
				var _g30 = 0;
				var _g31 = values13.length;
				while(_g30 < _g31) {
					var i14 = _g30++;
					if(values13[i14] < min6) {
						min6 = values13[i14];
					}
				}
				var x4 = min6;
				var this24 = [y4,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values14 = this24;
				var max7 = values14[0];
				var _g32 = 0;
				var _g33 = values14.length;
				while(_g32 < _g33) {
					var i15 = _g32++;
					if(values14[i15] > max7) {
						max7 = values14[i15];
					}
				}
				var this25 = [max7,0];
				var values15 = this25;
				var min7 = values15[0];
				var _g34 = 0;
				var _g35 = values15.length;
				while(_g34 < _g35) {
					var i16 = _g34++;
					if(values15[i16] < min7) {
						min7 = values15[i16];
					}
				}
				var y5 = min7;
				if(!(x4 >= 0 && y5 >= 0 && x4 < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x6 = x4;
					var this_y6 = y5;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position6 = (y5 * image.getUInt16(0) + x4) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value6 = image.b[position6] << 24 | image.b[position6 + 1] << 16 | image.b[position6 + 2] << 8 | image.b[position6 + 3];
				if(value6 == null) {
					value6 = 0;
				}
				var this26 = value6;
				pixel3 = this26;
			} else {
				if(!(i >= 0 && y4 >= 0 && i < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x7 = i;
					var this_y7 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x7,this_y7)));
				}
				var position7 = (y4 * image.getUInt16(0) + i) * 4;
				position7 += vision_ds_Image.OFFSET;
				var value7 = image.b[position7] << 24 | image.b[position7 + 1] << 16 | image.b[position7 + 2] << 8 | image.b[position7 + 3];
				if(value7 == null) {
					value7 = 0;
				}
				var this27 = value7;
				pixel3 = this27;
			}
			var gray3 = ((pixel3 >> 16 & 255) + (pixel3 >> 8 & 255) + (pixel3 & 255)) / 3 | 0;
			var Alpha6 = pixel3 >> 24 & 255;
			if(Alpha6 == null) {
				Alpha6 = 255;
			}
			var this28 = 0;
			var color3 = this28;
			var Alpha7 = Alpha6;
			if(Alpha7 == null) {
				Alpha7 = 255;
			}
			color3 &= -16711681;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 16;
			color3 &= -65281;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 8;
			color3 &= -256;
			color3 |= gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3;
			color3 &= 16777215;
			color3 |= (Alpha7 > 255 ? 255 : Alpha7 < 0 ? 0 : Alpha7) << 24;
			var pos12 = (color3 >> 16 & 255) * sign;
			var x5 = i + 1;
			var pixel4;
			if(!(x5 >= 0 && j >= 0 && x5 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this29 = [x5,image.getUInt16(0) - 1];
				var values16 = this29;
				var max8 = values16[0];
				var _g36 = 0;
				var _g37 = values16.length;
				while(_g36 < _g37) {
					var i17 = _g36++;
					if(values16[i17] > max8) {
						max8 = values16[i17];
					}
				}
				var this30 = [max8,0];
				var values17 = this30;
				var min8 = values17[0];
				var _g38 = 0;
				var _g39 = values17.length;
				while(_g38 < _g39) {
					var i18 = _g38++;
					if(values17[i18] < min8) {
						min8 = values17[i18];
					}
				}
				var x6 = min8;
				var this31 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values18 = this31;
				var max9 = values18[0];
				var _g40 = 0;
				var _g41 = values18.length;
				while(_g40 < _g41) {
					var i19 = _g40++;
					if(values18[i19] > max9) {
						max9 = values18[i19];
					}
				}
				var this32 = [max9,0];
				var values19 = this32;
				var min9 = values19[0];
				var _g42 = 0;
				var _g43 = values19.length;
				while(_g42 < _g43) {
					var i20 = _g42++;
					if(values19[i20] < min9) {
						min9 = values19[i20];
					}
				}
				var y6 = min9;
				if(!(x6 >= 0 && y6 >= 0 && x6 < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x8 = x6;
					var this_y8 = y6;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x8,this_y8)));
				}
				var position8 = (y6 * image.getUInt16(0) + x6) * 4;
				position8 += vision_ds_Image.OFFSET;
				var value8 = image.b[position8] << 24 | image.b[position8 + 1] << 16 | image.b[position8 + 2] << 8 | image.b[position8 + 3];
				if(value8 == null) {
					value8 = 0;
				}
				var this33 = value8;
				pixel4 = this33;
			} else {
				if(!(x5 >= 0 && j >= 0 && x5 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x9 = x5;
					var this_y9 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x9,this_y9)));
				}
				var position9 = (j * image.getUInt16(0) + x5) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value9 = image.b[position9] << 24 | image.b[position9 + 1] << 16 | image.b[position9 + 2] << 8 | image.b[position9 + 3];
				if(value9 == null) {
					value9 = 0;
				}
				var this34 = value9;
				pixel4 = this34;
			}
			var gray4 = ((pixel4 >> 16 & 255) + (pixel4 >> 8 & 255) + (pixel4 & 255)) / 3 | 0;
			var Alpha8 = pixel4 >> 24 & 255;
			if(Alpha8 == null) {
				Alpha8 = 255;
			}
			var this35 = 0;
			var color4 = this35;
			var Alpha9 = Alpha8;
			if(Alpha9 == null) {
				Alpha9 = 255;
			}
			color4 &= -16711681;
			color4 |= (gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4) << 16;
			color4 &= -65281;
			color4 |= (gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4) << 8;
			color4 &= -256;
			color4 |= gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4;
			color4 &= 16777215;
			color4 |= (Alpha9 > 255 ? 255 : Alpha9 < 0 ? 0 : Alpha9) << 24;
			var pos21 = (color4 >> 16 & 255) * sign;
			var gray5 = (pos01 + pos10 + pos11 + pos12 + pos21) / 5 | 0;
			var this36 = 0;
			var color5 = this36;
			var Alpha10 = 255;
			if(Alpha10 == null) {
				Alpha10 = 255;
			}
			color5 &= -16711681;
			color5 |= (gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5) << 16;
			color5 &= -65281;
			color5 |= (gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5) << 8;
			color5 &= -256;
			color5 |= gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5;
			color5 &= 16777215;
			color5 |= (Alpha10 > 255 ? 255 : Alpha10 < 0 ? 0 : Alpha10) << 24;
			var color6 = color5;
			if(!(i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)))) {
				var this_x10 = i;
				var this_y10 = j;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edgeColors,new vision_ds_Point2D(this_x10,this_y10)));
			} else if(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g44 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g45 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g46 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var edgeColors1 = edgeColors.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g44,_g45,_g46,edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edgeColors1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y;
						break;
					case 1:
						has = !(i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x7 = view.x + view.width / 2 - c;
							var y7 = view.y + view.height / 2;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f1_x = x7;
							var f1_y = y7;
							var x8 = view.x + view.width / 2 + c;
							var y8 = view.y + view.height / 2;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var f2_x = x8;
							var f2_y = y8;
							var x9 = i;
							var y9 = j;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var p_x = x9;
							var p_y = y9;
							var x10 = p_x - f1_x;
							var y10 = p_y - f1_y;
							var x11 = p_x - f2_x;
							var y11 = p_y - f2_y;
							has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2 - c1;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var f1_x1 = x12;
							var f1_y1 = y12;
							var x13 = view.x + view.width / 2;
							var y13 = view.y + view.height / 2 + c1;
							if(y13 == null) {
								y13 = 0;
							}
							if(x13 == null) {
								x13 = 0;
							}
							var f2_x1 = x13;
							var f2_y1 = y13;
							var x14 = i;
							var y14 = j;
							if(y14 == null) {
								y14 = 0;
							}
							if(x14 == null) {
								x14 = 0;
							}
							var p_x1 = x14;
							var p_y1 = y14;
							var x15 = p_x1 - f1_x1;
							var y15 = p_y1 - f1_y1;
							var x16 = p_x1 - f2_x1;
							var y16 = p_y1 - f2_y1;
							has = Math.sqrt(x15 * x15 + y15 * y15) + Math.sqrt(x16 * x16 + y16 * y16) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x17 = i;
							var y17 = j;
							if(y17 == null) {
								y17 = 0;
							}
							if(x17 == null) {
								x17 = 0;
							}
							var point1_x = x17;
							var point1_y = y17;
							var x18 = view.x + view.width / 2;
							var y18 = view.y + view.height / 2;
							if(y18 == null) {
								y18 = 0;
							}
							if(x18 == null) {
								x18 = 0;
							}
							var point2_x = x18;
							var point2_y = y18;
							var x19 = point2_x - point1_x;
							var y19 = point2_y - point1_y;
							has = Math.sqrt(x19 * x19 + y19 * y19) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position10 = (j * edgeColors.getUInt16(0) + i) * 4;
					position10 += vision_ds_Image.OFFSET;
					edgeColors.b[position10] = color6 >> 24 & 255;
					edgeColors.b[position10 + 1] = color6 >> 16 & 255;
					edgeColors.b[position10 + 2] = color6 >> 8 & 255;
					edgeColors.b[position10 + 3] = color6 & 255;
				}
			} else {
				var position11 = (j * edgeColors.getUInt16(0) + i) * 4;
				position11 += vision_ds_Image.OFFSET;
				edgeColors.b[position11] = color6 >> 24 & 255;
				edgeColors.b[position11 + 1] = color6 >> 16 & 255;
				edgeColors.b[position11 + 2] = color6 >> 8 & 255;
				edgeColors.b[position11 + 3] = color6 & 255;
			}
		}
	}
	return edgeColors;
};
vision_algorithms_Laplacian.laplacianOfGaussian = function(image,kernalSize,sigma,threshold,positive) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var returned = this2;
	var this1 = vision_ds_Image.clone(image);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,this1.getUInt16(0));
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var blurred = vision_Vision.gaussianBlur(this1,sigma,kernalSize);
	var imageToProcess = vision_algorithms_Laplacian.convolveWithLaplacianOperator(blurred,positive);
	var _g = 0;
	var _g1 = imageToProcess.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((imageToProcess.length - vision_ds_Image.OFFSET) / (imageToProcess.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * imageToProcess.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = imageToProcess.b[position] << 24 | imageToProcess.b[position + 1] << 16 | imageToProcess.b[position + 2] << 8 | imageToProcess.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			if((this1 >> 16 & 255) > threshold) {
				if(!(x >= 0 && y >= 0 && x < returned.getUInt16(0) && y < Math.ceil((returned.length - vision_ds_Image.OFFSET) / (returned.getUInt16(0) * 4)))) {
					var this_x = x;
					var this_y = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(returned,new vision_ds_Point2D(this_x,this_y)));
				} else if(returned.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != returned.getUInt16(0) || returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((returned.length - vision_ds_Image.OFFSET) / (returned.getUInt16(0) * 4)) || returned.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(returned.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != returned.getUInt16(0) || returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((returned.length - vision_ds_Image.OFFSET) / (returned.getUInt16(0) * 4)) || returned.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < returned.getUInt16(0) && y < Math.ceil((returned.length - vision_ds_Image.OFFSET) / (returned.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g4 = returned.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g5 = returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g6 = returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var returned1 = returned.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g4,_g5,_g6,returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),returned1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x1 = view.x + view.width / 2 - c;
								var y1 = view.y + view.height / 2;
								if(y1 == null) {
									y1 = 0;
								}
								if(x1 == null) {
									x1 = 0;
								}
								var f1_x = x1;
								var f1_y = y1;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x3 = x;
								var y3 = y;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var p_x = x3;
								var p_y = y3;
								var x4 = p_x - f1_x;
								var y4 = p_y - f1_y;
								var x5 = p_x - f2_x;
								var y5 = p_y - f2_y;
								has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x6 = view.x + view.width / 2;
								var y6 = view.y + view.height / 2 - c1;
								if(y6 == null) {
									y6 = 0;
								}
								if(x6 == null) {
									x6 = 0;
								}
								var f1_x1 = x6;
								var f1_y1 = y6;
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 + c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f2_x1 = x7;
								var f2_y1 = y7;
								var x8 = x;
								var y8 = y;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var p_x1 = x8;
								var p_y1 = y8;
								var x9 = p_x1 - f1_x1;
								var y9 = p_y1 - f1_y1;
								var x10 = p_x1 - f2_x1;
								var y10 = p_y1 - f2_y1;
								has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x11 = x;
								var y11 = y;
								if(y11 == null) {
									y11 = 0;
								}
								if(x11 == null) {
									x11 = 0;
								}
								var point1_x = x11;
								var point1_y = y11;
								var x12 = view.x + view.width / 2;
								var y12 = view.y + view.height / 2;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var point2_x = x12;
								var point2_y = y12;
								var x13 = point2_x - point1_x;
								var y13 = point2_y - point1_y;
								has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position1 = (y * returned.getUInt16(0) + x) * 4;
						position1 += vision_ds_Image.OFFSET;
						returned.b[position1] = 255;
						returned.b[position1 + 1] = 255;
						returned.b[position1 + 2] = 255;
						returned.b[position1 + 3] = 255;
					}
				} else {
					var position2 = (y * returned.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					returned.b[position2] = 255;
					returned.b[position2 + 1] = 255;
					returned.b[position2 + 2] = 255;
					returned.b[position2 + 3] = 255;
				}
			}
		}
	}
	return returned;
};
var vision_algorithms_Perwitt = function() { };
$hxClasses["vision.algorithms.Perwitt"] = vision_algorithms_Perwitt;
vision_algorithms_Perwitt.__name__ = "vision.algorithms.Perwitt";
vision_algorithms_Perwitt.convolveWithPerwittOperator = function(image) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var edgeColors = this2;
	var maxGradient = -1;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var j = _g2++;
			var x = i - 1;
			var y = j - 1;
			var pixel;
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this1 = [x,image.getUInt16(0) - 1];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i1 = _g4++;
					if(values[i1] > max) {
						max = values[i1];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i2 = _g6++;
					if(values1[i2] < min) {
						min = values1[i2];
					}
				}
				var x1 = min;
				var this3 = [y,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i3 = _g8++;
					if(values2[i3] > max1) {
						max1 = values2[i3];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i4 = _g10++;
					if(values3[i4] < min1) {
						min1 = values3[i4];
					}
				}
				var y1 = min1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y1 * image.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				pixel = this5;
			} else {
				if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				pixel = this6;
			}
			var gray = ((pixel >> 16 & 255) + (pixel >> 8 & 255) + (pixel & 255)) / 3 | 0;
			var Alpha = pixel >> 24 & 255;
			if(Alpha == null) {
				Alpha = 255;
			}
			var this7 = 0;
			var color = this7;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 255;
			}
			color &= -16711681;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
			color &= -65281;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
			color &= -256;
			color |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
			color &= 16777215;
			color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
			var pos00 = color >> 16 & 255;
			var x2 = i - 1;
			var pixel1;
			if(!(x2 >= 0 && j >= 0 && x2 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this8 = [x2,image.getUInt16(0) - 1];
				var values4 = this8;
				var max2 = values4[0];
				var _g12 = 0;
				var _g13 = values4.length;
				while(_g12 < _g13) {
					var i5 = _g12++;
					if(values4[i5] > max2) {
						max2 = values4[i5];
					}
				}
				var this9 = [max2,0];
				var values5 = this9;
				var min2 = values5[0];
				var _g14 = 0;
				var _g15 = values5.length;
				while(_g14 < _g15) {
					var i6 = _g14++;
					if(values5[i6] < min2) {
						min2 = values5[i6];
					}
				}
				var x3 = min2;
				var this10 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values6 = this10;
				var max3 = values6[0];
				var _g16 = 0;
				var _g17 = values6.length;
				while(_g16 < _g17) {
					var i7 = _g16++;
					if(values6[i7] > max3) {
						max3 = values6[i7];
					}
				}
				var this11 = [max3,0];
				var values7 = this11;
				var min3 = values7[0];
				var _g18 = 0;
				var _g19 = values7.length;
				while(_g18 < _g19) {
					var i8 = _g18++;
					if(values7[i8] < min3) {
						min3 = values7[i8];
					}
				}
				var y2 = min3;
				if(!(x3 >= 0 && y2 >= 0 && x3 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x2 = x3;
					var this_y2 = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position2 = (y2 * image.getUInt16(0) + x3) * 4;
				position2 += vision_ds_Image.OFFSET;
				var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var this12 = value2;
				pixel1 = this12;
			} else {
				if(!(x2 >= 0 && j >= 0 && x2 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x3 = x2;
					var this_y3 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x3,this_y3)));
				}
				var position3 = (j * image.getUInt16(0) + x2) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value3 = image.b[position3] << 24 | image.b[position3 + 1] << 16 | image.b[position3 + 2] << 8 | image.b[position3 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var this13 = value3;
				pixel1 = this13;
			}
			var gray1 = ((pixel1 >> 16 & 255) + (pixel1 >> 8 & 255) + (pixel1 & 255)) / 3 | 0;
			var Alpha2 = pixel1 >> 24 & 255;
			if(Alpha2 == null) {
				Alpha2 = 255;
			}
			var this14 = 0;
			var color1 = this14;
			var Alpha3 = Alpha2;
			if(Alpha3 == null) {
				Alpha3 = 255;
			}
			color1 &= -16711681;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 16;
			color1 &= -65281;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 8;
			color1 &= -256;
			color1 |= gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1;
			color1 &= 16777215;
			color1 |= (Alpha3 > 255 ? 255 : Alpha3 < 0 ? 0 : Alpha3) << 24;
			var pos01 = color1 >> 16 & 255;
			var x4 = i - 1;
			var y3 = j + 1;
			var pixel2;
			if(!(x4 >= 0 && y3 >= 0 && x4 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this15 = [x4,image.getUInt16(0) - 1];
				var values8 = this15;
				var max4 = values8[0];
				var _g20 = 0;
				var _g21 = values8.length;
				while(_g20 < _g21) {
					var i9 = _g20++;
					if(values8[i9] > max4) {
						max4 = values8[i9];
					}
				}
				var this16 = [max4,0];
				var values9 = this16;
				var min4 = values9[0];
				var _g22 = 0;
				var _g23 = values9.length;
				while(_g22 < _g23) {
					var i10 = _g22++;
					if(values9[i10] < min4) {
						min4 = values9[i10];
					}
				}
				var x5 = min4;
				var this17 = [y3,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values10 = this17;
				var max5 = values10[0];
				var _g24 = 0;
				var _g25 = values10.length;
				while(_g24 < _g25) {
					var i11 = _g24++;
					if(values10[i11] > max5) {
						max5 = values10[i11];
					}
				}
				var this18 = [max5,0];
				var values11 = this18;
				var min5 = values11[0];
				var _g26 = 0;
				var _g27 = values11.length;
				while(_g26 < _g27) {
					var i12 = _g26++;
					if(values11[i12] < min5) {
						min5 = values11[i12];
					}
				}
				var y4 = min5;
				if(!(x5 >= 0 && y4 >= 0 && x5 < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x4 = x5;
					var this_y4 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position4 = (y4 * image.getUInt16(0) + x5) * 4;
				position4 += vision_ds_Image.OFFSET;
				var value4 = image.b[position4] << 24 | image.b[position4 + 1] << 16 | image.b[position4 + 2] << 8 | image.b[position4 + 3];
				if(value4 == null) {
					value4 = 0;
				}
				var this19 = value4;
				pixel2 = this19;
			} else {
				if(!(x4 >= 0 && y3 >= 0 && x4 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x5 = x4;
					var this_y5 = y3;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x5,this_y5)));
				}
				var position5 = (y3 * image.getUInt16(0) + x4) * 4;
				position5 += vision_ds_Image.OFFSET;
				var value5 = image.b[position5] << 24 | image.b[position5 + 1] << 16 | image.b[position5 + 2] << 8 | image.b[position5 + 3];
				if(value5 == null) {
					value5 = 0;
				}
				var this20 = value5;
				pixel2 = this20;
			}
			var gray2 = ((pixel2 >> 16 & 255) + (pixel2 >> 8 & 255) + (pixel2 & 255)) / 3 | 0;
			var Alpha4 = pixel2 >> 24 & 255;
			if(Alpha4 == null) {
				Alpha4 = 255;
			}
			var this21 = 0;
			var color2 = this21;
			var Alpha5 = Alpha4;
			if(Alpha5 == null) {
				Alpha5 = 255;
			}
			color2 &= -16711681;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 16;
			color2 &= -65281;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 8;
			color2 &= -256;
			color2 |= gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2;
			color2 &= 16777215;
			color2 |= (Alpha5 > 255 ? 255 : Alpha5 < 0 ? 0 : Alpha5) << 24;
			var pos02 = color2 >> 16 & 255;
			var y5 = j - 1;
			var pixel3;
			if(!(i >= 0 && y5 >= 0 && i < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this22 = [i,image.getUInt16(0) - 1];
				var values12 = this22;
				var max6 = values12[0];
				var _g28 = 0;
				var _g29 = values12.length;
				while(_g28 < _g29) {
					var i13 = _g28++;
					if(values12[i13] > max6) {
						max6 = values12[i13];
					}
				}
				var this23 = [max6,0];
				var values13 = this23;
				var min6 = values13[0];
				var _g30 = 0;
				var _g31 = values13.length;
				while(_g30 < _g31) {
					var i14 = _g30++;
					if(values13[i14] < min6) {
						min6 = values13[i14];
					}
				}
				var x6 = min6;
				var this24 = [y5,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values14 = this24;
				var max7 = values14[0];
				var _g32 = 0;
				var _g33 = values14.length;
				while(_g32 < _g33) {
					var i15 = _g32++;
					if(values14[i15] > max7) {
						max7 = values14[i15];
					}
				}
				var this25 = [max7,0];
				var values15 = this25;
				var min7 = values15[0];
				var _g34 = 0;
				var _g35 = values15.length;
				while(_g34 < _g35) {
					var i16 = _g34++;
					if(values15[i16] < min7) {
						min7 = values15[i16];
					}
				}
				var y6 = min7;
				if(!(x6 >= 0 && y6 >= 0 && x6 < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x6 = x6;
					var this_y6 = y6;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position6 = (y6 * image.getUInt16(0) + x6) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value6 = image.b[position6] << 24 | image.b[position6 + 1] << 16 | image.b[position6 + 2] << 8 | image.b[position6 + 3];
				if(value6 == null) {
					value6 = 0;
				}
				var this26 = value6;
				pixel3 = this26;
			} else {
				if(!(i >= 0 && y5 >= 0 && i < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x7 = i;
					var this_y7 = y5;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x7,this_y7)));
				}
				var position7 = (y5 * image.getUInt16(0) + i) * 4;
				position7 += vision_ds_Image.OFFSET;
				var value7 = image.b[position7] << 24 | image.b[position7 + 1] << 16 | image.b[position7 + 2] << 8 | image.b[position7 + 3];
				if(value7 == null) {
					value7 = 0;
				}
				var this27 = value7;
				pixel3 = this27;
			}
			var gray3 = ((pixel3 >> 16 & 255) + (pixel3 >> 8 & 255) + (pixel3 & 255)) / 3 | 0;
			var Alpha6 = pixel3 >> 24 & 255;
			if(Alpha6 == null) {
				Alpha6 = 255;
			}
			var this28 = 0;
			var color3 = this28;
			var Alpha7 = Alpha6;
			if(Alpha7 == null) {
				Alpha7 = 255;
			}
			color3 &= -16711681;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 16;
			color3 &= -65281;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 8;
			color3 &= -256;
			color3 |= gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3;
			color3 &= 16777215;
			color3 |= (Alpha7 > 255 ? 255 : Alpha7 < 0 ? 0 : Alpha7) << 24;
			var pos10 = color3 >> 16 & 255;
			var pixel4;
			if(!(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this29 = [i,image.getUInt16(0) - 1];
				var values16 = this29;
				var max8 = values16[0];
				var _g36 = 0;
				var _g37 = values16.length;
				while(_g36 < _g37) {
					var i17 = _g36++;
					if(values16[i17] > max8) {
						max8 = values16[i17];
					}
				}
				var this30 = [max8,0];
				var values17 = this30;
				var min8 = values17[0];
				var _g38 = 0;
				var _g39 = values17.length;
				while(_g38 < _g39) {
					var i18 = _g38++;
					if(values17[i18] < min8) {
						min8 = values17[i18];
					}
				}
				var x7 = min8;
				var this31 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values18 = this31;
				var max9 = values18[0];
				var _g40 = 0;
				var _g41 = values18.length;
				while(_g40 < _g41) {
					var i19 = _g40++;
					if(values18[i19] > max9) {
						max9 = values18[i19];
					}
				}
				var this32 = [max9,0];
				var values19 = this32;
				var min9 = values19[0];
				var _g42 = 0;
				var _g43 = values19.length;
				while(_g42 < _g43) {
					var i20 = _g42++;
					if(values19[i20] < min9) {
						min9 = values19[i20];
					}
				}
				var y7 = min9;
				if(!(x7 >= 0 && y7 >= 0 && x7 < image.getUInt16(0) && y7 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x8 = x7;
					var this_y8 = y7;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x8,this_y8)));
				}
				var position8 = (y7 * image.getUInt16(0) + x7) * 4;
				position8 += vision_ds_Image.OFFSET;
				var value8 = image.b[position8] << 24 | image.b[position8 + 1] << 16 | image.b[position8 + 2] << 8 | image.b[position8 + 3];
				if(value8 == null) {
					value8 = 0;
				}
				var this33 = value8;
				pixel4 = this33;
			} else {
				if(!(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x9 = i;
					var this_y9 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x9,this_y9)));
				}
				var position9 = (j * image.getUInt16(0) + i) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value9 = image.b[position9] << 24 | image.b[position9 + 1] << 16 | image.b[position9 + 2] << 8 | image.b[position9 + 3];
				if(value9 == null) {
					value9 = 0;
				}
				var this34 = value9;
				pixel4 = this34;
			}
			var gray4 = ((pixel4 >> 16 & 255) + (pixel4 >> 8 & 255) + (pixel4 & 255)) / 3 | 0;
			var Alpha8 = pixel4 >> 24 & 255;
			if(Alpha8 == null) {
				Alpha8 = 255;
			}
			var this35 = 0;
			var color4 = this35;
			var Alpha9 = Alpha8;
			if(Alpha9 == null) {
				Alpha9 = 255;
			}
			color4 &= -16711681;
			color4 |= (gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4) << 16;
			color4 &= -65281;
			color4 |= (gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4) << 8;
			color4 &= -256;
			color4 |= gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4;
			color4 &= 16777215;
			color4 |= (Alpha9 > 255 ? 255 : Alpha9 < 0 ? 0 : Alpha9) << 24;
			var pos11 = color4 >> 16 & 255;
			var y8 = j + 1;
			var pixel5;
			if(!(i >= 0 && y8 >= 0 && i < image.getUInt16(0) && y8 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this36 = [i,image.getUInt16(0) - 1];
				var values20 = this36;
				var max10 = values20[0];
				var _g44 = 0;
				var _g45 = values20.length;
				while(_g44 < _g45) {
					var i21 = _g44++;
					if(values20[i21] > max10) {
						max10 = values20[i21];
					}
				}
				var this37 = [max10,0];
				var values21 = this37;
				var min10 = values21[0];
				var _g46 = 0;
				var _g47 = values21.length;
				while(_g46 < _g47) {
					var i22 = _g46++;
					if(values21[i22] < min10) {
						min10 = values21[i22];
					}
				}
				var x8 = min10;
				var this38 = [y8,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values22 = this38;
				var max11 = values22[0];
				var _g48 = 0;
				var _g49 = values22.length;
				while(_g48 < _g49) {
					var i23 = _g48++;
					if(values22[i23] > max11) {
						max11 = values22[i23];
					}
				}
				var this39 = [max11,0];
				var values23 = this39;
				var min11 = values23[0];
				var _g50 = 0;
				var _g51 = values23.length;
				while(_g50 < _g51) {
					var i24 = _g50++;
					if(values23[i24] < min11) {
						min11 = values23[i24];
					}
				}
				var y9 = min11;
				if(!(x8 >= 0 && y9 >= 0 && x8 < image.getUInt16(0) && y9 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x10 = x8;
					var this_y10 = y9;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x10,this_y10)));
				}
				var position10 = (y9 * image.getUInt16(0) + x8) * 4;
				position10 += vision_ds_Image.OFFSET;
				var value10 = image.b[position10] << 24 | image.b[position10 + 1] << 16 | image.b[position10 + 2] << 8 | image.b[position10 + 3];
				if(value10 == null) {
					value10 = 0;
				}
				var this40 = value10;
				pixel5 = this40;
			} else {
				if(!(i >= 0 && y8 >= 0 && i < image.getUInt16(0) && y8 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x11 = i;
					var this_y11 = y8;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x11,this_y11)));
				}
				var position11 = (y8 * image.getUInt16(0) + i) * 4;
				position11 += vision_ds_Image.OFFSET;
				var value11 = image.b[position11] << 24 | image.b[position11 + 1] << 16 | image.b[position11 + 2] << 8 | image.b[position11 + 3];
				if(value11 == null) {
					value11 = 0;
				}
				var this41 = value11;
				pixel5 = this41;
			}
			var gray5 = ((pixel5 >> 16 & 255) + (pixel5 >> 8 & 255) + (pixel5 & 255)) / 3 | 0;
			var Alpha10 = pixel5 >> 24 & 255;
			if(Alpha10 == null) {
				Alpha10 = 255;
			}
			var this42 = 0;
			var color5 = this42;
			var Alpha11 = Alpha10;
			if(Alpha11 == null) {
				Alpha11 = 255;
			}
			color5 &= -16711681;
			color5 |= (gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5) << 16;
			color5 &= -65281;
			color5 |= (gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5) << 8;
			color5 &= -256;
			color5 |= gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5;
			color5 &= 16777215;
			color5 |= (Alpha11 > 255 ? 255 : Alpha11 < 0 ? 0 : Alpha11) << 24;
			var pos12 = color5 >> 16 & 255;
			var x9 = i + 1;
			var y10 = j - 1;
			var pixel6;
			if(!(x9 >= 0 && y10 >= 0 && x9 < image.getUInt16(0) && y10 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this43 = [x9,image.getUInt16(0) - 1];
				var values24 = this43;
				var max12 = values24[0];
				var _g52 = 0;
				var _g53 = values24.length;
				while(_g52 < _g53) {
					var i25 = _g52++;
					if(values24[i25] > max12) {
						max12 = values24[i25];
					}
				}
				var this44 = [max12,0];
				var values25 = this44;
				var min12 = values25[0];
				var _g54 = 0;
				var _g55 = values25.length;
				while(_g54 < _g55) {
					var i26 = _g54++;
					if(values25[i26] < min12) {
						min12 = values25[i26];
					}
				}
				var x10 = min12;
				var this45 = [y10,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values26 = this45;
				var max13 = values26[0];
				var _g56 = 0;
				var _g57 = values26.length;
				while(_g56 < _g57) {
					var i27 = _g56++;
					if(values26[i27] > max13) {
						max13 = values26[i27];
					}
				}
				var this46 = [max13,0];
				var values27 = this46;
				var min13 = values27[0];
				var _g58 = 0;
				var _g59 = values27.length;
				while(_g58 < _g59) {
					var i28 = _g58++;
					if(values27[i28] < min13) {
						min13 = values27[i28];
					}
				}
				var y11 = min13;
				if(!(x10 >= 0 && y11 >= 0 && x10 < image.getUInt16(0) && y11 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x12 = x10;
					var this_y12 = y11;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x12,this_y12)));
				}
				var position12 = (y11 * image.getUInt16(0) + x10) * 4;
				position12 += vision_ds_Image.OFFSET;
				var value12 = image.b[position12] << 24 | image.b[position12 + 1] << 16 | image.b[position12 + 2] << 8 | image.b[position12 + 3];
				if(value12 == null) {
					value12 = 0;
				}
				var this47 = value12;
				pixel6 = this47;
			} else {
				if(!(x9 >= 0 && y10 >= 0 && x9 < image.getUInt16(0) && y10 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x13 = x9;
					var this_y13 = y10;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x13,this_y13)));
				}
				var position13 = (y10 * image.getUInt16(0) + x9) * 4;
				position13 += vision_ds_Image.OFFSET;
				var value13 = image.b[position13] << 24 | image.b[position13 + 1] << 16 | image.b[position13 + 2] << 8 | image.b[position13 + 3];
				if(value13 == null) {
					value13 = 0;
				}
				var this48 = value13;
				pixel6 = this48;
			}
			var gray6 = ((pixel6 >> 16 & 255) + (pixel6 >> 8 & 255) + (pixel6 & 255)) / 3 | 0;
			var Alpha12 = pixel6 >> 24 & 255;
			if(Alpha12 == null) {
				Alpha12 = 255;
			}
			var this49 = 0;
			var color6 = this49;
			var Alpha13 = Alpha12;
			if(Alpha13 == null) {
				Alpha13 = 255;
			}
			color6 &= -16711681;
			color6 |= (gray6 > 255 ? 255 : gray6 < 0 ? 0 : gray6) << 16;
			color6 &= -65281;
			color6 |= (gray6 > 255 ? 255 : gray6 < 0 ? 0 : gray6) << 8;
			color6 &= -256;
			color6 |= gray6 > 255 ? 255 : gray6 < 0 ? 0 : gray6;
			color6 &= 16777215;
			color6 |= (Alpha13 > 255 ? 255 : Alpha13 < 0 ? 0 : Alpha13) << 24;
			var pos20 = color6 >> 16 & 255;
			var x11 = i + 1;
			var pixel7;
			if(!(x11 >= 0 && j >= 0 && x11 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this50 = [x11,image.getUInt16(0) - 1];
				var values28 = this50;
				var max14 = values28[0];
				var _g60 = 0;
				var _g61 = values28.length;
				while(_g60 < _g61) {
					var i29 = _g60++;
					if(values28[i29] > max14) {
						max14 = values28[i29];
					}
				}
				var this51 = [max14,0];
				var values29 = this51;
				var min14 = values29[0];
				var _g62 = 0;
				var _g63 = values29.length;
				while(_g62 < _g63) {
					var i30 = _g62++;
					if(values29[i30] < min14) {
						min14 = values29[i30];
					}
				}
				var x12 = min14;
				var this52 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values30 = this52;
				var max15 = values30[0];
				var _g64 = 0;
				var _g65 = values30.length;
				while(_g64 < _g65) {
					var i31 = _g64++;
					if(values30[i31] > max15) {
						max15 = values30[i31];
					}
				}
				var this53 = [max15,0];
				var values31 = this53;
				var min15 = values31[0];
				var _g66 = 0;
				var _g67 = values31.length;
				while(_g66 < _g67) {
					var i32 = _g66++;
					if(values31[i32] < min15) {
						min15 = values31[i32];
					}
				}
				var y12 = min15;
				if(!(x12 >= 0 && y12 >= 0 && x12 < image.getUInt16(0) && y12 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x14 = x12;
					var this_y14 = y12;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x14,this_y14)));
				}
				var position14 = (y12 * image.getUInt16(0) + x12) * 4;
				position14 += vision_ds_Image.OFFSET;
				var value14 = image.b[position14] << 24 | image.b[position14 + 1] << 16 | image.b[position14 + 2] << 8 | image.b[position14 + 3];
				if(value14 == null) {
					value14 = 0;
				}
				var this54 = value14;
				pixel7 = this54;
			} else {
				if(!(x11 >= 0 && j >= 0 && x11 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x15 = x11;
					var this_y15 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x15,this_y15)));
				}
				var position15 = (j * image.getUInt16(0) + x11) * 4;
				position15 += vision_ds_Image.OFFSET;
				var value15 = image.b[position15] << 24 | image.b[position15 + 1] << 16 | image.b[position15 + 2] << 8 | image.b[position15 + 3];
				if(value15 == null) {
					value15 = 0;
				}
				var this55 = value15;
				pixel7 = this55;
			}
			var gray7 = ((pixel7 >> 16 & 255) + (pixel7 >> 8 & 255) + (pixel7 & 255)) / 3 | 0;
			var Alpha14 = pixel7 >> 24 & 255;
			if(Alpha14 == null) {
				Alpha14 = 255;
			}
			var this56 = 0;
			var color7 = this56;
			var Alpha15 = Alpha14;
			if(Alpha15 == null) {
				Alpha15 = 255;
			}
			color7 &= -16711681;
			color7 |= (gray7 > 255 ? 255 : gray7 < 0 ? 0 : gray7) << 16;
			color7 &= -65281;
			color7 |= (gray7 > 255 ? 255 : gray7 < 0 ? 0 : gray7) << 8;
			color7 &= -256;
			color7 |= gray7 > 255 ? 255 : gray7 < 0 ? 0 : gray7;
			color7 &= 16777215;
			color7 |= (Alpha15 > 255 ? 255 : Alpha15 < 0 ? 0 : Alpha15) << 24;
			var pos21 = color7 >> 16 & 255;
			var x13 = i + 1;
			var y13 = j + 1;
			var pixel8;
			if(!(x13 >= 0 && y13 >= 0 && x13 < image.getUInt16(0) && y13 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this57 = [x13,image.getUInt16(0) - 1];
				var values32 = this57;
				var max16 = values32[0];
				var _g68 = 0;
				var _g69 = values32.length;
				while(_g68 < _g69) {
					var i33 = _g68++;
					if(values32[i33] > max16) {
						max16 = values32[i33];
					}
				}
				var this58 = [max16,0];
				var values33 = this58;
				var min16 = values33[0];
				var _g70 = 0;
				var _g71 = values33.length;
				while(_g70 < _g71) {
					var i34 = _g70++;
					if(values33[i34] < min16) {
						min16 = values33[i34];
					}
				}
				var x14 = min16;
				var this59 = [y13,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values34 = this59;
				var max17 = values34[0];
				var _g72 = 0;
				var _g73 = values34.length;
				while(_g72 < _g73) {
					var i35 = _g72++;
					if(values34[i35] > max17) {
						max17 = values34[i35];
					}
				}
				var this60 = [max17,0];
				var values35 = this60;
				var min17 = values35[0];
				var _g74 = 0;
				var _g75 = values35.length;
				while(_g74 < _g75) {
					var i36 = _g74++;
					if(values35[i36] < min17) {
						min17 = values35[i36];
					}
				}
				var y14 = min17;
				if(!(x14 >= 0 && y14 >= 0 && x14 < image.getUInt16(0) && y14 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x16 = x14;
					var this_y16 = y14;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x16,this_y16)));
				}
				var position16 = (y14 * image.getUInt16(0) + x14) * 4;
				position16 += vision_ds_Image.OFFSET;
				var value16 = image.b[position16] << 24 | image.b[position16 + 1] << 16 | image.b[position16 + 2] << 8 | image.b[position16 + 3];
				if(value16 == null) {
					value16 = 0;
				}
				var this61 = value16;
				pixel8 = this61;
			} else {
				if(!(x13 >= 0 && y13 >= 0 && x13 < image.getUInt16(0) && y13 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x17 = x13;
					var this_y17 = y13;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x17,this_y17)));
				}
				var position17 = (y13 * image.getUInt16(0) + x13) * 4;
				position17 += vision_ds_Image.OFFSET;
				var value17 = image.b[position17] << 24 | image.b[position17 + 1] << 16 | image.b[position17 + 2] << 8 | image.b[position17 + 3];
				if(value17 == null) {
					value17 = 0;
				}
				var this62 = value17;
				pixel8 = this62;
			}
			var gray8 = ((pixel8 >> 16 & 255) + (pixel8 >> 8 & 255) + (pixel8 & 255)) / 3 | 0;
			var Alpha16 = pixel8 >> 24 & 255;
			if(Alpha16 == null) {
				Alpha16 = 255;
			}
			var this63 = 0;
			var color8 = this63;
			var Alpha17 = Alpha16;
			if(Alpha17 == null) {
				Alpha17 = 255;
			}
			color8 &= -16711681;
			color8 |= (gray8 > 255 ? 255 : gray8 < 0 ? 0 : gray8) << 16;
			color8 &= -65281;
			color8 |= (gray8 > 255 ? 255 : gray8 < 0 ? 0 : gray8) << 8;
			color8 &= -256;
			color8 |= gray8 > 255 ? 255 : gray8 < 0 ? 0 : gray8;
			color8 &= 16777215;
			color8 |= (Alpha17 > 255 ? 255 : Alpha17 < 0 ? 0 : Alpha17) << 24;
			var pos22 = color8 >> 16 & 255;
			var gx = -1 * pos00 + 0 * pos01 + pos02 + (-2 * pos10 + 0 * pos11 + 2 * pos12) + (-1 * pos20 + 0 * pos21 + pos22);
			var gy = -1 * pos00 + -2 * pos01 + -1 * pos02 + (0 * pos10 + 0 * pos11 + 0 * pos12) + (pos20 + 2 * pos21 + pos22);
			var gradientFloatValue = Math.sqrt(gx * gx + gy * gy);
			var gradient = gradientFloatValue | 0;
			if(gradient > maxGradient) {
				maxGradient = gradient;
			}
			var rgb = gradient * (255 / maxGradient) | 0;
			var color9 = -16777216 | rgb << 16 | rgb << 8 | rgb;
			if(!(i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)))) {
				var this_x18 = i;
				var this_y18 = j;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edgeColors,new vision_ds_Point2D(this_x18,this_y18)));
			} else if(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g76 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g77 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g78 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var edgeColors1 = edgeColors.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g76,_g77,_g78,edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edgeColors1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y;
						break;
					case 1:
						has = !(i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x15 = view.x + view.width / 2 - c;
							var y15 = view.y + view.height / 2;
							if(y15 == null) {
								y15 = 0;
							}
							if(x15 == null) {
								x15 = 0;
							}
							var f1_x = x15;
							var f1_y = y15;
							var x16 = view.x + view.width / 2 + c;
							var y16 = view.y + view.height / 2;
							if(y16 == null) {
								y16 = 0;
							}
							if(x16 == null) {
								x16 = 0;
							}
							var f2_x = x16;
							var f2_y = y16;
							var x17 = i;
							var y17 = j;
							if(y17 == null) {
								y17 = 0;
							}
							if(x17 == null) {
								x17 = 0;
							}
							var p_x = x17;
							var p_y = y17;
							var x18 = p_x - f1_x;
							var y18 = p_y - f1_y;
							var x19 = p_x - f2_x;
							var y19 = p_y - f2_y;
							has = Math.sqrt(x18 * x18 + y18 * y18) + Math.sqrt(x19 * x19 + y19 * y19) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x20 = view.x + view.width / 2;
							var y20 = view.y + view.height / 2 - c1;
							if(y20 == null) {
								y20 = 0;
							}
							if(x20 == null) {
								x20 = 0;
							}
							var f1_x1 = x20;
							var f1_y1 = y20;
							var x21 = view.x + view.width / 2;
							var y21 = view.y + view.height / 2 + c1;
							if(y21 == null) {
								y21 = 0;
							}
							if(x21 == null) {
								x21 = 0;
							}
							var f2_x1 = x21;
							var f2_y1 = y21;
							var x22 = i;
							var y22 = j;
							if(y22 == null) {
								y22 = 0;
							}
							if(x22 == null) {
								x22 = 0;
							}
							var p_x1 = x22;
							var p_y1 = y22;
							var x23 = p_x1 - f1_x1;
							var y23 = p_y1 - f1_y1;
							var x24 = p_x1 - f2_x1;
							var y24 = p_y1 - f2_y1;
							has = Math.sqrt(x23 * x23 + y23 * y23) + Math.sqrt(x24 * x24 + y24 * y24) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x25 = i;
							var y25 = j;
							if(y25 == null) {
								y25 = 0;
							}
							if(x25 == null) {
								x25 = 0;
							}
							var point1_x = x25;
							var point1_y = y25;
							var x26 = view.x + view.width / 2;
							var y26 = view.y + view.height / 2;
							if(y26 == null) {
								y26 = 0;
							}
							if(x26 == null) {
								x26 = 0;
							}
							var point2_x = x26;
							var point2_y = y26;
							var x27 = point2_x - point1_x;
							var y27 = point2_y - point1_y;
							has = Math.sqrt(x27 * x27 + y27 * y27) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position18 = (j * edgeColors.getUInt16(0) + i) * 4;
					position18 += vision_ds_Image.OFFSET;
					edgeColors.b[position18] = color9 >> 24 & 255;
					edgeColors.b[position18 + 1] = color9 >> 16 & 255;
					edgeColors.b[position18 + 2] = color9 >> 8 & 255;
					edgeColors.b[position18 + 3] = color9 & 255;
				}
			} else {
				var position19 = (j * edgeColors.getUInt16(0) + i) * 4;
				position19 += vision_ds_Image.OFFSET;
				edgeColors.b[position19] = color9 >> 24 & 255;
				edgeColors.b[position19 + 1] = color9 >> 16 & 255;
				edgeColors.b[position19 + 2] = color9 >> 8 & 255;
				edgeColors.b[position19 + 3] = color9 & 255;
			}
		}
	}
	return edgeColors;
};
vision_algorithms_Perwitt.getNeighbors = function(kernalSize,x,y,image) {
	var neighbors = [];
	var _g = 0;
	var _g1 = kernalSize + 1;
	while(_g < _g1) {
		var i = _g++;
		neighbors[i] = [];
	}
	var roundedDown = (kernalSize - 1) / 2 | 0;
	var _g = -roundedDown;
	var _g1 = roundedDown + 1;
	while(_g < _g1) {
		var X = _g++;
		var _g2 = -roundedDown;
		var _g3 = roundedDown + 1;
		while(_g2 < _g3) {
			var Y = _g2++;
			var tmp = X + roundedDown;
			var x1 = x + X;
			var y1 = y + Y;
			var tmp1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this1 = [x1,image.getUInt16(0) - 1];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i = _g4++;
					if(values[i] > max) {
						max = values[i];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i1 = _g6++;
					if(values1[i1] < min) {
						min = values1[i1];
					}
				}
				var x2 = min;
				var this3 = [y1,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i2 = _g8++;
					if(values2[i2] > max1) {
						max1 = values2[i2];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i3 = _g10++;
					if(values3[i3] < min1) {
						min1 = values3[i3];
					}
				}
				var y2 = min1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y2 * image.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				tmp1 = this5;
			} else {
				if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x1;
					var this_y1 = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y1 * image.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				tmp1 = this6;
			}
			neighbors[tmp].push(tmp1);
		}
	}
	return neighbors;
};
vision_algorithms_Perwitt.detectEdges = function(image,threshold) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = 0;
	var color = this1;
	var Alpha = 255;
	if(Alpha == null) {
		Alpha = 255;
	}
	color &= -16711681;
	color |= 0;
	color &= -65281;
	color |= 0;
	color &= -256;
	color |= 0;
	color &= 16777215;
	color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	var color1 = color;
	if(color1 == null) {
		color1 = 0;
	}
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = color1 >> 24 & 255;
		this2.b[i + 1] = color1 >> 16 & 255;
		this2.b[i + 2] = color1 >> 8 & 255;
		this2.b[i + 3] = color1 & 255;
		i += 4;
	}
	var edges = this2;
	var blackAndWhite = vision_Vision.grayscale(vision_ds_Image.clone(image));
	var _g = 0;
	var _g1 = blackAndWhite.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var neighbors_8;
			var neighbors_7;
			var neighbors_6;
			var neighbors_5;
			var neighbors_4;
			var neighbors_3;
			var neighbors_2;
			var neighbors_1;
			var neighbors_0;
			var x1 = x - 1;
			var y1 = y - 1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < blackAndWhite.getUInt16(0) && y1 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this1 = [x1,blackAndWhite.getUInt16(0) - 1];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i = _g4++;
					if(values[i] > max) {
						max = values[i];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i1 = _g6++;
					if(values1[i1] < min) {
						min = values1[i1];
					}
				}
				var x2 = min;
				var this3 = [y1,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i2 = _g8++;
					if(values2[i2] > max1) {
						max1 = values2[i2];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i3 = _g10++;
					if(values3[i3] < min1) {
						min1 = values3[i3];
					}
				}
				var y2 = min1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < blackAndWhite.getUInt16(0) && y2 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y2 * blackAndWhite.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = blackAndWhite.b[position] << 24 | blackAndWhite.b[position + 1] << 16 | blackAndWhite.b[position + 2] << 8 | blackAndWhite.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				neighbors_0 = this5;
			} else {
				if(!(x1 >= 0 && y1 >= 0 && x1 < blackAndWhite.getUInt16(0) && y1 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x1 = x1;
					var this_y1 = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y1 * blackAndWhite.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = blackAndWhite.b[position1] << 24 | blackAndWhite.b[position1 + 1] << 16 | blackAndWhite.b[position1 + 2] << 8 | blackAndWhite.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				neighbors_0 = this6;
			}
			var y3 = y - 1;
			if(!(x >= 0 && y3 >= 0 && x < blackAndWhite.getUInt16(0) && y3 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this7 = [x,blackAndWhite.getUInt16(0) - 1];
				var values4 = this7;
				var max2 = values4[0];
				var _g12 = 0;
				var _g13 = values4.length;
				while(_g12 < _g13) {
					var i4 = _g12++;
					if(values4[i4] > max2) {
						max2 = values4[i4];
					}
				}
				var this8 = [max2,0];
				var values5 = this8;
				var min2 = values5[0];
				var _g14 = 0;
				var _g15 = values5.length;
				while(_g14 < _g15) {
					var i5 = _g14++;
					if(values5[i5] < min2) {
						min2 = values5[i5];
					}
				}
				var x3 = min2;
				var this9 = [y3,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values6 = this9;
				var max3 = values6[0];
				var _g16 = 0;
				var _g17 = values6.length;
				while(_g16 < _g17) {
					var i6 = _g16++;
					if(values6[i6] > max3) {
						max3 = values6[i6];
					}
				}
				var this10 = [max3,0];
				var values7 = this10;
				var min3 = values7[0];
				var _g18 = 0;
				var _g19 = values7.length;
				while(_g18 < _g19) {
					var i7 = _g18++;
					if(values7[i7] < min3) {
						min3 = values7[i7];
					}
				}
				var y4 = min3;
				if(!(x3 >= 0 && y4 >= 0 && x3 < blackAndWhite.getUInt16(0) && y4 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x2 = x3;
					var this_y2 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position2 = (y4 * blackAndWhite.getUInt16(0) + x3) * 4;
				position2 += vision_ds_Image.OFFSET;
				var value2 = blackAndWhite.b[position2] << 24 | blackAndWhite.b[position2 + 1] << 16 | blackAndWhite.b[position2 + 2] << 8 | blackAndWhite.b[position2 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var this11 = value2;
				neighbors_1 = this11;
			} else {
				if(!(x >= 0 && y3 >= 0 && x < blackAndWhite.getUInt16(0) && y3 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x3 = x;
					var this_y3 = y3;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x3,this_y3)));
				}
				var position3 = (y3 * blackAndWhite.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value3 = blackAndWhite.b[position3] << 24 | blackAndWhite.b[position3 + 1] << 16 | blackAndWhite.b[position3 + 2] << 8 | blackAndWhite.b[position3 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var this12 = value3;
				neighbors_1 = this12;
			}
			var x4 = x + 1;
			var y5 = y - 1;
			if(!(x4 >= 0 && y5 >= 0 && x4 < blackAndWhite.getUInt16(0) && y5 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this13 = [x4,blackAndWhite.getUInt16(0) - 1];
				var values8 = this13;
				var max4 = values8[0];
				var _g20 = 0;
				var _g21 = values8.length;
				while(_g20 < _g21) {
					var i8 = _g20++;
					if(values8[i8] > max4) {
						max4 = values8[i8];
					}
				}
				var this14 = [max4,0];
				var values9 = this14;
				var min4 = values9[0];
				var _g22 = 0;
				var _g23 = values9.length;
				while(_g22 < _g23) {
					var i9 = _g22++;
					if(values9[i9] < min4) {
						min4 = values9[i9];
					}
				}
				var x5 = min4;
				var this15 = [y5,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values10 = this15;
				var max5 = values10[0];
				var _g24 = 0;
				var _g25 = values10.length;
				while(_g24 < _g25) {
					var i10 = _g24++;
					if(values10[i10] > max5) {
						max5 = values10[i10];
					}
				}
				var this16 = [max5,0];
				var values11 = this16;
				var min5 = values11[0];
				var _g26 = 0;
				var _g27 = values11.length;
				while(_g26 < _g27) {
					var i11 = _g26++;
					if(values11[i11] < min5) {
						min5 = values11[i11];
					}
				}
				var y6 = min5;
				if(!(x5 >= 0 && y6 >= 0 && x5 < blackAndWhite.getUInt16(0) && y6 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x4 = x5;
					var this_y4 = y6;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position4 = (y6 * blackAndWhite.getUInt16(0) + x5) * 4;
				position4 += vision_ds_Image.OFFSET;
				var value4 = blackAndWhite.b[position4] << 24 | blackAndWhite.b[position4 + 1] << 16 | blackAndWhite.b[position4 + 2] << 8 | blackAndWhite.b[position4 + 3];
				if(value4 == null) {
					value4 = 0;
				}
				var this17 = value4;
				neighbors_2 = this17;
			} else {
				if(!(x4 >= 0 && y5 >= 0 && x4 < blackAndWhite.getUInt16(0) && y5 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x5 = x4;
					var this_y5 = y5;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x5,this_y5)));
				}
				var position5 = (y5 * blackAndWhite.getUInt16(0) + x4) * 4;
				position5 += vision_ds_Image.OFFSET;
				var value5 = blackAndWhite.b[position5] << 24 | blackAndWhite.b[position5 + 1] << 16 | blackAndWhite.b[position5 + 2] << 8 | blackAndWhite.b[position5 + 3];
				if(value5 == null) {
					value5 = 0;
				}
				var this18 = value5;
				neighbors_2 = this18;
			}
			var x6 = x - 1;
			if(!(x6 >= 0 && y >= 0 && x6 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this19 = [x6,blackAndWhite.getUInt16(0) - 1];
				var values12 = this19;
				var max6 = values12[0];
				var _g28 = 0;
				var _g29 = values12.length;
				while(_g28 < _g29) {
					var i12 = _g28++;
					if(values12[i12] > max6) {
						max6 = values12[i12];
					}
				}
				var this20 = [max6,0];
				var values13 = this20;
				var min6 = values13[0];
				var _g30 = 0;
				var _g31 = values13.length;
				while(_g30 < _g31) {
					var i13 = _g30++;
					if(values13[i13] < min6) {
						min6 = values13[i13];
					}
				}
				var x7 = min6;
				var this21 = [y,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values14 = this21;
				var max7 = values14[0];
				var _g32 = 0;
				var _g33 = values14.length;
				while(_g32 < _g33) {
					var i14 = _g32++;
					if(values14[i14] > max7) {
						max7 = values14[i14];
					}
				}
				var this22 = [max7,0];
				var values15 = this22;
				var min7 = values15[0];
				var _g34 = 0;
				var _g35 = values15.length;
				while(_g34 < _g35) {
					var i15 = _g34++;
					if(values15[i15] < min7) {
						min7 = values15[i15];
					}
				}
				var y7 = min7;
				if(!(x7 >= 0 && y7 >= 0 && x7 < blackAndWhite.getUInt16(0) && y7 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x6 = x7;
					var this_y6 = y7;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position6 = (y7 * blackAndWhite.getUInt16(0) + x7) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value6 = blackAndWhite.b[position6] << 24 | blackAndWhite.b[position6 + 1] << 16 | blackAndWhite.b[position6 + 2] << 8 | blackAndWhite.b[position6 + 3];
				if(value6 == null) {
					value6 = 0;
				}
				var this23 = value6;
				neighbors_3 = this23;
			} else {
				if(!(x6 >= 0 && y >= 0 && x6 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x7 = x6;
					var this_y7 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x7,this_y7)));
				}
				var position7 = (y * blackAndWhite.getUInt16(0) + x6) * 4;
				position7 += vision_ds_Image.OFFSET;
				var value7 = blackAndWhite.b[position7] << 24 | blackAndWhite.b[position7 + 1] << 16 | blackAndWhite.b[position7 + 2] << 8 | blackAndWhite.b[position7 + 3];
				if(value7 == null) {
					value7 = 0;
				}
				var this24 = value7;
				neighbors_3 = this24;
			}
			if(!(x >= 0 && y >= 0 && x < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this25 = [x,blackAndWhite.getUInt16(0) - 1];
				var values16 = this25;
				var max8 = values16[0];
				var _g36 = 0;
				var _g37 = values16.length;
				while(_g36 < _g37) {
					var i16 = _g36++;
					if(values16[i16] > max8) {
						max8 = values16[i16];
					}
				}
				var this26 = [max8,0];
				var values17 = this26;
				var min8 = values17[0];
				var _g38 = 0;
				var _g39 = values17.length;
				while(_g38 < _g39) {
					var i17 = _g38++;
					if(values17[i17] < min8) {
						min8 = values17[i17];
					}
				}
				var x8 = min8;
				var this27 = [y,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values18 = this27;
				var max9 = values18[0];
				var _g40 = 0;
				var _g41 = values18.length;
				while(_g40 < _g41) {
					var i18 = _g40++;
					if(values18[i18] > max9) {
						max9 = values18[i18];
					}
				}
				var this28 = [max9,0];
				var values19 = this28;
				var min9 = values19[0];
				var _g42 = 0;
				var _g43 = values19.length;
				while(_g42 < _g43) {
					var i19 = _g42++;
					if(values19[i19] < min9) {
						min9 = values19[i19];
					}
				}
				var y8 = min9;
				if(!(x8 >= 0 && y8 >= 0 && x8 < blackAndWhite.getUInt16(0) && y8 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x8 = x8;
					var this_y8 = y8;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x8,this_y8)));
				}
				var position8 = (y8 * blackAndWhite.getUInt16(0) + x8) * 4;
				position8 += vision_ds_Image.OFFSET;
				var value8 = blackAndWhite.b[position8] << 24 | blackAndWhite.b[position8 + 1] << 16 | blackAndWhite.b[position8 + 2] << 8 | blackAndWhite.b[position8 + 3];
				if(value8 == null) {
					value8 = 0;
				}
				var this29 = value8;
				neighbors_4 = this29;
			} else {
				if(!(x >= 0 && y >= 0 && x < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x9 = x;
					var this_y9 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x9,this_y9)));
				}
				var position9 = (y * blackAndWhite.getUInt16(0) + x) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value9 = blackAndWhite.b[position9] << 24 | blackAndWhite.b[position9 + 1] << 16 | blackAndWhite.b[position9 + 2] << 8 | blackAndWhite.b[position9 + 3];
				if(value9 == null) {
					value9 = 0;
				}
				var this30 = value9;
				neighbors_4 = this30;
			}
			var x9 = x + 1;
			if(!(x9 >= 0 && y >= 0 && x9 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this31 = [x9,blackAndWhite.getUInt16(0) - 1];
				var values20 = this31;
				var max10 = values20[0];
				var _g44 = 0;
				var _g45 = values20.length;
				while(_g44 < _g45) {
					var i20 = _g44++;
					if(values20[i20] > max10) {
						max10 = values20[i20];
					}
				}
				var this32 = [max10,0];
				var values21 = this32;
				var min10 = values21[0];
				var _g46 = 0;
				var _g47 = values21.length;
				while(_g46 < _g47) {
					var i21 = _g46++;
					if(values21[i21] < min10) {
						min10 = values21[i21];
					}
				}
				var x10 = min10;
				var this33 = [y,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values22 = this33;
				var max11 = values22[0];
				var _g48 = 0;
				var _g49 = values22.length;
				while(_g48 < _g49) {
					var i22 = _g48++;
					if(values22[i22] > max11) {
						max11 = values22[i22];
					}
				}
				var this34 = [max11,0];
				var values23 = this34;
				var min11 = values23[0];
				var _g50 = 0;
				var _g51 = values23.length;
				while(_g50 < _g51) {
					var i23 = _g50++;
					if(values23[i23] < min11) {
						min11 = values23[i23];
					}
				}
				var y9 = min11;
				if(!(x10 >= 0 && y9 >= 0 && x10 < blackAndWhite.getUInt16(0) && y9 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x10 = x10;
					var this_y10 = y9;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x10,this_y10)));
				}
				var position10 = (y9 * blackAndWhite.getUInt16(0) + x10) * 4;
				position10 += vision_ds_Image.OFFSET;
				var value10 = blackAndWhite.b[position10] << 24 | blackAndWhite.b[position10 + 1] << 16 | blackAndWhite.b[position10 + 2] << 8 | blackAndWhite.b[position10 + 3];
				if(value10 == null) {
					value10 = 0;
				}
				var this35 = value10;
				neighbors_5 = this35;
			} else {
				if(!(x9 >= 0 && y >= 0 && x9 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x11 = x9;
					var this_y11 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x11,this_y11)));
				}
				var position11 = (y * blackAndWhite.getUInt16(0) + x9) * 4;
				position11 += vision_ds_Image.OFFSET;
				var value11 = blackAndWhite.b[position11] << 24 | blackAndWhite.b[position11 + 1] << 16 | blackAndWhite.b[position11 + 2] << 8 | blackAndWhite.b[position11 + 3];
				if(value11 == null) {
					value11 = 0;
				}
				var this36 = value11;
				neighbors_5 = this36;
			}
			var x11 = x - 1;
			var y10 = y + 1;
			if(!(x11 >= 0 && y10 >= 0 && x11 < blackAndWhite.getUInt16(0) && y10 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this37 = [x11,blackAndWhite.getUInt16(0) - 1];
				var values24 = this37;
				var max12 = values24[0];
				var _g52 = 0;
				var _g53 = values24.length;
				while(_g52 < _g53) {
					var i24 = _g52++;
					if(values24[i24] > max12) {
						max12 = values24[i24];
					}
				}
				var this38 = [max12,0];
				var values25 = this38;
				var min12 = values25[0];
				var _g54 = 0;
				var _g55 = values25.length;
				while(_g54 < _g55) {
					var i25 = _g54++;
					if(values25[i25] < min12) {
						min12 = values25[i25];
					}
				}
				var x12 = min12;
				var this39 = [y10,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values26 = this39;
				var max13 = values26[0];
				var _g56 = 0;
				var _g57 = values26.length;
				while(_g56 < _g57) {
					var i26 = _g56++;
					if(values26[i26] > max13) {
						max13 = values26[i26];
					}
				}
				var this40 = [max13,0];
				var values27 = this40;
				var min13 = values27[0];
				var _g58 = 0;
				var _g59 = values27.length;
				while(_g58 < _g59) {
					var i27 = _g58++;
					if(values27[i27] < min13) {
						min13 = values27[i27];
					}
				}
				var y11 = min13;
				if(!(x12 >= 0 && y11 >= 0 && x12 < blackAndWhite.getUInt16(0) && y11 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x12 = x12;
					var this_y12 = y11;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x12,this_y12)));
				}
				var position12 = (y11 * blackAndWhite.getUInt16(0) + x12) * 4;
				position12 += vision_ds_Image.OFFSET;
				var value12 = blackAndWhite.b[position12] << 24 | blackAndWhite.b[position12 + 1] << 16 | blackAndWhite.b[position12 + 2] << 8 | blackAndWhite.b[position12 + 3];
				if(value12 == null) {
					value12 = 0;
				}
				var this41 = value12;
				neighbors_6 = this41;
			} else {
				if(!(x11 >= 0 && y10 >= 0 && x11 < blackAndWhite.getUInt16(0) && y10 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x13 = x11;
					var this_y13 = y10;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x13,this_y13)));
				}
				var position13 = (y10 * blackAndWhite.getUInt16(0) + x11) * 4;
				position13 += vision_ds_Image.OFFSET;
				var value13 = blackAndWhite.b[position13] << 24 | blackAndWhite.b[position13 + 1] << 16 | blackAndWhite.b[position13 + 2] << 8 | blackAndWhite.b[position13 + 3];
				if(value13 == null) {
					value13 = 0;
				}
				var this42 = value13;
				neighbors_6 = this42;
			}
			var y12 = y + 1;
			if(!(x >= 0 && y12 >= 0 && x < blackAndWhite.getUInt16(0) && y12 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this43 = [x,blackAndWhite.getUInt16(0) - 1];
				var values28 = this43;
				var max14 = values28[0];
				var _g60 = 0;
				var _g61 = values28.length;
				while(_g60 < _g61) {
					var i28 = _g60++;
					if(values28[i28] > max14) {
						max14 = values28[i28];
					}
				}
				var this44 = [max14,0];
				var values29 = this44;
				var min14 = values29[0];
				var _g62 = 0;
				var _g63 = values29.length;
				while(_g62 < _g63) {
					var i29 = _g62++;
					if(values29[i29] < min14) {
						min14 = values29[i29];
					}
				}
				var x13 = min14;
				var this45 = [y12,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values30 = this45;
				var max15 = values30[0];
				var _g64 = 0;
				var _g65 = values30.length;
				while(_g64 < _g65) {
					var i30 = _g64++;
					if(values30[i30] > max15) {
						max15 = values30[i30];
					}
				}
				var this46 = [max15,0];
				var values31 = this46;
				var min15 = values31[0];
				var _g66 = 0;
				var _g67 = values31.length;
				while(_g66 < _g67) {
					var i31 = _g66++;
					if(values31[i31] < min15) {
						min15 = values31[i31];
					}
				}
				var y13 = min15;
				if(!(x13 >= 0 && y13 >= 0 && x13 < blackAndWhite.getUInt16(0) && y13 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x14 = x13;
					var this_y14 = y13;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x14,this_y14)));
				}
				var position14 = (y13 * blackAndWhite.getUInt16(0) + x13) * 4;
				position14 += vision_ds_Image.OFFSET;
				var value14 = blackAndWhite.b[position14] << 24 | blackAndWhite.b[position14 + 1] << 16 | blackAndWhite.b[position14 + 2] << 8 | blackAndWhite.b[position14 + 3];
				if(value14 == null) {
					value14 = 0;
				}
				var this47 = value14;
				neighbors_7 = this47;
			} else {
				if(!(x >= 0 && y12 >= 0 && x < blackAndWhite.getUInt16(0) && y12 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x15 = x;
					var this_y15 = y12;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x15,this_y15)));
				}
				var position15 = (y12 * blackAndWhite.getUInt16(0) + x) * 4;
				position15 += vision_ds_Image.OFFSET;
				var value15 = blackAndWhite.b[position15] << 24 | blackAndWhite.b[position15 + 1] << 16 | blackAndWhite.b[position15 + 2] << 8 | blackAndWhite.b[position15 + 3];
				if(value15 == null) {
					value15 = 0;
				}
				var this48 = value15;
				neighbors_7 = this48;
			}
			var x14 = x + 1;
			var y14 = y + 1;
			if(!(x14 >= 0 && y14 >= 0 && x14 < blackAndWhite.getUInt16(0) && y14 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this49 = [x14,blackAndWhite.getUInt16(0) - 1];
				var values32 = this49;
				var max16 = values32[0];
				var _g68 = 0;
				var _g69 = values32.length;
				while(_g68 < _g69) {
					var i32 = _g68++;
					if(values32[i32] > max16) {
						max16 = values32[i32];
					}
				}
				var this50 = [max16,0];
				var values33 = this50;
				var min16 = values33[0];
				var _g70 = 0;
				var _g71 = values33.length;
				while(_g70 < _g71) {
					var i33 = _g70++;
					if(values33[i33] < min16) {
						min16 = values33[i33];
					}
				}
				var x15 = min16;
				var this51 = [y14,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values34 = this51;
				var max17 = values34[0];
				var _g72 = 0;
				var _g73 = values34.length;
				while(_g72 < _g73) {
					var i34 = _g72++;
					if(values34[i34] > max17) {
						max17 = values34[i34];
					}
				}
				var this52 = [max17,0];
				var values35 = this52;
				var min17 = values35[0];
				var _g74 = 0;
				var _g75 = values35.length;
				while(_g74 < _g75) {
					var i35 = _g74++;
					if(values35[i35] < min17) {
						min17 = values35[i35];
					}
				}
				var y15 = min17;
				if(!(x15 >= 0 && y15 >= 0 && x15 < blackAndWhite.getUInt16(0) && y15 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x16 = x15;
					var this_y16 = y15;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x16,this_y16)));
				}
				var position16 = (y15 * blackAndWhite.getUInt16(0) + x15) * 4;
				position16 += vision_ds_Image.OFFSET;
				var value16 = blackAndWhite.b[position16] << 24 | blackAndWhite.b[position16 + 1] << 16 | blackAndWhite.b[position16 + 2] << 8 | blackAndWhite.b[position16 + 3];
				if(value16 == null) {
					value16 = 0;
				}
				var this53 = value16;
				neighbors_8 = this53;
			} else {
				if(!(x14 >= 0 && y14 >= 0 && x14 < blackAndWhite.getUInt16(0) && y14 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x17 = x14;
					var this_y17 = y14;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x17,this_y17)));
				}
				var position17 = (y14 * blackAndWhite.getUInt16(0) + x14) * 4;
				position17 += vision_ds_Image.OFFSET;
				var value17 = blackAndWhite.b[position17] << 24 | blackAndWhite.b[position17 + 1] << 16 | blackAndWhite.b[position17 + 2] << 8 | blackAndWhite.b[position17 + 3];
				if(value17 == null) {
					value17 = 0;
				}
				var this54 = value17;
				neighbors_8 = this54;
			}
			var perwittCalculationIterationLTR = (neighbors_0 >> 16 & 255) * -1 + (neighbors_3 >> 16 & 255) * -1 + (neighbors_6 >> 16 & 255) * -1 + (neighbors_2 >> 16 & 255) + (neighbors_5 >> 16 & 255) + (neighbors_8 >> 16 & 255);
			if(Math.abs(perwittCalculationIterationLTR) > threshold) {
				var this55 = 0;
				var color = this55;
				var Alpha = 255;
				if(Alpha == null) {
					Alpha = 255;
				}
				color &= -16711681;
				color |= 16711680;
				color &= -65281;
				color |= 65280;
				color &= -256;
				color |= 255;
				color &= 16777215;
				color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
				var color1 = color;
				if(!(x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)))) {
					var this_x18 = x;
					var this_y18 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edges,new vision_ds_Point2D(this_x18,this_y18)));
				} else if(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g76 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g77 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g78 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var edges1 = edges.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g76,_g77,_g78,edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edges1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x16 = view.x + view.width / 2 - c;
								var y16 = view.y + view.height / 2;
								if(y16 == null) {
									y16 = 0;
								}
								if(x16 == null) {
									x16 = 0;
								}
								var f1_x = x16;
								var f1_y = y16;
								var x17 = view.x + view.width / 2 + c;
								var y17 = view.y + view.height / 2;
								if(y17 == null) {
									y17 = 0;
								}
								if(x17 == null) {
									x17 = 0;
								}
								var f2_x = x17;
								var f2_y = y17;
								var x18 = x;
								var y18 = y;
								if(y18 == null) {
									y18 = 0;
								}
								if(x18 == null) {
									x18 = 0;
								}
								var p_x = x18;
								var p_y = y18;
								var x19 = p_x - f1_x;
								var y19 = p_y - f1_y;
								var x20 = p_x - f2_x;
								var y20 = p_y - f2_y;
								has = Math.sqrt(x19 * x19 + y19 * y19) + Math.sqrt(x20 * x20 + y20 * y20) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x21 = view.x + view.width / 2;
								var y21 = view.y + view.height / 2 - c1;
								if(y21 == null) {
									y21 = 0;
								}
								if(x21 == null) {
									x21 = 0;
								}
								var f1_x1 = x21;
								var f1_y1 = y21;
								var x22 = view.x + view.width / 2;
								var y22 = view.y + view.height / 2 + c1;
								if(y22 == null) {
									y22 = 0;
								}
								if(x22 == null) {
									x22 = 0;
								}
								var f2_x1 = x22;
								var f2_y1 = y22;
								var x23 = x;
								var y23 = y;
								if(y23 == null) {
									y23 = 0;
								}
								if(x23 == null) {
									x23 = 0;
								}
								var p_x1 = x23;
								var p_y1 = y23;
								var x24 = p_x1 - f1_x1;
								var y24 = p_y1 - f1_y1;
								var x25 = p_x1 - f2_x1;
								var y25 = p_y1 - f2_y1;
								has = Math.sqrt(x24 * x24 + y24 * y24) + Math.sqrt(x25 * x25 + y25 * y25) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x26 = x;
								var y26 = y;
								if(y26 == null) {
									y26 = 0;
								}
								if(x26 == null) {
									x26 = 0;
								}
								var point1_x = x26;
								var point1_y = y26;
								var x27 = view.x + view.width / 2;
								var y27 = view.y + view.height / 2;
								if(y27 == null) {
									y27 = 0;
								}
								if(x27 == null) {
									x27 = 0;
								}
								var point2_x = x27;
								var point2_y = y27;
								var x28 = point2_x - point1_x;
								var y28 = point2_y - point1_y;
								has = Math.sqrt(x28 * x28 + y28 * y28) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position18 = (y * edges.getUInt16(0) + x) * 4;
						position18 += vision_ds_Image.OFFSET;
						edges.b[position18] = color1 >> 24 & 255;
						edges.b[position18 + 1] = color1 >> 16 & 255;
						edges.b[position18 + 2] = color1 >> 8 & 255;
						edges.b[position18 + 3] = color1 & 255;
					}
				} else {
					var position19 = (y * edges.getUInt16(0) + x) * 4;
					position19 += vision_ds_Image.OFFSET;
					edges.b[position19] = color1 >> 24 & 255;
					edges.b[position19 + 1] = color1 >> 16 & 255;
					edges.b[position19 + 2] = color1 >> 8 & 255;
					edges.b[position19 + 3] = color1 & 255;
				}
				continue;
			}
			var perwittCalculationIterationTTB = (neighbors_0 >> 16 & 255) * -1 + (neighbors_1 >> 16 & 255) * -1 + (neighbors_2 >> 16 & 255) * -1 + (neighbors_6 >> 16 & 255) + (neighbors_7 >> 16 & 255) + (neighbors_8 >> 16 & 255);
			if(Math.abs(perwittCalculationIterationTTB) > threshold) {
				var this56 = 0;
				var color2 = this56;
				var Alpha1 = 255;
				if(Alpha1 == null) {
					Alpha1 = 255;
				}
				color2 &= -16711681;
				color2 |= 16711680;
				color2 &= -65281;
				color2 |= 65280;
				color2 &= -256;
				color2 |= 255;
				color2 &= 16777215;
				color2 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
				var color3 = color2;
				if(!(x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)))) {
					var this_x19 = x;
					var this_y19 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edges,new vision_ds_Point2D(this_x19,this_y19)));
				} else if(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v1 = null;
					var tmp1;
					if(!(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
						tmp1 = x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4));
					} else {
						var has1 = false;
						var view2;
						if(v1 != null) {
							view2 = v1;
						} else {
							var _g79 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g80 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g81 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var edges2 = edges.b;
							var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view2 = new vision_ds_ImageView(_g79,_g80,_g81,edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edges2[view3]);
						}
						switch(view2.shape) {
						case 0:
							has1 = x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y;
							break;
						case 1:
							has1 = !(x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y);
							break;
						case 2:case 3:
							if(view2.width > view2.height) {
								var a2 = view2.width / 2;
								var b2 = view2.height / 2;
								var c2 = Math.sqrt(a2 * a2 - b2 * b2);
								var x29 = view2.x + view2.width / 2 - c2;
								var y29 = view2.y + view2.height / 2;
								if(y29 == null) {
									y29 = 0;
								}
								if(x29 == null) {
									x29 = 0;
								}
								var f1_x2 = x29;
								var f1_y2 = y29;
								var x30 = view2.x + view2.width / 2 + c2;
								var y30 = view2.y + view2.height / 2;
								if(y30 == null) {
									y30 = 0;
								}
								if(x30 == null) {
									x30 = 0;
								}
								var f2_x2 = x30;
								var f2_y2 = y30;
								var x31 = x;
								var y31 = y;
								if(y31 == null) {
									y31 = 0;
								}
								if(x31 == null) {
									x31 = 0;
								}
								var p_x2 = x31;
								var p_y2 = y31;
								var x32 = p_x2 - f1_x2;
								var y32 = p_y2 - f1_y2;
								var x33 = p_x2 - f2_x2;
								var y33 = p_y2 - f2_y2;
								has1 = Math.sqrt(x32 * x32 + y32 * y32) + Math.sqrt(x33 * x33 + y33 * y33) <= view2.width;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else if(view2.height > view2.width) {
								var a3 = view2.height / 2;
								var b3 = view2.width / 2;
								var c3 = Math.sqrt(a3 * a3 - b3 * b3);
								var x34 = view2.x + view2.width / 2;
								var y34 = view2.y + view2.height / 2 - c3;
								if(y34 == null) {
									y34 = 0;
								}
								if(x34 == null) {
									x34 = 0;
								}
								var f1_x3 = x34;
								var f1_y3 = y34;
								var x35 = view2.x + view2.width / 2;
								var y35 = view2.y + view2.height / 2 + c3;
								if(y35 == null) {
									y35 = 0;
								}
								if(x35 == null) {
									x35 = 0;
								}
								var f2_x3 = x35;
								var f2_y3 = y35;
								var x36 = x;
								var y36 = y;
								if(y36 == null) {
									y36 = 0;
								}
								if(x36 == null) {
									x36 = 0;
								}
								var p_x3 = x36;
								var p_y3 = y36;
								var x37 = p_x3 - f1_x3;
								var y37 = p_y3 - f1_y3;
								var x38 = p_x3 - f2_x3;
								var y38 = p_y3 - f2_y3;
								has1 = Math.sqrt(x37 * x37 + y37 * y37) + Math.sqrt(x38 * x38 + y38 * y38) <= view2.height;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else {
								var x39 = x;
								var y39 = y;
								if(y39 == null) {
									y39 = 0;
								}
								if(x39 == null) {
									x39 = 0;
								}
								var point1_x1 = x39;
								var point1_y1 = y39;
								var x40 = view2.x + view2.width / 2;
								var y40 = view2.y + view2.height / 2;
								if(y40 == null) {
									y40 = 0;
								}
								if(x40 == null) {
									x40 = 0;
								}
								var point2_x1 = x40;
								var point2_y1 = y40;
								var x41 = point2_x1 - point1_x1;
								var y41 = point2_y1 - point1_y1;
								has1 = Math.sqrt(x41 * x41 + y41 * y41) <= view2.width / 2;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							}
							break;
						case 4:
							has1 = Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
							break;
						case 5:
							has1 = !(Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
							break;
						}
						tmp1 = has1;
					}
					if(tmp1) {
						var position20 = (y * edges.getUInt16(0) + x) * 4;
						position20 += vision_ds_Image.OFFSET;
						edges.b[position20] = color3 >> 24 & 255;
						edges.b[position20 + 1] = color3 >> 16 & 255;
						edges.b[position20 + 2] = color3 >> 8 & 255;
						edges.b[position20 + 3] = color3 & 255;
					}
				} else {
					var position21 = (y * edges.getUInt16(0) + x) * 4;
					position21 += vision_ds_Image.OFFSET;
					edges.b[position21] = color3 >> 24 & 255;
					edges.b[position21 + 1] = color3 >> 16 & 255;
					edges.b[position21 + 2] = color3 >> 8 & 255;
					edges.b[position21 + 3] = color3 & 255;
				}
				continue;
			}
		}
	}
	return edges;
};
var vision_algorithms_Radix = function() { };
$hxClasses["vision.algorithms.Radix"] = vision_algorithms_Radix;
vision_algorithms_Radix.__name__ = "vision.algorithms.Radix";
vision_algorithms_Radix.getMax = function(array,endIndex) {
	if(endIndex == null) {
		endIndex = array.length;
	}
	var potential = array[0];
	var _g = 1;
	var _g1 = endIndex;
	while(_g < _g1) {
		var i = _g++;
		if(array[i] > potential) {
			potential = array[i];
		}
	}
	return potential;
};
vision_algorithms_Radix.countingSort = function(array,exp,endIndex) {
	if(endIndex == null) {
		endIndex = array.length;
	}
	var output = [];
	var i = -1;
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	var count = _g;
	while(++i < endIndex) {
		var tmp = (array[i] / exp | 0) % 10;
		count[tmp]++;
	}
	i = 0;
	while(++i < 10) count[i] += count[i - 1];
	i = endIndex;
	while(--i >= 0) {
		output[count[(array[i] / exp | 0) % 10] - 1] = array[i];
		var tmp = (array[i] / exp | 0) % 10;
		count[tmp]--;
	}
	i = -1;
	while(++i < endIndex) array[i] = output[i];
	return output;
};
vision_algorithms_Radix.sort = function(array) {
	var max = vision_algorithms_Radix.getMax(array,array.length);
	var exp = 1;
	while(max / exp > 0) {
		array = vision_algorithms_Radix.countingSort(array,exp,array.length);
		exp *= 10;
	}
	return array;
};
var vision_algorithms_RobertsCross = function() { };
$hxClasses["vision.algorithms.RobertsCross"] = vision_algorithms_RobertsCross;
vision_algorithms_RobertsCross.__name__ = "vision.algorithms.RobertsCross";
vision_algorithms_RobertsCross.convolveWithRobertsCross = function(image) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var edgeColors = this2;
	var maxGradient = -1;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var j = _g2++;
			var x = i - 1;
			var y = j - 1;
			var pixel;
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this1 = [x,image.getUInt16(0) - 1];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i1 = _g4++;
					if(values[i1] > max) {
						max = values[i1];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i2 = _g6++;
					if(values1[i2] < min) {
						min = values1[i2];
					}
				}
				var x1 = min;
				var this3 = [y,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i3 = _g8++;
					if(values2[i3] > max1) {
						max1 = values2[i3];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i4 = _g10++;
					if(values3[i4] < min1) {
						min1 = values3[i4];
					}
				}
				var y1 = min1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y1 * image.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				pixel = this5;
			} else {
				if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				pixel = this6;
			}
			var gray = ((pixel >> 16 & 255) + (pixel >> 8 & 255) + (pixel & 255)) / 3 | 0;
			var Alpha = pixel >> 24 & 255;
			if(Alpha == null) {
				Alpha = 255;
			}
			var this7 = 0;
			var color = this7;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 255;
			}
			color &= -16711681;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
			color &= -65281;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
			color &= -256;
			color |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
			color &= 16777215;
			color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
			var pos00 = color >> 16 & 255;
			var x2 = i - 1;
			var y2 = j + 1;
			var pixel1;
			if(!(x2 >= 0 && y2 >= 0 && x2 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this8 = [x2,image.getUInt16(0) - 1];
				var values4 = this8;
				var max2 = values4[0];
				var _g12 = 0;
				var _g13 = values4.length;
				while(_g12 < _g13) {
					var i5 = _g12++;
					if(values4[i5] > max2) {
						max2 = values4[i5];
					}
				}
				var this9 = [max2,0];
				var values5 = this9;
				var min2 = values5[0];
				var _g14 = 0;
				var _g15 = values5.length;
				while(_g14 < _g15) {
					var i6 = _g14++;
					if(values5[i6] < min2) {
						min2 = values5[i6];
					}
				}
				var x3 = min2;
				var this10 = [y2,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values6 = this10;
				var max3 = values6[0];
				var _g16 = 0;
				var _g17 = values6.length;
				while(_g16 < _g17) {
					var i7 = _g16++;
					if(values6[i7] > max3) {
						max3 = values6[i7];
					}
				}
				var this11 = [max3,0];
				var values7 = this11;
				var min3 = values7[0];
				var _g18 = 0;
				var _g19 = values7.length;
				while(_g18 < _g19) {
					var i8 = _g18++;
					if(values7[i8] < min3) {
						min3 = values7[i8];
					}
				}
				var y3 = min3;
				if(!(x3 >= 0 && y3 >= 0 && x3 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x2 = x3;
					var this_y2 = y3;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position2 = (y3 * image.getUInt16(0) + x3) * 4;
				position2 += vision_ds_Image.OFFSET;
				var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var this12 = value2;
				pixel1 = this12;
			} else {
				if(!(x2 >= 0 && y2 >= 0 && x2 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x3 = x2;
					var this_y3 = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x3,this_y3)));
				}
				var position3 = (y2 * image.getUInt16(0) + x2) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value3 = image.b[position3] << 24 | image.b[position3 + 1] << 16 | image.b[position3 + 2] << 8 | image.b[position3 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var this13 = value3;
				pixel1 = this13;
			}
			var gray1 = ((pixel1 >> 16 & 255) + (pixel1 >> 8 & 255) + (pixel1 & 255)) / 3 | 0;
			var Alpha2 = pixel1 >> 24 & 255;
			if(Alpha2 == null) {
				Alpha2 = 255;
			}
			var this14 = 0;
			var color1 = this14;
			var Alpha3 = Alpha2;
			if(Alpha3 == null) {
				Alpha3 = 255;
			}
			color1 &= -16711681;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 16;
			color1 &= -65281;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 8;
			color1 &= -256;
			color1 |= gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1;
			color1 &= 16777215;
			color1 |= (Alpha3 > 255 ? 255 : Alpha3 < 0 ? 0 : Alpha3) << 24;
			var pos02 = color1 >> 16 & 255;
			var x4 = i + 1;
			var y4 = j - 1;
			var pixel2;
			if(!(x4 >= 0 && y4 >= 0 && x4 < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this15 = [x4,image.getUInt16(0) - 1];
				var values8 = this15;
				var max4 = values8[0];
				var _g20 = 0;
				var _g21 = values8.length;
				while(_g20 < _g21) {
					var i9 = _g20++;
					if(values8[i9] > max4) {
						max4 = values8[i9];
					}
				}
				var this16 = [max4,0];
				var values9 = this16;
				var min4 = values9[0];
				var _g22 = 0;
				var _g23 = values9.length;
				while(_g22 < _g23) {
					var i10 = _g22++;
					if(values9[i10] < min4) {
						min4 = values9[i10];
					}
				}
				var x5 = min4;
				var this17 = [y4,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values10 = this17;
				var max5 = values10[0];
				var _g24 = 0;
				var _g25 = values10.length;
				while(_g24 < _g25) {
					var i11 = _g24++;
					if(values10[i11] > max5) {
						max5 = values10[i11];
					}
				}
				var this18 = [max5,0];
				var values11 = this18;
				var min5 = values11[0];
				var _g26 = 0;
				var _g27 = values11.length;
				while(_g26 < _g27) {
					var i12 = _g26++;
					if(values11[i12] < min5) {
						min5 = values11[i12];
					}
				}
				var y5 = min5;
				if(!(x5 >= 0 && y5 >= 0 && x5 < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x4 = x5;
					var this_y4 = y5;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position4 = (y5 * image.getUInt16(0) + x5) * 4;
				position4 += vision_ds_Image.OFFSET;
				var value4 = image.b[position4] << 24 | image.b[position4 + 1] << 16 | image.b[position4 + 2] << 8 | image.b[position4 + 3];
				if(value4 == null) {
					value4 = 0;
				}
				var this19 = value4;
				pixel2 = this19;
			} else {
				if(!(x4 >= 0 && y4 >= 0 && x4 < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x5 = x4;
					var this_y5 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x5,this_y5)));
				}
				var position5 = (y4 * image.getUInt16(0) + x4) * 4;
				position5 += vision_ds_Image.OFFSET;
				var value5 = image.b[position5] << 24 | image.b[position5 + 1] << 16 | image.b[position5 + 2] << 8 | image.b[position5 + 3];
				if(value5 == null) {
					value5 = 0;
				}
				var this20 = value5;
				pixel2 = this20;
			}
			var gray2 = ((pixel2 >> 16 & 255) + (pixel2 >> 8 & 255) + (pixel2 & 255)) / 3 | 0;
			var Alpha4 = pixel2 >> 24 & 255;
			if(Alpha4 == null) {
				Alpha4 = 255;
			}
			var this21 = 0;
			var color2 = this21;
			var Alpha5 = Alpha4;
			if(Alpha5 == null) {
				Alpha5 = 255;
			}
			color2 &= -16711681;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 16;
			color2 &= -65281;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 8;
			color2 &= -256;
			color2 |= gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2;
			color2 &= 16777215;
			color2 |= (Alpha5 > 255 ? 255 : Alpha5 < 0 ? 0 : Alpha5) << 24;
			var pos20 = color2 >> 16 & 255;
			var x6 = i + 1;
			var y6 = j + 1;
			var pixel3;
			if(!(x6 >= 0 && y6 >= 0 && x6 < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this22 = [x6,image.getUInt16(0) - 1];
				var values12 = this22;
				var max6 = values12[0];
				var _g28 = 0;
				var _g29 = values12.length;
				while(_g28 < _g29) {
					var i13 = _g28++;
					if(values12[i13] > max6) {
						max6 = values12[i13];
					}
				}
				var this23 = [max6,0];
				var values13 = this23;
				var min6 = values13[0];
				var _g30 = 0;
				var _g31 = values13.length;
				while(_g30 < _g31) {
					var i14 = _g30++;
					if(values13[i14] < min6) {
						min6 = values13[i14];
					}
				}
				var x7 = min6;
				var this24 = [y6,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values14 = this24;
				var max7 = values14[0];
				var _g32 = 0;
				var _g33 = values14.length;
				while(_g32 < _g33) {
					var i15 = _g32++;
					if(values14[i15] > max7) {
						max7 = values14[i15];
					}
				}
				var this25 = [max7,0];
				var values15 = this25;
				var min7 = values15[0];
				var _g34 = 0;
				var _g35 = values15.length;
				while(_g34 < _g35) {
					var i16 = _g34++;
					if(values15[i16] < min7) {
						min7 = values15[i16];
					}
				}
				var y7 = min7;
				if(!(x7 >= 0 && y7 >= 0 && x7 < image.getUInt16(0) && y7 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x6 = x7;
					var this_y6 = y7;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position6 = (y7 * image.getUInt16(0) + x7) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value6 = image.b[position6] << 24 | image.b[position6 + 1] << 16 | image.b[position6 + 2] << 8 | image.b[position6 + 3];
				if(value6 == null) {
					value6 = 0;
				}
				var this26 = value6;
				pixel3 = this26;
			} else {
				if(!(x6 >= 0 && y6 >= 0 && x6 < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x7 = x6;
					var this_y7 = y6;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x7,this_y7)));
				}
				var position7 = (y6 * image.getUInt16(0) + x6) * 4;
				position7 += vision_ds_Image.OFFSET;
				var value7 = image.b[position7] << 24 | image.b[position7 + 1] << 16 | image.b[position7 + 2] << 8 | image.b[position7 + 3];
				if(value7 == null) {
					value7 = 0;
				}
				var this27 = value7;
				pixel3 = this27;
			}
			var gray3 = ((pixel3 >> 16 & 255) + (pixel3 >> 8 & 255) + (pixel3 & 255)) / 3 | 0;
			var Alpha6 = pixel3 >> 24 & 255;
			if(Alpha6 == null) {
				Alpha6 = 255;
			}
			var this28 = 0;
			var color3 = this28;
			var Alpha7 = Alpha6;
			if(Alpha7 == null) {
				Alpha7 = 255;
			}
			color3 &= -16711681;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 16;
			color3 &= -65281;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 8;
			color3 &= -256;
			color3 |= gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3;
			color3 &= 16777215;
			color3 |= (Alpha7 > 255 ? 255 : Alpha7 < 0 ? 0 : Alpha7) << 24;
			var pos22 = color3 >> 16 & 255;
			var gx = pos00 + 0 * pos02 + (0 * pos20 + -1 * pos22);
			var gy = 0 * pos00 + pos02 + (-1 * pos20 + 0 * pos22);
			var gradientFloatValue = Math.sqrt(gx * gx + gy * gy);
			var gradient = gradientFloatValue | 0;
			if(gradient > maxGradient) {
				maxGradient = gradient;
			}
			var rgb = gradient * (255 / maxGradient) | 0;
			var color4 = -16777216 | rgb << 16 | rgb << 8 | rgb;
			if(!(i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)))) {
				var this_x8 = i;
				var this_y8 = j;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edgeColors,new vision_ds_Point2D(this_x8,this_y8)));
			} else if(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g36 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g37 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g38 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var edgeColors1 = edgeColors.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g36,_g37,_g38,edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edgeColors1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y;
						break;
					case 1:
						has = !(i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x8 = view.x + view.width / 2 - c;
							var y8 = view.y + view.height / 2;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var f1_x = x8;
							var f1_y = y8;
							var x9 = view.x + view.width / 2 + c;
							var y9 = view.y + view.height / 2;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var f2_x = x9;
							var f2_y = y9;
							var x10 = i;
							var y10 = j;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var p_x = x10;
							var p_y = y10;
							var x11 = p_x - f1_x;
							var y11 = p_y - f1_y;
							var x12 = p_x - f2_x;
							var y12 = p_y - f2_y;
							has = Math.sqrt(x11 * x11 + y11 * y11) + Math.sqrt(x12 * x12 + y12 * y12) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x13 = view.x + view.width / 2;
							var y13 = view.y + view.height / 2 - c1;
							if(y13 == null) {
								y13 = 0;
							}
							if(x13 == null) {
								x13 = 0;
							}
							var f1_x1 = x13;
							var f1_y1 = y13;
							var x14 = view.x + view.width / 2;
							var y14 = view.y + view.height / 2 + c1;
							if(y14 == null) {
								y14 = 0;
							}
							if(x14 == null) {
								x14 = 0;
							}
							var f2_x1 = x14;
							var f2_y1 = y14;
							var x15 = i;
							var y15 = j;
							if(y15 == null) {
								y15 = 0;
							}
							if(x15 == null) {
								x15 = 0;
							}
							var p_x1 = x15;
							var p_y1 = y15;
							var x16 = p_x1 - f1_x1;
							var y16 = p_y1 - f1_y1;
							var x17 = p_x1 - f2_x1;
							var y17 = p_y1 - f2_y1;
							has = Math.sqrt(x16 * x16 + y16 * y16) + Math.sqrt(x17 * x17 + y17 * y17) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x18 = i;
							var y18 = j;
							if(y18 == null) {
								y18 = 0;
							}
							if(x18 == null) {
								x18 = 0;
							}
							var point1_x = x18;
							var point1_y = y18;
							var x19 = view.x + view.width / 2;
							var y19 = view.y + view.height / 2;
							if(y19 == null) {
								y19 = 0;
							}
							if(x19 == null) {
								x19 = 0;
							}
							var point2_x = x19;
							var point2_y = y19;
							var x20 = point2_x - point1_x;
							var y20 = point2_y - point1_y;
							has = Math.sqrt(x20 * x20 + y20 * y20) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position8 = (j * edgeColors.getUInt16(0) + i) * 4;
					position8 += vision_ds_Image.OFFSET;
					edgeColors.b[position8] = color4 >> 24 & 255;
					edgeColors.b[position8 + 1] = color4 >> 16 & 255;
					edgeColors.b[position8 + 2] = color4 >> 8 & 255;
					edgeColors.b[position8 + 3] = color4 & 255;
				}
			} else {
				var position9 = (j * edgeColors.getUInt16(0) + i) * 4;
				position9 += vision_ds_Image.OFFSET;
				edgeColors.b[position9] = color4 >> 24 & 255;
				edgeColors.b[position9 + 1] = color4 >> 16 & 255;
				edgeColors.b[position9 + 2] = color4 >> 8 & 255;
				edgeColors.b[position9 + 3] = color4 & 255;
			}
		}
	}
	return edgeColors;
};
var vision_algorithms_SimpleLineDetector = function(image) {
};
$hxClasses["vision.algorithms.SimpleLineDetector"] = vision_algorithms_SimpleLineDetector;
vision_algorithms_SimpleLineDetector.__name__ = "vision.algorithms.SimpleLineDetector";
vision_algorithms_SimpleLineDetector.image = null;
vision_algorithms_SimpleLineDetector.findLineFromPoint = function(point,minLineLength,filterMaximums) {
	if(filterMaximums == null) {
		filterMaximums = true;
	}
	var this1 = vision_algorithms_SimpleLineDetector.image;
	var position = (((point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535) * this1.getUInt16(0) + ((point & 65535) - ((point & 65535) >> 15) * 65535)) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	if(this1 == 0) {
		return null;
	}
	var startX = (point & 65535) - ((point & 65535) >> 15) * 65535;
	var startY = (point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535;
	var preferTTB = true;
	var candidates = [];
	var _g = 0;
	var _g1 = [[0,1,2],[0,-1,-2]];
	while(_g < _g1.length) {
		var xArr = [_g1[_g]];
		++_g;
		var _g2 = 0;
		var _g3 = [[0,1,2],[0,-1,-2]];
		while(_g2 < _g3.length) {
			var yArr = [_g3[_g2]];
			++_g2;
			var prev = [null];
			var prev2 = [null];
			var X = 0;
			var Y = 0;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var this1 = (X & 32767) - (X >> 31) * 32767 | (Y & 32767) - (Y >> 31) * 32767 << 16;
			var currentDirection = [this1];
			var expand = [null];
			expand[0] = (function(expand,currentDirection,prev2,prev,yArr,xArr) {
				return function() {
					var tmp;
					var tmp1;
					if(currentDirection[0] != null) {
						var this1 = vision_algorithms_SimpleLineDetector.image;
						var x = (point & 65535) - ((point & 65535) >> 15) * 65535 + ((currentDirection[0] & 65535) - ((currentDirection[0] & 65535) >> 15) * 65535);
						var y = (point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535 + ((currentDirection[0] >> 16 & 65535) - ((currentDirection[0] >> 16 & 65535) >> 15) * 65535);
						tmp1 = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						var this1 = vision_algorithms_SimpleLineDetector.image;
						var x = (point & 65535) - ((point & 65535) >> 15) * 65535 + ((currentDirection[0] & 65535) - ((currentDirection[0] & 65535) >> 15) * 65535);
						var y = (point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535 + ((currentDirection[0] >> 16 & 65535) - ((currentDirection[0] >> 16 & 65535) >> 15) * 65535);
						if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
							var this_x = x;
							var this_y = y;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
						}
						var position = (y * this1.getUInt16(0) + x) * 4;
						position += vision_ds_Image.OFFSET;
						var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
						if(value == null) {
							value = 0;
						}
						var this1 = value;
						tmp = (this1 >> 16 & 255) == 255;
					} else {
						tmp = false;
					}
					if(tmp) {
						var x = (point & 65535) - ((point & 65535) >> 15) * 65535 + ((currentDirection[0] & 65535) - ((currentDirection[0] & 65535) >> 15) * 65535);
						x &= 65535;
						point = point & -65536 | x;
						var y = (point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535 + ((currentDirection[0] >> 16 & 65535) - ((currentDirection[0] >> 16 & 65535) >> 15) * 65535);
						y &= 65535;
						point = point & 65535 | y << 16;
						if(prev[0] == null) {
							var x = (point & 65535) - ((point & 65535) >> 15) * 65535;
							var y = (point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535;
							if(y == null) {
								y = 0;
							}
							if(x == null) {
								x = 0;
							}
							var X = x;
							var Y = y;
							if(Y == null) {
								Y = 0;
							}
							if(X == null) {
								X = 0;
							}
							var this1 = (X & 32767) - (X >> 31) * 32767 | (Y & 32767) - (Y >> 31) * 32767 << 16;
							prev[0] = this1;
						} else {
							var x = (prev[0] & 65535) - ((prev[0] & 65535) >> 15) * 65535;
							var y = (prev[0] >> 16 & 65535) - ((prev[0] >> 16 & 65535) >> 15) * 65535;
							if(y == null) {
								y = 0;
							}
							if(x == null) {
								x = 0;
							}
							var X = x;
							var Y = y;
							if(Y == null) {
								Y = 0;
							}
							if(X == null) {
								X = 0;
							}
							var this1 = (X & 32767) - (X >> 31) * 32767 | (Y & 32767) - (Y >> 31) * 32767 << 16;
							prev2[0] = this1;
							var x = (point & 65535) - ((point & 65535) >> 15) * 65535;
							var y = (point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535;
							if(y == null) {
								y = 0;
							}
							if(x == null) {
								x = 0;
							}
							var X = x;
							var Y = y;
							if(Y == null) {
								Y = 0;
							}
							if(X == null) {
								X = 0;
							}
							var this1 = (X & 32767) - (X >> 31) * 32767 | (Y & 32767) - (Y >> 31) * 32767 << 16;
							prev[0] = this1;
						}
						if((preferTTB ? (currentDirection[0] >> 16 & 65535) - ((currentDirection[0] >> 16 & 65535) >> 15) * 65535 : (currentDirection[0] & 65535) - ((currentDirection[0] & 65535) >> 15) * 65535) == 0) {
							if((point & 65535) - ((point & 65535) >> 15) * 65535 == (prev[0] & 65535) - ((prev[0] & 65535) >> 15) * 65535 && (point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535 == (prev[0] >> 16 & 65535) - ((prev[0] >> 16 & 65535) >> 15) * 65535 || (point & 65535) - ((point & 65535) >> 15) * 65535 == (prev2[0] & 65535) - ((prev2[0] & 65535) >> 15) * 65535 && (point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535 == (prev2[0] >> 16 & 65535) - ((prev2[0] >> 16 & 65535) >> 15) * 65535) {
								return;
							}
						}
						expand[0]();
					} else {
						var _g = 0;
						while(_g < xArr[0].length) {
							var X = xArr[0][_g];
							++_g;
							var _g1 = 0;
							while(_g1 < yArr[0].length) {
								var Y = yArr[0][_g1];
								++_g1;
								var tmp;
								if(!(X == 0 && Y == 0)) {
									var this1 = vision_algorithms_SimpleLineDetector.image;
									var x = (point & 65535) - ((point & 65535) >> 15) * 65535 + X;
									var y = (point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535 + Y;
									tmp = !(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
								} else {
									tmp = true;
								}
								if(tmp) {
									continue;
								}
								var this2 = vision_algorithms_SimpleLineDetector.image;
								var x1 = (point & 65535) - ((point & 65535) >> 15) * 65535 + X;
								var y1 = (point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535 + Y;
								if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
									var this_x = x1;
									var this_y = y1;
									throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
								}
								var position = (y1 * this2.getUInt16(0) + x1) * 4;
								position += vision_ds_Image.OFFSET;
								var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
								if(value == null) {
									value = 0;
								}
								var this3 = value;
								if((this3 >> 16 & 255) == 255) {
									var x2 = X;
									var y2 = Y;
									if(y2 == null) {
										y2 = 0;
									}
									if(x2 == null) {
										x2 = 0;
									}
									var X1 = x2;
									var Y1 = y2;
									if(Y1 == null) {
										Y1 = 0;
									}
									if(X1 == null) {
										X1 = 0;
									}
									var this4 = (X1 & 32767) - (X1 >> 31) * 32767 | (Y1 & 32767) - (Y1 >> 31) * 32767 << 16;
									currentDirection[0] = this4;
									var x3 = (point & 65535) - ((point & 65535) >> 15) * 65535 + X;
									x3 &= 65535;
									point = point & -65536 | x3;
									var y3 = (point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535 + Y;
									y3 &= 65535;
									point = point & 65535 | y3 << 16;
									if(prev[0] == null) {
										var x4 = (point & 65535) - ((point & 65535) >> 15) * 65535;
										var y4 = (point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535;
										if(y4 == null) {
											y4 = 0;
										}
										if(x4 == null) {
											x4 = 0;
										}
										var X2 = x4;
										var Y2 = y4;
										if(Y2 == null) {
											Y2 = 0;
										}
										if(X2 == null) {
											X2 = 0;
										}
										var this5 = (X2 & 32767) - (X2 >> 31) * 32767 | (Y2 & 32767) - (Y2 >> 31) * 32767 << 16;
										prev[0] = this5;
									} else {
										var x5 = (prev[0] & 65535) - ((prev[0] & 65535) >> 15) * 65535;
										var y5 = (prev[0] >> 16 & 65535) - ((prev[0] >> 16 & 65535) >> 15) * 65535;
										if(y5 == null) {
											y5 = 0;
										}
										if(x5 == null) {
											x5 = 0;
										}
										var X3 = x5;
										var Y3 = y5;
										if(Y3 == null) {
											Y3 = 0;
										}
										if(X3 == null) {
											X3 = 0;
										}
										var this6 = (X3 & 32767) - (X3 >> 31) * 32767 | (Y3 & 32767) - (Y3 >> 31) * 32767 << 16;
										prev2[0] = this6;
										var x6 = (point & 65535) - ((point & 65535) >> 15) * 65535;
										var y6 = (point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535;
										if(y6 == null) {
											y6 = 0;
										}
										if(x6 == null) {
											x6 = 0;
										}
										var X4 = x6;
										var Y4 = y6;
										if(Y4 == null) {
											Y4 = 0;
										}
										if(X4 == null) {
											X4 = 0;
										}
										var this7 = (X4 & 32767) - (X4 >> 31) * 32767 | (Y4 & 32767) - (Y4 >> 31) * 32767 << 16;
										prev[0] = this7;
									}
									if((preferTTB ? Y : X) == 0) {
										if((point & 65535) - ((point & 65535) >> 15) * 65535 == (prev[0] & 65535) - ((prev[0] & 65535) >> 15) * 65535 && (point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535 == (prev[0] >> 16 & 65535) - ((prev[0] >> 16 & 65535) >> 15) * 65535 || (point & 65535) - ((point & 65535) >> 15) * 65535 == (prev2[0] & 65535) - ((prev2[0] & 65535) >> 15) * 65535 && (point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535 == (prev2[0] >> 16 & 65535) - ((prev2[0] >> 16 & 65535) >> 15) * 65535) {
											return;
										}
									}
									expand[0]();
								}
							}
						}
					}
				};
			})(expand,currentDirection,prev2,prev,yArr,xArr);
			expand[0]();
			var line = new vision_ds_Line2D(new vision_ds_Point2D(startX,startY),new vision_ds_Point2D((point & 65535) - ((point & 65535) >> 15) * 65535,(point >> 16 & 65535) - ((point >> 16 & 65535) >> 15) * 65535));
			if(Math.sqrt(Math.pow(line.end.x - line.start.x,2) + Math.pow(line.end.y - line.start.y,2)) > minLineLength) {
				if(filterMaximums) {
					candidates.push(line);
				} else {
					return line;
				}
			}
			preferTTB = false;
		}
	}
	if(filterMaximums) {
		candidates.sort(function(a,b) {
			return Math.sqrt(Math.pow(a.end.x - a.start.x,2) + Math.pow(a.end.y - a.start.y,2)) - Math.sqrt(Math.pow(b.end.x - b.start.x,2) + Math.pow(b.end.y - b.start.y,2)) | 0;
		});
		candidates.reverse();
		return candidates[0];
	}
	return null;
};
vision_algorithms_SimpleLineDetector.lineCoveragePercentage = function(image,line) {
	var coveredPixels = 0;
	var totalPixels = 0;
	if(line == null) {
		return 0;
	}
	var p = line.start;
	var p1_x = p.x | 0;
	var p1_y = p.y | 0;
	var p = line.end;
	var p2_x = p.x | 0;
	var p2_y = p.y | 0;
	var x1 = p1_x;
	var y1 = p1_y;
	var x2 = p2_x;
	var y2 = p2_y;
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	var gapChecker = [];
	var currentGap = 1;
	while(true) {
		if(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))) {
			var x = x1 | 0;
			var y = y1 | 0;
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y * image.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			if((this1 >> 16 & 255) == 255) {
				++coveredPixels;
				currentGap = 0;
			} else {
				gapChecker[currentGap] = 1;
				++currentGap;
			}
		}
		++totalPixels;
		if(x1 == x2 && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
	return (coveredPixels - gapChecker.length) / totalPixels * 100;
};
vision_algorithms_SimpleLineDetector.prototype = {
	__class__: vision_algorithms_SimpleLineDetector
};
var vision_algorithms_Sobel = function() { };
$hxClasses["vision.algorithms.Sobel"] = vision_algorithms_Sobel;
vision_algorithms_Sobel.__name__ = "vision.algorithms.Sobel";
vision_algorithms_Sobel.convolveWithSobelOperator = function(image) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var edgeColors = this2;
	var maxGradient = -1;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var j = _g2++;
			var x = i - 1;
			var y = j - 1;
			var pixel;
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this1 = [x,image.getUInt16(0) - 1];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i1 = _g4++;
					if(values[i1] > max) {
						max = values[i1];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i2 = _g6++;
					if(values1[i2] < min) {
						min = values1[i2];
					}
				}
				var x1 = min;
				var this3 = [y,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i3 = _g8++;
					if(values2[i3] > max1) {
						max1 = values2[i3];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i4 = _g10++;
					if(values3[i4] < min1) {
						min1 = values3[i4];
					}
				}
				var y1 = min1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y1 * image.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				pixel = this5;
			} else {
				if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				pixel = this6;
			}
			var gray = ((pixel >> 16 & 255) + (pixel >> 8 & 255) + (pixel & 255)) / 3 | 0;
			var Alpha = pixel >> 24 & 255;
			if(Alpha == null) {
				Alpha = 255;
			}
			var this7 = 0;
			var color = this7;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 255;
			}
			color &= -16711681;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
			color &= -65281;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
			color &= -256;
			color |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
			color &= 16777215;
			color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
			var pos00 = color >> 16 & 255;
			var x2 = i - 1;
			var pixel1;
			if(!(x2 >= 0 && j >= 0 && x2 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this8 = [x2,image.getUInt16(0) - 1];
				var values4 = this8;
				var max2 = values4[0];
				var _g12 = 0;
				var _g13 = values4.length;
				while(_g12 < _g13) {
					var i5 = _g12++;
					if(values4[i5] > max2) {
						max2 = values4[i5];
					}
				}
				var this9 = [max2,0];
				var values5 = this9;
				var min2 = values5[0];
				var _g14 = 0;
				var _g15 = values5.length;
				while(_g14 < _g15) {
					var i6 = _g14++;
					if(values5[i6] < min2) {
						min2 = values5[i6];
					}
				}
				var x3 = min2;
				var this10 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values6 = this10;
				var max3 = values6[0];
				var _g16 = 0;
				var _g17 = values6.length;
				while(_g16 < _g17) {
					var i7 = _g16++;
					if(values6[i7] > max3) {
						max3 = values6[i7];
					}
				}
				var this11 = [max3,0];
				var values7 = this11;
				var min3 = values7[0];
				var _g18 = 0;
				var _g19 = values7.length;
				while(_g18 < _g19) {
					var i8 = _g18++;
					if(values7[i8] < min3) {
						min3 = values7[i8];
					}
				}
				var y2 = min3;
				if(!(x3 >= 0 && y2 >= 0 && x3 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x2 = x3;
					var this_y2 = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position2 = (y2 * image.getUInt16(0) + x3) * 4;
				position2 += vision_ds_Image.OFFSET;
				var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var this12 = value2;
				pixel1 = this12;
			} else {
				if(!(x2 >= 0 && j >= 0 && x2 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x3 = x2;
					var this_y3 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x3,this_y3)));
				}
				var position3 = (j * image.getUInt16(0) + x2) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value3 = image.b[position3] << 24 | image.b[position3 + 1] << 16 | image.b[position3 + 2] << 8 | image.b[position3 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var this13 = value3;
				pixel1 = this13;
			}
			var gray1 = ((pixel1 >> 16 & 255) + (pixel1 >> 8 & 255) + (pixel1 & 255)) / 3 | 0;
			var Alpha2 = pixel1 >> 24 & 255;
			if(Alpha2 == null) {
				Alpha2 = 255;
			}
			var this14 = 0;
			var color1 = this14;
			var Alpha3 = Alpha2;
			if(Alpha3 == null) {
				Alpha3 = 255;
			}
			color1 &= -16711681;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 16;
			color1 &= -65281;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 8;
			color1 &= -256;
			color1 |= gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1;
			color1 &= 16777215;
			color1 |= (Alpha3 > 255 ? 255 : Alpha3 < 0 ? 0 : Alpha3) << 24;
			var pos01 = color1 >> 16 & 255;
			var x4 = i - 1;
			var y3 = j + 1;
			var pixel2;
			if(!(x4 >= 0 && y3 >= 0 && x4 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this15 = [x4,image.getUInt16(0) - 1];
				var values8 = this15;
				var max4 = values8[0];
				var _g20 = 0;
				var _g21 = values8.length;
				while(_g20 < _g21) {
					var i9 = _g20++;
					if(values8[i9] > max4) {
						max4 = values8[i9];
					}
				}
				var this16 = [max4,0];
				var values9 = this16;
				var min4 = values9[0];
				var _g22 = 0;
				var _g23 = values9.length;
				while(_g22 < _g23) {
					var i10 = _g22++;
					if(values9[i10] < min4) {
						min4 = values9[i10];
					}
				}
				var x5 = min4;
				var this17 = [y3,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values10 = this17;
				var max5 = values10[0];
				var _g24 = 0;
				var _g25 = values10.length;
				while(_g24 < _g25) {
					var i11 = _g24++;
					if(values10[i11] > max5) {
						max5 = values10[i11];
					}
				}
				var this18 = [max5,0];
				var values11 = this18;
				var min5 = values11[0];
				var _g26 = 0;
				var _g27 = values11.length;
				while(_g26 < _g27) {
					var i12 = _g26++;
					if(values11[i12] < min5) {
						min5 = values11[i12];
					}
				}
				var y4 = min5;
				if(!(x5 >= 0 && y4 >= 0 && x5 < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x4 = x5;
					var this_y4 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position4 = (y4 * image.getUInt16(0) + x5) * 4;
				position4 += vision_ds_Image.OFFSET;
				var value4 = image.b[position4] << 24 | image.b[position4 + 1] << 16 | image.b[position4 + 2] << 8 | image.b[position4 + 3];
				if(value4 == null) {
					value4 = 0;
				}
				var this19 = value4;
				pixel2 = this19;
			} else {
				if(!(x4 >= 0 && y3 >= 0 && x4 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x5 = x4;
					var this_y5 = y3;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x5,this_y5)));
				}
				var position5 = (y3 * image.getUInt16(0) + x4) * 4;
				position5 += vision_ds_Image.OFFSET;
				var value5 = image.b[position5] << 24 | image.b[position5 + 1] << 16 | image.b[position5 + 2] << 8 | image.b[position5 + 3];
				if(value5 == null) {
					value5 = 0;
				}
				var this20 = value5;
				pixel2 = this20;
			}
			var gray2 = ((pixel2 >> 16 & 255) + (pixel2 >> 8 & 255) + (pixel2 & 255)) / 3 | 0;
			var Alpha4 = pixel2 >> 24 & 255;
			if(Alpha4 == null) {
				Alpha4 = 255;
			}
			var this21 = 0;
			var color2 = this21;
			var Alpha5 = Alpha4;
			if(Alpha5 == null) {
				Alpha5 = 255;
			}
			color2 &= -16711681;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 16;
			color2 &= -65281;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 8;
			color2 &= -256;
			color2 |= gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2;
			color2 &= 16777215;
			color2 |= (Alpha5 > 255 ? 255 : Alpha5 < 0 ? 0 : Alpha5) << 24;
			var pos02 = color2 >> 16 & 255;
			var y5 = j - 1;
			var pixel3;
			if(!(i >= 0 && y5 >= 0 && i < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this22 = [i,image.getUInt16(0) - 1];
				var values12 = this22;
				var max6 = values12[0];
				var _g28 = 0;
				var _g29 = values12.length;
				while(_g28 < _g29) {
					var i13 = _g28++;
					if(values12[i13] > max6) {
						max6 = values12[i13];
					}
				}
				var this23 = [max6,0];
				var values13 = this23;
				var min6 = values13[0];
				var _g30 = 0;
				var _g31 = values13.length;
				while(_g30 < _g31) {
					var i14 = _g30++;
					if(values13[i14] < min6) {
						min6 = values13[i14];
					}
				}
				var x6 = min6;
				var this24 = [y5,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values14 = this24;
				var max7 = values14[0];
				var _g32 = 0;
				var _g33 = values14.length;
				while(_g32 < _g33) {
					var i15 = _g32++;
					if(values14[i15] > max7) {
						max7 = values14[i15];
					}
				}
				var this25 = [max7,0];
				var values15 = this25;
				var min7 = values15[0];
				var _g34 = 0;
				var _g35 = values15.length;
				while(_g34 < _g35) {
					var i16 = _g34++;
					if(values15[i16] < min7) {
						min7 = values15[i16];
					}
				}
				var y6 = min7;
				if(!(x6 >= 0 && y6 >= 0 && x6 < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x6 = x6;
					var this_y6 = y6;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position6 = (y6 * image.getUInt16(0) + x6) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value6 = image.b[position6] << 24 | image.b[position6 + 1] << 16 | image.b[position6 + 2] << 8 | image.b[position6 + 3];
				if(value6 == null) {
					value6 = 0;
				}
				var this26 = value6;
				pixel3 = this26;
			} else {
				if(!(i >= 0 && y5 >= 0 && i < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x7 = i;
					var this_y7 = y5;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x7,this_y7)));
				}
				var position7 = (y5 * image.getUInt16(0) + i) * 4;
				position7 += vision_ds_Image.OFFSET;
				var value7 = image.b[position7] << 24 | image.b[position7 + 1] << 16 | image.b[position7 + 2] << 8 | image.b[position7 + 3];
				if(value7 == null) {
					value7 = 0;
				}
				var this27 = value7;
				pixel3 = this27;
			}
			var gray3 = ((pixel3 >> 16 & 255) + (pixel3 >> 8 & 255) + (pixel3 & 255)) / 3 | 0;
			var Alpha6 = pixel3 >> 24 & 255;
			if(Alpha6 == null) {
				Alpha6 = 255;
			}
			var this28 = 0;
			var color3 = this28;
			var Alpha7 = Alpha6;
			if(Alpha7 == null) {
				Alpha7 = 255;
			}
			color3 &= -16711681;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 16;
			color3 &= -65281;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 8;
			color3 &= -256;
			color3 |= gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3;
			color3 &= 16777215;
			color3 |= (Alpha7 > 255 ? 255 : Alpha7 < 0 ? 0 : Alpha7) << 24;
			var pos10 = color3 >> 16 & 255;
			var pixel4;
			if(!(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this29 = [i,image.getUInt16(0) - 1];
				var values16 = this29;
				var max8 = values16[0];
				var _g36 = 0;
				var _g37 = values16.length;
				while(_g36 < _g37) {
					var i17 = _g36++;
					if(values16[i17] > max8) {
						max8 = values16[i17];
					}
				}
				var this30 = [max8,0];
				var values17 = this30;
				var min8 = values17[0];
				var _g38 = 0;
				var _g39 = values17.length;
				while(_g38 < _g39) {
					var i18 = _g38++;
					if(values17[i18] < min8) {
						min8 = values17[i18];
					}
				}
				var x7 = min8;
				var this31 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values18 = this31;
				var max9 = values18[0];
				var _g40 = 0;
				var _g41 = values18.length;
				while(_g40 < _g41) {
					var i19 = _g40++;
					if(values18[i19] > max9) {
						max9 = values18[i19];
					}
				}
				var this32 = [max9,0];
				var values19 = this32;
				var min9 = values19[0];
				var _g42 = 0;
				var _g43 = values19.length;
				while(_g42 < _g43) {
					var i20 = _g42++;
					if(values19[i20] < min9) {
						min9 = values19[i20];
					}
				}
				var y7 = min9;
				if(!(x7 >= 0 && y7 >= 0 && x7 < image.getUInt16(0) && y7 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x8 = x7;
					var this_y8 = y7;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x8,this_y8)));
				}
				var position8 = (y7 * image.getUInt16(0) + x7) * 4;
				position8 += vision_ds_Image.OFFSET;
				var value8 = image.b[position8] << 24 | image.b[position8 + 1] << 16 | image.b[position8 + 2] << 8 | image.b[position8 + 3];
				if(value8 == null) {
					value8 = 0;
				}
				var this33 = value8;
				pixel4 = this33;
			} else {
				if(!(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x9 = i;
					var this_y9 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x9,this_y9)));
				}
				var position9 = (j * image.getUInt16(0) + i) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value9 = image.b[position9] << 24 | image.b[position9 + 1] << 16 | image.b[position9 + 2] << 8 | image.b[position9 + 3];
				if(value9 == null) {
					value9 = 0;
				}
				var this34 = value9;
				pixel4 = this34;
			}
			var gray4 = ((pixel4 >> 16 & 255) + (pixel4 >> 8 & 255) + (pixel4 & 255)) / 3 | 0;
			var Alpha8 = pixel4 >> 24 & 255;
			if(Alpha8 == null) {
				Alpha8 = 255;
			}
			var this35 = 0;
			var color4 = this35;
			var Alpha9 = Alpha8;
			if(Alpha9 == null) {
				Alpha9 = 255;
			}
			color4 &= -16711681;
			color4 |= (gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4) << 16;
			color4 &= -65281;
			color4 |= (gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4) << 8;
			color4 &= -256;
			color4 |= gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4;
			color4 &= 16777215;
			color4 |= (Alpha9 > 255 ? 255 : Alpha9 < 0 ? 0 : Alpha9) << 24;
			var pos11 = color4 >> 16 & 255;
			var y8 = j + 1;
			var pixel5;
			if(!(i >= 0 && y8 >= 0 && i < image.getUInt16(0) && y8 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this36 = [i,image.getUInt16(0) - 1];
				var values20 = this36;
				var max10 = values20[0];
				var _g44 = 0;
				var _g45 = values20.length;
				while(_g44 < _g45) {
					var i21 = _g44++;
					if(values20[i21] > max10) {
						max10 = values20[i21];
					}
				}
				var this37 = [max10,0];
				var values21 = this37;
				var min10 = values21[0];
				var _g46 = 0;
				var _g47 = values21.length;
				while(_g46 < _g47) {
					var i22 = _g46++;
					if(values21[i22] < min10) {
						min10 = values21[i22];
					}
				}
				var x8 = min10;
				var this38 = [y8,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values22 = this38;
				var max11 = values22[0];
				var _g48 = 0;
				var _g49 = values22.length;
				while(_g48 < _g49) {
					var i23 = _g48++;
					if(values22[i23] > max11) {
						max11 = values22[i23];
					}
				}
				var this39 = [max11,0];
				var values23 = this39;
				var min11 = values23[0];
				var _g50 = 0;
				var _g51 = values23.length;
				while(_g50 < _g51) {
					var i24 = _g50++;
					if(values23[i24] < min11) {
						min11 = values23[i24];
					}
				}
				var y9 = min11;
				if(!(x8 >= 0 && y9 >= 0 && x8 < image.getUInt16(0) && y9 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x10 = x8;
					var this_y10 = y9;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x10,this_y10)));
				}
				var position10 = (y9 * image.getUInt16(0) + x8) * 4;
				position10 += vision_ds_Image.OFFSET;
				var value10 = image.b[position10] << 24 | image.b[position10 + 1] << 16 | image.b[position10 + 2] << 8 | image.b[position10 + 3];
				if(value10 == null) {
					value10 = 0;
				}
				var this40 = value10;
				pixel5 = this40;
			} else {
				if(!(i >= 0 && y8 >= 0 && i < image.getUInt16(0) && y8 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x11 = i;
					var this_y11 = y8;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x11,this_y11)));
				}
				var position11 = (y8 * image.getUInt16(0) + i) * 4;
				position11 += vision_ds_Image.OFFSET;
				var value11 = image.b[position11] << 24 | image.b[position11 + 1] << 16 | image.b[position11 + 2] << 8 | image.b[position11 + 3];
				if(value11 == null) {
					value11 = 0;
				}
				var this41 = value11;
				pixel5 = this41;
			}
			var gray5 = ((pixel5 >> 16 & 255) + (pixel5 >> 8 & 255) + (pixel5 & 255)) / 3 | 0;
			var Alpha10 = pixel5 >> 24 & 255;
			if(Alpha10 == null) {
				Alpha10 = 255;
			}
			var this42 = 0;
			var color5 = this42;
			var Alpha11 = Alpha10;
			if(Alpha11 == null) {
				Alpha11 = 255;
			}
			color5 &= -16711681;
			color5 |= (gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5) << 16;
			color5 &= -65281;
			color5 |= (gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5) << 8;
			color5 &= -256;
			color5 |= gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5;
			color5 &= 16777215;
			color5 |= (Alpha11 > 255 ? 255 : Alpha11 < 0 ? 0 : Alpha11) << 24;
			var pos12 = color5 >> 16 & 255;
			var x9 = i + 1;
			var y10 = j - 1;
			var pixel6;
			if(!(x9 >= 0 && y10 >= 0 && x9 < image.getUInt16(0) && y10 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this43 = [x9,image.getUInt16(0) - 1];
				var values24 = this43;
				var max12 = values24[0];
				var _g52 = 0;
				var _g53 = values24.length;
				while(_g52 < _g53) {
					var i25 = _g52++;
					if(values24[i25] > max12) {
						max12 = values24[i25];
					}
				}
				var this44 = [max12,0];
				var values25 = this44;
				var min12 = values25[0];
				var _g54 = 0;
				var _g55 = values25.length;
				while(_g54 < _g55) {
					var i26 = _g54++;
					if(values25[i26] < min12) {
						min12 = values25[i26];
					}
				}
				var x10 = min12;
				var this45 = [y10,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values26 = this45;
				var max13 = values26[0];
				var _g56 = 0;
				var _g57 = values26.length;
				while(_g56 < _g57) {
					var i27 = _g56++;
					if(values26[i27] > max13) {
						max13 = values26[i27];
					}
				}
				var this46 = [max13,0];
				var values27 = this46;
				var min13 = values27[0];
				var _g58 = 0;
				var _g59 = values27.length;
				while(_g58 < _g59) {
					var i28 = _g58++;
					if(values27[i28] < min13) {
						min13 = values27[i28];
					}
				}
				var y11 = min13;
				if(!(x10 >= 0 && y11 >= 0 && x10 < image.getUInt16(0) && y11 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x12 = x10;
					var this_y12 = y11;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x12,this_y12)));
				}
				var position12 = (y11 * image.getUInt16(0) + x10) * 4;
				position12 += vision_ds_Image.OFFSET;
				var value12 = image.b[position12] << 24 | image.b[position12 + 1] << 16 | image.b[position12 + 2] << 8 | image.b[position12 + 3];
				if(value12 == null) {
					value12 = 0;
				}
				var this47 = value12;
				pixel6 = this47;
			} else {
				if(!(x9 >= 0 && y10 >= 0 && x9 < image.getUInt16(0) && y10 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x13 = x9;
					var this_y13 = y10;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x13,this_y13)));
				}
				var position13 = (y10 * image.getUInt16(0) + x9) * 4;
				position13 += vision_ds_Image.OFFSET;
				var value13 = image.b[position13] << 24 | image.b[position13 + 1] << 16 | image.b[position13 + 2] << 8 | image.b[position13 + 3];
				if(value13 == null) {
					value13 = 0;
				}
				var this48 = value13;
				pixel6 = this48;
			}
			var gray6 = ((pixel6 >> 16 & 255) + (pixel6 >> 8 & 255) + (pixel6 & 255)) / 3 | 0;
			var Alpha12 = pixel6 >> 24 & 255;
			if(Alpha12 == null) {
				Alpha12 = 255;
			}
			var this49 = 0;
			var color6 = this49;
			var Alpha13 = Alpha12;
			if(Alpha13 == null) {
				Alpha13 = 255;
			}
			color6 &= -16711681;
			color6 |= (gray6 > 255 ? 255 : gray6 < 0 ? 0 : gray6) << 16;
			color6 &= -65281;
			color6 |= (gray6 > 255 ? 255 : gray6 < 0 ? 0 : gray6) << 8;
			color6 &= -256;
			color6 |= gray6 > 255 ? 255 : gray6 < 0 ? 0 : gray6;
			color6 &= 16777215;
			color6 |= (Alpha13 > 255 ? 255 : Alpha13 < 0 ? 0 : Alpha13) << 24;
			var pos20 = color6 >> 16 & 255;
			var x11 = i + 1;
			var pixel7;
			if(!(x11 >= 0 && j >= 0 && x11 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this50 = [x11,image.getUInt16(0) - 1];
				var values28 = this50;
				var max14 = values28[0];
				var _g60 = 0;
				var _g61 = values28.length;
				while(_g60 < _g61) {
					var i29 = _g60++;
					if(values28[i29] > max14) {
						max14 = values28[i29];
					}
				}
				var this51 = [max14,0];
				var values29 = this51;
				var min14 = values29[0];
				var _g62 = 0;
				var _g63 = values29.length;
				while(_g62 < _g63) {
					var i30 = _g62++;
					if(values29[i30] < min14) {
						min14 = values29[i30];
					}
				}
				var x12 = min14;
				var this52 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values30 = this52;
				var max15 = values30[0];
				var _g64 = 0;
				var _g65 = values30.length;
				while(_g64 < _g65) {
					var i31 = _g64++;
					if(values30[i31] > max15) {
						max15 = values30[i31];
					}
				}
				var this53 = [max15,0];
				var values31 = this53;
				var min15 = values31[0];
				var _g66 = 0;
				var _g67 = values31.length;
				while(_g66 < _g67) {
					var i32 = _g66++;
					if(values31[i32] < min15) {
						min15 = values31[i32];
					}
				}
				var y12 = min15;
				if(!(x12 >= 0 && y12 >= 0 && x12 < image.getUInt16(0) && y12 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x14 = x12;
					var this_y14 = y12;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x14,this_y14)));
				}
				var position14 = (y12 * image.getUInt16(0) + x12) * 4;
				position14 += vision_ds_Image.OFFSET;
				var value14 = image.b[position14] << 24 | image.b[position14 + 1] << 16 | image.b[position14 + 2] << 8 | image.b[position14 + 3];
				if(value14 == null) {
					value14 = 0;
				}
				var this54 = value14;
				pixel7 = this54;
			} else {
				if(!(x11 >= 0 && j >= 0 && x11 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x15 = x11;
					var this_y15 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x15,this_y15)));
				}
				var position15 = (j * image.getUInt16(0) + x11) * 4;
				position15 += vision_ds_Image.OFFSET;
				var value15 = image.b[position15] << 24 | image.b[position15 + 1] << 16 | image.b[position15 + 2] << 8 | image.b[position15 + 3];
				if(value15 == null) {
					value15 = 0;
				}
				var this55 = value15;
				pixel7 = this55;
			}
			var gray7 = ((pixel7 >> 16 & 255) + (pixel7 >> 8 & 255) + (pixel7 & 255)) / 3 | 0;
			var Alpha14 = pixel7 >> 24 & 255;
			if(Alpha14 == null) {
				Alpha14 = 255;
			}
			var this56 = 0;
			var color7 = this56;
			var Alpha15 = Alpha14;
			if(Alpha15 == null) {
				Alpha15 = 255;
			}
			color7 &= -16711681;
			color7 |= (gray7 > 255 ? 255 : gray7 < 0 ? 0 : gray7) << 16;
			color7 &= -65281;
			color7 |= (gray7 > 255 ? 255 : gray7 < 0 ? 0 : gray7) << 8;
			color7 &= -256;
			color7 |= gray7 > 255 ? 255 : gray7 < 0 ? 0 : gray7;
			color7 &= 16777215;
			color7 |= (Alpha15 > 255 ? 255 : Alpha15 < 0 ? 0 : Alpha15) << 24;
			var pos21 = color7 >> 16 & 255;
			var x13 = i + 1;
			var y13 = j + 1;
			var pixel8;
			if(!(x13 >= 0 && y13 >= 0 && x13 < image.getUInt16(0) && y13 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this57 = [x13,image.getUInt16(0) - 1];
				var values32 = this57;
				var max16 = values32[0];
				var _g68 = 0;
				var _g69 = values32.length;
				while(_g68 < _g69) {
					var i33 = _g68++;
					if(values32[i33] > max16) {
						max16 = values32[i33];
					}
				}
				var this58 = [max16,0];
				var values33 = this58;
				var min16 = values33[0];
				var _g70 = 0;
				var _g71 = values33.length;
				while(_g70 < _g71) {
					var i34 = _g70++;
					if(values33[i34] < min16) {
						min16 = values33[i34];
					}
				}
				var x14 = min16;
				var this59 = [y13,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
				var values34 = this59;
				var max17 = values34[0];
				var _g72 = 0;
				var _g73 = values34.length;
				while(_g72 < _g73) {
					var i35 = _g72++;
					if(values34[i35] > max17) {
						max17 = values34[i35];
					}
				}
				var this60 = [max17,0];
				var values35 = this60;
				var min17 = values35[0];
				var _g74 = 0;
				var _g75 = values35.length;
				while(_g74 < _g75) {
					var i36 = _g74++;
					if(values35[i36] < min17) {
						min17 = values35[i36];
					}
				}
				var y14 = min17;
				if(!(x14 >= 0 && y14 >= 0 && x14 < image.getUInt16(0) && y14 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x16 = x14;
					var this_y16 = y14;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x16,this_y16)));
				}
				var position16 = (y14 * image.getUInt16(0) + x14) * 4;
				position16 += vision_ds_Image.OFFSET;
				var value16 = image.b[position16] << 24 | image.b[position16 + 1] << 16 | image.b[position16 + 2] << 8 | image.b[position16 + 3];
				if(value16 == null) {
					value16 = 0;
				}
				var this61 = value16;
				pixel8 = this61;
			} else {
				if(!(x13 >= 0 && y13 >= 0 && x13 < image.getUInt16(0) && y13 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x17 = x13;
					var this_y17 = y13;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x17,this_y17)));
				}
				var position17 = (y13 * image.getUInt16(0) + x13) * 4;
				position17 += vision_ds_Image.OFFSET;
				var value17 = image.b[position17] << 24 | image.b[position17 + 1] << 16 | image.b[position17 + 2] << 8 | image.b[position17 + 3];
				if(value17 == null) {
					value17 = 0;
				}
				var this62 = value17;
				pixel8 = this62;
			}
			var gray8 = ((pixel8 >> 16 & 255) + (pixel8 >> 8 & 255) + (pixel8 & 255)) / 3 | 0;
			var Alpha16 = pixel8 >> 24 & 255;
			if(Alpha16 == null) {
				Alpha16 = 255;
			}
			var this63 = 0;
			var color8 = this63;
			var Alpha17 = Alpha16;
			if(Alpha17 == null) {
				Alpha17 = 255;
			}
			color8 &= -16711681;
			color8 |= (gray8 > 255 ? 255 : gray8 < 0 ? 0 : gray8) << 16;
			color8 &= -65281;
			color8 |= (gray8 > 255 ? 255 : gray8 < 0 ? 0 : gray8) << 8;
			color8 &= -256;
			color8 |= gray8 > 255 ? 255 : gray8 < 0 ? 0 : gray8;
			color8 &= 16777215;
			color8 |= (Alpha17 > 255 ? 255 : Alpha17 < 0 ? 0 : Alpha17) << 24;
			var pos22 = color8 >> 16 & 255;
			var gx = -3 * pos00 + 0 * pos01 + 3 * pos02 + (-10 * pos10 + 0 * pos11 + 10 * pos12) + (-3 * pos20 + 0 * pos21 + 3 * pos22);
			var gy = -3 * pos00 + -10 * pos01 + -3 * pos02 + (0 * pos10 + 0 * pos11 + 0 * pos12) + (3 * pos20 + 10 * pos21 + 3 * pos22);
			var gradientFloatValue = Math.sqrt(gx * gx + gy * gy);
			var gradient = gradientFloatValue | 0;
			if(gradient > maxGradient) {
				maxGradient = gradient;
			}
			var rgb = gradient * (255 / maxGradient) | 0;
			var color9 = -16777216 | rgb << 16 | rgb << 8 | rgb;
			if(!(i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)))) {
				var this_x18 = i;
				var this_y18 = j;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edgeColors,new vision_ds_Point2D(this_x18,this_y18)));
			} else if(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g76 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g77 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g78 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var edgeColors1 = edgeColors.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g76,_g77,_g78,edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edgeColors1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y;
						break;
					case 1:
						has = !(i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x15 = view.x + view.width / 2 - c;
							var y15 = view.y + view.height / 2;
							if(y15 == null) {
								y15 = 0;
							}
							if(x15 == null) {
								x15 = 0;
							}
							var f1_x = x15;
							var f1_y = y15;
							var x16 = view.x + view.width / 2 + c;
							var y16 = view.y + view.height / 2;
							if(y16 == null) {
								y16 = 0;
							}
							if(x16 == null) {
								x16 = 0;
							}
							var f2_x = x16;
							var f2_y = y16;
							var x17 = i;
							var y17 = j;
							if(y17 == null) {
								y17 = 0;
							}
							if(x17 == null) {
								x17 = 0;
							}
							var p_x = x17;
							var p_y = y17;
							var x18 = p_x - f1_x;
							var y18 = p_y - f1_y;
							var x19 = p_x - f2_x;
							var y19 = p_y - f2_y;
							has = Math.sqrt(x18 * x18 + y18 * y18) + Math.sqrt(x19 * x19 + y19 * y19) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x20 = view.x + view.width / 2;
							var y20 = view.y + view.height / 2 - c1;
							if(y20 == null) {
								y20 = 0;
							}
							if(x20 == null) {
								x20 = 0;
							}
							var f1_x1 = x20;
							var f1_y1 = y20;
							var x21 = view.x + view.width / 2;
							var y21 = view.y + view.height / 2 + c1;
							if(y21 == null) {
								y21 = 0;
							}
							if(x21 == null) {
								x21 = 0;
							}
							var f2_x1 = x21;
							var f2_y1 = y21;
							var x22 = i;
							var y22 = j;
							if(y22 == null) {
								y22 = 0;
							}
							if(x22 == null) {
								x22 = 0;
							}
							var p_x1 = x22;
							var p_y1 = y22;
							var x23 = p_x1 - f1_x1;
							var y23 = p_y1 - f1_y1;
							var x24 = p_x1 - f2_x1;
							var y24 = p_y1 - f2_y1;
							has = Math.sqrt(x23 * x23 + y23 * y23) + Math.sqrt(x24 * x24 + y24 * y24) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x25 = i;
							var y25 = j;
							if(y25 == null) {
								y25 = 0;
							}
							if(x25 == null) {
								x25 = 0;
							}
							var point1_x = x25;
							var point1_y = y25;
							var x26 = view.x + view.width / 2;
							var y26 = view.y + view.height / 2;
							if(y26 == null) {
								y26 = 0;
							}
							if(x26 == null) {
								x26 = 0;
							}
							var point2_x = x26;
							var point2_y = y26;
							var x27 = point2_x - point1_x;
							var y27 = point2_y - point1_y;
							has = Math.sqrt(x27 * x27 + y27 * y27) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position18 = (j * edgeColors.getUInt16(0) + i) * 4;
					position18 += vision_ds_Image.OFFSET;
					edgeColors.b[position18] = color9 >> 24 & 255;
					edgeColors.b[position18 + 1] = color9 >> 16 & 255;
					edgeColors.b[position18 + 2] = color9 >> 8 & 255;
					edgeColors.b[position18 + 3] = color9 & 255;
				}
			} else {
				var position19 = (j * edgeColors.getUInt16(0) + i) * 4;
				position19 += vision_ds_Image.OFFSET;
				edgeColors.b[position19] = color9 >> 24 & 255;
				edgeColors.b[position19 + 1] = color9 >> 16 & 255;
				edgeColors.b[position19 + 2] = color9 >> 8 & 255;
				edgeColors.b[position19 + 3] = color9 & 255;
			}
		}
	}
	return edgeColors;
};
vision_algorithms_Sobel.detectEdges = function(image,threshold) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = 0;
	var color = this1;
	var Alpha = 255;
	if(Alpha == null) {
		Alpha = 255;
	}
	color &= -16711681;
	color |= 0;
	color &= -65281;
	color |= 0;
	color &= -256;
	color |= 0;
	color &= 16777215;
	color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	var color1 = color;
	if(color1 == null) {
		color1 = 0;
	}
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = color1 >> 24 & 255;
		this2.b[i + 1] = color1 >> 16 & 255;
		this2.b[i + 2] = color1 >> 8 & 255;
		this2.b[i + 3] = color1 & 255;
		i += 4;
	}
	var edges = this2;
	var blackAndWhite = vision_Vision.grayscale(vision_ds_Image.clone(image));
	var _g = 0;
	var _g1 = blackAndWhite.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var neighbors_8;
			var neighbors_7;
			var neighbors_6;
			var neighbors_5;
			var neighbors_4;
			var neighbors_3;
			var neighbors_2;
			var neighbors_1;
			var neighbors_0;
			var x1 = x - 1;
			var y1 = y - 1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < blackAndWhite.getUInt16(0) && y1 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this1 = [x1,blackAndWhite.getUInt16(0) - 1];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i = _g4++;
					if(values[i] > max) {
						max = values[i];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i1 = _g6++;
					if(values1[i1] < min) {
						min = values1[i1];
					}
				}
				var x2 = min;
				var this3 = [y1,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i2 = _g8++;
					if(values2[i2] > max1) {
						max1 = values2[i2];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i3 = _g10++;
					if(values3[i3] < min1) {
						min1 = values3[i3];
					}
				}
				var y2 = min1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < blackAndWhite.getUInt16(0) && y2 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y2 * blackAndWhite.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = blackAndWhite.b[position] << 24 | blackAndWhite.b[position + 1] << 16 | blackAndWhite.b[position + 2] << 8 | blackAndWhite.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				neighbors_0 = this5;
			} else {
				if(!(x1 >= 0 && y1 >= 0 && x1 < blackAndWhite.getUInt16(0) && y1 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x1 = x1;
					var this_y1 = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y1 * blackAndWhite.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = blackAndWhite.b[position1] << 24 | blackAndWhite.b[position1 + 1] << 16 | blackAndWhite.b[position1 + 2] << 8 | blackAndWhite.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				neighbors_0 = this6;
			}
			var y3 = y - 1;
			if(!(x >= 0 && y3 >= 0 && x < blackAndWhite.getUInt16(0) && y3 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this7 = [x,blackAndWhite.getUInt16(0) - 1];
				var values4 = this7;
				var max2 = values4[0];
				var _g12 = 0;
				var _g13 = values4.length;
				while(_g12 < _g13) {
					var i4 = _g12++;
					if(values4[i4] > max2) {
						max2 = values4[i4];
					}
				}
				var this8 = [max2,0];
				var values5 = this8;
				var min2 = values5[0];
				var _g14 = 0;
				var _g15 = values5.length;
				while(_g14 < _g15) {
					var i5 = _g14++;
					if(values5[i5] < min2) {
						min2 = values5[i5];
					}
				}
				var x3 = min2;
				var this9 = [y3,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values6 = this9;
				var max3 = values6[0];
				var _g16 = 0;
				var _g17 = values6.length;
				while(_g16 < _g17) {
					var i6 = _g16++;
					if(values6[i6] > max3) {
						max3 = values6[i6];
					}
				}
				var this10 = [max3,0];
				var values7 = this10;
				var min3 = values7[0];
				var _g18 = 0;
				var _g19 = values7.length;
				while(_g18 < _g19) {
					var i7 = _g18++;
					if(values7[i7] < min3) {
						min3 = values7[i7];
					}
				}
				var y4 = min3;
				if(!(x3 >= 0 && y4 >= 0 && x3 < blackAndWhite.getUInt16(0) && y4 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x2 = x3;
					var this_y2 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position2 = (y4 * blackAndWhite.getUInt16(0) + x3) * 4;
				position2 += vision_ds_Image.OFFSET;
				var value2 = blackAndWhite.b[position2] << 24 | blackAndWhite.b[position2 + 1] << 16 | blackAndWhite.b[position2 + 2] << 8 | blackAndWhite.b[position2 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var this11 = value2;
				neighbors_1 = this11;
			} else {
				if(!(x >= 0 && y3 >= 0 && x < blackAndWhite.getUInt16(0) && y3 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x3 = x;
					var this_y3 = y3;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x3,this_y3)));
				}
				var position3 = (y3 * blackAndWhite.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value3 = blackAndWhite.b[position3] << 24 | blackAndWhite.b[position3 + 1] << 16 | blackAndWhite.b[position3 + 2] << 8 | blackAndWhite.b[position3 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var this12 = value3;
				neighbors_1 = this12;
			}
			var x4 = x + 1;
			var y5 = y - 1;
			if(!(x4 >= 0 && y5 >= 0 && x4 < blackAndWhite.getUInt16(0) && y5 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this13 = [x4,blackAndWhite.getUInt16(0) - 1];
				var values8 = this13;
				var max4 = values8[0];
				var _g20 = 0;
				var _g21 = values8.length;
				while(_g20 < _g21) {
					var i8 = _g20++;
					if(values8[i8] > max4) {
						max4 = values8[i8];
					}
				}
				var this14 = [max4,0];
				var values9 = this14;
				var min4 = values9[0];
				var _g22 = 0;
				var _g23 = values9.length;
				while(_g22 < _g23) {
					var i9 = _g22++;
					if(values9[i9] < min4) {
						min4 = values9[i9];
					}
				}
				var x5 = min4;
				var this15 = [y5,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values10 = this15;
				var max5 = values10[0];
				var _g24 = 0;
				var _g25 = values10.length;
				while(_g24 < _g25) {
					var i10 = _g24++;
					if(values10[i10] > max5) {
						max5 = values10[i10];
					}
				}
				var this16 = [max5,0];
				var values11 = this16;
				var min5 = values11[0];
				var _g26 = 0;
				var _g27 = values11.length;
				while(_g26 < _g27) {
					var i11 = _g26++;
					if(values11[i11] < min5) {
						min5 = values11[i11];
					}
				}
				var y6 = min5;
				if(!(x5 >= 0 && y6 >= 0 && x5 < blackAndWhite.getUInt16(0) && y6 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x4 = x5;
					var this_y4 = y6;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position4 = (y6 * blackAndWhite.getUInt16(0) + x5) * 4;
				position4 += vision_ds_Image.OFFSET;
				var value4 = blackAndWhite.b[position4] << 24 | blackAndWhite.b[position4 + 1] << 16 | blackAndWhite.b[position4 + 2] << 8 | blackAndWhite.b[position4 + 3];
				if(value4 == null) {
					value4 = 0;
				}
				var this17 = value4;
				neighbors_2 = this17;
			} else {
				if(!(x4 >= 0 && y5 >= 0 && x4 < blackAndWhite.getUInt16(0) && y5 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x5 = x4;
					var this_y5 = y5;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x5,this_y5)));
				}
				var position5 = (y5 * blackAndWhite.getUInt16(0) + x4) * 4;
				position5 += vision_ds_Image.OFFSET;
				var value5 = blackAndWhite.b[position5] << 24 | blackAndWhite.b[position5 + 1] << 16 | blackAndWhite.b[position5 + 2] << 8 | blackAndWhite.b[position5 + 3];
				if(value5 == null) {
					value5 = 0;
				}
				var this18 = value5;
				neighbors_2 = this18;
			}
			var x6 = x - 1;
			if(!(x6 >= 0 && y >= 0 && x6 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this19 = [x6,blackAndWhite.getUInt16(0) - 1];
				var values12 = this19;
				var max6 = values12[0];
				var _g28 = 0;
				var _g29 = values12.length;
				while(_g28 < _g29) {
					var i12 = _g28++;
					if(values12[i12] > max6) {
						max6 = values12[i12];
					}
				}
				var this20 = [max6,0];
				var values13 = this20;
				var min6 = values13[0];
				var _g30 = 0;
				var _g31 = values13.length;
				while(_g30 < _g31) {
					var i13 = _g30++;
					if(values13[i13] < min6) {
						min6 = values13[i13];
					}
				}
				var x7 = min6;
				var this21 = [y,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values14 = this21;
				var max7 = values14[0];
				var _g32 = 0;
				var _g33 = values14.length;
				while(_g32 < _g33) {
					var i14 = _g32++;
					if(values14[i14] > max7) {
						max7 = values14[i14];
					}
				}
				var this22 = [max7,0];
				var values15 = this22;
				var min7 = values15[0];
				var _g34 = 0;
				var _g35 = values15.length;
				while(_g34 < _g35) {
					var i15 = _g34++;
					if(values15[i15] < min7) {
						min7 = values15[i15];
					}
				}
				var y7 = min7;
				if(!(x7 >= 0 && y7 >= 0 && x7 < blackAndWhite.getUInt16(0) && y7 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x6 = x7;
					var this_y6 = y7;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position6 = (y7 * blackAndWhite.getUInt16(0) + x7) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value6 = blackAndWhite.b[position6] << 24 | blackAndWhite.b[position6 + 1] << 16 | blackAndWhite.b[position6 + 2] << 8 | blackAndWhite.b[position6 + 3];
				if(value6 == null) {
					value6 = 0;
				}
				var this23 = value6;
				neighbors_3 = this23;
			} else {
				if(!(x6 >= 0 && y >= 0 && x6 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x7 = x6;
					var this_y7 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x7,this_y7)));
				}
				var position7 = (y * blackAndWhite.getUInt16(0) + x6) * 4;
				position7 += vision_ds_Image.OFFSET;
				var value7 = blackAndWhite.b[position7] << 24 | blackAndWhite.b[position7 + 1] << 16 | blackAndWhite.b[position7 + 2] << 8 | blackAndWhite.b[position7 + 3];
				if(value7 == null) {
					value7 = 0;
				}
				var this24 = value7;
				neighbors_3 = this24;
			}
			if(!(x >= 0 && y >= 0 && x < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this25 = [x,blackAndWhite.getUInt16(0) - 1];
				var values16 = this25;
				var max8 = values16[0];
				var _g36 = 0;
				var _g37 = values16.length;
				while(_g36 < _g37) {
					var i16 = _g36++;
					if(values16[i16] > max8) {
						max8 = values16[i16];
					}
				}
				var this26 = [max8,0];
				var values17 = this26;
				var min8 = values17[0];
				var _g38 = 0;
				var _g39 = values17.length;
				while(_g38 < _g39) {
					var i17 = _g38++;
					if(values17[i17] < min8) {
						min8 = values17[i17];
					}
				}
				var x8 = min8;
				var this27 = [y,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values18 = this27;
				var max9 = values18[0];
				var _g40 = 0;
				var _g41 = values18.length;
				while(_g40 < _g41) {
					var i18 = _g40++;
					if(values18[i18] > max9) {
						max9 = values18[i18];
					}
				}
				var this28 = [max9,0];
				var values19 = this28;
				var min9 = values19[0];
				var _g42 = 0;
				var _g43 = values19.length;
				while(_g42 < _g43) {
					var i19 = _g42++;
					if(values19[i19] < min9) {
						min9 = values19[i19];
					}
				}
				var y8 = min9;
				if(!(x8 >= 0 && y8 >= 0 && x8 < blackAndWhite.getUInt16(0) && y8 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x8 = x8;
					var this_y8 = y8;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x8,this_y8)));
				}
				var position8 = (y8 * blackAndWhite.getUInt16(0) + x8) * 4;
				position8 += vision_ds_Image.OFFSET;
				var value8 = blackAndWhite.b[position8] << 24 | blackAndWhite.b[position8 + 1] << 16 | blackAndWhite.b[position8 + 2] << 8 | blackAndWhite.b[position8 + 3];
				if(value8 == null) {
					value8 = 0;
				}
				var this29 = value8;
				neighbors_4 = this29;
			} else {
				if(!(x >= 0 && y >= 0 && x < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x9 = x;
					var this_y9 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x9,this_y9)));
				}
				var position9 = (y * blackAndWhite.getUInt16(0) + x) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value9 = blackAndWhite.b[position9] << 24 | blackAndWhite.b[position9 + 1] << 16 | blackAndWhite.b[position9 + 2] << 8 | blackAndWhite.b[position9 + 3];
				if(value9 == null) {
					value9 = 0;
				}
				var this30 = value9;
				neighbors_4 = this30;
			}
			var x9 = x + 1;
			if(!(x9 >= 0 && y >= 0 && x9 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this31 = [x9,blackAndWhite.getUInt16(0) - 1];
				var values20 = this31;
				var max10 = values20[0];
				var _g44 = 0;
				var _g45 = values20.length;
				while(_g44 < _g45) {
					var i20 = _g44++;
					if(values20[i20] > max10) {
						max10 = values20[i20];
					}
				}
				var this32 = [max10,0];
				var values21 = this32;
				var min10 = values21[0];
				var _g46 = 0;
				var _g47 = values21.length;
				while(_g46 < _g47) {
					var i21 = _g46++;
					if(values21[i21] < min10) {
						min10 = values21[i21];
					}
				}
				var x10 = min10;
				var this33 = [y,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values22 = this33;
				var max11 = values22[0];
				var _g48 = 0;
				var _g49 = values22.length;
				while(_g48 < _g49) {
					var i22 = _g48++;
					if(values22[i22] > max11) {
						max11 = values22[i22];
					}
				}
				var this34 = [max11,0];
				var values23 = this34;
				var min11 = values23[0];
				var _g50 = 0;
				var _g51 = values23.length;
				while(_g50 < _g51) {
					var i23 = _g50++;
					if(values23[i23] < min11) {
						min11 = values23[i23];
					}
				}
				var y9 = min11;
				if(!(x10 >= 0 && y9 >= 0 && x10 < blackAndWhite.getUInt16(0) && y9 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x10 = x10;
					var this_y10 = y9;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x10,this_y10)));
				}
				var position10 = (y9 * blackAndWhite.getUInt16(0) + x10) * 4;
				position10 += vision_ds_Image.OFFSET;
				var value10 = blackAndWhite.b[position10] << 24 | blackAndWhite.b[position10 + 1] << 16 | blackAndWhite.b[position10 + 2] << 8 | blackAndWhite.b[position10 + 3];
				if(value10 == null) {
					value10 = 0;
				}
				var this35 = value10;
				neighbors_5 = this35;
			} else {
				if(!(x9 >= 0 && y >= 0 && x9 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x11 = x9;
					var this_y11 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x11,this_y11)));
				}
				var position11 = (y * blackAndWhite.getUInt16(0) + x9) * 4;
				position11 += vision_ds_Image.OFFSET;
				var value11 = blackAndWhite.b[position11] << 24 | blackAndWhite.b[position11 + 1] << 16 | blackAndWhite.b[position11 + 2] << 8 | blackAndWhite.b[position11 + 3];
				if(value11 == null) {
					value11 = 0;
				}
				var this36 = value11;
				neighbors_5 = this36;
			}
			var x11 = x - 1;
			var y10 = y + 1;
			if(!(x11 >= 0 && y10 >= 0 && x11 < blackAndWhite.getUInt16(0) && y10 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this37 = [x11,blackAndWhite.getUInt16(0) - 1];
				var values24 = this37;
				var max12 = values24[0];
				var _g52 = 0;
				var _g53 = values24.length;
				while(_g52 < _g53) {
					var i24 = _g52++;
					if(values24[i24] > max12) {
						max12 = values24[i24];
					}
				}
				var this38 = [max12,0];
				var values25 = this38;
				var min12 = values25[0];
				var _g54 = 0;
				var _g55 = values25.length;
				while(_g54 < _g55) {
					var i25 = _g54++;
					if(values25[i25] < min12) {
						min12 = values25[i25];
					}
				}
				var x12 = min12;
				var this39 = [y10,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values26 = this39;
				var max13 = values26[0];
				var _g56 = 0;
				var _g57 = values26.length;
				while(_g56 < _g57) {
					var i26 = _g56++;
					if(values26[i26] > max13) {
						max13 = values26[i26];
					}
				}
				var this40 = [max13,0];
				var values27 = this40;
				var min13 = values27[0];
				var _g58 = 0;
				var _g59 = values27.length;
				while(_g58 < _g59) {
					var i27 = _g58++;
					if(values27[i27] < min13) {
						min13 = values27[i27];
					}
				}
				var y11 = min13;
				if(!(x12 >= 0 && y11 >= 0 && x12 < blackAndWhite.getUInt16(0) && y11 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x12 = x12;
					var this_y12 = y11;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x12,this_y12)));
				}
				var position12 = (y11 * blackAndWhite.getUInt16(0) + x12) * 4;
				position12 += vision_ds_Image.OFFSET;
				var value12 = blackAndWhite.b[position12] << 24 | blackAndWhite.b[position12 + 1] << 16 | blackAndWhite.b[position12 + 2] << 8 | blackAndWhite.b[position12 + 3];
				if(value12 == null) {
					value12 = 0;
				}
				var this41 = value12;
				neighbors_6 = this41;
			} else {
				if(!(x11 >= 0 && y10 >= 0 && x11 < blackAndWhite.getUInt16(0) && y10 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x13 = x11;
					var this_y13 = y10;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x13,this_y13)));
				}
				var position13 = (y10 * blackAndWhite.getUInt16(0) + x11) * 4;
				position13 += vision_ds_Image.OFFSET;
				var value13 = blackAndWhite.b[position13] << 24 | blackAndWhite.b[position13 + 1] << 16 | blackAndWhite.b[position13 + 2] << 8 | blackAndWhite.b[position13 + 3];
				if(value13 == null) {
					value13 = 0;
				}
				var this42 = value13;
				neighbors_6 = this42;
			}
			var y12 = y + 1;
			if(!(x >= 0 && y12 >= 0 && x < blackAndWhite.getUInt16(0) && y12 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this43 = [x,blackAndWhite.getUInt16(0) - 1];
				var values28 = this43;
				var max14 = values28[0];
				var _g60 = 0;
				var _g61 = values28.length;
				while(_g60 < _g61) {
					var i28 = _g60++;
					if(values28[i28] > max14) {
						max14 = values28[i28];
					}
				}
				var this44 = [max14,0];
				var values29 = this44;
				var min14 = values29[0];
				var _g62 = 0;
				var _g63 = values29.length;
				while(_g62 < _g63) {
					var i29 = _g62++;
					if(values29[i29] < min14) {
						min14 = values29[i29];
					}
				}
				var x13 = min14;
				var this45 = [y12,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values30 = this45;
				var max15 = values30[0];
				var _g64 = 0;
				var _g65 = values30.length;
				while(_g64 < _g65) {
					var i30 = _g64++;
					if(values30[i30] > max15) {
						max15 = values30[i30];
					}
				}
				var this46 = [max15,0];
				var values31 = this46;
				var min15 = values31[0];
				var _g66 = 0;
				var _g67 = values31.length;
				while(_g66 < _g67) {
					var i31 = _g66++;
					if(values31[i31] < min15) {
						min15 = values31[i31];
					}
				}
				var y13 = min15;
				if(!(x13 >= 0 && y13 >= 0 && x13 < blackAndWhite.getUInt16(0) && y13 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x14 = x13;
					var this_y14 = y13;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x14,this_y14)));
				}
				var position14 = (y13 * blackAndWhite.getUInt16(0) + x13) * 4;
				position14 += vision_ds_Image.OFFSET;
				var value14 = blackAndWhite.b[position14] << 24 | blackAndWhite.b[position14 + 1] << 16 | blackAndWhite.b[position14 + 2] << 8 | blackAndWhite.b[position14 + 3];
				if(value14 == null) {
					value14 = 0;
				}
				var this47 = value14;
				neighbors_7 = this47;
			} else {
				if(!(x >= 0 && y12 >= 0 && x < blackAndWhite.getUInt16(0) && y12 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x15 = x;
					var this_y15 = y12;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x15,this_y15)));
				}
				var position15 = (y12 * blackAndWhite.getUInt16(0) + x) * 4;
				position15 += vision_ds_Image.OFFSET;
				var value15 = blackAndWhite.b[position15] << 24 | blackAndWhite.b[position15 + 1] << 16 | blackAndWhite.b[position15 + 2] << 8 | blackAndWhite.b[position15 + 3];
				if(value15 == null) {
					value15 = 0;
				}
				var this48 = value15;
				neighbors_7 = this48;
			}
			var x14 = x + 1;
			var y14 = y + 1;
			if(!(x14 >= 0 && y14 >= 0 && x14 < blackAndWhite.getUInt16(0) && y14 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this49 = [x14,blackAndWhite.getUInt16(0) - 1];
				var values32 = this49;
				var max16 = values32[0];
				var _g68 = 0;
				var _g69 = values32.length;
				while(_g68 < _g69) {
					var i32 = _g68++;
					if(values32[i32] > max16) {
						max16 = values32[i32];
					}
				}
				var this50 = [max16,0];
				var values33 = this50;
				var min16 = values33[0];
				var _g70 = 0;
				var _g71 = values33.length;
				while(_g70 < _g71) {
					var i33 = _g70++;
					if(values33[i33] < min16) {
						min16 = values33[i33];
					}
				}
				var x15 = min16;
				var this51 = [y14,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)) - 1];
				var values34 = this51;
				var max17 = values34[0];
				var _g72 = 0;
				var _g73 = values34.length;
				while(_g72 < _g73) {
					var i34 = _g72++;
					if(values34[i34] > max17) {
						max17 = values34[i34];
					}
				}
				var this52 = [max17,0];
				var values35 = this52;
				var min17 = values35[0];
				var _g74 = 0;
				var _g75 = values35.length;
				while(_g74 < _g75) {
					var i35 = _g74++;
					if(values35[i35] < min17) {
						min17 = values35[i35];
					}
				}
				var y15 = min17;
				if(!(x15 >= 0 && y15 >= 0 && x15 < blackAndWhite.getUInt16(0) && y15 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x16 = x15;
					var this_y16 = y15;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x16,this_y16)));
				}
				var position16 = (y15 * blackAndWhite.getUInt16(0) + x15) * 4;
				position16 += vision_ds_Image.OFFSET;
				var value16 = blackAndWhite.b[position16] << 24 | blackAndWhite.b[position16 + 1] << 16 | blackAndWhite.b[position16 + 2] << 8 | blackAndWhite.b[position16 + 3];
				if(value16 == null) {
					value16 = 0;
				}
				var this53 = value16;
				neighbors_8 = this53;
			} else {
				if(!(x14 >= 0 && y14 >= 0 && x14 < blackAndWhite.getUInt16(0) && y14 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x17 = x14;
					var this_y17 = y14;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x17,this_y17)));
				}
				var position17 = (y14 * blackAndWhite.getUInt16(0) + x14) * 4;
				position17 += vision_ds_Image.OFFSET;
				var value17 = blackAndWhite.b[position17] << 24 | blackAndWhite.b[position17 + 1] << 16 | blackAndWhite.b[position17 + 2] << 8 | blackAndWhite.b[position17 + 3];
				if(value17 == null) {
					value17 = 0;
				}
				var this54 = value17;
				neighbors_8 = this54;
			}
			var sobelCalculationIterationLTR = (neighbors_0 >> 16 & 255) * -3 + (neighbors_3 >> 16 & 255) * -10 + (neighbors_6 >> 16 & 255) * -3 + (neighbors_2 >> 16 & 255) * 3 + (neighbors_5 >> 16 & 255) * 10 + (neighbors_8 >> 16 & 255) * 3;
			if(Math.abs(sobelCalculationIterationLTR) > threshold) {
				var this55 = 0;
				var color = this55;
				var Alpha = 255;
				if(Alpha == null) {
					Alpha = 255;
				}
				color &= -16711681;
				color |= 16711680;
				color &= -65281;
				color |= 65280;
				color &= -256;
				color |= 255;
				color &= 16777215;
				color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
				var color1 = color;
				if(!(x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)))) {
					var this_x18 = x;
					var this_y18 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edges,new vision_ds_Point2D(this_x18,this_y18)));
				} else if(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g76 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g77 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g78 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var edges1 = edges.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g76,_g77,_g78,edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edges1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x16 = view.x + view.width / 2 - c;
								var y16 = view.y + view.height / 2;
								if(y16 == null) {
									y16 = 0;
								}
								if(x16 == null) {
									x16 = 0;
								}
								var f1_x = x16;
								var f1_y = y16;
								var x17 = view.x + view.width / 2 + c;
								var y17 = view.y + view.height / 2;
								if(y17 == null) {
									y17 = 0;
								}
								if(x17 == null) {
									x17 = 0;
								}
								var f2_x = x17;
								var f2_y = y17;
								var x18 = x;
								var y18 = y;
								if(y18 == null) {
									y18 = 0;
								}
								if(x18 == null) {
									x18 = 0;
								}
								var p_x = x18;
								var p_y = y18;
								var x19 = p_x - f1_x;
								var y19 = p_y - f1_y;
								var x20 = p_x - f2_x;
								var y20 = p_y - f2_y;
								has = Math.sqrt(x19 * x19 + y19 * y19) + Math.sqrt(x20 * x20 + y20 * y20) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x21 = view.x + view.width / 2;
								var y21 = view.y + view.height / 2 - c1;
								if(y21 == null) {
									y21 = 0;
								}
								if(x21 == null) {
									x21 = 0;
								}
								var f1_x1 = x21;
								var f1_y1 = y21;
								var x22 = view.x + view.width / 2;
								var y22 = view.y + view.height / 2 + c1;
								if(y22 == null) {
									y22 = 0;
								}
								if(x22 == null) {
									x22 = 0;
								}
								var f2_x1 = x22;
								var f2_y1 = y22;
								var x23 = x;
								var y23 = y;
								if(y23 == null) {
									y23 = 0;
								}
								if(x23 == null) {
									x23 = 0;
								}
								var p_x1 = x23;
								var p_y1 = y23;
								var x24 = p_x1 - f1_x1;
								var y24 = p_y1 - f1_y1;
								var x25 = p_x1 - f2_x1;
								var y25 = p_y1 - f2_y1;
								has = Math.sqrt(x24 * x24 + y24 * y24) + Math.sqrt(x25 * x25 + y25 * y25) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x26 = x;
								var y26 = y;
								if(y26 == null) {
									y26 = 0;
								}
								if(x26 == null) {
									x26 = 0;
								}
								var point1_x = x26;
								var point1_y = y26;
								var x27 = view.x + view.width / 2;
								var y27 = view.y + view.height / 2;
								if(y27 == null) {
									y27 = 0;
								}
								if(x27 == null) {
									x27 = 0;
								}
								var point2_x = x27;
								var point2_y = y27;
								var x28 = point2_x - point1_x;
								var y28 = point2_y - point1_y;
								has = Math.sqrt(x28 * x28 + y28 * y28) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position18 = (y * edges.getUInt16(0) + x) * 4;
						position18 += vision_ds_Image.OFFSET;
						edges.b[position18] = color1 >> 24 & 255;
						edges.b[position18 + 1] = color1 >> 16 & 255;
						edges.b[position18 + 2] = color1 >> 8 & 255;
						edges.b[position18 + 3] = color1 & 255;
					}
				} else {
					var position19 = (y * edges.getUInt16(0) + x) * 4;
					position19 += vision_ds_Image.OFFSET;
					edges.b[position19] = color1 >> 24 & 255;
					edges.b[position19 + 1] = color1 >> 16 & 255;
					edges.b[position19 + 2] = color1 >> 8 & 255;
					edges.b[position19 + 3] = color1 & 255;
				}
				continue;
			}
			var sobelCalculationIterationTTB = (neighbors_0 >> 16 & 255) * -3 + (neighbors_1 >> 16 & 255) * -10 + (neighbors_2 >> 16 & 255) * -3 + (neighbors_6 >> 16 & 255) * 3 + (neighbors_7 >> 16 & 255) * 10 + (neighbors_8 >> 16 & 255) * 3;
			if(Math.abs(sobelCalculationIterationTTB) > threshold) {
				var this56 = 0;
				var color2 = this56;
				var Alpha1 = 255;
				if(Alpha1 == null) {
					Alpha1 = 255;
				}
				color2 &= -16711681;
				color2 |= 16711680;
				color2 &= -65281;
				color2 |= 65280;
				color2 &= -256;
				color2 |= 255;
				color2 &= 16777215;
				color2 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
				var color3 = color2;
				if(!(x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)))) {
					var this_x19 = x;
					var this_y19 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edges,new vision_ds_Point2D(this_x19,this_y19)));
				} else if(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v1 = null;
					var tmp1;
					if(!(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
						tmp1 = x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4));
					} else {
						var has1 = false;
						var view2;
						if(v1 != null) {
							view2 = v1;
						} else {
							var _g79 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g80 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g81 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var edges2 = edges.b;
							var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view2 = new vision_ds_ImageView(_g79,_g80,_g81,edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edges2[view3]);
						}
						switch(view2.shape) {
						case 0:
							has1 = x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y;
							break;
						case 1:
							has1 = !(x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y);
							break;
						case 2:case 3:
							if(view2.width > view2.height) {
								var a2 = view2.width / 2;
								var b2 = view2.height / 2;
								var c2 = Math.sqrt(a2 * a2 - b2 * b2);
								var x29 = view2.x + view2.width / 2 - c2;
								var y29 = view2.y + view2.height / 2;
								if(y29 == null) {
									y29 = 0;
								}
								if(x29 == null) {
									x29 = 0;
								}
								var f1_x2 = x29;
								var f1_y2 = y29;
								var x30 = view2.x + view2.width / 2 + c2;
								var y30 = view2.y + view2.height / 2;
								if(y30 == null) {
									y30 = 0;
								}
								if(x30 == null) {
									x30 = 0;
								}
								var f2_x2 = x30;
								var f2_y2 = y30;
								var x31 = x;
								var y31 = y;
								if(y31 == null) {
									y31 = 0;
								}
								if(x31 == null) {
									x31 = 0;
								}
								var p_x2 = x31;
								var p_y2 = y31;
								var x32 = p_x2 - f1_x2;
								var y32 = p_y2 - f1_y2;
								var x33 = p_x2 - f2_x2;
								var y33 = p_y2 - f2_y2;
								has1 = Math.sqrt(x32 * x32 + y32 * y32) + Math.sqrt(x33 * x33 + y33 * y33) <= view2.width;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else if(view2.height > view2.width) {
								var a3 = view2.height / 2;
								var b3 = view2.width / 2;
								var c3 = Math.sqrt(a3 * a3 - b3 * b3);
								var x34 = view2.x + view2.width / 2;
								var y34 = view2.y + view2.height / 2 - c3;
								if(y34 == null) {
									y34 = 0;
								}
								if(x34 == null) {
									x34 = 0;
								}
								var f1_x3 = x34;
								var f1_y3 = y34;
								var x35 = view2.x + view2.width / 2;
								var y35 = view2.y + view2.height / 2 + c3;
								if(y35 == null) {
									y35 = 0;
								}
								if(x35 == null) {
									x35 = 0;
								}
								var f2_x3 = x35;
								var f2_y3 = y35;
								var x36 = x;
								var y36 = y;
								if(y36 == null) {
									y36 = 0;
								}
								if(x36 == null) {
									x36 = 0;
								}
								var p_x3 = x36;
								var p_y3 = y36;
								var x37 = p_x3 - f1_x3;
								var y37 = p_y3 - f1_y3;
								var x38 = p_x3 - f2_x3;
								var y38 = p_y3 - f2_y3;
								has1 = Math.sqrt(x37 * x37 + y37 * y37) + Math.sqrt(x38 * x38 + y38 * y38) <= view2.height;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else {
								var x39 = x;
								var y39 = y;
								if(y39 == null) {
									y39 = 0;
								}
								if(x39 == null) {
									x39 = 0;
								}
								var point1_x1 = x39;
								var point1_y1 = y39;
								var x40 = view2.x + view2.width / 2;
								var y40 = view2.y + view2.height / 2;
								if(y40 == null) {
									y40 = 0;
								}
								if(x40 == null) {
									x40 = 0;
								}
								var point2_x1 = x40;
								var point2_y1 = y40;
								var x41 = point2_x1 - point1_x1;
								var y41 = point2_y1 - point1_y1;
								has1 = Math.sqrt(x41 * x41 + y41 * y41) <= view2.width / 2;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							}
							break;
						case 4:
							has1 = Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
							break;
						case 5:
							has1 = !(Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
							break;
						}
						tmp1 = has1;
					}
					if(tmp1) {
						var position20 = (y * edges.getUInt16(0) + x) * 4;
						position20 += vision_ds_Image.OFFSET;
						edges.b[position20] = color3 >> 24 & 255;
						edges.b[position20 + 1] = color3 >> 16 & 255;
						edges.b[position20 + 2] = color3 >> 8 & 255;
						edges.b[position20 + 3] = color3 & 255;
					}
				} else {
					var position21 = (y * edges.getUInt16(0) + x) * 4;
					position21 += vision_ds_Image.OFFSET;
					edges.b[position21] = color3 >> 24 & 255;
					edges.b[position21 + 1] = color3 >> 16 & 255;
					edges.b[position21 + 2] = color3 >> 8 & 255;
					edges.b[position21 + 3] = color3 & 255;
				}
				continue;
			}
		}
	}
	var intermediate = vision_ds_Image.clone(edges);
	var _g = 0;
	var _g1 = intermediate.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var this1;
			if(!(x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)))) {
				var this2 = [x,edges.getUInt16(0) - 1];
				var values = this2;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i = _g4++;
					if(values[i] > max) {
						max = values[i];
					}
				}
				var this3 = [max,0];
				var values1 = this3;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i1 = _g6++;
					if(values1[i1] < min) {
						min = values1[i1];
					}
				}
				var x1 = min;
				var this4 = [y,Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) - 1];
				var values2 = this4;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i2 = _g8++;
					if(values2[i2] > max1) {
						max1 = values2[i2];
					}
				}
				var this5 = [max1,0];
				var values3 = this5;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i3 = _g10++;
					if(values3[i3] < min1) {
						min1 = values3[i3];
					}
				}
				var y1 = min1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < edges.getUInt16(0) && y1 < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edges,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y1 * edges.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				var value = edges.b[position] << 24 | edges.b[position + 1] << 16 | edges.b[position + 2] << 8 | edges.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this6 = value;
				this1 = this6;
			} else {
				if(!(x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edges,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y * edges.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = edges.b[position1] << 24 | edges.b[position1 + 1] << 16 | edges.b[position1 + 2] << 8 | edges.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this7 = value1;
				this1 = this7;
			}
			if((this1 >> 16 & 255) == 0) {
				var candidate = false;
				var X = false;
				var Y = false;
				var tmp;
				var x2 = x + 1;
				var this8;
				if(!(x2 >= 0 && y >= 0 && x2 < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this9 = [x2,image.getUInt16(0) - 1];
					var values4 = this9;
					var max2 = values4[0];
					var _g12 = 0;
					var _g13 = values4.length;
					while(_g12 < _g13) {
						var i4 = _g12++;
						if(values4[i4] > max2) {
							max2 = values4[i4];
						}
					}
					var this10 = [max2,0];
					var values5 = this10;
					var min2 = values5[0];
					var _g14 = 0;
					var _g15 = values5.length;
					while(_g14 < _g15) {
						var i5 = _g14++;
						if(values5[i5] < min2) {
							min2 = values5[i5];
						}
					}
					var x3 = min2;
					var this11 = [y,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
					var values6 = this11;
					var max3 = values6[0];
					var _g16 = 0;
					var _g17 = values6.length;
					while(_g16 < _g17) {
						var i6 = _g16++;
						if(values6[i6] > max3) {
							max3 = values6[i6];
						}
					}
					var this12 = [max3,0];
					var values7 = this12;
					var min3 = values7[0];
					var _g18 = 0;
					var _g19 = values7.length;
					while(_g18 < _g19) {
						var i7 = _g18++;
						if(values7[i7] < min3) {
							min3 = values7[i7];
						}
					}
					var y2 = min3;
					if(!(x3 >= 0 && y2 >= 0 && x3 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this_x2 = x3;
						var this_y2 = y2;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x2,this_y2)));
					}
					var position2 = (y2 * image.getUInt16(0) + x3) * 4;
					position2 += vision_ds_Image.OFFSET;
					var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
					if(value2 == null) {
						value2 = 0;
					}
					var this13 = value2;
					this8 = this13;
				} else {
					if(!(x2 >= 0 && y >= 0 && x2 < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this_x3 = x2;
						var this_y3 = y;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x3,this_y3)));
					}
					var position3 = (y * image.getUInt16(0) + x2) * 4;
					position3 += vision_ds_Image.OFFSET;
					var value3 = image.b[position3] << 24 | image.b[position3 + 1] << 16 | image.b[position3 + 2] << 8 | image.b[position3 + 3];
					if(value3 == null) {
						value3 = 0;
					}
					var this14 = value3;
					this8 = this14;
				}
				if((this8 >> 16 & 255) == 255) {
					var x4 = x - 1;
					var this15;
					if(!(x4 >= 0 && y >= 0 && x4 < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this16 = [x4,image.getUInt16(0) - 1];
						var values8 = this16;
						var max4 = values8[0];
						var _g20 = 0;
						var _g21 = values8.length;
						while(_g20 < _g21) {
							var i8 = _g20++;
							if(values8[i8] > max4) {
								max4 = values8[i8];
							}
						}
						var this17 = [max4,0];
						var values9 = this17;
						var min4 = values9[0];
						var _g22 = 0;
						var _g23 = values9.length;
						while(_g22 < _g23) {
							var i9 = _g22++;
							if(values9[i9] < min4) {
								min4 = values9[i9];
							}
						}
						var x5 = min4;
						var this18 = [y,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
						var values10 = this18;
						var max5 = values10[0];
						var _g24 = 0;
						var _g25 = values10.length;
						while(_g24 < _g25) {
							var i10 = _g24++;
							if(values10[i10] > max5) {
								max5 = values10[i10];
							}
						}
						var this19 = [max5,0];
						var values11 = this19;
						var min5 = values11[0];
						var _g26 = 0;
						var _g27 = values11.length;
						while(_g26 < _g27) {
							var i11 = _g26++;
							if(values11[i11] < min5) {
								min5 = values11[i11];
							}
						}
						var y3 = min5;
						if(!(x5 >= 0 && y3 >= 0 && x5 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
							var this_x4 = x5;
							var this_y4 = y3;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x4,this_y4)));
						}
						var position4 = (y3 * image.getUInt16(0) + x5) * 4;
						position4 += vision_ds_Image.OFFSET;
						var value4 = image.b[position4] << 24 | image.b[position4 + 1] << 16 | image.b[position4 + 2] << 8 | image.b[position4 + 3];
						if(value4 == null) {
							value4 = 0;
						}
						var this20 = value4;
						this15 = this20;
					} else {
						if(!(x4 >= 0 && y >= 0 && x4 < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
							var this_x5 = x4;
							var this_y5 = y;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x5,this_y5)));
						}
						var position5 = (y * image.getUInt16(0) + x4) * 4;
						position5 += vision_ds_Image.OFFSET;
						var value5 = image.b[position5] << 24 | image.b[position5 + 1] << 16 | image.b[position5 + 2] << 8 | image.b[position5 + 3];
						if(value5 == null) {
							value5 = 0;
						}
						var this21 = value5;
						this15 = this21;
					}
					tmp = (this15 >> 16 & 255) == 255;
				} else {
					tmp = false;
				}
				if(tmp) {
					candidate = true;
					X = true;
				}
				var tmp1;
				var y4 = y + 1;
				var this22;
				if(!(x >= 0 && y4 >= 0 && x < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this23 = [x,image.getUInt16(0) - 1];
					var values12 = this23;
					var max6 = values12[0];
					var _g28 = 0;
					var _g29 = values12.length;
					while(_g28 < _g29) {
						var i12 = _g28++;
						if(values12[i12] > max6) {
							max6 = values12[i12];
						}
					}
					var this24 = [max6,0];
					var values13 = this24;
					var min6 = values13[0];
					var _g30 = 0;
					var _g31 = values13.length;
					while(_g30 < _g31) {
						var i13 = _g30++;
						if(values13[i13] < min6) {
							min6 = values13[i13];
						}
					}
					var x6 = min6;
					var this25 = [y4,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
					var values14 = this25;
					var max7 = values14[0];
					var _g32 = 0;
					var _g33 = values14.length;
					while(_g32 < _g33) {
						var i14 = _g32++;
						if(values14[i14] > max7) {
							max7 = values14[i14];
						}
					}
					var this26 = [max7,0];
					var values15 = this26;
					var min7 = values15[0];
					var _g34 = 0;
					var _g35 = values15.length;
					while(_g34 < _g35) {
						var i15 = _g34++;
						if(values15[i15] < min7) {
							min7 = values15[i15];
						}
					}
					var y5 = min7;
					if(!(x6 >= 0 && y5 >= 0 && x6 < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this_x6 = x6;
						var this_y6 = y5;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x6,this_y6)));
					}
					var position6 = (y5 * image.getUInt16(0) + x6) * 4;
					position6 += vision_ds_Image.OFFSET;
					var value6 = image.b[position6] << 24 | image.b[position6 + 1] << 16 | image.b[position6 + 2] << 8 | image.b[position6 + 3];
					if(value6 == null) {
						value6 = 0;
					}
					var this27 = value6;
					this22 = this27;
				} else {
					if(!(x >= 0 && y4 >= 0 && x < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this_x7 = x;
						var this_y7 = y4;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x7,this_y7)));
					}
					var position7 = (y4 * image.getUInt16(0) + x) * 4;
					position7 += vision_ds_Image.OFFSET;
					var value7 = image.b[position7] << 24 | image.b[position7 + 1] << 16 | image.b[position7 + 2] << 8 | image.b[position7 + 3];
					if(value7 == null) {
						value7 = 0;
					}
					var this28 = value7;
					this22 = this28;
				}
				if((this22 >> 16 & 255) == 255) {
					var y6 = y - 1;
					var this29;
					if(!(x >= 0 && y6 >= 0 && x < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this30 = [x,image.getUInt16(0) - 1];
						var values16 = this30;
						var max8 = values16[0];
						var _g36 = 0;
						var _g37 = values16.length;
						while(_g36 < _g37) {
							var i16 = _g36++;
							if(values16[i16] > max8) {
								max8 = values16[i16];
							}
						}
						var this31 = [max8,0];
						var values17 = this31;
						var min8 = values17[0];
						var _g38 = 0;
						var _g39 = values17.length;
						while(_g38 < _g39) {
							var i17 = _g38++;
							if(values17[i17] < min8) {
								min8 = values17[i17];
							}
						}
						var x7 = min8;
						var this32 = [y6,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1];
						var values18 = this32;
						var max9 = values18[0];
						var _g40 = 0;
						var _g41 = values18.length;
						while(_g40 < _g41) {
							var i18 = _g40++;
							if(values18[i18] > max9) {
								max9 = values18[i18];
							}
						}
						var this33 = [max9,0];
						var values19 = this33;
						var min9 = values19[0];
						var _g42 = 0;
						var _g43 = values19.length;
						while(_g42 < _g43) {
							var i19 = _g42++;
							if(values19[i19] < min9) {
								min9 = values19[i19];
							}
						}
						var y7 = min9;
						if(!(x7 >= 0 && y7 >= 0 && x7 < image.getUInt16(0) && y7 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
							var this_x8 = x7;
							var this_y8 = y7;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x8,this_y8)));
						}
						var position8 = (y7 * image.getUInt16(0) + x7) * 4;
						position8 += vision_ds_Image.OFFSET;
						var value8 = image.b[position8] << 24 | image.b[position8 + 1] << 16 | image.b[position8 + 2] << 8 | image.b[position8 + 3];
						if(value8 == null) {
							value8 = 0;
						}
						var this34 = value8;
						this29 = this34;
					} else {
						if(!(x >= 0 && y6 >= 0 && x < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
							var this_x9 = x;
							var this_y9 = y6;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x9,this_y9)));
						}
						var position9 = (y6 * image.getUInt16(0) + x) * 4;
						position9 += vision_ds_Image.OFFSET;
						var value9 = image.b[position9] << 24 | image.b[position9 + 1] << 16 | image.b[position9 + 2] << 8 | image.b[position9 + 3];
						if(value9 == null) {
							value9 = 0;
						}
						var this35 = value9;
						this29 = this35;
					}
					tmp1 = (this29 >> 16 & 255) == 255;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					candidate = true;
					Y = true;
				}
				if(candidate) {
					var this36 = 0;
					var color = this36;
					var Alpha = 255;
					if(Alpha == null) {
						Alpha = 255;
					}
					color &= -16711681;
					color |= 16711680;
					color &= -65281;
					color |= 65280;
					color &= -256;
					color |= 255;
					color &= 16777215;
					color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
					var color1 = color;
					if(!(x >= 0 && y >= 0 && x < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)))) {
						var this_x10 = x;
						var this_y10 = y;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(intermediate,new vision_ds_Point2D(this_x10,this_y10)));
					} else if(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
						var v = null;
						var tmp2;
						if(!(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
							tmp2 = x >= 0 && y >= 0 && x < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4));
						} else {
							var has = false;
							var view;
							if(v != null) {
								view = v;
							} else {
								var _g44 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES);
								var _g45 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
								var _g46 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
								var intermediate1 = intermediate.b;
								var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
								view = new vision_ds_ImageView(_g44,_g45,_g46,intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),intermediate1[view1]);
							}
							switch(view.shape) {
							case 0:
								has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
								break;
							case 1:
								has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
								break;
							case 2:case 3:
								if(view.width > view.height) {
									var a = view.width / 2;
									var b = view.height / 2;
									var c = Math.sqrt(a * a - b * b);
									var x8 = view.x + view.width / 2 - c;
									var y8 = view.y + view.height / 2;
									if(y8 == null) {
										y8 = 0;
									}
									if(x8 == null) {
										x8 = 0;
									}
									var f1_x = x8;
									var f1_y = y8;
									var x9 = view.x + view.width / 2 + c;
									var y9 = view.y + view.height / 2;
									if(y9 == null) {
										y9 = 0;
									}
									if(x9 == null) {
										x9 = 0;
									}
									var f2_x = x9;
									var f2_y = y9;
									var x10 = x;
									var y10 = y;
									if(y10 == null) {
										y10 = 0;
									}
									if(x10 == null) {
										x10 = 0;
									}
									var p_x = x10;
									var p_y = y10;
									var x11 = p_x - f1_x;
									var y11 = p_y - f1_y;
									var x12 = p_x - f2_x;
									var y12 = p_y - f2_y;
									has = Math.sqrt(x11 * x11 + y11 * y11) + Math.sqrt(x12 * x12 + y12 * y12) <= view.width;
									if(view.shape == 3) {
										has = !has;
									}
								} else if(view.height > view.width) {
									var a1 = view.height / 2;
									var b1 = view.width / 2;
									var c1 = Math.sqrt(a1 * a1 - b1 * b1);
									var x13 = view.x + view.width / 2;
									var y13 = view.y + view.height / 2 - c1;
									if(y13 == null) {
										y13 = 0;
									}
									if(x13 == null) {
										x13 = 0;
									}
									var f1_x1 = x13;
									var f1_y1 = y13;
									var x14 = view.x + view.width / 2;
									var y14 = view.y + view.height / 2 + c1;
									if(y14 == null) {
										y14 = 0;
									}
									if(x14 == null) {
										x14 = 0;
									}
									var f2_x1 = x14;
									var f2_y1 = y14;
									var x15 = x;
									var y15 = y;
									if(y15 == null) {
										y15 = 0;
									}
									if(x15 == null) {
										x15 = 0;
									}
									var p_x1 = x15;
									var p_y1 = y15;
									var x16 = p_x1 - f1_x1;
									var y16 = p_y1 - f1_y1;
									var x17 = p_x1 - f2_x1;
									var y17 = p_y1 - f2_y1;
									has = Math.sqrt(x16 * x16 + y16 * y16) + Math.sqrt(x17 * x17 + y17 * y17) <= view.height;
									if(view.shape == 3) {
										has = !has;
									}
								} else {
									var x18 = x;
									var y18 = y;
									if(y18 == null) {
										y18 = 0;
									}
									if(x18 == null) {
										x18 = 0;
									}
									var point1_x = x18;
									var point1_y = y18;
									var x19 = view.x + view.width / 2;
									var y19 = view.y + view.height / 2;
									if(y19 == null) {
										y19 = 0;
									}
									if(x19 == null) {
										x19 = 0;
									}
									var point2_x = x19;
									var point2_y = y19;
									var x20 = point2_x - point1_x;
									var y20 = point2_y - point1_y;
									has = Math.sqrt(x20 * x20 + y20 * y20) <= view.width / 2;
									if(view.shape == 3) {
										has = !has;
									}
								}
								break;
							case 4:
								has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
								break;
							case 5:
								has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
								break;
							}
							tmp2 = has;
						}
						if(tmp2) {
							var position10 = (y * intermediate.getUInt16(0) + x) * 4;
							position10 += vision_ds_Image.OFFSET;
							intermediate.b[position10] = color1 >> 24 & 255;
							intermediate.b[position10 + 1] = color1 >> 16 & 255;
							intermediate.b[position10 + 2] = color1 >> 8 & 255;
							intermediate.b[position10 + 3] = color1 & 255;
						}
					} else {
						var position11 = (y * intermediate.getUInt16(0) + x) * 4;
						position11 += vision_ds_Image.OFFSET;
						intermediate.b[position11] = color1 >> 24 & 255;
						intermediate.b[position11 + 1] = color1 >> 16 & 255;
						intermediate.b[position11 + 2] = color1 >> 8 & 255;
						intermediate.b[position11 + 3] = color1 & 255;
					}
					if(X) {
						var x21 = x + 1;
						if(x21 >= 0 && y >= 0 && x21 < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4))) {
							var x22 = x + 1;
							var this37 = 0;
							var color2 = this37;
							var Alpha1 = 255;
							if(Alpha1 == null) {
								Alpha1 = 255;
							}
							color2 &= -16711681;
							color2 |= 0;
							color2 &= -65281;
							color2 |= 0;
							color2 &= -256;
							color2 |= 0;
							color2 &= 16777215;
							color2 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
							var color3 = color2;
							if(!(x22 >= 0 && y >= 0 && x22 < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)))) {
								var this_x11 = x22;
								var this_y11 = y;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(intermediate,new vision_ds_Point2D(this_x11,this_y11)));
							} else if(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v1 = null;
								var tmp3;
								if(!(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
									tmp3 = x22 >= 0 && y >= 0 && x22 < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4));
								} else {
									var has1 = false;
									var view2;
									if(v1 != null) {
										view2 = v1;
									} else {
										var _g47 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g48 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g49 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var intermediate2 = intermediate.b;
										var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view2 = new vision_ds_ImageView(_g47,_g48,_g49,intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),intermediate2[view3]);
									}
									switch(view2.shape) {
									case 0:
										has1 = x22 < view2.x + view2.width && y < view2.y + view2.height && x22 >= view2.x && y >= view2.y;
										break;
									case 1:
										has1 = !(x22 < view2.x + view2.width && y < view2.y + view2.height && x22 >= view2.x && y >= view2.y);
										break;
									case 2:case 3:
										if(view2.width > view2.height) {
											var a2 = view2.width / 2;
											var b2 = view2.height / 2;
											var c2 = Math.sqrt(a2 * a2 - b2 * b2);
											var x23 = view2.x + view2.width / 2 - c2;
											var y21 = view2.y + view2.height / 2;
											if(y21 == null) {
												y21 = 0;
											}
											if(x23 == null) {
												x23 = 0;
											}
											var f1_x2 = x23;
											var f1_y2 = y21;
											var x24 = view2.x + view2.width / 2 + c2;
											var y22 = view2.y + view2.height / 2;
											if(y22 == null) {
												y22 = 0;
											}
											if(x24 == null) {
												x24 = 0;
											}
											var f2_x2 = x24;
											var f2_y2 = y22;
											var x25 = x22;
											var y23 = y;
											if(y23 == null) {
												y23 = 0;
											}
											if(x25 == null) {
												x25 = 0;
											}
											var p_x2 = x25;
											var p_y2 = y23;
											var x26 = p_x2 - f1_x2;
											var y24 = p_y2 - f1_y2;
											var x27 = p_x2 - f2_x2;
											var y25 = p_y2 - f2_y2;
											has1 = Math.sqrt(x26 * x26 + y24 * y24) + Math.sqrt(x27 * x27 + y25 * y25) <= view2.width;
											if(view2.shape == 3) {
												has1 = !has1;
											}
										} else if(view2.height > view2.width) {
											var a3 = view2.height / 2;
											var b3 = view2.width / 2;
											var c3 = Math.sqrt(a3 * a3 - b3 * b3);
											var x28 = view2.x + view2.width / 2;
											var y26 = view2.y + view2.height / 2 - c3;
											if(y26 == null) {
												y26 = 0;
											}
											if(x28 == null) {
												x28 = 0;
											}
											var f1_x3 = x28;
											var f1_y3 = y26;
											var x29 = view2.x + view2.width / 2;
											var y27 = view2.y + view2.height / 2 + c3;
											if(y27 == null) {
												y27 = 0;
											}
											if(x29 == null) {
												x29 = 0;
											}
											var f2_x3 = x29;
											var f2_y3 = y27;
											var x30 = x22;
											var y28 = y;
											if(y28 == null) {
												y28 = 0;
											}
											if(x30 == null) {
												x30 = 0;
											}
											var p_x3 = x30;
											var p_y3 = y28;
											var x31 = p_x3 - f1_x3;
											var y29 = p_y3 - f1_y3;
											var x32 = p_x3 - f2_x3;
											var y30 = p_y3 - f2_y3;
											has1 = Math.sqrt(x31 * x31 + y29 * y29) + Math.sqrt(x32 * x32 + y30 * y30) <= view2.height;
											if(view2.shape == 3) {
												has1 = !has1;
											}
										} else {
											var x33 = x22;
											var y31 = y;
											if(y31 == null) {
												y31 = 0;
											}
											if(x33 == null) {
												x33 = 0;
											}
											var point1_x1 = x33;
											var point1_y1 = y31;
											var x34 = view2.x + view2.width / 2;
											var y32 = view2.y + view2.height / 2;
											if(y32 == null) {
												y32 = 0;
											}
											if(x34 == null) {
												x34 = 0;
											}
											var point2_x1 = x34;
											var point2_y1 = y32;
											var x35 = point2_x1 - point1_x1;
											var y33 = point2_y1 - point1_y1;
											has1 = Math.sqrt(x35 * x35 + y33 * y33) <= view2.width / 2;
											if(view2.shape == 3) {
												has1 = !has1;
											}
										}
										break;
									case 4:
										has1 = Math.abs(x22 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
										break;
									case 5:
										has1 = !(Math.abs(x22 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
										break;
									}
									tmp3 = has1;
								}
								if(tmp3) {
									var position12 = (y * intermediate.getUInt16(0) + x22) * 4;
									position12 += vision_ds_Image.OFFSET;
									intermediate.b[position12] = color3 >> 24 & 255;
									intermediate.b[position12 + 1] = color3 >> 16 & 255;
									intermediate.b[position12 + 2] = color3 >> 8 & 255;
									intermediate.b[position12 + 3] = color3 & 255;
								}
							} else {
								var position13 = (y * intermediate.getUInt16(0) + x22) * 4;
								position13 += vision_ds_Image.OFFSET;
								intermediate.b[position13] = color3 >> 24 & 255;
								intermediate.b[position13 + 1] = color3 >> 16 & 255;
								intermediate.b[position13 + 2] = color3 >> 8 & 255;
								intermediate.b[position13 + 3] = color3 & 255;
							}
						}
						var x36 = x - 1;
						if(x36 >= 0 && y >= 0 && x36 < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4))) {
							var x37 = x - 1;
							var this38 = 0;
							var color4 = this38;
							var Alpha2 = 255;
							if(Alpha2 == null) {
								Alpha2 = 255;
							}
							color4 &= -16711681;
							color4 |= 0;
							color4 &= -65281;
							color4 |= 0;
							color4 &= -256;
							color4 |= 0;
							color4 &= 16777215;
							color4 |= (Alpha2 > 255 ? 255 : Alpha2 < 0 ? 0 : Alpha2) << 24;
							var color5 = color4;
							if(!(x37 >= 0 && y >= 0 && x37 < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)))) {
								var this_x12 = x37;
								var this_y12 = y;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(intermediate,new vision_ds_Point2D(this_x12,this_y12)));
							} else if(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v2 = null;
								var tmp4;
								if(!(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
									tmp4 = x37 >= 0 && y >= 0 && x37 < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4));
								} else {
									var has2 = false;
									var view4;
									if(v2 != null) {
										view4 = v2;
									} else {
										var _g50 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g51 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g52 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var intermediate3 = intermediate.b;
										var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view4 = new vision_ds_ImageView(_g50,_g51,_g52,intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),intermediate3[view5]);
									}
									switch(view4.shape) {
									case 0:
										has2 = x37 < view4.x + view4.width && y < view4.y + view4.height && x37 >= view4.x && y >= view4.y;
										break;
									case 1:
										has2 = !(x37 < view4.x + view4.width && y < view4.y + view4.height && x37 >= view4.x && y >= view4.y);
										break;
									case 2:case 3:
										if(view4.width > view4.height) {
											var a4 = view4.width / 2;
											var b4 = view4.height / 2;
											var c4 = Math.sqrt(a4 * a4 - b4 * b4);
											var x38 = view4.x + view4.width / 2 - c4;
											var y34 = view4.y + view4.height / 2;
											if(y34 == null) {
												y34 = 0;
											}
											if(x38 == null) {
												x38 = 0;
											}
											var f1_x4 = x38;
											var f1_y4 = y34;
											var x39 = view4.x + view4.width / 2 + c4;
											var y35 = view4.y + view4.height / 2;
											if(y35 == null) {
												y35 = 0;
											}
											if(x39 == null) {
												x39 = 0;
											}
											var f2_x4 = x39;
											var f2_y4 = y35;
											var x40 = x37;
											var y36 = y;
											if(y36 == null) {
												y36 = 0;
											}
											if(x40 == null) {
												x40 = 0;
											}
											var p_x4 = x40;
											var p_y4 = y36;
											var x41 = p_x4 - f1_x4;
											var y37 = p_y4 - f1_y4;
											var x42 = p_x4 - f2_x4;
											var y38 = p_y4 - f2_y4;
											has2 = Math.sqrt(x41 * x41 + y37 * y37) + Math.sqrt(x42 * x42 + y38 * y38) <= view4.width;
											if(view4.shape == 3) {
												has2 = !has2;
											}
										} else if(view4.height > view4.width) {
											var a5 = view4.height / 2;
											var b5 = view4.width / 2;
											var c5 = Math.sqrt(a5 * a5 - b5 * b5);
											var x43 = view4.x + view4.width / 2;
											var y39 = view4.y + view4.height / 2 - c5;
											if(y39 == null) {
												y39 = 0;
											}
											if(x43 == null) {
												x43 = 0;
											}
											var f1_x5 = x43;
											var f1_y5 = y39;
											var x44 = view4.x + view4.width / 2;
											var y40 = view4.y + view4.height / 2 + c5;
											if(y40 == null) {
												y40 = 0;
											}
											if(x44 == null) {
												x44 = 0;
											}
											var f2_x5 = x44;
											var f2_y5 = y40;
											var x45 = x37;
											var y41 = y;
											if(y41 == null) {
												y41 = 0;
											}
											if(x45 == null) {
												x45 = 0;
											}
											var p_x5 = x45;
											var p_y5 = y41;
											var x46 = p_x5 - f1_x5;
											var y42 = p_y5 - f1_y5;
											var x47 = p_x5 - f2_x5;
											var y43 = p_y5 - f2_y5;
											has2 = Math.sqrt(x46 * x46 + y42 * y42) + Math.sqrt(x47 * x47 + y43 * y43) <= view4.height;
											if(view4.shape == 3) {
												has2 = !has2;
											}
										} else {
											var x48 = x37;
											var y44 = y;
											if(y44 == null) {
												y44 = 0;
											}
											if(x48 == null) {
												x48 = 0;
											}
											var point1_x2 = x48;
											var point1_y2 = y44;
											var x49 = view4.x + view4.width / 2;
											var y45 = view4.y + view4.height / 2;
											if(y45 == null) {
												y45 = 0;
											}
											if(x49 == null) {
												x49 = 0;
											}
											var point2_x2 = x49;
											var point2_y2 = y45;
											var x50 = point2_x2 - point1_x2;
											var y46 = point2_y2 - point1_y2;
											has2 = Math.sqrt(x50 * x50 + y46 * y46) <= view4.width / 2;
											if(view4.shape == 3) {
												has2 = !has2;
											}
										}
										break;
									case 4:
										has2 = Math.abs(x37 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
										break;
									case 5:
										has2 = !(Math.abs(x37 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
										break;
									}
									tmp4 = has2;
								}
								if(tmp4) {
									var position14 = (y * intermediate.getUInt16(0) + x37) * 4;
									position14 += vision_ds_Image.OFFSET;
									intermediate.b[position14] = color5 >> 24 & 255;
									intermediate.b[position14 + 1] = color5 >> 16 & 255;
									intermediate.b[position14 + 2] = color5 >> 8 & 255;
									intermediate.b[position14 + 3] = color5 & 255;
								}
							} else {
								var position15 = (y * intermediate.getUInt16(0) + x37) * 4;
								position15 += vision_ds_Image.OFFSET;
								intermediate.b[position15] = color5 >> 24 & 255;
								intermediate.b[position15 + 1] = color5 >> 16 & 255;
								intermediate.b[position15 + 2] = color5 >> 8 & 255;
								intermediate.b[position15 + 3] = color5 & 255;
							}
						}
					}
					if(Y) {
						var y47 = y + 1;
						if(x >= 0 && y47 >= 0 && x < intermediate.getUInt16(0) && y47 < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4))) {
							var y48 = y + 1;
							var this39 = 0;
							var color6 = this39;
							var Alpha3 = 255;
							if(Alpha3 == null) {
								Alpha3 = 255;
							}
							color6 &= -16711681;
							color6 |= 0;
							color6 &= -65281;
							color6 |= 0;
							color6 &= -256;
							color6 |= 0;
							color6 &= 16777215;
							color6 |= (Alpha3 > 255 ? 255 : Alpha3 < 0 ? 0 : Alpha3) << 24;
							var color7 = color6;
							if(!(x >= 0 && y48 >= 0 && x < intermediate.getUInt16(0) && y48 < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)))) {
								var this_x13 = x;
								var this_y13 = y48;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(intermediate,new vision_ds_Point2D(this_x13,this_y13)));
							} else if(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v3 = null;
								var tmp5;
								if(!(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
									tmp5 = x >= 0 && y48 >= 0 && x < intermediate.getUInt16(0) && y48 < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4));
								} else {
									var has3 = false;
									var view6;
									if(v3 != null) {
										view6 = v3;
									} else {
										var _g53 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g54 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g55 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var intermediate4 = intermediate.b;
										var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view6 = new vision_ds_ImageView(_g53,_g54,_g55,intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),intermediate4[view7]);
									}
									switch(view6.shape) {
									case 0:
										has3 = x < view6.x + view6.width && y48 < view6.y + view6.height && x >= view6.x && y48 >= view6.y;
										break;
									case 1:
										has3 = !(x < view6.x + view6.width && y48 < view6.y + view6.height && x >= view6.x && y48 >= view6.y);
										break;
									case 2:case 3:
										if(view6.width > view6.height) {
											var a6 = view6.width / 2;
											var b6 = view6.height / 2;
											var c6 = Math.sqrt(a6 * a6 - b6 * b6);
											var x51 = view6.x + view6.width / 2 - c6;
											var y49 = view6.y + view6.height / 2;
											if(y49 == null) {
												y49 = 0;
											}
											if(x51 == null) {
												x51 = 0;
											}
											var f1_x6 = x51;
											var f1_y6 = y49;
											var x52 = view6.x + view6.width / 2 + c6;
											var y50 = view6.y + view6.height / 2;
											if(y50 == null) {
												y50 = 0;
											}
											if(x52 == null) {
												x52 = 0;
											}
											var f2_x6 = x52;
											var f2_y6 = y50;
											var x53 = x;
											var y51 = y48;
											if(y51 == null) {
												y51 = 0;
											}
											if(x53 == null) {
												x53 = 0;
											}
											var p_x6 = x53;
											var p_y6 = y51;
											var x54 = p_x6 - f1_x6;
											var y52 = p_y6 - f1_y6;
											var x55 = p_x6 - f2_x6;
											var y53 = p_y6 - f2_y6;
											has3 = Math.sqrt(x54 * x54 + y52 * y52) + Math.sqrt(x55 * x55 + y53 * y53) <= view6.width;
											if(view6.shape == 3) {
												has3 = !has3;
											}
										} else if(view6.height > view6.width) {
											var a7 = view6.height / 2;
											var b7 = view6.width / 2;
											var c7 = Math.sqrt(a7 * a7 - b7 * b7);
											var x56 = view6.x + view6.width / 2;
											var y54 = view6.y + view6.height / 2 - c7;
											if(y54 == null) {
												y54 = 0;
											}
											if(x56 == null) {
												x56 = 0;
											}
											var f1_x7 = x56;
											var f1_y7 = y54;
											var x57 = view6.x + view6.width / 2;
											var y55 = view6.y + view6.height / 2 + c7;
											if(y55 == null) {
												y55 = 0;
											}
											if(x57 == null) {
												x57 = 0;
											}
											var f2_x7 = x57;
											var f2_y7 = y55;
											var x58 = x;
											var y56 = y48;
											if(y56 == null) {
												y56 = 0;
											}
											if(x58 == null) {
												x58 = 0;
											}
											var p_x7 = x58;
											var p_y7 = y56;
											var x59 = p_x7 - f1_x7;
											var y57 = p_y7 - f1_y7;
											var x60 = p_x7 - f2_x7;
											var y58 = p_y7 - f2_y7;
											has3 = Math.sqrt(x59 * x59 + y57 * y57) + Math.sqrt(x60 * x60 + y58 * y58) <= view6.height;
											if(view6.shape == 3) {
												has3 = !has3;
											}
										} else {
											var x61 = x;
											var y59 = y48;
											if(y59 == null) {
												y59 = 0;
											}
											if(x61 == null) {
												x61 = 0;
											}
											var point1_x3 = x61;
											var point1_y3 = y59;
											var x62 = view6.x + view6.width / 2;
											var y60 = view6.y + view6.height / 2;
											if(y60 == null) {
												y60 = 0;
											}
											if(x62 == null) {
												x62 = 0;
											}
											var point2_x3 = x62;
											var point2_y3 = y60;
											var x63 = point2_x3 - point1_x3;
											var y61 = point2_y3 - point1_y3;
											has3 = Math.sqrt(x63 * x63 + y61 * y61) <= view6.width / 2;
											if(view6.shape == 3) {
												has3 = !has3;
											}
										}
										break;
									case 4:
										has3 = Math.abs(x - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y48 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
										break;
									case 5:
										has3 = !(Math.abs(x - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y48 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
										break;
									}
									tmp5 = has3;
								}
								if(tmp5) {
									var position16 = (y48 * intermediate.getUInt16(0) + x) * 4;
									position16 += vision_ds_Image.OFFSET;
									intermediate.b[position16] = color7 >> 24 & 255;
									intermediate.b[position16 + 1] = color7 >> 16 & 255;
									intermediate.b[position16 + 2] = color7 >> 8 & 255;
									intermediate.b[position16 + 3] = color7 & 255;
								}
							} else {
								var position17 = (y48 * intermediate.getUInt16(0) + x) * 4;
								position17 += vision_ds_Image.OFFSET;
								intermediate.b[position17] = color7 >> 24 & 255;
								intermediate.b[position17 + 1] = color7 >> 16 & 255;
								intermediate.b[position17 + 2] = color7 >> 8 & 255;
								intermediate.b[position17 + 3] = color7 & 255;
							}
						}
						var y62 = y - 1;
						if(x >= 0 && y62 >= 0 && x < intermediate.getUInt16(0) && y62 < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4))) {
							var y63 = y - 1;
							var this40 = 0;
							var color8 = this40;
							var Alpha4 = 255;
							if(Alpha4 == null) {
								Alpha4 = 255;
							}
							color8 &= -16711681;
							color8 |= 0;
							color8 &= -65281;
							color8 |= 0;
							color8 &= -256;
							color8 |= 0;
							color8 &= 16777215;
							color8 |= (Alpha4 > 255 ? 255 : Alpha4 < 0 ? 0 : Alpha4) << 24;
							var color9 = color8;
							if(!(x >= 0 && y63 >= 0 && x < intermediate.getUInt16(0) && y63 < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)))) {
								var this_x14 = x;
								var this_y14 = y63;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(intermediate,new vision_ds_Point2D(this_x14,this_y14)));
							} else if(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v4 = null;
								var tmp6;
								if(!(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v4 == null) {
									tmp6 = x >= 0 && y63 >= 0 && x < intermediate.getUInt16(0) && y63 < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4));
								} else {
									var has4 = false;
									var view8;
									if(v4 != null) {
										view8 = v4;
									} else {
										var _g56 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g57 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g58 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var intermediate5 = intermediate.b;
										var view9 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view8 = new vision_ds_ImageView(_g56,_g57,_g58,intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),intermediate5[view9]);
									}
									switch(view8.shape) {
									case 0:
										has4 = x < view8.x + view8.width && y63 < view8.y + view8.height && x >= view8.x && y63 >= view8.y;
										break;
									case 1:
										has4 = !(x < view8.x + view8.width && y63 < view8.y + view8.height && x >= view8.x && y63 >= view8.y);
										break;
									case 2:case 3:
										if(view8.width > view8.height) {
											var a8 = view8.width / 2;
											var b8 = view8.height / 2;
											var c8 = Math.sqrt(a8 * a8 - b8 * b8);
											var x64 = view8.x + view8.width / 2 - c8;
											var y64 = view8.y + view8.height / 2;
											if(y64 == null) {
												y64 = 0;
											}
											if(x64 == null) {
												x64 = 0;
											}
											var f1_x8 = x64;
											var f1_y8 = y64;
											var x65 = view8.x + view8.width / 2 + c8;
											var y65 = view8.y + view8.height / 2;
											if(y65 == null) {
												y65 = 0;
											}
											if(x65 == null) {
												x65 = 0;
											}
											var f2_x8 = x65;
											var f2_y8 = y65;
											var x66 = x;
											var y66 = y63;
											if(y66 == null) {
												y66 = 0;
											}
											if(x66 == null) {
												x66 = 0;
											}
											var p_x8 = x66;
											var p_y8 = y66;
											var x67 = p_x8 - f1_x8;
											var y67 = p_y8 - f1_y8;
											var x68 = p_x8 - f2_x8;
											var y68 = p_y8 - f2_y8;
											has4 = Math.sqrt(x67 * x67 + y67 * y67) + Math.sqrt(x68 * x68 + y68 * y68) <= view8.width;
											if(view8.shape == 3) {
												has4 = !has4;
											}
										} else if(view8.height > view8.width) {
											var a9 = view8.height / 2;
											var b9 = view8.width / 2;
											var c9 = Math.sqrt(a9 * a9 - b9 * b9);
											var x69 = view8.x + view8.width / 2;
											var y69 = view8.y + view8.height / 2 - c9;
											if(y69 == null) {
												y69 = 0;
											}
											if(x69 == null) {
												x69 = 0;
											}
											var f1_x9 = x69;
											var f1_y9 = y69;
											var x70 = view8.x + view8.width / 2;
											var y70 = view8.y + view8.height / 2 + c9;
											if(y70 == null) {
												y70 = 0;
											}
											if(x70 == null) {
												x70 = 0;
											}
											var f2_x9 = x70;
											var f2_y9 = y70;
											var x71 = x;
											var y71 = y63;
											if(y71 == null) {
												y71 = 0;
											}
											if(x71 == null) {
												x71 = 0;
											}
											var p_x9 = x71;
											var p_y9 = y71;
											var x72 = p_x9 - f1_x9;
											var y72 = p_y9 - f1_y9;
											var x73 = p_x9 - f2_x9;
											var y73 = p_y9 - f2_y9;
											has4 = Math.sqrt(x72 * x72 + y72 * y72) + Math.sqrt(x73 * x73 + y73 * y73) <= view8.height;
											if(view8.shape == 3) {
												has4 = !has4;
											}
										} else {
											var x74 = x;
											var y74 = y63;
											if(y74 == null) {
												y74 = 0;
											}
											if(x74 == null) {
												x74 = 0;
											}
											var point1_x4 = x74;
											var point1_y4 = y74;
											var x75 = view8.x + view8.width / 2;
											var y75 = view8.y + view8.height / 2;
											if(y75 == null) {
												y75 = 0;
											}
											if(x75 == null) {
												x75 = 0;
											}
											var point2_x4 = x75;
											var point2_y4 = y75;
											var x76 = point2_x4 - point1_x4;
											var y76 = point2_y4 - point1_y4;
											has4 = Math.sqrt(x76 * x76 + y76 * y76) <= view8.width / 2;
											if(view8.shape == 3) {
												has4 = !has4;
											}
										}
										break;
									case 4:
										has4 = Math.abs(x - view8.x - view8.width / 2) / (view8.width / 2) + Math.abs(y63 - view8.y - view8.height / 2) / (view8.height / 2) <= 1;
										break;
									case 5:
										has4 = !(Math.abs(x - view8.x - view8.width / 2) / (view8.width / 2) + Math.abs(y63 - view8.y - view8.height / 2) / (view8.height / 2) <= 1);
										break;
									}
									tmp6 = has4;
								}
								if(tmp6) {
									var position18 = (y63 * intermediate.getUInt16(0) + x) * 4;
									position18 += vision_ds_Image.OFFSET;
									intermediate.b[position18] = color9 >> 24 & 255;
									intermediate.b[position18 + 1] = color9 >> 16 & 255;
									intermediate.b[position18 + 2] = color9 >> 8 & 255;
									intermediate.b[position18 + 3] = color9 & 255;
								}
							} else {
								var position19 = (y63 * intermediate.getUInt16(0) + x) * 4;
								position19 += vision_ds_Image.OFFSET;
								intermediate.b[position19] = color9 >> 24 & 255;
								intermediate.b[position19 + 1] = color9 >> 16 & 255;
								intermediate.b[position19 + 2] = color9 >> 8 & 255;
								intermediate.b[position19 + 3] = color9 & 255;
							}
						}
					}
				}
			}
		}
	}
	return intermediate;
};
var vision_ds_Array2D = function(width,height,fillWith) {
	this.width = width;
	this.height = height;
	haxe_Log.trace(width,{ fileName : "vision/ds/Array2D.hx", lineNumber : 41, className : "vision.ds.Array2D", methodName : "new", customParams : [height]});
	this.inner = [];
	this.inner.length = width * height;
	if(fillWith != null) {
		var _g = 0;
		var _g1 = this.inner.length;
		while(_g < _g1) {
			var i = _g++;
			this.inner[i] = fillWith;
		}
	}
};
$hxClasses["vision.ds.Array2D"] = vision_ds_Array2D;
vision_ds_Array2D.__name__ = "vision.ds.Array2D";
vision_ds_Array2D.prototype = {
	inner: null
	,width: null
	,height: null
	,get: function(x,y) {
		return this.inner[y * this.height + x];
	}
	,set: function(x,y,val) {
		return this.inner[x + y * this.height] = val;
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.inner);
	}
	,fill: function(value) {
		var _g = 0;
		var _g1 = this.inner.length;
		while(_g < _g1) {
			var i = _g++;
			this.inner[i] = value;
		}
		return this;
	}
	,get_length: function() {
		return this.inner.length;
	}
	,set_length: function(value) {
		this.inner.length = value;
		return value;
	}
	,set_width: function(value) {
		this.inner.length = value * this.height;
		return this.width = value;
	}
	,set_height: function(value) {
		this.inner.length = this.width * value;
		return this.height = value;
	}
	,__class__: vision_ds_Array2D
	,__properties__: {set_length:"set_length",get_length:"get_length",set_height:"set_height",set_width:"set_width"}
};
var vision_ds_ByteArray = {};
vision_ds_ByteArray.read = function(this1,index) {
	return this1.b[index];
};
vision_ds_ByteArray.write = function(this1,index,value) {
	this1.b[index] = value;
};
vision_ds_ByteArray._new = function(length) {
	var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
	return this1;
};
var vision_ds_Color = {};
vision_ds_Color.__properties__ = {set_lightness:"set_lightness",get_lightness:"get_lightness",set_brightness:"set_brightness",get_brightness:"get_brightness",set_saturation:"set_saturation",get_saturation:"get_saturation",set_hue:"set_hue",get_hue:"get_hue",set_rgb:"set_rgb",get_rgb:"get_rgb",set_black:"set_black",get_black:"get_black",set_yellow:"set_yellow",get_yellow:"get_yellow",set_magenta:"set_magenta",get_magenta:"get_magenta",set_cyan:"set_cyan",get_cyan:"get_cyan",set_alphaFloat:"set_alphaFloat",get_alphaFloat:"get_alphaFloat",set_greenFloat:"set_greenFloat",get_greenFloat:"get_greenFloat",set_blueFloat:"set_blueFloat",get_blueFloat:"get_blueFloat",set_redFloat:"set_redFloat",get_redFloat:"get_redFloat",set_alpha:"set_alpha",get_alpha:"get_alpha",set_green:"set_green",get_green:"get_green",set_blue:"set_blue",get_blue:"get_blue",set_red:"set_red",get_red:"get_red"};
vision_ds_Color.fromInt = function(value) {
	var value1 = value;
	if(value1 == null) {
		value1 = 0;
	}
	var this1 = value1;
	return this1;
};
vision_ds_Color.fromRGBA = function(Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Color.from8Bit = function(Value) {
	var this1 = 0;
	var color = this1;
	var Alpha = 1;
	if(Alpha == null) {
		Alpha = 255;
	}
	color &= -16711681;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	color &= -65281;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	color &= -256;
	color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	color &= 16777215;
	color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	return color;
};
vision_ds_Color.fromRGBAFloat = function(Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = Math.round(Red * 255);
	color &= -16711681;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	color &= -65281;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	color &= -256;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return color;
};
vision_ds_Color.fromCMYK = function(Cyan,Magenta,Yellow,Black,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = (1 - Cyan) * (1 - Black);
	var value1 = Math.round(value * 255);
	color &= -16711681;
	color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	var value = (1 - Magenta) * (1 - Black);
	var value1 = Math.round(value * 255);
	color &= -65281;
	color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	var value = (1 - Yellow) * (1 - Black);
	var value1 = Math.round(value * 255);
	color &= -256;
	color |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	var value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return color;
};
vision_ds_Color.fromHSB = function(Hue,Saturation,Brightness,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var this1 = 0;
	var color = this1;
	var chroma = Brightness * Saturation;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return color;
};
vision_ds_Color.fromHSL = function(Hue,Saturation,Lightness,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var this1 = 0;
	var color = this1;
	var chroma = (1 - Math.abs(2 * Lightness - 1)) * Saturation;
	var match = Lightness - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return color;
};
vision_ds_Color.fromString = function(str) {
	var result = null;
	str = StringTools.trim(str);
	if(vision_ds_Color.COLOR_REGEX.match(str)) {
		var hexColor = "0x" + vision_ds_Color.COLOR_REGEX.matched(2);
		var value = Std.parseInt(hexColor);
		if(value == null) {
			value = 0;
		}
		var this1 = value;
		result = this1;
		if(hexColor.length == 8) {
			var value = Math.round(255);
			result &= 16777215;
			result |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		}
	}
	return result;
};
vision_ds_Color.getHSBColorWheel = function(Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < 360) {
		var c = _g1++;
		_g.push(vision_ds_Color.fromHSB(c,1.0,1.0,Alpha));
	}
	return _g;
};
vision_ds_Color.interpolate = function(Color1,Color2,Factor) {
	if(Factor == null) {
		Factor = 0.5;
	}
	var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
	var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
	var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
	var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
	var Alpha = a;
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
	color &= -65281;
	color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
	color &= -256;
	color |= b > 255 ? 255 : b < 0 ? 0 : b;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Color.gradient = function(Color1,Color2,Steps,Ease) {
	var output = [];
	if(Ease == null) {
		Ease = function(t) {
			return t;
		};
	}
	var _g = 0;
	var _g1 = Steps;
	while(_g < _g1) {
		var step = _g++;
		var Factor = Ease(step / (Steps - 1));
		if(Factor == null) {
			Factor = 0.5;
		}
		var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
		var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
		var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
		var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
		var Alpha = a;
		if(Alpha == null) {
			Alpha = 255;
		}
		var this1 = 0;
		var color = this1;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 255;
		}
		color &= -16711681;
		color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
		color &= -65281;
		color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
		color &= -256;
		color |= b > 255 ? 255 : b < 0 ? 0 : b;
		color &= 16777215;
		color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
		output[step] = color;
	}
	return output;
};
vision_ds_Color.makeRandom = function(alphaLock,alphaValue) {
	if(alphaValue == null) {
		alphaValue = 255;
	}
	if(alphaLock == null) {
		alphaLock = true;
	}
	var Red = Math.random();
	var Green = Math.random();
	var Blue = Math.random();
	var Alpha = alphaLock ? alphaValue : Math.random();
	if(Alpha == null) {
		Alpha = 1;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = Math.round(Red * 255);
	color &= -16711681;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	color &= -65281;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	color &= -256;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return color;
};
vision_ds_Color.multiply = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) / 255 * ((rhs >> 16 & 255) / 255);
	var Green = (lhs >> 8 & 255) / 255 * ((rhs >> 8 & 255) / 255);
	var Blue = (lhs & 255) / 255 * ((rhs & 255) / 255);
	var Alpha = (lhs >> 24 & 255) / 255 * ((rhs >> 24 & 255) / 255);
	if(Alpha == null) {
		Alpha = 1;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = Math.round(Red * 255);
	color &= -16711681;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	color &= -65281;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	color &= -256;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return color;
};
vision_ds_Color.add = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) + (rhs >> 16 & 255);
	var Green = (lhs >> 8 & 255) + (rhs >> 8 & 255);
	var Blue = (lhs & 255) + (rhs & 255);
	var Alpha = (lhs >> 24 & 255) + (rhs >> 24 & 255);
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Color.subtract = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) - (rhs >> 16 & 255);
	var Green = (lhs >> 8 & 255) - (rhs >> 8 & 255);
	var Blue = (lhs & 255) - (rhs & 255);
	var Alpha = (lhs >> 24 & 255) - (rhs >> 24 & 255);
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Color.divide = function(lhs,rhs) {
	var Red = ((lhs >> 16 & 255) / (rhs >> 16 & 255) == 0 ? 1 : rhs >> 16 & 255) | 0;
	var Green = ((lhs >> 8 & 255) / (rhs >> 8 & 255) == 0 ? 1 : rhs >> 8 & 255) | 0;
	var Blue = ((lhs & 255) / (rhs & 255) == 0 ? 1 : rhs & 255) | 0;
	var Alpha = ((lhs >> 24 & 255) / (rhs >> 24 & 255) == 0 ? 1 : rhs >> 24 & 255) | 0;
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Color.getComplementHarmony = function(this1) {
	var value = (vision_ds_Color.get_hue(this1) | 0) + 180;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	return vision_ds_Color.fromHSB(value % range,Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
};
vision_ds_Color.getAnalogousHarmony = function(this1,Threshold) {
	if(Threshold == null) {
		Threshold = 30;
	}
	var value = (vision_ds_Color.get_hue(this1) | 0) - Threshold;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var warmer = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	var value = (vision_ds_Color.get_hue(this1) | 0) + Threshold;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var colder = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	return { original : this1, warmer : warmer, colder : colder};
};
vision_ds_Color.getSplitComplementHarmony = function(this1,Threshold) {
	if(Threshold == null) {
		Threshold = 30;
	}
	var value = (vision_ds_Color.get_hue(this1) | 0) + 180;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var oppositeHue = value % range;
	var value = oppositeHue - Threshold;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var warmer = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	var value = oppositeHue + Threshold;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var colder = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	return { original : this1, warmer : warmer, colder : colder};
};
vision_ds_Color.getTriadicHarmony = function(this1) {
	var value = (vision_ds_Color.get_hue(this1) | 0) + 120;
	var range = 360;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var triadic1 = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	var value = (vision_ds_Color.get_hue(triadic1) | 0) + 120;
	var range = 360;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var triadic2 = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	return { color1 : this1, color2 : triadic1, color3 : triadic2};
};
vision_ds_Color.to24Bit = function(this1) {
	return this1 & 16777215;
};
vision_ds_Color.toHexString = function(this1,Alpha,Prefix) {
	if(Prefix == null) {
		Prefix = true;
	}
	if(Alpha == null) {
		Alpha = true;
	}
	var tmp = Alpha ? StringTools.hex(this1 >> 24 & 255,2) : "";
	return (Prefix ? "0x" : "") + tmp + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
};
vision_ds_Color.toWebString = function(this1) {
	var Alpha = false;
	var Prefix = false;
	if(Prefix == null) {
		Prefix = true;
	}
	if(Alpha == null) {
		Alpha = true;
	}
	var tmp = Alpha ? StringTools.hex(this1 >> 24 & 255,2) : "";
	return "#" + ((Prefix ? "0x" : "") + tmp + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2));
};
vision_ds_Color.darken = function(this1,Factor) {
	if(Factor == null) {
		Factor = 0.2;
	}
	Factor = vision_tools_MathTools.boundFloat(Factor,0,1);
	var output = this1;
	var value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 * (1 - Factor);
	var Hue = vision_ds_Color.get_hue(output);
	var Alpha = (output >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return output;
};
vision_ds_Color.lighten = function(this1,Factor) {
	if(Factor == null) {
		Factor = 0.2;
	}
	Factor = vision_tools_MathTools.boundFloat(Factor,0,1);
	var output = this1;
	var value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 + (1 - (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2) * Factor;
	var Hue = vision_ds_Color.get_hue(output);
	var Alpha = (output >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return output;
};
vision_ds_Color.invert = function(this1) {
	var oldAlpha = this1 >> 24 & 255;
	var lhs = -1;
	var Red = (lhs >> 16 & 255) - (this1 >> 16 & 255);
	var Green = (lhs >> 8 & 255) - (this1 >> 8 & 255);
	var Blue = (lhs & 255) - (this1 & 255);
	var Alpha = (lhs >> 24 & 255) - (this1 >> 24 & 255);
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	var output = color;
	output &= 16777215;
	output |= (oldAlpha > 255 ? 255 : oldAlpha < 0 ? 0 : oldAlpha) << 24;
	return output;
};
vision_ds_Color.setRGBA = function(this1,Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	this1 &= -16711681;
	this1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	this1 &= -65281;
	this1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	this1 &= -256;
	this1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	this1 &= 16777215;
	this1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	return this1;
};
vision_ds_Color.setRGBAFloat = function(this1,Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var value = Math.round(Red * 255);
	this1 &= -16711681;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	this1 &= -65281;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	this1 &= -256;
	this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return this1;
};
vision_ds_Color.setCMYK = function(this1,Cyan,Magenta,Yellow,Black,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var value = (1 - Cyan) * (1 - Black);
	var value1 = Math.round(value * 255);
	this1 &= -16711681;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	var value = (1 - Magenta) * (1 - Black);
	var value1 = Math.round(value * 255);
	this1 &= -65281;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	var value = (1 - Yellow) * (1 - Black);
	var value1 = Math.round(value * 255);
	this1 &= -256;
	this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	var value = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return this1;
};
vision_ds_Color.setHSB = function(this1,Hue,Saturation,Brightness,Alpha) {
	var chroma = Brightness * Saturation;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return this1;
};
vision_ds_Color.setHSL = function(this1,Hue,Saturation,Lightness,Alpha) {
	var chroma = (1 - Math.abs(2 * Lightness - 1)) * Saturation;
	var match = Lightness - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return this1;
};
vision_ds_Color.setHSChromaMatch = function(this1,Hue,Saturation,Chroma,Match,Alpha) {
	Hue %= 360;
	var hueD = Hue / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + Match;
	Chroma += Match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return this1;
};
vision_ds_Color.grayscale = function(this1,simple) {
	if(simple == null) {
		simple = false;
	}
	var gray = simple ? ((this1 >> 16 & 255) + (this1 >> 8 & 255) + (this1 & 255)) / 3 | 0 : 0.2126 * (this1 >> 16 & 255) + 0.7152 * (this1 >> 8 & 255) + 0.0722 * (this1 & 255) | 0;
	var Alpha = this1 >> 24 & 255;
	if(Alpha == null) {
		Alpha = 255;
	}
	this1 &= -16711681;
	this1 |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
	this1 &= -65281;
	this1 |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
	this1 &= -256;
	this1 |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
	this1 &= 16777215;
	this1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	this1 = this1;
	return this1;
};
vision_ds_Color.blackOrWhite = function(this1,threshold) {
	if(threshold == null) {
		threshold = 128;
	}
	var this2 = [this1 >> 16 & 255,this1 >> 8 & 255,this1 & 255];
	var values = this2;
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var colorValue = max;
	var a = this1 >> 24 & 255;
	if(colorValue > threshold) {
		this1 = -1;
	} else {
		this1 = -16777216;
	}
	this1 &= 16777215;
	this1 |= (a > 255 ? 255 : a < 0 ? 0 : a) << 24;
	return this1;
};
vision_ds_Color._new = function(value) {
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	return this1;
};
vision_ds_Color.getThis = function(this1) {
	return this1;
};
vision_ds_Color.validate = function(this1) {
};
vision_ds_Color.get_red = function(this1) {
	return this1 >> 16 & 255;
};
vision_ds_Color.get_green = function(this1) {
	return this1 >> 8 & 255;
};
vision_ds_Color.get_blue = function(this1) {
	return this1 & 255;
};
vision_ds_Color.get_alpha = function(this1) {
	return this1 >> 24 & 255;
};
vision_ds_Color.get_redFloat = function(this1) {
	return (this1 >> 16 & 255) / 255;
};
vision_ds_Color.get_greenFloat = function(this1) {
	return (this1 >> 8 & 255) / 255;
};
vision_ds_Color.get_blueFloat = function(this1) {
	return (this1 & 255) / 255;
};
vision_ds_Color.get_alphaFloat = function(this1) {
	return (this1 >> 24 & 255) / 255;
};
vision_ds_Color.set_red = function(this1,value) {
	this1 &= -16711681;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	return value;
};
vision_ds_Color.set_green = function(this1,value) {
	this1 &= -65281;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	return value;
};
vision_ds_Color.set_blue = function(this1,value) {
	this1 &= -256;
	this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	return value;
};
vision_ds_Color.set_alpha = function(this1,value) {
	this1 &= 16777215;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return value;
};
vision_ds_Color.set_redFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= -16711681;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	return value;
};
vision_ds_Color.set_greenFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= -65281;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	return value;
};
vision_ds_Color.set_blueFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= -256;
	this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	return value;
};
vision_ds_Color.set_alphaFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= 16777215;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
	return value;
};
vision_ds_Color.get_cyan = function(this1) {
	return (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.get_magenta = function(this1) {
	return (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.get_yellow = function(this1) {
	return (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.get_black = function(this1) {
	return 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.set_cyan = function(this1,value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var value1 = (1 - value) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -16711681;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - Magenta) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -65281;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - Yellow) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -256;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	var value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
	return value;
};
vision_ds_Color.set_magenta = function(this1,value) {
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -16711681;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - value) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -65281;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - Yellow) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -256;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	var value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
	return value;
};
vision_ds_Color.set_yellow = function(this1,value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -16711681;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - Magenta) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -65281;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - value) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -256;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	var value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
	return value;
};
vision_ds_Color.set_black = function(this1,value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - value);
	var value2 = Math.round(value1 * 255);
	this1 &= -16711681;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - Magenta) * (1 - value);
	var value2 = Math.round(value1 * 255);
	this1 &= -65281;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - Yellow) * (1 - value);
	var value2 = Math.round(value1 * 255);
	this1 &= -256;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	var value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
	return value;
};
vision_ds_Color.get_hue = function(this1) {
	var hueRad = Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	var hue = 0;
	if(hueRad != 0) {
		hue = 180 / Math.PI * Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	}
	if(hue < 0) {
		return hue + 360;
	} else {
		return hue;
	}
};
vision_ds_Color.get_brightness = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.get_saturation = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.get_lightness = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2;
};
vision_ds_Color.set_hue = function(this1,value) {
	var Brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = Brightness * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = Brightness - chroma;
	var Hue = value;
	var Chroma = chroma;
	Hue %= 360;
	var hueD = Hue / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	}
	return value;
};
vision_ds_Color.set_saturation = function(this1,value) {
	var Hue = vision_ds_Color.get_hue(this1);
	var Brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = Brightness * value;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	}
	return value;
};
vision_ds_Color.set_brightness = function(this1,value) {
	var Hue = vision_ds_Color.get_hue(this1);
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = value * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = value - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	}
	return value;
};
vision_ds_Color.set_lightness = function(this1,value) {
	var Hue = vision_ds_Color.get_hue(this1);
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	}
	return value;
};
vision_ds_Color.set_rgb = function(this1,value) {
	this1 = this1 & -16777216 | value & 16777215;
	return value;
};
vision_ds_Color.get_rgb = function(this1) {
	return this1 & 16777215;
};
vision_ds_Color.maxColor = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.minColor = function(this1) {
	return Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.boundChannel = function(this1,value) {
	if(value > 255) {
		return 255;
	} else if(value < 0) {
		return 0;
	} else {
		return value;
	}
};
vision_ds_Color.toString = function(this1) {
	var Alpha = true;
	var Prefix = true;
	if(Prefix == null) {
		Prefix = true;
	}
	if(Alpha == null) {
		Alpha = true;
	}
	var tmp = Alpha ? StringTools.hex(this1 >> 24 & 255,2) : "";
	return (Prefix ? "0x" : "") + tmp + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
};
vision_ds_Color.toInt = function(this1) {
	return this1;
};
vision_ds_Color.color_greater_than_color = function(lhs,rhs) {
	return lhs > rhs;
};
vision_ds_Color.color_greater_than_int = function(lhs,rhs) {
	return lhs > rhs;
};
vision_ds_Color.int_greater_than_color = function(lhs,rhs) {
	return lhs > rhs;
};
vision_ds_Color.color_greater_than_float = function(lhs,rhs) {
	return lhs > rhs;
};
vision_ds_Color.float_greater_than_color = function(lhs,rhs) {
	return lhs > rhs;
};
vision_ds_Color.color_greater_than_equal_color = function(lhs,rhs) {
	return lhs >= rhs;
};
vision_ds_Color.color_greater_than_equal_int = function(lhs,rhs) {
	return lhs >= rhs;
};
vision_ds_Color.int_greater_than_equal_color = function(lhs,rhs) {
	return lhs >= rhs;
};
vision_ds_Color.color_greater_than_equal_float = function(lhs,rhs) {
	return lhs >= rhs;
};
vision_ds_Color.float_greater_than_equal_color = function(lhs,rhs) {
	return lhs >= rhs;
};
vision_ds_Color.color_less_than_color = function(lhs,rhs) {
	return lhs < rhs;
};
vision_ds_Color.color_less_than_int = function(lhs,rhs) {
	return lhs < rhs;
};
vision_ds_Color.int_less_than_color = function(lhs,rhs) {
	return lhs < rhs;
};
vision_ds_Color.color_less_than_float = function(lhs,rhs) {
	return lhs < rhs;
};
vision_ds_Color.float_less_than_color = function(lhs,rhs) {
	return lhs < rhs;
};
vision_ds_Color.color_less_than_equal_color = function(lhs,rhs) {
	return lhs <= rhs;
};
vision_ds_Color.color_less_than_equal_int = function(lhs,rhs) {
	return lhs <= rhs;
};
vision_ds_Color.int_less_than_equal_color = function(lhs,rhs) {
	return lhs <= rhs;
};
vision_ds_Color.color_less_than_equal_float = function(lhs,rhs) {
	return lhs <= rhs;
};
vision_ds_Color.float_less_than_equal_color = function(lhs,rhs) {
	return lhs <= rhs;
};
vision_ds_Color.color_equal_color = function(lhs,rhs) {
	return lhs == rhs;
};
vision_ds_Color.color_equal_int = function(lhs,rhs) {
	return lhs == rhs;
};
vision_ds_Color.int_equal_color = function(lhs,rhs) {
	return lhs == rhs;
};
vision_ds_Color.color_equal_float = function(lhs,rhs) {
	return lhs == rhs;
};
vision_ds_Color.float_equal_color = function(lhs,rhs) {
	return lhs == rhs;
};
vision_ds_Color.color_not_equal_color = function(lhs,rhs) {
	return lhs != rhs;
};
vision_ds_Color.color_not_equal_int = function(lhs,rhs) {
	return lhs != rhs;
};
vision_ds_Color.int_not_equal_color = function(lhs,rhs) {
	return lhs != rhs;
};
vision_ds_Color.color_not_equal_float = function(lhs,rhs) {
	return lhs != rhs;
};
vision_ds_Color.float_not_equal_color = function(lhs,rhs) {
	return lhs != rhs;
};
vision_ds_Color.color_bitwise_and_color = function(lhs,rhs) {
	return lhs & rhs;
};
vision_ds_Color.color_bitwise_and_int = function(lhs,rhs) {
	return lhs & rhs;
};
vision_ds_Color.int_bitwise_and_color = function(lhs,rhs) {
	return lhs & rhs;
};
vision_ds_Color.color_bitwise_or_color = function(lhs,rhs) {
	return lhs | rhs;
};
vision_ds_Color.color_bitwise_or_int = function(lhs,rhs) {
	return lhs | rhs;
};
vision_ds_Color.int_bitwise_or_color = function(lhs,rhs) {
	return lhs | rhs;
};
vision_ds_Color.color_bitwise_xor_color = function(lhs,rhs) {
	return lhs ^ rhs;
};
vision_ds_Color.color_bitwise_xor_int = function(lhs,rhs) {
	return lhs ^ rhs;
};
vision_ds_Color.int_bitwise_xor_color = function(lhs,rhs) {
	return lhs ^ rhs;
};
vision_ds_Color.color_bitwise_left_shift_color = function(lhs,rhs) {
	return lhs << rhs;
};
vision_ds_Color.color_bitwise_left_shift_int = function(lhs,rhs) {
	return lhs << rhs;
};
vision_ds_Color.int_bitwise_left_shift_color = function(lhs,rhs) {
	return lhs << rhs;
};
vision_ds_Color.color_bitwise_right_shift_color = function(lhs,rhs) {
	return lhs >> rhs;
};
vision_ds_Color.color_bitwise_right_shift_int = function(lhs,rhs) {
	return lhs >> rhs;
};
vision_ds_Color.int_bitwise_right_shift_color = function(lhs,rhs) {
	return lhs >> rhs;
};
vision_ds_Color.color_bitwise_unsigned_right_shift_color = function(lhs,rhs) {
	return lhs >>> rhs;
};
vision_ds_Color.color_bitwise_unsigned_right_shift_int = function(lhs,rhs) {
	return lhs >>> rhs;
};
vision_ds_Color.int_bitwise_unsigned_right_shift_color = function(lhs,rhs) {
	return lhs >>> rhs;
};
var vision_ds_Histogram = function() {
	this.length = 0;
	this.underlying = [];
};
$hxClasses["vision.ds.Histogram"] = vision_ds_Histogram;
vision_ds_Histogram.__name__ = "vision.ds.Histogram";
vision_ds_Histogram.prototype = {
	underlying: null
	,length: null
	,median: null
	,increment: function(cell) {
		if(this.underlying[cell] != null) {
			this.underlying[cell]++;
		} else {
			this.underlying[cell] = 1;
		}
		return this;
	}
	,decrement: function(cell) {
		if(this.underlying[cell] != null) {
			this.underlying[cell]--;
		} else {
			this.underlying[cell] = -1;
		}
		return this;
	}
	,get_median: function() {
		var temp = [];
		var _g = 0;
		var _g1 = this.underlying.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.underlying[i] == null) {
				continue;
			} else {
				var _g2 = 0;
				var _g3 = this.underlying[i];
				while(_g2 < _g3) {
					var _ = _g2++;
					temp.push(i);
				}
			}
		}
		var offset = temp.length % 2;
		return temp[(temp.length - offset) / 2 | 0];
	}
	,get_length: function() {
		return this.underlying.length;
	}
	,__class__: vision_ds_Histogram
	,__properties__: {get_median:"get_median",get_length:"get_length"}
};
var vision_ds_Image = {};
vision_ds_Image.__properties__ = {set_view:"set_view",get_view:"get_view",get_height:"get_height",get_width:"get_width",get_underlying:"get_underlying"};
vision_ds_Image.get_underlying = function(this1) {
	return this1;
};
vision_ds_Image.get_width = function(this1) {
	return this1.getUInt16(0);
};
vision_ds_Image.get_height = function(this1) {
	return Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
};
vision_ds_Image.get_view = function(this1) {
	var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
	var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
	var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
	var this2 = this1.b;
	var tmp = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
	return new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[tmp]);
};
vision_ds_Image.set_view = function(this1,view) {
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,view.x);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,view.y);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,view.width == 0 ? view.width : view.width);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,view.height == 0 ? view.height : view.height);
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = view.shape;
	return view;
};
vision_ds_Image._new = function(width,height,color) {
	if(color == null) {
		color = 0;
	}
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = color >> 24 & 255;
		this2.b[i + 1] = color >> 16 & 255;
		this2.b[i + 2] = color >> 8 & 255;
		this2.b[i + 3] = color & 255;
		i += 4;
	}
	return this2;
};
vision_ds_Image.getColorFromStartingBytePos = function(this1,position) {
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	return this1;
};
vision_ds_Image.setColorFromStartingBytePos = function(this1,position,c) {
	position += vision_ds_Image.OFFSET;
	this1.b[position] = c >> 24 & 255;
	this1.b[position + 1] = c >> 16 & 255;
	this1.b[position + 2] = c >> 8 & 255;
	this1.b[position + 3] = c & 255;
	return c;
};
vision_ds_Image.getPixel = function(this1,x,y) {
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	return this1;
};
vision_ds_Image.getSafePixel = function(this1,x,y) {
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this2 = [x,this1.getUInt16(0) - 1];
		var values = this2;
		var max = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] > max) {
				max = values[i];
			}
		}
		var this2 = [max,0];
		var values = this2;
		var min = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] < min) {
				min = values[i];
			}
		}
		var x1 = min;
		var this2 = [y,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1];
		var values = this2;
		var max = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] > max) {
				max = values[i];
			}
		}
		var this2 = [max,0];
		var values = this2;
		var min = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] < min) {
				min = values[i];
			}
		}
		var y1 = min;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y1 * this1.getUInt16(0) + x1) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		return this2;
	}
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	return this1;
};
vision_ds_Image.getUnsafePixel = function(this1,x,y) {
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	return this1;
};
vision_ds_Image.getFloatingPixel = function(this1,x,y) {
	var x1 = Math.ceil(x);
	var y1 = Math.ceil(y);
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		return vision_ds_Image.getFloatingPixel(this1,vision_tools_MathTools.boundFloat(x,0,this1.getUInt16(0) - 1),vision_tools_MathTools.boundFloat(y,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1));
	}
	var yFraction = y - (y | 0);
	var xFraction = x - (x | 0);
	var x1 = x | 0;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var x1 = (x | 0) + 1;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this3 = value;
	var x1 = x | 0;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this4 = value;
	var x1 = (x | 0) + 1;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this5 = value;
	var red = (1 - yFraction) * ((1 - xFraction) * (this2 >> 16 & 255) + xFraction * (this3 >> 16 & 255)) + yFraction * ((1 - xFraction) * (this4 >> 16 & 255) + xFraction * (this5 >> 16 & 255)) | 0;
	var x1 = x | 0;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var x1 = (x | 0) + 1;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this3 = value;
	var x1 = x | 0;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this4 = value;
	var x1 = (x | 0) + 1;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this5 = value;
	var green = (1 - yFraction) * ((1 - xFraction) * (this2 >> 8 & 255) + xFraction * (this3 >> 8 & 255)) + yFraction * ((1 - xFraction) * (this4 >> 8 & 255) + xFraction * (this5 >> 8 & 255)) | 0;
	var x1 = x | 0;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var x1 = (x | 0) + 1;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this3 = value;
	var x1 = x | 0;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this4 = value;
	var x1 = (x | 0) + 1;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this5 = value;
	var blue = (1 - yFraction) * ((1 - xFraction) * (this2 & 255) + xFraction * (this3 & 255)) + yFraction * ((1 - xFraction) * (this4 & 255) + xFraction * (this5 & 255)) | 0;
	var x1 = x | 0;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var x1 = (x | 0) + 1;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this3 = value;
	var x1 = x | 0;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this4 = value;
	var x1 = (x | 0) + 1;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	var alpha = (1 - yFraction) * ((1 - xFraction) * (this2 >> 24 & 255) + xFraction * (this3 >> 24 & 255)) + yFraction * ((1 - xFraction) * (this4 >> 24 & 255) + xFraction * (this1 >> 24 & 255)) | 0;
	var Alpha = alpha;
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= -65281;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= -256;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Image.setPixel = function(this1,x,y,color) {
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color >> 24 & 255;
			this1.b[position + 1] = color >> 16 & 255;
			this1.b[position + 2] = color >> 8 & 255;
			this1.b[position + 3] = color & 255;
		}
	} else {
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = color >> 24 & 255;
		this1.b[position + 1] = color >> 16 & 255;
		this1.b[position + 2] = color >> 8 & 255;
		this1.b[position + 3] = color & 255;
	}
};
vision_ds_Image.setSafePixel = function(this1,x,y,color) {
	x = vision_tools_MathTools.boundInt(x,0,this1.getUInt16(0) - 1);
	y = vision_tools_MathTools.boundInt(y,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
	if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color >> 24 & 255;
			this1.b[position + 1] = color >> 16 & 255;
			this1.b[position + 2] = color >> 8 & 255;
			this1.b[position + 3] = color & 255;
		}
	} else {
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = color >> 24 & 255;
		this1.b[position + 1] = color >> 16 & 255;
		this1.b[position + 2] = color >> 8 & 255;
		this1.b[position + 3] = color & 255;
	}
};
vision_ds_Image.setFloatingPixel = function(this1,x,y,color) {
	var x1 = Math.ceil(x);
	var y1 = Math.ceil(y);
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		vision_ds_Image.setFloatingPixel(this1,vision_tools_MathTools.boundFloat(x,0,this1.getUInt16(0) - 1),vision_tools_MathTools.boundFloat(y,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1),color);
		return;
	}
	var yFraction = y - (y | 0);
	var xFraction = x - (x | 0);
	var x1 = Math.floor(x);
	var y1 = Math.floor(y);
	var Red = (1 - xFraction + (1 - yFraction)) / 2 * ((color >> 16 & 255) / 255);
	var Green = (1 - xFraction + (1 - yFraction)) / 2 * ((color >> 8 & 255) / 255);
	var Blue = (1 - xFraction + (1 - yFraction)) / 2 * ((color & 255) / 255);
	var Alpha = (color >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var this2 = 0;
	var color1 = this2;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = Math.round(Red * 255);
	color1 &= -16711681;
	color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	color1 &= -65281;
	color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	color1 &= -256;
	color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha1 * 255);
	color1 &= 16777215;
	color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	var color2 = color1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
				break;
			case 1:
				has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x2 = view.x + view.width / 2 - c;
					var y2 = view.y + view.height / 2;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var f1_x = x2;
					var f1_y = y2;
					var x2 = view.x + view.width / 2 + c;
					var y2 = view.y + view.height / 2;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var f2_x = x2;
					var f2_y = y2;
					var x2 = x1;
					var y2 = y1;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var p_x = x2;
					var p_y = y2;
					var x2 = p_x - f1_x;
					var y2 = p_y - f1_y;
					var x3 = p_x - f2_x;
					var y3 = p_y - f2_y;
					has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x2 = view.x + view.width / 2;
					var y2 = view.y + view.height / 2 - c;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var f1_x = x2;
					var f1_y = y2;
					var x2 = view.x + view.width / 2;
					var y2 = view.y + view.height / 2 + c;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var f2_x = x2;
					var f2_y = y2;
					var x2 = x1;
					var y2 = y1;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var p_x = x2;
					var p_y = y2;
					var x2 = p_x - f1_x;
					var y2 = p_y - f1_y;
					var x3 = p_x - f2_x;
					var y3 = p_y - f2_y;
					has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x2 = x1;
					var y2 = y1;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var point1_x = x2;
					var point1_y = y2;
					var x2 = view.x + view.width / 2;
					var y2 = view.y + view.height / 2;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var point2_x = x2;
					var point2_y = y2;
					var x2 = point2_x - point1_x;
					var y2 = point2_y - point1_y;
					has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color2 >> 24 & 255;
			this1.b[position + 1] = color2 >> 16 & 255;
			this1.b[position + 2] = color2 >> 8 & 255;
			this1.b[position + 3] = color2 & 255;
		}
	} else {
		var position = (y1 * this1.getUInt16(0) + x1) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = color2 >> 24 & 255;
		this1.b[position + 1] = color2 >> 16 & 255;
		this1.b[position + 2] = color2 >> 8 & 255;
		this1.b[position + 3] = color2 & 255;
	}
	if(y != (y | 0)) {
		var x1 = Math.floor(x);
		var y1 = Math.ceil(y);
		var Red = (1 - xFraction + yFraction) / 2 * ((color >> 16 & 255) / 255);
		var Green = (1 - xFraction + yFraction) / 2 * ((color >> 8 & 255) / 255);
		var Blue = (1 - xFraction + yFraction) / 2 * ((color & 255) / 255);
		var Alpha = (color >> 24 & 255) / 255;
		if(Alpha == null) {
			Alpha = 1;
		}
		var this2 = 0;
		var color1 = this2;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color1 &= -16711681;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color1 &= -65281;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color1 &= -256;
		color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color1 &= 16777215;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var color2 = color1;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x2 = view.x + view.width / 2 + c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f2_x = x2;
						var f2_y = y2;
						var x2 = x1;
						var y2 = y1;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var p_x = x2;
						var p_y = y2;
						var x2 = p_x - f1_x;
						var y2 = p_y - f1_y;
						var x3 = p_x - f2_x;
						var y3 = p_y - f2_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2 - c;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2 + c;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f2_x = x2;
						var f2_y = y2;
						var x2 = x1;
						var y2 = y1;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var p_x = x2;
						var p_y = y2;
						var x2 = p_x - f1_x;
						var y2 = p_y - f1_y;
						var x3 = p_x - f2_x;
						var y3 = p_y - f2_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x2 = x1;
						var y2 = y1;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var point1_x = x2;
						var point1_y = y2;
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var point2_x = x2;
						var point2_y = y2;
						var x2 = point2_x - point1_x;
						var y2 = point2_y - point1_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color2 >> 24 & 255;
				this1.b[position + 1] = color2 >> 16 & 255;
				this1.b[position + 2] = color2 >> 8 & 255;
				this1.b[position + 3] = color2 & 255;
			}
		} else {
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color2 >> 24 & 255;
			this1.b[position + 1] = color2 >> 16 & 255;
			this1.b[position + 2] = color2 >> 8 & 255;
			this1.b[position + 3] = color2 & 255;
		}
	}
	if(x != (x | 0)) {
		var x1 = Math.ceil(x);
		var y1 = Math.floor(y);
		var Red = (xFraction + (1 - yFraction)) / 2 * ((color >> 16 & 255) / 255);
		var Green = (xFraction + (1 - yFraction)) / 2 * ((color >> 8 & 255) / 255);
		var Blue = (xFraction + (1 - yFraction)) / 2 * ((color & 255) / 255);
		var Alpha = (color >> 24 & 255) / 255;
		if(Alpha == null) {
			Alpha = 1;
		}
		var this2 = 0;
		var color1 = this2;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color1 &= -16711681;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color1 &= -65281;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color1 &= -256;
		color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color1 &= 16777215;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var color2 = color1;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x2 = view.x + view.width / 2 + c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f2_x = x2;
						var f2_y = y2;
						var x2 = x1;
						var y2 = y1;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var p_x = x2;
						var p_y = y2;
						var x2 = p_x - f1_x;
						var y2 = p_y - f1_y;
						var x3 = p_x - f2_x;
						var y3 = p_y - f2_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2 - c;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2 + c;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f2_x = x2;
						var f2_y = y2;
						var x2 = x1;
						var y2 = y1;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var p_x = x2;
						var p_y = y2;
						var x2 = p_x - f1_x;
						var y2 = p_y - f1_y;
						var x3 = p_x - f2_x;
						var y3 = p_y - f2_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x2 = x1;
						var y2 = y1;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var point1_x = x2;
						var point1_y = y2;
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var point2_x = x2;
						var point2_y = y2;
						var x2 = point2_x - point1_x;
						var y2 = point2_y - point1_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color2 >> 24 & 255;
				this1.b[position + 1] = color2 >> 16 & 255;
				this1.b[position + 2] = color2 >> 8 & 255;
				this1.b[position + 3] = color2 & 255;
			}
		} else {
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color2 >> 24 & 255;
			this1.b[position + 1] = color2 >> 16 & 255;
			this1.b[position + 2] = color2 >> 8 & 255;
			this1.b[position + 3] = color2 & 255;
		}
	}
	if(x != (x | 0) && y != (y | 0)) {
		var x1 = Math.ceil(x);
		var y1 = Math.ceil(y);
		var Red = (xFraction + yFraction) / 2 * ((color >> 16 & 255) / 255);
		var Green = (xFraction + yFraction) / 2 * ((color >> 8 & 255) / 255);
		var Blue = (xFraction + yFraction) / 2 * ((color & 255) / 255);
		var Alpha = (color >> 24 & 255) / 255;
		if(Alpha == null) {
			Alpha = 1;
		}
		var this2 = 0;
		var color = this2;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var color1 = color;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x = view.x + view.width / 2 - c;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f1_x = x;
						var f1_y = y;
						var x = view.x + view.width / 2 + c;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f2_x = x;
						var f2_y = y;
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var p_x = x;
						var p_y = y;
						var x = p_x - f1_x;
						var y = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2 - c;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f1_x = x;
						var f1_y = y;
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2 + c;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f2_x = x;
						var f2_y = y;
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var p_x = x;
						var p_y = y;
						var x = p_x - f1_x;
						var y = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var point1_x = x;
						var point1_y = y;
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var point2_x = x;
						var point2_y = y;
						var x = point2_x - point1_x;
						var y = point2_y - point1_y;
						has = Math.sqrt(x * x + y * y) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color1 >> 24 & 255;
				this1.b[position + 1] = color1 >> 16 & 255;
				this1.b[position + 2] = color1 >> 8 & 255;
				this1.b[position + 3] = color1 & 255;
			}
		} else {
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color1 >> 24 & 255;
			this1.b[position + 1] = color1 >> 16 & 255;
			this1.b[position + 2] = color1 >> 8 & 255;
			this1.b[position + 3] = color1 & 255;
		}
	}
};
vision_ds_Image.setUnsafePixel = function(this1,x,y,color) {
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	this1.b[position] = color >> 24 & 255;
	this1.b[position + 1] = color >> 16 & 255;
	this1.b[position + 2] = color >> 8 & 255;
	this1.b[position + 3] = color & 255;
};
vision_ds_Image.paintPixel = function(this1,x,y,color) {
	if(x < 0 || x >= this1.getUInt16(0) || y < 0 || y >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if((color >> 24 & 255) / 255 == 1) {
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2 - c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2 + c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var p_x = x1;
						var p_y = y1;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 - c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 + c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var p_x = x1;
						var p_y = y1;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point1_x = x1;
						var point1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point2_x = x1;
						var point2_y = y1;
						var x1 = point2_x - point1_x;
						var y1 = point2_y - point1_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color >> 24 & 255;
			this1.b[position + 1] = color >> 16 & 255;
			this1.b[position + 2] = color >> 8 & 255;
			this1.b[position + 3] = color & 255;
		}
	} else {
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		var oldColor = this2;
		var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
		if(Alpha == null) {
			Alpha = 1;
		}
		var this2 = 0;
		var color = this2;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var newColor = color;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2 - c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2 + c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var p_x = x1;
						var p_y = y1;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 - c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 + c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var p_x = x1;
						var p_y = y1;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point1_x = x1;
						var point1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point2_x = x1;
						var point2_y = y1;
						var x1 = point2_x - point1_x;
						var y1 = point2_y - point1_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = newColor >> 24 & 255;
				this1.b[position + 1] = newColor >> 16 & 255;
				this1.b[position + 2] = newColor >> 8 & 255;
				this1.b[position + 3] = newColor & 255;
			}
		} else {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = newColor >> 24 & 255;
			this1.b[position + 1] = newColor >> 16 & 255;
			this1.b[position + 2] = newColor >> 8 & 255;
			this1.b[position + 3] = newColor & 255;
		}
	}
};
vision_ds_Image.paintFloatingPixel = function(this1,x,y,color) {
	if(x < 0 || x >= this1.getUInt16(0) || y < 0 || y >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
		vision_ds_Image.paintFloatingPixel(this1,vision_tools_MathTools.boundFloat(x,0,this1.getUInt16(0) - 1),vision_tools_MathTools.boundFloat(y,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1),color);
	} else if(x == (x | 0) && y == (y | 0)) {
		var x1 = Math.floor(x);
		var y1 = Math.floor(y);
		if(x1 < 0 || x1 >= this1.getUInt16(0) || y1 < 0 || y1 >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if((color >> 24 & 255) / 255 == 1) {
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var p_x = x2;
							var p_y = y2;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 - c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 + c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var p_x = x2;
							var p_y = y2;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point1_x = x2;
							var point1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x2 = point2_x - point1_x;
							var y2 = point2_y - point1_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this1.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255;
					this1.b[position + 1] = color >> 16 & 255;
					this1.b[position + 2] = color >> 8 & 255;
					this1.b[position + 3] = color & 255;
				}
			} else {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			var oldColor = this2;
			var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
			var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
			var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
			var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
			if(Alpha == null) {
				Alpha = 1;
			}
			var this2 = 0;
			var color1 = this2;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color1 &= -16711681;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color1 &= -65281;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color1 &= -256;
			color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color1 &= 16777215;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var newColor = color1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var p_x = x2;
							var p_y = y2;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 - c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 + c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var p_x = x2;
							var p_y = y2;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point1_x = x2;
							var point1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x2 = point2_x - point1_x;
							var y2 = point2_y - point1_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this1.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = newColor >> 24 & 255;
					this1.b[position + 1] = newColor >> 16 & 255;
					this1.b[position + 2] = newColor >> 8 & 255;
					this1.b[position + 3] = newColor & 255;
				}
			} else {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = newColor >> 24 & 255;
				this1.b[position + 1] = newColor >> 16 & 255;
				this1.b[position + 2] = newColor >> 8 & 255;
				this1.b[position + 3] = newColor & 255;
			}
		}
	} else {
		var yFraction = y - (y | 0);
		var xFraction = x - (x | 0);
		var ix = Math.floor(x);
		var iy = Math.floor(y);
		var _g = 0;
		var _g1 = [0,1];
		while(_g < _g1.length) {
			var posX = _g1[_g];
			++_g;
			if(posX == 1 && x == ix) {
				continue;
			}
			var _g2 = 0;
			var _g3 = [0,1];
			while(_g2 < _g3.length) {
				var posY = _g3[_g2];
				++_g2;
				if(posY == 1 && y == iy) {
					continue;
				}
				var x1 = ix + posX;
				var y1 = iy + posY;
				if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this2 = value;
				var oldColor = this2;
				var value1 = ((posX == 0 ? 1 - xFraction : xFraction) + (posY == 0 ? 1 - yFraction : yFraction)) / 2;
				var value2 = Math.round(value1 * 255);
				color &= 16777215;
				color |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 24;
				var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
				var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
				var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
				var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
				if(Alpha == null) {
					Alpha = 1;
				}
				var this3 = 0;
				var color1 = this3;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value3 = Math.round(Red * 255);
				color1 &= -16711681;
				color1 |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 16;
				var value4 = Math.round(Green * 255);
				color1 &= -65281;
				color1 |= (value4 > 255 ? 255 : value4 < 0 ? 0 : value4) << 8;
				var value5 = Math.round(Blue * 255);
				color1 &= -256;
				color1 |= value5 > 255 ? 255 : value5 < 0 ? 0 : value5;
				var value6 = Math.round(Alpha1 * 255);
				color1 &= 16777215;
				color1 |= (value6 > 255 ? 255 : value6 < 0 ? 0 : value6) << 24;
				var newColor = color1;
				var x2 = ix + posX;
				var y2 = iy + posY;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x1 = x2;
					var this_y1 = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this4 = this1.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this4[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x2 < view.x + view.width && y2 < view.y + view.height && x2 >= view.x && y2 >= view.y;
							break;
						case 1:
							has = !(x2 < view.x + view.width && y2 < view.y + view.height && x2 >= view.x && y2 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x3 = view.x + view.width / 2 - c;
								var y3 = view.y + view.height / 2;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var f1_x = x3;
								var f1_y = y3;
								var x4 = view.x + view.width / 2 + c;
								var y4 = view.y + view.height / 2;
								if(y4 == null) {
									y4 = 0;
								}
								if(x4 == null) {
									x4 = 0;
								}
								var f2_x = x4;
								var f2_y = y4;
								var x5 = x2;
								var y5 = y2;
								if(y5 == null) {
									y5 = 0;
								}
								if(x5 == null) {
									x5 = 0;
								}
								var p_x = x5;
								var p_y = y5;
								var x6 = p_x - f1_x;
								var y6 = p_y - f1_y;
								var x7 = p_x - f2_x;
								var y7 = p_y - f2_y;
								has = Math.sqrt(x6 * x6 + y6 * y6) + Math.sqrt(x7 * x7 + y7 * y7) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x8 = view.x + view.width / 2;
								var y8 = view.y + view.height / 2 - c1;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var f1_x1 = x8;
								var f1_y1 = y8;
								var x9 = view.x + view.width / 2;
								var y9 = view.y + view.height / 2 + c1;
								if(y9 == null) {
									y9 = 0;
								}
								if(x9 == null) {
									x9 = 0;
								}
								var f2_x1 = x9;
								var f2_y1 = y9;
								var x10 = x2;
								var y10 = y2;
								if(y10 == null) {
									y10 = 0;
								}
								if(x10 == null) {
									x10 = 0;
								}
								var p_x1 = x10;
								var p_y1 = y10;
								var x11 = p_x1 - f1_x1;
								var y11 = p_y1 - f1_y1;
								var x12 = p_x1 - f2_x1;
								var y12 = p_y1 - f2_y1;
								has = Math.sqrt(x11 * x11 + y11 * y11) + Math.sqrt(x12 * x12 + y12 * y12) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x13 = x2;
								var y13 = y2;
								if(y13 == null) {
									y13 = 0;
								}
								if(x13 == null) {
									x13 = 0;
								}
								var point1_x = x13;
								var point1_y = y13;
								var x14 = view.x + view.width / 2;
								var y14 = view.y + view.height / 2;
								if(y14 == null) {
									y14 = 0;
								}
								if(x14 == null) {
									x14 = 0;
								}
								var point2_x = x14;
								var point2_y = y14;
								var x15 = point2_x - point1_x;
								var y15 = point2_y - point1_y;
								has = Math.sqrt(x15 * x15 + y15 * y15) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y2 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y2 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position1 = (y2 * this1.getUInt16(0) + x2) * 4;
						position1 += vision_ds_Image.OFFSET;
						this1.b[position1] = newColor >> 24 & 255;
						this1.b[position1 + 1] = newColor >> 16 & 255;
						this1.b[position1 + 2] = newColor >> 8 & 255;
						this1.b[position1 + 3] = newColor & 255;
					}
				} else {
					var position2 = (y2 * this1.getUInt16(0) + x2) * 4;
					position2 += vision_ds_Image.OFFSET;
					this1.b[position2] = newColor >> 24 & 255;
					this1.b[position2 + 1] = newColor >> 16 & 255;
					this1.b[position2 + 2] = newColor >> 8 & 255;
					this1.b[position2 + 3] = newColor & 255;
				}
			}
		}
	}
};
vision_ds_Image.paintSafePixel = function(this1,x,y,color) {
	var x1 = vision_tools_MathTools.boundInt(x,0,this1.getUInt16(0) - 1);
	var y1 = vision_tools_MathTools.boundInt(y,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
	if(x1 < 0 || x1 >= this1.getUInt16(0) || y1 < 0 || y1 >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if((color >> 24 & 255) / 255 == 1) {
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x = view.x + view.width / 2 - c;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f1_x = x;
						var f1_y = y;
						var x = view.x + view.width / 2 + c;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f2_x = x;
						var f2_y = y;
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var p_x = x;
						var p_y = y;
						var x = p_x - f1_x;
						var y = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2 - c;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f1_x = x;
						var f1_y = y;
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2 + c;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f2_x = x;
						var f2_y = y;
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var p_x = x;
						var p_y = y;
						var x = p_x - f1_x;
						var y = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var point1_x = x;
						var point1_y = y;
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var point2_x = x;
						var point2_y = y;
						var x = point2_x - point1_x;
						var y = point2_y - point1_y;
						has = Math.sqrt(x * x + y * y) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color >> 24 & 255;
			this1.b[position + 1] = color >> 16 & 255;
			this1.b[position + 2] = color >> 8 & 255;
			this1.b[position + 3] = color & 255;
		}
	} else {
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y1 * this1.getUInt16(0) + x1) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		var oldColor = this2;
		var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
		if(Alpha == null) {
			Alpha = 1;
		}
		var this2 = 0;
		var color = this2;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var newColor = color;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x = view.x + view.width / 2 - c;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f1_x = x;
						var f1_y = y;
						var x = view.x + view.width / 2 + c;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f2_x = x;
						var f2_y = y;
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var p_x = x;
						var p_y = y;
						var x = p_x - f1_x;
						var y = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2 - c;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f1_x = x;
						var f1_y = y;
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2 + c;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f2_x = x;
						var f2_y = y;
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var p_x = x;
						var p_y = y;
						var x = p_x - f1_x;
						var y = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var point1_x = x;
						var point1_y = y;
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var point2_x = x;
						var point2_y = y;
						var x = point2_x - point1_x;
						var y = point2_y - point1_y;
						has = Math.sqrt(x * x + y * y) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = newColor >> 24 & 255;
				this1.b[position + 1] = newColor >> 16 & 255;
				this1.b[position + 2] = newColor >> 8 & 255;
				this1.b[position + 3] = newColor & 255;
			}
		} else {
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = newColor >> 24 & 255;
			this1.b[position + 1] = newColor >> 16 & 255;
			this1.b[position + 2] = newColor >> 8 & 255;
			this1.b[position + 3] = newColor & 255;
		}
	}
};
vision_ds_Image.paintUnsafePixel = function(this1,x,y,color) {
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var oldColor = this2;
	var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
	var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
	var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
	var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
	if(Alpha == null) {
		Alpha = 1;
	}
	var this2 = 0;
	var color = this2;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = Math.round(Red * 255);
	color &= -16711681;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	color &= -65281;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	color &= -256;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	var newColor = color;
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	this1.b[position] = newColor >> 24 & 255;
	this1.b[position + 1] = newColor >> 16 & 255;
	this1.b[position + 2] = newColor >> 8 & 255;
	this1.b[position + 3] = newColor & 255;
};
vision_ds_Image.hasPixel = function(this1,x,y) {
	if(x >= 0 && y >= 0 && x < this1.getUInt16(0)) {
		return y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
	} else {
		return false;
	}
};
vision_ds_Image.movePixel = function(this1,fromX,fromY,toX,toY,oldPixelResetColor) {
	if(!(fromX >= 0 && fromY >= 0 && fromX < this1.getUInt16(0) && fromY < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = fromX;
		var this_y = fromY;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (fromY * this1.getUInt16(0) + fromX) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var color = this2;
	if(!(toX >= 0 && toY >= 0 && toX < this1.getUInt16(0) && toY < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = toX;
		var this_y = toY;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = toX >= 0 && toY >= 0 && toX < this1.getUInt16(0) && toY < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = toX < view.x + view.width && toY < view.y + view.height && toX >= view.x && toY >= view.y;
				break;
			case 1:
				has = !(toX < view.x + view.width && toY < view.y + view.height && toX >= view.x && toY >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x = view.x + view.width / 2 - c;
					var y = view.y + view.height / 2;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f1_x = x;
					var f1_y = y;
					var x = view.x + view.width / 2 + c;
					var y = view.y + view.height / 2;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f2_x = x;
					var f2_y = y;
					var x = toX;
					var y = toY;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var p_x = x;
					var p_y = y;
					var x = p_x - f1_x;
					var y = p_y - f1_y;
					var x1 = p_x - f2_x;
					var y1 = p_y - f2_y;
					has = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x = view.x + view.width / 2;
					var y = view.y + view.height / 2 - c;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f1_x = x;
					var f1_y = y;
					var x = view.x + view.width / 2;
					var y = view.y + view.height / 2 + c;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f2_x = x;
					var f2_y = y;
					var x = toX;
					var y = toY;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var p_x = x;
					var p_y = y;
					var x = p_x - f1_x;
					var y = p_y - f1_y;
					var x1 = p_x - f2_x;
					var y1 = p_y - f2_y;
					has = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x = toX;
					var y = toY;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var point1_x = x;
					var point1_y = y;
					var x = view.x + view.width / 2;
					var y = view.y + view.height / 2;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var point2_x = x;
					var point2_y = y;
					var x = point2_x - point1_x;
					var y = point2_y - point1_y;
					has = Math.sqrt(x * x + y * y) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(toX - view.x - view.width / 2) / (view.width / 2) + Math.abs(toY - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(toX - view.x - view.width / 2) / (view.width / 2) + Math.abs(toY - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (toY * this1.getUInt16(0) + toX) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color >> 24 & 255;
			this1.b[position + 1] = color >> 16 & 255;
			this1.b[position + 2] = color >> 8 & 255;
			this1.b[position + 3] = color & 255;
		}
	} else {
		var position = (toY * this1.getUInt16(0) + toX) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = color >> 24 & 255;
		this1.b[position + 1] = color >> 16 & 255;
		this1.b[position + 2] = color >> 8 & 255;
		this1.b[position + 3] = color & 255;
	}
	if(!(fromX >= 0 && fromY >= 0 && fromX < this1.getUInt16(0) && fromY < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = fromX;
		var this_y = fromY;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = fromX >= 0 && fromY >= 0 && fromX < this1.getUInt16(0) && fromY < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = fromX < view.x + view.width && fromY < view.y + view.height && fromX >= view.x && fromY >= view.y;
				break;
			case 1:
				has = !(fromX < view.x + view.width && fromY < view.y + view.height && fromX >= view.x && fromY >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x = view.x + view.width / 2 - c;
					var y = view.y + view.height / 2;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f1_x = x;
					var f1_y = y;
					var x = view.x + view.width / 2 + c;
					var y = view.y + view.height / 2;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f2_x = x;
					var f2_y = y;
					var x = fromX;
					var y = fromY;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var p_x = x;
					var p_y = y;
					var x = p_x - f1_x;
					var y = p_y - f1_y;
					var x1 = p_x - f2_x;
					var y1 = p_y - f2_y;
					has = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x = view.x + view.width / 2;
					var y = view.y + view.height / 2 - c;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f1_x = x;
					var f1_y = y;
					var x = view.x + view.width / 2;
					var y = view.y + view.height / 2 + c;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f2_x = x;
					var f2_y = y;
					var x = fromX;
					var y = fromY;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var p_x = x;
					var p_y = y;
					var x = p_x - f1_x;
					var y = p_y - f1_y;
					var x1 = p_x - f2_x;
					var y1 = p_y - f2_y;
					has = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x = fromX;
					var y = fromY;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var point1_x = x;
					var point1_y = y;
					var x = view.x + view.width / 2;
					var y = view.y + view.height / 2;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var point2_x = x;
					var point2_y = y;
					var x = point2_x - point1_x;
					var y = point2_y - point1_y;
					has = Math.sqrt(x * x + y * y) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(fromX - view.x - view.width / 2) / (view.width / 2) + Math.abs(fromY - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(fromX - view.x - view.width / 2) / (view.width / 2) + Math.abs(fromY - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (fromY * this1.getUInt16(0) + fromX) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = oldPixelResetColor >> 24 & 255;
			this1.b[position + 1] = oldPixelResetColor >> 16 & 255;
			this1.b[position + 2] = oldPixelResetColor >> 8 & 255;
			this1.b[position + 3] = oldPixelResetColor & 255;
		}
	} else {
		var position = (fromY * this1.getUInt16(0) + fromX) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = oldPixelResetColor >> 24 & 255;
		this1.b[position + 1] = oldPixelResetColor >> 16 & 255;
		this1.b[position + 2] = oldPixelResetColor >> 8 & 255;
		this1.b[position + 3] = oldPixelResetColor & 255;
	}
};
vision_ds_Image.moveSafePixel = function(this1,fromX,fromY,toX,toY,oldPixelResetColor) {
	var x = toX;
	var y = toY;
	var color;
	if(!(fromX >= 0 && fromY >= 0 && fromX < this1.getUInt16(0) && fromY < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this2 = [fromX,this1.getUInt16(0) - 1];
		var values = this2;
		var max = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] > max) {
				max = values[i];
			}
		}
		var this2 = [max,0];
		var values = this2;
		var min = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] < min) {
				min = values[i];
			}
		}
		var x1 = min;
		var this2 = [fromY,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1];
		var values = this2;
		var max = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] > max) {
				max = values[i];
			}
		}
		var this2 = [max,0];
		var values = this2;
		var min = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] < min) {
				min = values[i];
			}
		}
		var y1 = min;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y1 * this1.getUInt16(0) + x1) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		color = this2;
	} else {
		if(!(fromX >= 0 && fromY >= 0 && fromX < this1.getUInt16(0) && fromY < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = fromX;
			var this_y = fromY;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (fromY * this1.getUInt16(0) + fromX) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		color = this2;
	}
	x = vision_tools_MathTools.boundInt(x,0,this1.getUInt16(0) - 1);
	y = vision_tools_MathTools.boundInt(y,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
	if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color >> 24 & 255;
			this1.b[position + 1] = color >> 16 & 255;
			this1.b[position + 2] = color >> 8 & 255;
			this1.b[position + 3] = color & 255;
		}
	} else {
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = color >> 24 & 255;
		this1.b[position + 1] = color >> 16 & 255;
		this1.b[position + 2] = color >> 8 & 255;
		this1.b[position + 3] = color & 255;
	}
	var x = fromX;
	var y = fromY;
	x = vision_tools_MathTools.boundInt(x,0,this1.getUInt16(0) - 1);
	y = vision_tools_MathTools.boundInt(y,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
	if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = oldPixelResetColor >> 24 & 255;
			this1.b[position + 1] = oldPixelResetColor >> 16 & 255;
			this1.b[position + 2] = oldPixelResetColor >> 8 & 255;
			this1.b[position + 3] = oldPixelResetColor & 255;
		}
	} else {
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = oldPixelResetColor >> 24 & 255;
		this1.b[position + 1] = oldPixelResetColor >> 16 & 255;
		this1.b[position + 2] = oldPixelResetColor >> 8 & 255;
		this1.b[position + 3] = oldPixelResetColor & 255;
	}
};
vision_ds_Image.moveFloatingPixel = function(this1,fromX,fromY,toX,toY,oldPixelResetColor) {
	var color;
	var x = Math.ceil(fromX);
	var y = Math.ceil(fromY);
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this2 = this1;
		var x = vision_tools_MathTools.boundFloat(fromX,0,this1.getUInt16(0) - 1);
		var y = vision_tools_MathTools.boundFloat(fromY,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
		var x1 = Math.ceil(x);
		var y1 = Math.ceil(y);
		if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
			var this3 = this2;
			var x1 = vision_tools_MathTools.boundFloat(x,0,this2.getUInt16(0) - 1);
			var y1 = vision_tools_MathTools.boundFloat(y,0,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1);
			var x2 = Math.ceil(x1);
			var y2 = Math.ceil(y1);
			if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
				color = vision_ds_Image.getFloatingPixel(this3,vision_tools_MathTools.boundFloat(x1,0,this3.getUInt16(0) - 1),vision_tools_MathTools.boundFloat(y1,0,Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)) - 1));
			} else {
				var yFraction = y1 - (y1 | 0);
				var xFraction = x1 - (x1 | 0);
				var x2 = x1 | 0;
				var y2 = y1 | 0;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this4 = value;
				var x2 = (x1 | 0) + 1;
				var y2 = y1 | 0;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				var x2 = x1 | 0;
				var y2 = (y1 | 0) + 1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this6 = value;
				var x2 = (x1 | 0) + 1;
				var y2 = (y1 | 0) + 1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this7 = value;
				var red = (1 - yFraction) * ((1 - xFraction) * (this4 >> 16 & 255) + xFraction * (this5 >> 16 & 255)) + yFraction * ((1 - xFraction) * (this6 >> 16 & 255) + xFraction * (this7 >> 16 & 255)) | 0;
				var x2 = x1 | 0;
				var y2 = y1 | 0;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this4 = value;
				var x2 = (x1 | 0) + 1;
				var y2 = y1 | 0;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				var x2 = x1 | 0;
				var y2 = (y1 | 0) + 1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this6 = value;
				var x2 = (x1 | 0) + 1;
				var y2 = (y1 | 0) + 1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this7 = value;
				var green = (1 - yFraction) * ((1 - xFraction) * (this4 >> 8 & 255) + xFraction * (this5 >> 8 & 255)) + yFraction * ((1 - xFraction) * (this6 >> 8 & 255) + xFraction * (this7 >> 8 & 255)) | 0;
				var x2 = x1 | 0;
				var y2 = y1 | 0;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this4 = value;
				var x2 = (x1 | 0) + 1;
				var y2 = y1 | 0;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				var x2 = x1 | 0;
				var y2 = (y1 | 0) + 1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this6 = value;
				var x2 = (x1 | 0) + 1;
				var y2 = (y1 | 0) + 1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this7 = value;
				var blue = (1 - yFraction) * ((1 - xFraction) * (this4 & 255) + xFraction * (this5 & 255)) + yFraction * ((1 - xFraction) * (this6 & 255) + xFraction * (this7 & 255)) | 0;
				var x2 = x1 | 0;
				var y2 = y1 | 0;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this4 = value;
				var x2 = (x1 | 0) + 1;
				var y2 = y1 | 0;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				var x2 = x1 | 0;
				var y2 = (y1 | 0) + 1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this6 = value;
				var x2 = (x1 | 0) + 1;
				var y2 = (y1 | 0) + 1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this3.getUInt16(0) && y2 < Math.ceil((this3.length - vision_ds_Image.OFFSET) / (this3.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this3,new vision_ds_Point2D(this_x,this_y))));
				}
				var position = (y2 * this3.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this3.b[position] << 24 | this3.b[position + 1] << 16 | this3.b[position + 2] << 8 | this3.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this3 = value;
				var alpha = (1 - yFraction) * ((1 - xFraction) * (this4 >> 24 & 255) + xFraction * (this5 >> 24 & 255)) + yFraction * ((1 - xFraction) * (this6 >> 24 & 255) + xFraction * (this3 >> 24 & 255)) | 0;
				var Alpha = alpha;
				if(Alpha == null) {
					Alpha = 255;
				}
				var this3 = 0;
				var color1 = this3;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 255;
				}
				color1 &= -16711681;
				color1 |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
				color1 &= -65281;
				color1 |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
				color1 &= -256;
				color1 |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
				color1 &= 16777215;
				color1 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
				color = color1;
			}
		} else {
			var yFraction = y - (y | 0);
			var xFraction = x - (x | 0);
			var x1 = x | 0;
			var y1 = y | 0;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this3 = value;
			var x1 = (x | 0) + 1;
			var y1 = y | 0;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this4 = value;
			var x1 = x | 0;
			var y1 = (y | 0) + 1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this5 = value;
			var x1 = (x | 0) + 1;
			var y1 = (y | 0) + 1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this6 = value;
			var red = (1 - yFraction) * ((1 - xFraction) * (this3 >> 16 & 255) + xFraction * (this4 >> 16 & 255)) + yFraction * ((1 - xFraction) * (this5 >> 16 & 255) + xFraction * (this6 >> 16 & 255)) | 0;
			var x1 = x | 0;
			var y1 = y | 0;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this3 = value;
			var x1 = (x | 0) + 1;
			var y1 = y | 0;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this4 = value;
			var x1 = x | 0;
			var y1 = (y | 0) + 1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this5 = value;
			var x1 = (x | 0) + 1;
			var y1 = (y | 0) + 1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this6 = value;
			var green = (1 - yFraction) * ((1 - xFraction) * (this3 >> 8 & 255) + xFraction * (this4 >> 8 & 255)) + yFraction * ((1 - xFraction) * (this5 >> 8 & 255) + xFraction * (this6 >> 8 & 255)) | 0;
			var x1 = x | 0;
			var y1 = y | 0;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this3 = value;
			var x1 = (x | 0) + 1;
			var y1 = y | 0;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this4 = value;
			var x1 = x | 0;
			var y1 = (y | 0) + 1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this5 = value;
			var x1 = (x | 0) + 1;
			var y1 = (y | 0) + 1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this6 = value;
			var blue = (1 - yFraction) * ((1 - xFraction) * (this3 & 255) + xFraction * (this4 & 255)) + yFraction * ((1 - xFraction) * (this5 & 255) + xFraction * (this6 & 255)) | 0;
			var x1 = x | 0;
			var y1 = y | 0;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this3 = value;
			var x1 = (x | 0) + 1;
			var y1 = y | 0;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this4 = value;
			var x1 = x | 0;
			var y1 = (y | 0) + 1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this5 = value;
			var x1 = (x | 0) + 1;
			var y1 = (y | 0) + 1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this2.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			var alpha = (1 - yFraction) * ((1 - xFraction) * (this3 >> 24 & 255) + xFraction * (this4 >> 24 & 255)) + yFraction * ((1 - xFraction) * (this5 >> 24 & 255) + xFraction * (this2 >> 24 & 255)) | 0;
			var Alpha = alpha;
			if(Alpha == null) {
				Alpha = 255;
			}
			var this2 = 0;
			var color1 = this2;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 255;
			}
			color1 &= -16711681;
			color1 |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
			color1 &= -65281;
			color1 |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
			color1 &= -256;
			color1 |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
			color1 &= 16777215;
			color1 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
			color = color1;
		}
	} else {
		var yFraction = fromY - (fromY | 0);
		var xFraction = fromX - (fromX | 0);
		var x = fromX | 0;
		var y = fromY | 0;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		var x = (fromX | 0) + 1;
		var y = fromY | 0;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this3 = value;
		var x = fromX | 0;
		var y = (fromY | 0) + 1;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this4 = value;
		var x = (fromX | 0) + 1;
		var y = (fromY | 0) + 1;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this5 = value;
		var red = (1 - yFraction) * ((1 - xFraction) * (this2 >> 16 & 255) + xFraction * (this3 >> 16 & 255)) + yFraction * ((1 - xFraction) * (this4 >> 16 & 255) + xFraction * (this5 >> 16 & 255)) | 0;
		var x = fromX | 0;
		var y = fromY | 0;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		var x = (fromX | 0) + 1;
		var y = fromY | 0;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this3 = value;
		var x = fromX | 0;
		var y = (fromY | 0) + 1;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this4 = value;
		var x = (fromX | 0) + 1;
		var y = (fromY | 0) + 1;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this5 = value;
		var green = (1 - yFraction) * ((1 - xFraction) * (this2 >> 8 & 255) + xFraction * (this3 >> 8 & 255)) + yFraction * ((1 - xFraction) * (this4 >> 8 & 255) + xFraction * (this5 >> 8 & 255)) | 0;
		var x = fromX | 0;
		var y = fromY | 0;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		var x = (fromX | 0) + 1;
		var y = fromY | 0;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this3 = value;
		var x = fromX | 0;
		var y = (fromY | 0) + 1;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this4 = value;
		var x = (fromX | 0) + 1;
		var y = (fromY | 0) + 1;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this5 = value;
		var blue = (1 - yFraction) * ((1 - xFraction) * (this2 & 255) + xFraction * (this3 & 255)) + yFraction * ((1 - xFraction) * (this4 & 255) + xFraction * (this5 & 255)) | 0;
		var x = fromX | 0;
		var y = fromY | 0;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		var x = (fromX | 0) + 1;
		var y = fromY | 0;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this3 = value;
		var x = fromX | 0;
		var y = (fromY | 0) + 1;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this4 = value;
		var x = (fromX | 0) + 1;
		var y = (fromY | 0) + 1;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this5 = value;
		var alpha = (1 - yFraction) * ((1 - xFraction) * (this2 >> 24 & 255) + xFraction * (this3 >> 24 & 255)) + yFraction * ((1 - xFraction) * (this4 >> 24 & 255) + xFraction * (this5 >> 24 & 255)) | 0;
		var Alpha = alpha;
		if(Alpha == null) {
			Alpha = 255;
		}
		var this2 = 0;
		var color1 = this2;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 255;
		}
		color1 &= -16711681;
		color1 |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
		color1 &= -65281;
		color1 |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
		color1 &= -256;
		color1 |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
		color1 &= 16777215;
		color1 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
		color = color1;
	}
	var x = Math.ceil(toX);
	var y = Math.ceil(toY);
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this2 = this1;
		var x = vision_tools_MathTools.boundFloat(toX,0,this1.getUInt16(0) - 1);
		var y = vision_tools_MathTools.boundFloat(toY,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
		var x1 = Math.ceil(x);
		var y1 = Math.ceil(y);
		if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
			vision_ds_Image.setFloatingPixel(this2,vision_tools_MathTools.boundFloat(x,0,this2.getUInt16(0) - 1),vision_tools_MathTools.boundFloat(y,0,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1),color);
		} else {
			var yFraction = y - (y | 0);
			var xFraction = x - (x | 0);
			var x1 = Math.floor(x);
			var y1 = Math.floor(y);
			var Red = (1 - xFraction + (1 - yFraction)) / 2 * ((color >> 16 & 255) / 255);
			var Green = (1 - xFraction + (1 - yFraction)) / 2 * ((color >> 8 & 255) / 255);
			var Blue = (1 - xFraction + (1 - yFraction)) / 2 * ((color & 255) / 255);
			var Alpha = (color >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var this3 = 0;
			var color1 = this3;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color1 &= -16711681;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color1 &= -65281;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color1 &= -256;
			color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color1 &= 16777215;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color2 = color1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y))));
			} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this3 = this2.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var p_x = x2;
							var p_y = y2;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 - c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 + c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var p_x = x2;
							var p_y = y2;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point1_x = x2;
							var point1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x2 = point2_x - point1_x;
							var y2 = point2_y - point1_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color2 >> 24 & 255;
					this2.b[position + 1] = color2 >> 16 & 255;
					this2.b[position + 2] = color2 >> 8 & 255;
					this2.b[position + 3] = color2 & 255;
				}
			} else {
				var position = (y1 * this2.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this2.b[position] = color2 >> 24 & 255;
				this2.b[position + 1] = color2 >> 16 & 255;
				this2.b[position + 2] = color2 >> 8 & 255;
				this2.b[position + 3] = color2 & 255;
			}
			if(y != (y | 0)) {
				var x1 = Math.floor(x);
				var y1 = Math.ceil(y);
				var Red = (1 - xFraction + yFraction) / 2 * ((color >> 16 & 255) / 255);
				var Green = (1 - xFraction + yFraction) / 2 * ((color >> 8 & 255) / 255);
				var Blue = (1 - xFraction + yFraction) / 2 * ((color & 255) / 255);
				var Alpha = (color >> 24 & 255) / 255;
				if(Alpha == null) {
					Alpha = 1;
				}
				var this3 = 0;
				var color1 = this3;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value = Math.round(Red * 255);
				color1 &= -16711681;
				color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
				var value = Math.round(Green * 255);
				color1 &= -65281;
				color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
				var value = Math.round(Blue * 255);
				color1 &= -256;
				color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
				var value = Math.round(Alpha1 * 255);
				color1 &= 16777215;
				color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
				var color2 = color1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y))));
				} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this3 = this2.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position = (y1 * this2.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						this2.b[position] = color2 >> 24 & 255;
						this2.b[position + 1] = color2 >> 16 & 255;
						this2.b[position + 2] = color2 >> 8 & 255;
						this2.b[position + 3] = color2 & 255;
					}
				} else {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color2 >> 24 & 255;
					this2.b[position + 1] = color2 >> 16 & 255;
					this2.b[position + 2] = color2 >> 8 & 255;
					this2.b[position + 3] = color2 & 255;
				}
			}
			if(x != (x | 0)) {
				var x1 = Math.ceil(x);
				var y1 = Math.floor(y);
				var Red = (xFraction + (1 - yFraction)) / 2 * ((color >> 16 & 255) / 255);
				var Green = (xFraction + (1 - yFraction)) / 2 * ((color >> 8 & 255) / 255);
				var Blue = (xFraction + (1 - yFraction)) / 2 * ((color & 255) / 255);
				var Alpha = (color >> 24 & 255) / 255;
				if(Alpha == null) {
					Alpha = 1;
				}
				var this3 = 0;
				var color1 = this3;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value = Math.round(Red * 255);
				color1 &= -16711681;
				color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
				var value = Math.round(Green * 255);
				color1 &= -65281;
				color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
				var value = Math.round(Blue * 255);
				color1 &= -256;
				color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
				var value = Math.round(Alpha1 * 255);
				color1 &= 16777215;
				color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
				var color2 = color1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y))));
				} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this3 = this2.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position = (y1 * this2.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						this2.b[position] = color2 >> 24 & 255;
						this2.b[position + 1] = color2 >> 16 & 255;
						this2.b[position + 2] = color2 >> 8 & 255;
						this2.b[position + 3] = color2 & 255;
					}
				} else {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color2 >> 24 & 255;
					this2.b[position + 1] = color2 >> 16 & 255;
					this2.b[position + 2] = color2 >> 8 & 255;
					this2.b[position + 3] = color2 & 255;
				}
			}
			if(x != (x | 0) && y != (y | 0)) {
				var x1 = Math.ceil(x);
				var y1 = Math.ceil(y);
				var Red = (xFraction + yFraction) / 2 * ((color >> 16 & 255) / 255);
				var Green = (xFraction + yFraction) / 2 * ((color >> 8 & 255) / 255);
				var Blue = (xFraction + yFraction) / 2 * ((color & 255) / 255);
				var Alpha = (color >> 24 & 255) / 255;
				if(Alpha == null) {
					Alpha = 1;
				}
				var this3 = 0;
				var color1 = this3;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value = Math.round(Red * 255);
				color1 &= -16711681;
				color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
				var value = Math.round(Green * 255);
				color1 &= -65281;
				color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
				var value = Math.round(Blue * 255);
				color1 &= -256;
				color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
				var value = Math.round(Alpha1 * 255);
				color1 &= 16777215;
				color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
				var color2 = color1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y))));
				} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this3 = this2.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x = view.x + view.width / 2 - c;
								var y = view.y + view.height / 2;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f1_x = x;
								var f1_y = y;
								var x = view.x + view.width / 2 + c;
								var y = view.y + view.height / 2;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f2_x = x;
								var f2_y = y;
								var x = x1;
								var y = y1;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var p_x = x;
								var p_y = y;
								var x = p_x - f1_x;
								var y = p_y - f1_y;
								var x2 = p_x - f2_x;
								var y2 = p_y - f2_y;
								has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x = view.x + view.width / 2;
								var y = view.y + view.height / 2 - c;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f1_x = x;
								var f1_y = y;
								var x = view.x + view.width / 2;
								var y = view.y + view.height / 2 + c;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f2_x = x;
								var f2_y = y;
								var x = x1;
								var y = y1;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var p_x = x;
								var p_y = y;
								var x = p_x - f1_x;
								var y = p_y - f1_y;
								var x2 = p_x - f2_x;
								var y2 = p_y - f2_y;
								has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x = x1;
								var y = y1;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var point1_x = x;
								var point1_y = y;
								var x = view.x + view.width / 2;
								var y = view.y + view.height / 2;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var point2_x = x;
								var point2_y = y;
								var x = point2_x - point1_x;
								var y = point2_y - point1_y;
								has = Math.sqrt(x * x + y * y) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position = (y1 * this2.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						this2.b[position] = color2 >> 24 & 255;
						this2.b[position + 1] = color2 >> 16 & 255;
						this2.b[position + 2] = color2 >> 8 & 255;
						this2.b[position + 3] = color2 & 255;
					}
				} else {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color2 >> 24 & 255;
					this2.b[position + 1] = color2 >> 16 & 255;
					this2.b[position + 2] = color2 >> 8 & 255;
					this2.b[position + 3] = color2 & 255;
				}
			}
		}
	} else {
		var yFraction = toY - (toY | 0);
		var xFraction = toX - (toX | 0);
		var x = Math.floor(toX);
		var y = Math.floor(toY);
		var Red = (1 - xFraction + (1 - yFraction)) / 2 * ((color >> 16 & 255) / 255);
		var Green = (1 - xFraction + (1 - yFraction)) / 2 * ((color >> 8 & 255) / 255);
		var Blue = (1 - xFraction + (1 - yFraction)) / 2 * ((color & 255) / 255);
		var Alpha = (color >> 24 & 255) / 255;
		if(Alpha == null) {
			Alpha = 1;
		}
		var this2 = 0;
		var color1 = this2;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color1 &= -16711681;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color1 &= -65281;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color1 &= -256;
		color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color1 &= 16777215;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var color2 = color1;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2 - c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2 + c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var p_x = x1;
						var p_y = y1;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 - c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 + c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var p_x = x1;
						var p_y = y1;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point1_x = x1;
						var point1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point2_x = x1;
						var point2_y = y1;
						var x1 = point2_x - point1_x;
						var y1 = point2_y - point1_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color2 >> 24 & 255;
				this1.b[position + 1] = color2 >> 16 & 255;
				this1.b[position + 2] = color2 >> 8 & 255;
				this1.b[position + 3] = color2 & 255;
			}
		} else {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color2 >> 24 & 255;
			this1.b[position + 1] = color2 >> 16 & 255;
			this1.b[position + 2] = color2 >> 8 & 255;
			this1.b[position + 3] = color2 & 255;
		}
		if(toY != (toY | 0)) {
			var x = Math.floor(toX);
			var y = Math.ceil(toY);
			var Red = (1 - xFraction + yFraction) / 2 * ((color >> 16 & 255) / 255);
			var Green = (1 - xFraction + yFraction) / 2 * ((color >> 8 & 255) / 255);
			var Blue = (1 - xFraction + yFraction) / 2 * ((color & 255) / 255);
			var Alpha = (color >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var this2 = 0;
			var color1 = this2;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color1 &= -16711681;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color1 &= -65281;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color1 &= -256;
			color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color1 &= 16777215;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color2 = color1;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 - c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 + c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point2_x = x1;
							var point2_y = y1;
							var x1 = point2_x - point1_x;
							var y1 = point2_y - point1_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color2 >> 24 & 255;
					this1.b[position + 1] = color2 >> 16 & 255;
					this1.b[position + 2] = color2 >> 8 & 255;
					this1.b[position + 3] = color2 & 255;
				}
			} else {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color2 >> 24 & 255;
				this1.b[position + 1] = color2 >> 16 & 255;
				this1.b[position + 2] = color2 >> 8 & 255;
				this1.b[position + 3] = color2 & 255;
			}
		}
		if(toX != (toX | 0)) {
			var x = Math.ceil(toX);
			var y = Math.floor(toY);
			var Red = (xFraction + (1 - yFraction)) / 2 * ((color >> 16 & 255) / 255);
			var Green = (xFraction + (1 - yFraction)) / 2 * ((color >> 8 & 255) / 255);
			var Blue = (xFraction + (1 - yFraction)) / 2 * ((color & 255) / 255);
			var Alpha = (color >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var this2 = 0;
			var color1 = this2;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color1 &= -16711681;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color1 &= -65281;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color1 &= -256;
			color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color1 &= 16777215;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color2 = color1;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 - c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 + c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point2_x = x1;
							var point2_y = y1;
							var x1 = point2_x - point1_x;
							var y1 = point2_y - point1_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color2 >> 24 & 255;
					this1.b[position + 1] = color2 >> 16 & 255;
					this1.b[position + 2] = color2 >> 8 & 255;
					this1.b[position + 3] = color2 & 255;
				}
			} else {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color2 >> 24 & 255;
				this1.b[position + 1] = color2 >> 16 & 255;
				this1.b[position + 2] = color2 >> 8 & 255;
				this1.b[position + 3] = color2 & 255;
			}
		}
		if(toX != (toX | 0) && toY != (toY | 0)) {
			var x = Math.ceil(toX);
			var y = Math.ceil(toY);
			var Red = (xFraction + yFraction) / 2 * ((color >> 16 & 255) / 255);
			var Green = (xFraction + yFraction) / 2 * ((color >> 8 & 255) / 255);
			var Blue = (xFraction + yFraction) / 2 * ((color & 255) / 255);
			var Alpha = (color >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var this2 = 0;
			var color = this2;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color &= -16711681;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color &= -65281;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color &= -256;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color &= 16777215;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color1 = color;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 - c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 + c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point2_x = x1;
							var point2_y = y1;
							var x1 = point2_x - point1_x;
							var y1 = point2_y - point1_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color1 >> 24 & 255;
					this1.b[position + 1] = color1 >> 16 & 255;
					this1.b[position + 2] = color1 >> 8 & 255;
					this1.b[position + 3] = color1 & 255;
				}
			} else {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color1 >> 24 & 255;
				this1.b[position + 1] = color1 >> 16 & 255;
				this1.b[position + 2] = color1 >> 8 & 255;
				this1.b[position + 3] = color1 & 255;
			}
		}
	}
	var x = Math.ceil(fromX);
	var y = Math.ceil(fromY);
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this2 = this1;
		var x = vision_tools_MathTools.boundFloat(fromX,0,this1.getUInt16(0) - 1);
		var y = vision_tools_MathTools.boundFloat(fromY,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
		var x1 = Math.ceil(x);
		var y1 = Math.ceil(y);
		if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
			vision_ds_Image.setFloatingPixel(this2,vision_tools_MathTools.boundFloat(x,0,this2.getUInt16(0) - 1),vision_tools_MathTools.boundFloat(y,0,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1),oldPixelResetColor);
		} else {
			var yFraction = y - (y | 0);
			var xFraction = x - (x | 0);
			var x1 = Math.floor(x);
			var y1 = Math.floor(y);
			var Red = (1 - xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
			var Green = (1 - xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
			var Blue = (1 - xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor & 255) / 255);
			var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var this3 = 0;
			var color = this3;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color &= -16711681;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color &= -65281;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color &= -256;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color &= 16777215;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color1 = color;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y))));
			} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this3 = this2.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var p_x = x2;
							var p_y = y2;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 - c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 + c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var p_x = x2;
							var p_y = y2;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point1_x = x2;
							var point1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x2 = point2_x - point1_x;
							var y2 = point2_y - point1_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color1 >> 24 & 255;
					this2.b[position + 1] = color1 >> 16 & 255;
					this2.b[position + 2] = color1 >> 8 & 255;
					this2.b[position + 3] = color1 & 255;
				}
			} else {
				var position = (y1 * this2.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this2.b[position] = color1 >> 24 & 255;
				this2.b[position + 1] = color1 >> 16 & 255;
				this2.b[position + 2] = color1 >> 8 & 255;
				this2.b[position + 3] = color1 & 255;
			}
			if(y != (y | 0)) {
				var x1 = Math.floor(x);
				var y1 = Math.ceil(y);
				var Red = (1 - xFraction + yFraction) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
				var Green = (1 - xFraction + yFraction) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
				var Blue = (1 - xFraction + yFraction) / 2 * ((oldPixelResetColor & 255) / 255);
				var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
				if(Alpha == null) {
					Alpha = 1;
				}
				var this3 = 0;
				var color = this3;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value = Math.round(Red * 255);
				color &= -16711681;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
				var value = Math.round(Green * 255);
				color &= -65281;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
				var value = Math.round(Blue * 255);
				color &= -256;
				color |= value > 255 ? 255 : value < 0 ? 0 : value;
				var value = Math.round(Alpha1 * 255);
				color &= 16777215;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
				var color1 = color;
				if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y))));
				} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this3 = this2.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position = (y1 * this2.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						this2.b[position] = color1 >> 24 & 255;
						this2.b[position + 1] = color1 >> 16 & 255;
						this2.b[position + 2] = color1 >> 8 & 255;
						this2.b[position + 3] = color1 & 255;
					}
				} else {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color1 >> 24 & 255;
					this2.b[position + 1] = color1 >> 16 & 255;
					this2.b[position + 2] = color1 >> 8 & 255;
					this2.b[position + 3] = color1 & 255;
				}
			}
			if(x != (x | 0)) {
				var x1 = Math.ceil(x);
				var y1 = Math.floor(y);
				var Red = (xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
				var Green = (xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
				var Blue = (xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor & 255) / 255);
				var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
				if(Alpha == null) {
					Alpha = 1;
				}
				var this3 = 0;
				var color = this3;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value = Math.round(Red * 255);
				color &= -16711681;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
				var value = Math.round(Green * 255);
				color &= -65281;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
				var value = Math.round(Blue * 255);
				color &= -256;
				color |= value > 255 ? 255 : value < 0 ? 0 : value;
				var value = Math.round(Alpha1 * 255);
				color &= 16777215;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
				var color1 = color;
				if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y))));
				} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this3 = this2.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position = (y1 * this2.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						this2.b[position] = color1 >> 24 & 255;
						this2.b[position + 1] = color1 >> 16 & 255;
						this2.b[position + 2] = color1 >> 8 & 255;
						this2.b[position + 3] = color1 & 255;
					}
				} else {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color1 >> 24 & 255;
					this2.b[position + 1] = color1 >> 16 & 255;
					this2.b[position + 2] = color1 >> 8 & 255;
					this2.b[position + 3] = color1 & 255;
				}
			}
			if(x != (x | 0) && y != (y | 0)) {
				var x1 = Math.ceil(x);
				var y1 = Math.ceil(y);
				var Red = (xFraction + yFraction) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
				var Green = (xFraction + yFraction) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
				var Blue = (xFraction + yFraction) / 2 * ((oldPixelResetColor & 255) / 255);
				var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
				if(Alpha == null) {
					Alpha = 1;
				}
				var this3 = 0;
				var color = this3;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value = Math.round(Red * 255);
				color &= -16711681;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
				var value = Math.round(Green * 255);
				color &= -65281;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
				var value = Math.round(Blue * 255);
				color &= -256;
				color |= value > 255 ? 255 : value < 0 ? 0 : value;
				var value = Math.round(Alpha1 * 255);
				color &= 16777215;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
				var color1 = color;
				if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y))));
				} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this3 = this2.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x = view.x + view.width / 2 - c;
								var y = view.y + view.height / 2;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f1_x = x;
								var f1_y = y;
								var x = view.x + view.width / 2 + c;
								var y = view.y + view.height / 2;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f2_x = x;
								var f2_y = y;
								var x = x1;
								var y = y1;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var p_x = x;
								var p_y = y;
								var x = p_x - f1_x;
								var y = p_y - f1_y;
								var x2 = p_x - f2_x;
								var y2 = p_y - f2_y;
								has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x = view.x + view.width / 2;
								var y = view.y + view.height / 2 - c;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f1_x = x;
								var f1_y = y;
								var x = view.x + view.width / 2;
								var y = view.y + view.height / 2 + c;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f2_x = x;
								var f2_y = y;
								var x = x1;
								var y = y1;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var p_x = x;
								var p_y = y;
								var x = p_x - f1_x;
								var y = p_y - f1_y;
								var x2 = p_x - f2_x;
								var y2 = p_y - f2_y;
								has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x = x1;
								var y = y1;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var point1_x = x;
								var point1_y = y;
								var x = view.x + view.width / 2;
								var y = view.y + view.height / 2;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var point2_x = x;
								var point2_y = y;
								var x = point2_x - point1_x;
								var y = point2_y - point1_y;
								has = Math.sqrt(x * x + y * y) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position = (y1 * this2.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						this2.b[position] = color1 >> 24 & 255;
						this2.b[position + 1] = color1 >> 16 & 255;
						this2.b[position + 2] = color1 >> 8 & 255;
						this2.b[position + 3] = color1 & 255;
					}
				} else {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color1 >> 24 & 255;
					this2.b[position + 1] = color1 >> 16 & 255;
					this2.b[position + 2] = color1 >> 8 & 255;
					this2.b[position + 3] = color1 & 255;
				}
			}
		}
	} else {
		var yFraction = fromY - (fromY | 0);
		var xFraction = fromX - (fromX | 0);
		var x = Math.floor(fromX);
		var y = Math.floor(fromY);
		var Red = (1 - xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
		var Green = (1 - xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
		var Blue = (1 - xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor & 255) / 255);
		var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
		if(Alpha == null) {
			Alpha = 1;
		}
		var this2 = 0;
		var color = this2;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var color1 = color;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2 - c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2 + c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var p_x = x1;
						var p_y = y1;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 - c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 + c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var p_x = x1;
						var p_y = y1;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point1_x = x1;
						var point1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point2_x = x1;
						var point2_y = y1;
						var x1 = point2_x - point1_x;
						var y1 = point2_y - point1_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color1 >> 24 & 255;
				this1.b[position + 1] = color1 >> 16 & 255;
				this1.b[position + 2] = color1 >> 8 & 255;
				this1.b[position + 3] = color1 & 255;
			}
		} else {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color1 >> 24 & 255;
			this1.b[position + 1] = color1 >> 16 & 255;
			this1.b[position + 2] = color1 >> 8 & 255;
			this1.b[position + 3] = color1 & 255;
		}
		if(fromY != (fromY | 0)) {
			var x = Math.floor(fromX);
			var y = Math.ceil(fromY);
			var Red = (1 - xFraction + yFraction) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
			var Green = (1 - xFraction + yFraction) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
			var Blue = (1 - xFraction + yFraction) / 2 * ((oldPixelResetColor & 255) / 255);
			var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var this2 = 0;
			var color = this2;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color &= -16711681;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color &= -65281;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color &= -256;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color &= 16777215;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color1 = color;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 - c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 + c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point2_x = x1;
							var point2_y = y1;
							var x1 = point2_x - point1_x;
							var y1 = point2_y - point1_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color1 >> 24 & 255;
					this1.b[position + 1] = color1 >> 16 & 255;
					this1.b[position + 2] = color1 >> 8 & 255;
					this1.b[position + 3] = color1 & 255;
				}
			} else {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color1 >> 24 & 255;
				this1.b[position + 1] = color1 >> 16 & 255;
				this1.b[position + 2] = color1 >> 8 & 255;
				this1.b[position + 3] = color1 & 255;
			}
		}
		if(fromX != (fromX | 0)) {
			var x = Math.ceil(fromX);
			var y = Math.floor(fromY);
			var Red = (xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
			var Green = (xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
			var Blue = (xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor & 255) / 255);
			var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var this2 = 0;
			var color = this2;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color &= -16711681;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color &= -65281;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color &= -256;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color &= 16777215;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color1 = color;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 - c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 + c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point2_x = x1;
							var point2_y = y1;
							var x1 = point2_x - point1_x;
							var y1 = point2_y - point1_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color1 >> 24 & 255;
					this1.b[position + 1] = color1 >> 16 & 255;
					this1.b[position + 2] = color1 >> 8 & 255;
					this1.b[position + 3] = color1 & 255;
				}
			} else {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color1 >> 24 & 255;
				this1.b[position + 1] = color1 >> 16 & 255;
				this1.b[position + 2] = color1 >> 8 & 255;
				this1.b[position + 3] = color1 & 255;
			}
		}
		if(fromX != (fromX | 0) && fromY != (fromY | 0)) {
			var x = Math.ceil(fromX);
			var y = Math.ceil(fromY);
			var Red = (xFraction + yFraction) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
			var Green = (xFraction + yFraction) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
			var Blue = (xFraction + yFraction) / 2 * ((oldPixelResetColor & 255) / 255);
			var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var this2 = 0;
			var color = this2;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color &= -16711681;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color &= -65281;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color &= -256;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color &= 16777215;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color1 = color;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 - c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 + c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point2_x = x1;
							var point2_y = y1;
							var x1 = point2_x - point1_x;
							var y1 = point2_y - point1_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color1 >> 24 & 255;
					this1.b[position + 1] = color1 >> 16 & 255;
					this1.b[position + 2] = color1 >> 8 & 255;
					this1.b[position + 3] = color1 & 255;
				}
			} else {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color1 >> 24 & 255;
				this1.b[position + 1] = color1 >> 16 & 255;
				this1.b[position + 2] = color1 >> 8 & 255;
				this1.b[position + 3] = color1 & 255;
			}
		}
	}
};
vision_ds_Image.moveUnsafePixel = function(this1,fromX,fromY,toX,toY,oldPixelResetColor) {
	var position = (fromY * this1.getUInt16(0) + fromX) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var color = this2;
	var position = (toY * this1.getUInt16(0) + toX) * 4;
	position += vision_ds_Image.OFFSET;
	this1.b[position] = color >> 24 & 255;
	this1.b[position + 1] = color >> 16 & 255;
	this1.b[position + 2] = color >> 8 & 255;
	this1.b[position + 3] = color & 255;
	var position = (fromY * this1.getUInt16(0) + fromX) * 4;
	position += vision_ds_Image.OFFSET;
	this1.b[position] = oldPixelResetColor >> 24 & 255;
	this1.b[position + 1] = oldPixelResetColor >> 16 & 255;
	this1.b[position + 2] = oldPixelResetColor >> 8 & 255;
	this1.b[position + 3] = oldPixelResetColor & 255;
};
vision_ds_Image.copyPixelFrom = function(this1,image,x,y) {
	if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * image.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var c = this2;
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c1 = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c1;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c1;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c1 = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c1;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c1;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = c >> 24 & 255;
			this1.b[position + 1] = c >> 16 & 255;
			this1.b[position + 2] = c >> 8 & 255;
			this1.b[position + 3] = c & 255;
		}
	} else {
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = c >> 24 & 255;
		this1.b[position + 1] = c >> 16 & 255;
		this1.b[position + 2] = c >> 8 & 255;
		this1.b[position + 3] = c & 255;
	}
	return c;
};
vision_ds_Image.copyPixelTo = function(this1,image,x,y) {
	var image1 = this1;
	if(!(x >= 0 && y >= 0 && x < image1.getUInt16(0) && y < Math.ceil((image1.length - vision_ds_Image.OFFSET) / (image1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * image1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = image1.b[position] << 24 | image1.b[position + 1] << 16 | image1.b[position + 2] << 8 | image1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	var c = this1;
	if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
	} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var image1 = image.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c1 = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c1;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c1;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c1 = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c1;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c1;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * image.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			image.b[position] = c >> 24 & 255;
			image.b[position + 1] = c >> 16 & 255;
			image.b[position + 2] = c >> 8 & 255;
			image.b[position + 3] = c & 255;
		}
	} else {
		var position = (y * image.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		image.b[position] = c >> 24 & 255;
		image.b[position + 1] = c >> 16 & 255;
		image.b[position + 2] = c >> 8 & 255;
		image.b[position + 3] = c & 255;
	}
	return c;
};
vision_ds_Image.getImagePortion = function(this1,rect) {
	var width = rect.width;
	var height = rect.height;
	var color = 0;
	if(color == null) {
		color = 0;
	}
	var this2 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this3 = this2;
	this3.setUInt16(0,width);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this3.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this3.length) {
		this3.b[i] = color >> 24 & 255;
		this3.b[i + 1] = color >> 16 & 255;
		this3.b[i + 2] = color >> 8 & 255;
		this3.b[i + 3] = color & 255;
		i += 4;
	}
	var subImage = this3;
	var _g = rect.x;
	var _g1 = rect.x + rect.width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = rect.y;
		var _g3 = rect.y + rect.height;
		while(_g2 < _g3) {
			var y = _g2++;
			var x1 = x - rect.x;
			var y1 = y - rect.y;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			var color = this2;
			if(!(x1 >= 0 && y1 >= 0 && x1 < subImage.getUInt16(0) && y1 < Math.ceil((subImage.length - vision_ds_Image.OFFSET) / (subImage.getUInt16(0) * 4)))) {
				var this_x1 = x1;
				var this_y1 = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(subImage,new vision_ds_Point2D(this_x1,this_y1)));
			} else if(subImage.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != subImage.getUInt16(0) || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((subImage.length - vision_ds_Image.OFFSET) / (subImage.getUInt16(0) * 4)) || subImage.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(subImage.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != subImage.getUInt16(0) || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((subImage.length - vision_ds_Image.OFFSET) / (subImage.getUInt16(0) * 4)) || subImage.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < subImage.getUInt16(0) && y1 < Math.ceil((subImage.length - vision_ds_Image.OFFSET) / (subImage.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = subImage.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var subImage1 = subImage.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),subImage1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var x4 = x1;
							var y4 = y1;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var p_x = x4;
							var p_y = y4;
							var x5 = p_x - f1_x;
							var y5 = p_y - f1_y;
							var x6 = p_x - f2_x;
							var y6 = p_y - f2_y;
							has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 - c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f1_x1 = x7;
							var f1_y1 = y7;
							var x8 = view.x + view.width / 2;
							var y8 = view.y + view.height / 2 + c1;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var f2_x1 = x8;
							var f2_y1 = y8;
							var x9 = x1;
							var y9 = y1;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var p_x1 = x9;
							var p_y1 = y9;
							var x10 = p_x1 - f1_x1;
							var y10 = p_y1 - f1_y1;
							var x11 = p_x1 - f2_x1;
							var y11 = p_y1 - f2_y1;
							has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x12 = x1;
							var y12 = y1;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point1_x = x12;
							var point1_y = y12;
							var x13 = view.x + view.width / 2;
							var y13 = view.y + view.height / 2;
							if(y13 == null) {
								y13 = 0;
							}
							if(x13 == null) {
								x13 = 0;
							}
							var point2_x = x13;
							var point2_y = y13;
							var x14 = point2_x - point1_x;
							var y14 = point2_y - point1_y;
							has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position1 = (y1 * subImage.getUInt16(0) + x1) * 4;
					position1 += vision_ds_Image.OFFSET;
					subImage.b[position1] = color >> 24 & 255;
					subImage.b[position1 + 1] = color >> 16 & 255;
					subImage.b[position1 + 2] = color >> 8 & 255;
					subImage.b[position1 + 3] = color & 255;
				}
			} else {
				var position2 = (y1 * subImage.getUInt16(0) + x1) * 4;
				position2 += vision_ds_Image.OFFSET;
				subImage.b[position2] = color >> 24 & 255;
				subImage.b[position2 + 1] = color >> 16 & 255;
				subImage.b[position2 + 2] = color >> 8 & 255;
				subImage.b[position2 + 3] = color & 255;
			}
		}
	}
	return subImage;
};
vision_ds_Image.setImagePortion = function(this1,rect,image) {
	var _g = rect.x;
	var _g1 = rect.x + rect.width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = rect.y;
		var _g3 = rect.y + rect.height;
		while(_g2 < _g3) {
			var y = _g2++;
			var x1 = x - rect.x;
			var y1 = y - rect.y;
			if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * image.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			var color = this2;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x1 = x;
				var this_y1 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this3 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var x4 = x;
							var y4 = y;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var p_x = x4;
							var p_y = y4;
							var x5 = p_x - f1_x;
							var y5 = p_y - f1_y;
							var x6 = p_x - f2_x;
							var y6 = p_y - f2_y;
							has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 - c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f1_x1 = x7;
							var f1_y1 = y7;
							var x8 = view.x + view.width / 2;
							var y8 = view.y + view.height / 2 + c1;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var f2_x1 = x8;
							var f2_y1 = y8;
							var x9 = x;
							var y9 = y;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var p_x1 = x9;
							var p_y1 = y9;
							var x10 = p_x1 - f1_x1;
							var y10 = p_y1 - f1_y1;
							var x11 = p_x1 - f2_x1;
							var y11 = p_y1 - f2_y1;
							has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x12 = x;
							var y12 = y;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point1_x = x12;
							var point1_y = y12;
							var x13 = view.x + view.width / 2;
							var y13 = view.y + view.height / 2;
							if(y13 == null) {
								y13 = 0;
							}
							if(x13 == null) {
								x13 = 0;
							}
							var point2_x = x13;
							var point2_y = y13;
							var x14 = point2_x - point1_x;
							var y14 = point2_y - point1_y;
							has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position1 = (y * this1.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					this1.b[position1] = color >> 24 & 255;
					this1.b[position1 + 1] = color >> 16 & 255;
					this1.b[position1 + 2] = color >> 8 & 255;
					this1.b[position1 + 3] = color & 255;
				}
			} else {
				var position2 = (y * this1.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color >> 24 & 255;
				this1.b[position2 + 1] = color >> 16 & 255;
				this1.b[position2 + 2] = color >> 8 & 255;
				this1.b[position2 + 3] = color & 255;
			}
		}
	}
};
vision_ds_Image.drawLine = function(this1,x1,y1,x2,y2,color) {
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	var safety = 0;
	while(safety++ < 10000) {
		var x = x1;
		var y = y1;
		x = vision_tools_MathTools.boundInt(x,0,this1.getUInt16(0) - 1);
		y = vision_tools_MathTools.boundInt(y,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
		if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x3 = view.x + view.width / 2 - c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f1_x = x3;
						var f1_y = y3;
						var x4 = view.x + view.width / 2 + c;
						var y4 = view.y + view.height / 2;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var f2_x = x4;
						var f2_y = y4;
						var x5 = x;
						var y5 = y;
						if(y5 == null) {
							y5 = 0;
						}
						if(x5 == null) {
							x5 = 0;
						}
						var p_x = x5;
						var p_y = y5;
						var x6 = p_x - f1_x;
						var y6 = p_y - f1_y;
						var x7 = p_x - f2_x;
						var y7 = p_y - f2_y;
						has = Math.sqrt(x6 * x6 + y6 * y6) + Math.sqrt(x7 * x7 + y7 * y7) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x8 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 - c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f1_x1 = x8;
						var f1_y1 = y8;
						var x9 = view.x + view.width / 2;
						var y9 = view.y + view.height / 2 + c1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var f2_x1 = x9;
						var f2_y1 = y9;
						var x10 = x;
						var y10 = y;
						if(y10 == null) {
							y10 = 0;
						}
						if(x10 == null) {
							x10 = 0;
						}
						var p_x1 = x10;
						var p_y1 = y10;
						var x11 = p_x1 - f1_x1;
						var y11 = p_y1 - f1_y1;
						var x12 = p_x1 - f2_x1;
						var y12 = p_y1 - f2_y1;
						has = Math.sqrt(x11 * x11 + y11 * y11) + Math.sqrt(x12 * x12 + y12 * y12) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x13 = x;
						var y13 = y;
						if(y13 == null) {
							y13 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point1_x = x13;
						var point1_y = y13;
						var x14 = view.x + view.width / 2;
						var y14 = view.y + view.height / 2;
						if(y14 == null) {
							y14 = 0;
						}
						if(x14 == null) {
							x14 = 0;
						}
						var point2_x = x14;
						var point2_y = y14;
						var x15 = point2_x - point1_x;
						var y15 = point2_y - point1_y;
						has = Math.sqrt(x15 * x15 + y15 * y15) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y * this1.getUInt16(0) + x) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		if(x1 == x2 && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
};
vision_ds_Image.drawRay2D = function(this1,line,color) {
	var px = line.point.x;
	var py = line.point.y;
	var x = (0 - (px > 0 ? py - line.slope * px : py + line.slope * px)) / line.slope;
	var y = 0;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p_x = x;
	var p_y = y;
	var p1_x = p_x | 0;
	var p1_y = p_y | 0;
	var y = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var px = line.point.x;
	var py = line.point.y;
	var x = (y - (px > 0 ? py - line.slope * px : py + line.slope * px)) / line.slope;
	var y1 = y;
	if(y1 == null) {
		y1 = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p_x = x;
	var p_y = y1;
	var p2_x = p_x | 0;
	var p2_y = p_y | 0;
	var x1 = p1_x;
	var y1 = p1_y;
	var x2 = p2_x;
	var y2 = p2_y;
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	var safetyNet = 0;
	while(safetyNet++ <= 10000) {
		if(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x = view.x + view.width / 2 - c;
							var y = view.y + view.height / 2;
							if(y == null) {
								y = 0;
							}
							if(x == null) {
								x = 0;
							}
							var f1_x = x;
							var f1_y = y;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var x4 = x1;
							var y4 = y1;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var p_x = x4;
							var p_y = y4;
							var x5 = p_x - f1_x;
							var y5 = p_y - f1_y;
							var x6 = p_x - f2_x;
							var y6 = p_y - f2_y;
							has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 - c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f1_x1 = x7;
							var f1_y1 = y7;
							var x8 = view.x + view.width / 2;
							var y8 = view.y + view.height / 2 + c1;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var f2_x1 = x8;
							var f2_y1 = y8;
							var x9 = x1;
							var y9 = y1;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var p_x1 = x9;
							var p_y1 = y9;
							var x10 = p_x1 - f1_x1;
							var y10 = p_y1 - f1_y1;
							var x11 = p_x1 - f2_x1;
							var y11 = p_y1 - f2_y1;
							has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x12 = x1;
							var y12 = y1;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point1_x = x12;
							var point1_y = y12;
							var x13 = view.x + view.width / 2;
							var y13 = view.y + view.height / 2;
							if(y13 == null) {
								y13 = 0;
							}
							if(x13 == null) {
								x13 = 0;
							}
							var point2_x = x13;
							var point2_y = y13;
							var x14 = point2_x - point1_x;
							var y14 = point2_y - point1_y;
							has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this1.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255;
					this1.b[position + 1] = color >> 16 & 255;
					this1.b[position + 2] = color >> 8 & 255;
					this1.b[position + 3] = color & 255;
				}
			} else {
				var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255;
				this1.b[position1 + 1] = color >> 16 & 255;
				this1.b[position1 + 2] = color >> 8 & 255;
				this1.b[position1 + 3] = color & 255;
			}
		}
		if(x1 == x2 && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
};
vision_ds_Image.drawLine2D = function(this1,line,color) {
	var p = line.start;
	var p1_x = p.x | 0;
	var p1_y = p.y | 0;
	var p = line.end;
	var p2_x = p.x | 0;
	var p2_y = p.y | 0;
	var x1 = p1_x;
	var y1 = p1_y;
	var x2 = p2_x;
	var y2 = p2_y;
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	while(true) {
		if(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x = view.x + view.width / 2 - c;
							var y = view.y + view.height / 2;
							if(y == null) {
								y = 0;
							}
							if(x == null) {
								x = 0;
							}
							var f1_x = x;
							var f1_y = y;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var x4 = x1;
							var y4 = y1;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var p_x = x4;
							var p_y = y4;
							var x5 = p_x - f1_x;
							var y5 = p_y - f1_y;
							var x6 = p_x - f2_x;
							var y6 = p_y - f2_y;
							has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 - c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f1_x1 = x7;
							var f1_y1 = y7;
							var x8 = view.x + view.width / 2;
							var y8 = view.y + view.height / 2 + c1;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var f2_x1 = x8;
							var f2_y1 = y8;
							var x9 = x1;
							var y9 = y1;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var p_x1 = x9;
							var p_y1 = y9;
							var x10 = p_x1 - f1_x1;
							var y10 = p_y1 - f1_y1;
							var x11 = p_x1 - f2_x1;
							var y11 = p_y1 - f2_y1;
							has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x12 = x1;
							var y12 = y1;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point1_x = x12;
							var point1_y = y12;
							var x13 = view.x + view.width / 2;
							var y13 = view.y + view.height / 2;
							if(y13 == null) {
								y13 = 0;
							}
							if(x13 == null) {
								x13 = 0;
							}
							var point2_x = x13;
							var point2_y = y13;
							var x14 = point2_x - point1_x;
							var y14 = point2_y - point1_y;
							has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this1.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255;
					this1.b[position + 1] = color >> 16 & 255;
					this1.b[position + 2] = color >> 8 & 255;
					this1.b[position + 3] = color & 255;
				}
			} else {
				var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255;
				this1.b[position1 + 1] = color >> 16 & 255;
				this1.b[position1 + 2] = color >> 8 & 255;
				this1.b[position1 + 3] = color & 255;
			}
		}
		if(x1 == x2 && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
};
vision_ds_Image.fillRect = function(this1,x,y,width,height,color) {
	var _g = x;
	var _g1 = x + width;
	while(_g < _g1) {
		var X = _g++;
		var _g2 = y;
		var _g3 = y + height;
		while(_g2 < _g3) {
			var Y = _g2++;
			if(!(X >= 0 && Y >= 0 && X < this1.getUInt16(0) && Y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = X;
				var this_y = Y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = X >= 0 && Y >= 0 && X < this1.getUInt16(0) && Y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = X < view.x + view.width && Y < view.y + view.height && X >= view.x && Y >= view.y;
						break;
					case 1:
						has = !(X < view.x + view.width && Y < view.y + view.height && X >= view.x && Y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x == null) {
								x = 0;
							}
							var f1_x = x;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y2;
							var x2 = X;
							var y3 = Y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var p_x = x2;
							var p_y = y3;
							var x3 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x4 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x3 * x3 + y4 * y4) + Math.sqrt(x4 * x4 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x5 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f1_x1 = x5;
							var f1_y1 = y6;
							var x6 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f2_x1 = x6;
							var f2_y1 = y7;
							var x7 = X;
							var y8 = Y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var p_x1 = x7;
							var p_y1 = y8;
							var x8 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x9 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x8 * x8 + y9 * y9) + Math.sqrt(x9 * x9 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x10 = X;
							var y11 = Y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point1_x = x10;
							var point1_y = y11;
							var x11 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point2_x = x11;
							var point2_y = y12;
							var x12 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x12 * x12 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(X - view.x - view.width / 2) / (view.width / 2) + Math.abs(Y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(X - view.x - view.width / 2) / (view.width / 2) + Math.abs(Y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (Y * this1.getUInt16(0) + X) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255;
					this1.b[position + 1] = color >> 16 & 255;
					this1.b[position + 2] = color >> 8 & 255;
					this1.b[position + 3] = color & 255;
				}
			} else {
				var position1 = (Y * this1.getUInt16(0) + X) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255;
				this1.b[position1 + 1] = color >> 16 & 255;
				this1.b[position1 + 2] = color >> 8 & 255;
				this1.b[position1 + 3] = color & 255;
			}
		}
	}
};
vision_ds_Image.drawRect = function(this1,x,y,width,height,color) {
	var x1 = x;
	var y1 = y;
	var x2 = x + width;
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y ? 1 : -1;
	var err = dx - dy;
	var safety = 0;
	while(safety++ < 10000) {
		var x3 = x1;
		var y2 = y1;
		x3 = vision_tools_MathTools.boundInt(x3,0,this1.getUInt16(0) - 1);
		y2 = vision_tools_MathTools.boundInt(y2,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
		if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x3 >= 0 && y2 >= 0 && x3 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x3 < view.x + view.width && y2 < view.y + view.height && x3 >= view.x && y2 >= view.y;
					break;
				case 1:
					has = !(x3 < view.x + view.width && y2 < view.y + view.height && x3 >= view.x && y2 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x4 = view.x + view.width / 2 - c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var f1_x = x4;
						var f1_y = y3;
						var x5 = view.x + view.width / 2 + c;
						var y4 = view.y + view.height / 2;
						if(y4 == null) {
							y4 = 0;
						}
						if(x5 == null) {
							x5 = 0;
						}
						var f2_x = x5;
						var f2_y = y4;
						var x6 = x3;
						var y5 = y2;
						if(y5 == null) {
							y5 = 0;
						}
						if(x6 == null) {
							x6 = 0;
						}
						var p_x = x6;
						var p_y = y5;
						var x7 = p_x - f1_x;
						var y6 = p_y - f1_y;
						var x8 = p_x - f2_x;
						var y7 = p_y - f2_y;
						has = Math.sqrt(x7 * x7 + y6 * y6) + Math.sqrt(x8 * x8 + y7 * y7) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x9 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 - c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var f1_x1 = x9;
						var f1_y1 = y8;
						var x10 = view.x + view.width / 2;
						var y9 = view.y + view.height / 2 + c1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x10 == null) {
							x10 = 0;
						}
						var f2_x1 = x10;
						var f2_y1 = y9;
						var x11 = x3;
						var y10 = y2;
						if(y10 == null) {
							y10 = 0;
						}
						if(x11 == null) {
							x11 = 0;
						}
						var p_x1 = x11;
						var p_y1 = y10;
						var x12 = p_x1 - f1_x1;
						var y11 = p_y1 - f1_y1;
						var x13 = p_x1 - f2_x1;
						var y12 = p_y1 - f2_y1;
						has = Math.sqrt(x12 * x12 + y11 * y11) + Math.sqrt(x13 * x13 + y12 * y12) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x14 = x3;
						var y13 = y2;
						if(y13 == null) {
							y13 = 0;
						}
						if(x14 == null) {
							x14 = 0;
						}
						var point1_x = x14;
						var point1_y = y13;
						var x15 = view.x + view.width / 2;
						var y14 = view.y + view.height / 2;
						if(y14 == null) {
							y14 = 0;
						}
						if(x15 == null) {
							x15 = 0;
						}
						var point2_x = x15;
						var point2_y = y14;
						var x16 = point2_x - point1_x;
						var y15 = point2_y - point1_y;
						has = Math.sqrt(x16 * x16 + y15 * y15) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x3 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y2 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x3 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y2 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y2 * this1.getUInt16(0) + x3) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y2 * this1.getUInt16(0) + x3) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		if(x1 == x2 && y1 == y) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
	var x1 = x + width;
	var y1 = y;
	var x2 = x + width;
	var y2 = y + height;
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	var safety = 0;
	while(safety++ < 10000) {
		var x3 = x1;
		var y3 = y1;
		x3 = vision_tools_MathTools.boundInt(x3,0,this1.getUInt16(0) - 1);
		y3 = vision_tools_MathTools.boundInt(y3,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
		if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x3 < view.x + view.width && y3 < view.y + view.height && x3 >= view.x && y3 >= view.y;
					break;
				case 1:
					has = !(x3 < view.x + view.width && y3 < view.y + view.height && x3 >= view.x && y3 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x4 = view.x + view.width / 2 - c;
						var y4 = view.y + view.height / 2;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var f1_x = x4;
						var f1_y = y4;
						var x5 = view.x + view.width / 2 + c;
						var y5 = view.y + view.height / 2;
						if(y5 == null) {
							y5 = 0;
						}
						if(x5 == null) {
							x5 = 0;
						}
						var f2_x = x5;
						var f2_y = y5;
						var x6 = x3;
						var y6 = y3;
						if(y6 == null) {
							y6 = 0;
						}
						if(x6 == null) {
							x6 = 0;
						}
						var p_x = x6;
						var p_y = y6;
						var x7 = p_x - f1_x;
						var y7 = p_y - f1_y;
						var x8 = p_x - f2_x;
						var y8 = p_y - f2_y;
						has = Math.sqrt(x7 * x7 + y7 * y7) + Math.sqrt(x8 * x8 + y8 * y8) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x9 = view.x + view.width / 2;
						var y9 = view.y + view.height / 2 - c1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var f1_x1 = x9;
						var f1_y1 = y9;
						var x10 = view.x + view.width / 2;
						var y10 = view.y + view.height / 2 + c1;
						if(y10 == null) {
							y10 = 0;
						}
						if(x10 == null) {
							x10 = 0;
						}
						var f2_x1 = x10;
						var f2_y1 = y10;
						var x11 = x3;
						var y11 = y3;
						if(y11 == null) {
							y11 = 0;
						}
						if(x11 == null) {
							x11 = 0;
						}
						var p_x1 = x11;
						var p_y1 = y11;
						var x12 = p_x1 - f1_x1;
						var y12 = p_y1 - f1_y1;
						var x13 = p_x1 - f2_x1;
						var y13 = p_y1 - f2_y1;
						has = Math.sqrt(x12 * x12 + y12 * y12) + Math.sqrt(x13 * x13 + y13 * y13) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x14 = x3;
						var y14 = y3;
						if(y14 == null) {
							y14 = 0;
						}
						if(x14 == null) {
							x14 = 0;
						}
						var point1_x = x14;
						var point1_y = y14;
						var x15 = view.x + view.width / 2;
						var y15 = view.y + view.height / 2;
						if(y15 == null) {
							y15 = 0;
						}
						if(x15 == null) {
							x15 = 0;
						}
						var point2_x = x15;
						var point2_y = y15;
						var x16 = point2_x - point1_x;
						var y16 = point2_y - point1_y;
						has = Math.sqrt(x16 * x16 + y16 * y16) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x3 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y3 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x3 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y3 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y3 * this1.getUInt16(0) + x3) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y3 * this1.getUInt16(0) + x3) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		if(x1 == x2 && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
	var x1 = x + width;
	var y1 = y + height;
	var y2 = y + height;
	var dx = Math.abs(x - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	var safety = 0;
	while(safety++ < 10000) {
		var x2 = x1;
		var y3 = y1;
		x2 = vision_tools_MathTools.boundInt(x2,0,this1.getUInt16(0) - 1);
		y3 = vision_tools_MathTools.boundInt(y3,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
		if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x2 >= 0 && y3 >= 0 && x2 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x2 < view.x + view.width && y3 < view.y + view.height && x2 >= view.x && y3 >= view.y;
					break;
				case 1:
					has = !(x2 < view.x + view.width && y3 < view.y + view.height && x2 >= view.x && y3 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x3 = view.x + view.width / 2 - c;
						var y4 = view.y + view.height / 2;
						if(y4 == null) {
							y4 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f1_x = x3;
						var f1_y = y4;
						var x4 = view.x + view.width / 2 + c;
						var y5 = view.y + view.height / 2;
						if(y5 == null) {
							y5 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var f2_x = x4;
						var f2_y = y5;
						var x5 = x2;
						var y6 = y3;
						if(y6 == null) {
							y6 = 0;
						}
						if(x5 == null) {
							x5 = 0;
						}
						var p_x = x5;
						var p_y = y6;
						var x6 = p_x - f1_x;
						var y7 = p_y - f1_y;
						var x7 = p_x - f2_x;
						var y8 = p_y - f2_y;
						has = Math.sqrt(x6 * x6 + y7 * y7) + Math.sqrt(x7 * x7 + y8 * y8) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x8 = view.x + view.width / 2;
						var y9 = view.y + view.height / 2 - c1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f1_x1 = x8;
						var f1_y1 = y9;
						var x9 = view.x + view.width / 2;
						var y10 = view.y + view.height / 2 + c1;
						if(y10 == null) {
							y10 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var f2_x1 = x9;
						var f2_y1 = y10;
						var x10 = x2;
						var y11 = y3;
						if(y11 == null) {
							y11 = 0;
						}
						if(x10 == null) {
							x10 = 0;
						}
						var p_x1 = x10;
						var p_y1 = y11;
						var x11 = p_x1 - f1_x1;
						var y12 = p_y1 - f1_y1;
						var x12 = p_x1 - f2_x1;
						var y13 = p_y1 - f2_y1;
						has = Math.sqrt(x11 * x11 + y12 * y12) + Math.sqrt(x12 * x12 + y13 * y13) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x13 = x2;
						var y14 = y3;
						if(y14 == null) {
							y14 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point1_x = x13;
						var point1_y = y14;
						var x14 = view.x + view.width / 2;
						var y15 = view.y + view.height / 2;
						if(y15 == null) {
							y15 = 0;
						}
						if(x14 == null) {
							x14 = 0;
						}
						var point2_x = x14;
						var point2_y = y15;
						var x15 = point2_x - point1_x;
						var y16 = point2_y - point1_y;
						has = Math.sqrt(x15 * x15 + y16 * y16) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y3 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y3 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y3 * this1.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y3 * this1.getUInt16(0) + x2) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		if(x1 == x && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
	var x1 = x;
	var y1 = y + height;
	var dx = Math.abs(x - x1);
	var dy = Math.abs(y - y1);
	var sx = x1 < x ? 1 : -1;
	var sy = y1 < y ? 1 : -1;
	var err = dx - dy;
	var safety = 0;
	while(safety++ < 10000) {
		var x2 = x1;
		var y2 = y1;
		x2 = vision_tools_MathTools.boundInt(x2,0,this1.getUInt16(0) - 1);
		y2 = vision_tools_MathTools.boundInt(y2,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
		if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x2 < view.x + view.width && y2 < view.y + view.height && x2 >= view.x && y2 >= view.y;
					break;
				case 1:
					has = !(x2 < view.x + view.width && y2 < view.y + view.height && x2 >= view.x && y2 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x3 = view.x + view.width / 2 - c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f1_x = x3;
						var f1_y = y3;
						var x4 = view.x + view.width / 2 + c;
						var y4 = view.y + view.height / 2;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var f2_x = x4;
						var f2_y = y4;
						var x5 = x2;
						var y5 = y2;
						if(y5 == null) {
							y5 = 0;
						}
						if(x5 == null) {
							x5 = 0;
						}
						var p_x = x5;
						var p_y = y5;
						var x6 = p_x - f1_x;
						var y6 = p_y - f1_y;
						var x7 = p_x - f2_x;
						var y7 = p_y - f2_y;
						has = Math.sqrt(x6 * x6 + y6 * y6) + Math.sqrt(x7 * x7 + y7 * y7) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x8 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 - c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f1_x1 = x8;
						var f1_y1 = y8;
						var x9 = view.x + view.width / 2;
						var y9 = view.y + view.height / 2 + c1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var f2_x1 = x9;
						var f2_y1 = y9;
						var x10 = x2;
						var y10 = y2;
						if(y10 == null) {
							y10 = 0;
						}
						if(x10 == null) {
							x10 = 0;
						}
						var p_x1 = x10;
						var p_y1 = y10;
						var x11 = p_x1 - f1_x1;
						var y11 = p_y1 - f1_y1;
						var x12 = p_x1 - f2_x1;
						var y12 = p_y1 - f2_y1;
						has = Math.sqrt(x11 * x11 + y11 * y11) + Math.sqrt(x12 * x12 + y12 * y12) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x13 = x2;
						var y13 = y2;
						if(y13 == null) {
							y13 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point1_x = x13;
						var point1_y = y13;
						var x14 = view.x + view.width / 2;
						var y14 = view.y + view.height / 2;
						if(y14 == null) {
							y14 = 0;
						}
						if(x14 == null) {
							x14 = 0;
						}
						var point2_x = x14;
						var point2_y = y14;
						var x15 = point2_x - point1_x;
						var y15 = point2_y - point1_y;
						has = Math.sqrt(x15 * x15 + y15 * y15) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y2 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y2 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y2 * this1.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y2 * this1.getUInt16(0) + x2) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		if(x1 == x && y1 == y) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
};
vision_ds_Image.drawQuadraticBezier = function(this1,line,control,color,accuracy) {
	if(accuracy == null) {
		accuracy = 1000;
	}
	var bezier = function(t,p0,p1,p2) {
		var t2 = t * t;
		var t3 = t2 * t;
		var x = p0.x * (1 - t) * (1 - t) + p1.x * 2 * t * (1 - t) + p2.x * t * t;
		var y = p0.y * (1 - t) * (1 - t) + p1.y * 2 * t * (1 - t) + p2.y * t * t;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p_x = x;
		var p_y = y;
		var this1 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
		return this1;
	};
	var p = line.start;
	var this2 = new vision_ds__$IntPoint2D_Impl(p.x | 0,p.y | 0);
	var p0 = this2;
	var p = line.end;
	var this2 = new vision_ds__$IntPoint2D_Impl(p.x | 0,p.y | 0);
	var p1 = this2;
	var x = control.x;
	var y = control.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p_x = x;
	var p_y = y;
	var this2 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
	var p2 = this2;
	var i = 0.;
	var step = 1 / accuracy;
	while(i <= 1) {
		var p = bezier(i,p0,p1,p2);
		var x = p.x;
		var y = p.y;
		if(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
			var x1 = p.x;
			var y1 = p.y;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var x4 = x1;
							var y4 = y1;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var p_x = x4;
							var p_y = y4;
							var x5 = p_x - f1_x;
							var y5 = p_y - f1_y;
							var x6 = p_x - f2_x;
							var y6 = p_y - f2_y;
							has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 - c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f1_x1 = x7;
							var f1_y1 = y7;
							var x8 = view.x + view.width / 2;
							var y8 = view.y + view.height / 2 + c1;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var f2_x1 = x8;
							var f2_y1 = y8;
							var x9 = x1;
							var y9 = y1;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var p_x1 = x9;
							var p_y1 = y9;
							var x10 = p_x1 - f1_x1;
							var y10 = p_y1 - f1_y1;
							var x11 = p_x1 - f2_x1;
							var y11 = p_y1 - f2_y1;
							has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x12 = x1;
							var y12 = y1;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point1_x = x12;
							var point1_y = y12;
							var x13 = view.x + view.width / 2;
							var y13 = view.y + view.height / 2;
							if(y13 == null) {
								y13 = 0;
							}
							if(x13 == null) {
								x13 = 0;
							}
							var point2_x = x13;
							var point2_y = y13;
							var x14 = point2_x - point1_x;
							var y14 = point2_y - point1_y;
							has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this1.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255;
					this1.b[position + 1] = color >> 16 & 255;
					this1.b[position + 2] = color >> 8 & 255;
					this1.b[position + 3] = color & 255;
				}
			} else {
				var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255;
				this1.b[position1 + 1] = color >> 16 & 255;
				this1.b[position1 + 2] = color >> 8 & 255;
				this1.b[position1 + 3] = color & 255;
			}
		}
		i += step;
	}
};
vision_ds_Image.drawCubicBezier = function(this1,line,control1,control2,color,accuracy) {
	if(accuracy == null) {
		accuracy = 1000;
	}
	var i = 0.;
	var step = 1 / accuracy;
	while(i < 1) {
		var p = line.start;
		var p0_x = p.x | 0;
		var p0_y = p.y | 0;
		var p1 = line.end;
		var p1_x = p1.x | 0;
		var p1_y = p1.y | 0;
		var cX = 3 * (p1_x - p0_x);
		var bX = 3 * (control1.x - p1_x) - cX;
		var aX = control2.x - p0_x - cX - bX;
		var cY = 3 * (p1_y - p0_y);
		var bY = 3 * (control1.y - p1_y) - cY;
		var aY = control2.y - p0_y - cY - bY;
		var x = aX * Math.pow(i,3) + bX * Math.pow(i,2) + cX * i + p0_x;
		var y = aY * Math.pow(i,3) + bY * Math.pow(i,2) + cY * i + p0_y;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p_x = x1;
		var p_y = y1;
		var p_x1 = p_x | 0;
		var p_y1 = p_y | 0;
		var x2 = p_x1;
		var y2 = p_y1;
		if(x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
			var x3 = p_x1;
			var y3 = p_y1;
			if(!(x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x3;
				var this_y = y3;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x3 < view.x + view.width && y3 < view.y + view.height && x3 >= view.x && y3 >= view.y;
						break;
					case 1:
						has = !(x3 < view.x + view.width && y3 < view.y + view.height && x3 >= view.x && y3 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x4 = view.x + view.width / 2 - c;
							var y4 = view.y + view.height / 2;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var f1_x = x4;
							var f1_y = y4;
							var x5 = view.x + view.width / 2 + c;
							var y5 = view.y + view.height / 2;
							if(y5 == null) {
								y5 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f2_x = x5;
							var f2_y = y5;
							var x6 = x3;
							var y6 = y3;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var p_x2 = x6;
							var p_y2 = y6;
							var x7 = p_x2 - f1_x;
							var y7 = p_y2 - f1_y;
							var x8 = p_x2 - f2_x;
							var y8 = p_y2 - f2_y;
							has = Math.sqrt(x7 * x7 + y7 * y7) + Math.sqrt(x8 * x8 + y8 * y8) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x9 = view.x + view.width / 2;
							var y9 = view.y + view.height / 2 - c1;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var f1_x1 = x9;
							var f1_y1 = y9;
							var x10 = view.x + view.width / 2;
							var y10 = view.y + view.height / 2 + c1;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var f2_x1 = x10;
							var f2_y1 = y10;
							var x11 = x3;
							var y11 = y3;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var p_x3 = x11;
							var p_y3 = y11;
							var x12 = p_x3 - f1_x1;
							var y12 = p_y3 - f1_y1;
							var x13 = p_x3 - f2_x1;
							var y13 = p_y3 - f2_y1;
							has = Math.sqrt(x12 * x12 + y12 * y12) + Math.sqrt(x13 * x13 + y13 * y13) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x14 = x3;
							var y14 = y3;
							if(y14 == null) {
								y14 = 0;
							}
							if(x14 == null) {
								x14 = 0;
							}
							var point1_x = x14;
							var point1_y = y14;
							var x15 = view.x + view.width / 2;
							var y15 = view.y + view.height / 2;
							if(y15 == null) {
								y15 = 0;
							}
							if(x15 == null) {
								x15 = 0;
							}
							var point2_x = x15;
							var point2_y = y15;
							var x16 = point2_x - point1_x;
							var y16 = point2_y - point1_y;
							has = Math.sqrt(x16 * x16 + y16 * y16) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x3 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y3 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x3 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y3 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y3 * this1.getUInt16(0) + x3) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255;
					this1.b[position + 1] = color >> 16 & 255;
					this1.b[position + 2] = color >> 8 & 255;
					this1.b[position + 3] = color & 255;
				}
			} else {
				var position1 = (y3 * this1.getUInt16(0) + x3) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255;
				this1.b[position1 + 1] = color >> 16 & 255;
				this1.b[position1 + 2] = color >> 8 & 255;
				this1.b[position1 + 3] = color & 255;
			}
		}
		i += step;
	}
};
vision_ds_Image.fillCircle = function(this1,X,Y,r,color) {
	var points = [];
	var x = -r;
	var y = 0;
	var err = 2 - 2 * r;
	while(true) {
		var x1 = X + x;
		var y1 = Y - y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p_x = x1;
		var p_y = y1;
		var this2 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
		points.push(this2);
		var x2 = X - x;
		var y2 = Y + y;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p_x1 = x2;
		var p_y1 = y2;
		var this3 = new vision_ds__$IntPoint2D_Impl(p_x1 | 0,p_y1 | 0);
		points.push(this3);
		var x3 = X - y;
		var y3 = Y - x;
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		var p_x2 = x3;
		var p_y2 = y3;
		var this4 = new vision_ds__$IntPoint2D_Impl(p_x2 | 0,p_y2 | 0);
		points.push(this4);
		var x4 = X + y;
		var y4 = Y + x;
		if(y4 == null) {
			y4 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var p_x3 = x4;
		var p_y3 = y4;
		var this5 = new vision_ds__$IntPoint2D_Impl(p_x3 | 0,p_y3 | 0);
		points.push(this5);
		r = err;
		if(r <= y) {
			err += ++y * 2 + 1;
		}
		if(r > x || err > y) {
			err += ++x * 2 + 1;
		}
		if(!(x < 0)) {
			break;
		}
	}
	var values = [];
	var _g = 0;
	while(_g < points.length) {
		var p = points[_g];
		++_g;
		if(values[p.x] == null) {
			values[p.x] = [];
		}
		values[p.x].push(p.y);
	}
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var y = _g++;
		if(values[y] == null) {
			continue;
		}
		var values1 = values[y];
		var min = values1[0];
		var _g2 = 0;
		var _g3 = values1.length;
		while(_g2 < _g3) {
			var i = _g2++;
			if(values1[i] < min) {
				min = values1[i];
			}
		}
		var min1 = min;
		var values2 = values[y];
		var max = values2[0];
		var _g4 = 0;
		var _g5 = values2.length;
		while(_g4 < _g5) {
			var i1 = _g4++;
			if(values2[i1] > max) {
				max = values2[i1];
			}
		}
		var max1 = max;
		var _g6 = min1;
		var _g7 = max1 + 1;
		while(_g6 < _g7) {
			var i2 = _g6++;
			if(!(i2 >= 0 && y >= 0 && i2 < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = i2;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = i2 >= 0 && y >= 0 && i2 < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g8,_g9,_g10,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = i2 < view.x + view.width && y < view.y + view.height && i2 >= view.x && y >= view.y;
						break;
					case 1:
						has = !(i2 < view.x + view.width && y < view.y + view.height && i2 >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x == null) {
								x = 0;
							}
							var f1_x = x;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y2;
							var x2 = i2;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var p_x = x2;
							var p_y = y3;
							var x3 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x4 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x3 * x3 + y4 * y4) + Math.sqrt(x4 * x4 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x5 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f1_x1 = x5;
							var f1_y1 = y6;
							var x6 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f2_x1 = x6;
							var f2_y1 = y7;
							var x7 = i2;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var p_x1 = x7;
							var p_y1 = y8;
							var x8 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x9 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x8 * x8 + y9 * y9) + Math.sqrt(x9 * x9 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x10 = i2;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point1_x = x10;
							var point1_y = y11;
							var x11 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point2_x = x11;
							var point2_y = y12;
							var x12 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x12 * x12 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(i2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(i2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + i2) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255;
					this1.b[position + 1] = color >> 16 & 255;
					this1.b[position + 2] = color >> 8 & 255;
					this1.b[position + 3] = color & 255;
				}
			} else {
				var position1 = (y * this1.getUInt16(0) + i2) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255;
				this1.b[position1 + 1] = color >> 16 & 255;
				this1.b[position1 + 2] = color >> 8 & 255;
				this1.b[position1 + 3] = color & 255;
			}
		}
	}
};
vision_ds_Image.drawCircle = function(this1,X,Y,r,color) {
	var x = -r;
	var y = 0;
	var err = 2 - 2 * r;
	while(true) {
		var x1 = X + x;
		var y1 = Y - y;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x3 = view.x + view.width / 2 + c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f2_x = x3;
						var f2_y = y3;
						var x4 = x1;
						var y4 = y1;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var p_x = x4;
						var p_y = y4;
						var x5 = p_x - f1_x;
						var y5 = p_y - f1_y;
						var x6 = p_x - f2_x;
						var y6 = p_y - f2_y;
						has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x7 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 - c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f1_x1 = x7;
						var f1_y1 = y7;
						var x8 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 + c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f2_x1 = x8;
						var f2_y1 = y8;
						var x9 = x1;
						var y9 = y1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var p_x1 = x9;
						var p_y1 = y9;
						var x10 = p_x1 - f1_x1;
						var y10 = p_y1 - f1_y1;
						var x11 = p_x1 - f2_x1;
						var y11 = p_y1 - f2_y1;
						has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x12 = x1;
						var y12 = y1;
						if(y12 == null) {
							y12 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point1_x = x12;
						var point1_y = y12;
						var x13 = view.x + view.width / 2;
						var y13 = view.y + view.height / 2;
						if(y13 == null) {
							y13 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point2_x = x13;
						var point2_y = y13;
						var x14 = point2_x - point1_x;
						var y14 = point2_y - point1_y;
						has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		var x15 = X - x;
		var y15 = Y + y;
		if(!(x15 >= 0 && y15 >= 0 && x15 < this1.getUInt16(0) && y15 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x1 = x15;
			var this_y1 = y15;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v1 = null;
			var tmp1;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
				tmp1 = x15 >= 0 && y15 >= 0 && x15 < this1.getUInt16(0) && y15 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has1 = false;
				var view2;
				if(v1 != null) {
					view2 = v1;
				} else {
					var _g3 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this3 = this1.b;
					var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view2 = new vision_ds_ImageView(_g3,_g4,_g5,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view3]);
				}
				switch(view2.shape) {
				case 0:
					has1 = x15 < view2.x + view2.width && y15 < view2.y + view2.height && x15 >= view2.x && y15 >= view2.y;
					break;
				case 1:
					has1 = !(x15 < view2.x + view2.width && y15 < view2.y + view2.height && x15 >= view2.x && y15 >= view2.y);
					break;
				case 2:case 3:
					if(view2.width > view2.height) {
						var a2 = view2.width / 2;
						var b2 = view2.height / 2;
						var c2 = Math.sqrt(a2 * a2 - b2 * b2);
						var x16 = view2.x + view2.width / 2 - c2;
						var y16 = view2.y + view2.height / 2;
						if(y16 == null) {
							y16 = 0;
						}
						if(x16 == null) {
							x16 = 0;
						}
						var f1_x2 = x16;
						var f1_y2 = y16;
						var x17 = view2.x + view2.width / 2 + c2;
						var y17 = view2.y + view2.height / 2;
						if(y17 == null) {
							y17 = 0;
						}
						if(x17 == null) {
							x17 = 0;
						}
						var f2_x2 = x17;
						var f2_y2 = y17;
						var x18 = x15;
						var y18 = y15;
						if(y18 == null) {
							y18 = 0;
						}
						if(x18 == null) {
							x18 = 0;
						}
						var p_x2 = x18;
						var p_y2 = y18;
						var x19 = p_x2 - f1_x2;
						var y19 = p_y2 - f1_y2;
						var x20 = p_x2 - f2_x2;
						var y20 = p_y2 - f2_y2;
						has1 = Math.sqrt(x19 * x19 + y19 * y19) + Math.sqrt(x20 * x20 + y20 * y20) <= view2.width;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else if(view2.height > view2.width) {
						var a3 = view2.height / 2;
						var b3 = view2.width / 2;
						var c3 = Math.sqrt(a3 * a3 - b3 * b3);
						var x21 = view2.x + view2.width / 2;
						var y21 = view2.y + view2.height / 2 - c3;
						if(y21 == null) {
							y21 = 0;
						}
						if(x21 == null) {
							x21 = 0;
						}
						var f1_x3 = x21;
						var f1_y3 = y21;
						var x22 = view2.x + view2.width / 2;
						var y22 = view2.y + view2.height / 2 + c3;
						if(y22 == null) {
							y22 = 0;
						}
						if(x22 == null) {
							x22 = 0;
						}
						var f2_x3 = x22;
						var f2_y3 = y22;
						var x23 = x15;
						var y23 = y15;
						if(y23 == null) {
							y23 = 0;
						}
						if(x23 == null) {
							x23 = 0;
						}
						var p_x3 = x23;
						var p_y3 = y23;
						var x24 = p_x3 - f1_x3;
						var y24 = p_y3 - f1_y3;
						var x25 = p_x3 - f2_x3;
						var y25 = p_y3 - f2_y3;
						has1 = Math.sqrt(x24 * x24 + y24 * y24) + Math.sqrt(x25 * x25 + y25 * y25) <= view2.height;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else {
						var x26 = x15;
						var y26 = y15;
						if(y26 == null) {
							y26 = 0;
						}
						if(x26 == null) {
							x26 = 0;
						}
						var point1_x1 = x26;
						var point1_y1 = y26;
						var x27 = view2.x + view2.width / 2;
						var y27 = view2.y + view2.height / 2;
						if(y27 == null) {
							y27 = 0;
						}
						if(x27 == null) {
							x27 = 0;
						}
						var point2_x1 = x27;
						var point2_y1 = y27;
						var x28 = point2_x1 - point1_x1;
						var y28 = point2_y1 - point1_y1;
						has1 = Math.sqrt(x28 * x28 + y28 * y28) <= view2.width / 2;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					}
					break;
				case 4:
					has1 = Math.abs(x15 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y15 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
					break;
				case 5:
					has1 = !(Math.abs(x15 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y15 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
					break;
				}
				tmp1 = has1;
			}
			if(tmp1) {
				var position2 = (y15 * this1.getUInt16(0) + x15) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color >> 24 & 255;
				this1.b[position2 + 1] = color >> 16 & 255;
				this1.b[position2 + 2] = color >> 8 & 255;
				this1.b[position2 + 3] = color & 255;
			}
		} else {
			var position3 = (y15 * this1.getUInt16(0) + x15) * 4;
			position3 += vision_ds_Image.OFFSET;
			this1.b[position3] = color >> 24 & 255;
			this1.b[position3 + 1] = color >> 16 & 255;
			this1.b[position3 + 2] = color >> 8 & 255;
			this1.b[position3 + 3] = color & 255;
		}
		var x29 = X - y;
		var y29 = Y - x;
		if(!(x29 >= 0 && y29 >= 0 && x29 < this1.getUInt16(0) && y29 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x2 = x29;
			var this_y2 = y29;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v2 = null;
			var tmp2;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
				tmp2 = x29 >= 0 && y29 >= 0 && x29 < this1.getUInt16(0) && y29 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has2 = false;
				var view4;
				if(v2 != null) {
					view4 = v2;
				} else {
					var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this4 = this1.b;
					var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view4 = new vision_ds_ImageView(_g6,_g7,_g8,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this4[view5]);
				}
				switch(view4.shape) {
				case 0:
					has2 = x29 < view4.x + view4.width && y29 < view4.y + view4.height && x29 >= view4.x && y29 >= view4.y;
					break;
				case 1:
					has2 = !(x29 < view4.x + view4.width && y29 < view4.y + view4.height && x29 >= view4.x && y29 >= view4.y);
					break;
				case 2:case 3:
					if(view4.width > view4.height) {
						var a4 = view4.width / 2;
						var b4 = view4.height / 2;
						var c4 = Math.sqrt(a4 * a4 - b4 * b4);
						var x30 = view4.x + view4.width / 2 - c4;
						var y30 = view4.y + view4.height / 2;
						if(y30 == null) {
							y30 = 0;
						}
						if(x30 == null) {
							x30 = 0;
						}
						var f1_x4 = x30;
						var f1_y4 = y30;
						var x31 = view4.x + view4.width / 2 + c4;
						var y31 = view4.y + view4.height / 2;
						if(y31 == null) {
							y31 = 0;
						}
						if(x31 == null) {
							x31 = 0;
						}
						var f2_x4 = x31;
						var f2_y4 = y31;
						var x32 = x29;
						var y32 = y29;
						if(y32 == null) {
							y32 = 0;
						}
						if(x32 == null) {
							x32 = 0;
						}
						var p_x4 = x32;
						var p_y4 = y32;
						var x33 = p_x4 - f1_x4;
						var y33 = p_y4 - f1_y4;
						var x34 = p_x4 - f2_x4;
						var y34 = p_y4 - f2_y4;
						has2 = Math.sqrt(x33 * x33 + y33 * y33) + Math.sqrt(x34 * x34 + y34 * y34) <= view4.width;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else if(view4.height > view4.width) {
						var a5 = view4.height / 2;
						var b5 = view4.width / 2;
						var c5 = Math.sqrt(a5 * a5 - b5 * b5);
						var x35 = view4.x + view4.width / 2;
						var y35 = view4.y + view4.height / 2 - c5;
						if(y35 == null) {
							y35 = 0;
						}
						if(x35 == null) {
							x35 = 0;
						}
						var f1_x5 = x35;
						var f1_y5 = y35;
						var x36 = view4.x + view4.width / 2;
						var y36 = view4.y + view4.height / 2 + c5;
						if(y36 == null) {
							y36 = 0;
						}
						if(x36 == null) {
							x36 = 0;
						}
						var f2_x5 = x36;
						var f2_y5 = y36;
						var x37 = x29;
						var y37 = y29;
						if(y37 == null) {
							y37 = 0;
						}
						if(x37 == null) {
							x37 = 0;
						}
						var p_x5 = x37;
						var p_y5 = y37;
						var x38 = p_x5 - f1_x5;
						var y38 = p_y5 - f1_y5;
						var x39 = p_x5 - f2_x5;
						var y39 = p_y5 - f2_y5;
						has2 = Math.sqrt(x38 * x38 + y38 * y38) + Math.sqrt(x39 * x39 + y39 * y39) <= view4.height;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else {
						var x40 = x29;
						var y40 = y29;
						if(y40 == null) {
							y40 = 0;
						}
						if(x40 == null) {
							x40 = 0;
						}
						var point1_x2 = x40;
						var point1_y2 = y40;
						var x41 = view4.x + view4.width / 2;
						var y41 = view4.y + view4.height / 2;
						if(y41 == null) {
							y41 = 0;
						}
						if(x41 == null) {
							x41 = 0;
						}
						var point2_x2 = x41;
						var point2_y2 = y41;
						var x42 = point2_x2 - point1_x2;
						var y42 = point2_y2 - point1_y2;
						has2 = Math.sqrt(x42 * x42 + y42 * y42) <= view4.width / 2;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					}
					break;
				case 4:
					has2 = Math.abs(x29 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y29 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
					break;
				case 5:
					has2 = !(Math.abs(x29 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y29 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
					break;
				}
				tmp2 = has2;
			}
			if(tmp2) {
				var position4 = (y29 * this1.getUInt16(0) + x29) * 4;
				position4 += vision_ds_Image.OFFSET;
				this1.b[position4] = color >> 24 & 255;
				this1.b[position4 + 1] = color >> 16 & 255;
				this1.b[position4 + 2] = color >> 8 & 255;
				this1.b[position4 + 3] = color & 255;
			}
		} else {
			var position5 = (y29 * this1.getUInt16(0) + x29) * 4;
			position5 += vision_ds_Image.OFFSET;
			this1.b[position5] = color >> 24 & 255;
			this1.b[position5 + 1] = color >> 16 & 255;
			this1.b[position5 + 2] = color >> 8 & 255;
			this1.b[position5 + 3] = color & 255;
		}
		var x43 = X + y;
		var y43 = Y + x;
		if(!(x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x3 = x43;
			var this_y3 = y43;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v3 = null;
			var tmp3;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
				tmp3 = x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has3 = false;
				var view6;
				if(v3 != null) {
					view6 = v3;
				} else {
					var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g11 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this5 = this1.b;
					var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view6 = new vision_ds_ImageView(_g9,_g10,_g11,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this5[view7]);
				}
				switch(view6.shape) {
				case 0:
					has3 = x43 < view6.x + view6.width && y43 < view6.y + view6.height && x43 >= view6.x && y43 >= view6.y;
					break;
				case 1:
					has3 = !(x43 < view6.x + view6.width && y43 < view6.y + view6.height && x43 >= view6.x && y43 >= view6.y);
					break;
				case 2:case 3:
					if(view6.width > view6.height) {
						var a6 = view6.width / 2;
						var b6 = view6.height / 2;
						var c6 = Math.sqrt(a6 * a6 - b6 * b6);
						var x44 = view6.x + view6.width / 2 - c6;
						var y44 = view6.y + view6.height / 2;
						if(y44 == null) {
							y44 = 0;
						}
						if(x44 == null) {
							x44 = 0;
						}
						var f1_x6 = x44;
						var f1_y6 = y44;
						var x45 = view6.x + view6.width / 2 + c6;
						var y45 = view6.y + view6.height / 2;
						if(y45 == null) {
							y45 = 0;
						}
						if(x45 == null) {
							x45 = 0;
						}
						var f2_x6 = x45;
						var f2_y6 = y45;
						var x46 = x43;
						var y46 = y43;
						if(y46 == null) {
							y46 = 0;
						}
						if(x46 == null) {
							x46 = 0;
						}
						var p_x6 = x46;
						var p_y6 = y46;
						var x47 = p_x6 - f1_x6;
						var y47 = p_y6 - f1_y6;
						var x48 = p_x6 - f2_x6;
						var y48 = p_y6 - f2_y6;
						has3 = Math.sqrt(x47 * x47 + y47 * y47) + Math.sqrt(x48 * x48 + y48 * y48) <= view6.width;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else if(view6.height > view6.width) {
						var a7 = view6.height / 2;
						var b7 = view6.width / 2;
						var c7 = Math.sqrt(a7 * a7 - b7 * b7);
						var x49 = view6.x + view6.width / 2;
						var y49 = view6.y + view6.height / 2 - c7;
						if(y49 == null) {
							y49 = 0;
						}
						if(x49 == null) {
							x49 = 0;
						}
						var f1_x7 = x49;
						var f1_y7 = y49;
						var x50 = view6.x + view6.width / 2;
						var y50 = view6.y + view6.height / 2 + c7;
						if(y50 == null) {
							y50 = 0;
						}
						if(x50 == null) {
							x50 = 0;
						}
						var f2_x7 = x50;
						var f2_y7 = y50;
						var x51 = x43;
						var y51 = y43;
						if(y51 == null) {
							y51 = 0;
						}
						if(x51 == null) {
							x51 = 0;
						}
						var p_x7 = x51;
						var p_y7 = y51;
						var x52 = p_x7 - f1_x7;
						var y52 = p_y7 - f1_y7;
						var x53 = p_x7 - f2_x7;
						var y53 = p_y7 - f2_y7;
						has3 = Math.sqrt(x52 * x52 + y52 * y52) + Math.sqrt(x53 * x53 + y53 * y53) <= view6.height;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else {
						var x54 = x43;
						var y54 = y43;
						if(y54 == null) {
							y54 = 0;
						}
						if(x54 == null) {
							x54 = 0;
						}
						var point1_x3 = x54;
						var point1_y3 = y54;
						var x55 = view6.x + view6.width / 2;
						var y55 = view6.y + view6.height / 2;
						if(y55 == null) {
							y55 = 0;
						}
						if(x55 == null) {
							x55 = 0;
						}
						var point2_x3 = x55;
						var point2_y3 = y55;
						var x56 = point2_x3 - point1_x3;
						var y56 = point2_y3 - point1_y3;
						has3 = Math.sqrt(x56 * x56 + y56 * y56) <= view6.width / 2;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					}
					break;
				case 4:
					has3 = Math.abs(x43 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y43 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
					break;
				case 5:
					has3 = !(Math.abs(x43 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y43 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
					break;
				}
				tmp3 = has3;
			}
			if(tmp3) {
				var position6 = (y43 * this1.getUInt16(0) + x43) * 4;
				position6 += vision_ds_Image.OFFSET;
				this1.b[position6] = color >> 24 & 255;
				this1.b[position6 + 1] = color >> 16 & 255;
				this1.b[position6 + 2] = color >> 8 & 255;
				this1.b[position6 + 3] = color & 255;
			}
		} else {
			var position7 = (y43 * this1.getUInt16(0) + x43) * 4;
			position7 += vision_ds_Image.OFFSET;
			this1.b[position7] = color >> 24 & 255;
			this1.b[position7 + 1] = color >> 16 & 255;
			this1.b[position7 + 2] = color >> 8 & 255;
			this1.b[position7 + 3] = color & 255;
		}
		r = err;
		if(r <= y) {
			err += ++y * 2 + 1;
		}
		if(r > x || err > y) {
			err += ++x * 2 + 1;
		}
		if(!(x < 0)) {
			break;
		}
	}
};
vision_ds_Image.drawEllipse = function(this1,centerX,centerY,radiusX,radiusY,color) {
	var twoASquare = 2 * radiusX * radiusX;
	var twoBSquare = 2 * radiusY * radiusY;
	var x = radiusX - 1;
	var b = true;
	var y = 0;
	var xChange = radiusY * radiusY * (1 - 2 * radiusX);
	var yChange = radiusX * radiusX;
	var ellipseError = 0;
	var stoppingX = twoBSquare * radiusX;
	var stoppingY = 0;
	while(stoppingX >= stoppingY) {
		var x1 = centerX + x;
		var y1 = centerY + y;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b1 = view.height / 2;
						var c = Math.sqrt(a * a - b1 * b1);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x3 = view.x + view.width / 2 + c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f2_x = x3;
						var f2_y = y3;
						var x4 = x1;
						var y4 = y1;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var p_x = x4;
						var p_y = y4;
						var x5 = p_x - f1_x;
						var y5 = p_y - f1_y;
						var x6 = p_x - f2_x;
						var y6 = p_y - f2_y;
						has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b2 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b2 * b2);
						var x7 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 - c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f1_x1 = x7;
						var f1_y1 = y7;
						var x8 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 + c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f2_x1 = x8;
						var f2_y1 = y8;
						var x9 = x1;
						var y9 = y1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var p_x1 = x9;
						var p_y1 = y9;
						var x10 = p_x1 - f1_x1;
						var y10 = p_y1 - f1_y1;
						var x11 = p_x1 - f2_x1;
						var y11 = p_y1 - f2_y1;
						has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x12 = x1;
						var y12 = y1;
						if(y12 == null) {
							y12 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point1_x = x12;
						var point1_y = y12;
						var x13 = view.x + view.width / 2;
						var y13 = view.y + view.height / 2;
						if(y13 == null) {
							y13 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point2_x = x13;
						var point2_y = y13;
						var x14 = point2_x - point1_x;
						var y14 = point2_y - point1_y;
						has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		var x15 = centerX - x;
		var y15 = centerY + y;
		if(!(x15 >= 0 && y15 >= 0 && x15 < this1.getUInt16(0) && y15 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x1 = x15;
			var this_y1 = y15;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v1 = null;
			var tmp1;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
				tmp1 = x15 >= 0 && y15 >= 0 && x15 < this1.getUInt16(0) && y15 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has1 = false;
				var view2;
				if(v1 != null) {
					view2 = v1;
				} else {
					var _g3 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this3 = this1.b;
					var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view2 = new vision_ds_ImageView(_g3,_g4,_g5,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view3]);
				}
				switch(view2.shape) {
				case 0:
					has1 = x15 < view2.x + view2.width && y15 < view2.y + view2.height && x15 >= view2.x && y15 >= view2.y;
					break;
				case 1:
					has1 = !(x15 < view2.x + view2.width && y15 < view2.y + view2.height && x15 >= view2.x && y15 >= view2.y);
					break;
				case 2:case 3:
					if(view2.width > view2.height) {
						var a2 = view2.width / 2;
						var b3 = view2.height / 2;
						var c2 = Math.sqrt(a2 * a2 - b3 * b3);
						var x16 = view2.x + view2.width / 2 - c2;
						var y16 = view2.y + view2.height / 2;
						if(y16 == null) {
							y16 = 0;
						}
						if(x16 == null) {
							x16 = 0;
						}
						var f1_x2 = x16;
						var f1_y2 = y16;
						var x17 = view2.x + view2.width / 2 + c2;
						var y17 = view2.y + view2.height / 2;
						if(y17 == null) {
							y17 = 0;
						}
						if(x17 == null) {
							x17 = 0;
						}
						var f2_x2 = x17;
						var f2_y2 = y17;
						var x18 = x15;
						var y18 = y15;
						if(y18 == null) {
							y18 = 0;
						}
						if(x18 == null) {
							x18 = 0;
						}
						var p_x2 = x18;
						var p_y2 = y18;
						var x19 = p_x2 - f1_x2;
						var y19 = p_y2 - f1_y2;
						var x20 = p_x2 - f2_x2;
						var y20 = p_y2 - f2_y2;
						has1 = Math.sqrt(x19 * x19 + y19 * y19) + Math.sqrt(x20 * x20 + y20 * y20) <= view2.width;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else if(view2.height > view2.width) {
						var a3 = view2.height / 2;
						var b4 = view2.width / 2;
						var c3 = Math.sqrt(a3 * a3 - b4 * b4);
						var x21 = view2.x + view2.width / 2;
						var y21 = view2.y + view2.height / 2 - c3;
						if(y21 == null) {
							y21 = 0;
						}
						if(x21 == null) {
							x21 = 0;
						}
						var f1_x3 = x21;
						var f1_y3 = y21;
						var x22 = view2.x + view2.width / 2;
						var y22 = view2.y + view2.height / 2 + c3;
						if(y22 == null) {
							y22 = 0;
						}
						if(x22 == null) {
							x22 = 0;
						}
						var f2_x3 = x22;
						var f2_y3 = y22;
						var x23 = x15;
						var y23 = y15;
						if(y23 == null) {
							y23 = 0;
						}
						if(x23 == null) {
							x23 = 0;
						}
						var p_x3 = x23;
						var p_y3 = y23;
						var x24 = p_x3 - f1_x3;
						var y24 = p_y3 - f1_y3;
						var x25 = p_x3 - f2_x3;
						var y25 = p_y3 - f2_y3;
						has1 = Math.sqrt(x24 * x24 + y24 * y24) + Math.sqrt(x25 * x25 + y25 * y25) <= view2.height;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else {
						var x26 = x15;
						var y26 = y15;
						if(y26 == null) {
							y26 = 0;
						}
						if(x26 == null) {
							x26 = 0;
						}
						var point1_x1 = x26;
						var point1_y1 = y26;
						var x27 = view2.x + view2.width / 2;
						var y27 = view2.y + view2.height / 2;
						if(y27 == null) {
							y27 = 0;
						}
						if(x27 == null) {
							x27 = 0;
						}
						var point2_x1 = x27;
						var point2_y1 = y27;
						var x28 = point2_x1 - point1_x1;
						var y28 = point2_y1 - point1_y1;
						has1 = Math.sqrt(x28 * x28 + y28 * y28) <= view2.width / 2;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					}
					break;
				case 4:
					has1 = Math.abs(x15 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y15 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
					break;
				case 5:
					has1 = !(Math.abs(x15 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y15 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
					break;
				}
				tmp1 = has1;
			}
			if(tmp1) {
				var position2 = (y15 * this1.getUInt16(0) + x15) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color >> 24 & 255;
				this1.b[position2 + 1] = color >> 16 & 255;
				this1.b[position2 + 2] = color >> 8 & 255;
				this1.b[position2 + 3] = color & 255;
			}
		} else {
			var position3 = (y15 * this1.getUInt16(0) + x15) * 4;
			position3 += vision_ds_Image.OFFSET;
			this1.b[position3] = color >> 24 & 255;
			this1.b[position3 + 1] = color >> 16 & 255;
			this1.b[position3 + 2] = color >> 8 & 255;
			this1.b[position3 + 3] = color & 255;
		}
		var x29 = centerX + x;
		var y29 = centerY - y;
		if(!(x29 >= 0 && y29 >= 0 && x29 < this1.getUInt16(0) && y29 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x2 = x29;
			var this_y2 = y29;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v2 = null;
			var tmp2;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
				tmp2 = x29 >= 0 && y29 >= 0 && x29 < this1.getUInt16(0) && y29 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has2 = false;
				var view4;
				if(v2 != null) {
					view4 = v2;
				} else {
					var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this4 = this1.b;
					var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view4 = new vision_ds_ImageView(_g6,_g7,_g8,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this4[view5]);
				}
				switch(view4.shape) {
				case 0:
					has2 = x29 < view4.x + view4.width && y29 < view4.y + view4.height && x29 >= view4.x && y29 >= view4.y;
					break;
				case 1:
					has2 = !(x29 < view4.x + view4.width && y29 < view4.y + view4.height && x29 >= view4.x && y29 >= view4.y);
					break;
				case 2:case 3:
					if(view4.width > view4.height) {
						var a4 = view4.width / 2;
						var b5 = view4.height / 2;
						var c4 = Math.sqrt(a4 * a4 - b5 * b5);
						var x30 = view4.x + view4.width / 2 - c4;
						var y30 = view4.y + view4.height / 2;
						if(y30 == null) {
							y30 = 0;
						}
						if(x30 == null) {
							x30 = 0;
						}
						var f1_x4 = x30;
						var f1_y4 = y30;
						var x31 = view4.x + view4.width / 2 + c4;
						var y31 = view4.y + view4.height / 2;
						if(y31 == null) {
							y31 = 0;
						}
						if(x31 == null) {
							x31 = 0;
						}
						var f2_x4 = x31;
						var f2_y4 = y31;
						var x32 = x29;
						var y32 = y29;
						if(y32 == null) {
							y32 = 0;
						}
						if(x32 == null) {
							x32 = 0;
						}
						var p_x4 = x32;
						var p_y4 = y32;
						var x33 = p_x4 - f1_x4;
						var y33 = p_y4 - f1_y4;
						var x34 = p_x4 - f2_x4;
						var y34 = p_y4 - f2_y4;
						has2 = Math.sqrt(x33 * x33 + y33 * y33) + Math.sqrt(x34 * x34 + y34 * y34) <= view4.width;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else if(view4.height > view4.width) {
						var a5 = view4.height / 2;
						var b6 = view4.width / 2;
						var c5 = Math.sqrt(a5 * a5 - b6 * b6);
						var x35 = view4.x + view4.width / 2;
						var y35 = view4.y + view4.height / 2 - c5;
						if(y35 == null) {
							y35 = 0;
						}
						if(x35 == null) {
							x35 = 0;
						}
						var f1_x5 = x35;
						var f1_y5 = y35;
						var x36 = view4.x + view4.width / 2;
						var y36 = view4.y + view4.height / 2 + c5;
						if(y36 == null) {
							y36 = 0;
						}
						if(x36 == null) {
							x36 = 0;
						}
						var f2_x5 = x36;
						var f2_y5 = y36;
						var x37 = x29;
						var y37 = y29;
						if(y37 == null) {
							y37 = 0;
						}
						if(x37 == null) {
							x37 = 0;
						}
						var p_x5 = x37;
						var p_y5 = y37;
						var x38 = p_x5 - f1_x5;
						var y38 = p_y5 - f1_y5;
						var x39 = p_x5 - f2_x5;
						var y39 = p_y5 - f2_y5;
						has2 = Math.sqrt(x38 * x38 + y38 * y38) + Math.sqrt(x39 * x39 + y39 * y39) <= view4.height;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else {
						var x40 = x29;
						var y40 = y29;
						if(y40 == null) {
							y40 = 0;
						}
						if(x40 == null) {
							x40 = 0;
						}
						var point1_x2 = x40;
						var point1_y2 = y40;
						var x41 = view4.x + view4.width / 2;
						var y41 = view4.y + view4.height / 2;
						if(y41 == null) {
							y41 = 0;
						}
						if(x41 == null) {
							x41 = 0;
						}
						var point2_x2 = x41;
						var point2_y2 = y41;
						var x42 = point2_x2 - point1_x2;
						var y42 = point2_y2 - point1_y2;
						has2 = Math.sqrt(x42 * x42 + y42 * y42) <= view4.width / 2;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					}
					break;
				case 4:
					has2 = Math.abs(x29 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y29 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
					break;
				case 5:
					has2 = !(Math.abs(x29 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y29 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
					break;
				}
				tmp2 = has2;
			}
			if(tmp2) {
				var position4 = (y29 * this1.getUInt16(0) + x29) * 4;
				position4 += vision_ds_Image.OFFSET;
				this1.b[position4] = color >> 24 & 255;
				this1.b[position4 + 1] = color >> 16 & 255;
				this1.b[position4 + 2] = color >> 8 & 255;
				this1.b[position4 + 3] = color & 255;
			}
		} else {
			var position5 = (y29 * this1.getUInt16(0) + x29) * 4;
			position5 += vision_ds_Image.OFFSET;
			this1.b[position5] = color >> 24 & 255;
			this1.b[position5 + 1] = color >> 16 & 255;
			this1.b[position5 + 2] = color >> 8 & 255;
			this1.b[position5 + 3] = color & 255;
		}
		var x43 = centerX - x;
		var y43 = centerY - y;
		if(!(x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x3 = x43;
			var this_y3 = y43;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v3 = null;
			var tmp3;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
				tmp3 = x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has3 = false;
				var view6;
				if(v3 != null) {
					view6 = v3;
				} else {
					var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g11 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this5 = this1.b;
					var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view6 = new vision_ds_ImageView(_g9,_g10,_g11,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this5[view7]);
				}
				switch(view6.shape) {
				case 0:
					has3 = x43 < view6.x + view6.width && y43 < view6.y + view6.height && x43 >= view6.x && y43 >= view6.y;
					break;
				case 1:
					has3 = !(x43 < view6.x + view6.width && y43 < view6.y + view6.height && x43 >= view6.x && y43 >= view6.y);
					break;
				case 2:case 3:
					if(view6.width > view6.height) {
						var a6 = view6.width / 2;
						var b7 = view6.height / 2;
						var c6 = Math.sqrt(a6 * a6 - b7 * b7);
						var x44 = view6.x + view6.width / 2 - c6;
						var y44 = view6.y + view6.height / 2;
						if(y44 == null) {
							y44 = 0;
						}
						if(x44 == null) {
							x44 = 0;
						}
						var f1_x6 = x44;
						var f1_y6 = y44;
						var x45 = view6.x + view6.width / 2 + c6;
						var y45 = view6.y + view6.height / 2;
						if(y45 == null) {
							y45 = 0;
						}
						if(x45 == null) {
							x45 = 0;
						}
						var f2_x6 = x45;
						var f2_y6 = y45;
						var x46 = x43;
						var y46 = y43;
						if(y46 == null) {
							y46 = 0;
						}
						if(x46 == null) {
							x46 = 0;
						}
						var p_x6 = x46;
						var p_y6 = y46;
						var x47 = p_x6 - f1_x6;
						var y47 = p_y6 - f1_y6;
						var x48 = p_x6 - f2_x6;
						var y48 = p_y6 - f2_y6;
						has3 = Math.sqrt(x47 * x47 + y47 * y47) + Math.sqrt(x48 * x48 + y48 * y48) <= view6.width;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else if(view6.height > view6.width) {
						var a7 = view6.height / 2;
						var b8 = view6.width / 2;
						var c7 = Math.sqrt(a7 * a7 - b8 * b8);
						var x49 = view6.x + view6.width / 2;
						var y49 = view6.y + view6.height / 2 - c7;
						if(y49 == null) {
							y49 = 0;
						}
						if(x49 == null) {
							x49 = 0;
						}
						var f1_x7 = x49;
						var f1_y7 = y49;
						var x50 = view6.x + view6.width / 2;
						var y50 = view6.y + view6.height / 2 + c7;
						if(y50 == null) {
							y50 = 0;
						}
						if(x50 == null) {
							x50 = 0;
						}
						var f2_x7 = x50;
						var f2_y7 = y50;
						var x51 = x43;
						var y51 = y43;
						if(y51 == null) {
							y51 = 0;
						}
						if(x51 == null) {
							x51 = 0;
						}
						var p_x7 = x51;
						var p_y7 = y51;
						var x52 = p_x7 - f1_x7;
						var y52 = p_y7 - f1_y7;
						var x53 = p_x7 - f2_x7;
						var y53 = p_y7 - f2_y7;
						has3 = Math.sqrt(x52 * x52 + y52 * y52) + Math.sqrt(x53 * x53 + y53 * y53) <= view6.height;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else {
						var x54 = x43;
						var y54 = y43;
						if(y54 == null) {
							y54 = 0;
						}
						if(x54 == null) {
							x54 = 0;
						}
						var point1_x3 = x54;
						var point1_y3 = y54;
						var x55 = view6.x + view6.width / 2;
						var y55 = view6.y + view6.height / 2;
						if(y55 == null) {
							y55 = 0;
						}
						if(x55 == null) {
							x55 = 0;
						}
						var point2_x3 = x55;
						var point2_y3 = y55;
						var x56 = point2_x3 - point1_x3;
						var y56 = point2_y3 - point1_y3;
						has3 = Math.sqrt(x56 * x56 + y56 * y56) <= view6.width / 2;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					}
					break;
				case 4:
					has3 = Math.abs(x43 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y43 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
					break;
				case 5:
					has3 = !(Math.abs(x43 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y43 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
					break;
				}
				tmp3 = has3;
			}
			if(tmp3) {
				var position6 = (y43 * this1.getUInt16(0) + x43) * 4;
				position6 += vision_ds_Image.OFFSET;
				this1.b[position6] = color >> 24 & 255;
				this1.b[position6 + 1] = color >> 16 & 255;
				this1.b[position6 + 2] = color >> 8 & 255;
				this1.b[position6 + 3] = color & 255;
			}
		} else {
			var position7 = (y43 * this1.getUInt16(0) + x43) * 4;
			position7 += vision_ds_Image.OFFSET;
			this1.b[position7] = color >> 24 & 255;
			this1.b[position7 + 1] = color >> 16 & 255;
			this1.b[position7 + 2] = color >> 8 & 255;
			this1.b[position7 + 3] = color & 255;
		}
		if(b) {
			++x;
			b = false;
		}
		if(ellipseError <= 0) {
			++y;
			stoppingY += twoASquare;
			ellipseError += yChange;
			yChange += twoASquare;
		}
		if(ellipseError > 0) {
			--x;
			stoppingX -= twoBSquare;
			ellipseError += xChange;
			xChange += twoBSquare;
		}
	}
	ellipseError = radiusY * radiusY / 4 - radiusX * radiusX * (radiusY - 0.5);
	x = 0;
	y = radiusY;
	xChange = radiusY * radiusY;
	yChange = radiusX * radiusX * (1 - 2 * radiusY);
	stoppingX = 0;
	stoppingY = twoASquare * radiusY;
	while(stoppingX <= stoppingY) {
		var x1 = centerX + x;
		var y1 = centerY + y;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x3 = view.x + view.width / 2 + c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f2_x = x3;
						var f2_y = y3;
						var x4 = x1;
						var y4 = y1;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var p_x = x4;
						var p_y = y4;
						var x5 = p_x - f1_x;
						var y5 = p_y - f1_y;
						var x6 = p_x - f2_x;
						var y6 = p_y - f2_y;
						has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x7 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 - c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f1_x1 = x7;
						var f1_y1 = y7;
						var x8 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 + c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f2_x1 = x8;
						var f2_y1 = y8;
						var x9 = x1;
						var y9 = y1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var p_x1 = x9;
						var p_y1 = y9;
						var x10 = p_x1 - f1_x1;
						var y10 = p_y1 - f1_y1;
						var x11 = p_x1 - f2_x1;
						var y11 = p_y1 - f2_y1;
						has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x12 = x1;
						var y12 = y1;
						if(y12 == null) {
							y12 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point1_x = x12;
						var point1_y = y12;
						var x13 = view.x + view.width / 2;
						var y13 = view.y + view.height / 2;
						if(y13 == null) {
							y13 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point2_x = x13;
						var point2_y = y13;
						var x14 = point2_x - point1_x;
						var y14 = point2_y - point1_y;
						has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		var x15 = centerX - x;
		var y15 = centerY + y;
		if(!(x15 >= 0 && y15 >= 0 && x15 < this1.getUInt16(0) && y15 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x1 = x15;
			var this_y1 = y15;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v1 = null;
			var tmp1;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
				tmp1 = x15 >= 0 && y15 >= 0 && x15 < this1.getUInt16(0) && y15 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has1 = false;
				var view2;
				if(v1 != null) {
					view2 = v1;
				} else {
					var _g3 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this3 = this1.b;
					var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view2 = new vision_ds_ImageView(_g3,_g4,_g5,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view3]);
				}
				switch(view2.shape) {
				case 0:
					has1 = x15 < view2.x + view2.width && y15 < view2.y + view2.height && x15 >= view2.x && y15 >= view2.y;
					break;
				case 1:
					has1 = !(x15 < view2.x + view2.width && y15 < view2.y + view2.height && x15 >= view2.x && y15 >= view2.y);
					break;
				case 2:case 3:
					if(view2.width > view2.height) {
						var a2 = view2.width / 2;
						var b2 = view2.height / 2;
						var c2 = Math.sqrt(a2 * a2 - b2 * b2);
						var x16 = view2.x + view2.width / 2 - c2;
						var y16 = view2.y + view2.height / 2;
						if(y16 == null) {
							y16 = 0;
						}
						if(x16 == null) {
							x16 = 0;
						}
						var f1_x2 = x16;
						var f1_y2 = y16;
						var x17 = view2.x + view2.width / 2 + c2;
						var y17 = view2.y + view2.height / 2;
						if(y17 == null) {
							y17 = 0;
						}
						if(x17 == null) {
							x17 = 0;
						}
						var f2_x2 = x17;
						var f2_y2 = y17;
						var x18 = x15;
						var y18 = y15;
						if(y18 == null) {
							y18 = 0;
						}
						if(x18 == null) {
							x18 = 0;
						}
						var p_x2 = x18;
						var p_y2 = y18;
						var x19 = p_x2 - f1_x2;
						var y19 = p_y2 - f1_y2;
						var x20 = p_x2 - f2_x2;
						var y20 = p_y2 - f2_y2;
						has1 = Math.sqrt(x19 * x19 + y19 * y19) + Math.sqrt(x20 * x20 + y20 * y20) <= view2.width;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else if(view2.height > view2.width) {
						var a3 = view2.height / 2;
						var b3 = view2.width / 2;
						var c3 = Math.sqrt(a3 * a3 - b3 * b3);
						var x21 = view2.x + view2.width / 2;
						var y21 = view2.y + view2.height / 2 - c3;
						if(y21 == null) {
							y21 = 0;
						}
						if(x21 == null) {
							x21 = 0;
						}
						var f1_x3 = x21;
						var f1_y3 = y21;
						var x22 = view2.x + view2.width / 2;
						var y22 = view2.y + view2.height / 2 + c3;
						if(y22 == null) {
							y22 = 0;
						}
						if(x22 == null) {
							x22 = 0;
						}
						var f2_x3 = x22;
						var f2_y3 = y22;
						var x23 = x15;
						var y23 = y15;
						if(y23 == null) {
							y23 = 0;
						}
						if(x23 == null) {
							x23 = 0;
						}
						var p_x3 = x23;
						var p_y3 = y23;
						var x24 = p_x3 - f1_x3;
						var y24 = p_y3 - f1_y3;
						var x25 = p_x3 - f2_x3;
						var y25 = p_y3 - f2_y3;
						has1 = Math.sqrt(x24 * x24 + y24 * y24) + Math.sqrt(x25 * x25 + y25 * y25) <= view2.height;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else {
						var x26 = x15;
						var y26 = y15;
						if(y26 == null) {
							y26 = 0;
						}
						if(x26 == null) {
							x26 = 0;
						}
						var point1_x1 = x26;
						var point1_y1 = y26;
						var x27 = view2.x + view2.width / 2;
						var y27 = view2.y + view2.height / 2;
						if(y27 == null) {
							y27 = 0;
						}
						if(x27 == null) {
							x27 = 0;
						}
						var point2_x1 = x27;
						var point2_y1 = y27;
						var x28 = point2_x1 - point1_x1;
						var y28 = point2_y1 - point1_y1;
						has1 = Math.sqrt(x28 * x28 + y28 * y28) <= view2.width / 2;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					}
					break;
				case 4:
					has1 = Math.abs(x15 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y15 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
					break;
				case 5:
					has1 = !(Math.abs(x15 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y15 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
					break;
				}
				tmp1 = has1;
			}
			if(tmp1) {
				var position2 = (y15 * this1.getUInt16(0) + x15) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color >> 24 & 255;
				this1.b[position2 + 1] = color >> 16 & 255;
				this1.b[position2 + 2] = color >> 8 & 255;
				this1.b[position2 + 3] = color & 255;
			}
		} else {
			var position3 = (y15 * this1.getUInt16(0) + x15) * 4;
			position3 += vision_ds_Image.OFFSET;
			this1.b[position3] = color >> 24 & 255;
			this1.b[position3 + 1] = color >> 16 & 255;
			this1.b[position3 + 2] = color >> 8 & 255;
			this1.b[position3 + 3] = color & 255;
		}
		var x29 = centerX + x;
		var y29 = centerY - y;
		if(!(x29 >= 0 && y29 >= 0 && x29 < this1.getUInt16(0) && y29 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x2 = x29;
			var this_y2 = y29;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v2 = null;
			var tmp2;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
				tmp2 = x29 >= 0 && y29 >= 0 && x29 < this1.getUInt16(0) && y29 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has2 = false;
				var view4;
				if(v2 != null) {
					view4 = v2;
				} else {
					var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this4 = this1.b;
					var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view4 = new vision_ds_ImageView(_g6,_g7,_g8,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this4[view5]);
				}
				switch(view4.shape) {
				case 0:
					has2 = x29 < view4.x + view4.width && y29 < view4.y + view4.height && x29 >= view4.x && y29 >= view4.y;
					break;
				case 1:
					has2 = !(x29 < view4.x + view4.width && y29 < view4.y + view4.height && x29 >= view4.x && y29 >= view4.y);
					break;
				case 2:case 3:
					if(view4.width > view4.height) {
						var a4 = view4.width / 2;
						var b4 = view4.height / 2;
						var c4 = Math.sqrt(a4 * a4 - b4 * b4);
						var x30 = view4.x + view4.width / 2 - c4;
						var y30 = view4.y + view4.height / 2;
						if(y30 == null) {
							y30 = 0;
						}
						if(x30 == null) {
							x30 = 0;
						}
						var f1_x4 = x30;
						var f1_y4 = y30;
						var x31 = view4.x + view4.width / 2 + c4;
						var y31 = view4.y + view4.height / 2;
						if(y31 == null) {
							y31 = 0;
						}
						if(x31 == null) {
							x31 = 0;
						}
						var f2_x4 = x31;
						var f2_y4 = y31;
						var x32 = x29;
						var y32 = y29;
						if(y32 == null) {
							y32 = 0;
						}
						if(x32 == null) {
							x32 = 0;
						}
						var p_x4 = x32;
						var p_y4 = y32;
						var x33 = p_x4 - f1_x4;
						var y33 = p_y4 - f1_y4;
						var x34 = p_x4 - f2_x4;
						var y34 = p_y4 - f2_y4;
						has2 = Math.sqrt(x33 * x33 + y33 * y33) + Math.sqrt(x34 * x34 + y34 * y34) <= view4.width;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else if(view4.height > view4.width) {
						var a5 = view4.height / 2;
						var b5 = view4.width / 2;
						var c5 = Math.sqrt(a5 * a5 - b5 * b5);
						var x35 = view4.x + view4.width / 2;
						var y35 = view4.y + view4.height / 2 - c5;
						if(y35 == null) {
							y35 = 0;
						}
						if(x35 == null) {
							x35 = 0;
						}
						var f1_x5 = x35;
						var f1_y5 = y35;
						var x36 = view4.x + view4.width / 2;
						var y36 = view4.y + view4.height / 2 + c5;
						if(y36 == null) {
							y36 = 0;
						}
						if(x36 == null) {
							x36 = 0;
						}
						var f2_x5 = x36;
						var f2_y5 = y36;
						var x37 = x29;
						var y37 = y29;
						if(y37 == null) {
							y37 = 0;
						}
						if(x37 == null) {
							x37 = 0;
						}
						var p_x5 = x37;
						var p_y5 = y37;
						var x38 = p_x5 - f1_x5;
						var y38 = p_y5 - f1_y5;
						var x39 = p_x5 - f2_x5;
						var y39 = p_y5 - f2_y5;
						has2 = Math.sqrt(x38 * x38 + y38 * y38) + Math.sqrt(x39 * x39 + y39 * y39) <= view4.height;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else {
						var x40 = x29;
						var y40 = y29;
						if(y40 == null) {
							y40 = 0;
						}
						if(x40 == null) {
							x40 = 0;
						}
						var point1_x2 = x40;
						var point1_y2 = y40;
						var x41 = view4.x + view4.width / 2;
						var y41 = view4.y + view4.height / 2;
						if(y41 == null) {
							y41 = 0;
						}
						if(x41 == null) {
							x41 = 0;
						}
						var point2_x2 = x41;
						var point2_y2 = y41;
						var x42 = point2_x2 - point1_x2;
						var y42 = point2_y2 - point1_y2;
						has2 = Math.sqrt(x42 * x42 + y42 * y42) <= view4.width / 2;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					}
					break;
				case 4:
					has2 = Math.abs(x29 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y29 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
					break;
				case 5:
					has2 = !(Math.abs(x29 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y29 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
					break;
				}
				tmp2 = has2;
			}
			if(tmp2) {
				var position4 = (y29 * this1.getUInt16(0) + x29) * 4;
				position4 += vision_ds_Image.OFFSET;
				this1.b[position4] = color >> 24 & 255;
				this1.b[position4 + 1] = color >> 16 & 255;
				this1.b[position4 + 2] = color >> 8 & 255;
				this1.b[position4 + 3] = color & 255;
			}
		} else {
			var position5 = (y29 * this1.getUInt16(0) + x29) * 4;
			position5 += vision_ds_Image.OFFSET;
			this1.b[position5] = color >> 24 & 255;
			this1.b[position5 + 1] = color >> 16 & 255;
			this1.b[position5 + 2] = color >> 8 & 255;
			this1.b[position5 + 3] = color & 255;
		}
		var x43 = centerX - x;
		var y43 = centerY - y;
		if(!(x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x3 = x43;
			var this_y3 = y43;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v3 = null;
			var tmp3;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
				tmp3 = x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has3 = false;
				var view6;
				if(v3 != null) {
					view6 = v3;
				} else {
					var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g11 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this5 = this1.b;
					var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view6 = new vision_ds_ImageView(_g9,_g10,_g11,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this5[view7]);
				}
				switch(view6.shape) {
				case 0:
					has3 = x43 < view6.x + view6.width && y43 < view6.y + view6.height && x43 >= view6.x && y43 >= view6.y;
					break;
				case 1:
					has3 = !(x43 < view6.x + view6.width && y43 < view6.y + view6.height && x43 >= view6.x && y43 >= view6.y);
					break;
				case 2:case 3:
					if(view6.width > view6.height) {
						var a6 = view6.width / 2;
						var b6 = view6.height / 2;
						var c6 = Math.sqrt(a6 * a6 - b6 * b6);
						var x44 = view6.x + view6.width / 2 - c6;
						var y44 = view6.y + view6.height / 2;
						if(y44 == null) {
							y44 = 0;
						}
						if(x44 == null) {
							x44 = 0;
						}
						var f1_x6 = x44;
						var f1_y6 = y44;
						var x45 = view6.x + view6.width / 2 + c6;
						var y45 = view6.y + view6.height / 2;
						if(y45 == null) {
							y45 = 0;
						}
						if(x45 == null) {
							x45 = 0;
						}
						var f2_x6 = x45;
						var f2_y6 = y45;
						var x46 = x43;
						var y46 = y43;
						if(y46 == null) {
							y46 = 0;
						}
						if(x46 == null) {
							x46 = 0;
						}
						var p_x6 = x46;
						var p_y6 = y46;
						var x47 = p_x6 - f1_x6;
						var y47 = p_y6 - f1_y6;
						var x48 = p_x6 - f2_x6;
						var y48 = p_y6 - f2_y6;
						has3 = Math.sqrt(x47 * x47 + y47 * y47) + Math.sqrt(x48 * x48 + y48 * y48) <= view6.width;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else if(view6.height > view6.width) {
						var a7 = view6.height / 2;
						var b7 = view6.width / 2;
						var c7 = Math.sqrt(a7 * a7 - b7 * b7);
						var x49 = view6.x + view6.width / 2;
						var y49 = view6.y + view6.height / 2 - c7;
						if(y49 == null) {
							y49 = 0;
						}
						if(x49 == null) {
							x49 = 0;
						}
						var f1_x7 = x49;
						var f1_y7 = y49;
						var x50 = view6.x + view6.width / 2;
						var y50 = view6.y + view6.height / 2 + c7;
						if(y50 == null) {
							y50 = 0;
						}
						if(x50 == null) {
							x50 = 0;
						}
						var f2_x7 = x50;
						var f2_y7 = y50;
						var x51 = x43;
						var y51 = y43;
						if(y51 == null) {
							y51 = 0;
						}
						if(x51 == null) {
							x51 = 0;
						}
						var p_x7 = x51;
						var p_y7 = y51;
						var x52 = p_x7 - f1_x7;
						var y52 = p_y7 - f1_y7;
						var x53 = p_x7 - f2_x7;
						var y53 = p_y7 - f2_y7;
						has3 = Math.sqrt(x52 * x52 + y52 * y52) + Math.sqrt(x53 * x53 + y53 * y53) <= view6.height;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else {
						var x54 = x43;
						var y54 = y43;
						if(y54 == null) {
							y54 = 0;
						}
						if(x54 == null) {
							x54 = 0;
						}
						var point1_x3 = x54;
						var point1_y3 = y54;
						var x55 = view6.x + view6.width / 2;
						var y55 = view6.y + view6.height / 2;
						if(y55 == null) {
							y55 = 0;
						}
						if(x55 == null) {
							x55 = 0;
						}
						var point2_x3 = x55;
						var point2_y3 = y55;
						var x56 = point2_x3 - point1_x3;
						var y56 = point2_y3 - point1_y3;
						has3 = Math.sqrt(x56 * x56 + y56 * y56) <= view6.width / 2;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					}
					break;
				case 4:
					has3 = Math.abs(x43 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y43 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
					break;
				case 5:
					has3 = !(Math.abs(x43 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y43 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
					break;
				}
				tmp3 = has3;
			}
			if(tmp3) {
				var position6 = (y43 * this1.getUInt16(0) + x43) * 4;
				position6 += vision_ds_Image.OFFSET;
				this1.b[position6] = color >> 24 & 255;
				this1.b[position6 + 1] = color >> 16 & 255;
				this1.b[position6 + 2] = color >> 8 & 255;
				this1.b[position6 + 3] = color & 255;
			}
		} else {
			var position7 = (y43 * this1.getUInt16(0) + x43) * 4;
			position7 += vision_ds_Image.OFFSET;
			this1.b[position7] = color >> 24 & 255;
			this1.b[position7 + 1] = color >> 16 & 255;
			this1.b[position7 + 2] = color >> 8 & 255;
			this1.b[position7 + 3] = color & 255;
		}
		if(ellipseError <= 0) {
			++x;
			stoppingX += twoBSquare;
			ellipseError += xChange;
			xChange += twoBSquare;
		}
		if(ellipseError > 0) {
			--y;
			stoppingY -= twoASquare;
			ellipseError += yChange;
			yChange += twoASquare;
		}
	}
};
vision_ds_Image.fillColorRecursive = function(this1,position,color) {
	var x = position.x;
	var y = position.y;
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position1 = (y * this1.getUInt16(0) + x) * 4;
	position1 += vision_ds_Image.OFFSET;
	var value = this1.b[position1] << 24 | this1.b[position1 + 1] << 16 | this1.b[position1 + 2] << 8 | this1.b[position1 + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var originalColor = this2;
	var expandFill = null;
	expandFill = function(x,y) {
		if(x < 0 || x >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || y < 0 || y >= this1.getUInt16(0)) {
			return;
		}
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		if(this2 == color) {
			return;
		}
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		if(this2 == originalColor) {
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var expandFill1;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					expandFill1 = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 - c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 + c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point2_x = x1;
							var point2_y = y1;
							var x1 = point2_x - point1_x;
							var y1 = point2_y - point1_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					expandFill1 = has;
				}
				if(expandFill1) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255;
					this1.b[position + 1] = color >> 16 & 255;
					this1.b[position + 2] = color >> 8 & 255;
					this1.b[position + 3] = color & 255;
				}
			} else {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
			expandFill(x + 1,y);
			expandFill(x - 1,y);
			expandFill(x,y + 1);
			expandFill(x,y - 1);
		}
	};
	expandFill(position.x,position.y);
};
vision_ds_Image.fillColor = function(this1,position,color) {
	var queue = new haxe_ds_List();
	var x = position.x;
	var y = position.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p_x = x;
	var p_y = y;
	var this2 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
	queue.push(this2);
	var explored = [];
	var x = position.x;
	var y = position.y;
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var originalColor = this2;
	var pc = 0;
	while(queue.length > 0) {
		var v = queue.pop();
		var this2 = new haxe__$Int64__$_$_$Int64(v.x,v.y);
		explored.push(this2);
		var x = v.x + 1;
		var y = v.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p_x = x;
		var p_y = y;
		var point_x = p_x | 0;
		var point_y = p_y | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 994, className : "vision.ds._Image.Image_Impl_", methodName : "fillColor"});
			queue.clear();
		} else {
			var tmp;
			var tmp1;
			var x1 = point_x;
			var y1 = point_y;
			if(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var x2 = point_x;
				var y2 = point_y;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y2 * this1.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this3 = value;
				tmp1 = this3 == originalColor;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var this4 = new haxe__$Int64__$_$_$Int64(point_x,point_y);
				tmp = explored.indexOf(this4) == -1;
			} else {
				tmp = false;
			}
			if(tmp) {
				++pc;
				var x3 = point_x;
				var y3 = point_y;
				if(y3 == null) {
					y3 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var p_x1 = x3;
				var p_y1 = y3;
				var this5 = new vision_ds__$IntPoint2D_Impl(p_x1 | 0,p_y1 | 0);
				queue.push(this5);
				var x4 = point_x;
				var y4 = point_y;
				if(!(x4 >= 0 && y4 >= 0 && x4 < this1.getUInt16(0) && y4 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x1 = x4;
					var this_y1 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v1 = null;
					var tmp2;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
						tmp2 = x4 >= 0 && y4 >= 0 && x4 < this1.getUInt16(0) && y4 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v1 != null) {
							view = v1;
						} else {
							var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this6 = this1.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this6[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x4 < view.x + view.width && y4 < view.y + view.height && x4 >= view.x && y4 >= view.y;
							break;
						case 1:
							has = !(x4 < view.x + view.width && y4 < view.y + view.height && x4 >= view.x && y4 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x5 = view.x + view.width / 2 - c;
								var y5 = view.y + view.height / 2;
								if(y5 == null) {
									y5 = 0;
								}
								if(x5 == null) {
									x5 = 0;
								}
								var f1_x = x5;
								var f1_y = y5;
								var x6 = view.x + view.width / 2 + c;
								var y6 = view.y + view.height / 2;
								if(y6 == null) {
									y6 = 0;
								}
								if(x6 == null) {
									x6 = 0;
								}
								var f2_x = x6;
								var f2_y = y6;
								var x7 = x4;
								var y7 = y4;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var p_x2 = x7;
								var p_y2 = y7;
								var x8 = p_x2 - f1_x;
								var y8 = p_y2 - f1_y;
								var x9 = p_x2 - f2_x;
								var y9 = p_y2 - f2_y;
								has = Math.sqrt(x8 * x8 + y8 * y8) + Math.sqrt(x9 * x9 + y9 * y9) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x10 = view.x + view.width / 2;
								var y10 = view.y + view.height / 2 - c1;
								if(y10 == null) {
									y10 = 0;
								}
								if(x10 == null) {
									x10 = 0;
								}
								var f1_x1 = x10;
								var f1_y1 = y10;
								var x11 = view.x + view.width / 2;
								var y11 = view.y + view.height / 2 + c1;
								if(y11 == null) {
									y11 = 0;
								}
								if(x11 == null) {
									x11 = 0;
								}
								var f2_x1 = x11;
								var f2_y1 = y11;
								var x12 = x4;
								var y12 = y4;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var p_x3 = x12;
								var p_y3 = y12;
								var x13 = p_x3 - f1_x1;
								var y13 = p_y3 - f1_y1;
								var x14 = p_x3 - f2_x1;
								var y14 = p_y3 - f2_y1;
								has = Math.sqrt(x13 * x13 + y13 * y13) + Math.sqrt(x14 * x14 + y14 * y14) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x15 = x4;
								var y15 = y4;
								if(y15 == null) {
									y15 = 0;
								}
								if(x15 == null) {
									x15 = 0;
								}
								var point1_x = x15;
								var point1_y = y15;
								var x16 = view.x + view.width / 2;
								var y16 = view.y + view.height / 2;
								if(y16 == null) {
									y16 = 0;
								}
								if(x16 == null) {
									x16 = 0;
								}
								var point2_x = x16;
								var point2_y = y16;
								var x17 = point2_x - point1_x;
								var y17 = point2_y - point1_y;
								has = Math.sqrt(x17 * x17 + y17 * y17) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x4 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y4 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x4 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y4 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp2 = has;
					}
					if(tmp2) {
						var position1 = (y4 * this1.getUInt16(0) + x4) * 4;
						position1 += vision_ds_Image.OFFSET;
						this1.b[position1] = color >> 24 & 255;
						this1.b[position1 + 1] = color >> 16 & 255;
						this1.b[position1 + 2] = color >> 8 & 255;
						this1.b[position1 + 3] = color & 255;
					}
				} else {
					var position2 = (y4 * this1.getUInt16(0) + x4) * 4;
					position2 += vision_ds_Image.OFFSET;
					this1.b[position2] = color >> 24 & 255;
					this1.b[position2 + 1] = color >> 16 & 255;
					this1.b[position2 + 2] = color >> 8 & 255;
					this1.b[position2 + 3] = color & 255;
				}
			}
		}
		var x18 = v.x;
		var y18 = v.y + 1;
		if(y18 == null) {
			y18 = 0;
		}
		if(x18 == null) {
			x18 = 0;
		}
		var p_x4 = x18;
		var p_y4 = y18;
		var point_x1 = p_x4 | 0;
		var point_y1 = p_y4 | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 994, className : "vision.ds._Image.Image_Impl_", methodName : "fillColor"});
			queue.clear();
		} else {
			var tmp3;
			var tmp4;
			var x19 = point_x1;
			var y19 = point_y1;
			if(x19 >= 0 && y19 >= 0 && x19 < this1.getUInt16(0) && y19 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var x20 = point_x1;
				var y20 = point_y1;
				if(!(x20 >= 0 && y20 >= 0 && x20 < this1.getUInt16(0) && y20 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x2 = x20;
					var this_y2 = y20;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position3 = (y20 * this1.getUInt16(0) + x20) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value1 = this1.b[position3] << 24 | this1.b[position3 + 1] << 16 | this1.b[position3 + 2] << 8 | this1.b[position3 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this7 = value1;
				tmp4 = this7 == originalColor;
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				var this8 = new haxe__$Int64__$_$_$Int64(point_x1,point_y1);
				tmp3 = explored.indexOf(this8) == -1;
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				++pc;
				var x21 = point_x1;
				var y21 = point_y1;
				if(y21 == null) {
					y21 = 0;
				}
				if(x21 == null) {
					x21 = 0;
				}
				var p_x5 = x21;
				var p_y5 = y21;
				var this9 = new vision_ds__$IntPoint2D_Impl(p_x5 | 0,p_y5 | 0);
				queue.push(this9);
				var x22 = point_x1;
				var y22 = point_y1;
				if(!(x22 >= 0 && y22 >= 0 && x22 < this1.getUInt16(0) && y22 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x3 = x22;
					var this_y3 = y22;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v2 = null;
					var tmp5;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
						tmp5 = x22 >= 0 && y22 >= 0 && x22 < this1.getUInt16(0) && y22 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has1 = false;
						var view2;
						if(v2 != null) {
							view2 = v2;
						} else {
							var _g3 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this10 = this1.b;
							var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view2 = new vision_ds_ImageView(_g3,_g4,_g5,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this10[view3]);
						}
						switch(view2.shape) {
						case 0:
							has1 = x22 < view2.x + view2.width && y22 < view2.y + view2.height && x22 >= view2.x && y22 >= view2.y;
							break;
						case 1:
							has1 = !(x22 < view2.x + view2.width && y22 < view2.y + view2.height && x22 >= view2.x && y22 >= view2.y);
							break;
						case 2:case 3:
							if(view2.width > view2.height) {
								var a2 = view2.width / 2;
								var b2 = view2.height / 2;
								var c2 = Math.sqrt(a2 * a2 - b2 * b2);
								var x23 = view2.x + view2.width / 2 - c2;
								var y23 = view2.y + view2.height / 2;
								if(y23 == null) {
									y23 = 0;
								}
								if(x23 == null) {
									x23 = 0;
								}
								var f1_x2 = x23;
								var f1_y2 = y23;
								var x24 = view2.x + view2.width / 2 + c2;
								var y24 = view2.y + view2.height / 2;
								if(y24 == null) {
									y24 = 0;
								}
								if(x24 == null) {
									x24 = 0;
								}
								var f2_x2 = x24;
								var f2_y2 = y24;
								var x25 = x22;
								var y25 = y22;
								if(y25 == null) {
									y25 = 0;
								}
								if(x25 == null) {
									x25 = 0;
								}
								var p_x6 = x25;
								var p_y6 = y25;
								var x26 = p_x6 - f1_x2;
								var y26 = p_y6 - f1_y2;
								var x27 = p_x6 - f2_x2;
								var y27 = p_y6 - f2_y2;
								has1 = Math.sqrt(x26 * x26 + y26 * y26) + Math.sqrt(x27 * x27 + y27 * y27) <= view2.width;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else if(view2.height > view2.width) {
								var a3 = view2.height / 2;
								var b3 = view2.width / 2;
								var c3 = Math.sqrt(a3 * a3 - b3 * b3);
								var x28 = view2.x + view2.width / 2;
								var y28 = view2.y + view2.height / 2 - c3;
								if(y28 == null) {
									y28 = 0;
								}
								if(x28 == null) {
									x28 = 0;
								}
								var f1_x3 = x28;
								var f1_y3 = y28;
								var x29 = view2.x + view2.width / 2;
								var y29 = view2.y + view2.height / 2 + c3;
								if(y29 == null) {
									y29 = 0;
								}
								if(x29 == null) {
									x29 = 0;
								}
								var f2_x3 = x29;
								var f2_y3 = y29;
								var x30 = x22;
								var y30 = y22;
								if(y30 == null) {
									y30 = 0;
								}
								if(x30 == null) {
									x30 = 0;
								}
								var p_x7 = x30;
								var p_y7 = y30;
								var x31 = p_x7 - f1_x3;
								var y31 = p_y7 - f1_y3;
								var x32 = p_x7 - f2_x3;
								var y32 = p_y7 - f2_y3;
								has1 = Math.sqrt(x31 * x31 + y31 * y31) + Math.sqrt(x32 * x32 + y32 * y32) <= view2.height;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else {
								var x33 = x22;
								var y33 = y22;
								if(y33 == null) {
									y33 = 0;
								}
								if(x33 == null) {
									x33 = 0;
								}
								var point1_x1 = x33;
								var point1_y1 = y33;
								var x34 = view2.x + view2.width / 2;
								var y34 = view2.y + view2.height / 2;
								if(y34 == null) {
									y34 = 0;
								}
								if(x34 == null) {
									x34 = 0;
								}
								var point2_x1 = x34;
								var point2_y1 = y34;
								var x35 = point2_x1 - point1_x1;
								var y35 = point2_y1 - point1_y1;
								has1 = Math.sqrt(x35 * x35 + y35 * y35) <= view2.width / 2;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							}
							break;
						case 4:
							has1 = Math.abs(x22 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y22 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
							break;
						case 5:
							has1 = !(Math.abs(x22 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y22 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
							break;
						}
						tmp5 = has1;
					}
					if(tmp5) {
						var position4 = (y22 * this1.getUInt16(0) + x22) * 4;
						position4 += vision_ds_Image.OFFSET;
						this1.b[position4] = color >> 24 & 255;
						this1.b[position4 + 1] = color >> 16 & 255;
						this1.b[position4 + 2] = color >> 8 & 255;
						this1.b[position4 + 3] = color & 255;
					}
				} else {
					var position5 = (y22 * this1.getUInt16(0) + x22) * 4;
					position5 += vision_ds_Image.OFFSET;
					this1.b[position5] = color >> 24 & 255;
					this1.b[position5 + 1] = color >> 16 & 255;
					this1.b[position5 + 2] = color >> 8 & 255;
					this1.b[position5 + 3] = color & 255;
				}
			}
		}
		var x36 = v.x - 1;
		var y36 = v.y;
		if(y36 == null) {
			y36 = 0;
		}
		if(x36 == null) {
			x36 = 0;
		}
		var p_x8 = x36;
		var p_y8 = y36;
		var point_x2 = p_x8 | 0;
		var point_y2 = p_y8 | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 994, className : "vision.ds._Image.Image_Impl_", methodName : "fillColor"});
			queue.clear();
		} else {
			var tmp6;
			var tmp7;
			var x37 = point_x2;
			var y37 = point_y2;
			if(x37 >= 0 && y37 >= 0 && x37 < this1.getUInt16(0) && y37 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var x38 = point_x2;
				var y38 = point_y2;
				if(!(x38 >= 0 && y38 >= 0 && x38 < this1.getUInt16(0) && y38 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x4 = x38;
					var this_y4 = y38;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position6 = (y38 * this1.getUInt16(0) + x38) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value2 = this1.b[position6] << 24 | this1.b[position6 + 1] << 16 | this1.b[position6 + 2] << 8 | this1.b[position6 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var this11 = value2;
				tmp7 = this11 == originalColor;
			} else {
				tmp7 = false;
			}
			if(tmp7) {
				var this12 = new haxe__$Int64__$_$_$Int64(point_x2,point_y2);
				tmp6 = explored.indexOf(this12) == -1;
			} else {
				tmp6 = false;
			}
			if(tmp6) {
				++pc;
				var x39 = point_x2;
				var y39 = point_y2;
				if(y39 == null) {
					y39 = 0;
				}
				if(x39 == null) {
					x39 = 0;
				}
				var p_x9 = x39;
				var p_y9 = y39;
				var this13 = new vision_ds__$IntPoint2D_Impl(p_x9 | 0,p_y9 | 0);
				queue.push(this13);
				var x40 = point_x2;
				var y40 = point_y2;
				if(!(x40 >= 0 && y40 >= 0 && x40 < this1.getUInt16(0) && y40 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x5 = x40;
					var this_y5 = y40;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x5,this_y5)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v3 = null;
					var tmp8;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
						tmp8 = x40 >= 0 && y40 >= 0 && x40 < this1.getUInt16(0) && y40 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has2 = false;
						var view4;
						if(v3 != null) {
							view4 = v3;
						} else {
							var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this14 = this1.b;
							var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view4 = new vision_ds_ImageView(_g6,_g7,_g8,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this14[view5]);
						}
						switch(view4.shape) {
						case 0:
							has2 = x40 < view4.x + view4.width && y40 < view4.y + view4.height && x40 >= view4.x && y40 >= view4.y;
							break;
						case 1:
							has2 = !(x40 < view4.x + view4.width && y40 < view4.y + view4.height && x40 >= view4.x && y40 >= view4.y);
							break;
						case 2:case 3:
							if(view4.width > view4.height) {
								var a4 = view4.width / 2;
								var b4 = view4.height / 2;
								var c4 = Math.sqrt(a4 * a4 - b4 * b4);
								var x41 = view4.x + view4.width / 2 - c4;
								var y41 = view4.y + view4.height / 2;
								if(y41 == null) {
									y41 = 0;
								}
								if(x41 == null) {
									x41 = 0;
								}
								var f1_x4 = x41;
								var f1_y4 = y41;
								var x42 = view4.x + view4.width / 2 + c4;
								var y42 = view4.y + view4.height / 2;
								if(y42 == null) {
									y42 = 0;
								}
								if(x42 == null) {
									x42 = 0;
								}
								var f2_x4 = x42;
								var f2_y4 = y42;
								var x43 = x40;
								var y43 = y40;
								if(y43 == null) {
									y43 = 0;
								}
								if(x43 == null) {
									x43 = 0;
								}
								var p_x10 = x43;
								var p_y10 = y43;
								var x44 = p_x10 - f1_x4;
								var y44 = p_y10 - f1_y4;
								var x45 = p_x10 - f2_x4;
								var y45 = p_y10 - f2_y4;
								has2 = Math.sqrt(x44 * x44 + y44 * y44) + Math.sqrt(x45 * x45 + y45 * y45) <= view4.width;
								if(view4.shape == 3) {
									has2 = !has2;
								}
							} else if(view4.height > view4.width) {
								var a5 = view4.height / 2;
								var b5 = view4.width / 2;
								var c5 = Math.sqrt(a5 * a5 - b5 * b5);
								var x46 = view4.x + view4.width / 2;
								var y46 = view4.y + view4.height / 2 - c5;
								if(y46 == null) {
									y46 = 0;
								}
								if(x46 == null) {
									x46 = 0;
								}
								var f1_x5 = x46;
								var f1_y5 = y46;
								var x47 = view4.x + view4.width / 2;
								var y47 = view4.y + view4.height / 2 + c5;
								if(y47 == null) {
									y47 = 0;
								}
								if(x47 == null) {
									x47 = 0;
								}
								var f2_x5 = x47;
								var f2_y5 = y47;
								var x48 = x40;
								var y48 = y40;
								if(y48 == null) {
									y48 = 0;
								}
								if(x48 == null) {
									x48 = 0;
								}
								var p_x11 = x48;
								var p_y11 = y48;
								var x49 = p_x11 - f1_x5;
								var y49 = p_y11 - f1_y5;
								var x50 = p_x11 - f2_x5;
								var y50 = p_y11 - f2_y5;
								has2 = Math.sqrt(x49 * x49 + y49 * y49) + Math.sqrt(x50 * x50 + y50 * y50) <= view4.height;
								if(view4.shape == 3) {
									has2 = !has2;
								}
							} else {
								var x51 = x40;
								var y51 = y40;
								if(y51 == null) {
									y51 = 0;
								}
								if(x51 == null) {
									x51 = 0;
								}
								var point1_x2 = x51;
								var point1_y2 = y51;
								var x52 = view4.x + view4.width / 2;
								var y52 = view4.y + view4.height / 2;
								if(y52 == null) {
									y52 = 0;
								}
								if(x52 == null) {
									x52 = 0;
								}
								var point2_x2 = x52;
								var point2_y2 = y52;
								var x53 = point2_x2 - point1_x2;
								var y53 = point2_y2 - point1_y2;
								has2 = Math.sqrt(x53 * x53 + y53 * y53) <= view4.width / 2;
								if(view4.shape == 3) {
									has2 = !has2;
								}
							}
							break;
						case 4:
							has2 = Math.abs(x40 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y40 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
							break;
						case 5:
							has2 = !(Math.abs(x40 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y40 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
							break;
						}
						tmp8 = has2;
					}
					if(tmp8) {
						var position7 = (y40 * this1.getUInt16(0) + x40) * 4;
						position7 += vision_ds_Image.OFFSET;
						this1.b[position7] = color >> 24 & 255;
						this1.b[position7 + 1] = color >> 16 & 255;
						this1.b[position7 + 2] = color >> 8 & 255;
						this1.b[position7 + 3] = color & 255;
					}
				} else {
					var position8 = (y40 * this1.getUInt16(0) + x40) * 4;
					position8 += vision_ds_Image.OFFSET;
					this1.b[position8] = color >> 24 & 255;
					this1.b[position8 + 1] = color >> 16 & 255;
					this1.b[position8 + 2] = color >> 8 & 255;
					this1.b[position8 + 3] = color & 255;
				}
			}
		}
		var x54 = v.x;
		var y54 = v.y - 1;
		if(y54 == null) {
			y54 = 0;
		}
		if(x54 == null) {
			x54 = 0;
		}
		var p_x12 = x54;
		var p_y12 = y54;
		var point_x3 = p_x12 | 0;
		var point_y3 = p_y12 | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 994, className : "vision.ds._Image.Image_Impl_", methodName : "fillColor"});
			queue.clear();
		} else {
			var tmp9;
			var tmp10;
			var x55 = point_x3;
			var y55 = point_y3;
			if(x55 >= 0 && y55 >= 0 && x55 < this1.getUInt16(0) && y55 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var x56 = point_x3;
				var y56 = point_y3;
				if(!(x56 >= 0 && y56 >= 0 && x56 < this1.getUInt16(0) && y56 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x6 = x56;
					var this_y6 = y56;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position9 = (y56 * this1.getUInt16(0) + x56) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value3 = this1.b[position9] << 24 | this1.b[position9 + 1] << 16 | this1.b[position9 + 2] << 8 | this1.b[position9 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var this15 = value3;
				tmp10 = this15 == originalColor;
			} else {
				tmp10 = false;
			}
			if(tmp10) {
				var this16 = new haxe__$Int64__$_$_$Int64(point_x3,point_y3);
				tmp9 = explored.indexOf(this16) == -1;
			} else {
				tmp9 = false;
			}
			if(tmp9) {
				++pc;
				var x57 = point_x3;
				var y57 = point_y3;
				if(y57 == null) {
					y57 = 0;
				}
				if(x57 == null) {
					x57 = 0;
				}
				var p_x13 = x57;
				var p_y13 = y57;
				var this17 = new vision_ds__$IntPoint2D_Impl(p_x13 | 0,p_y13 | 0);
				queue.push(this17);
				var x58 = point_x3;
				var y58 = point_y3;
				if(!(x58 >= 0 && y58 >= 0 && x58 < this1.getUInt16(0) && y58 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x7 = x58;
					var this_y7 = y58;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x7,this_y7)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v4 = null;
					var tmp11;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v4 == null) {
						tmp11 = x58 >= 0 && y58 >= 0 && x58 < this1.getUInt16(0) && y58 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has3 = false;
						var view6;
						if(v4 != null) {
							view6 = v4;
						} else {
							var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g11 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this18 = this1.b;
							var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view6 = new vision_ds_ImageView(_g9,_g10,_g11,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this18[view7]);
						}
						switch(view6.shape) {
						case 0:
							has3 = x58 < view6.x + view6.width && y58 < view6.y + view6.height && x58 >= view6.x && y58 >= view6.y;
							break;
						case 1:
							has3 = !(x58 < view6.x + view6.width && y58 < view6.y + view6.height && x58 >= view6.x && y58 >= view6.y);
							break;
						case 2:case 3:
							if(view6.width > view6.height) {
								var a6 = view6.width / 2;
								var b6 = view6.height / 2;
								var c6 = Math.sqrt(a6 * a6 - b6 * b6);
								var x59 = view6.x + view6.width / 2 - c6;
								var y59 = view6.y + view6.height / 2;
								if(y59 == null) {
									y59 = 0;
								}
								if(x59 == null) {
									x59 = 0;
								}
								var f1_x6 = x59;
								var f1_y6 = y59;
								var x60 = view6.x + view6.width / 2 + c6;
								var y60 = view6.y + view6.height / 2;
								if(y60 == null) {
									y60 = 0;
								}
								if(x60 == null) {
									x60 = 0;
								}
								var f2_x6 = x60;
								var f2_y6 = y60;
								var x61 = x58;
								var y61 = y58;
								if(y61 == null) {
									y61 = 0;
								}
								if(x61 == null) {
									x61 = 0;
								}
								var p_x14 = x61;
								var p_y14 = y61;
								var x62 = p_x14 - f1_x6;
								var y62 = p_y14 - f1_y6;
								var x63 = p_x14 - f2_x6;
								var y63 = p_y14 - f2_y6;
								has3 = Math.sqrt(x62 * x62 + y62 * y62) + Math.sqrt(x63 * x63 + y63 * y63) <= view6.width;
								if(view6.shape == 3) {
									has3 = !has3;
								}
							} else if(view6.height > view6.width) {
								var a7 = view6.height / 2;
								var b7 = view6.width / 2;
								var c7 = Math.sqrt(a7 * a7 - b7 * b7);
								var x64 = view6.x + view6.width / 2;
								var y64 = view6.y + view6.height / 2 - c7;
								if(y64 == null) {
									y64 = 0;
								}
								if(x64 == null) {
									x64 = 0;
								}
								var f1_x7 = x64;
								var f1_y7 = y64;
								var x65 = view6.x + view6.width / 2;
								var y65 = view6.y + view6.height / 2 + c7;
								if(y65 == null) {
									y65 = 0;
								}
								if(x65 == null) {
									x65 = 0;
								}
								var f2_x7 = x65;
								var f2_y7 = y65;
								var x66 = x58;
								var y66 = y58;
								if(y66 == null) {
									y66 = 0;
								}
								if(x66 == null) {
									x66 = 0;
								}
								var p_x15 = x66;
								var p_y15 = y66;
								var x67 = p_x15 - f1_x7;
								var y67 = p_y15 - f1_y7;
								var x68 = p_x15 - f2_x7;
								var y68 = p_y15 - f2_y7;
								has3 = Math.sqrt(x67 * x67 + y67 * y67) + Math.sqrt(x68 * x68 + y68 * y68) <= view6.height;
								if(view6.shape == 3) {
									has3 = !has3;
								}
							} else {
								var x69 = x58;
								var y69 = y58;
								if(y69 == null) {
									y69 = 0;
								}
								if(x69 == null) {
									x69 = 0;
								}
								var point1_x3 = x69;
								var point1_y3 = y69;
								var x70 = view6.x + view6.width / 2;
								var y70 = view6.y + view6.height / 2;
								if(y70 == null) {
									y70 = 0;
								}
								if(x70 == null) {
									x70 = 0;
								}
								var point2_x3 = x70;
								var point2_y3 = y70;
								var x71 = point2_x3 - point1_x3;
								var y71 = point2_y3 - point1_y3;
								has3 = Math.sqrt(x71 * x71 + y71 * y71) <= view6.width / 2;
								if(view6.shape == 3) {
									has3 = !has3;
								}
							}
							break;
						case 4:
							has3 = Math.abs(x58 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y58 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
							break;
						case 5:
							has3 = !(Math.abs(x58 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y58 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
							break;
						}
						tmp11 = has3;
					}
					if(tmp11) {
						var position10 = (y58 * this1.getUInt16(0) + x58) * 4;
						position10 += vision_ds_Image.OFFSET;
						this1.b[position10] = color >> 24 & 255;
						this1.b[position10 + 1] = color >> 16 & 255;
						this1.b[position10 + 2] = color >> 8 & 255;
						this1.b[position10 + 3] = color & 255;
					}
				} else {
					var position11 = (y58 * this1.getUInt16(0) + x58) * 4;
					position11 += vision_ds_Image.OFFSET;
					this1.b[position11] = color >> 24 & 255;
					this1.b[position11 + 1] = color >> 16 & 255;
					this1.b[position11 + 2] = color >> 8 & 255;
					this1.b[position11 + 3] = color & 255;
				}
			}
		}
	}
};
vision_ds_Image.fillUntilColor = function(this1,position,color,borderColor) {
	var queue = new haxe_ds_List();
	var x = position.x;
	var y = position.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p_x = x;
	var p_y = y;
	var this2 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
	queue.push(this2);
	var explored = [];
	var pc = 0;
	while(queue.length > 0) {
		var v = queue.pop();
		var this2 = new haxe__$Int64__$_$_$Int64(v.x,v.y);
		explored.push(this2);
		var x = v.x + 1;
		var y = v.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p_x = x;
		var p_y = y;
		var point_x = p_x | 0;
		var point_y = p_y | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 1030, className : "vision.ds._Image.Image_Impl_", methodName : "fillUntilColor"});
			queue.clear();
		} else {
			var x1 = point_x;
			var y1 = point_y;
			if(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var this3 = new haxe__$Int64__$_$_$Int64(point_x,point_y);
				if(explored.indexOf(this3) == -1) {
					var x2 = point_x;
					var y2 = point_y;
					if(!(x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
						var this_x = x2;
						var this_y = y2;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
					}
					var position = (y2 * this1.getUInt16(0) + x2) * 4;
					position += vision_ds_Image.OFFSET;
					var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this4 = value;
					if(this4 != color) {
						var x3 = point_x;
						var y3 = point_y;
						if(!(x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
							var this_x1 = x3;
							var this_y1 = y3;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
						}
						var position1 = (y3 * this1.getUInt16(0) + x3) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = this1.b[position1] << 24 | this1.b[position1 + 1] << 16 | this1.b[position1 + 2] << 8 | this1.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this5 = value1;
						if(this5 != borderColor) {
							++pc;
							var x4 = point_x;
							var y4 = point_y;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var p_x1 = x4;
							var p_y1 = y4;
							var this6 = new vision_ds__$IntPoint2D_Impl(p_x1 | 0,p_y1 | 0);
							queue.push(this6);
							var x5 = point_x;
							var y5 = point_y;
							if(!(x5 >= 0 && y5 >= 0 && x5 < this1.getUInt16(0) && y5 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
								var this_x2 = x5;
								var this_y2 = y5;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
							} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v1 = null;
								var tmp;
								if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
									tmp = x5 >= 0 && y5 >= 0 && x5 < this1.getUInt16(0) && y5 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
								} else {
									var has = false;
									var view;
									if(v1 != null) {
										view = v1;
									} else {
										var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var this7 = this1.b;
										var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this7[view1]);
									}
									switch(view.shape) {
									case 0:
										has = x5 < view.x + view.width && y5 < view.y + view.height && x5 >= view.x && y5 >= view.y;
										break;
									case 1:
										has = !(x5 < view.x + view.width && y5 < view.y + view.height && x5 >= view.x && y5 >= view.y);
										break;
									case 2:case 3:
										if(view.width > view.height) {
											var a = view.width / 2;
											var b = view.height / 2;
											var c = Math.sqrt(a * a - b * b);
											var x6 = view.x + view.width / 2 - c;
											var y6 = view.y + view.height / 2;
											if(y6 == null) {
												y6 = 0;
											}
											if(x6 == null) {
												x6 = 0;
											}
											var f1_x = x6;
											var f1_y = y6;
											var x7 = view.x + view.width / 2 + c;
											var y7 = view.y + view.height / 2;
											if(y7 == null) {
												y7 = 0;
											}
											if(x7 == null) {
												x7 = 0;
											}
											var f2_x = x7;
											var f2_y = y7;
											var x8 = x5;
											var y8 = y5;
											if(y8 == null) {
												y8 = 0;
											}
											if(x8 == null) {
												x8 = 0;
											}
											var p_x2 = x8;
											var p_y2 = y8;
											var x9 = p_x2 - f1_x;
											var y9 = p_y2 - f1_y;
											var x10 = p_x2 - f2_x;
											var y10 = p_y2 - f2_y;
											has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.width;
											if(view.shape == 3) {
												has = !has;
											}
										} else if(view.height > view.width) {
											var a1 = view.height / 2;
											var b1 = view.width / 2;
											var c1 = Math.sqrt(a1 * a1 - b1 * b1);
											var x11 = view.x + view.width / 2;
											var y11 = view.y + view.height / 2 - c1;
											if(y11 == null) {
												y11 = 0;
											}
											if(x11 == null) {
												x11 = 0;
											}
											var f1_x1 = x11;
											var f1_y1 = y11;
											var x12 = view.x + view.width / 2;
											var y12 = view.y + view.height / 2 + c1;
											if(y12 == null) {
												y12 = 0;
											}
											if(x12 == null) {
												x12 = 0;
											}
											var f2_x1 = x12;
											var f2_y1 = y12;
											var x13 = x5;
											var y13 = y5;
											if(y13 == null) {
												y13 = 0;
											}
											if(x13 == null) {
												x13 = 0;
											}
											var p_x3 = x13;
											var p_y3 = y13;
											var x14 = p_x3 - f1_x1;
											var y14 = p_y3 - f1_y1;
											var x15 = p_x3 - f2_x1;
											var y15 = p_y3 - f2_y1;
											has = Math.sqrt(x14 * x14 + y14 * y14) + Math.sqrt(x15 * x15 + y15 * y15) <= view.height;
											if(view.shape == 3) {
												has = !has;
											}
										} else {
											var x16 = x5;
											var y16 = y5;
											if(y16 == null) {
												y16 = 0;
											}
											if(x16 == null) {
												x16 = 0;
											}
											var point1_x = x16;
											var point1_y = y16;
											var x17 = view.x + view.width / 2;
											var y17 = view.y + view.height / 2;
											if(y17 == null) {
												y17 = 0;
											}
											if(x17 == null) {
												x17 = 0;
											}
											var point2_x = x17;
											var point2_y = y17;
											var x18 = point2_x - point1_x;
											var y18 = point2_y - point1_y;
											has = Math.sqrt(x18 * x18 + y18 * y18) <= view.width / 2;
											if(view.shape == 3) {
												has = !has;
											}
										}
										break;
									case 4:
										has = Math.abs(x5 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y5 - view.y - view.height / 2) / (view.height / 2) <= 1;
										break;
									case 5:
										has = !(Math.abs(x5 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y5 - view.y - view.height / 2) / (view.height / 2) <= 1);
										break;
									}
									tmp = has;
								}
								if(tmp) {
									var position2 = (y5 * this1.getUInt16(0) + x5) * 4;
									position2 += vision_ds_Image.OFFSET;
									this1.b[position2] = color >> 24 & 255;
									this1.b[position2 + 1] = color >> 16 & 255;
									this1.b[position2 + 2] = color >> 8 & 255;
									this1.b[position2 + 3] = color & 255;
								}
							} else {
								var position3 = (y5 * this1.getUInt16(0) + x5) * 4;
								position3 += vision_ds_Image.OFFSET;
								this1.b[position3] = color >> 24 & 255;
								this1.b[position3 + 1] = color >> 16 & 255;
								this1.b[position3 + 2] = color >> 8 & 255;
								this1.b[position3 + 3] = color & 255;
							}
						}
					}
				}
			}
		}
		var x19 = v.x;
		var y19 = v.y + 1;
		if(y19 == null) {
			y19 = 0;
		}
		if(x19 == null) {
			x19 = 0;
		}
		var p_x4 = x19;
		var p_y4 = y19;
		var point_x1 = p_x4 | 0;
		var point_y1 = p_y4 | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 1030, className : "vision.ds._Image.Image_Impl_", methodName : "fillUntilColor"});
			queue.clear();
		} else {
			var x20 = point_x1;
			var y20 = point_y1;
			if(x20 >= 0 && y20 >= 0 && x20 < this1.getUInt16(0) && y20 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var this8 = new haxe__$Int64__$_$_$Int64(point_x1,point_y1);
				if(explored.indexOf(this8) == -1) {
					var x21 = point_x1;
					var y21 = point_y1;
					if(!(x21 >= 0 && y21 >= 0 && x21 < this1.getUInt16(0) && y21 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
						var this_x3 = x21;
						var this_y3 = y21;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
					}
					var position4 = (y21 * this1.getUInt16(0) + x21) * 4;
					position4 += vision_ds_Image.OFFSET;
					var value2 = this1.b[position4] << 24 | this1.b[position4 + 1] << 16 | this1.b[position4 + 2] << 8 | this1.b[position4 + 3];
					if(value2 == null) {
						value2 = 0;
					}
					var this9 = value2;
					if(this9 != color) {
						var x22 = point_x1;
						var y22 = point_y1;
						if(!(x22 >= 0 && y22 >= 0 && x22 < this1.getUInt16(0) && y22 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
							var this_x4 = x22;
							var this_y4 = y22;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x4,this_y4)));
						}
						var position5 = (y22 * this1.getUInt16(0) + x22) * 4;
						position5 += vision_ds_Image.OFFSET;
						var value3 = this1.b[position5] << 24 | this1.b[position5 + 1] << 16 | this1.b[position5 + 2] << 8 | this1.b[position5 + 3];
						if(value3 == null) {
							value3 = 0;
						}
						var this10 = value3;
						if(this10 != borderColor) {
							++pc;
							var x23 = point_x1;
							var y23 = point_y1;
							if(y23 == null) {
								y23 = 0;
							}
							if(x23 == null) {
								x23 = 0;
							}
							var p_x5 = x23;
							var p_y5 = y23;
							var this11 = new vision_ds__$IntPoint2D_Impl(p_x5 | 0,p_y5 | 0);
							queue.push(this11);
							var x24 = point_x1;
							var y24 = point_y1;
							if(!(x24 >= 0 && y24 >= 0 && x24 < this1.getUInt16(0) && y24 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
								var this_x5 = x24;
								var this_y5 = y24;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x5,this_y5)));
							} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v2 = null;
								var tmp1;
								if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
									tmp1 = x24 >= 0 && y24 >= 0 && x24 < this1.getUInt16(0) && y24 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
								} else {
									var has1 = false;
									var view2;
									if(v2 != null) {
										view2 = v2;
									} else {
										var _g3 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var this12 = this1.b;
										var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view2 = new vision_ds_ImageView(_g3,_g4,_g5,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this12[view3]);
									}
									switch(view2.shape) {
									case 0:
										has1 = x24 < view2.x + view2.width && y24 < view2.y + view2.height && x24 >= view2.x && y24 >= view2.y;
										break;
									case 1:
										has1 = !(x24 < view2.x + view2.width && y24 < view2.y + view2.height && x24 >= view2.x && y24 >= view2.y);
										break;
									case 2:case 3:
										if(view2.width > view2.height) {
											var a2 = view2.width / 2;
											var b2 = view2.height / 2;
											var c2 = Math.sqrt(a2 * a2 - b2 * b2);
											var x25 = view2.x + view2.width / 2 - c2;
											var y25 = view2.y + view2.height / 2;
											if(y25 == null) {
												y25 = 0;
											}
											if(x25 == null) {
												x25 = 0;
											}
											var f1_x2 = x25;
											var f1_y2 = y25;
											var x26 = view2.x + view2.width / 2 + c2;
											var y26 = view2.y + view2.height / 2;
											if(y26 == null) {
												y26 = 0;
											}
											if(x26 == null) {
												x26 = 0;
											}
											var f2_x2 = x26;
											var f2_y2 = y26;
											var x27 = x24;
											var y27 = y24;
											if(y27 == null) {
												y27 = 0;
											}
											if(x27 == null) {
												x27 = 0;
											}
											var p_x6 = x27;
											var p_y6 = y27;
											var x28 = p_x6 - f1_x2;
											var y28 = p_y6 - f1_y2;
											var x29 = p_x6 - f2_x2;
											var y29 = p_y6 - f2_y2;
											has1 = Math.sqrt(x28 * x28 + y28 * y28) + Math.sqrt(x29 * x29 + y29 * y29) <= view2.width;
											if(view2.shape == 3) {
												has1 = !has1;
											}
										} else if(view2.height > view2.width) {
											var a3 = view2.height / 2;
											var b3 = view2.width / 2;
											var c3 = Math.sqrt(a3 * a3 - b3 * b3);
											var x30 = view2.x + view2.width / 2;
											var y30 = view2.y + view2.height / 2 - c3;
											if(y30 == null) {
												y30 = 0;
											}
											if(x30 == null) {
												x30 = 0;
											}
											var f1_x3 = x30;
											var f1_y3 = y30;
											var x31 = view2.x + view2.width / 2;
											var y31 = view2.y + view2.height / 2 + c3;
											if(y31 == null) {
												y31 = 0;
											}
											if(x31 == null) {
												x31 = 0;
											}
											var f2_x3 = x31;
											var f2_y3 = y31;
											var x32 = x24;
											var y32 = y24;
											if(y32 == null) {
												y32 = 0;
											}
											if(x32 == null) {
												x32 = 0;
											}
											var p_x7 = x32;
											var p_y7 = y32;
											var x33 = p_x7 - f1_x3;
											var y33 = p_y7 - f1_y3;
											var x34 = p_x7 - f2_x3;
											var y34 = p_y7 - f2_y3;
											has1 = Math.sqrt(x33 * x33 + y33 * y33) + Math.sqrt(x34 * x34 + y34 * y34) <= view2.height;
											if(view2.shape == 3) {
												has1 = !has1;
											}
										} else {
											var x35 = x24;
											var y35 = y24;
											if(y35 == null) {
												y35 = 0;
											}
											if(x35 == null) {
												x35 = 0;
											}
											var point1_x1 = x35;
											var point1_y1 = y35;
											var x36 = view2.x + view2.width / 2;
											var y36 = view2.y + view2.height / 2;
											if(y36 == null) {
												y36 = 0;
											}
											if(x36 == null) {
												x36 = 0;
											}
											var point2_x1 = x36;
											var point2_y1 = y36;
											var x37 = point2_x1 - point1_x1;
											var y37 = point2_y1 - point1_y1;
											has1 = Math.sqrt(x37 * x37 + y37 * y37) <= view2.width / 2;
											if(view2.shape == 3) {
												has1 = !has1;
											}
										}
										break;
									case 4:
										has1 = Math.abs(x24 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y24 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
										break;
									case 5:
										has1 = !(Math.abs(x24 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y24 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
										break;
									}
									tmp1 = has1;
								}
								if(tmp1) {
									var position6 = (y24 * this1.getUInt16(0) + x24) * 4;
									position6 += vision_ds_Image.OFFSET;
									this1.b[position6] = color >> 24 & 255;
									this1.b[position6 + 1] = color >> 16 & 255;
									this1.b[position6 + 2] = color >> 8 & 255;
									this1.b[position6 + 3] = color & 255;
								}
							} else {
								var position7 = (y24 * this1.getUInt16(0) + x24) * 4;
								position7 += vision_ds_Image.OFFSET;
								this1.b[position7] = color >> 24 & 255;
								this1.b[position7 + 1] = color >> 16 & 255;
								this1.b[position7 + 2] = color >> 8 & 255;
								this1.b[position7 + 3] = color & 255;
							}
						}
					}
				}
			}
		}
		var x38 = v.x - 1;
		var y38 = v.y;
		if(y38 == null) {
			y38 = 0;
		}
		if(x38 == null) {
			x38 = 0;
		}
		var p_x8 = x38;
		var p_y8 = y38;
		var point_x2 = p_x8 | 0;
		var point_y2 = p_y8 | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 1030, className : "vision.ds._Image.Image_Impl_", methodName : "fillUntilColor"});
			queue.clear();
		} else {
			var x39 = point_x2;
			var y39 = point_y2;
			if(x39 >= 0 && y39 >= 0 && x39 < this1.getUInt16(0) && y39 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var this13 = new haxe__$Int64__$_$_$Int64(point_x2,point_y2);
				if(explored.indexOf(this13) == -1) {
					var x40 = point_x2;
					var y40 = point_y2;
					if(!(x40 >= 0 && y40 >= 0 && x40 < this1.getUInt16(0) && y40 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
						var this_x6 = x40;
						var this_y6 = y40;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x6,this_y6)));
					}
					var position8 = (y40 * this1.getUInt16(0) + x40) * 4;
					position8 += vision_ds_Image.OFFSET;
					var value4 = this1.b[position8] << 24 | this1.b[position8 + 1] << 16 | this1.b[position8 + 2] << 8 | this1.b[position8 + 3];
					if(value4 == null) {
						value4 = 0;
					}
					var this14 = value4;
					if(this14 != color) {
						var x41 = point_x2;
						var y41 = point_y2;
						if(!(x41 >= 0 && y41 >= 0 && x41 < this1.getUInt16(0) && y41 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
							var this_x7 = x41;
							var this_y7 = y41;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x7,this_y7)));
						}
						var position9 = (y41 * this1.getUInt16(0) + x41) * 4;
						position9 += vision_ds_Image.OFFSET;
						var value5 = this1.b[position9] << 24 | this1.b[position9 + 1] << 16 | this1.b[position9 + 2] << 8 | this1.b[position9 + 3];
						if(value5 == null) {
							value5 = 0;
						}
						var this15 = value5;
						if(this15 != borderColor) {
							++pc;
							var x42 = point_x2;
							var y42 = point_y2;
							if(y42 == null) {
								y42 = 0;
							}
							if(x42 == null) {
								x42 = 0;
							}
							var p_x9 = x42;
							var p_y9 = y42;
							var this16 = new vision_ds__$IntPoint2D_Impl(p_x9 | 0,p_y9 | 0);
							queue.push(this16);
							var x43 = point_x2;
							var y43 = point_y2;
							if(!(x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
								var this_x8 = x43;
								var this_y8 = y43;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x8,this_y8)));
							} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v3 = null;
								var tmp2;
								if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
									tmp2 = x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
								} else {
									var has2 = false;
									var view4;
									if(v3 != null) {
										view4 = v3;
									} else {
										var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var this17 = this1.b;
										var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view4 = new vision_ds_ImageView(_g6,_g7,_g8,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this17[view5]);
									}
									switch(view4.shape) {
									case 0:
										has2 = x43 < view4.x + view4.width && y43 < view4.y + view4.height && x43 >= view4.x && y43 >= view4.y;
										break;
									case 1:
										has2 = !(x43 < view4.x + view4.width && y43 < view4.y + view4.height && x43 >= view4.x && y43 >= view4.y);
										break;
									case 2:case 3:
										if(view4.width > view4.height) {
											var a4 = view4.width / 2;
											var b4 = view4.height / 2;
											var c4 = Math.sqrt(a4 * a4 - b4 * b4);
											var x44 = view4.x + view4.width / 2 - c4;
											var y44 = view4.y + view4.height / 2;
											if(y44 == null) {
												y44 = 0;
											}
											if(x44 == null) {
												x44 = 0;
											}
											var f1_x4 = x44;
											var f1_y4 = y44;
											var x45 = view4.x + view4.width / 2 + c4;
											var y45 = view4.y + view4.height / 2;
											if(y45 == null) {
												y45 = 0;
											}
											if(x45 == null) {
												x45 = 0;
											}
											var f2_x4 = x45;
											var f2_y4 = y45;
											var x46 = x43;
											var y46 = y43;
											if(y46 == null) {
												y46 = 0;
											}
											if(x46 == null) {
												x46 = 0;
											}
											var p_x10 = x46;
											var p_y10 = y46;
											var x47 = p_x10 - f1_x4;
											var y47 = p_y10 - f1_y4;
											var x48 = p_x10 - f2_x4;
											var y48 = p_y10 - f2_y4;
											has2 = Math.sqrt(x47 * x47 + y47 * y47) + Math.sqrt(x48 * x48 + y48 * y48) <= view4.width;
											if(view4.shape == 3) {
												has2 = !has2;
											}
										} else if(view4.height > view4.width) {
											var a5 = view4.height / 2;
											var b5 = view4.width / 2;
											var c5 = Math.sqrt(a5 * a5 - b5 * b5);
											var x49 = view4.x + view4.width / 2;
											var y49 = view4.y + view4.height / 2 - c5;
											if(y49 == null) {
												y49 = 0;
											}
											if(x49 == null) {
												x49 = 0;
											}
											var f1_x5 = x49;
											var f1_y5 = y49;
											var x50 = view4.x + view4.width / 2;
											var y50 = view4.y + view4.height / 2 + c5;
											if(y50 == null) {
												y50 = 0;
											}
											if(x50 == null) {
												x50 = 0;
											}
											var f2_x5 = x50;
											var f2_y5 = y50;
											var x51 = x43;
											var y51 = y43;
											if(y51 == null) {
												y51 = 0;
											}
											if(x51 == null) {
												x51 = 0;
											}
											var p_x11 = x51;
											var p_y11 = y51;
											var x52 = p_x11 - f1_x5;
											var y52 = p_y11 - f1_y5;
											var x53 = p_x11 - f2_x5;
											var y53 = p_y11 - f2_y5;
											has2 = Math.sqrt(x52 * x52 + y52 * y52) + Math.sqrt(x53 * x53 + y53 * y53) <= view4.height;
											if(view4.shape == 3) {
												has2 = !has2;
											}
										} else {
											var x54 = x43;
											var y54 = y43;
											if(y54 == null) {
												y54 = 0;
											}
											if(x54 == null) {
												x54 = 0;
											}
											var point1_x2 = x54;
											var point1_y2 = y54;
											var x55 = view4.x + view4.width / 2;
											var y55 = view4.y + view4.height / 2;
											if(y55 == null) {
												y55 = 0;
											}
											if(x55 == null) {
												x55 = 0;
											}
											var point2_x2 = x55;
											var point2_y2 = y55;
											var x56 = point2_x2 - point1_x2;
											var y56 = point2_y2 - point1_y2;
											has2 = Math.sqrt(x56 * x56 + y56 * y56) <= view4.width / 2;
											if(view4.shape == 3) {
												has2 = !has2;
											}
										}
										break;
									case 4:
										has2 = Math.abs(x43 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y43 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
										break;
									case 5:
										has2 = !(Math.abs(x43 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y43 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
										break;
									}
									tmp2 = has2;
								}
								if(tmp2) {
									var position10 = (y43 * this1.getUInt16(0) + x43) * 4;
									position10 += vision_ds_Image.OFFSET;
									this1.b[position10] = color >> 24 & 255;
									this1.b[position10 + 1] = color >> 16 & 255;
									this1.b[position10 + 2] = color >> 8 & 255;
									this1.b[position10 + 3] = color & 255;
								}
							} else {
								var position11 = (y43 * this1.getUInt16(0) + x43) * 4;
								position11 += vision_ds_Image.OFFSET;
								this1.b[position11] = color >> 24 & 255;
								this1.b[position11 + 1] = color >> 16 & 255;
								this1.b[position11 + 2] = color >> 8 & 255;
								this1.b[position11 + 3] = color & 255;
							}
						}
					}
				}
			}
		}
		var x57 = v.x;
		var y57 = v.y - 1;
		if(y57 == null) {
			y57 = 0;
		}
		if(x57 == null) {
			x57 = 0;
		}
		var p_x12 = x57;
		var p_y12 = y57;
		var point_x3 = p_x12 | 0;
		var point_y3 = p_y12 | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 1030, className : "vision.ds._Image.Image_Impl_", methodName : "fillUntilColor"});
			queue.clear();
		} else {
			var x58 = point_x3;
			var y58 = point_y3;
			if(x58 >= 0 && y58 >= 0 && x58 < this1.getUInt16(0) && y58 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var this18 = new haxe__$Int64__$_$_$Int64(point_x3,point_y3);
				if(explored.indexOf(this18) == -1) {
					var x59 = point_x3;
					var y59 = point_y3;
					if(!(x59 >= 0 && y59 >= 0 && x59 < this1.getUInt16(0) && y59 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
						var this_x9 = x59;
						var this_y9 = y59;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x9,this_y9)));
					}
					var position12 = (y59 * this1.getUInt16(0) + x59) * 4;
					position12 += vision_ds_Image.OFFSET;
					var value6 = this1.b[position12] << 24 | this1.b[position12 + 1] << 16 | this1.b[position12 + 2] << 8 | this1.b[position12 + 3];
					if(value6 == null) {
						value6 = 0;
					}
					var this19 = value6;
					if(this19 != color) {
						var x60 = point_x3;
						var y60 = point_y3;
						if(!(x60 >= 0 && y60 >= 0 && x60 < this1.getUInt16(0) && y60 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
							var this_x10 = x60;
							var this_y10 = y60;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x10,this_y10)));
						}
						var position13 = (y60 * this1.getUInt16(0) + x60) * 4;
						position13 += vision_ds_Image.OFFSET;
						var value7 = this1.b[position13] << 24 | this1.b[position13 + 1] << 16 | this1.b[position13 + 2] << 8 | this1.b[position13 + 3];
						if(value7 == null) {
							value7 = 0;
						}
						var this20 = value7;
						if(this20 != borderColor) {
							++pc;
							var x61 = point_x3;
							var y61 = point_y3;
							if(y61 == null) {
								y61 = 0;
							}
							if(x61 == null) {
								x61 = 0;
							}
							var p_x13 = x61;
							var p_y13 = y61;
							var this21 = new vision_ds__$IntPoint2D_Impl(p_x13 | 0,p_y13 | 0);
							queue.push(this21);
							var x62 = point_x3;
							var y62 = point_y3;
							if(!(x62 >= 0 && y62 >= 0 && x62 < this1.getUInt16(0) && y62 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
								var this_x11 = x62;
								var this_y11 = y62;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x11,this_y11)));
							} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v4 = null;
								var tmp3;
								if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v4 == null) {
									tmp3 = x62 >= 0 && y62 >= 0 && x62 < this1.getUInt16(0) && y62 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
								} else {
									var has3 = false;
									var view6;
									if(v4 != null) {
										view6 = v4;
									} else {
										var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g11 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var this22 = this1.b;
										var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view6 = new vision_ds_ImageView(_g9,_g10,_g11,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this22[view7]);
									}
									switch(view6.shape) {
									case 0:
										has3 = x62 < view6.x + view6.width && y62 < view6.y + view6.height && x62 >= view6.x && y62 >= view6.y;
										break;
									case 1:
										has3 = !(x62 < view6.x + view6.width && y62 < view6.y + view6.height && x62 >= view6.x && y62 >= view6.y);
										break;
									case 2:case 3:
										if(view6.width > view6.height) {
											var a6 = view6.width / 2;
											var b6 = view6.height / 2;
											var c6 = Math.sqrt(a6 * a6 - b6 * b6);
											var x63 = view6.x + view6.width / 2 - c6;
											var y63 = view6.y + view6.height / 2;
											if(y63 == null) {
												y63 = 0;
											}
											if(x63 == null) {
												x63 = 0;
											}
											var f1_x6 = x63;
											var f1_y6 = y63;
											var x64 = view6.x + view6.width / 2 + c6;
											var y64 = view6.y + view6.height / 2;
											if(y64 == null) {
												y64 = 0;
											}
											if(x64 == null) {
												x64 = 0;
											}
											var f2_x6 = x64;
											var f2_y6 = y64;
											var x65 = x62;
											var y65 = y62;
											if(y65 == null) {
												y65 = 0;
											}
											if(x65 == null) {
												x65 = 0;
											}
											var p_x14 = x65;
											var p_y14 = y65;
											var x66 = p_x14 - f1_x6;
											var y66 = p_y14 - f1_y6;
											var x67 = p_x14 - f2_x6;
											var y67 = p_y14 - f2_y6;
											has3 = Math.sqrt(x66 * x66 + y66 * y66) + Math.sqrt(x67 * x67 + y67 * y67) <= view6.width;
											if(view6.shape == 3) {
												has3 = !has3;
											}
										} else if(view6.height > view6.width) {
											var a7 = view6.height / 2;
											var b7 = view6.width / 2;
											var c7 = Math.sqrt(a7 * a7 - b7 * b7);
											var x68 = view6.x + view6.width / 2;
											var y68 = view6.y + view6.height / 2 - c7;
											if(y68 == null) {
												y68 = 0;
											}
											if(x68 == null) {
												x68 = 0;
											}
											var f1_x7 = x68;
											var f1_y7 = y68;
											var x69 = view6.x + view6.width / 2;
											var y69 = view6.y + view6.height / 2 + c7;
											if(y69 == null) {
												y69 = 0;
											}
											if(x69 == null) {
												x69 = 0;
											}
											var f2_x7 = x69;
											var f2_y7 = y69;
											var x70 = x62;
											var y70 = y62;
											if(y70 == null) {
												y70 = 0;
											}
											if(x70 == null) {
												x70 = 0;
											}
											var p_x15 = x70;
											var p_y15 = y70;
											var x71 = p_x15 - f1_x7;
											var y71 = p_y15 - f1_y7;
											var x72 = p_x15 - f2_x7;
											var y72 = p_y15 - f2_y7;
											has3 = Math.sqrt(x71 * x71 + y71 * y71) + Math.sqrt(x72 * x72 + y72 * y72) <= view6.height;
											if(view6.shape == 3) {
												has3 = !has3;
											}
										} else {
											var x73 = x62;
											var y73 = y62;
											if(y73 == null) {
												y73 = 0;
											}
											if(x73 == null) {
												x73 = 0;
											}
											var point1_x3 = x73;
											var point1_y3 = y73;
											var x74 = view6.x + view6.width / 2;
											var y74 = view6.y + view6.height / 2;
											if(y74 == null) {
												y74 = 0;
											}
											if(x74 == null) {
												x74 = 0;
											}
											var point2_x3 = x74;
											var point2_y3 = y74;
											var x75 = point2_x3 - point1_x3;
											var y75 = point2_y3 - point1_y3;
											has3 = Math.sqrt(x75 * x75 + y75 * y75) <= view6.width / 2;
											if(view6.shape == 3) {
												has3 = !has3;
											}
										}
										break;
									case 4:
										has3 = Math.abs(x62 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y62 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
										break;
									case 5:
										has3 = !(Math.abs(x62 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y62 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
										break;
									}
									tmp3 = has3;
								}
								if(tmp3) {
									var position14 = (y62 * this1.getUInt16(0) + x62) * 4;
									position14 += vision_ds_Image.OFFSET;
									this1.b[position14] = color >> 24 & 255;
									this1.b[position14 + 1] = color >> 16 & 255;
									this1.b[position14 + 2] = color >> 8 & 255;
									this1.b[position14 + 3] = color & 255;
								}
							} else {
								var position15 = (y62 * this1.getUInt16(0) + x62) * 4;
								position15 += vision_ds_Image.OFFSET;
								this1.b[position15] = color >> 24 & 255;
								this1.b[position15 + 1] = color >> 16 & 255;
								this1.b[position15 + 2] = color >> 8 & 255;
								this1.b[position15 + 3] = color & 255;
							}
						}
					}
				}
			}
		}
	}
};
vision_ds_Image.clone = function(this1) {
	if(this1 == null) {
		haxe_Log.trace("Warning: Cloning a null image",{ fileName : "vision/ds/Image.hx", lineNumber : 1065, className : "vision.ds._Image.Image_Impl_", methodName : "clone"});
	}
	return this1.sub(0,this1.length);
};
vision_ds_Image.mirror = function(this1) {
	var inter = vision_ds_Image.clone(this1);
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this2 = value;
				var color = this2;
				var x1 = inter.getUInt16(0) - x - 1;
				var position1 = (y * inter.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this3 = value1;
				var color1 = this3;
				var position2 = (y * this1.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color1 >> 24 & 255;
				this1.b[position2 + 1] = color1 >> 16 & 255;
				this1.b[position2 + 2] = color1 >> 8 & 255;
				this1.b[position2 + 3] = color1 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this3 = value;
					var color = this3;
					var x14 = inter.getUInt16(0) - x - 1;
					var position1 = (y * inter.getUInt16(0) + x14) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this4 = value1;
					var color1 = this4;
					var position2 = (y * this1.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					this1.b[position2] = color1 >> 24 & 255;
					this1.b[position2 + 1] = color1 >> 16 & 255;
					this1.b[position2 + 2] = color1 >> 8 & 255;
					this1.b[position2 + 3] = color1 & 255;
				}
			}
		}
	}
	return this1;
};
vision_ds_Image.flip = function(this1) {
	var inter = vision_ds_Image.clone(this1);
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this2 = value;
				var color = this2;
				var position1 = ((Math.ceil((inter.length - vision_ds_Image.OFFSET) / (inter.getUInt16(0) * 4)) - y - 1) * inter.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this3 = value1;
				var color1 = this3;
				var position2 = (y * this1.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color1 >> 24 & 255;
				this1.b[position2 + 1] = color1 >> 16 & 255;
				this1.b[position2 + 2] = color1 >> 8 & 255;
				this1.b[position2 + 3] = color1 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this3 = value;
					var color = this3;
					var position1 = ((Math.ceil((inter.length - vision_ds_Image.OFFSET) / (inter.getUInt16(0) * 4)) - y - 1) * inter.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this4 = value1;
					var color1 = this4;
					var position2 = (y * this1.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					this1.b[position2] = color1 >> 24 & 255;
					this1.b[position2 + 1] = color1 >> 16 & 255;
					this1.b[position2 + 2] = color1 >> 8 & 255;
					this1.b[position2 + 3] = color1 & 255;
				}
			}
		}
	}
	return this1;
};
vision_ds_Image.stamp = function(this1,X,Y,image) {
	var _g = X;
	var _g1 = X + image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = Y;
		var _g3 = Y + Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = ((y - Y) * image.getUInt16(0) + (x - X)) * 4;
			position += vision_ds_Image.OFFSET;
			var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			var color = this2;
			if(x < 0 || x >= this1.getUInt16(0) || y < 0 || y >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if((color >> 24 & 255) / 255 == 1) {
				if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this3 = this1.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x1 = view.x + view.width / 2 - c;
								var y1 = view.y + view.height / 2;
								if(y1 == null) {
									y1 = 0;
								}
								if(x1 == null) {
									x1 = 0;
								}
								var f1_x = x1;
								var f1_y = y1;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x3 = x;
								var y3 = y;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var p_x = x3;
								var p_y = y3;
								var x4 = p_x - f1_x;
								var y4 = p_y - f1_y;
								var x5 = p_x - f2_x;
								var y5 = p_y - f2_y;
								has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x6 = view.x + view.width / 2;
								var y6 = view.y + view.height / 2 - c1;
								if(y6 == null) {
									y6 = 0;
								}
								if(x6 == null) {
									x6 = 0;
								}
								var f1_x1 = x6;
								var f1_y1 = y6;
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 + c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f2_x1 = x7;
								var f2_y1 = y7;
								var x8 = x;
								var y8 = y;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var p_x1 = x8;
								var p_y1 = y8;
								var x9 = p_x1 - f1_x1;
								var y9 = p_y1 - f1_y1;
								var x10 = p_x1 - f2_x1;
								var y10 = p_y1 - f2_y1;
								has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x11 = x;
								var y11 = y;
								if(y11 == null) {
									y11 = 0;
								}
								if(x11 == null) {
									x11 = 0;
								}
								var point1_x = x11;
								var point1_y = y11;
								var x12 = view.x + view.width / 2;
								var y12 = view.y + view.height / 2;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var point2_x = x12;
								var point2_y = y12;
								var x13 = point2_x - point1_x;
								var y13 = point2_y - point1_y;
								has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position1 = (y * this1.getUInt16(0) + x) * 4;
						position1 += vision_ds_Image.OFFSET;
						this1.b[position1] = color >> 24 & 255;
						this1.b[position1 + 1] = color >> 16 & 255;
						this1.b[position1 + 2] = color >> 8 & 255;
						this1.b[position1 + 3] = color & 255;
					}
				} else {
					var position2 = (y * this1.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					this1.b[position2] = color >> 24 & 255;
					this1.b[position2 + 1] = color >> 16 & 255;
					this1.b[position2 + 2] = color >> 8 & 255;
					this1.b[position2 + 3] = color & 255;
				}
			} else {
				if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x2 = x;
					var this_y2 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position3 = (y * this1.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value1 = this1.b[position3] << 24 | this1.b[position3 + 1] << 16 | this1.b[position3 + 2] << 8 | this1.b[position3 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this4 = value1;
				var oldColor = this4;
				var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
				var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
				var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
				var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
				if(Alpha == null) {
					Alpha = 1;
				}
				var this5 = 0;
				var color1 = this5;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value2 = Math.round(Red * 255);
				color1 &= -16711681;
				color1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
				var value3 = Math.round(Green * 255);
				color1 &= -65281;
				color1 |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 8;
				var value4 = Math.round(Blue * 255);
				color1 &= -256;
				color1 |= value4 > 255 ? 255 : value4 < 0 ? 0 : value4;
				var value5 = Math.round(Alpha1 * 255);
				color1 &= 16777215;
				color1 |= (value5 > 255 ? 255 : value5 < 0 ? 0 : value5) << 24;
				var newColor = color1;
				if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x3 = x;
					var this_y3 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v1 = null;
					var tmp1;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
						tmp1 = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has1 = false;
						var view2;
						if(v1 != null) {
							view2 = v1;
						} else {
							var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this6 = this1.b;
							var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view2 = new vision_ds_ImageView(_g7,_g8,_g9,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this6[view3]);
						}
						switch(view2.shape) {
						case 0:
							has1 = x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y;
							break;
						case 1:
							has1 = !(x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y);
							break;
						case 2:case 3:
							if(view2.width > view2.height) {
								var a2 = view2.width / 2;
								var b2 = view2.height / 2;
								var c2 = Math.sqrt(a2 * a2 - b2 * b2);
								var x14 = view2.x + view2.width / 2 - c2;
								var y14 = view2.y + view2.height / 2;
								if(y14 == null) {
									y14 = 0;
								}
								if(x14 == null) {
									x14 = 0;
								}
								var f1_x2 = x14;
								var f1_y2 = y14;
								var x15 = view2.x + view2.width / 2 + c2;
								var y15 = view2.y + view2.height / 2;
								if(y15 == null) {
									y15 = 0;
								}
								if(x15 == null) {
									x15 = 0;
								}
								var f2_x2 = x15;
								var f2_y2 = y15;
								var x16 = x;
								var y16 = y;
								if(y16 == null) {
									y16 = 0;
								}
								if(x16 == null) {
									x16 = 0;
								}
								var p_x2 = x16;
								var p_y2 = y16;
								var x17 = p_x2 - f1_x2;
								var y17 = p_y2 - f1_y2;
								var x18 = p_x2 - f2_x2;
								var y18 = p_y2 - f2_y2;
								has1 = Math.sqrt(x17 * x17 + y17 * y17) + Math.sqrt(x18 * x18 + y18 * y18) <= view2.width;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else if(view2.height > view2.width) {
								var a3 = view2.height / 2;
								var b3 = view2.width / 2;
								var c3 = Math.sqrt(a3 * a3 - b3 * b3);
								var x19 = view2.x + view2.width / 2;
								var y19 = view2.y + view2.height / 2 - c3;
								if(y19 == null) {
									y19 = 0;
								}
								if(x19 == null) {
									x19 = 0;
								}
								var f1_x3 = x19;
								var f1_y3 = y19;
								var x20 = view2.x + view2.width / 2;
								var y20 = view2.y + view2.height / 2 + c3;
								if(y20 == null) {
									y20 = 0;
								}
								if(x20 == null) {
									x20 = 0;
								}
								var f2_x3 = x20;
								var f2_y3 = y20;
								var x21 = x;
								var y21 = y;
								if(y21 == null) {
									y21 = 0;
								}
								if(x21 == null) {
									x21 = 0;
								}
								var p_x3 = x21;
								var p_y3 = y21;
								var x22 = p_x3 - f1_x3;
								var y22 = p_y3 - f1_y3;
								var x23 = p_x3 - f2_x3;
								var y23 = p_y3 - f2_y3;
								has1 = Math.sqrt(x22 * x22 + y22 * y22) + Math.sqrt(x23 * x23 + y23 * y23) <= view2.height;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else {
								var x24 = x;
								var y24 = y;
								if(y24 == null) {
									y24 = 0;
								}
								if(x24 == null) {
									x24 = 0;
								}
								var point1_x1 = x24;
								var point1_y1 = y24;
								var x25 = view2.x + view2.width / 2;
								var y25 = view2.y + view2.height / 2;
								if(y25 == null) {
									y25 = 0;
								}
								if(x25 == null) {
									x25 = 0;
								}
								var point2_x1 = x25;
								var point2_y1 = y25;
								var x26 = point2_x1 - point1_x1;
								var y26 = point2_y1 - point1_y1;
								has1 = Math.sqrt(x26 * x26 + y26 * y26) <= view2.width / 2;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							}
							break;
						case 4:
							has1 = Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
							break;
						case 5:
							has1 = !(Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
							break;
						}
						tmp1 = has1;
					}
					if(tmp1) {
						var position4 = (y * this1.getUInt16(0) + x) * 4;
						position4 += vision_ds_Image.OFFSET;
						this1.b[position4] = newColor >> 24 & 255;
						this1.b[position4 + 1] = newColor >> 16 & 255;
						this1.b[position4 + 2] = newColor >> 8 & 255;
						this1.b[position4 + 3] = newColor & 255;
					}
				} else {
					var position5 = (y * this1.getUInt16(0) + x) * 4;
					position5 += vision_ds_Image.OFFSET;
					this1.b[position5] = newColor >> 24 & 255;
					this1.b[position5 + 1] = newColor >> 16 & 255;
					this1.b[position5 + 2] = newColor >> 8 & 255;
					this1.b[position5 + 3] = newColor & 255;
				}
			}
		}
	}
	return this1;
};
vision_ds_Image.resize = function(this1,newWidth,newHeight,algorithm) {
	if(newHeight == null) {
		newHeight = -1;
	}
	if(newWidth == null) {
		newWidth = -1;
	}
	if(newWidth == -1 && newHeight == -1) {
		return this1;
	}
	if(newWidth == -1) {
		newWidth = newHeight / Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) * this1.getUInt16(0) | 0;
	} else if(newHeight == -1) {
		newHeight = newWidth / this1.getUInt16(0) * Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) | 0;
	}
	haxe_Log.trace(newWidth,{ fileName : "vision/ds/Image.hx", lineNumber : 1123, className : "vision.ds._Image.Image_Impl_", methodName : "resize", customParams : [newHeight]});
	if(algorithm == null) {
		algorithm = vision_tools_ImageTools.defaultResizeAlgorithm;
	}
	switch(algorithm) {
	case 0:
		var this2 = new haxe_io_Bytes(new ArrayBuffer(newWidth * newHeight * 4 + vision_ds_Image.OFFSET));
		var this3 = this2;
		this3.setUInt16(0,newWidth);
		this3.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
		this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
		this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,newWidth);
		this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,newHeight);
		this3.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
		var i = vision_ds_Image.OFFSET;
		while(i < this3.length) {
			this3.b[i] = 0;
			this3.b[i + 1] = 0;
			this3.b[i + 2] = 0;
			this3.b[i + 3] = 0;
			i += 4;
		}
		var image = this3;
		var xMultiplier = this1.getUInt16(0) / image.getUInt16(0);
		var yMultiplier = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) / Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this2 = value;
				var color = this2;
				var x1 = Math.floor(x * xMultiplier);
				var y1 = Math.floor(y * yMultiplier);
				if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
				}
				var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = this1.b[position1] << 24 | this1.b[position1 + 1] << 16 | this1.b[position1 + 2] << 8 | this1.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this3 = value1;
				var color1 = this3;
				if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var image1 = image.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x3 = view.x + view.width / 2 + c;
								var y3 = view.y + view.height / 2;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var f2_x = x3;
								var f2_y = y3;
								var x4 = x;
								var y4 = y;
								if(y4 == null) {
									y4 = 0;
								}
								if(x4 == null) {
									x4 = 0;
								}
								var p_x = x4;
								var p_y = y4;
								var x5 = p_x - f1_x;
								var y5 = p_y - f1_y;
								var x6 = p_x - f2_x;
								var y6 = p_y - f2_y;
								has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 - c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f1_x1 = x7;
								var f1_y1 = y7;
								var x8 = view.x + view.width / 2;
								var y8 = view.y + view.height / 2 + c1;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var f2_x1 = x8;
								var f2_y1 = y8;
								var x9 = x;
								var y9 = y;
								if(y9 == null) {
									y9 = 0;
								}
								if(x9 == null) {
									x9 = 0;
								}
								var p_x1 = x9;
								var p_y1 = y9;
								var x10 = p_x1 - f1_x1;
								var y10 = p_y1 - f1_y1;
								var x11 = p_x1 - f2_x1;
								var y11 = p_y1 - f2_y1;
								has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x12 = x;
								var y12 = y;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var point1_x = x12;
								var point1_y = y12;
								var x13 = view.x + view.width / 2;
								var y13 = view.y + view.height / 2;
								if(y13 == null) {
									y13 = 0;
								}
								if(x13 == null) {
									x13 = 0;
								}
								var point2_x = x13;
								var point2_y = y13;
								var x14 = point2_x - point1_x;
								var y14 = point2_y - point1_y;
								has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position2 = (y * image.getUInt16(0) + x) * 4;
						position2 += vision_ds_Image.OFFSET;
						image.b[position2] = color1 >> 24 & 255;
						image.b[position2 + 1] = color1 >> 16 & 255;
						image.b[position2 + 2] = color1 >> 8 & 255;
						image.b[position2 + 3] = color1 & 255;
					}
				} else {
					var position3 = (y * image.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					image.b[position3] = color1 >> 24 & 255;
					image.b[position3 + 1] = color1 >> 16 & 255;
					image.b[position3 + 2] = color1 >> 8 & 255;
					image.b[position3 + 3] = color1 & 255;
				}
			}
		}
		this1 = image;
		break;
	case 1:
		this1 = vision_algorithms_BilinearInterpolation.interpolate(this1,newWidth,newHeight);
		break;
	case 2:
		throw haxe_Exception.thrown(new vision_exceptions_Unimplemented("Bicubic Interpolation"));
	}
	return this1;
};
vision_ds_Image.toString = function(this1,special) {
	if(special == null) {
		special = true;
	}
	if(!special) {
		return Std.string(this1);
	}
	var s = "\n";
	var prevY = 0;
	var _g = 0;
	var _g1 = this1.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			if(prevY != y) {
				prevY = y;
				s += "\n";
			}
			s += vision_ds_Color.toString(this2);
		}
	}
	return s;
};
vision_ds_Image.forEachPixel = function(this1,callback) {
	var _g = 0;
	var _g1 = this1.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			callback(x,y,this2);
		}
	}
};
vision_ds_Image.forEachPixelInView = function(this1,callback) {
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this2 = value;
				callback(x,y,this2);
			}
		}
		return;
	}
	var _g = 0;
	var _g1 = this1.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2 - c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x2 = view.x + view.width / 2 + c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f2_x = x2;
						var f2_y = y2;
						var x3 = x;
						var y3 = y;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var p_x = x3;
						var p_y = y3;
						var x4 = p_x - f1_x;
						var y4 = p_y - f1_y;
						var x5 = p_x - f2_x;
						var y5 = p_y - f2_y;
						has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x6 = view.x + view.width / 2;
						var y6 = view.y + view.height / 2 - c1;
						if(y6 == null) {
							y6 = 0;
						}
						if(x6 == null) {
							x6 = 0;
						}
						var f1_x1 = x6;
						var f1_y1 = y6;
						var x7 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 + c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f2_x1 = x7;
						var f2_y1 = y7;
						var x8 = x;
						var y8 = y;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var p_x1 = x8;
						var p_y1 = y8;
						var x9 = p_x1 - f1_x1;
						var y9 = p_y1 - f1_y1;
						var x10 = p_x1 - f2_x1;
						var y10 = p_y1 - f2_y1;
						has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x11 = x;
						var y11 = y;
						if(y11 == null) {
							y11 = 0;
						}
						if(x11 == null) {
							x11 = 0;
						}
						var point1_x = x11;
						var point1_y = y11;
						var x12 = view.x + view.width / 2;
						var y12 = view.y + view.height / 2;
						if(y12 == null) {
							y12 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point2_x = x12;
						var point2_y = y12;
						var x13 = point2_x - point1_x;
						var y13 = point2_y - point1_y;
						has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this3 = value;
				callback(x,y,this3);
			}
		}
	}
};
vision_ds_Image.iterator = function(this1) {
	return new vision_ds__$Image_PixelIterator(this1);
};
vision_ds_Image.hasView = function(this1) {
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		return this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0;
	} else {
		return true;
	}
};
vision_ds_Image.setView = function(this1,view) {
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,view.x);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,view.y);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,view.width == 0 ? view.width : view.width);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,view.height == 0 ? view.height : view.height);
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = view.shape;
	return this1;
};
vision_ds_Image.getView = function(this1) {
	var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
	var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
	var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
	var this2 = this1.b;
	var tmp = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
	return new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[tmp]);
};
vision_ds_Image.removeView = function(this1) {
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,this1.getUInt16(0));
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	return this1;
};
vision_ds_Image.hasPixelInView = function(this1,x,y,v) {
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
		if(x >= 0 && y >= 0 && x < this1.getUInt16(0)) {
			return y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			return false;
		}
	}
	var has = false;
	var view;
	if(v != null) {
		view = v;
	} else {
		var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
		var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
		var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
		var this2 = this1.b;
		var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
		view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
	}
	switch(view.shape) {
	case 0:
		has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
		break;
	case 1:
		has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
		break;
	case 2:case 3:
		if(view.width > view.height) {
			var a = view.width / 2;
			var b = view.height / 2;
			var c = Math.sqrt(a * a - b * b);
			var x1 = view.x + view.width / 2 - c;
			var y1 = view.y + view.height / 2;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var f1_x = x1;
			var f1_y = y1;
			var x1 = view.x + view.width / 2 + c;
			var y1 = view.y + view.height / 2;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var f2_x = x1;
			var f2_y = y1;
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var p_x = x1;
			var p_y = y1;
			var x1 = p_x - f1_x;
			var y1 = p_y - f1_y;
			var x2 = p_x - f2_x;
			var y2 = p_y - f2_y;
			has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
			if(view.shape == 3) {
				has = !has;
			}
		} else if(view.height > view.width) {
			var a = view.height / 2;
			var b = view.width / 2;
			var c = Math.sqrt(a * a - b * b);
			var x1 = view.x + view.width / 2;
			var y1 = view.y + view.height / 2 - c;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var f1_x = x1;
			var f1_y = y1;
			var x1 = view.x + view.width / 2;
			var y1 = view.y + view.height / 2 + c;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var f2_x = x1;
			var f2_y = y1;
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var p_x = x1;
			var p_y = y1;
			var x1 = p_x - f1_x;
			var y1 = p_y - f1_y;
			var x2 = p_x - f2_x;
			var y2 = p_y - f2_y;
			has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
			if(view.shape == 3) {
				has = !has;
			}
		} else {
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var point1_x = x1;
			var point1_y = y1;
			var x1 = view.x + view.width / 2;
			var y1 = view.y + view.height / 2;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var point2_x = x1;
			var point2_y = y1;
			var x1 = point2_x - point1_x;
			var y1 = point2_y - point1_y;
			has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
			if(view.shape == 3) {
				has = !has;
			}
		}
		break;
	case 4:
		has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
		break;
	case 5:
		has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
		break;
	}
	return has;
};
vision_ds_Image.fromJsCanvas = function(canvas) {
	return vision_tools_ImageTools.fromJsCanvas(canvas);
};
vision_ds_Image.toJsCanvas = function(this1) {
	return vision_tools_ImageTools.toJsCanvas(this1);
};
vision_ds_Image.fromJsImage = function(image) {
	return vision_tools_ImageTools.fromJsImage(image);
};
vision_ds_Image.toJsImage = function(this1) {
	return vision_tools_ImageTools.toJsImage(this1);
};
vision_ds_Image.fromHaxeUIImage = function(image) {
	return vision_tools_ImageTools.fromHaxeUIImage(image);
};
vision_ds_Image.toHaxeUIImage = function(this1) {
	return vision_tools_ImageTools.toHaxeUIImage(this1);
};
vision_ds_Image.fromHaxeUIImageData = function(image) {
	return vision_tools_ImageTools.fromHaxeUIImageData(image);
};
vision_ds_Image.toHaxeUIImageData = function(this1) {
	return vision_tools_ImageTools.toHaxeUIImageData(this1);
};
vision_ds_Image.from2DArray = function(array) {
	var maxLength = 0;
	var _g = 0;
	while(_g < array.length) {
		var arr = array[_g];
		++_g;
		if(arr.length > maxLength) {
			maxLength = arr.length;
		}
	}
	var width = array.length;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * maxLength * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,maxLength);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var image = this2;
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = array[x].length;
		while(_g2 < _g3) {
			var y = _g2++;
			var color = array[x][y];
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
			} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					image.b[position] = color >> 24 & 255;
					image.b[position + 1] = color >> 16 & 255;
					image.b[position + 2] = color >> 8 & 255;
					image.b[position + 3] = color & 255;
				}
			} else {
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = color >> 24 & 255;
				image.b[position1 + 1] = color >> 16 & 255;
				image.b[position1 + 2] = color >> 8 & 255;
				image.b[position1 + 3] = color & 255;
			}
		}
	}
	return image;
};
vision_ds_Image.to2DArray = function(this1) {
	var arr = [];
	var _g = 0;
	var _g1 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
	while(_g < _g1) {
		var i = _g++;
		arr[i] = [];
		var _g2 = 0;
		var _g3 = this1.getUInt16(0);
		while(_g2 < _g3) {
			var j = _g2++;
			var arr1 = arr[i];
			if(!(j >= 0 && i >= 0 && j < this1.getUInt16(0) && i < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = j;
				var this_y = i;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (i * this1.getUInt16(0) + j) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			arr1[j] = this2;
		}
	}
	return arr;
};
vision_ds_Image.fromColorByteArrayAndData = function(array,width,height) {
	array.setUInt16(0,width);
	array.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	array.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	array.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	array.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	array.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	return array;
};
vision_ds_Image.image_or_image = function(lhs,rhs) {
	if(!(lhs.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != lhs.getUInt16(0) || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4)) || lhs.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = lhs.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * lhs.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = lhs.b[position] << 24 | lhs.b[position + 1] << 16 | lhs.b[position + 2] << 8 | lhs.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var position1 = (y * rhs.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = rhs.b[position1] << 24 | rhs.b[position1 + 1] << 16 | rhs.b[position1 + 2] << 8 | rhs.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this2 = value1;
				var color = this1 | this2;
				var position2 = (y * lhs.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				lhs.b[position2] = color >> 24 & 255;
				lhs.b[position2 + 1] = color >> 16 & 255;
				lhs.b[position2 + 2] = color >> 8 & 255;
				lhs.b[position2 + 3] = color & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = lhs.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(lhs.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != lhs.getUInt16(0) || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4)) || lhs.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < lhs.getUInt16(0) && y < Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var lhs1 = lhs.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),lhs1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * lhs.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = lhs.b[position] << 24 | lhs.b[position + 1] << 16 | lhs.b[position + 2] << 8 | lhs.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var position1 = (y * rhs.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = rhs.b[position1] << 24 | rhs.b[position1 + 1] << 16 | rhs.b[position1 + 2] << 8 | rhs.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this2 = value1;
					var color = this1 | this2;
					var position2 = (y * lhs.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					lhs.b[position2] = color >> 24 & 255;
					lhs.b[position2 + 1] = color >> 16 & 255;
					lhs.b[position2 + 2] = color >> 8 & 255;
					lhs.b[position2 + 3] = color & 255;
				}
			}
		}
	}
	return lhs;
};
vision_ds_Image.image_xor_image = function(lhs,rhs) {
	if(!(lhs.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != lhs.getUInt16(0) || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4)) || lhs.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = lhs.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * lhs.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = lhs.b[position] << 24 | lhs.b[position + 1] << 16 | lhs.b[position + 2] << 8 | lhs.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var position1 = (y * rhs.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = rhs.b[position1] << 24 | rhs.b[position1 + 1] << 16 | rhs.b[position1 + 2] << 8 | rhs.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this2 = value1;
				var color = this1 ^ this2;
				var position2 = (y * lhs.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				lhs.b[position2] = color >> 24 & 255;
				lhs.b[position2 + 1] = color >> 16 & 255;
				lhs.b[position2 + 2] = color >> 8 & 255;
				lhs.b[position2 + 3] = color & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = lhs.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(lhs.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != lhs.getUInt16(0) || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4)) || lhs.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < lhs.getUInt16(0) && y < Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var lhs1 = lhs.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),lhs1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * lhs.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = lhs.b[position] << 24 | lhs.b[position + 1] << 16 | lhs.b[position + 2] << 8 | lhs.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var position1 = (y * rhs.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = rhs.b[position1] << 24 | rhs.b[position1 + 1] << 16 | rhs.b[position1 + 2] << 8 | rhs.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this2 = value1;
					var color = this1 ^ this2;
					var position2 = (y * lhs.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					lhs.b[position2] = color >> 24 & 255;
					lhs.b[position2 + 1] = color >> 16 & 255;
					lhs.b[position2 + 2] = color >> 8 & 255;
					lhs.b[position2 + 3] = color & 255;
				}
			}
		}
	}
	return lhs;
};
vision_ds_Image.image_and_image = function(lhs,rhs) {
	if(!(lhs.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != lhs.getUInt16(0) || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4)) || lhs.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = lhs.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * lhs.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = lhs.b[position] << 24 | lhs.b[position + 1] << 16 | lhs.b[position + 2] << 8 | lhs.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var position1 = (y * rhs.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = rhs.b[position1] << 24 | rhs.b[position1 + 1] << 16 | rhs.b[position1 + 2] << 8 | rhs.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this2 = value1;
				var color = this1 & this2;
				var position2 = (y * lhs.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				lhs.b[position2] = color >> 24 & 255;
				lhs.b[position2 + 1] = color >> 16 & 255;
				lhs.b[position2 + 2] = color >> 8 & 255;
				lhs.b[position2 + 3] = color & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = lhs.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(lhs.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != lhs.getUInt16(0) || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4)) || lhs.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < lhs.getUInt16(0) && y < Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var lhs1 = lhs.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),lhs1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * lhs.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = lhs.b[position] << 24 | lhs.b[position + 1] << 16 | lhs.b[position + 2] << 8 | lhs.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var position1 = (y * rhs.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = rhs.b[position1] << 24 | rhs.b[position1 + 1] << 16 | rhs.b[position1 + 2] << 8 | rhs.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this2 = value1;
					var color = this1 & this2;
					var position2 = (y * lhs.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					lhs.b[position2] = color >> 24 & 255;
					lhs.b[position2 + 1] = color >> 16 & 255;
					lhs.b[position2 + 2] = color >> 8 & 255;
					lhs.b[position2 + 3] = color & 255;
				}
			}
		}
	}
	return lhs;
};
var vision_ds__$Image_PixelIterator = function(img) {
	this.i = 4;
	this.img = img;
};
$hxClasses["vision.ds._Image.PixelIterator"] = vision_ds__$Image_PixelIterator;
vision_ds__$Image_PixelIterator.__name__ = "vision.ds._Image.PixelIterator";
vision_ds__$Image_PixelIterator.prototype = {
	i: null
	,img: null
	,next: function() {
		var x = this.i % this.img.getUInt16(0);
		var y = Math.floor(this.i / this.img.getUInt16(0));
		var this1 = this.img;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this1 = value;
		var pixel = new vision_ds_Pixel(x,y,this1);
		this.i += 4;
		return pixel;
	}
	,hasNext: function() {
		return this.i < this.img.length;
	}
	,__class__: vision_ds__$Image_PixelIterator
};
var vision_ds_ImageView = function(x,y,width,height,shape) {
	this.shape = 0;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
	if(width != null) {
		this.width = width;
	}
	if(height != null) {
		this.height = height;
	}
	if(shape != null) {
		this.shape = shape;
	}
};
$hxClasses["vision.ds.ImageView"] = vision_ds_ImageView;
vision_ds_ImageView.__name__ = "vision.ds.ImageView";
vision_ds_ImageView.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,shape: null
	,toString: function() {
		return "{shape: " + this.shape + ", x: " + this.x + ", y: " + this.y + ", width: " + this.width + ", height: " + this.height + "}";
	}
	,__class__: vision_ds_ImageView
};
var vision_ds_Int16Point2D = {};
vision_ds_Int16Point2D.__properties__ = {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"};
vision_ds_Int16Point2D._new = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var this1 = (X & 32767) - (X >> 31) * 32767 | (Y & 32767) - (Y >> 31) * 32767 << 16;
	return this1;
};
vision_ds_Int16Point2D.get_x = function(this1) {
	return (this1 & 65535) - ((this1 & 65535) >> 15) * 65535;
};
vision_ds_Int16Point2D.set_x = function(this1,x) {
	x &= 65535;
	this1 = this1 & -65536 | x;
	return x;
};
vision_ds_Int16Point2D.get_y = function(this1) {
	return (this1 >> 16 & 65535) - ((this1 >> 16 & 65535) >> 15) * 65535;
};
vision_ds_Int16Point2D.set_y = function(this1,y) {
	y &= 65535;
	this1 = this1 & 65535 | y << 16;
	return y;
};
vision_ds_Int16Point2D.toString = function(this1) {
	return "(" + ((this1 & 65535) - ((this1 & 65535) >> 15) * 65535) + ", " + ((this1 >> 16 & 65535) - ((this1 >> 16 & 65535) >> 15) * 65535) + ")";
};
vision_ds_Int16Point2D.toPoint2D = function(this1) {
	return new vision_ds_Point2D((this1 & 65535) - ((this1 & 65535) >> 15) * 65535,(this1 >> 16 & 65535) - ((this1 >> 16 & 65535) >> 15) * 65535);
};
vision_ds_Int16Point2D.toIntPoint2D = function(this1) {
	var this_x = (this1 & 65535) - ((this1 & 65535) >> 15) * 65535;
	var this_y = (this1 >> 16 & 65535) - ((this1 >> 16 & 65535) >> 15) * 65535;
	return new vision_ds_Point2D(this_x,this_y);
};
vision_ds_Int16Point2D.toInt = function(this1) {
	return this1;
};
var vision_ds__$IntPoint2D_Impl = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["vision.ds._IntPoint2D.Impl"] = vision_ds__$IntPoint2D_Impl;
vision_ds__$IntPoint2D_Impl.__name__ = "vision.ds._IntPoint2D.Impl";
vision_ds__$IntPoint2D_Impl.prototype = {
	x: null
	,y: null
	,__class__: vision_ds__$IntPoint2D_Impl
};
var vision_ds_IntPoint2D = {};
vision_ds_IntPoint2D.__properties__ = {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"};
vision_ds_IntPoint2D.get_y = function(this1) {
	return this1.y;
};
vision_ds_IntPoint2D.get_x = function(this1) {
	return this1.x;
};
vision_ds_IntPoint2D.set_y = function(this1,y) {
	this1.y = y;
	return y;
};
vision_ds_IntPoint2D.set_x = function(this1,x) {
	this1.x = x;
	return x;
};
vision_ds_IntPoint2D.toPoint2D = function(this1) {
	return new vision_ds_Point2D(this1.x,this1.y);
};
vision_ds_IntPoint2D.fromPoint2D = function(p) {
	var this1 = new vision_ds__$IntPoint2D_Impl(p.x | 0,p.y | 0);
	return this1;
};
vision_ds_IntPoint2D.toString = function(this1) {
	return "(" + this1.x + ", " + this1.y + ")";
};
vision_ds_IntPoint2D.copy = function(this1) {
	var this2 = new vision_ds__$IntPoint2D_Impl(this1.x,this1.y);
	return this2;
};
var vision_ds_Kernal2D = $hxEnums["vision.ds.Kernal2D"] = { __ename__:"vision.ds.Kernal2D",__constructs__:null
	,Identity: {_hx_name:"Identity",_hx_index:0,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,BoxBlur: {_hx_name:"BoxBlur",_hx_index:1,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,LaplacianPositive: {_hx_name:"LaplacianPositive",_hx_index:2,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,LaplacianNegative: {_hx_name:"LaplacianNegative",_hx_index:3,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,RidgeDetection: {_hx_name:"RidgeDetection",_hx_index:4,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,RidgeDetectionAggressive: {_hx_name:"RidgeDetectionAggressive",_hx_index:5,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,Sharpen: {_hx_name:"Sharpen",_hx_index:6,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,UnsharpMasking: {_hx_name:"UnsharpMasking",_hx_index:7,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,Assemble3x3: ($_=function(corner,edge,center) { return {_hx_index:8,corner:corner,edge:edge,center:center,__enum__:"vision.ds.Kernal2D",toString:$estr}; },$_._hx_name="Assemble3x3",$_.__params__ = ["corner","edge","center"],$_)
	,Assemble5x5: ($_=function(farCorner,farEdge,edge,midCorner,midEdge,center) { return {_hx_index:9,farCorner:farCorner,farEdge:farEdge,edge:edge,midCorner:midCorner,midEdge:midEdge,center:center,__enum__:"vision.ds.Kernal2D",toString:$estr}; },$_._hx_name="Assemble5x5",$_.__params__ = ["farCorner","farEdge","edge","midCorner","midEdge","center"],$_)
	,Custom: ($_=function(kernal) { return {_hx_index:10,kernal:kernal,__enum__:"vision.ds.Kernal2D",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["kernal"],$_)
	,GaussianBlur: ($_=function(size,sigma) { return {_hx_index:11,size:size,sigma:sigma,__enum__:"vision.ds.Kernal2D",toString:$estr}; },$_._hx_name="GaussianBlur",$_.__params__ = ["size","sigma"],$_)
};
vision_ds_Kernal2D.__constructs__ = [vision_ds_Kernal2D.Identity,vision_ds_Kernal2D.BoxBlur,vision_ds_Kernal2D.LaplacianPositive,vision_ds_Kernal2D.LaplacianNegative,vision_ds_Kernal2D.RidgeDetection,vision_ds_Kernal2D.RidgeDetectionAggressive,vision_ds_Kernal2D.Sharpen,vision_ds_Kernal2D.UnsharpMasking,vision_ds_Kernal2D.Assemble3x3,vision_ds_Kernal2D.Assemble5x5,vision_ds_Kernal2D.Custom,vision_ds_Kernal2D.GaussianBlur];
vision_ds_Kernal2D.__empty_constructs__ = [vision_ds_Kernal2D.Identity,vision_ds_Kernal2D.BoxBlur,vision_ds_Kernal2D.LaplacianPositive,vision_ds_Kernal2D.LaplacianNegative,vision_ds_Kernal2D.RidgeDetection,vision_ds_Kernal2D.RidgeDetectionAggressive,vision_ds_Kernal2D.Sharpen,vision_ds_Kernal2D.UnsharpMasking];
var vision_ds_Line2D = function(start,end) {
	this.end = new vision_ds_Point2D(0,0);
	this.start = new vision_ds_Point2D(0,0);
	this.start.x = start.x;
	this.start.y = start.y;
	this.end.x = end.x;
	this.end.y = end.y;
	var x = end.x - start.x;
	var y = end.y - start.y;
	this.radians = Math.atan2(x,y);
	this.slope = Math.tan(this.radians);
	this.degrees = this.radians * 180 / Math.PI;
};
$hxClasses["vision.ds.Line2D"] = vision_ds_Line2D;
vision_ds_Line2D.__name__ = "vision.ds.Line2D";
vision_ds_Line2D.fromRay2D = function(ray) {
	var x = ray.point.x;
	var y = ray.point.y;
	var length = 1;
	var end = new vision_ds_Point2D(x + length * Math.cos(ray.radians) | 0,y + length * Math.sin(ray.radians) | 0);
	return new vision_ds_Line2D(ray.point,end);
};
vision_ds_Line2D.prototype = {
	length: null
	,slope: null
	,degrees: null
	,radians: null
	,start: null
	,end: null
	,get_length: function() {
		return Math.sqrt(Math.pow(this.end.x - this.start.x,2) + Math.pow(this.end.y - this.start.y,2));
	}
	,toString: function() {
		return "\n (" + this.start.x + ", " + this.start.y + ") --> (" + this.end.x + ", " + this.end.y + ")";
	}
	,toRay2D: function() {
		return new vision_ds_Ray2D(this.start,this.slope);
	}
	,set_start: function(value) {
		var point2 = this.end;
		var x = point2.x - value.x;
		var y = point2.y - value.y;
		this.radians = Math.atan2(x,y);
		this.slope = Math.tan(this.radians);
		this.degrees = this.radians * 180 / Math.PI;
		return this.start = value;
	}
	,set_end: function(value) {
		var point2 = this.end;
		var x = point2.x - value.x;
		var y = point2.y - value.y;
		this.radians = Math.atan2(x,y);
		this.slope = Math.tan(this.radians);
		this.degrees = this.radians * 180 / Math.PI;
		return this.end = value;
	}
	,get_middle: function() {
		return new vision_ds_Point2D((this.start.x + this.end.x) / 2,(this.start.y + this.end.y) / 2);
	}
	,set_middle: function(value) {
		var x = (this.start.x + this.end.x) / 2;
		var y = (this.start.y + this.end.y) / 2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var previousMiddle_x = x;
		var previousMiddle_y = y;
		var diffX = value.x - previousMiddle_x;
		var diffY = value.y - previousMiddle_y;
		this.start.y += diffY;
		this.end.y += diffY;
		this.start.x += diffX;
		this.end.x += diffX;
		return new vision_ds_Point2D((this.start.x + this.end.x) / 2,(this.start.y + this.end.y) / 2);
	}
	,__class__: vision_ds_Line2D
	,__properties__: {set_middle:"set_middle",get_middle:"get_middle",set_end:"set_end",set_start:"set_start",get_length:"get_length"}
};
var vision_ds_Pixel = function(x,y,color) {
	this.x = x;
	this.y = y;
	this.color = color;
};
$hxClasses["vision.ds.Pixel"] = vision_ds_Pixel;
vision_ds_Pixel.__name__ = "vision.ds.Pixel";
vision_ds_Pixel.prototype = {
	x: null
	,y: null
	,color: null
	,__class__: vision_ds_Pixel
};
var vision_ds_Point2D = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["vision.ds.Point2D"] = vision_ds_Point2D;
vision_ds_Point2D.__name__ = "vision.ds.Point2D";
vision_ds_Point2D.prototype = {
	x: null
	,y: null
	,toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,copy: function() {
		return new vision_ds_Point2D(this.x,this.y);
	}
	,__class__: vision_ds_Point2D
};
var vision_ds_Ray2D = function(point,m,degrees,radians) {
	this.point = point;
	if(m != null) {
		this.degrees = Math.atan(m) * 180 / Math.PI;
		this.radians = Math.atan(m);
		this.slope = m;
		var value = Math.atan(m) * 180 / Math.PI;
		this.slope = Math.tan(value * Math.PI / 180);
		this.radians = value * Math.PI / 180;
		this.degrees = value;
		var value = Math.atan(m);
		this.slope = Math.tan(value);
		this.degrees = value * 180 / Math.PI;
		this.radians = value;
	} else if(degrees != null) {
		this.slope = Math.tan(degrees * Math.PI / 180);
		this.radians = degrees * Math.PI / 180;
		this.degrees = degrees;
		var value = Math.tan(degrees * Math.PI / 180);
		this.degrees = Math.atan(value) * 180 / Math.PI;
		this.radians = Math.atan(value);
		this.slope = value;
		var value = degrees * Math.PI / 180;
		this.slope = Math.tan(value);
		this.degrees = value * 180 / Math.PI;
		this.radians = value;
	} else if(radians != null) {
		this.slope = Math.tan(radians);
		this.degrees = radians * 180 / Math.PI;
		this.radians = radians;
		var value = Math.tan(radians);
		this.degrees = Math.atan(value) * 180 / Math.PI;
		this.radians = Math.atan(value);
		this.slope = value;
		var value = radians * 180 / Math.PI;
		this.slope = Math.tan(value * Math.PI / 180);
		this.radians = value * Math.PI / 180;
		this.degrees = value;
	}
};
$hxClasses["vision.ds.Ray2D"] = vision_ds_Ray2D;
vision_ds_Ray2D.__name__ = "vision.ds.Ray2D";
vision_ds_Ray2D.from2Points = function(point1,point2) {
	var s = (point2.y - point1.y) / (point2.x - point1.x);
	return new vision_ds_Ray2D(point1,s);
};
vision_ds_Ray2D.prototype = {
	point: null
	,slope: null
	,degrees: null
	,radians: null
	,getPointAtX: function(x) {
		var px = this.point.x;
		var py = this.point.y;
		return new vision_ds_Point2D(x,this.slope * x + (px > 0 ? py - this.slope * px : py + this.slope * px));
	}
	,getPointAtY: function(y) {
		var px = this.point.x;
		var py = this.point.y;
		return new vision_ds_Point2D((y - (px > 0 ? py - this.slope * px : py + this.slope * px)) / this.slope,y);
	}
	,intersect: function(ray) {
		var line1StartX = this.point.x;
		var line1StartY = this.point.y;
		var line1EndX = this.point.x + Math.cos(this.radians) * 1000;
		var line1EndY = this.point.y + Math.sin(this.radians) * 1000;
		var line2StartX = ray.point.x;
		var line2StartY = ray.point.y;
		var line2EndX = ray.point.x + Math.cos(ray.radians) * 1000;
		var line2EndY = ray.point.y + Math.sin(ray.radians) * 1000;
		var a;
		var b;
		var numerator1;
		var numerator2;
		var result = null;
		var denominator = (line2EndY - line2StartY) * (line1EndX - line1StartX) - (line2EndX - line2StartX) * (line1EndY - line1StartY);
		if(denominator == 0) {
			return result;
		} else {
			a = line1StartY - line2StartY;
			b = line1StartX - line2StartX;
			numerator1 = (line2EndX - line2StartX) * a - (line2EndY - line2StartY) * b;
			numerator2 = (line1EndX - line1StartX) * a - (line1EndY - line1StartY) * b;
			a = numerator1 / denominator;
			b = numerator2 / denominator;
			result = new vision_ds_Point2D();
			result.x = line1StartX + a * (line1EndX - line1StartX);
			result.y = line1StartY + a * (line1EndY - line1StartY);
			return result;
		}
	}
	,set_slope: function(value) {
		this.degrees = Math.atan(value) * 180 / Math.PI;
		this.radians = Math.atan(value);
		return this.slope = value;
	}
	,set_degrees: function(value) {
		this.slope = Math.tan(value * Math.PI / 180);
		this.radians = value * Math.PI / 180;
		return this.degrees = value;
	}
	,set_radians: function(value) {
		this.slope = Math.tan(value);
		this.degrees = value * 180 / Math.PI;
		return this.radians = value;
	}
	,get_yIntercept: function() {
		var px = this.point.x;
		var py = this.point.y;
		if(px > 0) {
			return py - this.slope * px;
		}
		return py + this.slope * px;
	}
	,get_xIntercept: function() {
		var px = this.point.x;
		var py = this.point.y;
		if(py > 0) {
			return (py - this.slope * px) / this.slope;
		}
		return (py + this.slope * px) / this.slope;
	}
	,__class__: vision_ds_Ray2D
	,__properties__: {get_xIntercept:"get_xIntercept",get_yIntercept:"get_yIntercept",set_radians:"set_radians",set_degrees:"set_degrees",set_slope:"set_slope"}
};
var vision_ds_Rectangle = function(x,y,width,height) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["vision.ds.Rectangle"] = vision_ds_Rectangle;
vision_ds_Rectangle.__name__ = "vision.ds.Rectangle";
vision_ds_Rectangle.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,__class__: vision_ds_Rectangle
};
var vision_ds_hough_HoughAccumulator = {};
vision_ds_hough_HoughAccumulator.__properties__ = {get_rhoMax:"get_rhoMax"};
vision_ds_hough_HoughAccumulator.get_rhoMax = function(this1) {
	return this1.length / 2 | 0;
};
vision_ds_hough_HoughAccumulator._new = function(maxRho) {
	var this1 = [];
	var _g = [];
	var _g1 = 0;
	while(_g1 < 180) {
		var i = _g1++;
		_g.push(0);
	}
	var arrayOfZeros = _g;
	var _g = 0;
	var _g1 = maxRho * 2;
	while(_g < _g1) {
		var i = _g++;
		this1[i] = arrayOfZeros.slice();
	}
	return this1;
};
vision_ds_hough_HoughAccumulator.incrementCell = function(this1,rho,thetaIndex) {
	var this2 = this1[(rho | 0) + vision_ds_hough_HoughAccumulator.get_rhoMax(this1)];
	this2[thetaIndex]++;
};
vision_ds_hough_HoughAccumulator.decrementCell = function(this1,rho,thetaIndex) {
	var this2 = this1[(rho | 0) + vision_ds_hough_HoughAccumulator.get_rhoMax(this1)];
	this2[thetaIndex]--;
};
vision_ds_hough_HoughAccumulator.setCell = function(this1,rho,thetaIndex,value) {
	this1[(rho | 0) + vision_ds_hough_HoughAccumulator.get_rhoMax(this1)][thetaIndex] = value;
};
vision_ds_hough_HoughAccumulator.getMaximas = function(this1,threshold) {
	var pointArray = [];
	var _g = 1;
	var _g1 = this1.length - 1;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 1;
		var _g3 = this1[x].length - 1;
		while(_g2 < _g3) {
			var y = _g2++;
			var neighbors = [this1[x - 1][y - 1],this1[x - 1][y],this1[x - 1][y + 1],this1[x][y - 1],this1[x][y],this1[x][y + 1],this1[x + 1][y - 1],this1[x + 1][y],this1[x + 1][y + 1]];
			var this2 = this1[x][y];
			var max = neighbors[0];
			var _g4 = 0;
			var _g5 = neighbors.length;
			while(_g4 < _g5) {
				var i = _g4++;
				if(neighbors[i] > max) {
					max = neighbors[i];
				}
			}
			if(this2 == max && this1[x][y] >= threshold) {
				var x1 = x;
				var y1 = y;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var p_x = x1;
				var p_y = y1;
				var this3 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
				pointArray.push(this3);
			} else {
				continue;
			}
		}
	}
	return pointArray;
};
vision_ds_hough_HoughAccumulator.cellIterator = function(this1) {
	return new haxe_iterators_ArrayIterator(this1);
};
var vision_ds_hough_HoughSpace = function(accumulator,image) {
	this.accumulator = accumulator;
	this.image = image;
};
$hxClasses["vision.ds.hough.HoughSpace"] = vision_ds_hough_HoughSpace;
vision_ds_hough_HoughSpace.__name__ = "vision.ds.hough.HoughSpace";
vision_ds_hough_HoughSpace.prototype = {
	accumulator: null
	,image: null
	,maximums: null
	,rays: null
	,__class__: vision_ds_hough_HoughSpace
};
var vision_ds_specifics_AlgorithmSettings = $hxEnums["vision.ds.specifics.AlgorithmSettings"] = { __ename__:"vision.ds.specifics.AlgorithmSettings",__constructs__:null
	,VeryLow_VeryFast: {_hx_name:"VeryLow_VeryFast",_hx_index:0,__enum__:"vision.ds.specifics.AlgorithmSettings",toString:$estr}
	,Low_Fast: {_hx_name:"Low_Fast",_hx_index:1,__enum__:"vision.ds.specifics.AlgorithmSettings",toString:$estr}
	,Medium_Intermediate: {_hx_name:"Medium_Intermediate",_hx_index:2,__enum__:"vision.ds.specifics.AlgorithmSettings",toString:$estr}
	,High_Slow: {_hx_name:"High_Slow",_hx_index:3,__enum__:"vision.ds.specifics.AlgorithmSettings",toString:$estr}
	,VeryHigh_VerySlow: {_hx_name:"VeryHigh_VerySlow",_hx_index:4,__enum__:"vision.ds.specifics.AlgorithmSettings",toString:$estr}
};
vision_ds_specifics_AlgorithmSettings.__constructs__ = [vision_ds_specifics_AlgorithmSettings.VeryLow_VeryFast,vision_ds_specifics_AlgorithmSettings.Low_Fast,vision_ds_specifics_AlgorithmSettings.Medium_Intermediate,vision_ds_specifics_AlgorithmSettings.High_Slow,vision_ds_specifics_AlgorithmSettings.VeryHigh_VerySlow];
vision_ds_specifics_AlgorithmSettings.__empty_constructs__ = [vision_ds_specifics_AlgorithmSettings.VeryLow_VeryFast,vision_ds_specifics_AlgorithmSettings.Low_Fast,vision_ds_specifics_AlgorithmSettings.Medium_Intermediate,vision_ds_specifics_AlgorithmSettings.High_Slow,vision_ds_specifics_AlgorithmSettings.VeryHigh_VerySlow];
var vision_exceptions_VisionException = function(message,type) {
	throw "Exception - " + type + ":\n\n\t" + message + "\n";
};
$hxClasses["vision.exceptions.VisionException"] = vision_exceptions_VisionException;
vision_exceptions_VisionException.__name__ = "vision.exceptions.VisionException";
vision_exceptions_VisionException.prototype = {
	__class__: vision_exceptions_VisionException
};
var vision_exceptions_ImageLoadingFailed = function(type,reason) {
	vision_exceptions_VisionException.call(this,reason,"" + type + " Loading Failed");
};
$hxClasses["vision.exceptions.ImageLoadingFailed"] = vision_exceptions_ImageLoadingFailed;
vision_exceptions_ImageLoadingFailed.__name__ = "vision.exceptions.ImageLoadingFailed";
vision_exceptions_ImageLoadingFailed.__super__ = vision_exceptions_VisionException;
vision_exceptions_ImageLoadingFailed.prototype = $extend(vision_exceptions_VisionException.prototype,{
	__class__: vision_exceptions_ImageLoadingFailed
});
var vision_exceptions_ImageSavingFailed = function(type,reason) {
	vision_exceptions_VisionException.call(this,reason,"" + type + " Saving Failed");
};
$hxClasses["vision.exceptions.ImageSavingFailed"] = vision_exceptions_ImageSavingFailed;
vision_exceptions_ImageSavingFailed.__name__ = "vision.exceptions.ImageSavingFailed";
vision_exceptions_ImageSavingFailed.__super__ = vision_exceptions_VisionException;
vision_exceptions_ImageSavingFailed.prototype = $extend(vision_exceptions_VisionException.prototype,{
	__class__: vision_exceptions_ImageSavingFailed
});
var vision_exceptions_InvalidGaussianKernalSize = function(size) {
	vision_exceptions_VisionException.call(this,"Creating a gaussian kernal of size " + size + " is not allowed. " + (size < 0 ? "Is the kernal size a negative value?" : size % 2 == 0 ? "Is the kernal size even?" : size == 0 ? "Is the kernal size 0?" : ""),"Invalid Gaussian Kernal Size");
};
$hxClasses["vision.exceptions.InvalidGaussianKernalSize"] = vision_exceptions_InvalidGaussianKernalSize;
vision_exceptions_InvalidGaussianKernalSize.__name__ = "vision.exceptions.InvalidGaussianKernalSize";
vision_exceptions_InvalidGaussianKernalSize.__super__ = vision_exceptions_VisionException;
vision_exceptions_InvalidGaussianKernalSize.prototype = $extend(vision_exceptions_VisionException.prototype,{
	getReason: function(size) {
		if(size < 0) {
			return "Is the kernal size a negative value?";
		}
		if(size % 2 == 0) {
			return "Is the kernal size even?";
		}
		if(size == 0) {
			return "Is the kernal size 0?";
		}
		return "";
	}
	,__class__: vision_exceptions_InvalidGaussianKernalSize
});
var vision_exceptions_LibraryRequired = function(library,dependencies,classDotField,fieldType) {
	if(fieldType == null) {
		fieldType = "function";
	}
	vision_exceptions_VisionException.call(this,"The " + fieldType + " " + classDotField + " requires the " + library + " haxelib.\n\tMake sure " + (library + (dependencies.length > 0 ? " and it's dependencies are" : " is")) + " installed & included:\n\n" + this.getInclusionMethod([library].concat(dependencies)),"Missing Library Required");
};
$hxClasses["vision.exceptions.LibraryRequired"] = vision_exceptions_LibraryRequired;
vision_exceptions_LibraryRequired.__name__ = "vision.exceptions.LibraryRequired";
vision_exceptions_LibraryRequired.__super__ = vision_exceptions_VisionException;
vision_exceptions_LibraryRequired.prototype = $extend(vision_exceptions_VisionException.prototype,{
	getInclusionMethod: function(libs) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < libs.length) {
			var lib = libs[_g1];
			++_g1;
			_g.push("\t\t--library " + lib + "\n");
		}
		return "" + _g.join("");
	}
	,__class__: vision_exceptions_LibraryRequired
});
var vision_exceptions_OutOfBounds = function(image,position) {
	vision_exceptions_VisionException.call(this,"pixel " + Std.string(position) + " is outside the bounds of the image (size: " + image.getUInt16(0) + "x" + Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) + ", position: " + Std.string(position) + ")","Pixel Coordinates Out Of Bounds");
};
$hxClasses["vision.exceptions.OutOfBounds"] = vision_exceptions_OutOfBounds;
vision_exceptions_OutOfBounds.__name__ = "vision.exceptions.OutOfBounds";
vision_exceptions_OutOfBounds.__super__ = vision_exceptions_VisionException;
vision_exceptions_OutOfBounds.prototype = $extend(vision_exceptions_VisionException.prototype,{
	__class__: vision_exceptions_OutOfBounds
});
var vision_exceptions_Unimplemented = function(name) {
	vision_exceptions_VisionException.call(this,"" + name + " is not yet implemented","Unimplemented Method");
};
$hxClasses["vision.exceptions.Unimplemented"] = vision_exceptions_Unimplemented;
vision_exceptions_Unimplemented.__name__ = "vision.exceptions.Unimplemented";
vision_exceptions_Unimplemented.__super__ = vision_exceptions_VisionException;
vision_exceptions_Unimplemented.prototype = $extend(vision_exceptions_VisionException.prototype,{
	__class__: vision_exceptions_Unimplemented
});
var vision_helpers_TextDrawer = function() { };
$hxClasses["vision.helpers.TextDrawer"] = vision_helpers_TextDrawer;
vision_helpers_TextDrawer.__name__ = "vision.helpers.TextDrawer";
vision_helpers_TextDrawer.reportDependencies = function() {
	throw haxe_Exception.thrown(new vision_exceptions_LibraryRequired("opentype.hx",[].concat(["promhx"]).concat(["buddy"]).concat(["asynctools"]),"Image.drawText"));
};
vision_helpers_TextDrawer.drawTextOnImage = function(image,x,y,size,text,font) {
	vision_helpers_TextDrawer.reportDependencies();
};
var vision_tools_ImageTools = function() { };
$hxClasses["vision.tools.ImageTools"] = vision_tools_ImageTools;
vision_tools_ImageTools.__name__ = "vision.tools.ImageTools";
vision_tools_ImageTools.loadFromFile = function(image,path,onComplete) {
	var imgElement = window.document.createElement("img");
	imgElement.src = path;
	imgElement.crossOrigin = "Anonymous";
	imgElement.onload = function() {
		var canvas = window.document.createElement("canvas");
		canvas.width = imgElement.width;
		canvas.height = imgElement.height;
		canvas.getContext("2d",null).drawImage(imgElement,0,0);
		if(image == null) {
			var width = imgElement.width;
			var height = imgElement.height;
			var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
			var this2 = this1;
			this2.setUInt16(0,width);
			this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
			this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
			this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
			this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
			this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
			var i = vision_ds_Image.OFFSET;
			while(i < this2.length) {
				this2.b[i] = 0;
				this2.b[i + 1] = 0;
				this2.b[i + 2] = 0;
				this2.b[i + 3] = 0;
				i += 4;
			}
			image = this2;
		}
		var imageData = canvas.getContext("2d",null).getImageData(0,0,image.getUInt16(0),Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
		var i = 0;
		while(i < imageData.data.length) {
			image.b[i + (vision_ds_Image.OFFSET + 1)] = imageData.data[i];
			image.b[i + (vision_ds_Image.OFFSET + 1) + 1] = imageData.data[i + 1];
			image.b[i + (vision_ds_Image.OFFSET + 1) + 2] = imageData.data[i + 2];
			image.b[i + (vision_ds_Image.OFFSET + 1) + 3] = imageData.data[i + 3];
			i += 4;
		}
		if(onComplete != null) {
			onComplete(image);
		}
	};
};
vision_tools_ImageTools.saveToFile = function(image,pathWithFileName,saveFormat) {
	if(saveFormat == null) {
		saveFormat = 0;
	}
	throw haxe_Exception.thrown(new vision_exceptions_LibraryRequired("format",[],"ImageTools.loadFromFile","function"));
};
vision_tools_ImageTools.addToScreen = function(image,x,y,units) {
	var c = window.document.createElement("canvas");
	c.width = image.getUInt16(0);
	c.height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var ctx = c.getContext("2d",null);
	var imageData = ctx.getImageData(0,0,image.getUInt16(0),Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
	var data = imageData.data;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x1 = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y1 = _g2++;
			var i = (y1 * image.getUInt16(0) + x1) * 4;
			data[i] = image.b[i + (vision_ds_Image.OFFSET + 1)];
			data[i + 1] = image.b[i + (vision_ds_Image.OFFSET + 1) + 1];
			data[i + 2] = image.b[i + (vision_ds_Image.OFFSET + 1) + 2];
			data[i + 3] = 255;
		}
	}
	ctx.putImageData(imageData,0,0);
	c.style.position = "absolute";
	c.style.top = y + units.yUnits != null ? y + units.yUnits : y + "px";
	c.style.left = x + units.xUnits != null ? x + units.xUnits : x + "px";
	window.document.body.appendChild(c);
	return image;
};
vision_tools_ImageTools.getNeighborsOfPixel = function(image,x,y,kernalSize) {
	var neighbors = new vision_ds_Array2D(kernalSize,kernalSize);
	var i = 0;
	var circular = false;
	if(circular == null) {
		circular = false;
	}
	var _g_image = image;
	var _g_roundedDown = kernalSize - 1 >> 1;
	var _g_x = x;
	var _g_y = y;
	var _g_circular = circular;
	var _g_X = -_g_roundedDown;
	var _g_Y = -_g_roundedDown;
	while(_g_X <= _g_roundedDown && _g_Y <= _g_roundedDown) {
		while(true) {
			++_g_Y;
			if(_g_Y > _g_roundedDown) {
				_g_Y = -_g_roundedDown;
				++_g_X;
			}
			var tmp;
			if(_g_circular) {
				var x = _g_X;
				var y = _g_Y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var point1_x = x;
				var point1_y = y;
				var x1 = _g_roundedDown;
				var y1 = _g_roundedDown;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var point2_x = x1;
				var point2_y = y1;
				var x2 = point2_x - point1_x;
				var y2 = point2_y - point1_y;
				tmp = Math.sqrt(x2 * x2 + y2 * y2) > _g_roundedDown;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
		}
		var this1 = _g_image;
		var x3 = _g_x + _g_X;
		var y3 = _g_y + _g_Y;
		var neighbor;
		if(!(x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this2 = [x3,this1.getUInt16(0) - 1];
			var values = this2;
			var max = values[0];
			var _g = 0;
			var _g1 = values.length;
			while(_g < _g1) {
				var i1 = _g++;
				if(values[i1] > max) {
					max = values[i1];
				}
			}
			var this3 = [max,0];
			var values1 = this3;
			var min = values1[0];
			var _g2 = 0;
			var _g3 = values1.length;
			while(_g2 < _g3) {
				var i2 = _g2++;
				if(values1[i2] < min) {
					min = values1[i2];
				}
			}
			var x4 = min;
			var this4 = [y3,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1];
			var values2 = this4;
			var max1 = values2[0];
			var _g4 = 0;
			var _g5 = values2.length;
			while(_g4 < _g5) {
				var i3 = _g4++;
				if(values2[i3] > max1) {
					max1 = values2[i3];
				}
			}
			var this5 = [max1,0];
			var values3 = this5;
			var min1 = values3[0];
			var _g6 = 0;
			var _g7 = values3.length;
			while(_g6 < _g7) {
				var i4 = _g6++;
				if(values3[i4] < min1) {
					min1 = values3[i4];
				}
			}
			var y4 = min1;
			if(!(x4 >= 0 && y4 >= 0 && x4 < this1.getUInt16(0) && y4 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x4;
				var this_y = y4;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y4 * this1.getUInt16(0) + x4) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this6 = value;
			neighbor = this6;
		} else {
			if(!(x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x1 = x3;
				var this_y1 = y3;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
			}
			var position1 = (y3 * this1.getUInt16(0) + x3) * 4;
			position1 += vision_ds_Image.OFFSET;
			var value1 = this1.b[position1] << 24 | this1.b[position1 + 1] << 16 | this1.b[position1 + 2] << 8 | this1.b[position1 + 3];
			if(value1 == null) {
				value1 = 0;
			}
			var this7 = value1;
			neighbor = this7;
		}
		neighbors.inner[i++] = neighbor;
	}
	return neighbors;
};
vision_tools_ImageTools.grayscalePixel = function(pixel) {
	var gray = ((pixel >> 16 & 255) + (pixel >> 8 & 255) + (pixel & 255)) / 3 | 0;
	var Alpha = pixel >> 24 & 255;
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
	color &= -65281;
	color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
	color &= -256;
	color |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_tools_ImageTools.fromJsCanvas = function(canvas) {
	var this1 = new haxe_io_Bytes(new ArrayBuffer(vision_ds_Image.OFFSET + (canvas.width + canvas.height) * 4));
	var image = vision_ds_Image.fromColorByteArrayAndData(this1,canvas.width,canvas.height);
	var imageData = canvas.getContext("2d",null).getImageData(0,0,image.getUInt16(0),Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
	var i = 0;
	while(i < imageData.data.length) {
		image.b[i + (vision_ds_Image.OFFSET + 1)] = imageData.data[i];
		image.b[i + (vision_ds_Image.OFFSET + 1) + 1] = imageData.data[i + 1];
		image.b[i + (vision_ds_Image.OFFSET + 1) + 2] = imageData.data[i + 2];
		image.b[i + (vision_ds_Image.OFFSET + 1) + 3] = imageData.data[i + 3];
		i += 4;
	}
	return image;
};
vision_tools_ImageTools.toJsCanvas = function(image) {
	var c = window.document.createElement("canvas");
	c.width = image.getUInt16(0);
	c.height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var ctx = c.getContext("2d",null);
	var imageData = ctx.getImageData(0,0,image.getUInt16(0),Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
	var data = imageData.data;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var i = (y * image.getUInt16(0) + x) * 4;
			data[i] = image.b[i + (vision_ds_Image.OFFSET + 1)];
			data[i + 1] = image.b[i + (vision_ds_Image.OFFSET + 1) + 1];
			data[i + 2] = image.b[i + (vision_ds_Image.OFFSET + 1) + 2];
			data[i + 3] = 255;
		}
	}
	ctx.putImageData(imageData,0,0);
	return c;
};
vision_tools_ImageTools.fromJsImage = function(image) {
	var canvas = window.document.createElement("canvas");
	canvas.width = image.width;
	canvas.height = image.height;
	canvas.getContext("2d",null).drawImage(image,0,0);
	return vision_tools_ImageTools.fromJsCanvas(canvas);
};
vision_tools_ImageTools.toJsImage = function(image) {
	var canvas = vision_ds_Image.toJsCanvas(image);
	var htmlImage = window.document.createElement("img");
	htmlImage.src = canvas.toDataURL();
	return htmlImage;
};
vision_tools_ImageTools.fromHaxeUIImage = function(image) {
	return vision_tools_ImageTools.fromJsImage(haxe_ui_util_Variant.toImageData(image.get_resource()));
};
vision_tools_ImageTools.toHaxeUIImage = function(image) {
	var huiImage = new haxe_ui_components_Image();
	huiImage.set_width(image.getUInt16(0));
	huiImage.set_height(Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
	huiImage.set_resource(haxe_ui_util_Variant.fromImageData(vision_tools_ImageTools.toJsImage(image)));
	return huiImage;
};
vision_tools_ImageTools.fromHaxeUIImageData = function(image) {
	return vision_tools_ImageTools.fromJsImage(image);
};
vision_tools_ImageTools.toHaxeUIImageData = function(image) {
	return vision_tools_ImageTools.toJsImage(image);
};
var vision_tools__$ImageTools_NeighborsIterator = function(image,x,y,kernalSize,circular) {
	if(circular == null) {
		circular = false;
	}
	this.image = image;
	this.roundedDown = kernalSize - 1 >> 1;
	this.x = x;
	this.y = y;
	this.circular = circular;
	this.X = -this.roundedDown;
	this.Y = -this.roundedDown;
};
$hxClasses["vision.tools._ImageTools.NeighborsIterator"] = vision_tools__$ImageTools_NeighborsIterator;
vision_tools__$ImageTools_NeighborsIterator.__name__ = "vision.tools._ImageTools.NeighborsIterator";
vision_tools__$ImageTools_NeighborsIterator.prototype = {
	roundedDown: null
	,image: null
	,x: null
	,y: null
	,X: null
	,Y: null
	,circular: null
	,next: function() {
		while(true) {
			this.Y += 1;
			if(this.Y > this.roundedDown) {
				this.Y = -this.roundedDown;
				this.X += 1;
			}
			var tmp;
			if(this.circular) {
				var x = this.X;
				var y = this.Y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var point1_x = x;
				var point1_y = y;
				var x1 = this.roundedDown;
				var y1 = this.roundedDown;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var point2_x = x1;
				var point2_y = y1;
				var x2 = point2_x - point1_x;
				var y2 = point2_y - point1_y;
				tmp = Math.sqrt(x2 * x2 + y2 * y2) > this.roundedDown;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
		}
		var this1 = this.image;
		var x = this.x + this.X;
		var y = this.y + this.Y;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this2 = [x,this1.getUInt16(0) - 1];
			var values = this2;
			var max = values[0];
			var _g = 0;
			var _g1 = values.length;
			while(_g < _g1) {
				var i = _g++;
				if(values[i] > max) {
					max = values[i];
				}
			}
			var this2 = [max,0];
			var values = this2;
			var min = values[0];
			var _g = 0;
			var _g1 = values.length;
			while(_g < _g1) {
				var i = _g++;
				if(values[i] < min) {
					min = values[i];
				}
			}
			var x1 = min;
			var this2 = [y,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1];
			var values = this2;
			var max = values[0];
			var _g = 0;
			var _g1 = values.length;
			while(_g < _g1) {
				var i = _g++;
				if(values[i] > max) {
					max = values[i];
				}
			}
			var this2 = [max,0];
			var values = this2;
			var min = values[0];
			var _g = 0;
			var _g1 = values.length;
			while(_g < _g1) {
				var i = _g++;
				if(values[i] < min) {
					min = values[i];
				}
			}
			var y1 = min;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			return this2;
		} else {
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			return this1;
		}
	}
	,hasNext: function() {
		if(this.X <= this.roundedDown) {
			return this.Y <= this.roundedDown;
		} else {
			return false;
		}
	}
	,__class__: vision_tools__$ImageTools_NeighborsIterator
};
var vision_tools_MathTools = function() { };
$hxClasses["vision.tools.MathTools"] = vision_tools_MathTools;
vision_tools_MathTools.__name__ = "vision.tools.MathTools";
vision_tools_MathTools.__properties__ = {get_NaN:"get_NaN",get_POSITIVE_INFINITY:"get_POSITIVE_INFINITY",get_NEGATIVE_INFINITY:"get_NEGATIVE_INFINITY",get_PI_OVER_2:"get_PI_OVER_2",get_PI:"get_PI"};
vision_tools_MathTools.PI = null;
vision_tools_MathTools.NEGATIVE_INFINITY = null;
vision_tools_MathTools.POSITIVE_INFINITY = null;
vision_tools_MathTools.NaN = null;
vision_tools_MathTools.distanceFromRayToPoint2D = function(ray,point) {
	var closestPoint = vision_tools_MathTools.getClosestPointOnRay2D(point,ray);
	var dx = closestPoint.x - point.x;
	var dy = closestPoint.y - point.y;
	var distance = Math.sqrt(Math.pow(dx,2) + Math.pow(dy,2));
	return distance;
};
vision_tools_MathTools.intersectionBetweenRay2Ds = function(ray,ray2) {
	var line1StartX = ray.point.x;
	var line1StartY = ray.point.y;
	var line1EndX = ray.point.x + Math.cos(ray.radians) * 1000;
	var line1EndY = ray.point.y + Math.sin(ray.radians) * 1000;
	var line2StartX = ray2.point.x;
	var line2StartY = ray2.point.y;
	var line2EndX = ray2.point.x + Math.cos(ray2.radians) * 1000;
	var line2EndY = ray2.point.y + Math.sin(ray2.radians) * 1000;
	var result = null;
	var denominator = (line2EndY - line2StartY) * (line1EndX - line1StartX) - (line2EndX - line2StartX) * (line1EndY - line1StartY);
	if(denominator == 0) {
		return result;
	}
	var a = line1StartY - line2StartY;
	var b = line1StartX - line2StartX;
	var numerator1 = (line2EndX - line2StartX) * a - (line2EndY - line2StartY) * b;
	var numerator2 = (line1EndX - line1StartX) * a - (line1EndY - line1StartY) * b;
	a = numerator1 / denominator;
	b = numerator2 / denominator;
	result = new vision_ds_Point2D();
	result.x = line1StartX + a * (line1EndX - line1StartX);
	result.y = line1StartY + a * (line1EndY - line1StartY);
	return result;
};
vision_tools_MathTools.findPointAtDistanceUsingX = function(ray,startXPos,distance,goPositive) {
	if(goPositive == null) {
		goPositive = true;
	}
	distance = Math.abs(distance);
	var x = startXPos;
	var px = ray.point.x;
	var py = ray.point.y;
	var y = ray.slope * startXPos + (px > 0 ? py - ray.slope * px : py + ray.slope * px);
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var start_x = x;
	var start_y = y;
	var x = start_y + 1;
	var x1 = x;
	var px = ray.point.x;
	var py = ray.point.y;
	var y = ray.slope * x + (px > 0 ? py - ray.slope * px : py + ray.slope * px);
	if(y == null) {
		y = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var point1_x = x1;
	var point1_y = y;
	var x = start_x - point1_x;
	var y = start_y - point1_y;
	var step = Math.sqrt(x * x + y * y);
	var diff = distance / step;
	var y = start_y + (goPositive ? diff : -diff);
	var px = ray.point.x;
	var py = ray.point.y;
	return new vision_ds_Point2D((y - (px > 0 ? py - ray.slope * px : py + ray.slope * px)) / ray.slope,y);
};
vision_tools_MathTools.findPointAtDistanceUsingY = function(ray,startYPos,distance,goPositive) {
	if(goPositive == null) {
		goPositive = true;
	}
	distance = Math.abs(distance);
	var px = ray.point.x;
	var py = ray.point.y;
	var x = (startYPos - (px > 0 ? py - ray.slope * px : py + ray.slope * px)) / ray.slope;
	var y = startYPos;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var start_x = x;
	var start_y = y;
	var y = start_x + 1;
	var px = ray.point.x;
	var py = ray.point.y;
	var x = (y - (px > 0 ? py - ray.slope * px : py + ray.slope * px)) / ray.slope;
	var y1 = y;
	if(y1 == null) {
		y1 = 0;
	}
	if(x == null) {
		x = 0;
	}
	var point1_x = x;
	var point1_y = y1;
	var x = start_x - point1_x;
	var y = start_y - point1_y;
	var step = Math.sqrt(x * x + y * y);
	var diff = distance / step;
	var x = start_x + (goPositive ? diff : -diff);
	var px = ray.point.x;
	var py = ray.point.y;
	return new vision_ds_Point2D(x,ray.slope * x + (px > 0 ? py - ray.slope * px : py + ray.slope * px));
};
vision_tools_MathTools.distanceFromLineToPoint2D = function(line,point) {
	var ch = (line.start.y - line.end.y) * point.x + (line.end.x - line.start.x) * point.y + (line.start.x * line.end.y - line.end.x * line.start.y);
	var del = Math.sqrt(Math.pow(line.end.x - line.start.x,2) + Math.pow(line.end.y - line.start.y,2));
	var d = ch / del;
	return d;
};
vision_tools_MathTools.distanceBetweenLines2D = function(line1,line2) {
	var x1 = line1.start.x;
	var y1 = line1.start.y;
	var x2 = line1.end.x;
	var y2 = line1.end.y;
	var x3 = line2.start.x;
	var y3 = line2.start.y;
	var x4 = line2.end.x;
	var y4 = line2.end.y;
	var denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
	var tmp;
	if(x1 == x2 && y1 == y2 || x3 == x4 && y3 == y4) {
		tmp = null;
	} else if(denominator == 0) {
		tmp = null;
	} else {
		var ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;
		var ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;
		if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
			tmp = null;
		} else {
			var x = x1 + ua * (x2 - x1);
			var y = y1 + ua * (y2 - y1);
			tmp = new vision_ds_Point2D(x | 0,y | 0);
		}
	}
	if(tmp != null) {
		return 0;
	}
	var point = line2.start;
	var ch = (line1.start.y - line1.end.y) * point.x + (line1.end.x - line1.start.x) * point.y + (line1.start.x * line1.end.y - line1.end.x * line1.start.y);
	var del = Math.sqrt(Math.pow(line1.end.x - line1.start.x,2) + Math.pow(line1.end.y - line1.start.y,2));
	var d = ch / del;
	var distance1 = d;
	var point = line2.end;
	var ch = (line1.start.y - line1.end.y) * point.x + (line1.end.x - line1.start.x) * point.y + (line1.start.x * line1.end.y - line1.end.x * line1.start.y);
	var del = Math.sqrt(Math.pow(line1.end.x - line1.start.x,2) + Math.pow(line1.end.y - line1.start.y,2));
	var d = ch / del;
	var distance2 = d;
	var point = line1.start;
	var ch = (line2.start.y - line2.end.y) * point.x + (line2.end.x - line2.start.x) * point.y + (line2.start.x * line2.end.y - line2.end.x * line2.start.y);
	var del = Math.sqrt(Math.pow(line2.end.x - line2.start.x,2) + Math.pow(line2.end.y - line2.start.y,2));
	var d = ch / del;
	var distance3 = d;
	var point = line1.end;
	var ch = (line2.start.y - line2.end.y) * point.x + (line2.end.x - line2.start.x) * point.y + (line2.start.x * line2.end.y - line2.end.x * line2.start.y);
	var del = Math.sqrt(Math.pow(line2.end.x - line2.start.x,2) + Math.pow(line2.end.y - line2.start.y,2));
	var d = ch / del;
	var distance4 = d;
	var this1 = [distance1,distance2,distance3,distance4];
	var values = this1;
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var distance = min;
	return distance;
};
vision_tools_MathTools.radiansFromLineToPoint2D = function(line,point) {
	var angle = Math.atan2(line.end.x - line.start.x,line.end.y - line.start.y);
	var angle2 = Math.atan2(point.x - line.start.x,point.y - line.start.y);
	return angle2 - angle;
};
vision_tools_MathTools.intersectionBetweenLine2Ds = function(line1,line2) {
	var x1 = line1.start.x;
	var y1 = line1.start.y;
	var x2 = line1.end.x;
	var y2 = line1.end.y;
	var x3 = line2.start.x;
	var y3 = line2.start.y;
	var x4 = line2.end.x;
	var y4 = line2.end.y;
	var denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
	if(x1 == x2 && y1 == y2 || x3 == x4 && y3 == y4) {
		return null;
	}
	if(denominator == 0) {
		return null;
	}
	var ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;
	var ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;
	if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
		return null;
	}
	var x = x1 + ua * (x2 - x1);
	var y = y1 + ua * (y2 - y1);
	return new vision_ds_Point2D(x | 0,y | 0);
};
vision_tools_MathTools.mirrorInsideRectangle = function(line,rect) {
	var diffSX = line.start.x - rect.x;
	var diffEX = line.end.x - rect.x;
	line.start.x = rect.x + rect.width - diffSX;
	line.end.x = rect.x + rect.width - diffEX;
	return line;
};
vision_tools_MathTools.flipInsideRectangle = function(line,rect) {
	var diffSY = line.start.y - rect.y;
	var diffEY = line.end.y - rect.y;
	line.start.y = rect.y + rect.width - diffSY;
	line.end.y = rect.y + rect.width - diffEY;
	return line;
};
vision_tools_MathTools.invertInsideRectangle = function(line,rect) {
	var diffSY = line.start.y - rect.y;
	var diffEY = line.end.y - rect.y;
	var diffSX = line.start.x - rect.x;
	var diffEX = line.end.x - rect.x;
	line.start.x = rect.x + rect.width - diffSX;
	line.end.x = rect.x + rect.width - diffEX;
	line.start.y = rect.y + rect.width - diffSY;
	line.end.y = rect.y + rect.width - diffEY;
	return line;
};
vision_tools_MathTools.distanceFromPointToRay2D = function(point,ray) {
	var closestPoint = vision_tools_MathTools.getClosestPointOnRay2D(point,ray);
	var dx = closestPoint.x - point.x;
	var dy = closestPoint.y - point.y;
	var distance = Math.sqrt(Math.pow(dx,2) + Math.pow(dy,2));
	return distance;
};
vision_tools_MathTools.distanceFromPointToLine2D = function(point,line) {
	var x = line.end.x - line.start.x;
	var y = line.end.y - line.start.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var middle_x = x;
	var middle_y = y;
	var denominator = middle_x * middle_x + middle_y * middle_y;
	var ratio = ((point.x - line.start.x) * middle_x + (point.y - line.start.y) * middle_y) / denominator;
	if(ratio > 1) {
		ratio = 1;
	} else if(ratio < 0) {
		ratio = 0;
	}
	var x = line.start.x + ratio * middle_x;
	var y = line.start.y + ratio * middle_y;
	var dx = x - point.x;
	var dy = y - point.y;
	return Math.sqrt(dx * dx + dy * dy);
};
vision_tools_MathTools.radiansFromPointToLine2D = function(point,line) {
	var angle = Math.atan2(line.end.x - line.start.x,line.end.y - line.start.y);
	var angle2 = Math.atan2(point.x - line.start.x,point.y - line.start.y);
	return angle2 - angle;
};
vision_tools_MathTools.radiansFromPointToPoint2D = function(point1,point2) {
	var x = point2.x - point1.x;
	var y = point2.y - point1.y;
	return Math.atan2(x,y);
};
vision_tools_MathTools.degreesFromPointToPoint2D = function(point1,point2) {
	var x = point2.x - point1.x;
	var y = point2.y - point1.y;
	return Math.atan2(x,y) * 180 / Math.PI;
};
vision_tools_MathTools.slopeFromPointToPoint2D = function(point1,point2) {
	var x = point2.x - point1.x;
	var y = point2.y - point1.y;
	return Math.tan(Math.atan2(x,y));
};
vision_tools_MathTools.distanceBetweenPoints = function(point1,point2) {
	var x = point2.x - point1.x;
	var y = point2.y - point1.y;
	return Math.sqrt(x * x + y * y);
};
vision_tools_MathTools.getClosestPointOnRay2D = function(point,ray) {
	var vx = point.x - ray.point.x;
	var vy = point.y - ray.point.y;
	var projection = (vx + vy * ray.slope) / (1 + Math.pow(ray.slope,2));
	var x = ray.point.x + projection;
	var y = ray.point.y + projection * ray.slope;
	return new vision_ds_Point2D(x,y);
};
vision_tools_MathTools.clamp = function(value,mi,ma) {
	var this1 = [value,ma];
	var values = this1;
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var this1 = [max,mi];
	var values = this1;
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	return min;
};
vision_tools_MathTools.isBetweenRanges = function(value) {
	var $l=arguments.length;
	var ranges = new Array($l>1?$l-1:0);
	for(var $i=1;$i<$l;++$i){ranges[$i-1]=arguments[$i];}
	var between = false;
	var _g_current = 0;
	var _g_args = ranges;
	while(_g_current < _g_args.length) {
		var range = _g_args[_g_current++];
		if(range.end < range.start) {
			var temp = range.start;
			range.start = range.end;
			range.end = temp;
		}
		between = value > range.start && value > range.end;
		if(between) {
			return true;
		}
	}
	return false;
};
vision_tools_MathTools.isBetweenRange = function(value,min,max) {
	if(value > min) {
		return value > max;
	} else {
		return false;
	}
};
vision_tools_MathTools.wrapInt = function(value,min,max) {
	var range = max - min + 1;
	if(value < min) {
		value += range * ((min - value) / range + 1 | 0);
	}
	return min + (value - min) % range;
};
vision_tools_MathTools.wrapFloat = function(value,min,max) {
	var range = max - min;
	if(value < min) {
		value += range * (min - value) / range + 1;
	}
	return min + (value - min) % range;
};
vision_tools_MathTools.boundInt = function(value,min,max) {
	if(value < min) {
		return min;
	}
	if(value > max) {
		return max;
	}
	return value;
};
vision_tools_MathTools.boundFloat = function(value,min,max) {
	return Math.min(Math.max(value,min),max);
};
vision_tools_MathTools.slopeToDegrees = function(slope) {
	return Math.atan(slope) * 180 / Math.PI;
};
vision_tools_MathTools.slopeToRadians = function(slope) {
	return Math.atan(slope);
};
vision_tools_MathTools.degreesToSlope = function(degrees) {
	return Math.tan(degrees * Math.PI / 180);
};
vision_tools_MathTools.degreesToRadians = function(degrees) {
	return degrees * Math.PI / 180;
};
vision_tools_MathTools.radiansToDegrees = function(radians) {
	return radians * 180 / Math.PI;
};
vision_tools_MathTools.radiansToSlope = function(radians) {
	return Math.tan(radians);
};
vision_tools_MathTools.cotan = function(radians) {
	return 1 / Math.tan(radians);
};
vision_tools_MathTools.cosec = function(radians) {
	return 1 / Math.sin(radians);
};
vision_tools_MathTools.sec = function(radians) {
	return 1 / Math.cos(radians);
};
vision_tools_MathTools.truncate = function(num,numbersAfterDecimal) {
	var multiplier = Math.pow(10,numbersAfterDecimal);
	return Math.round(num * multiplier) / multiplier;
};
vision_tools_MathTools.cropDecimal = function(number) {
	if(number < 0) {
		return Math.ceil(number);
	}
	return Math.floor(number);
};
vision_tools_MathTools.isInt = function(v) {
	return v == (v | 0);
};
vision_tools_MathTools.get_NEGATIVE_INFINITY = function() {
	return -Infinity;
};
vision_tools_MathTools.get_POSITIVE_INFINITY = function() {
	return Infinity;
};
vision_tools_MathTools.get_NaN = function() {
	return NaN;
};
vision_tools_MathTools.get_PI_OVER_2 = function() {
	return Math.PI / 2;
};
vision_tools_MathTools.get_PI = function() {
	return Math.PI;
};
vision_tools_MathTools.abs = function(v) {
	return Math.abs(v);
};
vision_tools_MathTools.acos = function(v) {
	return Math.acos(v);
};
vision_tools_MathTools.asin = function(v) {
	return Math.asin(v);
};
vision_tools_MathTools.atan = function(v) {
	return Math.atan(v);
};
vision_tools_MathTools.atan2 = function(y,x) {
	return Math.atan2(x,y);
};
vision_tools_MathTools.ceil = function(v) {
	return Math.ceil(v);
};
vision_tools_MathTools.cos = function(v) {
	return Math.cos(v);
};
vision_tools_MathTools.exp = function(v) {
	return Math.exp(v);
};
vision_tools_MathTools.floor = function(v) {
	return Math.floor(v);
};
vision_tools_MathTools.log = function(v) {
	return Math.log(v);
};
vision_tools_MathTools.pow = function(v,exp) {
	return Math.pow(v,exp);
};
vision_tools_MathTools.random = function() {
	return Math.random();
};
vision_tools_MathTools.round = function(v) {
	return Math.round(v);
};
vision_tools_MathTools.sin = function(v) {
	return Math.sin(v);
};
vision_tools_MathTools.sqrt = function(v) {
	return Math.sqrt(v);
};
vision_tools_MathTools.tan = function(v) {
	return Math.tan(v);
};
vision_tools_MathTools.ffloor = function(v) {
	return Math.floor(v);
};
vision_tools_MathTools.fceil = function(v) {
	return Math.ceil(v);
};
vision_tools_MathTools.fround = function(v) {
	return Math.round(v);
};
vision_tools_MathTools.isFinite = function(f) {
	return isFinite(f);
};
vision_tools_MathTools.isNaN = function(f) {
	return isNaN(f);
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_Resource.content = [{ name : "haxeui-core/styles/shared/down-arrow-blue.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAECAYAAABCxiV9AAAEHnpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja1VZbkuw2CP3XKrIEAUJIy9GzKjvI8nMk2337WTM3mXzEahs1RoA4gOzGX39O9wcuMmIX1FLMMXpcIYfMBZPkj6vsJ/mwn8dlJ6VHvtt/1sVgCagcf1M85S8+3RQcpGCmd4pSO1/Uxxf5NMDpSdFpSJZHjEk/FeVTkfDxgk4F5diWjznZ/RbqOOi5/ghDWlvDo15cPYWf/gdD9LrCjjAPIfF4soTDAVk3Oyl7UvCaliBokSCCpwqfniAg7+Lk77xyL6hcsydUMr8HReIh4cB4DGa80bd80vfBdzvEd5alnTN+5Md+RewxyOuesyc35zh2V0JESOO5qWuLewbBipDLXhYxDLdibntkjOSQvQ2Qd998xWiUiQHLpECdCk0amzZqcDHwYANlbkBl8ZIYZ27iHVAKa9BkkyxdEpBrgFfA5ZsvtO3mba5RguFOkGSCMjrg558ZHxXNuVKeaAUz844V/OKVBHBjIbeekAIgNK880h3gazxfC1cBgrrDnLDB4uuhoiqdubXySDbQAkEFPWqNrJ8KECLYVjiD3A/kI4lSJG/MRoQ4JuBToCihaLgCAlLlDi8ZBRIBTuJlG2uMtiwrH2z0LAChEsUATZYCrAIaG/LHQkIOFRUNqhrVNGnWEiWGqDFGi6v5FRMLphbNLFm2kiSFpCkmS8mlnErmLGiOmmO2nHLOpcBogeaC1QUCpVSuUkPVGqvVVHMtDenTQtMWm7XkWm6lc5eOPtFjt5567mXQQCqNMHTEYSONPMpEqk2ZYeqM02aaeZYbauQOWF/G91GjCzXeSC1Bu6GGpWaXClrtRBdmQIwDAXFbCCCheWHmE4XAbkG3MEPWoSqU4aUucDotxIBgGMQ66YbdL+QecHMh/Cvc+ELOLeh+Ajm3oPuA3Ctub1Dr67RpXtxGaJXhCqoXlJ8WToXrSGn6tqaprOPtC+q+K/i/URTHmLGImavIhsWxeHJuDCTIhmxaMV1nueL3kbqvBN7QpBWfBPgo6D3iE8OWcXK19pLrkpC6Ob8Yx1K0tg0jlrTaR145MmYYJTzYcL/nzCeKhBw1TFSCKcIStumcvG4R/0LH4UsayOGp8AllpcGyjOpQZ7N0f8dS9gM1dNvR96jbk0wV9SpsK3ocVpVtk7842+ewmbe1D66793u40ZCkeOyl4ARHU/rslvvwgqiO0YXz6NNizjfl7UNuum8k8eENWtbwDUcbPkKgsHcU9Lo9deSIOfNFva3vwfoKLhM+czrHsSFDVGpNyLSEt1yt9xJVUsXXSQZqX/n8TeruGVkNDU657ByR8VygYn2snhln7UiXB9PuZ5rIi6J/7tN/19i2TwswHMRPMApyayo/toSLuq8qSSZOiozM/RuoEB6Ee3ucrwAAAYNpQ0NQSUNDIHByb2ZpbGUAAHicfZE9SMNAHMVfU6WiFQcziDhkqE4tiIo4ShWLYKG0FVp1MLn0C5oYkhQXR8G14ODHYtXBxVlXB1dBEPwAcXRyUnSREv+XFFrEeHDcj3f3HnfvAKFRZZrVNQ5oum2mE3Epl1+RQq8Q0IcwRERlZhnJzEIWvuPrHgG+3sV4lv+5P0e/WrAYEJCIZ5lh2sTrxNObtsF5n1hkZVklPieOmnRB4keuKx6/cS65LPBM0cym54hFYqnUwUoHs7KpEU8RR1RNp3wh57HKeYuzVq2x1j35C8MFfTnDdZojSGARSaQgQUENFVRhI0arToqFNO3HffzDrj9FLoVcFTByzGMDGmTXD/4Hv7u1ipMTXlI4DnS/OM7HKBDaBZp1x/k+dpzmCRB8Bq70tn+jAcx8kl5va5EjYGAbuLhua8oecLkDDD0Zsim7UpCmUCwC72f0TXlg8BboXfV6a+3j9AHIUldLN8DBITBWouw1n3f3dPb275lWfz9tXXKl4mmg1AAADRhpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+Cjx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDQuNC4wLUV4aXYyIj4KIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIgogICAgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIKICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIKICAgIHhtbG5zOkdJTVA9Imh0dHA6Ly93d3cuZ2ltcC5vcmcveG1wLyIKICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICB4bXBNTTpEb2N1bWVudElEPSJnaW1wOmRvY2lkOmdpbXA6Yjk3ZjI0MDgtNjFiYi00MDJkLWEyYzctM2M2NjAzOTJlZWZlIgogICB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjQ1OTBhZjNmLWY0N2EtNDY2NC04MjM1LWJmYjJiNTI3OWUwYSIKICAgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjUwOWE1NTk1LTIyNDItNDg3NS1hN2Y1LWE0MmZjMTVhOWUwNSIKICAgZGM6Rm9ybWF0PSJpbWFnZS9wbmciCiAgIEdJTVA6QVBJPSIyLjAiCiAgIEdJTVA6UGxhdGZvcm09IldpbmRvd3MiCiAgIEdJTVA6VGltZVN0YW1wPSIxNjQ0NjEyMjM0MTE1MDA0IgogICBHSU1QOlZlcnNpb249IjIuMTAuMjQiCiAgIHRpZmY6T3JpZW50YXRpb249IjEiCiAgIHhtcDpDcmVhdG9yVG9vbD0iR0lNUCAyLjEwIj4KICAgPHhtcE1NOkhpc3Rvcnk+CiAgICA8cmRmOlNlcT4KICAgICA8cmRmOmxpCiAgICAgIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiCiAgICAgIHN0RXZ0OmNoYW5nZWQ9Ii8iCiAgICAgIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YWRlZmY5MDctMjQ2NC00YTg2LTljMTMtMTliMTg2NzZkZWY4IgogICAgICBzdEV2dDpzb2Z0d2FyZUFnZW50PSJHaW1wIDIuMTAgKFdpbmRvd3MpIgogICAgICBzdEV2dDp3aGVuPSIyMDIyLTAyLTExVDIxOjQzOjU0Ii8+CiAgICA8L3JkZjpTZXE+CiAgIDwveG1wTU06SGlzdG9yeT4KICA8L3JkZjpEZXNjcmlwdGlvbj4KIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAKPD94cGFja2V0IGVuZD0idyI/Ps+fDsgAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAHdElNRQfmAgsUKzYD7eUCAAAAKUlEQVQI12MM7TrynwEHYGRgYGDApmB1mQ0jI4yDrGB1mQ0jhjHoJgAAJK4NSNCarJ8AAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/down-arrow-bright.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAECAIAAADNpLIqAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAJElEQVQImWP8//8/AwZgeieriib0TlaVCUIhCzEwMDAhc+DSAPKbCiUI9YmvAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/shared/left-arrow-light.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAHCAIAAACgB3uHAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAANklEQVQImWN8K6PCwMDAwMBwfMYEJjiLgYGBCc5iYGBg3LJlCwMMMFlmFCA4DAwMcD7UAAgfAK7lDFY1UPqoAAAAAElFTkSuQmCC"},{ name : "styles/default/main.css", data : "LmJ1dHRvbiwgLmxhYmVsLCAudGV4dGFyZWEsIC50ZXh0ZmllbGQgew0KICAgIGZvbnQtbmFtZTogIkFyaWFsIjsNCiAgICBfX2ZvbnQtc2l6ZTogMTNweDsNCn0NCg0KLmNvbXBvbmVudDpkaXNhYmxlZCB7DQogICAgY3Vyc29yOiBub3QtYWxsb3dlZDsNCn0"},{ name : "haxeui-core/styles/global.css", data : ""},{ name : "haxeui-core/styles/shared/down-arrow-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAECAIAAADNpLIqAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAJElEQVQImWMMCAhgwABMc89cQROae+YKE4RCFmJgYGBC5sClAQxaDmYcnISCAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/shared/help-small.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABsklEQVQ4ja2TS2tTURSFv3POTapoWjAqiFgkotRAin8gcx1IOxQEHTiItFL8B/ojBJuJAx+dWjpxoLOAU7UKiZJBMlBI0YJJqTfXe/d2kJ6Yx0UHukdnr73XOmufB/xjmDRwfr1XDESXMPYCACqfEjWb7dVc/Y8CherunEjmoVGupYgryoZLopXmWr47JVCo7s6pZGoopb+43nZxVPYigUcPdh6Si8cdV845LPCqFfOmI760mASZB8CNoYP59V7RCR98fvKI4dnVw7S7QpQoF/OO61shX/aGIqpOi63KbMMCONHl0XGOHTK8/pxwvxZRfRvjLJzOjZ+dFZYBLIAx9vxotfFNuFfrs7MvVC4FtL4L73dkTEFkwAkARNG0+7xZynDqqOX2i5AwGa8Zg/52gDRT+IQxPNr+SWdfp2rGDDh24MA8B6a6vv5QOnsyCR9MwOZQoL2aq6NsTHZdLjjKZ4JJGNCnrcpsA0begUuilSTIloBFj9192Z+2Be+yM/07PrF+0VzLd10clUGf+HEmyAL6ODsTlj/eOtHzYOpnOlvtLpCwZI1dGAwsdQK2vO3/Gr8AlhyqPdEFcaYAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/default/ranges.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogUkFOR0UNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoucmFuZ2Ugew0KICAgIGJvcmRlcjogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIHBhZGRpbmc6IDFweDsNCiAgICBib3JkZXItcmFkaXVzOiAycHg7DQogICAgZmlsdGVyOiAkbm9ybWFsLWlubmVyLXNoYWRvdzsNCn0NCg0KLnJhbmdlLXZhbHVlIHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYm9yZGVyLXJhZGl1czogMXB4Ow0KfQ0KDQouaG9yaXpvbnRhbC1yYW5nZSB7DQogICAgYmFja2dyb3VuZDogJG5vcm1hbC1iYWNrZ3JvdW5kLWNvbG9yLWVuZCAkbm9ybWFsLWJhY2tncm91bmQtY29sb3Itc3RhcnQgdmVydGljYWw7DQogICAgaW5pdGlhbC13aWR0aDogMTUwcHg7DQogICAgaW5pdGlhbC1oZWlnaHQ6IDhweDsNCn0gICAgDQoNCi5ob3Jpem9udGFsLXJhbmdlIC5yYW5nZS12YWx1ZSB7DQogICAgYmFja2dyb3VuZDokYWNjZW50LWdyYWRpZW50LXN0YXJ0ICRhY2NlbnQtZ3JhZGllbnQtZW5kIHZlcnRpY2FsOw0KICAgIGhlaWdodDogMTAwJTsNCn0NCg0KLmhvcml6b250YWwtcmFuZ2U6ZGlzYWJsZWQgew0KICAgIGJvcmRlci1jb2xvcjogJGRpc2FibGVkLWJvcmRlci1jb2xvcjsNCn0NCg0KLmhvcml6b250YWwtcmFuZ2U6ZGlzYWJsZWQgLnJhbmdlLXZhbHVlIHsNCiAgICBiYWNrZ3JvdW5kOiAkZGlzYWJsZWQtYmFja2dyb3VuZC1jb2xvci1zdGFydCAkZGlzYWJsZWQtYmFja2dyb3VuZC1jb2xvci1lbmQgdmVydGljYWw7DQp9DQoNCi52ZXJ0aWNhbC1yYW5nZSB7DQogICAgYmFja2dyb3VuZDogJG5vcm1hbC1iYWNrZ3JvdW5kLWNvbG9yLWVuZCAkbm9ybWFsLWJhY2tncm91bmQtY29sb3Itc3RhcnQgaG9yaXpvbnRhbDsNCiAgICBpbml0aWFsLXdpZHRoOiA4cHg7DQogICAgaW5pdGlhbC1oZWlnaHQ6IDE1MHB4Ow0KfQ0KDQoudmVydGljYWwtcmFuZ2UgLnJhbmdlLXZhbHVlIHsNCiAgICBiYWNrZ3JvdW5kOiAkYWNjZW50LWdyYWRpZW50LXN0YXJ0ICRhY2NlbnQtZ3JhZGllbnQtZW5kIGhvcml6b250YWw7DQogICAgd2lkdGg6IDEwMCU7DQp9DQoNCi52ZXJ0aWNhbC1yYW5nZTpkaXNhYmxlZCAucmFuZ2UtdmFsdWUgew0KICAgIGJhY2tncm91bmQ6ICRkaXNhYmxlZC1iYWNrZ3JvdW5kLWNvbG9yLXN0YXJ0ICRkaXNhYmxlZC1iYWNrZ3JvdW5kLWNvbG9yLWVuZCBob3Jpem9udGFsOw0KfQ0KDQoudmVydGljYWwtcmFuZ2U6ZGlzYWJsZWQgew0KICAgIGJvcmRlci1jb2xvcjogJGRpc2FibGVkLWJvcmRlci1jb2xvcjsNCn0NCg"},{ name : "haxeui-core/styles/shared/maximize-button-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsEAAA7BAbiRa+0AAABLSURBVChTY/z//z8DKYBxwqINLz+8fSEG5eMFAsISr5iIVQwCYLUN/TOIdhNILROUTTQYkRoY+xeuf/bx3UtJKB8vAEUciUmDgQEAx9IepVPk2PsAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/right-arrow-light.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAHCAIAAACgB3uHAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAOElEQVQImWPYsmXLWxkVCGJiYGA4PmMCAwMDAwMDE4SC8Bm3bNnCAANMcJZlRgETnAWVgbAYGBgAg4cO3PCuD3sAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/sortable-arrows-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAJCAIAAABxOqH0AAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA0UlEQVQIHQHGADn/Ae0cJAAAAAAAAIdYUHmosAAAAAAAAAIAAAAAAACHWFAAAACJWlIAAAAAAAACAAAAh1hQAgICAgICAAAAjV5WAAAAAe0cJAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAI1eVgAAAAAAAAAAAAMDA3CfpwIAAABzoqoAAAADAwMDAwNwn6cAAAACAAAAAAAAc6KqAAAAcJ+nAAAAAAAA2WwUSXgyq8MAAAAASUVORK5CYII"},{ name : "haxeui-core/locale/it/std-strings.properties", data : "c2F2ZT1TYWx2YQ0KeWVzPVPDrA0Kbm89Tm8NCmNsb3NlPUNoaXVkaQ0Kb2s9T0sNCmNhbmNlbD1Bbm51bGxhDQphcHBseT1BcHBsaWNhDQpzZWFyY2g9Q2VyY2hpDQoNCnJlZD1Sb3Nzbw0KZ3JlZW49VmVyZGUNCmJsdWU9Qmx1ZQ0KaHVlPVRvbmFsaXTDoA0Kc2F0dXJhdGlvbj1TYXR1cmF6aW9uZQ0KYnJpZ2h0bmVzcz1MdW1pbm9zaXTDoA0K"},{ name : "haxeui-core/styles/shared/info-large.png", data : ""},{ name : "haxeui-core/styles/default/buttons.css", data : ""},{ name : "haxeui-core/styles/shared/maximize-button-light.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsEAAA7BAbiRa+0AAAA/SURBVChTY2QAgv///4MoogBjXWe/A5AGYWLAASYgQaxiEHBgANrQAOUQBCC1IBtIAiNSA8kRR1LSYGRkZAAA0DsQaJvlZUMAAAAASUVORK5CYII"},{ name : "haxeui-core/locale/es/std-strings.properties", data : "c2F2ZT1HdWFyZGFyDQp5ZXM9U2kNCm5vPU5vDQpjbG9zZT1DZXJyYXINCm9rPU9LDQpjYW5jZWw9Q2FuY2VsYXINCmFwcGx5PUFwbGljYXINCnNlYXJjaD1CdXNjYQ0KDQpyZWQ9Um9qYQ0KZ3JlZW49VmVyZGUNCmJsdWU9QXp1bA0KaHVlPU1hdGl6DQpzYXR1cmF0aW9uPVNhdHVyYWNpw7NuDQpicmlnaHRuZXNzPUx1bWlub3NpZGFkDQo"},{ name : "haxeui-core/styles/default/tabs.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogVEFCQkFSIChUT1ApDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLnRhYmJhciB7DQogICAgcGFkZGluZy1sZWZ0OiAwcHg7DQogICAgcGFkZGluZy1yaWdodDogMHB4Ow0KICAgIGhlaWdodDogYXV0bzsNCiAgICB3aWR0aDogYXV0bzsNCiAgICBib3JkZXItYm90dG9tLXdpZHRoOiAxcHg7DQogICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgYm9yZGVyLXRvcC13aWR0aDogMHB4Ow0KICAgIGNsaXA6IHRydWU7DQp9DQoNCi50YWJiYXIgPiAudGFiYmFyLWNvbnRlbnRzIHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4Ow0KICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIHNwYWNpbmc6IDA7DQp9DQoNCi50YWJiYXItYnV0dG9uIHsNCiAgICBib3JkZXItcmFkaXVzOiAwcHg7DQogICAgYmFja2dyb3VuZDogJHNvbGlkLWJhY2tncm91bmQtY29sb3ItZG93biAkc29saWQtYmFja2dyb3VuZC1jb2xvci1kb3duIHZlcnRpY2FsOw0KICAgIHBhZGRpbmc6IDdweCA4cHg7DQogICAgdmVydGljYWwtYWxpZ246IGJvdHRvbTsNCiAgICBib3JkZXItbGVmdC13aWR0aDogMHB4Ow0KfQ0KDQoudGFiYmFyLWJ1dHRvbiAuaWNvbiB7DQogICAgcG9pbnRlci1ldmVudHM6IG5vbmU7DQp9DQoNCi50YWJiYXItYnV0dG9uLmZpcnN0IHsNCiAgICBib3JkZXItbGVmdC13aWR0aDogMXB4Ow0KfQ0KDQoudGFiYmFyLWJ1dHRvbjpob3ZlciB7DQogICAgYmFja2dyb3VuZDogJHNvbGlkLWJhY2tncm91bmQtY29sb3IgJHNvbGlkLWJhY2tncm91bmQtY29sb3IgdmVydGljYWw7DQogICAgYm9yZGVyLWNvbG9yOiAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCn0NCg0KLnRhYmJhci1idXR0b246ZG93biB7DQogICAgYm9yZGVyOiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQp9DQoNCi50YWJiYXItYnV0dG9uOmFjdGl2ZSB7DQogICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICBib3JkZXItbGVmdC1jb2xvcjogJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgYm9yZGVyLWxlZnQtd2lkdGg6IDBweDsNCn0NCg0KLnRhYmJhci1idXR0b24tc2VsZWN0ZWQuZmlyc3Q6YWN0aXZlIHsNCiAgICBib3JkZXItbGVmdC13aWR0aDogMXB4Ow0KfQ0KDQoudGFiYmFyLWJ1dHRvbi1zZWxlY3RlZCB7DQogICAgYm9yZGVyLXJhZGl1czogMHB4Ow0KDQogICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4Ow0KICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICRzZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvcjsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3I7DQogICAgYm9yZGVyLWxlZnQtd2lkdGg6IDBweDsNCiAgICANCiAgICBib3JkZXItdG9wOiAycHggc29saWQgJGFjY2VudC1jb2xvcjsNCn0NCg0KLnRhYmJhci1idXR0b24tc2VsZWN0ZWQuZmlyc3Qgew0KICAgIGJvcmRlci1sZWZ0LXdpZHRoOiAxcHg7DQp9DQoNCi50YWJiYXItYnV0dG9uLXNlbGVjdGVkOmFjdGl2ZSB7DQogICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogJHNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yOw0KfQ0KDQoudGFiYmFyLXNjcm9sbC1sZWZ0IHsNCiAgICBpY29uOiAkYXJyb3ctbGVmdDsNCiAgICBib3JkZXItcmFkaXVzOiAwOw0KICAgIHBhZGRpbmc6IDVweDsNCn0NCg0KLnRhYmJhci1zY3JvbGwtcmlnaHQgew0KICAgIGljb246ICRhcnJvdy1yaWdodDsNCiAgICBib3JkZXItcmFkaXVzOiAwOw0KICAgIHBhZGRpbmc6IDVweDsNCn0NCg0KLnRhYmJhci1idXR0b24tc2VsZWN0ZWQgLmxhYmVsIHsNCn0NCg0KLnRhYmJhci1idXR0b24tc2VsZWN0ZWQgLmljb24gew0KfQ0KDQoudGFiYmFyLWJ1dHRvbiAudGFiLWNsb3NlLWJ1dHRvbiB7DQogICAgcmVzb3VyY2U6ICRjbG9zZTsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogImNlbnRlciI7DQogICAgY3Vyc29yOiAicG9pbnRlciI7DQogICAgcG9pbnRlci1ldmVudHM6IHRydWU7DQogICAgcGFkZGluZzogM3B4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDJweDsNCn0NCg0KLnRhYmJhci1idXR0b24gLnRhYi1jbG9zZS1idXR0b246aG92ZXIgew0KICAgIHJlc291cmNlOiAkY2xvc2UtaG92ZXI7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNlbGVjdGlvbi1iYWNrZ3JvdW5kLWNvbG9yOw0KfQ0KDQoudGFiYmFyIC50YWJiYXItYnV0dG9uOmRpc2FibGVkIHsNCiAgICBib3JkZXItY29sb3I6ICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KfQ0KDQoudGFiYmFyIC50YWJiYXItYnV0dG9uLXNlbGVjdGVkOmRpc2FibGVkIHsNCiAgICBib3JkZXItY29sb3I6ICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICRzZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvcjsNCn0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogVEFCQkFSIChCT1RUT00pDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLnRhYmJhcjpib3R0b20gew0KICAgIHBhZGRpbmctbGVmdDogMHB4Ow0KICAgIHBhZGRpbmctcmlnaHQ6IDBweDsNCiAgICBoZWlnaHQ6IGF1dG87DQogICAgd2lkdGg6IGF1dG87DQogICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMHB4Ow0KICAgIGJvcmRlci10b3Atd2lkdGg6IDFweDsNCiAgICBib3JkZXItdG9wLWNvbG9yOiAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICBjbGlwOiB0cnVlOw0KfQ0KDQoudGFiYmFyOmJvdHRvbSAudGFiYmFyLWNvbnRlbnRzIHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMHB4Ow0KICAgIGJvcmRlci10b3Atd2lkdGg6IDFweDsNCiAgICBib3JkZXItdG9wLWNvbG9yOiAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICBzcGFjaW5nOiAwOw0KfQ0KDQoudGFiYmFyLWJ1dHRvbjpib3R0b20gew0KICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7DQogICAgYm9yZGVyLWxlZnQtd2lkdGg6IDBweDsNCn0NCg0KLnRhYmJhci1idXR0b24uZmlyc3Qgew0KICAgIGJvcmRlci1sZWZ0LXdpZHRoOiAxcHg7DQp9DQoNCi50YWJiYXItYnV0dG9uLXNlbGVjdGVkOmJvdHRvbSB7DQogICAgYm9yZGVyLXJhZGl1czogMHB4Ow0KDQogICAgYm9yZGVyOiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgYm9yZGVyLXRvcC13aWR0aDogMXB4Ow0KICAgIGJvcmRlci10b3AtY29sb3I6ICRzZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvcjsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3I7DQogICAgYm9yZGVyLWxlZnQtd2lkdGg6IDBweDsNCiAgICANCiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgJGFjY2VudC1jb2xvcjsNCn0NCg0KLnRhYmJhcjpib3R0b20gLnRhYmJhci1idXR0b246YWN0aXZlIHsNCiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgJGFjY2VudC1jb2xvcjsNCiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICBib3JkZXItdG9wOiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgYm9yZGVyLWxlZnQtY29sb3I6ICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KfQ0KDQoudGFiYmFyOmJvdHRvbSAudGFiYmFyLWJ1dHRvbi1zZWxlY3RlZDphY3RpdmUgew0KICAgIGJvcmRlci10b3AtY29sb3I6ICRzZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvcjsNCn0NCg0KLnRhYmJhci1idXR0b24tc2VsZWN0ZWQuZmlyc3Qgew0KICAgIGJvcmRlci1sZWZ0LXdpZHRoOiAxcHg7DQp9DQoNCi50YWJiYXI6Ym90dG9tIC50YWJiYXItYnV0dG9uLXNlbGVjdGVkOmRpc2FibGVkIHsNCiAgICBib3JkZXItY29sb3I6ICRkaXNhYmxlZC1ib3JkZXItY29sb3I7DQogICAgYm9yZGVyLXRvcC1jb2xvcjogJHNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yOw0KfQ0KDQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIFRBQkJBUiAtIFJPVU5ERUQgVEFCUw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5yb3VuZGVkLXRhYnMgLnRhYmJhci1idXR0b24uZmlyc3Qgew0KICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDRweDsNCn0NCi5yb3VuZGVkLXRhYnMgLnRhYmJhci1idXR0b24ubGFzdCB7DQogICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDRweDsNCn0NCg0KLnJvdW5kZWQtdGFicyAudGFiYmFyOmJvdHRvbSAudGFiYmFyLWJ1dHRvbiB7DQogICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMHB4Ow0KICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwcHg7DQp9DQoNCi5yb3VuZGVkLXRhYnMgLnRhYmJhcjpib3R0b20gLnRhYmJhci1idXR0b24uZmlyc3Qgew0KICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDRweDsNCn0NCi5yb3VuZGVkLXRhYnMgLnRhYmJhcjpib3R0b20gLnRhYmJhci1idXR0b24ubGFzdCB7DQogICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDRweDsNCn0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogVEFCVklFVw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi50YWJ2aWV3IHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KfQ0KDQoudGFidmlldyA+IC50YWJ2aWV3LXRhYnMgew0KICAgIG1hcmdpbi10b3A6IDFweDsNCn0NCg0KLnRhYnZpZXc6Ym90dG9tID4gLnRhYnZpZXctdGFicyB7DQogICAgbWFyZ2luLXRvcDogMHB4Ow0KfQ0KDQoudGFidmlldyA+IC50YWJ2aWV3LWNvbnRlbnQgew0KICAgIGJvcmRlcjogJG5vcm1hbC1ib3JkZXItc2l6ZSBzb2xpZCAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICBwYWRkaW5nOiA4cHg7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yOw0KfQ0KDQoudGFidmlldy1jb250ZW50OmRpc2FibGVkIHsNCiAgICBib3JkZXItY29sb3I6ICRkaXNhYmxlZC1ib3JkZXItY29sb3I7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIFRBQlZJRVcgQUxUIFNUWUxFUw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5jb2xsYXBzaWJsZS1sYWJlbHMgLnRhYmJhci1idXR0b24gLmxhYmVsIHsNCiAgICBoaWRkZW46IHRydWU7DQp9DQoNCi5jb2xsYXBzaWJsZS1sYWJlbHMgLnRhYmJhci1idXR0b24tc2VsZWN0ZWQgLmxhYmVsIHsNCiAgICBoaWRkZW46IGZhbHNlOw0KfQ0KDQouZnVsbC13aWR0aC1idXR0b25zIC50YWJiYXItYnV0dG9uLCAuZnVsbC13aWR0aC1idXR0b25zIC50YWJiYXIgPiAudGFiYmFyLWNvbnRlbnRzIHsNCiAgICB3aWR0aDogMTAwJTsNCn0"},{ name : "haxeui-core/styles/shared/close-button-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAABhWlDQ1BJQ0MgcHJvZmlsZQAAKJF9kT1Iw0AcxV9TpVUrCnYQcchQXbQgKuIoVSyChdJWaNXB5NIvaNKQpLg4Cq4FBz8Wqw4uzro6uAqC4AeIm5uToouU+L+k0CLWg+N+vLv3uHsHCLUSU82OCUDVLCMRjYjpzKroe0UX/OjHGHokZuqx5GIKbcfXPTx8vQvzrPbn/hy9StZkgEcknmO6YRFvEM9sWjrnfeIgK0gK8TnxuEEXJH7kuuzyG+e8wwLPDBqpxDxxkFjMt7DcwqxgqMTTxCFF1ShfSLuscN7irJYqrHFP/sJAVltJcp3mMKJYQgxxiJBRQRElWAjTqpFiIkH7kTb+IccfJ5dMriIYORZQhgrJ8YP/we9uzdzUpJsUiACdL7b9MQL4doF61ba/j227fgJ4n4Errekv14DZT9KrTS10BPRtAxfXTU3eAy53gMEnXTIkR/LSFHI54P2MvikDDNwC3Wtub419nD4AKepq+QY4OARG85S93ubd/tbe/j3T6O8HZkByogoVjmQAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAADdcAAA3XAUIom3gAAAAHdElNRQflCQgQLBKUV9OZAAAA9klEQVQY012PTU4CQRCFv6qhh7gWdy6N0XtwAhPwEqzMzIJZ9QYIybAh3sEEPAEXgURPQGCv89PlwjQitavUq/e+J36+vA1qU5X6xWfZgbMZT5c3ztmiTdqxmjIB+mbp2pdl75+oY2ugn7TJRMbT1+vUhZVhjxifTW2DtNu0IbgVwoPAh1ANBMCXZS8eMHaAItwLsq1qHc6K0VH+os6cgejk83wPoFHYTb/EzE6PZkhVudOuETwE9/7LJFuMHcJdx8lbLCjnfDHuu75qLwuqWbqITlWdPPk838+K0VGkej45pzLXJmkKYBPbRSafZQfVeghsNGjxAx6fgSyXIE/yAAAAAElFTkSuQmCC"},{ name : "haxeui-core/locale/fr/std-strings.properties", data : "c2F2ZT1TYXV2ZWdhcmRlcg0KeWVzPU91aQ0Kbm89Tm9uDQpjbG9zZT1GZXJtZXINCm9rPU9LDQpjYW5jZWw9QW5udWxlcg0KYXBwbHk9QXBwbGlxdWVyDQpzZWFyY2g9Q2hlcmNoZQ0KDQpyZWQ9Um91Z2UNCmdyZWVuPVZlcnQNCmJsdWU9QmxldQ0KaHVlPVRlaW50ZQ0Kc2F0dXJhdGlvbj1TYXR1cmF0aW9uDQpicmlnaHRuZXNzPUx1bWlub3NpdMOpDQo"},{ name : "haxeui-core/styles/default/dropdowns.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogRFJPUERPV05TDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLmRyb3Bkb3duIHsNCiAgICBpY29uOiAkYXJyb3ctdXAtZG93bjsNCiAgICBpY29uLXBvc2l0aW9uOiBmYXItcmlnaHQ7DQogICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICBwYWRkaW5nOiA2cHggOHB4Ow0KfQ0KDQouZHJvcGRvd24gLml0ZW1yZW5kZXJlciAubGFiZWwgew0KICAgIGNvbG9yOiAkbm9ybWFsLXRleHQtY29sb3I7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQouZHJvcGRvd246ZG93biB7DQogICAgYm9yZGVyLWNvbG9yOiAkYWNjZW50LWNvbG9yOw0KfQ0KDQouZHJvcGRvd24tcG9wdXAgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRkZWZhdWx0LWJhY2tncm91bmQtY29sb3I7DQogICAgYm9yZGVyOiAxcHggc29saWQgJGFjY2VudC1jb2xvcjsNCiAgICBib3JkZXItdG9wLWNvbG9yOiAkZG93bi1ib3JkZXItY29sb3I7DQogICAgcGFkZGluZzogMXB4Ow0KfQ0KDQouZHJvcGRvd24tcG9wdXAucG9wdXAtZnJvbS1ib3R0b20gew0KICAgIGJvcmRlcjogMXB4IHNvbGlkICRhY2NlbnQtY29sb3I7DQogICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogJGRvd24tYm9yZGVyLWNvbG9yOw0KfQ0KDQouZHJvcGRvd24tcG9wdXAgLmxpc3R2aWV3IC5pdGVtcmVuZGVyZXIgew0KICAgIHBhZGRpbmc6IDZweCA4cHg7DQp9DQoNCi5kcm9wZG93bi1wb3B1cCA+IC5zY3JvbGx2aWV3LA0KLmRyb3Bkb3duLXBvcHVwID4gLnNjcm9sbHZpZXc6YWN0aXZlLA0KLmRyb3Bkb3duLXBvcHVwID4gLmRyb3Bkb3duLXNlYXJjaC1jb250YWluZXIgPiAuc2Nyb2xsdmlldywNCi5kcm9wZG93bi1wb3B1cCA+IC5kcm9wZG93bi1zZWFyY2gtY29udGFpbmVyID4gLnNjcm9sbHZpZXc6YWN0aXZlICB7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGJvcmRlci1yYWRpdXM6IDBweDsNCn0NCg0KLmRyb3Bkb3duLWZpbGxlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJGFjY2VudC1jb2xvcjsNCiAgICBoZWlnaHQ6IDFweDsNCn0NCg0KLmRyb3Bkb3duLXNlYXJjaC1jb250YWluZXIgew0KICAgIHNwYWNpbmc6IDA7DQp9DQoNCi5kcm9wZG93bi1zZWFyY2gtZmllbGQtY29udGFpbmVyIHsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBwYWRkaW5nOiAwcHg7DQp9DQoNCi5kcm9wZG93bi1zZWFyY2gtZmllbGQgew0KICAgIHdpZHRoOiAxMDAlOw0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBib3JkZXItcmFkaXVzOiAwcHg7DQogICAgaWNvbjogJHNlYXJjaDsNCn0NCg0KLmRyb3Bkb3duLXNlYXJjaC1maWVsZC1zZXBhcmF0b3Igew0KICAgIGhlaWdodDogMXB4Ow0KICAgIHdpZHRoOiAxMDAlOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICRkb3duLWJvcmRlci1jb2xvcjsNCn0NCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIE1PQklMRSBWQVJJQU5UUw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5kcm9wZG93bjptb2JpbGUgew0KICAgIG1vZGU6IG1vYmlsZTsNCn0NCg0KLmRyb3Bkb3duLXBvcHVwOm1vYmlsZSB7DQogICAgd2lkdGg6IDc1JTsNCn0NCg"},{ name : "haxeui_classmap", data : "YnkxMDp3aGl0ZW5vaXNleTE4OmZpbHRlcnMuV2hpdGVOb2lzZXkxMDp2aXNpb252aWV3eTEwOlZpc2lvblZpZXd5MTQ6dmVydGljYWxzY3JvbGx5MzM6aGF4ZS51aS5jb21wb25lbnRzLlZlcnRpY2FsU2Nyb2xseTQ6dmJveHkyMzpoYXhlLnVpLmNvbnRhaW5lcnMuVkJveHkzNzp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZ3aGl0ZW5vaXNlUjF5MzI6dXJuJTNBJTNBaGF4ZXVpJTNBJTNBb3JnJTJGdnJ1bGV5MzE6aGF4ZS51aS5jb21wb25lbnRzLlZlcnRpY2FsUnVsZXkzNzp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZ2aXNpb252aWV3UjN5Mzk6dXJuJTNBJTNBaGF4ZXVpJTNBJTNBb3JnJTJGdmVydGljYWxydWxlUjEweTMxOnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRnZib3hSN3kzNjp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZ0ZXh0ZmllbGR5Mjg6aGF4ZS51aS5jb21wb25lbnRzLlRleHRGaWVsZHkzMzp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZzcGFjZXJ5MjU6aGF4ZS51aS5jb21wb25lbnRzLlNwYWNlcnk0ODp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZzb2JlbGVkZ2VkaWZmb3BlcmF0b3J5Mjk6ZmlsdGVycy5Tb2JlbEVkZ2VEaWZmT3BlcmF0b3J5NDU6dXJuJTNBJTNBaGF4ZXVpJTNBJTNBb3JnJTJGc29iZWxlZGdlZGV0ZWN0aW9ueTI2OmZpbHRlcnMuU29iZWxFZGdlRGV0ZWN0aW9ueTQ4OnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRnNpbXBsZWxpbmUyZGRldGVjdGlvbnkyOTpmaWx0ZXJzLlNpbXBsZUxpbmUyRERldGVjdGlvbnkzNDp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZzaGFycGVueTE1OmZpbHRlcnMuU2hhcnBlbnkzNzp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZzY3JvbGx2aWV3eTI5OmhheGUudWkuY29udGFpbmVycy5TY3JvbGxWaWV3eTQ1OnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRnNhbHRhbmRwZXBwZXJub2lzZXkyNjpmaWx0ZXJzLlNhbHRBbmRQZXBwZXJOb2lzZXkzMTp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZydWxleTIzOmhheGUudWkuY29tcG9uZW50cy5SdWxleTQ5OnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRnJvYmVydGVkZ2VkaWZmb3BlcmF0b3J5MzA6ZmlsdGVycy5Sb2JlcnRFZGdlRGlmZk9wZXJhdG9yeTQ1OnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRnJlcGxhY2Vjb2xvcnJhbmdlc3kyNjpmaWx0ZXJzLlJlcGxhY2VDb2xvclJhbmdlc3k1MDp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZwZXJ3aXR0ZWRnZWRpZmZvcGVyYXRvcnkzMTpmaWx0ZXJzLlBlcndpdHRFZGdlRGlmZk9wZXJhdG9yeTQ3OnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRnBlcndpdHRlZGdlZGV0ZWN0aW9ueTI4OmZpbHRlcnMuUGVyd2l0dEVkZ2VEZXRlY3Rpb255MzY6dXJuJTNBJTNBaGF4ZXVpJTNBJTNBb3JnJTJGbm9ybWFsaXpleTE3OmZpbHRlcnMuTm9ybWFsaXpleTQ2OnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRm5lYXJlc3RuZWlnaGJvcmJsdXJ5Mjc6ZmlsdGVycy5OZWFyZXN0TmVpZ2hib3JCbHVyeTM3OnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRm1lZGlhbmJsdXJ5MTg6ZmlsdGVycy5NZWRpYW5CbHVyeTQzOnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRmxpbWl0Y29sb3JyYW5nZXN5MjQ6ZmlsdGVycy5MaW1pdENvbG9yUmFuZ2VzeTU5OnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRmxhcGxhY2lhbm9mZ2F1c3NpYW5lZGdlZGV0ZWN0aW9ueTQwOmZpbHRlcnMuTGFwbGFjaWFuT2ZHYXVzc2lhbkVkZ2VEZXRlY3Rpb255NTI6dXJuJTNBJTNBaGF4ZXVpJTNBJTNBb3JnJTJGbGFwbGFjaWFuZWRnZWRpZmZvcGVyYXRvcnkzMzpmaWx0ZXJzLkxhcGxhY2lhbkVkZ2VEaWZmT3BlcmF0b3J5MzI6dXJuJTNBJTNBaGF4ZXVpJTNBJTNBb3JnJTJGbGFiZWx5MjQ6aGF4ZS51aS5jb21wb25lbnRzLkxhYmVseTMzOnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRmludmVydHkxNDpmaWx0ZXJzLkludmVydHkzMjp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZpbWFnZXkyNDpoYXhlLnVpLmNvbXBvbmVudHMuSW1hZ2V5MzI6dXJuJTNBJTNBaGF4ZXVpJTNBJTNBb3JnJTJGaHJ1bGV5MzM6aGF4ZS51aS5jb21wb25lbnRzLkhvcml6b250YWxSdWxleTQxOnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRmhvcml6b250YWxydWxlUjU5eTMxOnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRmhib3h5MjM6aGF4ZS51aS5jb250YWluZXJzLkhCb3h5MzE6dXJuJTNBJTNBaGF4ZXVpJTNBJTNBb3JnJTJGZ3JpZHkyMzpoYXhlLnVpLmNvbnRhaW5lcnMuR3JpZHkzNjp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZncmF5c2NhbGV5MTc6ZmlsdGVycy5HcmF5c2NhbGV5Mzk6dXJuJTNBJTNBaGF4ZXVpJTNBJTNBb3JnJTJGZ2F1c3NpYW5ibHVyeTIwOmZpbHRlcnMuR2F1c3NpYW5CbHVyeTMyOnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRmVyb2RleTEzOmZpbHRlcnMuRXJvZGV5Mzk6dXJuJTNBJTNBaGF4ZXVpJTNBJTNBb3JnJTJGZHJvcG91dG5vaXNleTIwOmZpbHRlcnMuRHJvcE91dE5vaXNleTMzOnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRmRpbGF0ZXkxNDpmaWx0ZXJzLkRpbGF0ZXkzNDp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZkZWVwZnJ5eTE1OmZpbHRlcnMuRGVlcGZyeXkzNTp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZjb252b2x2ZXkxNjpmaWx0ZXJzLkNvbnZvbHZleTUyOnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRmNvbnZvbHV0aW9ucmlkZ2VkZXRlY3Rpb255MzM6ZmlsdGVycy5Db252b2x1dGlvblJpZGdlRGV0ZWN0aW9ueTM1OnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRmNvbnRyYXN0eTE2OmZpbHRlcnMuQ29udHJhc3R5MzQ6dXJuJTNBJTNBaGF4ZXVpJTNBJTNBb3JnJTJGY29tYmluZXkxNTpmaWx0ZXJzLkNvbWJpbmV5MzU6dXJuJTNBJTNBaGF4ZXVpJTNBJTNBb3JnJTJGY2hlY2tib3h5Mjc6aGF4ZS51aS5jb21wb25lbnRzLkNoZWNrQm94eTQ1OnVybiUzQSUzQWhheGV1aSUzQSUzQW9yZyUyRmNhbm55ZWRnZWRldGVjdGlvbnkyNjpmaWx0ZXJzLkNhbm55RWRnZURldGVjdGlvbnkzMzp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZidXR0b255MjU6aGF4ZS51aS5jb21wb25lbnRzLkJ1dHRvbnkzMDp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZib3h5MjI6aGF4ZS51aS5jb250YWluZXJzLkJveHk0MDp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZibGFja2FuZHdoaXRleTIxOmZpbHRlcnMuQmxhY2tBbmRXaGl0ZXk0Mzp1cm4lM0ElM0FoYXhldWklM0ElM0FvcmclMkZiaWxhdGVyYWxkZW5vaXNleTI0OmZpbHRlcnMuQmlsYXRlcmFsRGVub2lzZXk3OnRvb2x0aXB5MjQ6aGF4ZS51aS50b29sdGlwcy5Ub29sVGlweTk6dGV4dGZpZWxkUjE1eTc6c3RlcHBlcnkyNjpoYXhlLnVpLmNvbXBvbmVudHMuU3RlcHBlcnk2OnNwYWNlclIxN3kyMTpzb2JlbGVkZ2VkaWZmb3BlcmF0b3JSMTl5MTg6c29iZWxlZGdlZGV0ZWN0aW9uUjIxeTIxOnNpbXBsZWxpbmUyZGRldGVjdGlvblIyM3k3OnNoYXJwZW5SMjV5MTA6c2Nyb2xsdmlld1IyN3k2OnNjcm9sbHkyNTpoYXhlLnVpLmNvbXBvbmVudHMuU2Nyb2xseTE4OnNhbHRhbmRwZXBwZXJub2lzZVIyOXk0OnJ1bGVSMzF5MjI6cm9iZXJ0ZWRnZWRpZmZvcGVyYXRvclIzM3kxODpyZXBsYWNlY29sb3JyYW5nZXNSMzV5OTpwcmVsb2FkZXJ5MTc6aGF4ZS51aS5QcmVsb2FkZXJ5MjM6cGVyd2l0dGVkZ2VkaWZmb3BlcmF0b3JSMzd5MjA6cGVyd2l0dGVkZ2VkZXRlY3Rpb25SMzl5OTpub3JtYWxpemVSNDF5MTk6bmVhcmVzdG5laWdoYm9yYmx1clI0M3kxMDptZWRpYW5ibHVyUjQ1eTg6bWFpbnZpZXd5ODpNYWluVmlld3k4Omxpc3R2aWV3eTI3OmhheGUudWkuY29udGFpbmVycy5MaXN0Vmlld3kxNjpsaW1pdGNvbG9ycmFuZ2VzUjQ3eTMyOmxhcGxhY2lhbm9mZ2F1c3NpYW5lZGdlZGV0ZWN0aW9uUjQ5eTI1OmxhcGxhY2lhbmVkZ2VkaWZmb3BlcmF0b3JSNTF5NTpsYWJlbFI1M3kxMjppdGVtcmVuZGVyZXJ5MjU6aGF4ZS51aS5jb3JlLkl0ZW1SZW5kZXJlcnk2OmludmVydFI1NXkyMDppbnRlcmFjdGl2ZWNvbXBvbmVudHkzMzpoYXhlLnVpLmNvcmUuSW50ZXJhY3RpdmVDb21wb25lbnR5NTppbWFnZVI1N3kxNjpob3Jpem9udGFsc2Nyb2xseTM1OmhheGUudWkuY29tcG9uZW50cy5Ib3Jpem9udGFsU2Nyb2xseTE0Omhvcml6b250YWxydWxlUjU5eTQ6aGJveFI2Mnk0OmdyaWRSNjR5OTpncmF5c2NhbGVSNjZ5MTI6Z2F1c3NpYW5ibHVyUjY4eTEwOmZpbHRlcnZpZXd5MTg6ZmlsdGVycy5GaWx0ZXJWaWV3eTE0OmZpbHRlcnBhcmFtc3VpeTIyOmZpbHRlcnMuRmlsdGVyUGFyYW1zVUl5NTplcm9kZVI3MHkxMjpkcm9wb3V0bm9pc2VSNzJ5ODpkcm9wZG93bnkyNzpoYXhlLnVpLmNvbXBvbmVudHMuRHJvcERvd255NjpkaWxhdGVSNzR5NzpkZWVwZnJ5Ujc2eTg6Y29udm9sdmVSNzh5MjU6Y29udm9sdXRpb25yaWRnZWRldGVjdGlvblI4MHk4OmNvbnRyYXN0UjgyeTk6Y29tcG9uZW50eTIyOmhheGUudWkuY29yZS5Db21wb25lbnR5Nzpjb21iaW5lUjg0eTExOmNvbGxhcHNpYmxleTExOkNvbGxhcHNpYmxleTEzOmNoZWNrYm94dmFsdWV5MzI6aGF4ZS51aS5jb21wb25lbnRzLkNoZWNrQm94VmFsdWV5ODpjaGVja2JveFI4Nnk2OmNhbnZhc3kyNTpoYXhlLnVpLmNvbXBvbmVudHMuQ2FudmFzeTE4OmNhbm55ZWRnZWRldGVjdGlvblI4OHkxMjpjYWxlbmRhcnZpZXd5MzE6aGF4ZS51aS5jb250YWluZXJzLkNhbGVuZGFyVmlld3k4OmNhbGVuZGFyeTI3OmhheGUudWkuY29tcG9uZW50cy5DYWxlbmRhcnk2OmJ1dHRvblI5MHkzOmJveFI5MnkxMzpibGFja2FuZHdoaXRlUjk0eTE2OmJpbGF0ZXJhbGRlbm9pc2VSOTZ5MTc6YmFzaWNpdGVtcmVuZGVyZXJ5MzA6aGF4ZS51aS5jb3JlLkJhc2ljSXRlbVJlbmRlcmVyaA"},{ name : "haxeui-core/styles/shared/check-blue.png", data : ""},{ name : "haxeui-core/styles/shared/check-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAA3XAAAN1wFCKJt4AAAAB3RJTUUH5QITChsNaCG5cQAAAS5JREFUKM+NkDFLw1AUhb/3DG0Q6pBOdSgI4tBRsaCTP0EcHeSBEpAQkt2lggiKUGg6WMRVhGziILg4CRUnh+KibiVLl06lmPdcglRsrXe5nMP9uJwj+Md4nrckpVwvFotX1rRj3/fnhBD3QLnX6yGnAVLKU6AMDIGnP4EwDDeMMW4mj6Io6kwEXNedTdP0AhDAi+M4JwATM9i2fQwsAp9a691arTYEsIIgWDXG3Akhbrrd7l4cx2kYhmtaaz9jz5rN5vN3JmPMAuAYY1SpVDpXStla60tAAq/9fv9w9PNMu93uVKvVeSHECrCcz+e3gAqggc1Wq/XxozXAJEmyD1xnXiXbUaPRePxVM0Acx+lgMNgBbjP/LZfLHYwrQ4wKpZRdKBS2Lct6qNfr7+OAL7OwYq6nyWzXAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/shared/down-arrow-square-light.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAIAAABLMMCEAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAMUlEQVQImWN8K6PCgAGYMIUYGBgYt2zZgkWtZUYBmpBlRgEThEIWQpgL4cClGbG6AQAStwro4kB3hAAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/shared/maximize-button-white.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsEAAA7BAbiRa+0AAAA+SURBVChTY/z//z8DKYAJiPuBGKSLGNwPsgHEIB6QogGkFmYDI0SIIPgP8gNJYLhoaABiWMQQwhNITBoMDAC+tC0XTMGbOQAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/shared/minimize-button-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAAtSURBVChTY/z//z8DKYAJShMNRjUQA2ivAR7TjRNm4o3y+oJ0RhBNYtJgYAAA02UNDbDaPdYAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/minimize-button-blue.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAAtSURBVChTY/z//z8DKYAJShMNRjUQA2ivAR7TM3bcxhvlGR6qjCCaxKTBwAAA44UNDW2qEosAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/right-arrow-square-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAIAAABLMMCEAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAMUlEQVQImWN8K6PCwMCQbKIz98wVBhhggrOSTXSwiCJLoIjCJdBFIaYzYQqhiCK7AQAMqA07hk2gSAAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/default/tooltips.css", data : "LnRvb2x0aXAgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICR0b29sdGlwLWJhY2tncm91bmQtY29sb3I7DQogICAgYm9yZGVyOiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgZmlsdGVyOiBkcm9wLXNoYWRvdygxLCA0NSwgIzAwMDAwMCwgMC4wNSwgNiwgMSwgMzAsIDM1LCBmYWxzZSk7DQogICAgYm9yZGVyLXJhZGl1czogMnB4Ow0KICAgIHBhZGRpbmc6IDRweCA1cHg7DQogICAgbWFyZ2luLWxlZnQ6IDBweDsNCiAgICBtYXJnaW4tdG9wOiAzMHB4Ow0KfQ0K"},{ name : "haxeui-core/styles/shared/collapsed-blue.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAADq3pUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja7VZbcuwoDP1nFbMES0JILAfzqJodzPLngN1OutOZSm567tc1ZSQDlsQ54hH6P3+P8Bce3nQLUc1TTmnDE3PMXKD4djxl1bTFVZ8f2025aw9XB6NJIOX49HSOv7XTdmeJCjR9Z8jr2bHfd+R42vcHQ6cjmRExlHYayqch4aODTgPlmNaWstv7Kez9kO02Ez/eMKtxw8QO8fgdDeg1hR9h7kKyoWaJRwAyXw5SllLQDThQC3QWXbWdkQCQZzht76IKj6xcGn3S/kCKpKM9oOEezHTJp+2kz8EPC+J3nqVenu/a65uLO5AXxqN5GKMfsysxAdJ0Tuo2laVh4A7IZf2WUAyvQrdVMooHZG8F5Q0ud5RKmRi0DIrUqNCgvmSlihAjdzZI5sqy2lyMM1fZAniKs9BgkyxNHGxV0Cto5SsWWn7zclfJ4bgRRjLBGB3082vKp4bGmClPtPmFFeLiuSgQxmRu1hgFQmjc8kgXwLfy+ExeBQzqgtkxwbLth4ld6cytmUeyiBYMVMhjrZG10wAggm9FMMj9SFsiUUq0GbMRAUcHPwWGHIuGd1BAqtwQJUeRBHKcp2/8Y7TGsvLRjD0LRKgkMVCTpYCriI0N+WPRkUNFRaOqJjV1zVqSpJg0pWRpbn7FxKKpJTNzy1ZcPLp6cnMPnr1kzoLNUXPKlj3nXAqcFlgu+LtgQCk777LHXfe02+573ktF+tRYtaZq1UPNtTRu0rBPtNSsecutdOpIpR679tSte8+9DKTakBGHjjRs+MijXKxROGj9UL7OGt1Y48XUHGgXa/jV7GaC5naikzMwxpHAuE0GkNA8OducYuQwqZucbZmxKpQRpU5yGk3GwGDsxDro4u6NuTveQow/4o1vzIVJ3SuYC5O6T5j7yNsT1lpZu56ExdBchhPUTbD8MKB7YS/zUPuyDN/94Y+hVxsaSOqlQpEq0q3ML967+bCn9sKLAnpuCHGUMyCcvJGO9sT/FdlvjWhbUeCMXzI7DamNopJCsT1NNQadlzQoP5XPDOEkakudR1LH3Xd1bJfMqxPH2HvIwkj1FRB5+C5Eb/JMtbld9Glo/pCH4NbxyQ9fk+Fjh3RP59Qd96RPZ6TXeDvon1jVH0MVvg3RLc83eNeD3Ip7XWj+yO6vyfChgwZuGkfe4sx0v8+ylT35bcFdiISXLLSnhn5l6f/vEX13d5wyvCigP4Z+hyFcbHL4F54nyj1078dQAAABg2lDQ1BJQ0MgcHJvZmlsZQAAeJx9kT1Iw0AcxV9TpaIVBzOIOGSoTi2IijhKFYtgobQVWnUwufQLmhiSFBdHwbXg4Mdi1cHFWVcHV0EQ/ABxdHJSdJES/5cUWsR4cNyPd/ced+8AoVFlmtU1Dmi6baYTcSmXX5FCrxDQhzBERGVmGcnMQha+4+seAb7exXiW/7k/R79asBgQkIhnmWHaxOvE05u2wXmfWGRlWSU+J46adEHiR64rHr9xLrks8EzRzKbniEViqdTBSgezsqkRTxFHVE2nfCHnscp5i7NWrbHWPfkLwwV9OcN1miNIYBFJpCBBQQ0VVGEjRqtOioU07cd9/MOuP0UuhVwVMHLMYwMaZNcP/ge/u7WKkxNeUjgOdL84zscoENoFmnXH+T52nOYJEHwGrvS2f6MBzHySXm9rkSNgYBu4uG5ryh5wuQMMPRmyKbtSkKZQLALvZ/RNeWDwFuhd9Xpr7eP0AchSV0s3wMEhMFai7DWfd/d09vbvmVZ/P21dcqXiaaDUAAANGGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNC40LjAtRXhpdjIiPgogPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iCiAgICB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIgogICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICAgeG1sbnM6R0lNUD0iaHR0cDovL3d3dy5naW1wLm9yZy94bXAvIgogICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgIHhtcE1NOkRvY3VtZW50SUQ9ImdpbXA6ZG9jaWQ6Z2ltcDoxMGUxMWRlMi0wNTI1LTQwM2ItOTZhYi1jODYxZDZmMTlhMGEiCiAgIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NjIzZTNmZWMtYzg5Yi00MGVhLTljNjktMzFjYTgwODgwMGMyIgogICB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6MmM0NTNkMzQtNmI5Mi00NDJjLTlhY2ItMTgyNWYyNzQ0NjFhIgogICBkYzpGb3JtYXQ9ImltYWdlL3BuZyIKICAgR0lNUDpBUEk9IjIuMCIKICAgR0lNUDpQbGF0Zm9ybT0iV2luZG93cyIKICAgR0lNUDpUaW1lU3RhbXA9IjE2NDQ1ODIzMjkxMjA3NDQiCiAgIEdJTVA6VmVyc2lvbj0iMi4xMC4yNCIKICAgdGlmZjpPcmllbnRhdGlvbj0iMSIKICAgeG1wOkNyZWF0b3JUb29sPSJHSU1QIDIuMTAiPgogICA8eG1wTU06SGlzdG9yeT4KICAgIDxyZGY6U2VxPgogICAgIDxyZGY6bGkKICAgICAgc3RFdnQ6YWN0aW9uPSJzYXZlZCIKICAgICAgc3RFdnQ6Y2hhbmdlZD0iLyIKICAgICAgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpiM2YwMzU2NS0xNWQzLTQ4MGEtOGUxYi1kMmZlZTM3NDZmMmMiCiAgICAgIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkdpbXAgMi4xMCAoV2luZG93cykiCiAgICAgIHN0RXZ0OndoZW49IjIwMjItMDItMTFUMTM6MjU6MjkiLz4KICAgIDwvcmRmOlNlcT4KICAgPC94bXBNTTpIaXN0b3J5PgogIDwvcmRmOkRlc2NyaXB0aW9uPgogPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8P3hwYWNrZXQgZW5kPSJ3Ij8+OWQ6JAAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAAN1wAADdcBQiibeAAAAAd0SU1FB+YCCwwZHVAUuvsAAAB7SURBVDjLY2AYviCq75gyMeqYcEkwMjIcjeo7Zky2AQwMDOKMjAwHY/qPe5JrAAMDAwP3f4b/G6L7jkWRawADAwMDGwMjw5LYCcfLyTUAL2AhQs0vhv8MiYsLLZeRY8BXRgbG0CVFltvJccHL//8ZvJcWWZ6laUIaBgAAEBYdvIFAlrEAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/info-medium.png", data : "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAACr0lEQVRYhe2XPUxTURiGn+/ctkKkQAxJERu1QkxcUJnAXVYSjG51UpEGTZx0kcQQBzcNFCW44axhddDERRYRFwfDryk/AhILJMLtvfc4SKG/cCkti77TyXd+njffPefc78C/Lilk0tmB1ZqErepESdB20IatY5vizM12Vf4smYH6aLxBiwpraAPO5xk2Jpph5bGHxjuqJ4piIDS4HsDS3WhuAl6XfhNoBpSiZ6LTv1iwgVMvVluUI6+BWpfgTC3jcGWqy/8h3wCVryP0fO2acuT9AeAANSjehvrXruYbkDMD9dHVS47IO+DIAeCpMnG4nCsTWQZCg+sBTP0FIVAkeFILhkXj+F3/Umow+xNYutsNvMInPGjxcb/Zx1Gvq8NUa3t4mBlMm1kfjTc4or7iYrc/aPFx64IPgIHPJk9GTDcmTBv73PdI9WQykJYBB3XdDRxAazejsuRTYoRTA560bqHN7Up9nxI523tJNG3Aox3klv5er7KUc1ZxpRM+pyZ2o2oFUjJgWioo4j6vtRVCU8AAYPSHzcK667niNY0gsAIpe0CLHHdNB5oCBn2tZfS1lm0bcSutqUu2tw2ILnBbFSKF3mkmDRjMHxrfYi7LgGk5sUPia7Pcns0ysFVMjB2CgdHkCUgzACCa4ZLjJZ2RZkB57CHA1Z1aoEzHsl+l+8lQKLrWi9BVCrrA08mI/15qLOtvqBQ9wEIJ+PMeQz/O4mUGJjr9i47S7cBmEeEbGqf9W0fl8p4GAGZuV34EwkUysYEmPB2pGsnVuWslcbo/3iyoNxReF85rnPZ8cNilKAWYjlSNGBaNQC/7Ox2mCM+8hm7cDQ77eJic7P91RokR3vqfX8y5mDDqaIa1bQ/N3KmecrNuQU+z4Mv4Md9v44RtSBDAsHXMLLdnU2+4/3KrPzu548SSV/k0AAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/shared/check-bright.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAC7npUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja7ZZRktsgDIbfOUWPYEkIieNgMDO9QY/fH7DdTXZ3Zjvdl87EJEAU+AX6BEk4fv3s4QceyhZDVPOUU9rwxBwzF3R8W0+ZNW1x1uupZ0uP9nB/wTAJWlkfPZ3jLzvdAqsp6OkbIT+FaH/8IsdT35+ETkcyVsTotFMon0LC6ws6Bcra1pay29st7Mdqz/krDD62hqpfMbHVPH+Ohug1hR9hPoRkQ80S1wJkvDlIQSfOmnmaZt9Qk9C5EgTkozhtb1YV3lG5evSJ/QmKpGUPMDwGM93th3bSj4MfZojfeJZ6e36wm9wuHoI8Y9ybh96PtbsSE0Kazk1dW5k9DNwRcpnTEorhrejbLBnFA7K3AnlDYu4olTIxsHSK1KhQp2O2lSqWGPlgQ8tcWabNxThzlS2ATRyFOptkaeLgVoFXYOV7LTT95umuksNxI4xkghgt/Pw95VOh3kfKE21+xwrr4nEosIxBbtQYBSDUrzzSGeCrPD+Dq4CgzjA7Nli2fUnsSmdujTySCVowUNGus0bWTgGECL4Vi0GmR9oSiVKizZiNCHF08CkQchwa3oGAVLlhlRxFEuA4D9+YYzTHsvIy484CCJWEg+QAVMBqXGzIH4uOHCoqGlU1qalr1pIkxaQpJUvj8ismFk0tmZlbtuLi0dWTm3vw7CVzFlyOmlO27DnnUuC0QLlgdsGAUnbeZY+77mm33fe8l4r0qbFqTdWqh5pradyk4Z5oqVnzlls56EAqHfHQIx12+JGP0pFqXXrs2lO37j33clOjsLC+K1+nRhc1nqTGQLupYarZJUHjOtHBDMQ4EojbIICE5sFsc4qRw0A3mG2ZcSqUsUodcBoNYiAYD2LtdLP7Q+6BW4jxn7jxRS4MdN9BLgx0n5B7z+0Daq3MH00Jk9A4hiOom+D4YVBhxwu/SV9vw99OeAm9hF5CL6GX0EvoJfTfCEnHn4eMP+m/Abqro1P5gvhwAAABg2lDQ1BJQ0MgcHJvZmlsZQAAeJx9kT1Iw0AcxV/TlopUHMwg4pChOlkQFXGUKhbBQmkrtOpgcukXNDEkKS6OgmvBwY/FqoOLs64OroIg+AHi6OSk6CIl/i8ptIjx4Lgf7+497t4BQrPGNCs0Dmi6bWaSCSlfWJEirwhBgIgwYjKzjFR2IQff8XWPAF/v4jzL/9yfo08tWgwISMSzzDBt4nXi6U3b4LxPLLKKrBKfE4+ZdEHiR64rHr9xLrss8EzRzGXmiEViqdzFSheziqkRTxHHVE2nfCHvscp5i7NWq7P2PfkLo0V9Oct1msNIYhEppCFBQR1V1GAjTqtOioUM7Sd8/EOuP00uhVxVMHLMYwMaZNcP/ge/u7VKkxNeUjQBhF8c52MEiOwCrYbjfB87TusECD4DV3rHv9EEZj5Jb3S02BHQvw1cXHc0ZQ+43AEGnwzZlF0pSFMolYD3M/qmAjBwC/Suer2193H6AOSoq6Ub4OAQGC1T9prPu3u6e/v3TLu/HzZ7co91pPc1AAANGGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNC40LjAtRXhpdjIiPgogPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iCiAgICB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIgogICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICAgeG1sbnM6R0lNUD0iaHR0cDovL3d3dy5naW1wLm9yZy94bXAvIgogICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgIHhtcE1NOkRvY3VtZW50SUQ9ImdpbXA6ZG9jaWQ6Z2ltcDplNzljMjQ3Zi00OWY1LTRhZDktODI0ZS02ODI5NDY4ZWVmMDYiCiAgIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MDIyZmM3MTctMWE3Yi00YWYyLWI0ZDMtZDUwMDRjZjU0YmU5IgogICB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6ZjVlZTBmMGQtODAxZC00NTVmLWI2ZTYtNzllMTZiZGJhZTBmIgogICBkYzpGb3JtYXQ9ImltYWdlL3BuZyIKICAgR0lNUDpBUEk9IjIuMCIKICAgR0lNUDpQbGF0Zm9ybT0iV2luZG93cyIKICAgR0lNUDpUaW1lU3RhbXA9IjE2NDg5MzAwMzIyNzQxNDkiCiAgIEdJTVA6VmVyc2lvbj0iMi4xMC4yNCIKICAgdGlmZjpPcmllbnRhdGlvbj0iMSIKICAgeG1wOkNyZWF0b3JUb29sPSJHSU1QIDIuMTAiPgogICA8eG1wTU06SGlzdG9yeT4KICAgIDxyZGY6U2VxPgogICAgIDxyZGY6bGkKICAgICAgc3RFdnQ6YWN0aW9uPSJzYXZlZCIKICAgICAgc3RFdnQ6Y2hhbmdlZD0iLyIKICAgICAgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpjN2RiNzZkOS1mNDJiLTQ3MmItYWI1YS0xOTVjZGU2MTk1MzUiCiAgICAgIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkdpbXAgMi4xMCAoV2luZG93cykiCiAgICAgIHN0RXZ0OndoZW49IjIwMjItMDQtMDJUMjI6MDc6MTIiLz4KICAgIDwvcmRmOlNlcT4KICAgPC94bXBNTTpIaXN0b3J5PgogIDwvcmRmOkRlc2NyaXB0aW9uPgogPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8P3hwYWNrZXQgZW5kPSJ3Ij8+zJcIJwAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAAN1wAADdcBQiibeAAAAAd0SU1FB+YEAhQHDA6Y7TQAAAClSURBVCjPjdExToJBEIbhIQj5o4lHoKCgsJZCK09BbbgHtS0lgYLSA1hyCgq10Ct4AELgoWASkITsfs1mZ993MpONqAgGeEX3pgK+j4hVRPSisvvMMRs8lOAX7FOYlOBb/CS8RrckTBPe4vH8YYg/LNHO2hN2Kbxddho5ZYEGX3n/RnMptDA/kz7z3OH52rxtvPufaWnJDj4S/sVdzSc1GKN/jTkAigfW4fXHmp4AAAAASUVORK5CYII"},{ name : "haxeui-core/locale/de/std-strings.properties", data : "c2F2ZT1TcGVpY2hlcm4NCnllcz1KYQ0Kbm89TmVpbg0KY2xvc2U9U2NobGllc3Nlbg0Kb2s9T0sNCmNhbmNlbD1BYmJyZWNoZW4NCmFwcGx5PUFud2VuZGVuDQpzZWFyY2g9U3VjaGUNCg0KcmVkPVJvdA0KZ3JlZW49R3LDvG4NCmJsdWU9QmxhdQ0KaHVlPUZhcmJ0b24NCnNhdHVyYXRpb249U8OkdHRpZ3VuZw0KYnJpZ2h0bmVzcz1IZWxsaWdrZWl0DQo"},{ name : "haxeui-core/styles/default/haxeui.png", data : "iVBORw0KGgoAAAANSUhEUgAAAIgAAACICAMAAAALZFNgAAAC7lBMVEUAAACxubtjcotcaIKYmKs9RWc9Sl9jcYuutME+SGKstMPHyNhhcIrBxdNCT2esssBgbIiGiaLAwM56hZ5jb4zGydqyt8V7hJs6SF9hbYlfaYTGxtatssGmrb09SWB/iJ5/h56/wdFha4g+TWRhbIe0uMdhbYhue5dibonDxNXGx9lfbIU+TGOwtcM/TWXM1+h8hZy5vMumq7vBw9RvfJezuMfGyNaAiJ+Bi6NhbYhvfJfGx9g8S2Cpr71DUGh9h501Xotli7iiqbp8hZ2ytsV2gZg+TGNJdq55g5p/h569v89vfJZsdpLK1OWxtsRtepU8S2M7SmE9TGQ8SmHKyt26vs1+iJ5jb4tRXXU4V3s9VnZhbIfExddhbIdIVW3DxNWjqbtwfJWkqrtwe5ZgbIWkqbmmq7yCi6Ccss3N2OmrscBOW3M9TGO4u8uytsWus8JbZ4FKV298hZtWY3uqxOB7hZujqLlQXXW3vMtSXnU8Wn49S2KsscBseJTHyNnIyNifpbZve5VkibREUmp/iqGtssHHyNlGU2pkd5d/iqCkqrpRX3dib4mswdrEx9ebo7PFxtc+XYNufZmQmK2uv9S4vc+1uclUYXk6SWGxtsSutcNteZRebIW4u8tDd7JYe6k3VXmAjqWKk6iAiaBWY3uOl6pAdrSswdqtwdubsMuIlKtjboeQmKydtM+ZrclRd6dJYYGnr8B8h51UYnlJV3CmuNCPl6u+zeHM1uZjb4dga4Q+aZjG1OeWsM9mjbtTf7ONqMlNerBvkbtNaY9Yc5mUna+nv9qlu9Y4UHCLpMKKpMNomc08drVRiMR+p9OUttszZp2pxOLP3u9nmMxtnM5BerlckMlyoNBSh8Gbut3G2OyRtNqGrNbO3e5wns99ptJQhsCYuNxUicJ9ptOStdujwOBYjcdKgbxnl8tgksg6c7A1aJ+4z+edvN5kk8c2a6NEebM8cKiwyeRLgb03b6qbu944bqhMgryyyuWdu96j3pigAAAAy3RSTlMAAwQHBQUNCQcJDw8NBRULEAoJEBgLGRgfFCMYJBcRMCNrMSxYMSkkQTEjHFBEPfFEIyBWMisUFA5rQz8ZFGU+8vEsHWtYJPFsTkQsIOJWVUg4MSoeHVY3KsGjY19RUE46bFVNR0MyKvHwa2VZV049PDs3Nf5jTUs/HcBhVj02KGFg625rYC0fl3hpQy7vhHdGuHof1IliXkE1emZMN/7TvJdlXlU6/vLw7JVvSPDp1ayVi3Fb0VTx24V29/T09PTy7unBjYn06pPnxN39F5cAAAyOSURBVHjarNl5bIthHAdw64oqdZQ56xpzz2zUXWSOOOY29zGjc2/DzFBMGHHf9xFn3OK+ibhFHBUhrSORGH+0oo2I+M/v97zv26ft8x71vv3+tWTp+sn393vfvutTgiZGPiVUJQaj0+ligqPDiP1NqtCbTCZ9aEwQvSoLvCO+qV40aMHfizhMBoPBbDZXCI8ZAr8CzX9Z4F2IIbaSWEqXjoWQYsIYegMSjMEpC+F+ijMix0ApymUQBb5le0xlJuXKlUMMUoIr1BsMqLDZamOqhqW2zWYzGgEDvVCKAiMWqgBBO0g1kdRohxikUAk6KlUw2kCQArGEJBmSnp4OmrZljXEVzCZCUW6DKIDQvXv3eiFpjElLS2vevEqNithKSUGCY4E2UGFJTU3NwiSExGq1WiyAqW0jtSBFnmEABijQMGXKlLrBaUPSr1+/Ro3TOAp2wr/SUAnqQEVWRkaOHZNIUwDJ2b8bNMnQi60sS2HbIAxQgGHOnK6QVjQdMYsXLx4Rv65RzeYggenE0ELAAQy7PT8/MzPTkenADBCSnZ0Nnv0JVpgSQ5FkoAIEffr0GU7SU8hAyKRJk5uMiOckMBwdeTXvyLADorBwDWQ6SQ8hO3YUzRqQ3bdg/26GIs1ABRiOHJk3r/eKFb0DmQjZu3fZsoHjgIISHE4MvtxkNtqqguPKk8ePj68XcpzkBMn6E+u37dkBlsSc3WRCdFfkGKCYd+rc1KlnSaaG5c6de/cfxjdKqwKVEIiOFJKaZV//6tWXv8XFTvHkbdvTo4inWAiFXEEYVIgx5q04dTLPKZ4vL99+e/HiQW48VIKz4SdT1WLNyL/2iuTLj2IlCl5D9AoiChFGb2BIIzDfN0+e22hB+YowG4DAqsJksuyZt38Dg8EoUAwGPSY2NpTRU4rx5SMghBzYvC93ZM3yFctwEFiRFGtGoiPJiQaK+V0sSpkeoHD3lUpcKiOjcT/KUEBgfm4+unZuzeYAgSWBXYUVsebkFyV5qYI2I0pxcJSUFLj5G9tD8B6axjDkEBgPQkYuqFEqGJJdlOSmAhkMpWSlpqakbK1ta4d3cmC0mdO14yRgHApjuAiCzffXm3fOpxC9GXY1IccxPenNb0bBjEmgrCly5NszgGLZunUr3EORsRgYyyYiQxmBOfB64c75s0cuKF+qDFw25KJJTkhECF0SpWaQUpgJFLCQT5M2czpOIoxzSggaPwdZFYCURcgAgLBLwmIoZSNSztiPHTvWtSvMZGDPvUGM34hQiOf1whkMpGBAj6Q3zJLIYvKuAKXw6tUz+GnScxky8njEZzkEXRGAjJ/dIACJI40ghFkSeQxSNh4+fBg/TibybbgUEXRFxCGzAMIsiQIGKY9WY7YAg0EoxM9DqlNIreSmfRHCLokyJu/KqYsXD91jEMrxEEhLBlIfIMySRIJxPbvLLGZEKwKQLmGQZjzkjUuF5MPndy9UxAeQUcEQUzDEqcbx/LkaiV8C0ppAvKocqiQeAmkhAXGrcaiQ4IrIQCAuFQ5VEp80ZBpCnCocqiR+CUgnHuJV4VAl8ShA3CocKiS4IghZFAQxUAjGpcKhQuITgZhDIE4VDhUSvwAZjJBYMppQiFeFQ4XEQyAHFw0aPBQhOh4ybGWnCWM5iDtCx3sGwUiUVoSFtBUgGFekDi0SHw+ZCZDOdYTRxLUdtnRJAOKMcC6aJP4AZEgvgJQsSf7ljGubvnTJprHX30S6JF/BoU3i4SBPW+xCCFw0CBFuJBs+RbgkX2EuGiR0RboJVy9C6LYKlbg0OahEeUVG44ogRAcQfklwNnwlTmWHVomfK6TLTDIZoRFcEu5O0p8uiez1olni4Qohk4EVoV9dcbPhK3ErOTRLvnOFLBcmUzIGHEGzESpxyTu0S3xCIcGTCVw3tBKnvEO7xB9aCDpEK/HKO7RLPKSQLnwhsRTCPwoIlbhlHdolf8ILoRDyeUMrcck5tEt8oYWgQ6ISp5xDu8QfVAh/7UpU4pVzaJd4uEJa0kLCK1lZMGHHdqjELePQLvklFNKAFsJU0ncWqcQl7dAu8UkXItxek4VKnNIO7RI/FnJZZENoJenW/fA9CVTiZT/noifxQCEzxosWQitJKMjGStyMI3qSP6SQ+bNpIUwlRlqJi3FETeIjhaylhYhVUhUrKYJKnIxDs4SuSLdLWMgqelMVrwS+ce1Pl4RxaJZ45AuhleRgJW7GES3JHyiEft9MIWwluxMdUImLOqIpwRU5PwPOJMhzCJ6gSVZiycrJXHPhk5M6oivxYyG5MoUgRE9OTDLyCzf291JHdCWe8x3IIQ19MGODD0jkVA0qcVNHVCW/bt0cMy43npyfUQi7JXDgiZDCjddcxBF1yYHzN8fsyxXOaCQhenLyirO5UIyO6Etu3TjdkBxtliPP7tKzESCP7oAj+vn2gIfAYa8uMsg/Vu1gtYEQisLwpg/WR+8DyGEWs6ggpKU7N4JI18VFMOkfxzAn5wXyMeMYvfd+7P7PMl+ALF/N9w8lviPg1SwXaxIlviP8PrVY324+X4kS3xHyOz7fRzvr2NCqeiDxHD3b4YY2TtC9Bdy3+ChIfEdPwRZ//KeXBInv6Gk3f3p8JDwGSJD4jp6MY8DhwagKEtdxzTgp9pLV7IFcT89xQPDteI5QcFQ8OjwnQeI5RhoOz0fXCQkSzzGSeZ2YX7CqXij5DPfZcMGaXzmj7nPZbcdIwZVzfglPgsR9LyMNl/B5WUJyJcOBZJQlpoWaKkMCB7LhkcxKV1GGBA6koHQ1K+YlGRI4kIZi3qy8KRkSOJCM8uak4FtlSPjdMhsLviyBY4lgZ7MdoaAEzgeCJQKJ7wiNTYGHbRLJk9DBRcI2CRtHVZaEDmZD4witNCwRZrcdoaCV9qi5mGRK6OAiYXOR7VbJktDBZLZb2YCuMiV0MBsa0GzJRzFcsZ4jFLTkOaSQZEjgmKRhSIFjG5IhgWOSjLENDLJUGRI4pgEEoz1RT+ayG45Q/o32cNgp6YQEjmXaFTId/5JOSOBYJq8gVSckdKyzLUYEo05I6FinLIYmk05K/kq5Y5A2ojAO4FAjdugQaUAiFCWEJJDBUoRUoYgN0hYD2ZohZKgX6HpYQqcOEQcLtyQZDRUsdakgONilKIpQKEEECe0gUlyqKWqxJbVbv+9L7l5evjtfLv0LBjKcv7x3qHDv/x1X3KV+LYRuEfcS7lCndj3kcq8rCXeoI0HYUeOzva4k3KHOBUIcD18f7nUjAYf7/CaI03H0LhhH5ztbf6ruITVxHJ0f0L90izj99nNpfX19YfL8+JdbzL44oM8qC2fuENUKMLCwUCwuzJ0cnLrDXIjKAitxHHb4l/foHBCVypul1/PzuVwuD1WS90g5cIOpNyF2tZbOEF/pRxFj+e1TKLVoWjKYTzconWNqHGI2jq5UiC+EsBiouDsxMQsV0Ug5ExSUzjD77UUf7GAR5EyNkBigmB0amoYYqVQkC5QxQUHM92sxF1L1iZ6x0pOAEedbRCCq8FVZAUauwXg+PJyAhENGgFFUmLpUBjPrcTNQj+sEgYziY4sRjw8MxPw+XzQxGGIUxTbVWD2u8fhs5MoZUcUvel1ZA8aUBozp8HB8IEY9c6/X7/cxihKzX2g8urEgDxAy8/GvMwJiMp7lp7TxidEm4/6t/j4IWXxRW4rzNv2QKpSiVHpovx1iQYiR1MZfASNMjP6+Hg/8Cw4jAMCioHBMvfBSlEqpZkt788FEHEsIfIVIjFA47ovdxrK9B8YUUFQUkRMLUyvAzpg1W1E8/iQQEIGhb8hYbGH4sfTvAYBZPFZROAauXpCKx7g3uCSfd7a2trcf2WetmE+2MdqmIHBKORhM785NOmRzc257F54A++gWscrppXsP362ubmwsQ+YxZpEcm+SLeVLQvcEYEuWGoBgpHX7dgiWdHmNJp4PBTFZ/IcrptCT9TQlQVp9siG59shlNQ0UKGDRzgDGcKAGwZMvlTAY8UuCdcjaiB9BBD4BvmAMMYHNKJSipUkG0ZdCANW0AFAqG3QahJaXrER5dZwMM6C6BNYndKYn5C6OtMWD+QogUjKGgRBOIMYxAewwjFBocFCMdxJALrJZDqbtUMidRiCQgUVLgTAqPYCgpYCGMXRqXxM/Va13PHEsBFsBY8VnxI4IWQ6yGgiIsftDw0CXF2A9pEApaANMaL4aGlsBa9OFmSgwVBS0YLwsi2AezKJ6bPTi0xS44xgXibjQMWVBjEz4aRkjMwTY9UgjABtt0uiyYXhLJobclBrPY5b/HB7Hw8UH/AM3ZIm9FzQVkAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/main.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogR0VORVJBTA0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5jb21wb25lbnQgew0KfQ0KDQouY3VzdG9tLWNvbXBvbmVudCwgLmFuaW1hdGlvbiB7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KfQ0KDQoubW9kYWwtYmFja2dyb3VuZCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJG1vZGFsLWJhY2tncm91bmQtY29sb3I7DQogICAgb3BhY2l0eTogMC43NTsNCn0NCg0KLm1vZGFsLWNvbXBvbmVudCB7DQogICAgZmlsdGVyOiBibHVyKDEpOw0KfQ0KDQoucG9wdXAgew0KICAgIGZpbHRlcjogZHJvcC1zaGFkb3coMiwgNDUsICMwMDAwMDAsIDAuMTUsIDYsIDEsIDMwLCAzNSwgZmFsc2UpOw0KfQ0KDQpAa2V5ZnJhbWVzIGFuaW1hdGlvbkZhZGVJbiB7DQogICAgMCUgew0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAxMDAlIHsNCiAgICAgICAgb3BhY2l0eTogMTsNCiAgICB9DQp9DQoNCi5mYWRlLWluIHsNCiAgICBhbmltYXRpb246IGFuaW1hdGlvbkZhZGVJbiAwLjFzIGxpbmVhciAwcyAxOw0KfQ0KDQouZmFkZS1vdXQgew0KICAgIGFuaW1hdGlvbjogYW5pbWF0aW9uRmFkZUluIDAuMXMgbGluZWFyIDBzIDEgcmV2ZXJzZTsNCn0NCg0KLmRlZmF1bHQtYmFja2dyb3VuZCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJGRlZmF1bHQtYmFja2dyb3VuZC1jb2xvcjsNCn0NCg0KLmRlZmF1bHQtYmFja2dyb3VuZC1zb2xpZCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNvbGlkLWJhY2tncm91bmQtY29sb3I7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIEdFTkVSQUwNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoudGV4dC10aW55IHsNCiAgICBmb250LXNpemU6IDEwcHg7DQp9DQoNCi50ZXh0LXNtYWxsIHsNCiAgICBmb250LXNpemU6IDExcHg7DQp9DQoNCi50ZXh0LW5vcm1hbCB7DQogICAgZm9udC1zaXplOiAxM3B4Ow0KfQ0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoqKiBDT05UQUlORVJTDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLmJveCwgLnZib3gsIC5oYm94LCAuYWJzb2x1dGUsIC5jb250aW51b3VzaGJveCwgLmhncmlkLCAudmdyaWQsIC5ncmlkIHsNCiAgICBzcGFjaW5nOiA1cHggNXB4Ow0KfQ0KDQouYm94LCAudmJveCwgLmhib3gsIC5jb250aW51b3VzaGJveCwgLmhncmlkLCAudmdyaWQsIC5ncmlkIHsNCiAgICB3aWR0aDogYXV0bzsNCiAgICBoZWlnaHQ6IGF1dG87DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIExBQkVMDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLmxhYmVsIHsNCiAgICB3aWR0aDogYXV0bzsNCiAgICBoZWlnaHQ6IGF1dG87DQogICAgY29udGVudC10eXBlOiBhdXRvOw0KICAgIGNvbG9yOiAkbm9ybWFsLXRleHQtY29sb3I7DQp9DQogICAgDQoubGFiZWw6ZGlzYWJsZWQgew0KICAgIGNvbG9yOiAkZGlzYWJsZWQtdGV4dC1jb2xvcjsNCn0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogTElOSw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5saW5rIHsNCiAgICBjb2xvcjogJGFjY2VudC1jb2xvci1kYXJrZXI7DQogICAgZm9udC11bmRlcmxpbmU6IHRydWU7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KICAgIHBvaW50ZXItZXZlbnRzOiB0cnVlOw0KfQ0KDQoubGluazpob3ZlciB7DQogICAgY29sb3I6ICRhY2NlbnQtY29sb3I7DQp9DQoNCi5saW5rOmRvd24gew0KICAgIGNvbG9yOiAkYWNjZW50LWNvbG9yLWRhcmtlcjsNCn0NCiAgICANCi5saW5rOmRpc2FibGVkIHsNCiAgICBjb2xvcjogJGRpc2FibGVkLXRleHQtY29sb3I7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIElNQUdFDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLmltYWdlIHsNCiAgICB3aWR0aDogYXV0bzsNCiAgICBoZWlnaHQ6IGF1dG87DQogICAgb3BhY2l0eTogMTsNCn0NCg0KLmltYWdlOmRpc2FibGVkIHsNCiAgICBmaWx0ZXI6IGdyYXlzY2FsZTsNCiAgICBvcGFjaXR5OiAuMzsNCn0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogRFJBRyAmIERST1ANCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQouZHJhZ2dhYmxlIHsNCiAgICBjdXJzb3I6IG1vdmU7DQp9DQoNCi5kcmFnZ2luZyB7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIElURU0gUkVOREVSRVJTDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLmJhc2ljaXRlbXJlbmRlcmVyIHsNCiAgICB3aWR0aDogMTAwJTsNCn0NCg0KLmJhc2ljLXJlbmRlcmVyLWNvbnRhaW5lciB7DQogICAgd2lkdGg6IDEwMCU7DQp9DQoNCi5iYXNpYy1yZW5kZXJlci1sYWJlbCB7DQogICAgd2lkdGg6IDEwMCU7DQp9DQoNCi5iYXNpY2l0ZW1yZW5kZXJlci5hdXRvLXNpemUgew0KICAgIHdpZHRoOiBhdXRvOw0KfQ0KDQouYmFzaWNpdGVtcmVuZGVyZXIuYXV0by1zaXplIC5iYXNpYy1yZW5kZXJlci1jb250YWluZXIgew0KICAgIHdpZHRoOiBhdXRvOw0KfQ0KDQouYmFzaWNpdGVtcmVuZGVyZXIuYXV0by1zaXplIC5iYXNpYy1yZW5kZXJlci1sYWJlbCB7DQogICAgd2lkdGg6IGF1dG87DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIFNFQ1RJT04gSEVBREVSUw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5zZWN0aW9uLWhlYWRlciB7DQogICAgd2lkdGg6IDEwMCU7DQogICAgcGFkZGluZy1ib3R0b206IDVweDsNCiAgICBwYWRkaW5nLXRvcDogMTVweDsNCn0NCg0KLnNlY3Rpb24taGVhZGVyIC5sYWJlbCB7DQogICAgY29sb3I6ICRub3JtYWwtdGV4dC1jb2xvcjsNCn0NCg0KLnNlY3Rpb24taGVhZGVyIC5saW5lIHsNCiAgICBoZWlnaHQ6IDFweDsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCn0NCg0KLnNlY3Rpb24taGVhZGVyLmZpcnN0IHsNCiAgICBwYWRkaW5nLXRvcDogMHB4Ow0KICAgDQp9"},{ name : "haxeui-core/styles/shared/sortable-asc-blue.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAJCAYAAAD+WDajAAAJ0npUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja7ZlZlty6DYbfuYosQeAEcjkcz8kOsvx8oNTtHsq+9k3ylpJbUlEUCOLH8KPs1r/+ud0/+IQo2cWkJdecLz6xxuobN+W6P+2c5YrnfH/0ucrncXfV54FnKHAN99eSn/lv4/Iu4L407tIHQWU8D/rnBzU+8ssXQc9CwTTy3MxHUH0EBX8/kEdAu7d15Vr04xb6uq/P+7cZim2NU38bTc/kL9+jYr2ZWCd4v4KEi7MP8VYg2J93oZ2bdh6jd6jcp6Cc+TyaYJBXdro+aOW+ojJ+gsr73RdQQr7HHQOfjZnfry/HJb02vjsm/rByGO8rfxpHwPi6nbe/vWdxe697dy1mTJqfTb1t5dwxsWPycF7LHMpf4l7PUTmKw3sHkE/W6xxDqnjsviXKlCZb1rkOGagY/fLK1fvhwxkrQX31I1wOtKIdsr2C2AwFDAfwBkb9uy5y1q1nuSGFhacw0wvC5Ibf/3eOnwra22wrcpXbTrgFenkLCtQw5OzMLACR/eZH6Rj47fj6keOpkVlm5sIG29VvET3J41vmR+EAHZiYuN6xJjofAZiItRPKSACBK0tIkuVS71UEOxbwaQgqBI3vQCAp+YmWPoaQAad4W5t3VM5cn/w9TM4CiBQygVQspMAqktjwH40FH2oppJhSyklTSTW1HHLMKees2ZJf06BRk2ZVLVq1lVBiSSUXLcWVWlr1NZAcU81Va6m1tsaiDcmNtxsTWuu+hx576rlrL732NnCfEUcaeegobtTRpp9hkidmnjrLrLMtWbjSiiutvHSVVVfbuNoOO+6089Zddt3tHTVxJ+zk2/H7qMkbav4gZRP1HTVeVX0TIZZOkmEGYj4KiKshgEN7w+wqEqN3Bp1hdlVPVCSPlsnAmWKIgWBc4tOWd+x+IPcJNxfjf4Sbf0POGXT/DeScQfcT5L7j9gK1adVmXMEdhCwMzahXIPxykpgk7ZipwXYbk1Wp11eNYV1r7+quPoCSyjNIhKug+OxJ5Xn8+mndhX9jjWZxf6/rCpgtnQtkGKxS/OpkX7FvaN1GbTNv8fYdI4ieeZZ+T5FMOU5tNW63rrQAgM1j8lt4jvdNfFb7rav7MaBx5r5Edo8Txwhk2Z537dL6mhvAChph/51iXHiVDnOcayXccEwn4KSbxHtUxmvx/RKO4jWdDV4l6Z4xMuh5euBIsuaqW32fZewuKbghkwmCd+3VC2/Oq2ZUaSOSnEaYe9agma3P1secU6ABHaeYCzwwz45t9rao/ZOMVZkwU2xGEXq4mi/NdzJeYLkRAQ6qkCaa4yA7EkU1gB+euqTsxbvR+dTb7hmNVs5hpdsYeFQDy9baQev1xlWH7wSVxNqDKwtF8jL7qldMnirzfpjFcoSdN4bhJTx26Cb06vaTGOhhDBxetvO7JsCIRaYaIrmxSF6jVr+whu89KrFjsOaWf+7p7mcP0iJu0+2GVOhuUHgA4UsfY/VJJe7m+zGB01R3xdtH2RSFvVtCybI1Y7pj8VJWu40P7fh2HfU4/Sjd7dvnDfaRcsetcXFWjmmDwoZxoEX2DZxH7jNWrn7ssO51ZgJYE+xer/ThumqHemScXMPOJuIqDex7wO2LherWPjOCsHEsO8CkOIfj78dCeKI2PVbaJVnqARe+trC7Jy2dIN/k/7379g4rSio6SYzk1d16X0trJaQzQzf8hRd3W7y2G+r8QlCuFOzzL2IN/DGdot+GGY3A8pG0n3yLC0PexjEW+tEC7hUIBnnfnzPPQSL4hEIV5iyDrDBKUTJ5MWd3JYWC01WYRk0zROX8yUSPgRB2m+j6YSQWefYGP2J7Z3ez7gQYZX2w018JXAQ1tWtfpAPXqlVPiSq+liiewiOkfQpYS2jYFoE4s7cw5KW1stxptNf6KU+6c0OkrovlSAG2FskAJAK+rpb2iumMf5IvwG2NmQoZZZFvIrsUqh9R4AwBEiiBZAZv1lf94bVTUsQIu2GU1u0plrZ8botseB6/fDoxypZqahVLkkeiI9+t8D02Zt+koC6YPpJkdWxAtVTbuw6o945jY97VU6nUgIEfUd7HUKnmBS0QUrvEoQ+4K9zepKMdT5YUrVLkcOMo/eBICteztdIo9Lm0oavNK0Rqe/hTke6HzI8ig0m8/kSg+67k3xPofr7rPxPo/tqMvyfQ/T4uvxbo/hzo1wLd3/eczwLd78OcxqKcQapCo+D5SPszENSh4V4GzJ8O1GuH7HVKHeSYRnVAe1Yht3YI9TupSCH8vN64XxSiP7r+X9D/RlCHq+RRNVD7apYOwx3JeYoETQ6JvlEbWqf6VGqikhjJd5Qg+TYSd8AZqtSajH0dnpsd9A6iGyAR1AWcOOcvI6FdK2Yr3L9cxv0YGose7scy3yT+eg33tgge/m2ZT2Nf1rHtfJTr/sZ2fJnBM5HCAtU6jKlOdym9rAWwFc/R4RWwATh3IOTLi5FcbsWM5UJGcxpiDCy4W4kU/c6TLnLlq9CiUqXryrVZOF/VOFGfp+RH/6IGCizaUdUbkjadETUcTnv2Tzuyi8JPinHPUCAP5ZZUan/ZbLmX3Zcvq1vTHSxb+SMh0pbSgTTy2zg5yvZcrSuEnsFt0ShYtptsFRYKkZmj1DWS3DlIw4u99N0ys4Rmrs+Z6P3psuMKCLWWscJO+uWVLn/Tz4ALeXJa4wV1KLSD1pqECZPZnayXL4iYQHJEB+zMfXsFplTs10+lmYnejN7m6neGBrN+K98azXiHfzDB3zZKVzJ9zB5+IqHHFJoRn4xtjN/bkABm0CD0y5C5wYxm1NFIj1bcqajBTy/bFv14jLQp5id7Kfgdz554G8rSSAwewdd2kzQ2u2oKY8tsS6PwyH19bVi/MWUtUxI6PfE/6sMECGK+tXB16F0dbT0cr/toN+7XrE6hZ+CKHc9CKObbkMdoH03WYSM05Hr5+N7HEmsQ5RaFtiLXd+8a7+Lbzaz3m3msj8kuvxjGJXqTQCf+iG9x/BUpdd8ftNkyTYL3vl2wQ3PBHM8vAELXFpPPFZMJfZQq3oUPrTVADQc1rvxj6BlpJB5P5xzovmGyNa1Y1X7TVPvNBOSusOi0V4fLkwacuVnNtyntzH4bjByQCCTsNJ9fY3yy3otg8iMwk4Wa/VQ00TXuRt+fIL/1tOUkJprT48F01XpTB9oXJTfAtcmLk3HWSEQpXvK8+LzmNm9pSHvgXnFKt//ysd9pH5uYn7M/v946dfrMl+Z2f9AswGkAmCSCE3XgreVJIjjZcqxnToV6d5Mt9n8iqeRxK0CUZf8WVWsc//BwpdbG/DTq7mHam4AzXtqfH6NepdTPV8wzcVf3b5CB/HlYM+6HAAABhWlDQ1BJQ0MgcHJvZmlsZQAAeJx9kT1Iw0AcxV9TtSIVByuIOGSoThZERQQXqWIRLJS2QqsOJpd+QZOGJMXFUXAtOPixWHVwcdbVwVUQBD9AHJ2cFF2kxP8lhRYxHhz34929x907QKiXmWp2jAOqZhnJWFTMZFfFwCsEBDCAWXRJzNTjqcU0PMfXPXx8vYvwLO9zf45eJWcywCcSzzHdsIg3iKc3LZ3zPnGIFSWF+Jx4zKALEj9yXXb5jXPBYYFnhox0cp44RCwW2lhuY1Y0VOIp4rCiapQvZFxWOG9xVstV1rwnf2Ewp62kuE5zGDEsIY4ERMioooQyLERo1UgxkaT9qId/yPEnyCWTqwRGjgVUoEJy/OB/8LtbMz854SYFo0Dni21/jACBXaBRs+3vY9tunAD+Z+BKa/krdWDmk/RaSwsfAX3bwMV1S5P3gMsdYPBJlwzJkfw0hXweeD+jb8oC/bdAz5rbW3Mfpw9AmrpavgEODoHRAmWve7y7u723f880+/sBfKVyq9JFJD0AAA0YaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA0LjQuMC1FeGl2MiI+CiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICB4bWxuczpHSU1QPSJodHRwOi8vd3d3LmdpbXAub3JnL3htcC8iCiAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgeG1wTU06RG9jdW1lbnRJRD0iZ2ltcDpkb2NpZDpnaW1wOjMzMDJmNzk0LWMwOGQtNGIwOS04OTBkLTBjM2Y3Y2JlNTFlYiIKICAgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo2OTM3YmZkMS0yY2MzLTRjMjItODU2ZS0wN2UzODExZTc5MmEiCiAgIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDphZmFjYjU4OS0yNGRmLTRhODMtODdlZS0xYWQzYzIzOTc5NzYiCiAgIGRjOkZvcm1hdD0iaW1hZ2UvcG5nIgogICBHSU1QOkFQST0iMi4wIgogICBHSU1QOlBsYXRmb3JtPSJXaW5kb3dzIgogICBHSU1QOlRpbWVTdGFtcD0iMTY0NDQ4MzQ1NDQ2NDU3MiIKICAgR0lNUDpWZXJzaW9uPSIyLjEwLjI0IgogICB0aWZmOk9yaWVudGF0aW9uPSIxIgogICB4bXA6Q3JlYXRvclRvb2w9IkdJTVAgMi4xMCI+CiAgIDx4bXBNTTpIaXN0b3J5PgogICAgPHJkZjpTZXE+CiAgICAgPHJkZjpsaQogICAgICBzdEV2dDphY3Rpb249InNhdmVkIgogICAgICBzdEV2dDpjaGFuZ2VkPSIvIgogICAgICBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOmYwMjZkYmJkLTUwNGYtNGFjNS1iNjZiLTU4NjRhMWQ0NDdkOSIKICAgICAgc3RFdnQ6c29mdHdhcmVBZ2VudD0iR2ltcCAyLjEwIChXaW5kb3dzKSIKICAgICAgc3RFdnQ6d2hlbj0iMjAyMi0wMi0xMFQwOTo1NzozNCIvPgogICAgPC9yZGY6U2VxPgogICA8L3htcE1NOkhpc3Rvcnk+CiAgPC9yZGY6RGVzY3JpcHRpb24+CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz5V3JrBAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAB3RJTUUH5gIKCDkizEN83QAAAElJREFUGNNjYEACR6+//o/MZ8QmYa0pygiXRNeBrIAGgJGBgYGhbtklFDuZmRgZ6iN0GeGW1i279J+ZCcKtj9DFdEzjissoJgAA6iEWhrUcbZgAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/blank.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4QIKDCIwjMBeawAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAHElEQVQ4y2P8//8/AyWAiYFCMGrAqAGjBgwWAwBjmgMd7D3zQQAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/shared/right-arrow-square-blue.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAYAAADEUlfTAAAEqXpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHjarVdZlsMoDPzXKeYIlkAgjsP63txgjj8FttNZOp30YtoWLWMhVCVBqP/376B/cAmnjbxGCymEDZdPPklGx7b9yuvJm1/P/YqH5Fs9XV4IVA7S7f9aOMafer4Y2EVGT68MWT1elNsXyR/27c7QMZGbHgk67TCUDkNO9hd8GMj7sraQLF4vofRdHt/vYbC5NDzKqdVj8N3/PiJ6TTGPE+mO3YanOL874OYt5PLq5PUafruEvnNx6ePhCQLyWZy2K6/oAZWzx0/0d6C4sOsJittghov8VM/6efBphfhqZlcvM9/ofbkQ5SbI8x6jGY3R99VlHxDScCzqXMrqYWCBKbc+C2gRt6IfV0toRmBvBeRtq1tBq5xYEPfBnhtnHtyXrFzhopcuEVKkils6c1GSVLcR0PKz8ZAIxJozYFgBr4NWLr7wmjet6SobJm6MkcIwxjv88jftqaExJuWZN7vECn7JTAq4MZGbT4wCIDxOHukK8NnuL15M9Rg1w2xYYN7KbqIoH9yaPHILaIeBCrnnGsd2GECIMLfCGXZAYAvslANvUSQyI44GfDIMGZJGCiBgVWnwUrxzAeCYzLnxTeQ1VlR2NWoWgFAXkEg2UwpYeRQ28Cd6A4eyOvWqGjSqadIcXPBBQwgxzOKXo4s+agwxRospZnPmTS1YNCNLlpMkh+KoKaSYLKWUMybNsJzxdcaAnIsUV3zREkosVlLJFfSpvmoNNVajmmpu0lxDnWihxWYttdy5g0rdd+2hx2499TxAteGGHzrCiMNGGvmCGtMO60N7HzU+UZOF1BwYL6jh0xhPEzzLiU7MgJh4BuJxIgBCy8RsM/ZeaEI3MduSICtU4KVOcBpPxICg7yw6+ILdB3I3uJH3v8JNTuRoQvcXyNGE7glyj7h9glqbu03dHC2EZhrOoG4O6ReUvbIOH7AHz67XuUvdSZWt2/Q5bdGzR2ETy/iDscSldzgmLrY5z27Q148RX0l6NeArmVFFN0X04R0BSWyEa27I3RtF/R6lQFHnJ5LsY8QzSa8GvJLeXN6yddrdQ+Fbc2NvyR58lRSm8yE05+c95itOxTfG7fp8aYAbBE1a+lAhdVc2fiHpRrGgVG67v357Cv4hHS9vVEqk1sHe8PKTl5JeEe0lCZC40xnKCdW/CQ5uw88IIo6PmphQZ6Ll8Dyi9I2QfhlBemP9W8wMpqDoYKNGwTlZdJM89POkuM2Jd5nN3cJCAHGbNO3z1Ju8Sl/90GiKitORpBgSRoHXP0oVOnPlMVW+J+lDAUJojg1szTgey7eqUYahLwL4HUnXiuUMgmatBST7Pteb6UM/Sot7CSwJYGKzKH5c2FaKjYy6M5+ywqStxhZwhKztqUv0pc/fcJWe+upWVu3ZcaL8RfGmt4vyC6JdZX+1oRkHWkTD2ojYxLEU/6HFCmfh7h6luoeUbmlGf7KpgX70mm8Ve1ybR5XdzSdxoj/Z1OAdPQbQS1w/ibGzTY75eQNGYJaKTX7NH6pHEHHoCjv56Zebx0XSS+q9eUihXxxGnhp6Xk/eOKTQj/DCz6uGieh/0DPsUZQQ03EAAAGFaUNDUElDQyBwcm9maWxlAAB4nH2RPUjDQBzFX1O1IhUHK4g4ZKhOFkRFBBepYhEslLZCqw4ml35Bk4YkxcVRcC04+LFYdXBx1tXBVRAEP0AcnZwUXaTE/yWFFjEeHPfj3b3H3TtAqJeZanaMA6pmGclYVMxkV8XAKwQEMIBZdEnM1OOpxTQ8x9c9fHy9i/As73N/jl4lZzLAJxLPMd2wiDeIpzctnfM+cYgVJYX4nHjMoAsSP3JddvmNc8FhgWeGjHRynjhELBbaWG5jVjRU4inisKJqlC9kXFY4b3FWy1XWvCd/YTCnraS4TnMYMSwhjgREyKiihDIsRGjVSDGRpP2oh3/I8SfIJZOrBEaOBVSgQnL84H/wu1szPznhJgWjQOeLbX+MAIFdoFGz7e9j226cAP5n4Epr+St1YOaT9FpLCx8BfdvAxXVLk/eAyx1g8EmXDMmR/DSFfB54P6NvygL9t0DPmttbcx+nD0Caulq+AQ4OgdECZa97vLu7vbd/zzT7+wF8pXKr0kUkPQAADRhpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+Cjx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDQuNC4wLUV4aXYyIj4KIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIgogICAgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIKICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIKICAgIHhtbG5zOkdJTVA9Imh0dHA6Ly93d3cuZ2ltcC5vcmcveG1wLyIKICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICB4bXBNTTpEb2N1bWVudElEPSJnaW1wOmRvY2lkOmdpbXA6YTJjZmUzZWYtMzE5Yi00YTlkLThlZGEtMzJhNDYzZjMwNmZlIgogICB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjgxY2EwNjczLTJlODEtNGM3Mi1hNTM2LTg2MTJkYjc4YWY3NiIKICAgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmI0OGNmYzRiLTMxOGItNDEzNy1iMmZlLTEzYWZjM2E0ZTExZCIKICAgZGM6Rm9ybWF0PSJpbWFnZS9wbmciCiAgIEdJTVA6QVBJPSIyLjAiCiAgIEdJTVA6UGxhdGZvcm09IldpbmRvd3MiCiAgIEdJTVA6VGltZVN0YW1wPSIxNjQ0NDgyMjI4NDI1Mjg0IgogICBHSU1QOlZlcnNpb249IjIuMTAuMjQiCiAgIHRpZmY6T3JpZW50YXRpb249IjEiCiAgIHhtcDpDcmVhdG9yVG9vbD0iR0lNUCAyLjEwIj4KICAgPHhtcE1NOkhpc3Rvcnk+CiAgICA8cmRmOlNlcT4KICAgICA8cmRmOmxpCiAgICAgIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiCiAgICAgIHN0RXZ0OmNoYW5nZWQ9Ii8iCiAgICAgIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6ZWFmMzkzYzAtOGRlNy00NTlmLTg4MzItYWE2MGYyYTc0NWJlIgogICAgICBzdEV2dDpzb2Z0d2FyZUFnZW50PSJHaW1wIDIuMTAgKFdpbmRvd3MpIgogICAgICBzdEV2dDp3aGVuPSIyMDIyLTAyLTEwVDA5OjM3OjA4Ii8+CiAgICA8L3JkZjpTZXE+CiAgIDwveG1wTU06SGlzdG9yeT4KICA8L3JkZjpEZXNjcmlwdGlvbj4KIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAKPD94cGFja2V0IGVuZD0idyI/Pj16UaAAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAHdElNRQfmAgoIJQjxj+hWAAAAMklEQVQI12NggILQriP/GdAAEzIHXQETumpkBRiSyAqwSq4us2HEKgmTYMDnGAYGBgYAozYP8SPzNcgAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/close-button-white.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAC7npUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja7ZZbrtwgDIbfWUWXENsYm+UQLlJ30OX3h1w6cy7SqXpeKk2YAeKQH+PPMBP6r58j/MBF2WKIap5yShuumGPmgo5vx1VWTVtc9aNt3j/Zw/2AYRK0ctx6OsdfdroFjqagpw9CXs8H+/ODHE99fyN0TiTTI0annUL5FBI+HtApUE5PU3Z7XMLej/Z8/wiDz6WhGldM7Gje3kdD9JpiHmHuQrKhZomHAzK/HKSszqwdA1GjL6tmodMTBOSjOG0PXoV3VK4efWJ/A0XSYQ8wPAcz3e2HdtKPgx9WiB9mlnrP/GQ3uad4CvKK8WgexujH6kpMCGk6F3UtZfUwcEfIZb2WUAxfRd9WySg+E7ICedvqtqNUysTAMihSo0KD+morVbgYubOhZa4gMW0uxpmrbAEw4yw02CRLAy+WCrwCK9++0Jo3r+kqOSZuhJFMEKMDP39P+VRojJnyRJvfsYJfPDcF3JjkZo1RAELjyiNdAb7K22tyFRDUFWbHAsu2HxK70plbM49kgRYMVLTHXiNrpwBChLkVzpCAwJZIlBJtxmxEiKODT4GQY9PwDgSkyg1echRJgIMdg7nxjtEay8qHGWcWQKgkMaDJUsBqHmzIH4uOHCoqGlU1qalr1pIkxaQpJUvz8CsmFk0tmZlbtuLi0dWTm3vw7CVzFhyOmlO27DnnUjBpgXLB2wUDStl5lz3uuqfddt/zXirSp8aqNVWrHmqupXGThnOipWbNW26lU0cq9di1p27de+5lINWGjDh0pGHDRx7lpkbhwPqufJ0aXdR4kZoD7aaGV80uCZrHiU5mIMaRQNwmASQ0T2abU4wcJrrJbMuMXaEML3XCaTSJgWDsxDroZveH3BO3EOM/ceOLXJjovoNcmOg+Ifee2wfU2vy1qZuERWhuwxnUTbD9MKiw44PfpK+34W9feAm9hF5CL6GX0EvoJfTfCMnAn4eMP+m/ATTxo1xUMRnCAAABhWlDQ1BJQ0MgcHJvZmlsZQAAeJx9kT1Iw0AcxV9TtSIVByuIOGSoThZERQQXqWIRLJS2QqsOJpd+QZOGJMXFUXAtOPixWHVwcdbVwVUQBD9AHJ2cFF2kxP8lhRYxHhz34929x907QKiXmWp2jAOqZhnJWFTMZFfFwCsEBDCAWXRJzNTjqcU0PMfXPXx8vYvwLO9zf45eJWcywCcSzzHdsIg3iKc3LZ3zPnGIFSWF+Jx4zKALEj9yXXb5jXPBYYFnhox0cp44RCwW2lhuY1Y0VOIp4rCiapQvZFxWOG9xVstV1rwnf2Ewp62kuE5zGDEsIY4ERMioooQyLERo1UgxkaT9qId/yPEnyCWTqwRGjgVUoEJy/OB/8LtbMz854SYFo0Dni21/jACBXaBRs+3vY9tunAD+Z+BKa/krdWDmk/RaSwsfAX3bwMV1S5P3gMsdYPBJlwzJkfw0hXweeD+jb8oC/bdAz5rbW3Mfpw9AmrpavgEODoHRAmWve7y7u723f880+/sBfKVyq9JFJD0AAA0YaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA0LjQuMC1FeGl2MiI+CiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICB4bWxuczpHSU1QPSJodHRwOi8vd3d3LmdpbXAub3JnL3htcC8iCiAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgeG1wTU06RG9jdW1lbnRJRD0iZ2ltcDpkb2NpZDpnaW1wOmJiYWE0YTllLTQxNGYtNGFkZC04NmI4LTk2MDQ2OTNiZDI3YyIKICAgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo1ZDhlMjY0Ny0wY2MxLTRhYmYtOTY4ZS1hNGJkMTA1YWI1OWEiCiAgIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpjODRmYTUxNi05MWQ0LTRjOGItYTUxMy0zZTQ2OTFiNzRhMDMiCiAgIGRjOkZvcm1hdD0iaW1hZ2UvcG5nIgogICBHSU1QOkFQST0iMi4wIgogICBHSU1QOlBsYXRmb3JtPSJXaW5kb3dzIgogICBHSU1QOlRpbWVTdGFtcD0iMTY0NDMwNTkwMjY2MDk5MiIKICAgR0lNUDpWZXJzaW9uPSIyLjEwLjI0IgogICB0aWZmOk9yaWVudGF0aW9uPSIxIgogICB4bXA6Q3JlYXRvclRvb2w9IkdJTVAgMi4xMCI+CiAgIDx4bXBNTTpIaXN0b3J5PgogICAgPHJkZjpTZXE+CiAgICAgPHJkZjpsaQogICAgICBzdEV2dDphY3Rpb249InNhdmVkIgogICAgICBzdEV2dDpjaGFuZ2VkPSIvIgogICAgICBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjliMzYzNTNjLWI3Y2MtNDcwZC05ZjY2LWJkYjdlNGNlNjI3MiIKICAgICAgc3RFdnQ6c29mdHdhcmVBZ2VudD0iR2ltcCAyLjEwIChXaW5kb3dzKSIKICAgICAgc3RFdnQ6d2hlbj0iMjAyMi0wMi0wOFQwODozODoyMiIvPgogICAgPC9yZGY6U2VxPgogICA8L3htcE1NOkhpc3Rvcnk+CiAgPC9yZGY6RGVzY3JpcHRpb24+CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz6Ep5GeAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAA3XAAAN1wFCKJt4AAAAB3RJTUUH5gIIByYWgfgJQAAAAIhJREFUGNNtkLsRwkAMRB9uwQZmMCEBZR9OSGjB5tMEVEAbj0SG83GaUSDtamdXqHt1UDuKUteB9agn9a1ec3KQboEl1FYdY/FQt2qnTrG7q5v5OgemTGlU29JPrrxUApqMu4quzs1sHLgAR+AJvIADcP4GrBmvBczfszBeCCTUXk1/6X7kpO4+lzDh/7PqYdUAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/search.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABhWlDQ1BJQ0MgcHJvZmlsZQAAKJF9kTtIw1AUhv+mig8qDnYoIpKhOlkoKuIoVSyChdJWaNXB5KYvaNKQpLg4Cq4FBx+LVQcXZ10dXAVB8AHi6OSk6CIlnpsUWsR44HI//nv+n3vPBYRGhalmVxRQNctIxWNiNrcq9rzChxD6MIqoxEw9kV7MwLO+7qmb6i7Cs7z7/qwBJW8ywCcSzzHdsIg3iGc2LZ3zPnGQlSSF+Jx4wqALEj9yXXb5jXPRYYFnBo1Map44SCwWO1juYFYyVOJp4rCiapQvZF1WOG9xVis11ronf2Egr62kuU5rBHEsIYEkRMiooYwKLERo10gxkaLzmId/2PEnySWTqwxGjgVUoUJy/OB/8Hu2ZmFq0k0KxIDuF9v+GAN6doFm3ba/j227eQL4n4Erre2vNoDZT9LrbS18BAxuAxfXbU3eAy53gNCTLhmSI/lpCYUC8H5G35QDhm6B/jV3bq1znD4AGZrV8g1wcAiMFyl73ePdvZ1z+7enNb8fpuZyvNk619AAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAADdcAAA3XAUIom3gAAAAHdElNRQfmARgJIBu0NNI+AAABNElEQVQ4y82SzUpCURSFv31uFDqRhr1E9QASBYXjoGewgZIJWsYlrxrSrRwkRuWoXqJRBPYG/cx6ihqUCnZ2ExG7eQ1HtUaHfc75WKy94K8lwUGx1kiIalLRhf7oAXGalVz69ldA8aTuAusgnnl37gGI9uIquFa5OdjJ+KGAYq2RQG3VTNnVUjb7OvzI95uxD6dzh9W9yu72NydmQFJNgnjBzwCFwuYbSFmMSQbvzNB5fmB7hDq23RrKZSRgrKLtiAh0QwGKPhLtxcMAvYhdVpXncAfiNFVwfb8Z+5HB4fmsEeMZYy/HrnH/uF4QYQOk3LHtFsA0MytGjIfonMFcl/JpF0TDi3R0utZPe1GVLvCkcCGiS0AqCJFJatsvWkpErsq5LXeiLQBU8pmqqp7pp77wb/QFm09xUl2IdBcAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/sortable-asc-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAJCAIAAABxOqH0AAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA0UlEQVQIHQHGADn/Ae0cJAAAAAAAANannypZYQAAAAAAAAIAAAAAAADWp58AAADWp58AAAAAAAACAAAA1qefAAAAAAAAAAAA1qefAAAAAe0cJAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAI1eVgAAAAAAAAAAAAMDA3CfpwIAAABzoqoAAAADAwMDAwNwn6cAAAACAAAAAAAAc6KqAAAAcJ+nAAAAAAAAAnQX2cErsvcAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/sortable-desc-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAJCAIAAABxOqH0AAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA0UlEQVQIHQHGADn/Ae0cJAAAAAAAAIdYUHmosAAAAAAAAAIAAAAAAACHWFAAAACJWlIAAAAAAAACAAAAh1hQAgICAgICAAAAjV5WAAAAAe0cJAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAANannwAAAAAAAAAAAAAAACpZYQIAAAAqWWEAAAAAAAAAAAAqWWEAAAACAAAAAAAAKllhAAAAKllhAAAAAAAAmeIQ3V5WWXgAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/default/treeviews.css", data : "LnRyZWV2aWV3IC5zY3JvbGx2aWV3LWNvbnRlbnRzIHsNCiAgICBzcGFjaW5nOiAwOw0KfQ0KDQoudHJlZXZpZXdub2RlIHsNCiAgICBzcGFjaW5nOiAwOw0KfQ0KDQoudHJlZXZpZXdub2RlIC5pdGVtcmVuZGVyZXIgew0KICAgIHdpZHRoOiBhdXRvOw0KICAgIHBhZGRpbmc6IDVweDsNCiAgICBib3JkZXItcmFkaXVzOiAycHg7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQoudHJlZXZpZXcgLml0ZW1yZW5kZXJlcjpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNlbGVjdGlvbi1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOw0KfQ0KDQoudHJlZXZpZXcgLml0ZW1yZW5kZXJlcjpub2RlLXNlbGVjdGVkIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2VsZWN0aW9uLWJhY2tncm91bmQtY29sb3I7DQp9DQoNCi50cmVldmlldyAuaXRlbXJlbmRlcmVyOm5vZGUtc2VsZWN0ZWQgLmxhYmVsIHsNCiAgICBjb2xvcjogJHNlbGVjdGlvbi10ZXh0LWNvbG9yOw0KfQ0KDQoudHJlZXZpZXdub2RlIC5iYXNpYy1yZW5kZXJlci1jb250YWluZXIgew0KICAgIHdpZHRoOiBhdXRvOw0KfQ0KICAgIA0KLnRyZWV2aWV3bm9kZSAuYmFzaWMtcmVuZGVyZXItbGFiZWwgew0KICAgIHdpZHRoOiBhdXRvOw0KfQ0KICAgIA0KLnRyZWVub2RlLWNvbnRhaW5lciB7DQogICAgc3BhY2luZzogMDsNCn0NCiAgICANCi50cmVlbm9kZS1jaGlsZC1jb250YWluZXIgew0KICAgIHBhZGRpbmctbGVmdDogMTZweDsNCiAgICBzcGFjaW5nOiAwOw0KfQ0KICAgIA0KLnRyZWVub2RlLWV4cGFuZC1jb2xsYXBzZS1pY29uIHsNCiAgICByZXNvdXJjZTogbm9uZTsNCn0NCg0KLnRyZWVub2RlLWV4cGFuZC1jb2xsYXBzZS1pY29uIHsNCiAgICByZXNvdXJjZTogJGJsYW5rOw0KICAgIGN1cnNvcjogbm9uZTsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KfQ0KICAgIA0KLnRyZWVub2RlLWV4cGFuZC1jb2xsYXBzZS1pY29uLm5vZGUtZXhwYW5kZWQgew0KICAgIHJlc291cmNlOiAkY29sbGFwc2VkOw0KICAgIGN1cnNvcjogcG9pbnRlcjsNCn0NCiAgICANCi50cmVlbm9kZS1leHBhbmQtY29sbGFwc2UtaWNvbi5ub2RlLWNvbGxhcHNlZCB7DQogICAgcmVzb3VyY2U6ICRleHBhbmRlZDsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQp9DQoNCi50cmVldmlldy5mdWxsLXdpZHRoIC5pdGVtcmVuZGVyZXIgew0KICAgIHdpZHRoOiAxMDAlOw0KfQ0KDQoudHJlZXZpZXcuZnVsbC13aWR0aCAuc2Nyb2xsdmlldy1jb250ZW50cyB7DQogICAgd2lkdGg6IDEwMCU7DQp9DQoNCi50cmVldmlldy5mdWxsLXdpZHRoIC50cmVldmlld25vZGUgew0KICAgIHdpZHRoOiAxMDAlOw0KfQ0KDQoudHJlZXZpZXcuZnVsbC13aWR0aCAudHJlZW5vZGUtY29udGFpbmVyIHsNCiAgICB3aWR0aDogMTAwJQ0KfQ0KDQoudHJlZXZpZXcuZnVsbC13aWR0aCAudHJlZW5vZGUtY2hpbGQtY29udGFpbmVyIHsNCiAgICB3aWR0aDogMTAwJTsNCn0"},{ name : "haxeui-core/locale/fr/formats.properties", data : "Zm9ybWF0cy5kYXRlLnNob3J0PSVkLyVtLyVZDQpmb3JtYXRzLmRlY2ltYWwuc2VwZXJhdG9yPSwNCg"},{ name : "haxeui-core/styles/shared/right-square-arrow-blue.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAADq3pUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja7VZbcuwoDP1nFbMES0JILAfzqJodzPLngN1OutOZSm567tc1ZSQDlsQ54hH6P3+P8Bce3nQLUc1TTmnDE3PMXKD4djxl1bTFVZ8f2025aw9XB6NJIOX49HSOv7XTdmeJCjR9Z8jr2bHfd+R42vcHQ6cjmRExlHYayqch4aODTgPlmNaWstv7Kez9kO02Ez/eMKtxw8QO8fgdDeg1hR9h7kKyoWaJRwAyXw5SllLQDThQC3QWXbWdkQCQZzht76IKj6xcGn3S/kCKpKM9oOEezHTJp+2kz8EPC+J3nqVenu/a65uLO5AXxqN5GKMfsysxAdJ0Tuo2laVh4A7IZf2WUAyvQrdVMooHZG8F5Q0ud5RKmRi0DIrUqNCgvmSlihAjdzZI5sqy2lyMM1fZAniKs9BgkyxNHGxV0Cto5SsWWn7zclfJ4bgRRjLBGB3082vKp4bGmClPtPmFFeLiuSgQxmRu1hgFQmjc8kgXwLfy+ExeBQzqgtkxwbLth4ld6cytmUeyiBYMVMhjrZG10wAggm9FMMj9SFsiUUq0GbMRAUcHPwWGHIuGd1BAqtwQJUeRBHKcp2/8Y7TGsvLRjD0LRKgkMVCTpYCriI0N+WPRkUNFRaOqJjV1zVqSpJg0pWRpbn7FxKKpJTNzy1ZcPLp6cnMPnr1kzoLNUXPKlj3nXAqcFlgu+LtgQCk777LHXfe02+573ktF+tRYtaZq1UPNtTRu0rBPtNSsecutdOpIpR679tSte8+9DKTakBGHjjRs+MijXKxROGj9UL7OGt1Y48XUHGgXa/jV7GaC5naikzMwxpHAuE0GkNA8OducYuQwqZucbZmxKpQRpU5yGk3GwGDsxDro4u6NuTveQow/4o1vzIVJ3SuYC5O6T5j7yNsT1lpZu56ExdBchhPUTbD8MKB7YS/zUPuyDN/94Y+hVxsaSOqlQpEq0q3ML967+bCn9sKLAnpuCHGUMyCcvJGO9sT/FdlvjWhbUeCMXzI7DamNopJCsT1NNQadlzQoP5XPDOEkakudR1LH3Xd1bJfMqxPH2HvIwkj1FRB5+C5Eb/JMtbld9Glo/pCH4NbxyQ9fk+Fjh3RP59Qd96RPZ6TXeDvon1jVH0MVvg3RLc83eNeD3Ip7XWj+yO6vyfChgwZuGkfe4sx0v8+ylT35bcFdiISXLLSnhn5l6f/vEX13d5wyvCigP4Z+hyFcbHL4F54nyj1078dQAAABg2lDQ1BJQ0MgcHJvZmlsZQAAeJx9kT1Iw0AcxV9TpaIVBzOIOGSoTi2IijhKFYtgobQVWnUwufQLmhiSFBdHwbXg4Mdi1cHFWVcHV0EQ/ABxdHJSdJES/5cUWsR4cNyPd/ced+8AoVFlmtU1Dmi6baYTcSmXX5FCrxDQhzBERGVmGcnMQha+4+seAb7exXiW/7k/R79asBgQkIhnmWHaxOvE05u2wXmfWGRlWSU+J46adEHiR64rHr9xLrks8EzRzKbniEViqdTBSgezsqkRTxFHVE2nfCHnscp5i7NWrbHWPfkLwwV9OcN1miNIYBFJpCBBQQ0VVGEjRqtOioU07cd9/MOuP0UuhVwVMHLMYwMaZNcP/ge/u7WKkxNeUjgOdL84zscoENoFmnXH+T52nOYJEHwGrvS2f6MBzHySXm9rkSNgYBu4uG5ryh5wuQMMPRmyKbtSkKZQLALvZ/RNeWDwFuhd9Xpr7eP0AchSV0s3wMEhMFai7DWfd/d09vbvmVZ/P21dcqXiaaDUAAANGGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNC40LjAtRXhpdjIiPgogPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iCiAgICB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIgogICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICAgeG1sbnM6R0lNUD0iaHR0cDovL3d3dy5naW1wLm9yZy94bXAvIgogICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgIHhtcE1NOkRvY3VtZW50SUQ9ImdpbXA6ZG9jaWQ6Z2ltcDoxMGUxMWRlMi0wNTI1LTQwM2ItOTZhYi1jODYxZDZmMTlhMGEiCiAgIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NjIzZTNmZWMtYzg5Yi00MGVhLTljNjktMzFjYTgwODgwMGMyIgogICB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6MmM0NTNkMzQtNmI5Mi00NDJjLTlhY2ItMTgyNWYyNzQ0NjFhIgogICBkYzpGb3JtYXQ9ImltYWdlL3BuZyIKICAgR0lNUDpBUEk9IjIuMCIKICAgR0lNUDpQbGF0Zm9ybT0iV2luZG93cyIKICAgR0lNUDpUaW1lU3RhbXA9IjE2NDQ1ODIzMjkxMjA3NDQiCiAgIEdJTVA6VmVyc2lvbj0iMi4xMC4yNCIKICAgdGlmZjpPcmllbnRhdGlvbj0iMSIKICAgeG1wOkNyZWF0b3JUb29sPSJHSU1QIDIuMTAiPgogICA8eG1wTU06SGlzdG9yeT4KICAgIDxyZGY6U2VxPgogICAgIDxyZGY6bGkKICAgICAgc3RFdnQ6YWN0aW9uPSJzYXZlZCIKICAgICAgc3RFdnQ6Y2hhbmdlZD0iLyIKICAgICAgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpiM2YwMzU2NS0xNWQzLTQ4MGEtOGUxYi1kMmZlZTM3NDZmMmMiCiAgICAgIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkdpbXAgMi4xMCAoV2luZG93cykiCiAgICAgIHN0RXZ0OndoZW49IjIwMjItMDItMTFUMTM6MjU6MjkiLz4KICAgIDwvcmRmOlNlcT4KICAgPC94bXBNTTpIaXN0b3J5PgogIDwvcmRmOkRlc2NyaXB0aW9uPgogPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8P3hwYWNrZXQgZW5kPSJ3Ij8+OWQ6JAAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAAN1wAADdcBQiibeAAAAAd0SU1FB+YCCwwZHVAUuvsAAAB7SURBVDjLY2AYviCq75gyMeqYcEkwMjIcjeo7Zky2AQwMDOKMjAwHY/qPe5JrAAMDAwP3f4b/G6L7jkWRawADAwMDGwMjw5LYCcfLyTUAL2AhQs0vhv8MiYsLLZeRY8BXRgbG0CVFltvJccHL//8ZvJcWWZ6laUIaBgAAEBYdvIFAlrEAAAAASUVORK5CYII"},{ name : "haxeui-core/locale/it/formats.properties", data : "Zm9ybWF0cy5kYXRlLnNob3J0PSVkLyVtLyVZDQpmb3JtYXRzLmRlY2ltYWwuc2VwZXJhdG9yPSwNCg"},{ name : "haxeui-core/styles/shared/check-light.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAA3XAAAN1wFCKJt4AAAAB3RJTUUH5QEaCTskh/mOvAAAAS5JREFUKM+NkbtKA2EQhb/ZrLIGL2BnExDEIr2FguADBLMo/IWFCF7AwiewEkRQ7GwUkXRiY4LZGASLtbIQK4tgo7VWgmBMdrM7FokQxBinO2fmzAczwj8qn78cFzuaCmu1U7vbcLlcHqyH0TUqqR7HweoWqDXiPSAFBBLHd38SCgVvBtW1ppJt13UrHQme5yWxOAZE4SGsV3cBOhIaMTvAGNBIEC/PGRMA2OfF4oSFXBFLMQyqK8aYKO95k8RsAIiwn53N3n8vsiwYRRlGdMl2+g5zvu+IcgJYAo9vA/1b7WRRVbkolo4UVltWBTQNxKIy7bqZ2/aAJSIa1D/XBc6alqZbvYOfw0DzD8aY6PVlZBEotfynpNO7+dsxpF3kfN8Zev9Y0AQ385nM82+BL3sbaMn2+wKIAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/sidebars.css", data : "LnNpZGViYXItbW9kYWwtYmFja2dyb3VuZCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJG1vZGFsLWJhY2tncm91bmQtY29sb3I7DQogICAgb3BhY2l0eTogMC42MDsNCn0NCg0KLnNpZGViYXIgew0KICAgIG1hcmdpbjogNTBweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc29saWQtYmFja2dyb3VuZC1jb2xvcjsNCiAgICBwYWRkaW5nOiA1cHg7DQogICAgZmlsdGVyOiBkcm9wLXNoYWRvdygxLCA0NSwgIzAwMDAwMCwgMC4xLCAzMCwgMiwgMSwgMywgZmFsc2UpOw0KfQ0KICAgIA0KLnNpZGViYXI6bGVmdCB7DQogICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQp9DQoNCi5zaWRlYmFyOnJpZ2h0IHsNCiAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KfQ0KDQouc2lkZWJhcjp0b3Agew0KICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCn0NCg0KLnNpZGViYXI6Ym90dG9tIHsNCiAgICBib3JkZXItdG9wOiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQp9DQoNCg0KLnNpZGViYXI6bGVmdCAjY2xvc2VTaWRlQmFyIHsNCiAgICByZXNvdXJjZTogImhheGV1aS1jb3JlL3N0eWxlcy9kZWZhdWx0L2xlZnRfYXJyb3dfY2lyY2xlZC5wbmcgIjsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQp9DQoNCi5zaWRlYmFyOnJpZ2h0ICNjbG9zZVNpZGVCYXIgew0KICAgIHJlc291cmNlOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL2RlZmF1bHQvcmlnaHRfYXJyb3dfY2lyY2xlZC5wbmcgIjsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQp9DQoNCi5zaWRlYmFyOnRvcCAjY2xvc2VTaWRlQmFyIHsNCiAgICByZXNvdXJjZTogImhheGV1aS1jb3JlL3N0eWxlcy9kZWZhdWx0L3VwX2Fycm93X2NpcmNsZWQucG5nICI7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQouc2lkZWJhcjpib3R0b20gI2Nsb3NlU2lkZUJhciB7DQogICAgcmVzb3VyY2U6ICJoYXhldWktY29yZS9zdHlsZXMvZGVmYXVsdC9kb3duX2Fycm93X2NpcmNsZWQucG5nICI7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi8qIEFOSU1BVElPTlMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqLw0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoNCi5zaWRlQmFyTW9kaWZ5Q29udGVudCB7DQogICAgYW5pbWF0aW9uOiBzaWRlQmFyTW9kaWZ5Q29udGVudCAwLjNzIGVhc2UgMHMgMTsNCn0NCg0KLnNpZGVCYXJSZXN0b3JlQ29udGVudCB7DQogICAgYW5pbWF0aW9uOiBzaWRlQmFyUmVzdG9yZUNvbnRlbnQgMC4zcyBlYXNlIDBzIDE7DQp9DQoNCiAgICANCkBrZXlmcmFtZXMgc2lkZUJhck1vZGlmeUNvbnRlbnQgew0KICAgIDAlIHsNCiAgICB9DQogICAgMTAwJSB7DQogICAgfQ0KfQ0KICAgIA0KQGtleWZyYW1lcyBzaWRlQmFyUmVzdG9yZUNvbnRlbnQgew0KICAgIDAlIHsNCiAgICB9DQogICAgMTAwJSB7DQogICAgfQ0KfQ0KICAgIA0KLnNob3dTaWRlQmFyTGVmdCB7DQogICAgYW5pbWF0aW9uOiBzaG93U2lkZUJhckxlZnQgMC4zcyBlYXNlIDBzIDE7DQp9DQouaGlkZVNpZGVCYXJMZWZ0IHsNCiAgICBhbmltYXRpb246IHNob3dTaWRlQmFyTGVmdCAwLjNzIGVhc2UgMHMgMSByZXZlcnNlIGJhY2t3YXJkczsNCn0NCiAgICANCkBrZXlmcmFtZXMgc2hvd1NpZGVCYXJMZWZ0IHsNCiAgICAwJSB7DQogICAgfQ0KICAgIDEwMCUgew0KICAgIH0NCn0NCg0KLnNob3dTaWRlQmFyUmlnaHQgew0KICAgIGFuaW1hdGlvbjogc2hvd1NpZGVCYXJSaWdodCAwLjNzIGVhc2UgMHMgMTsNCn0NCg0KLmhpZGVTaWRlQmFyUmlnaHQgew0KICAgIGFuaW1hdGlvbjogc2hvd1NpZGVCYXJSaWdodCAwLjNzIGVhc2UgMHMgMSByZXZlcnNlIGJhY2t3YXJkczsNCn0NCiAgICANCkBrZXlmcmFtZXMgc2hvd1NpZGVCYXJSaWdodCB7DQogICAgMCUgew0KICAgIH0NCiAgICAxMDAlIHsNCiAgICB9DQp9DQogICAgDQouc2hvd1NpZGVCYXJUb3Agew0KICAgIGFuaW1hdGlvbjogc2hvd1NpZGVCYXJUb3AgMC4zcyBlYXNlIDBzIDE7DQp9DQouaGlkZVNpZGVCYXJUb3Agew0KICAgIGFuaW1hdGlvbjogc2hvd1NpZGVCYXJUb3AgMC4zcyBlYXNlIDBzIDEgcmV2ZXJzZSBiYWNrd2FyZHM7DQp9DQogICAgDQpAa2V5ZnJhbWVzIHNob3dTaWRlQmFyVG9wIHsNCiAgICAwJSB7DQogICAgfQ0KICAgIDEwMCUgew0KICAgIH0NCn0NCiAgICANCi5zaG93U2lkZUJhckJvdHRvbSB7DQogICAgYW5pbWF0aW9uOiBzaG93U2lkZUJhckJvdHRvbSAwLjNzIGVhc2UgMHMgMTsNCn0NCi5oaWRlU2lkZUJhckJvdHRvbSB7DQogICAgYW5pbWF0aW9uOiBzaG93U2lkZUJhckJvdHRvbSAwLjNzIGVhc2UgMHMgMSByZXZlcnNlIGJhY2t3YXJkczsNCn0NCiAgICANCkBrZXlmcmFtZXMgc2hvd1NpZGVCYXJCb3R0b20gew0KICAgIDAlIHsNCiAgICB9DQogICAgMTAwJSB7DQogICAgfQ0KfQ0K"},{ name : "haxeui-core/styles/shared/close-button-blue.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAMWnpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHjarZlZcuy6EUT/sQovAfOwHIwR3oGX71MA2YPUfeOFfdWhJsUBBKqyMrMoNf/z76X+xY/L3iofUo4lRs2PL77Yyk7W56fub6P9/n49Jn+/HVePE5ZDjq07f+Z4XX8fN48BzqayF14Gyv060d5PFH+Nn38MdD3IyYwsO+MaqFwDOXtOmGuAes00lpxel9Dm2V73nzBkWRpf645JOpuff/tE9EbgOc7a6YzTfFvnzwSc/Frl6t6R78yFfLMvP9UFl6+ZEJBPcdIvs1K/snLvmS/HfyTFxXNcceA9mPGx/XjchM/BVzvEL092/fHkt+P9Jb6vQd4xXiOrteZZXfWRkMZrUfdS9h4XNkLu9m2RT+I3sJ/2p/DJAshOygePbHy6KcaSlmW8GaaaZebedtOZorfTJrbWduv2seySLbY7rUiml49ZNrniBlmzrpNex1H7mIvZzy37cd1kHjwMV1rDYOak3/6dz9eB1hLIG6PzI1bMy0pRMA3JnHxzFQkx68ZR2AG+Pz9/JK+ODIYd5swCq25niBbMhS3BkduJdlwY2J5aM2lcAxAinh2YjHFkQEfjgolGJ2uTMcQxk5/KQJmisY0UmBDsYJbWOxdJDhXDs7knmX2tDfYchrNIRHDRJVJTXCVXHmIDP8lnMFSDCz6EEEMKOZRQo4s+hhhjikJ+NbnkU0gxpZRTSTVDjTnkmFPOKpdciy0OcgwlllRyKaVWHloZuXJ35YJam22u+RZabKnlVlrtwKf7HnrsqWfVS6/DDjfgiRFHGnmUUaeZQGn6GWacaeZZZl1AbbnlV1hxpZVXWfWRNaNOWn99/nnWzJ01uzMlF6ZH1rg1pXsII3QSJGdkzHpDxpNkAEBbyZnOxqMikjrJmS6WqgiWWQZJzjCSMTLop7FhmUfunpl7y5vy/v/Km70zpyR1fyNzSlL3JXO/8/Yha6Nu1nNqZ0jKUIKqHeU3a8zV5rpCX1QPU+QXHpRjonI+wF/VFq1Dcg2+WaswUGfLoSUJFT1uIRGlPlfukKfXS8vxkbqV7cyWacep+zTncQ22kx1VRUzlyPftHK2bsZbVuaQ1WyusSIfYqqkzXefUh5MlOl2TXYR5OFIzrMnzWpgm+JKA+zEgkJmFCo5Aqm973XDF2e4rdjxiK2MZHtIz5L0Xv3LYi9WhylPrSjw4DlVzh2lazauTPsfyHaDty8+xAqpsZihYnyqUCeFXQtrJl8SLw7KVY9Mok8d+0kwEl621RD0P13LtqYxgwqix8exYWmQJA9CENlrsBWRP0DJ7MiXCkIQnCWhKTclcy+tvEW/NDL08ElOX8ynbVJhv6nW1llxc0ZSOHJmRVwtUp0S0DU3sjSHCTDgNd2bpZJZ75jqPWPaem6ywmL0PsnOjUmqZesqBor1naWH0CzUtoGDeUG8mDpiaYhrExA7d4rSE03U0tC2vanPZBMLYpBoamh0kywGkx3t1Am7ZIUTlG+LUjwNEaLu9eKEEXsh3jkarspdl8Tm2MFMIMzdUnCUqkyIzm6J1oGJIogLU0s/Y1TzABQSwcpFrfSCme8iT7xxj62pViW93nLGWWt6h2/VFmpwvqFWoe9ACvsMU9OY2rjrWu4B1tEOZd1Df2zF6zPwWQA+nj5YHHFYABuS0xjgRy4cE5B513azlAX2YcmrDtikQNPIdbKi9wpd4HGKNI0I61/JViCN7qE7mrxbYSnvFadiNbSSZAVkDkM4+OWpb5xR3yJeD8AjTqtwybcyPoZCjz0Phfyi0U6C0AbGMDcKXcQjzHonTRFP5A8Qz1h6JofekWHGljqKTMeRaufTTQ+sCr5QIk47JjAqJzw7td4O7K9MXt0asAzYCp6FrKtT4yG8TrAlO0+bcbHIUhvwjOeaZhQSpPmdO3c2Ux0hrLGGJHoJAqSAN6oSwb1SuskNYS2aAWDiUYDahFd/Tzg1Lc9fSqP29tBAavDHU9IhWyD0lpDgGnzrUlruZmhoHO9H5UJheD0ZKZsMsHjAKWKScmLsDR3E3UsACgu552tKaH+g8vGjncERFeNJyP6Ipoi5R1RA60U/QupZT0dKvhTsk9hIvbyWKmpjaOLloXn+xiNmoUr+aK3bWgHZTldETea+WRbtmC3mvWBeQeBDzEjZBTM1NI3e5SvSF+xyEyQV37JXdwniF/08DlZHtTLCcVBTe1GwKMVlYMqEiDA6/QCFILBQickGA16YfxhCmIIMjOItacO/FA1nkLlgyi4kRhlfvTCYwO4R4a/0LIVm5deDJXgO6t8RRbX4BvoxV9qxRg+Im3kqmPJ+kh6twGBKaFiMalwHZXrUodA9JFZFBG80Z5OUpkno7UvKjYd+QrzHRLPJUAUiys0fg1owbObWRjEqS5Eqcjpb6dbR0Ejtvt5LqraQ23UK6jkQZYaMdVyPUpBoGKsQCuissxrJQnbAAJHpuYSHUO8zpxqw4MjLvtvkQI/t0H+IE1DEgFs/VrC3Sa5RyhEn3dOKcTwYkFdDnr51NuXRHvwq/VuzDwigW+pLeUkChY+bvDBUWoOSxfsC6CjJ7TGd+CnfKBOfWKtyYdrYniVWrnu0aR9Pca7TCkfN5TIdpO1aSNZggUlVwYZ1ROAH/maEWINSjQBtKCwPP4zLWv+VFcpxIFN7qAbIvcoT+pCylRK8mjW1K5KhqBJT+qq8P59R10v5we0j/qSqrfwP501a9HngN3nvsRAtuLyyexYmmYYX5xqogW0YV1FqWg+Dn8EV2f617sDa3zTNZwDrzrY4HOs/T/X7e2M8bd1xC0CuhzvRIR/xTZc3mICZasbpqe92r1LR+buX68pwFNiRtYxxv4qAklrBRzxb3IUpbqQCZiSxWfM/7Be/nj7r+NDyvJuI+IGAyk6kfMIFiN9rmSXyUOFgBk3XNACZaRUmt+KbVldifjeEq9e5fnPNnQ5p0o4P8FeuprlgH3wztGHdNHE4d8d1wTn3Mqq8tFFDX69YkXx0rlQLXSuRLjMfvRkKUTAIvDCuCr/Xj2n5CTpsDmWlxYk1twPe0AW9kokmIdXdbCburw8BOQzWZBtiyaZ3uGgOnRxfvJNGCE6dVrsMPULEohkefxaEeDoTHUBA5cjchHJM25DQhkBg9G6sWpRtOhUEoLl6Gky3c3DYv4x9oDoSXgXJfwsvwNz1KvnD4BB0q5dQ09ejFeChceegFnePWiygq6rZeDIJCF7HrExmSChedsmrdbdwROJPbL5Cfrb0xfne55lGbmeCo7RWlbdh5oEEfkqeLq3te5ooXEnT85Olx9cCkTzy6Sf1ytRbzIivYlCCG0NVa5VXARQrAuP7RQ+5sQCN0aeA6nj6jzbKxnUvdxoOJWBpAJzG6rO0Pg0xL0mvHHwHlPh22ppRR8CpYDg+UC+JYR0AC3IhZYDOI77hEaAdjnrg6BJut+hOR9buP2KxjwGpN0iY5e/zlIzXwscL+nbuwgLP8L72EVCCSfTl36QK+GPcf3YS++okffYB6awS+D3c6CsEFlrYPT5O/HWkAoUYcqdqW9C84UrUt6YsjZQa3kfxh4//sRtVbK/BxgO1Coyg7jAP2ION0mMAI+NoULqAX2bT6rdPQFgq/ekYGkyu+XKswEJMkpJNhLhreG8mwy3o6yTAl4Ku8+SDMApb4aD/LrnYn8adoxTOdTkPegNP1EkfrMF0OHxf3W50U71ZCz7dG9gW86ml+XRJGIT+ii/3ckHMvn10sdmj37+L/pH9XUtnnjYBtaFKp5vLRr+bnq42/3yGYvJG9e4CLIEERTYDvkNVINw/uJhK22nbfPfv9q2UX6KlfXufFbL40APu/B5R/d/KyptVBBLNe+2+0bgW1mGv2FvLvvSGiLQ5NLYkmIr7D1rhfyLEueVlHpHDEeb+Pq9kYEHGZSnVcJTHcrpKKO9C0U14SuZWO0Rli5iWGkkKQSfdNlSVIs8EUIMoq3bJACrqtTCjHJG9GksF+HpvtPli9T92F+kN78dZdgIirv5DieHYYd3+hJJG7vbBHL17ai9NdpDTikHeDMYqBOO8Gn93Ffq9qQlRJb2ulY9rvGuP1rjFe7xoRBfIPuUf5H49I4HhK3Aaa3T4Do7Udh6vXG6zb8z1f+23PJ6b5zjl2c0xn5FWv9xvsYfSkLveLOH86ffUV+Zvhe27VP/K+P63vZXz3W+dx3jqrN/crZk2Pp/H97W6Z8ijqv8Emyfv8NfYeAAABhWlDQ1BJQ0MgcHJvZmlsZQAAeJx9kT1Iw0AcxV9TtSIVByuIOGSoThZERQQXqWIRLJS2QqsOJpd+QZOGJMXFUXAtOPixWHVwcdbVwVUQBD9AHJ2cFF2kxP8lhRYxHhz34929x907QKiXmWp2jAOqZhnJWFTMZFfFwCsEBDCAWXRJzNTjqcU0PMfXPXx8vYvwLO9zf45eJWcywCcSzzHdsIg3iKc3LZ3zPnGIFSWF+Jx4zKALEj9yXXb5jXPBYYFnhox0cp44RCwW2lhuY1Y0VOIp4rCiapQvZFxWOG9xVstV1rwnf2Ewp62kuE5zGDEsIY4ERMioooQyLERo1UgxkaT9qId/yPEnyCWTqwRGjgVUoEJy/OB/8LtbMz854SYFo0Dni21/jACBXaBRs+3vY9tunAD+Z+BKa/krdWDmk/RaSwsfAX3bwMV1S5P3gMsdYPBJlwzJkfw0hXweeD+jb8oC/bdAz5rbW3Mfpw9AmrpavgEODoHRAmWve7y7u723f880+/sBfKVyq9JFJD0AAA0YaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA0LjQuMC1FeGl2MiI+CiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICB4bWxuczpHSU1QPSJodHRwOi8vd3d3LmdpbXAub3JnL3htcC8iCiAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgeG1wTU06RG9jdW1lbnRJRD0iZ2ltcDpkb2NpZDpnaW1wOjhkNjliMzU2LWExMzMtNDdmNy1iYTY3LTk2ZGFmZTIyOWYxNiIKICAgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo4MTdjYmI2ZS05MzYyLTRmNTctOGMxYy02YzVlNzZjYjdiNjMiCiAgIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo3NGUyZTk4Yi1jZjE5LTQzN2MtOTViZS02M2E3ODliMTMzODEiCiAgIGRjOkZvcm1hdD0iaW1hZ2UvcG5nIgogICBHSU1QOkFQST0iMi4wIgogICBHSU1QOlBsYXRmb3JtPSJXaW5kb3dzIgogICBHSU1QOlRpbWVTdGFtcD0iMTY0NDMwNTYzOTg1NzIxMiIKICAgR0lNUDpWZXJzaW9uPSIyLjEwLjI0IgogICB0aWZmOk9yaWVudGF0aW9uPSIxIgogICB4bXA6Q3JlYXRvclRvb2w9IkdJTVAgMi4xMCI+CiAgIDx4bXBNTTpIaXN0b3J5PgogICAgPHJkZjpTZXE+CiAgICAgPHJkZjpsaQogICAgICBzdEV2dDphY3Rpb249InNhdmVkIgogICAgICBzdEV2dDpjaGFuZ2VkPSIvIgogICAgICBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjBjZWYyNGNjLTNkMDItNDRlYS04NDhjLTgyNTBmNzJjZTk5NyIKICAgICAgc3RFdnQ6c29mdHdhcmVBZ2VudD0iR2ltcCAyLjEwIChXaW5kb3dzKSIKICAgICAgc3RFdnQ6d2hlbj0iMjAyMi0wMi0wOFQwODozMzo1OSIvPgogICAgPC9yZGY6U2VxPgogICA8L3htcE1NOkhpc3Rvcnk+CiAgPC9yZGY6RGVzY3JpcHRpb24+CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz61UEhOAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAA3XAAAN1wFCKJt4AAAAB3RJTUUH5gIIByE7i2bD8gAAAOZJREFUGNNdj01OwnAQxX9v2nIBcefSGMs53EMkxXsIG9gjMabnMAGJYcs9tCR4AgInKO244Q8Ns5t5b96HPr6LO4k3iddhN93TmNny5zaJLJcYm8QUeHJnka+KdpMUR7Y4YVPNlr83SaQ5kDr8HY911kqsqp254BHYApkA8lXRDoDDBjDBA1CUlQ/G/c5BF6uL8um0BbJRL90BWCC2Ysnh/Oig8lifdwvBa+frlKlw2Aju49g+Q0E18wW7svLquqC5kwelsvLnUS/djfudg8RLUE5iezeJCbAO7UKmYTfdmxgAa3cm/6BzbJyoeU05AAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/shared/error-large.png", data : ""},{ name : "haxeui-core/styles/shared/gripper-horizontal.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAECAIAAAA4WjmaAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAJElEQVQImWN8K6PCgBswMTAwTEqOnpQcjZXBhEcrAwMDI37DARkxCkFtOZfXAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/shared/right-arrow-bright.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAHCAIAAACgB3uHAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAM0lEQVQImWP8////O1lVBgYGBgYGJgYGBqHHtxEcOJ/x////DDDABGe9k1VlgrOgMnDTADWiDmfiE8U7AAAAAElFTkSuQmCC"},{ name : "haxeui-core/locale/ru/formats.properties", data : "Zm9ybWF0cy5kYXRlLnNob3J0PSVkLSVtLSVZDQpmb3JtYXRzLmRlY2ltYWwuc2VwZXJhdG9yPSwNCg"},{ name : "haxeui-core/styles/default/menus.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogTUVOVUJBUg0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5tZW51YmFyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc29saWQtYmFja2dyb3VuZC1jb2xvcjsNCiAgICBwYWRkaW5nOiA2cHg7DQogICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4Ow0KICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIGZpbHRlcjogJG1lbnUtc2hhZG93Ow0KfQ0KDQoubWVudWJhci1idXR0b24gew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzb2xpZC1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBjb2xvcjogJG5vcm1hbC10ZXh0LWNvbG9yOw0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQp9DQoNCi5tZW51YmFyLWJ1dHRvbjpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNlbGVjdGlvbi1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIGNvbG9yOiAkc2VsZWN0aW9uLXRleHQtY29sb3I7DQp9DQoNCi8qDQoubWVudWJhci1idXR0b246YWN0aXZlIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2VsZWN0aW9uLWJhY2tncm91bmQtY29sb3ItaG92ZXI7DQogICAgY29sb3I6ICRob3Zlci10ZXh0LWNvbG9yOw0KfQ0KKi8NCg0KLm1lbnViYXItYnV0dG9uOmRvd24gew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvcjsNCiAgICBjb2xvcjogJGRvd24tdGV4dC1jb2xvcjsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICBib3JkZXItYm90dG9tLXdpZHRoOiAwcHg7DQogICAgYm9yZGVyLWJvdHRvbS1zaXplOiAwcHg7DQp9DQoNCi5tZW51YmFyLWJ1dHRvbi1uby1jaGlsZHJlbiB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNvbGlkLWJhY2tncm91bmQtY29sb3I7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGNvbG9yOiAkbm9ybWFsLXRleHQtY29sb3I7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCn0NCg0KLm1lbnViYXItYnV0dG9uLW5vLWNoaWxkcmVuOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2VsZWN0aW9uLWJhY2tncm91bmQtY29sb3I7DQogICAgY29sb3I6ICRzZWxlY3Rpb24tdGV4dC1jb2xvcjsNCn0NCg0KLm1lbnViYXItYnV0dG9uLW5vLWNoaWxkcmVuOmRvd24gew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvcjsNCiAgICBjb2xvcjogJGRvd24tdGV4dC1jb2xvcjsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCn0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogTUVOVQ0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5tZW51IHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3I7DQogICAgcGFkZGluZzogMXB4Ow0KICAgIGJvcmRlcjogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIGZpbHRlcjogJG1lbnUtc2hhZG93Ow0KICAgIHNwYWNpbmc6IDA7DQogICAgd2lkdGg6IDIwMHB4Ow0KfQ0KDQoubWVudS5leHBhbmRlZCB7DQogICAgYm9yZGVyLXRvcC13aWR0aDogMHB4Ow0KICAgIGJvcmRlci10b3Atc2l6ZTogMHB4Ow0KfQ0KDQoubWVudS1maWxsZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIGhlaWdodDogMXB4Ow0KfQ0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoqKiBNRU5VSVRFTVMNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoubWVudWl0ZW0gew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvcjsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBwYWRkaW5nOiA2cHg7DQogICAgcGFkZGluZy1sZWZ0OiAxMnB4Ow0KICAgIGN1cnNvcjogcG9pbnRlcjsNCn0NCg0KLm1lbnVpdGVtLWxhYmVsLCAubWVudWl0ZW0tY2hlY2tib3gsIC5tZW51aXRlbS1vcHRpb25ib3gsIC5tZW51aXRlbS1zaG9ydGN1dC1sYWJlbCB7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCn0NCg0KLm1lbnVpdGVtLWxhYmVsOmRpc2FibGVkLCAubWVudWl0ZW0tc2hvcnRjdXQtbGFiZWw6ZGlzYWJsZWQgew0KICAgIGNvbG9yOiAkZGlzYWJsZWQtdGV4dC1jb2xvcjsNCn0NCg0KLm1lbnVpdGVtLXNob3J0Y3V0LWxhYmVsIHsNCiAgICB0ZXh0LWFsaWduOiByaWdodDsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KICAgIGhvcml6b250YWwtYWxpZ246IHJpZ2h0Ow0KfQ0KDQoubWVudWl0ZW0taWNvbiB7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCn0NCg0KLm1lbnVpdGVtOmhvdmVyLCAubWVudWl0ZW06c2VsZWN0ZWQgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWxlY3Rpb24tYmFja2dyb3VuZC1jb2xvcjsNCn0NCg0KLm1lbnVpdGVtIC5sYWJlbDpob3ZlciwgLm1lbnVpdGVtIC5sYWJlbDpzZWxlY3RlZCwNCi5tZW51aXRlbS1jaGVja2JveDpob3ZlciwgLm1lbnVpdGVtLWNoZWNrYm94OnNlbGVjdGVkLA0KLm1lbnVpdGVtLW9wdGlvbmJveDpob3ZlciwgLm1lbnVpdGVtLW9wdGlvbmJveDpzZWxlY3RlZCB7DQogICAgY29sb3I6ICRzZWxlY3Rpb24tdGV4dC1jb2xvcjsNCn0NCg0KLm1lbnVpdGVtLWV4cGFuZGFibGUgew0KICAgIHJlc291cmNlOiAkYXJyb3ctcmlnaHQ7DQogICAgdmVydGljYWwtYWxpZ246ICJjZW50ZXIiOw0KfQ0KDQoubWVudXNlcGFyYXRvciB7DQogICAgaGVpZ2h0OiAxcHg7DQogICAgd2lkdGg6IDEwMCU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgaG9yaXpvbnRhbC1hbGlnbjogImNlbnRlciI7DQp9DQo"},{ name : "haxeui-core/styles/shared/expanded-blue.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAADaXpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja7VZbciQpDPznFHsEJCEkjkNBEbE32ONvQj3G3W47POv52QgXXUjFQ0qUgibs//w9wl94OBKHpOa55BzxpJIKVygej6eummJa9fkRL+WhPdwdMBsFUo5Pz+f4q53igyWq0PSNIW9nx/bYUdJp358MnY5kImIo/TRUTkPCRwedBuqxrJiL29slbPsh+7USP94wq3HFxA7x/J0M0esKP8K8C0lEzZIOADJfDlKXUtGNcKAW6CwZdZJrSQjIqzjFN6jCMyu3Rh+0P5Ei+WgPaHgMZr7ly3bS18EPK8RvPEu7PT+0l3q7eAjyivHoHsbYj9XVlBHSfC7qWsrSMHBDyGVNyyiGV6HbKgXFA7K3gfIeW9xQGhVi0DIoUadKg/YlGzVATLyzQTI3ltXmYly4SQzgKc1Cg02KdHFw1kCvoJVvLLT8luWukcNxJ4xkgjE66Oc/Uz40NMZMeaLod6yAi+emAIzJ3KwxCoTQuPJIV4Cv8vxMXgUM6gqzY4E1boeJTenMrZlHsogWDFTIY6+R9dMAQgTfCjDI/UQxkyhlisZsRIijg58KQ45NwxsoIFXuQMnYGhnkOE/fmGO0xrLy0YwzC0QotpGBmiIVXCUcbMgfS44cqiqaVDWrqWvRmiWnrDlny/PwqyaWTC2bmVux6uLJ1bObe/DitXARHI5acrHipZRa4bTCcsXsigG1brzJljbd8mabb2WrDenTUtOWmzUPrbTauUvHOdFzt+699LrTjlTa06573m33vex1INWGjDR05GHDRxn1Zo3CQeu78nXW6GKNF1NzoN2sYarZZYLmcaKTMzDGicC4TQaQ0Dw5i04pcZjUTc5iYewKZaDUSU6nyRgYTDuxDrq5+8XcA28hpW/xxhdzYVL3J5gLk7oPmHvP2wvW+vy3aVHCYmhuwxnUKNh+GLB7Za/zT+3LMvzuhB9DP4b+x4ZGpWOXjIpbBf5BjvZESfGb17p3MnzUsaTkZSGz7LZNjbfdfNgLSOFzzIBWf0FLcRnDRea9DC87zrUsJPVzJF9E9AIZ3chKjLqCMGW4lAdJQ1qfqo4ZnfxJkL8W7GeJC0Ff6rwZ7PzWf/gmkFuG3wH0GbDwTSC3DP8B0I+hH0N/0pDhLlLCvwJpjAM7CC1lAAABg2lDQ1BJQ0MgcHJvZmlsZQAAeJx9kT1Iw0AcxV9TpaIVBzOIOGSoTi2IijhKFYtgobQVWnUwufQLmhiSFBdHwbXg4Mdi1cHFWVcHV0EQ/ABxdHJSdJES/5cUWsR4cNyPd/ced+8AoVFlmtU1Dmi6baYTcSmXX5FCrxDQhzBERGVmGcnMQha+4+seAb7exXiW/7k/R79asBgQkIhnmWHaxOvE05u2wXmfWGRlWSU+J46adEHiR64rHr9xLrks8EzRzKbniEViqdTBSgezsqkRTxFHVE2nfCHnscp5i7NWrbHWPfkLwwV9OcN1miNIYBFJpCBBQQ0VVGEjRqtOioU07cd9/MOuP0UuhVwVMHLMYwMaZNcP/ge/u7WKkxNeUjgOdL84zscoENoFmnXH+T52nOYJEHwGrvS2f6MBzHySXm9rkSNgYBu4uG5ryh5wuQMMPRmyKbtSkKZQLALvZ/RNeWDwFuhd9Xpr7eP0AchSV0s3wMEhMFai7DWfd/d09vbvmVZ/P21dcqXiaaDUAAANGGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNC40LjAtRXhpdjIiPgogPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iCiAgICB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIgogICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICAgeG1sbnM6R0lNUD0iaHR0cDovL3d3dy5naW1wLm9yZy94bXAvIgogICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgIHhtcE1NOkRvY3VtZW50SUQ9ImdpbXA6ZG9jaWQ6Z2ltcDo3YzhmNGQ2ZC05Mjk0LTQ2ZWQtYmRhOS1hNDA1MDVlZjNmOTAiCiAgIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MTFhMGRlODctY2RlYi00YmMxLWIwNGQtZmY4ZmY4NmZmN2RjIgogICB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6ZDNjOTZmYzktYWZlMy00YTJjLWIwNzgtNmUwM2QxZmQ1ZWEzIgogICBkYzpGb3JtYXQ9ImltYWdlL3BuZyIKICAgR0lNUDpBUEk9IjIuMCIKICAgR0lNUDpQbGF0Zm9ybT0iV2luZG93cyIKICAgR0lNUDpUaW1lU3RhbXA9IjE2NDQ1ODI0MDQ3ODc2NjUiCiAgIEdJTVA6VmVyc2lvbj0iMi4xMC4yNCIKICAgdGlmZjpPcmllbnRhdGlvbj0iMSIKICAgeG1wOkNyZWF0b3JUb29sPSJHSU1QIDIuMTAiPgogICA8eG1wTU06SGlzdG9yeT4KICAgIDxyZGY6U2VxPgogICAgIDxyZGY6bGkKICAgICAgc3RFdnQ6YWN0aW9uPSJzYXZlZCIKICAgICAgc3RFdnQ6Y2hhbmdlZD0iLyIKICAgICAgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDplMTE5ZmRkMC04ODgwLTQ0NDQtYTg4MC02ODRlNTg4MGEzM2YiCiAgICAgIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkdpbXAgMi4xMCAoV2luZG93cykiCiAgICAgIHN0RXZ0OndoZW49IjIwMjItMDItMTFUMTM6MjY6NDQiLz4KICAgIDwvcmRmOlNlcT4KICAgPC94bXBNTTpIaXN0b3J5PgogIDwvcmRmOkRlc2NyaXB0aW9uPgogPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8P3hwYWNrZXQgZW5kPSJ3Ij8+QhhreAAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAAN1wAADdcBQiibeAAAAAd0SU1FB+YCCwwaLCrn6QIAAACQSURBVDjLY2AYBQMPGJE5cROOK/37///ofwYGCRzqX//7999mebH1LZgAE7LsogLLewwMDO4MDAwfsWj+/P8/gyeyZgwDGBgYGJYUWl1iZGAMZGBg+Ikk/JuBgSF0WZHVWXT1TNjcuaTQcj8DA0MCAwPDPwYGhv8MDAypSwutdpIcQDH9x4pj+o8VjyYVGgMAhMInzjvMAn0AAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/up-down-arrows-light.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAJCAIAAABxOqH0AAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAARElEQVQImWN8K6PCwMDAwMBwfMYEy4wCCJsJLgQnoaJwDpzNuGXLFgYMwAg3F0UUq1omuL1wYJlRwAShkIUQLoNw4NIA3UcXw9uo6KsAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/dark/scrollbars.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogQ0xBU1NJQyBWQVJJQU5UUw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5jbGFzc2ljLXNjcm9sbHMgLnNjcm9sbCwNCi5zY3JvbGwuY2xhc3NpYy1zY3JvbGxzIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmMyZjMwOw0KICAgIGJvcmRlcjpub25lOw0KfQ0KDQouY2xhc3NpYy1zY3JvbGxzIC5zY3JvbGwgLmJ1dHRvbiwNCi5zY3JvbGwuY2xhc3NpYy1zY3JvbGxzIC5idXR0b257DQogICAgYmFja2dyb3VuZC1jb2xvcjogIzJjMmYzMDsNCiAgICBib3JkZXI6bm9uZTsNCn0NCg0KLmNsYXNzaWMtc2Nyb2xscyAuc2Nyb2xsIC50aHVtYiwNCi5zY3JvbGwuY2xhc3NpYy1zY3JvbGxzIC50aHVtYiB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogIzNkNDA0MjsNCn0NCg0KLmNsYXNzaWMtc2Nyb2xscyAuc2Nyb2xsIC50aHVtYjpob3ZlciwNCi5zY3JvbGwuY2xhc3NpYy1zY3JvbGxzIC50aHVtYjpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogIzQ1NDg0YTsNCn0NCg0KLmNsYXNzaWMtc2Nyb2xscyAuc2Nyb2xsIC50aHVtYjpkb3duLA0KLnNjcm9sbC5jbGFzc2ljLXNjcm9sbHMgLnRodW1iOmRvd24gew0KICAgIGJhY2tncm91bmQtY29sb3I6ICM0NTQ4NGE7DQp9DQoNCi5jbGFzc2ljLXNjcm9sbHMgLnNjcm9sbCAudGh1bWI6ZGlzYWJsZWQsDQouc2Nyb2xsLmNsYXNzaWMtc2Nyb2xscyAudGh1bWI6ZGlzYWJsZWQgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzM3Mzg7DQp9DQoNCi5jbGFzc2ljLXNjcm9sbHMgLnZlcnRpY2FsLXNjcm9sbCAuZGVpbmMsDQoudmVydGljYWwtc2Nyb2xsLmNsYXNzaWMtc2Nyb2xscyAuZGVpbmMgew0KICAgIGljb246ICJoYXhldWktY29yZS9zdHlsZXMvc2hhcmVkL3VwLWFycm93LWxpZ2h0LnBuZyI7DQp9DQoNCi5jbGFzc2ljLXNjcm9sbHMgLnZlcnRpY2FsLXNjcm9sbCAuZGVpbmM6ZG93biwNCi52ZXJ0aWNhbC1zY3JvbGwuY2xhc3NpYy1zY3JvbGxzIC5kZWluYzpkb3duIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL3NoYXJlZC91cC1hcnJvdy1icmlnaHQucG5nIjsNCn0NCg0KLmNsYXNzaWMtc2Nyb2xscyAudmVydGljYWwtc2Nyb2xsIC5pbmMsDQoudmVydGljYWwtc2Nyb2xsLmNsYXNzaWMtc2Nyb2xscyAuaW5jIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL3NoYXJlZC9kb3duLWFycm93LWxpZ2h0LnBuZyI7DQp9DQoNCi5jbGFzc2ljLXNjcm9sbHMgLnZlcnRpY2FsLXNjcm9sbCAuaW5jOmRvd24sDQoudmVydGljYWwtc2Nyb2xsLmNsYXNzaWMtc2Nyb2xscyAuaW5jOmRvd24gew0KICAgIGljb246ICJoYXhldWktY29yZS9zdHlsZXMvc2hhcmVkL2Rvd24tYXJyb3ctYnJpZ2h0LnBuZyI7DQp9DQoNCi5jbGFzc2ljLXNjcm9sbHMgLmhvcml6b250YWwtc2Nyb2xsIC5kZWluYywNCi5ob3Jpem9udGFsLXNjcm9sbC5jbGFzc2ljLXNjcm9sbHMgLmRlaW5jIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL3NoYXJlZC9sZWZ0LWFycm93LWxpZ2h0LnBuZyI7DQp9DQoNCi5jbGFzc2ljLXNjcm9sbHMgLmhvcml6b250YWwtc2Nyb2xsIC5kZWluYzpkb3duLA0KLmhvcml6b250YWwtc2Nyb2xsLmNsYXNzaWMtc2Nyb2xscyAuZGVpbmM6ZG93biB7DQogICAgaWNvbjogImhheGV1aS1jb3JlL3N0eWxlcy9zaGFyZWQvbGVmdC1hcnJvdy1icmlnaHQucG5nIjsNCn0NCg0KLmNsYXNzaWMtc2Nyb2xscyAuaG9yaXpvbnRhbC1zY3JvbGwgLmluYywNCi5ob3Jpem9udGFsLXNjcm9sbC5jbGFzc2ljLXNjcm9sbHMgLmluYyB7DQogICAgaWNvbjogImhheGV1aS1jb3JlL3N0eWxlcy9zaGFyZWQvcmlnaHQtYXJyb3ctbGlnaHQucG5nIjsNCn0NCg0KLmNsYXNzaWMtc2Nyb2xscyAuaG9yaXpvbnRhbC1zY3JvbGwgLmluYzpkb3duLA0KLmhvcml6b250YWwtc2Nyb2xsLmNsYXNzaWMtc2Nyb2xscyAuaW5jOmRvd24gew0KICAgIGljb246ICJoYXhldWktY29yZS9zdHlsZXMvc2hhcmVkL3JpZ2h0LWFycm93LWJyaWdodC5wbmciOw0KfQ0K"},{ name : "haxeui-core/styles/default/optionboxes.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogT1BUSU9OQk9YDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLm9wdGlvbmJveCB7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KICAgIGhvcml6b250YWwtc3BhY2luZzogNHB4Ow0KICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgICBjb2xvcjogJG5vcm1hbC10ZXh0LWNvbG9yOw0KfQ0KDQoub3B0aW9uYm94OmhvdmVyIHsNCn0NCg0KLm9wdGlvbmJveDpkaXNhYmxlZCB7DQogICAgY3Vyc29yOiBkZWZhdWx0Ow0KICAgIGNvbG9yOiAkZGlzYWJsZWQtdGV4dC1jb2xvcjsNCiAgICBib3JkZXItY29sb3I6ICRkaXNhYmxlZC1ib3JkZXItY29sb3I7DQp9DQoNCi5vcHRpb25ib3gtdmFsdWUgew0KICAgIGJvcmRlcjogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICR0ZXJ0aWFyeS1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIHdpZHRoOiAxOHB4Ow0KICAgIGhlaWdodDogMThweDsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOw0KICAgIGJvcmRlci1yYWRpdXM6IDlweDsNCiAgICBpY29uOiBub25lOw0KICAgIGZpbHRlcjogJG5vcm1hbC1pbm5lci1zaGFkb3c7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQoub3B0aW9uYm94LXZhbHVlOmhvdmVyIHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAkYWNjZW50LWNvbG9yOw0KfQ0KDQoub3B0aW9uYm94LXZhbHVlOmFjdGl2ZSB7DQogICAgYm9yZGVyOiAxcHggc29saWQgJGFjY2VudC1jb2xvcjsNCn0NCg0KLm9wdGlvbmJveC12YWx1ZTpzZWxlY3RlZCB7DQogICAgaWNvbjogJG9wdGlvbi1zZWxlY3RlZDsNCn0NCg0KLm9wdGlvbmJveC12YWx1ZTpkaXNhYmxlZCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNvbGlkLWJhY2tncm91bmQtY29sb3ItZGlzYWJsZWQ7DQogICAgYm9yZGVyLWNvbG9yOiAkZGlzYWJsZWQtYm9yZGVyLWNvbG9yOw0KICAgIGN1cnNvcjogZGVmYXVsdDsNCn0NCg0KLm9wdGlvbmJveC1sYWJlbCB7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQp9DQoNCi5vcHRpb25ib3gtaWNvbiB7DQogICAgaG9yaXpvbnRhbC1hbGlnbjogY2VudGVyOw0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KICAgIG9wYWNpdHk6IDE7DQp9DQoNCi5vcHRpb25ib3gtaWNvbjpkaXNhYmxlZCB7DQogICAgY3Vyc29yOiBkZWZhdWx0Ow0KICAgIG9wYWNpdHk6IDAuNTsNCn0NCg"},{ name : "haxeui-core/styles/shared/gripper-vertical.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAKCAIAAAAcmWhZAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAH0lEQVQImWN8K6PCAANMDAwMk5KjJyVHQzlwwEg7ZQCDgwyl+MMKdgAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/shared/info-small.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABUElEQVQ4jaWSu05CQRRF15m5FBZgYWHjKyQan4U91laKpbGgNT7iB/gfvloJsZToD1j4BWqCMSTKD1BAYbwXzrG4YhQuinF3M5m9Zs0D/hlJmpw4bc4HannEzQBg+tQ2Kdf20pUfAdmz+rBq6kSMzQS4GVwErXCnejDS6AFkz+rD1k7dAou/ON/7KMx1IK4zr5o66S6PZxxjafcdYCy1g9TRN4OJ0+a8Vx66tc/XhgAoXL92e5gaC7W9dCUA8GobID0Xenjz1vcg3lkeqDgAETedtGo161nN+kSCatwJANSwpPdcHu2Uo14FweDjEgWt9nPtF5G442IDuYSYOGBUHeV4849MHTdLAluD9a34vJspfBoABK1wB+F+gPadb0X7ncEnoHow0vBRmMMokXwcBSv6VriS+JW/ZvKoOSdi607cLICqVgi4etnOPA5g+Le8A2uUcuHpLgzCAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/shared/option-blue.png", data : ""},{ name : "haxeui-core/styles/default/calendars.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogQ0FMRU5EQVINCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQouY2FsZW5kYXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRkZWZhdWx0LWJhY2tncm91bmQtY29sb3I7DQogICAgcGFkZGluZzogNXB4Ow0KICAgIGJvcmRlcjogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIGJvcmRlci1yYWRpdXM6IDFweDsNCn0NCg0KLmNhbGVuZGFyIC5idXR0b24gew0KICAgIHBhZGRpbmc6IDhweDsNCn0NCg0KLmNhbGVuZGFyIC5jYWxlbmRhci1vZmYtZGF5IHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJGRlZmF1bHQtYmFja2dyb3VuZC1jb2xvcjsNCiAgICBjdXJzb3I6IGRlZmF1bHQ7DQp9DQoNCi5jYWxlbmRhciAuY2FsZW5kYXItZGF5IHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJGFjY2VudC1jb2xvci1saWdodGVyOw0KfQ0KDQouY2FsZW5kYXIgLmNhbGVuZGFyLWRheTpob3ZlciB7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWxlY3Rpb24tYmFja2dyb3VuZC1jb2xvci1ob3ZlcjsNCn0NCg0KLmNhbGVuZGFyIC5jYWxlbmRhci1kYXktc2VsZWN0ZWQgew0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2VsZWN0aW9uLWJhY2tncm91bmQtY29sb3I7DQogICAgY29sb3I6ICRzZWxlY3Rpb24tdGV4dC1jb2xvcjsNCn0NCg0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoqKiBDQUxFTkRBUlZJRVcNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQouY2FsZW5kYXItdmlldyB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJGRlZmF1bHQtYmFja2dyb3VuZC1jb2xvcjsNCiAgICBwYWRkaW5nOiA1cHg7DQogICAgYm9yZGVyOiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgYm9yZGVyLXJhZGl1czogMXB4Ow0KfQ0KDQouZHJvcGRvd24tcG9wdXAgPiAuY2FsZW5kYXItdmlldyB7DQogICAgYm9yZGVyOiBub25lOw0KfQ0KDQouY2FsZW5kYXItdmlldyAuY2FsZW5kYXIgew0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBwYWRkaW5nOiAwcHg7DQp9DQoNCi5jYWxlbmRhci12aWV3IC5oYm94IHsNCiAgICBzcGFjaW5nOiAwOw0KfQ0KDQouY2FsZW5kYXItdmlldyAjcHJldi1tb250aCB7DQogICAgaWNvbjogJGFycm93LWxlZnQ7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJGRlZmF1bHQtYmFja2dyb3VuZC1jb2xvcjsNCn0NCg0KLmNhbGVuZGFyLXZpZXcgI25leHQtbW9udGggew0KICAgIGljb246ICRhcnJvdy1yaWdodDsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZGVmYXVsdC1iYWNrZ3JvdW5kLWNvbG9yOw0KfQ0KDQouY2FsZW5kYXItdmlldyAjY3VycmVudC1tb250aCB7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCn0NCg0KLmNhbGVuZGFyLXZpZXcgI2N1cnJlbnQteWVhciB7DQogICAgdGV4dC1hbGlnbjogcmlnaHQ7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgcGFkZGluZy10b3A6IDFweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZGVmYXVsdC1iYWNrZ3JvdW5kLWNvbG9yOw0KfQ0KLmNhbGVuZGFyLXZpZXcgI2N1cnJlbnQteWVhciAuYnV0dG9uIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZGVmYXVsdC1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIGJvcmRlcjogbm9uZTsNCn0NCg"},{ name : "haxeui-core/styles/shared/minimize-button-light.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAAuSURBVChTY/z//z8DKYAJShMNRjUQA2ivAR7T9V0TGsAMHKCxrAAsT2LSYGAAAMFlDQ2rsh18AAAAAElFTkSuQmCC"},{ name : "haxeui_rtti", data : "YnkxMDp2aXNpb252aWV3b3kxMDpzdXBlckNsYXNzeTIzOmhheGUudWkuY29udGFpbmVycy52Ym94eTEwOnByb3BlcnRpZXNiaGd5ODptYWludmlld29SMVIyUjNiaGd5MjQ6aGF4ZS51aS50b29sdGlwcy50b29sdGlwb1IxeTIyOmhheGUudWkuY29udGFpbmVycy5ib3hSM2JoZ3kxNzpoYXhlLnVpLnByZWxvYWRlcm9SMVI2UjNiaGd5MjU6aGF4ZS51aS5jb3JlLml0ZW1yZW5kZXJlcm9SMVI2UjNiaGd5MzM6aGF4ZS51aS5jb3JlLmludGVyYWN0aXZlY29tcG9uZW50b1IxeTIyOmhheGUudWkuY29yZS5jb21wb25lbnRSM2J5MTY6YWxsb3dpbnRlcmFjdGlvbm95MTI6cHJvcGVydHlUeXBleTQ6Ym9vbHkxMjpwcm9wZXJ0eU5hbWVSMTFnaGd5MzI6aGF4ZS51aS5jb3JlLmNvbXBvbmVudHZhbGlkYXRpb25vUjF5Mjg6aGF4ZS51aS5jb3JlLmNvbXBvbmVudGV2ZW50c1IzYmhneTI4OmhheGUudWkuY29yZS5jb21wb25lbnRsYXlvdXRvUjFSMTVSM2JoZ1IxNm9SMXkzMTpoYXhlLnVpLmNvcmUuY29tcG9uZW50Y29udGFpbmVyUjNiaGdSMThvUjF5Mjg6aGF4ZS51aS5jb3JlLmNvbXBvbmVudGNvbW1vblIzYnk1OnZhbHVlb1IxMnk3OmR5bmFtaWNSMTRSMjBneTE1OnRvb2x0aXByZW5kZXJlcm9SMTJ5OTpjb21wb25lbnRSMTRSMjJneTc6dG9vbHRpcG9SMTJSMjFSMTRSMjRneTQ6dGV4dG9SMTJ5NjpzdHJpbmdSMTRSMjVneTg6ZGlzYWJsZWRvUjEyUjEzUjE0UjI3Z2hneTI4OmhheGUudWkuY29yZS5jb21wb25lbnRib3VuZHNvUjFSMTdSM2J5NTp3aWR0aG9SMTJ5NTpmbG9hdFIxNFIyOWd5MTI6cGVyY2VudHdpZHRob1IxMlIzMFIxNFIzMWd5MTM6cGVyY2VudGhlaWdodG9SMTJSMzBSMTRSMzJneTY6aGVpZ2h0b1IxMlIzMFIxNFIzM2doZ1IxMG9SMXkyOTpoYXhlLnVpLmJhY2tlbmQuY29tcG9uZW50aW1wbFIzYmhneTMwOmhheGUudWkuY29yZS5iYXNpY2l0ZW1yZW5kZXJlcm9SMVI4UjNiaGdSMm9SMVI2UjNiaGd5Mjk6aGF4ZS51aS5jb250YWluZXJzLnNjcm9sbHZpZXdvUjFSOVIzYnkxMDp2c2Nyb2xscG9zb1IxMlIzMFIxNFIzN2d5MTU6dnNjcm9sbHBhZ2VzaXplb1IxMlIzMFIxNFIzOGd5MTA6dnNjcm9sbG1heG9SMTJSMzBSMTRSMzlneTc6dmlydHVhbG9SMTJSMTNSMTRSNDBneTEwOnNjcm9sbG1vZGVvUjEyUjQxUjE0UjQxZ3kxOTpwZXJjZW50Y29udGVudHdpZHRob1IxMlIzMFIxNFI0Mmd5MjA6cGVyY2VudGNvbnRlbnRoZWlnaHRvUjEyUjMwUjE0UjQzZ3kxMDpoc2Nyb2xscG9zb1IxMlIzMFIxNFI0NGd5MTU6aHNjcm9sbHBhZ2VzaXplb1IxMlIzMFIxNFI0NWd5MTA6aHNjcm9sbG1heG9SMTJSMzBSMTRSNDZneTEyOmNvbnRlbnR3aWR0aG9SMTJSMzBSMTRSNDdneTg6Y29udGVudHNvUjEyUjIzUjE0UjQ4Z3kxNzpjb250ZW50bGF5b3V0bmFtZW9SMTJSMjZSMTRSNDlneTEzOmNvbnRlbnRoZWlnaHRvUjEyUjMwUjE0UjUwZ3kxNTphdXRvaGlkZXNjcm9sbHNvUjEyUjEzUjE0UjUxZ3kxNTphbGxvd2F1dG9zY3JvbGxvUjEyUjEzUjE0UjUyZ2hneTI3OmhheGUudWkuY29udGFpbmVycy5saXN0dmlld29SMVIzNlIzYnkxNjp2YXJpYWJsZWl0ZW1zaXplb1IxMlIxM1IxNFI1NGdSMjBvUjEyeTM6aW50UjE0UjIwZ3kxMzpzZWxlY3Rpb25tb2Rlb1IxMlI1NlIxNFI1Nmd5MTM6c2VsZWN0ZWRpdGVtc29SMTJ5MTg6YXJyYXklM0NkeW5hbWljJTNFUjE0UjU3Z3kxMjpzZWxlY3RlZGl0ZW1vUjEyUjIxUjE0UjU5Z3kxNTpzZWxlY3RlZGluZGljZXNvUjEyeTE0OmFycmF5JTNDaW50JTNFUjE0UjYwZ3kxMzpzZWxlY3RlZGluZGV4b1IxMlI1NVIxNFI2Mmd5MjI6bG9uZ3ByZXNzc2VsZWN0aW9udGltZW9SMTJSNTVSMTRSNjNneTk6aXRlbXdpZHRob1IxMlIzMFIxNFI2NGd5MTA6aXRlbWhlaWdodG9SMTJSMzBSMTRSNjVneTk6aXRlbWNvdW50b1IxMlI1NVIxNFI2Nmd5MTA6ZGF0YXNvdXJjZW9SMTJ5MjM6ZGF0YXNvdXJjZSUzQ2R5bmFtaWMlM0VSMTRSNjdnaGd5MjM6aGF4ZS51aS5jb250YWluZXJzLmhib3hvUjFSNlIzYmhneTIzOmhheGUudWkuY29udGFpbmVycy5ncmlkb1IxUjZSM2JoZ3kzMTpoYXhlLnVpLmNvbnRhaW5lcnMuY2FsZW5kYXJ2aWV3b1IxUjZSM2J5MTI6c2VsZWN0ZWRkYXRlb1IxMnk0OmRhdGVSMTRSNzJnaGdSNm9SMVIxMFIzYnk0Omljb25vUjEyUjI2UjE0Ujc0Z2hneTMzOmhheGUudWkuY29tcG9uZW50cy52ZXJ0aWNhbHNjcm9sbG9SMXkyNTpoYXhlLnVpLmNvbXBvbmVudHMuc2Nyb2xsUjNiaGd5Mjg6aGF4ZS51aS5jb21wb25lbnRzLnRleHRmaWVsZG9SMVI5UjNiUjIwb1IxMlIyNlIxNFIyMGdSMjVvUjEyUjI2UjE0UjI1Z3kxOTpzZWxlY3Rpb25zdGFydGluZGV4b1IxMlI1NVIxNFI3OGd5MTc6c2VsZWN0aW9uZW5kaW5kZXhvUjEyUjU1UjE0Ujc5Z3kxMzpyZXN0cmljdGNoYXJzb1IxMlIyNlIxNFI4MGd5MTE6cGxhY2Vob2xkZXJvUjEyUjI2UjE0UjgxZ3k4OnBhc3N3b3Jkb1IxMlIxM1IxNFI4Mmd5ODptYXhjaGFyc29SMTJSNTVSMTRSODNnUjc0b1IxMlIyNlIxNFI3NGd5ODpodG1sdGV4dG9SMTJSMjZSMTRSODRneTEwOmNhcmV0aW5kZXhvUjEyUjU1UjE0Ujg1Z2hneTI2OmhheGUudWkuY29tcG9uZW50cy5zdGVwcGVyb1IxUjJSM2JSMjBvUjEyUjMwUjE0UjIwZ3k0OnN0ZXBvUjEyUjMwUjE0Ujg3Z3kxNDpyZXBlYXRpbnRlcnZhbG9SMTJSNTVSMTRSODhneTg6cmVwZWF0ZXJvUjEyUjEzUjE0Ujg5Z3k5OnByZWNpc2lvbm9SMTJSNTVSMTRSOTBneTM6cG9zb1IxMlIzMFIxNFI5MWd5MzptaW5vUjEyUjMwUjE0UjkyZ3kzOm1heG9SMTJSMzBSMTRSOTNnaGd5MjU6aGF4ZS51aS5jb21wb25lbnRzLnNwYWNlcm9SMVIxMFIzYmhnUjc2b1IxUjlSM2JSOTFvUjEyUjMwUjE0UjkxZ3k4OnBhZ2VzaXplb1IxMlIzMFIxNFI5NWdSOTJvUjEyUjMwUjE0UjkyZ1I5M29SMTJSMzBSMTRSOTNneTk6aW5jcmVtZW50b1IxMlIzMFIxNFI5NmdoZ3kyMzpoYXhlLnVpLmNvbXBvbmVudHMucnVsZW9SMVIxMFIzYmhneTI0OmhheGUudWkuY29tcG9uZW50cy5sYWJlbG9SMVIxMFIzYlIyMG9SMTJSMjZSMTRSMjBnUjI1b1IxMlIyNlIxNFIyNWdSODRvUjEyUjI2UjE0Ujg0Z2hneTI0OmhheGUudWkuY29tcG9uZW50cy5pbWFnZW9SMVIxMFIzYlIyMG9SMTJ5Nzp2YXJpYW50UjE0UjIwZ3k5OnNjYWxlbW9kZW9SMTJSMTAxUjE0UjEwMWd5ODpyZXNvdXJjZW9SMTJSMTAwUjE0UjEwMmd5MTM6b3JpZ2luYWx3aWR0aG9SMTJSMzBSMTRSMTAzZ3kxNDpvcmlnaW5hbGhlaWdodG9SMTJSMzBSMTRSMTA0Z3kxODppbWFnZXZlcnRpY2FsYWxpZ25vUjEyeTEzOnZlcnRpY2FsYWxpZ25SMTRSMTA1Z3kxMDppbWFnZXNjYWxlb1IxMlIzMFIxNFIxMDdneTIwOmltYWdlaG9yaXpvbnRhbGFsaWdub1IxMnkxNTpob3Jpem9udGFsYWxpZ25SMTRSMTA4Z2hneTM1OmhheGUudWkuY29tcG9uZW50cy5ob3Jpem9udGFsc2Nyb2xsb1IxUjc2UjNiaGd5MzM6aGF4ZS51aS5jb21wb25lbnRzLmhvcml6b250YWxydWxlb1IxUjk3UjNiaGd5Mjc6aGF4ZS51aS5jb21wb25lbnRzLmRyb3Bkb3dub1IxeTI1OmhheGUudWkuY29tcG9uZW50cy5idXR0b25SM2JSNDBvUjEyUjEzUjE0UjQwZ1IyMG9SMTJSMjFSMTRSMjBneTQ6dHlwZW9SMTJSMjZSMTRSMTE0Z1I1OW9SMTJSMjFSMTRSNTlnUjYyb1IxMlI1NVIxNFI2Mmd5MTI6c2VhcmNocHJvbXB0b1IxMlIyNlIxNFIxMTVneTExOnNlYXJjaGZpZWxkb1IxMlIyM1IxNFIxMTZneTEwOnNlYXJjaGFibGVvUjEyUjEzUjE0UjExN2d5MTc6aGFuZGxlcnN0eWxlbmFtZXNvUjEyUjI2UjE0UjExOGd5MTM6ZHJvcGRvd253aWR0aG9SMTJSMzBSMTRSMTE5Z3kxMjpkcm9wZG93bnNpemVvUjEyUjU1UjE0UjEyMGd5MTQ6ZHJvcGRvd25oZWlnaHRvUjEyUjMwUjE0UjEyMWdSNjdvUjEyUjY4UjE0UjY3Z2hneTMyOmhheGUudWkuY29tcG9uZW50cy5jaGVja2JveHZhbHVlb1IxUjlSM2JoZ3kyNzpoYXhlLnVpLmNvbXBvbmVudHMuY2hlY2tib3hvUjFSOVIzYlIyMG9SMTJSMTNSMTRSMjBnUjI1b1IxMlIyNlIxNFIyNWd5ODpzZWxlY3RlZG9SMTJSMTNSMTRSMTI0Z2hneTI1OmhheGUudWkuY29tcG9uZW50cy5jYW52YXNvUjFSMTBSM2JSNjdvUjEyUjY4UjE0UjY3Z2hneTI3OmhheGUudWkuY29tcG9uZW50cy5jYWxlbmRhcm9SMVI3MFIzYlI3Mm9SMTJSNzNSMTRSNzJnUjczb1IxMlI3M1IxNFI3M2doZ1IxMTNvUjFSOVIzYlIyMG9SMTJSMjZSMTRSMjBneTY6dG9nZ2xlb1IxMlIxM1IxNFIxMjdnUjI1b1IxMlIyNlIxNFIyNWdSMTI0b1IxMlIxM1IxNFIxMjRnUjg4b1IxMlI1NVIxNFI4OGdSODlvUjEyUjEzUjE0Ujg5Z3kxMzpyZW1haW5wcmVzc2Vkb1IxMlIxM1IxNFIxMjhnUjc0b1IxMlIxMDBSMTRSNzRneTE0OmVhc2VpbnJlcGVhdGVyb1IxMlIxM1IxNFIxMjlneTE0OmNvbXBvbmVudGdyb3Vwb1IxMlIyNlIxNFIxMzBnaGdSMzRvUjF5Mjk6aGF4ZS51aS5iYWNrZW5kLmNvbXBvbmVudGJhc2VSM2JoZ1IxMzFvUjFSMjhSM2JoZ3kxODpmaWx0ZXJzLndoaXRlbm9pc2VvUjF5MjI6ZmlsdGVycy5maWx0ZXJwYXJhbXN1aVIzYmhneTI5OmZpbHRlcnMuc29iZWxlZGdlZGlmZm9wZXJhdG9yb1IxUjEzM1IzYmhneTI2OmZpbHRlcnMuc29iZWxlZGdlZGV0ZWN0aW9ub1IxUjEzM1IzYmhneTI5OmZpbHRlcnMuc2ltcGxlbGluZTJkZGV0ZWN0aW9ub1IxUjEzM1IzYmhneTE1OmZpbHRlcnMuc2hhcnBlbm9SMVIxMzNSM2JoZ3kyNjpmaWx0ZXJzLnNhbHRhbmRwZXBwZXJub2lzZW9SMVIxMzNSM2JoZ3kzMDpmaWx0ZXJzLnJvYmVydGVkZ2VkaWZmb3BlcmF0b3JvUjFSMTMzUjNiaGd5MjY6ZmlsdGVycy5yZXBsYWNlY29sb3JyYW5nZXNvUjFSMTMzUjNiaGd5MzE6ZmlsdGVycy5wZXJ3aXR0ZWRnZWRpZmZvcGVyYXRvcm9SMVIxMzNSM2JoZ3kyODpmaWx0ZXJzLnBlcndpdHRlZGdlZGV0ZWN0aW9ub1IxUjEzM1IzYmhneTE3OmZpbHRlcnMubm9ybWFsaXplb1IxUjEzM1IzYmhneTI3OmZpbHRlcnMubmVhcmVzdG5laWdoYm9yYmx1cm9SMVIxMzNSM2JoZ3kxODpmaWx0ZXJzLm1lZGlhbmJsdXJvUjFSMTMzUjNiaGd5MjQ6ZmlsdGVycy5saW1pdGNvbG9ycmFuZ2Vzb1IxUjEzM1IzYmhneTQwOmZpbHRlcnMubGFwbGFjaWFub2ZnYXVzc2lhbmVkZ2VkZXRlY3Rpb25vUjFSMTMzUjNiaGd5MzM6ZmlsdGVycy5sYXBsYWNpYW5lZGdlZGlmZm9wZXJhdG9yb1IxUjEzM1IzYmhneTE0OmZpbHRlcnMuaW52ZXJ0b1IxUjEzM1IzYmhneTE3OmZpbHRlcnMuZ3JheXNjYWxlb1IxUjEzM1IzYmhneTIwOmZpbHRlcnMuZ2F1c3NpYW5ibHVyb1IxUjEzM1IzYmhneTE4OmZpbHRlcnMuZmlsdGVydmlld29SMXkxMTpjb2xsYXBzaWJsZVIzYmhnUjEzM29SMVIyUjNiaGd5MTM6ZmlsdGVycy5lcm9kZW9SMVIxMzNSM2JoZ3kyMDpmaWx0ZXJzLmRyb3BvdXRub2lzZW9SMVIxMzNSM2JoZ3kxNDpmaWx0ZXJzLmRpbGF0ZW9SMVIxMzNSM2JoZ3kxNTpmaWx0ZXJzLmRlZXBmcnlvUjFSMTMzUjNiaGd5MTY6ZmlsdGVycy5jb252b2x2ZW9SMVIxMzNSM2JoZ3kzMzpmaWx0ZXJzLmNvbnZvbHV0aW9ucmlkZ2VkZXRlY3Rpb25vUjFSMTMzUjNiaGd5MTY6ZmlsdGVycy5jb250cmFzdG9SMVIxMzNSM2JoZ3kxNTpmaWx0ZXJzLmNvbWJpbmVvUjFSMTMzUjNiaGd5MjY6ZmlsdGVycy5jYW5ueWVkZ2VkZXRlY3Rpb25vUjFSMTMzUjNiaGd5MjE6ZmlsdGVycy5ibGFja2FuZHdoaXRlb1IxUjEzM1IzYmhneTI0OmZpbHRlcnMuYmlsYXRlcmFsZGVub2lzZW9SMVIxMzNSM2JoZ1IxNTNvUjFSMlIzYlIyNW9SMTJSMjZSMTRSMjVneTk6Y29sbGFwc2Vkb1IxMlIxM1IxNFIxNjVnaGdo"},{ name : "haxeui-core/styles/default/haxeui_tiny.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAwFBMVEUAAAA+drJml8uevd7K2+1Ee7c1aaBcjsWfv99RhsA7cKqfvt/J2e01aaHJ3Ow1Z56kweGsxuM5cKxzoM9PhMCnxOJBd7SBqdSTtNp6otG90ui2zeetx+RFerM1a6Rllsiow+JDe7qhvt9jlsqfvt9dj8SzzOaoxeJCd7A5bqhVicKAqdOev95ik8SsyOOivuCmw99ThcJ4pNCnv99kl8tomc1+p9RRiMSUtts8drV0oNFdkcibu96IrtdOhL9Cerg7AHaNAAAANXRSTlMASfTz8fHx5uTh4d/T00RE9PLy8fHw5+bl4uHh4eHh39bW0NC/v7m5ubm4tVROSkpIR0ZAQIt9oOEAAACUSURBVBjTRc1FEsMwEETRjpkdZmZmS5FD979VRjVVce/e3zS8MGyMz6DdpuV2x0X/QTPn++uu9pRSDtAl0wRJL4DFzjIuDqIXm8snRlJhc7FTYMnmsgZwZHMpUTjlRZA6rET+t9oAiSl0YatqiugtqLBpMSyyLmzloCe4sNUQnpaxOFy29S+FAK2Rb0/0G+4zw/WbP+FUKshItzNPAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/splitters.css", data : "LnNwbGl0dGVyIHsNCiAgICBzcGFjaW5nOiAwOw0KfQ0KDQoudmVydGljYWwtc3BsaXR0ZXItZ3JpcHBlciB7DQogICAgd2lkdGg6IDEwMCU7DQogICAgaGVpZ2h0OiA2cHg7DQogICAgY3Vyc29yOiByb3ctcmVzaXplOw0KICAgIHBvaW50ZXItZXZlbnRzOiB0cnVlOw0KfQ0KDQoudmVydGljYWwtc3BsaXR0ZXItZ3JpcHBlcjpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNvbGlkLWJhY2tncm91bmQtY29sb3I7DQp9DQoNCi52ZXJ0aWNhbC1zcGxpdHRlci1ncmlwcGVyOmRvd24gew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzb2xpZC1iYWNrZ3JvdW5kLWNvbG9yLWRvd247DQp9DQoNCi52ZXJ0aWNhbC1zcGxpdHRlci1ncmlwcGVyIC5pbWFnZSB7DQogICAgcmVzb3VyY2U6ICRncmlwcGVyLWhvcml6b250YWw7DQogICAgaG9yaXpvbnRhbC1hbGlnbjogY2VudGVyOw0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQp9DQoNCi5ob3Jpem9udGFsLXNwbGl0dGVyLWdyaXBwZXIgew0KICAgIHdpZHRoOiA2cHg7DQogICAgaGVpZ2h0OiAxMDAlOw0KICAgIGN1cnNvcjogY29sLXJlc2l6ZTsNCiAgICBwb2ludGVyLWV2ZW50czogdHJ1ZTsNCn0NCg0KLmhvcml6b250YWwtc3BsaXR0ZXItZ3JpcHBlcjpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNvbGlkLWJhY2tncm91bmQtY29sb3I7DQp9DQoNCi5ob3Jpem9udGFsLXNwbGl0dGVyLWdyaXBwZXI6ZG93biB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNvbGlkLWJhY2tncm91bmQtY29sb3ItZG93bjsNCn0NCg0KLmhvcml6b250YWwtc3BsaXR0ZXItZ3JpcHBlciAuaW1hZ2Ugew0KICAgIHJlc291cmNlOiAkZ3JpcHBlci12ZXJ0aWNhbDsNCiAgICBob3Jpem9udGFsLWFsaWduOiBjZW50ZXI7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCn0NCg"},{ name : "haxeui-core/styles/shared/transparent_px.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAADElEQVQImWN4K6MCAAMnAS7qrFRjAAAAAElFTkSuQmCC"},{ name : "haxeui-core/locale/en_US/formats.properties", data : "Zm9ybWF0cy5kYXRlLnNob3J0PSVtLyVkLyVZDQo"},{ name : "haxeui-core/locale/es/formats.properties", data : "Zm9ybWF0cy5kYXRlLnNob3J0PSVkLyVtLyVZDQpmb3JtYXRzLmRlY2ltYWwuc2VwZXJhdG9yPSwNCg"},{ name : "haxeui-core/styles/shared/sortable-arrows-blue.png", data : ""},{ name : "haxeui-core/styles/shared/up-arrow-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAECAIAAADNpLIqAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAKklEQVQImWN8K6PCwMDAwMCQbKIz98wVCJsJLgQnoaJwDpzNGBAQwIABAOGNCDDIObJsAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/listview.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogTElTVFZJRVcNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoubGlzdHZpZXcgLmxpc3R2aWV3LWNvbnRlbnRzIHsNCiAgICBzcGFjaW5nOiAwOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIHBhZGRpbmc6IDBweDsNCn0NCg0KLmxpc3R2aWV3IC5saXN0dmlldy1jb250ZW50cyA+IC5pdGVtcmVuZGVyZXIgew0KICAgIGN1cnNvcjogcG9pbnRlcjsgIA0KfQ0KDQoubGlzdHZpZXcgLmxpc3R2aWV3LWNvbnRlbnRzID4gLml0ZW1yZW5kZXJlciAubGFiZWwgew0KICAgIGNvbG9yOiAkbm9ybWFsLXRleHQtY29sb3I7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQoubGlzdHZpZXcgLmV2ZW4gew0KICAgIGJhY2tncm91bmQtY29sb3I6ICR0ZXJ0aWFyeS1iYWNrZ3JvdW5kLWNvbG9yOw0KfQ0KDQoubGlzdHZpZXcgLmV2ZW46aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWxlY3Rpb24tYmFja2dyb3VuZC1jb2xvci1ob3ZlcjsNCn0NCg0KLmxpc3R2aWV3IC5vZGQgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzb2xpZC1iYWNrZ3JvdW5kLWNvbG9yLWFsdDsNCn0NCg0KLmxpc3R2aWV3IC5vZGQ6aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWxlY3Rpb24tYmFja2dyb3VuZC1jb2xvci1ob3ZlcjsNCn0NCg0KLmxpc3R2aWV3IC5saXN0dmlldy1jb250ZW50cyA+IC5pdGVtcmVuZGVyZXIgew0KICAgIGhlaWdodDogYXV0bzsNCiAgICBwYWRkaW5nOiA2cHg7DQp9DQoNCi5saXN0dmlldyAubGlzdHZpZXctY29udGVudHMgPiAuaXRlbXJlbmRlcmVyOnNlbGVjdGVkIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2VsZWN0aW9uLWJhY2tncm91bmQtY29sb3I7DQogICAgY29sb3I6ICRzZWxlY3Rpb24tdGV4dC1jb2xvcjsNCn0NCg0KLmxpc3R2aWV3IC5saXN0dmlldy1jb250ZW50cyA+IC5pdGVtcmVuZGVyZXI6c2VsZWN0ZWQgLmxhYmVsIHsNCiAgICBjb2xvcjogJHNlbGVjdGlvbi10ZXh0LWNvbG9yOw0KfQ0KDQoubGlzdHZpZXc6ZGlzYWJsZWQgLmxhYmVsIHsNCiAgICBjb2xvcjogJGRpc2FibGVkLXRleHQtY29sb3I7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIExJU1QgVklFVyAtIExFRlQgTUVOVSBBTFRFUk5BVEUNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoNCi5saXN0dmlldy5sZWZ0LW1lbnUgew0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBwYWRkaW5nOiAwcHg7DQogICAgYm9yZGVyLXJhZGl1czogMDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc29saWQtYmFja2dyb3VuZC1jb2xvcjsNCiAgICBtb2RlOiBtb2JpbGU7DQogICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQp9DQoNCi5saXN0dmlldy5sZWZ0LW1lbnUgLnZlcnRpY2FsLXNjcm9sbCAuZGVpbmMsIC5saXN0dmlldy5sZWZ0LW1lbnUgLnZlcnRpY2FsLXNjcm9sbCAuaW5jIHsNCiAgICBoaWRkZW46IHRydWU7DQp9DQoNCi5saXN0dmlldy5sZWZ0LW1lbnUgLnZlcnRpY2FsLXNjcm9sbCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogbm9uZTsNCiAgICB3aWR0aDogOXB4Ow0KICAgIHBhZGRpbmc6IDJweDsNCn0NCg0KLmxpc3R2aWV3LmxlZnQtbWVudSAudmVydGljYWwtc2Nyb2xsIC50aHVtYiB7DQogICAgYmFja2dyb3VuZC1vcGFjaXR5OiAuMzsNCiAgICB3aWR0aDogNXB4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDRweDsNCn0NCg0KLmxpc3R2aWV3LmxlZnQtbWVudSAubGlzdHZpZXctY29udGVudHMgew0KfQ0KICAgICAgICANCi5saXN0dmlldy5sZWZ0LW1lbnUgLmV2ZW4gew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzb2xpZC1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICANCiAgICBwYWRkaW5nLXRvcDogOHB4Ow0KICAgIHBhZGRpbmctYm90dG9tOiA4cHg7DQp9DQoNCi5saXN0dmlldy5sZWZ0LW1lbnUgLmV2ZW46aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzb2xpZC1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOw0KICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIA0KICAgIHBhZGRpbmctdG9wOiA4cHg7DQogICAgcGFkZGluZy1ib3R0b206IDhweDsNCn0NCg0KLmxpc3R2aWV3LmxlZnQtbWVudSAub2RkIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc29saWQtYmFja2dyb3VuZC1jb2xvcjsNCiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgDQogICAgcGFkZGluZy10b3A6IDhweDsNCiAgICBwYWRkaW5nLWJvdHRvbTogOHB4Ow0KfQ0KDQoubGlzdHZpZXcubGVmdC1tZW51IC5vZGQ6aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzb2xpZC1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOw0KICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIA0KICAgIHBhZGRpbmctdG9wOiA4cHg7DQogICAgcGFkZGluZy1ib3R0b206IDhweDsNCn0NCg0KLmxpc3R2aWV3LmxlZnQtbWVudSAubGlzdHZpZXctY29udGVudHMgPiAuaXRlbXJlbmRlcmVyOnNlbGVjdGVkIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZGVmYXVsdC1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIGNvbG9yOiAkbm9ybWFsLXRleHQtY29sb3I7DQogICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgJGRlZmF1bHQtYmFja2dyb3VuZC1jb2xvcjsNCn0NCg0KDQoubGlzdHZpZXcubGVmdC1tZW51IC5saXN0dmlldy1jb250ZW50cyA+IC5pdGVtcmVuZGVyZXI6c2VsZWN0ZWQgLmxhYmVsIHsNCiAgICBjb2xvcjogJG5vcm1hbC10ZXh0LWNvbG9yOw0KfQ0KICAgIA0KLmxpc3R2aWV3LmxlZnQtbWVudSAudmVydGljYWwtc2Nyb2xsIHsNCiAgICBvcGFjaXR5OiAuNTsNCiAgICB3aWR0aDogOHB4Ow0KICAgIHBhZGRpbmc6IDJweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBub25lOw0KICAgIGJvcmRlcjogbm9uZTsNCn0NCg"},{ name : "haxeui-core/styles/default/dialogs.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogRElBTE9HUw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5kaWFsb2cgew0KICAgIGJvcmRlcjogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIGZpbHRlcjogJGRpYWxvZy1zaGFkb3c7DQogICAgYm9yZGVyLXJhZGl1czogNHB4Ow0KICAgIHdpZHRoOiBhdXRvOw0KICAgIGhlaWdodDogYXV0bzsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZGVmYXVsdC1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIHBhZGRpbmc6IDJweDsNCn0NCg0KLmRpYWxvZy1jb250YWluZXIgew0KICAgIHNwYWNpbmc6IDA7DQp9DQoNCi5kaWFsb2ctdGl0bGUgew0KICAgIGJhY2tncm91bmQtY29sb3I6IG5vbmU7DQogICAgcGFkZGluZzogMTBweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc29saWQtYmFja2dyb3VuZC1jb2xvcjsNCiAgICBib3JkZXI6IG5vbmU7DQp9DQoNCi5kaWFsb2ctdGl0bGUtbGFiZWwgew0KICAgIHdpZHRoOiAxMDAlOw0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQogICAgY29sb3I6ICRkaWFsb2ctdGl0bGUtY29sb3I7DQogICAgdmVydGljYWwtYWxpZ246ICJjZW50ZXIiOw0KfQ0KDQouZGlhbG9nLWNvbnRlbnQgew0KICAgIHBhZGRpbmc6IDEwcHg7DQp9DQoNCi5kaWFsb2ctY29udGVudC1wYWRkaW5nIHsNCiAgICBwYWRkaW5nOiAxMHB4Ow0KfQ0KDQouZGlhbG9nLm5vLXBhZGRpbmcgLmRpYWxvZy1jb250ZW50IHsNCiAgICBwYWRkaW5nOiAwcHg7DQp9DQoNCi5kaWFsb2ctZm9vdGVyLWNvbnRhaW5lciB7DQogICAgcGFkZGluZzogNXB4Ow0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBub25lOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzb2xpZC1iYWNrZ3JvdW5kLWNvbG9yOw0KfQ0KDQouZGlhbG9nLWZvb3RlciB7DQogICAgcGFkZGluZzogNXB4Ow0KICAgIGhvcml6b250YWwtYWxpZ246IHJpZ2h0Ow0KfQ0KDQouZGlhbG9nLWNsb3NlLWJ1dHRvbiB7DQogICAgcmVzb3VyY2U6ICRjbG9zZTsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogImNlbnRlciI7DQogICAgY3Vyc29yOiAicG9pbnRlciI7DQogICAgcG9pbnRlci1ldmVudHM6IHRydWU7DQogICAgcGFkZGluZzogM3B4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDJweDsNCn0NCg0KLmRpYWxvZy1jbG9zZS1idXR0b246aG92ZXIgew0KICAgIHJlc291cmNlOiAkY2xvc2UtaG92ZXI7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNlbGVjdGlvbi1iYWNrZ3JvdW5kLWNvbG9yOw0KfQ0KDQouZGlhbG9nLW1pbmltaXplLWJ1dHRvbiB7DQogICAgcmVzb3VyY2U6ICRtaW5pbWl6ZTsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogImNlbnRlciI7DQogICAgY3Vyc29yOiAicG9pbnRlciI7DQogICAgcG9pbnRlci1ldmVudHM6IHRydWU7DQogICAgcGFkZGluZzogM3B4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDJweDsNCn0NCg0KLmRpYWxvZy1taW5pbWl6ZS1idXR0b246aG92ZXIgew0KICAgIHJlc291cmNlOiAkbWluaW1pemUtaG92ZXI7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNlbGVjdGlvbi1iYWNrZ3JvdW5kLWNvbG9yOw0KfQ0KDQouZGlhbG9nLW1heGltaXplLWJ1dHRvbiB7DQogICAgcmVzb3VyY2U6ICRtYXhpbWl6ZTsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogImNlbnRlciI7DQogICAgY3Vyc29yOiAicG9pbnRlciI7DQogICAgcG9pbnRlci1ldmVudHM6IHRydWU7DQogICAgcGFkZGluZzogM3B4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDJweDsNCn0NCg0KLmRpYWxvZy1tYXhpbWl6ZS1idXR0b246aG92ZXIgew0KICAgIHJlc291cmNlOiAkbWF4aW1pemUtaG92ZXI7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNlbGVjdGlvbi1iYWNrZ3JvdW5kLWNvbG9yOw0KfQ0KDQouZGlhbG9nICNpY29uSW1hZ2UuaW5mbyB7DQogICAgcmVzb3VyY2U6ICRpbmZvLWxhcmdlOw0KfQ0KDQouZGlhbG9nICNpY29uSW1hZ2UucXVlc3Rpb24gew0KICAgIHJlc291cmNlOiAkcXVlc3Rpb24tbGFyZ2U7DQp9DQoNCi5kaWFsb2cgI2ljb25JbWFnZS55ZXNubyB7DQogICAgcmVzb3VyY2U6ICRxdWVzdGlvbi1sYXJnZTsNCn0NCg0KLmRpYWxvZyAjaWNvbkltYWdlLndhcm5pbmcgew0KICAgIHJlc291cmNlOiAkd2FybmluZy1sYXJnZTsNCn0NCg0KLmRpYWxvZyAjaWNvbkltYWdlLmVycm9yIHsNCiAgICByZXNvdXJjZTogJGVycm9yLWxhcmdlOw0KfQ0KDQoubWVzc2FnZWJveCB7DQogICAgaW5pdGlhbC13aWR0aDogMzAwcHg7DQp9"},{ name : "haxeui-core/styles/default/scrollview.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogU0NST0xMVklFVw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5zY3JvbGx2aWV3IHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICBib3JkZXItcmFkaXVzOiAycHg7DQogICAgcGFkZGluZzogMHB4Ow0KICAgIHdpZHRoOiBhdXRvOw0KICAgIGhlaWdodDogYXV0bzsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkdGVydGlhcnktYmFja2dyb3VuZC1jb2xvcjsNCn0NCg0KLnNjcm9sbHZpZXcgLnNjcm9sbHZpZXctY29udGVudHMgew0KICAgIGhlaWdodDogYXV0bzsNCiAgICBzcGFjaW5nOiA1cHg7DQogICAgcGFkZGluZzogNXB4Ow0KICAgIGJvcmRlcjogbm9uZTsNCn0NCg0KLnNjcm9sbHZpZXcubm8tcGFkZGluZyAuc2Nyb2xsdmlldy1jb250ZW50cyB7DQogICAgcGFkZGluZzogMHB4Ow0KfQ0KDQouc2Nyb2xsdmlldy5uby1ib3JkZXIgew0KICAgIGJvcmRlcjogbm9uZTsNCn0NCg0KLnNjcm9sbHZpZXcubm8tYm9yZGVyIC5zY3JvbGwgew0KICAgIGJvcmRlcjogbm9uZTsNCn0NCg0KLnNjcm9sbHZpZXc6YWN0aXZlIHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAkYWNjZW50LWNvbG9yOw0KfQ0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoqKiBNT0JJTEUgVkFSSUFOVFMNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQouc2Nyb2xsdmlldzptb2JpbGUgew0KICAgIG1vZGU6IG1vYmlsZTsNCn0NCg"},{ name : "haxeui-core/styles/shared/warning-medium.png", data : "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAACB0lEQVRYhe2WP2gUQRTGf+/udibFCbmL8exUjGiiFqlMZdBG8E9rYaWNggqipQRRRBCEJKWljY1gJ2n1LhCbNHIggorWIijkEHYvuWeT083u7GZ3L2JzX7W89+Z7H2/mm1kYYoj/DCm6UF9QpmHmUJRvwSO5yEYRnkpRAeyxt4D7CLDXroG/UISm0AR0hTrdkY+g9c3QT3rmkJxa+56Xq1REAF37MNQcYJRS8KAIVe4JaMtMofKO+PZtgE7LbNDOw5d/AirzjuYAZZDFvHS5BOgbewE4k1JyWpft+TycmbdAV/Ho2DbCYYD3X6o8fjYBwN0rnziyv9Nn/EzHPypn8bPwZp/AL3uz3xzAVHp/UsbTkFIOUrXXs9JmEqAr1FGZC8fCTb2QmE0R9/T1rt07JsBhuy1NjdeLrshsy20FaMtMAVej8XBThwCAa9o0xwcWkGQ7U1HndwiZbJkqIM12XtoZ+IttbZkoQFfxgCdJ+fDYvXKiAFAWdQmblE68B7Rlb6PMJzPngHBHTrpfS6cAx2sXr1F4264hAjPHfiDpV1ria+n+H3DYLooPX6s8fbkPgNFql8kDnbTyvi1vRBOxM6BNM4nDdlE0xnzGawHjtYDGWKZb12nL2OC0aV8B57IwFsCSzPpbuB0u0Jl/1BzQE9FI/AyU5DIql5y5wbAOPN9hziGGGBy/AQa5lYKywFiuAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/shared/sortable-desc-blue.png", data : ""},{ name : "haxeui-core/locale/ru/std-strings.properties", data : "c2F2ZT3QodC+0YXRgNCw0L3QuNGC0YwNCnllcz3QlNCwDQpubz3QndC10YINCmNsb3NlPdCX0LDQutGA0YvRgtGMDQpvaz1PSw0KY2FuY2VsPdCe0YLQvNC10L3QsA0KYXBwbHk90J/RgNC40LzQtdC90LjRgtGMDQpzZWFyY2g90J/QvtC40YHQug0KDQpyZWQ90JrRgNCw0YHQvdGL0LkNCmdyZWVuPdCX0LXQu9C10L3Ri9C5DQpibHVlPdCh0LjQvdC40LkNCmh1ZT3QptCy0LXRgtC+0LLQvtC5INGC0L7QvQ0Kc2F0dXJhdGlvbj3QndCw0YHRi9GJ0LXQvdC90L7RgdGC0YwNCmJyaWdodG5lc3M90K/RgNC60L7RgdGC0YwNCg"},{ name : "haxeui-core/styles/default/colorpickers.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogQ09MT1IgUElDS0VSDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLmNvbG9yLXBpY2tlciB7DQogICAgcGFkZGluZzogMDsNCiAgICBib3JkZXItcmFkaXVzOiAkbm9ybWFsLWJvcmRlci1yYWRpdXM7DQogICAgaW5pdGlhbC13aWR0aDogMjcwcHg7DQogICAgaW5pdGlhbC1oZWlnaHQ6IDMwMHB4Ow0KfQ0KDQouY29sb3ItcGlja2VyIC5jb250cm9scy1jb250YWluZXIgew0KICAgIGJvcmRlcjogJG5vcm1hbC1ib3JkZXItc2l6ZSBzb2xpZCAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICBwYWRkaW5nOiA1cHggMnB4Ow0KICAgIGJvcmRlci1yYWRpdXM6ICRub3JtYWwtYm9yZGVyLXJhZGl1czsNCiAgICBzcGFjaW5nOiAycHg7DQp9DQoNCi5jb2xvci1waWNrZXIgLmNvbnRyb2xzLWNvbnRhaW5lciAjcHJldkNvbnRyb2xzIHsNCiAgICByZXNvdXJjZTogaGF4ZXVpLWNvcmUvc3R5bGVzL3NoYXJlZC9sZWZ0LXNxdWFyZS1hcnJvdy1ibHVlLnBuZzsNCn0NCg0KLmNvbG9yLXBpY2tlciAuY29udHJvbHMtY29udGFpbmVyICNuZXh0Q29udHJvbHMgew0KICAgIHJlc291cmNlOiBoYXhldWktY29yZS9zdHlsZXMvc2hhcmVkL3JpZ2h0LXNxdWFyZS1hcnJvdy1ibHVlLnBuZzsNCn0NCg0KLmNvbG9yLXBpY2tlciAuY29udHJvbHMtY29udGFpbmVyIC50ZXh0ZmllbGQsIC5jb2xvci1waWNrZXIgI2lucHV0SGV4IHsNCiAgICB3aWR0aDogMjVweDsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGZpbHRlcjogbm9uZTsNCiAgICBib3JkZXItcmFkaXVzOiAwcHg7DQogICAgYm9yZGVyLWJvdHRvbTogJG5vcm1hbC1ib3JkZXItc2l6ZSBzb2xpZCAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICBwYWRkaW5nOiAwcHg7DQogICAgcGFkZGluZy1ib3R0b206IDFweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBub25lOw0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQp9DQoNCi5jb2xvci1waWNrZXIgI2lucHV0SGV4IHsNCiAgICB3aWR0aDogMTAwJTsNCn0NCg0KLmNvbG9yLXBpY2tlciAuY29udHJvbHMtY29udGFpbmVyIC5sYWJlbCB7DQogICAgd2lkdGg6IDU1cHg7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCn0NCg0KLmNvbG9yLXBpY2tlciAuY29udHJvbHMtY29udGFpbmVyIC5zbGlkZXIgew0KICAgIHdpZHRoOiAxMDAlOw0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQp9DQoNCi8qIHNhdHVyYXRpb24gLyB2YWx1ZSAqLw0KLmNvbG9yLXBpY2tlciAjc2F0dXJhdGlvblZhbHVlQ29udGFpbmVyIHsNCiAgICBib3JkZXI6ICRub3JtYWwtYm9yZGVyLXNpemUgc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgcGFkZGluZzogMXB4Ow0KICAgIGJvcmRlci1yYWRpdXM6ICRub3JtYWwtYm9yZGVyLXJhZGl1czsNCn0NCg0KLmNvbG9yLXBpY2tlciAjc2F0dXJhdGlvblZhbHVlSW5kaWNhdG9yIHsNCiAgICB3aWR0aDogMTBweDsNCiAgICBoZWlnaHQ6IDEwcHg7DQogICAgYm9yZGVyOiAycHggc29saWQgd2hpdGU7DQogICAgYm9yZGVyLW9wYWNpdHk6IC43Ow0KICAgIGJvcmRlci1yYWRpdXM6MTBweDsNCn0NCg0KLyogaHVlICovDQouY29sb3ItcGlja2VyICNodWVDb250YWluZXIgew0KICAgIGJvcmRlcjogJG5vcm1hbC1ib3JkZXItc2l6ZSBzb2xpZCAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICBwYWRkaW5nOjFweCAycHg7DQogICAgYm9yZGVyLXJhZGl1czogJG5vcm1hbC1ib3JkZXItcmFkaXVzOw0KfQ0KDQouY29sb3ItcGlja2VyICNodWVJbmRpY2F0b3Igew0KICAgIGJvcmRlci1yYWRpdXM6MnB4Ow0KICAgIHBvaW50ZXItZXZlbnRzOm5vbmU7DQogICAgYmFja2dyb3VuZC1jb2xvcjp3aGl0ZTsNCiAgICBmaWx0ZXI6ZHJvcC1zaGFkb3coMiwgNDUsICM4ODg4ODgsIDAuMSwgNCwgMSwgMzAsIDM1LCBmYWxzZSk7DQp9DQoNCi8qIHByZXZpZXcgKi8NCi5jb2xvci1waWNrZXIgI2NvbG9yUHJldmlld0NvbnRhaW5lciB7DQogICAgYm9yZGVyOiAkbm9ybWFsLWJvcmRlci1zaXplIHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIHBhZGRpbmc6IDJweDsNCiAgICBib3JkZXItcmFkaXVzOiAkbm9ybWFsLWJvcmRlci1yYWRpdXM7DQogICAgb3BhY2l0eTogMTsNCiAgICBmaWx0ZXI6IG5vbmU7DQp9DQoNCi5jb2xvci1waWNrZXI6ZGlzYWJsZWQgI2NvbG9yUHJldmlld0NvbnRhaW5lciB7DQogICAgZmlsdGVyOiBncmF5c2NhbGU7DQogICAgb3BhY2l0eTogLjM7DQp9DQoNCi5jb2xvci1waWNrZXIgI3NhdHVyYXRpb25WYWx1ZUdyYXBoIHsNCiAgICBvcGFjaXR5OiAxOw0KICAgIGZpbHRlcjogbm9uZTsNCn0NCg0KLmNvbG9yLXBpY2tlcjpkaXNhYmxlZCAjc2F0dXJhdGlvblZhbHVlR3JhcGggew0KICAgIGZpbHRlcjogZ3JheXNjYWxlOw0KICAgIG9wYWNpdHk6IC4zOw0KfQ0KDQouY29sb3ItcGlja2VyICNodWVHcmFwaCB7DQogICAgb3BhY2l0eTogMTsNCiAgICBmaWx0ZXI6IG5vbmU7DQp9DQoNCi5jb2xvci1waWNrZXI6ZGlzYWJsZWQgI2h1ZUdyYXBoIHsNCiAgICBmaWx0ZXI6IGdyYXlzY2FsZTsNCiAgICBvcGFjaXR5OiAuMzsNCn0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogQ09MT1IgUElDS0VSIFBPUFVQDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLmNvbG9yLXBpY2tlci1wb3B1cCB7DQogICAgcGFkZGluZy10b3A6IDRweDsNCiAgICBwYWRkaW5nLWJvdHRvbTogNHB4Ow0KICAgIHBhZGRpbmctbGVmdDogNHB4Ow0KICAgIHBhZGRpbmctcmlnaHQ6IDZweDsNCn0NCg0KLmNvbG9yLXBpY2tlci1wb3B1cCAjc2VsZWN0ZWRDb2xvclByZXZpZXdDb250YWluZXIgew0KICAgIHBhZGRpbmc6IDJweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29udHJhc3QtYmFja2dyb3VuZC1jb2xvcjsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICBib3JkZXItcmFkaXVzOiAycHg7DQogICAgb3BhY2l0eTogMTsNCiAgICBmaWx0ZXI6IG5vbmU7DQp9DQoNCi5jb2xvci1waWNrZXItcG9wdXA6ZGlzYWJsZWQgI3NlbGVjdGVkQ29sb3JQcmV2aWV3Q29udGFpbmVyIHsNCiAgICBmaWx0ZXI6IGdyYXlzY2FsZTsNCiAgICBvcGFjaXR5OiAuMzsNCn0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogQ09MT1IgUElDS0VSIFZBUklBTlQgLSBOTyBTTElERVJTDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLmNvbG9yLXBpY2tlci5uby1zbGlkZXJzIC5zbGlkZXIgew0KICAgIGhpZGRlbjogdHJ1ZTsNCn0NCg0KLmNvbG9yLXBpY2tlci5uby1zbGlkZXJzICNjb250cm9sc1N0YWNrIC5sYWJlbCB7DQogICAgd2lkdGg6IDEwMCU7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIENPTE9SIFBJQ0tFUiBWQVJJQU5UIC0gTk8gVEVYVCBJTlBVVFMNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQouY29sb3ItcGlja2VyLm5vLXRleHQtaW5wdXRzIC50ZXh0ZmllbGQgew0KICAgIGhpZGRlbjogdHJ1ZTsNCn0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogQ09MT1IgUElDS0VSIFZBUklBTlQgLSBOTyBDT05UUk9MUw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5jb2xvci1waWNrZXIubm8tY29udHJvbHMgLmNvbnRyb2xzLXByZXZpZXctY29udGFpbmVyIHsNCiAgICBoaWRkZW46IHRydWU7DQp9DQo"},{ name : "haxeui-core/styles/default/last.css", data : "LmNvbXBvbmVudDphY3RpdmUgew0KICAgIF9fYm9yZGVyOiAxcHggc29saWQgJGFjY2VudC1jb2xvcjsNCn0NCg0KLmNvbXBvbmVudDphY3RpdmF0YWJsZSB7DQogICAgYm9yZGVyOiAxcHggc29saWQgJGFjY2VudC1jb2xvcjsNCn0NCg0K"},{ name : "haxeui-core/styles/shared/minimize-button-white.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAnSURBVChTY/z//z8DKYAJShMNRjUQA2ivATmmCUU5I5ggLWkwMAAA9hYKDVhEBNAAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/default/sliders.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogU0xJREVSUw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5ob3Jpem9udGFsLXNsaWRlciB7DQogICAgcGFkZGluZy1sZWZ0OiA1cHg7DQogICAgcGFkZGluZy1yaWdodDogNXB4Ow0KICAgIHBhZGRpbmctdG9wOiAzcHg7DQogICAgcGFkZGluZy1ib3R0b206IDNweDsNCiAgICBoZWlnaHQ6IGF1dG87DQogICAgaW5pdGlhbC13aWR0aDogMTUwcHg7DQogICAgYm9yZGVyLXJhZGl1czogJG5vcm1hbC1ib3JkZXItcmFkaXVzOw0KfQ0KDQouaG9yaXpvbnRhbC1zbGlkZXI6YWN0aXZlIC5idXR0b24gew0KICAgIGJvcmRlcjogMXB4IHNvbGlkICRhY2NlbnQtY29sb3I7DQp9DQoNCi5ob3Jpem9udGFsLXNsaWRlcjphY3RpdmUgLnJhbmdlIHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAkYWNjZW50LWNvbG9yOw0KfQ0KDQouaG9yaXpvbnRhbC1zbGlkZXIgLnNsaWRlci12YWx1ZSB7DQogICAgd2lkdGg6IDEwMCU7DQogICAgaGVpZ2h0OiA4cHg7DQogICAgYm9yZGVyLXJhZGl1czogMXB4Ow0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQouaG9yaXpvbnRhbC1zbGlkZXIud2l0aC1jZW50ZXIgLnJhbmdlLXZhbHVlIHsNCiAgICBib3JkZXItcmFkaXVzOiAwcHg7DQp9DQoNCi5ob3Jpem9udGFsLXNsaWRlciAubWlub3ItdGljayB7DQogICAgbWFyZ2luLXRvcDogMTBweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICB3aWR0aDogMXB4Ow0KICAgIGhlaWdodDogNHB4Ow0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQp9DQoNCi5ob3Jpem9udGFsLXNsaWRlciAubWFqb3ItdGljayB7DQogICAgbWFyZ2luLXRvcDogMTJweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICB3aWR0aDogMXB4Ow0KICAgIGhlaWdodDogOHB4Ow0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQp9DQoNCi5ob3Jpem9udGFsLXNsaWRlciAuYnV0dG9uIHsNCiAgICB3aWR0aDogMTFweDsNCiAgICBoZWlnaHQ6IDIwcHg7DQogICAgYm9yZGVyLXJhZGl1czogMnB4Ow0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQogICAgZmlsdGVyOiBub25lOw0KfQ0KICAgIA0KLnZlcnRpY2FsLXNsaWRlciB7DQogICAgcGFkZGluZy10b3A6IDVweDsNCiAgICBwYWRkaW5nLWJvdHRvbTogNXB4Ow0KICAgIHBhZGRpbmctbGVmdDogM3B4Ow0KICAgIHBhZGRpbmctcmlnaHQ6IDNweDsNCiAgICB3aWR0aDogYXV0bzsNCiAgICBpbml0aWFsLWhlaWdodDogMTUwcHg7DQp9DQoNCi52ZXJ0aWNhbC1zbGlkZXI6YWN0aXZlIC5idXR0b24gew0KICAgIGJvcmRlcjogMXB4IHNvbGlkICRhY2NlbnQtY29sb3I7DQp9DQoNCi52ZXJ0aWNhbC1zbGlkZXI6YWN0aXZlIC5yYW5nZSB7DQogICAgYm9yZGVyOiAxcHggc29saWQgJGFjY2VudC1jb2xvcjsNCn0NCg0KLnZlcnRpY2FsLXNsaWRlciAuc2xpZGVyLXZhbHVlIHsNCiAgICBoZWlnaHQ6IDEwMCU7DQogICAgd2lkdGg6IDhweDsNCiAgICBib3JkZXItcmFkaXVzOiAycHg7DQogICAgaG9yaXpvbnRhbC1hbGlnbjogY2VudGVyOw0KICAgIGN1cnNvcjogcG9pbnRlcjsNCn0NCg0KLnZlcnRpY2FsLXNsaWRlci53aXRoLWNlbnRlciAucmFuZ2UtdmFsdWUgew0KICAgIGJvcmRlci1yYWRpdXM6IDBweDsNCn0NCg0KLnZlcnRpY2FsLXNsaWRlciAubWlub3ItdGljayB7DQogICAgbWFyZ2luLWxlZnQ6IDEwcHg7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgd2lkdGg6IDRweDsNCiAgICBoZWlnaHQ6IDFweDsNCiAgICBob3Jpem9udGFsLWFsaWduOiBjZW50ZXI7DQp9DQoNCi52ZXJ0aWNhbC1zbGlkZXIgLm1ham9yLXRpY2sgew0KICAgIG1hcmdpbi1sZWZ0OiAxMnB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6ICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIHdpZHRoOiA4cHg7DQogICAgaGVpZ2h0OiAxcHg7DQogICAgaG9yaXpvbnRhbC1hbGlnbjogY2VudGVyOw0KfQ0KDQoudmVydGljYWwtc2xpZGVyIC5idXR0b24gew0KICAgIHdpZHRoOiAyMHB4Ow0KICAgIGhlaWdodDogMTFweDsNCiAgICBib3JkZXItcmFkaXVzOiAycHg7DQogICAgaG9yaXpvbnRhbC1hbGlnbjogY2VudGVyOw0KICAgIGZpbHRlcjogbm9uZTsNCn0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogVkFSSUFOVCAtIFNJTVBMRQ0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5zbGlkZXIuc2ltcGxlLXNsaWRlciAuYnV0dG9uIHsNCiAgICBoZWlnaHQ6IDEycHg7DQogICAgd2lkdGg6IDEycHg7DQp9DQoNCi5zbGlkZXIuc2ltcGxlLXNsaWRlciAucmFuZ2UtdmFsdWUgew0KICAgIGJhY2tncm91bmQtY29sb3I6IG5vbmU7DQp9DQoNCg"},{ name : "haxeui-core/styles/shared/down-arrow-light.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAECAIAAADNpLIqAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAJElEQVQImWPcsmULAwZgsswoQBOyzChgglDIQgwMDEzIHLg0AIkLCIq+gFfgAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/shared/left-arrow-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAHCAIAAACgB3uHAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAANklEQVQImWN8K6PCwMDAwMCQbKLDBGcxMDAwwVkMDAzMt5zsGGCAae6ZKwgOAwMDnA81AMIHAN2yC5bbbdIbAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/shared/right-arrow-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAHCAIAAACgB3uHAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAL0lEQVQImWMMCAiYe+YKAwMDAwMDEwMDQ7KJDoID50M5ED6CM/fMFSY4C6oMbhoAEcwMOy/jUHEAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/right-arrow-square-light.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAIAAABLMMCEAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAMUlEQVQImWN8K6PCwMBwfMYEy4wCBhhggrOOz5iARRRZAkUULoEuCjGdCVMIRRTZDQD4NA07+SZ5fAAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/shared/warning-large.png", data : ""},{ name : "haxeui-core/locale/en/formats.properties", data : "Zm9ybWF0cy5kYXRlLnNob3J0PSVkLyVtLyVZDQpmb3JtYXRzLmRlY2ltYWwuc2VwZXJhdG9yPS4NCg"},{ name : "haxeui-core/styles/default/accordion.css", data : "LmFjY29yZGlvbiB7DQogICAgYm9yZGVyOiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgc3BhY2luZzogMDsNCiAgICBwYWRkaW5nOiAxcHg7DQogICAgcGFkZGluZy1ib3R0b206IDBweDsNCn0NCg0KLmFjY29yZGlvbi1idXR0b24gew0KICAgIGJvcmRlci1yYWRpdXM6IDA7DQogICAgYm9yZGVyOiAwcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgd2lkdGg6IDEwMCU7DQogICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICBpY29uOiAkYXJyb3ctcmlnaHQtc3F1YXJlOw0KICAgIGljb24tcG9zaXRpb246IGxlZnQ7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGJvcmRlci1jb2xvcjogJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4Ow0KICAgIHBhZGRpbmc6IDZweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc29saWQtYmFja2dyb3VuZC1jb2xvcjsNCn0NCg0KLmFjY29yZGlvbi1idXR0b246aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzb2xpZC1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOw0KfQ0KDQouYWNjb3JkaW9uLWJ1dHRvbjpkb3duIHsNCiAgICBpY29uOiAkYXJyb3ctZG93bi1zcXVhcmU7DQp9DQoNCi5hY2NvcmRpb24tcGFnZSB7DQogICAgd2lkdGg6IDEwMCU7DQogICAgd2lkdGg6IDEwMCU7DQogICAgYm9yZGVyLWNvbG9yOiAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICBib3JkZXItYm90dG9tLXdpZHRoOiAxcHg7DQogICAgb3BhY2l0eTogMTsNCiAgICBwYWRkaW5nOiA1cHg7DQp9DQoNCi5hY2NvcmRpb24tcGFnZTpleHBhbmRlZCB7DQogICAgYW5pbWF0aW9uOiBhY2NvcmRpb25BbmltYXRlRXhwYW5kIDAuM3MgZWFzZSAwcyAxOw0KfQ0KDQouYWNjb3JkaW9uLXBhZ2U6Y29sbGFwc2VkIHsNCiAgICBhbmltYXRpb246IGFjY29yZGlvbkFuaW1hdGVDb2xscGFzZSAwLjNzIGVhc2UgMHMgMTsNCn0NCg0KQGtleWZyYW1lcyBhY2NvcmRpb25BbmltYXRlRXhwYW5kIHsNCiAgICAwJSB7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgICAgIGhlaWdodDogMCU7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBvcGFjaXR5OiAxOw0KICAgICAgICBoZWlnaHQ6IDEwMCU7DQogICAgfQ0KfQ0KDQpAa2V5ZnJhbWVzIGFjY29yZGlvbkFuaW1hdGVDb2xscGFzZSB7DQogICAgMCUgew0KICAgICAgICBvcGFjaXR5OiAxOw0KICAgICAgICBoZWlnaHQ6IDEwMCU7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgICAgICBoZWlnaHQ6IDAlOw0KICAgIH0NCn0NCg0KLmFjY29yZGlvbi1wYWdlIC5zY3JvbGx2aWV3IHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgcGFkZGluZy10b3A6IDA7DQogICAgcGFkZGluZy1yaWdodDogMDsNCiAgICBwYWRkaW5nLWxlZnQ6IDA7DQogICAgcGFkZGluZy1ib3R0b206IDA7DQp9DQo"},{ name : "haxeui-core/styles/default/tableview.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogSEVBREVSDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLmhlYWRlciB7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KICAgIHNwYWNpbmc6IDA7DQp9DQoNCi5oZWFkZXIgLmNvbHVtbiB7DQogICAgYm9yZGVyLXJhZGl1czogMDsNCiAgICBpY29uLXBvc2l0aW9uOiBmYXItcmlnaHQ7DQogICAgYm9yZGVyLWxlZnQtd2lkdGg6IDA7DQogICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICBwYWRkaW5nOiA2cHg7DQogICAgYm9yZGVyLWNvbG9yOiAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCn0NCg0KLmhlYWRlciAuY29sdW1uLmxhc3Qgew0KICAgIGJvcmRlci1yaWdodC13aWR0aDogMDsNCn0NCg0KLyoNCi5oZWFkZXIuc2Nyb2xsaW5nIC5jb2x1bW4ubGFzdCB7DQogICAgYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7DQp9DQoqLw0KDQouY29sdW1uLnNvcnRhYmxlIHsNCiAgICBpY29uOiAkYXJyb3ctdXAtZG93bjsNCiAgICBpY29uLXBvc2l0aW9uOiBmYXItcmlnaHQ7DQp9DQoNCi5jb2x1bW4uc29ydC1hc2Mgew0KICAgIGljb246ICRzb3J0LWFzYzsNCn0NCg0KLmNvbHVtbi5zb3J0LWRlc2Mgew0KICAgIGljb246ICRzb3J0LWRlc2M7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIFRBQkxFVklFVw0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi50YWJsZXZpZXcgew0KICAgIHNwYWNpbmc6IDA7DQp9DQoNCi50YWJsZXZpZXcgLnRhYmxldmlldy1jb250ZW50cyB7DQogICAgc3BhY2luZzogMDsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBwYWRkaW5nOiAwcHg7DQp9DQoNCi50YWJsZXZpZXcgLmV2ZW4gew0KICAgIGJhY2tncm91bmQtY29sb3I6ICR0ZXJ0aWFyeS1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIGN1cnNvcjogcG9pbnRlcjsNCn0NCg0KLnRhYmxldmlldyAub2RkIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc29saWQtYmFja2dyb3VuZC1jb2xvci1hbHQ7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQoudGFibGV2aWV3IC5jb21wb3VuZGl0ZW1yZW5kZXJlciA+IC5pdGVtcmVuZGVyZXIgew0KICAgIGhlaWdodDogYXV0bzsNCiAgICBwYWRkaW5nOiA2cHg7DQp9DQoNCi50YWJsZXZpZXcgLmV2ZW46aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWxlY3Rpb24tYmFja2dyb3VuZC1jb2xvci1ob3ZlcjsNCn0NCg0KLnRhYmxldmlldyAub2RkOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2VsZWN0aW9uLWJhY2tncm91bmQtY29sb3ItaG92ZXI7DQp9DQoNCi50YWJsZXZpZXcgLmNvbXBvdW5kaXRlbXJlbmRlcmVyIC5sYWJlbCB7DQogICAgY29sb3I6ICRub3JtYWwtdGV4dC1jb2xvcjsNCn0NCg0KLnRhYmxldmlldzpkaXNhYmxlZCAubGFiZWwgew0KICAgIGNvbG9yOiAkZGlzYWJsZWQtdGV4dC1jb2xvcjsNCn0NCg0KLnRhYmxldmlldyAuY29tcG91bmRpdGVtcmVuZGVyZXI6c2VsZWN0ZWQgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWxlY3Rpb24tYmFja2dyb3VuZC1jb2xvcjsNCiAgICBjb2xvcjogJHNlbGVjdGlvbi10ZXh0LWNvbG9yOw0KfQ0KDQoudGFibGV2aWV3IC5jb21wb3VuZGl0ZW1yZW5kZXJlcjpzZWxlY3RlZCAubGFiZWwgew0KICAgIGNvbG9yOiAkc2VsZWN0aW9uLXRleHQtY29sb3I7DQp9DQo"},{ name : "haxeui-core/styles/shared/up-arrow-blue.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAECAYAAABCxiV9AAAEAXpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja5VZZdsUmDP1nFV0CkhCC5TCe0x10+b1g++VNSdMmfzXHFhZC0xWDG3/9Od0feMh8ckEtxRyjxxNyyFzQSf54yv6SD/t7PHZSeuS7/bMeBktA5fhN8ZS/+HRTcJCCnt4pSu0cqI8D+TTA6UnRaUiWR4xOPxXlU5HwMUCngnKE5WNOdh9CHQc95x9pSCs0fOrF1VP46T8YstcVdoR5CInHlyUcDsh62UnZnYJhWoKgRQJaEZErVCTkXZ78nVfuBZWr94RK5vegSDwkHBiPyYw3+pZP+j75bqf4zrK0s8eP/JivjD0meb1z9uTmHEd0JUSkNJ5BXSHuHgQrUi57WkQzvIq+7ZbRkkP1NkDeffMVrVEmBiyTAnUqNGls2qjBxcCDDZS5AZXFS2KcuYl3QGlhFGiySZYuCcg1wCvg8s0X2nbzNtcowXAnSDJBGR3w8++0TxXNuUqeaCUz884V/OJVBHBjIbe+kAIgNK860p3gqz0/C1cBgrrTnBBg8fVQUZXO2lp1JBtogaCCHmuNrJ8KkCLYVjiD2g/kI4lSJG/MRoQ8JuBToChh0XAFBKTKHV5yEIkAJ/GyjTlGW5aVDzb2LAChEsUATZYCrAI2NtSPhYQaKioaVDWqadKsJUoMUWOMFtfmV0wsmFo0s2TZSpIUkqaYLCWXciqZs2Bz1Byz5ZRzLgVGCzQXzC4QKKVylRqq1litpppraSifFpq22Kwl13Irnbt07BM9duup514GDZTSCENHHDbSyKNMlNqUGabOOG2mmWe5oUbugPWlfR81ulDjjdQStBtqmGp2qaC1nejCDIhxICBuCwEUNC/MfKIQ2C3oFmaourWTMbzUBU6nhRgQDINYJ92w+0DuATcXwo9w4ws5t6D7DeTcgu4T5F5xe4NaX6dN8+I2QmsZrqR6wfKLSkFJZ4g4g1c36Dql/oG6UGqPiEsNTqEingSE6piK1VGtDwQaP1Pl/Ldtfk2Xol/xyf3Il9FrM8DaQ8JJ6wsK2+KsnZbR3Lcfm8FJG6EAcJPw+NxTsI0RwzXH3Sbda/FleFgKxcDsJd7ckBeFF3WfDXzQ7G0tMLh/eP8+Uvd5ClgOb6TXMbrclOfkd6Vhdd9R98y4KCp6htH8xBG87jUacqKxjmIrum46yn5gqW2J74X2lGQ6/EMCcWwADniOVRnc1vjA2hxsEIpVFL4IZtPDcaxrN60sL/+tYy/UvQxsX6yjoAtugHyYbn4Pl3U5LQoI0npx8t7+3PpVq11KphAZ25H/NI6vqPtSYLslI6+7U1/XvA93kLcclJH3EPECtXnk87/58UHdTxX8rxXhNtYBgfsbkBUChqlTc0oAAAGDaUNDUElDQyBwcm9maWxlAAB4nH2RPUjDQBzFX1OlohUHM4g4ZKhOLYiKOEoVi2ChtBVadTC59AuaGJIUF0fBteDgx2LVwcVZVwdXQRD8AHF0clJ0kRL/lxRaxHhw3I939x537wChUWWa1TUOaLptphNxKZdfkUKvENCHMEREZWYZycxCFr7j6x4Bvt7FeJb/uT9Hv1qwGBCQiGeZYdrE68TTm7bBeZ9YZGVZJT4njpp0QeJHrisev3EuuSzwTNHMpueIRWKp1MFKB7OyqRFPEUdUTad8IeexynmLs1atsdY9+QvDBX05w3WaI0hgEUmkIEFBDRVUYSNGq06KhTTtx338w64/RS6FXBUwcsxjAxpk1w/+B7+7tYqTE15SOA50vzjOxygQ2gWadcf5Pnac5gkQfAau9LZ/owHMfJJeb2uRI2BgG7i4bmvKHnC5Aww9GbIpu1KQplAsAu9n9E15YPAW6F31emvt4/QByFJXSzfAwSEwVqLsNZ9393T29u+ZVn8/bV1ypeJpoNQAAA0YaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA0LjQuMC1FeGl2MiI+CiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICB4bWxuczpHSU1QPSJodHRwOi8vd3d3LmdpbXAub3JnL3htcC8iCiAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgeG1wTU06RG9jdW1lbnRJRD0iZ2ltcDpkb2NpZDpnaW1wOjIyYzQ2ODgwLTQzNDktNDFjMS05NWJjLWZkZGNmYTk0OWIxMyIKICAgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDowNmYyYWY4Ni1jNjA4LTRlZTItOTUwMy1lM2QwOWY3MWRhNjgiCiAgIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDoxMDAxNDQzZC1kM2RkLTQ2YmQtYjYzMi0xMWE5ODk4MTYyOWYiCiAgIGRjOkZvcm1hdD0iaW1hZ2UvcG5nIgogICBHSU1QOkFQST0iMi4wIgogICBHSU1QOlBsYXRmb3JtPSJXaW5kb3dzIgogICBHSU1QOlRpbWVTdGFtcD0iMTY0NDYxMjI3NzAwMjQxNyIKICAgR0lNUDpWZXJzaW9uPSIyLjEwLjI0IgogICB0aWZmOk9yaWVudGF0aW9uPSIxIgogICB4bXA6Q3JlYXRvclRvb2w9IkdJTVAgMi4xMCI+CiAgIDx4bXBNTTpIaXN0b3J5PgogICAgPHJkZjpTZXE+CiAgICAgPHJkZjpsaQogICAgICBzdEV2dDphY3Rpb249InNhdmVkIgogICAgICBzdEV2dDpjaGFuZ2VkPSIvIgogICAgICBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjQwN2YyZDllLWYyYzUtNDY2My04YzEyLTRkNjcyMGZhZDM0MSIKICAgICAgc3RFdnQ6c29mdHdhcmVBZ2VudD0iR2ltcCAyLjEwIChXaW5kb3dzKSIKICAgICAgc3RFdnQ6d2hlbj0iMjAyMi0wMi0xMVQyMTo0NDozNyIvPgogICAgPC9yZGY6U2VxPgogICA8L3htcE1NOkhpc3Rvcnk+CiAgPC9yZGY6RGVzY3JpcHRpb24+CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz7T4nLNAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAB3RJTUUH5gILFCwkvxUCjQAAACNJREFUCNdjYEACoV1H/iPzGbFJrC6zYYRLouuAKWDEJgEDACRXDUjpoGrXAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/shared/up-arrow-bright.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAECAIAAADNpLIqAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAK0lEQVQImWN8K6PCwMDAwMAg9Pj2O1lVCJsJLgQnoaJwDpzN+P//fwYMAADCtw5xBtAKnQAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/default/cards.css", data : "LmNhcmQgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICR0ZXJ0aWFyeS1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIGZpbHRlcjogZHJvcC1zaGFkb3coMCwgNDUsICMwMDAwMDAsIDAuMSwgNSwgMSwgMSwgMywgZmFsc2UpOw0KICAgIGJvcmRlci1yYWRpdXM6IDRweDsNCiAgICBwYWRkaW5nOiAxNXB4Ow0KfQ0KDQouY2FyZC10aXRsZS1sYWJlbCB7DQogICAgZm9udC1zaXplOiAxNnB4Ow0KICAgIGNvbG9yOiAkbm9ybWFsLXRleHQtY29sb3I7DQogICAgZm9udC1ib2xkOiB0cnVlOw0KfQ0KDQouY2FyZC10aXRsZS1jb250YWluZXIgew0KICAgIHBhZGRpbmctYm90dG9tOiA1cHg7DQogICAgd2lkdGg6IDEwMCU7DQp9DQoNCi5jYXJkLXRpdGxlLWxpbmUgew0KICAgIGhlaWdodDogMXB4Ow0KICAgIHdpZHRoOiAxMDAlOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KfQ0K"},{ name : "haxeui-core/styles/default/progressbars.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogUFJPR1JFU1MNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQpAa2V5ZnJhbWVzIGluZGV0ZXJtaW5hdGUgew0KICAgIDAlIHsNCiAgICAgICAgc3RhcnQ6IDA7DQogICAgICAgIGVuZDogMjU7DQogICAgfQ0KICAgIDUwJSB7DQogICAgICAgIHN0YXJ0OiA3NTsNCiAgICAgICAgZW5kOiAxMDA7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBzdGFydDogMDsNCiAgICAgICAgZW5kOiAyNTsNCiAgICB9DQp9DQoNCi5wcm9ncmVzczppbmRldGVybWluYXRlIHsNCiAgICBhbmltYXRpb246IGluZGV0ZXJtaW5hdGUgMXMgZWFzZSAwcyBpbmZpbml0ZTsNCn0NCg0KLnByb2dyZXNzLXZhbHVlIHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYm9yZGVyLXJhZGl1czogMXB4Ow0KfQ0KDQouaG9yaXpvbnRhbC1wcm9ncmVzcyB7DQogICAgYmFja2dyb3VuZDogJG5vcm1hbC1iYWNrZ3JvdW5kLWNvbG9yLWVuZCAkbm9ybWFsLWJhY2tncm91bmQtY29sb3Itc3RhcnQgdmVydGljYWw7DQogICAgaW5pdGlhbC13aWR0aDogMTUwcHg7DQogICAgaW5pdGlhbC1oZWlnaHQ6IDhweDsNCn0NCg0KLmhvcml6b250YWwtcHJvZ3Jlc3MgLnByb2dyZXNzLXZhbHVlIHsNCiAgICBiYWNrZ3JvdW5kOiAkYWNjZW50LWdyYWRpZW50LXN0YXJ0ICRhY2NlbnQtZ3JhZGllbnQtZW5kIHZlcnRpY2FsOw0KICAgIGhlaWdodDogMTAwJTsNCn0NCg0KLmhvcml6b250YWwtcHJvZ3Jlc3M6ZGlzYWJsZWQgew0KICAgIGJvcmRlci1jb2xvcjogJGRpc2FibGVkLWJvcmRlci1jb2xvcjsNCn0NCg0KLmhvcml6b250YWwtcHJvZ3Jlc3M6ZGlzYWJsZWQgLnByb2dyZXNzLXZhbHVlIHsNCiAgICBiYWNrZ3JvdW5kOiAkZGlzYWJsZWQtYmFja2dyb3VuZC1jb2xvci1zdGFydCAkZGlzYWJsZWQtYmFja2dyb3VuZC1jb2xvci1lbmQgdmVydGljYWw7DQp9DQoNCi52ZXJ0aWNhbC1wcm9ncmVzcyB7DQogICAgYmFja2dyb3VuZDogJG5vcm1hbC1iYWNrZ3JvdW5kLWNvbG9yLWVuZCAkbm9ybWFsLWJhY2tncm91bmQtY29sb3Itc3RhcnQgaG9yaXpvbnRhbDsNCiAgICBpbml0aWFsLXdpZHRoOiA4cHg7DQogICAgaW5pdGlhbC1oZWlnaHQ6IDE1MHB4Ow0KfQ0KDQoudmVydGljYWwtcHJvZ3Jlc3MgLnByb2dyZXNzLXZhbHVlIHsNCiAgICBiYWNrZ3JvdW5kOiAkYWNjZW50LWdyYWRpZW50LXN0YXJ0ICRhY2NlbnQtZ3JhZGllbnQtZW5kIGhvcml6b250YWw7DQogICAgd2lkdGg6IDEwMCU7DQp9DQoNCi52ZXJ0aWNhbC1wcm9ncmVzczpkaXNhYmxlZCAucHJvZ3Jlc3MtdmFsdWUgew0KICAgIGJhY2tncm91bmQ6ICRkaXNhYmxlZC1iYWNrZ3JvdW5kLWNvbG9yLXN0YXJ0ICRkaXNhYmxlZC1iYWNrZ3JvdW5kLWNvbG9yLWVuZCBob3Jpem9udGFsOw0KfQ0KDQoudmVydGljYWwtcHJvZ3Jlc3M6ZGlzYWJsZWQgew0KICAgIGJvcmRlci1jb2xvcjogJGRpc2FibGVkLWJvcmRlci1jb2xvcjsNCn0NCg"},{ name : "haxeui-core/locale/de/formats.properties", data : "Zm9ybWF0cy5kYXRlLnNob3J0PSVkLyVtLyVZDQpmb3JtYXRzLmRlY2ltYWwuc2VwZXJhdG9yPSwNCg"},{ name : "haxeui-core/styles/default/textinputs.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogVEVYVCBGSUVMRA0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi50ZXh0ZmllbGQgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICR0ZXJ0aWFyeS1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIGNvbG9yOiAkbm9ybWFsLXRleHQtY29sb3I7DQogICAgYm9yZGVyOiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgYm9yZGVyLXJhZGl1czogMnB4Ow0KICAgIHBhZGRpbmc6IDZweCA4cHg7DQogICAgZmlsdGVyOiAkbm9ybWFsLWlubmVyLXNoYWRvdzsNCiAgICBpbml0aWFsLXdpZHRoOiAxNTBweDsNCiAgICBoZWlnaHQ6IGF1dG87DQogICAgc3BhY2luZzogNXB4Ow0KICAgIGljb24tcG9zaXRpb246IHJpZ2h0Ow0KICAgIGNvbnRlbnQtdHlwZTogYXV0bzsNCn0NCg0KLnRleHRmaWVsZC5pbnZhbGlkLXZhbHVlIHsNCiAgICBjb2xvcjogJGVycm9yLXRleHQtY29sb3I7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJGVycm9yLWJhY2tncm91bmQtY29sb3I7DQogICAgYm9yZGVyLWNvbG9yOiAkZXJyb3ItdGV4dC1jb2xvcjsNCn0NCg0KLnRleHRmaWVsZDphY3RpdmUgew0KICAgIGJvcmRlcjogMXB4IHNvbGlkICRhY2NlbnQtY29sb3I7DQp9DQoNCi50ZXh0ZmllbGQ6ZW1wdHkgew0KICAgIGNvbG9yOiAkbGlnaHRlci10ZXh0LWNvbG9yOw0KfQ0KDQoudGV4dGZpZWxkOmRpc2FibGVkIHsNCiAgICBib3JkZXItY29sb3I6ICRkaXNhYmxlZC1ib3JkZXItY29sb3I7DQogICAgY29sb3I6ICRkaXNhYmxlZC10ZXh0LWNvbG9yOw0KfQ0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoqKiBURVhUIEFSRUENCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoudGV4dGFyZWEgew0KICAgIGNvbG9yOiAkbm9ybWFsLXRleHQtY29sb3I7DQogICAgYm9yZGVyOiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgYm9yZGVyLXJhZGl1czogMnB4Ow0KICAgIHBhZGRpbmc6IDFweDsNCiAgICBmaWx0ZXI6ICRub3JtYWwtaW5uZXItc2hhZG93Ow0KICAgIGJhY2tncm91bmQtY29sb3I6ICR0ZXJ0aWFyeS1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIGluaXRpYWwtd2lkdGg6IDE1MHB4Ow0KICAgIGluaXRpYWwtaGVpZ2h0OiAxMDBweDsNCiAgICBjb250ZW50LXR5cGU6IGF1dG87DQp9DQoNCi50ZXh0YXJlYS5pbnZhbGlkLXZhbHVlIHsNCiAgICBjb2xvcjogJGVycm9yLXRleHQtY29sb3I7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJGVycm9yLWJhY2tncm91bmQtY29sb3I7DQogICAgYm9yZGVyLWNvbG9yOiAkZXJyb3ItdGV4dC1jb2xvcjsNCn0NCg0KLnRleHRhcmVhOmFjdGl2ZSB7DQogICAgYm9yZGVyOiAxcHggc29saWQgJGFjY2VudC1jb2xvcjsNCn0NCg0KLnRleHRhcmVhOmVtcHR5IHsNCiAgICBjb2xvcjogJGxpZ2h0ZXItdGV4dC1jb2xvcjsNCn0NCg0KLnRleHRhcmVhOmRpc2FibGVkIHsNCiAgICBib3JkZXItY29sb3I6ICRkaXNhYmxlZC1ib3JkZXItY29sb3I7DQogICAgY29sb3I6ICRkaXNhYmxlZC10ZXh0LWNvbG9yOw0KfQ"},{ name : "haxeui-core/styles/shared/option-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAMAAAC67D+PAAAAQlBMVEVYWGzW/9EAAACYtdLCqYPP6PTU////9KxYWFhUVlhXVVJ4rthXkMHs1Kxsj6lSYXvElmdYWGeefViUXFhfUVNWUk58LX/QAAAACHRSTlMnCADr69QWFksN2hQAAAA8SURBVAjXY2BiZxDi5OBjYGNiYGTh4OTg4BJkZmTgFeEAA35WBgFOCFOUm0EYyuTiQWYiFCBrQxiGZAUAvXcDb/w8amgAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/default/steppers.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogVU5BVFRBQ0hFRCBTVEVQUEVSDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLnN0ZXBwZXIgew0KICAgIHNwYWNpbmc6IDA7DQp9DQoNCi5zdGVwcGVyLWJ1dHRvbiB7DQogICAgcGFkZGluZzogM3B4Ow0KICAgIHBhZGRpbmctdG9wOiA0cHg7DQogICAgcGFkZGluZy1ib3R0b206IDRweDsNCiAgICBib3JkZXItcmFkaXVzOiAwOw0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc29saWQtYmFja2dyb3VuZC1jb2xvcjsNCiAgICBvcGFjaXR5OiAxOw0KfQ0KDQouc3RlcHBlci1idXR0b246aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzb2xpZC1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOw0KfQ0KDQouc3RlcHBlci1idXR0b246ZG93biB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNvbGlkLWJhY2tncm91bmQtY29sb3ItZG93bjsNCn0NCg0KLnN0ZXBwZXItYnV0dG9uOmRpc2FibGVkIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc29saWQtYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZDsNCn0NCg0KLnN0ZXBwZXItaW5jIHsNCiAgICBpY29uOiAkYXJyb3ctdXA7DQp9DQoNCi5zdGVwcGVyLWRlaW5jIHsNCiAgICBpY29uOiAkYXJyb3ctZG93bjsNCn0NCg0KLnN0ZXBwZXItaW5jOmRvd24gew0KICAgIGljb246ICRhcnJvdy11cDsNCn0NCg0KLnN0ZXBwZXItZGVpbmM6ZG93biB7DQogICAgaWNvbjogJGFycm93LWRvd247DQp9DQoNCi5zdGVwcGVyLXN0ZXAgLnN0ZXBwZXItaW5jLCAuc3RlcHBlci1zdGVwIC5zdGVwcGVyLWRlaW5jIHsNCiAgICBoZWlnaHQ6IDUwJTsNCn0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogTlVNQkVSIFNURVBQRVIgLSBTVEFOREFSRCBMQVlPVVQNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoubnVtYmVyLXN0ZXBwZXIgew0KICAgIHBhZGRpbmc6IDBweDsNCiAgICBoZWlnaHQ6IGF1dG87DQogICAgaW5pdGlhbC13aWR0aDogODBweDsNCiAgICBib3JkZXI6ICRub3JtYWwtYm9yZGVyLXNpemUgc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgYm9yZGVyLXJhZGl1czogJG5vcm1hbC1ib3JkZXItcmFkaXVzOw0KICAgIGZpbHRlcjogJG5vcm1hbC1pbm5lci1zaGFkb3c7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHRlcnRpYXJ5LWJhY2tncm91bmQtY29sb3I7DQp9DQoNCi5udW1iZXItc3RlcHBlciAuc3RlcHBlci12YWx1ZSB7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBub25lOw0KICAgIGZpbHRlcjogbm9uZTsNCiAgICBtYXJnaW4tdG9wOiAwcHg7DQp9DQoNCi5udW1iZXItc3RlcHBlciAuc3RlcHBlci1kZWluYyB7DQogICAgaWNvbjogJGFycm93LWxlZnQ7DQogICAgcGFkZGluZy1sZWZ0OiA0cHg7DQogICAgcGFkZGluZy1yaWdodDogNHB4Ow0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2Nyb2xsYmFyLWJhY2tncm91bmQtY29sb3I7DQogICAgYm9yZGVyLXJhZGl1czogMDsNCiAgICBvcGFjaXR5OiAxOw0KfQ0KDQoubnVtYmVyLXN0ZXBwZXIgLnN0ZXBwZXItZGVpbmM6aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzY3JvbGxiYXItYmFja2dyb3VuZC1jb2xvcjsNCn0NCg0KLm51bWJlci1zdGVwcGVyIC5zdGVwcGVyLWRlaW5jOmRvd24gew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzY3JvbGxiYXItYnV0dG9uLWNvbG9yOw0KICAgIGljb246ICRhcnJvdy1sZWZ0Ow0KfQ0KDQoubnVtYmVyLXN0ZXBwZXIgLnN0ZXBwZXItZGVpbmM6ZGlzYWJsZWQgew0KICAgIG9wYWNpdHk6IDAuNTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2Nyb2xsYmFyLWJhY2tncm91bmQtY29sb3I7DQp9DQoNCi5udW1iZXItc3RlcHBlciAuc3RlcHBlci1pbmMgew0KICAgIGljb246ICRhcnJvdy1yaWdodDsNCiAgICBwYWRkaW5nLWxlZnQ6IDRweDsNCiAgICBwYWRkaW5nLXJpZ2h0OiA0cHg7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzY3JvbGxiYXItYmFja2dyb3VuZC1jb2xvcjsNCiAgICBib3JkZXItcmFkaXVzOiAwOw0KICAgIG9wYWNpdHk6IDE7DQp9DQoNCi5udW1iZXItc3RlcHBlciAuc3RlcHBlci1pbmM6aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzY3JvbGxiYXItYmFja2dyb3VuZC1jb2xvcjsNCn0NCg0KLm51bWJlci1zdGVwcGVyIC5zdGVwcGVyLWluYzpkb3duIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2Nyb2xsYmFyLWJ1dHRvbi1jb2xvcjsNCiAgICBpY29uOiAkYXJyb3ctcmlnaHQ7DQp9DQoNCi5udW1iZXItc3RlcHBlciAuc3RlcHBlci1pbmM6ZGlzYWJsZWQgew0KICAgIG9wYWNpdHk6IDAuNTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2Nyb2xsYmFyLWJhY2tncm91bmQtY29sb3I7DQp9DQoNCi5udW1iZXItc3RlcHBlci5pbnZhbGlkLXZhbHVlIHsNCiAgICBjb2xvcjogJGVycm9yLXRleHQtY29sb3I7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJGVycm9yLWJhY2tncm91bmQtY29sb3I7DQp9DQoNCi5udW1iZXItc3RlcHBlcjphY3RpdmUgew0KICAgIGJvcmRlcjogMXB4IHNvbGlkICRhY2NlbnQtY29sb3I7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIE5VTUJFUiBTVEVQUEVSIC0gQ0xBU1NJQyBMQVlPVVQNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoubnVtYmVyLXN0ZXBwZXIuY2xhc3NpYy1zdGVwcGVyIHsNCiAgICBsYXlvdXQ6IGNsYXNzaWM7DQp9DQoNCi5udW1iZXItc3RlcHBlci5jbGFzc2ljLXN0ZXBwZXIgLnN0ZXBwZXItZGVpbmMgew0KICAgIGljb246ICRhcnJvdy1kb3duOw0KfQ0KDQoubnVtYmVyLXN0ZXBwZXIuY2xhc3NpYy1zdGVwcGVyIC5zdGVwcGVyLWluYyB7DQogICAgaWNvbjogJGFycm93LXVwOw0KfQ0KDQoubnVtYmVyLXN0ZXBwZXIuY2xhc3NpYy1zdGVwcGVyIC5zdGVwcGVyLWRlaW5jOmRvd24gew0KICAgIGljb246ICRhcnJvdy1kb3duOw0KfQ0KDQoubnVtYmVyLXN0ZXBwZXIuY2xhc3NpYy1zdGVwcGVyIC5zdGVwcGVyLWluYzpkb3duIHsNCiAgICBpY29uOiAkYXJyb3ctdXA7DQp9DQoNCi5udW1iZXItc3RlcHBlci5jbGFzc2ljLXN0ZXBwZXIgLnN0ZXBwZXItdmFsdWUgew0KICAgIHRleHQtYWxpZ246IGxlZnQ7DQogICAgbWFyZ2luLXRvcDogMHB4Ow0KfQ0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoqKiBPUFRJT04gU1RFUFBFUg0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5vcHRpb24tc3RlcHBlciB7DQogICAgcGFkZGluZzogMHB4Ow0KICAgIGhlaWdodDogYXV0bzsNCiAgICBpbml0aWFsLXdpZHRoOiAxMDBweDsNCiAgICBib3JkZXI6ICRub3JtYWwtYm9yZGVyLXNpemUgc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgYm9yZGVyLXJhZGl1czogJG5vcm1hbC1ib3JkZXItcmFkaXVzOw0KICAgIGZpbHRlcjogJG5vcm1hbC1pbm5lci1zaGFkb3c7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHRlcnRpYXJ5LWJhY2tncm91bmQtY29sb3I7DQp9DQoNCi5vcHRpb24tc3RlcHBlciAuc3RlcHBlci12YWx1ZSB7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBub25lOw0KICAgIGZpbHRlcjogbm9uZTsNCiAgICBtYXJnaW4tdG9wOiAwcHg7DQogICAgcGFkZGluZzogNnB4Ow0KfQ0KDQoub3B0aW9uLXN0ZXBwZXIgLnN0ZXBwZXItZGVpbmMgew0KICAgIGljb246ICRhcnJvdy1sZWZ0Ow0KICAgIHBhZGRpbmctbGVmdDogNHB4Ow0KICAgIHBhZGRpbmctcmlnaHQ6IDRweDsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNjcm9sbGJhci1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIGJvcmRlci1yYWRpdXM6IDA7DQogICAgb3BhY2l0eTogMTsNCn0NCg0KLm9wdGlvbi1zdGVwcGVyIC5zdGVwcGVyLWRlaW5jOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2Nyb2xsYmFyLWJhY2tncm91bmQtY29sb3I7DQp9DQoNCi5vcHRpb24tc3RlcHBlciAuc3RlcHBlci1kZWluYzpkb3duIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2Nyb2xsYmFyLWJ1dHRvbi1jb2xvcjsNCiAgICBpY29uOiAkYXJyb3ctbGVmdDsNCn0NCg0KLm9wdGlvbi1zdGVwcGVyIC5zdGVwcGVyLWRlaW5jOmRpc2FibGVkIHsNCiAgICBvcGFjaXR5OiAwLjU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNjcm9sbGJhci1iYWNrZ3JvdW5kLWNvbG9yOw0KfQ0KDQoub3B0aW9uLXN0ZXBwZXIgLnN0ZXBwZXItaW5jIHsNCiAgICBpY29uOiAkYXJyb3ctcmlnaHQ7DQogICAgcGFkZGluZy1sZWZ0OiA0cHg7DQogICAgcGFkZGluZy1yaWdodDogNHB4Ow0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2Nyb2xsYmFyLWJhY2tncm91bmQtY29sb3I7DQogICAgYm9yZGVyLXJhZGl1czogMDsNCiAgICBvcGFjaXR5OiAxOw0KfQ0KDQoub3B0aW9uLXN0ZXBwZXIgLnN0ZXBwZXItaW5jOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2Nyb2xsYmFyLWJhY2tncm91bmQtY29sb3I7DQp9DQoNCi5vcHRpb24tc3RlcHBlciAuc3RlcHBlci1pbmM6ZG93biB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNjcm9sbGJhci1idXR0b24tY29sb3I7DQogICAgaWNvbjogJGFycm93LXJpZ2h0Ow0KfQ0KDQoub3B0aW9uLXN0ZXBwZXIgLnN0ZXBwZXItaW5jOmRpc2FibGVkIHsNCiAgICBvcGFjaXR5OiAwLjU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNjcm9sbGJhci1iYWNrZ3JvdW5kLWNvbG9yOw0KfQ0KDQoub3B0aW9uLXN0ZXBwZXIuaW52YWxpZC12YWx1ZSB7DQogICAgY29sb3I6IHJlZDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZXJyb3ItYmFja2dyb3VuZC1jb2xvcjsNCn0NCg0KLm9wdGlvbi1zdGVwcGVyOmFjdGl2ZSB7DQogICAgYm9yZGVyOiAxcHggc29saWQgJGFjY2VudC1jb2xvcjsNCn0NCg"},{ name : "haxeui-core/styles/shared/left-square-arrow-blue.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAADqXpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja7VZZliMpDPznFHMEJAESxyFZ3psb9PEnIJeyXa7umi53fXVig1CSkogQi+s//h3uHzzso3chqqWckscTcshcIJjfn7Jq8mHVR8efwp3eXS8YKkEre9fSMf7Uk7+zRAVSvDFk9Xix3b/I4bBvD4YORzIjYgjtMJQPQ8L7CzoMlH1aPmXT2ylsfW/bORPb/25W48RE9+axHxTotQg/wtyFxKNmCXsAMv/spEBQ1CwJAzEIskhetR6RAJBnOPmbqNwjK5dEH+gfSJG06x0U92Cmq32qp/gcfLcgvvEs9fJ8p69vLu5AXhiPZm6Mvs+uhARI0zGpcypLwsANkMv6LKEo/hGyrpJRzCF7KyhvcLmhVMrEQHxQoEaFBvXVVqoIMXBnRctcWZbORDlzFe/AU5iFBiu4amLgr4JegZavWGj5zctdJYPjRhjJBGO008+vKR8aGmOmPJG3CyvExXNRIIzJ3KwxCoTQOPMoLoDP8vhMXgUMxgWzYYLFb7uJLdKRWzOPZBEtGBjR7muNtB0GABF8RwRDAgZ8IomUyCuzEgFHAz8FhgyLhjdQQDFyQ5QcBKtF2Xj6xjdKayxH3tXYs0BElISlZXMxgauAjQ35o8GQQyVKDDHGFDVazLEkSSHFlJKmufkVFQ0aNamqadZiYsGiJVMzZ9lK5izYHGNOWbPlnEuB0wLLBV8XDChl4022sMUtbbrZlrdSkT411FhT1Wqu5loaN2nYJ1pq2qzlVjp1pFIPPfbUtVvPvQyk2pARRhxp6LCRR7lYI7fT+q58njU6WePF1ByoF2v4VPU0QXM7iZMzMMaBwLhOBpDQPDnzRiGwm9RNznxmrIrIiDJOchpNxsBg6MRx0MXdG3N3vLkQvsQbn8y5Sd0rmHOTug+Ye8/bE9ZaWbueuMXQXIYTVC9YfhjQrbCVeah9unX/94O/hr7L0ECyLxGCVJGuZfZ46+ps6CsCYvcbgRydMCPKV0R1pPrHI0IA5S2S4Jf37HESBPywn0ltU4xDutMtLXWcl7UvtO7JC5xE2xIh5M5HB0fjisiu9hai6l4Ekbl7SPoBCa5JgX5JZu4HmXmIw23jIeLfa93tlE2PKRvuR7h6/dzAHUTDvQii4n6Vx+HM4/fk1iE7uRVouWZHevmvte7DATRw49jzNjCOGnrIpnuIcIq8BiLc2F6x9L83ok/sjnNzdC8K6K+h7zCEi012/wGpjcqgKzcemgAAAYVpQ0NQSUNDIHByb2ZpbGUAAHicfZE9SMNAHMVfU6VFKg4WkeKQoepiQVTEUapYBAulrdCqg8mlH0KThiTFxVFwLTj4sVh1cHHW1cFVEAQ/QBydnBRdpMT/JYUWMR4c9+PdvcfdO0BoVJhqdo0DqmYZ6URczOVXxMArAoggiFEMSMzUk5mFLDzH1z18fL2L8Szvc3+OXqVgMsAnEs8y3bCI14mnNy2d8z5xmJUlhficeMygCxI/cl12+Y1zyWGBZ4aNbHqOOEwsljpY7mBWNlTiKeKoomqUL+RcVjhvcVYrNda6J39hqKAtZ7hOcwgJLCKJFETIqGEDFViI0aqRYiJN+3EPf8Txp8glk2sDjBzzqEKF5PjB/+B3t2ZxcsJNCsWB7hfb/hgGArtAs27b38e23TwB/M/Aldb2VxvAzCfp9bYWPQL6toGL67Ym7wGXO8Dgky4ZkiP5aQrFIvB+Rt+UB/pvgZ5Vt7fWPk4fgCx1tXQDHBwCIyXKXvN4d7Czt3/PtPr7AY5OcrLdt8TMAAAN92lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNC40LjAtRXhpdjIiPgogPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iCiAgICB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIgogICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICAgeG1sbnM6R0lNUD0iaHR0cDovL3d3dy5naW1wLm9yZy94bXAvIgogICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgIHhtcE1NOkRvY3VtZW50SUQ9ImdpbXA6ZG9jaWQ6Z2ltcDoxMGUxMWRlMi0wNTI1LTQwM2ItOTZhYi1jODYxZDZmMTlhMGEiCiAgIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6Yzc0ZjNmMmQtNjZhMS00MmFjLWEwYzktODgwYzdmNDkzMjU5IgogICB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6MmM0NTNkMzQtNmI5Mi00NDJjLTlhY2ItMTgyNWYyNzQ0NjFhIgogICBkYzpGb3JtYXQ9ImltYWdlL3BuZyIKICAgR0lNUDpBUEk9IjIuMCIKICAgR0lNUDpQbGF0Zm9ybT0iV2luZG93cyIKICAgR0lNUDpUaW1lU3RhbXA9IjE2NTg4MjQ3Nzg5MDA2ODkiCiAgIEdJTVA6VmVyc2lvbj0iMi4xMC4yNCIKICAgdGlmZjpPcmllbnRhdGlvbj0iMSIKICAgeG1wOkNyZWF0b3JUb29sPSJHSU1QIDIuMTAiPgogICA8eG1wTU06SGlzdG9yeT4KICAgIDxyZGY6U2VxPgogICAgIDxyZGY6bGkKICAgICAgc3RFdnQ6YWN0aW9uPSJzYXZlZCIKICAgICAgc3RFdnQ6Y2hhbmdlZD0iLyIKICAgICAgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpiM2YwMzU2NS0xNWQzLTQ4MGEtOGUxYi1kMmZlZTM3NDZmMmMiCiAgICAgIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkdpbXAgMi4xMCAoV2luZG93cykiCiAgICAgIHN0RXZ0OndoZW49IjIwMjItMDItMTFUMTM6MjU6MjkiLz4KICAgICA8cmRmOmxpCiAgICAgIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiCiAgICAgIHN0RXZ0OmNoYW5nZWQ9Ii8iCiAgICAgIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6ZGNkOTA2MjMtOTYzMi00OGY2LWI3NjYtMzk3NTE1NTY5Nzg2IgogICAgICBzdEV2dDpzb2Z0d2FyZUFnZW50PSJHaW1wIDIuMTAgKFdpbmRvd3MpIgogICAgICBzdEV2dDp3aGVuPSIyMDIyLTA3LTI2VDEwOjM5OjM4Ii8+CiAgICA8L3JkZjpTZXE+CiAgIDwveG1wTU06SGlzdG9yeT4KICA8L3JkZjpEZXNjcmlwdGlvbj4KIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAKPD94cGFja2V0IGVuZD0idyI/PpOuRqEAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAADdcAAA3XAUIom3gAAAAHdElNRQfmBxoIJyaHll/0AAAAgklEQVQ4y2NgGBkgqu+YMi45JiI0GzMyMhwly4CY/uOejIwMBxkYGMRJNiC671jUf4b/GxgYGLjxWYLVgNgJx8sZGBmWMDAwsBHyIhOlAYzVgMUFlp0M/xliGBgYfpHtgqVFVssYGRgDGBgYvpLthSWFltv//2ewZ2BgeEmzhDQMAADp6x1bXTBTSgAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/shared/down-arrow-square-blue.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAYAAADEUlfTAAAEK3pUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja7VdZkuQoDP3nFHMEJCEQx8EsEX2DOf482U53ZVZld23z0RNjwoCFEEJPCDnMv3+s8BcepppC0mK55hzxpJoqN3QsHk/ba4ppr4+nnC3d08M1wCAJWjk+LZ/8NzpdAo6moacvBFk/B7b7gZpO+fYg6FxIXCNGZ5yC6ilI+BigU0A7thVztfJyC9s82nP+YQbzraHablQ9mR++U4H1hmIdYZ5CElGzpEMB8ZeDtL3T9mHoLRV9kbLXN5vAIG/ZKb7QKrxC5dajJ/QHUCQf9ADCvTHz1b5JJ33b+GE38YuVpV8r39HTuhzlzsj+rjUsrDWP3bWUYdJ8buqyjnfAuEGU7NMySsGr6Je9VBQL8N4OyEfscUPpVIlh90WJBjVaNPe2U4eKiScXtMydZaeZFK7cJQaglbzQ4gLEhhgw7IBXQOVLF9rXrftynQwLDwInE4TRAT9/T3kqaC13eaJol62gF/uhgBqOnNfgAiC0bn6ku4Fv5fGh3VMTuNzMhg22uB0iNqXTt9yPZAdawKhoj7NGZZwCYCKsrVCGBAjETKKUKRbmQgQ7GvBpEGQ4NLwBAlLlAS05iWSAY+xrY06hnZeVDzJiFoBQyThI5kcKWHlgg/+UZPChpqJJVbMWNa3asuSUNedcsge/VqSkoiWXUqzU0kwsmVq2YhasWqtcBcFRa66lWq21NSzaILlhdgNDaxtvsqVNt7yVzba6tQ736alrz710C732NnjIQJwYeZRho442acKVZpo68yzTZp1twdWWrLR05VWWrbrahRqFA9ZX5f2o0Q013pFyxnKhhqml3ESQhxN1zIAYJwLixRGAQ7NjFo1S4uDQOWaxMk6FMrRUB2eQIwYE0yTWRRd2P5G7wy2k9CXc+IZccOi+A7ng0D1B7jVub6A2/LbpUcKOkB9DN2oUHL+slJR0pYw72LtJ/Zb6TRvey/i/oD9LUKpG02+80hRXkcBRU48redIwkPUclPCa9DnKHycoNrb2rja8l/HjgqqUuLQdNbK/Nyk46ghP/5pGiVN8uvY95QgxMOM+31l0bmm1zAHjZfDXVQqvBhDQXbbQ1pAl86MKj+1NpcDfpFKIX1UpUleeMwg0q3488eH9PB8pi4bfJzWWRMmeCQzPV4J/50PsEqSMuPpwRW+22qC95l1RHb2MXP2nZnwuACGkTPupaniq669URc42kpVGzeZp3sDV4mHP+PFWkOcZ9YFcIjTkH7WSmzmV5pbQ+Ehp28KljTTocXs/uSTQNpfy68nqvyUVSfm+Xvut4uEzO+K2xvT8Qtc2QFjNt4aYcLH07CNIbwb2Uj9kvvBZO9+0gmP7/2X1MOJu5x4Nty1wqj56Nn8RNQ4FCUlZUvnleQvfE9b+c4JkIfUD6OEf4i71AujO6WgAAAGFaUNDUElDQyBwcm9maWxlAAB4nH2RPUjDQBzFX1O1IhUHK4g4ZKhOFkRFBBepYhEslLZCqw4ml35Bk4YkxcVRcC04+LFYdXBx1tXBVRAEP0AcnZwUXaTE/yWFFjEeHPfj3b3H3TtAqJeZanaMA6pmGclYVMxkV8XAKwQEMIBZdEnM1OOpxTQ8x9c9fHy9i/As73N/jl4lZzLAJxLPMd2wiDeIpzctnfM+cYgVJYX4nHjMoAsSP3JddvmNc8FhgWeGjHRynjhELBbaWG5jVjRU4inisKJqlC9kXFY4b3FWy1XWvCd/YTCnraS4TnMYMSwhjgREyKiihDIsRGjVSDGRpP2oh3/I8SfIJZOrBEaOBVSgQnL84H/wu1szPznhJgWjQOeLbX+MAIFdoFGz7e9j226cAP5n4Epr+St1YOaT9FpLCx8BfdvAxXVLk/eAyx1g8EmXDMmR/DSFfB54P6NvygL9t0DPmttbcx+nD0Caulq+AQ4OgdECZa97vLu7vbd/zzT7+wF8pXKr0kUkPQAADRhpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+Cjx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDQuNC4wLUV4aXYyIj4KIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIgogICAgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIKICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIKICAgIHhtbG5zOkdJTVA9Imh0dHA6Ly93d3cuZ2ltcC5vcmcveG1wLyIKICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICB4bXBNTTpEb2N1bWVudElEPSJnaW1wOmRvY2lkOmdpbXA6ZWY5MjY4YzktNTgwYy00MjQ0LTgyODktYTAwYzk2N2E0YmFjIgogICB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjRiZDVmMGQ1LWNkMWUtNDViYi1iNmQ5LWE4YzVlNDkyM2U3MSIKICAgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmVhMTQ5N2M5LTAxMzktNDk4ZS1hZDYwLTk5NTI1NzhlOWIxYyIKICAgZGM6Rm9ybWF0PSJpbWFnZS9wbmciCiAgIEdJTVA6QVBJPSIyLjAiCiAgIEdJTVA6UGxhdGZvcm09IldpbmRvd3MiCiAgIEdJTVA6VGltZVN0YW1wPSIxNjQ0NDgyMjUxMTA2NTgwIgogICBHSU1QOlZlcnNpb249IjIuMTAuMjQiCiAgIHRpZmY6T3JpZW50YXRpb249IjEiCiAgIHhtcDpDcmVhdG9yVG9vbD0iR0lNUCAyLjEwIj4KICAgPHhtcE1NOkhpc3Rvcnk+CiAgICA8cmRmOlNlcT4KICAgICA8cmRmOmxpCiAgICAgIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiCiAgICAgIHN0RXZ0OmNoYW5nZWQ9Ii8iCiAgICAgIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6OWVhYTkyOTYtOTI0NC00ZTU4LThkYmUtZWNhODMxMTJkZDE2IgogICAgICBzdEV2dDpzb2Z0d2FyZUFnZW50PSJHaW1wIDIuMTAgKFdpbmRvd3MpIgogICAgICBzdEV2dDp3aGVuPSIyMDIyLTAyLTEwVDA5OjM3OjMxIi8+CiAgICA8L3JkZjpTZXE+CiAgIDwveG1wTU06SGlzdG9yeT4KICA8L3JkZjpEZXNjcmlwdGlvbj4KIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAKPD94cGFja2V0IGVuZD0idyI/PjAYwf0AAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAHdElNRQfmAgoIJR9yXG2RAAAALUlEQVQI12NgIBcwhnYd+Y9TkoGBgQGbgtVlNoyMMA6ygtVlNowYxuCzAgMAAKYfDUgzMsMOAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/shared/help-medium.png", data : "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAADpElEQVRYhe2X32scVRTHP/fOZtMFs7tJC4np1mS7RQjC2oJg7ZMKPvShBBR9MopiqYbaP0CwL0VQ30SyGtsnow9SUGMViw8WBGlebBWjlJgf/ZFNQo2Jm0SSzM6914fJbmayO7OTRJ/0+zRz5n7P97tnzpx7F/7rEDsh3T+4tK+sZKeQIqM0xlJmel3omeLp5B//moHcQOmQEbLPQC/wYMCyH4VhWMbU0Pip9MQ/YiB7fqUdx5zFcBJoiui3jGFQSs5NvNJyd8cGut5fekRq8SnQEVF4K+bRPDV1uuW7oAUy6EH2veVnpBZXdiEOsA/JN9nC8tNBC+pWIDewdEwL8S3QvAtxL2w0T9SrRI2B7PmVdmzzE4L2sIwHkpIDLQJbGWZWYHZFY8JNzFkO+fEzLb97g7GaZY45GybelZK8dqyJnr2WL357SfPWSJmf76ogaoeK8Tpwxhv0VSA3UDqkhfyVgG5PxgUfnthDW6J+7646hucvrTH3V2AtbIXqud2fnqwEfE2okc8FiQMcz1lV8TtLmv7L67z41RpjCxqARExwPFdbVA/iUlh93oD/KxD0hrFzrZtlv3jDYXReMb6o+XzMqcYzycAPy5Uwfo2qXXe8kg8jfzHmcLXoio3O62q81fNKFlcbtCIczlwotU2/lFrwGbAdmREinDw6r2DeH+vZa/HsA24apeHrSacO0wfRZFsZYAE8r8AIcW8j5lZ0pyVvPx4nEXMrULhmM7GoG7DAGDor11UDwpiGtfMibsGbj8ZJNbvig9fLXLzR8NdXVM3mZcWAxex2DBzdb9F5j0v/ctzh41/KkbnSYabGgO3o6e0Y6E5tdvul3wKHTz0YO6GKlRvfRMkWlq8Dh6NkOdgq6Uq69JGiZtWJ/AZ/mOpveahy45sawjBsRDQDk4sapSXLttmOOAiGvbe+qSFjagiwo+R5Id/E0Ik9fNKbqNkXQmBrR30UaGD8VHoCwwdRMj3c6VKbY3CkI3z6VSCgcOvV9FSgAQApOQfMNUp2eVKhDCyuGb6/E6kJZ2OWeaOOqVpsHMWu0OBA0hwDR7sTsAHWDPqxm/2pka0P6tbu1svJq0AfsB6Wdd2JJo6hr544NDiUdhdKRwXyM3Z+Lpw16CeDxCHkUApwsz81YjnkgXeJ+HVswBaCd5oskw8Th238Mbmv8OdBKay+jf38SN1kgmvaMGyUGtra7bs24EXmQqktvmrtV5bIAFjKTNsJVazs8f9jO/gbuERJ498j87cAAAAASUVORK5CYII"},{ name : "haxeui-core/locale/en/std-strings.properties", data : "c2F2ZT1TYXZlDQp5ZXM9WWVzDQpubz1Obw0KY2xvc2U9Q2xvc2UNCm9rPU9LDQpjYW5jZWw9Q2FuY2VsDQphcHBseT1BcHBseQ0Kc2VhcmNoPVNlYXJjaA0KDQpyZWQ9UmVkDQpncmVlbj1HcmVlbg0KYmx1ZT1CbHVlDQpodWU9SHVlDQpzYXR1cmF0aW9uPVNhdHVyYXRpb24NCmJyaWdodG5lc3M9QnJpZ2h0bmVzcw0K"},{ name : "haxeui-core/styles/shared/collapsed-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAA3XAAAN1wFCKJt4AAAAB3RJTUUH5AoNCwocG2BobAAAAHlJREFUOMtjYBi+YP36bcrEqGPCLfP36Pr1W4zJN4CBQZyB6f/B9Zs2eZJrAAMDAwM3w3/GDRs2bI4i1wAGBgYGtv+MDEs2bNpSTq4BeAELEWp+Mf5nSAzw91lGjgFfGRj/hwb4+20nxwUvGf4xegcG+p6laUIaBgAAk1kg6zuyVSkAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/option-light.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAgAAAAICAYAAADED76LAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAA3XAAAN1wFCKJt4AAAAB3RJTUUH5QEaCgw0CA+AtQAAAINJREFUGNN9zDEKwlAQRdE781egfdYQV6FgM0WWYpNNSPYRm2ktsgfb9LYSsE7+WAQE4ccDr7rwBMDdqyB1CEcAgkElt2Y2irtXoelBsOfXJLHUGqSuEAF2SLrq97Yg4KT8F0owbHe5q0pugalQX3nWi5rZKLHUAjfgvU76PKdD05yfH881KnTRsBd3AAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/switches.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogU1dJVENIIChERUZBVUxUKQ0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5zd2l0Y2ggew0KICAgIHdpZHRoOiBhdXRvOw0KICAgIGhlaWdodDogYXV0bzsNCiAgICBob3Jpem9udGFsLXNwYWNpbmc6IDVweDsNCn0NCg0KLnN3aXRjaC1sYWJlbCB7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCn0NCg0KLnN3aXRjaC1idXR0b24tc3ViIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZGVmYXVsdC1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIGJvcmRlcjogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIGJvcmRlci1yYWRpdXM6IDJweDsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgcGFkZGluZzogMHB4Ow0KICAgIGluaXRpYWwtd2lkdGg6IDQwcHg7DQogICAgaW5pdGlhbC1oZWlnaHQ6IDIwcHg7DQogICAgZmlsdGVyOiAkbm9ybWFsLWlubmVyLXNoYWRvdzsNCn0NCg0KLnN3aXRjaC1idXR0b24tc3ViOmRpc2FibGVkIHsNCiAgICBib3JkZXItY29sb3I6ICRkaXNhYmxlZC1ib3JkZXItY29sb3I7DQp9DQoNCi5zd2l0Y2gtYnV0dG9uLXN1YiAuYnV0dG9uIHsNCiAgICBoZWlnaHQ6IDEwMCU7DQogICAgd2lkdGg6IDUwJTsNCiAgICBib3JkZXItcmFkaXVzOiAycHg7DQogICAgZmlsdGVyOiBub25lOw0KfQ0KDQouc3dpdGNoLWJ1dHRvbi1zdWIgLmJ1dHRvbjpkaXNhYmxlZCB7DQogICAgYmFja2dyb3VuZDogJGRpc2FibGVkLWJhY2tncm91bmQtY29sb3Itc3RhcnQgJGRpc2FibGVkLWJhY2tncm91bmQtY29sb3ItZW5kIHZlcnRpY2FsOw0KICAgIGJvcmRlci1jb2xvcjogJGRpc2FibGVkLWJvcmRlci1jb2xvcjsNCn0NCg0KLnN3aXRjaC1idXR0b24tc3ViLWV4dHJhIHsNCiAgICBoZWlnaHQ6IDA7DQogICAgd2lkdGg6IDA7DQogICAgYmFja2dyb3VuZC1jb2xvcjogbm9uZTsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgZmlsdGVyOiBub25lOw0KfQ0KDQpAa2V5ZnJhbWVzIHN3aXRjaEFuaW1hdGVTZWxlY3RlZCB7DQogICAgMCUgew0KICAgICAgICBwb3M6IDA7DQogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRkZWZhdWx0LWJhY2tncm91bmQtY29sb3I7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBwb3M6IDEwMDsNCiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHNlbGVjdGlvbi1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIH0NCn0NCg0KLnN3aXRjaC1idXR0b24tc3ViOnNlbGVjdGVkIHsNCiAgICBhbmltYXRpb246IHN3aXRjaEFuaW1hdGVTZWxlY3RlZCAwLjJzIGVhc2UgMHMgMTsNCn0NCg0KLnN3aXRjaC1idXR0b24tc3ViOnVuc2VsZWN0ZWQgew0KICAgIGFuaW1hdGlvbjogc3dpdGNoQW5pbWF0ZVNlbGVjdGVkIDAuMnMgZWFzZSAwcyAxIHJldmVyc2UgYmFja3dhcmRzOw0KfQ0KDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoqKiBTV0lUQ0ggKENJUkNMRSkNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQouY2lyY2xlLXN3aXRjaCAuc3dpdGNoLWJ1dHRvbi1zdWIgew0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBmaWx0ZXI6IG5vbmU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogbm9uZTsNCiAgICBib3JkZXItcmFkaXVzOiAycHg7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KICAgIHBhZGRpbmc6IDBweDsNCiAgICBpbml0aWFsLWhlaWdodDogMjBweDsNCiAgICBpbml0aWFsLXdpZHRoOiA0MHB4Ow0KfQ0KDQouY2lyY2xlLXN3aXRjaCAuc3dpdGNoLWJ1dHRvbi1zdWItZXh0cmEgew0KICAgIGhlaWdodDogMTRweDsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZGVmYXVsdC1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIGJvcmRlcjogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQogICAgYm9yZGVyLXJhZGl1czogMTBweDsNCiAgICBmaWx0ZXI6ICRub3JtYWwtaW5uZXItc2hhZG93Ow0KfQ0KDQouY2lyY2xlLXN3aXRjaCAuc3dpdGNoLWJ1dHRvbi1zdWItZXh0cmE6ZGlzYWJsZWQgew0KICAgIGJvcmRlci1jb2xvcjogJGRpc2FibGVkLWJvcmRlci1jb2xvcjsgICAgDQp9DQoNCi5jaXJjbGUtc3dpdGNoIC5zd2l0Y2gtYnV0dG9uLXN1YiAuYnV0dG9uIHsNCiAgICB3aWR0aDogMjBweDsNCiAgICBoZWlnaHQ6IDIwcHg7DQogICAgYm9yZGVyLXJhZGl1czogNTBweDsNCn0NCg0KQGtleWZyYW1lcyBzd2l0Y2hBbmltYXRlU2VsZWN0ZWRDaXJjbGUgew0KICAgIDAlIHsNCiAgICAgICAgcG9zOiAwOw0KICAgIH0NCiAgICAxMDAlIHsNCiAgICAgICAgcG9zOiAxMDA7DQogICAgfQ0KfQ0KDQouY2lyY2xlLXN3aXRjaCAuc3dpdGNoLWJ1dHRvbi1zdWI6c2VsZWN0ZWQgew0KICAgIGFuaW1hdGlvbjogc3dpdGNoQW5pbWF0ZVNlbGVjdGVkQ2lyY2xlIDAuMnMgZWFzZSAwcyAxOw0KfQ0KIA0KLmNpcmNsZS1zd2l0Y2ggLnN3aXRjaC1idXR0b24tc3ViOnVuc2VsZWN0ZWQgew0KICAgIGFuaW1hdGlvbjogc3dpdGNoQW5pbWF0ZVNlbGVjdGVkQ2lyY2xlIDAuMnMgZWFzZSAwcyAxIHJldmVyc2UgYmFja3dhcmRzOw0KfQ0KDQoNCkBrZXlmcmFtZXMgc3dpdGNoQW5pbWF0ZUV4dHJhU2VsZWN0ZWRDaXJjbGUgew0KICAgIDAlIHsNCiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGRlZmF1bHQtYmFja2dyb3VuZC1jb2xvcjsNCiAgICB9DQogICAgMTAwJSB7DQogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWxlY3Rpb24tYmFja2dyb3VuZC1jb2xvcjsNCiAgICB9DQp9DQoNCi5jaXJjbGUtc3dpdGNoIC5zd2l0Y2gtYnV0dG9uLXN1Yi1leHRyYTpzZWxlY3RlZCB7DQogICAgYW5pbWF0aW9uOiBzd2l0Y2hBbmltYXRlRXh0cmFTZWxlY3RlZENpcmNsZSAwLjJzIGVhc2UgMHMgMTsNCn0NCg0KLmNpcmNsZS1zd2l0Y2ggLnN3aXRjaC1idXR0b24tc3ViLWV4dHJhOnVuc2VsZWN0ZWQgew0KICAgIGFuaW1hdGlvbjogc3dpdGNoQW5pbWF0ZUV4dHJhU2VsZWN0ZWRDaXJjbGUgMC4ycyBlYXNlIDBzIDEgcmV2ZXJzZSBiYWNrd2FyZHM7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIFNXSVRDSCAoUElMTCkNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoucGlsbC1zd2l0Y2ggLnN3aXRjaC1idXR0b24tc3ViIHsNCiAgICBib3JkZXItcmFkaXVzOiAyMHB4Ow0KICAgIGluaXRpYWwtd2lkdGg6IDQwcHg7DQogICAgaW5pdGlhbC1oZWlnaHQ6IDIwcHg7DQogICAgcGFkZGluZzogMHB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6ICRkZWZhdWx0LWJhY2tncm91bmQtY29sb3I7DQogICAgYm9yZGVyOiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KICAgIGZpbHRlcjogJG5vcm1hbC1pbm5lci1zaGFkb3c7DQp9DQoNCi5waWxsLXN3aXRjaCAuc3dpdGNoLWJ1dHRvbi1zdWI6ZGlzYWJsZWQgew0KICAgIGJvcmRlci1jb2xvcjogJGRpc2FibGVkLWJvcmRlci1jb2xvcjsgDQp9DQoNCi5waWxsLXN3aXRjaCAuc3dpdGNoLWJ1dHRvbi1zdWIgLmJ1dHRvbiB7DQogICAgYm9yZGVyLXJhZGl1czogNTBweDsNCiAgICB3aWR0aDogMjBweDsNCiAgICBoZWlnaHQ6IDIwcHg7DQogICAgZmlsdGVyOiBub25lOw0KfQ0KDQoucGlsbC1zd2l0Y2ggLnN3aXRjaC1idXR0b24tc3ViLWV4dHJhIHsNCiAgICBoZWlnaHQ6IDA7DQogICAgd2lkdGg6IDA7DQogICAgYmFja2dyb3VuZC1jb2xvcjogbm9uZTsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgZmlsdGVyOiBub25lOw0KfQ0KDQpAa2V5ZnJhbWVzIHN3aXRjaEFuaW1hdGVTZWxlY3RlZFBpbGwgew0KICAgIDAlIHsNCiAgICAgICAgcG9zOiAwOw0KICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZGVmYXVsdC1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIH0NCiAgICAxMDAlIHsNCiAgICAgICAgcG9zOiAxMDA7DQogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWxlY3Rpb24tYmFja2dyb3VuZC1jb2xvcjsNCiAgICB9DQp9DQoNCi5waWxsLXN3aXRjaCAuc3dpdGNoLWJ1dHRvbi1zdWI6c2VsZWN0ZWQgew0KICAgIGFuaW1hdGlvbjogc3dpdGNoQW5pbWF0ZVNlbGVjdGVkUGlsbCAwLjJzIGVhc2UgMHMgMTsNCn0NCg0KLnBpbGwtc3dpdGNoIC5zd2l0Y2gtYnV0dG9uLXN1Yjp1bnNlbGVjdGVkIHsNCiAgICBhbmltYXRpb246IHN3aXRjaEFuaW1hdGVTZWxlY3RlZFBpbGwgMC4ycyBlYXNlIDBzIDEgcmV2ZXJzZSBiYWNrd2FyZHM7DQp9DQo"},{ name : "haxeui-core/styles/shared/maximize-button-blue.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsEAAA7BAbiRa+0AAABLSURBVChTY/z//z8DKYBx/YnH5168/24I5eMFEoKc55mIVQwCYLXTt98i2k0gtUxQNtFgRGpgXHPs0fHXH39YQPl4ASjiSEwaDAwA374gqW1irpsAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/right-arrow-blue.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAHCAYAAAAvZezQAAAEJXpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHjazVZbkiQnDPznFD4CkhASx+FRRPgGPr4Tqrp3ph+zs+v9cBENtIpKRKYEhOOfv2f4Cw8Zx5DUPJecI55UUuGKjsfzqbummHZ9Pulq6bM9RLteMEyCVs6/nq/xNzvdAc6moqcfgLxfL9rnF+Wamf0B6JpIlkeMzriAygUkfL6gC6Cey4q5uH1cQjvO9vr+pMHX0lC1m1WvwQ//k4G9oZhHmA8hiahZ0umArB8HqbuzasdAkoK+iKNWscsTEPKKp/jBq/CoSuHXqtx7D6JIPu0Bhs9k5nv70k76mvywKf4ws/T7zJ/spjfGPpO8fnMOD3Me5+pqyqA0X4u6LWX3MLCBctmfZRTDT9G3XQqKB0Rvh+Qj9thQOhViyDIp0aBKk47ddupwMfHBSAdm7izb5mJcuEsM0CmtQpMNig3oxdIhr8DKd19oz1v2dJ0cEw/CSCaA0Sk//5nyFmjOFfJE0U+eEBbwi1dwwI2l3KoxCoLQvMWRboJv5fFZugoU1E2zY4E1thOiKV2xteJIttASl8Dp2ibIxgUAijC3whkSKBAziVKmaMxGBB4d+lQAOZKGGyQgVR7wkpNIhjjIGMyNb4z2WFY+zdizIIRKFoM0SClolbCxIX4sOWKoqmhS1aymrkVrlpyy5pwtr82vmlgytWxmbsWqiydXz27uwYvXwkWwOWrJxYqXUmrFpBXIFV9XDKi1cZOWmrbcrHkrrXaET09de+7WPfTS6+AhA/vEyMOGjzLqQQdC6UiHHvmww49y1IlQmzLT1JmnTZ9l1rtqFHba0VP5vmp0U423Umug3VXDp2Y3CFrbiS7NoBgnguK2FEBA89IsOqXEYUm3NEPEISuU4aUucQYtxaBgOoh10l27H8p90i2k9J9045tyYUn3J5QLS7o3yj3r9kK1sU6bHiVshVYaLlKjIP20slduh/uMfXUdY+FDrnlIaQ3UYFfcg4ojd5KuIyzcOj9pQfjueHwDHZ6xfw86ADtB+FSajaOMhB1eLM826NEg1gbUIJD1Ym3h+2t5anGQQp4LO7wi7neww2dwHEdWdZ/2morT8coyMvW14LxhcJAu9KDx7Oi+Z60OXy76N1pIl6ohH1qoT9i/Bx0esBGaZdHSQZrlUgW/HBc5rSUomXDjuf/DuHny+/2A/Gn7PwBah39ce8PiBEBpdBvZd10243wg61vKuy6L88ui/EU0hVche2tLHYORJSMf65I73gTuhg5fZ0HBNRLue5+67p5zdNnuoy7bWZkWp+JuFThiOeMHfn9CK2cnPUXZvV3JFrCRpvuM77C+gR02+7gI27oCG1zroy/nkcw0zz2jrJfpjpNfuha+zAgC27W0hG0blH8JFd4s+5ehw1sG37Q2cXKs3PoX/YUPPAIScFcAAAGFaUNDUElDQyBwcm9maWxlAAB4nH2RPUjDQBzFX1O1IhUHK4g4ZKhOFkRFBBepYhEslLZCqw4ml35Bk4YkxcVRcC04+LFYdXBx1tXBVRAEP0AcnZwUXaTE/yWFFjEeHPfj3b3H3TtAqJeZanaMA6pmGclYVMxkV8XAKwQEMIBZdEnM1OOpxTQ8x9c9fHy9i/As73N/jl4lZzLAJxLPMd2wiDeIpzctnfM+cYgVJYX4nHjMoAsSP3JddvmNc8FhgWeGjHRynjhELBbaWG5jVjRU4inisKJqlC9kXFY4b3FWy1XWvCd/YTCnraS4TnMYMSwhjgREyKiihDIsRGjVSDGRpP2oh3/I8SfIJZOrBEaOBVSgQnL84H/wu1szPznhJgWjQOeLbX+MAIFdoFGz7e9j226cAP5n4Epr+St1YOaT9FpLCx8BfdvAxXVLk/eAyx1g8EmXDMmR/DSFfB54P6NvygL9t0DPmttbcx+nD0Caulq+AQ4OgdECZa97vLu7vbd/zzT7+wF8pXKr0kUkPQAADRhpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+Cjx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDQuNC4wLUV4aXYyIj4KIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIgogICAgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIKICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIKICAgIHhtbG5zOkdJTVA9Imh0dHA6Ly93d3cuZ2ltcC5vcmcveG1wLyIKICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICB4bXBNTTpEb2N1bWVudElEPSJnaW1wOmRvY2lkOmdpbXA6ZjA2MTJiMDQtMmJkZC00N2E3LTgyOGQtYzkzNWMwOTU5OTZlIgogICB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjVhODNkZjU5LTk2NGUtNDI5Zi05ZmEyLTg5ZDNmYWY4ZTc1ZiIKICAgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjExMjg5YWQzLTA2ZTEtNGU4Ni1hMTkyLTQ0ZWVhNjRkZDkzNiIKICAgZGM6Rm9ybWF0PSJpbWFnZS9wbmciCiAgIEdJTVA6QVBJPSIyLjAiCiAgIEdJTVA6UGxhdGZvcm09IldpbmRvd3MiCiAgIEdJTVA6VGltZVN0YW1wPSIxNjQ0MzQ1NTM4NjkyMjYyIgogICBHSU1QOlZlcnNpb249IjIuMTAuMjQiCiAgIHRpZmY6T3JpZW50YXRpb249IjEiCiAgIHhtcDpDcmVhdG9yVG9vbD0iR0lNUCAyLjEwIj4KICAgPHhtcE1NOkhpc3Rvcnk+CiAgICA8cmRmOlNlcT4KICAgICA8cmRmOmxpCiAgICAgIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiCiAgICAgIHN0RXZ0OmNoYW5nZWQ9Ii8iCiAgICAgIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YTI2YzU1ZDUtMDYxMi00NDZhLTgzZGEtYjZiNjA5NGI5ZjY5IgogICAgICBzdEV2dDpzb2Z0d2FyZUFnZW50PSJHaW1wIDIuMTAgKFdpbmRvd3MpIgogICAgICBzdEV2dDp3aGVuPSIyMDIyLTAyLTA4VDE5OjM4OjU4Ii8+CiAgICA8L3JkZjpTZXE+CiAgIDwveG1wTU06SGlzdG9yeT4KICA8L3JkZjpEZXNjcmlwdGlvbj4KIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAKPD94cGFja2V0IGVuZD0idyI/Pj86b/sAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAHdElNRQfmAggSJjqpzQQ4AAAALklEQVQI12MI7TrynwEJMDEwMDAgCzLBGDBBRqxaYGB1mQ0jEzKHAd1ABgYGBgAWuA/w/oe0hAAAAABJRU5ErkJggg"},{ name : "styles/main.css", data : ""},{ name : "haxeui-core/styles/shared/folder-light.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAADX3pUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja7ZdRlusmDIbfWUWXgCRAYjkYzDndQZffH7DdydzkNHOdt9aMERZYCH0CZ9z+15/d/YGLvXgXolrKKXlcIYfMBQ3z6yqzJh9mfTz4s/Ggd1cHQyWQsh4tHeNPPfkHS1TQil8MWT06tseOHA779s3QMZEMjxiNdhjKhyHh1UGHgbKW5VM2/bqEbV+ynSuxdbtR9TMmusT356CIXouYR5h3IfGoWcJyQMbNTgoahJok82gZ2gG6gu58eIKAPIuT/+KV+07latEL/TcokpbeQfEYzHTJp3qKz4PvZoi/zCz1mvlBX7Zriocgzxj3Zq73fa2uhISQpmNR51JmCwM3hFzmawlFcUe0dZaMYg7ZW4G8+eo3lEqZGFg6BWpUqNM+ZaUKFwPvrJDMlWXqTJQzV2wRcAqjUGeVLA3UWCrwCrR8+UJz3jynq2SYuBFGMsEYLfz8mfLSUO8j5Ym8XbGCXzw2BdwY5EaNUQBC/cyjOAN8lu/X4CogGGeYDQssflsmtkhHbo08kglaMDBCrr1G2g4DCBHmjnCGBAR8IomUyCuzEiGOBj4FhgybhjcgoBi5wUsOIglwjMfceEdpjuXIS40zCyCiJFGgyVLAKuBgQ/5oMORQiRJDjDFFjRZzLElSSDGlpGkcfkVFg0ZNqmqatZhYsGjJ1MxZtpI5Cw7HmFPWbDnnUjBpgeWCtwsGlLLxJlvY4pY23WzLW6lInxpqrKlqNVdzLY2bNJwTLTVt1nIrO+1IpT3scU+77rbnvXSkWpceeuypa7eee7mokVtYfynvU6OTGk9SY6Be1PCq6mmCxnESBzMQ40AgroMAEpoHM28UAruBbjDzmbErIsPLOOA0GsRAMOzEsdPF7h9yD9xcCLe48UnODXSfIOcGuhfkfuX2hFobX5vqxU1CYxuOoHrB9sOA3QpbGR+1t6X76Qv/G3pT9pLTbLZQD6V7NTp5jhTw52vPaWGsodkr2+4DzryxtDAEZ3vDKfcBZ35vaW/HCIsoaxHW6lu+/Au1n0p335cl3YcSexm658uS7jPMenb3fflQHp1hcfd9uZ1Hj4jcfV9u5NGzdHH3ffmtPHqduu6+Lz/Mo6e+/Jc/kB0/V/BvqPsb0xrN2E54p04AAAGFaUNDUElDQyBwcm9maWxlAAB4nH2RPUjDUBSFT1OlIhWRdhBxyFA7WRAVcZQqFsFCaSu06mDy0j9o0pCkuDgKrgUHfxarDi7Oujq4CoLgD4ijk5Oii5R4X1JoEeOFx/s4757De/cBQrPKVLNnAlA1y0gn4mIuvyoGXuFDCEOIQpCYqSczi1l41tc9dVPdxXiWd9+fNaAUTAb4ROI5phsW8QbxzKalc94nDrOypBCfE48bdEHiR67LLr9xLjks8MywkU3PE4eJxVIXy13MyoZKPE0cUVSN8oWcywrnLc5qtc7a9+QvDBa0lQzXaY0igSUkkYIIGXVUUIWFGO0aKSbSdB738I84/hS5ZHJVwMixgBpUSI4f/A9+z9YsTk26ScE40Pti2x9jQGAXaDVs+/vYtlsngP8ZuNI6/loTmP0kvdHRIkfA4DZwcd3R5D3gcgcYftIlQ3IkPy2hWATez+ib8kDoFuhfc+fWPsfpA5ClWS3fAAeHQLRE2ese7+7rntu/Pe35/QBP4XKZ9Ef7VwAADRhpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+Cjx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDQuNC4wLUV4aXYyIj4KIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIgogICAgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIKICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIKICAgIHhtbG5zOkdJTVA9Imh0dHA6Ly93d3cuZ2ltcC5vcmcveG1wLyIKICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICB4bXBNTTpEb2N1bWVudElEPSJnaW1wOmRvY2lkOmdpbXA6NmIwMzEyYjItZDE5YS00NTc2LTlkYjAtYjVhNTNmZDRmMjA1IgogICB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOmEyMTJiNWZhLWNjNjgtNDBiZS1hZTA5LTA3NmExZjU5NGY4NiIKICAgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjIwMmRiNTQzLTYwMGMtNGUyYi1hNDM4LTcxOTZjMjI4ZWNlZSIKICAgZGM6Rm9ybWF0PSJpbWFnZS9wbmciCiAgIEdJTVA6QVBJPSIyLjAiCiAgIEdJTVA6UGxhdGZvcm09IldpbmRvd3MiCiAgIEdJTVA6VGltZVN0YW1wPSIxNjQyNjE0MDI5ODk2ODExIgogICBHSU1QOlZlcnNpb249IjIuMTAuMjQiCiAgIHRpZmY6T3JpZW50YXRpb249IjEiCiAgIHhtcDpDcmVhdG9yVG9vbD0iR0lNUCAyLjEwIj4KICAgPHhtcE1NOkhpc3Rvcnk+CiAgICA8cmRmOlNlcT4KICAgICA8cmRmOmxpCiAgICAgIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiCiAgICAgIHN0RXZ0OmNoYW5nZWQ9Ii8iCiAgICAgIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YmQ3YTVjZTUtNjE4Yy00MTE0LTg5ZWYtNTg5ZmMxM2Q2OTJlIgogICAgICBzdEV2dDpzb2Z0d2FyZUFnZW50PSJHaW1wIDIuMTAgKFdpbmRvd3MpIgogICAgICBzdEV2dDp3aGVuPSIyMDIyLTAxLTE5VDE4OjQwOjI5Ii8+CiAgICA8L3JkZjpTZXE+CiAgIDwveG1wTU06SGlzdG9yeT4KICA8L3JkZjpEZXNjcmlwdGlvbj4KIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAKPD94cGFja2V0IGVuZD0idyI/PhbZGncAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAADdcAAA3XAUIom3gAAAAHdElNRQfmARMRKB1QuojKAAAARUlEQVQ4y2NgGPKAkYGBgWHWig1n0ISfM/z/Py8tMmA9IQOYsAv/l2RgZKietXxjKpkuIA6kRQSYMFEaBqMGDAsDBh4AAD+qEAAUuqhbAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/shared/help-large.png", data : ""},{ name : "haxeui-core/styles/shared/down-arrow-square-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAIAAABLMMCEAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAMUlEQVQImWN8K6PCgAGYMIUYGBhYkk10sKide+YKmtDcM1eYIBSyEMJcCAcuzYjVDQAFcxCadfC9sQAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/default/rules.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogUlVMRQ0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCi5ydWxlIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCn0NCg0KLmhvcml6b250YWwtcnVsZSB7DQogICAgaGVpZ2h0OiAxcHg7DQogICAgd2lkdGg6IDEwMCU7DQogICAgaG9yaXpvbnRhbC1hbGlnbjogImNlbnRlciI7DQp9DQoNCi52ZXJ0aWNhbC1ydWxlIHsNCiAgICBoZWlnaHQ6IDEwMCU7DQogICAgd2lkdGg6IDFweDsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogImNlbnRlciI7DQp9"},{ name : "haxeui-core/styles/native/main.css", data : "KiB7DQogICAgbmF0aXZlOiB0cnVlOw0KfQ0KDQouaHNsaWRlcjpuYXRpdmUsIC52c2xpZGVyOm5hdGl2ZSwgLmhwcm9ncmVzczpuYXRpdmUsIC52cHJvZ3Jlc3M6bmF0aXZlIHsNCiAgICB3aWR0aDogYXV0bzsNCiAgICBoZWlnaHQ6IGF1dG87DQogICAgYmFja2dyb3VuZDogbm9uZTsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYm9yZGVyLXJhZGl1czogbm9uZTsNCn0NCg0KLmJ1dHRvbjpuYXRpdmUsIC5kcm9wZG93bjpuYXRpdmUgew0KICAgIGJhY2tncm91bmQ6IG5vbmU7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGJvcmRlci1yYWRpdXM6IG5vbmU7DQogICAgY29sb3I6IG5vbmU7DQp9DQoNCi50ZXh0ZmllbGQ6bmF0aXZlLCAudGV4dGFyZWE6bmF0aXZlIHsNCiAgICBiYWNrZ3JvdW5kOiBub25lOw0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBib3JkZXItcmFkaXVzOiBub25lOw0KICAgIGNvbG9yOiBub25lOw0KICAgIGZpbHRlcjogbm9uZTsNCn0NCg0KLmRpYWxvZzpuYXRpdmUgew0KICAgIHBhZGRpbmctdG9wOiAwcHg7DQp9"},{ name : "haxeui-core/styles/shared/warning-small.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABCUlEQVQ4jc2RPUoDURSFvzvzfgKKoCmSKmijSLSzF7ERrd1CIOIeBBcgLiCLCGg/jIq1rW5ABUFQUsSR92x8zkxw4tiIp3vvnnvOuRz41/BpY8knjcVpHKlcTlCIvQEUs+N12SD7jhdVSsf2EKGLsMLIHvwqgb9mgczcgTQ/ac84vSxbr0/1EmT2GKQ5GHYYDDuAnyd6O6p1gk/NKtAD0MphtAujvk/M2s8JRE4ADWB0SSAmktOpAv7C7uHZCW+jHToXANj2qd0t+X0th9qEbvh7GSkA5mbeCy7cFmvNE4TaCji7bHF+1Zo4sVxrniC1D8AEuxKPsjluA6g8muyDa9da9/F9TaM/wAcSz0RlELj/AwAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/default/haxeui_small.png", data : "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAMAAABg3Am1AAAC91BMVEUAAABgbY0+U25ga4QwSGe/wMy2ucI8SWC1t8OGj6Sana+zuMd3gppicY1ibYm0ucUzZZvH0ODExdZ8hZw/TGQ+TGPFxth/hp+vtMJNXHLExNI/TmVlhq5hbYi6vc2pr75veZI0ZpyrvdTK0+Q7WoC0t8d/iZ/Gx9ezuMaorb3Gx9dmc49OWm+DiaOpw+CVqMJUe6uwtcGprr5gbIdteZRaZn11gJpgbIhiborM1+g/XoM4WH2zusw8S2RhaYFCUGVuepdyfJVLWG9UYHjDxdZhbYg8SmGeprfKytmSmKw6bqZnjryTqseXq8RQd6mmrb58iaF4g5m2uMd4gZiorrx3gZeKkqZmco5smMg0Y5fP3e5ol8rS3+4+drUzZZs0ZJhPe67AzN7J0+RTeKc5X4o3WoNCYog6WoKuv9ZihK7M1ea+ydyht9JBX4U2V35ieZzAxtd7h59ldZPIzt9je6BBVHBYZoDBwtNMWHCco7Rea4KYqsRWcJZxeI6/wtJSXXTEw9O6vc08RVicpLU5SV7Ly904Rl19h55KVm43RFpLf7lFerOZuNqcudpIeK48bqWftdGftdGZsc6OqsuswdlLd62qv9l2lrxjh7NlibRJbpumudBcga6svtWnutJdg7GKoL6svdZylL1uj7ZSeahJbJREZZCGlKyOm7OZorNgboyxtcNwfJmKkqWhprSHjaB5fJBmc4yor7ylp7Vomc08drVRiMSUttt+p9OStdt9p9M9d7bQ3+9nmMypxOGBqdQ6dbRtnc9gk8qsxuN6pdJ1odFwntBtnM1pms1SicVQh8RHfrs8draqxeKhvuCaut5yoNBilctajsZYjMSXuNxOhcBBerg0aJ8zZ52nwuGdvN6Vt9yOstlklcpckMZNhcM5b6o3a6TR4PDL2+7K2u23zuejwOBekchSisZZjcRVicI6c7EyZZvT4fHF2OzC1eu+0umkweGJr9dfkspik8hWi8VMg75Lgr1Bdq85cq+yyuWEq9VFe7VNUsNiAAAAtHRSTlMABQIDBAYDEgUFAhYWChcK/ac7OzYuFxQTDQwJpjsgDw/9p6aXOjQyMisTExIL+KenPDc0MiciGxXQlpVyXUdCPDk1MSIiHhwVD/7Tx6SkcG1dR0dGLCsq+/r5+Pb29vDMxL28vLerqKOhoKCXj454dnV1cXBpaGdiXldVTUlIQkE8OzYzKiYgHhz9/fz48fHW087OzMzKysjCwLu7t6Cgn5eXlJSFhXl4bm1jY11FRUM4IQf95cbSAAAEV0lEQVRIx32WZZwSQRjGF1ZQMMAEG+zE7u7u7u7u7u7u7m4WdlkQFEwEFOG48+70zu5u/eAE7C6s+nzgA7/3P888O/PODAEkTwclk4EfuZKIllQpV2BJJCRJoHKFKr82PZY2vyqaIRWlm2k0GZBK6jJKpOA/Rf4mxReULwdUuHCx4vm0KlkEUYJyzZLORbJC1atXsUuVnICQq5rMGLm7ANLQoTXLFeMQWF65yNmjrVqVgWq198DMKhkBkL/4vkCiz3vRcxHIsPFEe4woLsDyDm3XGsDfHqfXnvzFdKhSTpJIpy0/ImA2M0zg3tOEBI/n4q6aHYud1zbTZahccdaRlhedzqe+pNv+Bw9umoKjGpRKQ8jSF878lDEjJQZ83gSnYXOb0ws6d6o3a9w6g9Nntz37cvOmCejGiur1w8ATBGAxifc+JOw4dqrduJbepKs3wMARPW9evX5aAOSYl/lREg9Axuxb1bJF1zuCauSgL5QNAVkyW++ZY8RcvWOKlVsdAQpanUxM/RWj8VNM/Y3veh54z8SMbwSK9WiurwGBdE0B8DYQMz7S5aj6YKq+xkIIlCg63PpIGIK5bTOGCWHobyH96OxpwcLlWjShu/WDsB7Wij1+x/eutRistFKVb24160+Gnw8cX0zcSIkfNH9ZbikB5zTF+pbh8/ISJn8e6lYrO4gA+iFXw9n93yRG5xV7fH09pE5jaEAoZU2Lju3pwRYgr4i4iVehzyRgAABk0b7ae0aYV+zxPHUgNAAAtChRrOYjOD6XV0wE9VOxAbbI17GfNyqvKLl78JylKAG2SF++jYHPK9Yn0+rJoHkiAGzTaeuF44s9BkyH7SkENlz6H3B/OwKEU1pJ/8fiLrUGT0kQOommr/2r3k9RP/jQ+LM+pmna8vdZXb9LUZRDjT8rt3BPXP8kXrAAYENo4fit4bPQUNfE4/sdFARS8NbgNp8dVCMPcV6sV9zmQ9v7nYv+O3GfCouNx9sbN9BDj4UWEThvRLdScQPhFn1opjlZBDn8LMUp5TVqUXwIPP5IC3QpOm8kRLwaHgL4mHmHMvOz4r8nL0dIDY8ZfJA9wRH4WfF5eaWqa3AnnxcBQg8uL5+6uZo7jB9+xIDQA48v1A8I4OP+sUtYbLdbrnXd0ne5m3I4oggI4AvFKQDsruRg3M627dqN35rs/8YKEDYELhQMmC3h2tvX77odvfq2PVOkU6dztce36HH92Ut3HBsOkQKvLHQp/oLzuPI56I67dYsdMLFDkSUanS5Towq1x2yzGW3Jz158jYOzewUvRdieI2nXtZewlmV7bTrZoWJlTWkJmUaSsSpAjrfoYQMyfn7pZqnDoE3Rxb5/T1mo1q1bT6xbsXLJjBLUvSRGxgzLgzXsILrYCUWzJuh1ULduXfg6gOXhVpQipEuFvFgVKqGnAyGH748MQJkyVS2pQ6PzAoiuZNVMSJHHiRQgCgkWSSqlMc8fKUlKsPDz5w9agXK/G5FNrAAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/shared/error-small.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAABGklEQVQ4jYWSPUrEUBRGz3sTbHQ2ohi1yE9hkwmCS7AQsVBEEMWViI0wiI1YuInUGi0EFyCDW5g4MMHkWgxqJr4bb/n4zrn3gwcd85EGwSSJo66M1eHwSDB5beuHcRqcajnjhAfhgRiGjQUC5nwpyy//FTjg73FK5gRteGHvEIDy9lqVWA0GsCs+dnm1tVAuijQ6mxOoZ5dTKEtH7V+JV2wF61I7OyPlFETazz+SSRI/eohXQeUKzba7BbMFyKcBGKfRjkHugF4z0PM3AKheX/6wgpz0s+crC9DP8nvB7NI6pRdv4qXbKgyN3i5J/T6iHr2pMDg+klbHBTsFisQJqwKAYhDsY8wNYAwcL2ZPQy2rTpFGfpGEa12ZLwdajcanz1XAAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/shared/error-medium.png", data : "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAACJElEQVRYhcXXzWsTQRjH8e8zSUprmv4JohTEm4fS9CJKbRUsePAFFPGkgVoE/xqxFnyDHvTmzZONUBAlkYCIF0GrnsRLS2uEJO4+HrRh1ybZecZin9OwJM/vszOzOyzscUnoH5vTUxPq9CaIi+Poztjz1y/+G2BrdvKcqDwGCn8uRahWRqv1h9ZebhfCAXKI3G/OlOet/Uwz0Cc8WSqwUFypLe06wCM8COEFMISbEZmAgHATYiBgULg7OI7bfwCA+Msn4rUPQYh8SDhA/vgMhSvXAOgs36PdGyAKi82ZMv0QPR9Dn2nXdjsxbvX7WRLR8xHdAfBe81YidDBgICIFsGy45F1rKxPQF9EFmHd7YglSYyPCAXyfLh8RlUfe4ZBeAr8ZSCJub85OHe0CJEcFGLJ0SS1BxwQAcE6Z7wIU/WntkNp4thn4XRJ3uoBYZRH4YQME7YHt6kicu9UFjK3U3qvqaaDp20HX14kaNaJGDd3YMIU75WKx+qoBf72Kt05MHhORp0DR0tEavq9ae7J9YcdZ4IuQUonC1QVkeIT2gyX021dzOPR4E5aq9VVVnSNjOQoXLlM4c578yTmGKjeCwnsCfBHx57XE+GNQOGQdxxnL4cYPIcMjRO/eBIVnAnwQAyoz3AsQiPAK9wYYEd7hJoAnwhRuBmQgzOEQ8GVUqtZXQc6SPjvaKnrJGg7/8HG6eWrisIvcdXCCuLujz16+De21p/ULbmcp8bwvNP8AAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/close-button-light.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABhWlDQ1BJQ0MgcHJvZmlsZQAAKJF9kT1Iw0AcxV9TS0UrDnaQ4pChOlnwC3GUKhbBQmkrtOpgcumH0KQhSXFxFFwLDn4sVh1cnHV1cBUEwQ8QNzcnRRcp8X9JoUWMB8f9eHfvcfcOEBoVpppdY4CqWUY6ERdz+RUx+IpeBBBEBOMSM/VkZiELz/F1Dx9f72I8y/vcn6NPKZgM8InEs0w3LOJ14ulNS+e8TxxmZUkhPiceNeiCxI9cl11+41xyWOCZYSObniMOE4ulDpY7mJUNlXiKOKqoGuULOZcVzluc1UqNte7JXxgqaMsZrtMcQgKLSCIFETJq2EAFFmK0aqSYSNN+3MMfcfwpcsnk2gAjxzyqUCE5fvA/+N2tWZyccJNCcSDwYtsfw0BwF2jWbfv72LabJ4D/GbjS2v5qA5j5JL3e1qJHQP82cHHd1uQ94HIHGHzSJUNyJD9NoVgE3s/om/LAwC3Qs+r21trH6QOQpa6WboCDQ2CkRNlrHu/u7uzt3zOt/n4AgVdyrUq8E1wAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAADdcAAA3XAUIom3gAAAAHdElNRQflCwUHHhl/NmAoAAABNElEQVQ4y92QsU4CQRCG/9nbdb2jsFHvBUh4A2NrjDEhhkeAWNNySnkl5HgHPR8BExpotbbS8AqExoS7y3Jkx+IguRAusdWpdnbnn3+/H/jzReXmcTA40UI3U9qMR0GQlN96UVTzWLaMNZNhv/+9uxflIS10E4yGa1WnF0W1sti1qgNGQwvdLGtkuUlpM/Yg28Tsu1bdPwyHsRXCeizbAJ8zaOmk6rUSoexGhWBRDBXnTOTxPhodCmbL2wbDBwAGLZ1MPYdhd7U/K36bduquDpo51QjwCwRKCHzmQNYvbq8/36fTvHLB7utb8dLJVJxq86Eg6gT4kp3G5c3V19tstj6I4LFsgQvnTORPYdhdjYIgSWnzwqAFgU+P6eiuMgNjzQSE+X7aoyBIMpHHIMyNNRP8r/oB7XSENXBA5j4AAAAASUVORK5CYII"},{ name : "haxeui-core/styles/shared/up-arrow-light.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAcAAAAECAIAAADNpLIqAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAK0lEQVQImWN8K6PCwMDAwMBwfMYEy4wCCJsJLgQnoaJwDpzNuGXLFgYMAADK0A4MJuH53gAAAABJRU5ErkJggg"},{ name : "haxeui-core/styles/shared/left-arrow-bright.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAHCAIAAACgB3uHAAAABnRSTlMA7QAcACSX3bo6AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAANklEQVQImWN8K6PCwMDAwMAg9Pg2E5zFwMDABGcxMDAw/v//nwEGmN7JqiI4DAwMcD7UAAgfAMkKDTd2MVgoAAAAAElFTkSuQmCC"},{ name : "haxeui-core/styles/default/frames.css", data : "LmZyYW1lIHsNCiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7DQogICAgd2lkdGg6IGF1dG87DQogICAgaGVpZ2h0OiBhdXRvOw0KfQ0KDQouZnJhbWUtY29udGVudHMgew0KICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQogICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIHBhZGRpbmc6IDEwcHg7DQogICAgcGFkZGluZy10b3A6IDE1cHg7DQp9DQoNCi5mcmFtZS10aXRsZSB7DQogICAgY29sb3I6ICRub3JtYWwtdGV4dC1jb2xvcjsNCn0NCg0KLmZyYW1lLWxlZnQtbGluZSwgLmZyYW1lLXJpZ2h0LWxpbmUgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIGhlaWdodDogMXB4Ow0KfQ0K"},{ name : "haxeui-core/styles/default/propertygrids.css", data : "LnByb3BlcnR5LWdyaWQgew0KfQ0KDQoucHJvcGVydHktZ3JpZCAuc2Nyb2xsdmlldy1jb250ZW50cyB7DQogICAgcGFkZGluZzogMDsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBzcGFjaW5nOiAwOw0KfQ0KDQoucHJvcGVydHktZ3JvdXAgew0KICAgIHdpZHRoOiAxMDAlOw0KICAgIHNwYWNpbmc6IDA7DQp9DQoNCi5wcm9wZXJ0eS1ncm91cC1oZWFkZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzb2xpZC1iYWNrZ3JvdW5kLWNvbG9yOw0KICAgIHBvaW50ZXItZXZlbnRzOiB0cnVlOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIHBhZGRpbmc6IDVweDsNCiAgICBib3JkZXItY29sb3I6ICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDFweDsNCiAgICBib3JkZXItYm90dG9tLXNpemU6IDFweDsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQp9DQoNCi5wcm9wZXJ0eS1ncm91cC1oZWFkZXIuc2Nyb2xsaW5nIHsNCiAgICBib3JkZXItcmlnaHQtd2lkdGg6IDBweDsNCiAgICBib3JkZXItcmlnaHQtc2l6ZTogMHB4Ow0KfQ0KDQoucHJvcGVydHktZ3JvdXAtaGVhZGVyOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc29saWQtYmFja2dyb3VuZC1jb2xvci1ob3ZlcjsNCn0NCg0KLnByb3BlcnR5LWdyb3VwLWhlYWRlci1pY29uIHsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KfQ0KDQoucHJvcGVydHktZ3JvdXAtaGVhZGVyOmV4cGFuZGVkIC5wcm9wZXJ0eS1ncm91cC1oZWFkZXItaWNvbiB7DQogICAgcmVzb3VyY2U6ICRhcnJvdy1kb3duLXNxdWFyZTsNCn0NCg0KLnByb3BlcnR5LWdyb3VwLWhlYWRlcjpjb2xsYXBzZWQgLnByb3BlcnR5LWdyb3VwLWhlYWRlci1pY29uIHsNCiAgICByZXNvdXJjZTogJGFycm93LXJpZ2h0LXNxdWFyZTsNCn0NCg0KLnByb3BlcnR5LWdyb3VwLWhlYWRlci1sYWJlbCB7DQogICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjsNCiAgICB3aWR0aDogMTAwJTsNCn0NCg0KLnByb3BlcnR5LWdyb3VwLWNvbnRlbnRzIHsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBzcGFjaW5nOiAxOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KICAgIHBhZGRpbmctYm90dG9tOiAxcHg7DQp9DQoNCi5wcm9wZXJ0eS1ncm91cC5sYXN0IC5wcm9wZXJ0eS1ncm91cC1jb250ZW50cy5zY3JvbGxpbmcgew0KICAgIHBhZGRpbmctYm90dG9tOiAwcHg7DQp9DQoNCi5wcm9wZXJ0eS1ncm91cC1jb250ZW50cy5zY3JvbGxpbmcgew0KICAgIHBhZGRpbmctcmlnaHQ6IDBweDsNCn0NCg0KLnByb3BlcnR5LWdyb3VwLWl0ZW0tbGFiZWwtY29udGFpbmVyIHsNCiAgICB3aWR0aDogNTAlOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvcjsNCiAgICBoZWlnaHQ6IDEwMCU7DQogICAgcGFkZGluZy1sZWZ0OiA1cHg7DQp9DQoNCi5wcm9wZXJ0eS1ncm91cC1pdGVtLWVkaXRvci1jb250YWluZXIgew0KICAgIHdpZHRoOiA1MCU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yOw0KfSAgICAgICAgDQoNCi5wcm9wZXJ0eS1ncm91cC1pdGVtLWxhYmVsIHsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyOw0KfQ0KDQoucHJvcGVydHktZ3JvdXAtaXRlbS1lZGl0b3Igew0KICAgIHdpZHRoOiAxMDAlOw0KfQ0KDQoucHJvcGVydHktZ3JvdXAgLnRleHRmaWVsZCB7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGZpbHRlcjogbm9uZTsNCiAgICBib3JkZXItcmFkaXVzOiAwOw0KfQ0KDQoucHJvcGVydHktZ3JvdXAgLmNoZWNrYm94IHsNCiAgICBwYWRkaW5nOiA1cHg7DQogICAgcGFkZGluZy1sZWZ0OiA0cHg7DQp9DQoNCi5wcm9wZXJ0eS1ncm91cCAubnVtYmVyLXN0ZXBwZXIgew0KICAgIHBhZGRpbmc6IDA7DQogICAgYm9yZGVyOiBub25lOw0KfQ0KDQoucHJvcGVydHktZ3JvdXAgLm51bWJlci1zdGVwcGVyIC5zdGVwcGVyLXZhbHVlIHsNCiAgICBmaWx0ZXI6IG5vbmU7DQp9DQoNCi5wcm9wZXJ0eS1ncm91cCAubnVtYmVyLXN0ZXBwZXIgLnN0ZXBwZXItZGVpbmMgew0KICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICRub3JtYWwtYm9yZGVyLWNvbG9yOw0KfQ0KDQoucHJvcGVydHktZ3JvdXAgLm51bWJlci1zdGVwcGVyIC5zdGVwcGVyLWluYyB7DQogICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCn0NCg0KLnByb3BlcnR5LWdyb3VwIC5kcm9wZG93biB7DQogICAgYm9yZGVyOiBub25lOw0KICAgIGJvcmRlci1yYWRpdXM6IG5vbmU7DQp9DQo"},{ name : "haxeui-core/styles/shared/left-arrow-blue.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAHCAYAAAAvZezQAAAEOHpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHjazVZbkuwmDP1nFVkCkhCC5YCBquwgy88Rdnd6+nFnbiUfMW2kxlivIwmH+defK/yBi4xSSGol15wjrlRT5QamxPNqe6aY9nxe6aL0dT1Eux4wlgRUzr8lX/tv63QXcJIGTh8EleN60L8+qJdmLk+CLkXiFjGYcQmqlyDh8wFdAtrpVsy12KMLfZ70ev8MQ3HXMPXbql6bn/4nQ/SGQo8wTyGJmFnSaYD4zUHaZnwu2EhSwcueWW4xQUDexSk+WBWeUan8HpU79wSK5HM9YOFrMPOdvl0nfR/8sEP8oFmOu+Yv63ndIvY1yH6vNUpYa57etZQR0nw5dY+OM9jYEXLZr2UMw63gbY+KUQKy9wDkIx6xYxxUiQHLokSDGi2amx50wMTEkw2U+WDZa0WMKx8SA3BKPmixAashBWgdgFewyndbaOutW91BBYoHYScThNEJP/8346OgtTzliWI544S0gF3syQEzHDmfsQuA0Lrlke4A38bz5bgKENQd5gIHW+yniK505ZbnkWygBRsV9Kw1snEJQIigW2EMCRCImUQpUzRmI0IcC/BpEFRQNNwBAanygJWcRDLAQcVAN94x2ntZ+VxGzwIQKlkM0KCYgJU3NuSPpYIcaiqaVDWradGqLUtOWXPOlr35NRNLppbNrFi1VqSkoiUXKyWUWlrlKmiOWnO1WmqtrUFpg+SGtxs2tNa5S09de+7WS6+9HUifIx165MOOEo56tMFDBvrEyMNGGXW0SROpNNPUmafNMutsC6m2ZKWlKy9bZdXV7qhR2GVHL+PnqNENNd5I+Ua7o4ZXzW4iyNuJOmZAjBMBcXMEkNDsmMVCKXFw6BwzZByqQhlWqoMzyBEDgmkS66I7dv8g9wW3kNK/wo1vyAWH7r9ALjh0H5B7xe0NasNPmyNK2Ah5GXpQo6D8slJS0pUyzmBnk/op9Q0NqfWR4ZcajEJGfNiIIDqD0mtc8Huh4fWB6uweeFeANvvhRZxgztQStwMJCXkyD1R6XgQpXTlOII1jdfQJV8eyZnvPudAIzbvmgjBxcPHOPNEyN5M/B+XUAmBrtASLyosM/g3ZUq0P6VFGgOWEcwK9JlpTZO/EdwhWUpEW/SAfP9Jyd+1F3akLadjHrBD7najwS090tFxwA5ualOcQRNy/Qm7iG7pv31rCz+LzPf2/Cco5oDB7ynuuXgJkRkub7Dl5DtPRUkUiip7hf5PCoOF54Q319HDmuBtgvHP8UXT4pYifi9aATEdxWYQj3j/wzTNxhLi3Ph/bt9WL94aB5rjrorzpAeFntf3GtjP1y2z4kMLZED42mN+UHR6FVyDWcDQhpzOAdDDT7ki19oKaw3mB//OtpvAjN54pt50buwUiquMD/K+YfEurBofj0rB9ertx4bRAtoS/AceHGj2Vzz6UAAABhWlDQ1BJQ0MgcHJvZmlsZQAAeJx9kT1Iw0AcxV9TtSIVByuIOGSoThZERQQXqWIRLJS2QqsOJpd+QZOGJMXFUXAtOPixWHVwcdbVwVUQBD9AHJ2cFF2kxP8lhRYxHhz34929x907QKiXmWp2jAOqZhnJWFTMZFfFwCsEBDCAWXRJzNTjqcU0PMfXPXx8vYvwLO9zf45eJWcywCcSzzHdsIg3iKc3LZ3zPnGIFSWF+Jx4zKALEj9yXXb5jXPBYYFnhox0cp44RCwW2lhuY1Y0VOIp4rCiapQvZFxWOG9xVstV1rwnf2Ewp62kuE5zGDEsIY4ERMioooQyLERo1UgxkaT9qId/yPEnyCWTqwRGjgVUoEJy/OB/8LtbMz854SYFo0Dni21/jACBXaBRs+3vY9tunAD+Z+BKa/krdWDmk/RaSwsfAX3bwMV1S5P3gMsdYPBJlwzJkfw0hXweeD+jb8oC/bdAz5rbW3Mfpw9AmrpavgEODoHRAmWve7y7u723f880+/sBfKVyq9JFJD0AAA0YaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA0LjQuMC1FeGl2MiI+CiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICB4bWxuczpHSU1QPSJodHRwOi8vd3d3LmdpbXAub3JnL3htcC8iCiAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgeG1wTU06RG9jdW1lbnRJRD0iZ2ltcDpkb2NpZDpnaW1wOjk2N2IxNTgzLWYyOWUtNDY2ZS04Yjc4LWJjZGFjZDFkNWZkNCIKICAgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo5MzBjOGE4NS02OTVkLTRmZTYtOGVmZC0xOTFlMzIzNzRmYTAiCiAgIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo3ODQyMjBkOC0wZTAyLTQ5ZDUtYjVmYS0zNzZiZWViYTNlYTEiCiAgIGRjOkZvcm1hdD0iaW1hZ2UvcG5nIgogICBHSU1QOkFQST0iMi4wIgogICBHSU1QOlBsYXRmb3JtPSJXaW5kb3dzIgogICBHSU1QOlRpbWVTdGFtcD0iMTY0NDM0NTU2MTU2MTg1NSIKICAgR0lNUDpWZXJzaW9uPSIyLjEwLjI0IgogICB0aWZmOk9yaWVudGF0aW9uPSIxIgogICB4bXA6Q3JlYXRvclRvb2w9IkdJTVAgMi4xMCI+CiAgIDx4bXBNTTpIaXN0b3J5PgogICAgPHJkZjpTZXE+CiAgICAgPHJkZjpsaQogICAgICBzdEV2dDphY3Rpb249InNhdmVkIgogICAgICBzdEV2dDpjaGFuZ2VkPSIvIgogICAgICBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjhmMDUxYzAzLTBlNmItNDgwYy1iYjMzLTljMzc0OTY1YjM3MCIKICAgICAgc3RFdnQ6c29mdHdhcmVBZ2VudD0iR2ltcCAyLjEwIChXaW5kb3dzKSIKICAgICAgc3RFdnQ6d2hlbj0iMjAyMi0wMi0wOFQxOTozOToyMSIvPgogICAgPC9yZGY6U2VxPgogICA8L3htcE1NOkhpc3Rvcnk+CiAgPC9yZGY6RGVzY3JpcHRpb24+CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz6o2UKgAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAB3RJTUUH5gIIEicVGwcIIAAAAChJREFUCNdjYEACoV1H/jMicxgYGBgYkTkMDAwMjMgc7CrQzWBAtwUAMwgSdDGUjZQAAAAASUVORK5CYII"},{ name : "haxeui-core/styles/default/checkboxes.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogQ0hFQ0tCT1gNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQouY2hlY2tib3ggew0KICAgIHdpZHRoOiBhdXRvOw0KICAgIGhlaWdodDogYXV0bzsNCiAgICBob3Jpem9udGFsLXNwYWNpbmc6IDRweDsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgY29sb3I6ICRub3JtYWwtdGV4dC1jb2xvcjsNCn0NCg0KLmNoZWNrYm94OmhvdmVyIHsNCn0NCg0KLmNoZWNrYm94OmRpc2FibGVkIHsNCiAgICBjdXJzb3I6IGRlZmF1bHQ7DQogICAgY29sb3I6ICRkaXNhYmxlZC10ZXh0LWNvbG9yOw0KICAgIGJvcmRlci1jb2xvcjogJGRpc2FibGVkLWJvcmRlci1jb2xvcjsNCn0NCg0KLmNoZWNrYm94LXZhbHVlIHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAkbm9ybWFsLWJvcmRlci1jb2xvcjsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkdGVydGlhcnktYmFja2dyb3VuZC1jb2xvcjsNCiAgICB3aWR0aDogMThweDsNCiAgICBoZWlnaHQ6IDE4cHg7DQogICAgdmVydGljYWwtYWxpZ246IHRvcDsNCiAgICBib3JkZXItcmFkaXVzOiAycHg7DQogICAgaWNvbjogbm9uZTsNCiAgICBmaWx0ZXI6ICRub3JtYWwtaW5uZXItc2hhZG93Ow0KICAgIGN1cnNvcjogcG9pbnRlcjsNCn0NCg0KLmNoZWNrYm94LXZhbHVlOmhvdmVyIHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAkYWNjZW50LWNvbG9yOw0KfQ0KDQouY2hlY2tib3gtdmFsdWU6YWN0aXZlIHsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAkYWNjZW50LWNvbG9yOw0KfQ0KDQouY2hlY2tib3gtdmFsdWU6c2VsZWN0ZWQgew0KICAgIGljb246ICRjaGVjay1zZWxlY3RlZDsNCn0NCg0KLmNoZWNrYm94LXZhbHVlOmRpc2FibGVkIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc29saWQtYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZDsNCiAgICBib3JkZXItY29sb3I6ICRkaXNhYmxlZC1ib3JkZXItY29sb3I7DQogICAgY3Vyc29yOiBkZWZhdWx0Ow0KfQ0KDQouY2hlY2tib3gtbGFiZWwgew0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQouY2hlY2tib3gtaWNvbiB7DQogICAgaG9yaXpvbnRhbC1hbGlnbjogY2VudGVyOw0KICAgIHZlcnRpY2FsLWFsaWduOiBjZW50ZXI7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KICAgIG9wYWNpdHk6IDE7DQp9DQoNCi5jaGVja2JveC1pY29uOmRpc2FibGVkIHsNCiAgICBjdXJzb3I6IGRlZmF1bHQ7DQogICAgb3BhY2l0eTogMC41Ow0KfQ0K"},{ name : "haxeui-core/styles/default/scrollbars.css", data : "LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogU0NST0xMDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLnNjcm9sbCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogbm9uZTsNCiAgICBwYWRkaW5nOiAwcHg7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNjcm9sbGJhci1iYWNrZ3JvdW5kLWNvbG9yOw0KfQ0KDQouc2Nyb2xsIC5idXR0b24gew0KICAgIHdpZHRoOiA3cHg7DQogICAgaGVpZ2h0OiA3cHg7DQogICAgYmFja2dyb3VuZC1jb2xvcjogJHNjcm9sbGJhci1idXR0b24tY29sb3I7DQogICAgYm9yZGVyLXJhZGl1czogMDsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgZmlsdGVyOiBub25lOw0KICAgIG9wYWNpdHk6IDAuNjsNCn0NCg0KLnNjcm9sbCAuYnV0dG9uOmhvdmVyIHsNCiAgICBvcGFjaXR5OiAxOw0KfQ0KDQouc2Nyb2xsOmRpc2FibGVkIC5idXR0b24gew0KICAgIG9wYWNpdHk6IC4zOw0KfQ0KDQoudmVydGljYWwtc2Nyb2xsIHsNCiAgICB3aWR0aDogOHB4Ow0KICAgIHBhZGRpbmctbGVmdDogMXB4Ow0KICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQp9DQoNCi5ob3Jpem9udGFsLXNjcm9sbCB7DQogICAgaGVpZ2h0OiA4cHg7DQogICAgcGFkZGluZy10b3A6IDFweDsNCiAgICBib3JkZXItdG9wOiAxcHggc29saWQgJG5vcm1hbC1ib3JkZXItY29sb3I7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIEJPUkRFUkxFU1MgVkFSSUFOVFMNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQouc2Nyb2xsdmlldy5ib3JkZXJsZXNzID4gLnNjcm9sbCAuYnV0dG9uLCAudGV4dGFyZWEuYm9yZGVybGVzcyA+IC5zY3JvbGwgLmJ1dHRvbiB7DQogICAgd2lkdGg6IDhweDsNCiAgICBoZWlnaHQ6IDhweDsNCn0NCg0KLnNjcm9sbHZpZXcuYm9yZGVybGVzcyA+IC52ZXJ0aWNhbC1zY3JvbGwsIC50ZXh0YXJlYS5ib3JkZXJsZXNzID4gLnZlcnRpY2FsLXNjcm9sbCB7DQogICAgcGFkZGluZy1sZWZ0OiAwcHg7DQogICAgYm9yZGVyLWxlZnQ6IG5vbmU7DQp9DQoNCi5zY3JvbGx2aWV3LmJvcmRlcmxlc3MgPiAuaG9yaXpvbnRhbC1zY3JvbGwsIC50ZXh0YXJlYS5ib3JkZXJsZXNzID4gLmhvcml6b250YWwtc2Nyb2xsIHsNCiAgICBwYWRkaW5nLXRvcDogMHB4Ow0KICAgIGJvcmRlci10b3A6IG5vbmU7DQp9DQoNCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCioqIENMQVNTSUMgVkFSSUFOVFMNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQouY2xhc3NpYy1zY3JvbGxzIC5zY3JvbGwsDQouc2Nyb2xsLmNsYXNzaWMtc2Nyb2xscyB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0U5RTlFOTsNCiAgICBib3JkZXI6bm9uZTsNCiAgICBwYWRkaW5nOiAwOw0KfQ0KDQouY2xhc3NpYy1zY3JvbGxzIC5zY3JvbGwgLmJ1dHRvbiwNCi5zY3JvbGwuY2xhc3NpYy1zY3JvbGxzIC5idXR0b257DQogICAgYm9yZGVyLXJhZGl1czogMDsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0U5RTlFOTsNCiAgICBwYWRkaW5nOiAwOw0KICAgIGZpbHRlcjogbm9uZTsNCiAgICBoaWRkZW46IGZhbHNlOw0KICAgIHdpZHRoOiAxN3B4Ow0KICAgIGhlaWdodDogMTdweDsNCiAgICBvcGFjaXR5OiAxOw0KfQ0KDQouY2xhc3NpYy1zY3JvbGxzIC5zY3JvbGwgLmJ1dHRvbjpob3ZlciwNCi5zY3JvbGwuY2xhc3NpYy1zY3JvbGxzIC5idXR0b246aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNEN0Q3RDc7DQp9DQoNCi5jbGFzc2ljLXNjcm9sbHMgLnNjcm9sbCAuYnV0dG9uOmRvd24sDQouc2Nyb2xsLmNsYXNzaWMtc2Nyb2xscyAuYnV0dG9uOmRvd24gew0KICAgIGJhY2tncm91bmQtY29sb3I6ICM1MjUyNTI7DQogICAgZmlsdGVyOiBub25lOw0KfQ0KDQouY2xhc3NpYy1zY3JvbGxzIC5zY3JvbGwgLnRodW1iLA0KLnNjcm9sbC5jbGFzc2ljLXNjcm9sbHMgLnRodW1iIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQzZDNkM2Ow0KfQ0KDQouY2xhc3NpYy1zY3JvbGxzIC5zY3JvbGwgLnRodW1iOmhvdmVyLA0KLnNjcm9sbC5jbGFzc2ljLXNjcm9sbHMgLnRodW1iOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQUFBQUFBOw0KfQ0KDQouY2xhc3NpYy1zY3JvbGxzIC5zY3JvbGwgLnRodW1iOmRvd24sDQouc2Nyb2xsLmNsYXNzaWMtc2Nyb2xscyAudGh1bWI6ZG93biB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogIzUyNTI1MjsNCn0NCg0KLmNsYXNzaWMtc2Nyb2xscyAuc2Nyb2xsIC50aHVtYjpkaXNhYmxlZCwNCi5zY3JvbGwuY2xhc3NpYy1zY3JvbGxzIC50aHVtYjpkaXNhYmxlZCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0RERERERDsNCn0NCg0KLmNsYXNzaWMtc2Nyb2xscyAudmVydGljYWwtc2Nyb2xsLA0KLnZlcnRpY2FsLXNjcm9sbC5jbGFzc2ljLXNjcm9sbHMgew0KICAgIHdpZHRoOiAxN3B4Ow0KfQ0KDQouY2xhc3NpYy1zY3JvbGxzIC52ZXJ0aWNhbC1zY3JvbGwgLmRlaW5jLA0KLnZlcnRpY2FsLXNjcm9sbC5jbGFzc2ljLXNjcm9sbHMgLmRlaW5jIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL3NoYXJlZC91cC1hcnJvdy1kYXJrLnBuZyI7DQp9DQoNCi5jbGFzc2ljLXNjcm9sbHMgLnZlcnRpY2FsLXNjcm9sbCAuZGVpbmM6ZG93biwNCi52ZXJ0aWNhbC1zY3JvbGwuY2xhc3NpYy1zY3JvbGxzIC5kZWluYzpkb3duIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL3NoYXJlZC91cC1hcnJvdy1icmlnaHQucG5nIjsNCn0NCg0KLmNsYXNzaWMtc2Nyb2xscyAudmVydGljYWwtc2Nyb2xsIC5pbmMsDQoudmVydGljYWwtc2Nyb2xsLmNsYXNzaWMtc2Nyb2xscyAuaW5jIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL3NoYXJlZC9kb3duLWFycm93LWRhcmsucG5nIjsNCn0NCg0KLmNsYXNzaWMtc2Nyb2xscyAudmVydGljYWwtc2Nyb2xsIC5pbmM6ZG93biwNCi52ZXJ0aWNhbC1zY3JvbGwuY2xhc3NpYy1zY3JvbGxzIC5pbmM6ZG93biB7DQogICAgaWNvbjogImhheGV1aS1jb3JlL3N0eWxlcy9zaGFyZWQvZG93bi1hcnJvdy1icmlnaHQucG5nIjsNCn0NCg0KLmNsYXNzaWMtc2Nyb2xscyAuaG9yaXpvbnRhbC1zY3JvbGwsDQouaG9yaXpvbnRhbC1zY3JvbGwuY2xhc3NpYy1zY3JvbGxzIHsNCiAgICBoZWlnaHQ6IDE3cHg7DQp9DQoNCi5jbGFzc2ljLXNjcm9sbHMgLmhvcml6b250YWwtc2Nyb2xsIC5kZWluYywNCi5ob3Jpem9udGFsLXNjcm9sbC5jbGFzc2ljLXNjcm9sbHMgLmRlaW5jIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL3NoYXJlZC9sZWZ0LWFycm93LWRhcmsucG5nIjsNCn0NCg0KLmNsYXNzaWMtc2Nyb2xscyAuaG9yaXpvbnRhbC1zY3JvbGwgLmRlaW5jOmRvd24sDQouaG9yaXpvbnRhbC1zY3JvbGwuY2xhc3NpYy1zY3JvbGxzIC5kZWluYzpkb3duIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL3NoYXJlZC9sZWZ0LWFycm93LWJyaWdodC5wbmciOw0KfQ0KDQouY2xhc3NpYy1zY3JvbGxzIC5ob3Jpem9udGFsLXNjcm9sbCAuaW5jLA0KLmhvcml6b250YWwtc2Nyb2xsLmNsYXNzaWMtc2Nyb2xscyAuaW5jIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL3NoYXJlZC9yaWdodC1hcnJvdy1kYXJrLnBuZyI7DQp9DQoNCi5jbGFzc2ljLXNjcm9sbHMgLmhvcml6b250YWwtc2Nyb2xsIC5pbmM6ZG93biwNCi5ob3Jpem9udGFsLXNjcm9sbC5jbGFzc2ljLXNjcm9sbHMgLmluYzpkb3duIHsNCiAgICBpY29uOiAiaGF4ZXVpLWNvcmUvc3R5bGVzL3NoYXJlZC9yaWdodC1hcnJvdy1icmlnaHQucG5nIjsNCn0NCg0KLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKiogTU9CSUxFIFZBUklBTlRTDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLnNjcm9sbDptb2JpbGUgLmluYywgLnNjcm9sbDptb2JpbGUgLmRlaW5jIHsNCiAgICBoaWRkZW46IHRydWU7DQp9DQoNCi5ob3Jpem9udGFsLXNjcm9sbDptb2JpbGUgew0KICAgIG9wYWNpdHk6IC41Ow0KICAgIGhlaWdodDogOHB4Ow0KICAgIHBhZGRpbmc6IDJweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBub25lOw0KICAgIGJvcmRlcjogbm9uZTsNCn0NCg0KLmhvcml6b250YWwtc2Nyb2xsOm1vYmlsZSAudGh1bWIgew0KICAgIGhlaWdodDogNHB4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDRweDsNCn0NCg0KLnZlcnRpY2FsLXNjcm9sbDptb2JpbGUgew0KICAgIG9wYWNpdHk6IC41Ow0KICAgIHdpZHRoOiA4cHg7DQogICAgcGFkZGluZzogMnB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6IG5vbmU7DQogICAgYm9yZGVyOiBub25lOw0KfQ0KDQoudmVydGljYWwtc2Nyb2xsOm1vYmlsZSAudGh1bWIgew0KICAgIHdpZHRoOiA0cHg7DQogICAgYm9yZGVyLXJhZGl1czogNHB4Ow0KfQ0K"},{ name : "haxeui-core/styles/shared/expanded-dark.png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAA3XAAAN1wFCKJt4AAAAB3RJTUUH5AoNCwkgHyJHKAAAAJBJREFUOMtjYBgFAw8YkTlrt2xRYv77/+h/BgYJHOpf///LZBMU5H0LJsCELBvs43OPkeGfOwMDw0csmj8z/GP0RNaMYQADAwODv7//JSYGxkAGBoafSMK/Gf8zhgYG+pxFV8+EzZ3+/j77/zMwJjAwMPxjYGD4/5+BMTUgwGcnyQG0fuOW4vUbtxSPJhUaAwCz8idCJS/GkgAAAABJRU5ErkJggg"}];
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
haxe_ui_core_ComponentEvents.INTERACTIVE_EVENTS = ["mousemove","mouseover","mouseout","mousedown","mouseup","mousewheel","click","doubleclick","keydown","keyup"];
haxe_ui_core_ComponentBounds.__meta__ = { fields : { percentWidth : { clonable : null, bindable : null}, percentHeight : { clonable : null, bindable : null}, width : { bindable : null}, height : { bindable : null}}};
haxe_ui_backend_ComponentImpl.elementToComponent = new haxe_ds_ObjectMap();
haxe_ui_backend_ComponentImpl._stylesAdded = false;
haxe_ui_core_Component.__meta__ = { fields : { styleNames : { clonable : null}, styleString : { clonable : null}}};
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
DateTools.DAYS_OF_MONTH = [31,28,31,30,31,30,31,31,30,31,30,31];
EReg.escapeRe = new RegExp("[.*+?^${}()|[\\]\\\\]","g");
haxe_SysTools.winMetaCharacters = [32,40,41,37,33,94,34,60,62,38,124,10,13,44,59];
StringTools.winMetaCharacters = haxe_SysTools.winMetaCharacters;
StringTools.MIN_SURROGATE_CODE_POINT = 65536;
filters_FilterView.FILTERS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["grayscale"] = "Grayscale";
	_g.h["sharpen"] = "Sharpen";
	_g.h["deepfry"] = "Deep Fry";
	_g.h["combine"] = "Combine";
	_g.h["invert"] = "Invert";
	_g.h["blackAndWhite"] = "BlackAndWhite";
	_g.h["contrast"] = "Contrast";
	_g.h["dilate"] = "Dilate";
	_g.h["erode"] = "Erode";
	_g.h["saltAndPepperNoise"] = "SaltAndPepperNoise";
	_g.h["dropOutNoise"] = "DropOutNoise";
	_g.h["whiteNoise"] = "WhiteNoise";
	_g.h["normalize"] = "Normalize";
	_g.h["limitColorRanges"] = "LimitColorRanges";
	_g.h["replaceColorRanges"] = "ReplaceColorRanges";
	_g.h["convolve"] = "Convolve";
	_g.h["nearestNeighborBlur"] = "NearestNeighborBlur";
	_g.h["gaussianBlur"] = "GaussianBlur";
	_g.h["medianBlur"] = "MedianBlur";
	_g.h["simpleLine2DDetection"] = "SimpleLine2DDetection";
	_g.h["sobelEdgeDiffOperator"] = "SobelEdgeDiffOperator";
	_g.h["perwittEdgeDiffOperator"] = "PerwittEdgeDiffOperator";
	_g.h["robertEdgeDiffOperator"] = "RobertEdgeDiffOperator";
	_g.h["laplacianEdgeDiffOperator"] = "LaplacianEdgeDiffOperator";
	_g.h["cannyEdgeDetection"] = "CannyEdgeDetection";
	_g.h["sobelEdgeDetection"] = "SobelEdgeDetection";
	_g.h["perwittEdgeDetection"] = "PerwittEdgeDetection";
	_g.h["laplacianOfGaussianEdgeDetection"] = "LaplacianOfGaussianEdgeDetection";
	_g.h["convolutionRidgeDetection"] = "ConvolutionRidgeDetection";
	_g.h["bilateralDenoise"] = "BilateralDenoise";
	$r = _g;
	return $r;
}(this));
haxe_Int32._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.CODES = null;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_crypto_Base64.URL_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
haxe_crypto_Base64.URL_BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.URL_CHARS);
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe_io_FPHelper.LN2 = 0.6931471805599453;
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_ui_backend_BackendImpl.id = "html5";
haxe_ui_util_GenericConfig.cache = new haxe_ds_StringMap();
haxe_ui_Toolkit.styleSheet = new haxe_ui_styles_CompositeStyleSheet();
haxe_ui_Toolkit.properties = new haxe_ds_StringMap();
haxe_ui_Toolkit.nativeConfig = new haxe_ui_util_GenericConfig();
haxe_ui_Toolkit._theme = "default";
haxe_ui_Toolkit._backendProperties = new haxe_ui_util_Properties();
haxe_ui_Toolkit._built = false;
haxe_ui_Toolkit._backendBuilt = false;
haxe_ui_Toolkit._initialized = false;
haxe_ui_Toolkit.pixelsPerRem = 16;
haxe_ui_Toolkit.roundScale = true;
haxe_ui_Toolkit.autoScale = true;
haxe_ui_Toolkit._scaleX = 0;
haxe_ui_Toolkit._scaleY = 0;
haxe_ui_backend_PlatformBase.KEY_CODE_TAB = 9;
haxe_ui_backend_PlatformBase.KEY_CODE_UP = 38;
haxe_ui_backend_PlatformBase.KEY_CODE_DOWN = 40;
haxe_ui_backend_PlatformBase.KEY_CODE_LEFT = 37;
haxe_ui_backend_PlatformBase.KEY_CODE_RIGHT = 39;
haxe_ui_backend_PlatformBase.KEY_CODE_SPACE = 32;
haxe_ui_backend_PlatformBase.KEY_CODE_ENTER = 13;
haxe_ui_backend_PlatformBase.KEY_CODE_ESCAPE = 27;
haxe_ui_backend_PlatformBase.MOBILE_REGEXP = new EReg("(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino","gi");
haxe_ui_backend_PlatformImpl._vscrollWidth = -1;
haxe_ui_backend_PlatformImpl._hscrollHeight = -1;
haxe_ui_backend_html5_EventMapper.HAXEUI_TO_DOM = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["mousemove"] = "mousemove";
	_g.h["mouseover"] = "mouseover";
	_g.h["mouseout"] = "mouseout";
	_g.h["mousedown"] = "mousedown";
	_g.h["mouseup"] = "mouseup";
	_g.h["click"] = "click";
	_g.h["doubleclick"] = "dblclick";
	_g.h["rightmousedown"] = "mousedown";
	_g.h["rightmouseup"] = "mouseup";
	_g.h["rightclick"] = "contextmenu";
	_g.h["change"] = "change";
	_g.h["keydown"] = "keydown";
	_g.h["keyup"] = "keyup";
	_g.h["scrollchange"] = "scroll";
	$r = _g;
	return $r;
}(this));
haxe_ui_backend_html5_EventMapper.DOM_TO_HAXEUI = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["mousemove"] = "mousemove";
	_g.h["mouseover"] = "mouseover";
	_g.h["mouseout"] = "mouseout";
	_g.h["mousedown"] = "mousedown";
	_g.h["mouseup"] = "mouseup";
	_g.h["touchmove"] = "mousemove";
	_g.h["touchstart"] = "mousedown";
	_g.h["touchend"] = "mouseup";
	_g.h["click"] = "click";
	_g.h["contextmenu"] = "rightclick";
	_g.h["dblclick"] = "doubleclick";
	_g.h["change"] = "change";
	_g.h["keydown"] = "keydown";
	_g.h["keyup"] = "keyup";
	_g.h["scroll"] = "scrollchange";
	$r = _g;
	return $r;
}(this));
haxe_ui_backend_html5_EventMapper.MOUSE_TO_TOUCH = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["mousemove"] = "touchmove";
	_g.h["mousedown"] = "touchstart";
	_g.h["mouseup"] = "touchend";
	$r = _g;
	return $r;
}(this));
haxe_ui_backend_html5_EventMapper.TOUCH_TO_MOUSE = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["touchmove"] = "mousemove";
	_g.h["touchstart"] = "mouseout";
	_g.h["touchend"] = "mousedown";
	$r = _g;
	return $r;
}(this));
haxe_ui_backend_html5_HtmlUtils._divHelpers = new haxe_ds_ObjectMap();
haxe_ui_backend_html5_HtmlUtils._divHelpersId = new haxe_ds_StringMap();
haxe_ui_backend_html5_HtmlUtils._dpi = 0;
haxe_ui_backend_html5_HtmlUtils._isRetina = null;
haxe_ui_backend_html5_util_FontDetect._initialized = false;
haxe_ui_backend_html5_util_FontDetect.span = null;
haxe_ui_backend_html5_util_FontDetect._aFallbackFonts = ["serif","sans-serif","monospace","cursive","fantasy"];
haxe_ui_backend_html5_util_StyleSheetHelper._sheet = null;
haxe_ui_events_UIEvent.READY = "ready";
haxe_ui_events_UIEvent.DESTROY = "destroy";
haxe_ui_events_UIEvent.RESIZE = "resize";
haxe_ui_events_UIEvent.CHANGE = "change";
haxe_ui_events_UIEvent.BEFORE_CHANGE = "beforechange";
haxe_ui_events_UIEvent.MOVE = "move";
haxe_ui_events_UIEvent.INITIALIZE = "initialize";
haxe_ui_events_UIEvent.RENDERER_CREATED = "renderercreated";
haxe_ui_events_UIEvent.RENDERER_DESTROYED = "rendererdestroyed";
haxe_ui_events_UIEvent.HIDDEN = "hidden";
haxe_ui_events_UIEvent.SHOWN = "shown";
haxe_ui_events_UIEvent.ENABLED = "enabled";
haxe_ui_events_UIEvent.DISABLED = "disabled";
haxe_ui_events_UIEvent.BEFORE_CLOSE = "beforeclose";
haxe_ui_events_UIEvent.CLOSE = "close";
haxe_ui_events_UIEvent.PROPERTY_CHANGE = "propertychange";
haxe_ui_events_UIEvent.COMPONENT_ADDED = "componentadded";
haxe_ui_events_UIEvent.COMPONENT_REMOVED = "componentremoved";
haxe_ui_components_CalendarEvent.DATE_CHANGE = "datechange";
haxe_ui_components_DropDownBuilder.HANDLER_MAP = new haxe_ds_StringMap();
haxe_ui_containers_CalendarView.MONTH_NAMES = ["January","Febuary","March","April","May","June","July","August","September","October","November","December"];
haxe_ui_containers_CalendarView.DATE_FORMAT = "%Y-%m-%d";
haxe_ui_containers_ScrollViewEvents.INERTIAL_TIME_CONSTANT = 325;
haxe_ui_core_ItemRenderer.__meta__ = { fields : { allowHover : { clonable : null}}};
haxe_ui_core_Platform.METRIC_VSCROLL_WIDTH = "patform.metrics.vscroll.width";
haxe_ui_core_Platform.METRIC_HSCROLL_HEIGHT = "patform.metrics.hscroll.height";
haxe_ui_events_ActionEvent.ACTION_START = "actionstart";
haxe_ui_events_ActionEvent.ACTION_END = "actionend";
haxe_ui_events_AnimationEvent.START = "animationstart";
haxe_ui_events_AnimationEvent.END = "animationend";
haxe_ui_events_AnimationEvent.FRAME = "animationframe";
haxe_ui_events_DragEvent.DRAG_START = "dragstart";
haxe_ui_events_DragEvent.DRAG = "drag";
haxe_ui_events_DragEvent.DRAG_END = "dragend";
haxe_ui_events_FocusEvent.FOCUS_IN = "focusin";
haxe_ui_events_FocusEvent.FOCUS_OUT = "focusout";
haxe_ui_events_ItemEvent.COMPONENT_EVENT = "itemcomponentevent";
haxe_ui_events_KeyboardEvent.KEY_DOWN = "keydown";
haxe_ui_events_KeyboardEvent.KEY_PRESS = "keypress";
haxe_ui_events_KeyboardEvent.KEY_UP = "keyup";
haxe_ui_events_MouseEvent.MOUSE_MOVE = "mousemove";
haxe_ui_events_MouseEvent.MOUSE_OVER = "mouseover";
haxe_ui_events_MouseEvent.MOUSE_OUT = "mouseout";
haxe_ui_events_MouseEvent.MOUSE_DOWN = "mousedown";
haxe_ui_events_MouseEvent.MOUSE_UP = "mouseup";
haxe_ui_events_MouseEvent.MOUSE_WHEEL = "mousewheel";
haxe_ui_events_MouseEvent.CLICK = "click";
haxe_ui_events_MouseEvent.DBL_CLICK = "doubleclick";
haxe_ui_events_MouseEvent.RIGHT_CLICK = "rightclick";
haxe_ui_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightmousedown";
haxe_ui_events_MouseEvent.RIGHT_MOUSE_UP = "rightmouseup";
haxe_ui_events_ScrollEvent.CHANGE = "scrollchange";
haxe_ui_events_ScrollEvent.START = "scrollstart";
haxe_ui_events_ScrollEvent.STOP = "scrollstop";
haxe_ui_events_ScrollEvent.SCROLL = "scrollscroll";
haxe_ui_events_ThemeEvent.THEME_CHANGED = "themechanged";
haxe_ui_events_ValidationEvent.START = "validationstart";
haxe_ui_events_ValidationEvent.STOP = "validationstop";
haxe_ui_locale_Formats._dateFormatShort = null;
haxe_ui_locale_Formats._decimalSeperator = null;
haxe_ui_locale_LocaleEvent.LOCALE_CHANGED = "localeChanged";
haxe_ui_locale_LocaleManager._registeredComponents = new haxe_ds_ObjectMap();
haxe_ui_styles_Parser.cssKeyframesRegex = new EReg("@keyframes\\s*(\\w+?)\\s*\\{([\\s\\S]*?\\}\\s*?)\\}","gi");
haxe_ui_styles_Parser.cssKeyframeSelectorRegex = new EReg("([\\w%]+)\\s*\\{\\s*([\\s\\S]*?)\\s*\\}","gi");
haxe_ui_styles_Parser.combinedCSSMediaRegex = new EReg("((\\s*?(?:/\\*[\\s\\S]*?\\*/)?\\s*?@media[\\s\\S]*?)\\{([\\s\\S]*?)\\}\\s*?\\})|(([\\s\\S]*?)\\{([\\s\\S]*?)\\})","gi");
haxe_ui_styles_Parser.cssCommentsRegex = new EReg("(/\\*[\\s\\S]*?\\*/)","gi");
haxe_ui_styles_Parser.cssImportStatementRegex = new EReg("@import .*?;","gi");
haxe_ui_styles_Parser.newlineRegex = new EReg("\n+","g");
haxe_ui_styles_ValueTools.timeEReg = new EReg("^(-?\\d+(?:\\.\\d+)?)(s|ms)$","gi");
haxe_ui_styles_ValueTools.colors = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["black"] = 0;
	_g.h["red"] = 16711680;
	_g.h["lime"] = 65280;
	_g.h["blue"] = 255;
	_g.h["white"] = 16777215;
	_g.h["aqua"] = 65535;
	_g.h["fuchsia"] = 16711935;
	_g.h["yellow"] = 16776960;
	_g.h["maroon"] = 8388608;
	_g.h["green"] = 32768;
	_g.h["navy"] = 128;
	_g.h["olive"] = 8421376;
	_g.h["purple"] = 8388736;
	_g.h["teal"] = 32896;
	_g.h["silver"] = 12632256;
	_g.h["gray"] = 8421504;
	_g.h["grey"] = 8421504;
	$r = _g;
	return $r;
}(this));
haxe_ui_styles_animation_AnimationOptions.DEFAULT_DURATION = 0;
haxe_ui_styles_animation_AnimationOptions.DEFAULT_DELAY = 0;
haxe_ui_styles_animation_AnimationOptions.DEFAULT_ITERATION_COUNT = 1;
haxe_ui_styles_animation_AnimationOptions.DEFAULT_EASING_FUNCTION = haxe_ui_styles_EasingFunction.EASE;
haxe_ui_styles_animation_AnimationOptions.DEFAULT_DIRECTION = "normal";
haxe_ui_styles_animation_AnimationOptions.DEFAULT_FILL_MODE = "forwards";
haxe_ui_themes_Theme.DEFAULT = "default";
haxe_ui_themes_Theme.DARK = "dark";
haxe_ui_tooltips_ToolTipManager.defaultDelay = 500;
haxe_ui_tooltips_ToolTipManager.defaultRenderer = null;
haxe_ui_tooltips_ToolTipManager.fade = true;
haxe_ui_util_Defines._map = null;
haxe_ui_util_MathUtil.MAX_INT = 2147483647;
haxe_ui_util_MathUtil.MIN_INT = -2147483648;
haxe_ui_util_RTTI.classInfo = null;
haxe_ui_util_StyleUtil.style2ComponentEReg = new EReg("-(\\w)","g");
haxe_ui_util_StyleUtil.component2StyleEReg = new EReg("([A-Z])","g");
vision_ds_Color.TRANSPARENT = 0;
vision_ds_Color.WHITE = -1;
vision_ds_Color.GRAY = -8355712;
vision_ds_Color.BLACK = -16777216;
vision_ds_Color.GREEN = -16711936;
vision_ds_Color.YELLOW = -256;
vision_ds_Color.ORANGE = -23296;
vision_ds_Color.RED = -65536;
vision_ds_Color.PURPLE = -8388480;
vision_ds_Color.BLUE = -16776961;
vision_ds_Color.BROWN = -7650029;
vision_ds_Color.PINK = -16181;
vision_ds_Color.MAGENTA = -65281;
vision_ds_Color.CYAN = -16711681;
vision_ds_Color.SILVER = 12632256;
vision_ds_Color.GOLD = -10496;
vision_ds_Color.OLIVE = -8355840;
vision_ds_Color.MAROON = -8388608;
vision_ds_Color.NAVY = -16777088;
vision_ds_Color.TEAL = -16744320;
vision_ds_Color.FUCHSIA = -65281;
vision_ds_Color.AQUA = -16711681;
vision_ds_Color.LIME = -13447886;
vision_ds_Color.ROYAL_BLUE = -12490271;
vision_ds_Color.COLOR_REGEX = new EReg("^(0x|#)(([A-F0-9]{2}){3,4})$","i");
vision_ds_Image.OFFSET = 11;
vision_ds_Image.WIDTH_BYTES = 2;
vision_ds_Image.VIEW_XY_BYTES = 4;
vision_ds_Image.VIEW_WH_BYTES = 4;
vision_ds_Image.VIEW_SHAPE_BYTES = 1;
vision_ds_Image.DATA_GAP = 2;
vision_tools_ImageTools.defaultResizeAlgorithm = 1;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=Main.js.map