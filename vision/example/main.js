(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	console.log("src/Main.hx:12:","work");
};
Main.change = $hx_exports["change"] = function() {
	var select = window.document.getElementById("select");
	var funName = select.options[select.selectedIndex].innerText;
	console.log("src/Main.hx:20:",funName);
	vision_tools_ImageTools.loadFromFile(null,"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f0/Valve_original_%281%29.PNG/300px-Valve_original_%281%29.PNG",function(image) {
		switch(funName) {
		case "Bilateral Denoise":
			image = vision_Vision.bilateralDenoise(image);
			break;
		case "Black And White":
			image = vision_Vision.blackAndWhite(image);
			break;
		case "Canny Edge Detection":
			image = vision_Vision.cannyEdgeDetection(image);
			break;
		case "Contrast":
			image = vision_Vision.contrast(image);
			break;
		case "Deepfry":
			image = vision_Vision.deepfry(image);
			break;
		case "Detect Lines":
			var lines = vision_Vision.simpleLine2DDetection(vision_ds_Image.clone(image),50,30);
			var newI = vision_ds_Image.clone(image);
			var _g = 0;
			while(_g < lines.length) {
				var l = lines[_g];
				++_g;
				var p = l.start;
				var p1_x = p.x | 0;
				var p1_y = p.y | 0;
				var p1 = l.end;
				var p2_x = p1.x | 0;
				var p2_y = p1.y | 0;
				var x1 = p1_x;
				var y1 = p1_y;
				var x2 = p2_x;
				var y2 = p2_y;
				var dx = Math.abs(x2 - x1);
				var dy = Math.abs(y2 - y1);
				var sx = x1 < x2 ? 1 : -1;
				var sy = y1 < y2 ? 1 : -1;
				var err = dx - dy;
				while(true) {
					if(x1 >= 0 && y1 >= 0 && x1 < newI.getUInt16(0) && y1 < Math.ceil((newI.length - vision_ds_Image.OFFSET) / (newI.getUInt16(0) * 4))) {
						if(!(x1 >= 0 && y1 >= 0 && x1 < newI.getUInt16(0) && y1 < Math.ceil((newI.length - vision_ds_Image.OFFSET) / (newI.getUInt16(0) * 4)))) {
							var this_x = x1;
							var this_y = y1;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(newI,new vision_ds_Point2D(this_x,this_y)));
						} else if(newI.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || newI.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || newI.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != newI.getUInt16(0) || newI.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((newI.length - vision_ds_Image.OFFSET) / (newI.getUInt16(0) * 4)) || newI.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
							var v = null;
							var tmp;
							if(!(newI.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || newI.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || newI.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != newI.getUInt16(0) || newI.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((newI.length - vision_ds_Image.OFFSET) / (newI.getUInt16(0) * 4)) || newI.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
								tmp = x1 >= 0 && y1 >= 0 && x1 < newI.getUInt16(0) && y1 < Math.ceil((newI.length - vision_ds_Image.OFFSET) / (newI.getUInt16(0) * 4));
							} else {
								var has = false;
								var view;
								if(v != null) {
									view = v;
								} else {
									var _g1 = newI.getUInt16(vision_ds_Image.WIDTH_BYTES);
									var _g2 = newI.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
									var _g3 = newI.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
									var newI1 = newI.b;
									var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
									view = new vision_ds_ImageView(_g1,_g2,_g3,newI.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),newI1[view1]);
								}
								switch(view.shape) {
								case 0:
									has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
									break;
								case 1:
									has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
									break;
								case 2:case 3:
									if(view.width > view.height) {
										var a = view.width / 2;
										var b = view.height / 2;
										var c = Math.sqrt(a * a - b * b);
										var x = view.x + view.width / 2 - c;
										var y = view.y + view.height / 2;
										if(y == null) {
											y = 0;
										}
										if(x == null) {
											x = 0;
										}
										var f1_x = x;
										var f1_y = y;
										var x3 = view.x + view.width / 2 + c;
										var y3 = view.y + view.height / 2;
										if(y3 == null) {
											y3 = 0;
										}
										if(x3 == null) {
											x3 = 0;
										}
										var f2_x = x3;
										var f2_y = y3;
										var x4 = x1;
										var y4 = y1;
										if(y4 == null) {
											y4 = 0;
										}
										if(x4 == null) {
											x4 = 0;
										}
										var p_x = x4;
										var p_y = y4;
										var x5 = p_x - f1_x;
										var y5 = p_y - f1_y;
										var x6 = p_x - f2_x;
										var y6 = p_y - f2_y;
										has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
										if(view.shape == 3) {
											has = !has;
										}
									} else if(view.height > view.width) {
										var a1 = view.height / 2;
										var b1 = view.width / 2;
										var c1 = Math.sqrt(a1 * a1 - b1 * b1);
										var x7 = view.x + view.width / 2;
										var y7 = view.y + view.height / 2 - c1;
										if(y7 == null) {
											y7 = 0;
										}
										if(x7 == null) {
											x7 = 0;
										}
										var f1_x1 = x7;
										var f1_y1 = y7;
										var x8 = view.x + view.width / 2;
										var y8 = view.y + view.height / 2 + c1;
										if(y8 == null) {
											y8 = 0;
										}
										if(x8 == null) {
											x8 = 0;
										}
										var f2_x1 = x8;
										var f2_y1 = y8;
										var x9 = x1;
										var y9 = y1;
										if(y9 == null) {
											y9 = 0;
										}
										if(x9 == null) {
											x9 = 0;
										}
										var p_x1 = x9;
										var p_y1 = y9;
										var x10 = p_x1 - f1_x1;
										var y10 = p_y1 - f1_y1;
										var x11 = p_x1 - f2_x1;
										var y11 = p_y1 - f2_y1;
										has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
										if(view.shape == 3) {
											has = !has;
										}
									} else {
										var x12 = x1;
										var y12 = y1;
										if(y12 == null) {
											y12 = 0;
										}
										if(x12 == null) {
											x12 = 0;
										}
										var point1_x = x12;
										var point1_y = y12;
										var x13 = view.x + view.width / 2;
										var y13 = view.y + view.height / 2;
										if(y13 == null) {
											y13 = 0;
										}
										if(x13 == null) {
											x13 = 0;
										}
										var point2_x = x13;
										var point2_y = y13;
										var x14 = point2_x - point1_x;
										var y14 = point2_y - point1_y;
										has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
										if(view.shape == 3) {
											has = !has;
										}
									}
									break;
								case 4:
									has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
									break;
								case 5:
									has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
									break;
								}
								tmp = has;
							}
							if(tmp) {
								var position = (y1 * newI.getUInt16(0) + x1) * 4;
								position += vision_ds_Image.OFFSET;
								newI.b[position] = 0;
								newI.b[position + 1] = 0;
								newI.b[position + 2] = 255;
								newI.b[position + 3] = 213;
							}
						} else {
							var position1 = (y1 * newI.getUInt16(0) + x1) * 4;
							position1 += vision_ds_Image.OFFSET;
							newI.b[position1] = 0;
							newI.b[position1 + 1] = 0;
							newI.b[position1 + 2] = 255;
							newI.b[position1 + 3] = 213;
						}
					}
					if(x1 == x2 && y1 == y2) {
						break;
					}
					var e2 = 2 * err;
					if(e2 > -dy) {
						err -= dy;
						x1 += sx;
					}
					if(e2 < dx) {
						err += dx;
						y1 += sy;
					}
				}
			}
			image = newI;
			break;
		case "Dilate":
			image = vision_Vision.dilate(image);
			break;
		case "Drop Out Noise":
			image = vision_Vision.dropOutNoise(image);
			break;
		case "Erode":
			image = vision_Vision.erode(image);
			break;
		case "Flip":
			var this1 = image;
			var inter = vision_ds_Image.clone(this1);
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
				var _g = 0;
				var _g1 = this1.getUInt16(0);
				while(_g < _g1) {
					var x = _g++;
					var _g2 = 0;
					var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					while(_g2 < _g3) {
						var y = _g2++;
						var position = (y * this1.getUInt16(0) + x) * 4;
						position += vision_ds_Image.OFFSET;
						var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
						if(value == null) {
							value = 0;
						}
						var this2 = value;
						var color = this2;
						var position1 = ((Math.ceil((inter.length - vision_ds_Image.OFFSET) / (inter.getUInt16(0) * 4)) - y - 1) * inter.getUInt16(0) + x) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this3 = value1;
						var color1 = this3;
						var position2 = (y * this1.getUInt16(0) + x) * 4;
						position2 += vision_ds_Image.OFFSET;
						this1.b[position2] = color1 >> 24 & 255;
						this1.b[position2 + 1] = color1 >> 16 & 255;
						this1.b[position2 + 2] = color1 >> 8 & 255;
						this1.b[position2 + 3] = color1 & 255;
					}
				}
			} else {
				var _g = 0;
				var _g1 = this1.getUInt16(0);
				while(_g < _g1) {
					var x = _g++;
					var _g2 = 0;
					var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					while(_g2 < _g3) {
						var y = _g2++;
						var v = null;
						var image1;
						if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
							image1 = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
						} else {
							var has = false;
							var view;
							if(v != null) {
								view = v;
							} else {
								var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
								var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
								var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
								var this2 = this1.b;
								var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
								view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
							}
							switch(view.shape) {
							case 0:
								has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
								break;
							case 1:
								has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
								break;
							case 2:case 3:
								if(view.width > view.height) {
									var a = view.width / 2;
									var b = view.height / 2;
									var c = Math.sqrt(a * a - b * b);
									var x1 = view.x + view.width / 2 - c;
									var y1 = view.y + view.height / 2;
									if(y1 == null) {
										y1 = 0;
									}
									if(x1 == null) {
										x1 = 0;
									}
									var f1_x = x1;
									var f1_y = y1;
									var x2 = view.x + view.width / 2 + c;
									var y2 = view.y + view.height / 2;
									if(y2 == null) {
										y2 = 0;
									}
									if(x2 == null) {
										x2 = 0;
									}
									var f2_x = x2;
									var f2_y = y2;
									var x3 = x;
									var y3 = y;
									if(y3 == null) {
										y3 = 0;
									}
									if(x3 == null) {
										x3 = 0;
									}
									var p_x = x3;
									var p_y = y3;
									var x4 = p_x - f1_x;
									var y4 = p_y - f1_y;
									var x5 = p_x - f2_x;
									var y5 = p_y - f2_y;
									has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
									if(view.shape == 3) {
										has = !has;
									}
								} else if(view.height > view.width) {
									var a1 = view.height / 2;
									var b1 = view.width / 2;
									var c1 = Math.sqrt(a1 * a1 - b1 * b1);
									var x6 = view.x + view.width / 2;
									var y6 = view.y + view.height / 2 - c1;
									if(y6 == null) {
										y6 = 0;
									}
									if(x6 == null) {
										x6 = 0;
									}
									var f1_x1 = x6;
									var f1_y1 = y6;
									var x7 = view.x + view.width / 2;
									var y7 = view.y + view.height / 2 + c1;
									if(y7 == null) {
										y7 = 0;
									}
									if(x7 == null) {
										x7 = 0;
									}
									var f2_x1 = x7;
									var f2_y1 = y7;
									var x8 = x;
									var y8 = y;
									if(y8 == null) {
										y8 = 0;
									}
									if(x8 == null) {
										x8 = 0;
									}
									var p_x1 = x8;
									var p_y1 = y8;
									var x9 = p_x1 - f1_x1;
									var y9 = p_y1 - f1_y1;
									var x10 = p_x1 - f2_x1;
									var y10 = p_y1 - f2_y1;
									has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
									if(view.shape == 3) {
										has = !has;
									}
								} else {
									var x11 = x;
									var y11 = y;
									if(y11 == null) {
										y11 = 0;
									}
									if(x11 == null) {
										x11 = 0;
									}
									var point1_x = x11;
									var point1_y = y11;
									var x12 = view.x + view.width / 2;
									var y12 = view.y + view.height / 2;
									if(y12 == null) {
										y12 = 0;
									}
									if(x12 == null) {
										x12 = 0;
									}
									var point2_x = x12;
									var point2_y = y12;
									var x13 = point2_x - point1_x;
									var y13 = point2_y - point1_y;
									has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
									if(view.shape == 3) {
										has = !has;
									}
								}
								break;
							case 4:
								has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
								break;
							case 5:
								has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
								break;
							}
							image1 = has;
						}
						if(image1) {
							var position = (y * this1.getUInt16(0) + x) * 4;
							position += vision_ds_Image.OFFSET;
							var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
							if(value == null) {
								value = 0;
							}
							var this3 = value;
							var color = this3;
							var position1 = ((Math.ceil((inter.length - vision_ds_Image.OFFSET) / (inter.getUInt16(0) * 4)) - y - 1) * inter.getUInt16(0) + x) * 4;
							position1 += vision_ds_Image.OFFSET;
							var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
							if(value1 == null) {
								value1 = 0;
							}
							var this4 = value1;
							var color1 = this4;
							var position2 = (y * this1.getUInt16(0) + x) * 4;
							position2 += vision_ds_Image.OFFSET;
							this1.b[position2] = color1 >> 24 & 255;
							this1.b[position2 + 1] = color1 >> 16 & 255;
							this1.b[position2 + 2] = color1 >> 8 & 255;
							this1.b[position2 + 3] = color1 & 255;
						}
					}
				}
			}
			image = this1;
			break;
		case "Gaussian Blur":
			image = vision_Vision.gaussianBlur(image);
			break;
		case "Grayscale":
			image = vision_Vision.grayscale(image);
			break;
		case "Invert":
			image = vision_Vision.invert(image);
			break;
		case "Median Blur":
			image = vision_Vision.medianBlur(image);
			break;
		case "Mirror":
			var this1 = image;
			var inter = vision_ds_Image.clone(this1);
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
				var _g = 0;
				var _g1 = this1.getUInt16(0);
				while(_g < _g1) {
					var x = _g++;
					var _g2 = 0;
					var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					while(_g2 < _g3) {
						var y = _g2++;
						var position = (y * this1.getUInt16(0) + x) * 4;
						position += vision_ds_Image.OFFSET;
						var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
						if(value == null) {
							value = 0;
						}
						var this2 = value;
						var color = this2;
						var x1 = inter.getUInt16(0) - x - 1;
						var position1 = (y * inter.getUInt16(0) + x1) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this3 = value1;
						var color1 = this3;
						var position2 = (y * this1.getUInt16(0) + x) * 4;
						position2 += vision_ds_Image.OFFSET;
						this1.b[position2] = color1 >> 24 & 255;
						this1.b[position2 + 1] = color1 >> 16 & 255;
						this1.b[position2 + 2] = color1 >> 8 & 255;
						this1.b[position2 + 3] = color1 & 255;
					}
				}
			} else {
				var _g = 0;
				var _g1 = this1.getUInt16(0);
				while(_g < _g1) {
					var x = _g++;
					var _g2 = 0;
					var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					while(_g2 < _g3) {
						var y = _g2++;
						var v = null;
						var image1;
						if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
							image1 = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
						} else {
							var has = false;
							var view;
							if(v != null) {
								view = v;
							} else {
								var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
								var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
								var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
								var this2 = this1.b;
								var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
								view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
							}
							switch(view.shape) {
							case 0:
								has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
								break;
							case 1:
								has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
								break;
							case 2:case 3:
								if(view.width > view.height) {
									var a = view.width / 2;
									var b = view.height / 2;
									var c = Math.sqrt(a * a - b * b);
									var x1 = view.x + view.width / 2 - c;
									var y1 = view.y + view.height / 2;
									if(y1 == null) {
										y1 = 0;
									}
									if(x1 == null) {
										x1 = 0;
									}
									var f1_x = x1;
									var f1_y = y1;
									var x2 = view.x + view.width / 2 + c;
									var y2 = view.y + view.height / 2;
									if(y2 == null) {
										y2 = 0;
									}
									if(x2 == null) {
										x2 = 0;
									}
									var f2_x = x2;
									var f2_y = y2;
									var x3 = x;
									var y3 = y;
									if(y3 == null) {
										y3 = 0;
									}
									if(x3 == null) {
										x3 = 0;
									}
									var p_x = x3;
									var p_y = y3;
									var x4 = p_x - f1_x;
									var y4 = p_y - f1_y;
									var x5 = p_x - f2_x;
									var y5 = p_y - f2_y;
									has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
									if(view.shape == 3) {
										has = !has;
									}
								} else if(view.height > view.width) {
									var a1 = view.height / 2;
									var b1 = view.width / 2;
									var c1 = Math.sqrt(a1 * a1 - b1 * b1);
									var x6 = view.x + view.width / 2;
									var y6 = view.y + view.height / 2 - c1;
									if(y6 == null) {
										y6 = 0;
									}
									if(x6 == null) {
										x6 = 0;
									}
									var f1_x1 = x6;
									var f1_y1 = y6;
									var x7 = view.x + view.width / 2;
									var y7 = view.y + view.height / 2 + c1;
									if(y7 == null) {
										y7 = 0;
									}
									if(x7 == null) {
										x7 = 0;
									}
									var f2_x1 = x7;
									var f2_y1 = y7;
									var x8 = x;
									var y8 = y;
									if(y8 == null) {
										y8 = 0;
									}
									if(x8 == null) {
										x8 = 0;
									}
									var p_x1 = x8;
									var p_y1 = y8;
									var x9 = p_x1 - f1_x1;
									var y9 = p_y1 - f1_y1;
									var x10 = p_x1 - f2_x1;
									var y10 = p_y1 - f2_y1;
									has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
									if(view.shape == 3) {
										has = !has;
									}
								} else {
									var x11 = x;
									var y11 = y;
									if(y11 == null) {
										y11 = 0;
									}
									if(x11 == null) {
										x11 = 0;
									}
									var point1_x = x11;
									var point1_y = y11;
									var x12 = view.x + view.width / 2;
									var y12 = view.y + view.height / 2;
									if(y12 == null) {
										y12 = 0;
									}
									if(x12 == null) {
										x12 = 0;
									}
									var point2_x = x12;
									var point2_y = y12;
									var x13 = point2_x - point1_x;
									var y13 = point2_y - point1_y;
									has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
									if(view.shape == 3) {
										has = !has;
									}
								}
								break;
							case 4:
								has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
								break;
							case 5:
								has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
								break;
							}
							image1 = has;
						}
						if(image1) {
							var position = (y * this1.getUInt16(0) + x) * 4;
							position += vision_ds_Image.OFFSET;
							var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
							if(value == null) {
								value = 0;
							}
							var this3 = value;
							var color = this3;
							var x14 = inter.getUInt16(0) - x - 1;
							var position1 = (y * inter.getUInt16(0) + x14) * 4;
							position1 += vision_ds_Image.OFFSET;
							var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
							if(value1 == null) {
								value1 = 0;
							}
							var this4 = value1;
							var color1 = this4;
							var position2 = (y * this1.getUInt16(0) + x) * 4;
							position2 += vision_ds_Image.OFFSET;
							this1.b[position2] = color1 >> 24 & 255;
							this1.b[position2 + 1] = color1 >> 16 & 255;
							this1.b[position2 + 2] = color1 >> 8 & 255;
							this1.b[position2 + 3] = color1 & 255;
						}
					}
				}
			}
			image = this1;
			break;
		case "Nearest-Neighbor Blur":
			image = vision_Vision.nearestNeighborBlur(image);
			break;
		case "Perwitt Edge Detection":
			image = vision_Vision.perwittEdgeDetection(image);
			break;
		case "Perwitt Edge Diff Operator":
			image = vision_Vision.perwittEdgeDiffOperator(image);
			break;
		case "Robert Edge Diff Operator":
			image = vision_Vision.robertEdgeDiffOperator(image);
			break;
		case "Salt And Pepper Noise":
			image = vision_Vision.saltAndPepperNoise(image);
			break;
		case "Sharpen":
			image = vision_Vision.sharpen(image);
			break;
		case "Sobel Edge Detection":
			image = vision_Vision.sobelEdgeDetection(image);
			break;
		case "Sobel Edge Diff Operator":
			image = vision_Vision.sobelEdgeDiffOperator(image);
			break;
		case "White Noise":
			image = vision_Vision.whiteNoise(image);
			break;
		}
		(js_Boot.__cast(window.document.getElementById("Result") , HTMLCanvasElement)).getContext("2d",null).drawImage(Main.imageToCanvas(image),0,0);
	});
};
Main.imageToCanvas = function(image) {
	var c = window.document.createElement("canvas");
	c.width = 300;
	c.height = 300;
	var ctx = c.getContext("2d",null);
	var imageData = ctx.getImageData(0,0,image.getUInt16(0),Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
	var data = imageData.data;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var i = (y * image.getUInt16(0) + x) * 4;
			data[i] = image.b[i + (vision_ds_Image.OFFSET + 1)];
			data[i + 1] = image.b[i + (vision_ds_Image.OFFSET + 1) + 1];
			data[i + 2] = image.b[i + (vision_ds_Image.OFFSET + 1) + 2];
			data[i + 3] = 255;
		}
	}
	ctx.putImageData(imageData,0,0);
	return c;
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = true;
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_ds_ArraySort = function() { };
haxe_ds_ArraySort.__name__ = true;
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = true;
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.prototype = {
	sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = true;
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var vision_Vision = function() { };
vision_Vision.__name__ = true;
vision_Vision.combine = function(image,$with,percentage) {
	if(percentage == null) {
		percentage = 50;
	}
	if($with == null) {
		var width = image.getUInt16(0);
		var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
		var this2 = this1;
		this2.setUInt16(0,width);
		this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
		this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
		this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
		this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
		this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
		var i = vision_ds_Image.OFFSET;
		while(i < this2.length) {
			this2.b[i] = 0;
			this2.b[i + 1] = 0;
			this2.b[i + 2] = 0;
			this2.b[i + 3] = 0;
			i += 4;
		}
		$with = this2;
	}
	var translated = percentage / 100;
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var first = this1;
				var second;
				if(!(x >= 0 && y >= 0 && x < $with.getUInt16(0) && y < Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4)))) {
					var this2 = [x,$with.getUInt16(0)];
					var values = this2;
					var max = values[0];
					var _g4 = 0;
					var _g5 = values.length;
					while(_g4 < _g5) {
						var i = _g4++;
						if(values[i] > max) {
							max = values[i];
						}
					}
					var this3 = [max,0];
					var values1 = this3;
					var min = values1[0];
					var _g6 = 0;
					var _g7 = values1.length;
					while(_g6 < _g7) {
						var i1 = _g6++;
						if(values1[i1] < min) {
							min = values1[i1];
						}
					}
					var x1 = min;
					var this4 = [y,Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4))];
					var values2 = this4;
					var max1 = values2[0];
					var _g8 = 0;
					var _g9 = values2.length;
					while(_g8 < _g9) {
						var i2 = _g8++;
						if(values2[i2] > max1) {
							max1 = values2[i2];
						}
					}
					var this5 = [max1,0];
					var values3 = this5;
					var min1 = values3[0];
					var _g10 = 0;
					var _g11 = values3.length;
					while(_g10 < _g11) {
						var i3 = _g10++;
						if(values3[i3] < min1) {
							min1 = values3[i3];
						}
					}
					var y1 = min1;
					if(!(x1 >= 0 && y1 >= 0 && x1 < $with.getUInt16(0) && y1 < Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4)))) {
						var this_x = x1;
						var this_y = y1;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds($with,new vision_ds_Point2D(this_x,this_y)));
					}
					var position1 = (y1 * $with.getUInt16(0) + x1) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = $with.b[position1] << 24 | $with.b[position1 + 1] << 16 | $with.b[position1 + 2] << 8 | $with.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this6 = value1;
					second = this6;
				} else {
					if(!(x >= 0 && y >= 0 && x < $with.getUInt16(0) && y < Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4)))) {
						var this_x1 = x;
						var this_y1 = y;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds($with,new vision_ds_Point2D(this_x1,this_y1)));
					}
					var position2 = (y * $with.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					var value2 = $with.b[position2] << 24 | $with.b[position2 + 1] << 16 | $with.b[position2 + 2] << 8 | $with.b[position2 + 3];
					if(value2 == null) {
						value2 = 0;
					}
					var this7 = value2;
					second = this7;
				}
				var value3 = Math.round((first >> 16 & 255) * (1 - translated) + (second >> 16 & 255) * translated);
				first &= -16711681;
				first |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 16;
				var value4 = Math.round((first & 255) * (1 - translated) + (second & 255) * translated);
				first &= -256;
				first |= value4 > 255 ? 255 : value4 < 0 ? 0 : value4;
				var value5 = Math.round((first >> 8 & 255) * (1 - translated) + (second >> 8 & 255) * translated);
				first &= -65281;
				first |= (value5 > 255 ? 255 : value5 < 0 ? 0 : value5) << 8;
				var position3 = (y * image.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				image.b[position3] = first >> 24 & 255;
				image.b[position3 + 1] = first >> 16 & 255;
				image.b[position3 + 2] = first >> 8 & 255;
				image.b[position3 + 3] = first & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var first = this1;
					var second;
					if(!(x >= 0 && y >= 0 && x < $with.getUInt16(0) && y < Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4)))) {
						var this2 = [x,$with.getUInt16(0)];
						var values = this2;
						var max = values[0];
						var _g7 = 0;
						var _g8 = values.length;
						while(_g7 < _g8) {
							var i = _g7++;
							if(values[i] > max) {
								max = values[i];
							}
						}
						var this3 = [max,0];
						var values1 = this3;
						var min = values1[0];
						var _g9 = 0;
						var _g10 = values1.length;
						while(_g9 < _g10) {
							var i1 = _g9++;
							if(values1[i1] < min) {
								min = values1[i1];
							}
						}
						var x14 = min;
						var this4 = [y,Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4))];
						var values2 = this4;
						var max1 = values2[0];
						var _g11 = 0;
						var _g12 = values2.length;
						while(_g11 < _g12) {
							var i2 = _g11++;
							if(values2[i2] > max1) {
								max1 = values2[i2];
							}
						}
						var this5 = [max1,0];
						var values3 = this5;
						var min1 = values3[0];
						var _g13 = 0;
						var _g14 = values3.length;
						while(_g13 < _g14) {
							var i3 = _g13++;
							if(values3[i3] < min1) {
								min1 = values3[i3];
							}
						}
						var y14 = min1;
						if(!(x14 >= 0 && y14 >= 0 && x14 < $with.getUInt16(0) && y14 < Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4)))) {
							var this_x = x14;
							var this_y = y14;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds($with,new vision_ds_Point2D(this_x,this_y)));
						}
						var position1 = (y14 * $with.getUInt16(0) + x14) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = $with.b[position1] << 24 | $with.b[position1 + 1] << 16 | $with.b[position1 + 2] << 8 | $with.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this6 = value1;
						second = this6;
					} else {
						if(!(x >= 0 && y >= 0 && x < $with.getUInt16(0) && y < Math.ceil(($with.length - vision_ds_Image.OFFSET) / ($with.getUInt16(0) * 4)))) {
							var this_x1 = x;
							var this_y1 = y;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds($with,new vision_ds_Point2D(this_x1,this_y1)));
						}
						var position2 = (y * $with.getUInt16(0) + x) * 4;
						position2 += vision_ds_Image.OFFSET;
						var value2 = $with.b[position2] << 24 | $with.b[position2 + 1] << 16 | $with.b[position2 + 2] << 8 | $with.b[position2 + 3];
						if(value2 == null) {
							value2 = 0;
						}
						var this7 = value2;
						second = this7;
					}
					var value3 = Math.round((first >> 16 & 255) * (1 - translated) + (second >> 16 & 255) * translated);
					first &= -16711681;
					first |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 16;
					var value4 = Math.round((first & 255) * (1 - translated) + (second & 255) * translated);
					first &= -256;
					first |= value4 > 255 ? 255 : value4 < 0 ? 0 : value4;
					var value5 = Math.round((first >> 8 & 255) * (1 - translated) + (second >> 8 & 255) * translated);
					first &= -65281;
					first |= (value5 > 255 ? 255 : value5 < 0 ? 0 : value5) << 8;
					var position3 = (y * image.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					image.b[position3] = first >> 24 & 255;
					image.b[position3 + 1] = first >> 16 & 255;
					image.b[position3 + 2] = first >> 8 & 255;
					image.b[position3 + 3] = first & 255;
				}
			}
		}
	}
	return image;
};
vision_Vision.grayscale = function(image,simpleGrayscale) {
	if(simpleGrayscale == null) {
		simpleGrayscale = false;
	}
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var pixel = this1;
				var gray = !simpleGrayscale ? 0.2126 * (pixel >> 16 & 255) + 0.7152 * (pixel >> 8 & 255) + 0.0722 * (pixel & 255) | 0 : ((pixel >> 16 & 255) + (pixel >> 8 & 255) + (pixel & 255)) / 3 | 0;
				var this2 = 0;
				var color = this2;
				var Alpha = 255;
				if(Alpha == null) {
					Alpha = 255;
				}
				color &= -16711681;
				color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
				color &= -65281;
				color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
				color &= -256;
				color |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
				color &= 16777215;
				color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
				var color1 = color;
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = color1 >> 24 & 255;
				image.b[position1 + 1] = color1 >> 16 & 255;
				image.b[position1 + 2] = color1 >> 8 & 255;
				image.b[position1 + 3] = color1 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var pixel = this1;
					var gray = !simpleGrayscale ? 0.2126 * (pixel >> 16 & 255) + 0.7152 * (pixel >> 8 & 255) + 0.0722 * (pixel & 255) | 0 : ((pixel >> 16 & 255) + (pixel >> 8 & 255) + (pixel & 255)) / 3 | 0;
					var this2 = 0;
					var color = this2;
					var Alpha = 255;
					if(Alpha == null) {
						Alpha = 255;
					}
					color &= -16711681;
					color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
					color &= -65281;
					color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
					color &= -256;
					color |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
					color &= 16777215;
					color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
					var color1 = color;
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					image.b[position1] = color1 >> 24 & 255;
					image.b[position1 + 1] = color1 >> 16 & 255;
					image.b[position1 + 2] = color1 >> 8 & 255;
					image.b[position1 + 3] = color1 & 255;
				}
			}
		}
	}
	return image;
};
vision_Vision.invert = function(image) {
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var pixel = this1;
				var Red = 255 - (pixel >> 16 & 255);
				var Green = 255 - (pixel >> 8 & 255);
				var Blue = 255 - (pixel & 255);
				var this2 = 0;
				var color = this2;
				var Alpha = 255;
				if(Alpha == null) {
					Alpha = 255;
				}
				color &= -16711681;
				color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
				color &= -65281;
				color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
				color &= -256;
				color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
				color &= 16777215;
				color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
				var color1 = color;
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = color1 >> 24 & 255;
				image.b[position1 + 1] = color1 >> 16 & 255;
				image.b[position1 + 2] = color1 >> 8 & 255;
				image.b[position1 + 3] = color1 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var pixel = this1;
					var Red = 255 - (pixel >> 16 & 255);
					var Green = 255 - (pixel >> 8 & 255);
					var Blue = 255 - (pixel & 255);
					var this2 = 0;
					var color = this2;
					var Alpha = 255;
					if(Alpha == null) {
						Alpha = 255;
					}
					color &= -16711681;
					color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
					color &= -65281;
					color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
					color &= -256;
					color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
					color &= 16777215;
					color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
					var color1 = color;
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					image.b[position1] = color1 >> 24 & 255;
					image.b[position1 + 1] = color1 >> 16 & 255;
					image.b[position1 + 2] = color1 >> 8 & 255;
					image.b[position1 + 3] = color1 & 255;
				}
			}
		}
	}
	return image;
};
vision_Vision.blackAndWhite = function(image,threshold) {
	if(threshold == null) {
		threshold = 128;
	}
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var pixel = this1;
				var this2 = [pixel >> 16 & 255,pixel >> 8 & 255,pixel & 255];
				var values = this2;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i = _g4++;
					if(values[i] > max) {
						max = values[i];
					}
				}
				var colorValue = max;
				if(colorValue > threshold) {
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					image.b[position1] = 255;
					image.b[position1 + 1] = 255;
					image.b[position1 + 2] = 255;
					image.b[position1 + 3] = 255;
				} else {
					var position2 = (y * image.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					image.b[position2] = 255;
					image.b[position2 + 1] = 0;
					image.b[position2 + 2] = 0;
					image.b[position2 + 3] = 0;
				}
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var pixel = this1;
					var this2 = [pixel >> 16 & 255,pixel >> 8 & 255,pixel & 255];
					var values = this2;
					var max = values[0];
					var _g7 = 0;
					var _g8 = values.length;
					while(_g7 < _g8) {
						var i = _g7++;
						if(values[i] > max) {
							max = values[i];
						}
					}
					var colorValue = max;
					if(colorValue > threshold) {
						var position1 = (y * image.getUInt16(0) + x) * 4;
						position1 += vision_ds_Image.OFFSET;
						image.b[position1] = 255;
						image.b[position1 + 1] = 255;
						image.b[position1 + 2] = 255;
						image.b[position1 + 3] = 255;
					} else {
						var position2 = (y * image.getUInt16(0) + x) * 4;
						position2 += vision_ds_Image.OFFSET;
						image.b[position2] = 255;
						image.b[position2 + 1] = 0;
						image.b[position2 + 2] = 0;
						image.b[position2 + 3] = 0;
					}
				}
			}
		}
	}
	return image;
};
vision_Vision.contrast = function(image) {
	return vision_Vision.convolve(image,vision_ds_Kernal2D.UnsharpMasking);
};
vision_Vision.sharpen = function(image) {
	return vision_Vision.convolve(image,vision_ds_Kernal2D.Sharpen);
};
vision_Vision.deepfry = function(image,iterations) {
	if(iterations == null) {
		iterations = 2;
	}
	var _g = 0;
	var _g1 = iterations;
	while(_g < _g1) {
		var i = _g++;
		image = vision_Vision.sharpen(image);
	}
	return image;
};
vision_Vision.dilate = function(image,dilationRadius,colorImportanceOrder,circularKernal) {
	if(circularKernal == null) {
		circularKernal = true;
	}
	if(colorImportanceOrder == null) {
		colorImportanceOrder = -259;
	}
	if(dilationRadius == null) {
		dilationRadius = 2;
	}
	var intermediate = vision_ds_Image.clone(image);
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var c = this1;
				var maxColor = 0;
				var circular = circularKernal;
				if(circular == null) {
					circular = false;
				}
				var circular1 = circular;
				if(circular1 == null) {
					circular1 = false;
				}
				var color_image = image;
				var color_roundedDown = dilationRadius * 2 + 1 - 1 >> 1;
				var color_x = x;
				var color_y = y;
				var color_circular = circular1;
				var color_X = -color_roundedDown;
				var color_Y = -color_roundedDown;
				while(color_X <= color_roundedDown && color_Y <= color_roundedDown) {
					while(true) {
						++color_Y;
						if(color_Y > color_roundedDown) {
							color_Y = -color_roundedDown;
							++color_X;
						}
						var tmp;
						if(color_circular) {
							var x1 = color_X;
							var y1 = color_Y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x2 = color_roundedDown;
							var y2 = color_roundedDown;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x3 = point2_x - point1_x;
							var y3 = point2_y - point1_y;
							tmp = Math.sqrt(x3 * x3 + y3 * y3) > color_roundedDown;
						} else {
							tmp = false;
						}
						if(!tmp) {
							break;
						}
					}
					var this2 = color_image;
					var x4 = color_x + color_X;
					var y4 = color_y + color_Y;
					var color;
					if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this3 = [x4,this2.getUInt16(0)];
						var values = this3;
						var max = values[0];
						var _g4 = 0;
						var _g5 = values.length;
						while(_g4 < _g5) {
							var i = _g4++;
							if(values[i] > max) {
								max = values[i];
							}
						}
						var this4 = [max,0];
						var values1 = this4;
						var min = values1[0];
						var _g6 = 0;
						var _g7 = values1.length;
						while(_g6 < _g7) {
							var i1 = _g6++;
							if(values1[i1] < min) {
								min = values1[i1];
							}
						}
						var x5 = min;
						var this5 = [y4,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4))];
						var values2 = this5;
						var max1 = values2[0];
						var _g8 = 0;
						var _g9 = values2.length;
						while(_g8 < _g9) {
							var i2 = _g8++;
							if(values2[i2] > max1) {
								max1 = values2[i2];
							}
						}
						var this6 = [max1,0];
						var values3 = this6;
						var min1 = values3[0];
						var _g10 = 0;
						var _g11 = values3.length;
						while(_g10 < _g11) {
							var i3 = _g10++;
							if(values3[i3] < min1) {
								min1 = values3[i3];
							}
						}
						var y5 = min1;
						if(!(x5 >= 0 && y5 >= 0 && x5 < this2.getUInt16(0) && y5 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x = x5;
							var this_y = y5;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
						}
						var position1 = (y5 * this2.getUInt16(0) + x5) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this7 = value1;
						color = this7;
					} else {
						if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x1 = x4;
							var this_y1 = y4;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
						}
						var position2 = (y4 * this2.getUInt16(0) + x4) * 4;
						position2 += vision_ds_Image.OFFSET;
						var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
						if(value2 == null) {
							value2 = 0;
						}
						var this8 = value2;
						color = this8;
					}
					color = color & colorImportanceOrder;
					var redLarger = (color >> 16 & 255) > (maxColor >> 16 & 255) ? 1 : 0;
					var greenLarger = (color >> 8 & 255) > (maxColor >> 8 & 255) ? 1 : 0;
					var blueLarger = (color & 255) > (maxColor & 255) ? 1 : 0;
					if(redLarger + blueLarger + greenLarger >= 2) {
						maxColor = color;
					}
				}
				var position3 = (y * intermediate.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				intermediate.b[position3] = maxColor >> 24 & 255;
				intermediate.b[position3 + 1] = maxColor >> 16 & 255;
				intermediate.b[position3 + 2] = maxColor >> 8 & 255;
				intermediate.b[position3 + 3] = maxColor & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var c2 = this1;
					var maxColor = 0;
					var circular = circularKernal;
					if(circular == null) {
						circular = false;
					}
					var circular1 = circular;
					if(circular1 == null) {
						circular1 = false;
					}
					var color_image = image;
					var color_roundedDown = dilationRadius * 2 + 1 - 1 >> 1;
					var color_x = x;
					var color_y = y;
					var color_circular = circular1;
					var color_X = -color_roundedDown;
					var color_Y = -color_roundedDown;
					while(color_X <= color_roundedDown && color_Y <= color_roundedDown) {
						while(true) {
							++color_Y;
							if(color_Y > color_roundedDown) {
								color_Y = -color_roundedDown;
								++color_X;
							}
							var tmp1;
							if(color_circular) {
								var x14 = color_X;
								var y14 = color_Y;
								if(y14 == null) {
									y14 = 0;
								}
								if(x14 == null) {
									x14 = 0;
								}
								var point1_x1 = x14;
								var point1_y1 = y14;
								var x15 = color_roundedDown;
								var y15 = color_roundedDown;
								if(y15 == null) {
									y15 = 0;
								}
								if(x15 == null) {
									x15 = 0;
								}
								var point2_x1 = x15;
								var point2_y1 = y15;
								var x16 = point2_x1 - point1_x1;
								var y16 = point2_y1 - point1_y1;
								tmp1 = Math.sqrt(x16 * x16 + y16 * y16) > color_roundedDown;
							} else {
								tmp1 = false;
							}
							if(!tmp1) {
								break;
							}
						}
						var this2 = color_image;
						var x17 = color_x + color_X;
						var y17 = color_y + color_Y;
						var color;
						if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this3 = [x17,this2.getUInt16(0)];
							var values = this3;
							var max = values[0];
							var _g7 = 0;
							var _g8 = values.length;
							while(_g7 < _g8) {
								var i = _g7++;
								if(values[i] > max) {
									max = values[i];
								}
							}
							var this4 = [max,0];
							var values1 = this4;
							var min = values1[0];
							var _g9 = 0;
							var _g10 = values1.length;
							while(_g9 < _g10) {
								var i1 = _g9++;
								if(values1[i1] < min) {
									min = values1[i1];
								}
							}
							var x18 = min;
							var this5 = [y17,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4))];
							var values2 = this5;
							var max1 = values2[0];
							var _g11 = 0;
							var _g12 = values2.length;
							while(_g11 < _g12) {
								var i2 = _g11++;
								if(values2[i2] > max1) {
									max1 = values2[i2];
								}
							}
							var this6 = [max1,0];
							var values3 = this6;
							var min1 = values3[0];
							var _g13 = 0;
							var _g14 = values3.length;
							while(_g13 < _g14) {
								var i3 = _g13++;
								if(values3[i3] < min1) {
									min1 = values3[i3];
								}
							}
							var y18 = min1;
							if(!(x18 >= 0 && y18 >= 0 && x18 < this2.getUInt16(0) && y18 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x = x18;
								var this_y = y18;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
							}
							var position1 = (y18 * this2.getUInt16(0) + x18) * 4;
							position1 += vision_ds_Image.OFFSET;
							var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
							if(value1 == null) {
								value1 = 0;
							}
							var this7 = value1;
							color = this7;
						} else {
							if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x1 = x17;
								var this_y1 = y17;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
							}
							var position2 = (y17 * this2.getUInt16(0) + x17) * 4;
							position2 += vision_ds_Image.OFFSET;
							var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
							if(value2 == null) {
								value2 = 0;
							}
							var this8 = value2;
							color = this8;
						}
						color = color & colorImportanceOrder;
						var redLarger = (color >> 16 & 255) > (maxColor >> 16 & 255) ? 1 : 0;
						var greenLarger = (color >> 8 & 255) > (maxColor >> 8 & 255) ? 1 : 0;
						var blueLarger = (color & 255) > (maxColor & 255) ? 1 : 0;
						if(redLarger + blueLarger + greenLarger >= 2) {
							maxColor = color;
						}
					}
					var position3 = (y * intermediate.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					intermediate.b[position3] = maxColor >> 24 & 255;
					intermediate.b[position3 + 1] = maxColor >> 16 & 255;
					intermediate.b[position3 + 2] = maxColor >> 8 & 255;
					intermediate.b[position3 + 3] = maxColor & 255;
				}
			}
		}
	}
	image = intermediate;
	return image;
};
vision_Vision.erode = function(image,erosionRadius,colorImportanceOrder,circularKernal) {
	if(circularKernal == null) {
		circularKernal = true;
	}
	if(colorImportanceOrder == null) {
		colorImportanceOrder = -259;
	}
	if(erosionRadius == null) {
		erosionRadius = 2;
	}
	var intermediate = vision_ds_Image.clone(image);
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var c = this1;
				var minColor = -1;
				var circular = circularKernal;
				if(circular == null) {
					circular = false;
				}
				var circular1 = circular;
				if(circular1 == null) {
					circular1 = false;
				}
				var color_image = image;
				var color_roundedDown = erosionRadius * 2 + 1 - 1 >> 1;
				var color_x = x;
				var color_y = y;
				var color_circular = circular1;
				var color_X = -color_roundedDown;
				var color_Y = -color_roundedDown;
				while(color_X <= color_roundedDown && color_Y <= color_roundedDown) {
					while(true) {
						++color_Y;
						if(color_Y > color_roundedDown) {
							color_Y = -color_roundedDown;
							++color_X;
						}
						var tmp;
						if(color_circular) {
							var x1 = color_X;
							var y1 = color_Y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x2 = color_roundedDown;
							var y2 = color_roundedDown;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x3 = point2_x - point1_x;
							var y3 = point2_y - point1_y;
							tmp = Math.sqrt(x3 * x3 + y3 * y3) > color_roundedDown;
						} else {
							tmp = false;
						}
						if(!tmp) {
							break;
						}
					}
					var this2 = color_image;
					var x4 = color_x + color_X;
					var y4 = color_y + color_Y;
					var color;
					if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this3 = [x4,this2.getUInt16(0)];
						var values = this3;
						var max = values[0];
						var _g4 = 0;
						var _g5 = values.length;
						while(_g4 < _g5) {
							var i = _g4++;
							if(values[i] > max) {
								max = values[i];
							}
						}
						var this4 = [max,0];
						var values1 = this4;
						var min = values1[0];
						var _g6 = 0;
						var _g7 = values1.length;
						while(_g6 < _g7) {
							var i1 = _g6++;
							if(values1[i1] < min) {
								min = values1[i1];
							}
						}
						var x5 = min;
						var this5 = [y4,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4))];
						var values2 = this5;
						var max1 = values2[0];
						var _g8 = 0;
						var _g9 = values2.length;
						while(_g8 < _g9) {
							var i2 = _g8++;
							if(values2[i2] > max1) {
								max1 = values2[i2];
							}
						}
						var this6 = [max1,0];
						var values3 = this6;
						var min1 = values3[0];
						var _g10 = 0;
						var _g11 = values3.length;
						while(_g10 < _g11) {
							var i3 = _g10++;
							if(values3[i3] < min1) {
								min1 = values3[i3];
							}
						}
						var y5 = min1;
						if(!(x5 >= 0 && y5 >= 0 && x5 < this2.getUInt16(0) && y5 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x = x5;
							var this_y = y5;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
						}
						var position1 = (y5 * this2.getUInt16(0) + x5) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this7 = value1;
						color = this7;
					} else {
						if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x1 = x4;
							var this_y1 = y4;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
						}
						var position2 = (y4 * this2.getUInt16(0) + x4) * 4;
						position2 += vision_ds_Image.OFFSET;
						var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
						if(value2 == null) {
							value2 = 0;
						}
						var this8 = value2;
						color = this8;
					}
					color = color & colorImportanceOrder;
					var redSmaller = (color >> 16 & 255) < (minColor >> 16 & 255) ? 1 : 0;
					var greenSmaller = (color >> 8 & 255) < (minColor >> 8 & 255) ? 1 : 0;
					var blueSmaller = (color & 255) < (minColor & 255) ? 1 : 0;
					if(redSmaller + blueSmaller + greenSmaller >= 2) {
						minColor = color;
					}
				}
				var position3 = (y * intermediate.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				intermediate.b[position3] = minColor >> 24 & 255;
				intermediate.b[position3 + 1] = minColor >> 16 & 255;
				intermediate.b[position3 + 2] = minColor >> 8 & 255;
				intermediate.b[position3 + 3] = minColor & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var c2 = this1;
					var minColor = -1;
					var circular = circularKernal;
					if(circular == null) {
						circular = false;
					}
					var circular1 = circular;
					if(circular1 == null) {
						circular1 = false;
					}
					var color_image = image;
					var color_roundedDown = erosionRadius * 2 + 1 - 1 >> 1;
					var color_x = x;
					var color_y = y;
					var color_circular = circular1;
					var color_X = -color_roundedDown;
					var color_Y = -color_roundedDown;
					while(color_X <= color_roundedDown && color_Y <= color_roundedDown) {
						while(true) {
							++color_Y;
							if(color_Y > color_roundedDown) {
								color_Y = -color_roundedDown;
								++color_X;
							}
							var tmp1;
							if(color_circular) {
								var x14 = color_X;
								var y14 = color_Y;
								if(y14 == null) {
									y14 = 0;
								}
								if(x14 == null) {
									x14 = 0;
								}
								var point1_x1 = x14;
								var point1_y1 = y14;
								var x15 = color_roundedDown;
								var y15 = color_roundedDown;
								if(y15 == null) {
									y15 = 0;
								}
								if(x15 == null) {
									x15 = 0;
								}
								var point2_x1 = x15;
								var point2_y1 = y15;
								var x16 = point2_x1 - point1_x1;
								var y16 = point2_y1 - point1_y1;
								tmp1 = Math.sqrt(x16 * x16 + y16 * y16) > color_roundedDown;
							} else {
								tmp1 = false;
							}
							if(!tmp1) {
								break;
							}
						}
						var this2 = color_image;
						var x17 = color_x + color_X;
						var y17 = color_y + color_Y;
						var color;
						if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this3 = [x17,this2.getUInt16(0)];
							var values = this3;
							var max = values[0];
							var _g7 = 0;
							var _g8 = values.length;
							while(_g7 < _g8) {
								var i = _g7++;
								if(values[i] > max) {
									max = values[i];
								}
							}
							var this4 = [max,0];
							var values1 = this4;
							var min = values1[0];
							var _g9 = 0;
							var _g10 = values1.length;
							while(_g9 < _g10) {
								var i1 = _g9++;
								if(values1[i1] < min) {
									min = values1[i1];
								}
							}
							var x18 = min;
							var this5 = [y17,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4))];
							var values2 = this5;
							var max1 = values2[0];
							var _g11 = 0;
							var _g12 = values2.length;
							while(_g11 < _g12) {
								var i2 = _g11++;
								if(values2[i2] > max1) {
									max1 = values2[i2];
								}
							}
							var this6 = [max1,0];
							var values3 = this6;
							var min1 = values3[0];
							var _g13 = 0;
							var _g14 = values3.length;
							while(_g13 < _g14) {
								var i3 = _g13++;
								if(values3[i3] < min1) {
									min1 = values3[i3];
								}
							}
							var y18 = min1;
							if(!(x18 >= 0 && y18 >= 0 && x18 < this2.getUInt16(0) && y18 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x = x18;
								var this_y = y18;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
							}
							var position1 = (y18 * this2.getUInt16(0) + x18) * 4;
							position1 += vision_ds_Image.OFFSET;
							var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
							if(value1 == null) {
								value1 = 0;
							}
							var this7 = value1;
							color = this7;
						} else {
							if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x1 = x17;
								var this_y1 = y17;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
							}
							var position2 = (y17 * this2.getUInt16(0) + x17) * 4;
							position2 += vision_ds_Image.OFFSET;
							var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
							if(value2 == null) {
								value2 = 0;
							}
							var this8 = value2;
							color = this8;
						}
						color = color & colorImportanceOrder;
						var redSmaller = (color >> 16 & 255) < (minColor >> 16 & 255) ? 1 : 0;
						var greenSmaller = (color >> 8 & 255) < (minColor >> 8 & 255) ? 1 : 0;
						var blueSmaller = (color & 255) < (minColor & 255) ? 1 : 0;
						if(redSmaller + blueSmaller + greenSmaller >= 2) {
							minColor = color;
						}
					}
					var position3 = (y * intermediate.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					intermediate.b[position3] = minColor >> 24 & 255;
					intermediate.b[position3 + 1] = minColor >> 16 & 255;
					intermediate.b[position3 + 2] = minColor >> 8 & 255;
					intermediate.b[position3 + 3] = minColor & 255;
				}
			}
		}
	}
	image = intermediate;
	return image;
};
vision_Vision.saltAndPepperNoise = function(image,percentage) {
	if(percentage == null) {
		percentage = 25;
	}
	var translated = percentage / 100;
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				var multiplierCounter = 1;
				var multiplier = 1;
				var diff = color;
				while(multiplierCounter < 32) {
					if(Math.random() < translated) {
						diff = diff | multiplier;
					}
					multiplier *= 2;
					++multiplierCounter;
				}
				var r = ((diff >> 16 & 255) - (color >> 16 & 255)) * 0.5 + (color >> 16 & 255) | 0;
				var g = ((diff >> 8 & 255) - (color >> 8 & 255)) * 0.5 + (color >> 8 & 255) | 0;
				var b = ((diff & 255) - (color & 255)) * 0.5 + (color & 255) | 0;
				var a = ((diff >> 24 & 255) - (color >> 24 & 255)) * 0.5 + (color >> 24 & 255) | 0;
				var Alpha = a;
				if(Alpha == null) {
					Alpha = 255;
				}
				var this2 = 0;
				var color1 = this2;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 255;
				}
				color1 &= -16711681;
				color1 |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
				color1 &= -65281;
				color1 |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
				color1 &= -256;
				color1 |= b > 255 ? 255 : b < 0 ? 0 : b;
				color1 &= 16777215;
				color1 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
				var color2 = color1;
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = color2 >> 24 & 255;
				image.b[position1 + 1] = color2 >> 16 & 255;
				image.b[position1 + 2] = color2 >> 8 & 255;
				image.b[position1 + 3] = color2 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					var multiplierCounter = 1;
					var multiplier = 1;
					var diff = color;
					while(multiplierCounter < 32) {
						if(Math.random() < translated) {
							diff = diff | multiplier;
						}
						multiplier *= 2;
						++multiplierCounter;
					}
					var r = ((diff >> 16 & 255) - (color >> 16 & 255)) * 0.5 + (color >> 16 & 255) | 0;
					var g = ((diff >> 8 & 255) - (color >> 8 & 255)) * 0.5 + (color >> 8 & 255) | 0;
					var b2 = ((diff & 255) - (color & 255)) * 0.5 + (color & 255) | 0;
					var a2 = ((diff >> 24 & 255) - (color >> 24 & 255)) * 0.5 + (color >> 24 & 255) | 0;
					var Alpha = a2;
					if(Alpha == null) {
						Alpha = 255;
					}
					var this2 = 0;
					var color1 = this2;
					var Alpha1 = Alpha;
					if(Alpha1 == null) {
						Alpha1 = 255;
					}
					color1 &= -16711681;
					color1 |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
					color1 &= -65281;
					color1 |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
					color1 &= -256;
					color1 |= b2 > 255 ? 255 : b2 < 0 ? 0 : b2;
					color1 &= 16777215;
					color1 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
					var color2 = color1;
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					image.b[position1] = color2 >> 24 & 255;
					image.b[position1 + 1] = color2 >> 16 & 255;
					image.b[position1 + 2] = color2 >> 8 & 255;
					image.b[position1 + 3] = color2 & 255;
				}
			}
		}
	}
	return image;
};
vision_Vision.dropOutNoise = function(image,percentage,threshold) {
	if(threshold == null) {
		threshold = 128;
	}
	if(percentage == null) {
		percentage = 5;
	}
	var translated = percentage / 100;
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				if(!(Math.random() > translated)) {
					if((color >> 16 & 255) > threshold || (color & 255) > threshold || (color >> 8 & 255) > threshold) {
						var position1 = (y * image.getUInt16(0) + x) * 4;
						position1 += vision_ds_Image.OFFSET;
						image.b[position1] = 0;
						image.b[position1 + 1] = 0;
						image.b[position1 + 2] = 0;
						image.b[position1 + 3] = 0;
					} else {
						var position2 = (y * image.getUInt16(0) + x) * 4;
						position2 += vision_ds_Image.OFFSET;
						image.b[position2] = 255;
						image.b[position2 + 1] = 255;
						image.b[position2 + 2] = 255;
						image.b[position2 + 3] = 255;
					}
				}
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					if(!(Math.random() > translated)) {
						if((color >> 16 & 255) > threshold || (color & 255) > threshold || (color >> 8 & 255) > threshold) {
							var position1 = (y * image.getUInt16(0) + x) * 4;
							position1 += vision_ds_Image.OFFSET;
							image.b[position1] = 0;
							image.b[position1 + 1] = 0;
							image.b[position1 + 2] = 0;
							image.b[position1 + 3] = 0;
						} else {
							var position2 = (y * image.getUInt16(0) + x) * 4;
							position2 += vision_ds_Image.OFFSET;
							image.b[position2] = 255;
							image.b[position2 + 1] = 255;
							image.b[position2 + 2] = 255;
							image.b[position2 + 3] = 255;
						}
					}
				}
			}
		}
	}
	return image;
};
vision_Vision.whiteNoise = function(image,percentage,whiteNoiseRange) {
	if(whiteNoiseRange == null) {
		whiteNoiseRange = 16;
	}
	if(percentage == null) {
		percentage = 25;
	}
	var this1 = new Array(whiteNoiseRange);
	var colorVector = this1;
	colorVector[0] = 0;
	colorVector[colorVector.length - 1] = 255;
	var step = Math.round(256 / whiteNoiseRange);
	var _g = 1;
	var _g1 = whiteNoiseRange - 1;
	while(_g < _g1) {
		var i = _g++;
		colorVector[i] = step * i;
	}
	var translated = percentage / 100;
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var first = this1;
				var randomAtRange = Math.floor(Math.random() * whiteNoiseRange);
				var value1 = Math.round((first >> 16 & 255) * (1 - translated) + colorVector[randomAtRange] * translated);
				first &= -16711681;
				first |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
				var value2 = Math.round((first & 255) * (1 - translated) + colorVector[randomAtRange] * translated);
				first &= -256;
				first |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
				var value3 = Math.round((first >> 8 & 255) * (1 - translated) + colorVector[randomAtRange] * translated);
				first &= -65281;
				first |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 8;
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = first >> 24 & 255;
				image.b[position1 + 1] = first >> 16 & 255;
				image.b[position1 + 2] = first >> 8 & 255;
				image.b[position1 + 3] = first & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var first = this1;
					var randomAtRange = Math.floor(Math.random() * whiteNoiseRange);
					var value1 = Math.round((first >> 16 & 255) * (1 - translated) + colorVector[randomAtRange] * translated);
					first &= -16711681;
					first |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
					var value2 = Math.round((first & 255) * (1 - translated) + colorVector[randomAtRange] * translated);
					first &= -256;
					first |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
					var value3 = Math.round((first >> 8 & 255) * (1 - translated) + colorVector[randomAtRange] * translated);
					first &= -65281;
					first |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 8;
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					image.b[position1] = first >> 24 & 255;
					image.b[position1 + 1] = first >> 16 & 255;
					image.b[position1 + 2] = first >> 8 & 255;
					image.b[position1 + 3] = first & 255;
				}
			}
		}
	}
	return image;
};
vision_Vision.normalize = function(image,rangeStart,rangeEnd) {
	if(rangeEnd == null) {
		rangeEnd = -1;
	}
	if(rangeStart == null) {
		rangeStart = 0;
	}
	var max = 0;
	var min = 0;
	var step = 0;
	var this1 = [rangeStart >> 16 & 255,rangeEnd >> 16 & 255];
	var values = this1;
	var max1 = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max1) {
			max1 = values[i];
		}
	}
	var value = max1;
	max &= -16711681;
	max |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var this1 = [rangeStart >> 16 & 255,rangeEnd >> 16 & 255];
	var values = this1;
	var min1 = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min1) {
			min1 = values[i];
		}
	}
	var value = min1;
	min &= -16711681;
	min |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var this1 = [rangeStart >> 8 & 255,rangeEnd >> 8 & 255];
	var values = this1;
	var max1 = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max1) {
			max1 = values[i];
		}
	}
	var value = max1;
	max &= -65281;
	max |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var this1 = [rangeStart >> 8 & 255,rangeEnd >> 8 & 255];
	var values = this1;
	var min1 = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min1) {
			min1 = values[i];
		}
	}
	var value = min1;
	min &= -65281;
	min |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var this1 = [rangeStart & 255,rangeEnd & 255];
	var values = this1;
	var max1 = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max1) {
			max1 = values[i];
		}
	}
	var value = max1;
	max &= -256;
	max |= value > 255 ? 255 : value < 0 ? 0 : value;
	var this1 = [rangeStart & 255,rangeEnd & 255];
	var values = this1;
	var min1 = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min1) {
			min1 = values[i];
		}
	}
	var value = min1;
	min &= -256;
	min |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = ((max >> 16 & 255) - (min >> 16 & 255)) / 255;
	var value1 = Math.round(value * 255);
	step &= -16711681;
	step |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	var value = ((max & 255) - (min & 255)) / 255;
	var value1 = Math.round(value * 255);
	step &= -256;
	step |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	var value = ((max >> 8 & 255) - (min >> 8 & 255)) / 255;
	var value1 = Math.round(value * 255);
	step &= -65281;
	step |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				var value1 = (color >> 16 & 255) / 255 * ((step >> 16 & 255) / 255);
				var value2 = Math.round(value1 * 255);
				color &= -16711681;
				color |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
				var value3 = (color & 255) / 255 * ((step & 255) / 255);
				var value4 = Math.round(value3 * 255);
				color &= -256;
				color |= value4 > 255 ? 255 : value4 < 0 ? 0 : value4;
				var value5 = (color >> 8 & 255) / 255 * ((step >> 8 & 255) / 255);
				var value6 = Math.round(value5 * 255);
				color &= -65281;
				color |= (value6 > 255 ? 255 : value6 < 0 ? 0 : value6) << 8;
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = color >> 24 & 255;
				image.b[position1 + 1] = color >> 16 & 255;
				image.b[position1 + 2] = color >> 8 & 255;
				image.b[position1 + 3] = color & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					var value1 = (color >> 16 & 255) / 255 * ((step >> 16 & 255) / 255);
					var value2 = Math.round(value1 * 255);
					color &= -16711681;
					color |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
					var value3 = (color & 255) / 255 * ((step & 255) / 255);
					var value4 = Math.round(value3 * 255);
					color &= -256;
					color |= value4 > 255 ? 255 : value4 < 0 ? 0 : value4;
					var value5 = (color >> 8 & 255) / 255 * ((step >> 8 & 255) / 255);
					var value6 = Math.round(value5 * 255);
					color &= -65281;
					color |= (value6 > 255 ? 255 : value6 < 0 ? 0 : value6) << 8;
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					image.b[position1] = color >> 24 & 255;
					image.b[position1 + 1] = color >> 16 & 255;
					image.b[position1 + 2] = color >> 8 & 255;
					image.b[position1 + 3] = color & 255;
				}
			}
		}
	}
	return image;
};
vision_Vision.limitColorRanges = function(image,rangeStart,rangeEnd) {
	if(rangeEnd == null) {
		rangeEnd = -1;
	}
	if(rangeStart == null) {
		rangeStart = 0;
	}
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				var value1 = vision_tools_MathTools.boundInt(color >> 16 & 255,rangeStart >> 16 & 255,rangeEnd >> 16 & 255);
				color &= -16711681;
				color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
				var value2 = vision_tools_MathTools.boundInt(color & 255,rangeStart & 255,rangeEnd & 255);
				color &= -256;
				color |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
				var value3 = vision_tools_MathTools.boundInt(color >> 8 & 255,rangeStart >> 8 & 255,rangeEnd >> 8 & 255);
				color &= -65281;
				color |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 8;
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = color >> 24 & 255;
				image.b[position1 + 1] = color >> 16 & 255;
				image.b[position1 + 2] = color >> 8 & 255;
				image.b[position1 + 3] = color & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					var value1 = vision_tools_MathTools.boundInt(color >> 16 & 255,rangeStart >> 16 & 255,rangeEnd >> 16 & 255);
					color &= -16711681;
					color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
					var value2 = vision_tools_MathTools.boundInt(color & 255,rangeStart & 255,rangeEnd & 255);
					color &= -256;
					color |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
					var value3 = vision_tools_MathTools.boundInt(color >> 8 & 255,rangeStart >> 8 & 255,rangeEnd >> 8 & 255);
					color &= -65281;
					color |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 8;
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					image.b[position1] = color >> 24 & 255;
					image.b[position1 + 1] = color >> 16 & 255;
					image.b[position1 + 2] = color >> 8 & 255;
					image.b[position1 + 3] = color & 255;
				}
			}
		}
	}
	return image;
};
vision_Vision.replaceColorRanges = function(image,ranges) {
	if(ranges == null) {
		return image;
	}
	var _g = 0;
	while(_g < ranges.length) {
		var range = ranges[_g];
		++_g;
		var rangeStart = range.rangeStart;
		var rangeEnd = range.rangeEnd;
		var $with = range.replacement;
		if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
			var _g1 = 0;
			var _g2 = image.getUInt16(0);
			while(_g1 < _g2) {
				var x = _g1++;
				var _g3 = 0;
				var _g4 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				while(_g3 < _g4) {
					var y = _g3++;
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					var original = color;
					var value1 = vision_tools_MathTools.isBetweenRanges(color >> 16 & 255,{ start : rangeStart >> 16 & 255, end : rangeEnd >> 16 & 255}) ? color >> 16 & 255 : $with >> 16 & 255;
					color &= -16711681;
					color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
					var value2 = vision_tools_MathTools.isBetweenRanges(color & 255,{ start : rangeStart & 255, end : rangeEnd & 255}) ? color & 255 : $with & 255;
					color &= -256;
					color |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
					var value3 = vision_tools_MathTools.isBetweenRanges(color >> 8 & 255,{ start : rangeStart >> 8 & 255, end : rangeEnd >> 8 & 255}) ? color >> 8 & 255 : $with >> 8 & 255;
					color &= -65281;
					color |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 8;
					if(color == original) {
						var position1 = (y * image.getUInt16(0) + x) * 4;
						position1 += vision_ds_Image.OFFSET;
						image.b[position1] = color >> 24 & 255;
						image.b[position1 + 1] = color >> 16 & 255;
						image.b[position1 + 2] = color >> 8 & 255;
						image.b[position1 + 3] = color & 255;
					} else {
						var position2 = (y * image.getUInt16(0) + x) * 4;
						position2 += vision_ds_Image.OFFSET;
						image.b[position2] = $with >> 24 & 255;
						image.b[position2 + 1] = $with >> 16 & 255;
						image.b[position2 + 2] = $with >> 8 & 255;
						image.b[position2 + 3] = $with & 255;
					}
				}
			}
		} else {
			var _g5 = 0;
			var _g6 = image.getUInt16(0);
			while(_g5 < _g6) {
				var x1 = _g5++;
				var _g7 = 0;
				var _g8 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				while(_g7 < _g8) {
					var y1 = _g7++;
					var v = null;
					var tmp;
					if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g9 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g10 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g11 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var image1 = image.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g9,_g10,_g11,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x3 = view.x + view.width / 2 + c;
								var y3 = view.y + view.height / 2;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var f2_x = x3;
								var f2_y = y3;
								var x4 = x1;
								var y4 = y1;
								if(y4 == null) {
									y4 = 0;
								}
								if(x4 == null) {
									x4 = 0;
								}
								var p_x = x4;
								var p_y = y4;
								var x5 = p_x - f1_x;
								var y5 = p_y - f1_y;
								var x6 = p_x - f2_x;
								var y6 = p_y - f2_y;
								has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 - c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f1_x1 = x7;
								var f1_y1 = y7;
								var x8 = view.x + view.width / 2;
								var y8 = view.y + view.height / 2 + c1;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var f2_x1 = x8;
								var f2_y1 = y8;
								var x9 = x1;
								var y9 = y1;
								if(y9 == null) {
									y9 = 0;
								}
								if(x9 == null) {
									x9 = 0;
								}
								var p_x1 = x9;
								var p_y1 = y9;
								var x10 = p_x1 - f1_x1;
								var y10 = p_y1 - f1_y1;
								var x11 = p_x1 - f2_x1;
								var y11 = p_y1 - f2_y1;
								has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x12 = x1;
								var y12 = y1;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var point1_x = x12;
								var point1_y = y12;
								var x13 = view.x + view.width / 2;
								var y13 = view.y + view.height / 2;
								if(y13 == null) {
									y13 = 0;
								}
								if(x13 == null) {
									x13 = 0;
								}
								var point2_x = x13;
								var point2_y = y13;
								var x14 = point2_x - point1_x;
								var y14 = point2_y - point1_y;
								has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position3 = (y1 * image.getUInt16(0) + x1) * 4;
						position3 += vision_ds_Image.OFFSET;
						var value4 = image.b[position3] << 24 | image.b[position3 + 1] << 16 | image.b[position3 + 2] << 8 | image.b[position3 + 3];
						if(value4 == null) {
							value4 = 0;
						}
						var this2 = value4;
						var color1 = this2;
						var original1 = color1;
						var value5 = vision_tools_MathTools.isBetweenRanges(color1 >> 16 & 255,{ start : rangeStart >> 16 & 255, end : rangeEnd >> 16 & 255}) ? color1 >> 16 & 255 : $with >> 16 & 255;
						color1 &= -16711681;
						color1 |= (value5 > 255 ? 255 : value5 < 0 ? 0 : value5) << 16;
						var value6 = vision_tools_MathTools.isBetweenRanges(color1 & 255,{ start : rangeStart & 255, end : rangeEnd & 255}) ? color1 & 255 : $with & 255;
						color1 &= -256;
						color1 |= value6 > 255 ? 255 : value6 < 0 ? 0 : value6;
						var value7 = vision_tools_MathTools.isBetweenRanges(color1 >> 8 & 255,{ start : rangeStart >> 8 & 255, end : rangeEnd >> 8 & 255}) ? color1 >> 8 & 255 : $with >> 8 & 255;
						color1 &= -65281;
						color1 |= (value7 > 255 ? 255 : value7 < 0 ? 0 : value7) << 8;
						if(color1 == original1) {
							var position4 = (y1 * image.getUInt16(0) + x1) * 4;
							position4 += vision_ds_Image.OFFSET;
							image.b[position4] = color1 >> 24 & 255;
							image.b[position4 + 1] = color1 >> 16 & 255;
							image.b[position4 + 2] = color1 >> 8 & 255;
							image.b[position4 + 3] = color1 & 255;
						} else {
							var position5 = (y1 * image.getUInt16(0) + x1) * 4;
							position5 += vision_ds_Image.OFFSET;
							image.b[position5] = $with >> 24 & 255;
							image.b[position5 + 1] = $with >> 16 & 255;
							image.b[position5 + 2] = $with >> 8 & 255;
							image.b[position5 + 3] = $with & 255;
						}
					}
				}
			}
		}
	}
	return image;
};
vision_Vision.convolve = function(image,kernal) {
	if(kernal == null) {
		kernal = vision_ds_Kernal2D.Identity;
	}
	var matrix;
	if(((kernal) instanceof Array)) {
		matrix = kernal;
	} else {
		var _g = js_Boot.__cast(kernal , vision_ds_Kernal2D);
		switch(_g._hx_index) {
		case 0:
			matrix = [[0,0,0],[0,1,0],[0,0,0]];
			break;
		case 1:
			matrix = [[1,1,1],[1,1,1],[1,1,1]];
			break;
		case 2:
			matrix = [[0,1,0],[1,-4,1],[0,1,0]];
			break;
		case 3:
			matrix = [[0,-1,0],[-1,4,-1],[0,-1,0]];
			break;
		case 4:
			matrix = [[-1,-1,-1],[-1,4,-1],[-1,-1,-1]];
			break;
		case 5:
			matrix = [[-1,-1,-1],[-1,7.75,-1],[-1,-1,-1]];
			break;
		case 6:
			matrix = [[0,-1,0],[-1,5,-1],[0,-1,0]];
			break;
		case 7:
			matrix = [[1,4,6,4,1],[4,16,24,16,4],[6,24,-476,24,6],[4,16,24,16,4],[1,4,6,4,1]];
			break;
		case 8:
			var corner = _g.corner;
			var edge = _g.edge;
			var center = _g.center;
			matrix = [[corner,edge,corner],[edge,center,edge],[corner,edge,corner]];
			break;
		case 9:
			var farCorner = _g.farCorner;
			var farEdge = _g.farEdge;
			var edge = _g.edge;
			var midCorner = _g.midCorner;
			var midEdge = _g.midEdge;
			var center = _g.center;
			matrix = [[farCorner,farEdge,edge,farEdge,farCorner],[farEdge,midCorner,midEdge,midCorner,farEdge],[edge,midEdge,center,midEdge,edge],[farEdge,midCorner,midEdge,midCorner,farEdge],[farCorner,farEdge,edge,farEdge,farCorner]];
			break;
		case 10:
			var kernal = _g.kernal;
			matrix = kernal;
			break;
		case 11:
			var size = _g.size;
			var sigma = _g.sigma;
			var array = vision_algorithms_Gaussian.createKernalOfSize(size,sigma).inner;
			var raised = [];
			var _g = 0;
			var _g1 = array.length;
			while(_g < _g1) {
				var i = _g++;
				if(raised[Math.floor(i / size)] == null) {
					raised[Math.floor(i / size)] = [];
				}
				raised[Math.floor(i / size)][i % size] = array[i];
			}
			matrix = raised;
			break;
		}
	}
	var convolved = vision_ds_Image.clone(image);
	var maxLength = -1;
	var _g = 0;
	while(_g < matrix.length) {
		var array = matrix[_g];
		++_g;
		if(array.length > maxLength) {
			maxLength = array.length;
		}
	}
	var flat = [];
	var _g = 0;
	while(_g < matrix.length) {
		var item = matrix[_g];
		++_g;
		flat = flat.concat(item);
	}
	var flatMatrix = flat;
	var denominator = 0.;
	var _g = 0;
	while(_g < flatMatrix.length) {
		var number = flatMatrix[_g];
		++_g;
		denominator += number;
	}
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var _ = this1;
				var i = 0;
				var red = 0.;
				var green = 0.;
				var blue = 0.;
				var circular = false;
				if(circular == null) {
					circular = false;
				}
				var _g2_image = image;
				var _g2_roundedDown = maxLength - 1 >> 1;
				var _g2_x = x;
				var _g2_y = y;
				var _g2_circular = circular;
				var _g2_X = -_g2_roundedDown;
				var _g2_Y = -_g2_roundedDown;
				while(_g2_X <= _g2_roundedDown && _g2_Y <= _g2_roundedDown) {
					while(true) {
						++_g2_Y;
						if(_g2_Y > _g2_roundedDown) {
							_g2_Y = -_g2_roundedDown;
							++_g2_X;
						}
						var tmp;
						if(_g2_circular) {
							var x1 = _g2_X;
							var y1 = _g2_Y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x2 = _g2_roundedDown;
							var y2 = _g2_roundedDown;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x3 = point2_x - point1_x;
							var y3 = point2_y - point1_y;
							tmp = Math.sqrt(x3 * x3 + y3 * y3) > _g2_roundedDown;
						} else {
							tmp = false;
						}
						if(!tmp) {
							break;
						}
					}
					var this2 = _g2_image;
					var x4 = _g2_x + _g2_X;
					var y4 = _g2_y + _g2_Y;
					var color;
					if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this3 = [x4,this2.getUInt16(0)];
						var values = this3;
						var max = values[0];
						var _g4 = 0;
						var _g5 = values.length;
						while(_g4 < _g5) {
							var i1 = _g4++;
							if(values[i1] > max) {
								max = values[i1];
							}
						}
						var this4 = [max,0];
						var values1 = this4;
						var min = values1[0];
						var _g6 = 0;
						var _g7 = values1.length;
						while(_g6 < _g7) {
							var i2 = _g6++;
							if(values1[i2] < min) {
								min = values1[i2];
							}
						}
						var x5 = min;
						var this5 = [y4,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4))];
						var values2 = this5;
						var max1 = values2[0];
						var _g8 = 0;
						var _g9 = values2.length;
						while(_g8 < _g9) {
							var i3 = _g8++;
							if(values2[i3] > max1) {
								max1 = values2[i3];
							}
						}
						var this6 = [max1,0];
						var values3 = this6;
						var min1 = values3[0];
						var _g10 = 0;
						var _g11 = values3.length;
						while(_g10 < _g11) {
							var i4 = _g10++;
							if(values3[i4] < min1) {
								min1 = values3[i4];
							}
						}
						var y5 = min1;
						if(!(x5 >= 0 && y5 >= 0 && x5 < this2.getUInt16(0) && y5 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x = x5;
							var this_y = y5;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
						}
						var position1 = (y5 * this2.getUInt16(0) + x5) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this7 = value1;
						color = this7;
					} else {
						if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x1 = x4;
							var this_y1 = y4;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
						}
						var position2 = (y4 * this2.getUInt16(0) + x4) * 4;
						position2 += vision_ds_Image.OFFSET;
						var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
						if(value2 == null) {
							value2 = 0;
						}
						var this8 = value2;
						color = this8;
					}
					red += flatMatrix[i] * (color >> 16 & 255);
					blue += flatMatrix[i] * (color & 255);
					green += flatMatrix[i] * (color >> 8 & 255);
					++i;
				}
				red /= denominator;
				green /= denominator;
				blue /= denominator;
				var Red = red | 0;
				var Green = green | 0;
				var Blue = blue | 0;
				var this9 = 0;
				var color1 = this9;
				var Alpha = 255;
				if(Alpha == null) {
					Alpha = 255;
				}
				color1 &= -16711681;
				color1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
				color1 &= -65281;
				color1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
				color1 &= -256;
				color1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
				color1 &= 16777215;
				color1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
				var color2 = color1;
				var position3 = (y * convolved.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				convolved.b[position3] = color2 >> 24 & 255;
				convolved.b[position3 + 1] = color2 >> 16 & 255;
				convolved.b[position3 + 2] = color2 >> 8 & 255;
				convolved.b[position3 + 3] = color2 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var _ = this1;
					var i = 0;
					var red = 0.;
					var green = 0.;
					var blue = 0.;
					var circular = false;
					if(circular == null) {
						circular = false;
					}
					var _g2_image = image;
					var _g2_roundedDown = maxLength - 1 >> 1;
					var _g2_x = x;
					var _g2_y = y;
					var _g2_circular = circular;
					var _g2_X = -_g2_roundedDown;
					var _g2_Y = -_g2_roundedDown;
					while(_g2_X <= _g2_roundedDown && _g2_Y <= _g2_roundedDown) {
						while(true) {
							++_g2_Y;
							if(_g2_Y > _g2_roundedDown) {
								_g2_Y = -_g2_roundedDown;
								++_g2_X;
							}
							var tmp1;
							if(_g2_circular) {
								var x14 = _g2_X;
								var y14 = _g2_Y;
								if(y14 == null) {
									y14 = 0;
								}
								if(x14 == null) {
									x14 = 0;
								}
								var point1_x1 = x14;
								var point1_y1 = y14;
								var x15 = _g2_roundedDown;
								var y15 = _g2_roundedDown;
								if(y15 == null) {
									y15 = 0;
								}
								if(x15 == null) {
									x15 = 0;
								}
								var point2_x1 = x15;
								var point2_y1 = y15;
								var x16 = point2_x1 - point1_x1;
								var y16 = point2_y1 - point1_y1;
								tmp1 = Math.sqrt(x16 * x16 + y16 * y16) > _g2_roundedDown;
							} else {
								tmp1 = false;
							}
							if(!tmp1) {
								break;
							}
						}
						var this2 = _g2_image;
						var x17 = _g2_x + _g2_X;
						var y17 = _g2_y + _g2_Y;
						var color;
						if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this3 = [x17,this2.getUInt16(0)];
							var values = this3;
							var max = values[0];
							var _g7 = 0;
							var _g8 = values.length;
							while(_g7 < _g8) {
								var i1 = _g7++;
								if(values[i1] > max) {
									max = values[i1];
								}
							}
							var this4 = [max,0];
							var values1 = this4;
							var min = values1[0];
							var _g9 = 0;
							var _g10 = values1.length;
							while(_g9 < _g10) {
								var i2 = _g9++;
								if(values1[i2] < min) {
									min = values1[i2];
								}
							}
							var x18 = min;
							var this5 = [y17,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4))];
							var values2 = this5;
							var max1 = values2[0];
							var _g11 = 0;
							var _g12 = values2.length;
							while(_g11 < _g12) {
								var i3 = _g11++;
								if(values2[i3] > max1) {
									max1 = values2[i3];
								}
							}
							var this6 = [max1,0];
							var values3 = this6;
							var min1 = values3[0];
							var _g13 = 0;
							var _g14 = values3.length;
							while(_g13 < _g14) {
								var i4 = _g13++;
								if(values3[i4] < min1) {
									min1 = values3[i4];
								}
							}
							var y18 = min1;
							if(!(x18 >= 0 && y18 >= 0 && x18 < this2.getUInt16(0) && y18 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x = x18;
								var this_y = y18;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
							}
							var position1 = (y18 * this2.getUInt16(0) + x18) * 4;
							position1 += vision_ds_Image.OFFSET;
							var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
							if(value1 == null) {
								value1 = 0;
							}
							var this7 = value1;
							color = this7;
						} else {
							if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x1 = x17;
								var this_y1 = y17;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
							}
							var position2 = (y17 * this2.getUInt16(0) + x17) * 4;
							position2 += vision_ds_Image.OFFSET;
							var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
							if(value2 == null) {
								value2 = 0;
							}
							var this8 = value2;
							color = this8;
						}
						red += flatMatrix[i] * (color >> 16 & 255);
						blue += flatMatrix[i] * (color & 255);
						green += flatMatrix[i] * (color >> 8 & 255);
						++i;
					}
					red /= denominator;
					green /= denominator;
					blue /= denominator;
					var Red = red | 0;
					var Green = green | 0;
					var Blue = blue | 0;
					var this9 = 0;
					var color1 = this9;
					var Alpha = 255;
					if(Alpha == null) {
						Alpha = 255;
					}
					color1 &= -16711681;
					color1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
					color1 &= -65281;
					color1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
					color1 &= -256;
					color1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
					color1 &= 16777215;
					color1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
					var color2 = color1;
					var position3 = (y * convolved.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					convolved.b[position3] = color2 >> 24 & 255;
					convolved.b[position3 + 1] = color2 >> 16 & 255;
					convolved.b[position3 + 2] = color2 >> 8 & 255;
					convolved.b[position3 + 3] = color2 & 255;
				}
			}
		}
	}
	image = convolved;
	return image;
};
vision_Vision.nearestNeighborBlur = function(image,iterations) {
	if(iterations == null) {
		iterations = 1;
	}
	var _g = 0;
	var _g1 = iterations;
	while(_g < _g1) {
		var i = _g++;
		image = vision_Vision.convolve(image,vision_ds_Kernal2D.BoxBlur);
	}
	return image;
};
vision_Vision.gaussianBlur = function(image,sigma,kernalSize) {
	if(kernalSize == null) {
		kernalSize = 5;
	}
	if(sigma == null) {
		sigma = 1;
	}
	return vision_Vision.convolve(image,vision_ds_Kernal2D.GaussianBlur(kernalSize,sigma));
};
vision_Vision.medianBlur = function(image,kernalSize) {
	if(kernalSize == null) {
		kernalSize = 5;
	}
	var median = vision_ds_Image.clone(image);
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				var width = kernalSize;
				var height = kernalSize;
				var neighbors_width = width;
				var neighbors_height = height;
				var neighbors_inner = [];
				neighbors_inner.length = width * height;
				var i = 0;
				var circular = false;
				if(circular == null) {
					circular = false;
				}
				var _g_image = image;
				var _g_roundedDown = kernalSize - 1 >> 1;
				var _g_x = x;
				var _g_y = y;
				var _g_circular = circular;
				var _g_X = -_g_roundedDown;
				var _g_Y = -_g_roundedDown;
				while(_g_X <= _g_roundedDown && _g_Y <= _g_roundedDown) {
					while(true) {
						++_g_Y;
						if(_g_Y > _g_roundedDown) {
							_g_Y = -_g_roundedDown;
							++_g_X;
						}
						var tmp;
						if(_g_circular) {
							var x1 = _g_X;
							var y1 = _g_Y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x2 = _g_roundedDown;
							var y2 = _g_roundedDown;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x3 = point2_x - point1_x;
							var y3 = point2_y - point1_y;
							tmp = Math.sqrt(x3 * x3 + y3 * y3) > _g_roundedDown;
						} else {
							tmp = false;
						}
						if(!tmp) {
							break;
						}
					}
					var this2 = _g_image;
					var x4 = _g_x + _g_X;
					var y4 = _g_y + _g_Y;
					var neighbor;
					if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this3 = [x4,this2.getUInt16(0)];
						var values = this3;
						var max = values[0];
						var _g4 = 0;
						var _g5 = values.length;
						while(_g4 < _g5) {
							var i1 = _g4++;
							if(values[i1] > max) {
								max = values[i1];
							}
						}
						var this4 = [max,0];
						var values1 = this4;
						var min = values1[0];
						var _g6 = 0;
						var _g7 = values1.length;
						while(_g6 < _g7) {
							var i2 = _g6++;
							if(values1[i2] < min) {
								min = values1[i2];
							}
						}
						var x5 = min;
						var this5 = [y4,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4))];
						var values2 = this5;
						var max1 = values2[0];
						var _g8 = 0;
						var _g9 = values2.length;
						while(_g8 < _g9) {
							var i3 = _g8++;
							if(values2[i3] > max1) {
								max1 = values2[i3];
							}
						}
						var this6 = [max1,0];
						var values3 = this6;
						var min1 = values3[0];
						var _g10 = 0;
						var _g11 = values3.length;
						while(_g10 < _g11) {
							var i4 = _g10++;
							if(values3[i4] < min1) {
								min1 = values3[i4];
							}
						}
						var y5 = min1;
						if(!(x5 >= 0 && y5 >= 0 && x5 < this2.getUInt16(0) && y5 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x = x5;
							var this_y = y5;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
						}
						var position1 = (y5 * this2.getUInt16(0) + x5) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this7 = value1;
						neighbor = this7;
					} else {
						if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this_x1 = x4;
							var this_y1 = y4;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
						}
						var position2 = (y4 * this2.getUInt16(0) + x4) * 4;
						position2 += vision_ds_Image.OFFSET;
						var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
						if(value2 == null) {
							value2 = 0;
						}
						var this8 = value2;
						neighbor = this8;
					}
					neighbors_inner[i++] = neighbor;
				}
				var neighbors = neighbors_inner;
				haxe_ds_ArraySort.sort(neighbors,function(a,b) {
					return a - b;
				});
				var color1 = neighbors[neighbors.length / 2 | 0];
				var position3 = (y * median.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				median.b[position3] = color1 >> 24 & 255;
				median.b[position3 + 1] = color1 >> 16 & 255;
				median.b[position3 + 2] = color1 >> 8 & 255;
				median.b[position3 + 3] = color1 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					var width = kernalSize;
					var height = kernalSize;
					var neighbors_width = width;
					var neighbors_height = height;
					var neighbors_inner = [];
					neighbors_inner.length = width * height;
					var i = 0;
					var circular = false;
					if(circular == null) {
						circular = false;
					}
					var _g_image = image;
					var _g_roundedDown = kernalSize - 1 >> 1;
					var _g_x = x;
					var _g_y = y;
					var _g_circular = circular;
					var _g_X = -_g_roundedDown;
					var _g_Y = -_g_roundedDown;
					while(_g_X <= _g_roundedDown && _g_Y <= _g_roundedDown) {
						while(true) {
							++_g_Y;
							if(_g_Y > _g_roundedDown) {
								_g_Y = -_g_roundedDown;
								++_g_X;
							}
							var tmp1;
							if(_g_circular) {
								var x14 = _g_X;
								var y14 = _g_Y;
								if(y14 == null) {
									y14 = 0;
								}
								if(x14 == null) {
									x14 = 0;
								}
								var point1_x1 = x14;
								var point1_y1 = y14;
								var x15 = _g_roundedDown;
								var y15 = _g_roundedDown;
								if(y15 == null) {
									y15 = 0;
								}
								if(x15 == null) {
									x15 = 0;
								}
								var point2_x1 = x15;
								var point2_y1 = y15;
								var x16 = point2_x1 - point1_x1;
								var y16 = point2_y1 - point1_y1;
								tmp1 = Math.sqrt(x16 * x16 + y16 * y16) > _g_roundedDown;
							} else {
								tmp1 = false;
							}
							if(!tmp1) {
								break;
							}
						}
						var this2 = _g_image;
						var x17 = _g_x + _g_X;
						var y17 = _g_y + _g_Y;
						var neighbor;
						if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
							var this3 = [x17,this2.getUInt16(0)];
							var values = this3;
							var max = values[0];
							var _g7 = 0;
							var _g8 = values.length;
							while(_g7 < _g8) {
								var i1 = _g7++;
								if(values[i1] > max) {
									max = values[i1];
								}
							}
							var this4 = [max,0];
							var values1 = this4;
							var min = values1[0];
							var _g9 = 0;
							var _g10 = values1.length;
							while(_g9 < _g10) {
								var i2 = _g9++;
								if(values1[i2] < min) {
									min = values1[i2];
								}
							}
							var x18 = min;
							var this5 = [y17,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4))];
							var values2 = this5;
							var max1 = values2[0];
							var _g11 = 0;
							var _g12 = values2.length;
							while(_g11 < _g12) {
								var i3 = _g11++;
								if(values2[i3] > max1) {
									max1 = values2[i3];
								}
							}
							var this6 = [max1,0];
							var values3 = this6;
							var min1 = values3[0];
							var _g13 = 0;
							var _g14 = values3.length;
							while(_g13 < _g14) {
								var i4 = _g13++;
								if(values3[i4] < min1) {
									min1 = values3[i4];
								}
							}
							var y18 = min1;
							if(!(x18 >= 0 && y18 >= 0 && x18 < this2.getUInt16(0) && y18 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x = x18;
								var this_y = y18;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
							}
							var position1 = (y18 * this2.getUInt16(0) + x18) * 4;
							position1 += vision_ds_Image.OFFSET;
							var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
							if(value1 == null) {
								value1 = 0;
							}
							var this7 = value1;
							neighbor = this7;
						} else {
							if(!(x17 >= 0 && y17 >= 0 && x17 < this2.getUInt16(0) && y17 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
								var this_x1 = x17;
								var this_y1 = y17;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
							}
							var position2 = (y17 * this2.getUInt16(0) + x17) * 4;
							position2 += vision_ds_Image.OFFSET;
							var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
							if(value2 == null) {
								value2 = 0;
							}
							var this8 = value2;
							neighbor = this8;
						}
						neighbors_inner[i++] = neighbor;
					}
					var neighbors = neighbors_inner;
					haxe_ds_ArraySort.sort(neighbors,function(a,b) {
						return a - b;
					});
					var color1 = neighbors[neighbors.length / 2 | 0];
					var position3 = (y * median.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					median.b[position3] = color1 >> 24 & 255;
					median.b[position3 + 1] = color1 >> 16 & 255;
					median.b[position3 + 2] = color1 >> 8 & 255;
					median.b[position3 + 3] = color1 & 255;
				}
			}
		}
	}
	image = median;
	return image;
};
vision_Vision.simpleLine2DDetection = function(image,accuracy,minLineLength,speedToAccuracyRatio) {
	if(speedToAccuracyRatio == null) {
		speedToAccuracyRatio = vision_ds_specifics_AlgorithmSettings.Medium_Intermediate;
	}
	if(minLineLength == null) {
		minLineLength = 10;
	}
	if(accuracy == null) {
		accuracy = 50;
	}
	var kernalSize;
	switch(speedToAccuracyRatio._hx_index) {
	case 0:
		kernalSize = 1;
		break;
	case 1:
		kernalSize = 3;
		break;
	case 2:
		kernalSize = 5;
		break;
	case 3:
		kernalSize = 7;
		break;
	case 4:
		kernalSize = 9;
		break;
	}
	var this1 = vision_ds_Image.clone(image);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,this1.getUInt16(0));
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var edgeDetected = vision_Vision.cannyEdgeDetection(this1,1,kernalSize,0.05,0.16);
	var lines = [];
	var actualLines = [];
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var p_x = x1;
			var p_y = y1;
			var this1 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
			lines.push(vision_algorithms_SimpleLineDetector.findLineFromPoint(edgeDetected,this1,minLineLength));
			var x2 = x;
			var y2 = y;
			if(y2 == null) {
				y2 = 0;
			}
			if(x2 == null) {
				x2 = 0;
			}
			var p_x1 = x2;
			var p_y1 = y2;
			var this2 = new vision_ds__$IntPoint2D_Impl(p_x1 | 0,p_y1 | 0);
			lines.push(vision_algorithms_SimpleLineDetector.findLineFromPoint(edgeDetected,this2,minLineLength,true));
			var x3 = x;
			var y3 = y;
			if(y3 == null) {
				y3 = 0;
			}
			if(x3 == null) {
				x3 = 0;
			}
			var p_x2 = x3;
			var p_y2 = y3;
			var this3 = new vision_ds__$IntPoint2D_Impl(p_x2 | 0,p_y2 | 0);
			lines.push(vision_algorithms_SimpleLineDetector.findLineFromPoint(edgeDetected,this3,minLineLength,false,true));
			var x4 = x;
			var y4 = y;
			if(y4 == null) {
				y4 = 0;
			}
			if(x4 == null) {
				x4 = 0;
			}
			var p_x3 = x4;
			var p_y3 = y4;
			var this4 = new vision_ds__$IntPoint2D_Impl(p_x3 | 0,p_y3 | 0);
			lines.push(vision_algorithms_SimpleLineDetector.findLineFromPoint(edgeDetected,this4,minLineLength,true,true));
		}
	}
	var _g = 0;
	while(_g < lines.length) {
		var l = lines[_g];
		++_g;
		if(l == null) {
			continue;
		}
		if(vision_algorithms_SimpleLineDetector.lineCoveragePercentage(edgeDetected,l) < accuracy) {
			continue;
		}
		actualLines.push(l);
	}
	lines = [];
	var this1 = vision_ds_Image.clone(image);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,this1.getUInt16(0));
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var this2 = this1;
	var inter = vision_ds_Image.clone(this2);
	if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = this2.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * this2.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				var x1 = inter.getUInt16(0) - x - 1;
				var position1 = (y * inter.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this3 = value1;
				var color1 = this3;
				var position2 = (y * this2.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				this2.b[position2] = color1 >> 24 & 255;
				this2.b[position2 + 1] = color1 >> 16 & 255;
				this2.b[position2 + 2] = color1 >> 8 & 255;
				this2.b[position2 + 3] = color1 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = this2.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var edgeDetected1;
				if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this2.getUInt16(0) || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					edgeDetected1 = x >= 0 && y >= 0 && x < this2.getUInt16(0) && y < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this1 = this2.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					edgeDetected1 = has;
				}
				if(edgeDetected1) {
					var position = (y * this2.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = this2.b[position] << 24 | this2.b[position + 1] << 16 | this2.b[position + 2] << 8 | this2.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this3 = value;
					var color = this3;
					var x14 = inter.getUInt16(0) - x - 1;
					var position1 = (y * inter.getUInt16(0) + x14) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this4 = value1;
					var color1 = this4;
					var position2 = (y * this2.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					this2.b[position2] = color1 >> 24 & 255;
					this2.b[position2 + 1] = color1 >> 16 & 255;
					this2.b[position2 + 2] = color1 >> 8 & 255;
					this2.b[position2 + 3] = color1 & 255;
				}
			}
		}
	}
	edgeDetected = vision_Vision.cannyEdgeDetection(this2,1,kernalSize,0.05,0.16);
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var p_x = x1;
			var p_y = y1;
			var this1 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
			lines.push(vision_algorithms_SimpleLineDetector.findLineFromPoint(edgeDetected,this1,minLineLength));
			var x2 = x;
			var y2 = y;
			if(y2 == null) {
				y2 = 0;
			}
			if(x2 == null) {
				x2 = 0;
			}
			var p_x1 = x2;
			var p_y1 = y2;
			var this2 = new vision_ds__$IntPoint2D_Impl(p_x1 | 0,p_y1 | 0);
			lines.push(vision_algorithms_SimpleLineDetector.findLineFromPoint(edgeDetected,this2,minLineLength,true));
			var x3 = x;
			var y3 = y;
			if(y3 == null) {
				y3 = 0;
			}
			if(x3 == null) {
				x3 = 0;
			}
			var p_x2 = x3;
			var p_y2 = y3;
			var this3 = new vision_ds__$IntPoint2D_Impl(p_x2 | 0,p_y2 | 0);
			lines.push(vision_algorithms_SimpleLineDetector.findLineFromPoint(edgeDetected,this3,minLineLength,false,true));
			var x4 = x;
			var y4 = y;
			if(y4 == null) {
				y4 = 0;
			}
			if(x4 == null) {
				x4 = 0;
			}
			var p_x3 = x4;
			var p_y3 = y4;
			var this4 = new vision_ds__$IntPoint2D_Impl(p_x3 | 0,p_y3 | 0);
			lines.push(vision_algorithms_SimpleLineDetector.findLineFromPoint(edgeDetected,this4,minLineLength,true,true));
		}
	}
	var _g = 0;
	while(_g < lines.length) {
		var l = lines[_g];
		++_g;
		if(l == null) {
			continue;
		}
		if(vision_algorithms_SimpleLineDetector.lineCoveragePercentage(edgeDetected,l) < accuracy) {
			continue;
		}
		var rect = new vision_ds_Rectangle(0,0,image.getUInt16(0),Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
		var diffSX = l.start.x - rect.x;
		var diffEX = l.end.x - rect.x;
		l.start.x = rect.x + rect.width - diffSX;
		l.end.x = rect.x + rect.width - diffEX;
		actualLines.push(l);
	}
	return actualLines;
};
vision_Vision.sobelEdgeDiffOperator = function(image) {
	return vision_algorithms_Sobel.convolveWithSobelOperator(vision_Vision.grayscale(vision_ds_Image.clone(image)));
};
vision_Vision.perwittEdgeDiffOperator = function(image) {
	return vision_algorithms_Perwitt.convolveWithPerwittOperator(vision_Vision.grayscale(vision_ds_Image.clone(image)));
};
vision_Vision.robertEdgeDiffOperator = function(image) {
	return vision_algorithms_RobertsCross.convolveWithRobertsCross(vision_Vision.grayscale(vision_ds_Image.clone(image)));
};
vision_Vision.laplacianEdgeDiffOperator = function(image,filterPositive) {
	if(filterPositive == null) {
		filterPositive = true;
	}
	return vision_algorithms_Laplacian.convolveWithLaplacianOperator(vision_ds_Image.clone(image),filterPositive);
};
vision_Vision.cannyEdgeDetection = function(image,sigma,kernalSize,lowThreshold,highThreshold) {
	if(highThreshold == null) {
		highThreshold = 0.2;
	}
	if(lowThreshold == null) {
		lowThreshold = 0.05;
	}
	if(kernalSize == null) {
		kernalSize = 5;
	}
	if(sigma == null) {
		sigma = 1;
	}
	var this1 = vision_ds_Image.clone(image);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,this1.getUInt16(0));
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var cannyObject = this1;
	return vision_Vision.blackAndWhite(vision_algorithms_Canny.applyHysteresis(vision_algorithms_Canny.nonMaxSuppression(vision_algorithms_Canny.applySobelFilters(vision_algorithms_Canny.applyGaussian(vision_algorithms_Canny.grayscale(cannyObject),kernalSize,sigma))),highThreshold,lowThreshold),40);
};
vision_Vision.sobelEdgeDetection = function(image,threshold) {
	if(threshold == null) {
		threshold = 500;
	}
	return vision_algorithms_Sobel.detectEdges(image,threshold);
};
vision_Vision.perwittEdgeDetection = function(image,threshold) {
	if(threshold == null) {
		threshold = 100;
	}
	return vision_algorithms_Perwitt.detectEdges(image,threshold);
};
vision_Vision.laplacianOfGaussianEdgeDetection = function(image,threshold,filterPositive,sigma,kernalSize) {
	if(kernalSize == null) {
		kernalSize = 3;
	}
	if(sigma == null) {
		sigma = 1;
	}
	if(filterPositive == null) {
		filterPositive = true;
	}
	if(threshold == null) {
		threshold = 2;
	}
	return vision_algorithms_Laplacian.laplacianOfGaussian(image,kernalSize,sigma,threshold,filterPositive);
};
vision_Vision.convolutionRidgeDetection = function(image,normalizationRangeStart,normalizationRangeEnd,refine) {
	if(refine == null) {
		refine = false;
	}
	if(normalizationRangeEnd == null) {
		normalizationRangeEnd = -4473925;
	}
	if(normalizationRangeStart == null) {
		normalizationRangeStart = -12303292;
	}
	var this1 = vision_ds_Image.clone(image);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,this1.getUInt16(0));
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var clone = this1;
	vision_Vision.grayscale(clone);
	vision_Vision.normalize(clone,normalizationRangeStart,normalizationRangeEnd);
	clone = vision_Vision.convolve(clone,vision_ds_Kernal2D.RidgeDetectionAggressive);
	clone = vision_Vision.replaceColorRanges(clone,[{ rangeStart : -16777216, rangeEnd : -5592406, replacement : -16777216}]);
	if(!refine) {
		return clone;
	}
	vision_Vision.blackAndWhite(clone);
	var _g = 0;
	var _g1 = clone.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((clone.length - vision_ds_Image.OFFSET) / (clone.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * clone.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = clone.b[position] << 24 | clone.b[position + 1] << 16 | clone.b[position + 2] << 8 | clone.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			var color = this1;
			var circular = false;
			if(circular == null) {
				circular = false;
			}
			var c_image = clone;
			var c_roundedDown = 1;
			var c_x = x;
			var c_y = y;
			var c_circular = circular;
			var c_X = -c_roundedDown;
			var c_Y = -c_roundedDown;
			var count = 0;
			while(c_X <= c_roundedDown && c_Y <= c_roundedDown) {
				while(true) {
					++c_Y;
					if(c_Y > c_roundedDown) {
						c_Y = -c_roundedDown;
						++c_X;
					}
					var tmp;
					if(c_circular) {
						var x1 = c_X;
						var y1 = c_Y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point1_x = x1;
						var point1_y = y1;
						var x2 = c_roundedDown;
						var y2 = c_roundedDown;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var point2_x = x2;
						var point2_y = y2;
						var x3 = point2_x - point1_x;
						var y3 = point2_y - point1_y;
						tmp = Math.sqrt(x3 * x3 + y3 * y3) > c_roundedDown;
					} else {
						tmp = false;
					}
					if(!tmp) {
						break;
					}
				}
				var this2 = c_image;
				var x4 = c_x + c_X;
				var y4 = c_y + c_Y;
				var c;
				if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
					var this3 = [x4,this2.getUInt16(0)];
					var values = this3;
					var max = values[0];
					var _g4 = 0;
					var _g5 = values.length;
					while(_g4 < _g5) {
						var i = _g4++;
						if(values[i] > max) {
							max = values[i];
						}
					}
					var this4 = [max,0];
					var values1 = this4;
					var min = values1[0];
					var _g6 = 0;
					var _g7 = values1.length;
					while(_g6 < _g7) {
						var i1 = _g6++;
						if(values1[i1] < min) {
							min = values1[i1];
						}
					}
					var x5 = min;
					var this5 = [y4,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4))];
					var values2 = this5;
					var max1 = values2[0];
					var _g8 = 0;
					var _g9 = values2.length;
					while(_g8 < _g9) {
						var i2 = _g8++;
						if(values2[i2] > max1) {
							max1 = values2[i2];
						}
					}
					var this6 = [max1,0];
					var values3 = this6;
					var min1 = values3[0];
					var _g10 = 0;
					var _g11 = values3.length;
					while(_g10 < _g11) {
						var i3 = _g10++;
						if(values3[i3] < min1) {
							min1 = values3[i3];
						}
					}
					var y5 = min1;
					if(!(x5 >= 0 && y5 >= 0 && x5 < this2.getUInt16(0) && y5 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x = x5;
						var this_y = y5;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
					}
					var position1 = (y5 * this2.getUInt16(0) + x5) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = this2.b[position1] << 24 | this2.b[position1 + 1] << 16 | this2.b[position1 + 2] << 8 | this2.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this7 = value1;
					c = this7;
				} else {
					if(!(x4 >= 0 && y4 >= 0 && x4 < this2.getUInt16(0) && y4 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
						var this_x1 = x4;
						var this_y1 = y4;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x1,this_y1)));
					}
					var position2 = (y4 * this2.getUInt16(0) + x4) * 4;
					position2 += vision_ds_Image.OFFSET;
					var value2 = this2.b[position2] << 24 | this2.b[position2 + 1] << 16 | this2.b[position2 + 2] << 8 | this2.b[position2 + 3];
					if(value2 == null) {
						value2 = 0;
					}
					var this8 = value2;
					c = this8;
				}
				if(c == color) {
					++count;
				}
			}
			if(count <= 1) {
				var position3 = (y * clone.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				clone.b[position3] = 0;
				clone.b[position3 + 1] = 0;
				clone.b[position3 + 2] = 0;
				clone.b[position3 + 3] = 0;
			}
		}
	}
	return clone;
};
vision_Vision.bilateralDenoise = function(image,gaussianSigma,intensitySigma) {
	if(intensitySigma == null) {
		intensitySigma = 50;
	}
	if(gaussianSigma == null) {
		gaussianSigma = 0.8;
	}
	return vision_algorithms_BilateralFilter.filter(image,gaussianSigma,intensitySigma);
};
var vision_algorithms_BilateralFilter = function() { };
vision_algorithms_BilateralFilter.__name__ = true;
vision_algorithms_BilateralFilter.filter = function(image,distanceSigma,intensitySigma) {
	var kernelSize = Math.floor(6 * distanceSigma) + 1;
	if(kernelSize % 2 == 0) {
		++kernelSize;
	}
	var gaussianKernelMatrix = vision_algorithms_Gaussian.createKernalOfSize(kernelSize,distanceSigma);
	var this1 = new Array(442);
	var intensityVector = this1;
	var _g = 0;
	var _g1 = intensityVector.length;
	while(_g < _g1) {
		var i = _g++;
		intensityVector[i] = Math.exp(-(i / (2 * intensitySigma * intensitySigma)));
	}
	if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				var color = this1;
				var numeratorSumR = 0.;
				var numeratorSumG = 0.;
				var numeratorSumB = 0.;
				var denominatorSum = 0.;
				var kernelPositionWeight = 0.;
				var halfKernelSize = Math.floor(kernelSize / 2);
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this2 = value1;
				var kernelCenterIntensity = this2;
				var _g4 = x - halfKernelSize;
				var _g5 = x + halfKernelSize;
				while(_g4 < _g5) {
					var i = _g4++;
					var _g6 = y - halfKernelSize;
					var _g7 = y + halfKernelSize;
					while(_g6 < _g7) {
						var j = _g6++;
						if(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))) {
							var position2 = (j * image.getUInt16(0) + i) * 4;
							position2 += vision_ds_Image.OFFSET;
							var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
							if(value2 == null) {
								value2 = 0;
							}
							var this3 = value2;
							var kernelPositionIntensity = this3;
							var redDifference = (kernelPositionIntensity >> 16 & 255) - (kernelCenterIntensity >> 16 & 255);
							var greenDifference = (kernelPositionIntensity >> 8 & 255) - (kernelCenterIntensity >> 8 & 255);
							var blueDifference = (kernelPositionIntensity & 255) - (kernelCenterIntensity & 255);
							kernelPositionWeight = gaussianKernelMatrix.inner[(y - j + halfKernelSize) * gaussianKernelMatrix.height + (x - i + halfKernelSize)] * intensityVector[Math.sqrt(redDifference * redDifference + greenDifference * greenDifference + blueDifference * blueDifference) | 0];
							numeratorSumR += kernelPositionWeight * (kernelPositionIntensity >> 16 & 255);
							numeratorSumG += kernelPositionWeight * (kernelPositionIntensity >> 8 & 255);
							numeratorSumB += kernelPositionWeight * (kernelPositionIntensity & 255);
							denominatorSum += kernelPositionWeight;
						}
					}
				}
				var Red = (numeratorSumR / denominatorSum | 0) & 255;
				var Green = (numeratorSumG / denominatorSum | 0) & 255;
				var Blue = (numeratorSumB / denominatorSum | 0) & 255;
				var this4 = 0;
				var color1 = this4;
				var Alpha = 255;
				if(Alpha == null) {
					Alpha = 255;
				}
				color1 &= -16711681;
				color1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
				color1 &= -65281;
				color1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
				color1 &= -256;
				color1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
				color1 &= 16777215;
				color1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
				var color2 = color1;
				if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x;
					var this_y = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g8 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g9 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g10 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var image1 = image.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g8,_g9,_g10,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x1 = view.x + view.width / 2 - c;
								var y1 = view.y + view.height / 2;
								if(y1 == null) {
									y1 = 0;
								}
								if(x1 == null) {
									x1 = 0;
								}
								var f1_x = x1;
								var f1_y = y1;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x3 = x;
								var y3 = y;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var p_x = x3;
								var p_y = y3;
								var x4 = p_x - f1_x;
								var y4 = p_y - f1_y;
								var x5 = p_x - f2_x;
								var y5 = p_y - f2_y;
								has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x6 = view.x + view.width / 2;
								var y6 = view.y + view.height / 2 - c1;
								if(y6 == null) {
									y6 = 0;
								}
								if(x6 == null) {
									x6 = 0;
								}
								var f1_x1 = x6;
								var f1_y1 = y6;
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 + c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f2_x1 = x7;
								var f2_y1 = y7;
								var x8 = x;
								var y8 = y;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var p_x1 = x8;
								var p_y1 = y8;
								var x9 = p_x1 - f1_x1;
								var y9 = p_y1 - f1_y1;
								var x10 = p_x1 - f2_x1;
								var y10 = p_y1 - f2_y1;
								has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x11 = x;
								var y11 = y;
								if(y11 == null) {
									y11 = 0;
								}
								if(x11 == null) {
									x11 = 0;
								}
								var point1_x = x11;
								var point1_y = y11;
								var x12 = view.x + view.width / 2;
								var y12 = view.y + view.height / 2;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var point2_x = x12;
								var point2_y = y12;
								var x13 = point2_x - point1_x;
								var y13 = point2_y - point1_y;
								has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position3 = (y * image.getUInt16(0) + x) * 4;
						position3 += vision_ds_Image.OFFSET;
						image.b[position3] = color2 >> 24 & 255;
						image.b[position3 + 1] = color2 >> 16 & 255;
						image.b[position3 + 2] = color2 >> 8 & 255;
						image.b[position3 + 3] = color2 & 255;
					}
				} else {
					var position4 = (y * image.getUInt16(0) + x) * 4;
					position4 += vision_ds_Image.OFFSET;
					image.b[position4] = color2 >> 24 & 255;
					image.b[position4 + 1] = color2 >> 16 & 255;
					image.b[position4 + 2] = color2 >> 8 & 255;
					image.b[position4 + 3] = color2 & 255;
				}
			}
		}
	} else {
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this1 = value;
					var color = this1;
					var numeratorSumR = 0.;
					var numeratorSumG = 0.;
					var numeratorSumB = 0.;
					var denominatorSum = 0.;
					var kernelPositionWeight = 0.;
					var halfKernelSize = Math.floor(kernelSize / 2);
					var position1 = (y * image.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this2 = value1;
					var kernelCenterIntensity = this2;
					var _g7 = x - halfKernelSize;
					var _g8 = x + halfKernelSize;
					while(_g7 < _g8) {
						var i = _g7++;
						var _g9 = y - halfKernelSize;
						var _g10 = y + halfKernelSize;
						while(_g9 < _g10) {
							var j = _g9++;
							if(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))) {
								var position2 = (j * image.getUInt16(0) + i) * 4;
								position2 += vision_ds_Image.OFFSET;
								var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
								if(value2 == null) {
									value2 = 0;
								}
								var this3 = value2;
								var kernelPositionIntensity = this3;
								var redDifference = (kernelPositionIntensity >> 16 & 255) - (kernelCenterIntensity >> 16 & 255);
								var greenDifference = (kernelPositionIntensity >> 8 & 255) - (kernelCenterIntensity >> 8 & 255);
								var blueDifference = (kernelPositionIntensity & 255) - (kernelCenterIntensity & 255);
								kernelPositionWeight = gaussianKernelMatrix.inner[(y - j + halfKernelSize) * gaussianKernelMatrix.height + (x - i + halfKernelSize)] * intensityVector[Math.sqrt(redDifference * redDifference + greenDifference * greenDifference + blueDifference * blueDifference) | 0];
								numeratorSumR += kernelPositionWeight * (kernelPositionIntensity >> 16 & 255);
								numeratorSumG += kernelPositionWeight * (kernelPositionIntensity >> 8 & 255);
								numeratorSumB += kernelPositionWeight * (kernelPositionIntensity & 255);
								denominatorSum += kernelPositionWeight;
							}
						}
					}
					var Red = (numeratorSumR / denominatorSum | 0) & 255;
					var Green = (numeratorSumG / denominatorSum | 0) & 255;
					var Blue = (numeratorSumB / denominatorSum | 0) & 255;
					var this4 = 0;
					var color1 = this4;
					var Alpha = 255;
					if(Alpha == null) {
						Alpha = 255;
					}
					color1 &= -16711681;
					color1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
					color1 &= -65281;
					color1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
					color1 &= -256;
					color1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
					color1 &= 16777215;
					color1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
					var color2 = color1;
					if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this_x = x;
						var this_y = y;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
					} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
						var v1 = null;
						var tmp1;
						if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
							tmp1 = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
						} else {
							var has1 = false;
							var view2;
							if(v1 != null) {
								view2 = v1;
							} else {
								var _g11 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
								var _g12 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
								var _g13 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
								var image2 = image.b;
								var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
								view2 = new vision_ds_ImageView(_g11,_g12,_g13,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image2[view3]);
							}
							switch(view2.shape) {
							case 0:
								has1 = x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y;
								break;
							case 1:
								has1 = !(x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y);
								break;
							case 2:case 3:
								if(view2.width > view2.height) {
									var a2 = view2.width / 2;
									var b2 = view2.height / 2;
									var c2 = Math.sqrt(a2 * a2 - b2 * b2);
									var x14 = view2.x + view2.width / 2 - c2;
									var y14 = view2.y + view2.height / 2;
									if(y14 == null) {
										y14 = 0;
									}
									if(x14 == null) {
										x14 = 0;
									}
									var f1_x2 = x14;
									var f1_y2 = y14;
									var x15 = view2.x + view2.width / 2 + c2;
									var y15 = view2.y + view2.height / 2;
									if(y15 == null) {
										y15 = 0;
									}
									if(x15 == null) {
										x15 = 0;
									}
									var f2_x2 = x15;
									var f2_y2 = y15;
									var x16 = x;
									var y16 = y;
									if(y16 == null) {
										y16 = 0;
									}
									if(x16 == null) {
										x16 = 0;
									}
									var p_x2 = x16;
									var p_y2 = y16;
									var x17 = p_x2 - f1_x2;
									var y17 = p_y2 - f1_y2;
									var x18 = p_x2 - f2_x2;
									var y18 = p_y2 - f2_y2;
									has1 = Math.sqrt(x17 * x17 + y17 * y17) + Math.sqrt(x18 * x18 + y18 * y18) <= view2.width;
									if(view2.shape == 3) {
										has1 = !has1;
									}
								} else if(view2.height > view2.width) {
									var a3 = view2.height / 2;
									var b3 = view2.width / 2;
									var c3 = Math.sqrt(a3 * a3 - b3 * b3);
									var x19 = view2.x + view2.width / 2;
									var y19 = view2.y + view2.height / 2 - c3;
									if(y19 == null) {
										y19 = 0;
									}
									if(x19 == null) {
										x19 = 0;
									}
									var f1_x3 = x19;
									var f1_y3 = y19;
									var x20 = view2.x + view2.width / 2;
									var y20 = view2.y + view2.height / 2 + c3;
									if(y20 == null) {
										y20 = 0;
									}
									if(x20 == null) {
										x20 = 0;
									}
									var f2_x3 = x20;
									var f2_y3 = y20;
									var x21 = x;
									var y21 = y;
									if(y21 == null) {
										y21 = 0;
									}
									if(x21 == null) {
										x21 = 0;
									}
									var p_x3 = x21;
									var p_y3 = y21;
									var x22 = p_x3 - f1_x3;
									var y22 = p_y3 - f1_y3;
									var x23 = p_x3 - f2_x3;
									var y23 = p_y3 - f2_y3;
									has1 = Math.sqrt(x22 * x22 + y22 * y22) + Math.sqrt(x23 * x23 + y23 * y23) <= view2.height;
									if(view2.shape == 3) {
										has1 = !has1;
									}
								} else {
									var x24 = x;
									var y24 = y;
									if(y24 == null) {
										y24 = 0;
									}
									if(x24 == null) {
										x24 = 0;
									}
									var point1_x1 = x24;
									var point1_y1 = y24;
									var x25 = view2.x + view2.width / 2;
									var y25 = view2.y + view2.height / 2;
									if(y25 == null) {
										y25 = 0;
									}
									if(x25 == null) {
										x25 = 0;
									}
									var point2_x1 = x25;
									var point2_y1 = y25;
									var x26 = point2_x1 - point1_x1;
									var y26 = point2_y1 - point1_y1;
									has1 = Math.sqrt(x26 * x26 + y26 * y26) <= view2.width / 2;
									if(view2.shape == 3) {
										has1 = !has1;
									}
								}
								break;
							case 4:
								has1 = Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
								break;
							case 5:
								has1 = !(Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
								break;
							}
							tmp1 = has1;
						}
						if(tmp1) {
							var position3 = (y * image.getUInt16(0) + x) * 4;
							position3 += vision_ds_Image.OFFSET;
							image.b[position3] = color2 >> 24 & 255;
							image.b[position3 + 1] = color2 >> 16 & 255;
							image.b[position3 + 2] = color2 >> 8 & 255;
							image.b[position3 + 3] = color2 & 255;
						}
					} else {
						var position4 = (y * image.getUInt16(0) + x) * 4;
						position4 += vision_ds_Image.OFFSET;
						image.b[position4] = color2 >> 24 & 255;
						image.b[position4 + 1] = color2 >> 16 & 255;
						image.b[position4 + 2] = color2 >> 8 & 255;
						image.b[position4 + 3] = color2 & 255;
					}
				}
			}
		}
	}
	kernelSize = 0;
	distanceSigma = kernelSize;
	intensitySigma = distanceSigma;
	intensityVector = null;
	gaussianKernelMatrix = null;
	return image;
};
var vision_algorithms_BilinearInterpolation = function() { };
vision_algorithms_BilinearInterpolation.__name__ = true;
vision_algorithms_BilinearInterpolation.interpolate = function(image,width,height) {
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var resized = this2;
	var xMultiplier = image.getUInt16(0) / width;
	var yMultiplier = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) / height;
	var _g = 0;
	var _g1 = resized.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((resized.length - vision_ds_Image.OFFSET) / (resized.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * resized.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = resized.b[position] << 24 | resized.b[position + 1] << 16 | resized.b[position + 2] << 8 | resized.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			var c = this1;
			var x1 = x * xMultiplier;
			var y1 = y * yMultiplier;
			var x2 = Math.ceil(x1);
			var y2 = Math.ceil(y1);
			if(!(x2 >= 0 && y2 >= 0 && x2 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(x1,y1)));
			}
			var yFraction = y1 - (y1 | 0);
			var xFraction = x1 - (x1 | 0);
			var x3 = x1 | 0;
			var y3 = y1 | 0;
			if(!(x3 >= 0 && y3 >= 0 && x3 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x = x3;
				var this_y = y3;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
			}
			var position1 = (y3 * image.getUInt16(0) + x3) * 4;
			position1 += vision_ds_Image.OFFSET;
			var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
			if(value1 == null) {
				value1 = 0;
			}
			var this2 = value1;
			var x4 = (x1 | 0) + 1;
			var y4 = y1 | 0;
			if(!(x4 >= 0 && y4 >= 0 && x4 < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x1 = x4;
				var this_y1 = y4;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
			}
			var position2 = (y4 * image.getUInt16(0) + x4) * 4;
			position2 += vision_ds_Image.OFFSET;
			var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
			if(value2 == null) {
				value2 = 0;
			}
			var this3 = value2;
			var x5 = x1 | 0;
			var y5 = (y1 | 0) + 1;
			if(!(x5 >= 0 && y5 >= 0 && x5 < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x2 = x5;
				var this_y2 = y5;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x2,this_y2)));
			}
			var position3 = (y5 * image.getUInt16(0) + x5) * 4;
			position3 += vision_ds_Image.OFFSET;
			var value3 = image.b[position3] << 24 | image.b[position3 + 1] << 16 | image.b[position3 + 2] << 8 | image.b[position3 + 3];
			if(value3 == null) {
				value3 = 0;
			}
			var this4 = value3;
			var x6 = (x1 | 0) + 1;
			var y6 = (y1 | 0) + 1;
			if(!(x6 >= 0 && y6 >= 0 && x6 < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x3 = x6;
				var this_y3 = y6;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x3,this_y3)));
			}
			var position4 = (y6 * image.getUInt16(0) + x6) * 4;
			position4 += vision_ds_Image.OFFSET;
			var value4 = image.b[position4] << 24 | image.b[position4 + 1] << 16 | image.b[position4 + 2] << 8 | image.b[position4 + 3];
			if(value4 == null) {
				value4 = 0;
			}
			var this5 = value4;
			var red = (1 - yFraction) * ((1 - xFraction) * (this2 >> 16 & 255) + xFraction * (this3 >> 16 & 255)) + yFraction * ((1 - xFraction) * (this4 >> 16 & 255) + xFraction * (this5 >> 16 & 255)) | 0;
			var x7 = x1 | 0;
			var y7 = y1 | 0;
			if(!(x7 >= 0 && y7 >= 0 && x7 < image.getUInt16(0) && y7 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x4 = x7;
				var this_y4 = y7;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x4,this_y4)));
			}
			var position5 = (y7 * image.getUInt16(0) + x7) * 4;
			position5 += vision_ds_Image.OFFSET;
			var value5 = image.b[position5] << 24 | image.b[position5 + 1] << 16 | image.b[position5 + 2] << 8 | image.b[position5 + 3];
			if(value5 == null) {
				value5 = 0;
			}
			var this6 = value5;
			var x8 = (x1 | 0) + 1;
			var y8 = y1 | 0;
			if(!(x8 >= 0 && y8 >= 0 && x8 < image.getUInt16(0) && y8 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x5 = x8;
				var this_y5 = y8;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x5,this_y5)));
			}
			var position6 = (y8 * image.getUInt16(0) + x8) * 4;
			position6 += vision_ds_Image.OFFSET;
			var value6 = image.b[position6] << 24 | image.b[position6 + 1] << 16 | image.b[position6 + 2] << 8 | image.b[position6 + 3];
			if(value6 == null) {
				value6 = 0;
			}
			var this7 = value6;
			var x9 = x1 | 0;
			var y9 = (y1 | 0) + 1;
			if(!(x9 >= 0 && y9 >= 0 && x9 < image.getUInt16(0) && y9 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x6 = x9;
				var this_y6 = y9;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x6,this_y6)));
			}
			var position7 = (y9 * image.getUInt16(0) + x9) * 4;
			position7 += vision_ds_Image.OFFSET;
			var value7 = image.b[position7] << 24 | image.b[position7 + 1] << 16 | image.b[position7 + 2] << 8 | image.b[position7 + 3];
			if(value7 == null) {
				value7 = 0;
			}
			var this8 = value7;
			var x10 = (x1 | 0) + 1;
			var y10 = (y1 | 0) + 1;
			if(!(x10 >= 0 && y10 >= 0 && x10 < image.getUInt16(0) && y10 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x7 = x10;
				var this_y7 = y10;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x7,this_y7)));
			}
			var position8 = (y10 * image.getUInt16(0) + x10) * 4;
			position8 += vision_ds_Image.OFFSET;
			var value8 = image.b[position8] << 24 | image.b[position8 + 1] << 16 | image.b[position8 + 2] << 8 | image.b[position8 + 3];
			if(value8 == null) {
				value8 = 0;
			}
			var this9 = value8;
			var green = (1 - yFraction) * ((1 - xFraction) * (this6 >> 8 & 255) + xFraction * (this7 >> 8 & 255)) + yFraction * ((1 - xFraction) * (this8 >> 8 & 255) + xFraction * (this9 >> 8 & 255)) | 0;
			var x11 = x1 | 0;
			var y11 = y1 | 0;
			if(!(x11 >= 0 && y11 >= 0 && x11 < image.getUInt16(0) && y11 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x8 = x11;
				var this_y8 = y11;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x8,this_y8)));
			}
			var position9 = (y11 * image.getUInt16(0) + x11) * 4;
			position9 += vision_ds_Image.OFFSET;
			var value9 = image.b[position9] << 24 | image.b[position9 + 1] << 16 | image.b[position9 + 2] << 8 | image.b[position9 + 3];
			if(value9 == null) {
				value9 = 0;
			}
			var this10 = value9;
			var x12 = (x1 | 0) + 1;
			var y12 = y1 | 0;
			if(!(x12 >= 0 && y12 >= 0 && x12 < image.getUInt16(0) && y12 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x9 = x12;
				var this_y9 = y12;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x9,this_y9)));
			}
			var position10 = (y12 * image.getUInt16(0) + x12) * 4;
			position10 += vision_ds_Image.OFFSET;
			var value10 = image.b[position10] << 24 | image.b[position10 + 1] << 16 | image.b[position10 + 2] << 8 | image.b[position10 + 3];
			if(value10 == null) {
				value10 = 0;
			}
			var this11 = value10;
			var x13 = x1 | 0;
			var y13 = (y1 | 0) + 1;
			if(!(x13 >= 0 && y13 >= 0 && x13 < image.getUInt16(0) && y13 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x10 = x13;
				var this_y10 = y13;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x10,this_y10)));
			}
			var position11 = (y13 * image.getUInt16(0) + x13) * 4;
			position11 += vision_ds_Image.OFFSET;
			var value11 = image.b[position11] << 24 | image.b[position11 + 1] << 16 | image.b[position11 + 2] << 8 | image.b[position11 + 3];
			if(value11 == null) {
				value11 = 0;
			}
			var this12 = value11;
			var x14 = (x1 | 0) + 1;
			var y14 = (y1 | 0) + 1;
			if(!(x14 >= 0 && y14 >= 0 && x14 < image.getUInt16(0) && y14 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x11 = x14;
				var this_y11 = y14;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x11,this_y11)));
			}
			var position12 = (y14 * image.getUInt16(0) + x14) * 4;
			position12 += vision_ds_Image.OFFSET;
			var value12 = image.b[position12] << 24 | image.b[position12 + 1] << 16 | image.b[position12 + 2] << 8 | image.b[position12 + 3];
			if(value12 == null) {
				value12 = 0;
			}
			var this13 = value12;
			var blue = (1 - yFraction) * ((1 - xFraction) * (this10 & 255) + xFraction * (this11 & 255)) + yFraction * ((1 - xFraction) * (this12 & 255) + xFraction * (this13 & 255)) | 0;
			var x15 = x1 | 0;
			var y15 = y1 | 0;
			if(!(x15 >= 0 && y15 >= 0 && x15 < image.getUInt16(0) && y15 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x12 = x15;
				var this_y12 = y15;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x12,this_y12)));
			}
			var position13 = (y15 * image.getUInt16(0) + x15) * 4;
			position13 += vision_ds_Image.OFFSET;
			var value13 = image.b[position13] << 24 | image.b[position13 + 1] << 16 | image.b[position13 + 2] << 8 | image.b[position13 + 3];
			if(value13 == null) {
				value13 = 0;
			}
			var this14 = value13;
			var x16 = (x1 | 0) + 1;
			var y16 = y1 | 0;
			if(!(x16 >= 0 && y16 >= 0 && x16 < image.getUInt16(0) && y16 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x13 = x16;
				var this_y13 = y16;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x13,this_y13)));
			}
			var position14 = (y16 * image.getUInt16(0) + x16) * 4;
			position14 += vision_ds_Image.OFFSET;
			var value14 = image.b[position14] << 24 | image.b[position14 + 1] << 16 | image.b[position14 + 2] << 8 | image.b[position14 + 3];
			if(value14 == null) {
				value14 = 0;
			}
			var this15 = value14;
			var x17 = x1 | 0;
			var y17 = (y1 | 0) + 1;
			if(!(x17 >= 0 && y17 >= 0 && x17 < image.getUInt16(0) && y17 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x14 = x17;
				var this_y14 = y17;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x14,this_y14)));
			}
			var position15 = (y17 * image.getUInt16(0) + x17) * 4;
			position15 += vision_ds_Image.OFFSET;
			var value15 = image.b[position15] << 24 | image.b[position15 + 1] << 16 | image.b[position15 + 2] << 8 | image.b[position15 + 3];
			if(value15 == null) {
				value15 = 0;
			}
			var this16 = value15;
			var x18 = (x1 | 0) + 1;
			var y18 = (y1 | 0) + 1;
			if(!(x18 >= 0 && y18 >= 0 && x18 < image.getUInt16(0) && y18 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x15 = x18;
				var this_y15 = y18;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x15,this_y15)));
			}
			var position16 = (y18 * image.getUInt16(0) + x18) * 4;
			position16 += vision_ds_Image.OFFSET;
			var value16 = image.b[position16] << 24 | image.b[position16 + 1] << 16 | image.b[position16 + 2] << 8 | image.b[position16 + 3];
			if(value16 == null) {
				value16 = 0;
			}
			var this17 = value16;
			var alpha = (1 - yFraction) * ((1 - xFraction) * (this14 >> 24 & 255) + xFraction * (this15 >> 24 & 255)) + yFraction * ((1 - xFraction) * (this16 >> 24 & 255) + xFraction * (this17 >> 24 & 255)) | 0;
			var Alpha = alpha;
			if(Alpha == null) {
				Alpha = 255;
			}
			var this18 = 0;
			var color = this18;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 255;
			}
			color &= -16711681;
			color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
			color &= -65281;
			color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
			color &= -256;
			color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
			color &= 16777215;
			color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
			var color1 = color;
			if(!(x >= 0 && y >= 0 && x < resized.getUInt16(0) && y < Math.ceil((resized.length - vision_ds_Image.OFFSET) / (resized.getUInt16(0) * 4)))) {
				var this_x16 = x;
				var this_y16 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(resized,new vision_ds_Point2D(this_x16,this_y16)));
			} else if(resized.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != resized.getUInt16(0) || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((resized.length - vision_ds_Image.OFFSET) / (resized.getUInt16(0) * 4)) || resized.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(resized.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != resized.getUInt16(0) || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((resized.length - vision_ds_Image.OFFSET) / (resized.getUInt16(0) * 4)) || resized.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < resized.getUInt16(0) && y < Math.ceil((resized.length - vision_ds_Image.OFFSET) / (resized.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = resized.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var resized1 = resized.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),resized1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c1 = Math.sqrt(a * a - b * b);
							var x19 = view.x + view.width / 2 - c1;
							var y19 = view.y + view.height / 2;
							if(y19 == null) {
								y19 = 0;
							}
							if(x19 == null) {
								x19 = 0;
							}
							var f1_x = x19;
							var f1_y = y19;
							var x20 = view.x + view.width / 2 + c1;
							var y20 = view.y + view.height / 2;
							if(y20 == null) {
								y20 = 0;
							}
							if(x20 == null) {
								x20 = 0;
							}
							var f2_x = x20;
							var f2_y = y20;
							var x21 = x;
							var y21 = y;
							if(y21 == null) {
								y21 = 0;
							}
							if(x21 == null) {
								x21 = 0;
							}
							var p_x = x21;
							var p_y = y21;
							var x22 = p_x - f1_x;
							var y22 = p_y - f1_y;
							var x23 = p_x - f2_x;
							var y23 = p_y - f2_y;
							has = Math.sqrt(x22 * x22 + y22 * y22) + Math.sqrt(x23 * x23 + y23 * y23) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c2 = Math.sqrt(a1 * a1 - b1 * b1);
							var x24 = view.x + view.width / 2;
							var y24 = view.y + view.height / 2 - c2;
							if(y24 == null) {
								y24 = 0;
							}
							if(x24 == null) {
								x24 = 0;
							}
							var f1_x1 = x24;
							var f1_y1 = y24;
							var x25 = view.x + view.width / 2;
							var y25 = view.y + view.height / 2 + c2;
							if(y25 == null) {
								y25 = 0;
							}
							if(x25 == null) {
								x25 = 0;
							}
							var f2_x1 = x25;
							var f2_y1 = y25;
							var x26 = x;
							var y26 = y;
							if(y26 == null) {
								y26 = 0;
							}
							if(x26 == null) {
								x26 = 0;
							}
							var p_x1 = x26;
							var p_y1 = y26;
							var x27 = p_x1 - f1_x1;
							var y27 = p_y1 - f1_y1;
							var x28 = p_x1 - f2_x1;
							var y28 = p_y1 - f2_y1;
							has = Math.sqrt(x27 * x27 + y27 * y27) + Math.sqrt(x28 * x28 + y28 * y28) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x29 = x;
							var y29 = y;
							if(y29 == null) {
								y29 = 0;
							}
							if(x29 == null) {
								x29 = 0;
							}
							var point1_x = x29;
							var point1_y = y29;
							var x30 = view.x + view.width / 2;
							var y30 = view.y + view.height / 2;
							if(y30 == null) {
								y30 = 0;
							}
							if(x30 == null) {
								x30 = 0;
							}
							var point2_x = x30;
							var point2_y = y30;
							var x31 = point2_x - point1_x;
							var y31 = point2_y - point1_y;
							has = Math.sqrt(x31 * x31 + y31 * y31) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position17 = (y * resized.getUInt16(0) + x) * 4;
					position17 += vision_ds_Image.OFFSET;
					resized.b[position17] = color1 >> 24 & 255;
					resized.b[position17 + 1] = color1 >> 16 & 255;
					resized.b[position17 + 2] = color1 >> 8 & 255;
					resized.b[position17 + 3] = color1 & 255;
				}
			} else {
				var position18 = (y * resized.getUInt16(0) + x) * 4;
				position18 += vision_ds_Image.OFFSET;
				resized.b[position18] = color1 >> 24 & 255;
				resized.b[position18 + 1] = color1 >> 16 & 255;
				resized.b[position18 + 2] = color1 >> 8 & 255;
				resized.b[position18 + 3] = color1 & 255;
			}
		}
	}
	return resized;
};
var vision_algorithms_Canny = function() { };
vision_algorithms_Canny.__name__ = true;
vision_algorithms_Canny.grayscale = function(image) {
	return vision_Vision.grayscale(image);
};
vision_algorithms_Canny.applyGaussian = function(image,size,sigma) {
	return vision_Vision.gaussianBlur(image,sigma,size);
};
vision_algorithms_Canny.applySobelFilters = function(image) {
	return vision_Vision.sobelEdgeDiffOperator(image);
};
vision_algorithms_Canny.nonMaxSuppression = function(image) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var filtered = this2;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var n = vision_algorithms_Canny.getNeighbors(3,x,y,image);
			if(n[1][1] > n[0][1] && n[1][1] > n[2][1]) {
				var color = n[1][1];
				if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
					var this_x = x;
					var this_y = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x,this_y)));
				} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g4 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g5 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g6 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var filtered1 = filtered.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g4,_g5,_g6,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x1 = view.x + view.width / 2 - c;
								var y1 = view.y + view.height / 2;
								if(y1 == null) {
									y1 = 0;
								}
								if(x1 == null) {
									x1 = 0;
								}
								var f1_x = x1;
								var f1_y = y1;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x3 = x;
								var y3 = y;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var p_x = x3;
								var p_y = y3;
								var x4 = p_x - f1_x;
								var y4 = p_y - f1_y;
								var x5 = p_x - f2_x;
								var y5 = p_y - f2_y;
								has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x6 = view.x + view.width / 2;
								var y6 = view.y + view.height / 2 - c1;
								if(y6 == null) {
									y6 = 0;
								}
								if(x6 == null) {
									x6 = 0;
								}
								var f1_x1 = x6;
								var f1_y1 = y6;
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 + c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f2_x1 = x7;
								var f2_y1 = y7;
								var x8 = x;
								var y8 = y;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var p_x1 = x8;
								var p_y1 = y8;
								var x9 = p_x1 - f1_x1;
								var y9 = p_y1 - f1_y1;
								var x10 = p_x1 - f2_x1;
								var y10 = p_y1 - f2_y1;
								has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x11 = x;
								var y11 = y;
								if(y11 == null) {
									y11 = 0;
								}
								if(x11 == null) {
									x11 = 0;
								}
								var point1_x = x11;
								var point1_y = y11;
								var x12 = view.x + view.width / 2;
								var y12 = view.y + view.height / 2;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var point2_x = x12;
								var point2_y = y12;
								var x13 = point2_x - point1_x;
								var y13 = point2_y - point1_y;
								has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position = (y * filtered.getUInt16(0) + x) * 4;
						position += vision_ds_Image.OFFSET;
						filtered.b[position] = color >> 24 & 255;
						filtered.b[position + 1] = color >> 16 & 255;
						filtered.b[position + 2] = color >> 8 & 255;
						filtered.b[position + 3] = color & 255;
					}
				} else {
					var position1 = (y * filtered.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					filtered.b[position1] = color >> 24 & 255;
					filtered.b[position1 + 1] = color >> 16 & 255;
					filtered.b[position1 + 2] = color >> 8 & 255;
					filtered.b[position1 + 3] = color & 255;
				}
			} else if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
				var this_x1 = x;
				var this_y1 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x1,this_y1)));
			} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v1 = null;
				var tmp1;
				if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
					tmp1 = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
				} else {
					var has1 = false;
					var view2;
					if(v1 != null) {
						view2 = v1;
					} else {
						var _g7 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g8 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g9 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var filtered2 = filtered.b;
						var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view2 = new vision_ds_ImageView(_g7,_g8,_g9,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered2[view3]);
					}
					switch(view2.shape) {
					case 0:
						has1 = x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y;
						break;
					case 1:
						has1 = !(x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y);
						break;
					case 2:case 3:
						if(view2.width > view2.height) {
							var a2 = view2.width / 2;
							var b2 = view2.height / 2;
							var c2 = Math.sqrt(a2 * a2 - b2 * b2);
							var x14 = view2.x + view2.width / 2 - c2;
							var y14 = view2.y + view2.height / 2;
							if(y14 == null) {
								y14 = 0;
							}
							if(x14 == null) {
								x14 = 0;
							}
							var f1_x2 = x14;
							var f1_y2 = y14;
							var x15 = view2.x + view2.width / 2 + c2;
							var y15 = view2.y + view2.height / 2;
							if(y15 == null) {
								y15 = 0;
							}
							if(x15 == null) {
								x15 = 0;
							}
							var f2_x2 = x15;
							var f2_y2 = y15;
							var x16 = x;
							var y16 = y;
							if(y16 == null) {
								y16 = 0;
							}
							if(x16 == null) {
								x16 = 0;
							}
							var p_x2 = x16;
							var p_y2 = y16;
							var x17 = p_x2 - f1_x2;
							var y17 = p_y2 - f1_y2;
							var x18 = p_x2 - f2_x2;
							var y18 = p_y2 - f2_y2;
							has1 = Math.sqrt(x17 * x17 + y17 * y17) + Math.sqrt(x18 * x18 + y18 * y18) <= view2.width;
							if(view2.shape == 3) {
								has1 = !has1;
							}
						} else if(view2.height > view2.width) {
							var a3 = view2.height / 2;
							var b3 = view2.width / 2;
							var c3 = Math.sqrt(a3 * a3 - b3 * b3);
							var x19 = view2.x + view2.width / 2;
							var y19 = view2.y + view2.height / 2 - c3;
							if(y19 == null) {
								y19 = 0;
							}
							if(x19 == null) {
								x19 = 0;
							}
							var f1_x3 = x19;
							var f1_y3 = y19;
							var x20 = view2.x + view2.width / 2;
							var y20 = view2.y + view2.height / 2 + c3;
							if(y20 == null) {
								y20 = 0;
							}
							if(x20 == null) {
								x20 = 0;
							}
							var f2_x3 = x20;
							var f2_y3 = y20;
							var x21 = x;
							var y21 = y;
							if(y21 == null) {
								y21 = 0;
							}
							if(x21 == null) {
								x21 = 0;
							}
							var p_x3 = x21;
							var p_y3 = y21;
							var x22 = p_x3 - f1_x3;
							var y22 = p_y3 - f1_y3;
							var x23 = p_x3 - f2_x3;
							var y23 = p_y3 - f2_y3;
							has1 = Math.sqrt(x22 * x22 + y22 * y22) + Math.sqrt(x23 * x23 + y23 * y23) <= view2.height;
							if(view2.shape == 3) {
								has1 = !has1;
							}
						} else {
							var x24 = x;
							var y24 = y;
							if(y24 == null) {
								y24 = 0;
							}
							if(x24 == null) {
								x24 = 0;
							}
							var point1_x1 = x24;
							var point1_y1 = y24;
							var x25 = view2.x + view2.width / 2;
							var y25 = view2.y + view2.height / 2;
							if(y25 == null) {
								y25 = 0;
							}
							if(x25 == null) {
								x25 = 0;
							}
							var point2_x1 = x25;
							var point2_y1 = y25;
							var x26 = point2_x1 - point1_x1;
							var y26 = point2_y1 - point1_y1;
							has1 = Math.sqrt(x26 * x26 + y26 * y26) <= view2.width / 2;
							if(view2.shape == 3) {
								has1 = !has1;
							}
						}
						break;
					case 4:
						has1 = Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
						break;
					case 5:
						has1 = !(Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
						break;
					}
					tmp1 = has1;
				}
				if(tmp1) {
					var position2 = (y * filtered.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					filtered.b[position2] = 0;
					filtered.b[position2 + 1] = 0;
					filtered.b[position2 + 2] = 0;
					filtered.b[position2 + 3] = 0;
				}
			} else {
				var position3 = (y * filtered.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				filtered.b[position3] = 0;
				filtered.b[position3 + 1] = 0;
				filtered.b[position3 + 2] = 0;
				filtered.b[position3 + 3] = 0;
			}
			if(n[1][1] > n[0][2] && n[1][1] > n[2][0]) {
				var color1 = n[1][1];
				if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
					var this_x2 = x;
					var this_y2 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x2,this_y2)));
				} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v2 = null;
					var tmp2;
					if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
						tmp2 = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
					} else {
						var has2 = false;
						var view4;
						if(v2 != null) {
							view4 = v2;
						} else {
							var _g10 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g11 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g12 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var filtered3 = filtered.b;
							var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view4 = new vision_ds_ImageView(_g10,_g11,_g12,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered3[view5]);
						}
						switch(view4.shape) {
						case 0:
							has2 = x < view4.x + view4.width && y < view4.y + view4.height && x >= view4.x && y >= view4.y;
							break;
						case 1:
							has2 = !(x < view4.x + view4.width && y < view4.y + view4.height && x >= view4.x && y >= view4.y);
							break;
						case 2:case 3:
							if(view4.width > view4.height) {
								var a4 = view4.width / 2;
								var b4 = view4.height / 2;
								var c4 = Math.sqrt(a4 * a4 - b4 * b4);
								var x27 = view4.x + view4.width / 2 - c4;
								var y27 = view4.y + view4.height / 2;
								if(y27 == null) {
									y27 = 0;
								}
								if(x27 == null) {
									x27 = 0;
								}
								var f1_x4 = x27;
								var f1_y4 = y27;
								var x28 = view4.x + view4.width / 2 + c4;
								var y28 = view4.y + view4.height / 2;
								if(y28 == null) {
									y28 = 0;
								}
								if(x28 == null) {
									x28 = 0;
								}
								var f2_x4 = x28;
								var f2_y4 = y28;
								var x29 = x;
								var y29 = y;
								if(y29 == null) {
									y29 = 0;
								}
								if(x29 == null) {
									x29 = 0;
								}
								var p_x4 = x29;
								var p_y4 = y29;
								var x30 = p_x4 - f1_x4;
								var y30 = p_y4 - f1_y4;
								var x31 = p_x4 - f2_x4;
								var y31 = p_y4 - f2_y4;
								has2 = Math.sqrt(x30 * x30 + y30 * y30) + Math.sqrt(x31 * x31 + y31 * y31) <= view4.width;
								if(view4.shape == 3) {
									has2 = !has2;
								}
							} else if(view4.height > view4.width) {
								var a5 = view4.height / 2;
								var b5 = view4.width / 2;
								var c5 = Math.sqrt(a5 * a5 - b5 * b5);
								var x32 = view4.x + view4.width / 2;
								var y32 = view4.y + view4.height / 2 - c5;
								if(y32 == null) {
									y32 = 0;
								}
								if(x32 == null) {
									x32 = 0;
								}
								var f1_x5 = x32;
								var f1_y5 = y32;
								var x33 = view4.x + view4.width / 2;
								var y33 = view4.y + view4.height / 2 + c5;
								if(y33 == null) {
									y33 = 0;
								}
								if(x33 == null) {
									x33 = 0;
								}
								var f2_x5 = x33;
								var f2_y5 = y33;
								var x34 = x;
								var y34 = y;
								if(y34 == null) {
									y34 = 0;
								}
								if(x34 == null) {
									x34 = 0;
								}
								var p_x5 = x34;
								var p_y5 = y34;
								var x35 = p_x5 - f1_x5;
								var y35 = p_y5 - f1_y5;
								var x36 = p_x5 - f2_x5;
								var y36 = p_y5 - f2_y5;
								has2 = Math.sqrt(x35 * x35 + y35 * y35) + Math.sqrt(x36 * x36 + y36 * y36) <= view4.height;
								if(view4.shape == 3) {
									has2 = !has2;
								}
							} else {
								var x37 = x;
								var y37 = y;
								if(y37 == null) {
									y37 = 0;
								}
								if(x37 == null) {
									x37 = 0;
								}
								var point1_x2 = x37;
								var point1_y2 = y37;
								var x38 = view4.x + view4.width / 2;
								var y38 = view4.y + view4.height / 2;
								if(y38 == null) {
									y38 = 0;
								}
								if(x38 == null) {
									x38 = 0;
								}
								var point2_x2 = x38;
								var point2_y2 = y38;
								var x39 = point2_x2 - point1_x2;
								var y39 = point2_y2 - point1_y2;
								has2 = Math.sqrt(x39 * x39 + y39 * y39) <= view4.width / 2;
								if(view4.shape == 3) {
									has2 = !has2;
								}
							}
							break;
						case 4:
							has2 = Math.abs(x - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
							break;
						case 5:
							has2 = !(Math.abs(x - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
							break;
						}
						tmp2 = has2;
					}
					if(tmp2) {
						var position4 = (y * filtered.getUInt16(0) + x) * 4;
						position4 += vision_ds_Image.OFFSET;
						filtered.b[position4] = color1 >> 24 & 255;
						filtered.b[position4 + 1] = color1 >> 16 & 255;
						filtered.b[position4 + 2] = color1 >> 8 & 255;
						filtered.b[position4 + 3] = color1 & 255;
					}
				} else {
					var position5 = (y * filtered.getUInt16(0) + x) * 4;
					position5 += vision_ds_Image.OFFSET;
					filtered.b[position5] = color1 >> 24 & 255;
					filtered.b[position5 + 1] = color1 >> 16 & 255;
					filtered.b[position5 + 2] = color1 >> 8 & 255;
					filtered.b[position5 + 3] = color1 & 255;
				}
			} else if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
				var this_x3 = x;
				var this_y3 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x3,this_y3)));
			} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v3 = null;
				var tmp3;
				if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
					tmp3 = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
				} else {
					var has3 = false;
					var view6;
					if(v3 != null) {
						view6 = v3;
					} else {
						var _g13 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g14 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g15 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var filtered4 = filtered.b;
						var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view6 = new vision_ds_ImageView(_g13,_g14,_g15,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered4[view7]);
					}
					switch(view6.shape) {
					case 0:
						has3 = x < view6.x + view6.width && y < view6.y + view6.height && x >= view6.x && y >= view6.y;
						break;
					case 1:
						has3 = !(x < view6.x + view6.width && y < view6.y + view6.height && x >= view6.x && y >= view6.y);
						break;
					case 2:case 3:
						if(view6.width > view6.height) {
							var a6 = view6.width / 2;
							var b6 = view6.height / 2;
							var c6 = Math.sqrt(a6 * a6 - b6 * b6);
							var x40 = view6.x + view6.width / 2 - c6;
							var y40 = view6.y + view6.height / 2;
							if(y40 == null) {
								y40 = 0;
							}
							if(x40 == null) {
								x40 = 0;
							}
							var f1_x6 = x40;
							var f1_y6 = y40;
							var x41 = view6.x + view6.width / 2 + c6;
							var y41 = view6.y + view6.height / 2;
							if(y41 == null) {
								y41 = 0;
							}
							if(x41 == null) {
								x41 = 0;
							}
							var f2_x6 = x41;
							var f2_y6 = y41;
							var x42 = x;
							var y42 = y;
							if(y42 == null) {
								y42 = 0;
							}
							if(x42 == null) {
								x42 = 0;
							}
							var p_x6 = x42;
							var p_y6 = y42;
							var x43 = p_x6 - f1_x6;
							var y43 = p_y6 - f1_y6;
							var x44 = p_x6 - f2_x6;
							var y44 = p_y6 - f2_y6;
							has3 = Math.sqrt(x43 * x43 + y43 * y43) + Math.sqrt(x44 * x44 + y44 * y44) <= view6.width;
							if(view6.shape == 3) {
								has3 = !has3;
							}
						} else if(view6.height > view6.width) {
							var a7 = view6.height / 2;
							var b7 = view6.width / 2;
							var c7 = Math.sqrt(a7 * a7 - b7 * b7);
							var x45 = view6.x + view6.width / 2;
							var y45 = view6.y + view6.height / 2 - c7;
							if(y45 == null) {
								y45 = 0;
							}
							if(x45 == null) {
								x45 = 0;
							}
							var f1_x7 = x45;
							var f1_y7 = y45;
							var x46 = view6.x + view6.width / 2;
							var y46 = view6.y + view6.height / 2 + c7;
							if(y46 == null) {
								y46 = 0;
							}
							if(x46 == null) {
								x46 = 0;
							}
							var f2_x7 = x46;
							var f2_y7 = y46;
							var x47 = x;
							var y47 = y;
							if(y47 == null) {
								y47 = 0;
							}
							if(x47 == null) {
								x47 = 0;
							}
							var p_x7 = x47;
							var p_y7 = y47;
							var x48 = p_x7 - f1_x7;
							var y48 = p_y7 - f1_y7;
							var x49 = p_x7 - f2_x7;
							var y49 = p_y7 - f2_y7;
							has3 = Math.sqrt(x48 * x48 + y48 * y48) + Math.sqrt(x49 * x49 + y49 * y49) <= view6.height;
							if(view6.shape == 3) {
								has3 = !has3;
							}
						} else {
							var x50 = x;
							var y50 = y;
							if(y50 == null) {
								y50 = 0;
							}
							if(x50 == null) {
								x50 = 0;
							}
							var point1_x3 = x50;
							var point1_y3 = y50;
							var x51 = view6.x + view6.width / 2;
							var y51 = view6.y + view6.height / 2;
							if(y51 == null) {
								y51 = 0;
							}
							if(x51 == null) {
								x51 = 0;
							}
							var point2_x3 = x51;
							var point2_y3 = y51;
							var x52 = point2_x3 - point1_x3;
							var y52 = point2_y3 - point1_y3;
							has3 = Math.sqrt(x52 * x52 + y52 * y52) <= view6.width / 2;
							if(view6.shape == 3) {
								has3 = !has3;
							}
						}
						break;
					case 4:
						has3 = Math.abs(x - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
						break;
					case 5:
						has3 = !(Math.abs(x - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
						break;
					}
					tmp3 = has3;
				}
				if(tmp3) {
					var position6 = (y * filtered.getUInt16(0) + x) * 4;
					position6 += vision_ds_Image.OFFSET;
					filtered.b[position6] = 0;
					filtered.b[position6 + 1] = 0;
					filtered.b[position6 + 2] = 0;
					filtered.b[position6 + 3] = 0;
				}
			} else {
				var position7 = (y * filtered.getUInt16(0) + x) * 4;
				position7 += vision_ds_Image.OFFSET;
				filtered.b[position7] = 0;
				filtered.b[position7 + 1] = 0;
				filtered.b[position7 + 2] = 0;
				filtered.b[position7 + 3] = 0;
			}
			if(n[1][1] > n[1][0] && n[1][1] > n[1][2]) {
				var color2 = n[1][1];
				if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
					var this_x4 = x;
					var this_y4 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x4,this_y4)));
				} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v4 = null;
					var tmp4;
					if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v4 == null) {
						tmp4 = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
					} else {
						var has4 = false;
						var view8;
						if(v4 != null) {
							view8 = v4;
						} else {
							var _g16 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g17 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g18 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var filtered5 = filtered.b;
							var view9 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view8 = new vision_ds_ImageView(_g16,_g17,_g18,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered5[view9]);
						}
						switch(view8.shape) {
						case 0:
							has4 = x < view8.x + view8.width && y < view8.y + view8.height && x >= view8.x && y >= view8.y;
							break;
						case 1:
							has4 = !(x < view8.x + view8.width && y < view8.y + view8.height && x >= view8.x && y >= view8.y);
							break;
						case 2:case 3:
							if(view8.width > view8.height) {
								var a8 = view8.width / 2;
								var b8 = view8.height / 2;
								var c8 = Math.sqrt(a8 * a8 - b8 * b8);
								var x53 = view8.x + view8.width / 2 - c8;
								var y53 = view8.y + view8.height / 2;
								if(y53 == null) {
									y53 = 0;
								}
								if(x53 == null) {
									x53 = 0;
								}
								var f1_x8 = x53;
								var f1_y8 = y53;
								var x54 = view8.x + view8.width / 2 + c8;
								var y54 = view8.y + view8.height / 2;
								if(y54 == null) {
									y54 = 0;
								}
								if(x54 == null) {
									x54 = 0;
								}
								var f2_x8 = x54;
								var f2_y8 = y54;
								var x55 = x;
								var y55 = y;
								if(y55 == null) {
									y55 = 0;
								}
								if(x55 == null) {
									x55 = 0;
								}
								var p_x8 = x55;
								var p_y8 = y55;
								var x56 = p_x8 - f1_x8;
								var y56 = p_y8 - f1_y8;
								var x57 = p_x8 - f2_x8;
								var y57 = p_y8 - f2_y8;
								has4 = Math.sqrt(x56 * x56 + y56 * y56) + Math.sqrt(x57 * x57 + y57 * y57) <= view8.width;
								if(view8.shape == 3) {
									has4 = !has4;
								}
							} else if(view8.height > view8.width) {
								var a9 = view8.height / 2;
								var b9 = view8.width / 2;
								var c9 = Math.sqrt(a9 * a9 - b9 * b9);
								var x58 = view8.x + view8.width / 2;
								var y58 = view8.y + view8.height / 2 - c9;
								if(y58 == null) {
									y58 = 0;
								}
								if(x58 == null) {
									x58 = 0;
								}
								var f1_x9 = x58;
								var f1_y9 = y58;
								var x59 = view8.x + view8.width / 2;
								var y59 = view8.y + view8.height / 2 + c9;
								if(y59 == null) {
									y59 = 0;
								}
								if(x59 == null) {
									x59 = 0;
								}
								var f2_x9 = x59;
								var f2_y9 = y59;
								var x60 = x;
								var y60 = y;
								if(y60 == null) {
									y60 = 0;
								}
								if(x60 == null) {
									x60 = 0;
								}
								var p_x9 = x60;
								var p_y9 = y60;
								var x61 = p_x9 - f1_x9;
								var y61 = p_y9 - f1_y9;
								var x62 = p_x9 - f2_x9;
								var y62 = p_y9 - f2_y9;
								has4 = Math.sqrt(x61 * x61 + y61 * y61) + Math.sqrt(x62 * x62 + y62 * y62) <= view8.height;
								if(view8.shape == 3) {
									has4 = !has4;
								}
							} else {
								var x63 = x;
								var y63 = y;
								if(y63 == null) {
									y63 = 0;
								}
								if(x63 == null) {
									x63 = 0;
								}
								var point1_x4 = x63;
								var point1_y4 = y63;
								var x64 = view8.x + view8.width / 2;
								var y64 = view8.y + view8.height / 2;
								if(y64 == null) {
									y64 = 0;
								}
								if(x64 == null) {
									x64 = 0;
								}
								var point2_x4 = x64;
								var point2_y4 = y64;
								var x65 = point2_x4 - point1_x4;
								var y65 = point2_y4 - point1_y4;
								has4 = Math.sqrt(x65 * x65 + y65 * y65) <= view8.width / 2;
								if(view8.shape == 3) {
									has4 = !has4;
								}
							}
							break;
						case 4:
							has4 = Math.abs(x - view8.x - view8.width / 2) / (view8.width / 2) + Math.abs(y - view8.y - view8.height / 2) / (view8.height / 2) <= 1;
							break;
						case 5:
							has4 = !(Math.abs(x - view8.x - view8.width / 2) / (view8.width / 2) + Math.abs(y - view8.y - view8.height / 2) / (view8.height / 2) <= 1);
							break;
						}
						tmp4 = has4;
					}
					if(tmp4) {
						var position8 = (y * filtered.getUInt16(0) + x) * 4;
						position8 += vision_ds_Image.OFFSET;
						filtered.b[position8] = color2 >> 24 & 255;
						filtered.b[position8 + 1] = color2 >> 16 & 255;
						filtered.b[position8 + 2] = color2 >> 8 & 255;
						filtered.b[position8 + 3] = color2 & 255;
					}
				} else {
					var position9 = (y * filtered.getUInt16(0) + x) * 4;
					position9 += vision_ds_Image.OFFSET;
					filtered.b[position9] = color2 >> 24 & 255;
					filtered.b[position9 + 1] = color2 >> 16 & 255;
					filtered.b[position9 + 2] = color2 >> 8 & 255;
					filtered.b[position9 + 3] = color2 & 255;
				}
			} else if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
				var this_x5 = x;
				var this_y5 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x5,this_y5)));
			} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v5 = null;
				var tmp5;
				if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v5 == null) {
					tmp5 = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
				} else {
					var has5 = false;
					var view10;
					if(v5 != null) {
						view10 = v5;
					} else {
						var _g19 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g20 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g21 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var filtered6 = filtered.b;
						var view11 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view10 = new vision_ds_ImageView(_g19,_g20,_g21,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered6[view11]);
					}
					switch(view10.shape) {
					case 0:
						has5 = x < view10.x + view10.width && y < view10.y + view10.height && x >= view10.x && y >= view10.y;
						break;
					case 1:
						has5 = !(x < view10.x + view10.width && y < view10.y + view10.height && x >= view10.x && y >= view10.y);
						break;
					case 2:case 3:
						if(view10.width > view10.height) {
							var a10 = view10.width / 2;
							var b10 = view10.height / 2;
							var c10 = Math.sqrt(a10 * a10 - b10 * b10);
							var x66 = view10.x + view10.width / 2 - c10;
							var y66 = view10.y + view10.height / 2;
							if(y66 == null) {
								y66 = 0;
							}
							if(x66 == null) {
								x66 = 0;
							}
							var f1_x10 = x66;
							var f1_y10 = y66;
							var x67 = view10.x + view10.width / 2 + c10;
							var y67 = view10.y + view10.height / 2;
							if(y67 == null) {
								y67 = 0;
							}
							if(x67 == null) {
								x67 = 0;
							}
							var f2_x10 = x67;
							var f2_y10 = y67;
							var x68 = x;
							var y68 = y;
							if(y68 == null) {
								y68 = 0;
							}
							if(x68 == null) {
								x68 = 0;
							}
							var p_x10 = x68;
							var p_y10 = y68;
							var x69 = p_x10 - f1_x10;
							var y69 = p_y10 - f1_y10;
							var x70 = p_x10 - f2_x10;
							var y70 = p_y10 - f2_y10;
							has5 = Math.sqrt(x69 * x69 + y69 * y69) + Math.sqrt(x70 * x70 + y70 * y70) <= view10.width;
							if(view10.shape == 3) {
								has5 = !has5;
							}
						} else if(view10.height > view10.width) {
							var a11 = view10.height / 2;
							var b11 = view10.width / 2;
							var c11 = Math.sqrt(a11 * a11 - b11 * b11);
							var x71 = view10.x + view10.width / 2;
							var y71 = view10.y + view10.height / 2 - c11;
							if(y71 == null) {
								y71 = 0;
							}
							if(x71 == null) {
								x71 = 0;
							}
							var f1_x11 = x71;
							var f1_y11 = y71;
							var x72 = view10.x + view10.width / 2;
							var y72 = view10.y + view10.height / 2 + c11;
							if(y72 == null) {
								y72 = 0;
							}
							if(x72 == null) {
								x72 = 0;
							}
							var f2_x11 = x72;
							var f2_y11 = y72;
							var x73 = x;
							var y73 = y;
							if(y73 == null) {
								y73 = 0;
							}
							if(x73 == null) {
								x73 = 0;
							}
							var p_x11 = x73;
							var p_y11 = y73;
							var x74 = p_x11 - f1_x11;
							var y74 = p_y11 - f1_y11;
							var x75 = p_x11 - f2_x11;
							var y75 = p_y11 - f2_y11;
							has5 = Math.sqrt(x74 * x74 + y74 * y74) + Math.sqrt(x75 * x75 + y75 * y75) <= view10.height;
							if(view10.shape == 3) {
								has5 = !has5;
							}
						} else {
							var x76 = x;
							var y76 = y;
							if(y76 == null) {
								y76 = 0;
							}
							if(x76 == null) {
								x76 = 0;
							}
							var point1_x5 = x76;
							var point1_y5 = y76;
							var x77 = view10.x + view10.width / 2;
							var y77 = view10.y + view10.height / 2;
							if(y77 == null) {
								y77 = 0;
							}
							if(x77 == null) {
								x77 = 0;
							}
							var point2_x5 = x77;
							var point2_y5 = y77;
							var x78 = point2_x5 - point1_x5;
							var y78 = point2_y5 - point1_y5;
							has5 = Math.sqrt(x78 * x78 + y78 * y78) <= view10.width / 2;
							if(view10.shape == 3) {
								has5 = !has5;
							}
						}
						break;
					case 4:
						has5 = Math.abs(x - view10.x - view10.width / 2) / (view10.width / 2) + Math.abs(y - view10.y - view10.height / 2) / (view10.height / 2) <= 1;
						break;
					case 5:
						has5 = !(Math.abs(x - view10.x - view10.width / 2) / (view10.width / 2) + Math.abs(y - view10.y - view10.height / 2) / (view10.height / 2) <= 1);
						break;
					}
					tmp5 = has5;
				}
				if(tmp5) {
					var position10 = (y * filtered.getUInt16(0) + x) * 4;
					position10 += vision_ds_Image.OFFSET;
					filtered.b[position10] = 0;
					filtered.b[position10 + 1] = 0;
					filtered.b[position10 + 2] = 0;
					filtered.b[position10 + 3] = 0;
				}
			} else {
				var position11 = (y * filtered.getUInt16(0) + x) * 4;
				position11 += vision_ds_Image.OFFSET;
				filtered.b[position11] = 0;
				filtered.b[position11 + 1] = 0;
				filtered.b[position11 + 2] = 0;
				filtered.b[position11 + 3] = 0;
			}
			if(n[1][1] > n[0][0] && n[1][1] > n[2][2]) {
				var color3 = n[1][1];
				if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
					var this_x6 = x;
					var this_y6 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x6,this_y6)));
				} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v6 = null;
					var tmp6;
					if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v6 == null) {
						tmp6 = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
					} else {
						var has6 = false;
						var view12;
						if(v6 != null) {
							view12 = v6;
						} else {
							var _g22 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g23 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g24 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var filtered7 = filtered.b;
							var view13 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view12 = new vision_ds_ImageView(_g22,_g23,_g24,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered7[view13]);
						}
						switch(view12.shape) {
						case 0:
							has6 = x < view12.x + view12.width && y < view12.y + view12.height && x >= view12.x && y >= view12.y;
							break;
						case 1:
							has6 = !(x < view12.x + view12.width && y < view12.y + view12.height && x >= view12.x && y >= view12.y);
							break;
						case 2:case 3:
							if(view12.width > view12.height) {
								var a12 = view12.width / 2;
								var b12 = view12.height / 2;
								var c12 = Math.sqrt(a12 * a12 - b12 * b12);
								var x79 = view12.x + view12.width / 2 - c12;
								var y79 = view12.y + view12.height / 2;
								if(y79 == null) {
									y79 = 0;
								}
								if(x79 == null) {
									x79 = 0;
								}
								var f1_x12 = x79;
								var f1_y12 = y79;
								var x80 = view12.x + view12.width / 2 + c12;
								var y80 = view12.y + view12.height / 2;
								if(y80 == null) {
									y80 = 0;
								}
								if(x80 == null) {
									x80 = 0;
								}
								var f2_x12 = x80;
								var f2_y12 = y80;
								var x81 = x;
								var y81 = y;
								if(y81 == null) {
									y81 = 0;
								}
								if(x81 == null) {
									x81 = 0;
								}
								var p_x12 = x81;
								var p_y12 = y81;
								var x82 = p_x12 - f1_x12;
								var y82 = p_y12 - f1_y12;
								var x83 = p_x12 - f2_x12;
								var y83 = p_y12 - f2_y12;
								has6 = Math.sqrt(x82 * x82 + y82 * y82) + Math.sqrt(x83 * x83 + y83 * y83) <= view12.width;
								if(view12.shape == 3) {
									has6 = !has6;
								}
							} else if(view12.height > view12.width) {
								var a13 = view12.height / 2;
								var b13 = view12.width / 2;
								var c13 = Math.sqrt(a13 * a13 - b13 * b13);
								var x84 = view12.x + view12.width / 2;
								var y84 = view12.y + view12.height / 2 - c13;
								if(y84 == null) {
									y84 = 0;
								}
								if(x84 == null) {
									x84 = 0;
								}
								var f1_x13 = x84;
								var f1_y13 = y84;
								var x85 = view12.x + view12.width / 2;
								var y85 = view12.y + view12.height / 2 + c13;
								if(y85 == null) {
									y85 = 0;
								}
								if(x85 == null) {
									x85 = 0;
								}
								var f2_x13 = x85;
								var f2_y13 = y85;
								var x86 = x;
								var y86 = y;
								if(y86 == null) {
									y86 = 0;
								}
								if(x86 == null) {
									x86 = 0;
								}
								var p_x13 = x86;
								var p_y13 = y86;
								var x87 = p_x13 - f1_x13;
								var y87 = p_y13 - f1_y13;
								var x88 = p_x13 - f2_x13;
								var y88 = p_y13 - f2_y13;
								has6 = Math.sqrt(x87 * x87 + y87 * y87) + Math.sqrt(x88 * x88 + y88 * y88) <= view12.height;
								if(view12.shape == 3) {
									has6 = !has6;
								}
							} else {
								var x89 = x;
								var y89 = y;
								if(y89 == null) {
									y89 = 0;
								}
								if(x89 == null) {
									x89 = 0;
								}
								var point1_x6 = x89;
								var point1_y6 = y89;
								var x90 = view12.x + view12.width / 2;
								var y90 = view12.y + view12.height / 2;
								if(y90 == null) {
									y90 = 0;
								}
								if(x90 == null) {
									x90 = 0;
								}
								var point2_x6 = x90;
								var point2_y6 = y90;
								var x91 = point2_x6 - point1_x6;
								var y91 = point2_y6 - point1_y6;
								has6 = Math.sqrt(x91 * x91 + y91 * y91) <= view12.width / 2;
								if(view12.shape == 3) {
									has6 = !has6;
								}
							}
							break;
						case 4:
							has6 = Math.abs(x - view12.x - view12.width / 2) / (view12.width / 2) + Math.abs(y - view12.y - view12.height / 2) / (view12.height / 2) <= 1;
							break;
						case 5:
							has6 = !(Math.abs(x - view12.x - view12.width / 2) / (view12.width / 2) + Math.abs(y - view12.y - view12.height / 2) / (view12.height / 2) <= 1);
							break;
						}
						tmp6 = has6;
					}
					if(tmp6) {
						var position12 = (y * filtered.getUInt16(0) + x) * 4;
						position12 += vision_ds_Image.OFFSET;
						filtered.b[position12] = color3 >> 24 & 255;
						filtered.b[position12 + 1] = color3 >> 16 & 255;
						filtered.b[position12 + 2] = color3 >> 8 & 255;
						filtered.b[position12 + 3] = color3 & 255;
					}
				} else {
					var position13 = (y * filtered.getUInt16(0) + x) * 4;
					position13 += vision_ds_Image.OFFSET;
					filtered.b[position13] = color3 >> 24 & 255;
					filtered.b[position13 + 1] = color3 >> 16 & 255;
					filtered.b[position13 + 2] = color3 >> 8 & 255;
					filtered.b[position13 + 3] = color3 & 255;
				}
			} else if(!(x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)))) {
				var this_x7 = x;
				var this_y7 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(filtered,new vision_ds_Point2D(this_x7,this_y7)));
			} else if(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v7 = null;
				var tmp7;
				if(!(filtered.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != filtered.getUInt16(0) || filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4)) || filtered.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v7 == null) {
					tmp7 = x >= 0 && y >= 0 && x < filtered.getUInt16(0) && y < Math.ceil((filtered.length - vision_ds_Image.OFFSET) / (filtered.getUInt16(0) * 4));
				} else {
					var has7 = false;
					var view14;
					if(v7 != null) {
						view14 = v7;
					} else {
						var _g25 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g26 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g27 = filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var filtered8 = filtered.b;
						var view15 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view14 = new vision_ds_ImageView(_g25,_g26,_g27,filtered.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),filtered8[view15]);
					}
					switch(view14.shape) {
					case 0:
						has7 = x < view14.x + view14.width && y < view14.y + view14.height && x >= view14.x && y >= view14.y;
						break;
					case 1:
						has7 = !(x < view14.x + view14.width && y < view14.y + view14.height && x >= view14.x && y >= view14.y);
						break;
					case 2:case 3:
						if(view14.width > view14.height) {
							var a14 = view14.width / 2;
							var b14 = view14.height / 2;
							var c14 = Math.sqrt(a14 * a14 - b14 * b14);
							var x92 = view14.x + view14.width / 2 - c14;
							var y92 = view14.y + view14.height / 2;
							if(y92 == null) {
								y92 = 0;
							}
							if(x92 == null) {
								x92 = 0;
							}
							var f1_x14 = x92;
							var f1_y14 = y92;
							var x93 = view14.x + view14.width / 2 + c14;
							var y93 = view14.y + view14.height / 2;
							if(y93 == null) {
								y93 = 0;
							}
							if(x93 == null) {
								x93 = 0;
							}
							var f2_x14 = x93;
							var f2_y14 = y93;
							var x94 = x;
							var y94 = y;
							if(y94 == null) {
								y94 = 0;
							}
							if(x94 == null) {
								x94 = 0;
							}
							var p_x14 = x94;
							var p_y14 = y94;
							var x95 = p_x14 - f1_x14;
							var y95 = p_y14 - f1_y14;
							var x96 = p_x14 - f2_x14;
							var y96 = p_y14 - f2_y14;
							has7 = Math.sqrt(x95 * x95 + y95 * y95) + Math.sqrt(x96 * x96 + y96 * y96) <= view14.width;
							if(view14.shape == 3) {
								has7 = !has7;
							}
						} else if(view14.height > view14.width) {
							var a15 = view14.height / 2;
							var b15 = view14.width / 2;
							var c15 = Math.sqrt(a15 * a15 - b15 * b15);
							var x97 = view14.x + view14.width / 2;
							var y97 = view14.y + view14.height / 2 - c15;
							if(y97 == null) {
								y97 = 0;
							}
							if(x97 == null) {
								x97 = 0;
							}
							var f1_x15 = x97;
							var f1_y15 = y97;
							var x98 = view14.x + view14.width / 2;
							var y98 = view14.y + view14.height / 2 + c15;
							if(y98 == null) {
								y98 = 0;
							}
							if(x98 == null) {
								x98 = 0;
							}
							var f2_x15 = x98;
							var f2_y15 = y98;
							var x99 = x;
							var y99 = y;
							if(y99 == null) {
								y99 = 0;
							}
							if(x99 == null) {
								x99 = 0;
							}
							var p_x15 = x99;
							var p_y15 = y99;
							var x100 = p_x15 - f1_x15;
							var y100 = p_y15 - f1_y15;
							var x101 = p_x15 - f2_x15;
							var y101 = p_y15 - f2_y15;
							has7 = Math.sqrt(x100 * x100 + y100 * y100) + Math.sqrt(x101 * x101 + y101 * y101) <= view14.height;
							if(view14.shape == 3) {
								has7 = !has7;
							}
						} else {
							var x102 = x;
							var y102 = y;
							if(y102 == null) {
								y102 = 0;
							}
							if(x102 == null) {
								x102 = 0;
							}
							var point1_x7 = x102;
							var point1_y7 = y102;
							var x103 = view14.x + view14.width / 2;
							var y103 = view14.y + view14.height / 2;
							if(y103 == null) {
								y103 = 0;
							}
							if(x103 == null) {
								x103 = 0;
							}
							var point2_x7 = x103;
							var point2_y7 = y103;
							var x104 = point2_x7 - point1_x7;
							var y104 = point2_y7 - point1_y7;
							has7 = Math.sqrt(x104 * x104 + y104 * y104) <= view14.width / 2;
							if(view14.shape == 3) {
								has7 = !has7;
							}
						}
						break;
					case 4:
						has7 = Math.abs(x - view14.x - view14.width / 2) / (view14.width / 2) + Math.abs(y - view14.y - view14.height / 2) / (view14.height / 2) <= 1;
						break;
					case 5:
						has7 = !(Math.abs(x - view14.x - view14.width / 2) / (view14.width / 2) + Math.abs(y - view14.y - view14.height / 2) / (view14.height / 2) <= 1);
						break;
					}
					tmp7 = has7;
				}
				if(tmp7) {
					var position14 = (y * filtered.getUInt16(0) + x) * 4;
					position14 += vision_ds_Image.OFFSET;
					filtered.b[position14] = 0;
					filtered.b[position14 + 1] = 0;
					filtered.b[position14 + 2] = 0;
					filtered.b[position14 + 3] = 0;
				}
			} else {
				var position15 = (y * filtered.getUInt16(0) + x) * 4;
				position15 += vision_ds_Image.OFFSET;
				filtered.b[position15] = 0;
				filtered.b[position15 + 1] = 0;
				filtered.b[position15 + 2] = 0;
				filtered.b[position15 + 3] = 0;
			}
		}
	}
	return filtered;
};
vision_algorithms_Canny.applyHysteresis = function(image,highThreshold,lowThreshold) {
	var copy = vision_ds_Image.clone(image);
	var isStrong = function(edge) {
		return (edge >> 16 & 255) / 255 > highThreshold;
	};
	var isCandidate = function(edge) {
		if((edge >> 16 & 255) / 255 <= highThreshold) {
			return (edge >> 16 & 255) / 255 >= lowThreshold;
		} else {
			return false;
		}
	};
	var traverseEdge = null;
	traverseEdge = function(x,y) {
		if(x == 0 || y == 0 || x == image.getUInt16(0) - 1 || y == Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1) {
			return;
		}
		var isStrong1 = isStrong;
		if(!(x >= 0 && y >= 0 && x < copy.getUInt16(0) && y < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(copy,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * copy.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = copy.b[position] << 24 | copy.b[position + 1] << 16 | copy.b[position + 2] << 8 | copy.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this1 = value;
		if(isStrong1(this1)) {
			var neighbors = vision_algorithms_Canny.getNeighbors(3,x,y,copy);
			if(isCandidate(neighbors[0][0])) {
				var x1 = x - 1;
				var y1 = y - 1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(copy,new vision_ds_Point2D(this_x,this_y)));
				} else if(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var traverseEdge1;
					if(!(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						traverseEdge1 = x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = copy.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var copy1 = copy.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),copy1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						traverseEdge1 = has;
					}
					if(traverseEdge1) {
						var position = (y1 * copy.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						copy.b[position] = 0;
						copy.b[position + 1] = 255;
						copy.b[position + 2] = 255;
						copy.b[position + 3] = 255;
					}
				} else {
					var position = (y1 * copy.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					copy.b[position] = 0;
					copy.b[position + 1] = 255;
					copy.b[position + 2] = 255;
					copy.b[position + 3] = 255;
				}
				traverseEdge(x - 1,y - 1);
			}
			if(isCandidate(neighbors[0][1])) {
				var x1 = x - 1;
				var y1 = y - 1 + 1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(copy,new vision_ds_Point2D(this_x,this_y)));
				} else if(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var traverseEdge1;
					if(!(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						traverseEdge1 = x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = copy.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var copy1 = copy.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),copy1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						traverseEdge1 = has;
					}
					if(traverseEdge1) {
						var position = (y1 * copy.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						copy.b[position] = 0;
						copy.b[position + 1] = 255;
						copy.b[position + 2] = 255;
						copy.b[position + 3] = 255;
					}
				} else {
					var position = (y1 * copy.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					copy.b[position] = 0;
					copy.b[position + 1] = 255;
					copy.b[position + 2] = 255;
					copy.b[position + 3] = 255;
				}
				traverseEdge(x - 1,y - 1 + 1);
			}
			if(isCandidate(neighbors[1][0])) {
				var x1 = x - 1 + 1;
				var y1 = y - 1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(copy,new vision_ds_Point2D(this_x,this_y)));
				} else if(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var traverseEdge1;
					if(!(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						traverseEdge1 = x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = copy.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var copy1 = copy.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),copy1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						traverseEdge1 = has;
					}
					if(traverseEdge1) {
						var position = (y1 * copy.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						copy.b[position] = 0;
						copy.b[position + 1] = 255;
						copy.b[position + 2] = 255;
						copy.b[position + 3] = 255;
					}
				} else {
					var position = (y1 * copy.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					copy.b[position] = 0;
					copy.b[position + 1] = 255;
					copy.b[position + 2] = 255;
					copy.b[position + 3] = 255;
				}
				traverseEdge(x - 1 + 1,y - 1);
			}
			if(isCandidate(neighbors[1][1])) {
				var x1 = x - 1 + 1;
				var y1 = y - 1 + 1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(copy,new vision_ds_Point2D(this_x,this_y)));
				} else if(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var traverseEdge1;
					if(!(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						traverseEdge1 = x1 >= 0 && y1 >= 0 && x1 < copy.getUInt16(0) && y1 < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = copy.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var copy1 = copy.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),copy1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var p_x = x2;
								var p_y = y2;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						traverseEdge1 = has;
					}
					if(traverseEdge1) {
						var position = (y1 * copy.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						copy.b[position] = 0;
						copy.b[position + 1] = 255;
						copy.b[position + 2] = 255;
						copy.b[position + 3] = 255;
					}
				} else {
					var position = (y1 * copy.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					copy.b[position] = 0;
					copy.b[position + 1] = 255;
					copy.b[position + 2] = 255;
					copy.b[position + 3] = 255;
				}
				traverseEdge(x - 1 + 1,y - 1 + 1);
			}
		}
	};
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			traverseEdge(x,y);
		}
	}
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var isStrong1 = isStrong;
			if(!(x >= 0 && y >= 0 && x < copy.getUInt16(0) && y < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(copy,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y * copy.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = copy.b[position] << 24 | copy.b[position + 1] << 16 | copy.b[position + 2] << 8 | copy.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			if(!isStrong1(this1)) {
				if(!(x >= 0 && y >= 0 && x < copy.getUInt16(0) && y < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(copy,new vision_ds_Point2D(this_x1,this_y1)));
				} else if(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(copy.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != copy.getUInt16(0) || copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4)) || copy.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < copy.getUInt16(0) && y < Math.ceil((copy.length - vision_ds_Image.OFFSET) / (copy.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g4 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g5 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g6 = copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var copy1 = copy.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g4,_g5,_g6,copy.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),copy1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x1 = view.x + view.width / 2 - c;
								var y1 = view.y + view.height / 2;
								if(y1 == null) {
									y1 = 0;
								}
								if(x1 == null) {
									x1 = 0;
								}
								var f1_x = x1;
								var f1_y = y1;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x3 = x;
								var y3 = y;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var p_x = x3;
								var p_y = y3;
								var x4 = p_x - f1_x;
								var y4 = p_y - f1_y;
								var x5 = p_x - f2_x;
								var y5 = p_y - f2_y;
								has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x6 = view.x + view.width / 2;
								var y6 = view.y + view.height / 2 - c1;
								if(y6 == null) {
									y6 = 0;
								}
								if(x6 == null) {
									x6 = 0;
								}
								var f1_x1 = x6;
								var f1_y1 = y6;
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 + c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f2_x1 = x7;
								var f2_y1 = y7;
								var x8 = x;
								var y8 = y;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var p_x1 = x8;
								var p_y1 = y8;
								var x9 = p_x1 - f1_x1;
								var y9 = p_y1 - f1_y1;
								var x10 = p_x1 - f2_x1;
								var y10 = p_y1 - f2_y1;
								has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x11 = x;
								var y11 = y;
								if(y11 == null) {
									y11 = 0;
								}
								if(x11 == null) {
									x11 = 0;
								}
								var point1_x = x11;
								var point1_y = y11;
								var x12 = view.x + view.width / 2;
								var y12 = view.y + view.height / 2;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var point2_x = x12;
								var point2_y = y12;
								var x13 = point2_x - point1_x;
								var y13 = point2_y - point1_y;
								has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position1 = (y * copy.getUInt16(0) + x) * 4;
						position1 += vision_ds_Image.OFFSET;
						copy.b[position1] = 0;
						copy.b[position1 + 1] = 0;
						copy.b[position1 + 2] = 0;
						copy.b[position1 + 3] = 0;
					}
				} else {
					var position2 = (y * copy.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					copy.b[position2] = 0;
					copy.b[position2 + 1] = 0;
					copy.b[position2 + 2] = 0;
					copy.b[position2 + 3] = 0;
				}
			}
		}
	}
	return copy;
};
vision_algorithms_Canny.getNeighbors = function(kernalSize,x,y,image) {
	var neighbors = [];
	var _g = 0;
	var _g1 = kernalSize + 1;
	while(_g < _g1) {
		var i = _g++;
		neighbors[i] = [];
	}
	var roundedDown = (kernalSize - 1) / 2 | 0;
	var _g = -roundedDown;
	var _g1 = roundedDown + 1;
	while(_g < _g1) {
		var X = _g++;
		var _g2 = -roundedDown;
		var _g3 = roundedDown + 1;
		while(_g2 < _g3) {
			var Y = _g2++;
			var tmp = X + roundedDown;
			var x1 = x + X;
			var y1 = y + Y;
			var tmp1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this1 = [x1,image.getUInt16(0)];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i = _g4++;
					if(values[i] > max) {
						max = values[i];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i1 = _g6++;
					if(values1[i1] < min) {
						min = values1[i1];
					}
				}
				var x2 = min;
				var this3 = [y1,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i2 = _g8++;
					if(values2[i2] > max1) {
						max1 = values2[i2];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i3 = _g10++;
					if(values3[i3] < min1) {
						min1 = values3[i3];
					}
				}
				var y2 = min1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y2 * image.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				tmp1 = this5;
			} else {
				if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x1;
					var this_y1 = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y1 * image.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				tmp1 = this6;
			}
			neighbors[tmp].push(tmp1);
		}
	}
	return neighbors;
};
var vision_algorithms_Gaussian = function() { };
vision_algorithms_Gaussian.__name__ = true;
vision_algorithms_Gaussian.create1x1Kernal = function(sigma) {
	return [[1]];
};
vision_algorithms_Gaussian.create3x3Kernal = function(sigma) {
	var r;
	var s = 2.0 * sigma * sigma;
	var kernal = [[],[],[],[]];
	var sum = 0.0;
	r = Math.sqrt(2);
	kernal[0][0] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[0][0];
	r = Math.sqrt(1);
	kernal[0][1] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[0][1];
	r = Math.sqrt(2);
	kernal[0][2] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[0][2];
	r = Math.sqrt(1);
	kernal[1][0] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[1][0];
	r = Math.sqrt(0);
	kernal[1][1] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[1][1];
	r = Math.sqrt(1);
	kernal[1][2] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[1][2];
	r = Math.sqrt(2);
	kernal[2][0] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[2][0];
	r = Math.sqrt(1);
	kernal[2][1] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[2][1];
	r = Math.sqrt(2);
	kernal[2][2] = Math.exp(-(r * r) / s) / (Math.PI * s);
	sum += kernal[2][2];
	kernal[0][0] /= sum;
	kernal[0][1] /= sum;
	kernal[0][2] /= sum;
	kernal[1][0] /= sum;
	kernal[1][1] /= sum;
	kernal[1][2] /= sum;
	kernal[2][0] /= sum;
	kernal[2][1] /= sum;
	kernal[2][2] /= sum;
	return kernal;
};
vision_algorithms_Gaussian.create5x5Kernal = function(sigma) {
	var r;
	var s = 2.0 * sigma * sigma;
	var kernal = [[],[],[],[],[],[]];
	var sum = 0.0;
	var _g = -2;
	while(_g < 3) {
		var x = _g++;
		var _g1 = -2;
		while(_g1 < 3) {
			var y = _g1++;
			r = Math.sqrt(x * x + y * y);
			kernal[x + 2][y + 2] = Math.exp(-(r * r) / s) / (Math.PI * s);
			sum += kernal[x + 2][y + 2];
		}
	}
	kernal[0][0] /= sum;
	kernal[0][1] /= sum;
	kernal[0][2] /= sum;
	kernal[0][3] /= sum;
	kernal[0][4] /= sum;
	kernal[1][0] /= sum;
	kernal[1][1] /= sum;
	kernal[1][2] /= sum;
	kernal[1][3] /= sum;
	kernal[1][4] /= sum;
	kernal[2][0] /= sum;
	kernal[2][1] /= sum;
	kernal[2][2] /= sum;
	kernal[2][3] /= sum;
	kernal[2][4] /= sum;
	kernal[3][0] /= sum;
	kernal[3][1] /= sum;
	kernal[3][2] /= sum;
	kernal[3][3] /= sum;
	kernal[3][4] /= sum;
	kernal[4][0] /= sum;
	kernal[4][1] /= sum;
	kernal[4][2] /= sum;
	kernal[4][3] /= sum;
	kernal[4][4] /= sum;
	return kernal;
};
vision_algorithms_Gaussian.create7x7Kernal = function(sigma) {
	var r;
	var s = 2.0 * sigma * sigma;
	var kernal = [[],[],[],[],[],[],[],[]];
	var sum = 0.0;
	var _g = -3;
	while(_g < 4) {
		var x = _g++;
		var _g1 = -3;
		while(_g1 < 4) {
			var y = _g1++;
			r = Math.sqrt(x * x + y * y);
			kernal[x + 3][y + 3] = Math.exp(-(r * r) / s) / (Math.PI * s);
			sum += kernal[x + 3][y + 3];
		}
	}
	kernal[0][0] /= sum;
	kernal[0][1] /= sum;
	kernal[0][2] /= sum;
	kernal[0][3] /= sum;
	kernal[0][4] /= sum;
	kernal[0][5] /= sum;
	kernal[0][6] /= sum;
	kernal[1][0] /= sum;
	kernal[1][1] /= sum;
	kernal[1][2] /= sum;
	kernal[1][3] /= sum;
	kernal[1][4] /= sum;
	kernal[1][5] /= sum;
	kernal[1][6] /= sum;
	kernal[2][0] /= sum;
	kernal[2][1] /= sum;
	kernal[2][2] /= sum;
	kernal[2][3] /= sum;
	kernal[2][4] /= sum;
	kernal[2][5] /= sum;
	kernal[2][6] /= sum;
	kernal[3][0] /= sum;
	kernal[3][1] /= sum;
	kernal[3][2] /= sum;
	kernal[3][3] /= sum;
	kernal[3][4] /= sum;
	kernal[3][5] /= sum;
	kernal[3][6] /= sum;
	kernal[4][0] /= sum;
	kernal[4][1] /= sum;
	kernal[4][2] /= sum;
	kernal[4][3] /= sum;
	kernal[4][4] /= sum;
	kernal[4][5] /= sum;
	kernal[4][6] /= sum;
	kernal[5][0] /= sum;
	kernal[5][1] /= sum;
	kernal[5][2] /= sum;
	kernal[5][3] /= sum;
	kernal[5][4] /= sum;
	kernal[5][5] /= sum;
	kernal[5][6] /= sum;
	kernal[6][0] /= sum;
	kernal[6][1] /= sum;
	kernal[6][2] /= sum;
	kernal[6][3] /= sum;
	kernal[6][4] /= sum;
	kernal[6][5] /= sum;
	kernal[6][6] /= sum;
	return kernal;
};
vision_algorithms_Gaussian.create9x9Kernal = function(sigma) {
	var r;
	var s = 2.0 * sigma * sigma;
	var kernal = [[],[],[],[],[],[],[],[],[],[]];
	var sum = 0.0;
	var _g = -4;
	while(_g < 5) {
		var x = _g++;
		var _g1 = -4;
		while(_g1 < 5) {
			var y = _g1++;
			r = Math.sqrt(x * x + y * y);
			kernal[x + 4][y + 4] = Math.exp(-(r * r) / s) / (Math.PI * s);
			sum += kernal[x + 4][y + 4];
		}
	}
	kernal[0][0] /= sum;
	kernal[0][1] /= sum;
	kernal[0][2] /= sum;
	kernal[0][3] /= sum;
	kernal[0][4] /= sum;
	kernal[0][5] /= sum;
	kernal[0][6] /= sum;
	kernal[0][7] /= sum;
	kernal[0][8] /= sum;
	kernal[1][0] /= sum;
	kernal[1][1] /= sum;
	kernal[1][2] /= sum;
	kernal[1][3] /= sum;
	kernal[1][4] /= sum;
	kernal[1][5] /= sum;
	kernal[1][6] /= sum;
	kernal[1][7] /= sum;
	kernal[1][8] /= sum;
	kernal[2][0] /= sum;
	kernal[2][1] /= sum;
	kernal[2][2] /= sum;
	kernal[2][3] /= sum;
	kernal[2][4] /= sum;
	kernal[2][5] /= sum;
	kernal[2][6] /= sum;
	kernal[2][7] /= sum;
	kernal[2][8] /= sum;
	kernal[3][0] /= sum;
	kernal[3][1] /= sum;
	kernal[3][2] /= sum;
	kernal[3][3] /= sum;
	kernal[3][4] /= sum;
	kernal[3][5] /= sum;
	kernal[3][6] /= sum;
	kernal[3][7] /= sum;
	kernal[3][8] /= sum;
	kernal[4][0] /= sum;
	kernal[4][1] /= sum;
	kernal[4][2] /= sum;
	kernal[4][3] /= sum;
	kernal[4][4] /= sum;
	kernal[4][5] /= sum;
	kernal[4][6] /= sum;
	kernal[4][7] /= sum;
	kernal[4][8] /= sum;
	kernal[5][0] /= sum;
	kernal[5][1] /= sum;
	kernal[5][2] /= sum;
	kernal[5][3] /= sum;
	kernal[5][4] /= sum;
	kernal[5][5] /= sum;
	kernal[5][6] /= sum;
	kernal[5][7] /= sum;
	kernal[5][8] /= sum;
	kernal[6][0] /= sum;
	kernal[6][1] /= sum;
	kernal[6][2] /= sum;
	kernal[6][3] /= sum;
	kernal[6][4] /= sum;
	kernal[6][5] /= sum;
	kernal[6][6] /= sum;
	kernal[6][7] /= sum;
	kernal[6][8] /= sum;
	kernal[7][0] /= sum;
	kernal[7][1] /= sum;
	kernal[7][2] /= sum;
	kernal[7][3] /= sum;
	kernal[7][4] /= sum;
	kernal[7][5] /= sum;
	kernal[7][6] /= sum;
	kernal[7][7] /= sum;
	kernal[7][8] /= sum;
	kernal[8][0] /= sum;
	kernal[8][1] /= sum;
	kernal[8][2] /= sum;
	kernal[8][3] /= sum;
	kernal[8][4] /= sum;
	kernal[8][5] /= sum;
	kernal[8][6] /= sum;
	kernal[8][7] /= sum;
	kernal[8][8] /= sum;
	return kernal;
};
vision_algorithms_Gaussian.createKernalOfSize = function(size,sigma) {
	if(size % 2 == 0 || size <= 0) {
		throw haxe_Exception.thrown(new vision_exceptions_InvalidGaussianKernalSize(size));
	}
	var r;
	var s = 2.0 * sigma * sigma;
	var sum = 0.;
	var kernal = new vision_ds_Array2D(size,size);
	var avg = (size - 1) / 2 | 0;
	var _g = -avg;
	var _g1 = avg + 1;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = -avg;
		var _g3 = avg + 1;
		while(_g2 < _g3) {
			var y = _g2++;
			r = Math.sqrt(x * x + y * y);
			kernal.inner[x + avg + (y + avg) * kernal.height] = Math.exp(-(r * r) / s) / (Math.PI * s);
			sum += kernal.inner[(y + avg) * kernal.height + (x + avg)];
		}
	}
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = size;
		while(_g2 < _g3) {
			var j = _g2++;
			kernal.inner[i + j * kernal.height] = kernal.inner[j * kernal.height + i] / sum;
		}
	}
	return kernal;
};
var vision_algorithms_Hough = function() { };
vision_algorithms_Hough.__name__ = true;
vision_algorithms_Hough.toHoughSpace = function(image) {
	var rhoMax = Math.sqrt(image.getUInt16(0) * image.getUInt16(0) + Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) * Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
	var accumulator = vision_ds_hough_HoughAccumulator._new(rhoMax | 0);
	var height = rhoMax | 0;
	var color = -1;
	if(color == null) {
		color = 0;
	}
	var this1 = new haxe_io_Bytes(new ArrayBuffer(181 * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,181);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,181);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = color >> 24 & 255;
		this2.b[i + 1] = color >> 16 & 255;
		this2.b[i + 2] = color >> 8 & 255;
		this2.b[i + 3] = color & 255;
		i += 4;
	}
	var houghSpace = this2;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y * image.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			if(Math.abs(this1 >> 16 & 255) == 255) {
				var rho;
				var theta = 0.;
				var thetaIndex = 0;
				while(thetaIndex < 180) {
					rho = x * Math.cos(theta) + y * Math.sin(theta);
					vision_ds_hough_HoughAccumulator.incrementCell(accumulator,rho,thetaIndex);
					var y1 = rho | 0;
					var Alpha = 0.01;
					if(Alpha == null) {
						Alpha = 1;
					}
					var this2 = 0;
					var color = this2;
					var Alpha1 = Alpha;
					if(Alpha1 == null) {
						Alpha1 = 1;
					}
					var value1 = Math.round(0);
					color &= -16711681;
					color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
					var value2 = Math.round(0);
					color &= -65281;
					color |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
					var value3 = Math.round(0);
					color &= -256;
					color |= value3 > 255 ? 255 : value3 < 0 ? 0 : value3;
					var value4 = Math.round(Alpha1 * 255);
					color &= 16777215;
					color |= (value4 > 255 ? 255 : value4 < 0 ? 0 : value4) << 24;
					var color1 = color;
					if(thetaIndex < 0 || thetaIndex >= houghSpace.getUInt16(0) || y1 < 0 || y1 >= Math.ceil((houghSpace.length - vision_ds_Image.OFFSET) / (houghSpace.getUInt16(0) * 4))) {
						var this_x1 = thetaIndex;
						var this_y1 = y1;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(houghSpace,new vision_ds_Point2D(this_x1,this_y1)));
					} else {
						if(!(thetaIndex >= 0 && y1 >= 0 && thetaIndex < houghSpace.getUInt16(0) && y1 < Math.ceil((houghSpace.length - vision_ds_Image.OFFSET) / (houghSpace.getUInt16(0) * 4)))) {
							var this_x2 = thetaIndex;
							var this_y2 = y1;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(houghSpace,new vision_ds_Point2D(this_x2,this_y2)));
						}
						var position1 = (y1 * houghSpace.getUInt16(0) + thetaIndex) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value5 = houghSpace.b[position1] << 24 | houghSpace.b[position1 + 1] << 16 | houghSpace.b[position1 + 2] << 8 | houghSpace.b[position1 + 3];
						if(value5 == null) {
							value5 = 0;
						}
						var this3 = value5;
						var oldColor = this3;
						var Red = (color1 >> 16 & 255) / 255 * ((color1 >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color1 >> 24 & 255) / 255);
						var Green = (color1 >> 8 & 255) / 255 * ((color1 >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color1 >> 24 & 255) / 255);
						var Blue = (color1 & 255) / 255 * ((color1 >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color1 >> 24 & 255) / 255);
						var Alpha2 = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color1 >> 24 & 255) / 255);
						if(Alpha2 == null) {
							Alpha2 = 1;
						}
						var this4 = 0;
						var color2 = this4;
						var Alpha3 = Alpha2;
						if(Alpha3 == null) {
							Alpha3 = 1;
						}
						var value6 = Math.round(Red * 255);
						color2 &= -16711681;
						color2 |= (value6 > 255 ? 255 : value6 < 0 ? 0 : value6) << 16;
						var value7 = Math.round(Green * 255);
						color2 &= -65281;
						color2 |= (value7 > 255 ? 255 : value7 < 0 ? 0 : value7) << 8;
						var value8 = Math.round(Blue * 255);
						color2 &= -256;
						color2 |= value8 > 255 ? 255 : value8 < 0 ? 0 : value8;
						var value9 = Math.round(Alpha3 * 255);
						color2 &= 16777215;
						color2 |= (value9 > 255 ? 255 : value9 < 0 ? 0 : value9) << 24;
						var newColor = color2;
						if(!(thetaIndex >= 0 && y1 >= 0 && thetaIndex < houghSpace.getUInt16(0) && y1 < Math.ceil((houghSpace.length - vision_ds_Image.OFFSET) / (houghSpace.getUInt16(0) * 4)))) {
							var this_x3 = thetaIndex;
							var this_y3 = y1;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(houghSpace,new vision_ds_Point2D(this_x3,this_y3)));
						} else if(houghSpace.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || houghSpace.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || houghSpace.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != houghSpace.getUInt16(0) || houghSpace.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((houghSpace.length - vision_ds_Image.OFFSET) / (houghSpace.getUInt16(0) * 4)) || houghSpace.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
							var v = null;
							var tmp;
							if(!(houghSpace.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || houghSpace.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || houghSpace.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != houghSpace.getUInt16(0) || houghSpace.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((houghSpace.length - vision_ds_Image.OFFSET) / (houghSpace.getUInt16(0) * 4)) || houghSpace.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
								tmp = thetaIndex >= 0 && y1 >= 0 && thetaIndex < houghSpace.getUInt16(0) && y1 < Math.ceil((houghSpace.length - vision_ds_Image.OFFSET) / (houghSpace.getUInt16(0) * 4));
							} else {
								var has = false;
								var view;
								if(v != null) {
									view = v;
								} else {
									var _g4 = houghSpace.getUInt16(vision_ds_Image.WIDTH_BYTES);
									var _g5 = houghSpace.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
									var _g6 = houghSpace.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
									var houghSpace1 = houghSpace.b;
									var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
									view = new vision_ds_ImageView(_g4,_g5,_g6,houghSpace.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),houghSpace1[view1]);
								}
								switch(view.shape) {
								case 0:
									has = thetaIndex < view.x + view.width && y1 < view.y + view.height && thetaIndex >= view.x && y1 >= view.y;
									break;
								case 1:
									has = !(thetaIndex < view.x + view.width && y1 < view.y + view.height && thetaIndex >= view.x && y1 >= view.y);
									break;
								case 2:case 3:
									if(view.width > view.height) {
										var a = view.width / 2;
										var b = view.height / 2;
										var c = Math.sqrt(a * a - b * b);
										var x1 = view.x + view.width / 2 - c;
										var y2 = view.y + view.height / 2;
										if(y2 == null) {
											y2 = 0;
										}
										if(x1 == null) {
											x1 = 0;
										}
										var f1_x = x1;
										var f1_y = y2;
										var x2 = view.x + view.width / 2 + c;
										var y3 = view.y + view.height / 2;
										if(y3 == null) {
											y3 = 0;
										}
										if(x2 == null) {
											x2 = 0;
										}
										var f2_x = x2;
										var f2_y = y3;
										var x3 = thetaIndex;
										var y4 = y1;
										if(y4 == null) {
											y4 = 0;
										}
										if(x3 == null) {
											x3 = 0;
										}
										var p_x = x3;
										var p_y = y4;
										var x4 = p_x - f1_x;
										var y5 = p_y - f1_y;
										var x5 = p_x - f2_x;
										var y6 = p_y - f2_y;
										has = Math.sqrt(x4 * x4 + y5 * y5) + Math.sqrt(x5 * x5 + y6 * y6) <= view.width;
										if(view.shape == 3) {
											has = !has;
										}
									} else if(view.height > view.width) {
										var a1 = view.height / 2;
										var b1 = view.width / 2;
										var c1 = Math.sqrt(a1 * a1 - b1 * b1);
										var x6 = view.x + view.width / 2;
										var y7 = view.y + view.height / 2 - c1;
										if(y7 == null) {
											y7 = 0;
										}
										if(x6 == null) {
											x6 = 0;
										}
										var f1_x1 = x6;
										var f1_y1 = y7;
										var x7 = view.x + view.width / 2;
										var y8 = view.y + view.height / 2 + c1;
										if(y8 == null) {
											y8 = 0;
										}
										if(x7 == null) {
											x7 = 0;
										}
										var f2_x1 = x7;
										var f2_y1 = y8;
										var x8 = thetaIndex;
										var y9 = y1;
										if(y9 == null) {
											y9 = 0;
										}
										if(x8 == null) {
											x8 = 0;
										}
										var p_x1 = x8;
										var p_y1 = y9;
										var x9 = p_x1 - f1_x1;
										var y10 = p_y1 - f1_y1;
										var x10 = p_x1 - f2_x1;
										var y11 = p_y1 - f2_y1;
										has = Math.sqrt(x9 * x9 + y10 * y10) + Math.sqrt(x10 * x10 + y11 * y11) <= view.height;
										if(view.shape == 3) {
											has = !has;
										}
									} else {
										var x11 = thetaIndex;
										var y12 = y1;
										if(y12 == null) {
											y12 = 0;
										}
										if(x11 == null) {
											x11 = 0;
										}
										var point1_x = x11;
										var point1_y = y12;
										var x12 = view.x + view.width / 2;
										var y13 = view.y + view.height / 2;
										if(y13 == null) {
											y13 = 0;
										}
										if(x12 == null) {
											x12 = 0;
										}
										var point2_x = x12;
										var point2_y = y13;
										var x13 = point2_x - point1_x;
										var y14 = point2_y - point1_y;
										has = Math.sqrt(x13 * x13 + y14 * y14) <= view.width / 2;
										if(view.shape == 3) {
											has = !has;
										}
									}
									break;
								case 4:
									has = Math.abs(thetaIndex - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
									break;
								case 5:
									has = !(Math.abs(thetaIndex - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
									break;
								}
								tmp = has;
							}
							if(tmp) {
								var position2 = (y1 * houghSpace.getUInt16(0) + thetaIndex) * 4;
								position2 += vision_ds_Image.OFFSET;
								houghSpace.b[position2] = newColor >> 24 & 255;
								houghSpace.b[position2 + 1] = newColor >> 16 & 255;
								houghSpace.b[position2 + 2] = newColor >> 8 & 255;
								houghSpace.b[position2 + 3] = newColor & 255;
							}
						} else {
							var position3 = (y1 * houghSpace.getUInt16(0) + thetaIndex) * 4;
							position3 += vision_ds_Image.OFFSET;
							houghSpace.b[position3] = newColor >> 24 & 255;
							houghSpace.b[position3 + 1] = newColor >> 16 & 255;
							houghSpace.b[position3 + 2] = newColor >> 8 & 255;
							houghSpace.b[position3 + 3] = newColor & 255;
						}
					}
					theta += Math.PI / 360;
					++thetaIndex;
				}
			}
		}
	}
	return new vision_ds_hough_HoughSpace(accumulator,houghSpace);
};
vision_algorithms_Hough.detectMaximas = function(space,threshold) {
	if(threshold == null) {
		threshold = 30;
	}
	space.maximums = vision_ds_hough_HoughAccumulator.getMaximas(space.accumulator,threshold);
	return space;
};
vision_algorithms_Hough.getRays = function(space) {
	var this1 = space.image;
	var houghHeight = Math.sqrt(2) * Math.max(Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)),space.image.getUInt16(0)) / 2;
	var centerX = space.image.getUInt16(0) / 2;
	var this1 = space.image;
	var centerY = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) / 2;
	space.rays = [];
	var _g = 0;
	var _g1 = space.maximums;
	while(_g < _g1.length) {
		var max = _g1[_g];
		++_g;
		var theta = max.y * Math.PI / 180;
		var r = max.x;
		var thetaSin = Math.sin(theta);
		var thetaCos = Math.cos(theta);
		if(theta < Math.PI * 0.25 || theta > Math.PI * 0.75) {
			var x1 = 0;
			var y1 = 0;
			var x2 = 0;
			var this1 = space.image;
			var y2 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
			x1 = (r - houghHeight - (y1 - centerY) * thetaSin) / thetaCos + centerX;
			x2 = (r - houghHeight - (y2 - centerY) * thetaSin) / thetaCos + centerX;
			var space1 = space.rays;
			var point1 = new vision_ds_Point2D(x1,y1);
			var x = x2;
			var y = y2;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var point2_x = x;
			var point2_y = y;
			var s = (point2_y - point1.y) / (point2_x - point1.x);
			space1.push(new vision_ds_Ray2D(point1,s));
		} else {
			var x11 = 0;
			var y11 = 0;
			var x21 = space.image.getUInt16(0) - 1;
			var y21 = 0;
			y11 = (r - houghHeight - (x11 - centerX) * thetaCos) / thetaSin + centerY;
			y21 = (r - houghHeight - (x21 - centerX) * thetaCos) / thetaSin + centerY;
			var space2 = space.rays;
			var point11 = new vision_ds_Point2D(x11,y11);
			var x3 = x21;
			var y3 = y21;
			if(y3 == null) {
				y3 = 0;
			}
			if(x3 == null) {
				x3 = 0;
			}
			var point2_x1 = x3;
			var point2_y1 = y3;
			var s1 = (point2_y1 - point11.y) / (point2_x1 - point11.x);
			space2.push(new vision_ds_Ray2D(point11,s1));
		}
	}
	return space;
};
var vision_algorithms_Laplacian = function() { };
vision_algorithms_Laplacian.__name__ = true;
vision_algorithms_Laplacian.convolveWithLaplacianOperator = function(image,positive) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var edgeColors = this2;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var j = _g2++;
			var sign = positive ? 1 : -1;
			var x = i - 1;
			var pixel;
			if(!(x >= 0 && j >= 0 && x < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this1 = [x,image.getUInt16(0)];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i1 = _g4++;
					if(values[i1] > max) {
						max = values[i1];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i2 = _g6++;
					if(values1[i2] < min) {
						min = values1[i2];
					}
				}
				var x1 = min;
				var this3 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i3 = _g8++;
					if(values2[i3] > max1) {
						max1 = values2[i3];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i4 = _g10++;
					if(values3[i4] < min1) {
						min1 = values3[i4];
					}
				}
				var y = min1;
				if(!(x1 >= 0 && y >= 0 && x1 < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y * image.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				pixel = this5;
			} else {
				if(!(x >= 0 && j >= 0 && x < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (j * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				pixel = this6;
			}
			var gray = ((pixel >> 16 & 255) + (pixel >> 8 & 255) + (pixel & 255)) / 3 | 0;
			var Alpha = pixel >> 24 & 255;
			if(Alpha == null) {
				Alpha = 255;
			}
			var this7 = 0;
			var color = this7;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 255;
			}
			color &= -16711681;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
			color &= -65281;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
			color &= -256;
			color |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
			color &= 16777215;
			color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
			var pos01 = (color >> 16 & 255) * sign;
			var y1 = j - 1;
			var pixel1;
			if(!(i >= 0 && y1 >= 0 && i < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this8 = [i,image.getUInt16(0)];
				var values4 = this8;
				var max2 = values4[0];
				var _g12 = 0;
				var _g13 = values4.length;
				while(_g12 < _g13) {
					var i5 = _g12++;
					if(values4[i5] > max2) {
						max2 = values4[i5];
					}
				}
				var this9 = [max2,0];
				var values5 = this9;
				var min2 = values5[0];
				var _g14 = 0;
				var _g15 = values5.length;
				while(_g14 < _g15) {
					var i6 = _g14++;
					if(values5[i6] < min2) {
						min2 = values5[i6];
					}
				}
				var x2 = min2;
				var this10 = [y1,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values6 = this10;
				var max3 = values6[0];
				var _g16 = 0;
				var _g17 = values6.length;
				while(_g16 < _g17) {
					var i7 = _g16++;
					if(values6[i7] > max3) {
						max3 = values6[i7];
					}
				}
				var this11 = [max3,0];
				var values7 = this11;
				var min3 = values7[0];
				var _g18 = 0;
				var _g19 = values7.length;
				while(_g18 < _g19) {
					var i8 = _g18++;
					if(values7[i8] < min3) {
						min3 = values7[i8];
					}
				}
				var y2 = min3;
				if(!(x2 >= 0 && y2 >= 0 && x2 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x2 = x2;
					var this_y2 = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position2 = (y2 * image.getUInt16(0) + x2) * 4;
				position2 += vision_ds_Image.OFFSET;
				var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var this12 = value2;
				pixel1 = this12;
			} else {
				if(!(i >= 0 && y1 >= 0 && i < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x3 = i;
					var this_y3 = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x3,this_y3)));
				}
				var position3 = (y1 * image.getUInt16(0) + i) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value3 = image.b[position3] << 24 | image.b[position3 + 1] << 16 | image.b[position3 + 2] << 8 | image.b[position3 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var this13 = value3;
				pixel1 = this13;
			}
			var gray1 = ((pixel1 >> 16 & 255) + (pixel1 >> 8 & 255) + (pixel1 & 255)) / 3 | 0;
			var Alpha2 = pixel1 >> 24 & 255;
			if(Alpha2 == null) {
				Alpha2 = 255;
			}
			var this14 = 0;
			var color1 = this14;
			var Alpha3 = Alpha2;
			if(Alpha3 == null) {
				Alpha3 = 255;
			}
			color1 &= -16711681;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 16;
			color1 &= -65281;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 8;
			color1 &= -256;
			color1 |= gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1;
			color1 &= 16777215;
			color1 |= (Alpha3 > 255 ? 255 : Alpha3 < 0 ? 0 : Alpha3) << 24;
			var pos10 = (color1 >> 16 & 255) * sign;
			var pixel2;
			if(!(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this15 = [i,image.getUInt16(0)];
				var values8 = this15;
				var max4 = values8[0];
				var _g20 = 0;
				var _g21 = values8.length;
				while(_g20 < _g21) {
					var i9 = _g20++;
					if(values8[i9] > max4) {
						max4 = values8[i9];
					}
				}
				var this16 = [max4,0];
				var values9 = this16;
				var min4 = values9[0];
				var _g22 = 0;
				var _g23 = values9.length;
				while(_g22 < _g23) {
					var i10 = _g22++;
					if(values9[i10] < min4) {
						min4 = values9[i10];
					}
				}
				var x3 = min4;
				var this17 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values10 = this17;
				var max5 = values10[0];
				var _g24 = 0;
				var _g25 = values10.length;
				while(_g24 < _g25) {
					var i11 = _g24++;
					if(values10[i11] > max5) {
						max5 = values10[i11];
					}
				}
				var this18 = [max5,0];
				var values11 = this18;
				var min5 = values11[0];
				var _g26 = 0;
				var _g27 = values11.length;
				while(_g26 < _g27) {
					var i12 = _g26++;
					if(values11[i12] < min5) {
						min5 = values11[i12];
					}
				}
				var y3 = min5;
				if(!(x3 >= 0 && y3 >= 0 && x3 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x4 = x3;
					var this_y4 = y3;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position4 = (y3 * image.getUInt16(0) + x3) * 4;
				position4 += vision_ds_Image.OFFSET;
				var value4 = image.b[position4] << 24 | image.b[position4 + 1] << 16 | image.b[position4 + 2] << 8 | image.b[position4 + 3];
				if(value4 == null) {
					value4 = 0;
				}
				var this19 = value4;
				pixel2 = this19;
			} else {
				if(!(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x5 = i;
					var this_y5 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x5,this_y5)));
				}
				var position5 = (j * image.getUInt16(0) + i) * 4;
				position5 += vision_ds_Image.OFFSET;
				var value5 = image.b[position5] << 24 | image.b[position5 + 1] << 16 | image.b[position5 + 2] << 8 | image.b[position5 + 3];
				if(value5 == null) {
					value5 = 0;
				}
				var this20 = value5;
				pixel2 = this20;
			}
			var gray2 = ((pixel2 >> 16 & 255) + (pixel2 >> 8 & 255) + (pixel2 & 255)) / 3 | 0;
			var Alpha4 = pixel2 >> 24 & 255;
			if(Alpha4 == null) {
				Alpha4 = 255;
			}
			var this21 = 0;
			var color2 = this21;
			var Alpha5 = Alpha4;
			if(Alpha5 == null) {
				Alpha5 = 255;
			}
			color2 &= -16711681;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 16;
			color2 &= -65281;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 8;
			color2 &= -256;
			color2 |= gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2;
			color2 &= 16777215;
			color2 |= (Alpha5 > 255 ? 255 : Alpha5 < 0 ? 0 : Alpha5) << 24;
			var pos11 = (color2 >> 16 & 255) * -4 * sign;
			var y4 = j + 1;
			var pixel3;
			if(!(i >= 0 && y4 >= 0 && i < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this22 = [i,image.getUInt16(0)];
				var values12 = this22;
				var max6 = values12[0];
				var _g28 = 0;
				var _g29 = values12.length;
				while(_g28 < _g29) {
					var i13 = _g28++;
					if(values12[i13] > max6) {
						max6 = values12[i13];
					}
				}
				var this23 = [max6,0];
				var values13 = this23;
				var min6 = values13[0];
				var _g30 = 0;
				var _g31 = values13.length;
				while(_g30 < _g31) {
					var i14 = _g30++;
					if(values13[i14] < min6) {
						min6 = values13[i14];
					}
				}
				var x4 = min6;
				var this24 = [y4,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values14 = this24;
				var max7 = values14[0];
				var _g32 = 0;
				var _g33 = values14.length;
				while(_g32 < _g33) {
					var i15 = _g32++;
					if(values14[i15] > max7) {
						max7 = values14[i15];
					}
				}
				var this25 = [max7,0];
				var values15 = this25;
				var min7 = values15[0];
				var _g34 = 0;
				var _g35 = values15.length;
				while(_g34 < _g35) {
					var i16 = _g34++;
					if(values15[i16] < min7) {
						min7 = values15[i16];
					}
				}
				var y5 = min7;
				if(!(x4 >= 0 && y5 >= 0 && x4 < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x6 = x4;
					var this_y6 = y5;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position6 = (y5 * image.getUInt16(0) + x4) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value6 = image.b[position6] << 24 | image.b[position6 + 1] << 16 | image.b[position6 + 2] << 8 | image.b[position6 + 3];
				if(value6 == null) {
					value6 = 0;
				}
				var this26 = value6;
				pixel3 = this26;
			} else {
				if(!(i >= 0 && y4 >= 0 && i < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x7 = i;
					var this_y7 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x7,this_y7)));
				}
				var position7 = (y4 * image.getUInt16(0) + i) * 4;
				position7 += vision_ds_Image.OFFSET;
				var value7 = image.b[position7] << 24 | image.b[position7 + 1] << 16 | image.b[position7 + 2] << 8 | image.b[position7 + 3];
				if(value7 == null) {
					value7 = 0;
				}
				var this27 = value7;
				pixel3 = this27;
			}
			var gray3 = ((pixel3 >> 16 & 255) + (pixel3 >> 8 & 255) + (pixel3 & 255)) / 3 | 0;
			var Alpha6 = pixel3 >> 24 & 255;
			if(Alpha6 == null) {
				Alpha6 = 255;
			}
			var this28 = 0;
			var color3 = this28;
			var Alpha7 = Alpha6;
			if(Alpha7 == null) {
				Alpha7 = 255;
			}
			color3 &= -16711681;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 16;
			color3 &= -65281;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 8;
			color3 &= -256;
			color3 |= gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3;
			color3 &= 16777215;
			color3 |= (Alpha7 > 255 ? 255 : Alpha7 < 0 ? 0 : Alpha7) << 24;
			var pos12 = (color3 >> 16 & 255) * sign;
			var x5 = i + 1;
			var pixel4;
			if(!(x5 >= 0 && j >= 0 && x5 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this29 = [x5,image.getUInt16(0)];
				var values16 = this29;
				var max8 = values16[0];
				var _g36 = 0;
				var _g37 = values16.length;
				while(_g36 < _g37) {
					var i17 = _g36++;
					if(values16[i17] > max8) {
						max8 = values16[i17];
					}
				}
				var this30 = [max8,0];
				var values17 = this30;
				var min8 = values17[0];
				var _g38 = 0;
				var _g39 = values17.length;
				while(_g38 < _g39) {
					var i18 = _g38++;
					if(values17[i18] < min8) {
						min8 = values17[i18];
					}
				}
				var x6 = min8;
				var this31 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values18 = this31;
				var max9 = values18[0];
				var _g40 = 0;
				var _g41 = values18.length;
				while(_g40 < _g41) {
					var i19 = _g40++;
					if(values18[i19] > max9) {
						max9 = values18[i19];
					}
				}
				var this32 = [max9,0];
				var values19 = this32;
				var min9 = values19[0];
				var _g42 = 0;
				var _g43 = values19.length;
				while(_g42 < _g43) {
					var i20 = _g42++;
					if(values19[i20] < min9) {
						min9 = values19[i20];
					}
				}
				var y6 = min9;
				if(!(x6 >= 0 && y6 >= 0 && x6 < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x8 = x6;
					var this_y8 = y6;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x8,this_y8)));
				}
				var position8 = (y6 * image.getUInt16(0) + x6) * 4;
				position8 += vision_ds_Image.OFFSET;
				var value8 = image.b[position8] << 24 | image.b[position8 + 1] << 16 | image.b[position8 + 2] << 8 | image.b[position8 + 3];
				if(value8 == null) {
					value8 = 0;
				}
				var this33 = value8;
				pixel4 = this33;
			} else {
				if(!(x5 >= 0 && j >= 0 && x5 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x9 = x5;
					var this_y9 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x9,this_y9)));
				}
				var position9 = (j * image.getUInt16(0) + x5) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value9 = image.b[position9] << 24 | image.b[position9 + 1] << 16 | image.b[position9 + 2] << 8 | image.b[position9 + 3];
				if(value9 == null) {
					value9 = 0;
				}
				var this34 = value9;
				pixel4 = this34;
			}
			var gray4 = ((pixel4 >> 16 & 255) + (pixel4 >> 8 & 255) + (pixel4 & 255)) / 3 | 0;
			var Alpha8 = pixel4 >> 24 & 255;
			if(Alpha8 == null) {
				Alpha8 = 255;
			}
			var this35 = 0;
			var color4 = this35;
			var Alpha9 = Alpha8;
			if(Alpha9 == null) {
				Alpha9 = 255;
			}
			color4 &= -16711681;
			color4 |= (gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4) << 16;
			color4 &= -65281;
			color4 |= (gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4) << 8;
			color4 &= -256;
			color4 |= gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4;
			color4 &= 16777215;
			color4 |= (Alpha9 > 255 ? 255 : Alpha9 < 0 ? 0 : Alpha9) << 24;
			var pos21 = (color4 >> 16 & 255) * sign;
			var gray5 = (pos01 + pos10 + pos11 + pos12 + pos21) / 5 | 0;
			var this36 = 0;
			var color5 = this36;
			var Alpha10 = 255;
			if(Alpha10 == null) {
				Alpha10 = 255;
			}
			color5 &= -16711681;
			color5 |= (gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5) << 16;
			color5 &= -65281;
			color5 |= (gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5) << 8;
			color5 &= -256;
			color5 |= gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5;
			color5 &= 16777215;
			color5 |= (Alpha10 > 255 ? 255 : Alpha10 < 0 ? 0 : Alpha10) << 24;
			var color6 = color5;
			if(!(i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)))) {
				var this_x10 = i;
				var this_y10 = j;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edgeColors,new vision_ds_Point2D(this_x10,this_y10)));
			} else if(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g44 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g45 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g46 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var edgeColors1 = edgeColors.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g44,_g45,_g46,edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edgeColors1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y;
						break;
					case 1:
						has = !(i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x7 = view.x + view.width / 2 - c;
							var y7 = view.y + view.height / 2;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f1_x = x7;
							var f1_y = y7;
							var x8 = view.x + view.width / 2 + c;
							var y8 = view.y + view.height / 2;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var f2_x = x8;
							var f2_y = y8;
							var x9 = i;
							var y9 = j;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var p_x = x9;
							var p_y = y9;
							var x10 = p_x - f1_x;
							var y10 = p_y - f1_y;
							var x11 = p_x - f2_x;
							var y11 = p_y - f2_y;
							has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2 - c1;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var f1_x1 = x12;
							var f1_y1 = y12;
							var x13 = view.x + view.width / 2;
							var y13 = view.y + view.height / 2 + c1;
							if(y13 == null) {
								y13 = 0;
							}
							if(x13 == null) {
								x13 = 0;
							}
							var f2_x1 = x13;
							var f2_y1 = y13;
							var x14 = i;
							var y14 = j;
							if(y14 == null) {
								y14 = 0;
							}
							if(x14 == null) {
								x14 = 0;
							}
							var p_x1 = x14;
							var p_y1 = y14;
							var x15 = p_x1 - f1_x1;
							var y15 = p_y1 - f1_y1;
							var x16 = p_x1 - f2_x1;
							var y16 = p_y1 - f2_y1;
							has = Math.sqrt(x15 * x15 + y15 * y15) + Math.sqrt(x16 * x16 + y16 * y16) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x17 = i;
							var y17 = j;
							if(y17 == null) {
								y17 = 0;
							}
							if(x17 == null) {
								x17 = 0;
							}
							var point1_x = x17;
							var point1_y = y17;
							var x18 = view.x + view.width / 2;
							var y18 = view.y + view.height / 2;
							if(y18 == null) {
								y18 = 0;
							}
							if(x18 == null) {
								x18 = 0;
							}
							var point2_x = x18;
							var point2_y = y18;
							var x19 = point2_x - point1_x;
							var y19 = point2_y - point1_y;
							has = Math.sqrt(x19 * x19 + y19 * y19) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position10 = (j * edgeColors.getUInt16(0) + i) * 4;
					position10 += vision_ds_Image.OFFSET;
					edgeColors.b[position10] = color6 >> 24 & 255;
					edgeColors.b[position10 + 1] = color6 >> 16 & 255;
					edgeColors.b[position10 + 2] = color6 >> 8 & 255;
					edgeColors.b[position10 + 3] = color6 & 255;
				}
			} else {
				var position11 = (j * edgeColors.getUInt16(0) + i) * 4;
				position11 += vision_ds_Image.OFFSET;
				edgeColors.b[position11] = color6 >> 24 & 255;
				edgeColors.b[position11 + 1] = color6 >> 16 & 255;
				edgeColors.b[position11 + 2] = color6 >> 8 & 255;
				edgeColors.b[position11 + 3] = color6 & 255;
			}
		}
	}
	return edgeColors;
};
vision_algorithms_Laplacian.laplacianOfGaussian = function(image,kernalSize,sigma,threshold,positive) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var returned = this2;
	var this1 = vision_ds_Image.clone(image);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,this1.getUInt16(0));
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var blurred = vision_Vision.gaussianBlur(this1,sigma,kernalSize);
	var imageToProcess = vision_algorithms_Laplacian.convolveWithLaplacianOperator(blurred,positive);
	var _g = 0;
	var _g1 = imageToProcess.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((imageToProcess.length - vision_ds_Image.OFFSET) / (imageToProcess.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * imageToProcess.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = imageToProcess.b[position] << 24 | imageToProcess.b[position + 1] << 16 | imageToProcess.b[position + 2] << 8 | imageToProcess.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			if((this1 >> 16 & 255) > threshold) {
				if(!(x >= 0 && y >= 0 && x < returned.getUInt16(0) && y < Math.ceil((returned.length - vision_ds_Image.OFFSET) / (returned.getUInt16(0) * 4)))) {
					var this_x = x;
					var this_y = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(returned,new vision_ds_Point2D(this_x,this_y)));
				} else if(returned.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != returned.getUInt16(0) || returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((returned.length - vision_ds_Image.OFFSET) / (returned.getUInt16(0) * 4)) || returned.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(returned.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != returned.getUInt16(0) || returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((returned.length - vision_ds_Image.OFFSET) / (returned.getUInt16(0) * 4)) || returned.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < returned.getUInt16(0) && y < Math.ceil((returned.length - vision_ds_Image.OFFSET) / (returned.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g4 = returned.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g5 = returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g6 = returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var returned1 = returned.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g4,_g5,_g6,returned.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),returned1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x1 = view.x + view.width / 2 - c;
								var y1 = view.y + view.height / 2;
								if(y1 == null) {
									y1 = 0;
								}
								if(x1 == null) {
									x1 = 0;
								}
								var f1_x = x1;
								var f1_y = y1;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var x3 = x;
								var y3 = y;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var p_x = x3;
								var p_y = y3;
								var x4 = p_x - f1_x;
								var y4 = p_y - f1_y;
								var x5 = p_x - f2_x;
								var y5 = p_y - f2_y;
								has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x6 = view.x + view.width / 2;
								var y6 = view.y + view.height / 2 - c1;
								if(y6 == null) {
									y6 = 0;
								}
								if(x6 == null) {
									x6 = 0;
								}
								var f1_x1 = x6;
								var f1_y1 = y6;
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 + c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f2_x1 = x7;
								var f2_y1 = y7;
								var x8 = x;
								var y8 = y;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var p_x1 = x8;
								var p_y1 = y8;
								var x9 = p_x1 - f1_x1;
								var y9 = p_y1 - f1_y1;
								var x10 = p_x1 - f2_x1;
								var y10 = p_y1 - f2_y1;
								has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x11 = x;
								var y11 = y;
								if(y11 == null) {
									y11 = 0;
								}
								if(x11 == null) {
									x11 = 0;
								}
								var point1_x = x11;
								var point1_y = y11;
								var x12 = view.x + view.width / 2;
								var y12 = view.y + view.height / 2;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var point2_x = x12;
								var point2_y = y12;
								var x13 = point2_x - point1_x;
								var y13 = point2_y - point1_y;
								has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position1 = (y * returned.getUInt16(0) + x) * 4;
						position1 += vision_ds_Image.OFFSET;
						returned.b[position1] = 255;
						returned.b[position1 + 1] = 255;
						returned.b[position1 + 2] = 255;
						returned.b[position1 + 3] = 255;
					}
				} else {
					var position2 = (y * returned.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					returned.b[position2] = 255;
					returned.b[position2 + 1] = 255;
					returned.b[position2 + 2] = 255;
					returned.b[position2 + 3] = 255;
				}
			}
		}
	}
	return returned;
};
var vision_algorithms_Perwitt = function() { };
vision_algorithms_Perwitt.__name__ = true;
vision_algorithms_Perwitt.convolveWithPerwittOperator = function(image) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var edgeColors = this2;
	var maxGradient = -1;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var j = _g2++;
			var x = i - 1;
			var y = j - 1;
			var pixel;
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this1 = [x,image.getUInt16(0)];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i1 = _g4++;
					if(values[i1] > max) {
						max = values[i1];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i2 = _g6++;
					if(values1[i2] < min) {
						min = values1[i2];
					}
				}
				var x1 = min;
				var this3 = [y,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i3 = _g8++;
					if(values2[i3] > max1) {
						max1 = values2[i3];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i4 = _g10++;
					if(values3[i4] < min1) {
						min1 = values3[i4];
					}
				}
				var y1 = min1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y1 * image.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				pixel = this5;
			} else {
				if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				pixel = this6;
			}
			var gray = ((pixel >> 16 & 255) + (pixel >> 8 & 255) + (pixel & 255)) / 3 | 0;
			var Alpha = pixel >> 24 & 255;
			if(Alpha == null) {
				Alpha = 255;
			}
			var this7 = 0;
			var color = this7;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 255;
			}
			color &= -16711681;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
			color &= -65281;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
			color &= -256;
			color |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
			color &= 16777215;
			color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
			var pos00 = color >> 16 & 255;
			var x2 = i - 1;
			var pixel1;
			if(!(x2 >= 0 && j >= 0 && x2 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this8 = [x2,image.getUInt16(0)];
				var values4 = this8;
				var max2 = values4[0];
				var _g12 = 0;
				var _g13 = values4.length;
				while(_g12 < _g13) {
					var i5 = _g12++;
					if(values4[i5] > max2) {
						max2 = values4[i5];
					}
				}
				var this9 = [max2,0];
				var values5 = this9;
				var min2 = values5[0];
				var _g14 = 0;
				var _g15 = values5.length;
				while(_g14 < _g15) {
					var i6 = _g14++;
					if(values5[i6] < min2) {
						min2 = values5[i6];
					}
				}
				var x3 = min2;
				var this10 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values6 = this10;
				var max3 = values6[0];
				var _g16 = 0;
				var _g17 = values6.length;
				while(_g16 < _g17) {
					var i7 = _g16++;
					if(values6[i7] > max3) {
						max3 = values6[i7];
					}
				}
				var this11 = [max3,0];
				var values7 = this11;
				var min3 = values7[0];
				var _g18 = 0;
				var _g19 = values7.length;
				while(_g18 < _g19) {
					var i8 = _g18++;
					if(values7[i8] < min3) {
						min3 = values7[i8];
					}
				}
				var y2 = min3;
				if(!(x3 >= 0 && y2 >= 0 && x3 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x2 = x3;
					var this_y2 = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position2 = (y2 * image.getUInt16(0) + x3) * 4;
				position2 += vision_ds_Image.OFFSET;
				var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var this12 = value2;
				pixel1 = this12;
			} else {
				if(!(x2 >= 0 && j >= 0 && x2 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x3 = x2;
					var this_y3 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x3,this_y3)));
				}
				var position3 = (j * image.getUInt16(0) + x2) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value3 = image.b[position3] << 24 | image.b[position3 + 1] << 16 | image.b[position3 + 2] << 8 | image.b[position3 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var this13 = value3;
				pixel1 = this13;
			}
			var gray1 = ((pixel1 >> 16 & 255) + (pixel1 >> 8 & 255) + (pixel1 & 255)) / 3 | 0;
			var Alpha2 = pixel1 >> 24 & 255;
			if(Alpha2 == null) {
				Alpha2 = 255;
			}
			var this14 = 0;
			var color1 = this14;
			var Alpha3 = Alpha2;
			if(Alpha3 == null) {
				Alpha3 = 255;
			}
			color1 &= -16711681;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 16;
			color1 &= -65281;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 8;
			color1 &= -256;
			color1 |= gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1;
			color1 &= 16777215;
			color1 |= (Alpha3 > 255 ? 255 : Alpha3 < 0 ? 0 : Alpha3) << 24;
			var pos01 = color1 >> 16 & 255;
			var x4 = i - 1;
			var y3 = j + 1;
			var pixel2;
			if(!(x4 >= 0 && y3 >= 0 && x4 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this15 = [x4,image.getUInt16(0)];
				var values8 = this15;
				var max4 = values8[0];
				var _g20 = 0;
				var _g21 = values8.length;
				while(_g20 < _g21) {
					var i9 = _g20++;
					if(values8[i9] > max4) {
						max4 = values8[i9];
					}
				}
				var this16 = [max4,0];
				var values9 = this16;
				var min4 = values9[0];
				var _g22 = 0;
				var _g23 = values9.length;
				while(_g22 < _g23) {
					var i10 = _g22++;
					if(values9[i10] < min4) {
						min4 = values9[i10];
					}
				}
				var x5 = min4;
				var this17 = [y3,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values10 = this17;
				var max5 = values10[0];
				var _g24 = 0;
				var _g25 = values10.length;
				while(_g24 < _g25) {
					var i11 = _g24++;
					if(values10[i11] > max5) {
						max5 = values10[i11];
					}
				}
				var this18 = [max5,0];
				var values11 = this18;
				var min5 = values11[0];
				var _g26 = 0;
				var _g27 = values11.length;
				while(_g26 < _g27) {
					var i12 = _g26++;
					if(values11[i12] < min5) {
						min5 = values11[i12];
					}
				}
				var y4 = min5;
				if(!(x5 >= 0 && y4 >= 0 && x5 < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x4 = x5;
					var this_y4 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position4 = (y4 * image.getUInt16(0) + x5) * 4;
				position4 += vision_ds_Image.OFFSET;
				var value4 = image.b[position4] << 24 | image.b[position4 + 1] << 16 | image.b[position4 + 2] << 8 | image.b[position4 + 3];
				if(value4 == null) {
					value4 = 0;
				}
				var this19 = value4;
				pixel2 = this19;
			} else {
				if(!(x4 >= 0 && y3 >= 0 && x4 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x5 = x4;
					var this_y5 = y3;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x5,this_y5)));
				}
				var position5 = (y3 * image.getUInt16(0) + x4) * 4;
				position5 += vision_ds_Image.OFFSET;
				var value5 = image.b[position5] << 24 | image.b[position5 + 1] << 16 | image.b[position5 + 2] << 8 | image.b[position5 + 3];
				if(value5 == null) {
					value5 = 0;
				}
				var this20 = value5;
				pixel2 = this20;
			}
			var gray2 = ((pixel2 >> 16 & 255) + (pixel2 >> 8 & 255) + (pixel2 & 255)) / 3 | 0;
			var Alpha4 = pixel2 >> 24 & 255;
			if(Alpha4 == null) {
				Alpha4 = 255;
			}
			var this21 = 0;
			var color2 = this21;
			var Alpha5 = Alpha4;
			if(Alpha5 == null) {
				Alpha5 = 255;
			}
			color2 &= -16711681;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 16;
			color2 &= -65281;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 8;
			color2 &= -256;
			color2 |= gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2;
			color2 &= 16777215;
			color2 |= (Alpha5 > 255 ? 255 : Alpha5 < 0 ? 0 : Alpha5) << 24;
			var pos02 = color2 >> 16 & 255;
			var y5 = j - 1;
			var pixel3;
			if(!(i >= 0 && y5 >= 0 && i < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this22 = [i,image.getUInt16(0)];
				var values12 = this22;
				var max6 = values12[0];
				var _g28 = 0;
				var _g29 = values12.length;
				while(_g28 < _g29) {
					var i13 = _g28++;
					if(values12[i13] > max6) {
						max6 = values12[i13];
					}
				}
				var this23 = [max6,0];
				var values13 = this23;
				var min6 = values13[0];
				var _g30 = 0;
				var _g31 = values13.length;
				while(_g30 < _g31) {
					var i14 = _g30++;
					if(values13[i14] < min6) {
						min6 = values13[i14];
					}
				}
				var x6 = min6;
				var this24 = [y5,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values14 = this24;
				var max7 = values14[0];
				var _g32 = 0;
				var _g33 = values14.length;
				while(_g32 < _g33) {
					var i15 = _g32++;
					if(values14[i15] > max7) {
						max7 = values14[i15];
					}
				}
				var this25 = [max7,0];
				var values15 = this25;
				var min7 = values15[0];
				var _g34 = 0;
				var _g35 = values15.length;
				while(_g34 < _g35) {
					var i16 = _g34++;
					if(values15[i16] < min7) {
						min7 = values15[i16];
					}
				}
				var y6 = min7;
				if(!(x6 >= 0 && y6 >= 0 && x6 < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x6 = x6;
					var this_y6 = y6;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position6 = (y6 * image.getUInt16(0) + x6) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value6 = image.b[position6] << 24 | image.b[position6 + 1] << 16 | image.b[position6 + 2] << 8 | image.b[position6 + 3];
				if(value6 == null) {
					value6 = 0;
				}
				var this26 = value6;
				pixel3 = this26;
			} else {
				if(!(i >= 0 && y5 >= 0 && i < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x7 = i;
					var this_y7 = y5;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x7,this_y7)));
				}
				var position7 = (y5 * image.getUInt16(0) + i) * 4;
				position7 += vision_ds_Image.OFFSET;
				var value7 = image.b[position7] << 24 | image.b[position7 + 1] << 16 | image.b[position7 + 2] << 8 | image.b[position7 + 3];
				if(value7 == null) {
					value7 = 0;
				}
				var this27 = value7;
				pixel3 = this27;
			}
			var gray3 = ((pixel3 >> 16 & 255) + (pixel3 >> 8 & 255) + (pixel3 & 255)) / 3 | 0;
			var Alpha6 = pixel3 >> 24 & 255;
			if(Alpha6 == null) {
				Alpha6 = 255;
			}
			var this28 = 0;
			var color3 = this28;
			var Alpha7 = Alpha6;
			if(Alpha7 == null) {
				Alpha7 = 255;
			}
			color3 &= -16711681;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 16;
			color3 &= -65281;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 8;
			color3 &= -256;
			color3 |= gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3;
			color3 &= 16777215;
			color3 |= (Alpha7 > 255 ? 255 : Alpha7 < 0 ? 0 : Alpha7) << 24;
			var pos10 = color3 >> 16 & 255;
			var pixel4;
			if(!(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this29 = [i,image.getUInt16(0)];
				var values16 = this29;
				var max8 = values16[0];
				var _g36 = 0;
				var _g37 = values16.length;
				while(_g36 < _g37) {
					var i17 = _g36++;
					if(values16[i17] > max8) {
						max8 = values16[i17];
					}
				}
				var this30 = [max8,0];
				var values17 = this30;
				var min8 = values17[0];
				var _g38 = 0;
				var _g39 = values17.length;
				while(_g38 < _g39) {
					var i18 = _g38++;
					if(values17[i18] < min8) {
						min8 = values17[i18];
					}
				}
				var x7 = min8;
				var this31 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values18 = this31;
				var max9 = values18[0];
				var _g40 = 0;
				var _g41 = values18.length;
				while(_g40 < _g41) {
					var i19 = _g40++;
					if(values18[i19] > max9) {
						max9 = values18[i19];
					}
				}
				var this32 = [max9,0];
				var values19 = this32;
				var min9 = values19[0];
				var _g42 = 0;
				var _g43 = values19.length;
				while(_g42 < _g43) {
					var i20 = _g42++;
					if(values19[i20] < min9) {
						min9 = values19[i20];
					}
				}
				var y7 = min9;
				if(!(x7 >= 0 && y7 >= 0 && x7 < image.getUInt16(0) && y7 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x8 = x7;
					var this_y8 = y7;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x8,this_y8)));
				}
				var position8 = (y7 * image.getUInt16(0) + x7) * 4;
				position8 += vision_ds_Image.OFFSET;
				var value8 = image.b[position8] << 24 | image.b[position8 + 1] << 16 | image.b[position8 + 2] << 8 | image.b[position8 + 3];
				if(value8 == null) {
					value8 = 0;
				}
				var this33 = value8;
				pixel4 = this33;
			} else {
				if(!(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x9 = i;
					var this_y9 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x9,this_y9)));
				}
				var position9 = (j * image.getUInt16(0) + i) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value9 = image.b[position9] << 24 | image.b[position9 + 1] << 16 | image.b[position9 + 2] << 8 | image.b[position9 + 3];
				if(value9 == null) {
					value9 = 0;
				}
				var this34 = value9;
				pixel4 = this34;
			}
			var gray4 = ((pixel4 >> 16 & 255) + (pixel4 >> 8 & 255) + (pixel4 & 255)) / 3 | 0;
			var Alpha8 = pixel4 >> 24 & 255;
			if(Alpha8 == null) {
				Alpha8 = 255;
			}
			var this35 = 0;
			var color4 = this35;
			var Alpha9 = Alpha8;
			if(Alpha9 == null) {
				Alpha9 = 255;
			}
			color4 &= -16711681;
			color4 |= (gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4) << 16;
			color4 &= -65281;
			color4 |= (gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4) << 8;
			color4 &= -256;
			color4 |= gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4;
			color4 &= 16777215;
			color4 |= (Alpha9 > 255 ? 255 : Alpha9 < 0 ? 0 : Alpha9) << 24;
			var pos11 = color4 >> 16 & 255;
			var y8 = j + 1;
			var pixel5;
			if(!(i >= 0 && y8 >= 0 && i < image.getUInt16(0) && y8 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this36 = [i,image.getUInt16(0)];
				var values20 = this36;
				var max10 = values20[0];
				var _g44 = 0;
				var _g45 = values20.length;
				while(_g44 < _g45) {
					var i21 = _g44++;
					if(values20[i21] > max10) {
						max10 = values20[i21];
					}
				}
				var this37 = [max10,0];
				var values21 = this37;
				var min10 = values21[0];
				var _g46 = 0;
				var _g47 = values21.length;
				while(_g46 < _g47) {
					var i22 = _g46++;
					if(values21[i22] < min10) {
						min10 = values21[i22];
					}
				}
				var x8 = min10;
				var this38 = [y8,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values22 = this38;
				var max11 = values22[0];
				var _g48 = 0;
				var _g49 = values22.length;
				while(_g48 < _g49) {
					var i23 = _g48++;
					if(values22[i23] > max11) {
						max11 = values22[i23];
					}
				}
				var this39 = [max11,0];
				var values23 = this39;
				var min11 = values23[0];
				var _g50 = 0;
				var _g51 = values23.length;
				while(_g50 < _g51) {
					var i24 = _g50++;
					if(values23[i24] < min11) {
						min11 = values23[i24];
					}
				}
				var y9 = min11;
				if(!(x8 >= 0 && y9 >= 0 && x8 < image.getUInt16(0) && y9 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x10 = x8;
					var this_y10 = y9;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x10,this_y10)));
				}
				var position10 = (y9 * image.getUInt16(0) + x8) * 4;
				position10 += vision_ds_Image.OFFSET;
				var value10 = image.b[position10] << 24 | image.b[position10 + 1] << 16 | image.b[position10 + 2] << 8 | image.b[position10 + 3];
				if(value10 == null) {
					value10 = 0;
				}
				var this40 = value10;
				pixel5 = this40;
			} else {
				if(!(i >= 0 && y8 >= 0 && i < image.getUInt16(0) && y8 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x11 = i;
					var this_y11 = y8;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x11,this_y11)));
				}
				var position11 = (y8 * image.getUInt16(0) + i) * 4;
				position11 += vision_ds_Image.OFFSET;
				var value11 = image.b[position11] << 24 | image.b[position11 + 1] << 16 | image.b[position11 + 2] << 8 | image.b[position11 + 3];
				if(value11 == null) {
					value11 = 0;
				}
				var this41 = value11;
				pixel5 = this41;
			}
			var gray5 = ((pixel5 >> 16 & 255) + (pixel5 >> 8 & 255) + (pixel5 & 255)) / 3 | 0;
			var Alpha10 = pixel5 >> 24 & 255;
			if(Alpha10 == null) {
				Alpha10 = 255;
			}
			var this42 = 0;
			var color5 = this42;
			var Alpha11 = Alpha10;
			if(Alpha11 == null) {
				Alpha11 = 255;
			}
			color5 &= -16711681;
			color5 |= (gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5) << 16;
			color5 &= -65281;
			color5 |= (gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5) << 8;
			color5 &= -256;
			color5 |= gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5;
			color5 &= 16777215;
			color5 |= (Alpha11 > 255 ? 255 : Alpha11 < 0 ? 0 : Alpha11) << 24;
			var pos12 = color5 >> 16 & 255;
			var x9 = i + 1;
			var y10 = j - 1;
			var pixel6;
			if(!(x9 >= 0 && y10 >= 0 && x9 < image.getUInt16(0) && y10 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this43 = [x9,image.getUInt16(0)];
				var values24 = this43;
				var max12 = values24[0];
				var _g52 = 0;
				var _g53 = values24.length;
				while(_g52 < _g53) {
					var i25 = _g52++;
					if(values24[i25] > max12) {
						max12 = values24[i25];
					}
				}
				var this44 = [max12,0];
				var values25 = this44;
				var min12 = values25[0];
				var _g54 = 0;
				var _g55 = values25.length;
				while(_g54 < _g55) {
					var i26 = _g54++;
					if(values25[i26] < min12) {
						min12 = values25[i26];
					}
				}
				var x10 = min12;
				var this45 = [y10,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values26 = this45;
				var max13 = values26[0];
				var _g56 = 0;
				var _g57 = values26.length;
				while(_g56 < _g57) {
					var i27 = _g56++;
					if(values26[i27] > max13) {
						max13 = values26[i27];
					}
				}
				var this46 = [max13,0];
				var values27 = this46;
				var min13 = values27[0];
				var _g58 = 0;
				var _g59 = values27.length;
				while(_g58 < _g59) {
					var i28 = _g58++;
					if(values27[i28] < min13) {
						min13 = values27[i28];
					}
				}
				var y11 = min13;
				if(!(x10 >= 0 && y11 >= 0 && x10 < image.getUInt16(0) && y11 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x12 = x10;
					var this_y12 = y11;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x12,this_y12)));
				}
				var position12 = (y11 * image.getUInt16(0) + x10) * 4;
				position12 += vision_ds_Image.OFFSET;
				var value12 = image.b[position12] << 24 | image.b[position12 + 1] << 16 | image.b[position12 + 2] << 8 | image.b[position12 + 3];
				if(value12 == null) {
					value12 = 0;
				}
				var this47 = value12;
				pixel6 = this47;
			} else {
				if(!(x9 >= 0 && y10 >= 0 && x9 < image.getUInt16(0) && y10 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x13 = x9;
					var this_y13 = y10;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x13,this_y13)));
				}
				var position13 = (y10 * image.getUInt16(0) + x9) * 4;
				position13 += vision_ds_Image.OFFSET;
				var value13 = image.b[position13] << 24 | image.b[position13 + 1] << 16 | image.b[position13 + 2] << 8 | image.b[position13 + 3];
				if(value13 == null) {
					value13 = 0;
				}
				var this48 = value13;
				pixel6 = this48;
			}
			var gray6 = ((pixel6 >> 16 & 255) + (pixel6 >> 8 & 255) + (pixel6 & 255)) / 3 | 0;
			var Alpha12 = pixel6 >> 24 & 255;
			if(Alpha12 == null) {
				Alpha12 = 255;
			}
			var this49 = 0;
			var color6 = this49;
			var Alpha13 = Alpha12;
			if(Alpha13 == null) {
				Alpha13 = 255;
			}
			color6 &= -16711681;
			color6 |= (gray6 > 255 ? 255 : gray6 < 0 ? 0 : gray6) << 16;
			color6 &= -65281;
			color6 |= (gray6 > 255 ? 255 : gray6 < 0 ? 0 : gray6) << 8;
			color6 &= -256;
			color6 |= gray6 > 255 ? 255 : gray6 < 0 ? 0 : gray6;
			color6 &= 16777215;
			color6 |= (Alpha13 > 255 ? 255 : Alpha13 < 0 ? 0 : Alpha13) << 24;
			var pos20 = color6 >> 16 & 255;
			var x11 = i + 1;
			var pixel7;
			if(!(x11 >= 0 && j >= 0 && x11 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this50 = [x11,image.getUInt16(0)];
				var values28 = this50;
				var max14 = values28[0];
				var _g60 = 0;
				var _g61 = values28.length;
				while(_g60 < _g61) {
					var i29 = _g60++;
					if(values28[i29] > max14) {
						max14 = values28[i29];
					}
				}
				var this51 = [max14,0];
				var values29 = this51;
				var min14 = values29[0];
				var _g62 = 0;
				var _g63 = values29.length;
				while(_g62 < _g63) {
					var i30 = _g62++;
					if(values29[i30] < min14) {
						min14 = values29[i30];
					}
				}
				var x12 = min14;
				var this52 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values30 = this52;
				var max15 = values30[0];
				var _g64 = 0;
				var _g65 = values30.length;
				while(_g64 < _g65) {
					var i31 = _g64++;
					if(values30[i31] > max15) {
						max15 = values30[i31];
					}
				}
				var this53 = [max15,0];
				var values31 = this53;
				var min15 = values31[0];
				var _g66 = 0;
				var _g67 = values31.length;
				while(_g66 < _g67) {
					var i32 = _g66++;
					if(values31[i32] < min15) {
						min15 = values31[i32];
					}
				}
				var y12 = min15;
				if(!(x12 >= 0 && y12 >= 0 && x12 < image.getUInt16(0) && y12 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x14 = x12;
					var this_y14 = y12;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x14,this_y14)));
				}
				var position14 = (y12 * image.getUInt16(0) + x12) * 4;
				position14 += vision_ds_Image.OFFSET;
				var value14 = image.b[position14] << 24 | image.b[position14 + 1] << 16 | image.b[position14 + 2] << 8 | image.b[position14 + 3];
				if(value14 == null) {
					value14 = 0;
				}
				var this54 = value14;
				pixel7 = this54;
			} else {
				if(!(x11 >= 0 && j >= 0 && x11 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x15 = x11;
					var this_y15 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x15,this_y15)));
				}
				var position15 = (j * image.getUInt16(0) + x11) * 4;
				position15 += vision_ds_Image.OFFSET;
				var value15 = image.b[position15] << 24 | image.b[position15 + 1] << 16 | image.b[position15 + 2] << 8 | image.b[position15 + 3];
				if(value15 == null) {
					value15 = 0;
				}
				var this55 = value15;
				pixel7 = this55;
			}
			var gray7 = ((pixel7 >> 16 & 255) + (pixel7 >> 8 & 255) + (pixel7 & 255)) / 3 | 0;
			var Alpha14 = pixel7 >> 24 & 255;
			if(Alpha14 == null) {
				Alpha14 = 255;
			}
			var this56 = 0;
			var color7 = this56;
			var Alpha15 = Alpha14;
			if(Alpha15 == null) {
				Alpha15 = 255;
			}
			color7 &= -16711681;
			color7 |= (gray7 > 255 ? 255 : gray7 < 0 ? 0 : gray7) << 16;
			color7 &= -65281;
			color7 |= (gray7 > 255 ? 255 : gray7 < 0 ? 0 : gray7) << 8;
			color7 &= -256;
			color7 |= gray7 > 255 ? 255 : gray7 < 0 ? 0 : gray7;
			color7 &= 16777215;
			color7 |= (Alpha15 > 255 ? 255 : Alpha15 < 0 ? 0 : Alpha15) << 24;
			var pos21 = color7 >> 16 & 255;
			var x13 = i + 1;
			var y13 = j + 1;
			var pixel8;
			if(!(x13 >= 0 && y13 >= 0 && x13 < image.getUInt16(0) && y13 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this57 = [x13,image.getUInt16(0)];
				var values32 = this57;
				var max16 = values32[0];
				var _g68 = 0;
				var _g69 = values32.length;
				while(_g68 < _g69) {
					var i33 = _g68++;
					if(values32[i33] > max16) {
						max16 = values32[i33];
					}
				}
				var this58 = [max16,0];
				var values33 = this58;
				var min16 = values33[0];
				var _g70 = 0;
				var _g71 = values33.length;
				while(_g70 < _g71) {
					var i34 = _g70++;
					if(values33[i34] < min16) {
						min16 = values33[i34];
					}
				}
				var x14 = min16;
				var this59 = [y13,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values34 = this59;
				var max17 = values34[0];
				var _g72 = 0;
				var _g73 = values34.length;
				while(_g72 < _g73) {
					var i35 = _g72++;
					if(values34[i35] > max17) {
						max17 = values34[i35];
					}
				}
				var this60 = [max17,0];
				var values35 = this60;
				var min17 = values35[0];
				var _g74 = 0;
				var _g75 = values35.length;
				while(_g74 < _g75) {
					var i36 = _g74++;
					if(values35[i36] < min17) {
						min17 = values35[i36];
					}
				}
				var y14 = min17;
				if(!(x14 >= 0 && y14 >= 0 && x14 < image.getUInt16(0) && y14 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x16 = x14;
					var this_y16 = y14;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x16,this_y16)));
				}
				var position16 = (y14 * image.getUInt16(0) + x14) * 4;
				position16 += vision_ds_Image.OFFSET;
				var value16 = image.b[position16] << 24 | image.b[position16 + 1] << 16 | image.b[position16 + 2] << 8 | image.b[position16 + 3];
				if(value16 == null) {
					value16 = 0;
				}
				var this61 = value16;
				pixel8 = this61;
			} else {
				if(!(x13 >= 0 && y13 >= 0 && x13 < image.getUInt16(0) && y13 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x17 = x13;
					var this_y17 = y13;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x17,this_y17)));
				}
				var position17 = (y13 * image.getUInt16(0) + x13) * 4;
				position17 += vision_ds_Image.OFFSET;
				var value17 = image.b[position17] << 24 | image.b[position17 + 1] << 16 | image.b[position17 + 2] << 8 | image.b[position17 + 3];
				if(value17 == null) {
					value17 = 0;
				}
				var this62 = value17;
				pixel8 = this62;
			}
			var gray8 = ((pixel8 >> 16 & 255) + (pixel8 >> 8 & 255) + (pixel8 & 255)) / 3 | 0;
			var Alpha16 = pixel8 >> 24 & 255;
			if(Alpha16 == null) {
				Alpha16 = 255;
			}
			var this63 = 0;
			var color8 = this63;
			var Alpha17 = Alpha16;
			if(Alpha17 == null) {
				Alpha17 = 255;
			}
			color8 &= -16711681;
			color8 |= (gray8 > 255 ? 255 : gray8 < 0 ? 0 : gray8) << 16;
			color8 &= -65281;
			color8 |= (gray8 > 255 ? 255 : gray8 < 0 ? 0 : gray8) << 8;
			color8 &= -256;
			color8 |= gray8 > 255 ? 255 : gray8 < 0 ? 0 : gray8;
			color8 &= 16777215;
			color8 |= (Alpha17 > 255 ? 255 : Alpha17 < 0 ? 0 : Alpha17) << 24;
			var pos22 = color8 >> 16 & 255;
			var gx = -1 * pos00 + 0 * pos01 + pos02 + (-2 * pos10 + 0 * pos11 + 2 * pos12) + (-1 * pos20 + 0 * pos21 + pos22);
			var gy = -1 * pos00 + -2 * pos01 + -1 * pos02 + (0 * pos10 + 0 * pos11 + 0 * pos12) + (pos20 + 2 * pos21 + pos22);
			var gradientFloatValue = Math.sqrt(gx * gx + gy * gy);
			var gradient = gradientFloatValue | 0;
			if(gradient > maxGradient) {
				maxGradient = gradient;
			}
			var rgb = gradient * (255 / maxGradient) | 0;
			var color9 = -16777216 | rgb << 16 | rgb << 8 | rgb;
			if(!(i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)))) {
				var this_x18 = i;
				var this_y18 = j;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edgeColors,new vision_ds_Point2D(this_x18,this_y18)));
			} else if(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g76 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g77 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g78 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var edgeColors1 = edgeColors.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g76,_g77,_g78,edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edgeColors1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y;
						break;
					case 1:
						has = !(i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x15 = view.x + view.width / 2 - c;
							var y15 = view.y + view.height / 2;
							if(y15 == null) {
								y15 = 0;
							}
							if(x15 == null) {
								x15 = 0;
							}
							var f1_x = x15;
							var f1_y = y15;
							var x16 = view.x + view.width / 2 + c;
							var y16 = view.y + view.height / 2;
							if(y16 == null) {
								y16 = 0;
							}
							if(x16 == null) {
								x16 = 0;
							}
							var f2_x = x16;
							var f2_y = y16;
							var x17 = i;
							var y17 = j;
							if(y17 == null) {
								y17 = 0;
							}
							if(x17 == null) {
								x17 = 0;
							}
							var p_x = x17;
							var p_y = y17;
							var x18 = p_x - f1_x;
							var y18 = p_y - f1_y;
							var x19 = p_x - f2_x;
							var y19 = p_y - f2_y;
							has = Math.sqrt(x18 * x18 + y18 * y18) + Math.sqrt(x19 * x19 + y19 * y19) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x20 = view.x + view.width / 2;
							var y20 = view.y + view.height / 2 - c1;
							if(y20 == null) {
								y20 = 0;
							}
							if(x20 == null) {
								x20 = 0;
							}
							var f1_x1 = x20;
							var f1_y1 = y20;
							var x21 = view.x + view.width / 2;
							var y21 = view.y + view.height / 2 + c1;
							if(y21 == null) {
								y21 = 0;
							}
							if(x21 == null) {
								x21 = 0;
							}
							var f2_x1 = x21;
							var f2_y1 = y21;
							var x22 = i;
							var y22 = j;
							if(y22 == null) {
								y22 = 0;
							}
							if(x22 == null) {
								x22 = 0;
							}
							var p_x1 = x22;
							var p_y1 = y22;
							var x23 = p_x1 - f1_x1;
							var y23 = p_y1 - f1_y1;
							var x24 = p_x1 - f2_x1;
							var y24 = p_y1 - f2_y1;
							has = Math.sqrt(x23 * x23 + y23 * y23) + Math.sqrt(x24 * x24 + y24 * y24) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x25 = i;
							var y25 = j;
							if(y25 == null) {
								y25 = 0;
							}
							if(x25 == null) {
								x25 = 0;
							}
							var point1_x = x25;
							var point1_y = y25;
							var x26 = view.x + view.width / 2;
							var y26 = view.y + view.height / 2;
							if(y26 == null) {
								y26 = 0;
							}
							if(x26 == null) {
								x26 = 0;
							}
							var point2_x = x26;
							var point2_y = y26;
							var x27 = point2_x - point1_x;
							var y27 = point2_y - point1_y;
							has = Math.sqrt(x27 * x27 + y27 * y27) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position18 = (j * edgeColors.getUInt16(0) + i) * 4;
					position18 += vision_ds_Image.OFFSET;
					edgeColors.b[position18] = color9 >> 24 & 255;
					edgeColors.b[position18 + 1] = color9 >> 16 & 255;
					edgeColors.b[position18 + 2] = color9 >> 8 & 255;
					edgeColors.b[position18 + 3] = color9 & 255;
				}
			} else {
				var position19 = (j * edgeColors.getUInt16(0) + i) * 4;
				position19 += vision_ds_Image.OFFSET;
				edgeColors.b[position19] = color9 >> 24 & 255;
				edgeColors.b[position19 + 1] = color9 >> 16 & 255;
				edgeColors.b[position19 + 2] = color9 >> 8 & 255;
				edgeColors.b[position19 + 3] = color9 & 255;
			}
		}
	}
	return edgeColors;
};
vision_algorithms_Perwitt.getNeighbors = function(kernalSize,x,y,image) {
	var neighbors = [];
	var _g = 0;
	var _g1 = kernalSize + 1;
	while(_g < _g1) {
		var i = _g++;
		neighbors[i] = [];
	}
	var roundedDown = (kernalSize - 1) / 2 | 0;
	var _g = -roundedDown;
	var _g1 = roundedDown + 1;
	while(_g < _g1) {
		var X = _g++;
		var _g2 = -roundedDown;
		var _g3 = roundedDown + 1;
		while(_g2 < _g3) {
			var Y = _g2++;
			var tmp = X + roundedDown;
			var x1 = x + X;
			var y1 = y + Y;
			var tmp1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this1 = [x1,image.getUInt16(0)];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i = _g4++;
					if(values[i] > max) {
						max = values[i];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i1 = _g6++;
					if(values1[i1] < min) {
						min = values1[i1];
					}
				}
				var x2 = min;
				var this3 = [y1,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i2 = _g8++;
					if(values2[i2] > max1) {
						max1 = values2[i2];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i3 = _g10++;
					if(values3[i3] < min1) {
						min1 = values3[i3];
					}
				}
				var y2 = min1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y2 * image.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				tmp1 = this5;
			} else {
				if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x1;
					var this_y1 = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y1 * image.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				tmp1 = this6;
			}
			neighbors[tmp].push(tmp1);
		}
	}
	return neighbors;
};
vision_algorithms_Perwitt.detectEdges = function(image,threshold) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = 0;
	var color = this1;
	var Alpha = 255;
	if(Alpha == null) {
		Alpha = 255;
	}
	color &= -16711681;
	color |= 0;
	color &= -65281;
	color |= 0;
	color &= -256;
	color |= 0;
	color &= 16777215;
	color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	var color1 = color;
	if(color1 == null) {
		color1 = 0;
	}
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = color1 >> 24 & 255;
		this2.b[i + 1] = color1 >> 16 & 255;
		this2.b[i + 2] = color1 >> 8 & 255;
		this2.b[i + 3] = color1 & 255;
		i += 4;
	}
	var edges = this2;
	var blackAndWhite = vision_Vision.grayscale(vision_ds_Image.clone(image));
	var _g = 0;
	var _g1 = blackAndWhite.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var neighbors_8;
			var neighbors_7;
			var neighbors_6;
			var neighbors_5;
			var neighbors_4;
			var neighbors_3;
			var neighbors_2;
			var neighbors_1;
			var neighbors_0;
			var x1 = x - 1;
			var y1 = y - 1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < blackAndWhite.getUInt16(0) && y1 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this1 = [x1,blackAndWhite.getUInt16(0)];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i = _g4++;
					if(values[i] > max) {
						max = values[i];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i1 = _g6++;
					if(values1[i1] < min) {
						min = values1[i1];
					}
				}
				var x2 = min;
				var this3 = [y1,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i2 = _g8++;
					if(values2[i2] > max1) {
						max1 = values2[i2];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i3 = _g10++;
					if(values3[i3] < min1) {
						min1 = values3[i3];
					}
				}
				var y2 = min1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < blackAndWhite.getUInt16(0) && y2 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y2 * blackAndWhite.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = blackAndWhite.b[position] << 24 | blackAndWhite.b[position + 1] << 16 | blackAndWhite.b[position + 2] << 8 | blackAndWhite.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				neighbors_0 = this5;
			} else {
				if(!(x1 >= 0 && y1 >= 0 && x1 < blackAndWhite.getUInt16(0) && y1 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x1 = x1;
					var this_y1 = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y1 * blackAndWhite.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = blackAndWhite.b[position1] << 24 | blackAndWhite.b[position1 + 1] << 16 | blackAndWhite.b[position1 + 2] << 8 | blackAndWhite.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				neighbors_0 = this6;
			}
			var y3 = y - 1;
			if(!(x >= 0 && y3 >= 0 && x < blackAndWhite.getUInt16(0) && y3 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this7 = [x,blackAndWhite.getUInt16(0)];
				var values4 = this7;
				var max2 = values4[0];
				var _g12 = 0;
				var _g13 = values4.length;
				while(_g12 < _g13) {
					var i4 = _g12++;
					if(values4[i4] > max2) {
						max2 = values4[i4];
					}
				}
				var this8 = [max2,0];
				var values5 = this8;
				var min2 = values5[0];
				var _g14 = 0;
				var _g15 = values5.length;
				while(_g14 < _g15) {
					var i5 = _g14++;
					if(values5[i5] < min2) {
						min2 = values5[i5];
					}
				}
				var x3 = min2;
				var this9 = [y3,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values6 = this9;
				var max3 = values6[0];
				var _g16 = 0;
				var _g17 = values6.length;
				while(_g16 < _g17) {
					var i6 = _g16++;
					if(values6[i6] > max3) {
						max3 = values6[i6];
					}
				}
				var this10 = [max3,0];
				var values7 = this10;
				var min3 = values7[0];
				var _g18 = 0;
				var _g19 = values7.length;
				while(_g18 < _g19) {
					var i7 = _g18++;
					if(values7[i7] < min3) {
						min3 = values7[i7];
					}
				}
				var y4 = min3;
				if(!(x3 >= 0 && y4 >= 0 && x3 < blackAndWhite.getUInt16(0) && y4 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x2 = x3;
					var this_y2 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position2 = (y4 * blackAndWhite.getUInt16(0) + x3) * 4;
				position2 += vision_ds_Image.OFFSET;
				var value2 = blackAndWhite.b[position2] << 24 | blackAndWhite.b[position2 + 1] << 16 | blackAndWhite.b[position2 + 2] << 8 | blackAndWhite.b[position2 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var this11 = value2;
				neighbors_1 = this11;
			} else {
				if(!(x >= 0 && y3 >= 0 && x < blackAndWhite.getUInt16(0) && y3 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x3 = x;
					var this_y3 = y3;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x3,this_y3)));
				}
				var position3 = (y3 * blackAndWhite.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value3 = blackAndWhite.b[position3] << 24 | blackAndWhite.b[position3 + 1] << 16 | blackAndWhite.b[position3 + 2] << 8 | blackAndWhite.b[position3 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var this12 = value3;
				neighbors_1 = this12;
			}
			var x4 = x + 1;
			var y5 = y - 1;
			if(!(x4 >= 0 && y5 >= 0 && x4 < blackAndWhite.getUInt16(0) && y5 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this13 = [x4,blackAndWhite.getUInt16(0)];
				var values8 = this13;
				var max4 = values8[0];
				var _g20 = 0;
				var _g21 = values8.length;
				while(_g20 < _g21) {
					var i8 = _g20++;
					if(values8[i8] > max4) {
						max4 = values8[i8];
					}
				}
				var this14 = [max4,0];
				var values9 = this14;
				var min4 = values9[0];
				var _g22 = 0;
				var _g23 = values9.length;
				while(_g22 < _g23) {
					var i9 = _g22++;
					if(values9[i9] < min4) {
						min4 = values9[i9];
					}
				}
				var x5 = min4;
				var this15 = [y5,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values10 = this15;
				var max5 = values10[0];
				var _g24 = 0;
				var _g25 = values10.length;
				while(_g24 < _g25) {
					var i10 = _g24++;
					if(values10[i10] > max5) {
						max5 = values10[i10];
					}
				}
				var this16 = [max5,0];
				var values11 = this16;
				var min5 = values11[0];
				var _g26 = 0;
				var _g27 = values11.length;
				while(_g26 < _g27) {
					var i11 = _g26++;
					if(values11[i11] < min5) {
						min5 = values11[i11];
					}
				}
				var y6 = min5;
				if(!(x5 >= 0 && y6 >= 0 && x5 < blackAndWhite.getUInt16(0) && y6 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x4 = x5;
					var this_y4 = y6;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position4 = (y6 * blackAndWhite.getUInt16(0) + x5) * 4;
				position4 += vision_ds_Image.OFFSET;
				var value4 = blackAndWhite.b[position4] << 24 | blackAndWhite.b[position4 + 1] << 16 | blackAndWhite.b[position4 + 2] << 8 | blackAndWhite.b[position4 + 3];
				if(value4 == null) {
					value4 = 0;
				}
				var this17 = value4;
				neighbors_2 = this17;
			} else {
				if(!(x4 >= 0 && y5 >= 0 && x4 < blackAndWhite.getUInt16(0) && y5 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x5 = x4;
					var this_y5 = y5;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x5,this_y5)));
				}
				var position5 = (y5 * blackAndWhite.getUInt16(0) + x4) * 4;
				position5 += vision_ds_Image.OFFSET;
				var value5 = blackAndWhite.b[position5] << 24 | blackAndWhite.b[position5 + 1] << 16 | blackAndWhite.b[position5 + 2] << 8 | blackAndWhite.b[position5 + 3];
				if(value5 == null) {
					value5 = 0;
				}
				var this18 = value5;
				neighbors_2 = this18;
			}
			var x6 = x - 1;
			if(!(x6 >= 0 && y >= 0 && x6 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this19 = [x6,blackAndWhite.getUInt16(0)];
				var values12 = this19;
				var max6 = values12[0];
				var _g28 = 0;
				var _g29 = values12.length;
				while(_g28 < _g29) {
					var i12 = _g28++;
					if(values12[i12] > max6) {
						max6 = values12[i12];
					}
				}
				var this20 = [max6,0];
				var values13 = this20;
				var min6 = values13[0];
				var _g30 = 0;
				var _g31 = values13.length;
				while(_g30 < _g31) {
					var i13 = _g30++;
					if(values13[i13] < min6) {
						min6 = values13[i13];
					}
				}
				var x7 = min6;
				var this21 = [y,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values14 = this21;
				var max7 = values14[0];
				var _g32 = 0;
				var _g33 = values14.length;
				while(_g32 < _g33) {
					var i14 = _g32++;
					if(values14[i14] > max7) {
						max7 = values14[i14];
					}
				}
				var this22 = [max7,0];
				var values15 = this22;
				var min7 = values15[0];
				var _g34 = 0;
				var _g35 = values15.length;
				while(_g34 < _g35) {
					var i15 = _g34++;
					if(values15[i15] < min7) {
						min7 = values15[i15];
					}
				}
				var y7 = min7;
				if(!(x7 >= 0 && y7 >= 0 && x7 < blackAndWhite.getUInt16(0) && y7 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x6 = x7;
					var this_y6 = y7;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position6 = (y7 * blackAndWhite.getUInt16(0) + x7) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value6 = blackAndWhite.b[position6] << 24 | blackAndWhite.b[position6 + 1] << 16 | blackAndWhite.b[position6 + 2] << 8 | blackAndWhite.b[position6 + 3];
				if(value6 == null) {
					value6 = 0;
				}
				var this23 = value6;
				neighbors_3 = this23;
			} else {
				if(!(x6 >= 0 && y >= 0 && x6 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x7 = x6;
					var this_y7 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x7,this_y7)));
				}
				var position7 = (y * blackAndWhite.getUInt16(0) + x6) * 4;
				position7 += vision_ds_Image.OFFSET;
				var value7 = blackAndWhite.b[position7] << 24 | blackAndWhite.b[position7 + 1] << 16 | blackAndWhite.b[position7 + 2] << 8 | blackAndWhite.b[position7 + 3];
				if(value7 == null) {
					value7 = 0;
				}
				var this24 = value7;
				neighbors_3 = this24;
			}
			if(!(x >= 0 && y >= 0 && x < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this25 = [x,blackAndWhite.getUInt16(0)];
				var values16 = this25;
				var max8 = values16[0];
				var _g36 = 0;
				var _g37 = values16.length;
				while(_g36 < _g37) {
					var i16 = _g36++;
					if(values16[i16] > max8) {
						max8 = values16[i16];
					}
				}
				var this26 = [max8,0];
				var values17 = this26;
				var min8 = values17[0];
				var _g38 = 0;
				var _g39 = values17.length;
				while(_g38 < _g39) {
					var i17 = _g38++;
					if(values17[i17] < min8) {
						min8 = values17[i17];
					}
				}
				var x8 = min8;
				var this27 = [y,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values18 = this27;
				var max9 = values18[0];
				var _g40 = 0;
				var _g41 = values18.length;
				while(_g40 < _g41) {
					var i18 = _g40++;
					if(values18[i18] > max9) {
						max9 = values18[i18];
					}
				}
				var this28 = [max9,0];
				var values19 = this28;
				var min9 = values19[0];
				var _g42 = 0;
				var _g43 = values19.length;
				while(_g42 < _g43) {
					var i19 = _g42++;
					if(values19[i19] < min9) {
						min9 = values19[i19];
					}
				}
				var y8 = min9;
				if(!(x8 >= 0 && y8 >= 0 && x8 < blackAndWhite.getUInt16(0) && y8 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x8 = x8;
					var this_y8 = y8;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x8,this_y8)));
				}
				var position8 = (y8 * blackAndWhite.getUInt16(0) + x8) * 4;
				position8 += vision_ds_Image.OFFSET;
				var value8 = blackAndWhite.b[position8] << 24 | blackAndWhite.b[position8 + 1] << 16 | blackAndWhite.b[position8 + 2] << 8 | blackAndWhite.b[position8 + 3];
				if(value8 == null) {
					value8 = 0;
				}
				var this29 = value8;
				neighbors_4 = this29;
			} else {
				if(!(x >= 0 && y >= 0 && x < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x9 = x;
					var this_y9 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x9,this_y9)));
				}
				var position9 = (y * blackAndWhite.getUInt16(0) + x) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value9 = blackAndWhite.b[position9] << 24 | blackAndWhite.b[position9 + 1] << 16 | blackAndWhite.b[position9 + 2] << 8 | blackAndWhite.b[position9 + 3];
				if(value9 == null) {
					value9 = 0;
				}
				var this30 = value9;
				neighbors_4 = this30;
			}
			var x9 = x + 1;
			if(!(x9 >= 0 && y >= 0 && x9 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this31 = [x9,blackAndWhite.getUInt16(0)];
				var values20 = this31;
				var max10 = values20[0];
				var _g44 = 0;
				var _g45 = values20.length;
				while(_g44 < _g45) {
					var i20 = _g44++;
					if(values20[i20] > max10) {
						max10 = values20[i20];
					}
				}
				var this32 = [max10,0];
				var values21 = this32;
				var min10 = values21[0];
				var _g46 = 0;
				var _g47 = values21.length;
				while(_g46 < _g47) {
					var i21 = _g46++;
					if(values21[i21] < min10) {
						min10 = values21[i21];
					}
				}
				var x10 = min10;
				var this33 = [y,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values22 = this33;
				var max11 = values22[0];
				var _g48 = 0;
				var _g49 = values22.length;
				while(_g48 < _g49) {
					var i22 = _g48++;
					if(values22[i22] > max11) {
						max11 = values22[i22];
					}
				}
				var this34 = [max11,0];
				var values23 = this34;
				var min11 = values23[0];
				var _g50 = 0;
				var _g51 = values23.length;
				while(_g50 < _g51) {
					var i23 = _g50++;
					if(values23[i23] < min11) {
						min11 = values23[i23];
					}
				}
				var y9 = min11;
				if(!(x10 >= 0 && y9 >= 0 && x10 < blackAndWhite.getUInt16(0) && y9 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x10 = x10;
					var this_y10 = y9;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x10,this_y10)));
				}
				var position10 = (y9 * blackAndWhite.getUInt16(0) + x10) * 4;
				position10 += vision_ds_Image.OFFSET;
				var value10 = blackAndWhite.b[position10] << 24 | blackAndWhite.b[position10 + 1] << 16 | blackAndWhite.b[position10 + 2] << 8 | blackAndWhite.b[position10 + 3];
				if(value10 == null) {
					value10 = 0;
				}
				var this35 = value10;
				neighbors_5 = this35;
			} else {
				if(!(x9 >= 0 && y >= 0 && x9 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x11 = x9;
					var this_y11 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x11,this_y11)));
				}
				var position11 = (y * blackAndWhite.getUInt16(0) + x9) * 4;
				position11 += vision_ds_Image.OFFSET;
				var value11 = blackAndWhite.b[position11] << 24 | blackAndWhite.b[position11 + 1] << 16 | blackAndWhite.b[position11 + 2] << 8 | blackAndWhite.b[position11 + 3];
				if(value11 == null) {
					value11 = 0;
				}
				var this36 = value11;
				neighbors_5 = this36;
			}
			var x11 = x - 1;
			var y10 = y + 1;
			if(!(x11 >= 0 && y10 >= 0 && x11 < blackAndWhite.getUInt16(0) && y10 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this37 = [x11,blackAndWhite.getUInt16(0)];
				var values24 = this37;
				var max12 = values24[0];
				var _g52 = 0;
				var _g53 = values24.length;
				while(_g52 < _g53) {
					var i24 = _g52++;
					if(values24[i24] > max12) {
						max12 = values24[i24];
					}
				}
				var this38 = [max12,0];
				var values25 = this38;
				var min12 = values25[0];
				var _g54 = 0;
				var _g55 = values25.length;
				while(_g54 < _g55) {
					var i25 = _g54++;
					if(values25[i25] < min12) {
						min12 = values25[i25];
					}
				}
				var x12 = min12;
				var this39 = [y10,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values26 = this39;
				var max13 = values26[0];
				var _g56 = 0;
				var _g57 = values26.length;
				while(_g56 < _g57) {
					var i26 = _g56++;
					if(values26[i26] > max13) {
						max13 = values26[i26];
					}
				}
				var this40 = [max13,0];
				var values27 = this40;
				var min13 = values27[0];
				var _g58 = 0;
				var _g59 = values27.length;
				while(_g58 < _g59) {
					var i27 = _g58++;
					if(values27[i27] < min13) {
						min13 = values27[i27];
					}
				}
				var y11 = min13;
				if(!(x12 >= 0 && y11 >= 0 && x12 < blackAndWhite.getUInt16(0) && y11 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x12 = x12;
					var this_y12 = y11;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x12,this_y12)));
				}
				var position12 = (y11 * blackAndWhite.getUInt16(0) + x12) * 4;
				position12 += vision_ds_Image.OFFSET;
				var value12 = blackAndWhite.b[position12] << 24 | blackAndWhite.b[position12 + 1] << 16 | blackAndWhite.b[position12 + 2] << 8 | blackAndWhite.b[position12 + 3];
				if(value12 == null) {
					value12 = 0;
				}
				var this41 = value12;
				neighbors_6 = this41;
			} else {
				if(!(x11 >= 0 && y10 >= 0 && x11 < blackAndWhite.getUInt16(0) && y10 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x13 = x11;
					var this_y13 = y10;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x13,this_y13)));
				}
				var position13 = (y10 * blackAndWhite.getUInt16(0) + x11) * 4;
				position13 += vision_ds_Image.OFFSET;
				var value13 = blackAndWhite.b[position13] << 24 | blackAndWhite.b[position13 + 1] << 16 | blackAndWhite.b[position13 + 2] << 8 | blackAndWhite.b[position13 + 3];
				if(value13 == null) {
					value13 = 0;
				}
				var this42 = value13;
				neighbors_6 = this42;
			}
			var y12 = y + 1;
			if(!(x >= 0 && y12 >= 0 && x < blackAndWhite.getUInt16(0) && y12 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this43 = [x,blackAndWhite.getUInt16(0)];
				var values28 = this43;
				var max14 = values28[0];
				var _g60 = 0;
				var _g61 = values28.length;
				while(_g60 < _g61) {
					var i28 = _g60++;
					if(values28[i28] > max14) {
						max14 = values28[i28];
					}
				}
				var this44 = [max14,0];
				var values29 = this44;
				var min14 = values29[0];
				var _g62 = 0;
				var _g63 = values29.length;
				while(_g62 < _g63) {
					var i29 = _g62++;
					if(values29[i29] < min14) {
						min14 = values29[i29];
					}
				}
				var x13 = min14;
				var this45 = [y12,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values30 = this45;
				var max15 = values30[0];
				var _g64 = 0;
				var _g65 = values30.length;
				while(_g64 < _g65) {
					var i30 = _g64++;
					if(values30[i30] > max15) {
						max15 = values30[i30];
					}
				}
				var this46 = [max15,0];
				var values31 = this46;
				var min15 = values31[0];
				var _g66 = 0;
				var _g67 = values31.length;
				while(_g66 < _g67) {
					var i31 = _g66++;
					if(values31[i31] < min15) {
						min15 = values31[i31];
					}
				}
				var y13 = min15;
				if(!(x13 >= 0 && y13 >= 0 && x13 < blackAndWhite.getUInt16(0) && y13 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x14 = x13;
					var this_y14 = y13;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x14,this_y14)));
				}
				var position14 = (y13 * blackAndWhite.getUInt16(0) + x13) * 4;
				position14 += vision_ds_Image.OFFSET;
				var value14 = blackAndWhite.b[position14] << 24 | blackAndWhite.b[position14 + 1] << 16 | blackAndWhite.b[position14 + 2] << 8 | blackAndWhite.b[position14 + 3];
				if(value14 == null) {
					value14 = 0;
				}
				var this47 = value14;
				neighbors_7 = this47;
			} else {
				if(!(x >= 0 && y12 >= 0 && x < blackAndWhite.getUInt16(0) && y12 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x15 = x;
					var this_y15 = y12;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x15,this_y15)));
				}
				var position15 = (y12 * blackAndWhite.getUInt16(0) + x) * 4;
				position15 += vision_ds_Image.OFFSET;
				var value15 = blackAndWhite.b[position15] << 24 | blackAndWhite.b[position15 + 1] << 16 | blackAndWhite.b[position15 + 2] << 8 | blackAndWhite.b[position15 + 3];
				if(value15 == null) {
					value15 = 0;
				}
				var this48 = value15;
				neighbors_7 = this48;
			}
			var x14 = x + 1;
			var y14 = y + 1;
			if(!(x14 >= 0 && y14 >= 0 && x14 < blackAndWhite.getUInt16(0) && y14 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this49 = [x14,blackAndWhite.getUInt16(0)];
				var values32 = this49;
				var max16 = values32[0];
				var _g68 = 0;
				var _g69 = values32.length;
				while(_g68 < _g69) {
					var i32 = _g68++;
					if(values32[i32] > max16) {
						max16 = values32[i32];
					}
				}
				var this50 = [max16,0];
				var values33 = this50;
				var min16 = values33[0];
				var _g70 = 0;
				var _g71 = values33.length;
				while(_g70 < _g71) {
					var i33 = _g70++;
					if(values33[i33] < min16) {
						min16 = values33[i33];
					}
				}
				var x15 = min16;
				var this51 = [y14,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values34 = this51;
				var max17 = values34[0];
				var _g72 = 0;
				var _g73 = values34.length;
				while(_g72 < _g73) {
					var i34 = _g72++;
					if(values34[i34] > max17) {
						max17 = values34[i34];
					}
				}
				var this52 = [max17,0];
				var values35 = this52;
				var min17 = values35[0];
				var _g74 = 0;
				var _g75 = values35.length;
				while(_g74 < _g75) {
					var i35 = _g74++;
					if(values35[i35] < min17) {
						min17 = values35[i35];
					}
				}
				var y15 = min17;
				if(!(x15 >= 0 && y15 >= 0 && x15 < blackAndWhite.getUInt16(0) && y15 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x16 = x15;
					var this_y16 = y15;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x16,this_y16)));
				}
				var position16 = (y15 * blackAndWhite.getUInt16(0) + x15) * 4;
				position16 += vision_ds_Image.OFFSET;
				var value16 = blackAndWhite.b[position16] << 24 | blackAndWhite.b[position16 + 1] << 16 | blackAndWhite.b[position16 + 2] << 8 | blackAndWhite.b[position16 + 3];
				if(value16 == null) {
					value16 = 0;
				}
				var this53 = value16;
				neighbors_8 = this53;
			} else {
				if(!(x14 >= 0 && y14 >= 0 && x14 < blackAndWhite.getUInt16(0) && y14 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x17 = x14;
					var this_y17 = y14;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x17,this_y17)));
				}
				var position17 = (y14 * blackAndWhite.getUInt16(0) + x14) * 4;
				position17 += vision_ds_Image.OFFSET;
				var value17 = blackAndWhite.b[position17] << 24 | blackAndWhite.b[position17 + 1] << 16 | blackAndWhite.b[position17 + 2] << 8 | blackAndWhite.b[position17 + 3];
				if(value17 == null) {
					value17 = 0;
				}
				var this54 = value17;
				neighbors_8 = this54;
			}
			var perwittCalculationIterationLTR = (neighbors_0 >> 16 & 255) * -1 + (neighbors_3 >> 16 & 255) * -1 + (neighbors_6 >> 16 & 255) * -1 + (neighbors_2 >> 16 & 255) + (neighbors_5 >> 16 & 255) + (neighbors_8 >> 16 & 255);
			if(Math.abs(perwittCalculationIterationLTR) > threshold) {
				var this55 = 0;
				var color = this55;
				var Alpha = 255;
				if(Alpha == null) {
					Alpha = 255;
				}
				color &= -16711681;
				color |= 16711680;
				color &= -65281;
				color |= 65280;
				color &= -256;
				color |= 255;
				color &= 16777215;
				color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
				var color1 = color;
				if(!(x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)))) {
					var this_x18 = x;
					var this_y18 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edges,new vision_ds_Point2D(this_x18,this_y18)));
				} else if(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g76 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g77 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g78 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var edges1 = edges.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g76,_g77,_g78,edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edges1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x16 = view.x + view.width / 2 - c;
								var y16 = view.y + view.height / 2;
								if(y16 == null) {
									y16 = 0;
								}
								if(x16 == null) {
									x16 = 0;
								}
								var f1_x = x16;
								var f1_y = y16;
								var x17 = view.x + view.width / 2 + c;
								var y17 = view.y + view.height / 2;
								if(y17 == null) {
									y17 = 0;
								}
								if(x17 == null) {
									x17 = 0;
								}
								var f2_x = x17;
								var f2_y = y17;
								var x18 = x;
								var y18 = y;
								if(y18 == null) {
									y18 = 0;
								}
								if(x18 == null) {
									x18 = 0;
								}
								var p_x = x18;
								var p_y = y18;
								var x19 = p_x - f1_x;
								var y19 = p_y - f1_y;
								var x20 = p_x - f2_x;
								var y20 = p_y - f2_y;
								has = Math.sqrt(x19 * x19 + y19 * y19) + Math.sqrt(x20 * x20 + y20 * y20) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x21 = view.x + view.width / 2;
								var y21 = view.y + view.height / 2 - c1;
								if(y21 == null) {
									y21 = 0;
								}
								if(x21 == null) {
									x21 = 0;
								}
								var f1_x1 = x21;
								var f1_y1 = y21;
								var x22 = view.x + view.width / 2;
								var y22 = view.y + view.height / 2 + c1;
								if(y22 == null) {
									y22 = 0;
								}
								if(x22 == null) {
									x22 = 0;
								}
								var f2_x1 = x22;
								var f2_y1 = y22;
								var x23 = x;
								var y23 = y;
								if(y23 == null) {
									y23 = 0;
								}
								if(x23 == null) {
									x23 = 0;
								}
								var p_x1 = x23;
								var p_y1 = y23;
								var x24 = p_x1 - f1_x1;
								var y24 = p_y1 - f1_y1;
								var x25 = p_x1 - f2_x1;
								var y25 = p_y1 - f2_y1;
								has = Math.sqrt(x24 * x24 + y24 * y24) + Math.sqrt(x25 * x25 + y25 * y25) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x26 = x;
								var y26 = y;
								if(y26 == null) {
									y26 = 0;
								}
								if(x26 == null) {
									x26 = 0;
								}
								var point1_x = x26;
								var point1_y = y26;
								var x27 = view.x + view.width / 2;
								var y27 = view.y + view.height / 2;
								if(y27 == null) {
									y27 = 0;
								}
								if(x27 == null) {
									x27 = 0;
								}
								var point2_x = x27;
								var point2_y = y27;
								var x28 = point2_x - point1_x;
								var y28 = point2_y - point1_y;
								has = Math.sqrt(x28 * x28 + y28 * y28) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position18 = (y * edges.getUInt16(0) + x) * 4;
						position18 += vision_ds_Image.OFFSET;
						edges.b[position18] = color1 >> 24 & 255;
						edges.b[position18 + 1] = color1 >> 16 & 255;
						edges.b[position18 + 2] = color1 >> 8 & 255;
						edges.b[position18 + 3] = color1 & 255;
					}
				} else {
					var position19 = (y * edges.getUInt16(0) + x) * 4;
					position19 += vision_ds_Image.OFFSET;
					edges.b[position19] = color1 >> 24 & 255;
					edges.b[position19 + 1] = color1 >> 16 & 255;
					edges.b[position19 + 2] = color1 >> 8 & 255;
					edges.b[position19 + 3] = color1 & 255;
				}
				continue;
			}
			var perwittCalculationIterationTTB = (neighbors_0 >> 16 & 255) * -1 + (neighbors_1 >> 16 & 255) * -1 + (neighbors_2 >> 16 & 255) * -1 + (neighbors_6 >> 16 & 255) + (neighbors_7 >> 16 & 255) + (neighbors_8 >> 16 & 255);
			if(Math.abs(perwittCalculationIterationTTB) > threshold) {
				var this56 = 0;
				var color2 = this56;
				var Alpha1 = 255;
				if(Alpha1 == null) {
					Alpha1 = 255;
				}
				color2 &= -16711681;
				color2 |= 16711680;
				color2 &= -65281;
				color2 |= 65280;
				color2 &= -256;
				color2 |= 255;
				color2 &= 16777215;
				color2 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
				var color3 = color2;
				if(!(x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)))) {
					var this_x19 = x;
					var this_y19 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edges,new vision_ds_Point2D(this_x19,this_y19)));
				} else if(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v1 = null;
					var tmp1;
					if(!(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
						tmp1 = x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4));
					} else {
						var has1 = false;
						var view2;
						if(v1 != null) {
							view2 = v1;
						} else {
							var _g79 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g80 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g81 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var edges2 = edges.b;
							var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view2 = new vision_ds_ImageView(_g79,_g80,_g81,edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edges2[view3]);
						}
						switch(view2.shape) {
						case 0:
							has1 = x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y;
							break;
						case 1:
							has1 = !(x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y);
							break;
						case 2:case 3:
							if(view2.width > view2.height) {
								var a2 = view2.width / 2;
								var b2 = view2.height / 2;
								var c2 = Math.sqrt(a2 * a2 - b2 * b2);
								var x29 = view2.x + view2.width / 2 - c2;
								var y29 = view2.y + view2.height / 2;
								if(y29 == null) {
									y29 = 0;
								}
								if(x29 == null) {
									x29 = 0;
								}
								var f1_x2 = x29;
								var f1_y2 = y29;
								var x30 = view2.x + view2.width / 2 + c2;
								var y30 = view2.y + view2.height / 2;
								if(y30 == null) {
									y30 = 0;
								}
								if(x30 == null) {
									x30 = 0;
								}
								var f2_x2 = x30;
								var f2_y2 = y30;
								var x31 = x;
								var y31 = y;
								if(y31 == null) {
									y31 = 0;
								}
								if(x31 == null) {
									x31 = 0;
								}
								var p_x2 = x31;
								var p_y2 = y31;
								var x32 = p_x2 - f1_x2;
								var y32 = p_y2 - f1_y2;
								var x33 = p_x2 - f2_x2;
								var y33 = p_y2 - f2_y2;
								has1 = Math.sqrt(x32 * x32 + y32 * y32) + Math.sqrt(x33 * x33 + y33 * y33) <= view2.width;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else if(view2.height > view2.width) {
								var a3 = view2.height / 2;
								var b3 = view2.width / 2;
								var c3 = Math.sqrt(a3 * a3 - b3 * b3);
								var x34 = view2.x + view2.width / 2;
								var y34 = view2.y + view2.height / 2 - c3;
								if(y34 == null) {
									y34 = 0;
								}
								if(x34 == null) {
									x34 = 0;
								}
								var f1_x3 = x34;
								var f1_y3 = y34;
								var x35 = view2.x + view2.width / 2;
								var y35 = view2.y + view2.height / 2 + c3;
								if(y35 == null) {
									y35 = 0;
								}
								if(x35 == null) {
									x35 = 0;
								}
								var f2_x3 = x35;
								var f2_y3 = y35;
								var x36 = x;
								var y36 = y;
								if(y36 == null) {
									y36 = 0;
								}
								if(x36 == null) {
									x36 = 0;
								}
								var p_x3 = x36;
								var p_y3 = y36;
								var x37 = p_x3 - f1_x3;
								var y37 = p_y3 - f1_y3;
								var x38 = p_x3 - f2_x3;
								var y38 = p_y3 - f2_y3;
								has1 = Math.sqrt(x37 * x37 + y37 * y37) + Math.sqrt(x38 * x38 + y38 * y38) <= view2.height;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else {
								var x39 = x;
								var y39 = y;
								if(y39 == null) {
									y39 = 0;
								}
								if(x39 == null) {
									x39 = 0;
								}
								var point1_x1 = x39;
								var point1_y1 = y39;
								var x40 = view2.x + view2.width / 2;
								var y40 = view2.y + view2.height / 2;
								if(y40 == null) {
									y40 = 0;
								}
								if(x40 == null) {
									x40 = 0;
								}
								var point2_x1 = x40;
								var point2_y1 = y40;
								var x41 = point2_x1 - point1_x1;
								var y41 = point2_y1 - point1_y1;
								has1 = Math.sqrt(x41 * x41 + y41 * y41) <= view2.width / 2;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							}
							break;
						case 4:
							has1 = Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
							break;
						case 5:
							has1 = !(Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
							break;
						}
						tmp1 = has1;
					}
					if(tmp1) {
						var position20 = (y * edges.getUInt16(0) + x) * 4;
						position20 += vision_ds_Image.OFFSET;
						edges.b[position20] = color3 >> 24 & 255;
						edges.b[position20 + 1] = color3 >> 16 & 255;
						edges.b[position20 + 2] = color3 >> 8 & 255;
						edges.b[position20 + 3] = color3 & 255;
					}
				} else {
					var position21 = (y * edges.getUInt16(0) + x) * 4;
					position21 += vision_ds_Image.OFFSET;
					edges.b[position21] = color3 >> 24 & 255;
					edges.b[position21 + 1] = color3 >> 16 & 255;
					edges.b[position21 + 2] = color3 >> 8 & 255;
					edges.b[position21 + 3] = color3 & 255;
				}
				continue;
			}
		}
	}
	return edges;
};
var vision_algorithms_Radix = function() { };
vision_algorithms_Radix.__name__ = true;
vision_algorithms_Radix.getMax = function(array,endIndex) {
	if(endIndex == null) {
		endIndex = array.length;
	}
	var potential = array[0];
	var _g = 1;
	var _g1 = endIndex;
	while(_g < _g1) {
		var i = _g++;
		if(array[i] > potential) {
			potential = array[i];
		}
	}
	return potential;
};
vision_algorithms_Radix.countingSort = function(array,exp,endIndex) {
	if(endIndex == null) {
		endIndex = array.length;
	}
	var output = [];
	var i = -1;
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	var count = _g;
	while(++i < endIndex) {
		var tmp = (array[i] / exp | 0) % 10;
		count[tmp]++;
	}
	i = 0;
	while(++i < 10) count[i] += count[i - 1];
	i = endIndex;
	while(--i >= 0) {
		output[count[(array[i] / exp | 0) % 10] - 1] = array[i];
		var tmp = (array[i] / exp | 0) % 10;
		count[tmp]--;
	}
	i = -1;
	while(++i < endIndex) array[i] = output[i];
	return output;
};
vision_algorithms_Radix.sort = function(array) {
	var max = vision_algorithms_Radix.getMax(array,array.length);
	var exp = 1;
	while(max / exp > 0) {
		array = vision_algorithms_Radix.countingSort(array,exp,array.length);
		exp *= 10;
	}
	return array;
};
var vision_algorithms_RobertsCross = function() { };
vision_algorithms_RobertsCross.__name__ = true;
vision_algorithms_RobertsCross.convolveWithRobertsCross = function(image) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var edgeColors = this2;
	var maxGradient = -1;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var j = _g2++;
			var x = i - 1;
			var y = j - 1;
			var pixel;
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this1 = [x,image.getUInt16(0)];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i1 = _g4++;
					if(values[i1] > max) {
						max = values[i1];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i2 = _g6++;
					if(values1[i2] < min) {
						min = values1[i2];
					}
				}
				var x1 = min;
				var this3 = [y,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i3 = _g8++;
					if(values2[i3] > max1) {
						max1 = values2[i3];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i4 = _g10++;
					if(values3[i4] < min1) {
						min1 = values3[i4];
					}
				}
				var y1 = min1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y1 * image.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				pixel = this5;
			} else {
				if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				pixel = this6;
			}
			var gray = ((pixel >> 16 & 255) + (pixel >> 8 & 255) + (pixel & 255)) / 3 | 0;
			var Alpha = pixel >> 24 & 255;
			if(Alpha == null) {
				Alpha = 255;
			}
			var this7 = 0;
			var color = this7;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 255;
			}
			color &= -16711681;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
			color &= -65281;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
			color &= -256;
			color |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
			color &= 16777215;
			color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
			var pos00 = color >> 16 & 255;
			var x2 = i - 1;
			var y2 = j + 1;
			var pixel1;
			if(!(x2 >= 0 && y2 >= 0 && x2 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this8 = [x2,image.getUInt16(0)];
				var values4 = this8;
				var max2 = values4[0];
				var _g12 = 0;
				var _g13 = values4.length;
				while(_g12 < _g13) {
					var i5 = _g12++;
					if(values4[i5] > max2) {
						max2 = values4[i5];
					}
				}
				var this9 = [max2,0];
				var values5 = this9;
				var min2 = values5[0];
				var _g14 = 0;
				var _g15 = values5.length;
				while(_g14 < _g15) {
					var i6 = _g14++;
					if(values5[i6] < min2) {
						min2 = values5[i6];
					}
				}
				var x3 = min2;
				var this10 = [y2,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values6 = this10;
				var max3 = values6[0];
				var _g16 = 0;
				var _g17 = values6.length;
				while(_g16 < _g17) {
					var i7 = _g16++;
					if(values6[i7] > max3) {
						max3 = values6[i7];
					}
				}
				var this11 = [max3,0];
				var values7 = this11;
				var min3 = values7[0];
				var _g18 = 0;
				var _g19 = values7.length;
				while(_g18 < _g19) {
					var i8 = _g18++;
					if(values7[i8] < min3) {
						min3 = values7[i8];
					}
				}
				var y3 = min3;
				if(!(x3 >= 0 && y3 >= 0 && x3 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x2 = x3;
					var this_y2 = y3;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position2 = (y3 * image.getUInt16(0) + x3) * 4;
				position2 += vision_ds_Image.OFFSET;
				var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var this12 = value2;
				pixel1 = this12;
			} else {
				if(!(x2 >= 0 && y2 >= 0 && x2 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x3 = x2;
					var this_y3 = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x3,this_y3)));
				}
				var position3 = (y2 * image.getUInt16(0) + x2) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value3 = image.b[position3] << 24 | image.b[position3 + 1] << 16 | image.b[position3 + 2] << 8 | image.b[position3 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var this13 = value3;
				pixel1 = this13;
			}
			var gray1 = ((pixel1 >> 16 & 255) + (pixel1 >> 8 & 255) + (pixel1 & 255)) / 3 | 0;
			var Alpha2 = pixel1 >> 24 & 255;
			if(Alpha2 == null) {
				Alpha2 = 255;
			}
			var this14 = 0;
			var color1 = this14;
			var Alpha3 = Alpha2;
			if(Alpha3 == null) {
				Alpha3 = 255;
			}
			color1 &= -16711681;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 16;
			color1 &= -65281;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 8;
			color1 &= -256;
			color1 |= gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1;
			color1 &= 16777215;
			color1 |= (Alpha3 > 255 ? 255 : Alpha3 < 0 ? 0 : Alpha3) << 24;
			var pos02 = color1 >> 16 & 255;
			var x4 = i + 1;
			var y4 = j - 1;
			var pixel2;
			if(!(x4 >= 0 && y4 >= 0 && x4 < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this15 = [x4,image.getUInt16(0)];
				var values8 = this15;
				var max4 = values8[0];
				var _g20 = 0;
				var _g21 = values8.length;
				while(_g20 < _g21) {
					var i9 = _g20++;
					if(values8[i9] > max4) {
						max4 = values8[i9];
					}
				}
				var this16 = [max4,0];
				var values9 = this16;
				var min4 = values9[0];
				var _g22 = 0;
				var _g23 = values9.length;
				while(_g22 < _g23) {
					var i10 = _g22++;
					if(values9[i10] < min4) {
						min4 = values9[i10];
					}
				}
				var x5 = min4;
				var this17 = [y4,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values10 = this17;
				var max5 = values10[0];
				var _g24 = 0;
				var _g25 = values10.length;
				while(_g24 < _g25) {
					var i11 = _g24++;
					if(values10[i11] > max5) {
						max5 = values10[i11];
					}
				}
				var this18 = [max5,0];
				var values11 = this18;
				var min5 = values11[0];
				var _g26 = 0;
				var _g27 = values11.length;
				while(_g26 < _g27) {
					var i12 = _g26++;
					if(values11[i12] < min5) {
						min5 = values11[i12];
					}
				}
				var y5 = min5;
				if(!(x5 >= 0 && y5 >= 0 && x5 < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x4 = x5;
					var this_y4 = y5;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position4 = (y5 * image.getUInt16(0) + x5) * 4;
				position4 += vision_ds_Image.OFFSET;
				var value4 = image.b[position4] << 24 | image.b[position4 + 1] << 16 | image.b[position4 + 2] << 8 | image.b[position4 + 3];
				if(value4 == null) {
					value4 = 0;
				}
				var this19 = value4;
				pixel2 = this19;
			} else {
				if(!(x4 >= 0 && y4 >= 0 && x4 < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x5 = x4;
					var this_y5 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x5,this_y5)));
				}
				var position5 = (y4 * image.getUInt16(0) + x4) * 4;
				position5 += vision_ds_Image.OFFSET;
				var value5 = image.b[position5] << 24 | image.b[position5 + 1] << 16 | image.b[position5 + 2] << 8 | image.b[position5 + 3];
				if(value5 == null) {
					value5 = 0;
				}
				var this20 = value5;
				pixel2 = this20;
			}
			var gray2 = ((pixel2 >> 16 & 255) + (pixel2 >> 8 & 255) + (pixel2 & 255)) / 3 | 0;
			var Alpha4 = pixel2 >> 24 & 255;
			if(Alpha4 == null) {
				Alpha4 = 255;
			}
			var this21 = 0;
			var color2 = this21;
			var Alpha5 = Alpha4;
			if(Alpha5 == null) {
				Alpha5 = 255;
			}
			color2 &= -16711681;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 16;
			color2 &= -65281;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 8;
			color2 &= -256;
			color2 |= gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2;
			color2 &= 16777215;
			color2 |= (Alpha5 > 255 ? 255 : Alpha5 < 0 ? 0 : Alpha5) << 24;
			var pos20 = color2 >> 16 & 255;
			var x6 = i + 1;
			var y6 = j + 1;
			var pixel3;
			if(!(x6 >= 0 && y6 >= 0 && x6 < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this22 = [x6,image.getUInt16(0)];
				var values12 = this22;
				var max6 = values12[0];
				var _g28 = 0;
				var _g29 = values12.length;
				while(_g28 < _g29) {
					var i13 = _g28++;
					if(values12[i13] > max6) {
						max6 = values12[i13];
					}
				}
				var this23 = [max6,0];
				var values13 = this23;
				var min6 = values13[0];
				var _g30 = 0;
				var _g31 = values13.length;
				while(_g30 < _g31) {
					var i14 = _g30++;
					if(values13[i14] < min6) {
						min6 = values13[i14];
					}
				}
				var x7 = min6;
				var this24 = [y6,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values14 = this24;
				var max7 = values14[0];
				var _g32 = 0;
				var _g33 = values14.length;
				while(_g32 < _g33) {
					var i15 = _g32++;
					if(values14[i15] > max7) {
						max7 = values14[i15];
					}
				}
				var this25 = [max7,0];
				var values15 = this25;
				var min7 = values15[0];
				var _g34 = 0;
				var _g35 = values15.length;
				while(_g34 < _g35) {
					var i16 = _g34++;
					if(values15[i16] < min7) {
						min7 = values15[i16];
					}
				}
				var y7 = min7;
				if(!(x7 >= 0 && y7 >= 0 && x7 < image.getUInt16(0) && y7 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x6 = x7;
					var this_y6 = y7;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position6 = (y7 * image.getUInt16(0) + x7) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value6 = image.b[position6] << 24 | image.b[position6 + 1] << 16 | image.b[position6 + 2] << 8 | image.b[position6 + 3];
				if(value6 == null) {
					value6 = 0;
				}
				var this26 = value6;
				pixel3 = this26;
			} else {
				if(!(x6 >= 0 && y6 >= 0 && x6 < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x7 = x6;
					var this_y7 = y6;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x7,this_y7)));
				}
				var position7 = (y6 * image.getUInt16(0) + x6) * 4;
				position7 += vision_ds_Image.OFFSET;
				var value7 = image.b[position7] << 24 | image.b[position7 + 1] << 16 | image.b[position7 + 2] << 8 | image.b[position7 + 3];
				if(value7 == null) {
					value7 = 0;
				}
				var this27 = value7;
				pixel3 = this27;
			}
			var gray3 = ((pixel3 >> 16 & 255) + (pixel3 >> 8 & 255) + (pixel3 & 255)) / 3 | 0;
			var Alpha6 = pixel3 >> 24 & 255;
			if(Alpha6 == null) {
				Alpha6 = 255;
			}
			var this28 = 0;
			var color3 = this28;
			var Alpha7 = Alpha6;
			if(Alpha7 == null) {
				Alpha7 = 255;
			}
			color3 &= -16711681;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 16;
			color3 &= -65281;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 8;
			color3 &= -256;
			color3 |= gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3;
			color3 &= 16777215;
			color3 |= (Alpha7 > 255 ? 255 : Alpha7 < 0 ? 0 : Alpha7) << 24;
			var pos22 = color3 >> 16 & 255;
			var gx = pos00 + 0 * pos02 + (0 * pos20 + -1 * pos22);
			var gy = 0 * pos00 + pos02 + (-1 * pos20 + 0 * pos22);
			var gradientFloatValue = Math.sqrt(gx * gx + gy * gy);
			var gradient = gradientFloatValue | 0;
			if(gradient > maxGradient) {
				maxGradient = gradient;
			}
			var rgb = gradient * (255 / maxGradient) | 0;
			var color4 = -16777216 | rgb << 16 | rgb << 8 | rgb;
			if(!(i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)))) {
				var this_x8 = i;
				var this_y8 = j;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edgeColors,new vision_ds_Point2D(this_x8,this_y8)));
			} else if(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g36 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g37 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g38 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var edgeColors1 = edgeColors.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g36,_g37,_g38,edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edgeColors1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y;
						break;
					case 1:
						has = !(i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x8 = view.x + view.width / 2 - c;
							var y8 = view.y + view.height / 2;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var f1_x = x8;
							var f1_y = y8;
							var x9 = view.x + view.width / 2 + c;
							var y9 = view.y + view.height / 2;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var f2_x = x9;
							var f2_y = y9;
							var x10 = i;
							var y10 = j;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var p_x = x10;
							var p_y = y10;
							var x11 = p_x - f1_x;
							var y11 = p_y - f1_y;
							var x12 = p_x - f2_x;
							var y12 = p_y - f2_y;
							has = Math.sqrt(x11 * x11 + y11 * y11) + Math.sqrt(x12 * x12 + y12 * y12) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x13 = view.x + view.width / 2;
							var y13 = view.y + view.height / 2 - c1;
							if(y13 == null) {
								y13 = 0;
							}
							if(x13 == null) {
								x13 = 0;
							}
							var f1_x1 = x13;
							var f1_y1 = y13;
							var x14 = view.x + view.width / 2;
							var y14 = view.y + view.height / 2 + c1;
							if(y14 == null) {
								y14 = 0;
							}
							if(x14 == null) {
								x14 = 0;
							}
							var f2_x1 = x14;
							var f2_y1 = y14;
							var x15 = i;
							var y15 = j;
							if(y15 == null) {
								y15 = 0;
							}
							if(x15 == null) {
								x15 = 0;
							}
							var p_x1 = x15;
							var p_y1 = y15;
							var x16 = p_x1 - f1_x1;
							var y16 = p_y1 - f1_y1;
							var x17 = p_x1 - f2_x1;
							var y17 = p_y1 - f2_y1;
							has = Math.sqrt(x16 * x16 + y16 * y16) + Math.sqrt(x17 * x17 + y17 * y17) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x18 = i;
							var y18 = j;
							if(y18 == null) {
								y18 = 0;
							}
							if(x18 == null) {
								x18 = 0;
							}
							var point1_x = x18;
							var point1_y = y18;
							var x19 = view.x + view.width / 2;
							var y19 = view.y + view.height / 2;
							if(y19 == null) {
								y19 = 0;
							}
							if(x19 == null) {
								x19 = 0;
							}
							var point2_x = x19;
							var point2_y = y19;
							var x20 = point2_x - point1_x;
							var y20 = point2_y - point1_y;
							has = Math.sqrt(x20 * x20 + y20 * y20) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position8 = (j * edgeColors.getUInt16(0) + i) * 4;
					position8 += vision_ds_Image.OFFSET;
					edgeColors.b[position8] = color4 >> 24 & 255;
					edgeColors.b[position8 + 1] = color4 >> 16 & 255;
					edgeColors.b[position8 + 2] = color4 >> 8 & 255;
					edgeColors.b[position8 + 3] = color4 & 255;
				}
			} else {
				var position9 = (j * edgeColors.getUInt16(0) + i) * 4;
				position9 += vision_ds_Image.OFFSET;
				edgeColors.b[position9] = color4 >> 24 & 255;
				edgeColors.b[position9 + 1] = color4 >> 16 & 255;
				edgeColors.b[position9 + 2] = color4 >> 8 & 255;
				edgeColors.b[position9 + 3] = color4 & 255;
			}
		}
	}
	return edgeColors;
};
var vision_algorithms_SimpleLineDetector = function() { };
vision_algorithms_SimpleLineDetector.__name__ = true;
vision_algorithms_SimpleLineDetector.findLineFromPoint = function(image,point,minLineLength,preferTTB,preferRTL) {
	if(preferRTL == null) {
		preferRTL = false;
	}
	if(preferTTB == null) {
		preferTTB = false;
	}
	var startX = point.x;
	var startY = point.y;
	var yArr = preferTTB ? [0,1,2] : [0,-1,-2];
	var xArr = preferRTL ? [0,-1,-2] : [0,1,2];
	var tmp;
	var x = point.x;
	var y = point.y;
	if(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))) {
		var x = point.x;
		var y = point.y;
		if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * image.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this1 = value;
		tmp = this1 == 0;
	} else {
		tmp = true;
	}
	if(tmp) {
		return null;
	}
	var prev = null;
	var prev2 = null;
	var expand = null;
	expand = function() {
		var _g = 0;
		while(_g < xArr.length) {
			var X = xArr[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < yArr.length) {
				var Y = yArr[_g1];
				++_g1;
				var expand1;
				if(!(X == 0 && Y == 0)) {
					var x = point.x + X;
					var y = point.y + Y;
					expand1 = !(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
				} else {
					expand1 = true;
				}
				if(expand1) {
					continue;
				}
				var x1 = point.x + X;
				var y1 = point.y + Y;
				if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y1 * image.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this1 = value;
				if((this1 >> 16 & 255) == 255) {
					var x2 = point.x + X;
					point.x = x2;
					var y2 = point.y + Y;
					point.y = y2;
					if(prev == null) {
						var x3 = point.x;
						var y3 = point.y;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var p_x = x3;
						var p_y = y3;
						var this2 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
						prev = this2;
					} else {
						var x4 = prev.x;
						var y4 = prev.y;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var p_x1 = x4;
						var p_y1 = y4;
						var this3 = new vision_ds__$IntPoint2D_Impl(p_x1 | 0,p_y1 | 0);
						prev2 = this3;
						var x5 = point.x;
						var y5 = point.y;
						if(y5 == null) {
							y5 = 0;
						}
						if(x5 == null) {
							x5 = 0;
						}
						var p_x2 = x5;
						var p_y2 = y5;
						var this4 = new vision_ds__$IntPoint2D_Impl(p_x2 | 0,p_y2 | 0);
						prev = this4;
					}
					if((preferTTB ? Y : X) == 0) {
						if(point.x == prev.x && point.y == prev.y || point.x == prev2.x && point.y == prev2.y) {
							return;
						}
					}
					expand();
				}
			}
		}
	};
	expand();
	var line = new vision_ds_Line2D(new vision_ds_Point2D(startX,startY),new vision_ds_Point2D(point.x,point.y));
	if(Math.sqrt(Math.pow(line.end.x - line.start.x,2) + Math.pow(line.end.y - line.start.y,2)) > minLineLength) {
		return line;
	}
	return null;
};
vision_algorithms_SimpleLineDetector.lineCoveragePercentage = function(image,line) {
	var coveredPixels = 0;
	var totalPixels = 0;
	if(line == null) {
		return 0;
	}
	var p = line.start;
	var p1_x = p.x | 0;
	var p1_y = p.y | 0;
	var p = line.end;
	var p2_x = p.x | 0;
	var p2_y = p.y | 0;
	var x1 = p1_x;
	var y1 = p1_y;
	var x2 = p2_x;
	var y2 = p2_y;
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	var gapChecker = [];
	var currentGap = 1;
	while(true) {
		if(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))) {
			var x = x1 | 0;
			var y = y1 | 0;
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y * image.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			if((this1 >> 16 & 255) == 255) {
				++coveredPixels;
				currentGap = 0;
			} else {
				gapChecker[currentGap] = 1;
				++currentGap;
			}
		}
		++totalPixels;
		if(x1 == x2 && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
	return (coveredPixels - gapChecker.length) / totalPixels * 100;
};
var vision_algorithms_Sobel = function() { };
vision_algorithms_Sobel.__name__ = true;
vision_algorithms_Sobel.convolveWithSobelOperator = function(image) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var edgeColors = this2;
	var maxGradient = -1;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var j = _g2++;
			var x = i - 1;
			var y = j - 1;
			var pixel;
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this1 = [x,image.getUInt16(0)];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i1 = _g4++;
					if(values[i1] > max) {
						max = values[i1];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i2 = _g6++;
					if(values1[i2] < min) {
						min = values1[i2];
					}
				}
				var x1 = min;
				var this3 = [y,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i3 = _g8++;
					if(values2[i3] > max1) {
						max1 = values2[i3];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i4 = _g10++;
					if(values3[i4] < min1) {
						min1 = values3[i4];
					}
				}
				var y1 = min1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y1 * image.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				pixel = this5;
			} else {
				if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				pixel = this6;
			}
			var gray = ((pixel >> 16 & 255) + (pixel >> 8 & 255) + (pixel & 255)) / 3 | 0;
			var Alpha = pixel >> 24 & 255;
			if(Alpha == null) {
				Alpha = 255;
			}
			var this7 = 0;
			var color = this7;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 255;
			}
			color &= -16711681;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
			color &= -65281;
			color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
			color &= -256;
			color |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
			color &= 16777215;
			color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
			var pos00 = color >> 16 & 255;
			var x2 = i - 1;
			var pixel1;
			if(!(x2 >= 0 && j >= 0 && x2 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this8 = [x2,image.getUInt16(0)];
				var values4 = this8;
				var max2 = values4[0];
				var _g12 = 0;
				var _g13 = values4.length;
				while(_g12 < _g13) {
					var i5 = _g12++;
					if(values4[i5] > max2) {
						max2 = values4[i5];
					}
				}
				var this9 = [max2,0];
				var values5 = this9;
				var min2 = values5[0];
				var _g14 = 0;
				var _g15 = values5.length;
				while(_g14 < _g15) {
					var i6 = _g14++;
					if(values5[i6] < min2) {
						min2 = values5[i6];
					}
				}
				var x3 = min2;
				var this10 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values6 = this10;
				var max3 = values6[0];
				var _g16 = 0;
				var _g17 = values6.length;
				while(_g16 < _g17) {
					var i7 = _g16++;
					if(values6[i7] > max3) {
						max3 = values6[i7];
					}
				}
				var this11 = [max3,0];
				var values7 = this11;
				var min3 = values7[0];
				var _g18 = 0;
				var _g19 = values7.length;
				while(_g18 < _g19) {
					var i8 = _g18++;
					if(values7[i8] < min3) {
						min3 = values7[i8];
					}
				}
				var y2 = min3;
				if(!(x3 >= 0 && y2 >= 0 && x3 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x2 = x3;
					var this_y2 = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position2 = (y2 * image.getUInt16(0) + x3) * 4;
				position2 += vision_ds_Image.OFFSET;
				var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var this12 = value2;
				pixel1 = this12;
			} else {
				if(!(x2 >= 0 && j >= 0 && x2 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x3 = x2;
					var this_y3 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x3,this_y3)));
				}
				var position3 = (j * image.getUInt16(0) + x2) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value3 = image.b[position3] << 24 | image.b[position3 + 1] << 16 | image.b[position3 + 2] << 8 | image.b[position3 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var this13 = value3;
				pixel1 = this13;
			}
			var gray1 = ((pixel1 >> 16 & 255) + (pixel1 >> 8 & 255) + (pixel1 & 255)) / 3 | 0;
			var Alpha2 = pixel1 >> 24 & 255;
			if(Alpha2 == null) {
				Alpha2 = 255;
			}
			var this14 = 0;
			var color1 = this14;
			var Alpha3 = Alpha2;
			if(Alpha3 == null) {
				Alpha3 = 255;
			}
			color1 &= -16711681;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 16;
			color1 &= -65281;
			color1 |= (gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1) << 8;
			color1 &= -256;
			color1 |= gray1 > 255 ? 255 : gray1 < 0 ? 0 : gray1;
			color1 &= 16777215;
			color1 |= (Alpha3 > 255 ? 255 : Alpha3 < 0 ? 0 : Alpha3) << 24;
			var pos01 = color1 >> 16 & 255;
			var x4 = i - 1;
			var y3 = j + 1;
			var pixel2;
			if(!(x4 >= 0 && y3 >= 0 && x4 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this15 = [x4,image.getUInt16(0)];
				var values8 = this15;
				var max4 = values8[0];
				var _g20 = 0;
				var _g21 = values8.length;
				while(_g20 < _g21) {
					var i9 = _g20++;
					if(values8[i9] > max4) {
						max4 = values8[i9];
					}
				}
				var this16 = [max4,0];
				var values9 = this16;
				var min4 = values9[0];
				var _g22 = 0;
				var _g23 = values9.length;
				while(_g22 < _g23) {
					var i10 = _g22++;
					if(values9[i10] < min4) {
						min4 = values9[i10];
					}
				}
				var x5 = min4;
				var this17 = [y3,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values10 = this17;
				var max5 = values10[0];
				var _g24 = 0;
				var _g25 = values10.length;
				while(_g24 < _g25) {
					var i11 = _g24++;
					if(values10[i11] > max5) {
						max5 = values10[i11];
					}
				}
				var this18 = [max5,0];
				var values11 = this18;
				var min5 = values11[0];
				var _g26 = 0;
				var _g27 = values11.length;
				while(_g26 < _g27) {
					var i12 = _g26++;
					if(values11[i12] < min5) {
						min5 = values11[i12];
					}
				}
				var y4 = min5;
				if(!(x5 >= 0 && y4 >= 0 && x5 < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x4 = x5;
					var this_y4 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position4 = (y4 * image.getUInt16(0) + x5) * 4;
				position4 += vision_ds_Image.OFFSET;
				var value4 = image.b[position4] << 24 | image.b[position4 + 1] << 16 | image.b[position4 + 2] << 8 | image.b[position4 + 3];
				if(value4 == null) {
					value4 = 0;
				}
				var this19 = value4;
				pixel2 = this19;
			} else {
				if(!(x4 >= 0 && y3 >= 0 && x4 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x5 = x4;
					var this_y5 = y3;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x5,this_y5)));
				}
				var position5 = (y3 * image.getUInt16(0) + x4) * 4;
				position5 += vision_ds_Image.OFFSET;
				var value5 = image.b[position5] << 24 | image.b[position5 + 1] << 16 | image.b[position5 + 2] << 8 | image.b[position5 + 3];
				if(value5 == null) {
					value5 = 0;
				}
				var this20 = value5;
				pixel2 = this20;
			}
			var gray2 = ((pixel2 >> 16 & 255) + (pixel2 >> 8 & 255) + (pixel2 & 255)) / 3 | 0;
			var Alpha4 = pixel2 >> 24 & 255;
			if(Alpha4 == null) {
				Alpha4 = 255;
			}
			var this21 = 0;
			var color2 = this21;
			var Alpha5 = Alpha4;
			if(Alpha5 == null) {
				Alpha5 = 255;
			}
			color2 &= -16711681;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 16;
			color2 &= -65281;
			color2 |= (gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2) << 8;
			color2 &= -256;
			color2 |= gray2 > 255 ? 255 : gray2 < 0 ? 0 : gray2;
			color2 &= 16777215;
			color2 |= (Alpha5 > 255 ? 255 : Alpha5 < 0 ? 0 : Alpha5) << 24;
			var pos02 = color2 >> 16 & 255;
			var y5 = j - 1;
			var pixel3;
			if(!(i >= 0 && y5 >= 0 && i < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this22 = [i,image.getUInt16(0)];
				var values12 = this22;
				var max6 = values12[0];
				var _g28 = 0;
				var _g29 = values12.length;
				while(_g28 < _g29) {
					var i13 = _g28++;
					if(values12[i13] > max6) {
						max6 = values12[i13];
					}
				}
				var this23 = [max6,0];
				var values13 = this23;
				var min6 = values13[0];
				var _g30 = 0;
				var _g31 = values13.length;
				while(_g30 < _g31) {
					var i14 = _g30++;
					if(values13[i14] < min6) {
						min6 = values13[i14];
					}
				}
				var x6 = min6;
				var this24 = [y5,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values14 = this24;
				var max7 = values14[0];
				var _g32 = 0;
				var _g33 = values14.length;
				while(_g32 < _g33) {
					var i15 = _g32++;
					if(values14[i15] > max7) {
						max7 = values14[i15];
					}
				}
				var this25 = [max7,0];
				var values15 = this25;
				var min7 = values15[0];
				var _g34 = 0;
				var _g35 = values15.length;
				while(_g34 < _g35) {
					var i16 = _g34++;
					if(values15[i16] < min7) {
						min7 = values15[i16];
					}
				}
				var y6 = min7;
				if(!(x6 >= 0 && y6 >= 0 && x6 < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x6 = x6;
					var this_y6 = y6;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position6 = (y6 * image.getUInt16(0) + x6) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value6 = image.b[position6] << 24 | image.b[position6 + 1] << 16 | image.b[position6 + 2] << 8 | image.b[position6 + 3];
				if(value6 == null) {
					value6 = 0;
				}
				var this26 = value6;
				pixel3 = this26;
			} else {
				if(!(i >= 0 && y5 >= 0 && i < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x7 = i;
					var this_y7 = y5;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x7,this_y7)));
				}
				var position7 = (y5 * image.getUInt16(0) + i) * 4;
				position7 += vision_ds_Image.OFFSET;
				var value7 = image.b[position7] << 24 | image.b[position7 + 1] << 16 | image.b[position7 + 2] << 8 | image.b[position7 + 3];
				if(value7 == null) {
					value7 = 0;
				}
				var this27 = value7;
				pixel3 = this27;
			}
			var gray3 = ((pixel3 >> 16 & 255) + (pixel3 >> 8 & 255) + (pixel3 & 255)) / 3 | 0;
			var Alpha6 = pixel3 >> 24 & 255;
			if(Alpha6 == null) {
				Alpha6 = 255;
			}
			var this28 = 0;
			var color3 = this28;
			var Alpha7 = Alpha6;
			if(Alpha7 == null) {
				Alpha7 = 255;
			}
			color3 &= -16711681;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 16;
			color3 &= -65281;
			color3 |= (gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3) << 8;
			color3 &= -256;
			color3 |= gray3 > 255 ? 255 : gray3 < 0 ? 0 : gray3;
			color3 &= 16777215;
			color3 |= (Alpha7 > 255 ? 255 : Alpha7 < 0 ? 0 : Alpha7) << 24;
			var pos10 = color3 >> 16 & 255;
			var pixel4;
			if(!(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this29 = [i,image.getUInt16(0)];
				var values16 = this29;
				var max8 = values16[0];
				var _g36 = 0;
				var _g37 = values16.length;
				while(_g36 < _g37) {
					var i17 = _g36++;
					if(values16[i17] > max8) {
						max8 = values16[i17];
					}
				}
				var this30 = [max8,0];
				var values17 = this30;
				var min8 = values17[0];
				var _g38 = 0;
				var _g39 = values17.length;
				while(_g38 < _g39) {
					var i18 = _g38++;
					if(values17[i18] < min8) {
						min8 = values17[i18];
					}
				}
				var x7 = min8;
				var this31 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values18 = this31;
				var max9 = values18[0];
				var _g40 = 0;
				var _g41 = values18.length;
				while(_g40 < _g41) {
					var i19 = _g40++;
					if(values18[i19] > max9) {
						max9 = values18[i19];
					}
				}
				var this32 = [max9,0];
				var values19 = this32;
				var min9 = values19[0];
				var _g42 = 0;
				var _g43 = values19.length;
				while(_g42 < _g43) {
					var i20 = _g42++;
					if(values19[i20] < min9) {
						min9 = values19[i20];
					}
				}
				var y7 = min9;
				if(!(x7 >= 0 && y7 >= 0 && x7 < image.getUInt16(0) && y7 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x8 = x7;
					var this_y8 = y7;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x8,this_y8)));
				}
				var position8 = (y7 * image.getUInt16(0) + x7) * 4;
				position8 += vision_ds_Image.OFFSET;
				var value8 = image.b[position8] << 24 | image.b[position8 + 1] << 16 | image.b[position8 + 2] << 8 | image.b[position8 + 3];
				if(value8 == null) {
					value8 = 0;
				}
				var this33 = value8;
				pixel4 = this33;
			} else {
				if(!(i >= 0 && j >= 0 && i < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x9 = i;
					var this_y9 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x9,this_y9)));
				}
				var position9 = (j * image.getUInt16(0) + i) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value9 = image.b[position9] << 24 | image.b[position9 + 1] << 16 | image.b[position9 + 2] << 8 | image.b[position9 + 3];
				if(value9 == null) {
					value9 = 0;
				}
				var this34 = value9;
				pixel4 = this34;
			}
			var gray4 = ((pixel4 >> 16 & 255) + (pixel4 >> 8 & 255) + (pixel4 & 255)) / 3 | 0;
			var Alpha8 = pixel4 >> 24 & 255;
			if(Alpha8 == null) {
				Alpha8 = 255;
			}
			var this35 = 0;
			var color4 = this35;
			var Alpha9 = Alpha8;
			if(Alpha9 == null) {
				Alpha9 = 255;
			}
			color4 &= -16711681;
			color4 |= (gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4) << 16;
			color4 &= -65281;
			color4 |= (gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4) << 8;
			color4 &= -256;
			color4 |= gray4 > 255 ? 255 : gray4 < 0 ? 0 : gray4;
			color4 &= 16777215;
			color4 |= (Alpha9 > 255 ? 255 : Alpha9 < 0 ? 0 : Alpha9) << 24;
			var pos11 = color4 >> 16 & 255;
			var y8 = j + 1;
			var pixel5;
			if(!(i >= 0 && y8 >= 0 && i < image.getUInt16(0) && y8 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this36 = [i,image.getUInt16(0)];
				var values20 = this36;
				var max10 = values20[0];
				var _g44 = 0;
				var _g45 = values20.length;
				while(_g44 < _g45) {
					var i21 = _g44++;
					if(values20[i21] > max10) {
						max10 = values20[i21];
					}
				}
				var this37 = [max10,0];
				var values21 = this37;
				var min10 = values21[0];
				var _g46 = 0;
				var _g47 = values21.length;
				while(_g46 < _g47) {
					var i22 = _g46++;
					if(values21[i22] < min10) {
						min10 = values21[i22];
					}
				}
				var x8 = min10;
				var this38 = [y8,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values22 = this38;
				var max11 = values22[0];
				var _g48 = 0;
				var _g49 = values22.length;
				while(_g48 < _g49) {
					var i23 = _g48++;
					if(values22[i23] > max11) {
						max11 = values22[i23];
					}
				}
				var this39 = [max11,0];
				var values23 = this39;
				var min11 = values23[0];
				var _g50 = 0;
				var _g51 = values23.length;
				while(_g50 < _g51) {
					var i24 = _g50++;
					if(values23[i24] < min11) {
						min11 = values23[i24];
					}
				}
				var y9 = min11;
				if(!(x8 >= 0 && y9 >= 0 && x8 < image.getUInt16(0) && y9 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x10 = x8;
					var this_y10 = y9;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x10,this_y10)));
				}
				var position10 = (y9 * image.getUInt16(0) + x8) * 4;
				position10 += vision_ds_Image.OFFSET;
				var value10 = image.b[position10] << 24 | image.b[position10 + 1] << 16 | image.b[position10 + 2] << 8 | image.b[position10 + 3];
				if(value10 == null) {
					value10 = 0;
				}
				var this40 = value10;
				pixel5 = this40;
			} else {
				if(!(i >= 0 && y8 >= 0 && i < image.getUInt16(0) && y8 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x11 = i;
					var this_y11 = y8;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x11,this_y11)));
				}
				var position11 = (y8 * image.getUInt16(0) + i) * 4;
				position11 += vision_ds_Image.OFFSET;
				var value11 = image.b[position11] << 24 | image.b[position11 + 1] << 16 | image.b[position11 + 2] << 8 | image.b[position11 + 3];
				if(value11 == null) {
					value11 = 0;
				}
				var this41 = value11;
				pixel5 = this41;
			}
			var gray5 = ((pixel5 >> 16 & 255) + (pixel5 >> 8 & 255) + (pixel5 & 255)) / 3 | 0;
			var Alpha10 = pixel5 >> 24 & 255;
			if(Alpha10 == null) {
				Alpha10 = 255;
			}
			var this42 = 0;
			var color5 = this42;
			var Alpha11 = Alpha10;
			if(Alpha11 == null) {
				Alpha11 = 255;
			}
			color5 &= -16711681;
			color5 |= (gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5) << 16;
			color5 &= -65281;
			color5 |= (gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5) << 8;
			color5 &= -256;
			color5 |= gray5 > 255 ? 255 : gray5 < 0 ? 0 : gray5;
			color5 &= 16777215;
			color5 |= (Alpha11 > 255 ? 255 : Alpha11 < 0 ? 0 : Alpha11) << 24;
			var pos12 = color5 >> 16 & 255;
			var x9 = i + 1;
			var y10 = j - 1;
			var pixel6;
			if(!(x9 >= 0 && y10 >= 0 && x9 < image.getUInt16(0) && y10 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this43 = [x9,image.getUInt16(0)];
				var values24 = this43;
				var max12 = values24[0];
				var _g52 = 0;
				var _g53 = values24.length;
				while(_g52 < _g53) {
					var i25 = _g52++;
					if(values24[i25] > max12) {
						max12 = values24[i25];
					}
				}
				var this44 = [max12,0];
				var values25 = this44;
				var min12 = values25[0];
				var _g54 = 0;
				var _g55 = values25.length;
				while(_g54 < _g55) {
					var i26 = _g54++;
					if(values25[i26] < min12) {
						min12 = values25[i26];
					}
				}
				var x10 = min12;
				var this45 = [y10,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values26 = this45;
				var max13 = values26[0];
				var _g56 = 0;
				var _g57 = values26.length;
				while(_g56 < _g57) {
					var i27 = _g56++;
					if(values26[i27] > max13) {
						max13 = values26[i27];
					}
				}
				var this46 = [max13,0];
				var values27 = this46;
				var min13 = values27[0];
				var _g58 = 0;
				var _g59 = values27.length;
				while(_g58 < _g59) {
					var i28 = _g58++;
					if(values27[i28] < min13) {
						min13 = values27[i28];
					}
				}
				var y11 = min13;
				if(!(x10 >= 0 && y11 >= 0 && x10 < image.getUInt16(0) && y11 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x12 = x10;
					var this_y12 = y11;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x12,this_y12)));
				}
				var position12 = (y11 * image.getUInt16(0) + x10) * 4;
				position12 += vision_ds_Image.OFFSET;
				var value12 = image.b[position12] << 24 | image.b[position12 + 1] << 16 | image.b[position12 + 2] << 8 | image.b[position12 + 3];
				if(value12 == null) {
					value12 = 0;
				}
				var this47 = value12;
				pixel6 = this47;
			} else {
				if(!(x9 >= 0 && y10 >= 0 && x9 < image.getUInt16(0) && y10 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x13 = x9;
					var this_y13 = y10;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x13,this_y13)));
				}
				var position13 = (y10 * image.getUInt16(0) + x9) * 4;
				position13 += vision_ds_Image.OFFSET;
				var value13 = image.b[position13] << 24 | image.b[position13 + 1] << 16 | image.b[position13 + 2] << 8 | image.b[position13 + 3];
				if(value13 == null) {
					value13 = 0;
				}
				var this48 = value13;
				pixel6 = this48;
			}
			var gray6 = ((pixel6 >> 16 & 255) + (pixel6 >> 8 & 255) + (pixel6 & 255)) / 3 | 0;
			var Alpha12 = pixel6 >> 24 & 255;
			if(Alpha12 == null) {
				Alpha12 = 255;
			}
			var this49 = 0;
			var color6 = this49;
			var Alpha13 = Alpha12;
			if(Alpha13 == null) {
				Alpha13 = 255;
			}
			color6 &= -16711681;
			color6 |= (gray6 > 255 ? 255 : gray6 < 0 ? 0 : gray6) << 16;
			color6 &= -65281;
			color6 |= (gray6 > 255 ? 255 : gray6 < 0 ? 0 : gray6) << 8;
			color6 &= -256;
			color6 |= gray6 > 255 ? 255 : gray6 < 0 ? 0 : gray6;
			color6 &= 16777215;
			color6 |= (Alpha13 > 255 ? 255 : Alpha13 < 0 ? 0 : Alpha13) << 24;
			var pos20 = color6 >> 16 & 255;
			var x11 = i + 1;
			var pixel7;
			if(!(x11 >= 0 && j >= 0 && x11 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this50 = [x11,image.getUInt16(0)];
				var values28 = this50;
				var max14 = values28[0];
				var _g60 = 0;
				var _g61 = values28.length;
				while(_g60 < _g61) {
					var i29 = _g60++;
					if(values28[i29] > max14) {
						max14 = values28[i29];
					}
				}
				var this51 = [max14,0];
				var values29 = this51;
				var min14 = values29[0];
				var _g62 = 0;
				var _g63 = values29.length;
				while(_g62 < _g63) {
					var i30 = _g62++;
					if(values29[i30] < min14) {
						min14 = values29[i30];
					}
				}
				var x12 = min14;
				var this52 = [j,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values30 = this52;
				var max15 = values30[0];
				var _g64 = 0;
				var _g65 = values30.length;
				while(_g64 < _g65) {
					var i31 = _g64++;
					if(values30[i31] > max15) {
						max15 = values30[i31];
					}
				}
				var this53 = [max15,0];
				var values31 = this53;
				var min15 = values31[0];
				var _g66 = 0;
				var _g67 = values31.length;
				while(_g66 < _g67) {
					var i32 = _g66++;
					if(values31[i32] < min15) {
						min15 = values31[i32];
					}
				}
				var y12 = min15;
				if(!(x12 >= 0 && y12 >= 0 && x12 < image.getUInt16(0) && y12 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x14 = x12;
					var this_y14 = y12;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x14,this_y14)));
				}
				var position14 = (y12 * image.getUInt16(0) + x12) * 4;
				position14 += vision_ds_Image.OFFSET;
				var value14 = image.b[position14] << 24 | image.b[position14 + 1] << 16 | image.b[position14 + 2] << 8 | image.b[position14 + 3];
				if(value14 == null) {
					value14 = 0;
				}
				var this54 = value14;
				pixel7 = this54;
			} else {
				if(!(x11 >= 0 && j >= 0 && x11 < image.getUInt16(0) && j < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x15 = x11;
					var this_y15 = j;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x15,this_y15)));
				}
				var position15 = (j * image.getUInt16(0) + x11) * 4;
				position15 += vision_ds_Image.OFFSET;
				var value15 = image.b[position15] << 24 | image.b[position15 + 1] << 16 | image.b[position15 + 2] << 8 | image.b[position15 + 3];
				if(value15 == null) {
					value15 = 0;
				}
				var this55 = value15;
				pixel7 = this55;
			}
			var gray7 = ((pixel7 >> 16 & 255) + (pixel7 >> 8 & 255) + (pixel7 & 255)) / 3 | 0;
			var Alpha14 = pixel7 >> 24 & 255;
			if(Alpha14 == null) {
				Alpha14 = 255;
			}
			var this56 = 0;
			var color7 = this56;
			var Alpha15 = Alpha14;
			if(Alpha15 == null) {
				Alpha15 = 255;
			}
			color7 &= -16711681;
			color7 |= (gray7 > 255 ? 255 : gray7 < 0 ? 0 : gray7) << 16;
			color7 &= -65281;
			color7 |= (gray7 > 255 ? 255 : gray7 < 0 ? 0 : gray7) << 8;
			color7 &= -256;
			color7 |= gray7 > 255 ? 255 : gray7 < 0 ? 0 : gray7;
			color7 &= 16777215;
			color7 |= (Alpha15 > 255 ? 255 : Alpha15 < 0 ? 0 : Alpha15) << 24;
			var pos21 = color7 >> 16 & 255;
			var x13 = i + 1;
			var y13 = j + 1;
			var pixel8;
			if(!(x13 >= 0 && y13 >= 0 && x13 < image.getUInt16(0) && y13 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this57 = [x13,image.getUInt16(0)];
				var values32 = this57;
				var max16 = values32[0];
				var _g68 = 0;
				var _g69 = values32.length;
				while(_g68 < _g69) {
					var i33 = _g68++;
					if(values32[i33] > max16) {
						max16 = values32[i33];
					}
				}
				var this58 = [max16,0];
				var values33 = this58;
				var min16 = values33[0];
				var _g70 = 0;
				var _g71 = values33.length;
				while(_g70 < _g71) {
					var i34 = _g70++;
					if(values33[i34] < min16) {
						min16 = values33[i34];
					}
				}
				var x14 = min16;
				var this59 = [y13,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
				var values34 = this59;
				var max17 = values34[0];
				var _g72 = 0;
				var _g73 = values34.length;
				while(_g72 < _g73) {
					var i35 = _g72++;
					if(values34[i35] > max17) {
						max17 = values34[i35];
					}
				}
				var this60 = [max17,0];
				var values35 = this60;
				var min17 = values35[0];
				var _g74 = 0;
				var _g75 = values35.length;
				while(_g74 < _g75) {
					var i36 = _g74++;
					if(values35[i36] < min17) {
						min17 = values35[i36];
					}
				}
				var y14 = min17;
				if(!(x14 >= 0 && y14 >= 0 && x14 < image.getUInt16(0) && y14 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x16 = x14;
					var this_y16 = y14;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x16,this_y16)));
				}
				var position16 = (y14 * image.getUInt16(0) + x14) * 4;
				position16 += vision_ds_Image.OFFSET;
				var value16 = image.b[position16] << 24 | image.b[position16 + 1] << 16 | image.b[position16 + 2] << 8 | image.b[position16 + 3];
				if(value16 == null) {
					value16 = 0;
				}
				var this61 = value16;
				pixel8 = this61;
			} else {
				if(!(x13 >= 0 && y13 >= 0 && x13 < image.getUInt16(0) && y13 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x17 = x13;
					var this_y17 = y13;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x17,this_y17)));
				}
				var position17 = (y13 * image.getUInt16(0) + x13) * 4;
				position17 += vision_ds_Image.OFFSET;
				var value17 = image.b[position17] << 24 | image.b[position17 + 1] << 16 | image.b[position17 + 2] << 8 | image.b[position17 + 3];
				if(value17 == null) {
					value17 = 0;
				}
				var this62 = value17;
				pixel8 = this62;
			}
			var gray8 = ((pixel8 >> 16 & 255) + (pixel8 >> 8 & 255) + (pixel8 & 255)) / 3 | 0;
			var Alpha16 = pixel8 >> 24 & 255;
			if(Alpha16 == null) {
				Alpha16 = 255;
			}
			var this63 = 0;
			var color8 = this63;
			var Alpha17 = Alpha16;
			if(Alpha17 == null) {
				Alpha17 = 255;
			}
			color8 &= -16711681;
			color8 |= (gray8 > 255 ? 255 : gray8 < 0 ? 0 : gray8) << 16;
			color8 &= -65281;
			color8 |= (gray8 > 255 ? 255 : gray8 < 0 ? 0 : gray8) << 8;
			color8 &= -256;
			color8 |= gray8 > 255 ? 255 : gray8 < 0 ? 0 : gray8;
			color8 &= 16777215;
			color8 |= (Alpha17 > 255 ? 255 : Alpha17 < 0 ? 0 : Alpha17) << 24;
			var pos22 = color8 >> 16 & 255;
			var gx = -3 * pos00 + 0 * pos01 + 3 * pos02 + (-10 * pos10 + 0 * pos11 + 10 * pos12) + (-3 * pos20 + 0 * pos21 + 3 * pos22);
			var gy = -3 * pos00 + -10 * pos01 + -3 * pos02 + (0 * pos10 + 0 * pos11 + 0 * pos12) + (3 * pos20 + 10 * pos21 + 3 * pos22);
			var gradientFloatValue = Math.sqrt(gx * gx + gy * gy);
			var gradient = gradientFloatValue | 0;
			if(gradient > maxGradient) {
				maxGradient = gradient;
			}
			var rgb = gradient * (255 / maxGradient) | 0;
			var color9 = -16777216 | rgb << 16 | rgb << 8 | rgb;
			if(!(i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)))) {
				var this_x18 = i;
				var this_y18 = j;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edgeColors,new vision_ds_Point2D(this_x18,this_y18)));
			} else if(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edgeColors.getUInt16(0) || edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4)) || edgeColors.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = i >= 0 && j >= 0 && i < edgeColors.getUInt16(0) && j < Math.ceil((edgeColors.length - vision_ds_Image.OFFSET) / (edgeColors.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g76 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g77 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g78 = edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var edgeColors1 = edgeColors.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g76,_g77,_g78,edgeColors.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edgeColors1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y;
						break;
					case 1:
						has = !(i < view.x + view.width && j < view.y + view.height && i >= view.x && j >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x15 = view.x + view.width / 2 - c;
							var y15 = view.y + view.height / 2;
							if(y15 == null) {
								y15 = 0;
							}
							if(x15 == null) {
								x15 = 0;
							}
							var f1_x = x15;
							var f1_y = y15;
							var x16 = view.x + view.width / 2 + c;
							var y16 = view.y + view.height / 2;
							if(y16 == null) {
								y16 = 0;
							}
							if(x16 == null) {
								x16 = 0;
							}
							var f2_x = x16;
							var f2_y = y16;
							var x17 = i;
							var y17 = j;
							if(y17 == null) {
								y17 = 0;
							}
							if(x17 == null) {
								x17 = 0;
							}
							var p_x = x17;
							var p_y = y17;
							var x18 = p_x - f1_x;
							var y18 = p_y - f1_y;
							var x19 = p_x - f2_x;
							var y19 = p_y - f2_y;
							has = Math.sqrt(x18 * x18 + y18 * y18) + Math.sqrt(x19 * x19 + y19 * y19) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x20 = view.x + view.width / 2;
							var y20 = view.y + view.height / 2 - c1;
							if(y20 == null) {
								y20 = 0;
							}
							if(x20 == null) {
								x20 = 0;
							}
							var f1_x1 = x20;
							var f1_y1 = y20;
							var x21 = view.x + view.width / 2;
							var y21 = view.y + view.height / 2 + c1;
							if(y21 == null) {
								y21 = 0;
							}
							if(x21 == null) {
								x21 = 0;
							}
							var f2_x1 = x21;
							var f2_y1 = y21;
							var x22 = i;
							var y22 = j;
							if(y22 == null) {
								y22 = 0;
							}
							if(x22 == null) {
								x22 = 0;
							}
							var p_x1 = x22;
							var p_y1 = y22;
							var x23 = p_x1 - f1_x1;
							var y23 = p_y1 - f1_y1;
							var x24 = p_x1 - f2_x1;
							var y24 = p_y1 - f2_y1;
							has = Math.sqrt(x23 * x23 + y23 * y23) + Math.sqrt(x24 * x24 + y24 * y24) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x25 = i;
							var y25 = j;
							if(y25 == null) {
								y25 = 0;
							}
							if(x25 == null) {
								x25 = 0;
							}
							var point1_x = x25;
							var point1_y = y25;
							var x26 = view.x + view.width / 2;
							var y26 = view.y + view.height / 2;
							if(y26 == null) {
								y26 = 0;
							}
							if(x26 == null) {
								x26 = 0;
							}
							var point2_x = x26;
							var point2_y = y26;
							var x27 = point2_x - point1_x;
							var y27 = point2_y - point1_y;
							has = Math.sqrt(x27 * x27 + y27 * y27) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(i - view.x - view.width / 2) / (view.width / 2) + Math.abs(j - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position18 = (j * edgeColors.getUInt16(0) + i) * 4;
					position18 += vision_ds_Image.OFFSET;
					edgeColors.b[position18] = color9 >> 24 & 255;
					edgeColors.b[position18 + 1] = color9 >> 16 & 255;
					edgeColors.b[position18 + 2] = color9 >> 8 & 255;
					edgeColors.b[position18 + 3] = color9 & 255;
				}
			} else {
				var position19 = (j * edgeColors.getUInt16(0) + i) * 4;
				position19 += vision_ds_Image.OFFSET;
				edgeColors.b[position19] = color9 >> 24 & 255;
				edgeColors.b[position19 + 1] = color9 >> 16 & 255;
				edgeColors.b[position19 + 2] = color9 >> 8 & 255;
				edgeColors.b[position19 + 3] = color9 & 255;
			}
		}
	}
	return edgeColors;
};
vision_algorithms_Sobel.detectEdges = function(image,threshold) {
	var width = image.getUInt16(0);
	var height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var this1 = 0;
	var color = this1;
	var Alpha = 255;
	if(Alpha == null) {
		Alpha = 255;
	}
	color &= -16711681;
	color |= 0;
	color &= -65281;
	color |= 0;
	color &= -256;
	color |= 0;
	color &= 16777215;
	color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	var color1 = color;
	if(color1 == null) {
		color1 = 0;
	}
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = color1 >> 24 & 255;
		this2.b[i + 1] = color1 >> 16 & 255;
		this2.b[i + 2] = color1 >> 8 & 255;
		this2.b[i + 3] = color1 & 255;
		i += 4;
	}
	var edges = this2;
	var blackAndWhite = vision_Vision.grayscale(vision_ds_Image.clone(image));
	var _g = 0;
	var _g1 = blackAndWhite.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var neighbors_8;
			var neighbors_7;
			var neighbors_6;
			var neighbors_5;
			var neighbors_4;
			var neighbors_3;
			var neighbors_2;
			var neighbors_1;
			var neighbors_0;
			var x1 = x - 1;
			var y1 = y - 1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < blackAndWhite.getUInt16(0) && y1 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this1 = [x1,blackAndWhite.getUInt16(0)];
				var values = this1;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i = _g4++;
					if(values[i] > max) {
						max = values[i];
					}
				}
				var this2 = [max,0];
				var values1 = this2;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i1 = _g6++;
					if(values1[i1] < min) {
						min = values1[i1];
					}
				}
				var x2 = min;
				var this3 = [y1,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values2 = this3;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i2 = _g8++;
					if(values2[i2] > max1) {
						max1 = values2[i2];
					}
				}
				var this4 = [max1,0];
				var values3 = this4;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i3 = _g10++;
					if(values3[i3] < min1) {
						min1 = values3[i3];
					}
				}
				var y2 = min1;
				if(!(x2 >= 0 && y2 >= 0 && x2 < blackAndWhite.getUInt16(0) && y2 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y2 * blackAndWhite.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = blackAndWhite.b[position] << 24 | blackAndWhite.b[position + 1] << 16 | blackAndWhite.b[position + 2] << 8 | blackAndWhite.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this5 = value;
				neighbors_0 = this5;
			} else {
				if(!(x1 >= 0 && y1 >= 0 && x1 < blackAndWhite.getUInt16(0) && y1 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x1 = x1;
					var this_y1 = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y1 * blackAndWhite.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = blackAndWhite.b[position1] << 24 | blackAndWhite.b[position1 + 1] << 16 | blackAndWhite.b[position1 + 2] << 8 | blackAndWhite.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this6 = value1;
				neighbors_0 = this6;
			}
			var y3 = y - 1;
			if(!(x >= 0 && y3 >= 0 && x < blackAndWhite.getUInt16(0) && y3 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this7 = [x,blackAndWhite.getUInt16(0)];
				var values4 = this7;
				var max2 = values4[0];
				var _g12 = 0;
				var _g13 = values4.length;
				while(_g12 < _g13) {
					var i4 = _g12++;
					if(values4[i4] > max2) {
						max2 = values4[i4];
					}
				}
				var this8 = [max2,0];
				var values5 = this8;
				var min2 = values5[0];
				var _g14 = 0;
				var _g15 = values5.length;
				while(_g14 < _g15) {
					var i5 = _g14++;
					if(values5[i5] < min2) {
						min2 = values5[i5];
					}
				}
				var x3 = min2;
				var this9 = [y3,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values6 = this9;
				var max3 = values6[0];
				var _g16 = 0;
				var _g17 = values6.length;
				while(_g16 < _g17) {
					var i6 = _g16++;
					if(values6[i6] > max3) {
						max3 = values6[i6];
					}
				}
				var this10 = [max3,0];
				var values7 = this10;
				var min3 = values7[0];
				var _g18 = 0;
				var _g19 = values7.length;
				while(_g18 < _g19) {
					var i7 = _g18++;
					if(values7[i7] < min3) {
						min3 = values7[i7];
					}
				}
				var y4 = min3;
				if(!(x3 >= 0 && y4 >= 0 && x3 < blackAndWhite.getUInt16(0) && y4 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x2 = x3;
					var this_y2 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position2 = (y4 * blackAndWhite.getUInt16(0) + x3) * 4;
				position2 += vision_ds_Image.OFFSET;
				var value2 = blackAndWhite.b[position2] << 24 | blackAndWhite.b[position2 + 1] << 16 | blackAndWhite.b[position2 + 2] << 8 | blackAndWhite.b[position2 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var this11 = value2;
				neighbors_1 = this11;
			} else {
				if(!(x >= 0 && y3 >= 0 && x < blackAndWhite.getUInt16(0) && y3 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x3 = x;
					var this_y3 = y3;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x3,this_y3)));
				}
				var position3 = (y3 * blackAndWhite.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value3 = blackAndWhite.b[position3] << 24 | blackAndWhite.b[position3 + 1] << 16 | blackAndWhite.b[position3 + 2] << 8 | blackAndWhite.b[position3 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var this12 = value3;
				neighbors_1 = this12;
			}
			var x4 = x + 1;
			var y5 = y - 1;
			if(!(x4 >= 0 && y5 >= 0 && x4 < blackAndWhite.getUInt16(0) && y5 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this13 = [x4,blackAndWhite.getUInt16(0)];
				var values8 = this13;
				var max4 = values8[0];
				var _g20 = 0;
				var _g21 = values8.length;
				while(_g20 < _g21) {
					var i8 = _g20++;
					if(values8[i8] > max4) {
						max4 = values8[i8];
					}
				}
				var this14 = [max4,0];
				var values9 = this14;
				var min4 = values9[0];
				var _g22 = 0;
				var _g23 = values9.length;
				while(_g22 < _g23) {
					var i9 = _g22++;
					if(values9[i9] < min4) {
						min4 = values9[i9];
					}
				}
				var x5 = min4;
				var this15 = [y5,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values10 = this15;
				var max5 = values10[0];
				var _g24 = 0;
				var _g25 = values10.length;
				while(_g24 < _g25) {
					var i10 = _g24++;
					if(values10[i10] > max5) {
						max5 = values10[i10];
					}
				}
				var this16 = [max5,0];
				var values11 = this16;
				var min5 = values11[0];
				var _g26 = 0;
				var _g27 = values11.length;
				while(_g26 < _g27) {
					var i11 = _g26++;
					if(values11[i11] < min5) {
						min5 = values11[i11];
					}
				}
				var y6 = min5;
				if(!(x5 >= 0 && y6 >= 0 && x5 < blackAndWhite.getUInt16(0) && y6 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x4 = x5;
					var this_y4 = y6;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position4 = (y6 * blackAndWhite.getUInt16(0) + x5) * 4;
				position4 += vision_ds_Image.OFFSET;
				var value4 = blackAndWhite.b[position4] << 24 | blackAndWhite.b[position4 + 1] << 16 | blackAndWhite.b[position4 + 2] << 8 | blackAndWhite.b[position4 + 3];
				if(value4 == null) {
					value4 = 0;
				}
				var this17 = value4;
				neighbors_2 = this17;
			} else {
				if(!(x4 >= 0 && y5 >= 0 && x4 < blackAndWhite.getUInt16(0) && y5 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x5 = x4;
					var this_y5 = y5;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x5,this_y5)));
				}
				var position5 = (y5 * blackAndWhite.getUInt16(0) + x4) * 4;
				position5 += vision_ds_Image.OFFSET;
				var value5 = blackAndWhite.b[position5] << 24 | blackAndWhite.b[position5 + 1] << 16 | blackAndWhite.b[position5 + 2] << 8 | blackAndWhite.b[position5 + 3];
				if(value5 == null) {
					value5 = 0;
				}
				var this18 = value5;
				neighbors_2 = this18;
			}
			var x6 = x - 1;
			if(!(x6 >= 0 && y >= 0 && x6 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this19 = [x6,blackAndWhite.getUInt16(0)];
				var values12 = this19;
				var max6 = values12[0];
				var _g28 = 0;
				var _g29 = values12.length;
				while(_g28 < _g29) {
					var i12 = _g28++;
					if(values12[i12] > max6) {
						max6 = values12[i12];
					}
				}
				var this20 = [max6,0];
				var values13 = this20;
				var min6 = values13[0];
				var _g30 = 0;
				var _g31 = values13.length;
				while(_g30 < _g31) {
					var i13 = _g30++;
					if(values13[i13] < min6) {
						min6 = values13[i13];
					}
				}
				var x7 = min6;
				var this21 = [y,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values14 = this21;
				var max7 = values14[0];
				var _g32 = 0;
				var _g33 = values14.length;
				while(_g32 < _g33) {
					var i14 = _g32++;
					if(values14[i14] > max7) {
						max7 = values14[i14];
					}
				}
				var this22 = [max7,0];
				var values15 = this22;
				var min7 = values15[0];
				var _g34 = 0;
				var _g35 = values15.length;
				while(_g34 < _g35) {
					var i15 = _g34++;
					if(values15[i15] < min7) {
						min7 = values15[i15];
					}
				}
				var y7 = min7;
				if(!(x7 >= 0 && y7 >= 0 && x7 < blackAndWhite.getUInt16(0) && y7 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x6 = x7;
					var this_y6 = y7;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position6 = (y7 * blackAndWhite.getUInt16(0) + x7) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value6 = blackAndWhite.b[position6] << 24 | blackAndWhite.b[position6 + 1] << 16 | blackAndWhite.b[position6 + 2] << 8 | blackAndWhite.b[position6 + 3];
				if(value6 == null) {
					value6 = 0;
				}
				var this23 = value6;
				neighbors_3 = this23;
			} else {
				if(!(x6 >= 0 && y >= 0 && x6 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x7 = x6;
					var this_y7 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x7,this_y7)));
				}
				var position7 = (y * blackAndWhite.getUInt16(0) + x6) * 4;
				position7 += vision_ds_Image.OFFSET;
				var value7 = blackAndWhite.b[position7] << 24 | blackAndWhite.b[position7 + 1] << 16 | blackAndWhite.b[position7 + 2] << 8 | blackAndWhite.b[position7 + 3];
				if(value7 == null) {
					value7 = 0;
				}
				var this24 = value7;
				neighbors_3 = this24;
			}
			if(!(x >= 0 && y >= 0 && x < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this25 = [x,blackAndWhite.getUInt16(0)];
				var values16 = this25;
				var max8 = values16[0];
				var _g36 = 0;
				var _g37 = values16.length;
				while(_g36 < _g37) {
					var i16 = _g36++;
					if(values16[i16] > max8) {
						max8 = values16[i16];
					}
				}
				var this26 = [max8,0];
				var values17 = this26;
				var min8 = values17[0];
				var _g38 = 0;
				var _g39 = values17.length;
				while(_g38 < _g39) {
					var i17 = _g38++;
					if(values17[i17] < min8) {
						min8 = values17[i17];
					}
				}
				var x8 = min8;
				var this27 = [y,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values18 = this27;
				var max9 = values18[0];
				var _g40 = 0;
				var _g41 = values18.length;
				while(_g40 < _g41) {
					var i18 = _g40++;
					if(values18[i18] > max9) {
						max9 = values18[i18];
					}
				}
				var this28 = [max9,0];
				var values19 = this28;
				var min9 = values19[0];
				var _g42 = 0;
				var _g43 = values19.length;
				while(_g42 < _g43) {
					var i19 = _g42++;
					if(values19[i19] < min9) {
						min9 = values19[i19];
					}
				}
				var y8 = min9;
				if(!(x8 >= 0 && y8 >= 0 && x8 < blackAndWhite.getUInt16(0) && y8 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x8 = x8;
					var this_y8 = y8;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x8,this_y8)));
				}
				var position8 = (y8 * blackAndWhite.getUInt16(0) + x8) * 4;
				position8 += vision_ds_Image.OFFSET;
				var value8 = blackAndWhite.b[position8] << 24 | blackAndWhite.b[position8 + 1] << 16 | blackAndWhite.b[position8 + 2] << 8 | blackAndWhite.b[position8 + 3];
				if(value8 == null) {
					value8 = 0;
				}
				var this29 = value8;
				neighbors_4 = this29;
			} else {
				if(!(x >= 0 && y >= 0 && x < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x9 = x;
					var this_y9 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x9,this_y9)));
				}
				var position9 = (y * blackAndWhite.getUInt16(0) + x) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value9 = blackAndWhite.b[position9] << 24 | blackAndWhite.b[position9 + 1] << 16 | blackAndWhite.b[position9 + 2] << 8 | blackAndWhite.b[position9 + 3];
				if(value9 == null) {
					value9 = 0;
				}
				var this30 = value9;
				neighbors_4 = this30;
			}
			var x9 = x + 1;
			if(!(x9 >= 0 && y >= 0 && x9 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this31 = [x9,blackAndWhite.getUInt16(0)];
				var values20 = this31;
				var max10 = values20[0];
				var _g44 = 0;
				var _g45 = values20.length;
				while(_g44 < _g45) {
					var i20 = _g44++;
					if(values20[i20] > max10) {
						max10 = values20[i20];
					}
				}
				var this32 = [max10,0];
				var values21 = this32;
				var min10 = values21[0];
				var _g46 = 0;
				var _g47 = values21.length;
				while(_g46 < _g47) {
					var i21 = _g46++;
					if(values21[i21] < min10) {
						min10 = values21[i21];
					}
				}
				var x10 = min10;
				var this33 = [y,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values22 = this33;
				var max11 = values22[0];
				var _g48 = 0;
				var _g49 = values22.length;
				while(_g48 < _g49) {
					var i22 = _g48++;
					if(values22[i22] > max11) {
						max11 = values22[i22];
					}
				}
				var this34 = [max11,0];
				var values23 = this34;
				var min11 = values23[0];
				var _g50 = 0;
				var _g51 = values23.length;
				while(_g50 < _g51) {
					var i23 = _g50++;
					if(values23[i23] < min11) {
						min11 = values23[i23];
					}
				}
				var y9 = min11;
				if(!(x10 >= 0 && y9 >= 0 && x10 < blackAndWhite.getUInt16(0) && y9 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x10 = x10;
					var this_y10 = y9;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x10,this_y10)));
				}
				var position10 = (y9 * blackAndWhite.getUInt16(0) + x10) * 4;
				position10 += vision_ds_Image.OFFSET;
				var value10 = blackAndWhite.b[position10] << 24 | blackAndWhite.b[position10 + 1] << 16 | blackAndWhite.b[position10 + 2] << 8 | blackAndWhite.b[position10 + 3];
				if(value10 == null) {
					value10 = 0;
				}
				var this35 = value10;
				neighbors_5 = this35;
			} else {
				if(!(x9 >= 0 && y >= 0 && x9 < blackAndWhite.getUInt16(0) && y < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x11 = x9;
					var this_y11 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x11,this_y11)));
				}
				var position11 = (y * blackAndWhite.getUInt16(0) + x9) * 4;
				position11 += vision_ds_Image.OFFSET;
				var value11 = blackAndWhite.b[position11] << 24 | blackAndWhite.b[position11 + 1] << 16 | blackAndWhite.b[position11 + 2] << 8 | blackAndWhite.b[position11 + 3];
				if(value11 == null) {
					value11 = 0;
				}
				var this36 = value11;
				neighbors_5 = this36;
			}
			var x11 = x - 1;
			var y10 = y + 1;
			if(!(x11 >= 0 && y10 >= 0 && x11 < blackAndWhite.getUInt16(0) && y10 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this37 = [x11,blackAndWhite.getUInt16(0)];
				var values24 = this37;
				var max12 = values24[0];
				var _g52 = 0;
				var _g53 = values24.length;
				while(_g52 < _g53) {
					var i24 = _g52++;
					if(values24[i24] > max12) {
						max12 = values24[i24];
					}
				}
				var this38 = [max12,0];
				var values25 = this38;
				var min12 = values25[0];
				var _g54 = 0;
				var _g55 = values25.length;
				while(_g54 < _g55) {
					var i25 = _g54++;
					if(values25[i25] < min12) {
						min12 = values25[i25];
					}
				}
				var x12 = min12;
				var this39 = [y10,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values26 = this39;
				var max13 = values26[0];
				var _g56 = 0;
				var _g57 = values26.length;
				while(_g56 < _g57) {
					var i26 = _g56++;
					if(values26[i26] > max13) {
						max13 = values26[i26];
					}
				}
				var this40 = [max13,0];
				var values27 = this40;
				var min13 = values27[0];
				var _g58 = 0;
				var _g59 = values27.length;
				while(_g58 < _g59) {
					var i27 = _g58++;
					if(values27[i27] < min13) {
						min13 = values27[i27];
					}
				}
				var y11 = min13;
				if(!(x12 >= 0 && y11 >= 0 && x12 < blackAndWhite.getUInt16(0) && y11 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x12 = x12;
					var this_y12 = y11;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x12,this_y12)));
				}
				var position12 = (y11 * blackAndWhite.getUInt16(0) + x12) * 4;
				position12 += vision_ds_Image.OFFSET;
				var value12 = blackAndWhite.b[position12] << 24 | blackAndWhite.b[position12 + 1] << 16 | blackAndWhite.b[position12 + 2] << 8 | blackAndWhite.b[position12 + 3];
				if(value12 == null) {
					value12 = 0;
				}
				var this41 = value12;
				neighbors_6 = this41;
			} else {
				if(!(x11 >= 0 && y10 >= 0 && x11 < blackAndWhite.getUInt16(0) && y10 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x13 = x11;
					var this_y13 = y10;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x13,this_y13)));
				}
				var position13 = (y10 * blackAndWhite.getUInt16(0) + x11) * 4;
				position13 += vision_ds_Image.OFFSET;
				var value13 = blackAndWhite.b[position13] << 24 | blackAndWhite.b[position13 + 1] << 16 | blackAndWhite.b[position13 + 2] << 8 | blackAndWhite.b[position13 + 3];
				if(value13 == null) {
					value13 = 0;
				}
				var this42 = value13;
				neighbors_6 = this42;
			}
			var y12 = y + 1;
			if(!(x >= 0 && y12 >= 0 && x < blackAndWhite.getUInt16(0) && y12 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this43 = [x,blackAndWhite.getUInt16(0)];
				var values28 = this43;
				var max14 = values28[0];
				var _g60 = 0;
				var _g61 = values28.length;
				while(_g60 < _g61) {
					var i28 = _g60++;
					if(values28[i28] > max14) {
						max14 = values28[i28];
					}
				}
				var this44 = [max14,0];
				var values29 = this44;
				var min14 = values29[0];
				var _g62 = 0;
				var _g63 = values29.length;
				while(_g62 < _g63) {
					var i29 = _g62++;
					if(values29[i29] < min14) {
						min14 = values29[i29];
					}
				}
				var x13 = min14;
				var this45 = [y12,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values30 = this45;
				var max15 = values30[0];
				var _g64 = 0;
				var _g65 = values30.length;
				while(_g64 < _g65) {
					var i30 = _g64++;
					if(values30[i30] > max15) {
						max15 = values30[i30];
					}
				}
				var this46 = [max15,0];
				var values31 = this46;
				var min15 = values31[0];
				var _g66 = 0;
				var _g67 = values31.length;
				while(_g66 < _g67) {
					var i31 = _g66++;
					if(values31[i31] < min15) {
						min15 = values31[i31];
					}
				}
				var y13 = min15;
				if(!(x13 >= 0 && y13 >= 0 && x13 < blackAndWhite.getUInt16(0) && y13 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x14 = x13;
					var this_y14 = y13;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x14,this_y14)));
				}
				var position14 = (y13 * blackAndWhite.getUInt16(0) + x13) * 4;
				position14 += vision_ds_Image.OFFSET;
				var value14 = blackAndWhite.b[position14] << 24 | blackAndWhite.b[position14 + 1] << 16 | blackAndWhite.b[position14 + 2] << 8 | blackAndWhite.b[position14 + 3];
				if(value14 == null) {
					value14 = 0;
				}
				var this47 = value14;
				neighbors_7 = this47;
			} else {
				if(!(x >= 0 && y12 >= 0 && x < blackAndWhite.getUInt16(0) && y12 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x15 = x;
					var this_y15 = y12;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x15,this_y15)));
				}
				var position15 = (y12 * blackAndWhite.getUInt16(0) + x) * 4;
				position15 += vision_ds_Image.OFFSET;
				var value15 = blackAndWhite.b[position15] << 24 | blackAndWhite.b[position15 + 1] << 16 | blackAndWhite.b[position15 + 2] << 8 | blackAndWhite.b[position15 + 3];
				if(value15 == null) {
					value15 = 0;
				}
				var this48 = value15;
				neighbors_7 = this48;
			}
			var x14 = x + 1;
			var y14 = y + 1;
			if(!(x14 >= 0 && y14 >= 0 && x14 < blackAndWhite.getUInt16(0) && y14 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
				var this49 = [x14,blackAndWhite.getUInt16(0)];
				var values32 = this49;
				var max16 = values32[0];
				var _g68 = 0;
				var _g69 = values32.length;
				while(_g68 < _g69) {
					var i32 = _g68++;
					if(values32[i32] > max16) {
						max16 = values32[i32];
					}
				}
				var this50 = [max16,0];
				var values33 = this50;
				var min16 = values33[0];
				var _g70 = 0;
				var _g71 = values33.length;
				while(_g70 < _g71) {
					var i33 = _g70++;
					if(values33[i33] < min16) {
						min16 = values33[i33];
					}
				}
				var x15 = min16;
				var this51 = [y14,Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4))];
				var values34 = this51;
				var max17 = values34[0];
				var _g72 = 0;
				var _g73 = values34.length;
				while(_g72 < _g73) {
					var i34 = _g72++;
					if(values34[i34] > max17) {
						max17 = values34[i34];
					}
				}
				var this52 = [max17,0];
				var values35 = this52;
				var min17 = values35[0];
				var _g74 = 0;
				var _g75 = values35.length;
				while(_g74 < _g75) {
					var i35 = _g74++;
					if(values35[i35] < min17) {
						min17 = values35[i35];
					}
				}
				var y15 = min17;
				if(!(x15 >= 0 && y15 >= 0 && x15 < blackAndWhite.getUInt16(0) && y15 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x16 = x15;
					var this_y16 = y15;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x16,this_y16)));
				}
				var position16 = (y15 * blackAndWhite.getUInt16(0) + x15) * 4;
				position16 += vision_ds_Image.OFFSET;
				var value16 = blackAndWhite.b[position16] << 24 | blackAndWhite.b[position16 + 1] << 16 | blackAndWhite.b[position16 + 2] << 8 | blackAndWhite.b[position16 + 3];
				if(value16 == null) {
					value16 = 0;
				}
				var this53 = value16;
				neighbors_8 = this53;
			} else {
				if(!(x14 >= 0 && y14 >= 0 && x14 < blackAndWhite.getUInt16(0) && y14 < Math.ceil((blackAndWhite.length - vision_ds_Image.OFFSET) / (blackAndWhite.getUInt16(0) * 4)))) {
					var this_x17 = x14;
					var this_y17 = y14;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(blackAndWhite,new vision_ds_Point2D(this_x17,this_y17)));
				}
				var position17 = (y14 * blackAndWhite.getUInt16(0) + x14) * 4;
				position17 += vision_ds_Image.OFFSET;
				var value17 = blackAndWhite.b[position17] << 24 | blackAndWhite.b[position17 + 1] << 16 | blackAndWhite.b[position17 + 2] << 8 | blackAndWhite.b[position17 + 3];
				if(value17 == null) {
					value17 = 0;
				}
				var this54 = value17;
				neighbors_8 = this54;
			}
			var sobelCalculationIterationLTR = (neighbors_0 >> 16 & 255) * -3 + (neighbors_3 >> 16 & 255) * -10 + (neighbors_6 >> 16 & 255) * -3 + (neighbors_2 >> 16 & 255) * 3 + (neighbors_5 >> 16 & 255) * 10 + (neighbors_8 >> 16 & 255) * 3;
			if(Math.abs(sobelCalculationIterationLTR) > threshold) {
				var this55 = 0;
				var color = this55;
				var Alpha = 255;
				if(Alpha == null) {
					Alpha = 255;
				}
				color &= -16711681;
				color |= 16711680;
				color &= -65281;
				color |= 65280;
				color &= -256;
				color |= 255;
				color &= 16777215;
				color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
				var color1 = color;
				if(!(x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)))) {
					var this_x18 = x;
					var this_y18 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edges,new vision_ds_Point2D(this_x18,this_y18)));
				} else if(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g76 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g77 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g78 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var edges1 = edges.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g76,_g77,_g78,edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edges1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x16 = view.x + view.width / 2 - c;
								var y16 = view.y + view.height / 2;
								if(y16 == null) {
									y16 = 0;
								}
								if(x16 == null) {
									x16 = 0;
								}
								var f1_x = x16;
								var f1_y = y16;
								var x17 = view.x + view.width / 2 + c;
								var y17 = view.y + view.height / 2;
								if(y17 == null) {
									y17 = 0;
								}
								if(x17 == null) {
									x17 = 0;
								}
								var f2_x = x17;
								var f2_y = y17;
								var x18 = x;
								var y18 = y;
								if(y18 == null) {
									y18 = 0;
								}
								if(x18 == null) {
									x18 = 0;
								}
								var p_x = x18;
								var p_y = y18;
								var x19 = p_x - f1_x;
								var y19 = p_y - f1_y;
								var x20 = p_x - f2_x;
								var y20 = p_y - f2_y;
								has = Math.sqrt(x19 * x19 + y19 * y19) + Math.sqrt(x20 * x20 + y20 * y20) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x21 = view.x + view.width / 2;
								var y21 = view.y + view.height / 2 - c1;
								if(y21 == null) {
									y21 = 0;
								}
								if(x21 == null) {
									x21 = 0;
								}
								var f1_x1 = x21;
								var f1_y1 = y21;
								var x22 = view.x + view.width / 2;
								var y22 = view.y + view.height / 2 + c1;
								if(y22 == null) {
									y22 = 0;
								}
								if(x22 == null) {
									x22 = 0;
								}
								var f2_x1 = x22;
								var f2_y1 = y22;
								var x23 = x;
								var y23 = y;
								if(y23 == null) {
									y23 = 0;
								}
								if(x23 == null) {
									x23 = 0;
								}
								var p_x1 = x23;
								var p_y1 = y23;
								var x24 = p_x1 - f1_x1;
								var y24 = p_y1 - f1_y1;
								var x25 = p_x1 - f2_x1;
								var y25 = p_y1 - f2_y1;
								has = Math.sqrt(x24 * x24 + y24 * y24) + Math.sqrt(x25 * x25 + y25 * y25) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x26 = x;
								var y26 = y;
								if(y26 == null) {
									y26 = 0;
								}
								if(x26 == null) {
									x26 = 0;
								}
								var point1_x = x26;
								var point1_y = y26;
								var x27 = view.x + view.width / 2;
								var y27 = view.y + view.height / 2;
								if(y27 == null) {
									y27 = 0;
								}
								if(x27 == null) {
									x27 = 0;
								}
								var point2_x = x27;
								var point2_y = y27;
								var x28 = point2_x - point1_x;
								var y28 = point2_y - point1_y;
								has = Math.sqrt(x28 * x28 + y28 * y28) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position18 = (y * edges.getUInt16(0) + x) * 4;
						position18 += vision_ds_Image.OFFSET;
						edges.b[position18] = color1 >> 24 & 255;
						edges.b[position18 + 1] = color1 >> 16 & 255;
						edges.b[position18 + 2] = color1 >> 8 & 255;
						edges.b[position18 + 3] = color1 & 255;
					}
				} else {
					var position19 = (y * edges.getUInt16(0) + x) * 4;
					position19 += vision_ds_Image.OFFSET;
					edges.b[position19] = color1 >> 24 & 255;
					edges.b[position19 + 1] = color1 >> 16 & 255;
					edges.b[position19 + 2] = color1 >> 8 & 255;
					edges.b[position19 + 3] = color1 & 255;
				}
				continue;
			}
			var sobelCalculationIterationTTB = (neighbors_0 >> 16 & 255) * -3 + (neighbors_1 >> 16 & 255) * -10 + (neighbors_2 >> 16 & 255) * -3 + (neighbors_6 >> 16 & 255) * 3 + (neighbors_7 >> 16 & 255) * 10 + (neighbors_8 >> 16 & 255) * 3;
			if(Math.abs(sobelCalculationIterationTTB) > threshold) {
				var this56 = 0;
				var color2 = this56;
				var Alpha1 = 255;
				if(Alpha1 == null) {
					Alpha1 = 255;
				}
				color2 &= -16711681;
				color2 |= 16711680;
				color2 &= -65281;
				color2 |= 65280;
				color2 &= -256;
				color2 |= 255;
				color2 &= 16777215;
				color2 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
				var color3 = color2;
				if(!(x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)))) {
					var this_x19 = x;
					var this_y19 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edges,new vision_ds_Point2D(this_x19,this_y19)));
				} else if(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v1 = null;
					var tmp1;
					if(!(edges.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != edges.getUInt16(0) || edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)) || edges.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
						tmp1 = x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4));
					} else {
						var has1 = false;
						var view2;
						if(v1 != null) {
							view2 = v1;
						} else {
							var _g79 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g80 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g81 = edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var edges2 = edges.b;
							var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view2 = new vision_ds_ImageView(_g79,_g80,_g81,edges.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),edges2[view3]);
						}
						switch(view2.shape) {
						case 0:
							has1 = x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y;
							break;
						case 1:
							has1 = !(x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y);
							break;
						case 2:case 3:
							if(view2.width > view2.height) {
								var a2 = view2.width / 2;
								var b2 = view2.height / 2;
								var c2 = Math.sqrt(a2 * a2 - b2 * b2);
								var x29 = view2.x + view2.width / 2 - c2;
								var y29 = view2.y + view2.height / 2;
								if(y29 == null) {
									y29 = 0;
								}
								if(x29 == null) {
									x29 = 0;
								}
								var f1_x2 = x29;
								var f1_y2 = y29;
								var x30 = view2.x + view2.width / 2 + c2;
								var y30 = view2.y + view2.height / 2;
								if(y30 == null) {
									y30 = 0;
								}
								if(x30 == null) {
									x30 = 0;
								}
								var f2_x2 = x30;
								var f2_y2 = y30;
								var x31 = x;
								var y31 = y;
								if(y31 == null) {
									y31 = 0;
								}
								if(x31 == null) {
									x31 = 0;
								}
								var p_x2 = x31;
								var p_y2 = y31;
								var x32 = p_x2 - f1_x2;
								var y32 = p_y2 - f1_y2;
								var x33 = p_x2 - f2_x2;
								var y33 = p_y2 - f2_y2;
								has1 = Math.sqrt(x32 * x32 + y32 * y32) + Math.sqrt(x33 * x33 + y33 * y33) <= view2.width;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else if(view2.height > view2.width) {
								var a3 = view2.height / 2;
								var b3 = view2.width / 2;
								var c3 = Math.sqrt(a3 * a3 - b3 * b3);
								var x34 = view2.x + view2.width / 2;
								var y34 = view2.y + view2.height / 2 - c3;
								if(y34 == null) {
									y34 = 0;
								}
								if(x34 == null) {
									x34 = 0;
								}
								var f1_x3 = x34;
								var f1_y3 = y34;
								var x35 = view2.x + view2.width / 2;
								var y35 = view2.y + view2.height / 2 + c3;
								if(y35 == null) {
									y35 = 0;
								}
								if(x35 == null) {
									x35 = 0;
								}
								var f2_x3 = x35;
								var f2_y3 = y35;
								var x36 = x;
								var y36 = y;
								if(y36 == null) {
									y36 = 0;
								}
								if(x36 == null) {
									x36 = 0;
								}
								var p_x3 = x36;
								var p_y3 = y36;
								var x37 = p_x3 - f1_x3;
								var y37 = p_y3 - f1_y3;
								var x38 = p_x3 - f2_x3;
								var y38 = p_y3 - f2_y3;
								has1 = Math.sqrt(x37 * x37 + y37 * y37) + Math.sqrt(x38 * x38 + y38 * y38) <= view2.height;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else {
								var x39 = x;
								var y39 = y;
								if(y39 == null) {
									y39 = 0;
								}
								if(x39 == null) {
									x39 = 0;
								}
								var point1_x1 = x39;
								var point1_y1 = y39;
								var x40 = view2.x + view2.width / 2;
								var y40 = view2.y + view2.height / 2;
								if(y40 == null) {
									y40 = 0;
								}
								if(x40 == null) {
									x40 = 0;
								}
								var point2_x1 = x40;
								var point2_y1 = y40;
								var x41 = point2_x1 - point1_x1;
								var y41 = point2_y1 - point1_y1;
								has1 = Math.sqrt(x41 * x41 + y41 * y41) <= view2.width / 2;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							}
							break;
						case 4:
							has1 = Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
							break;
						case 5:
							has1 = !(Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
							break;
						}
						tmp1 = has1;
					}
					if(tmp1) {
						var position20 = (y * edges.getUInt16(0) + x) * 4;
						position20 += vision_ds_Image.OFFSET;
						edges.b[position20] = color3 >> 24 & 255;
						edges.b[position20 + 1] = color3 >> 16 & 255;
						edges.b[position20 + 2] = color3 >> 8 & 255;
						edges.b[position20 + 3] = color3 & 255;
					}
				} else {
					var position21 = (y * edges.getUInt16(0) + x) * 4;
					position21 += vision_ds_Image.OFFSET;
					edges.b[position21] = color3 >> 24 & 255;
					edges.b[position21 + 1] = color3 >> 16 & 255;
					edges.b[position21 + 2] = color3 >> 8 & 255;
					edges.b[position21 + 3] = color3 & 255;
				}
				continue;
			}
		}
	}
	var intermediate = vision_ds_Image.clone(edges);
	var _g = 0;
	var _g1 = intermediate.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var this1;
			if(!(x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)))) {
				var this2 = [x,edges.getUInt16(0)];
				var values = this2;
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i = _g4++;
					if(values[i] > max) {
						max = values[i];
					}
				}
				var this3 = [max,0];
				var values1 = this3;
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i1 = _g6++;
					if(values1[i1] < min) {
						min = values1[i1];
					}
				}
				var x1 = min;
				var this4 = [y,Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4))];
				var values2 = this4;
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i2 = _g8++;
					if(values2[i2] > max1) {
						max1 = values2[i2];
					}
				}
				var this5 = [max1,0];
				var values3 = this5;
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i3 = _g10++;
					if(values3[i3] < min1) {
						min1 = values3[i3];
					}
				}
				var y1 = min1;
				if(!(x1 >= 0 && y1 >= 0 && x1 < edges.getUInt16(0) && y1 < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edges,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y1 * edges.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				var value = edges.b[position] << 24 | edges.b[position + 1] << 16 | edges.b[position + 2] << 8 | edges.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this6 = value;
				this1 = this6;
			} else {
				if(!(x >= 0 && y >= 0 && x < edges.getUInt16(0) && y < Math.ceil((edges.length - vision_ds_Image.OFFSET) / (edges.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(edges,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y * edges.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = edges.b[position1] << 24 | edges.b[position1 + 1] << 16 | edges.b[position1 + 2] << 8 | edges.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this7 = value1;
				this1 = this7;
			}
			if((this1 >> 16 & 255) == 0) {
				var candidate = false;
				var X = false;
				var Y = false;
				var tmp;
				var x2 = x + 1;
				var this8;
				if(!(x2 >= 0 && y >= 0 && x2 < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this9 = [x2,image.getUInt16(0)];
					var values4 = this9;
					var max2 = values4[0];
					var _g12 = 0;
					var _g13 = values4.length;
					while(_g12 < _g13) {
						var i4 = _g12++;
						if(values4[i4] > max2) {
							max2 = values4[i4];
						}
					}
					var this10 = [max2,0];
					var values5 = this10;
					var min2 = values5[0];
					var _g14 = 0;
					var _g15 = values5.length;
					while(_g14 < _g15) {
						var i5 = _g14++;
						if(values5[i5] < min2) {
							min2 = values5[i5];
						}
					}
					var x3 = min2;
					var this11 = [y,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
					var values6 = this11;
					var max3 = values6[0];
					var _g16 = 0;
					var _g17 = values6.length;
					while(_g16 < _g17) {
						var i6 = _g16++;
						if(values6[i6] > max3) {
							max3 = values6[i6];
						}
					}
					var this12 = [max3,0];
					var values7 = this12;
					var min3 = values7[0];
					var _g18 = 0;
					var _g19 = values7.length;
					while(_g18 < _g19) {
						var i7 = _g18++;
						if(values7[i7] < min3) {
							min3 = values7[i7];
						}
					}
					var y2 = min3;
					if(!(x3 >= 0 && y2 >= 0 && x3 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this_x2 = x3;
						var this_y2 = y2;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x2,this_y2)));
					}
					var position2 = (y2 * image.getUInt16(0) + x3) * 4;
					position2 += vision_ds_Image.OFFSET;
					var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
					if(value2 == null) {
						value2 = 0;
					}
					var this13 = value2;
					this8 = this13;
				} else {
					if(!(x2 >= 0 && y >= 0 && x2 < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this_x3 = x2;
						var this_y3 = y;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x3,this_y3)));
					}
					var position3 = (y * image.getUInt16(0) + x2) * 4;
					position3 += vision_ds_Image.OFFSET;
					var value3 = image.b[position3] << 24 | image.b[position3 + 1] << 16 | image.b[position3 + 2] << 8 | image.b[position3 + 3];
					if(value3 == null) {
						value3 = 0;
					}
					var this14 = value3;
					this8 = this14;
				}
				if((this8 >> 16 & 255) == 255) {
					var x4 = x - 1;
					var this15;
					if(!(x4 >= 0 && y >= 0 && x4 < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this16 = [x4,image.getUInt16(0)];
						var values8 = this16;
						var max4 = values8[0];
						var _g20 = 0;
						var _g21 = values8.length;
						while(_g20 < _g21) {
							var i8 = _g20++;
							if(values8[i8] > max4) {
								max4 = values8[i8];
							}
						}
						var this17 = [max4,0];
						var values9 = this17;
						var min4 = values9[0];
						var _g22 = 0;
						var _g23 = values9.length;
						while(_g22 < _g23) {
							var i9 = _g22++;
							if(values9[i9] < min4) {
								min4 = values9[i9];
							}
						}
						var x5 = min4;
						var this18 = [y,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
						var values10 = this18;
						var max5 = values10[0];
						var _g24 = 0;
						var _g25 = values10.length;
						while(_g24 < _g25) {
							var i10 = _g24++;
							if(values10[i10] > max5) {
								max5 = values10[i10];
							}
						}
						var this19 = [max5,0];
						var values11 = this19;
						var min5 = values11[0];
						var _g26 = 0;
						var _g27 = values11.length;
						while(_g26 < _g27) {
							var i11 = _g26++;
							if(values11[i11] < min5) {
								min5 = values11[i11];
							}
						}
						var y3 = min5;
						if(!(x5 >= 0 && y3 >= 0 && x5 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
							var this_x4 = x5;
							var this_y4 = y3;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x4,this_y4)));
						}
						var position4 = (y3 * image.getUInt16(0) + x5) * 4;
						position4 += vision_ds_Image.OFFSET;
						var value4 = image.b[position4] << 24 | image.b[position4 + 1] << 16 | image.b[position4 + 2] << 8 | image.b[position4 + 3];
						if(value4 == null) {
							value4 = 0;
						}
						var this20 = value4;
						this15 = this20;
					} else {
						if(!(x4 >= 0 && y >= 0 && x4 < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
							var this_x5 = x4;
							var this_y5 = y;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x5,this_y5)));
						}
						var position5 = (y * image.getUInt16(0) + x4) * 4;
						position5 += vision_ds_Image.OFFSET;
						var value5 = image.b[position5] << 24 | image.b[position5 + 1] << 16 | image.b[position5 + 2] << 8 | image.b[position5 + 3];
						if(value5 == null) {
							value5 = 0;
						}
						var this21 = value5;
						this15 = this21;
					}
					tmp = (this15 >> 16 & 255) == 255;
				} else {
					tmp = false;
				}
				if(tmp) {
					candidate = true;
					X = true;
				}
				var tmp1;
				var y4 = y + 1;
				var this22;
				if(!(x >= 0 && y4 >= 0 && x < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this23 = [x,image.getUInt16(0)];
					var values12 = this23;
					var max6 = values12[0];
					var _g28 = 0;
					var _g29 = values12.length;
					while(_g28 < _g29) {
						var i12 = _g28++;
						if(values12[i12] > max6) {
							max6 = values12[i12];
						}
					}
					var this24 = [max6,0];
					var values13 = this24;
					var min6 = values13[0];
					var _g30 = 0;
					var _g31 = values13.length;
					while(_g30 < _g31) {
						var i13 = _g30++;
						if(values13[i13] < min6) {
							min6 = values13[i13];
						}
					}
					var x6 = min6;
					var this25 = [y4,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
					var values14 = this25;
					var max7 = values14[0];
					var _g32 = 0;
					var _g33 = values14.length;
					while(_g32 < _g33) {
						var i14 = _g32++;
						if(values14[i14] > max7) {
							max7 = values14[i14];
						}
					}
					var this26 = [max7,0];
					var values15 = this26;
					var min7 = values15[0];
					var _g34 = 0;
					var _g35 = values15.length;
					while(_g34 < _g35) {
						var i15 = _g34++;
						if(values15[i15] < min7) {
							min7 = values15[i15];
						}
					}
					var y5 = min7;
					if(!(x6 >= 0 && y5 >= 0 && x6 < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this_x6 = x6;
						var this_y6 = y5;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x6,this_y6)));
					}
					var position6 = (y5 * image.getUInt16(0) + x6) * 4;
					position6 += vision_ds_Image.OFFSET;
					var value6 = image.b[position6] << 24 | image.b[position6 + 1] << 16 | image.b[position6 + 2] << 8 | image.b[position6 + 3];
					if(value6 == null) {
						value6 = 0;
					}
					var this27 = value6;
					this22 = this27;
				} else {
					if(!(x >= 0 && y4 >= 0 && x < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this_x7 = x;
						var this_y7 = y4;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x7,this_y7)));
					}
					var position7 = (y4 * image.getUInt16(0) + x) * 4;
					position7 += vision_ds_Image.OFFSET;
					var value7 = image.b[position7] << 24 | image.b[position7 + 1] << 16 | image.b[position7 + 2] << 8 | image.b[position7 + 3];
					if(value7 == null) {
						value7 = 0;
					}
					var this28 = value7;
					this22 = this28;
				}
				if((this22 >> 16 & 255) == 255) {
					var y6 = y - 1;
					var this29;
					if(!(x >= 0 && y6 >= 0 && x < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this30 = [x,image.getUInt16(0)];
						var values16 = this30;
						var max8 = values16[0];
						var _g36 = 0;
						var _g37 = values16.length;
						while(_g36 < _g37) {
							var i16 = _g36++;
							if(values16[i16] > max8) {
								max8 = values16[i16];
							}
						}
						var this31 = [max8,0];
						var values17 = this31;
						var min8 = values17[0];
						var _g38 = 0;
						var _g39 = values17.length;
						while(_g38 < _g39) {
							var i17 = _g38++;
							if(values17[i17] < min8) {
								min8 = values17[i17];
							}
						}
						var x7 = min8;
						var this32 = [y6,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))];
						var values18 = this32;
						var max9 = values18[0];
						var _g40 = 0;
						var _g41 = values18.length;
						while(_g40 < _g41) {
							var i18 = _g40++;
							if(values18[i18] > max9) {
								max9 = values18[i18];
							}
						}
						var this33 = [max9,0];
						var values19 = this33;
						var min9 = values19[0];
						var _g42 = 0;
						var _g43 = values19.length;
						while(_g42 < _g43) {
							var i19 = _g42++;
							if(values19[i19] < min9) {
								min9 = values19[i19];
							}
						}
						var y7 = min9;
						if(!(x7 >= 0 && y7 >= 0 && x7 < image.getUInt16(0) && y7 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
							var this_x8 = x7;
							var this_y8 = y7;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x8,this_y8)));
						}
						var position8 = (y7 * image.getUInt16(0) + x7) * 4;
						position8 += vision_ds_Image.OFFSET;
						var value8 = image.b[position8] << 24 | image.b[position8 + 1] << 16 | image.b[position8 + 2] << 8 | image.b[position8 + 3];
						if(value8 == null) {
							value8 = 0;
						}
						var this34 = value8;
						this29 = this34;
					} else {
						if(!(x >= 0 && y6 >= 0 && x < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
							var this_x9 = x;
							var this_y9 = y6;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x9,this_y9)));
						}
						var position9 = (y6 * image.getUInt16(0) + x) * 4;
						position9 += vision_ds_Image.OFFSET;
						var value9 = image.b[position9] << 24 | image.b[position9 + 1] << 16 | image.b[position9 + 2] << 8 | image.b[position9 + 3];
						if(value9 == null) {
							value9 = 0;
						}
						var this35 = value9;
						this29 = this35;
					}
					tmp1 = (this29 >> 16 & 255) == 255;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					candidate = true;
					Y = true;
				}
				if(candidate) {
					var this36 = 0;
					var color = this36;
					var Alpha = 255;
					if(Alpha == null) {
						Alpha = 255;
					}
					color &= -16711681;
					color |= 16711680;
					color &= -65281;
					color |= 65280;
					color &= -256;
					color |= 255;
					color &= 16777215;
					color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
					var color1 = color;
					if(!(x >= 0 && y >= 0 && x < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)))) {
						var this_x10 = x;
						var this_y10 = y;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(intermediate,new vision_ds_Point2D(this_x10,this_y10)));
					} else if(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
						var v = null;
						var tmp2;
						if(!(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
							tmp2 = x >= 0 && y >= 0 && x < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4));
						} else {
							var has = false;
							var view;
							if(v != null) {
								view = v;
							} else {
								var _g44 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES);
								var _g45 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
								var _g46 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
								var intermediate1 = intermediate.b;
								var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
								view = new vision_ds_ImageView(_g44,_g45,_g46,intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),intermediate1[view1]);
							}
							switch(view.shape) {
							case 0:
								has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
								break;
							case 1:
								has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
								break;
							case 2:case 3:
								if(view.width > view.height) {
									var a = view.width / 2;
									var b = view.height / 2;
									var c = Math.sqrt(a * a - b * b);
									var x8 = view.x + view.width / 2 - c;
									var y8 = view.y + view.height / 2;
									if(y8 == null) {
										y8 = 0;
									}
									if(x8 == null) {
										x8 = 0;
									}
									var f1_x = x8;
									var f1_y = y8;
									var x9 = view.x + view.width / 2 + c;
									var y9 = view.y + view.height / 2;
									if(y9 == null) {
										y9 = 0;
									}
									if(x9 == null) {
										x9 = 0;
									}
									var f2_x = x9;
									var f2_y = y9;
									var x10 = x;
									var y10 = y;
									if(y10 == null) {
										y10 = 0;
									}
									if(x10 == null) {
										x10 = 0;
									}
									var p_x = x10;
									var p_y = y10;
									var x11 = p_x - f1_x;
									var y11 = p_y - f1_y;
									var x12 = p_x - f2_x;
									var y12 = p_y - f2_y;
									has = Math.sqrt(x11 * x11 + y11 * y11) + Math.sqrt(x12 * x12 + y12 * y12) <= view.width;
									if(view.shape == 3) {
										has = !has;
									}
								} else if(view.height > view.width) {
									var a1 = view.height / 2;
									var b1 = view.width / 2;
									var c1 = Math.sqrt(a1 * a1 - b1 * b1);
									var x13 = view.x + view.width / 2;
									var y13 = view.y + view.height / 2 - c1;
									if(y13 == null) {
										y13 = 0;
									}
									if(x13 == null) {
										x13 = 0;
									}
									var f1_x1 = x13;
									var f1_y1 = y13;
									var x14 = view.x + view.width / 2;
									var y14 = view.y + view.height / 2 + c1;
									if(y14 == null) {
										y14 = 0;
									}
									if(x14 == null) {
										x14 = 0;
									}
									var f2_x1 = x14;
									var f2_y1 = y14;
									var x15 = x;
									var y15 = y;
									if(y15 == null) {
										y15 = 0;
									}
									if(x15 == null) {
										x15 = 0;
									}
									var p_x1 = x15;
									var p_y1 = y15;
									var x16 = p_x1 - f1_x1;
									var y16 = p_y1 - f1_y1;
									var x17 = p_x1 - f2_x1;
									var y17 = p_y1 - f2_y1;
									has = Math.sqrt(x16 * x16 + y16 * y16) + Math.sqrt(x17 * x17 + y17 * y17) <= view.height;
									if(view.shape == 3) {
										has = !has;
									}
								} else {
									var x18 = x;
									var y18 = y;
									if(y18 == null) {
										y18 = 0;
									}
									if(x18 == null) {
										x18 = 0;
									}
									var point1_x = x18;
									var point1_y = y18;
									var x19 = view.x + view.width / 2;
									var y19 = view.y + view.height / 2;
									if(y19 == null) {
										y19 = 0;
									}
									if(x19 == null) {
										x19 = 0;
									}
									var point2_x = x19;
									var point2_y = y19;
									var x20 = point2_x - point1_x;
									var y20 = point2_y - point1_y;
									has = Math.sqrt(x20 * x20 + y20 * y20) <= view.width / 2;
									if(view.shape == 3) {
										has = !has;
									}
								}
								break;
							case 4:
								has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
								break;
							case 5:
								has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
								break;
							}
							tmp2 = has;
						}
						if(tmp2) {
							var position10 = (y * intermediate.getUInt16(0) + x) * 4;
							position10 += vision_ds_Image.OFFSET;
							intermediate.b[position10] = color1 >> 24 & 255;
							intermediate.b[position10 + 1] = color1 >> 16 & 255;
							intermediate.b[position10 + 2] = color1 >> 8 & 255;
							intermediate.b[position10 + 3] = color1 & 255;
						}
					} else {
						var position11 = (y * intermediate.getUInt16(0) + x) * 4;
						position11 += vision_ds_Image.OFFSET;
						intermediate.b[position11] = color1 >> 24 & 255;
						intermediate.b[position11 + 1] = color1 >> 16 & 255;
						intermediate.b[position11 + 2] = color1 >> 8 & 255;
						intermediate.b[position11 + 3] = color1 & 255;
					}
					if(X) {
						var x21 = x + 1;
						if(x21 >= 0 && y >= 0 && x21 < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4))) {
							var x22 = x + 1;
							var this37 = 0;
							var color2 = this37;
							var Alpha1 = 255;
							if(Alpha1 == null) {
								Alpha1 = 255;
							}
							color2 &= -16711681;
							color2 |= 0;
							color2 &= -65281;
							color2 |= 0;
							color2 &= -256;
							color2 |= 0;
							color2 &= 16777215;
							color2 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
							var color3 = color2;
							if(!(x22 >= 0 && y >= 0 && x22 < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)))) {
								var this_x11 = x22;
								var this_y11 = y;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(intermediate,new vision_ds_Point2D(this_x11,this_y11)));
							} else if(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v1 = null;
								var tmp3;
								if(!(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
									tmp3 = x22 >= 0 && y >= 0 && x22 < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4));
								} else {
									var has1 = false;
									var view2;
									if(v1 != null) {
										view2 = v1;
									} else {
										var _g47 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g48 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g49 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var intermediate2 = intermediate.b;
										var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view2 = new vision_ds_ImageView(_g47,_g48,_g49,intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),intermediate2[view3]);
									}
									switch(view2.shape) {
									case 0:
										has1 = x22 < view2.x + view2.width && y < view2.y + view2.height && x22 >= view2.x && y >= view2.y;
										break;
									case 1:
										has1 = !(x22 < view2.x + view2.width && y < view2.y + view2.height && x22 >= view2.x && y >= view2.y);
										break;
									case 2:case 3:
										if(view2.width > view2.height) {
											var a2 = view2.width / 2;
											var b2 = view2.height / 2;
											var c2 = Math.sqrt(a2 * a2 - b2 * b2);
											var x23 = view2.x + view2.width / 2 - c2;
											var y21 = view2.y + view2.height / 2;
											if(y21 == null) {
												y21 = 0;
											}
											if(x23 == null) {
												x23 = 0;
											}
											var f1_x2 = x23;
											var f1_y2 = y21;
											var x24 = view2.x + view2.width / 2 + c2;
											var y22 = view2.y + view2.height / 2;
											if(y22 == null) {
												y22 = 0;
											}
											if(x24 == null) {
												x24 = 0;
											}
											var f2_x2 = x24;
											var f2_y2 = y22;
											var x25 = x22;
											var y23 = y;
											if(y23 == null) {
												y23 = 0;
											}
											if(x25 == null) {
												x25 = 0;
											}
											var p_x2 = x25;
											var p_y2 = y23;
											var x26 = p_x2 - f1_x2;
											var y24 = p_y2 - f1_y2;
											var x27 = p_x2 - f2_x2;
											var y25 = p_y2 - f2_y2;
											has1 = Math.sqrt(x26 * x26 + y24 * y24) + Math.sqrt(x27 * x27 + y25 * y25) <= view2.width;
											if(view2.shape == 3) {
												has1 = !has1;
											}
										} else if(view2.height > view2.width) {
											var a3 = view2.height / 2;
											var b3 = view2.width / 2;
											var c3 = Math.sqrt(a3 * a3 - b3 * b3);
											var x28 = view2.x + view2.width / 2;
											var y26 = view2.y + view2.height / 2 - c3;
											if(y26 == null) {
												y26 = 0;
											}
											if(x28 == null) {
												x28 = 0;
											}
											var f1_x3 = x28;
											var f1_y3 = y26;
											var x29 = view2.x + view2.width / 2;
											var y27 = view2.y + view2.height / 2 + c3;
											if(y27 == null) {
												y27 = 0;
											}
											if(x29 == null) {
												x29 = 0;
											}
											var f2_x3 = x29;
											var f2_y3 = y27;
											var x30 = x22;
											var y28 = y;
											if(y28 == null) {
												y28 = 0;
											}
											if(x30 == null) {
												x30 = 0;
											}
											var p_x3 = x30;
											var p_y3 = y28;
											var x31 = p_x3 - f1_x3;
											var y29 = p_y3 - f1_y3;
											var x32 = p_x3 - f2_x3;
											var y30 = p_y3 - f2_y3;
											has1 = Math.sqrt(x31 * x31 + y29 * y29) + Math.sqrt(x32 * x32 + y30 * y30) <= view2.height;
											if(view2.shape == 3) {
												has1 = !has1;
											}
										} else {
											var x33 = x22;
											var y31 = y;
											if(y31 == null) {
												y31 = 0;
											}
											if(x33 == null) {
												x33 = 0;
											}
											var point1_x1 = x33;
											var point1_y1 = y31;
											var x34 = view2.x + view2.width / 2;
											var y32 = view2.y + view2.height / 2;
											if(y32 == null) {
												y32 = 0;
											}
											if(x34 == null) {
												x34 = 0;
											}
											var point2_x1 = x34;
											var point2_y1 = y32;
											var x35 = point2_x1 - point1_x1;
											var y33 = point2_y1 - point1_y1;
											has1 = Math.sqrt(x35 * x35 + y33 * y33) <= view2.width / 2;
											if(view2.shape == 3) {
												has1 = !has1;
											}
										}
										break;
									case 4:
										has1 = Math.abs(x22 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
										break;
									case 5:
										has1 = !(Math.abs(x22 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
										break;
									}
									tmp3 = has1;
								}
								if(tmp3) {
									var position12 = (y * intermediate.getUInt16(0) + x22) * 4;
									position12 += vision_ds_Image.OFFSET;
									intermediate.b[position12] = color3 >> 24 & 255;
									intermediate.b[position12 + 1] = color3 >> 16 & 255;
									intermediate.b[position12 + 2] = color3 >> 8 & 255;
									intermediate.b[position12 + 3] = color3 & 255;
								}
							} else {
								var position13 = (y * intermediate.getUInt16(0) + x22) * 4;
								position13 += vision_ds_Image.OFFSET;
								intermediate.b[position13] = color3 >> 24 & 255;
								intermediate.b[position13 + 1] = color3 >> 16 & 255;
								intermediate.b[position13 + 2] = color3 >> 8 & 255;
								intermediate.b[position13 + 3] = color3 & 255;
							}
						}
						var x36 = x - 1;
						if(x36 >= 0 && y >= 0 && x36 < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4))) {
							var x37 = x - 1;
							var this38 = 0;
							var color4 = this38;
							var Alpha2 = 255;
							if(Alpha2 == null) {
								Alpha2 = 255;
							}
							color4 &= -16711681;
							color4 |= 0;
							color4 &= -65281;
							color4 |= 0;
							color4 &= -256;
							color4 |= 0;
							color4 &= 16777215;
							color4 |= (Alpha2 > 255 ? 255 : Alpha2 < 0 ? 0 : Alpha2) << 24;
							var color5 = color4;
							if(!(x37 >= 0 && y >= 0 && x37 < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)))) {
								var this_x12 = x37;
								var this_y12 = y;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(intermediate,new vision_ds_Point2D(this_x12,this_y12)));
							} else if(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v2 = null;
								var tmp4;
								if(!(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
									tmp4 = x37 >= 0 && y >= 0 && x37 < intermediate.getUInt16(0) && y < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4));
								} else {
									var has2 = false;
									var view4;
									if(v2 != null) {
										view4 = v2;
									} else {
										var _g50 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g51 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g52 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var intermediate3 = intermediate.b;
										var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view4 = new vision_ds_ImageView(_g50,_g51,_g52,intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),intermediate3[view5]);
									}
									switch(view4.shape) {
									case 0:
										has2 = x37 < view4.x + view4.width && y < view4.y + view4.height && x37 >= view4.x && y >= view4.y;
										break;
									case 1:
										has2 = !(x37 < view4.x + view4.width && y < view4.y + view4.height && x37 >= view4.x && y >= view4.y);
										break;
									case 2:case 3:
										if(view4.width > view4.height) {
											var a4 = view4.width / 2;
											var b4 = view4.height / 2;
											var c4 = Math.sqrt(a4 * a4 - b4 * b4);
											var x38 = view4.x + view4.width / 2 - c4;
											var y34 = view4.y + view4.height / 2;
											if(y34 == null) {
												y34 = 0;
											}
											if(x38 == null) {
												x38 = 0;
											}
											var f1_x4 = x38;
											var f1_y4 = y34;
											var x39 = view4.x + view4.width / 2 + c4;
											var y35 = view4.y + view4.height / 2;
											if(y35 == null) {
												y35 = 0;
											}
											if(x39 == null) {
												x39 = 0;
											}
											var f2_x4 = x39;
											var f2_y4 = y35;
											var x40 = x37;
											var y36 = y;
											if(y36 == null) {
												y36 = 0;
											}
											if(x40 == null) {
												x40 = 0;
											}
											var p_x4 = x40;
											var p_y4 = y36;
											var x41 = p_x4 - f1_x4;
											var y37 = p_y4 - f1_y4;
											var x42 = p_x4 - f2_x4;
											var y38 = p_y4 - f2_y4;
											has2 = Math.sqrt(x41 * x41 + y37 * y37) + Math.sqrt(x42 * x42 + y38 * y38) <= view4.width;
											if(view4.shape == 3) {
												has2 = !has2;
											}
										} else if(view4.height > view4.width) {
											var a5 = view4.height / 2;
											var b5 = view4.width / 2;
											var c5 = Math.sqrt(a5 * a5 - b5 * b5);
											var x43 = view4.x + view4.width / 2;
											var y39 = view4.y + view4.height / 2 - c5;
											if(y39 == null) {
												y39 = 0;
											}
											if(x43 == null) {
												x43 = 0;
											}
											var f1_x5 = x43;
											var f1_y5 = y39;
											var x44 = view4.x + view4.width / 2;
											var y40 = view4.y + view4.height / 2 + c5;
											if(y40 == null) {
												y40 = 0;
											}
											if(x44 == null) {
												x44 = 0;
											}
											var f2_x5 = x44;
											var f2_y5 = y40;
											var x45 = x37;
											var y41 = y;
											if(y41 == null) {
												y41 = 0;
											}
											if(x45 == null) {
												x45 = 0;
											}
											var p_x5 = x45;
											var p_y5 = y41;
											var x46 = p_x5 - f1_x5;
											var y42 = p_y5 - f1_y5;
											var x47 = p_x5 - f2_x5;
											var y43 = p_y5 - f2_y5;
											has2 = Math.sqrt(x46 * x46 + y42 * y42) + Math.sqrt(x47 * x47 + y43 * y43) <= view4.height;
											if(view4.shape == 3) {
												has2 = !has2;
											}
										} else {
											var x48 = x37;
											var y44 = y;
											if(y44 == null) {
												y44 = 0;
											}
											if(x48 == null) {
												x48 = 0;
											}
											var point1_x2 = x48;
											var point1_y2 = y44;
											var x49 = view4.x + view4.width / 2;
											var y45 = view4.y + view4.height / 2;
											if(y45 == null) {
												y45 = 0;
											}
											if(x49 == null) {
												x49 = 0;
											}
											var point2_x2 = x49;
											var point2_y2 = y45;
											var x50 = point2_x2 - point1_x2;
											var y46 = point2_y2 - point1_y2;
											has2 = Math.sqrt(x50 * x50 + y46 * y46) <= view4.width / 2;
											if(view4.shape == 3) {
												has2 = !has2;
											}
										}
										break;
									case 4:
										has2 = Math.abs(x37 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
										break;
									case 5:
										has2 = !(Math.abs(x37 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
										break;
									}
									tmp4 = has2;
								}
								if(tmp4) {
									var position14 = (y * intermediate.getUInt16(0) + x37) * 4;
									position14 += vision_ds_Image.OFFSET;
									intermediate.b[position14] = color5 >> 24 & 255;
									intermediate.b[position14 + 1] = color5 >> 16 & 255;
									intermediate.b[position14 + 2] = color5 >> 8 & 255;
									intermediate.b[position14 + 3] = color5 & 255;
								}
							} else {
								var position15 = (y * intermediate.getUInt16(0) + x37) * 4;
								position15 += vision_ds_Image.OFFSET;
								intermediate.b[position15] = color5 >> 24 & 255;
								intermediate.b[position15 + 1] = color5 >> 16 & 255;
								intermediate.b[position15 + 2] = color5 >> 8 & 255;
								intermediate.b[position15 + 3] = color5 & 255;
							}
						}
					}
					if(Y) {
						var y47 = y + 1;
						if(x >= 0 && y47 >= 0 && x < intermediate.getUInt16(0) && y47 < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4))) {
							var y48 = y + 1;
							var this39 = 0;
							var color6 = this39;
							var Alpha3 = 255;
							if(Alpha3 == null) {
								Alpha3 = 255;
							}
							color6 &= -16711681;
							color6 |= 0;
							color6 &= -65281;
							color6 |= 0;
							color6 &= -256;
							color6 |= 0;
							color6 &= 16777215;
							color6 |= (Alpha3 > 255 ? 255 : Alpha3 < 0 ? 0 : Alpha3) << 24;
							var color7 = color6;
							if(!(x >= 0 && y48 >= 0 && x < intermediate.getUInt16(0) && y48 < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)))) {
								var this_x13 = x;
								var this_y13 = y48;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(intermediate,new vision_ds_Point2D(this_x13,this_y13)));
							} else if(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v3 = null;
								var tmp5;
								if(!(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
									tmp5 = x >= 0 && y48 >= 0 && x < intermediate.getUInt16(0) && y48 < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4));
								} else {
									var has3 = false;
									var view6;
									if(v3 != null) {
										view6 = v3;
									} else {
										var _g53 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g54 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g55 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var intermediate4 = intermediate.b;
										var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view6 = new vision_ds_ImageView(_g53,_g54,_g55,intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),intermediate4[view7]);
									}
									switch(view6.shape) {
									case 0:
										has3 = x < view6.x + view6.width && y48 < view6.y + view6.height && x >= view6.x && y48 >= view6.y;
										break;
									case 1:
										has3 = !(x < view6.x + view6.width && y48 < view6.y + view6.height && x >= view6.x && y48 >= view6.y);
										break;
									case 2:case 3:
										if(view6.width > view6.height) {
											var a6 = view6.width / 2;
											var b6 = view6.height / 2;
											var c6 = Math.sqrt(a6 * a6 - b6 * b6);
											var x51 = view6.x + view6.width / 2 - c6;
											var y49 = view6.y + view6.height / 2;
											if(y49 == null) {
												y49 = 0;
											}
											if(x51 == null) {
												x51 = 0;
											}
											var f1_x6 = x51;
											var f1_y6 = y49;
											var x52 = view6.x + view6.width / 2 + c6;
											var y50 = view6.y + view6.height / 2;
											if(y50 == null) {
												y50 = 0;
											}
											if(x52 == null) {
												x52 = 0;
											}
											var f2_x6 = x52;
											var f2_y6 = y50;
											var x53 = x;
											var y51 = y48;
											if(y51 == null) {
												y51 = 0;
											}
											if(x53 == null) {
												x53 = 0;
											}
											var p_x6 = x53;
											var p_y6 = y51;
											var x54 = p_x6 - f1_x6;
											var y52 = p_y6 - f1_y6;
											var x55 = p_x6 - f2_x6;
											var y53 = p_y6 - f2_y6;
											has3 = Math.sqrt(x54 * x54 + y52 * y52) + Math.sqrt(x55 * x55 + y53 * y53) <= view6.width;
											if(view6.shape == 3) {
												has3 = !has3;
											}
										} else if(view6.height > view6.width) {
											var a7 = view6.height / 2;
											var b7 = view6.width / 2;
											var c7 = Math.sqrt(a7 * a7 - b7 * b7);
											var x56 = view6.x + view6.width / 2;
											var y54 = view6.y + view6.height / 2 - c7;
											if(y54 == null) {
												y54 = 0;
											}
											if(x56 == null) {
												x56 = 0;
											}
											var f1_x7 = x56;
											var f1_y7 = y54;
											var x57 = view6.x + view6.width / 2;
											var y55 = view6.y + view6.height / 2 + c7;
											if(y55 == null) {
												y55 = 0;
											}
											if(x57 == null) {
												x57 = 0;
											}
											var f2_x7 = x57;
											var f2_y7 = y55;
											var x58 = x;
											var y56 = y48;
											if(y56 == null) {
												y56 = 0;
											}
											if(x58 == null) {
												x58 = 0;
											}
											var p_x7 = x58;
											var p_y7 = y56;
											var x59 = p_x7 - f1_x7;
											var y57 = p_y7 - f1_y7;
											var x60 = p_x7 - f2_x7;
											var y58 = p_y7 - f2_y7;
											has3 = Math.sqrt(x59 * x59 + y57 * y57) + Math.sqrt(x60 * x60 + y58 * y58) <= view6.height;
											if(view6.shape == 3) {
												has3 = !has3;
											}
										} else {
											var x61 = x;
											var y59 = y48;
											if(y59 == null) {
												y59 = 0;
											}
											if(x61 == null) {
												x61 = 0;
											}
											var point1_x3 = x61;
											var point1_y3 = y59;
											var x62 = view6.x + view6.width / 2;
											var y60 = view6.y + view6.height / 2;
											if(y60 == null) {
												y60 = 0;
											}
											if(x62 == null) {
												x62 = 0;
											}
											var point2_x3 = x62;
											var point2_y3 = y60;
											var x63 = point2_x3 - point1_x3;
											var y61 = point2_y3 - point1_y3;
											has3 = Math.sqrt(x63 * x63 + y61 * y61) <= view6.width / 2;
											if(view6.shape == 3) {
												has3 = !has3;
											}
										}
										break;
									case 4:
										has3 = Math.abs(x - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y48 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
										break;
									case 5:
										has3 = !(Math.abs(x - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y48 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
										break;
									}
									tmp5 = has3;
								}
								if(tmp5) {
									var position16 = (y48 * intermediate.getUInt16(0) + x) * 4;
									position16 += vision_ds_Image.OFFSET;
									intermediate.b[position16] = color7 >> 24 & 255;
									intermediate.b[position16 + 1] = color7 >> 16 & 255;
									intermediate.b[position16 + 2] = color7 >> 8 & 255;
									intermediate.b[position16 + 3] = color7 & 255;
								}
							} else {
								var position17 = (y48 * intermediate.getUInt16(0) + x) * 4;
								position17 += vision_ds_Image.OFFSET;
								intermediate.b[position17] = color7 >> 24 & 255;
								intermediate.b[position17 + 1] = color7 >> 16 & 255;
								intermediate.b[position17 + 2] = color7 >> 8 & 255;
								intermediate.b[position17 + 3] = color7 & 255;
							}
						}
						var y62 = y - 1;
						if(x >= 0 && y62 >= 0 && x < intermediate.getUInt16(0) && y62 < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4))) {
							var y63 = y - 1;
							var this40 = 0;
							var color8 = this40;
							var Alpha4 = 255;
							if(Alpha4 == null) {
								Alpha4 = 255;
							}
							color8 &= -16711681;
							color8 |= 0;
							color8 &= -65281;
							color8 |= 0;
							color8 &= -256;
							color8 |= 0;
							color8 &= 16777215;
							color8 |= (Alpha4 > 255 ? 255 : Alpha4 < 0 ? 0 : Alpha4) << 24;
							var color9 = color8;
							if(!(x >= 0 && y63 >= 0 && x < intermediate.getUInt16(0) && y63 < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)))) {
								var this_x14 = x;
								var this_y14 = y63;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(intermediate,new vision_ds_Point2D(this_x14,this_y14)));
							} else if(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v4 = null;
								var tmp6;
								if(!(intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != intermediate.getUInt16(0) || intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4)) || intermediate.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v4 == null) {
									tmp6 = x >= 0 && y63 >= 0 && x < intermediate.getUInt16(0) && y63 < Math.ceil((intermediate.length - vision_ds_Image.OFFSET) / (intermediate.getUInt16(0) * 4));
								} else {
									var has4 = false;
									var view8;
									if(v4 != null) {
										view8 = v4;
									} else {
										var _g56 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g57 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g58 = intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var intermediate5 = intermediate.b;
										var view9 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view8 = new vision_ds_ImageView(_g56,_g57,_g58,intermediate.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),intermediate5[view9]);
									}
									switch(view8.shape) {
									case 0:
										has4 = x < view8.x + view8.width && y63 < view8.y + view8.height && x >= view8.x && y63 >= view8.y;
										break;
									case 1:
										has4 = !(x < view8.x + view8.width && y63 < view8.y + view8.height && x >= view8.x && y63 >= view8.y);
										break;
									case 2:case 3:
										if(view8.width > view8.height) {
											var a8 = view8.width / 2;
											var b8 = view8.height / 2;
											var c8 = Math.sqrt(a8 * a8 - b8 * b8);
											var x64 = view8.x + view8.width / 2 - c8;
											var y64 = view8.y + view8.height / 2;
											if(y64 == null) {
												y64 = 0;
											}
											if(x64 == null) {
												x64 = 0;
											}
											var f1_x8 = x64;
											var f1_y8 = y64;
											var x65 = view8.x + view8.width / 2 + c8;
											var y65 = view8.y + view8.height / 2;
											if(y65 == null) {
												y65 = 0;
											}
											if(x65 == null) {
												x65 = 0;
											}
											var f2_x8 = x65;
											var f2_y8 = y65;
											var x66 = x;
											var y66 = y63;
											if(y66 == null) {
												y66 = 0;
											}
											if(x66 == null) {
												x66 = 0;
											}
											var p_x8 = x66;
											var p_y8 = y66;
											var x67 = p_x8 - f1_x8;
											var y67 = p_y8 - f1_y8;
											var x68 = p_x8 - f2_x8;
											var y68 = p_y8 - f2_y8;
											has4 = Math.sqrt(x67 * x67 + y67 * y67) + Math.sqrt(x68 * x68 + y68 * y68) <= view8.width;
											if(view8.shape == 3) {
												has4 = !has4;
											}
										} else if(view8.height > view8.width) {
											var a9 = view8.height / 2;
											var b9 = view8.width / 2;
											var c9 = Math.sqrt(a9 * a9 - b9 * b9);
											var x69 = view8.x + view8.width / 2;
											var y69 = view8.y + view8.height / 2 - c9;
											if(y69 == null) {
												y69 = 0;
											}
											if(x69 == null) {
												x69 = 0;
											}
											var f1_x9 = x69;
											var f1_y9 = y69;
											var x70 = view8.x + view8.width / 2;
											var y70 = view8.y + view8.height / 2 + c9;
											if(y70 == null) {
												y70 = 0;
											}
											if(x70 == null) {
												x70 = 0;
											}
											var f2_x9 = x70;
											var f2_y9 = y70;
											var x71 = x;
											var y71 = y63;
											if(y71 == null) {
												y71 = 0;
											}
											if(x71 == null) {
												x71 = 0;
											}
											var p_x9 = x71;
											var p_y9 = y71;
											var x72 = p_x9 - f1_x9;
											var y72 = p_y9 - f1_y9;
											var x73 = p_x9 - f2_x9;
											var y73 = p_y9 - f2_y9;
											has4 = Math.sqrt(x72 * x72 + y72 * y72) + Math.sqrt(x73 * x73 + y73 * y73) <= view8.height;
											if(view8.shape == 3) {
												has4 = !has4;
											}
										} else {
											var x74 = x;
											var y74 = y63;
											if(y74 == null) {
												y74 = 0;
											}
											if(x74 == null) {
												x74 = 0;
											}
											var point1_x4 = x74;
											var point1_y4 = y74;
											var x75 = view8.x + view8.width / 2;
											var y75 = view8.y + view8.height / 2;
											if(y75 == null) {
												y75 = 0;
											}
											if(x75 == null) {
												x75 = 0;
											}
											var point2_x4 = x75;
											var point2_y4 = y75;
											var x76 = point2_x4 - point1_x4;
											var y76 = point2_y4 - point1_y4;
											has4 = Math.sqrt(x76 * x76 + y76 * y76) <= view8.width / 2;
											if(view8.shape == 3) {
												has4 = !has4;
											}
										}
										break;
									case 4:
										has4 = Math.abs(x - view8.x - view8.width / 2) / (view8.width / 2) + Math.abs(y63 - view8.y - view8.height / 2) / (view8.height / 2) <= 1;
										break;
									case 5:
										has4 = !(Math.abs(x - view8.x - view8.width / 2) / (view8.width / 2) + Math.abs(y63 - view8.y - view8.height / 2) / (view8.height / 2) <= 1);
										break;
									}
									tmp6 = has4;
								}
								if(tmp6) {
									var position18 = (y63 * intermediate.getUInt16(0) + x) * 4;
									position18 += vision_ds_Image.OFFSET;
									intermediate.b[position18] = color9 >> 24 & 255;
									intermediate.b[position18 + 1] = color9 >> 16 & 255;
									intermediate.b[position18 + 2] = color9 >> 8 & 255;
									intermediate.b[position18 + 3] = color9 & 255;
								}
							} else {
								var position19 = (y63 * intermediate.getUInt16(0) + x) * 4;
								position19 += vision_ds_Image.OFFSET;
								intermediate.b[position19] = color9 >> 24 & 255;
								intermediate.b[position19 + 1] = color9 >> 16 & 255;
								intermediate.b[position19 + 2] = color9 >> 8 & 255;
								intermediate.b[position19 + 3] = color9 & 255;
							}
						}
					}
				}
			}
		}
	}
	return intermediate;
};
var vision_ds_Array2D = function(width,height) {
	this.width = width;
	this.height = height;
	this.inner = [];
	this.inner.length = width * height;
};
vision_ds_Array2D.__name__ = true;
vision_ds_Array2D.prototype = {
	get: function(x,y) {
		return this.inner[y * this.height + x];
	}
	,set: function(x,y,val) {
		return this.inner[x + y * this.height] = val;
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.inner);
	}
	,get_length: function() {
		return this.inner.length;
	}
	,set_length: function(value) {
		this.inner.length = value;
		return value;
	}
	,set_width: function(value) {
		this.inner.length = value * this.height;
		return this.width = value;
	}
	,set_height: function(value) {
		this.inner.length = this.width * value;
		return this.height = value;
	}
	,__class__: vision_ds_Array2D
};
var vision_ds_ByteArray = {};
vision_ds_ByteArray.read = function(this1,index) {
	return this1.b[index];
};
vision_ds_ByteArray.write = function(this1,index,value) {
	this1.b[index] = value;
};
vision_ds_ByteArray._new = function(length) {
	var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
	return this1;
};
var vision_ds_Color = {};
vision_ds_Color.fromInt = function(value) {
	var value1 = value;
	if(value1 == null) {
		value1 = 0;
	}
	var this1 = value1;
	return this1;
};
vision_ds_Color.fromRGBA = function(Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Color.from8Bit = function(Value) {
	var this1 = 0;
	var color = this1;
	var Alpha = 1;
	if(Alpha == null) {
		Alpha = 255;
	}
	color &= -16711681;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	color &= -65281;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	color &= -256;
	color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	color &= 16777215;
	color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	return color;
};
vision_ds_Color.fromRGBAFloat = function(Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = Math.round(Red * 255);
	color &= -16711681;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	color &= -65281;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	color &= -256;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return color;
};
vision_ds_Color.fromCMYK = function(Cyan,Magenta,Yellow,Black,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = (1 - Cyan) * (1 - Black);
	var value1 = Math.round(value * 255);
	color &= -16711681;
	color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	var value = (1 - Magenta) * (1 - Black);
	var value1 = Math.round(value * 255);
	color &= -65281;
	color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	var value = (1 - Yellow) * (1 - Black);
	var value1 = Math.round(value * 255);
	color &= -256;
	color |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	var value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return color;
};
vision_ds_Color.fromHSB = function(Hue,Saturation,Brightness,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var this1 = 0;
	var color = this1;
	var chroma = Brightness * Saturation;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return color;
};
vision_ds_Color.fromHSL = function(Hue,Saturation,Lightness,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var this1 = 0;
	var color = this1;
	var chroma = (1 - Math.abs(2 * Lightness - 1)) * Saturation;
	var match = Lightness - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return color;
};
vision_ds_Color.fromString = function(str) {
	var result = null;
	str = StringTools.trim(str);
	if(vision_ds_Color.COLOR_REGEX.match(str)) {
		var hexColor = "0x" + vision_ds_Color.COLOR_REGEX.matched(2);
		var value = Std.parseInt(hexColor);
		if(value == null) {
			value = 0;
		}
		var this1 = value;
		result = this1;
		if(hexColor.length == 8) {
			var value = Math.round(255);
			result &= 16777215;
			result |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		}
	}
	return result;
};
vision_ds_Color.getHSBColorWheel = function(Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < 360) {
		var c = _g1++;
		_g.push(vision_ds_Color.fromHSB(c,1.0,1.0,Alpha));
	}
	return _g;
};
vision_ds_Color.interpolate = function(Color1,Color2,Factor) {
	if(Factor == null) {
		Factor = 0.5;
	}
	var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
	var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
	var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
	var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
	var Alpha = a;
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
	color &= -65281;
	color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
	color &= -256;
	color |= b > 255 ? 255 : b < 0 ? 0 : b;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Color.gradient = function(Color1,Color2,Steps,Ease) {
	var output = [];
	if(Ease == null) {
		Ease = function(t) {
			return t;
		};
	}
	var _g = 0;
	var _g1 = Steps;
	while(_g < _g1) {
		var step = _g++;
		var Factor = Ease(step / (Steps - 1));
		if(Factor == null) {
			Factor = 0.5;
		}
		var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
		var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
		var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
		var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
		var Alpha = a;
		if(Alpha == null) {
			Alpha = 255;
		}
		var this1 = 0;
		var color = this1;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 255;
		}
		color &= -16711681;
		color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
		color &= -65281;
		color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
		color &= -256;
		color |= b > 255 ? 255 : b < 0 ? 0 : b;
		color &= 16777215;
		color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
		output[step] = color;
	}
	return output;
};
vision_ds_Color.multiply = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) / 255 * ((rhs >> 16 & 255) / 255);
	var Green = (lhs >> 8 & 255) / 255 * ((rhs >> 8 & 255) / 255);
	var Blue = (lhs & 255) / 255 * ((rhs & 255) / 255);
	var Alpha = (lhs >> 24 & 255) / 255 * ((rhs >> 24 & 255) / 255);
	if(Alpha == null) {
		Alpha = 1;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = Math.round(Red * 255);
	color &= -16711681;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	color &= -65281;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	color &= -256;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return color;
};
vision_ds_Color.add = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) + (rhs >> 16 & 255);
	var Green = (lhs >> 8 & 255) + (rhs >> 8 & 255);
	var Blue = (lhs & 255) + (rhs & 255);
	var Alpha = (lhs >> 24 & 255) + (rhs >> 24 & 255);
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Color.subtract = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) - (rhs >> 16 & 255);
	var Green = (lhs >> 8 & 255) - (rhs >> 8 & 255);
	var Blue = (lhs & 255) - (rhs & 255);
	var Alpha = (lhs >> 24 & 255) - (rhs >> 24 & 255);
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Color.divide = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) / (rhs >> 16 & 255) | 0;
	var Green = (lhs >> 8 & 255) / (rhs >> 8 & 255) | 0;
	var Blue = (lhs & 255) / (rhs & 255) | 0;
	var Alpha = (lhs >> 24 & 255) / (rhs >> 24 & 255) | 0;
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Color.getComplementHarmony = function(this1) {
	var value = (vision_ds_Color.get_hue(this1) | 0) + 180;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	return vision_ds_Color.fromHSB(value % range,Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
};
vision_ds_Color.getAnalogousHarmony = function(this1,Threshold) {
	if(Threshold == null) {
		Threshold = 30;
	}
	var value = (vision_ds_Color.get_hue(this1) | 0) - Threshold;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var warmer = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	var value = (vision_ds_Color.get_hue(this1) | 0) + Threshold;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var colder = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	return { original : this1, warmer : warmer, colder : colder};
};
vision_ds_Color.getSplitComplementHarmony = function(this1,Threshold) {
	if(Threshold == null) {
		Threshold = 30;
	}
	var value = (vision_ds_Color.get_hue(this1) | 0) + 180;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var oppositeHue = value % range;
	var value = oppositeHue - Threshold;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var warmer = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	var value = oppositeHue + Threshold;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var colder = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	return { original : this1, warmer : warmer, colder : colder};
};
vision_ds_Color.getTriadicHarmony = function(this1) {
	var value = (vision_ds_Color.get_hue(this1) | 0) + 120;
	var range = 360;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var triadic1 = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	var value = (vision_ds_Color.get_hue(triadic1) | 0) + 120;
	var range = 360;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var triadic2 = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	return { color1 : this1, color2 : triadic1, color3 : triadic2};
};
vision_ds_Color.to24Bit = function(this1) {
	return this1 & 16777215;
};
vision_ds_Color.toHexString = function(this1,Alpha,Prefix) {
	if(Prefix == null) {
		Prefix = true;
	}
	if(Alpha == null) {
		Alpha = true;
	}
	var tmp = Alpha ? StringTools.hex(this1 >> 24 & 255,2) : "";
	return (Prefix ? "0x" : "") + tmp + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
};
vision_ds_Color.toWebString = function(this1) {
	var Alpha = false;
	var Prefix = false;
	if(Prefix == null) {
		Prefix = true;
	}
	if(Alpha == null) {
		Alpha = true;
	}
	var tmp = Alpha ? StringTools.hex(this1 >> 24 & 255,2) : "";
	return "#" + ((Prefix ? "0x" : "") + tmp + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2));
};
vision_ds_Color.darken = function(this1,Factor) {
	if(Factor == null) {
		Factor = 0.2;
	}
	Factor = vision_tools_MathTools.boundFloat(Factor,0,1);
	var output = this1;
	var value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 * (1 - Factor);
	var Hue = vision_ds_Color.get_hue(output);
	var Alpha = (output >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return output;
};
vision_ds_Color.lighten = function(this1,Factor) {
	if(Factor == null) {
		Factor = 0.2;
	}
	Factor = vision_tools_MathTools.boundFloat(Factor,0,1);
	var output = this1;
	var value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 + (1 - (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2) * Factor;
	var Hue = vision_ds_Color.get_hue(output);
	var Alpha = (output >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return output;
};
vision_ds_Color.invert = function(this1) {
	var oldAlpha = this1 >> 24 & 255;
	var lhs = -1;
	var Red = (lhs >> 16 & 255) - (this1 >> 16 & 255);
	var Green = (lhs >> 8 & 255) - (this1 >> 8 & 255);
	var Blue = (lhs & 255) - (this1 & 255);
	var Alpha = (lhs >> 24 & 255) - (this1 >> 24 & 255);
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	var output = color;
	output &= 16777215;
	output |= (oldAlpha > 255 ? 255 : oldAlpha < 0 ? 0 : oldAlpha) << 24;
	return output;
};
vision_ds_Color.setRGBA = function(this1,Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	this1 &= -16711681;
	this1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	this1 &= -65281;
	this1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	this1 &= -256;
	this1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	this1 &= 16777215;
	this1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	return this1;
};
vision_ds_Color.setRGBAFloat = function(this1,Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var value = Math.round(Red * 255);
	this1 &= -16711681;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	this1 &= -65281;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	this1 &= -256;
	this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return this1;
};
vision_ds_Color.setCMYK = function(this1,Cyan,Magenta,Yellow,Black,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var value = (1 - Cyan) * (1 - Black);
	var value1 = Math.round(value * 255);
	this1 &= -16711681;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	var value = (1 - Magenta) * (1 - Black);
	var value1 = Math.round(value * 255);
	this1 &= -65281;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	var value = (1 - Yellow) * (1 - Black);
	var value1 = Math.round(value * 255);
	this1 &= -256;
	this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	var value = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return this1;
};
vision_ds_Color.setHSB = function(this1,Hue,Saturation,Brightness,Alpha) {
	var chroma = Brightness * Saturation;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return this1;
};
vision_ds_Color.setHSL = function(this1,Hue,Saturation,Lightness,Alpha) {
	var chroma = (1 - Math.abs(2 * Lightness - 1)) * Saturation;
	var match = Lightness - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return this1;
};
vision_ds_Color.setHSChromaMatch = function(this1,Hue,Saturation,Chroma,Match,Alpha) {
	Hue %= 360;
	var hueD = Hue / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + Match;
	Chroma += Match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return this1;
};
vision_ds_Color.grayscale = function(this1,simple) {
	if(simple == null) {
		simple = false;
	}
	var gray = simple ? ((this1 >> 16 & 255) + (this1 >> 8 & 255) + (this1 & 255)) / 3 | 0 : 0.2126 * (this1 >> 16 & 255) + 0.7152 * (this1 >> 8 & 255) + 0.0722 * (this1 & 255) | 0;
	var Alpha = this1 >> 24 & 255;
	if(Alpha == null) {
		Alpha = 255;
	}
	this1 &= -16711681;
	this1 |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
	this1 &= -65281;
	this1 |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
	this1 &= -256;
	this1 |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
	this1 &= 16777215;
	this1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	this1 = this1;
	return this1;
};
vision_ds_Color.blackOrWhite = function(this1,threshold) {
	if(threshold == null) {
		threshold = 128;
	}
	var this2 = [this1 >> 16 & 255,this1 >> 8 & 255,this1 & 255];
	var values = this2;
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var colorValue = max;
	var a = this1 >> 24 & 255;
	if(colorValue > threshold) {
		this1 = -1;
	} else {
		this1 = -16777216;
	}
	this1 &= 16777215;
	this1 |= (a > 255 ? 255 : a < 0 ? 0 : a) << 24;
	return this1;
};
vision_ds_Color._new = function(value) {
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	return this1;
};
vision_ds_Color.getThis = function(this1) {
	return this1;
};
vision_ds_Color.validate = function(this1) {
};
vision_ds_Color.get_red = function(this1) {
	return this1 >> 16 & 255;
};
vision_ds_Color.get_green = function(this1) {
	return this1 >> 8 & 255;
};
vision_ds_Color.get_blue = function(this1) {
	return this1 & 255;
};
vision_ds_Color.get_alpha = function(this1) {
	return this1 >> 24 & 255;
};
vision_ds_Color.get_redFloat = function(this1) {
	return (this1 >> 16 & 255) / 255;
};
vision_ds_Color.get_greenFloat = function(this1) {
	return (this1 >> 8 & 255) / 255;
};
vision_ds_Color.get_blueFloat = function(this1) {
	return (this1 & 255) / 255;
};
vision_ds_Color.get_alphaFloat = function(this1) {
	return (this1 >> 24 & 255) / 255;
};
vision_ds_Color.set_red = function(this1,value) {
	this1 &= -16711681;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	return value;
};
vision_ds_Color.set_green = function(this1,value) {
	this1 &= -65281;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	return value;
};
vision_ds_Color.set_blue = function(this1,value) {
	this1 &= -256;
	this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	return value;
};
vision_ds_Color.set_alpha = function(this1,value) {
	this1 &= 16777215;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return value;
};
vision_ds_Color.set_redFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= -16711681;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	return value;
};
vision_ds_Color.set_greenFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= -65281;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	return value;
};
vision_ds_Color.set_blueFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= -256;
	this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	return value;
};
vision_ds_Color.set_alphaFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= 16777215;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
	return value;
};
vision_ds_Color.get_cyan = function(this1) {
	return (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.get_magenta = function(this1) {
	return (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.get_yellow = function(this1) {
	return (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.get_black = function(this1) {
	return 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.set_cyan = function(this1,value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var value1 = (1 - value) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -16711681;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - Magenta) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -65281;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - Yellow) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -256;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	var value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
	return value;
};
vision_ds_Color.set_magenta = function(this1,value) {
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -16711681;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - value) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -65281;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - Yellow) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -256;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	var value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
	return value;
};
vision_ds_Color.set_yellow = function(this1,value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -16711681;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - Magenta) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -65281;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - value) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -256;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	var value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
	return value;
};
vision_ds_Color.set_black = function(this1,value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - value);
	var value2 = Math.round(value1 * 255);
	this1 &= -16711681;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - Magenta) * (1 - value);
	var value2 = Math.round(value1 * 255);
	this1 &= -65281;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - Yellow) * (1 - value);
	var value2 = Math.round(value1 * 255);
	this1 &= -256;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	var value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
	return value;
};
vision_ds_Color.get_hue = function(this1) {
	var hueRad = Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	var hue = 0;
	if(hueRad != 0) {
		hue = 180 / Math.PI * Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	}
	if(hue < 0) {
		return hue + 360;
	} else {
		return hue;
	}
};
vision_ds_Color.get_brightness = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.get_saturation = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.get_lightness = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2;
};
vision_ds_Color.set_hue = function(this1,value) {
	var Brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = Brightness * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = Brightness - chroma;
	var Hue = value;
	var Chroma = chroma;
	Hue %= 360;
	var hueD = Hue / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	}
	return value;
};
vision_ds_Color.set_saturation = function(this1,value) {
	var Hue = vision_ds_Color.get_hue(this1);
	var Brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = Brightness * value;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	}
	return value;
};
vision_ds_Color.set_brightness = function(this1,value) {
	var Hue = vision_ds_Color.get_hue(this1);
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = value * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = value - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	}
	return value;
};
vision_ds_Color.set_lightness = function(this1,value) {
	var Hue = vision_ds_Color.get_hue(this1);
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	}
	return value;
};
vision_ds_Color.set_rgb = function(this1,value) {
	this1 = this1 & -16777216 | value & 16777215;
	return value;
};
vision_ds_Color.get_rgb = function(this1) {
	return this1 & 16777215;
};
vision_ds_Color.maxColor = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.minColor = function(this1) {
	return Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.boundChannel = function(this1,value) {
	if(value > 255) {
		return 255;
	} else if(value < 0) {
		return 0;
	} else {
		return value;
	}
};
vision_ds_Color.toString = function(this1) {
	var Alpha = true;
	var Prefix = true;
	if(Prefix == null) {
		Prefix = true;
	}
	if(Alpha == null) {
		Alpha = true;
	}
	var tmp = Alpha ? StringTools.hex(this1 >> 24 & 255,2) : "";
	return (Prefix ? "0x" : "") + tmp + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
};
vision_ds_Color.toInt = function(this1) {
	return this1;
};
vision_ds_Color.color_greater_than_color = function(lhs,rhs) {
	return lhs > rhs;
};
vision_ds_Color.color_greater_than_int = function(lhs,rhs) {
	return lhs > rhs;
};
vision_ds_Color.int_greater_than_color = function(lhs,rhs) {
	return lhs > rhs;
};
vision_ds_Color.color_greater_than_float = function(lhs,rhs) {
	return lhs > rhs;
};
vision_ds_Color.float_greater_than_color = function(lhs,rhs) {
	return lhs > rhs;
};
vision_ds_Color.color_greater_than_equal_color = function(lhs,rhs) {
	return lhs >= rhs;
};
vision_ds_Color.color_greater_than_equal_int = function(lhs,rhs) {
	return lhs >= rhs;
};
vision_ds_Color.int_greater_than_equal_color = function(lhs,rhs) {
	return lhs >= rhs;
};
vision_ds_Color.color_greater_than_equal_float = function(lhs,rhs) {
	return lhs >= rhs;
};
vision_ds_Color.float_greater_than_equal_color = function(lhs,rhs) {
	return lhs >= rhs;
};
vision_ds_Color.color_less_than_color = function(lhs,rhs) {
	return lhs < rhs;
};
vision_ds_Color.color_less_than_int = function(lhs,rhs) {
	return lhs < rhs;
};
vision_ds_Color.int_less_than_color = function(lhs,rhs) {
	return lhs < rhs;
};
vision_ds_Color.color_less_than_float = function(lhs,rhs) {
	return lhs < rhs;
};
vision_ds_Color.float_less_than_color = function(lhs,rhs) {
	return lhs < rhs;
};
vision_ds_Color.color_less_than_equal_color = function(lhs,rhs) {
	return lhs <= rhs;
};
vision_ds_Color.color_less_than_equal_int = function(lhs,rhs) {
	return lhs <= rhs;
};
vision_ds_Color.int_less_than_equal_color = function(lhs,rhs) {
	return lhs <= rhs;
};
vision_ds_Color.color_less_than_equal_float = function(lhs,rhs) {
	return lhs <= rhs;
};
vision_ds_Color.float_less_than_equal_color = function(lhs,rhs) {
	return lhs <= rhs;
};
vision_ds_Color.color_equal_color = function(lhs,rhs) {
	return lhs == rhs;
};
vision_ds_Color.color_equal_int = function(lhs,rhs) {
	return lhs == rhs;
};
vision_ds_Color.int_equal_color = function(lhs,rhs) {
	return lhs == rhs;
};
vision_ds_Color.color_equal_float = function(lhs,rhs) {
	return lhs == rhs;
};
vision_ds_Color.float_equal_color = function(lhs,rhs) {
	return lhs == rhs;
};
vision_ds_Color.color_not_equal_color = function(lhs,rhs) {
	return lhs != rhs;
};
vision_ds_Color.color_not_equal_int = function(lhs,rhs) {
	return lhs != rhs;
};
vision_ds_Color.int_not_equal_color = function(lhs,rhs) {
	return lhs != rhs;
};
vision_ds_Color.color_not_equal_float = function(lhs,rhs) {
	return lhs != rhs;
};
vision_ds_Color.float_not_equal_color = function(lhs,rhs) {
	return lhs != rhs;
};
vision_ds_Color.color_bitwise_and_color = function(lhs,rhs) {
	return lhs & rhs;
};
vision_ds_Color.color_bitwise_and_int = function(lhs,rhs) {
	return lhs & rhs;
};
vision_ds_Color.int_bitwise_and_color = function(lhs,rhs) {
	return lhs & rhs;
};
vision_ds_Color.color_bitwise_or_color = function(lhs,rhs) {
	return lhs | rhs;
};
vision_ds_Color.color_bitwise_or_int = function(lhs,rhs) {
	return lhs | rhs;
};
vision_ds_Color.int_bitwise_or_color = function(lhs,rhs) {
	return lhs | rhs;
};
vision_ds_Color.color_bitwise_xor_color = function(lhs,rhs) {
	return lhs ^ rhs;
};
vision_ds_Color.color_bitwise_xor_int = function(lhs,rhs) {
	return lhs ^ rhs;
};
vision_ds_Color.int_bitwise_xor_color = function(lhs,rhs) {
	return lhs ^ rhs;
};
vision_ds_Color.color_bitwise_left_shift_color = function(lhs,rhs) {
	return lhs << rhs;
};
vision_ds_Color.color_bitwise_left_shift_int = function(lhs,rhs) {
	return lhs << rhs;
};
vision_ds_Color.int_bitwise_left_shift_color = function(lhs,rhs) {
	return lhs << rhs;
};
vision_ds_Color.color_bitwise_right_shift_color = function(lhs,rhs) {
	return lhs >> rhs;
};
vision_ds_Color.color_bitwise_right_shift_int = function(lhs,rhs) {
	return lhs >> rhs;
};
vision_ds_Color.int_bitwise_right_shift_color = function(lhs,rhs) {
	return lhs >> rhs;
};
vision_ds_Color.color_bitwise_unsigned_right_shift_color = function(lhs,rhs) {
	return lhs >>> rhs;
};
vision_ds_Color.color_bitwise_unsigned_right_shift_int = function(lhs,rhs) {
	return lhs >>> rhs;
};
vision_ds_Color.int_bitwise_unsigned_right_shift_color = function(lhs,rhs) {
	return lhs >>> rhs;
};
var vision_ds_Histogram = function() {
	this.length = 0;
	this.underlying = [];
};
vision_ds_Histogram.__name__ = true;
vision_ds_Histogram.prototype = {
	increment: function(cell) {
		this.underlying.splice(cell,0,cell);
		return this;
	}
	,decrement: function(cell) {
		HxOverrides.remove(this.underlying,cell);
		return this;
	}
	,get_median: function() {
		var offset = this.get_length() % 2;
		return this.underlying[(this.get_length() - offset) / 2 | 0];
	}
	,get_length: function() {
		return this.underlying.length;
	}
	,__class__: vision_ds_Histogram
};
var vision_ds_Image = {};
vision_ds_Image.get_underlying = function(this1) {
	return this1;
};
vision_ds_Image.get_width = function(this1) {
	return this1.getUInt16(0);
};
vision_ds_Image.get_height = function(this1) {
	return Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
};
vision_ds_Image.get_view = function(this1) {
	var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
	var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
	var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
	var this2 = this1.b;
	var tmp = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
	return new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[tmp]);
};
vision_ds_Image.set_view = function(this1,view) {
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,view.x);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,view.y);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,view.width == 0 ? view.width : view.width);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,view.height == 0 ? view.height : view.height);
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = view.shape;
	return view;
};
vision_ds_Image._new = function(width,height,color) {
	if(color == null) {
		color = 0;
	}
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = color >> 24 & 255;
		this2.b[i + 1] = color >> 16 & 255;
		this2.b[i + 2] = color >> 8 & 255;
		this2.b[i + 3] = color & 255;
		i += 4;
	}
	return this2;
};
vision_ds_Image.getColorFromStartingBytePos = function(this1,position) {
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	return this1;
};
vision_ds_Image.setColorFromStartingBytePos = function(this1,position,c) {
	position += vision_ds_Image.OFFSET;
	this1.b[position] = c >> 24 & 255;
	this1.b[position + 1] = c >> 16 & 255;
	this1.b[position + 2] = c >> 8 & 255;
	this1.b[position + 3] = c & 255;
	return c;
};
vision_ds_Image.getPixel = function(this1,x,y) {
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	return this1;
};
vision_ds_Image.getSafePixel = function(this1,x,y) {
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this2 = [x,this1.getUInt16(0)];
		var values = this2;
		var max = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] > max) {
				max = values[i];
			}
		}
		var this2 = [max,0];
		var values = this2;
		var min = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] < min) {
				min = values[i];
			}
		}
		var x1 = min;
		var this2 = [y,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))];
		var values = this2;
		var max = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] > max) {
				max = values[i];
			}
		}
		var this2 = [max,0];
		var values = this2;
		var min = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] < min) {
				min = values[i];
			}
		}
		var y1 = min;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y1 * this1.getUInt16(0) + x1) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		return this2;
	}
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	return this1;
};
vision_ds_Image.getUnsafePixel = function(this1,x,y) {
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	return this1;
};
vision_ds_Image.getFloatingPixel = function(this1,x,y) {
	var x1 = Math.ceil(x);
	var y1 = Math.ceil(y);
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(x,y)));
	}
	var yFraction = y - (y | 0);
	var xFraction = x - (x | 0);
	var x1 = x | 0;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var x1 = (x | 0) + 1;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this3 = value;
	var x1 = x | 0;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this4 = value;
	var x1 = (x | 0) + 1;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this5 = value;
	var red = (1 - yFraction) * ((1 - xFraction) * (this2 >> 16 & 255) + xFraction * (this3 >> 16 & 255)) + yFraction * ((1 - xFraction) * (this4 >> 16 & 255) + xFraction * (this5 >> 16 & 255)) | 0;
	var x1 = x | 0;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var x1 = (x | 0) + 1;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this3 = value;
	var x1 = x | 0;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this4 = value;
	var x1 = (x | 0) + 1;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this5 = value;
	var green = (1 - yFraction) * ((1 - xFraction) * (this2 >> 8 & 255) + xFraction * (this3 >> 8 & 255)) + yFraction * ((1 - xFraction) * (this4 >> 8 & 255) + xFraction * (this5 >> 8 & 255)) | 0;
	var x1 = x | 0;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var x1 = (x | 0) + 1;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this3 = value;
	var x1 = x | 0;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this4 = value;
	var x1 = (x | 0) + 1;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this5 = value;
	var blue = (1 - yFraction) * ((1 - xFraction) * (this2 & 255) + xFraction * (this3 & 255)) + yFraction * ((1 - xFraction) * (this4 & 255) + xFraction * (this5 & 255)) | 0;
	var x1 = x | 0;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var x1 = (x | 0) + 1;
	var y1 = y | 0;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this3 = value;
	var x1 = x | 0;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this4 = value;
	var x1 = (x | 0) + 1;
	var y1 = (y | 0) + 1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	var alpha = (1 - yFraction) * ((1 - xFraction) * (this2 >> 24 & 255) + xFraction * (this3 >> 24 & 255)) + yFraction * ((1 - xFraction) * (this4 >> 24 & 255) + xFraction * (this1 >> 24 & 255)) | 0;
	var Alpha = alpha;
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= -65281;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= -256;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Image.setPixel = function(this1,x,y,color) {
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color >> 24 & 255;
			this1.b[position + 1] = color >> 16 & 255;
			this1.b[position + 2] = color >> 8 & 255;
			this1.b[position + 3] = color & 255;
		}
	} else {
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = color >> 24 & 255;
		this1.b[position + 1] = color >> 16 & 255;
		this1.b[position + 2] = color >> 8 & 255;
		this1.b[position + 3] = color & 255;
	}
};
vision_ds_Image.setSafePixel = function(this1,x,y,color) {
	x = vision_tools_MathTools.boundInt(x,0,this1.getUInt16(0) - 1);
	y = vision_tools_MathTools.boundInt(y,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
	if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color >> 24 & 255;
			this1.b[position + 1] = color >> 16 & 255;
			this1.b[position + 2] = color >> 8 & 255;
			this1.b[position + 3] = color & 255;
		}
	} else {
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = color >> 24 & 255;
		this1.b[position + 1] = color >> 16 & 255;
		this1.b[position + 2] = color >> 8 & 255;
		this1.b[position + 3] = color & 255;
	}
};
vision_ds_Image.setFloatingPixel = function(this1,x,y,color) {
	var x1 = Math.ceil(x);
	var y1 = Math.ceil(y);
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(x,y)));
	}
	var yFraction = y - (y | 0);
	var xFraction = x - (x | 0);
	var x1 = Math.floor(x);
	var y1 = Math.floor(y);
	var Red = (1 - xFraction + (1 - yFraction)) / 2 * ((color >> 16 & 255) / 255);
	var Green = (1 - xFraction + (1 - yFraction)) / 2 * ((color >> 8 & 255) / 255);
	var Blue = (1 - xFraction + (1 - yFraction)) / 2 * ((color & 255) / 255);
	var Alpha = (color >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var this2 = 0;
	var color1 = this2;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = Math.round(Red * 255);
	color1 &= -16711681;
	color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	color1 &= -65281;
	color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	color1 &= -256;
	color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha1 * 255);
	color1 &= 16777215;
	color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	var color2 = color1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
				break;
			case 1:
				has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x2 = view.x + view.width / 2 - c;
					var y2 = view.y + view.height / 2;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var f1_x = x2;
					var f1_y = y2;
					var x2 = view.x + view.width / 2 + c;
					var y2 = view.y + view.height / 2;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var f2_x = x2;
					var f2_y = y2;
					var x2 = x1;
					var y2 = y1;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var p_x = x2;
					var p_y = y2;
					var x2 = p_x - f1_x;
					var y2 = p_y - f1_y;
					var x3 = p_x - f2_x;
					var y3 = p_y - f2_y;
					has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x2 = view.x + view.width / 2;
					var y2 = view.y + view.height / 2 - c;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var f1_x = x2;
					var f1_y = y2;
					var x2 = view.x + view.width / 2;
					var y2 = view.y + view.height / 2 + c;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var f2_x = x2;
					var f2_y = y2;
					var x2 = x1;
					var y2 = y1;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var p_x = x2;
					var p_y = y2;
					var x2 = p_x - f1_x;
					var y2 = p_y - f1_y;
					var x3 = p_x - f2_x;
					var y3 = p_y - f2_y;
					has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x2 = x1;
					var y2 = y1;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var point1_x = x2;
					var point1_y = y2;
					var x2 = view.x + view.width / 2;
					var y2 = view.y + view.height / 2;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var point2_x = x2;
					var point2_y = y2;
					var x2 = point2_x - point1_x;
					var y2 = point2_y - point1_y;
					has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color2 >> 24 & 255;
			this1.b[position + 1] = color2 >> 16 & 255;
			this1.b[position + 2] = color2 >> 8 & 255;
			this1.b[position + 3] = color2 & 255;
		}
	} else {
		var position = (y1 * this1.getUInt16(0) + x1) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = color2 >> 24 & 255;
		this1.b[position + 1] = color2 >> 16 & 255;
		this1.b[position + 2] = color2 >> 8 & 255;
		this1.b[position + 3] = color2 & 255;
	}
	if(y != (y | 0)) {
		var x1 = Math.floor(x);
		var y1 = Math.ceil(y);
		var Red = (1 - xFraction + yFraction) / 2 * ((color >> 16 & 255) / 255);
		var Green = (1 - xFraction + yFraction) / 2 * ((color >> 8 & 255) / 255);
		var Blue = (1 - xFraction + yFraction) / 2 * ((color & 255) / 255);
		var Alpha = (color >> 24 & 255) / 255;
		if(Alpha == null) {
			Alpha = 1;
		}
		var this2 = 0;
		var color1 = this2;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color1 &= -16711681;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color1 &= -65281;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color1 &= -256;
		color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color1 &= 16777215;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var color2 = color1;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x2 = view.x + view.width / 2 + c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f2_x = x2;
						var f2_y = y2;
						var x2 = x1;
						var y2 = y1;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var p_x = x2;
						var p_y = y2;
						var x2 = p_x - f1_x;
						var y2 = p_y - f1_y;
						var x3 = p_x - f2_x;
						var y3 = p_y - f2_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2 - c;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2 + c;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f2_x = x2;
						var f2_y = y2;
						var x2 = x1;
						var y2 = y1;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var p_x = x2;
						var p_y = y2;
						var x2 = p_x - f1_x;
						var y2 = p_y - f1_y;
						var x3 = p_x - f2_x;
						var y3 = p_y - f2_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x2 = x1;
						var y2 = y1;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var point1_x = x2;
						var point1_y = y2;
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var point2_x = x2;
						var point2_y = y2;
						var x2 = point2_x - point1_x;
						var y2 = point2_y - point1_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color2 >> 24 & 255;
				this1.b[position + 1] = color2 >> 16 & 255;
				this1.b[position + 2] = color2 >> 8 & 255;
				this1.b[position + 3] = color2 & 255;
			}
		} else {
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color2 >> 24 & 255;
			this1.b[position + 1] = color2 >> 16 & 255;
			this1.b[position + 2] = color2 >> 8 & 255;
			this1.b[position + 3] = color2 & 255;
		}
	}
	if(x != (x | 0)) {
		var x1 = Math.ceil(x);
		var y1 = Math.floor(y);
		var Red = (xFraction + (1 - yFraction)) / 2 * ((color >> 16 & 255) / 255);
		var Green = (xFraction + (1 - yFraction)) / 2 * ((color >> 8 & 255) / 255);
		var Blue = (xFraction + (1 - yFraction)) / 2 * ((color & 255) / 255);
		var Alpha = (color >> 24 & 255) / 255;
		if(Alpha == null) {
			Alpha = 1;
		}
		var this2 = 0;
		var color1 = this2;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color1 &= -16711681;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color1 &= -65281;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color1 &= -256;
		color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color1 &= 16777215;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var color2 = color1;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x2 = view.x + view.width / 2 + c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f2_x = x2;
						var f2_y = y2;
						var x2 = x1;
						var y2 = y1;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var p_x = x2;
						var p_y = y2;
						var x2 = p_x - f1_x;
						var y2 = p_y - f1_y;
						var x3 = p_x - f2_x;
						var y3 = p_y - f2_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2 - c;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2 + c;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f2_x = x2;
						var f2_y = y2;
						var x2 = x1;
						var y2 = y1;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var p_x = x2;
						var p_y = y2;
						var x2 = p_x - f1_x;
						var y2 = p_y - f1_y;
						var x3 = p_x - f2_x;
						var y3 = p_y - f2_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x2 = x1;
						var y2 = y1;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var point1_x = x2;
						var point1_y = y2;
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var point2_x = x2;
						var point2_y = y2;
						var x2 = point2_x - point1_x;
						var y2 = point2_y - point1_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color2 >> 24 & 255;
				this1.b[position + 1] = color2 >> 16 & 255;
				this1.b[position + 2] = color2 >> 8 & 255;
				this1.b[position + 3] = color2 & 255;
			}
		} else {
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color2 >> 24 & 255;
			this1.b[position + 1] = color2 >> 16 & 255;
			this1.b[position + 2] = color2 >> 8 & 255;
			this1.b[position + 3] = color2 & 255;
		}
	}
	if(x != (x | 0) && y != (y | 0)) {
		var x1 = Math.ceil(x);
		var y1 = Math.ceil(y);
		var Red = (xFraction + yFraction) / 2 * ((color >> 16 & 255) / 255);
		var Green = (xFraction + yFraction) / 2 * ((color >> 8 & 255) / 255);
		var Blue = (xFraction + yFraction) / 2 * ((color & 255) / 255);
		var Alpha = (color >> 24 & 255) / 255;
		if(Alpha == null) {
			Alpha = 1;
		}
		var this2 = 0;
		var color = this2;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var color1 = color;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x = view.x + view.width / 2 - c;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f1_x = x;
						var f1_y = y;
						var x = view.x + view.width / 2 + c;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f2_x = x;
						var f2_y = y;
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var p_x = x;
						var p_y = y;
						var x = p_x - f1_x;
						var y = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2 - c;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f1_x = x;
						var f1_y = y;
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2 + c;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f2_x = x;
						var f2_y = y;
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var p_x = x;
						var p_y = y;
						var x = p_x - f1_x;
						var y = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var point1_x = x;
						var point1_y = y;
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var point2_x = x;
						var point2_y = y;
						var x = point2_x - point1_x;
						var y = point2_y - point1_y;
						has = Math.sqrt(x * x + y * y) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color1 >> 24 & 255;
				this1.b[position + 1] = color1 >> 16 & 255;
				this1.b[position + 2] = color1 >> 8 & 255;
				this1.b[position + 3] = color1 & 255;
			}
		} else {
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color1 >> 24 & 255;
			this1.b[position + 1] = color1 >> 16 & 255;
			this1.b[position + 2] = color1 >> 8 & 255;
			this1.b[position + 3] = color1 & 255;
		}
	}
};
vision_ds_Image.setUnsafePixel = function(this1,x,y,color) {
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	this1.b[position] = color >> 24 & 255;
	this1.b[position + 1] = color >> 16 & 255;
	this1.b[position + 2] = color >> 8 & 255;
	this1.b[position + 3] = color & 255;
};
vision_ds_Image.paintPixel = function(this1,x,y,color) {
	if(x < 0 || x >= this1.getUInt16(0) || y < 0 || y >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else {
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		var oldColor = this2;
		var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
		if(Alpha == null) {
			Alpha = 1;
		}
		var this2 = 0;
		var color = this2;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var newColor = color;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2 - c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2 + c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var p_x = x1;
						var p_y = y1;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 - c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 + c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var p_x = x1;
						var p_y = y1;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point1_x = x1;
						var point1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point2_x = x1;
						var point2_y = y1;
						var x1 = point2_x - point1_x;
						var y1 = point2_y - point1_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = newColor >> 24 & 255;
				this1.b[position + 1] = newColor >> 16 & 255;
				this1.b[position + 2] = newColor >> 8 & 255;
				this1.b[position + 3] = newColor & 255;
			}
		} else {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = newColor >> 24 & 255;
			this1.b[position + 1] = newColor >> 16 & 255;
			this1.b[position + 2] = newColor >> 8 & 255;
			this1.b[position + 3] = newColor & 255;
		}
	}
};
vision_ds_Image.paintFloatingPixel = function(this1,x,y,color) {
	if(x < 0 || x >= this1.getUInt16(0) || y < 0 || y >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(x,y)));
	} else if(x == (x | 0) && y == (y | 0)) {
		var x1 = Math.floor(x);
		var y1 = Math.floor(y);
		if(x1 < 0 || x1 >= this1.getUInt16(0) || y1 < 0 || y1 >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else {
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			var oldColor = this2;
			var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
			var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
			var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
			var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
			if(Alpha == null) {
				Alpha = 1;
			}
			var this2 = 0;
			var color1 = this2;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color1 &= -16711681;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color1 &= -65281;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color1 &= -256;
			color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color1 &= 16777215;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var newColor = color1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var p_x = x2;
							var p_y = y2;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 - c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 + c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var p_x = x2;
							var p_y = y2;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point1_x = x2;
							var point1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x2 = point2_x - point1_x;
							var y2 = point2_y - point1_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this1.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = newColor >> 24 & 255;
					this1.b[position + 1] = newColor >> 16 & 255;
					this1.b[position + 2] = newColor >> 8 & 255;
					this1.b[position + 3] = newColor & 255;
				}
			} else {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = newColor >> 24 & 255;
				this1.b[position + 1] = newColor >> 16 & 255;
				this1.b[position + 2] = newColor >> 8 & 255;
				this1.b[position + 3] = newColor & 255;
			}
		}
	} else {
		var yFraction = y - (y | 0);
		var xFraction = x - (x | 0);
		var ix = Math.floor(x);
		var iy = Math.floor(y);
		var _g = 0;
		var _g1 = [0,1];
		while(_g < _g1.length) {
			var posX = _g1[_g];
			++_g;
			if(posX == 1 && x == ix) {
				continue;
			}
			var _g2 = 0;
			var _g3 = [0,1];
			while(_g2 < _g3.length) {
				var posY = _g3[_g2];
				++_g2;
				if(posY == 1 && y == iy) {
					continue;
				}
				var x1 = ix + posX;
				var y1 = iy + posY;
				if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this2 = value;
				var oldColor = this2;
				var value1 = ((posX == 0 ? 1 - xFraction : xFraction) + (posY == 0 ? 1 - yFraction : yFraction)) / 2;
				var value2 = Math.round(value1 * 255);
				color &= 16777215;
				color |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 24;
				var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
				var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
				var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
				var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
				if(Alpha == null) {
					Alpha = 1;
				}
				var this3 = 0;
				var color1 = this3;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value3 = Math.round(Red * 255);
				color1 &= -16711681;
				color1 |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 16;
				var value4 = Math.round(Green * 255);
				color1 &= -65281;
				color1 |= (value4 > 255 ? 255 : value4 < 0 ? 0 : value4) << 8;
				var value5 = Math.round(Blue * 255);
				color1 &= -256;
				color1 |= value5 > 255 ? 255 : value5 < 0 ? 0 : value5;
				var value6 = Math.round(Alpha1 * 255);
				color1 &= 16777215;
				color1 |= (value6 > 255 ? 255 : value6 < 0 ? 0 : value6) << 24;
				var newColor = color1;
				var x2 = ix + posX;
				var y2 = iy + posY;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x1 = x2;
					var this_y1 = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this4 = this1.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this4[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x2 < view.x + view.width && y2 < view.y + view.height && x2 >= view.x && y2 >= view.y;
							break;
						case 1:
							has = !(x2 < view.x + view.width && y2 < view.y + view.height && x2 >= view.x && y2 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x3 = view.x + view.width / 2 - c;
								var y3 = view.y + view.height / 2;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var f1_x = x3;
								var f1_y = y3;
								var x4 = view.x + view.width / 2 + c;
								var y4 = view.y + view.height / 2;
								if(y4 == null) {
									y4 = 0;
								}
								if(x4 == null) {
									x4 = 0;
								}
								var f2_x = x4;
								var f2_y = y4;
								var x5 = x2;
								var y5 = y2;
								if(y5 == null) {
									y5 = 0;
								}
								if(x5 == null) {
									x5 = 0;
								}
								var p_x = x5;
								var p_y = y5;
								var x6 = p_x - f1_x;
								var y6 = p_y - f1_y;
								var x7 = p_x - f2_x;
								var y7 = p_y - f2_y;
								has = Math.sqrt(x6 * x6 + y6 * y6) + Math.sqrt(x7 * x7 + y7 * y7) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x8 = view.x + view.width / 2;
								var y8 = view.y + view.height / 2 - c1;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var f1_x1 = x8;
								var f1_y1 = y8;
								var x9 = view.x + view.width / 2;
								var y9 = view.y + view.height / 2 + c1;
								if(y9 == null) {
									y9 = 0;
								}
								if(x9 == null) {
									x9 = 0;
								}
								var f2_x1 = x9;
								var f2_y1 = y9;
								var x10 = x2;
								var y10 = y2;
								if(y10 == null) {
									y10 = 0;
								}
								if(x10 == null) {
									x10 = 0;
								}
								var p_x1 = x10;
								var p_y1 = y10;
								var x11 = p_x1 - f1_x1;
								var y11 = p_y1 - f1_y1;
								var x12 = p_x1 - f2_x1;
								var y12 = p_y1 - f2_y1;
								has = Math.sqrt(x11 * x11 + y11 * y11) + Math.sqrt(x12 * x12 + y12 * y12) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x13 = x2;
								var y13 = y2;
								if(y13 == null) {
									y13 = 0;
								}
								if(x13 == null) {
									x13 = 0;
								}
								var point1_x = x13;
								var point1_y = y13;
								var x14 = view.x + view.width / 2;
								var y14 = view.y + view.height / 2;
								if(y14 == null) {
									y14 = 0;
								}
								if(x14 == null) {
									x14 = 0;
								}
								var point2_x = x14;
								var point2_y = y14;
								var x15 = point2_x - point1_x;
								var y15 = point2_y - point1_y;
								has = Math.sqrt(x15 * x15 + y15 * y15) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y2 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y2 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position1 = (y2 * this1.getUInt16(0) + x2) * 4;
						position1 += vision_ds_Image.OFFSET;
						this1.b[position1] = newColor >> 24 & 255;
						this1.b[position1 + 1] = newColor >> 16 & 255;
						this1.b[position1 + 2] = newColor >> 8 & 255;
						this1.b[position1 + 3] = newColor & 255;
					}
				} else {
					var position2 = (y2 * this1.getUInt16(0) + x2) * 4;
					position2 += vision_ds_Image.OFFSET;
					this1.b[position2] = newColor >> 24 & 255;
					this1.b[position2 + 1] = newColor >> 16 & 255;
					this1.b[position2 + 2] = newColor >> 8 & 255;
					this1.b[position2 + 3] = newColor & 255;
				}
			}
		}
	}
};
vision_ds_Image.paintSafePixel = function(this1,x,y,color) {
	var x1 = vision_tools_MathTools.boundInt(x,0,this1.getUInt16(0) - 1);
	var y1 = vision_tools_MathTools.boundInt(y,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
	if(x1 < 0 || x1 >= this1.getUInt16(0) || y1 < 0 || y1 >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else {
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y1 * this1.getUInt16(0) + x1) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		var oldColor = this2;
		var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
		if(Alpha == null) {
			Alpha = 1;
		}
		var this2 = 0;
		var color = this2;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var newColor = color;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x = view.x + view.width / 2 - c;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f1_x = x;
						var f1_y = y;
						var x = view.x + view.width / 2 + c;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f2_x = x;
						var f2_y = y;
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var p_x = x;
						var p_y = y;
						var x = p_x - f1_x;
						var y = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2 - c;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f1_x = x;
						var f1_y = y;
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2 + c;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f2_x = x;
						var f2_y = y;
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var p_x = x;
						var p_y = y;
						var x = p_x - f1_x;
						var y = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var point1_x = x;
						var point1_y = y;
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var point2_x = x;
						var point2_y = y;
						var x = point2_x - point1_x;
						var y = point2_y - point1_y;
						has = Math.sqrt(x * x + y * y) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = newColor >> 24 & 255;
				this1.b[position + 1] = newColor >> 16 & 255;
				this1.b[position + 2] = newColor >> 8 & 255;
				this1.b[position + 3] = newColor & 255;
			}
		} else {
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = newColor >> 24 & 255;
			this1.b[position + 1] = newColor >> 16 & 255;
			this1.b[position + 2] = newColor >> 8 & 255;
			this1.b[position + 3] = newColor & 255;
		}
	}
};
vision_ds_Image.paintUnsafePixel = function(this1,x,y,color) {
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var oldColor = this2;
	var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
	var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
	var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
	var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
	if(Alpha == null) {
		Alpha = 1;
	}
	var this2 = 0;
	var color = this2;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = Math.round(Red * 255);
	color &= -16711681;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	color &= -65281;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	color &= -256;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	var newColor = color;
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	this1.b[position] = newColor >> 24 & 255;
	this1.b[position + 1] = newColor >> 16 & 255;
	this1.b[position + 2] = newColor >> 8 & 255;
	this1.b[position + 3] = newColor & 255;
};
vision_ds_Image.hasPixel = function(this1,x,y) {
	if(x >= 0 && y >= 0 && x < this1.getUInt16(0)) {
		return y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
	} else {
		return false;
	}
};
vision_ds_Image.copyPixelFrom = function(this1,image,x,y) {
	if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * image.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var c = this2;
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c1 = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c1;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c1;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c1 = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c1;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c1;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = c >> 24 & 255;
			this1.b[position + 1] = c >> 16 & 255;
			this1.b[position + 2] = c >> 8 & 255;
			this1.b[position + 3] = c & 255;
		}
	} else {
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = c >> 24 & 255;
		this1.b[position + 1] = c >> 16 & 255;
		this1.b[position + 2] = c >> 8 & 255;
		this1.b[position + 3] = c & 255;
	}
	return c;
};
vision_ds_Image.copyPixelTo = function(this1,image,x,y) {
	var image1 = this1;
	if(!(x >= 0 && y >= 0 && x < image1.getUInt16(0) && y < Math.ceil((image1.length - vision_ds_Image.OFFSET) / (image1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * image1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = image1.b[position] << 24 | image1.b[position + 1] << 16 | image1.b[position + 2] << 8 | image1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this1 = value;
	var c = this1;
	if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
	} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var image1 = image.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c1 = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c1;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c1;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c1 = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c1;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c1;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var p_x = x1;
					var p_y = y1;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * image.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			image.b[position] = c >> 24 & 255;
			image.b[position + 1] = c >> 16 & 255;
			image.b[position + 2] = c >> 8 & 255;
			image.b[position + 3] = c & 255;
		}
	} else {
		var position = (y * image.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		image.b[position] = c >> 24 & 255;
		image.b[position + 1] = c >> 16 & 255;
		image.b[position + 2] = c >> 8 & 255;
		image.b[position + 3] = c & 255;
	}
	return c;
};
vision_ds_Image.getImagePortion = function(this1,rect) {
	var width = rect.width;
	var height = rect.height;
	var color = 0;
	if(color == null) {
		color = 0;
	}
	var this2 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
	var this3 = this2;
	this3.setUInt16(0,width);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
	this3.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this3.length) {
		this3.b[i] = color >> 24 & 255;
		this3.b[i + 1] = color >> 16 & 255;
		this3.b[i + 2] = color >> 8 & 255;
		this3.b[i + 3] = color & 255;
		i += 4;
	}
	var subImage = this3;
	var _g = rect.x;
	var _g1 = rect.x + rect.width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = rect.y;
		var _g3 = rect.y + rect.height;
		while(_g2 < _g3) {
			var y = _g2++;
			var x1 = x - rect.x;
			var y1 = y - rect.y;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			var color = this2;
			if(!(x1 >= 0 && y1 >= 0 && x1 < subImage.getUInt16(0) && y1 < Math.ceil((subImage.length - vision_ds_Image.OFFSET) / (subImage.getUInt16(0) * 4)))) {
				var this_x1 = x1;
				var this_y1 = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(subImage,new vision_ds_Point2D(this_x1,this_y1)));
			} else if(subImage.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != subImage.getUInt16(0) || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((subImage.length - vision_ds_Image.OFFSET) / (subImage.getUInt16(0) * 4)) || subImage.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(subImage.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != subImage.getUInt16(0) || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((subImage.length - vision_ds_Image.OFFSET) / (subImage.getUInt16(0) * 4)) || subImage.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < subImage.getUInt16(0) && y1 < Math.ceil((subImage.length - vision_ds_Image.OFFSET) / (subImage.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = subImage.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var subImage1 = subImage.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),subImage1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var x4 = x1;
							var y4 = y1;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var p_x = x4;
							var p_y = y4;
							var x5 = p_x - f1_x;
							var y5 = p_y - f1_y;
							var x6 = p_x - f2_x;
							var y6 = p_y - f2_y;
							has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 - c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f1_x1 = x7;
							var f1_y1 = y7;
							var x8 = view.x + view.width / 2;
							var y8 = view.y + view.height / 2 + c1;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var f2_x1 = x8;
							var f2_y1 = y8;
							var x9 = x1;
							var y9 = y1;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var p_x1 = x9;
							var p_y1 = y9;
							var x10 = p_x1 - f1_x1;
							var y10 = p_y1 - f1_y1;
							var x11 = p_x1 - f2_x1;
							var y11 = p_y1 - f2_y1;
							has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x12 = x1;
							var y12 = y1;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point1_x = x12;
							var point1_y = y12;
							var x13 = view.x + view.width / 2;
							var y13 = view.y + view.height / 2;
							if(y13 == null) {
								y13 = 0;
							}
							if(x13 == null) {
								x13 = 0;
							}
							var point2_x = x13;
							var point2_y = y13;
							var x14 = point2_x - point1_x;
							var y14 = point2_y - point1_y;
							has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position1 = (y1 * subImage.getUInt16(0) + x1) * 4;
					position1 += vision_ds_Image.OFFSET;
					subImage.b[position1] = color >> 24 & 255;
					subImage.b[position1 + 1] = color >> 16 & 255;
					subImage.b[position1 + 2] = color >> 8 & 255;
					subImage.b[position1 + 3] = color & 255;
				}
			} else {
				var position2 = (y1 * subImage.getUInt16(0) + x1) * 4;
				position2 += vision_ds_Image.OFFSET;
				subImage.b[position2] = color >> 24 & 255;
				subImage.b[position2 + 1] = color >> 16 & 255;
				subImage.b[position2 + 2] = color >> 8 & 255;
				subImage.b[position2 + 3] = color & 255;
			}
		}
	}
	return subImage;
};
vision_ds_Image.setImagePortion = function(this1,rect,image) {
	var _g = rect.x;
	var _g1 = rect.x + rect.width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = rect.y;
		var _g3 = rect.y + rect.height;
		while(_g2 < _g3) {
			var y = _g2++;
			var x1 = x - rect.x;
			var y1 = y - rect.y;
			if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * image.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			var color = this2;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x1 = x;
				var this_y1 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this3 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var x4 = x;
							var y4 = y;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var p_x = x4;
							var p_y = y4;
							var x5 = p_x - f1_x;
							var y5 = p_y - f1_y;
							var x6 = p_x - f2_x;
							var y6 = p_y - f2_y;
							has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 - c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f1_x1 = x7;
							var f1_y1 = y7;
							var x8 = view.x + view.width / 2;
							var y8 = view.y + view.height / 2 + c1;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var f2_x1 = x8;
							var f2_y1 = y8;
							var x9 = x;
							var y9 = y;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var p_x1 = x9;
							var p_y1 = y9;
							var x10 = p_x1 - f1_x1;
							var y10 = p_y1 - f1_y1;
							var x11 = p_x1 - f2_x1;
							var y11 = p_y1 - f2_y1;
							has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x12 = x;
							var y12 = y;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point1_x = x12;
							var point1_y = y12;
							var x13 = view.x + view.width / 2;
							var y13 = view.y + view.height / 2;
							if(y13 == null) {
								y13 = 0;
							}
							if(x13 == null) {
								x13 = 0;
							}
							var point2_x = x13;
							var point2_y = y13;
							var x14 = point2_x - point1_x;
							var y14 = point2_y - point1_y;
							has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position1 = (y * this1.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					this1.b[position1] = color >> 24 & 255;
					this1.b[position1 + 1] = color >> 16 & 255;
					this1.b[position1 + 2] = color >> 8 & 255;
					this1.b[position1 + 3] = color & 255;
				}
			} else {
				var position2 = (y * this1.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color >> 24 & 255;
				this1.b[position2 + 1] = color >> 16 & 255;
				this1.b[position2 + 2] = color >> 8 & 255;
				this1.b[position2 + 3] = color & 255;
			}
		}
	}
};
vision_ds_Image.drawLine = function(this1,x1,y1,x2,y2,color) {
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	while(true) {
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x = view.x + view.width / 2 - c;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f1_x = x;
						var f1_y = y;
						var x3 = view.x + view.width / 2 + c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f2_x = x3;
						var f2_y = y3;
						var x4 = x1;
						var y4 = y1;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var p_x = x4;
						var p_y = y4;
						var x5 = p_x - f1_x;
						var y5 = p_y - f1_y;
						var x6 = p_x - f2_x;
						var y6 = p_y - f2_y;
						has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x7 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 - c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f1_x1 = x7;
						var f1_y1 = y7;
						var x8 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 + c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f2_x1 = x8;
						var f2_y1 = y8;
						var x9 = x1;
						var y9 = y1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var p_x1 = x9;
						var p_y1 = y9;
						var x10 = p_x1 - f1_x1;
						var y10 = p_y1 - f1_y1;
						var x11 = p_x1 - f2_x1;
						var y11 = p_y1 - f2_y1;
						has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x12 = x1;
						var y12 = y1;
						if(y12 == null) {
							y12 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point1_x = x12;
						var point1_y = y12;
						var x13 = view.x + view.width / 2;
						var y13 = view.y + view.height / 2;
						if(y13 == null) {
							y13 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point2_x = x13;
						var point2_y = y13;
						var x14 = point2_x - point1_x;
						var y14 = point2_y - point1_y;
						has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		if(x1 == x2 && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
};
vision_ds_Image.drawRay2D = function(this1,line,color) {
	var px = line.point.x;
	var py = line.point.y;
	var x = (0 - (px > 0 ? py - line.slope * px : py + line.slope * px)) / line.slope;
	var y = 0;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p_x = x;
	var p_y = y;
	var p1_x = p_x | 0;
	var p1_y = p_y | 0;
	var y = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var px = line.point.x;
	var py = line.point.y;
	var x = (y - (px > 0 ? py - line.slope * px : py + line.slope * px)) / line.slope;
	var y1 = y;
	if(y1 == null) {
		y1 = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p_x = x;
	var p_y = y1;
	var p2_x = p_x | 0;
	var p2_y = p_y | 0;
	var x1 = p1_x;
	var y1 = p1_y;
	var x2 = p2_x;
	var y2 = p2_y;
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	while(true) {
		if(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x = view.x + view.width / 2 - c;
							var y = view.y + view.height / 2;
							if(y == null) {
								y = 0;
							}
							if(x == null) {
								x = 0;
							}
							var f1_x = x;
							var f1_y = y;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var x4 = x1;
							var y4 = y1;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var p_x = x4;
							var p_y = y4;
							var x5 = p_x - f1_x;
							var y5 = p_y - f1_y;
							var x6 = p_x - f2_x;
							var y6 = p_y - f2_y;
							has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 - c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f1_x1 = x7;
							var f1_y1 = y7;
							var x8 = view.x + view.width / 2;
							var y8 = view.y + view.height / 2 + c1;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var f2_x1 = x8;
							var f2_y1 = y8;
							var x9 = x1;
							var y9 = y1;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var p_x1 = x9;
							var p_y1 = y9;
							var x10 = p_x1 - f1_x1;
							var y10 = p_y1 - f1_y1;
							var x11 = p_x1 - f2_x1;
							var y11 = p_y1 - f2_y1;
							has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x12 = x1;
							var y12 = y1;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point1_x = x12;
							var point1_y = y12;
							var x13 = view.x + view.width / 2;
							var y13 = view.y + view.height / 2;
							if(y13 == null) {
								y13 = 0;
							}
							if(x13 == null) {
								x13 = 0;
							}
							var point2_x = x13;
							var point2_y = y13;
							var x14 = point2_x - point1_x;
							var y14 = point2_y - point1_y;
							has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this1.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255;
					this1.b[position + 1] = color >> 16 & 255;
					this1.b[position + 2] = color >> 8 & 255;
					this1.b[position + 3] = color & 255;
				}
			} else {
				var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255;
				this1.b[position1 + 1] = color >> 16 & 255;
				this1.b[position1 + 2] = color >> 8 & 255;
				this1.b[position1 + 3] = color & 255;
			}
		}
		if(x1 == x2 && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
};
vision_ds_Image.drawLine2D = function(this1,line,color) {
	var p = line.start;
	var p1_x = p.x | 0;
	var p1_y = p.y | 0;
	var p = line.end;
	var p2_x = p.x | 0;
	var p2_y = p.y | 0;
	var x1 = p1_x;
	var y1 = p1_y;
	var x2 = p2_x;
	var y2 = p2_y;
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	while(true) {
		if(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x = view.x + view.width / 2 - c;
							var y = view.y + view.height / 2;
							if(y == null) {
								y = 0;
							}
							if(x == null) {
								x = 0;
							}
							var f1_x = x;
							var f1_y = y;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var x4 = x1;
							var y4 = y1;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var p_x = x4;
							var p_y = y4;
							var x5 = p_x - f1_x;
							var y5 = p_y - f1_y;
							var x6 = p_x - f2_x;
							var y6 = p_y - f2_y;
							has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 - c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f1_x1 = x7;
							var f1_y1 = y7;
							var x8 = view.x + view.width / 2;
							var y8 = view.y + view.height / 2 + c1;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var f2_x1 = x8;
							var f2_y1 = y8;
							var x9 = x1;
							var y9 = y1;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var p_x1 = x9;
							var p_y1 = y9;
							var x10 = p_x1 - f1_x1;
							var y10 = p_y1 - f1_y1;
							var x11 = p_x1 - f2_x1;
							var y11 = p_y1 - f2_y1;
							has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x12 = x1;
							var y12 = y1;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point1_x = x12;
							var point1_y = y12;
							var x13 = view.x + view.width / 2;
							var y13 = view.y + view.height / 2;
							if(y13 == null) {
								y13 = 0;
							}
							if(x13 == null) {
								x13 = 0;
							}
							var point2_x = x13;
							var point2_y = y13;
							var x14 = point2_x - point1_x;
							var y14 = point2_y - point1_y;
							has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this1.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255;
					this1.b[position + 1] = color >> 16 & 255;
					this1.b[position + 2] = color >> 8 & 255;
					this1.b[position + 3] = color & 255;
				}
			} else {
				var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255;
				this1.b[position1 + 1] = color >> 16 & 255;
				this1.b[position1 + 2] = color >> 8 & 255;
				this1.b[position1 + 3] = color & 255;
			}
		}
		if(x1 == x2 && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
};
vision_ds_Image.fillRect = function(this1,x,y,width,height,color) {
	var _g = x;
	var _g1 = x + width;
	while(_g < _g1) {
		var X = _g++;
		var _g2 = y;
		var _g3 = y + height;
		while(_g2 < _g3) {
			var Y = _g2++;
			if(!(X >= 0 && Y >= 0 && X < this1.getUInt16(0) && Y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = X;
				var this_y = Y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = X >= 0 && Y >= 0 && X < this1.getUInt16(0) && Y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = X < view.x + view.width && Y < view.y + view.height && X >= view.x && Y >= view.y;
						break;
					case 1:
						has = !(X < view.x + view.width && Y < view.y + view.height && X >= view.x && Y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x == null) {
								x = 0;
							}
							var f1_x = x;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y2;
							var x2 = X;
							var y3 = Y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var p_x = x2;
							var p_y = y3;
							var x3 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x4 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x3 * x3 + y4 * y4) + Math.sqrt(x4 * x4 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x5 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f1_x1 = x5;
							var f1_y1 = y6;
							var x6 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f2_x1 = x6;
							var f2_y1 = y7;
							var x7 = X;
							var y8 = Y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var p_x1 = x7;
							var p_y1 = y8;
							var x8 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x9 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x8 * x8 + y9 * y9) + Math.sqrt(x9 * x9 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x10 = X;
							var y11 = Y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point1_x = x10;
							var point1_y = y11;
							var x11 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point2_x = x11;
							var point2_y = y12;
							var x12 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x12 * x12 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(X - view.x - view.width / 2) / (view.width / 2) + Math.abs(Y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(X - view.x - view.width / 2) / (view.width / 2) + Math.abs(Y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (Y * this1.getUInt16(0) + X) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255;
					this1.b[position + 1] = color >> 16 & 255;
					this1.b[position + 2] = color >> 8 & 255;
					this1.b[position + 3] = color & 255;
				}
			} else {
				var position1 = (Y * this1.getUInt16(0) + X) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255;
				this1.b[position1 + 1] = color >> 16 & 255;
				this1.b[position1 + 2] = color >> 8 & 255;
				this1.b[position1 + 3] = color & 255;
			}
		}
	}
};
vision_ds_Image.drawRect = function(this1,x,y,width,height,color) {
	var x1 = x;
	var y1 = y;
	var x2 = x + width;
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y ? 1 : -1;
	var err = dx - dy;
	while(true) {
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x3 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f1_x = x3;
						var f1_y = y2;
						var x4 = view.x + view.width / 2 + c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var f2_x = x4;
						var f2_y = y3;
						var x5 = x1;
						var y4 = y1;
						if(y4 == null) {
							y4 = 0;
						}
						if(x5 == null) {
							x5 = 0;
						}
						var p_x = x5;
						var p_y = y4;
						var x6 = p_x - f1_x;
						var y5 = p_y - f1_y;
						var x7 = p_x - f2_x;
						var y6 = p_y - f2_y;
						has = Math.sqrt(x6 * x6 + y5 * y5) + Math.sqrt(x7 * x7 + y6 * y6) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x8 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 - c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f1_x1 = x8;
						var f1_y1 = y7;
						var x9 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 + c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var f2_x1 = x9;
						var f2_y1 = y8;
						var x10 = x1;
						var y9 = y1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x10 == null) {
							x10 = 0;
						}
						var p_x1 = x10;
						var p_y1 = y9;
						var x11 = p_x1 - f1_x1;
						var y10 = p_y1 - f1_y1;
						var x12 = p_x1 - f2_x1;
						var y11 = p_y1 - f2_y1;
						has = Math.sqrt(x11 * x11 + y10 * y10) + Math.sqrt(x12 * x12 + y11 * y11) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x13 = x1;
						var y12 = y1;
						if(y12 == null) {
							y12 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point1_x = x13;
						var point1_y = y12;
						var x14 = view.x + view.width / 2;
						var y13 = view.y + view.height / 2;
						if(y13 == null) {
							y13 = 0;
						}
						if(x14 == null) {
							x14 = 0;
						}
						var point2_x = x14;
						var point2_y = y13;
						var x15 = point2_x - point1_x;
						var y14 = point2_y - point1_y;
						has = Math.sqrt(x15 * x15 + y14 * y14) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		if(x1 == x2 && y1 == y) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
	var x1 = x + width;
	var y1 = y;
	var x2 = x + width;
	var y2 = y + height;
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	while(true) {
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x3 = view.x + view.width / 2 - c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f1_x = x3;
						var f1_y = y3;
						var x4 = view.x + view.width / 2 + c;
						var y4 = view.y + view.height / 2;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var f2_x = x4;
						var f2_y = y4;
						var x5 = x1;
						var y5 = y1;
						if(y5 == null) {
							y5 = 0;
						}
						if(x5 == null) {
							x5 = 0;
						}
						var p_x = x5;
						var p_y = y5;
						var x6 = p_x - f1_x;
						var y6 = p_y - f1_y;
						var x7 = p_x - f2_x;
						var y7 = p_y - f2_y;
						has = Math.sqrt(x6 * x6 + y6 * y6) + Math.sqrt(x7 * x7 + y7 * y7) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x8 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 - c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f1_x1 = x8;
						var f1_y1 = y8;
						var x9 = view.x + view.width / 2;
						var y9 = view.y + view.height / 2 + c1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var f2_x1 = x9;
						var f2_y1 = y9;
						var x10 = x1;
						var y10 = y1;
						if(y10 == null) {
							y10 = 0;
						}
						if(x10 == null) {
							x10 = 0;
						}
						var p_x1 = x10;
						var p_y1 = y10;
						var x11 = p_x1 - f1_x1;
						var y11 = p_y1 - f1_y1;
						var x12 = p_x1 - f2_x1;
						var y12 = p_y1 - f2_y1;
						has = Math.sqrt(x11 * x11 + y11 * y11) + Math.sqrt(x12 * x12 + y12 * y12) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x13 = x1;
						var y13 = y1;
						if(y13 == null) {
							y13 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point1_x = x13;
						var point1_y = y13;
						var x14 = view.x + view.width / 2;
						var y14 = view.y + view.height / 2;
						if(y14 == null) {
							y14 = 0;
						}
						if(x14 == null) {
							x14 = 0;
						}
						var point2_x = x14;
						var point2_y = y14;
						var x15 = point2_x - point1_x;
						var y15 = point2_y - point1_y;
						has = Math.sqrt(x15 * x15 + y15 * y15) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		if(x1 == x2 && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
	var x1 = x + width;
	var y1 = y + height;
	var y2 = y + height;
	var dx = Math.abs(x - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	while(true) {
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2 - c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y3;
						var x3 = view.x + view.width / 2 + c;
						var y4 = view.y + view.height / 2;
						if(y4 == null) {
							y4 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f2_x = x3;
						var f2_y = y4;
						var x4 = x1;
						var y5 = y1;
						if(y5 == null) {
							y5 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var p_x = x4;
						var p_y = y5;
						var x5 = p_x - f1_x;
						var y6 = p_y - f1_y;
						var x6 = p_x - f2_x;
						var y7 = p_y - f2_y;
						has = Math.sqrt(x5 * x5 + y6 * y6) + Math.sqrt(x6 * x6 + y7 * y7) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x7 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 - c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f1_x1 = x7;
						var f1_y1 = y8;
						var x8 = view.x + view.width / 2;
						var y9 = view.y + view.height / 2 + c1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f2_x1 = x8;
						var f2_y1 = y9;
						var x9 = x1;
						var y10 = y1;
						if(y10 == null) {
							y10 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var p_x1 = x9;
						var p_y1 = y10;
						var x10 = p_x1 - f1_x1;
						var y11 = p_y1 - f1_y1;
						var x11 = p_x1 - f2_x1;
						var y12 = p_y1 - f2_y1;
						has = Math.sqrt(x10 * x10 + y11 * y11) + Math.sqrt(x11 * x11 + y12 * y12) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x12 = x1;
						var y13 = y1;
						if(y13 == null) {
							y13 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point1_x = x12;
						var point1_y = y13;
						var x13 = view.x + view.width / 2;
						var y14 = view.y + view.height / 2;
						if(y14 == null) {
							y14 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point2_x = x13;
						var point2_y = y14;
						var x14 = point2_x - point1_x;
						var y15 = point2_y - point1_y;
						has = Math.sqrt(x14 * x14 + y15 * y15) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		if(x1 == x && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
	var x1 = x;
	var y1 = y + height;
	var dx = Math.abs(x - x1);
	var dy = Math.abs(y - y1);
	var sx = x1 < x ? 1 : -1;
	var sy = y1 < y ? 1 : -1;
	var err = dx - dy;
	while(true) {
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x3 = view.x + view.width / 2 + c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f2_x = x3;
						var f2_y = y3;
						var x4 = x1;
						var y4 = y1;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var p_x = x4;
						var p_y = y4;
						var x5 = p_x - f1_x;
						var y5 = p_y - f1_y;
						var x6 = p_x - f2_x;
						var y6 = p_y - f2_y;
						has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x7 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 - c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f1_x1 = x7;
						var f1_y1 = y7;
						var x8 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 + c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f2_x1 = x8;
						var f2_y1 = y8;
						var x9 = x1;
						var y9 = y1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var p_x1 = x9;
						var p_y1 = y9;
						var x10 = p_x1 - f1_x1;
						var y10 = p_y1 - f1_y1;
						var x11 = p_x1 - f2_x1;
						var y11 = p_y1 - f2_y1;
						has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x12 = x1;
						var y12 = y1;
						if(y12 == null) {
							y12 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point1_x = x12;
						var point1_y = y12;
						var x13 = view.x + view.width / 2;
						var y13 = view.y + view.height / 2;
						if(y13 == null) {
							y13 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point2_x = x13;
						var point2_y = y13;
						var x14 = point2_x - point1_x;
						var y14 = point2_y - point1_y;
						has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		if(x1 == x && y1 == y) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
};
vision_ds_Image.drawQuadraticBezier = function(this1,line,control,color,accuracy) {
	if(accuracy == null) {
		accuracy = 1000;
	}
	var bezier = function(t,p0,p1,p2) {
		var t2 = t * t;
		var t3 = t2 * t;
		var x = p0.x * (1 - t) * (1 - t) + p1.x * 2 * t * (1 - t) + p2.x * t * t;
		var y = p0.y * (1 - t) * (1 - t) + p1.y * 2 * t * (1 - t) + p2.y * t * t;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p_x = x;
		var p_y = y;
		var this1 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
		return this1;
	};
	var p = line.start;
	var this2 = new vision_ds__$IntPoint2D_Impl(p.x | 0,p.y | 0);
	var p0 = this2;
	var p = line.end;
	var this2 = new vision_ds__$IntPoint2D_Impl(p.x | 0,p.y | 0);
	var p1 = this2;
	var x = control.x;
	var y = control.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p_x = x;
	var p_y = y;
	var this2 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
	var p2 = this2;
	var i = 0.;
	var step = 1 / accuracy;
	while(i <= 1) {
		var p = bezier(i,p0,p1,p2);
		var x = p.x;
		var y = p.y;
		if(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
			var x1 = p.x;
			var y1 = p.y;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var x4 = x1;
							var y4 = y1;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var p_x = x4;
							var p_y = y4;
							var x5 = p_x - f1_x;
							var y5 = p_y - f1_y;
							var x6 = p_x - f2_x;
							var y6 = p_y - f2_y;
							has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 - c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f1_x1 = x7;
							var f1_y1 = y7;
							var x8 = view.x + view.width / 2;
							var y8 = view.y + view.height / 2 + c1;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var f2_x1 = x8;
							var f2_y1 = y8;
							var x9 = x1;
							var y9 = y1;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var p_x1 = x9;
							var p_y1 = y9;
							var x10 = p_x1 - f1_x1;
							var y10 = p_y1 - f1_y1;
							var x11 = p_x1 - f2_x1;
							var y11 = p_y1 - f2_y1;
							has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x12 = x1;
							var y12 = y1;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point1_x = x12;
							var point1_y = y12;
							var x13 = view.x + view.width / 2;
							var y13 = view.y + view.height / 2;
							if(y13 == null) {
								y13 = 0;
							}
							if(x13 == null) {
								x13 = 0;
							}
							var point2_x = x13;
							var point2_y = y13;
							var x14 = point2_x - point1_x;
							var y14 = point2_y - point1_y;
							has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this1.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255;
					this1.b[position + 1] = color >> 16 & 255;
					this1.b[position + 2] = color >> 8 & 255;
					this1.b[position + 3] = color & 255;
				}
			} else {
				var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255;
				this1.b[position1 + 1] = color >> 16 & 255;
				this1.b[position1 + 2] = color >> 8 & 255;
				this1.b[position1 + 3] = color & 255;
			}
		}
		i += step;
	}
};
vision_ds_Image.drawCubicBezier = function(this1,line,control1,control2,color,accuracy) {
	if(accuracy == null) {
		accuracy = 1000;
	}
	var i = 0.;
	var step = 1 / accuracy;
	while(i < 1) {
		var p = line.start;
		var p0_x = p.x | 0;
		var p0_y = p.y | 0;
		var p1 = line.end;
		var p1_x = p1.x | 0;
		var p1_y = p1.y | 0;
		var cX = 3 * (p1_x - p0_x);
		var bX = 3 * (control1.x - p1_x) - cX;
		var aX = control2.x - p0_x - cX - bX;
		var cY = 3 * (p1_y - p0_y);
		var bY = 3 * (control1.y - p1_y) - cY;
		var aY = control2.y - p0_y - cY - bY;
		var x = aX * Math.pow(i,3) + bX * Math.pow(i,2) + cX * i + p0_x;
		var y = aY * Math.pow(i,3) + bY * Math.pow(i,2) + cY * i + p0_y;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p_x = x1;
		var p_y = y1;
		var p_x1 = p_x | 0;
		var p_y1 = p_y | 0;
		var x2 = p_x1;
		var y2 = p_y1;
		if(x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
			var x3 = p_x1;
			var y3 = p_y1;
			if(!(x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x3;
				var this_y = y3;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x3 < view.x + view.width && y3 < view.y + view.height && x3 >= view.x && y3 >= view.y;
						break;
					case 1:
						has = !(x3 < view.x + view.width && y3 < view.y + view.height && x3 >= view.x && y3 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x4 = view.x + view.width / 2 - c;
							var y4 = view.y + view.height / 2;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var f1_x = x4;
							var f1_y = y4;
							var x5 = view.x + view.width / 2 + c;
							var y5 = view.y + view.height / 2;
							if(y5 == null) {
								y5 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f2_x = x5;
							var f2_y = y5;
							var x6 = x3;
							var y6 = y3;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var p_x2 = x6;
							var p_y2 = y6;
							var x7 = p_x2 - f1_x;
							var y7 = p_y2 - f1_y;
							var x8 = p_x2 - f2_x;
							var y8 = p_y2 - f2_y;
							has = Math.sqrt(x7 * x7 + y7 * y7) + Math.sqrt(x8 * x8 + y8 * y8) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x9 = view.x + view.width / 2;
							var y9 = view.y + view.height / 2 - c1;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var f1_x1 = x9;
							var f1_y1 = y9;
							var x10 = view.x + view.width / 2;
							var y10 = view.y + view.height / 2 + c1;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var f2_x1 = x10;
							var f2_y1 = y10;
							var x11 = x3;
							var y11 = y3;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var p_x3 = x11;
							var p_y3 = y11;
							var x12 = p_x3 - f1_x1;
							var y12 = p_y3 - f1_y1;
							var x13 = p_x3 - f2_x1;
							var y13 = p_y3 - f2_y1;
							has = Math.sqrt(x12 * x12 + y12 * y12) + Math.sqrt(x13 * x13 + y13 * y13) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x14 = x3;
							var y14 = y3;
							if(y14 == null) {
								y14 = 0;
							}
							if(x14 == null) {
								x14 = 0;
							}
							var point1_x = x14;
							var point1_y = y14;
							var x15 = view.x + view.width / 2;
							var y15 = view.y + view.height / 2;
							if(y15 == null) {
								y15 = 0;
							}
							if(x15 == null) {
								x15 = 0;
							}
							var point2_x = x15;
							var point2_y = y15;
							var x16 = point2_x - point1_x;
							var y16 = point2_y - point1_y;
							has = Math.sqrt(x16 * x16 + y16 * y16) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x3 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y3 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x3 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y3 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y3 * this1.getUInt16(0) + x3) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255;
					this1.b[position + 1] = color >> 16 & 255;
					this1.b[position + 2] = color >> 8 & 255;
					this1.b[position + 3] = color & 255;
				}
			} else {
				var position1 = (y3 * this1.getUInt16(0) + x3) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255;
				this1.b[position1 + 1] = color >> 16 & 255;
				this1.b[position1 + 2] = color >> 8 & 255;
				this1.b[position1 + 3] = color & 255;
			}
		}
		i += step;
	}
};
vision_ds_Image.fillCircle = function(this1,X,Y,r,color) {
	var points = [];
	var x = -r;
	var y = 0;
	var err = 2 - 2 * r;
	while(true) {
		var x1 = X + x;
		var y1 = Y - y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p_x = x1;
		var p_y = y1;
		var this2 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
		points.push(this2);
		var x2 = X - x;
		var y2 = Y + y;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p_x1 = x2;
		var p_y1 = y2;
		var this3 = new vision_ds__$IntPoint2D_Impl(p_x1 | 0,p_y1 | 0);
		points.push(this3);
		var x3 = X - y;
		var y3 = Y - x;
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		var p_x2 = x3;
		var p_y2 = y3;
		var this4 = new vision_ds__$IntPoint2D_Impl(p_x2 | 0,p_y2 | 0);
		points.push(this4);
		var x4 = X + y;
		var y4 = Y + x;
		if(y4 == null) {
			y4 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var p_x3 = x4;
		var p_y3 = y4;
		var this5 = new vision_ds__$IntPoint2D_Impl(p_x3 | 0,p_y3 | 0);
		points.push(this5);
		r = err;
		if(r <= y) {
			err += ++y * 2 + 1;
		}
		if(r > x || err > y) {
			err += ++x * 2 + 1;
		}
		if(!(x < 0)) {
			break;
		}
	}
	var values = [];
	var _g = 0;
	while(_g < points.length) {
		var p = points[_g];
		++_g;
		if(values[p.x] == null) {
			values[p.x] = [];
		}
		values[p.x].push(p.y);
	}
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var y = _g++;
		if(values[y] == null) {
			continue;
		}
		var values1 = values[y];
		var min = values1[0];
		var _g2 = 0;
		var _g3 = values1.length;
		while(_g2 < _g3) {
			var i = _g2++;
			if(values1[i] < min) {
				min = values1[i];
			}
		}
		var min1 = min;
		var values2 = values[y];
		var max = values2[0];
		var _g4 = 0;
		var _g5 = values2.length;
		while(_g4 < _g5) {
			var i1 = _g4++;
			if(values2[i1] > max) {
				max = values2[i1];
			}
		}
		var max1 = max;
		var _g6 = min1;
		var _g7 = max1 + 1;
		while(_g6 < _g7) {
			var i2 = _g6++;
			if(!(i2 >= 0 && y >= 0 && i2 < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = i2;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = i2 >= 0 && y >= 0 && i2 < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g8,_g9,_g10,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = i2 < view.x + view.width && y < view.y + view.height && i2 >= view.x && y >= view.y;
						break;
					case 1:
						has = !(i2 < view.x + view.width && y < view.y + view.height && i2 >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x == null) {
								x = 0;
							}
							var f1_x = x;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y2;
							var x2 = i2;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var p_x = x2;
							var p_y = y3;
							var x3 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x4 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x3 * x3 + y4 * y4) + Math.sqrt(x4 * x4 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x5 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f1_x1 = x5;
							var f1_y1 = y6;
							var x6 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f2_x1 = x6;
							var f2_y1 = y7;
							var x7 = i2;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var p_x1 = x7;
							var p_y1 = y8;
							var x8 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x9 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x8 * x8 + y9 * y9) + Math.sqrt(x9 * x9 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x10 = i2;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point1_x = x10;
							var point1_y = y11;
							var x11 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point2_x = x11;
							var point2_y = y12;
							var x12 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x12 * x12 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(i2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(i2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + i2) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255;
					this1.b[position + 1] = color >> 16 & 255;
					this1.b[position + 2] = color >> 8 & 255;
					this1.b[position + 3] = color & 255;
				}
			} else {
				var position1 = (y * this1.getUInt16(0) + i2) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255;
				this1.b[position1 + 1] = color >> 16 & 255;
				this1.b[position1 + 2] = color >> 8 & 255;
				this1.b[position1 + 3] = color & 255;
			}
		}
	}
};
vision_ds_Image.drawCircle = function(this1,X,Y,r,color) {
	var x = -r;
	var y = 0;
	var err = 2 - 2 * r;
	while(true) {
		var x1 = X + x;
		var y1 = Y - y;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x3 = view.x + view.width / 2 + c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f2_x = x3;
						var f2_y = y3;
						var x4 = x1;
						var y4 = y1;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var p_x = x4;
						var p_y = y4;
						var x5 = p_x - f1_x;
						var y5 = p_y - f1_y;
						var x6 = p_x - f2_x;
						var y6 = p_y - f2_y;
						has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x7 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 - c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f1_x1 = x7;
						var f1_y1 = y7;
						var x8 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 + c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f2_x1 = x8;
						var f2_y1 = y8;
						var x9 = x1;
						var y9 = y1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var p_x1 = x9;
						var p_y1 = y9;
						var x10 = p_x1 - f1_x1;
						var y10 = p_y1 - f1_y1;
						var x11 = p_x1 - f2_x1;
						var y11 = p_y1 - f2_y1;
						has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x12 = x1;
						var y12 = y1;
						if(y12 == null) {
							y12 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point1_x = x12;
						var point1_y = y12;
						var x13 = view.x + view.width / 2;
						var y13 = view.y + view.height / 2;
						if(y13 == null) {
							y13 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point2_x = x13;
						var point2_y = y13;
						var x14 = point2_x - point1_x;
						var y14 = point2_y - point1_y;
						has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		var x15 = X - x;
		var y15 = Y + y;
		if(!(x15 >= 0 && y15 >= 0 && x15 < this1.getUInt16(0) && y15 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x1 = x15;
			var this_y1 = y15;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v1 = null;
			var tmp1;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
				tmp1 = x15 >= 0 && y15 >= 0 && x15 < this1.getUInt16(0) && y15 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has1 = false;
				var view2;
				if(v1 != null) {
					view2 = v1;
				} else {
					var _g3 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this3 = this1.b;
					var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view2 = new vision_ds_ImageView(_g3,_g4,_g5,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view3]);
				}
				switch(view2.shape) {
				case 0:
					has1 = x15 < view2.x + view2.width && y15 < view2.y + view2.height && x15 >= view2.x && y15 >= view2.y;
					break;
				case 1:
					has1 = !(x15 < view2.x + view2.width && y15 < view2.y + view2.height && x15 >= view2.x && y15 >= view2.y);
					break;
				case 2:case 3:
					if(view2.width > view2.height) {
						var a2 = view2.width / 2;
						var b2 = view2.height / 2;
						var c2 = Math.sqrt(a2 * a2 - b2 * b2);
						var x16 = view2.x + view2.width / 2 - c2;
						var y16 = view2.y + view2.height / 2;
						if(y16 == null) {
							y16 = 0;
						}
						if(x16 == null) {
							x16 = 0;
						}
						var f1_x2 = x16;
						var f1_y2 = y16;
						var x17 = view2.x + view2.width / 2 + c2;
						var y17 = view2.y + view2.height / 2;
						if(y17 == null) {
							y17 = 0;
						}
						if(x17 == null) {
							x17 = 0;
						}
						var f2_x2 = x17;
						var f2_y2 = y17;
						var x18 = x15;
						var y18 = y15;
						if(y18 == null) {
							y18 = 0;
						}
						if(x18 == null) {
							x18 = 0;
						}
						var p_x2 = x18;
						var p_y2 = y18;
						var x19 = p_x2 - f1_x2;
						var y19 = p_y2 - f1_y2;
						var x20 = p_x2 - f2_x2;
						var y20 = p_y2 - f2_y2;
						has1 = Math.sqrt(x19 * x19 + y19 * y19) + Math.sqrt(x20 * x20 + y20 * y20) <= view2.width;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else if(view2.height > view2.width) {
						var a3 = view2.height / 2;
						var b3 = view2.width / 2;
						var c3 = Math.sqrt(a3 * a3 - b3 * b3);
						var x21 = view2.x + view2.width / 2;
						var y21 = view2.y + view2.height / 2 - c3;
						if(y21 == null) {
							y21 = 0;
						}
						if(x21 == null) {
							x21 = 0;
						}
						var f1_x3 = x21;
						var f1_y3 = y21;
						var x22 = view2.x + view2.width / 2;
						var y22 = view2.y + view2.height / 2 + c3;
						if(y22 == null) {
							y22 = 0;
						}
						if(x22 == null) {
							x22 = 0;
						}
						var f2_x3 = x22;
						var f2_y3 = y22;
						var x23 = x15;
						var y23 = y15;
						if(y23 == null) {
							y23 = 0;
						}
						if(x23 == null) {
							x23 = 0;
						}
						var p_x3 = x23;
						var p_y3 = y23;
						var x24 = p_x3 - f1_x3;
						var y24 = p_y3 - f1_y3;
						var x25 = p_x3 - f2_x3;
						var y25 = p_y3 - f2_y3;
						has1 = Math.sqrt(x24 * x24 + y24 * y24) + Math.sqrt(x25 * x25 + y25 * y25) <= view2.height;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else {
						var x26 = x15;
						var y26 = y15;
						if(y26 == null) {
							y26 = 0;
						}
						if(x26 == null) {
							x26 = 0;
						}
						var point1_x1 = x26;
						var point1_y1 = y26;
						var x27 = view2.x + view2.width / 2;
						var y27 = view2.y + view2.height / 2;
						if(y27 == null) {
							y27 = 0;
						}
						if(x27 == null) {
							x27 = 0;
						}
						var point2_x1 = x27;
						var point2_y1 = y27;
						var x28 = point2_x1 - point1_x1;
						var y28 = point2_y1 - point1_y1;
						has1 = Math.sqrt(x28 * x28 + y28 * y28) <= view2.width / 2;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					}
					break;
				case 4:
					has1 = Math.abs(x15 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y15 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
					break;
				case 5:
					has1 = !(Math.abs(x15 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y15 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
					break;
				}
				tmp1 = has1;
			}
			if(tmp1) {
				var position2 = (y15 * this1.getUInt16(0) + x15) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color >> 24 & 255;
				this1.b[position2 + 1] = color >> 16 & 255;
				this1.b[position2 + 2] = color >> 8 & 255;
				this1.b[position2 + 3] = color & 255;
			}
		} else {
			var position3 = (y15 * this1.getUInt16(0) + x15) * 4;
			position3 += vision_ds_Image.OFFSET;
			this1.b[position3] = color >> 24 & 255;
			this1.b[position3 + 1] = color >> 16 & 255;
			this1.b[position3 + 2] = color >> 8 & 255;
			this1.b[position3 + 3] = color & 255;
		}
		var x29 = X - y;
		var y29 = Y - x;
		if(!(x29 >= 0 && y29 >= 0 && x29 < this1.getUInt16(0) && y29 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x2 = x29;
			var this_y2 = y29;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v2 = null;
			var tmp2;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
				tmp2 = x29 >= 0 && y29 >= 0 && x29 < this1.getUInt16(0) && y29 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has2 = false;
				var view4;
				if(v2 != null) {
					view4 = v2;
				} else {
					var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this4 = this1.b;
					var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view4 = new vision_ds_ImageView(_g6,_g7,_g8,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this4[view5]);
				}
				switch(view4.shape) {
				case 0:
					has2 = x29 < view4.x + view4.width && y29 < view4.y + view4.height && x29 >= view4.x && y29 >= view4.y;
					break;
				case 1:
					has2 = !(x29 < view4.x + view4.width && y29 < view4.y + view4.height && x29 >= view4.x && y29 >= view4.y);
					break;
				case 2:case 3:
					if(view4.width > view4.height) {
						var a4 = view4.width / 2;
						var b4 = view4.height / 2;
						var c4 = Math.sqrt(a4 * a4 - b4 * b4);
						var x30 = view4.x + view4.width / 2 - c4;
						var y30 = view4.y + view4.height / 2;
						if(y30 == null) {
							y30 = 0;
						}
						if(x30 == null) {
							x30 = 0;
						}
						var f1_x4 = x30;
						var f1_y4 = y30;
						var x31 = view4.x + view4.width / 2 + c4;
						var y31 = view4.y + view4.height / 2;
						if(y31 == null) {
							y31 = 0;
						}
						if(x31 == null) {
							x31 = 0;
						}
						var f2_x4 = x31;
						var f2_y4 = y31;
						var x32 = x29;
						var y32 = y29;
						if(y32 == null) {
							y32 = 0;
						}
						if(x32 == null) {
							x32 = 0;
						}
						var p_x4 = x32;
						var p_y4 = y32;
						var x33 = p_x4 - f1_x4;
						var y33 = p_y4 - f1_y4;
						var x34 = p_x4 - f2_x4;
						var y34 = p_y4 - f2_y4;
						has2 = Math.sqrt(x33 * x33 + y33 * y33) + Math.sqrt(x34 * x34 + y34 * y34) <= view4.width;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else if(view4.height > view4.width) {
						var a5 = view4.height / 2;
						var b5 = view4.width / 2;
						var c5 = Math.sqrt(a5 * a5 - b5 * b5);
						var x35 = view4.x + view4.width / 2;
						var y35 = view4.y + view4.height / 2 - c5;
						if(y35 == null) {
							y35 = 0;
						}
						if(x35 == null) {
							x35 = 0;
						}
						var f1_x5 = x35;
						var f1_y5 = y35;
						var x36 = view4.x + view4.width / 2;
						var y36 = view4.y + view4.height / 2 + c5;
						if(y36 == null) {
							y36 = 0;
						}
						if(x36 == null) {
							x36 = 0;
						}
						var f2_x5 = x36;
						var f2_y5 = y36;
						var x37 = x29;
						var y37 = y29;
						if(y37 == null) {
							y37 = 0;
						}
						if(x37 == null) {
							x37 = 0;
						}
						var p_x5 = x37;
						var p_y5 = y37;
						var x38 = p_x5 - f1_x5;
						var y38 = p_y5 - f1_y5;
						var x39 = p_x5 - f2_x5;
						var y39 = p_y5 - f2_y5;
						has2 = Math.sqrt(x38 * x38 + y38 * y38) + Math.sqrt(x39 * x39 + y39 * y39) <= view4.height;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else {
						var x40 = x29;
						var y40 = y29;
						if(y40 == null) {
							y40 = 0;
						}
						if(x40 == null) {
							x40 = 0;
						}
						var point1_x2 = x40;
						var point1_y2 = y40;
						var x41 = view4.x + view4.width / 2;
						var y41 = view4.y + view4.height / 2;
						if(y41 == null) {
							y41 = 0;
						}
						if(x41 == null) {
							x41 = 0;
						}
						var point2_x2 = x41;
						var point2_y2 = y41;
						var x42 = point2_x2 - point1_x2;
						var y42 = point2_y2 - point1_y2;
						has2 = Math.sqrt(x42 * x42 + y42 * y42) <= view4.width / 2;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					}
					break;
				case 4:
					has2 = Math.abs(x29 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y29 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
					break;
				case 5:
					has2 = !(Math.abs(x29 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y29 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
					break;
				}
				tmp2 = has2;
			}
			if(tmp2) {
				var position4 = (y29 * this1.getUInt16(0) + x29) * 4;
				position4 += vision_ds_Image.OFFSET;
				this1.b[position4] = color >> 24 & 255;
				this1.b[position4 + 1] = color >> 16 & 255;
				this1.b[position4 + 2] = color >> 8 & 255;
				this1.b[position4 + 3] = color & 255;
			}
		} else {
			var position5 = (y29 * this1.getUInt16(0) + x29) * 4;
			position5 += vision_ds_Image.OFFSET;
			this1.b[position5] = color >> 24 & 255;
			this1.b[position5 + 1] = color >> 16 & 255;
			this1.b[position5 + 2] = color >> 8 & 255;
			this1.b[position5 + 3] = color & 255;
		}
		var x43 = X + y;
		var y43 = Y + x;
		if(!(x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x3 = x43;
			var this_y3 = y43;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v3 = null;
			var tmp3;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
				tmp3 = x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has3 = false;
				var view6;
				if(v3 != null) {
					view6 = v3;
				} else {
					var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g11 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this5 = this1.b;
					var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view6 = new vision_ds_ImageView(_g9,_g10,_g11,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this5[view7]);
				}
				switch(view6.shape) {
				case 0:
					has3 = x43 < view6.x + view6.width && y43 < view6.y + view6.height && x43 >= view6.x && y43 >= view6.y;
					break;
				case 1:
					has3 = !(x43 < view6.x + view6.width && y43 < view6.y + view6.height && x43 >= view6.x && y43 >= view6.y);
					break;
				case 2:case 3:
					if(view6.width > view6.height) {
						var a6 = view6.width / 2;
						var b6 = view6.height / 2;
						var c6 = Math.sqrt(a6 * a6 - b6 * b6);
						var x44 = view6.x + view6.width / 2 - c6;
						var y44 = view6.y + view6.height / 2;
						if(y44 == null) {
							y44 = 0;
						}
						if(x44 == null) {
							x44 = 0;
						}
						var f1_x6 = x44;
						var f1_y6 = y44;
						var x45 = view6.x + view6.width / 2 + c6;
						var y45 = view6.y + view6.height / 2;
						if(y45 == null) {
							y45 = 0;
						}
						if(x45 == null) {
							x45 = 0;
						}
						var f2_x6 = x45;
						var f2_y6 = y45;
						var x46 = x43;
						var y46 = y43;
						if(y46 == null) {
							y46 = 0;
						}
						if(x46 == null) {
							x46 = 0;
						}
						var p_x6 = x46;
						var p_y6 = y46;
						var x47 = p_x6 - f1_x6;
						var y47 = p_y6 - f1_y6;
						var x48 = p_x6 - f2_x6;
						var y48 = p_y6 - f2_y6;
						has3 = Math.sqrt(x47 * x47 + y47 * y47) + Math.sqrt(x48 * x48 + y48 * y48) <= view6.width;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else if(view6.height > view6.width) {
						var a7 = view6.height / 2;
						var b7 = view6.width / 2;
						var c7 = Math.sqrt(a7 * a7 - b7 * b7);
						var x49 = view6.x + view6.width / 2;
						var y49 = view6.y + view6.height / 2 - c7;
						if(y49 == null) {
							y49 = 0;
						}
						if(x49 == null) {
							x49 = 0;
						}
						var f1_x7 = x49;
						var f1_y7 = y49;
						var x50 = view6.x + view6.width / 2;
						var y50 = view6.y + view6.height / 2 + c7;
						if(y50 == null) {
							y50 = 0;
						}
						if(x50 == null) {
							x50 = 0;
						}
						var f2_x7 = x50;
						var f2_y7 = y50;
						var x51 = x43;
						var y51 = y43;
						if(y51 == null) {
							y51 = 0;
						}
						if(x51 == null) {
							x51 = 0;
						}
						var p_x7 = x51;
						var p_y7 = y51;
						var x52 = p_x7 - f1_x7;
						var y52 = p_y7 - f1_y7;
						var x53 = p_x7 - f2_x7;
						var y53 = p_y7 - f2_y7;
						has3 = Math.sqrt(x52 * x52 + y52 * y52) + Math.sqrt(x53 * x53 + y53 * y53) <= view6.height;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else {
						var x54 = x43;
						var y54 = y43;
						if(y54 == null) {
							y54 = 0;
						}
						if(x54 == null) {
							x54 = 0;
						}
						var point1_x3 = x54;
						var point1_y3 = y54;
						var x55 = view6.x + view6.width / 2;
						var y55 = view6.y + view6.height / 2;
						if(y55 == null) {
							y55 = 0;
						}
						if(x55 == null) {
							x55 = 0;
						}
						var point2_x3 = x55;
						var point2_y3 = y55;
						var x56 = point2_x3 - point1_x3;
						var y56 = point2_y3 - point1_y3;
						has3 = Math.sqrt(x56 * x56 + y56 * y56) <= view6.width / 2;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					}
					break;
				case 4:
					has3 = Math.abs(x43 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y43 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
					break;
				case 5:
					has3 = !(Math.abs(x43 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y43 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
					break;
				}
				tmp3 = has3;
			}
			if(tmp3) {
				var position6 = (y43 * this1.getUInt16(0) + x43) * 4;
				position6 += vision_ds_Image.OFFSET;
				this1.b[position6] = color >> 24 & 255;
				this1.b[position6 + 1] = color >> 16 & 255;
				this1.b[position6 + 2] = color >> 8 & 255;
				this1.b[position6 + 3] = color & 255;
			}
		} else {
			var position7 = (y43 * this1.getUInt16(0) + x43) * 4;
			position7 += vision_ds_Image.OFFSET;
			this1.b[position7] = color >> 24 & 255;
			this1.b[position7 + 1] = color >> 16 & 255;
			this1.b[position7 + 2] = color >> 8 & 255;
			this1.b[position7 + 3] = color & 255;
		}
		r = err;
		if(r <= y) {
			err += ++y * 2 + 1;
		}
		if(r > x || err > y) {
			err += ++x * 2 + 1;
		}
		if(!(x < 0)) {
			break;
		}
	}
};
vision_ds_Image.drawEllipse = function(this1,centerX,centerY,radiusX,radiusY,color) {
	var twoASquare = 2 * radiusX * radiusX;
	var twoBSquare = 2 * radiusY * radiusY;
	var x = radiusX - 1;
	var b = true;
	var y = 0;
	var xChange = radiusY * radiusY * (1 - 2 * radiusX);
	var yChange = radiusX * radiusX;
	var ellipseError = 0;
	var stoppingX = twoBSquare * radiusX;
	var stoppingY = 0;
	while(stoppingX >= stoppingY) {
		var x1 = centerX + x;
		var y1 = centerY + y;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b1 = view.height / 2;
						var c = Math.sqrt(a * a - b1 * b1);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x3 = view.x + view.width / 2 + c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f2_x = x3;
						var f2_y = y3;
						var x4 = x1;
						var y4 = y1;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var p_x = x4;
						var p_y = y4;
						var x5 = p_x - f1_x;
						var y5 = p_y - f1_y;
						var x6 = p_x - f2_x;
						var y6 = p_y - f2_y;
						has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b2 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b2 * b2);
						var x7 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 - c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f1_x1 = x7;
						var f1_y1 = y7;
						var x8 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 + c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f2_x1 = x8;
						var f2_y1 = y8;
						var x9 = x1;
						var y9 = y1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var p_x1 = x9;
						var p_y1 = y9;
						var x10 = p_x1 - f1_x1;
						var y10 = p_y1 - f1_y1;
						var x11 = p_x1 - f2_x1;
						var y11 = p_y1 - f2_y1;
						has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x12 = x1;
						var y12 = y1;
						if(y12 == null) {
							y12 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point1_x = x12;
						var point1_y = y12;
						var x13 = view.x + view.width / 2;
						var y13 = view.y + view.height / 2;
						if(y13 == null) {
							y13 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point2_x = x13;
						var point2_y = y13;
						var x14 = point2_x - point1_x;
						var y14 = point2_y - point1_y;
						has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		var x15 = centerX - x;
		var y15 = centerY + y;
		if(!(x15 >= 0 && y15 >= 0 && x15 < this1.getUInt16(0) && y15 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x1 = x15;
			var this_y1 = y15;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v1 = null;
			var tmp1;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
				tmp1 = x15 >= 0 && y15 >= 0 && x15 < this1.getUInt16(0) && y15 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has1 = false;
				var view2;
				if(v1 != null) {
					view2 = v1;
				} else {
					var _g3 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this3 = this1.b;
					var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view2 = new vision_ds_ImageView(_g3,_g4,_g5,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view3]);
				}
				switch(view2.shape) {
				case 0:
					has1 = x15 < view2.x + view2.width && y15 < view2.y + view2.height && x15 >= view2.x && y15 >= view2.y;
					break;
				case 1:
					has1 = !(x15 < view2.x + view2.width && y15 < view2.y + view2.height && x15 >= view2.x && y15 >= view2.y);
					break;
				case 2:case 3:
					if(view2.width > view2.height) {
						var a2 = view2.width / 2;
						var b3 = view2.height / 2;
						var c2 = Math.sqrt(a2 * a2 - b3 * b3);
						var x16 = view2.x + view2.width / 2 - c2;
						var y16 = view2.y + view2.height / 2;
						if(y16 == null) {
							y16 = 0;
						}
						if(x16 == null) {
							x16 = 0;
						}
						var f1_x2 = x16;
						var f1_y2 = y16;
						var x17 = view2.x + view2.width / 2 + c2;
						var y17 = view2.y + view2.height / 2;
						if(y17 == null) {
							y17 = 0;
						}
						if(x17 == null) {
							x17 = 0;
						}
						var f2_x2 = x17;
						var f2_y2 = y17;
						var x18 = x15;
						var y18 = y15;
						if(y18 == null) {
							y18 = 0;
						}
						if(x18 == null) {
							x18 = 0;
						}
						var p_x2 = x18;
						var p_y2 = y18;
						var x19 = p_x2 - f1_x2;
						var y19 = p_y2 - f1_y2;
						var x20 = p_x2 - f2_x2;
						var y20 = p_y2 - f2_y2;
						has1 = Math.sqrt(x19 * x19 + y19 * y19) + Math.sqrt(x20 * x20 + y20 * y20) <= view2.width;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else if(view2.height > view2.width) {
						var a3 = view2.height / 2;
						var b4 = view2.width / 2;
						var c3 = Math.sqrt(a3 * a3 - b4 * b4);
						var x21 = view2.x + view2.width / 2;
						var y21 = view2.y + view2.height / 2 - c3;
						if(y21 == null) {
							y21 = 0;
						}
						if(x21 == null) {
							x21 = 0;
						}
						var f1_x3 = x21;
						var f1_y3 = y21;
						var x22 = view2.x + view2.width / 2;
						var y22 = view2.y + view2.height / 2 + c3;
						if(y22 == null) {
							y22 = 0;
						}
						if(x22 == null) {
							x22 = 0;
						}
						var f2_x3 = x22;
						var f2_y3 = y22;
						var x23 = x15;
						var y23 = y15;
						if(y23 == null) {
							y23 = 0;
						}
						if(x23 == null) {
							x23 = 0;
						}
						var p_x3 = x23;
						var p_y3 = y23;
						var x24 = p_x3 - f1_x3;
						var y24 = p_y3 - f1_y3;
						var x25 = p_x3 - f2_x3;
						var y25 = p_y3 - f2_y3;
						has1 = Math.sqrt(x24 * x24 + y24 * y24) + Math.sqrt(x25 * x25 + y25 * y25) <= view2.height;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else {
						var x26 = x15;
						var y26 = y15;
						if(y26 == null) {
							y26 = 0;
						}
						if(x26 == null) {
							x26 = 0;
						}
						var point1_x1 = x26;
						var point1_y1 = y26;
						var x27 = view2.x + view2.width / 2;
						var y27 = view2.y + view2.height / 2;
						if(y27 == null) {
							y27 = 0;
						}
						if(x27 == null) {
							x27 = 0;
						}
						var point2_x1 = x27;
						var point2_y1 = y27;
						var x28 = point2_x1 - point1_x1;
						var y28 = point2_y1 - point1_y1;
						has1 = Math.sqrt(x28 * x28 + y28 * y28) <= view2.width / 2;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					}
					break;
				case 4:
					has1 = Math.abs(x15 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y15 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
					break;
				case 5:
					has1 = !(Math.abs(x15 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y15 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
					break;
				}
				tmp1 = has1;
			}
			if(tmp1) {
				var position2 = (y15 * this1.getUInt16(0) + x15) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color >> 24 & 255;
				this1.b[position2 + 1] = color >> 16 & 255;
				this1.b[position2 + 2] = color >> 8 & 255;
				this1.b[position2 + 3] = color & 255;
			}
		} else {
			var position3 = (y15 * this1.getUInt16(0) + x15) * 4;
			position3 += vision_ds_Image.OFFSET;
			this1.b[position3] = color >> 24 & 255;
			this1.b[position3 + 1] = color >> 16 & 255;
			this1.b[position3 + 2] = color >> 8 & 255;
			this1.b[position3 + 3] = color & 255;
		}
		var x29 = centerX + x;
		var y29 = centerY - y;
		if(!(x29 >= 0 && y29 >= 0 && x29 < this1.getUInt16(0) && y29 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x2 = x29;
			var this_y2 = y29;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v2 = null;
			var tmp2;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
				tmp2 = x29 >= 0 && y29 >= 0 && x29 < this1.getUInt16(0) && y29 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has2 = false;
				var view4;
				if(v2 != null) {
					view4 = v2;
				} else {
					var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this4 = this1.b;
					var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view4 = new vision_ds_ImageView(_g6,_g7,_g8,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this4[view5]);
				}
				switch(view4.shape) {
				case 0:
					has2 = x29 < view4.x + view4.width && y29 < view4.y + view4.height && x29 >= view4.x && y29 >= view4.y;
					break;
				case 1:
					has2 = !(x29 < view4.x + view4.width && y29 < view4.y + view4.height && x29 >= view4.x && y29 >= view4.y);
					break;
				case 2:case 3:
					if(view4.width > view4.height) {
						var a4 = view4.width / 2;
						var b5 = view4.height / 2;
						var c4 = Math.sqrt(a4 * a4 - b5 * b5);
						var x30 = view4.x + view4.width / 2 - c4;
						var y30 = view4.y + view4.height / 2;
						if(y30 == null) {
							y30 = 0;
						}
						if(x30 == null) {
							x30 = 0;
						}
						var f1_x4 = x30;
						var f1_y4 = y30;
						var x31 = view4.x + view4.width / 2 + c4;
						var y31 = view4.y + view4.height / 2;
						if(y31 == null) {
							y31 = 0;
						}
						if(x31 == null) {
							x31 = 0;
						}
						var f2_x4 = x31;
						var f2_y4 = y31;
						var x32 = x29;
						var y32 = y29;
						if(y32 == null) {
							y32 = 0;
						}
						if(x32 == null) {
							x32 = 0;
						}
						var p_x4 = x32;
						var p_y4 = y32;
						var x33 = p_x4 - f1_x4;
						var y33 = p_y4 - f1_y4;
						var x34 = p_x4 - f2_x4;
						var y34 = p_y4 - f2_y4;
						has2 = Math.sqrt(x33 * x33 + y33 * y33) + Math.sqrt(x34 * x34 + y34 * y34) <= view4.width;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else if(view4.height > view4.width) {
						var a5 = view4.height / 2;
						var b6 = view4.width / 2;
						var c5 = Math.sqrt(a5 * a5 - b6 * b6);
						var x35 = view4.x + view4.width / 2;
						var y35 = view4.y + view4.height / 2 - c5;
						if(y35 == null) {
							y35 = 0;
						}
						if(x35 == null) {
							x35 = 0;
						}
						var f1_x5 = x35;
						var f1_y5 = y35;
						var x36 = view4.x + view4.width / 2;
						var y36 = view4.y + view4.height / 2 + c5;
						if(y36 == null) {
							y36 = 0;
						}
						if(x36 == null) {
							x36 = 0;
						}
						var f2_x5 = x36;
						var f2_y5 = y36;
						var x37 = x29;
						var y37 = y29;
						if(y37 == null) {
							y37 = 0;
						}
						if(x37 == null) {
							x37 = 0;
						}
						var p_x5 = x37;
						var p_y5 = y37;
						var x38 = p_x5 - f1_x5;
						var y38 = p_y5 - f1_y5;
						var x39 = p_x5 - f2_x5;
						var y39 = p_y5 - f2_y5;
						has2 = Math.sqrt(x38 * x38 + y38 * y38) + Math.sqrt(x39 * x39 + y39 * y39) <= view4.height;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else {
						var x40 = x29;
						var y40 = y29;
						if(y40 == null) {
							y40 = 0;
						}
						if(x40 == null) {
							x40 = 0;
						}
						var point1_x2 = x40;
						var point1_y2 = y40;
						var x41 = view4.x + view4.width / 2;
						var y41 = view4.y + view4.height / 2;
						if(y41 == null) {
							y41 = 0;
						}
						if(x41 == null) {
							x41 = 0;
						}
						var point2_x2 = x41;
						var point2_y2 = y41;
						var x42 = point2_x2 - point1_x2;
						var y42 = point2_y2 - point1_y2;
						has2 = Math.sqrt(x42 * x42 + y42 * y42) <= view4.width / 2;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					}
					break;
				case 4:
					has2 = Math.abs(x29 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y29 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
					break;
				case 5:
					has2 = !(Math.abs(x29 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y29 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
					break;
				}
				tmp2 = has2;
			}
			if(tmp2) {
				var position4 = (y29 * this1.getUInt16(0) + x29) * 4;
				position4 += vision_ds_Image.OFFSET;
				this1.b[position4] = color >> 24 & 255;
				this1.b[position4 + 1] = color >> 16 & 255;
				this1.b[position4 + 2] = color >> 8 & 255;
				this1.b[position4 + 3] = color & 255;
			}
		} else {
			var position5 = (y29 * this1.getUInt16(0) + x29) * 4;
			position5 += vision_ds_Image.OFFSET;
			this1.b[position5] = color >> 24 & 255;
			this1.b[position5 + 1] = color >> 16 & 255;
			this1.b[position5 + 2] = color >> 8 & 255;
			this1.b[position5 + 3] = color & 255;
		}
		var x43 = centerX - x;
		var y43 = centerY - y;
		if(!(x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x3 = x43;
			var this_y3 = y43;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v3 = null;
			var tmp3;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
				tmp3 = x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has3 = false;
				var view6;
				if(v3 != null) {
					view6 = v3;
				} else {
					var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g11 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this5 = this1.b;
					var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view6 = new vision_ds_ImageView(_g9,_g10,_g11,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this5[view7]);
				}
				switch(view6.shape) {
				case 0:
					has3 = x43 < view6.x + view6.width && y43 < view6.y + view6.height && x43 >= view6.x && y43 >= view6.y;
					break;
				case 1:
					has3 = !(x43 < view6.x + view6.width && y43 < view6.y + view6.height && x43 >= view6.x && y43 >= view6.y);
					break;
				case 2:case 3:
					if(view6.width > view6.height) {
						var a6 = view6.width / 2;
						var b7 = view6.height / 2;
						var c6 = Math.sqrt(a6 * a6 - b7 * b7);
						var x44 = view6.x + view6.width / 2 - c6;
						var y44 = view6.y + view6.height / 2;
						if(y44 == null) {
							y44 = 0;
						}
						if(x44 == null) {
							x44 = 0;
						}
						var f1_x6 = x44;
						var f1_y6 = y44;
						var x45 = view6.x + view6.width / 2 + c6;
						var y45 = view6.y + view6.height / 2;
						if(y45 == null) {
							y45 = 0;
						}
						if(x45 == null) {
							x45 = 0;
						}
						var f2_x6 = x45;
						var f2_y6 = y45;
						var x46 = x43;
						var y46 = y43;
						if(y46 == null) {
							y46 = 0;
						}
						if(x46 == null) {
							x46 = 0;
						}
						var p_x6 = x46;
						var p_y6 = y46;
						var x47 = p_x6 - f1_x6;
						var y47 = p_y6 - f1_y6;
						var x48 = p_x6 - f2_x6;
						var y48 = p_y6 - f2_y6;
						has3 = Math.sqrt(x47 * x47 + y47 * y47) + Math.sqrt(x48 * x48 + y48 * y48) <= view6.width;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else if(view6.height > view6.width) {
						var a7 = view6.height / 2;
						var b8 = view6.width / 2;
						var c7 = Math.sqrt(a7 * a7 - b8 * b8);
						var x49 = view6.x + view6.width / 2;
						var y49 = view6.y + view6.height / 2 - c7;
						if(y49 == null) {
							y49 = 0;
						}
						if(x49 == null) {
							x49 = 0;
						}
						var f1_x7 = x49;
						var f1_y7 = y49;
						var x50 = view6.x + view6.width / 2;
						var y50 = view6.y + view6.height / 2 + c7;
						if(y50 == null) {
							y50 = 0;
						}
						if(x50 == null) {
							x50 = 0;
						}
						var f2_x7 = x50;
						var f2_y7 = y50;
						var x51 = x43;
						var y51 = y43;
						if(y51 == null) {
							y51 = 0;
						}
						if(x51 == null) {
							x51 = 0;
						}
						var p_x7 = x51;
						var p_y7 = y51;
						var x52 = p_x7 - f1_x7;
						var y52 = p_y7 - f1_y7;
						var x53 = p_x7 - f2_x7;
						var y53 = p_y7 - f2_y7;
						has3 = Math.sqrt(x52 * x52 + y52 * y52) + Math.sqrt(x53 * x53 + y53 * y53) <= view6.height;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else {
						var x54 = x43;
						var y54 = y43;
						if(y54 == null) {
							y54 = 0;
						}
						if(x54 == null) {
							x54 = 0;
						}
						var point1_x3 = x54;
						var point1_y3 = y54;
						var x55 = view6.x + view6.width / 2;
						var y55 = view6.y + view6.height / 2;
						if(y55 == null) {
							y55 = 0;
						}
						if(x55 == null) {
							x55 = 0;
						}
						var point2_x3 = x55;
						var point2_y3 = y55;
						var x56 = point2_x3 - point1_x3;
						var y56 = point2_y3 - point1_y3;
						has3 = Math.sqrt(x56 * x56 + y56 * y56) <= view6.width / 2;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					}
					break;
				case 4:
					has3 = Math.abs(x43 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y43 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
					break;
				case 5:
					has3 = !(Math.abs(x43 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y43 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
					break;
				}
				tmp3 = has3;
			}
			if(tmp3) {
				var position6 = (y43 * this1.getUInt16(0) + x43) * 4;
				position6 += vision_ds_Image.OFFSET;
				this1.b[position6] = color >> 24 & 255;
				this1.b[position6 + 1] = color >> 16 & 255;
				this1.b[position6 + 2] = color >> 8 & 255;
				this1.b[position6 + 3] = color & 255;
			}
		} else {
			var position7 = (y43 * this1.getUInt16(0) + x43) * 4;
			position7 += vision_ds_Image.OFFSET;
			this1.b[position7] = color >> 24 & 255;
			this1.b[position7 + 1] = color >> 16 & 255;
			this1.b[position7 + 2] = color >> 8 & 255;
			this1.b[position7 + 3] = color & 255;
		}
		if(b) {
			++x;
			b = false;
		}
		if(ellipseError <= 0) {
			++y;
			stoppingY += twoASquare;
			ellipseError += yChange;
			yChange += twoASquare;
		}
		if(ellipseError > 0) {
			--x;
			stoppingX -= twoBSquare;
			ellipseError += xChange;
			xChange += twoBSquare;
		}
	}
	ellipseError = radiusY * radiusY / 4 - radiusX * radiusX * (radiusY - 0.5);
	x = 0;
	y = radiusY;
	xChange = radiusY * radiusY;
	yChange = radiusX * radiusX * (1 - 2 * radiusY);
	stoppingX = 0;
	stoppingY = twoASquare * radiusY;
	while(stoppingX <= stoppingY) {
		var x1 = centerX + x;
		var y1 = centerY + y;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x3 = view.x + view.width / 2 + c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f2_x = x3;
						var f2_y = y3;
						var x4 = x1;
						var y4 = y1;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var p_x = x4;
						var p_y = y4;
						var x5 = p_x - f1_x;
						var y5 = p_y - f1_y;
						var x6 = p_x - f2_x;
						var y6 = p_y - f2_y;
						has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x7 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 - c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f1_x1 = x7;
						var f1_y1 = y7;
						var x8 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 + c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f2_x1 = x8;
						var f2_y1 = y8;
						var x9 = x1;
						var y9 = y1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var p_x1 = x9;
						var p_y1 = y9;
						var x10 = p_x1 - f1_x1;
						var y10 = p_y1 - f1_y1;
						var x11 = p_x1 - f2_x1;
						var y11 = p_y1 - f2_y1;
						has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x12 = x1;
						var y12 = y1;
						if(y12 == null) {
							y12 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point1_x = x12;
						var point1_y = y12;
						var x13 = view.x + view.width / 2;
						var y13 = view.y + view.height / 2;
						if(y13 == null) {
							y13 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point2_x = x13;
						var point2_y = y13;
						var x14 = point2_x - point1_x;
						var y14 = point2_y - point1_y;
						has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
		} else {
			var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255;
			this1.b[position1 + 1] = color >> 16 & 255;
			this1.b[position1 + 2] = color >> 8 & 255;
			this1.b[position1 + 3] = color & 255;
		}
		var x15 = centerX - x;
		var y15 = centerY + y;
		if(!(x15 >= 0 && y15 >= 0 && x15 < this1.getUInt16(0) && y15 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x1 = x15;
			var this_y1 = y15;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v1 = null;
			var tmp1;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
				tmp1 = x15 >= 0 && y15 >= 0 && x15 < this1.getUInt16(0) && y15 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has1 = false;
				var view2;
				if(v1 != null) {
					view2 = v1;
				} else {
					var _g3 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this3 = this1.b;
					var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view2 = new vision_ds_ImageView(_g3,_g4,_g5,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view3]);
				}
				switch(view2.shape) {
				case 0:
					has1 = x15 < view2.x + view2.width && y15 < view2.y + view2.height && x15 >= view2.x && y15 >= view2.y;
					break;
				case 1:
					has1 = !(x15 < view2.x + view2.width && y15 < view2.y + view2.height && x15 >= view2.x && y15 >= view2.y);
					break;
				case 2:case 3:
					if(view2.width > view2.height) {
						var a2 = view2.width / 2;
						var b2 = view2.height / 2;
						var c2 = Math.sqrt(a2 * a2 - b2 * b2);
						var x16 = view2.x + view2.width / 2 - c2;
						var y16 = view2.y + view2.height / 2;
						if(y16 == null) {
							y16 = 0;
						}
						if(x16 == null) {
							x16 = 0;
						}
						var f1_x2 = x16;
						var f1_y2 = y16;
						var x17 = view2.x + view2.width / 2 + c2;
						var y17 = view2.y + view2.height / 2;
						if(y17 == null) {
							y17 = 0;
						}
						if(x17 == null) {
							x17 = 0;
						}
						var f2_x2 = x17;
						var f2_y2 = y17;
						var x18 = x15;
						var y18 = y15;
						if(y18 == null) {
							y18 = 0;
						}
						if(x18 == null) {
							x18 = 0;
						}
						var p_x2 = x18;
						var p_y2 = y18;
						var x19 = p_x2 - f1_x2;
						var y19 = p_y2 - f1_y2;
						var x20 = p_x2 - f2_x2;
						var y20 = p_y2 - f2_y2;
						has1 = Math.sqrt(x19 * x19 + y19 * y19) + Math.sqrt(x20 * x20 + y20 * y20) <= view2.width;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else if(view2.height > view2.width) {
						var a3 = view2.height / 2;
						var b3 = view2.width / 2;
						var c3 = Math.sqrt(a3 * a3 - b3 * b3);
						var x21 = view2.x + view2.width / 2;
						var y21 = view2.y + view2.height / 2 - c3;
						if(y21 == null) {
							y21 = 0;
						}
						if(x21 == null) {
							x21 = 0;
						}
						var f1_x3 = x21;
						var f1_y3 = y21;
						var x22 = view2.x + view2.width / 2;
						var y22 = view2.y + view2.height / 2 + c3;
						if(y22 == null) {
							y22 = 0;
						}
						if(x22 == null) {
							x22 = 0;
						}
						var f2_x3 = x22;
						var f2_y3 = y22;
						var x23 = x15;
						var y23 = y15;
						if(y23 == null) {
							y23 = 0;
						}
						if(x23 == null) {
							x23 = 0;
						}
						var p_x3 = x23;
						var p_y3 = y23;
						var x24 = p_x3 - f1_x3;
						var y24 = p_y3 - f1_y3;
						var x25 = p_x3 - f2_x3;
						var y25 = p_y3 - f2_y3;
						has1 = Math.sqrt(x24 * x24 + y24 * y24) + Math.sqrt(x25 * x25 + y25 * y25) <= view2.height;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else {
						var x26 = x15;
						var y26 = y15;
						if(y26 == null) {
							y26 = 0;
						}
						if(x26 == null) {
							x26 = 0;
						}
						var point1_x1 = x26;
						var point1_y1 = y26;
						var x27 = view2.x + view2.width / 2;
						var y27 = view2.y + view2.height / 2;
						if(y27 == null) {
							y27 = 0;
						}
						if(x27 == null) {
							x27 = 0;
						}
						var point2_x1 = x27;
						var point2_y1 = y27;
						var x28 = point2_x1 - point1_x1;
						var y28 = point2_y1 - point1_y1;
						has1 = Math.sqrt(x28 * x28 + y28 * y28) <= view2.width / 2;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					}
					break;
				case 4:
					has1 = Math.abs(x15 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y15 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
					break;
				case 5:
					has1 = !(Math.abs(x15 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y15 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
					break;
				}
				tmp1 = has1;
			}
			if(tmp1) {
				var position2 = (y15 * this1.getUInt16(0) + x15) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color >> 24 & 255;
				this1.b[position2 + 1] = color >> 16 & 255;
				this1.b[position2 + 2] = color >> 8 & 255;
				this1.b[position2 + 3] = color & 255;
			}
		} else {
			var position3 = (y15 * this1.getUInt16(0) + x15) * 4;
			position3 += vision_ds_Image.OFFSET;
			this1.b[position3] = color >> 24 & 255;
			this1.b[position3 + 1] = color >> 16 & 255;
			this1.b[position3 + 2] = color >> 8 & 255;
			this1.b[position3 + 3] = color & 255;
		}
		var x29 = centerX + x;
		var y29 = centerY - y;
		if(!(x29 >= 0 && y29 >= 0 && x29 < this1.getUInt16(0) && y29 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x2 = x29;
			var this_y2 = y29;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v2 = null;
			var tmp2;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
				tmp2 = x29 >= 0 && y29 >= 0 && x29 < this1.getUInt16(0) && y29 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has2 = false;
				var view4;
				if(v2 != null) {
					view4 = v2;
				} else {
					var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this4 = this1.b;
					var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view4 = new vision_ds_ImageView(_g6,_g7,_g8,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this4[view5]);
				}
				switch(view4.shape) {
				case 0:
					has2 = x29 < view4.x + view4.width && y29 < view4.y + view4.height && x29 >= view4.x && y29 >= view4.y;
					break;
				case 1:
					has2 = !(x29 < view4.x + view4.width && y29 < view4.y + view4.height && x29 >= view4.x && y29 >= view4.y);
					break;
				case 2:case 3:
					if(view4.width > view4.height) {
						var a4 = view4.width / 2;
						var b4 = view4.height / 2;
						var c4 = Math.sqrt(a4 * a4 - b4 * b4);
						var x30 = view4.x + view4.width / 2 - c4;
						var y30 = view4.y + view4.height / 2;
						if(y30 == null) {
							y30 = 0;
						}
						if(x30 == null) {
							x30 = 0;
						}
						var f1_x4 = x30;
						var f1_y4 = y30;
						var x31 = view4.x + view4.width / 2 + c4;
						var y31 = view4.y + view4.height / 2;
						if(y31 == null) {
							y31 = 0;
						}
						if(x31 == null) {
							x31 = 0;
						}
						var f2_x4 = x31;
						var f2_y4 = y31;
						var x32 = x29;
						var y32 = y29;
						if(y32 == null) {
							y32 = 0;
						}
						if(x32 == null) {
							x32 = 0;
						}
						var p_x4 = x32;
						var p_y4 = y32;
						var x33 = p_x4 - f1_x4;
						var y33 = p_y4 - f1_y4;
						var x34 = p_x4 - f2_x4;
						var y34 = p_y4 - f2_y4;
						has2 = Math.sqrt(x33 * x33 + y33 * y33) + Math.sqrt(x34 * x34 + y34 * y34) <= view4.width;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else if(view4.height > view4.width) {
						var a5 = view4.height / 2;
						var b5 = view4.width / 2;
						var c5 = Math.sqrt(a5 * a5 - b5 * b5);
						var x35 = view4.x + view4.width / 2;
						var y35 = view4.y + view4.height / 2 - c5;
						if(y35 == null) {
							y35 = 0;
						}
						if(x35 == null) {
							x35 = 0;
						}
						var f1_x5 = x35;
						var f1_y5 = y35;
						var x36 = view4.x + view4.width / 2;
						var y36 = view4.y + view4.height / 2 + c5;
						if(y36 == null) {
							y36 = 0;
						}
						if(x36 == null) {
							x36 = 0;
						}
						var f2_x5 = x36;
						var f2_y5 = y36;
						var x37 = x29;
						var y37 = y29;
						if(y37 == null) {
							y37 = 0;
						}
						if(x37 == null) {
							x37 = 0;
						}
						var p_x5 = x37;
						var p_y5 = y37;
						var x38 = p_x5 - f1_x5;
						var y38 = p_y5 - f1_y5;
						var x39 = p_x5 - f2_x5;
						var y39 = p_y5 - f2_y5;
						has2 = Math.sqrt(x38 * x38 + y38 * y38) + Math.sqrt(x39 * x39 + y39 * y39) <= view4.height;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else {
						var x40 = x29;
						var y40 = y29;
						if(y40 == null) {
							y40 = 0;
						}
						if(x40 == null) {
							x40 = 0;
						}
						var point1_x2 = x40;
						var point1_y2 = y40;
						var x41 = view4.x + view4.width / 2;
						var y41 = view4.y + view4.height / 2;
						if(y41 == null) {
							y41 = 0;
						}
						if(x41 == null) {
							x41 = 0;
						}
						var point2_x2 = x41;
						var point2_y2 = y41;
						var x42 = point2_x2 - point1_x2;
						var y42 = point2_y2 - point1_y2;
						has2 = Math.sqrt(x42 * x42 + y42 * y42) <= view4.width / 2;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					}
					break;
				case 4:
					has2 = Math.abs(x29 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y29 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
					break;
				case 5:
					has2 = !(Math.abs(x29 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y29 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
					break;
				}
				tmp2 = has2;
			}
			if(tmp2) {
				var position4 = (y29 * this1.getUInt16(0) + x29) * 4;
				position4 += vision_ds_Image.OFFSET;
				this1.b[position4] = color >> 24 & 255;
				this1.b[position4 + 1] = color >> 16 & 255;
				this1.b[position4 + 2] = color >> 8 & 255;
				this1.b[position4 + 3] = color & 255;
			}
		} else {
			var position5 = (y29 * this1.getUInt16(0) + x29) * 4;
			position5 += vision_ds_Image.OFFSET;
			this1.b[position5] = color >> 24 & 255;
			this1.b[position5 + 1] = color >> 16 & 255;
			this1.b[position5 + 2] = color >> 8 & 255;
			this1.b[position5 + 3] = color & 255;
		}
		var x43 = centerX - x;
		var y43 = centerY - y;
		if(!(x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x3 = x43;
			var this_y3 = y43;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v3 = null;
			var tmp3;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
				tmp3 = x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has3 = false;
				var view6;
				if(v3 != null) {
					view6 = v3;
				} else {
					var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g11 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this5 = this1.b;
					var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view6 = new vision_ds_ImageView(_g9,_g10,_g11,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this5[view7]);
				}
				switch(view6.shape) {
				case 0:
					has3 = x43 < view6.x + view6.width && y43 < view6.y + view6.height && x43 >= view6.x && y43 >= view6.y;
					break;
				case 1:
					has3 = !(x43 < view6.x + view6.width && y43 < view6.y + view6.height && x43 >= view6.x && y43 >= view6.y);
					break;
				case 2:case 3:
					if(view6.width > view6.height) {
						var a6 = view6.width / 2;
						var b6 = view6.height / 2;
						var c6 = Math.sqrt(a6 * a6 - b6 * b6);
						var x44 = view6.x + view6.width / 2 - c6;
						var y44 = view6.y + view6.height / 2;
						if(y44 == null) {
							y44 = 0;
						}
						if(x44 == null) {
							x44 = 0;
						}
						var f1_x6 = x44;
						var f1_y6 = y44;
						var x45 = view6.x + view6.width / 2 + c6;
						var y45 = view6.y + view6.height / 2;
						if(y45 == null) {
							y45 = 0;
						}
						if(x45 == null) {
							x45 = 0;
						}
						var f2_x6 = x45;
						var f2_y6 = y45;
						var x46 = x43;
						var y46 = y43;
						if(y46 == null) {
							y46 = 0;
						}
						if(x46 == null) {
							x46 = 0;
						}
						var p_x6 = x46;
						var p_y6 = y46;
						var x47 = p_x6 - f1_x6;
						var y47 = p_y6 - f1_y6;
						var x48 = p_x6 - f2_x6;
						var y48 = p_y6 - f2_y6;
						has3 = Math.sqrt(x47 * x47 + y47 * y47) + Math.sqrt(x48 * x48 + y48 * y48) <= view6.width;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else if(view6.height > view6.width) {
						var a7 = view6.height / 2;
						var b7 = view6.width / 2;
						var c7 = Math.sqrt(a7 * a7 - b7 * b7);
						var x49 = view6.x + view6.width / 2;
						var y49 = view6.y + view6.height / 2 - c7;
						if(y49 == null) {
							y49 = 0;
						}
						if(x49 == null) {
							x49 = 0;
						}
						var f1_x7 = x49;
						var f1_y7 = y49;
						var x50 = view6.x + view6.width / 2;
						var y50 = view6.y + view6.height / 2 + c7;
						if(y50 == null) {
							y50 = 0;
						}
						if(x50 == null) {
							x50 = 0;
						}
						var f2_x7 = x50;
						var f2_y7 = y50;
						var x51 = x43;
						var y51 = y43;
						if(y51 == null) {
							y51 = 0;
						}
						if(x51 == null) {
							x51 = 0;
						}
						var p_x7 = x51;
						var p_y7 = y51;
						var x52 = p_x7 - f1_x7;
						var y52 = p_y7 - f1_y7;
						var x53 = p_x7 - f2_x7;
						var y53 = p_y7 - f2_y7;
						has3 = Math.sqrt(x52 * x52 + y52 * y52) + Math.sqrt(x53 * x53 + y53 * y53) <= view6.height;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else {
						var x54 = x43;
						var y54 = y43;
						if(y54 == null) {
							y54 = 0;
						}
						if(x54 == null) {
							x54 = 0;
						}
						var point1_x3 = x54;
						var point1_y3 = y54;
						var x55 = view6.x + view6.width / 2;
						var y55 = view6.y + view6.height / 2;
						if(y55 == null) {
							y55 = 0;
						}
						if(x55 == null) {
							x55 = 0;
						}
						var point2_x3 = x55;
						var point2_y3 = y55;
						var x56 = point2_x3 - point1_x3;
						var y56 = point2_y3 - point1_y3;
						has3 = Math.sqrt(x56 * x56 + y56 * y56) <= view6.width / 2;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					}
					break;
				case 4:
					has3 = Math.abs(x43 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y43 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
					break;
				case 5:
					has3 = !(Math.abs(x43 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y43 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
					break;
				}
				tmp3 = has3;
			}
			if(tmp3) {
				var position6 = (y43 * this1.getUInt16(0) + x43) * 4;
				position6 += vision_ds_Image.OFFSET;
				this1.b[position6] = color >> 24 & 255;
				this1.b[position6 + 1] = color >> 16 & 255;
				this1.b[position6 + 2] = color >> 8 & 255;
				this1.b[position6 + 3] = color & 255;
			}
		} else {
			var position7 = (y43 * this1.getUInt16(0) + x43) * 4;
			position7 += vision_ds_Image.OFFSET;
			this1.b[position7] = color >> 24 & 255;
			this1.b[position7 + 1] = color >> 16 & 255;
			this1.b[position7 + 2] = color >> 8 & 255;
			this1.b[position7 + 3] = color & 255;
		}
		if(ellipseError <= 0) {
			++x;
			stoppingX += twoBSquare;
			ellipseError += xChange;
			xChange += twoBSquare;
		}
		if(ellipseError > 0) {
			--y;
			stoppingY -= twoASquare;
			ellipseError += yChange;
			yChange += twoASquare;
		}
	}
};
vision_ds_Image.fillColorRecursive = function(this1,position,color) {
	var x = position.x;
	var y = position.y;
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position1 = (y * this1.getUInt16(0) + x) * 4;
	position1 += vision_ds_Image.OFFSET;
	var value = this1.b[position1] << 24 | this1.b[position1 + 1] << 16 | this1.b[position1 + 2] << 8 | this1.b[position1 + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var originalColor = this2;
	var expandFill = null;
	expandFill = function(x,y) {
		if(x < 0 || x >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || y < 0 || y >= this1.getUInt16(0)) {
			return;
		}
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		if(this2 == color) {
			return;
		}
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this2 = value;
		if(this2 == originalColor) {
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var expandFill1;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					expandFill1 = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 - c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 + c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var p_x = x1;
							var p_y = y1;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point2_x = x1;
							var point2_y = y1;
							var x1 = point2_x - point1_x;
							var y1 = point2_y - point1_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					expandFill1 = has;
				}
				if(expandFill1) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255;
					this1.b[position + 1] = color >> 16 & 255;
					this1.b[position + 2] = color >> 8 & 255;
					this1.b[position + 3] = color & 255;
				}
			} else {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255;
				this1.b[position + 1] = color >> 16 & 255;
				this1.b[position + 2] = color >> 8 & 255;
				this1.b[position + 3] = color & 255;
			}
			expandFill(x + 1,y);
			expandFill(x - 1,y);
			expandFill(x,y + 1);
			expandFill(x,y - 1);
		}
	};
	expandFill(position.x,position.y);
};
vision_ds_Image.fillColor = function(this1,position,color) {
	var queue = new haxe_ds_List();
	var x = position.x;
	var y = position.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p_x = x;
	var p_y = y;
	var this2 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
	queue.push(this2);
	var explored = [];
	var x = position.x;
	var y = position.y;
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var this2 = value;
	var originalColor = this2;
	var pc = 0;
	while(queue.length > 0) {
		var v = queue.pop();
		var this2 = new haxe__$Int64__$_$_$Int64(v.x,v.y);
		explored.push(this2);
		var x = v.x + 1;
		var y = v.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p_x = x;
		var p_y = y;
		var point_x = p_x | 0;
		var point_y = p_y | 0;
		if(pc >= 100000) {
			console.log("vision/ds/Image.hx:938:","fillColor: too much iterations");
			queue.clear();
		} else {
			var tmp;
			var tmp1;
			var x1 = point_x;
			var y1 = point_y;
			if(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var x2 = point_x;
				var y2 = point_y;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y2 * this1.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this3 = value;
				tmp1 = this3 == originalColor;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var this4 = new haxe__$Int64__$_$_$Int64(point_x,point_y);
				tmp = explored.indexOf(this4) == -1;
			} else {
				tmp = false;
			}
			if(tmp) {
				++pc;
				var x3 = point_x;
				var y3 = point_y;
				if(y3 == null) {
					y3 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var p_x1 = x3;
				var p_y1 = y3;
				var this5 = new vision_ds__$IntPoint2D_Impl(p_x1 | 0,p_y1 | 0);
				queue.push(this5);
				var x4 = point_x;
				var y4 = point_y;
				if(!(x4 >= 0 && y4 >= 0 && x4 < this1.getUInt16(0) && y4 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x1 = x4;
					var this_y1 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v1 = null;
					var tmp2;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
						tmp2 = x4 >= 0 && y4 >= 0 && x4 < this1.getUInt16(0) && y4 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v1 != null) {
							view = v1;
						} else {
							var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this6 = this1.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this6[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x4 < view.x + view.width && y4 < view.y + view.height && x4 >= view.x && y4 >= view.y;
							break;
						case 1:
							has = !(x4 < view.x + view.width && y4 < view.y + view.height && x4 >= view.x && y4 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x5 = view.x + view.width / 2 - c;
								var y5 = view.y + view.height / 2;
								if(y5 == null) {
									y5 = 0;
								}
								if(x5 == null) {
									x5 = 0;
								}
								var f1_x = x5;
								var f1_y = y5;
								var x6 = view.x + view.width / 2 + c;
								var y6 = view.y + view.height / 2;
								if(y6 == null) {
									y6 = 0;
								}
								if(x6 == null) {
									x6 = 0;
								}
								var f2_x = x6;
								var f2_y = y6;
								var x7 = x4;
								var y7 = y4;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var p_x2 = x7;
								var p_y2 = y7;
								var x8 = p_x2 - f1_x;
								var y8 = p_y2 - f1_y;
								var x9 = p_x2 - f2_x;
								var y9 = p_y2 - f2_y;
								has = Math.sqrt(x8 * x8 + y8 * y8) + Math.sqrt(x9 * x9 + y9 * y9) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x10 = view.x + view.width / 2;
								var y10 = view.y + view.height / 2 - c1;
								if(y10 == null) {
									y10 = 0;
								}
								if(x10 == null) {
									x10 = 0;
								}
								var f1_x1 = x10;
								var f1_y1 = y10;
								var x11 = view.x + view.width / 2;
								var y11 = view.y + view.height / 2 + c1;
								if(y11 == null) {
									y11 = 0;
								}
								if(x11 == null) {
									x11 = 0;
								}
								var f2_x1 = x11;
								var f2_y1 = y11;
								var x12 = x4;
								var y12 = y4;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var p_x3 = x12;
								var p_y3 = y12;
								var x13 = p_x3 - f1_x1;
								var y13 = p_y3 - f1_y1;
								var x14 = p_x3 - f2_x1;
								var y14 = p_y3 - f2_y1;
								has = Math.sqrt(x13 * x13 + y13 * y13) + Math.sqrt(x14 * x14 + y14 * y14) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x15 = x4;
								var y15 = y4;
								if(y15 == null) {
									y15 = 0;
								}
								if(x15 == null) {
									x15 = 0;
								}
								var point1_x = x15;
								var point1_y = y15;
								var x16 = view.x + view.width / 2;
								var y16 = view.y + view.height / 2;
								if(y16 == null) {
									y16 = 0;
								}
								if(x16 == null) {
									x16 = 0;
								}
								var point2_x = x16;
								var point2_y = y16;
								var x17 = point2_x - point1_x;
								var y17 = point2_y - point1_y;
								has = Math.sqrt(x17 * x17 + y17 * y17) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x4 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y4 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x4 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y4 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp2 = has;
					}
					if(tmp2) {
						var position1 = (y4 * this1.getUInt16(0) + x4) * 4;
						position1 += vision_ds_Image.OFFSET;
						this1.b[position1] = color >> 24 & 255;
						this1.b[position1 + 1] = color >> 16 & 255;
						this1.b[position1 + 2] = color >> 8 & 255;
						this1.b[position1 + 3] = color & 255;
					}
				} else {
					var position2 = (y4 * this1.getUInt16(0) + x4) * 4;
					position2 += vision_ds_Image.OFFSET;
					this1.b[position2] = color >> 24 & 255;
					this1.b[position2 + 1] = color >> 16 & 255;
					this1.b[position2 + 2] = color >> 8 & 255;
					this1.b[position2 + 3] = color & 255;
				}
			}
		}
		var x18 = v.x;
		var y18 = v.y + 1;
		if(y18 == null) {
			y18 = 0;
		}
		if(x18 == null) {
			x18 = 0;
		}
		var p_x4 = x18;
		var p_y4 = y18;
		var point_x1 = p_x4 | 0;
		var point_y1 = p_y4 | 0;
		if(pc >= 100000) {
			console.log("vision/ds/Image.hx:938:","fillColor: too much iterations");
			queue.clear();
		} else {
			var tmp3;
			var tmp4;
			var x19 = point_x1;
			var y19 = point_y1;
			if(x19 >= 0 && y19 >= 0 && x19 < this1.getUInt16(0) && y19 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var x20 = point_x1;
				var y20 = point_y1;
				if(!(x20 >= 0 && y20 >= 0 && x20 < this1.getUInt16(0) && y20 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x2 = x20;
					var this_y2 = y20;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position3 = (y20 * this1.getUInt16(0) + x20) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value1 = this1.b[position3] << 24 | this1.b[position3 + 1] << 16 | this1.b[position3 + 2] << 8 | this1.b[position3 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this7 = value1;
				tmp4 = this7 == originalColor;
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				var this8 = new haxe__$Int64__$_$_$Int64(point_x1,point_y1);
				tmp3 = explored.indexOf(this8) == -1;
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				++pc;
				var x21 = point_x1;
				var y21 = point_y1;
				if(y21 == null) {
					y21 = 0;
				}
				if(x21 == null) {
					x21 = 0;
				}
				var p_x5 = x21;
				var p_y5 = y21;
				var this9 = new vision_ds__$IntPoint2D_Impl(p_x5 | 0,p_y5 | 0);
				queue.push(this9);
				var x22 = point_x1;
				var y22 = point_y1;
				if(!(x22 >= 0 && y22 >= 0 && x22 < this1.getUInt16(0) && y22 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x3 = x22;
					var this_y3 = y22;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v2 = null;
					var tmp5;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
						tmp5 = x22 >= 0 && y22 >= 0 && x22 < this1.getUInt16(0) && y22 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has1 = false;
						var view2;
						if(v2 != null) {
							view2 = v2;
						} else {
							var _g3 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this10 = this1.b;
							var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view2 = new vision_ds_ImageView(_g3,_g4,_g5,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this10[view3]);
						}
						switch(view2.shape) {
						case 0:
							has1 = x22 < view2.x + view2.width && y22 < view2.y + view2.height && x22 >= view2.x && y22 >= view2.y;
							break;
						case 1:
							has1 = !(x22 < view2.x + view2.width && y22 < view2.y + view2.height && x22 >= view2.x && y22 >= view2.y);
							break;
						case 2:case 3:
							if(view2.width > view2.height) {
								var a2 = view2.width / 2;
								var b2 = view2.height / 2;
								var c2 = Math.sqrt(a2 * a2 - b2 * b2);
								var x23 = view2.x + view2.width / 2 - c2;
								var y23 = view2.y + view2.height / 2;
								if(y23 == null) {
									y23 = 0;
								}
								if(x23 == null) {
									x23 = 0;
								}
								var f1_x2 = x23;
								var f1_y2 = y23;
								var x24 = view2.x + view2.width / 2 + c2;
								var y24 = view2.y + view2.height / 2;
								if(y24 == null) {
									y24 = 0;
								}
								if(x24 == null) {
									x24 = 0;
								}
								var f2_x2 = x24;
								var f2_y2 = y24;
								var x25 = x22;
								var y25 = y22;
								if(y25 == null) {
									y25 = 0;
								}
								if(x25 == null) {
									x25 = 0;
								}
								var p_x6 = x25;
								var p_y6 = y25;
								var x26 = p_x6 - f1_x2;
								var y26 = p_y6 - f1_y2;
								var x27 = p_x6 - f2_x2;
								var y27 = p_y6 - f2_y2;
								has1 = Math.sqrt(x26 * x26 + y26 * y26) + Math.sqrt(x27 * x27 + y27 * y27) <= view2.width;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else if(view2.height > view2.width) {
								var a3 = view2.height / 2;
								var b3 = view2.width / 2;
								var c3 = Math.sqrt(a3 * a3 - b3 * b3);
								var x28 = view2.x + view2.width / 2;
								var y28 = view2.y + view2.height / 2 - c3;
								if(y28 == null) {
									y28 = 0;
								}
								if(x28 == null) {
									x28 = 0;
								}
								var f1_x3 = x28;
								var f1_y3 = y28;
								var x29 = view2.x + view2.width / 2;
								var y29 = view2.y + view2.height / 2 + c3;
								if(y29 == null) {
									y29 = 0;
								}
								if(x29 == null) {
									x29 = 0;
								}
								var f2_x3 = x29;
								var f2_y3 = y29;
								var x30 = x22;
								var y30 = y22;
								if(y30 == null) {
									y30 = 0;
								}
								if(x30 == null) {
									x30 = 0;
								}
								var p_x7 = x30;
								var p_y7 = y30;
								var x31 = p_x7 - f1_x3;
								var y31 = p_y7 - f1_y3;
								var x32 = p_x7 - f2_x3;
								var y32 = p_y7 - f2_y3;
								has1 = Math.sqrt(x31 * x31 + y31 * y31) + Math.sqrt(x32 * x32 + y32 * y32) <= view2.height;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else {
								var x33 = x22;
								var y33 = y22;
								if(y33 == null) {
									y33 = 0;
								}
								if(x33 == null) {
									x33 = 0;
								}
								var point1_x1 = x33;
								var point1_y1 = y33;
								var x34 = view2.x + view2.width / 2;
								var y34 = view2.y + view2.height / 2;
								if(y34 == null) {
									y34 = 0;
								}
								if(x34 == null) {
									x34 = 0;
								}
								var point2_x1 = x34;
								var point2_y1 = y34;
								var x35 = point2_x1 - point1_x1;
								var y35 = point2_y1 - point1_y1;
								has1 = Math.sqrt(x35 * x35 + y35 * y35) <= view2.width / 2;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							}
							break;
						case 4:
							has1 = Math.abs(x22 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y22 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
							break;
						case 5:
							has1 = !(Math.abs(x22 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y22 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
							break;
						}
						tmp5 = has1;
					}
					if(tmp5) {
						var position4 = (y22 * this1.getUInt16(0) + x22) * 4;
						position4 += vision_ds_Image.OFFSET;
						this1.b[position4] = color >> 24 & 255;
						this1.b[position4 + 1] = color >> 16 & 255;
						this1.b[position4 + 2] = color >> 8 & 255;
						this1.b[position4 + 3] = color & 255;
					}
				} else {
					var position5 = (y22 * this1.getUInt16(0) + x22) * 4;
					position5 += vision_ds_Image.OFFSET;
					this1.b[position5] = color >> 24 & 255;
					this1.b[position5 + 1] = color >> 16 & 255;
					this1.b[position5 + 2] = color >> 8 & 255;
					this1.b[position5 + 3] = color & 255;
				}
			}
		}
		var x36 = v.x - 1;
		var y36 = v.y;
		if(y36 == null) {
			y36 = 0;
		}
		if(x36 == null) {
			x36 = 0;
		}
		var p_x8 = x36;
		var p_y8 = y36;
		var point_x2 = p_x8 | 0;
		var point_y2 = p_y8 | 0;
		if(pc >= 100000) {
			console.log("vision/ds/Image.hx:938:","fillColor: too much iterations");
			queue.clear();
		} else {
			var tmp6;
			var tmp7;
			var x37 = point_x2;
			var y37 = point_y2;
			if(x37 >= 0 && y37 >= 0 && x37 < this1.getUInt16(0) && y37 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var x38 = point_x2;
				var y38 = point_y2;
				if(!(x38 >= 0 && y38 >= 0 && x38 < this1.getUInt16(0) && y38 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x4 = x38;
					var this_y4 = y38;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position6 = (y38 * this1.getUInt16(0) + x38) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value2 = this1.b[position6] << 24 | this1.b[position6 + 1] << 16 | this1.b[position6 + 2] << 8 | this1.b[position6 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var this11 = value2;
				tmp7 = this11 == originalColor;
			} else {
				tmp7 = false;
			}
			if(tmp7) {
				var this12 = new haxe__$Int64__$_$_$Int64(point_x2,point_y2);
				tmp6 = explored.indexOf(this12) == -1;
			} else {
				tmp6 = false;
			}
			if(tmp6) {
				++pc;
				var x39 = point_x2;
				var y39 = point_y2;
				if(y39 == null) {
					y39 = 0;
				}
				if(x39 == null) {
					x39 = 0;
				}
				var p_x9 = x39;
				var p_y9 = y39;
				var this13 = new vision_ds__$IntPoint2D_Impl(p_x9 | 0,p_y9 | 0);
				queue.push(this13);
				var x40 = point_x2;
				var y40 = point_y2;
				if(!(x40 >= 0 && y40 >= 0 && x40 < this1.getUInt16(0) && y40 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x5 = x40;
					var this_y5 = y40;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x5,this_y5)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v3 = null;
					var tmp8;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
						tmp8 = x40 >= 0 && y40 >= 0 && x40 < this1.getUInt16(0) && y40 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has2 = false;
						var view4;
						if(v3 != null) {
							view4 = v3;
						} else {
							var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this14 = this1.b;
							var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view4 = new vision_ds_ImageView(_g6,_g7,_g8,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this14[view5]);
						}
						switch(view4.shape) {
						case 0:
							has2 = x40 < view4.x + view4.width && y40 < view4.y + view4.height && x40 >= view4.x && y40 >= view4.y;
							break;
						case 1:
							has2 = !(x40 < view4.x + view4.width && y40 < view4.y + view4.height && x40 >= view4.x && y40 >= view4.y);
							break;
						case 2:case 3:
							if(view4.width > view4.height) {
								var a4 = view4.width / 2;
								var b4 = view4.height / 2;
								var c4 = Math.sqrt(a4 * a4 - b4 * b4);
								var x41 = view4.x + view4.width / 2 - c4;
								var y41 = view4.y + view4.height / 2;
								if(y41 == null) {
									y41 = 0;
								}
								if(x41 == null) {
									x41 = 0;
								}
								var f1_x4 = x41;
								var f1_y4 = y41;
								var x42 = view4.x + view4.width / 2 + c4;
								var y42 = view4.y + view4.height / 2;
								if(y42 == null) {
									y42 = 0;
								}
								if(x42 == null) {
									x42 = 0;
								}
								var f2_x4 = x42;
								var f2_y4 = y42;
								var x43 = x40;
								var y43 = y40;
								if(y43 == null) {
									y43 = 0;
								}
								if(x43 == null) {
									x43 = 0;
								}
								var p_x10 = x43;
								var p_y10 = y43;
								var x44 = p_x10 - f1_x4;
								var y44 = p_y10 - f1_y4;
								var x45 = p_x10 - f2_x4;
								var y45 = p_y10 - f2_y4;
								has2 = Math.sqrt(x44 * x44 + y44 * y44) + Math.sqrt(x45 * x45 + y45 * y45) <= view4.width;
								if(view4.shape == 3) {
									has2 = !has2;
								}
							} else if(view4.height > view4.width) {
								var a5 = view4.height / 2;
								var b5 = view4.width / 2;
								var c5 = Math.sqrt(a5 * a5 - b5 * b5);
								var x46 = view4.x + view4.width / 2;
								var y46 = view4.y + view4.height / 2 - c5;
								if(y46 == null) {
									y46 = 0;
								}
								if(x46 == null) {
									x46 = 0;
								}
								var f1_x5 = x46;
								var f1_y5 = y46;
								var x47 = view4.x + view4.width / 2;
								var y47 = view4.y + view4.height / 2 + c5;
								if(y47 == null) {
									y47 = 0;
								}
								if(x47 == null) {
									x47 = 0;
								}
								var f2_x5 = x47;
								var f2_y5 = y47;
								var x48 = x40;
								var y48 = y40;
								if(y48 == null) {
									y48 = 0;
								}
								if(x48 == null) {
									x48 = 0;
								}
								var p_x11 = x48;
								var p_y11 = y48;
								var x49 = p_x11 - f1_x5;
								var y49 = p_y11 - f1_y5;
								var x50 = p_x11 - f2_x5;
								var y50 = p_y11 - f2_y5;
								has2 = Math.sqrt(x49 * x49 + y49 * y49) + Math.sqrt(x50 * x50 + y50 * y50) <= view4.height;
								if(view4.shape == 3) {
									has2 = !has2;
								}
							} else {
								var x51 = x40;
								var y51 = y40;
								if(y51 == null) {
									y51 = 0;
								}
								if(x51 == null) {
									x51 = 0;
								}
								var point1_x2 = x51;
								var point1_y2 = y51;
								var x52 = view4.x + view4.width / 2;
								var y52 = view4.y + view4.height / 2;
								if(y52 == null) {
									y52 = 0;
								}
								if(x52 == null) {
									x52 = 0;
								}
								var point2_x2 = x52;
								var point2_y2 = y52;
								var x53 = point2_x2 - point1_x2;
								var y53 = point2_y2 - point1_y2;
								has2 = Math.sqrt(x53 * x53 + y53 * y53) <= view4.width / 2;
								if(view4.shape == 3) {
									has2 = !has2;
								}
							}
							break;
						case 4:
							has2 = Math.abs(x40 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y40 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
							break;
						case 5:
							has2 = !(Math.abs(x40 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y40 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
							break;
						}
						tmp8 = has2;
					}
					if(tmp8) {
						var position7 = (y40 * this1.getUInt16(0) + x40) * 4;
						position7 += vision_ds_Image.OFFSET;
						this1.b[position7] = color >> 24 & 255;
						this1.b[position7 + 1] = color >> 16 & 255;
						this1.b[position7 + 2] = color >> 8 & 255;
						this1.b[position7 + 3] = color & 255;
					}
				} else {
					var position8 = (y40 * this1.getUInt16(0) + x40) * 4;
					position8 += vision_ds_Image.OFFSET;
					this1.b[position8] = color >> 24 & 255;
					this1.b[position8 + 1] = color >> 16 & 255;
					this1.b[position8 + 2] = color >> 8 & 255;
					this1.b[position8 + 3] = color & 255;
				}
			}
		}
		var x54 = v.x;
		var y54 = v.y - 1;
		if(y54 == null) {
			y54 = 0;
		}
		if(x54 == null) {
			x54 = 0;
		}
		var p_x12 = x54;
		var p_y12 = y54;
		var point_x3 = p_x12 | 0;
		var point_y3 = p_y12 | 0;
		if(pc >= 100000) {
			console.log("vision/ds/Image.hx:938:","fillColor: too much iterations");
			queue.clear();
		} else {
			var tmp9;
			var tmp10;
			var x55 = point_x3;
			var y55 = point_y3;
			if(x55 >= 0 && y55 >= 0 && x55 < this1.getUInt16(0) && y55 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var x56 = point_x3;
				var y56 = point_y3;
				if(!(x56 >= 0 && y56 >= 0 && x56 < this1.getUInt16(0) && y56 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x6 = x56;
					var this_y6 = y56;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position9 = (y56 * this1.getUInt16(0) + x56) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value3 = this1.b[position9] << 24 | this1.b[position9 + 1] << 16 | this1.b[position9 + 2] << 8 | this1.b[position9 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var this15 = value3;
				tmp10 = this15 == originalColor;
			} else {
				tmp10 = false;
			}
			if(tmp10) {
				var this16 = new haxe__$Int64__$_$_$Int64(point_x3,point_y3);
				tmp9 = explored.indexOf(this16) == -1;
			} else {
				tmp9 = false;
			}
			if(tmp9) {
				++pc;
				var x57 = point_x3;
				var y57 = point_y3;
				if(y57 == null) {
					y57 = 0;
				}
				if(x57 == null) {
					x57 = 0;
				}
				var p_x13 = x57;
				var p_y13 = y57;
				var this17 = new vision_ds__$IntPoint2D_Impl(p_x13 | 0,p_y13 | 0);
				queue.push(this17);
				var x58 = point_x3;
				var y58 = point_y3;
				if(!(x58 >= 0 && y58 >= 0 && x58 < this1.getUInt16(0) && y58 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x7 = x58;
					var this_y7 = y58;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x7,this_y7)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v4 = null;
					var tmp11;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v4 == null) {
						tmp11 = x58 >= 0 && y58 >= 0 && x58 < this1.getUInt16(0) && y58 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has3 = false;
						var view6;
						if(v4 != null) {
							view6 = v4;
						} else {
							var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g11 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this18 = this1.b;
							var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view6 = new vision_ds_ImageView(_g9,_g10,_g11,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this18[view7]);
						}
						switch(view6.shape) {
						case 0:
							has3 = x58 < view6.x + view6.width && y58 < view6.y + view6.height && x58 >= view6.x && y58 >= view6.y;
							break;
						case 1:
							has3 = !(x58 < view6.x + view6.width && y58 < view6.y + view6.height && x58 >= view6.x && y58 >= view6.y);
							break;
						case 2:case 3:
							if(view6.width > view6.height) {
								var a6 = view6.width / 2;
								var b6 = view6.height / 2;
								var c6 = Math.sqrt(a6 * a6 - b6 * b6);
								var x59 = view6.x + view6.width / 2 - c6;
								var y59 = view6.y + view6.height / 2;
								if(y59 == null) {
									y59 = 0;
								}
								if(x59 == null) {
									x59 = 0;
								}
								var f1_x6 = x59;
								var f1_y6 = y59;
								var x60 = view6.x + view6.width / 2 + c6;
								var y60 = view6.y + view6.height / 2;
								if(y60 == null) {
									y60 = 0;
								}
								if(x60 == null) {
									x60 = 0;
								}
								var f2_x6 = x60;
								var f2_y6 = y60;
								var x61 = x58;
								var y61 = y58;
								if(y61 == null) {
									y61 = 0;
								}
								if(x61 == null) {
									x61 = 0;
								}
								var p_x14 = x61;
								var p_y14 = y61;
								var x62 = p_x14 - f1_x6;
								var y62 = p_y14 - f1_y6;
								var x63 = p_x14 - f2_x6;
								var y63 = p_y14 - f2_y6;
								has3 = Math.sqrt(x62 * x62 + y62 * y62) + Math.sqrt(x63 * x63 + y63 * y63) <= view6.width;
								if(view6.shape == 3) {
									has3 = !has3;
								}
							} else if(view6.height > view6.width) {
								var a7 = view6.height / 2;
								var b7 = view6.width / 2;
								var c7 = Math.sqrt(a7 * a7 - b7 * b7);
								var x64 = view6.x + view6.width / 2;
								var y64 = view6.y + view6.height / 2 - c7;
								if(y64 == null) {
									y64 = 0;
								}
								if(x64 == null) {
									x64 = 0;
								}
								var f1_x7 = x64;
								var f1_y7 = y64;
								var x65 = view6.x + view6.width / 2;
								var y65 = view6.y + view6.height / 2 + c7;
								if(y65 == null) {
									y65 = 0;
								}
								if(x65 == null) {
									x65 = 0;
								}
								var f2_x7 = x65;
								var f2_y7 = y65;
								var x66 = x58;
								var y66 = y58;
								if(y66 == null) {
									y66 = 0;
								}
								if(x66 == null) {
									x66 = 0;
								}
								var p_x15 = x66;
								var p_y15 = y66;
								var x67 = p_x15 - f1_x7;
								var y67 = p_y15 - f1_y7;
								var x68 = p_x15 - f2_x7;
								var y68 = p_y15 - f2_y7;
								has3 = Math.sqrt(x67 * x67 + y67 * y67) + Math.sqrt(x68 * x68 + y68 * y68) <= view6.height;
								if(view6.shape == 3) {
									has3 = !has3;
								}
							} else {
								var x69 = x58;
								var y69 = y58;
								if(y69 == null) {
									y69 = 0;
								}
								if(x69 == null) {
									x69 = 0;
								}
								var point1_x3 = x69;
								var point1_y3 = y69;
								var x70 = view6.x + view6.width / 2;
								var y70 = view6.y + view6.height / 2;
								if(y70 == null) {
									y70 = 0;
								}
								if(x70 == null) {
									x70 = 0;
								}
								var point2_x3 = x70;
								var point2_y3 = y70;
								var x71 = point2_x3 - point1_x3;
								var y71 = point2_y3 - point1_y3;
								has3 = Math.sqrt(x71 * x71 + y71 * y71) <= view6.width / 2;
								if(view6.shape == 3) {
									has3 = !has3;
								}
							}
							break;
						case 4:
							has3 = Math.abs(x58 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y58 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
							break;
						case 5:
							has3 = !(Math.abs(x58 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y58 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
							break;
						}
						tmp11 = has3;
					}
					if(tmp11) {
						var position10 = (y58 * this1.getUInt16(0) + x58) * 4;
						position10 += vision_ds_Image.OFFSET;
						this1.b[position10] = color >> 24 & 255;
						this1.b[position10 + 1] = color >> 16 & 255;
						this1.b[position10 + 2] = color >> 8 & 255;
						this1.b[position10 + 3] = color & 255;
					}
				} else {
					var position11 = (y58 * this1.getUInt16(0) + x58) * 4;
					position11 += vision_ds_Image.OFFSET;
					this1.b[position11] = color >> 24 & 255;
					this1.b[position11 + 1] = color >> 16 & 255;
					this1.b[position11 + 2] = color >> 8 & 255;
					this1.b[position11 + 3] = color & 255;
				}
			}
		}
	}
};
vision_ds_Image.fillUntilColor = function(this1,position,color,borderColor) {
	var queue = new haxe_ds_List();
	var x = position.x;
	var y = position.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p_x = x;
	var p_y = y;
	var this2 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
	queue.push(this2);
	var explored = [];
	var pc = 0;
	while(queue.length > 0) {
		var v = queue.pop();
		var this2 = new haxe__$Int64__$_$_$Int64(v.x,v.y);
		explored.push(this2);
		var x = v.x + 1;
		var y = v.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p_x = x;
		var p_y = y;
		var point_x = p_x | 0;
		var point_y = p_y | 0;
		if(pc >= 100000) {
			console.log("vision/ds/Image.hx:974:","fillColor: too much iterations");
			queue.clear();
		} else {
			var x1 = point_x;
			var y1 = point_y;
			if(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var this3 = new haxe__$Int64__$_$_$Int64(point_x,point_y);
				if(explored.indexOf(this3) == -1) {
					var x2 = point_x;
					var y2 = point_y;
					if(!(x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
						var this_x = x2;
						var this_y = y2;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
					}
					var position = (y2 * this1.getUInt16(0) + x2) * 4;
					position += vision_ds_Image.OFFSET;
					var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this4 = value;
					if(this4 != color) {
						var x3 = point_x;
						var y3 = point_y;
						if(!(x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
							var this_x1 = x3;
							var this_y1 = y3;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
						}
						var position1 = (y3 * this1.getUInt16(0) + x3) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = this1.b[position1] << 24 | this1.b[position1 + 1] << 16 | this1.b[position1 + 2] << 8 | this1.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						var this5 = value1;
						if(this5 != borderColor) {
							++pc;
							var x4 = point_x;
							var y4 = point_y;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var p_x1 = x4;
							var p_y1 = y4;
							var this6 = new vision_ds__$IntPoint2D_Impl(p_x1 | 0,p_y1 | 0);
							queue.push(this6);
							var x5 = point_x;
							var y5 = point_y;
							if(!(x5 >= 0 && y5 >= 0 && x5 < this1.getUInt16(0) && y5 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
								var this_x2 = x5;
								var this_y2 = y5;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
							} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v1 = null;
								var tmp;
								if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
									tmp = x5 >= 0 && y5 >= 0 && x5 < this1.getUInt16(0) && y5 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
								} else {
									var has = false;
									var view;
									if(v1 != null) {
										view = v1;
									} else {
										var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var this7 = this1.b;
										var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this7[view1]);
									}
									switch(view.shape) {
									case 0:
										has = x5 < view.x + view.width && y5 < view.y + view.height && x5 >= view.x && y5 >= view.y;
										break;
									case 1:
										has = !(x5 < view.x + view.width && y5 < view.y + view.height && x5 >= view.x && y5 >= view.y);
										break;
									case 2:case 3:
										if(view.width > view.height) {
											var a = view.width / 2;
											var b = view.height / 2;
											var c = Math.sqrt(a * a - b * b);
											var x6 = view.x + view.width / 2 - c;
											var y6 = view.y + view.height / 2;
											if(y6 == null) {
												y6 = 0;
											}
											if(x6 == null) {
												x6 = 0;
											}
											var f1_x = x6;
											var f1_y = y6;
											var x7 = view.x + view.width / 2 + c;
											var y7 = view.y + view.height / 2;
											if(y7 == null) {
												y7 = 0;
											}
											if(x7 == null) {
												x7 = 0;
											}
											var f2_x = x7;
											var f2_y = y7;
											var x8 = x5;
											var y8 = y5;
											if(y8 == null) {
												y8 = 0;
											}
											if(x8 == null) {
												x8 = 0;
											}
											var p_x2 = x8;
											var p_y2 = y8;
											var x9 = p_x2 - f1_x;
											var y9 = p_y2 - f1_y;
											var x10 = p_x2 - f2_x;
											var y10 = p_y2 - f2_y;
											has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.width;
											if(view.shape == 3) {
												has = !has;
											}
										} else if(view.height > view.width) {
											var a1 = view.height / 2;
											var b1 = view.width / 2;
											var c1 = Math.sqrt(a1 * a1 - b1 * b1);
											var x11 = view.x + view.width / 2;
											var y11 = view.y + view.height / 2 - c1;
											if(y11 == null) {
												y11 = 0;
											}
											if(x11 == null) {
												x11 = 0;
											}
											var f1_x1 = x11;
											var f1_y1 = y11;
											var x12 = view.x + view.width / 2;
											var y12 = view.y + view.height / 2 + c1;
											if(y12 == null) {
												y12 = 0;
											}
											if(x12 == null) {
												x12 = 0;
											}
											var f2_x1 = x12;
											var f2_y1 = y12;
											var x13 = x5;
											var y13 = y5;
											if(y13 == null) {
												y13 = 0;
											}
											if(x13 == null) {
												x13 = 0;
											}
											var p_x3 = x13;
											var p_y3 = y13;
											var x14 = p_x3 - f1_x1;
											var y14 = p_y3 - f1_y1;
											var x15 = p_x3 - f2_x1;
											var y15 = p_y3 - f2_y1;
											has = Math.sqrt(x14 * x14 + y14 * y14) + Math.sqrt(x15 * x15 + y15 * y15) <= view.height;
											if(view.shape == 3) {
												has = !has;
											}
										} else {
											var x16 = x5;
											var y16 = y5;
											if(y16 == null) {
												y16 = 0;
											}
											if(x16 == null) {
												x16 = 0;
											}
											var point1_x = x16;
											var point1_y = y16;
											var x17 = view.x + view.width / 2;
											var y17 = view.y + view.height / 2;
											if(y17 == null) {
												y17 = 0;
											}
											if(x17 == null) {
												x17 = 0;
											}
											var point2_x = x17;
											var point2_y = y17;
											var x18 = point2_x - point1_x;
											var y18 = point2_y - point1_y;
											has = Math.sqrt(x18 * x18 + y18 * y18) <= view.width / 2;
											if(view.shape == 3) {
												has = !has;
											}
										}
										break;
									case 4:
										has = Math.abs(x5 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y5 - view.y - view.height / 2) / (view.height / 2) <= 1;
										break;
									case 5:
										has = !(Math.abs(x5 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y5 - view.y - view.height / 2) / (view.height / 2) <= 1);
										break;
									}
									tmp = has;
								}
								if(tmp) {
									var position2 = (y5 * this1.getUInt16(0) + x5) * 4;
									position2 += vision_ds_Image.OFFSET;
									this1.b[position2] = color >> 24 & 255;
									this1.b[position2 + 1] = color >> 16 & 255;
									this1.b[position2 + 2] = color >> 8 & 255;
									this1.b[position2 + 3] = color & 255;
								}
							} else {
								var position3 = (y5 * this1.getUInt16(0) + x5) * 4;
								position3 += vision_ds_Image.OFFSET;
								this1.b[position3] = color >> 24 & 255;
								this1.b[position3 + 1] = color >> 16 & 255;
								this1.b[position3 + 2] = color >> 8 & 255;
								this1.b[position3 + 3] = color & 255;
							}
						}
					}
				}
			}
		}
		var x19 = v.x;
		var y19 = v.y + 1;
		if(y19 == null) {
			y19 = 0;
		}
		if(x19 == null) {
			x19 = 0;
		}
		var p_x4 = x19;
		var p_y4 = y19;
		var point_x1 = p_x4 | 0;
		var point_y1 = p_y4 | 0;
		if(pc >= 100000) {
			console.log("vision/ds/Image.hx:974:","fillColor: too much iterations");
			queue.clear();
		} else {
			var x20 = point_x1;
			var y20 = point_y1;
			if(x20 >= 0 && y20 >= 0 && x20 < this1.getUInt16(0) && y20 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var this8 = new haxe__$Int64__$_$_$Int64(point_x1,point_y1);
				if(explored.indexOf(this8) == -1) {
					var x21 = point_x1;
					var y21 = point_y1;
					if(!(x21 >= 0 && y21 >= 0 && x21 < this1.getUInt16(0) && y21 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
						var this_x3 = x21;
						var this_y3 = y21;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
					}
					var position4 = (y21 * this1.getUInt16(0) + x21) * 4;
					position4 += vision_ds_Image.OFFSET;
					var value2 = this1.b[position4] << 24 | this1.b[position4 + 1] << 16 | this1.b[position4 + 2] << 8 | this1.b[position4 + 3];
					if(value2 == null) {
						value2 = 0;
					}
					var this9 = value2;
					if(this9 != color) {
						var x22 = point_x1;
						var y22 = point_y1;
						if(!(x22 >= 0 && y22 >= 0 && x22 < this1.getUInt16(0) && y22 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
							var this_x4 = x22;
							var this_y4 = y22;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x4,this_y4)));
						}
						var position5 = (y22 * this1.getUInt16(0) + x22) * 4;
						position5 += vision_ds_Image.OFFSET;
						var value3 = this1.b[position5] << 24 | this1.b[position5 + 1] << 16 | this1.b[position5 + 2] << 8 | this1.b[position5 + 3];
						if(value3 == null) {
							value3 = 0;
						}
						var this10 = value3;
						if(this10 != borderColor) {
							++pc;
							var x23 = point_x1;
							var y23 = point_y1;
							if(y23 == null) {
								y23 = 0;
							}
							if(x23 == null) {
								x23 = 0;
							}
							var p_x5 = x23;
							var p_y5 = y23;
							var this11 = new vision_ds__$IntPoint2D_Impl(p_x5 | 0,p_y5 | 0);
							queue.push(this11);
							var x24 = point_x1;
							var y24 = point_y1;
							if(!(x24 >= 0 && y24 >= 0 && x24 < this1.getUInt16(0) && y24 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
								var this_x5 = x24;
								var this_y5 = y24;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x5,this_y5)));
							} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v2 = null;
								var tmp1;
								if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
									tmp1 = x24 >= 0 && y24 >= 0 && x24 < this1.getUInt16(0) && y24 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
								} else {
									var has1 = false;
									var view2;
									if(v2 != null) {
										view2 = v2;
									} else {
										var _g3 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var this12 = this1.b;
										var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view2 = new vision_ds_ImageView(_g3,_g4,_g5,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this12[view3]);
									}
									switch(view2.shape) {
									case 0:
										has1 = x24 < view2.x + view2.width && y24 < view2.y + view2.height && x24 >= view2.x && y24 >= view2.y;
										break;
									case 1:
										has1 = !(x24 < view2.x + view2.width && y24 < view2.y + view2.height && x24 >= view2.x && y24 >= view2.y);
										break;
									case 2:case 3:
										if(view2.width > view2.height) {
											var a2 = view2.width / 2;
											var b2 = view2.height / 2;
											var c2 = Math.sqrt(a2 * a2 - b2 * b2);
											var x25 = view2.x + view2.width / 2 - c2;
											var y25 = view2.y + view2.height / 2;
											if(y25 == null) {
												y25 = 0;
											}
											if(x25 == null) {
												x25 = 0;
											}
											var f1_x2 = x25;
											var f1_y2 = y25;
											var x26 = view2.x + view2.width / 2 + c2;
											var y26 = view2.y + view2.height / 2;
											if(y26 == null) {
												y26 = 0;
											}
											if(x26 == null) {
												x26 = 0;
											}
											var f2_x2 = x26;
											var f2_y2 = y26;
											var x27 = x24;
											var y27 = y24;
											if(y27 == null) {
												y27 = 0;
											}
											if(x27 == null) {
												x27 = 0;
											}
											var p_x6 = x27;
											var p_y6 = y27;
											var x28 = p_x6 - f1_x2;
											var y28 = p_y6 - f1_y2;
											var x29 = p_x6 - f2_x2;
											var y29 = p_y6 - f2_y2;
											has1 = Math.sqrt(x28 * x28 + y28 * y28) + Math.sqrt(x29 * x29 + y29 * y29) <= view2.width;
											if(view2.shape == 3) {
												has1 = !has1;
											}
										} else if(view2.height > view2.width) {
											var a3 = view2.height / 2;
											var b3 = view2.width / 2;
											var c3 = Math.sqrt(a3 * a3 - b3 * b3);
											var x30 = view2.x + view2.width / 2;
											var y30 = view2.y + view2.height / 2 - c3;
											if(y30 == null) {
												y30 = 0;
											}
											if(x30 == null) {
												x30 = 0;
											}
											var f1_x3 = x30;
											var f1_y3 = y30;
											var x31 = view2.x + view2.width / 2;
											var y31 = view2.y + view2.height / 2 + c3;
											if(y31 == null) {
												y31 = 0;
											}
											if(x31 == null) {
												x31 = 0;
											}
											var f2_x3 = x31;
											var f2_y3 = y31;
											var x32 = x24;
											var y32 = y24;
											if(y32 == null) {
												y32 = 0;
											}
											if(x32 == null) {
												x32 = 0;
											}
											var p_x7 = x32;
											var p_y7 = y32;
											var x33 = p_x7 - f1_x3;
											var y33 = p_y7 - f1_y3;
											var x34 = p_x7 - f2_x3;
											var y34 = p_y7 - f2_y3;
											has1 = Math.sqrt(x33 * x33 + y33 * y33) + Math.sqrt(x34 * x34 + y34 * y34) <= view2.height;
											if(view2.shape == 3) {
												has1 = !has1;
											}
										} else {
											var x35 = x24;
											var y35 = y24;
											if(y35 == null) {
												y35 = 0;
											}
											if(x35 == null) {
												x35 = 0;
											}
											var point1_x1 = x35;
											var point1_y1 = y35;
											var x36 = view2.x + view2.width / 2;
											var y36 = view2.y + view2.height / 2;
											if(y36 == null) {
												y36 = 0;
											}
											if(x36 == null) {
												x36 = 0;
											}
											var point2_x1 = x36;
											var point2_y1 = y36;
											var x37 = point2_x1 - point1_x1;
											var y37 = point2_y1 - point1_y1;
											has1 = Math.sqrt(x37 * x37 + y37 * y37) <= view2.width / 2;
											if(view2.shape == 3) {
												has1 = !has1;
											}
										}
										break;
									case 4:
										has1 = Math.abs(x24 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y24 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
										break;
									case 5:
										has1 = !(Math.abs(x24 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y24 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
										break;
									}
									tmp1 = has1;
								}
								if(tmp1) {
									var position6 = (y24 * this1.getUInt16(0) + x24) * 4;
									position6 += vision_ds_Image.OFFSET;
									this1.b[position6] = color >> 24 & 255;
									this1.b[position6 + 1] = color >> 16 & 255;
									this1.b[position6 + 2] = color >> 8 & 255;
									this1.b[position6 + 3] = color & 255;
								}
							} else {
								var position7 = (y24 * this1.getUInt16(0) + x24) * 4;
								position7 += vision_ds_Image.OFFSET;
								this1.b[position7] = color >> 24 & 255;
								this1.b[position7 + 1] = color >> 16 & 255;
								this1.b[position7 + 2] = color >> 8 & 255;
								this1.b[position7 + 3] = color & 255;
							}
						}
					}
				}
			}
		}
		var x38 = v.x - 1;
		var y38 = v.y;
		if(y38 == null) {
			y38 = 0;
		}
		if(x38 == null) {
			x38 = 0;
		}
		var p_x8 = x38;
		var p_y8 = y38;
		var point_x2 = p_x8 | 0;
		var point_y2 = p_y8 | 0;
		if(pc >= 100000) {
			console.log("vision/ds/Image.hx:974:","fillColor: too much iterations");
			queue.clear();
		} else {
			var x39 = point_x2;
			var y39 = point_y2;
			if(x39 >= 0 && y39 >= 0 && x39 < this1.getUInt16(0) && y39 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var this13 = new haxe__$Int64__$_$_$Int64(point_x2,point_y2);
				if(explored.indexOf(this13) == -1) {
					var x40 = point_x2;
					var y40 = point_y2;
					if(!(x40 >= 0 && y40 >= 0 && x40 < this1.getUInt16(0) && y40 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
						var this_x6 = x40;
						var this_y6 = y40;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x6,this_y6)));
					}
					var position8 = (y40 * this1.getUInt16(0) + x40) * 4;
					position8 += vision_ds_Image.OFFSET;
					var value4 = this1.b[position8] << 24 | this1.b[position8 + 1] << 16 | this1.b[position8 + 2] << 8 | this1.b[position8 + 3];
					if(value4 == null) {
						value4 = 0;
					}
					var this14 = value4;
					if(this14 != color) {
						var x41 = point_x2;
						var y41 = point_y2;
						if(!(x41 >= 0 && y41 >= 0 && x41 < this1.getUInt16(0) && y41 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
							var this_x7 = x41;
							var this_y7 = y41;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x7,this_y7)));
						}
						var position9 = (y41 * this1.getUInt16(0) + x41) * 4;
						position9 += vision_ds_Image.OFFSET;
						var value5 = this1.b[position9] << 24 | this1.b[position9 + 1] << 16 | this1.b[position9 + 2] << 8 | this1.b[position9 + 3];
						if(value5 == null) {
							value5 = 0;
						}
						var this15 = value5;
						if(this15 != borderColor) {
							++pc;
							var x42 = point_x2;
							var y42 = point_y2;
							if(y42 == null) {
								y42 = 0;
							}
							if(x42 == null) {
								x42 = 0;
							}
							var p_x9 = x42;
							var p_y9 = y42;
							var this16 = new vision_ds__$IntPoint2D_Impl(p_x9 | 0,p_y9 | 0);
							queue.push(this16);
							var x43 = point_x2;
							var y43 = point_y2;
							if(!(x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
								var this_x8 = x43;
								var this_y8 = y43;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x8,this_y8)));
							} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v3 = null;
								var tmp2;
								if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
									tmp2 = x43 >= 0 && y43 >= 0 && x43 < this1.getUInt16(0) && y43 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
								} else {
									var has2 = false;
									var view4;
									if(v3 != null) {
										view4 = v3;
									} else {
										var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var this17 = this1.b;
										var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view4 = new vision_ds_ImageView(_g6,_g7,_g8,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this17[view5]);
									}
									switch(view4.shape) {
									case 0:
										has2 = x43 < view4.x + view4.width && y43 < view4.y + view4.height && x43 >= view4.x && y43 >= view4.y;
										break;
									case 1:
										has2 = !(x43 < view4.x + view4.width && y43 < view4.y + view4.height && x43 >= view4.x && y43 >= view4.y);
										break;
									case 2:case 3:
										if(view4.width > view4.height) {
											var a4 = view4.width / 2;
											var b4 = view4.height / 2;
											var c4 = Math.sqrt(a4 * a4 - b4 * b4);
											var x44 = view4.x + view4.width / 2 - c4;
											var y44 = view4.y + view4.height / 2;
											if(y44 == null) {
												y44 = 0;
											}
											if(x44 == null) {
												x44 = 0;
											}
											var f1_x4 = x44;
											var f1_y4 = y44;
											var x45 = view4.x + view4.width / 2 + c4;
											var y45 = view4.y + view4.height / 2;
											if(y45 == null) {
												y45 = 0;
											}
											if(x45 == null) {
												x45 = 0;
											}
											var f2_x4 = x45;
											var f2_y4 = y45;
											var x46 = x43;
											var y46 = y43;
											if(y46 == null) {
												y46 = 0;
											}
											if(x46 == null) {
												x46 = 0;
											}
											var p_x10 = x46;
											var p_y10 = y46;
											var x47 = p_x10 - f1_x4;
											var y47 = p_y10 - f1_y4;
											var x48 = p_x10 - f2_x4;
											var y48 = p_y10 - f2_y4;
											has2 = Math.sqrt(x47 * x47 + y47 * y47) + Math.sqrt(x48 * x48 + y48 * y48) <= view4.width;
											if(view4.shape == 3) {
												has2 = !has2;
											}
										} else if(view4.height > view4.width) {
											var a5 = view4.height / 2;
											var b5 = view4.width / 2;
											var c5 = Math.sqrt(a5 * a5 - b5 * b5);
											var x49 = view4.x + view4.width / 2;
											var y49 = view4.y + view4.height / 2 - c5;
											if(y49 == null) {
												y49 = 0;
											}
											if(x49 == null) {
												x49 = 0;
											}
											var f1_x5 = x49;
											var f1_y5 = y49;
											var x50 = view4.x + view4.width / 2;
											var y50 = view4.y + view4.height / 2 + c5;
											if(y50 == null) {
												y50 = 0;
											}
											if(x50 == null) {
												x50 = 0;
											}
											var f2_x5 = x50;
											var f2_y5 = y50;
											var x51 = x43;
											var y51 = y43;
											if(y51 == null) {
												y51 = 0;
											}
											if(x51 == null) {
												x51 = 0;
											}
											var p_x11 = x51;
											var p_y11 = y51;
											var x52 = p_x11 - f1_x5;
											var y52 = p_y11 - f1_y5;
											var x53 = p_x11 - f2_x5;
											var y53 = p_y11 - f2_y5;
											has2 = Math.sqrt(x52 * x52 + y52 * y52) + Math.sqrt(x53 * x53 + y53 * y53) <= view4.height;
											if(view4.shape == 3) {
												has2 = !has2;
											}
										} else {
											var x54 = x43;
											var y54 = y43;
											if(y54 == null) {
												y54 = 0;
											}
											if(x54 == null) {
												x54 = 0;
											}
											var point1_x2 = x54;
											var point1_y2 = y54;
											var x55 = view4.x + view4.width / 2;
											var y55 = view4.y + view4.height / 2;
											if(y55 == null) {
												y55 = 0;
											}
											if(x55 == null) {
												x55 = 0;
											}
											var point2_x2 = x55;
											var point2_y2 = y55;
											var x56 = point2_x2 - point1_x2;
											var y56 = point2_y2 - point1_y2;
											has2 = Math.sqrt(x56 * x56 + y56 * y56) <= view4.width / 2;
											if(view4.shape == 3) {
												has2 = !has2;
											}
										}
										break;
									case 4:
										has2 = Math.abs(x43 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y43 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
										break;
									case 5:
										has2 = !(Math.abs(x43 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y43 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
										break;
									}
									tmp2 = has2;
								}
								if(tmp2) {
									var position10 = (y43 * this1.getUInt16(0) + x43) * 4;
									position10 += vision_ds_Image.OFFSET;
									this1.b[position10] = color >> 24 & 255;
									this1.b[position10 + 1] = color >> 16 & 255;
									this1.b[position10 + 2] = color >> 8 & 255;
									this1.b[position10 + 3] = color & 255;
								}
							} else {
								var position11 = (y43 * this1.getUInt16(0) + x43) * 4;
								position11 += vision_ds_Image.OFFSET;
								this1.b[position11] = color >> 24 & 255;
								this1.b[position11 + 1] = color >> 16 & 255;
								this1.b[position11 + 2] = color >> 8 & 255;
								this1.b[position11 + 3] = color & 255;
							}
						}
					}
				}
			}
		}
		var x57 = v.x;
		var y57 = v.y - 1;
		if(y57 == null) {
			y57 = 0;
		}
		if(x57 == null) {
			x57 = 0;
		}
		var p_x12 = x57;
		var p_y12 = y57;
		var point_x3 = p_x12 | 0;
		var point_y3 = p_y12 | 0;
		if(pc >= 100000) {
			console.log("vision/ds/Image.hx:974:","fillColor: too much iterations");
			queue.clear();
		} else {
			var x58 = point_x3;
			var y58 = point_y3;
			if(x58 >= 0 && y58 >= 0 && x58 < this1.getUInt16(0) && y58 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var this18 = new haxe__$Int64__$_$_$Int64(point_x3,point_y3);
				if(explored.indexOf(this18) == -1) {
					var x59 = point_x3;
					var y59 = point_y3;
					if(!(x59 >= 0 && y59 >= 0 && x59 < this1.getUInt16(0) && y59 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
						var this_x9 = x59;
						var this_y9 = y59;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x9,this_y9)));
					}
					var position12 = (y59 * this1.getUInt16(0) + x59) * 4;
					position12 += vision_ds_Image.OFFSET;
					var value6 = this1.b[position12] << 24 | this1.b[position12 + 1] << 16 | this1.b[position12 + 2] << 8 | this1.b[position12 + 3];
					if(value6 == null) {
						value6 = 0;
					}
					var this19 = value6;
					if(this19 != color) {
						var x60 = point_x3;
						var y60 = point_y3;
						if(!(x60 >= 0 && y60 >= 0 && x60 < this1.getUInt16(0) && y60 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
							var this_x10 = x60;
							var this_y10 = y60;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x10,this_y10)));
						}
						var position13 = (y60 * this1.getUInt16(0) + x60) * 4;
						position13 += vision_ds_Image.OFFSET;
						var value7 = this1.b[position13] << 24 | this1.b[position13 + 1] << 16 | this1.b[position13 + 2] << 8 | this1.b[position13 + 3];
						if(value7 == null) {
							value7 = 0;
						}
						var this20 = value7;
						if(this20 != borderColor) {
							++pc;
							var x61 = point_x3;
							var y61 = point_y3;
							if(y61 == null) {
								y61 = 0;
							}
							if(x61 == null) {
								x61 = 0;
							}
							var p_x13 = x61;
							var p_y13 = y61;
							var this21 = new vision_ds__$IntPoint2D_Impl(p_x13 | 0,p_y13 | 0);
							queue.push(this21);
							var x62 = point_x3;
							var y62 = point_y3;
							if(!(x62 >= 0 && y62 >= 0 && x62 < this1.getUInt16(0) && y62 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
								var this_x11 = x62;
								var this_y11 = y62;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x11,this_y11)));
							} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v4 = null;
								var tmp3;
								if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v4 == null) {
									tmp3 = x62 >= 0 && y62 >= 0 && x62 < this1.getUInt16(0) && y62 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
								} else {
									var has3 = false;
									var view6;
									if(v4 != null) {
										view6 = v4;
									} else {
										var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g11 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var this22 = this1.b;
										var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view6 = new vision_ds_ImageView(_g9,_g10,_g11,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this22[view7]);
									}
									switch(view6.shape) {
									case 0:
										has3 = x62 < view6.x + view6.width && y62 < view6.y + view6.height && x62 >= view6.x && y62 >= view6.y;
										break;
									case 1:
										has3 = !(x62 < view6.x + view6.width && y62 < view6.y + view6.height && x62 >= view6.x && y62 >= view6.y);
										break;
									case 2:case 3:
										if(view6.width > view6.height) {
											var a6 = view6.width / 2;
											var b6 = view6.height / 2;
											var c6 = Math.sqrt(a6 * a6 - b6 * b6);
											var x63 = view6.x + view6.width / 2 - c6;
											var y63 = view6.y + view6.height / 2;
											if(y63 == null) {
												y63 = 0;
											}
											if(x63 == null) {
												x63 = 0;
											}
											var f1_x6 = x63;
											var f1_y6 = y63;
											var x64 = view6.x + view6.width / 2 + c6;
											var y64 = view6.y + view6.height / 2;
											if(y64 == null) {
												y64 = 0;
											}
											if(x64 == null) {
												x64 = 0;
											}
											var f2_x6 = x64;
											var f2_y6 = y64;
											var x65 = x62;
											var y65 = y62;
											if(y65 == null) {
												y65 = 0;
											}
											if(x65 == null) {
												x65 = 0;
											}
											var p_x14 = x65;
											var p_y14 = y65;
											var x66 = p_x14 - f1_x6;
											var y66 = p_y14 - f1_y6;
											var x67 = p_x14 - f2_x6;
											var y67 = p_y14 - f2_y6;
											has3 = Math.sqrt(x66 * x66 + y66 * y66) + Math.sqrt(x67 * x67 + y67 * y67) <= view6.width;
											if(view6.shape == 3) {
												has3 = !has3;
											}
										} else if(view6.height > view6.width) {
											var a7 = view6.height / 2;
											var b7 = view6.width / 2;
											var c7 = Math.sqrt(a7 * a7 - b7 * b7);
											var x68 = view6.x + view6.width / 2;
											var y68 = view6.y + view6.height / 2 - c7;
											if(y68 == null) {
												y68 = 0;
											}
											if(x68 == null) {
												x68 = 0;
											}
											var f1_x7 = x68;
											var f1_y7 = y68;
											var x69 = view6.x + view6.width / 2;
											var y69 = view6.y + view6.height / 2 + c7;
											if(y69 == null) {
												y69 = 0;
											}
											if(x69 == null) {
												x69 = 0;
											}
											var f2_x7 = x69;
											var f2_y7 = y69;
											var x70 = x62;
											var y70 = y62;
											if(y70 == null) {
												y70 = 0;
											}
											if(x70 == null) {
												x70 = 0;
											}
											var p_x15 = x70;
											var p_y15 = y70;
											var x71 = p_x15 - f1_x7;
											var y71 = p_y15 - f1_y7;
											var x72 = p_x15 - f2_x7;
											var y72 = p_y15 - f2_y7;
											has3 = Math.sqrt(x71 * x71 + y71 * y71) + Math.sqrt(x72 * x72 + y72 * y72) <= view6.height;
											if(view6.shape == 3) {
												has3 = !has3;
											}
										} else {
											var x73 = x62;
											var y73 = y62;
											if(y73 == null) {
												y73 = 0;
											}
											if(x73 == null) {
												x73 = 0;
											}
											var point1_x3 = x73;
											var point1_y3 = y73;
											var x74 = view6.x + view6.width / 2;
											var y74 = view6.y + view6.height / 2;
											if(y74 == null) {
												y74 = 0;
											}
											if(x74 == null) {
												x74 = 0;
											}
											var point2_x3 = x74;
											var point2_y3 = y74;
											var x75 = point2_x3 - point1_x3;
											var y75 = point2_y3 - point1_y3;
											has3 = Math.sqrt(x75 * x75 + y75 * y75) <= view6.width / 2;
											if(view6.shape == 3) {
												has3 = !has3;
											}
										}
										break;
									case 4:
										has3 = Math.abs(x62 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y62 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
										break;
									case 5:
										has3 = !(Math.abs(x62 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y62 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
										break;
									}
									tmp3 = has3;
								}
								if(tmp3) {
									var position14 = (y62 * this1.getUInt16(0) + x62) * 4;
									position14 += vision_ds_Image.OFFSET;
									this1.b[position14] = color >> 24 & 255;
									this1.b[position14 + 1] = color >> 16 & 255;
									this1.b[position14 + 2] = color >> 8 & 255;
									this1.b[position14 + 3] = color & 255;
								}
							} else {
								var position15 = (y62 * this1.getUInt16(0) + x62) * 4;
								position15 += vision_ds_Image.OFFSET;
								this1.b[position15] = color >> 24 & 255;
								this1.b[position15 + 1] = color >> 16 & 255;
								this1.b[position15 + 2] = color >> 8 & 255;
								this1.b[position15 + 3] = color & 255;
							}
						}
					}
				}
			}
		}
	}
};
vision_ds_Image.clone = function(this1) {
	return this1.sub(0,this1.length);
};
vision_ds_Image.mirror = function(this1) {
	var inter = vision_ds_Image.clone(this1);
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this2 = value;
				var color = this2;
				var x1 = inter.getUInt16(0) - x - 1;
				var position1 = (y * inter.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this3 = value1;
				var color1 = this3;
				var position2 = (y * this1.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color1 >> 24 & 255;
				this1.b[position2 + 1] = color1 >> 16 & 255;
				this1.b[position2 + 2] = color1 >> 8 & 255;
				this1.b[position2 + 3] = color1 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this3 = value;
					var color = this3;
					var x14 = inter.getUInt16(0) - x - 1;
					var position1 = (y * inter.getUInt16(0) + x14) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this4 = value1;
					var color1 = this4;
					var position2 = (y * this1.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					this1.b[position2] = color1 >> 24 & 255;
					this1.b[position2 + 1] = color1 >> 16 & 255;
					this1.b[position2 + 2] = color1 >> 8 & 255;
					this1.b[position2 + 3] = color1 & 255;
				}
			}
		}
	}
	return this1;
};
vision_ds_Image.flip = function(this1) {
	var inter = vision_ds_Image.clone(this1);
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this2 = value;
				var color = this2;
				var position1 = ((Math.ceil((inter.length - vision_ds_Image.OFFSET) / (inter.getUInt16(0) * 4)) - y - 1) * inter.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this3 = value1;
				var color1 = this3;
				var position2 = (y * this1.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color1 >> 24 & 255;
				this1.b[position2 + 1] = color1 >> 16 & 255;
				this1.b[position2 + 2] = color1 >> 8 & 255;
				this1.b[position2 + 3] = color1 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var this3 = value;
					var color = this3;
					var position1 = ((Math.ceil((inter.length - vision_ds_Image.OFFSET) / (inter.getUInt16(0) * 4)) - y - 1) * inter.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var this4 = value1;
					var color1 = this4;
					var position2 = (y * this1.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					this1.b[position2] = color1 >> 24 & 255;
					this1.b[position2 + 1] = color1 >> 16 & 255;
					this1.b[position2 + 2] = color1 >> 8 & 255;
					this1.b[position2 + 3] = color1 & 255;
				}
			}
		}
	}
	return this1;
};
vision_ds_Image.stamp = function(this1,X,Y,image) {
	var _g = X;
	var _g1 = X + image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = Y;
		var _g3 = Y + Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = ((y - Y) * image.getUInt16(0) + (x - X)) * 4;
			position += vision_ds_Image.OFFSET;
			var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			var color = this2;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this3 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position1 = (y * this1.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					this1.b[position1] = color >> 24 & 255;
					this1.b[position1 + 1] = color >> 16 & 255;
					this1.b[position1 + 2] = color >> 8 & 255;
					this1.b[position1 + 3] = color & 255;
				}
			} else {
				var position2 = (y * this1.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color >> 24 & 255;
				this1.b[position2 + 1] = color >> 16 & 255;
				this1.b[position2 + 2] = color >> 8 & 255;
				this1.b[position2 + 3] = color & 255;
			}
		}
	}
	return this1;
};
vision_ds_Image.resize = function(this1,newWidth,newHeight,algorithm) {
	if(algorithm == null) {
		algorithm = vision_tools_ImageTools.defaultResizeAlgorithm;
	}
	switch(algorithm) {
	case 0:
		var this2 = new haxe_io_Bytes(new ArrayBuffer(newWidth * newHeight * 4 + vision_ds_Image.OFFSET));
		var this3 = this2;
		this3.setUInt16(0,newWidth);
		this3.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
		this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
		this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,newWidth);
		this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,newHeight);
		this3.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
		var i = vision_ds_Image.OFFSET;
		while(i < this3.length) {
			this3.b[i] = 0;
			this3.b[i + 1] = 0;
			this3.b[i + 2] = 0;
			this3.b[i + 3] = 0;
			i += 4;
		}
		var image = this3;
		var xMultiplier = this1.getUInt16(0) / image.getUInt16(0);
		var yMultiplier = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) / Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this2 = value;
				var color = this2;
				var x1 = Math.floor(x * xMultiplier);
				var y1 = Math.floor(y * yMultiplier);
				if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
				}
				var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = this1.b[position1] << 24 | this1.b[position1 + 1] << 16 | this1.b[position1 + 2] << 8 | this1.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var this3 = value1;
				var color1 = this3;
				if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var image1 = image.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x3 = view.x + view.width / 2 + c;
								var y3 = view.y + view.height / 2;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var f2_x = x3;
								var f2_y = y3;
								var x4 = x;
								var y4 = y;
								if(y4 == null) {
									y4 = 0;
								}
								if(x4 == null) {
									x4 = 0;
								}
								var p_x = x4;
								var p_y = y4;
								var x5 = p_x - f1_x;
								var y5 = p_y - f1_y;
								var x6 = p_x - f2_x;
								var y6 = p_y - f2_y;
								has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 - c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f1_x1 = x7;
								var f1_y1 = y7;
								var x8 = view.x + view.width / 2;
								var y8 = view.y + view.height / 2 + c1;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var f2_x1 = x8;
								var f2_y1 = y8;
								var x9 = x;
								var y9 = y;
								if(y9 == null) {
									y9 = 0;
								}
								if(x9 == null) {
									x9 = 0;
								}
								var p_x1 = x9;
								var p_y1 = y9;
								var x10 = p_x1 - f1_x1;
								var y10 = p_y1 - f1_y1;
								var x11 = p_x1 - f2_x1;
								var y11 = p_y1 - f2_y1;
								has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x12 = x;
								var y12 = y;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var point1_x = x12;
								var point1_y = y12;
								var x13 = view.x + view.width / 2;
								var y13 = view.y + view.height / 2;
								if(y13 == null) {
									y13 = 0;
								}
								if(x13 == null) {
									x13 = 0;
								}
								var point2_x = x13;
								var point2_y = y13;
								var x14 = point2_x - point1_x;
								var y14 = point2_y - point1_y;
								has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position2 = (y * image.getUInt16(0) + x) * 4;
						position2 += vision_ds_Image.OFFSET;
						image.b[position2] = color1 >> 24 & 255;
						image.b[position2 + 1] = color1 >> 16 & 255;
						image.b[position2 + 2] = color1 >> 8 & 255;
						image.b[position2 + 3] = color1 & 255;
					}
				} else {
					var position3 = (y * image.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					image.b[position3] = color1 >> 24 & 255;
					image.b[position3 + 1] = color1 >> 16 & 255;
					image.b[position3 + 2] = color1 >> 8 & 255;
					image.b[position3 + 3] = color1 & 255;
				}
			}
		}
		this1 = image;
		break;
	case 1:
		this1 = vision_algorithms_BilinearInterpolation.interpolate(this1,newWidth,newHeight);
		break;
	case 2:
		throw haxe_Exception.thrown(new vision_exceptions_Unimplemented("Bicubic Interpolation"));
	}
	return this1;
};
vision_ds_Image.toString = function(this1,special) {
	if(special == null) {
		special = true;
	}
	if(!special) {
		return Std.string(this1);
	}
	var s = "\n";
	var prevY = 0;
	var _g = 0;
	var _g1 = this1.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			if(prevY != y) {
				prevY = y;
				s += "\n";
			}
			s += vision_ds_Color.toString(this2);
		}
	}
	return s;
};
vision_ds_Image.forEachPixel = function(this1,callback) {
	var _g = 0;
	var _g1 = this1.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			callback(x,y,this2);
		}
	}
};
vision_ds_Image.forEachPixelInView = function(this1,callback) {
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this2 = value;
				callback(x,y,this2);
			}
		}
		return;
	}
	var _g = 0;
	var _g1 = this1.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2 - c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x2 = view.x + view.width / 2 + c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f2_x = x2;
						var f2_y = y2;
						var x3 = x;
						var y3 = y;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var p_x = x3;
						var p_y = y3;
						var x4 = p_x - f1_x;
						var y4 = p_y - f1_y;
						var x5 = p_x - f2_x;
						var y5 = p_y - f2_y;
						has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x6 = view.x + view.width / 2;
						var y6 = view.y + view.height / 2 - c1;
						if(y6 == null) {
							y6 = 0;
						}
						if(x6 == null) {
							x6 = 0;
						}
						var f1_x1 = x6;
						var f1_y1 = y6;
						var x7 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 + c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f2_x1 = x7;
						var f2_y1 = y7;
						var x8 = x;
						var y8 = y;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var p_x1 = x8;
						var p_y1 = y8;
						var x9 = p_x1 - f1_x1;
						var y9 = p_y1 - f1_y1;
						var x10 = p_x1 - f2_x1;
						var y10 = p_y1 - f2_y1;
						has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x11 = x;
						var y11 = y;
						if(y11 == null) {
							y11 = 0;
						}
						if(x11 == null) {
							x11 = 0;
						}
						var point1_x = x11;
						var point1_y = y11;
						var x12 = view.x + view.width / 2;
						var y12 = view.y + view.height / 2;
						if(y12 == null) {
							y12 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point2_x = x12;
						var point2_y = y12;
						var x13 = point2_x - point1_x;
						var y13 = point2_y - point1_y;
						has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var this3 = value;
				callback(x,y,this3);
			}
		}
	}
};
vision_ds_Image.iterator = function(this1) {
	return new vision_ds__$Image_PixelIterator(this1);
};
vision_ds_Image.hasView = function(this1) {
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		return this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0;
	} else {
		return true;
	}
};
vision_ds_Image.setView = function(this1,view) {
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,view.x);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,view.y);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,view.width == 0 ? view.width : view.width);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,view.height == 0 ? view.height : view.height);
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = view.shape;
	return this1;
};
vision_ds_Image.getView = function(this1) {
	var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
	var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
	var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
	var this2 = this1.b;
	var tmp = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
	return new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[tmp]);
};
vision_ds_Image.removeView = function(this1) {
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,this1.getUInt16(0));
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	return this1;
};
vision_ds_Image.hasPixelInView = function(this1,x,y,v) {
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != this1.getUInt16(0) || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
		if(x >= 0 && y >= 0 && x < this1.getUInt16(0)) {
			return y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			return false;
		}
	}
	var has = false;
	var view;
	if(v != null) {
		view = v;
	} else {
		var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
		var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
		var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
		var this2 = this1.b;
		var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
		view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
	}
	switch(view.shape) {
	case 0:
		has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
		break;
	case 1:
		has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
		break;
	case 2:case 3:
		if(view.width > view.height) {
			var a = view.width / 2;
			var b = view.height / 2;
			var c = Math.sqrt(a * a - b * b);
			var x1 = view.x + view.width / 2 - c;
			var y1 = view.y + view.height / 2;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var f1_x = x1;
			var f1_y = y1;
			var x1 = view.x + view.width / 2 + c;
			var y1 = view.y + view.height / 2;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var f2_x = x1;
			var f2_y = y1;
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var p_x = x1;
			var p_y = y1;
			var x1 = p_x - f1_x;
			var y1 = p_y - f1_y;
			var x2 = p_x - f2_x;
			var y2 = p_y - f2_y;
			has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
			if(view.shape == 3) {
				has = !has;
			}
		} else if(view.height > view.width) {
			var a = view.height / 2;
			var b = view.width / 2;
			var c = Math.sqrt(a * a - b * b);
			var x1 = view.x + view.width / 2;
			var y1 = view.y + view.height / 2 - c;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var f1_x = x1;
			var f1_y = y1;
			var x1 = view.x + view.width / 2;
			var y1 = view.y + view.height / 2 + c;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var f2_x = x1;
			var f2_y = y1;
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var p_x = x1;
			var p_y = y1;
			var x1 = p_x - f1_x;
			var y1 = p_y - f1_y;
			var x2 = p_x - f2_x;
			var y2 = p_y - f2_y;
			has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
			if(view.shape == 3) {
				has = !has;
			}
		} else {
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var point1_x = x1;
			var point1_y = y1;
			var x1 = view.x + view.width / 2;
			var y1 = view.y + view.height / 2;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var point2_x = x1;
			var point2_y = y1;
			var x1 = point2_x - point1_x;
			var y1 = point2_y - point1_y;
			has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
			if(view.shape == 3) {
				has = !has;
			}
		}
		break;
	case 4:
		has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
		break;
	case 5:
		has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
		break;
	}
	return has;
};
vision_ds_Image.from2DArray = function(array) {
	var maxLength = 0;
	var _g = 0;
	while(_g < array.length) {
		var arr = array[_g];
		++_g;
		if(arr.length > maxLength) {
			maxLength = arr.length;
		}
	}
	var width = array.length;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(width * maxLength * 4 + vision_ds_Image.OFFSET));
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,maxLength);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var image = this2;
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = array[x].length;
		while(_g2 < _g3) {
			var y = _g2++;
			var color = array[x][y];
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
			} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != image.getUInt16(0) || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var x3 = x;
							var y3 = y;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var p_x = x3;
							var p_y = y3;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var x8 = x;
							var y8 = y;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var p_x1 = x8;
							var p_y1 = y8;
							var x9 = p_x1 - f1_x1;
							var y9 = p_y1 - f1_y1;
							var x10 = p_x1 - f2_x1;
							var y10 = p_y1 - f2_y1;
							has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x11 = x;
							var y11 = y;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point1_x = x11;
							var point1_y = y11;
							var x12 = view.x + view.width / 2;
							var y12 = view.y + view.height / 2;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point2_x = x12;
							var point2_y = y12;
							var x13 = point2_x - point1_x;
							var y13 = point2_y - point1_y;
							has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					image.b[position] = color >> 24 & 255;
					image.b[position + 1] = color >> 16 & 255;
					image.b[position + 2] = color >> 8 & 255;
					image.b[position + 3] = color & 255;
				}
			} else {
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = color >> 24 & 255;
				image.b[position1 + 1] = color >> 16 & 255;
				image.b[position1 + 2] = color >> 8 & 255;
				image.b[position1 + 3] = color & 255;
			}
		}
	}
	return image;
};
var vision_ds__$Image_PixelIterator = function(img) {
	this.i = 4;
	this.img = img;
};
vision_ds__$Image_PixelIterator.__name__ = true;
vision_ds__$Image_PixelIterator.prototype = {
	next: function() {
		var x = this.i % this.img.getUInt16(0);
		var y = Math.floor(this.i / this.img.getUInt16(0));
		var this1 = this.img;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var this1 = value;
		var pixel = new vision_ds_Pixel(x,y,this1);
		this.i += 4;
		return pixel;
	}
	,hasNext: function() {
		return this.i < this.img.length;
	}
	,__class__: vision_ds__$Image_PixelIterator
};
var vision_ds_ImageView = function(x,y,width,height,shape) {
	this.shape = 0;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
	if(width != null) {
		this.width = width;
	}
	if(height != null) {
		this.height = height;
	}
	if(shape != null) {
		this.shape = shape;
	}
};
vision_ds_ImageView.__name__ = true;
vision_ds_ImageView.prototype = {
	__class__: vision_ds_ImageView
};
var vision_ds__$IntPoint2D_Impl = function(x,y) {
	this.x = x;
	this.y = y;
};
vision_ds__$IntPoint2D_Impl.__name__ = true;
vision_ds__$IntPoint2D_Impl.prototype = {
	__class__: vision_ds__$IntPoint2D_Impl
};
var vision_ds_IntPoint2D = {};
vision_ds_IntPoint2D.get_y = function(this1) {
	return this1.y;
};
vision_ds_IntPoint2D.get_x = function(this1) {
	return this1.x;
};
vision_ds_IntPoint2D.set_y = function(this1,y) {
	this1.y = y;
	return y;
};
vision_ds_IntPoint2D.set_x = function(this1,x) {
	this1.x = x;
	return x;
};
vision_ds_IntPoint2D.toPoint2D = function(this1) {
	return new vision_ds_Point2D(this1.x,this1.y);
};
vision_ds_IntPoint2D.fromPoint2D = function(p) {
	var this1 = new vision_ds__$IntPoint2D_Impl(p.x | 0,p.y | 0);
	return this1;
};
vision_ds_IntPoint2D.toString = function(this1) {
	return "(" + this1.x + ", " + this1.y + ")";
};
vision_ds_IntPoint2D.copy = function(this1) {
	var this2 = new vision_ds__$IntPoint2D_Impl(this1.x,this1.y);
	return this2;
};
var vision_ds_Kernal2D = $hxEnums["vision.ds.Kernal2D"] = { __ename__:true,__constructs__:null
	,Identity: {_hx_name:"Identity",_hx_index:0,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,BoxBlur: {_hx_name:"BoxBlur",_hx_index:1,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,LaplacianPositive: {_hx_name:"LaplacianPositive",_hx_index:2,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,LaplacianNegative: {_hx_name:"LaplacianNegative",_hx_index:3,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,RidgeDetection: {_hx_name:"RidgeDetection",_hx_index:4,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,RidgeDetectionAggressive: {_hx_name:"RidgeDetectionAggressive",_hx_index:5,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,Sharpen: {_hx_name:"Sharpen",_hx_index:6,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,UnsharpMasking: {_hx_name:"UnsharpMasking",_hx_index:7,__enum__:"vision.ds.Kernal2D",toString:$estr}
	,Assemble3x3: ($_=function(corner,edge,center) { return {_hx_index:8,corner:corner,edge:edge,center:center,__enum__:"vision.ds.Kernal2D",toString:$estr}; },$_._hx_name="Assemble3x3",$_.__params__ = ["corner","edge","center"],$_)
	,Assemble5x5: ($_=function(farCorner,farEdge,edge,midCorner,midEdge,center) { return {_hx_index:9,farCorner:farCorner,farEdge:farEdge,edge:edge,midCorner:midCorner,midEdge:midEdge,center:center,__enum__:"vision.ds.Kernal2D",toString:$estr}; },$_._hx_name="Assemble5x5",$_.__params__ = ["farCorner","farEdge","edge","midCorner","midEdge","center"],$_)
	,Custom: ($_=function(kernal) { return {_hx_index:10,kernal:kernal,__enum__:"vision.ds.Kernal2D",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["kernal"],$_)
	,GaussianBlur: ($_=function(size,sigma) { return {_hx_index:11,size:size,sigma:sigma,__enum__:"vision.ds.Kernal2D",toString:$estr}; },$_._hx_name="GaussianBlur",$_.__params__ = ["size","sigma"],$_)
};
vision_ds_Kernal2D.__constructs__ = [vision_ds_Kernal2D.Identity,vision_ds_Kernal2D.BoxBlur,vision_ds_Kernal2D.LaplacianPositive,vision_ds_Kernal2D.LaplacianNegative,vision_ds_Kernal2D.RidgeDetection,vision_ds_Kernal2D.RidgeDetectionAggressive,vision_ds_Kernal2D.Sharpen,vision_ds_Kernal2D.UnsharpMasking,vision_ds_Kernal2D.Assemble3x3,vision_ds_Kernal2D.Assemble5x5,vision_ds_Kernal2D.Custom,vision_ds_Kernal2D.GaussianBlur];
var vision_ds_Line2D = function(start,end) {
	this.end = new vision_ds_Point2D(0,0);
	this.start = new vision_ds_Point2D(0,0);
	this.start.x = start.x;
	this.start.y = start.y;
	this.end.x = end.x;
	this.end.y = end.y;
	var x = end.x - start.x;
	var y = end.y - start.y;
	this.radians = Math.atan2(x,y);
	this.slope = Math.tan(this.radians);
	this.degrees = this.radians * 180 / Math.PI;
};
vision_ds_Line2D.__name__ = true;
vision_ds_Line2D.fromRay2D = function(ray) {
	var x = ray.point.x;
	var y = ray.point.y;
	var length = 1;
	var end = new vision_ds_Point2D(x + length * Math.cos(ray.radians) | 0,y + length * Math.sin(ray.radians) | 0);
	return new vision_ds_Line2D(ray.point,end);
};
vision_ds_Line2D.prototype = {
	get_length: function() {
		return Math.sqrt(Math.pow(this.end.x - this.start.x,2) + Math.pow(this.end.y - this.start.y,2));
	}
	,toString: function() {
		return "\n (" + Std.string(this.start) + ".x, " + Std.string(this.start) + ".y) --> (" + Std.string(this.end) + ".x, " + Std.string(this.end) + ".y)";
	}
	,toRay2D: function() {
		return new vision_ds_Ray2D(this.start,this.slope);
	}
	,set_start: function(value) {
		var point2 = this.end;
		var x = point2.x - value.x;
		var y = point2.y - value.y;
		this.radians = Math.atan2(x,y);
		this.slope = Math.tan(this.radians);
		this.degrees = this.radians * 180 / Math.PI;
		return this.start = value;
	}
	,set_end: function(value) {
		var point2 = this.end;
		var x = point2.x - value.x;
		var y = point2.y - value.y;
		this.radians = Math.atan2(x,y);
		this.slope = Math.tan(this.radians);
		this.degrees = this.radians * 180 / Math.PI;
		return this.end = value;
	}
	,get_middle: function() {
		return new vision_ds_Point2D((this.start.x + this.end.x) / 2,(this.start.y + this.end.y) / 2);
	}
	,set_middle: function(value) {
		var x = (this.start.x + this.end.x) / 2;
		var y = (this.start.y + this.end.y) / 2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var previousMiddle_x = x;
		var previousMiddle_y = y;
		var diffX = value.x - previousMiddle_x;
		var diffY = value.y - previousMiddle_y;
		this.start.y += diffY;
		this.end.y += diffY;
		this.start.x += diffX;
		this.end.x += diffX;
		return new vision_ds_Point2D((this.start.x + this.end.x) / 2,(this.start.y + this.end.y) / 2);
	}
	,__class__: vision_ds_Line2D
};
var vision_ds_Pixel = function(x,y,color) {
	this.x = x;
	this.y = y;
	this.color = color;
};
vision_ds_Pixel.__name__ = true;
vision_ds_Pixel.prototype = {
	__class__: vision_ds_Pixel
};
var vision_ds_Point2D = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
vision_ds_Point2D.__name__ = true;
vision_ds_Point2D.prototype = {
	toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,copy: function() {
		return new vision_ds_Point2D(this.x,this.y);
	}
	,__class__: vision_ds_Point2D
};
var vision_ds_Ray2D = function(point,m,degrees,radians) {
	this.point = point;
	if(m != null) {
		this.degrees = Math.atan(m) * 180 / Math.PI;
		this.radians = Math.atan(m);
		this.slope = m;
		var value = Math.atan(m) * 180 / Math.PI;
		this.slope = Math.tan(value * Math.PI / 180);
		this.radians = value * Math.PI / 180;
		this.degrees = value;
		var value = Math.atan(m);
		this.slope = Math.tan(value);
		this.degrees = value * 180 / Math.PI;
		this.radians = value;
	} else if(degrees != null) {
		this.slope = Math.tan(degrees * Math.PI / 180);
		this.radians = degrees * Math.PI / 180;
		this.degrees = degrees;
		var value = Math.tan(degrees * Math.PI / 180);
		this.degrees = Math.atan(value) * 180 / Math.PI;
		this.radians = Math.atan(value);
		this.slope = value;
		var value = degrees * Math.PI / 180;
		this.slope = Math.tan(value);
		this.degrees = value * 180 / Math.PI;
		this.radians = value;
	} else if(radians != null) {
		this.slope = Math.tan(radians);
		this.degrees = radians * 180 / Math.PI;
		this.radians = radians;
		var value = Math.tan(radians);
		this.degrees = Math.atan(value) * 180 / Math.PI;
		this.radians = Math.atan(value);
		this.slope = value;
		var value = radians * 180 / Math.PI;
		this.slope = Math.tan(value * Math.PI / 180);
		this.radians = value * Math.PI / 180;
		this.degrees = value;
	}
};
vision_ds_Ray2D.__name__ = true;
vision_ds_Ray2D.from2Points = function(point1,point2) {
	var s = (point2.y - point1.y) / (point2.x - point1.x);
	return new vision_ds_Ray2D(point1,s);
};
vision_ds_Ray2D.prototype = {
	getPointAtX: function(x) {
		var px = this.point.x;
		var py = this.point.y;
		return new vision_ds_Point2D(x,this.slope * x + (px > 0 ? py - this.slope * px : py + this.slope * px));
	}
	,getPointAtY: function(y) {
		var px = this.point.x;
		var py = this.point.y;
		return new vision_ds_Point2D((y - (px > 0 ? py - this.slope * px : py + this.slope * px)) / this.slope,y);
	}
	,intersect: function(ray) {
		var line1StartX = this.point.x;
		var line1StartY = this.point.y;
		var line1EndX = this.point.x + Math.cos(this.radians) * 1000;
		var line1EndY = this.point.y + Math.sin(this.radians) * 1000;
		var line2StartX = ray.point.x;
		var line2StartY = ray.point.y;
		var line2EndX = ray.point.x + Math.cos(ray.radians) * 1000;
		var line2EndY = ray.point.y + Math.sin(ray.radians) * 1000;
		var a;
		var b;
		var numerator1;
		var numerator2;
		var result = null;
		var denominator = (line2EndY - line2StartY) * (line1EndX - line1StartX) - (line2EndX - line2StartX) * (line1EndY - line1StartY);
		if(denominator == 0) {
			return result;
		} else {
			a = line1StartY - line2StartY;
			b = line1StartX - line2StartX;
			numerator1 = (line2EndX - line2StartX) * a - (line2EndY - line2StartY) * b;
			numerator2 = (line1EndX - line1StartX) * a - (line1EndY - line1StartY) * b;
			a = numerator1 / denominator;
			b = numerator2 / denominator;
			result = new vision_ds_Point2D();
			result.x = line1StartX + a * (line1EndX - line1StartX);
			result.y = line1StartY + a * (line1EndY - line1StartY);
			return result;
		}
	}
	,set_slope: function(value) {
		this.degrees = Math.atan(value) * 180 / Math.PI;
		this.radians = Math.atan(value);
		return this.slope = value;
	}
	,set_degrees: function(value) {
		this.slope = Math.tan(value * Math.PI / 180);
		this.radians = value * Math.PI / 180;
		return this.degrees = value;
	}
	,set_radians: function(value) {
		this.slope = Math.tan(value);
		this.degrees = value * 180 / Math.PI;
		return this.radians = value;
	}
	,get_yIntercept: function() {
		var px = this.point.x;
		var py = this.point.y;
		if(px > 0) {
			return py - this.slope * px;
		}
		return py + this.slope * px;
	}
	,get_xIntercept: function() {
		var px = this.point.x;
		var py = this.point.y;
		if(py > 0) {
			return (py - this.slope * px) / this.slope;
		}
		return (py + this.slope * px) / this.slope;
	}
	,__class__: vision_ds_Ray2D
};
var vision_ds_Rectangle = function(x,y,width,height) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
vision_ds_Rectangle.__name__ = true;
vision_ds_Rectangle.prototype = {
	__class__: vision_ds_Rectangle
};
var vision_ds_hough_HoughAccumulator = {};
vision_ds_hough_HoughAccumulator.get_rhoMax = function(this1) {
	return this1.length / 2 | 0;
};
vision_ds_hough_HoughAccumulator._new = function(maxRho) {
	var this1 = [];
	var _g = [];
	var _g1 = 0;
	while(_g1 < 180) {
		var i = _g1++;
		_g.push(0);
	}
	var arrayOfZeros = _g;
	var _g = 0;
	var _g1 = maxRho * 2;
	while(_g < _g1) {
		var i = _g++;
		this1[i] = arrayOfZeros.slice();
	}
	return this1;
};
vision_ds_hough_HoughAccumulator.incrementCell = function(this1,rho,thetaIndex) {
	var this2 = this1[(rho | 0) + vision_ds_hough_HoughAccumulator.get_rhoMax(this1)];
	this2[thetaIndex]++;
};
vision_ds_hough_HoughAccumulator.decrementCell = function(this1,rho,thetaIndex) {
	var this2 = this1[(rho | 0) + vision_ds_hough_HoughAccumulator.get_rhoMax(this1)];
	this2[thetaIndex]--;
};
vision_ds_hough_HoughAccumulator.setCell = function(this1,rho,thetaIndex,value) {
	this1[(rho | 0) + vision_ds_hough_HoughAccumulator.get_rhoMax(this1)][thetaIndex] = value;
};
vision_ds_hough_HoughAccumulator.getMaximas = function(this1,threshold) {
	var pointArray = [];
	var _g = 1;
	var _g1 = this1.length - 1;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 1;
		var _g3 = this1[x].length - 1;
		while(_g2 < _g3) {
			var y = _g2++;
			var neighbors = [this1[x - 1][y - 1],this1[x - 1][y],this1[x - 1][y + 1],this1[x][y - 1],this1[x][y],this1[x][y + 1],this1[x + 1][y - 1],this1[x + 1][y],this1[x + 1][y + 1]];
			var this2 = this1[x][y];
			var max = neighbors[0];
			var _g4 = 0;
			var _g5 = neighbors.length;
			while(_g4 < _g5) {
				var i = _g4++;
				if(neighbors[i] > max) {
					max = neighbors[i];
				}
			}
			if(this2 == max && this1[x][y] >= threshold) {
				var x1 = x;
				var y1 = y;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var p_x = x1;
				var p_y = y1;
				var this3 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
				pointArray.push(this3);
			} else {
				continue;
			}
		}
	}
	return pointArray;
};
vision_ds_hough_HoughAccumulator.cellIterator = function(this1) {
	return new haxe_iterators_ArrayIterator(this1);
};
var vision_ds_hough_HoughSpace = function(accumulator,image) {
	this.accumulator = accumulator;
	this.image = image;
};
vision_ds_hough_HoughSpace.__name__ = true;
vision_ds_hough_HoughSpace.prototype = {
	__class__: vision_ds_hough_HoughSpace
};
var vision_ds_specifics_AlgorithmSettings = $hxEnums["vision.ds.specifics.AlgorithmSettings"] = { __ename__:true,__constructs__:null
	,VeryLow_VeryFast: {_hx_name:"VeryLow_VeryFast",_hx_index:0,__enum__:"vision.ds.specifics.AlgorithmSettings",toString:$estr}
	,Low_Fast: {_hx_name:"Low_Fast",_hx_index:1,__enum__:"vision.ds.specifics.AlgorithmSettings",toString:$estr}
	,Medium_Intermediate: {_hx_name:"Medium_Intermediate",_hx_index:2,__enum__:"vision.ds.specifics.AlgorithmSettings",toString:$estr}
	,High_Slow: {_hx_name:"High_Slow",_hx_index:3,__enum__:"vision.ds.specifics.AlgorithmSettings",toString:$estr}
	,VeryHigh_VerySlow: {_hx_name:"VeryHigh_VerySlow",_hx_index:4,__enum__:"vision.ds.specifics.AlgorithmSettings",toString:$estr}
};
vision_ds_specifics_AlgorithmSettings.__constructs__ = [vision_ds_specifics_AlgorithmSettings.VeryLow_VeryFast,vision_ds_specifics_AlgorithmSettings.Low_Fast,vision_ds_specifics_AlgorithmSettings.Medium_Intermediate,vision_ds_specifics_AlgorithmSettings.High_Slow,vision_ds_specifics_AlgorithmSettings.VeryHigh_VerySlow];
var vision_exceptions_VisionException = function(message,type) {
	throw "Exception - " + type + ":\n\n\t" + message + "\n";
};
vision_exceptions_VisionException.__name__ = true;
vision_exceptions_VisionException.prototype = {
	__class__: vision_exceptions_VisionException
};
var vision_exceptions_ImageLoadingFailed = function(type,reason) {
	vision_exceptions_VisionException.call(this,reason,"" + type + " Loading Failed");
};
vision_exceptions_ImageLoadingFailed.__name__ = true;
vision_exceptions_ImageLoadingFailed.__super__ = vision_exceptions_VisionException;
vision_exceptions_ImageLoadingFailed.prototype = $extend(vision_exceptions_VisionException.prototype,{
	__class__: vision_exceptions_ImageLoadingFailed
});
var vision_exceptions_ImageSavingFailed = function(type,reason) {
	vision_exceptions_VisionException.call(this,reason,"" + type + " Saving Failed");
};
vision_exceptions_ImageSavingFailed.__name__ = true;
vision_exceptions_ImageSavingFailed.__super__ = vision_exceptions_VisionException;
vision_exceptions_ImageSavingFailed.prototype = $extend(vision_exceptions_VisionException.prototype,{
	__class__: vision_exceptions_ImageSavingFailed
});
var vision_exceptions_InvalidGaussianKernalSize = function(size) {
	vision_exceptions_VisionException.call(this,"Creating a gaussian kernal of size " + size + " is not allowed. " + (size < 0 ? "Is the kernal size a negative value?" : size % 2 == 0 ? "Is the kernal size even?" : size == 0 ? "Is the kernal size 0?" : ""),"Invalid Gaussian Kernal Size");
};
vision_exceptions_InvalidGaussianKernalSize.__name__ = true;
vision_exceptions_InvalidGaussianKernalSize.__super__ = vision_exceptions_VisionException;
vision_exceptions_InvalidGaussianKernalSize.prototype = $extend(vision_exceptions_VisionException.prototype,{
	getReason: function(size) {
		if(size < 0) {
			return "Is the kernal size a negative value?";
		}
		if(size % 2 == 0) {
			return "Is the kernal size even?";
		}
		if(size == 0) {
			return "Is the kernal size 0?";
		}
		return "";
	}
	,__class__: vision_exceptions_InvalidGaussianKernalSize
});
var vision_exceptions_OutOfBounds = function(image,position) {
	vision_exceptions_VisionException.call(this,"pixel " + Std.string(position) + " is outside the bounds of the image (size: " + image.getUInt16(0) + "x" + Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) + ", position: " + Std.string(position) + ")","Pixel Coordinates Out Of Bounds");
};
vision_exceptions_OutOfBounds.__name__ = true;
vision_exceptions_OutOfBounds.__super__ = vision_exceptions_VisionException;
vision_exceptions_OutOfBounds.prototype = $extend(vision_exceptions_VisionException.prototype,{
	__class__: vision_exceptions_OutOfBounds
});
var vision_exceptions_Unimplemented = function(name) {
	vision_exceptions_VisionException.call(this,"" + name + " is not yet implemented","Unimplemented Method");
};
vision_exceptions_Unimplemented.__name__ = true;
vision_exceptions_Unimplemented.__super__ = vision_exceptions_VisionException;
vision_exceptions_Unimplemented.prototype = $extend(vision_exceptions_VisionException.prototype,{
	__class__: vision_exceptions_Unimplemented
});
var vision_tools_ImageTools = function() { };
vision_tools_ImageTools.__name__ = true;
vision_tools_ImageTools.loadFromFile = function(image,path,onComplete) {
	var imgElement = window.document.createElement("img");
	imgElement.src = path;
	imgElement.crossOrigin = "Anonymous";
	imgElement.onload = function() {
		var canvas = window.document.createElement("canvas");
		canvas.width = imgElement.width;
		canvas.height = imgElement.height;
		canvas.getContext("2d",null).drawImage(imgElement,0,0);
		if(image == null) {
			var width = imgElement.width;
			var height = imgElement.height;
			var this1 = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + vision_ds_Image.OFFSET));
			var this2 = this1;
			this2.setUInt16(0,width);
			this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
			this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
			this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,width);
			this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,height);
			this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
			var i = vision_ds_Image.OFFSET;
			while(i < this2.length) {
				this2.b[i] = 0;
				this2.b[i + 1] = 0;
				this2.b[i + 2] = 0;
				this2.b[i + 3] = 0;
				i += 4;
			}
			image = this2;
		}
		var imageData = canvas.getContext("2d",null).getImageData(0,0,image.getUInt16(0),Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
		var i = 0;
		while(i < imageData.data.length) {
			image.b[i + (vision_ds_Image.OFFSET + 1)] = imageData.data[i];
			image.b[i + (vision_ds_Image.OFFSET + 1) + 1] = imageData.data[i + 1];
			image.b[i + (vision_ds_Image.OFFSET + 1) + 2] = imageData.data[i + 2];
			image.b[i + (vision_ds_Image.OFFSET + 1) + 3] = imageData.data[i + 3];
			i += 4;
		}
		onComplete(image);
	};
};
vision_tools_ImageTools.saveToFile = function(image,pathWithFileName,saveFormat) {
	if(saveFormat == null) {
		saveFormat = 0;
	}
};
vision_tools_ImageTools.addToScreen = function(image,x,y,units) {
	var c = window.document.createElement("canvas");
	c.width = image.getUInt16(0);
	c.height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var ctx = c.getContext("2d",null);
	var imageData = ctx.getImageData(0,0,image.getUInt16(0),Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
	var data = imageData.data;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x1 = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y1 = _g2++;
			var i = (y1 * image.getUInt16(0) + x1) * 4;
			data[i] = image.b[i + (vision_ds_Image.OFFSET + 1)];
			data[i + 1] = image.b[i + (vision_ds_Image.OFFSET + 1) + 1];
			data[i + 2] = image.b[i + (vision_ds_Image.OFFSET + 1) + 2];
			data[i + 3] = 255;
		}
	}
	ctx.putImageData(imageData,0,0);
	c.style.position = "absolute";
	c.style.top = y + units.yUnits != null ? y + units.yUnits : y + "px";
	c.style.left = x + units.xUnits != null ? x + units.xUnits : x + "px";
	window.document.body.appendChild(c);
	return image;
};
vision_tools_ImageTools.getNeighborsOfPixel = function(image,x,y,kernalSize) {
	var neighbors = new vision_ds_Array2D(kernalSize,kernalSize);
	var i = 0;
	var circular = false;
	if(circular == null) {
		circular = false;
	}
	var _g_image = image;
	var _g_roundedDown = kernalSize - 1 >> 1;
	var _g_x = x;
	var _g_y = y;
	var _g_circular = circular;
	var _g_X = -_g_roundedDown;
	var _g_Y = -_g_roundedDown;
	while(_g_X <= _g_roundedDown && _g_Y <= _g_roundedDown) {
		while(true) {
			++_g_Y;
			if(_g_Y > _g_roundedDown) {
				_g_Y = -_g_roundedDown;
				++_g_X;
			}
			var tmp;
			if(_g_circular) {
				var x = _g_X;
				var y = _g_Y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var point1_x = x;
				var point1_y = y;
				var x1 = _g_roundedDown;
				var y1 = _g_roundedDown;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var point2_x = x1;
				var point2_y = y1;
				var x2 = point2_x - point1_x;
				var y2 = point2_y - point1_y;
				tmp = Math.sqrt(x2 * x2 + y2 * y2) > _g_roundedDown;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
		}
		var this1 = _g_image;
		var x3 = _g_x + _g_X;
		var y3 = _g_y + _g_Y;
		var neighbor;
		if(!(x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this2 = [x3,this1.getUInt16(0)];
			var values = this2;
			var max = values[0];
			var _g = 0;
			var _g1 = values.length;
			while(_g < _g1) {
				var i1 = _g++;
				if(values[i1] > max) {
					max = values[i1];
				}
			}
			var this3 = [max,0];
			var values1 = this3;
			var min = values1[0];
			var _g2 = 0;
			var _g3 = values1.length;
			while(_g2 < _g3) {
				var i2 = _g2++;
				if(values1[i2] < min) {
					min = values1[i2];
				}
			}
			var x4 = min;
			var this4 = [y3,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))];
			var values2 = this4;
			var max1 = values2[0];
			var _g4 = 0;
			var _g5 = values2.length;
			while(_g4 < _g5) {
				var i3 = _g4++;
				if(values2[i3] > max1) {
					max1 = values2[i3];
				}
			}
			var this5 = [max1,0];
			var values3 = this5;
			var min1 = values3[0];
			var _g6 = 0;
			var _g7 = values3.length;
			while(_g6 < _g7) {
				var i4 = _g6++;
				if(values3[i4] < min1) {
					min1 = values3[i4];
				}
			}
			var y4 = min1;
			if(!(x4 >= 0 && y4 >= 0 && x4 < this1.getUInt16(0) && y4 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x4;
				var this_y = y4;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y4 * this1.getUInt16(0) + x4) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this6 = value;
			neighbor = this6;
		} else {
			if(!(x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x1 = x3;
				var this_y1 = y3;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
			}
			var position1 = (y3 * this1.getUInt16(0) + x3) * 4;
			position1 += vision_ds_Image.OFFSET;
			var value1 = this1.b[position1] << 24 | this1.b[position1 + 1] << 16 | this1.b[position1 + 2] << 8 | this1.b[position1 + 3];
			if(value1 == null) {
				value1 = 0;
			}
			var this7 = value1;
			neighbor = this7;
		}
		neighbors.inner[i++] = neighbor;
	}
	return neighbors;
};
vision_tools_ImageTools.grayscalePixel = function(pixel) {
	var gray = ((pixel >> 16 & 255) + (pixel >> 8 & 255) + (pixel & 255)) / 3 | 0;
	var Alpha = pixel >> 24 & 255;
	if(Alpha == null) {
		Alpha = 255;
	}
	var this1 = 0;
	var color = this1;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
	color &= -65281;
	color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
	color &= -256;
	color |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
var vision_tools__$ImageTools_NeighborsIterator = function(image,x,y,kernalSize,circular) {
	if(circular == null) {
		circular = false;
	}
	this.image = image;
	this.roundedDown = kernalSize - 1 >> 1;
	this.x = x;
	this.y = y;
	this.circular = circular;
	this.X = -this.roundedDown;
	this.Y = -this.roundedDown;
};
vision_tools__$ImageTools_NeighborsIterator.__name__ = true;
vision_tools__$ImageTools_NeighborsIterator.prototype = {
	next: function() {
		while(true) {
			this.Y += 1;
			if(this.Y > this.roundedDown) {
				this.Y = -this.roundedDown;
				this.X += 1;
			}
			var tmp;
			if(this.circular) {
				var x = this.X;
				var y = this.Y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var point1_x = x;
				var point1_y = y;
				var x1 = this.roundedDown;
				var y1 = this.roundedDown;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var point2_x = x1;
				var point2_y = y1;
				var x2 = point2_x - point1_x;
				var y2 = point2_y - point1_y;
				tmp = Math.sqrt(x2 * x2 + y2 * y2) > this.roundedDown;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
		}
		var this1 = this.image;
		var x = this.x + this.X;
		var y = this.y + this.Y;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this2 = [x,this1.getUInt16(0)];
			var values = this2;
			var max = values[0];
			var _g = 0;
			var _g1 = values.length;
			while(_g < _g1) {
				var i = _g++;
				if(values[i] > max) {
					max = values[i];
				}
			}
			var this2 = [max,0];
			var values = this2;
			var min = values[0];
			var _g = 0;
			var _g1 = values.length;
			while(_g < _g1) {
				var i = _g++;
				if(values[i] < min) {
					min = values[i];
				}
			}
			var x1 = min;
			var this2 = [y,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))];
			var values = this2;
			var max = values[0];
			var _g = 0;
			var _g1 = values.length;
			while(_g < _g1) {
				var i = _g++;
				if(values[i] > max) {
					max = values[i];
				}
			}
			var this2 = [max,0];
			var values = this2;
			var min = values[0];
			var _g = 0;
			var _g1 = values.length;
			while(_g < _g1) {
				var i = _g++;
				if(values[i] < min) {
					min = values[i];
				}
			}
			var y1 = min;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this2 = value;
			return this2;
		} else {
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var this1 = value;
			return this1;
		}
	}
	,hasNext: function() {
		if(this.X <= this.roundedDown) {
			return this.Y <= this.roundedDown;
		} else {
			return false;
		}
	}
	,__class__: vision_tools__$ImageTools_NeighborsIterator
};
var vision_tools_MathTools = function() { };
vision_tools_MathTools.__name__ = true;
vision_tools_MathTools.distanceFromRayToPoint2D = function(ray,point) {
	var cos = Math.cos(ray.radians);
	var sin = Math.sin(ray.radians);
	var x0 = ray.point.x;
	var y0 = ray.point.y;
	var x1 = point.x;
	var y1 = point.y;
	var numerator = (x0 - x1) * cos + (y0 - y1) * sin;
	var denominator = Math.sqrt(Math.pow(x0 - x1,2) + Math.pow(y0 - y1,2));
	var distance = numerator / denominator;
	return distance;
};
vision_tools_MathTools.intersectionBetweenRay2Ds = function(ray,ray2) {
	var line1StartX = ray.point.x;
	var line1StartY = ray.point.y;
	var line1EndX = ray.point.x + Math.cos(ray.radians) * 1000;
	var line1EndY = ray.point.y + Math.sin(ray.radians) * 1000;
	var line2StartX = ray2.point.x;
	var line2StartY = ray2.point.y;
	var line2EndX = ray2.point.x + Math.cos(ray2.radians) * 1000;
	var line2EndY = ray2.point.y + Math.sin(ray2.radians) * 1000;
	var result = null;
	var denominator = (line2EndY - line2StartY) * (line1EndX - line1StartX) - (line2EndX - line2StartX) * (line1EndY - line1StartY);
	if(denominator == 0) {
		return result;
	}
	var a = line1StartY - line2StartY;
	var b = line1StartX - line2StartX;
	var numerator1 = (line2EndX - line2StartX) * a - (line2EndY - line2StartY) * b;
	var numerator2 = (line1EndX - line1StartX) * a - (line1EndY - line1StartY) * b;
	a = numerator1 / denominator;
	b = numerator2 / denominator;
	result = new vision_ds_Point2D();
	result.x = line1StartX + a * (line1EndX - line1StartX);
	result.y = line1StartY + a * (line1EndY - line1StartY);
	return result;
};
vision_tools_MathTools.findPointAtDistanceUsingX = function(ray,startXPos,distance,goPositive) {
	if(goPositive == null) {
		goPositive = true;
	}
	distance = Math.abs(distance);
	var x = startXPos;
	var px = ray.point.x;
	var py = ray.point.y;
	var y = ray.slope * startXPos + (px > 0 ? py - ray.slope * px : py + ray.slope * px);
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var start_x = x;
	var start_y = y;
	var x = start_y + 1;
	var x1 = x;
	var px = ray.point.x;
	var py = ray.point.y;
	var y = ray.slope * x + (px > 0 ? py - ray.slope * px : py + ray.slope * px);
	if(y == null) {
		y = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var point1_x = x1;
	var point1_y = y;
	var x = start_x - point1_x;
	var y = start_y - point1_y;
	var step = Math.sqrt(x * x + y * y);
	var diff = distance / step;
	var y = start_y + (goPositive ? diff : -diff);
	var px = ray.point.x;
	var py = ray.point.y;
	return new vision_ds_Point2D((y - (px > 0 ? py - ray.slope * px : py + ray.slope * px)) / ray.slope,y);
};
vision_tools_MathTools.findPointAtDistanceUsingY = function(ray,startYPos,distance,goPositive) {
	if(goPositive == null) {
		goPositive = true;
	}
	distance = Math.abs(distance);
	var px = ray.point.x;
	var py = ray.point.y;
	var x = (startYPos - (px > 0 ? py - ray.slope * px : py + ray.slope * px)) / ray.slope;
	var y = startYPos;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var start_x = x;
	var start_y = y;
	var y = start_x + 1;
	var px = ray.point.x;
	var py = ray.point.y;
	var x = (y - (px > 0 ? py - ray.slope * px : py + ray.slope * px)) / ray.slope;
	var y1 = y;
	if(y1 == null) {
		y1 = 0;
	}
	if(x == null) {
		x = 0;
	}
	var point1_x = x;
	var point1_y = y1;
	var x = start_x - point1_x;
	var y = start_y - point1_y;
	var step = Math.sqrt(x * x + y * y);
	var diff = distance / step;
	var x = start_x + (goPositive ? diff : -diff);
	var px = ray.point.x;
	var py = ray.point.y;
	return new vision_ds_Point2D(x,ray.slope * x + (px > 0 ? py - ray.slope * px : py + ray.slope * px));
};
vision_tools_MathTools.distanceFromLineToPoint2D = function(line,point) {
	var ch = (line.start.y - line.end.y) * point.x + (line.end.x - line.start.x) * point.y + (line.start.x * line.end.y - line.end.x * line.start.y);
	var del = Math.sqrt(Math.pow(line.end.x - line.start.x,2) + Math.pow(line.end.y - line.start.y,2));
	var d = ch / del;
	return d;
};
vision_tools_MathTools.distanceBetweenLines2D = function(line1,line2) {
	var x1 = line1.start.x;
	var y1 = line1.start.y;
	var x2 = line1.end.x;
	var y2 = line1.end.y;
	var x3 = line2.start.x;
	var y3 = line2.start.y;
	var x4 = line2.end.x;
	var y4 = line2.end.y;
	var denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
	var tmp;
	if(x1 == x2 && y1 == y2 || x3 == x4 && y3 == y4) {
		tmp = null;
	} else if(denominator == 0) {
		tmp = null;
	} else {
		var ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;
		var ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;
		if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
			tmp = null;
		} else {
			var x = x1 + ua * (x2 - x1);
			var y = y1 + ua * (y2 - y1);
			tmp = new vision_ds_Point2D(x | 0,y | 0);
		}
	}
	if(tmp != null) {
		return 0;
	}
	var point = line2.start;
	var ch = (line1.start.y - line1.end.y) * point.x + (line1.end.x - line1.start.x) * point.y + (line1.start.x * line1.end.y - line1.end.x * line1.start.y);
	var del = Math.sqrt(Math.pow(line1.end.x - line1.start.x,2) + Math.pow(line1.end.y - line1.start.y,2));
	var d = ch / del;
	var distance1 = d;
	var point = line2.end;
	var ch = (line1.start.y - line1.end.y) * point.x + (line1.end.x - line1.start.x) * point.y + (line1.start.x * line1.end.y - line1.end.x * line1.start.y);
	var del = Math.sqrt(Math.pow(line1.end.x - line1.start.x,2) + Math.pow(line1.end.y - line1.start.y,2));
	var d = ch / del;
	var distance2 = d;
	var point = line1.start;
	var ch = (line2.start.y - line2.end.y) * point.x + (line2.end.x - line2.start.x) * point.y + (line2.start.x * line2.end.y - line2.end.x * line2.start.y);
	var del = Math.sqrt(Math.pow(line2.end.x - line2.start.x,2) + Math.pow(line2.end.y - line2.start.y,2));
	var d = ch / del;
	var distance3 = d;
	var point = line1.end;
	var ch = (line2.start.y - line2.end.y) * point.x + (line2.end.x - line2.start.x) * point.y + (line2.start.x * line2.end.y - line2.end.x * line2.start.y);
	var del = Math.sqrt(Math.pow(line2.end.x - line2.start.x,2) + Math.pow(line2.end.y - line2.start.y,2));
	var d = ch / del;
	var distance4 = d;
	var this1 = [distance1,distance2,distance3,distance4];
	var values = this1;
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var distance = min;
	return distance;
};
vision_tools_MathTools.radiansFromLineToPoint2D = function(line,point) {
	var angle = Math.atan2(line.end.x - line.start.x,line.end.y - line.start.y);
	var angle2 = Math.atan2(point.x - line.start.x,point.y - line.start.y);
	return angle2 - angle;
};
vision_tools_MathTools.intersectionBetweenLine2Ds = function(line1,line2) {
	var x1 = line1.start.x;
	var y1 = line1.start.y;
	var x2 = line1.end.x;
	var y2 = line1.end.y;
	var x3 = line2.start.x;
	var y3 = line2.start.y;
	var x4 = line2.end.x;
	var y4 = line2.end.y;
	var denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
	if(x1 == x2 && y1 == y2 || x3 == x4 && y3 == y4) {
		return null;
	}
	if(denominator == 0) {
		return null;
	}
	var ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;
	var ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;
	if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
		return null;
	}
	var x = x1 + ua * (x2 - x1);
	var y = y1 + ua * (y2 - y1);
	return new vision_ds_Point2D(x | 0,y | 0);
};
vision_tools_MathTools.mirrorInsideRectangle = function(line,rect) {
	var diffSX = line.start.x - rect.x;
	var diffEX = line.end.x - rect.x;
	line.start.x = rect.x + rect.width - diffSX;
	line.end.x = rect.x + rect.width - diffEX;
	return line;
};
vision_tools_MathTools.flipInsideRectangle = function(line,rect) {
	var diffSY = line.start.y - rect.y;
	var diffEY = line.end.y - rect.y;
	line.start.y = rect.y + rect.width - diffSY;
	line.end.y = rect.y + rect.width - diffEY;
	return line;
};
vision_tools_MathTools.invertInsideRectangle = function(line,rect) {
	var diffSY = line.start.y - rect.y;
	var diffEY = line.end.y - rect.y;
	var diffSX = line.start.x - rect.x;
	var diffEX = line.end.x - rect.x;
	line.start.x = rect.x + rect.width - diffSX;
	line.end.x = rect.x + rect.width - diffEX;
	line.start.y = rect.y + rect.width - diffSY;
	line.end.y = rect.y + rect.width - diffEY;
	return line;
};
vision_tools_MathTools.distanceFromPointToRay2D = function(point,line) {
	var cos = Math.cos(line.radians);
	var sin = Math.sin(line.radians);
	var x0 = line.point.x;
	var y0 = line.point.y;
	var x1 = point.x;
	var y1 = point.y;
	var numerator = (x0 - x1) * cos + (y0 - y1) * sin;
	var denominator = Math.sqrt(Math.pow(x0 - x1,2) + Math.pow(y0 - y1,2));
	var distance = numerator / denominator;
	return distance;
};
vision_tools_MathTools.distanceFromPointToLine2D = function(point,line) {
	var x = line.end.x - line.start.x;
	var y = line.end.y - line.start.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var middle_x = x;
	var middle_y = y;
	var denominator = middle_x * middle_x + middle_y * middle_y;
	var ratio = ((point.x - line.start.x) * middle_x + (point.y - line.start.y) * middle_y) / denominator;
	if(ratio > 1) {
		ratio = 1;
	} else if(ratio < 0) {
		ratio = 0;
	}
	var x = line.start.x + ratio * middle_x;
	var y = line.start.y + ratio * middle_y;
	var dx = x - point.x;
	var dy = y - point.y;
	return Math.sqrt(dx * dx + dy * dy);
};
vision_tools_MathTools.radiansFromPointToLine2D = function(point,line) {
	var angle = Math.atan2(line.end.x - line.start.x,line.end.y - line.start.y);
	var angle2 = Math.atan2(point.x - line.start.x,point.y - line.start.y);
	return angle2 - angle;
};
vision_tools_MathTools.radiansFromPointToPoint2D = function(point1,point2) {
	var x = point2.x - point1.x;
	var y = point2.y - point1.y;
	return Math.atan2(x,y);
};
vision_tools_MathTools.degreesFromPointToPoint2D = function(point1,point2) {
	var x = point2.x - point1.x;
	var y = point2.y - point1.y;
	return Math.atan2(x,y) * 180 / Math.PI;
};
vision_tools_MathTools.slopeFromPointToPoint2D = function(point1,point2) {
	var x = point2.x - point1.x;
	var y = point2.y - point1.y;
	return Math.tan(Math.atan2(x,y));
};
vision_tools_MathTools.distanceBetweenPoints = function(point1,point2) {
	var x = point2.x - point1.x;
	var y = point2.y - point1.y;
	return Math.sqrt(x * x + y * y);
};
vision_tools_MathTools.wrapInt = function(value,min,max) {
	var range = max - min + 1;
	if(value < min) {
		value += range * ((min - value) / range + 1 | 0);
	}
	return min + (value - min) % range;
};
vision_tools_MathTools.wrapFloat = function(value,min,max) {
	var range = max - min;
	if(value < min) {
		value += range * (min - value) / range + 1;
	}
	return min + (value - min) % range;
};
vision_tools_MathTools.boundInt = function(value,min,max) {
	if(value < min) {
		return min;
	}
	if(value > max) {
		return max;
	}
	return value;
};
vision_tools_MathTools.boundFloat = function(value,min,max) {
	return Math.min(Math.max(value,min),max);
};
vision_tools_MathTools.slopeToDegrees = function(slope) {
	return Math.atan(slope) * 180 / Math.PI;
};
vision_tools_MathTools.slopeToRadians = function(slope) {
	return Math.atan(slope);
};
vision_tools_MathTools.degreesToSlope = function(degrees) {
	return Math.tan(degrees * Math.PI / 180);
};
vision_tools_MathTools.degreesToRadians = function(degrees) {
	return degrees * Math.PI / 180;
};
vision_tools_MathTools.radiansToDegrees = function(radians) {
	return radians * 180 / Math.PI;
};
vision_tools_MathTools.radiansToSlope = function(radians) {
	return Math.tan(radians);
};
vision_tools_MathTools.cotan = function(radians) {
	return 1 / Math.tan(radians);
};
vision_tools_MathTools.cosec = function(radians) {
	return 1 / Math.sin(radians);
};
vision_tools_MathTools.sec = function(radians) {
	return 1 / Math.cos(radians);
};
vision_tools_MathTools.truncate = function(num,numbersAfterDecimal) {
	var multiplier = Math.pow(10,numbersAfterDecimal);
	return Math.round(num * multiplier) / multiplier;
};
vision_tools_MathTools.isBetweenRanges = function(value) {
	var $l=arguments.length;
	var ranges = new Array($l>1?$l-1:0);
	for(var $i=1;$i<$l;++$i){ranges[$i-1]=arguments[$i];}
	var between = false;
	var _g_current = 0;
	var _g_args = ranges;
	while(_g_current < _g_args.length) {
		var range = _g_args[_g_current++];
		if(range.end < range.start) {
			var temp = range.start;
			range.start = range.end;
			range.end = temp;
		}
		between = value > range.start && value > range.end;
		if(between) {
			return true;
		}
	}
	return false;
};
vision_tools_MathTools.isInt = function(v) {
	return v == (v | 0);
};
vision_tools_MathTools.clamp = function(value,mi,ma) {
	var this1 = [value,ma];
	var values = this1;
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var this1 = [max,mi];
	var values = this1;
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	return min;
};
vision_tools_MathTools.get_NEGATIVE_INFINITY = function() {
	return -Infinity;
};
vision_tools_MathTools.get_POSITIVE_INFINITY = function() {
	return Infinity;
};
vision_tools_MathTools.get_NaN = function() {
	return NaN;
};
vision_tools_MathTools.get_PI_OVER_2 = function() {
	return Math.PI / 2;
};
vision_tools_MathTools.get_PI = function() {
	return Math.PI;
};
vision_tools_MathTools.abs = function(v) {
	return Math.abs(v);
};
vision_tools_MathTools.acos = function(v) {
	return Math.acos(v);
};
vision_tools_MathTools.asin = function(v) {
	return Math.asin(v);
};
vision_tools_MathTools.atan = function(v) {
	return Math.atan(v);
};
vision_tools_MathTools.atan2 = function(y,x) {
	return Math.atan2(x,y);
};
vision_tools_MathTools.ceil = function(v) {
	return Math.ceil(v);
};
vision_tools_MathTools.cos = function(v) {
	return Math.cos(v);
};
vision_tools_MathTools.exp = function(v) {
	return Math.exp(v);
};
vision_tools_MathTools.floor = function(v) {
	return Math.floor(v);
};
vision_tools_MathTools.log = function(v) {
	return Math.log(v);
};
vision_tools_MathTools.pow = function(v,exp) {
	return Math.pow(v,exp);
};
vision_tools_MathTools.random = function() {
	return Math.random();
};
vision_tools_MathTools.round = function(v) {
	return Math.round(v);
};
vision_tools_MathTools.sin = function(v) {
	return Math.sin(v);
};
vision_tools_MathTools.sqrt = function(v) {
	return Math.sqrt(v);
};
vision_tools_MathTools.tan = function(v) {
	return Math.tan(v);
};
vision_tools_MathTools.ffloor = function(v) {
	return Math.floor(v);
};
vision_tools_MathTools.fceil = function(v) {
	return Math.ceil(v);
};
vision_tools_MathTools.fround = function(v) {
	return Math.round(v);
};
vision_tools_MathTools.isFinite = function(f) {
	return isFinite(f);
};
vision_tools_MathTools.isNaN = function(f) {
	return isNaN(f);
};
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
vision_ds_Color.TRANSPARENT = 0;
vision_ds_Color.WHITE = -1;
vision_ds_Color.GRAY = -8355712;
vision_ds_Color.BLACK = -16777216;
vision_ds_Color.GREEN = -16711936;
vision_ds_Color.YELLOW = -256;
vision_ds_Color.ORANGE = -23296;
vision_ds_Color.RED = -65536;
vision_ds_Color.PURPLE = -8388480;
vision_ds_Color.BLUE = -16776961;
vision_ds_Color.BROWN = -7650029;
vision_ds_Color.PINK = -16181;
vision_ds_Color.MAGENTA = -65281;
vision_ds_Color.CYAN = -16711681;
vision_ds_Color.SILVER = 12632256;
vision_ds_Color.GOLD = -10496;
vision_ds_Color.OLIVE = -8355840;
vision_ds_Color.MAROON = -8388608;
vision_ds_Color.NAVY = -16777088;
vision_ds_Color.TEAL = -16744320;
vision_ds_Color.FUCHSIA = -65281;
vision_ds_Color.AQUA = -16711681;
vision_ds_Color.LIME = -13447886;
vision_ds_Color.ROYAL_BLUE = -12490271;
vision_ds_Color.COLOR_REGEX = new EReg("^(0x|#)(([A-F0-9]{2}){3,4})$","i");
vision_ds_Image.OFFSET = 11;
vision_ds_Image.WIDTH_BYTES = 2;
vision_ds_Image.VIEW_XY_BYTES = 4;
vision_ds_Image.VIEW_WH_BYTES = 4;
vision_ds_Image.VIEW_SHAPE_BYTES = 1;
vision_ds_Image.DATA_GAP = 2;
vision_tools_ImageTools.defaultResizeAlgorithm = 1;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
