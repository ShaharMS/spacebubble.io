(function ($hx_exports, $global) { "use strict"; var $hx_script = (function (exports, global) { // Generated by Haxe 4.3.3
(function ($hx_exports, $global) { "use strict";
$hx_exports["lime"] = $hx_exports["lime"] || {};
$hx_exports["little"] = $hx_exports["little"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = "lime.app.IModule";
lime_app_IModule.__isInterface__ = true;
lime_app_IModule.prototype = {
	__registerLimeModule: null
	,__unregisterLimeModule: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = "lime.app.Module";
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__registerLimeModule: function(application) {
	}
	,__unregisterLimeModule: function(application) {
	}
	,__class__: lime_app_Module
};
var lime__$internal_backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
	this.accelerometer = lime_system_Sensor.registerSensor(lime_system_SensorType.ACCELEROMETER,0);
};
$hxClasses["lime._internal.backend.html5.HTML5Application"] = lime__$internal_backend_html5_HTML5Application;
lime__$internal_backend_html5_HTML5Application.__name__ = "lime._internal.backend.html5.HTML5Application";
lime__$internal_backend_html5_HTML5Application.prototype = {
	accelerometer: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,gameDeviceCache: null
	,hidden: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 12:
			return 1073741980;
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 19:
			return 1073741896;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 41:
			return 1073741943;
		case 43:
			return 1073741940;
		case 44:
			return 1073741894;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 91:
			return 1073742051;
		case 92:
			return 1073742055;
		case 93:
			return 1073742055;
		case 95:
			return 1073742106;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 108:
			return 1073741923;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 127:
			return 1073741931;
		case 128:
			return 1073741932;
		case 129:
			return 1073741933;
		case 130:
			return 1073741934;
		case 131:
			return 1073741935;
		case 132:
			return 1073741936;
		case 133:
			return 1073741937;
		case 134:
			return 1073741938;
		case 135:
			return 1073741939;
		case 144:
			return 1073741907;
		case 145:
			return 1073741895;
		case 160:
			return 94;
		case 161:
			return 33;
		case 163:
			return 35;
		case 164:
			return 36;
		case 166:
			return 1073742094;
		case 167:
			return 1073742095;
		case 168:
			return 1073742097;
		case 169:
			return 41;
		case 170:
			return 42;
		case 171:
			return 96;
		case 172:
			return 1073741898;
		case 173:
			return 45;
		case 174:
			return 1073741953;
		case 175:
			return 1073741952;
		case 176:
			return 1073742082;
		case 177:
			return 1073742083;
		case 178:
			return 1073742084;
		case 179:
			return 1073742085;
		case 180:
			return 1073742089;
		case 181:
			return 1073742086;
		case 182:
			return 1073741953;
		case 183:
			return 1073741952;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 193:
			return 63;
		case 194:
			return 1073741923;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		case 223:
			return 96;
		case 224:
			return 1073742051;
		case 226:
			return 92;
		}
		return keyCode;
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		var o = window;
		if(Object.prototype.hasOwnProperty.call(o,"Accelerometer")) {
			window.addEventListener("devicemotion",$bind(this,this.handleSensorEvent),false);
		}
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}

			if ('performance' in window == false) {
				window.performance = {};
			}

			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = window.performance.now();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = window.performance.now();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		var _g = 0;
		var _g1 = this.parent.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.__backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = window.performance.now();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var _g = 0;
			var _g1 = this.parent.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				this.parent.onUpdate.dispatch(this.deltaTime | 0);
				if($window.context != null) {
					$window.onRender.dispatch($window.context);
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate - this.currentUpdate % this.framePeriod + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__window != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__window.onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyDown.canceled && event.cancelable) {
					event.preventDefault();
				}
			} else {
				this.parent.__window.onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyUp.canceled && event.cancelable) {
					event.preventDefault();
				}
			}
		}
	}
	,handleSensorEvent: function(event) {
		this.accelerometer.onUpdate.dispatch(event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__window != null) {
			switch(event.type) {
			case "beforeunload":
				break;
			case "blur":
				if(!this.hidden) {
					this.parent.__window.onFocusOut.dispatch();
					this.parent.__window.onDeactivate.dispatch();
					this.hidden = true;
				}
				break;
			case "focus":
				if(this.hidden) {
					this.parent.__window.onFocusIn.dispatch();
					this.parent.__window.onActivate.dispatch();
					this.hidden = false;
				}
				break;
			case "resize":
				this.parent.__window.__backend.handleResizeEvent(event);
				break;
			case "visibilitychange":
				if(window.document.hidden) {
					if(!this.hidden) {
						this.parent.__window.onFocusOut.dispatch();
						this.parent.__window.onDeactivate.dispatch();
						this.hidden = true;
					}
				} else if(this.hidden) {
					this.parent.__window.onFocusIn.dispatch();
					this.parent.__window.onActivate.dispatch();
					this.hidden = false;
				}
				break;
			}
		}
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g = 0;
		var _g1 = devices.length;
		while(_g < _g1) {
			var i = _g++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$internal_backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g2 = 0;
				var _g3 = data.buttons.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g4 = 0;
				var _g5 = data.axes.length;
				while(_g4 < _g5) {
					var i2 = _g4++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g6 = 0;
				var _g7 = data.buttons.length;
				while(_g6 < _g7) {
					var i3 = _g6++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g8 = 0;
				var _g9 = data.axes.length;
				while(_g8 < _g9) {
					var i4 = _g8++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onCreateWindow = new lime_app__$Event_$lime_$ui_$Window_$Void();
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.meta = new haxe_ds_StringMap();
	this.modules = [];
	this.__windowByID = new haxe_ds_IntMap();
	this.__windows = [];
	this.__backend = new lime__$internal_backend_html5_HTML5Application(this);
	this.__registerLimeModule(this);
	this.__preloader = new lime_utils_Preloader();
	this.__preloader.onProgress.add($bind(this,this.onPreloadProgress));
	this.__preloader.onComplete.add($bind(this,this.onPreloadComplete));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = "lime.app.Application";
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	meta: null
	,modules: null
	,onUpdate: null
	,onCreateWindow: null
	,preloader: null
	,window: null
	,windows: null
	,__backend: null
	,__preloader: null
	,__window: null
	,__windowByID: null
	,__windows: null
	,addModule: function(module) {
		module.__registerLimeModule(this);
		this.modules.push(module);
	}
	,createWindow: function(attributes) {
		var $window = this.__createWindow(attributes);
		this.__addWindow($window);
		return $window;
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.__backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY,deltaMode) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowCreate: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowDropFile: function(file) {
	}
	,onWindowEnter: function() {
	}
	,onWindowExpose: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowMinimize: function() {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,removeModule: function(module) {
		if(module != null) {
			module.__unregisterLimeModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__addWindow: function($window) {
		if($window != null) {
			this.__windows.push($window);
			this.__windowByID.h[$window.id] = $window;
			var _g = this;
			var window1 = $window;
			var tmp = function() {
				_g.__onWindowClose(window1);
			};
			$window.onClose.add(tmp,false,-10000);
			if(this.__window == null) {
				this.__window = $window;
				$window.onActivate.add($bind(this,this.onWindowActivate));
				$window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
				$window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
				$window.onDeactivate.add($bind(this,this.onWindowDeactivate));
				$window.onDropFile.add($bind(this,this.onWindowDropFile));
				$window.onEnter.add($bind(this,this.onWindowEnter));
				$window.onExpose.add($bind(this,this.onWindowExpose));
				$window.onFocusIn.add($bind(this,this.onWindowFocusIn));
				$window.onFocusOut.add($bind(this,this.onWindowFocusOut));
				$window.onFullscreen.add($bind(this,this.onWindowFullscreen));
				$window.onKeyDown.add($bind(this,this.onKeyDown));
				$window.onKeyUp.add($bind(this,this.onKeyUp));
				$window.onLeave.add($bind(this,this.onWindowLeave));
				$window.onMinimize.add($bind(this,this.onWindowMinimize));
				$window.onMouseDown.add($bind(this,this.onMouseDown));
				$window.onMouseMove.add($bind(this,this.onMouseMove));
				$window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
				$window.onMouseUp.add($bind(this,this.onMouseUp));
				$window.onMouseWheel.add($bind(this,this.onMouseWheel));
				$window.onMove.add($bind(this,this.onWindowMove));
				$window.onRender.add($bind(this,this.render));
				$window.onResize.add($bind(this,this.onWindowResize));
				$window.onRestore.add($bind(this,this.onWindowRestore));
				$window.onTextEdit.add($bind(this,this.onTextEdit));
				$window.onTextInput.add($bind(this,this.onTextInput));
				this.onWindowCreate();
			}
			this.onCreateWindow.dispatch($window);
		}
	}
	,__createWindow: function(attributes) {
		var $window = new lime_ui_Window(this,attributes);
		if($window.id == -1) {
			return null;
		}
		return $window;
	}
	,__registerLimeModule: function(application) {
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onExit.add($bind(this,this.__onModuleExit),false,-1000);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,__removeWindow: function($window) {
		if($window != null && this.__windowByID.h.hasOwnProperty($window.id)) {
			if(this.__window == $window) {
				this.__window = null;
			}
			HxOverrides.remove(this.__windows,$window);
			this.__windowByID.remove($window.id);
			$window.close();
			this.__checkForAllWindowsClosed();
		}
	}
	,__checkForAllWindowsClosed: function() {
		if(this.__windows.length == 0) {
			lime_system_System.exit(0);
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var _g = this;
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			_g.onGamepadAxisMove(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var _g1 = this;
		var gamepad2 = gamepad;
		var tmp = function(button) {
			_g1.onGamepadButtonDown(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp);
		var _g2 = this;
		var gamepad3 = gamepad;
		var tmp = function(button) {
			_g2.onGamepadButtonUp(gamepad3,button);
		};
		gamepad.onButtonUp.add(tmp);
		var _g3 = this;
		var gamepad4 = gamepad;
		var tmp = function() {
			_g3.onGamepadDisconnect(gamepad4);
		};
		gamepad.onDisconnect.add(tmp);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var _g = this;
		var joystick1 = joystick;
		var tmp = function(axis,value) {
			_g.onJoystickAxisMove(joystick1,axis,value);
		};
		joystick.onAxisMove.add(tmp);
		var _g1 = this;
		var joystick2 = joystick;
		var tmp = function(button) {
			_g1.onJoystickButtonDown(joystick2,button);
		};
		joystick.onButtonDown.add(tmp);
		var _g2 = this;
		var joystick3 = joystick;
		var tmp = function(button) {
			_g2.onJoystickButtonUp(joystick3,button);
		};
		joystick.onButtonUp.add(tmp);
		var _g3 = this;
		var joystick4 = joystick;
		var tmp = function() {
			_g3.onJoystickDisconnect(joystick4);
		};
		joystick.onDisconnect.add(tmp);
		var _g4 = this;
		var joystick5 = joystick;
		var tmp = function(hat,position) {
			_g4.onJoystickHatMove(joystick5,hat,position);
		};
		joystick.onHatMove.add(tmp);
		var _g5 = this;
		var joystick6 = joystick;
		var tmp = function(trackball,x,y) {
			_g5.onJoystickTrackballMove(joystick6,trackball,x,y);
		};
		joystick.onTrackballMove.add(tmp);
	}
	,__onModuleExit: function(code) {
		if(this.onExit.canceled) {
			return;
		}
		this.__unregisterLimeModule(this);
		this.__backend.exit();
		if(lime_app_Application.current == this) {
			lime_app_Application.current = null;
		}
	}
	,__onWindowClose: function($window) {
		if(this.__window == $window) {
			this.onWindowClose();
		}
		this.__removeWindow($window);
	}
	,__unregisterLimeModule: function(application) {
		application.onUpdate.remove($bind(this,this.update));
		application.onExit.remove($bind(this,this.__onModuleExit));
		application.onExit.remove($bind(this,this.onModuleExit));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.remove($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_window: function() {
		return this.__window;
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
	,__properties__: {get_windows:"get_windows",get_window:"get_window",get_preloader:"get_preloader"}
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = "ApplicationMain";
ApplicationMain.main = function() {
	lime_system_System.__registerEntryPoint("LittleDemo",ApplicationMain.create);
};
ApplicationMain.create = function(config) {
	var app = new openfl_display_Application();
	ManifestResources.init(config);
	app.meta.h["build"] = "361";
	app.meta.h["company"] = "Company Name";
	app.meta.h["file"] = "LittleDemo";
	app.meta.h["name"] = "LittleDemo";
	app.meta.h["packageName"] = "com.sample.littledemo";
	app.meta.h["version"] = "1.0.0";
	var attributes = { allowHighDPI : true, alwaysOnTop : false, borderless : false, element : null, frameRate : 60, height : 0, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, title : "LittleDemo", width : 0, x : null, y : null};
	attributes.context = { antialiasing : 0, background : null, colorDepth : 32, depth : true, hardware : true, stencil : true, type : null, vsync : false};
	if(app.__window == null) {
		if(config != null) {
			var _g = 0;
			var _g1 = Reflect.fields(config);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(attributes,field)) {
					attributes[field] = Reflect.field(config,field);
				} else if(Object.prototype.hasOwnProperty.call(attributes.context,field)) {
					attributes.context[field] = Reflect.field(config,field);
				}
			}
		}
	}
	app.createWindow(attributes);
	var preloader = new openfl_display_Preloader(new openfl_display_DefaultPreloader());
	app.__preloader.onProgress.add(function(loaded,total) {
		preloader.update(loaded,total);
	});
	app.__preloader.onComplete.add(function() {
		preloader.start();
	});
	var stage = app.__window.stage;
	var tmp = function() {
		ApplicationMain.start(stage);
	};
	preloader.onComplete.add(tmp);
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraries;
	while(_g < _g1.length) {
		var library = _g1[_g];
		++_g;
		app.__preloader.addLibrary(library);
	}
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraryNames;
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		app.__preloader.addLibraryName(name);
	}
	app.__preloader.load();
	var result = app.exec();
};
ApplicationMain.start = function(stage) {
	if(stage.__uncaughtErrorEvents.__enabled) {
		try {
			var current = stage.getChildAt(0);
			if(current == null || !((current) instanceof openfl_display_DisplayObjectContainer)) {
				current = new openfl_display_MovieClip();
				stage.addChild(current);
			}
			new DocumentClass(current);
			stage.dispatchEvent(new openfl_events_Event("resize",false,false));
			if(stage.window.__fullscreen) {
				stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			stage.__handleError(e);
		}
	} else {
		var current = stage.getChildAt(0);
		if(current == null || !((current) instanceof openfl_display_DisplayObjectContainer)) {
			current = new openfl_display_MovieClip();
			stage.addChild(current);
		}
		new DocumentClass(current);
		stage.dispatchEvent(new openfl_events_Event("resize",false,false));
		if(stage.window.__fullscreen) {
			stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	}
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = "openfl.events.IEventDispatcher";
openfl_events_IEventDispatcher.__isInterface__ = true;
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = "openfl.events.EventDispatcher";
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		if(!Object.prototype.hasOwnProperty.call(this.__eventMap.h,type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority,useWeakReference));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			this.__eventMap.h[type] = list;
			this.__iterators.h[type] = [iterator];
		} else {
			var list = this.__eventMap.h[type];
			var _g = 0;
			var _g1 = list.length;
			while(_g < _g1) {
				var i = _g++;
				if(list[i].match(listener,useCapture)) {
					return;
				}
			}
			var iterators = this.__iterators.h[type];
			var _g = 0;
			while(_g < iterators.length) {
				var iterator = iterators[_g];
				++_g;
				if(iterator.active) {
					iterator.copy();
				}
			}
			this.__addListenerByPriority(list,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority,useWeakReference));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this.__eventMap.h,type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var list = this.__eventMap.h[type];
		if(list == null) {
			return;
		}
		var iterators = this.__iterators.h[type];
		var _g = 0;
		var _g1 = list.length;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			var _this = this.__eventMap;
			var key = type;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
			var _this = this.__iterators;
			var key = type;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
		var h = this.__eventMap.h;
		var inlStringMapValueIterator_h = h;
		var inlStringMapValueIterator_keys = Object.keys(h);
		var inlStringMapValueIterator_length = inlStringMapValueIterator_keys.length;
		var inlStringMapValueIterator_current = 0;
		if(inlStringMapValueIterator_current >= inlStringMapValueIterator_length) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var full = c.__name__;
		var short = full.split(".").pop();
		return "[object " + short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var list = this.__eventMap.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var iterators = this.__iterators.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.start();
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1 == null) {
				continue;
			}
			if(listener1.useCapture == capture) {
				if(listener1.useWeakReference && listener1.weakRefCallback != null) {
					var weakCallback = listener1.weakRefCallback.deref();
					if(weakCallback == null) {
						var indexToRemove = iterator.index - 1;
						list.splice(indexToRemove,1);
						iterator.remove(listener1,indexToRemove);
					} else {
						weakCallback(event);
					}
				} else {
					listener1.callback(event);
				}
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		iterator.stop();
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		} else {
			iterator.reset(list);
		}
		return !event.isDefaultPrevented();
	}
	,__removeAllListeners: function() {
		this.__eventMap = null;
		this.__iterators = null;
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g = 0;
		var _g1 = numElements;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = "openfl.display.IBitmapDrawable";
openfl_display_IBitmapDrawable.__isInterface__ = true;
openfl_display_IBitmapDrawable.prototype = {
	__blendMode: null
	,__drawableType: null
	,__isMask: null
	,__renderable: null
	,__renderTransform: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__getBounds: null
	,__update: null
	,__updateTransforms: null
	,__mask: null
	,__scrollRect: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_Vector = {};
openfl_Vector.__properties__ = {set_length:"set_length",get_length:"get_length",set_fixed:"set_fixed",get_fixed:"get_fixed"};
openfl_Vector.concat = function(this1,vec) {
	return this1.concat(vec);
};
openfl_Vector.copy = function(this1) {
	return this1.copy();
};
openfl_Vector.every = function(this1,callback,thisObject) {
	var _g = 0;
	var _g1 = this1.get_length();
	while(_g < _g1) {
		var i = _g++;
		this1.__tempIndex = i;
		if(thisObject != null) {
			if(callback.apply(thisObject,[this1.get(i),i,this1]) == false) {
				break;
			}
		} else if(callback(this1.get(i),i,this1) == false) {
			break;
		}
	}
	return this1.__tempIndex == this1.get_length() - 1;
};
openfl_Vector.filter = function(this1,callback) {
	return this1.filter(callback);
};
openfl_Vector.get = function(this1,index) {
	return this1.get(index);
};
openfl_Vector.indexOf = function(this1,searchElement,fromIndex) {
	if(fromIndex == null) {
		fromIndex = 0;
	}
	return this1.indexOf(searchElement,fromIndex);
};
openfl_Vector.insertAt = function(this1,index,element) {
	this1.insertAt(index,element);
};
openfl_Vector.iterator = function(this1) {
	return this1.iterator();
};
openfl_Vector.join = function(this1,sep) {
	if(sep == null) {
		sep = ",";
	}
	return this1.join(sep);
};
openfl_Vector.lastIndexOf = function(this1,searchElement,fromIndex) {
	return this1.lastIndexOf(searchElement,fromIndex);
};
openfl_Vector.pop = function(this1) {
	return this1.pop();
};
openfl_Vector.push = function(this1,value) {
	return this1.push(value);
};
openfl_Vector.removeAt = function(this1,index) {
	return this1.removeAt(index);
};
openfl_Vector.reverse = function(this1) {
	return this1.reverse();
};
openfl_Vector.set = function(this1,index,value) {
	return this1.set(index,value);
};
openfl_Vector.shift = function(this1) {
	return this1.shift();
};
openfl_Vector.slice = function(this1,startIndex,endIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	return this1.slice(startIndex,endIndex);
};
openfl_Vector.some = function(this1,callback,thisObject) {
	var _g = 0;
	var _g1 = this1.get_length();
	while(_g < _g1) {
		var i = _g++;
		this1.__tempIndex = i;
		if(thisObject != null) {
			if(callback.apply(thisObject,[this1.get(i),i,this1]) == true) {
				break;
			}
		} else if(callback(this1.get(i),i,this1)) {
			break;
		}
		if(i == this1.get_length() - 1) {
			this1.__tempIndex++;
		}
	}
	return this1.__tempIndex < this1.get_length() - 1;
};
openfl_Vector.sort = function(this1,sortBehavior) {
	this1.sort(sortBehavior);
};
openfl_Vector.splice = function(this1,startIndex,deleteCount) {
	var $l=arguments.length;
	var items = new Array($l>3?$l-3:0);
	for(var $i=3;$i<$l;++$i){items[$i-3]=arguments[$i];}
	this1.__tempIndex = startIndex;
	var _g_current = 0;
	var _g_args = items;
	while(_g_current < _g_args.length) {
		var item = _g_args[_g_current++];
		this1.insertAt(this1.__tempIndex,item);
		this1.__tempIndex++;
	}
	return this1.splice(this1.__tempIndex,deleteCount);
};
openfl_Vector.toString = function(this1) {
	if(this1 != null) {
		return this1.toString();
	} else {
		return null;
	}
};
openfl_Vector.unshift = function(this1,value) {
	this1.unshift(value);
};
openfl_Vector.convert = function(vec) {
	return vec;
};
openfl_Vector.toBoolVector = function(t,length,fixed,array) {
	return new openfl__$Vector_BoolVector(length,fixed,array);
};
openfl_Vector.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_IntVector(length,fixed,array);
};
openfl_Vector.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FloatVector(length,fixed,array,true);
};
openfl_Vector.toFunctionVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FunctionVector(length,fixed,array);
};
openfl_Vector.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl_Vector.toNullVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl_Vector.fromBoolVector = function(vector) {
	return vector;
};
openfl_Vector.fromIntVector = function(vector) {
	return vector;
};
openfl_Vector.fromFloatVector = function(vector) {
	return vector;
};
openfl_Vector.fromFunctionVector = function(vector) {
	return vector;
};
openfl_Vector.fromObjectVector = function(vector) {
	return vector;
};
openfl_Vector.get_fixed = function(this1) {
	return this1.fixed;
};
openfl_Vector.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl_Vector.get_length = function(this1) {
	return this1.get_length();
};
openfl_Vector.set_length = function(this1,value) {
	return this1.set_length(value);
};
var lime_utils_ObjectPool = function(create,clean,size) {
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new haxe_ds_List();
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
};
$hxClasses["lime.utils.ObjectPool"] = lime_utils_ObjectPool;
lime_utils_ObjectPool.__name__ = "lime.utils.ObjectPool";
lime_utils_ObjectPool.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(object != null && !this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,remove: function(object) {
		if(object != null && this.__pool.exists(object)) {
			this.__pool.remove(object);
			if(this.__inactiveObject0 == object) {
				this.__inactiveObject0 = null;
				this.inactiveObjects--;
			} else if(this.__inactiveObject1 == object) {
				this.__inactiveObject1 = null;
				this.inactiveObjects--;
			} else if(this.__inactiveObjectList.remove(object)) {
				this.inactiveObjects--;
			} else {
				this.activeObjects--;
			}
		}
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g = 0;
				var _g1 = value - current;
				while(_g < _g1) {
					var i = _g++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,__class__: haxe_IMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_ObjectMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.h[key1.__id__]);
		}
		return copied;
	}
	,toString: function() {
		var s_b = "";
		s_b += "[";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "]";
		return s_b;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__drawableType = 1;
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldVisible = true;
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
	if(openfl_display_DisplayObject.__initStage != null) {
		this.stage = openfl_display_DisplayObject.__initStage;
		openfl_display_DisplayObject.__initStage = null;
		this.stage.addChild(this);
	}
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = "openfl.display.DisplayObject";
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__calculateAbsoluteTransform = function(local,parentTransform,target) {
	target.a = local.a * parentTransform.a + local.b * parentTransform.c;
	target.b = local.a * parentTransform.b + local.b * parentTransform.d;
	target.c = local.c * parentTransform.a + local.d * parentTransform.c;
	target.d = local.c * parentTransform.b + local.d * parentTransform.d;
	target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
	target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
};
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cacheBitmap: null
	,__cacheBitmapBackground: null
	,__cacheBitmapColorTransform: null
	,__cacheBitmapData: null
	,__cacheBitmapData2: null
	,__cacheBitmapData3: null
	,__cacheBitmapMatrix: null
	,__cacheBitmapRenderer: null
	,__cairo: null
	,__children: null
	,__customRenderClear: null
	,__customRenderEvent: null
	,__drawableType: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isCacheBitmapRender: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__maskTarget: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scale9Grid: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__shader: null
	,__tempPoint: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldBlendMode: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldShader: null
	,__worldScale9Grid: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldTransformInvalid: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,type)) {
				openfl_display_DisplayObject.__broadcastEvents.h[type] = [];
			}
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.h[type];
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(this.__customRenderEvent == null) {
				this.__customRenderEvent = new openfl_events_RenderEvent(null);
				this.__customRenderEvent.objectColorTransform = new openfl_geom_ColorTransform();
				this.__customRenderEvent.objectMatrix = new openfl_geom_Matrix();
				this.__customRenderClear = true;
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(((event) instanceof openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this.b + mouseEvent.localY * _this.d + _this.ty;
		} else if(((event) instanceof openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this.a + touchEvent.localY * _this.c + _this.tx;
			var _this = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this.b + touchEvent.localY * _this.d + _this.ty;
		}
		event.target = this;
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = openfl_geom_Matrix.__pool.get();
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			matrix.copyFrom(this.__getWorldTransform());
			var targetMatrix = openfl_geom_Matrix.__pool.get();
			targetMatrix.copyFrom(targetCoordinateSpace.__getWorldTransform());
			targetMatrix.invert();
			matrix.concat(targetMatrix);
			openfl_geom_Matrix.__pool.release(targetMatrix);
		} else {
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		openfl_geom_Matrix.__pool.release(matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__globalToLocal(pos,new openfl_geom_Point());
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.stage != null) {
			return this.__hitTest(x,y,shapeFlag,null,false,this);
		} else {
			return false;
		}
	}
	,invalidate: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,type)) {
					HxOverrides.remove(openfl_display_DisplayObject.__broadcastEvents.h[type],this);
				}
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(!this.hasEventListener("clearDOM") && !this.hasEventListener("renderCairo") && !this.hasEventListener("renderCanvas") && !this.hasEventListener("renderDOM") && !this.hasEventListener("renderOpenGL")) {
				this.__customRenderEvent = null;
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
		if(this.__cacheBitmap != null) {
			this.__cacheBitmap.__cleanup();
			this.__cacheBitmap = null;
		}
		if(this.__cacheBitmapData != null) {
			this.__cacheBitmapData.dispose();
			this.__cacheBitmapData = null;
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var parent = event.bubbles ? this.parent : null;
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(parent != null && parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			parent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) {
			event.target = this;
		}
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) {
				this.parent.__dispatch(event);
			} else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.set(i,parent);
					parent = parent.parent;
					++i;
				}
				var _g = 0;
				var _g1 = i;
				while(_g < _g1) {
					var j = _g++;
					stack.get(i - j - 1).__dispatch(event);
				}
				openfl_display_DisplayObject.__tempStack.release(stack);
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getRenderBounds(rect,matrix);
		if(this.__filters != null) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__pool.get();
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(r.x,r.y,r.width,r.height);
			openfl_geom_Rectangle.__pool.release(r);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		var transformDirty = this.__transformDirty || this.__worldTransformInvalid;
		if(transformDirty) {
			var list = [];
			var current = this;
			if(this.parent == null) {
				this.__update(true,false);
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current == null) {
						break;
					}
				}
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				global.x = -_this.tx;
				global.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
				global.y = 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
				global.x = px;
			}
		} else {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			local.x = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			local.y = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
		}
		return local;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.__visible || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) {
			this.__graphics.__readGraphicsData(graphicsData);
		}
	}
	,__setParentRenderDirty: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__stopAllMovieClips: function() {
	}
	,__update: function(transformOnly,updateChildren) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(this.__isMask && renderParent == null) {
			renderParent = this.__maskTarget;
		}
		this.__renderable = this.__visible && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		this.__worldTransformInvalid = false;
		if(!transformOnly) {
			if(openfl_display_DisplayObject.__supportDOM) {
				this.__renderTransformChanged = !this.__renderTransform.equals(this.__renderTransformCache);
				if(this.__renderTransformCache == null) {
					this.__renderTransformCache = this.__renderTransform.clone();
				} else {
					this.__renderTransformCache.copyFrom(this.__renderTransform);
				}
			}
			if(renderParent != null) {
				if(openfl_display_DisplayObject.__supportDOM) {
					var worldVisible = renderParent.__worldVisible && this.__visible;
					this.__worldVisibleChanged = this.__worldVisible != worldVisible;
					this.__worldVisible = worldVisible;
					var worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
					this.__worldAlphaChanged = this.__worldAlpha != worldAlpha;
					this.__worldAlpha = worldAlpha;
				} else {
					this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.__colorTransform);
					this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				} else {
					this.__worldColorTransform.__copyFrom(renderParent.__worldColorTransform);
				}
				if(this.__blendMode == null || this.__blendMode == 10) {
					this.__worldBlendMode = renderParent.__worldBlendMode;
				} else {
					this.__worldBlendMode = this.__blendMode;
				}
				if(this.__shader == null) {
					this.__worldShader = renderParent.__shader;
				} else {
					this.__worldShader = this.__shader;
				}
				if(this.__scale9Grid == null) {
					this.__worldScale9Grid = renderParent.__scale9Grid;
				} else {
					this.__worldScale9Grid = this.__scale9Grid;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__worldVisibleChanged = this.__worldVisible != this.__visible;
					this.__worldVisible = this.__visible;
					this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha();
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.__colorTransform);
				} else {
					this.__worldColorTransform.__identity();
				}
				this.__worldBlendMode = this.__blendMode;
				this.__worldShader = this.__shader;
				this.__worldScale9Grid = this.__scale9Grid;
			}
		}
		if(updateChildren && this.get_mask() != null) {
			this.get_mask().__update(transformOnly,true);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var target = this.__worldTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
		}
		if(!overrided && renderParent != null) {
			var parentTransform = renderParent.__renderTransform;
			var target = this.__renderTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value < 0.0) {
			value = 0.0;
		}
		if(value != this.__alpha && !this.get_cacheAsBitmap()) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		if(value != this.__blendMode) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,set_cacheAsBitmap: function(value) {
		if(value != this.__cacheAsBitmap) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return this.__cacheAsBitmapMatrix = value != null ? value.clone() : value;
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			var clonedFilters = [];
			var _g = 0;
			while(_g < value.length) {
				var filter = value[_g];
				++_g;
				var clonedFilter = filter.clone();
				clonedFilter.__renderDirty = true;
				clonedFilters.push(clonedFilter);
			}
			this.__filters = clonedFilters;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else if(this.__filters != null) {
			this.__filters = null;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,set_height: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.height) {
			this.set_scaleY(value / rect.height);
		} else {
			this.set_scaleY(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl_utils__$internal_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value == this.__mask) {
			return value;
		}
		if(value != this.__mask) {
			this.__setTransformDirty();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			var _this = this.__mask;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) {
			this.__cacheBitmap.set_mask(value);
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_utils__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_utils__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_utils__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_utils__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) {
			return openfl_utils__$internal_Lib.current;
		}
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			this.__transform.a = this.__rotationCosine * this.__scaleX;
			this.__transform.b = this.__rotationSine * this.__scaleX;
			this.__transform.c = -this.__rotationSine * this.__scaleY;
			this.__transform.d = this.__rotationCosine * this.__scaleY;
			this.__setTransformDirty();
		}
		return value;
	}
	,get_scale9Grid: function() {
		if(this.__scale9Grid == null) {
			return null;
		}
		return this.__scale9Grid.clone();
	}
	,set_scale9Grid: function(value) {
		if(value == null && this.__scale9Grid == null) {
			return value;
		}
		if(value != null && this.__scale9Grid != null && this.__scale9Grid.equals(value)) {
			return value;
		}
		if(value != null) {
			if(this.__scale9Grid == null) {
				this.__scale9Grid = new openfl_geom_Rectangle();
			}
			this.__scale9Grid.copyFrom(value);
		} else {
			this.__scale9Grid = null;
		}
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) {
					this.__setTransformDirty();
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) {
					this.__setTransformDirty();
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) {
					this.__setTransformDirty();
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) {
					this.__setTransformDirty();
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value == null && this.__scrollRect == null) {
			return value;
		}
		if(value != null && this.__scrollRect != null && this.__scrollRect.equals(value)) {
			return value;
		}
		if(value != null) {
			if(this.__scrollRect == null) {
				this.__scrollRect = new openfl_geom_Rectangle();
			}
			this.__scrollRect.copyFrom(value);
		} else {
			this.__scrollRect = null;
		}
		this.__setTransformDirty();
		if(openfl_display_DisplayObject.__supportDOM) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_shader: function() {
		return this.__shader;
	}
	,set_shader: function(value) {
		this.__shader = value;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw new openfl_errors_TypeError("Parameter transform must be non-null.");
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		this.__setTransformDirty();
		this.__objectTransform.set_matrix(value.get_matrix());
		if(!this.__objectTransform.__colorTransform.__equals(value.__colorTransform,true) || !this.get_cacheAsBitmap() && this.__objectTransform.__colorTransform.alphaMultiplier != value.__colorTransform.alphaMultiplier) {
			this.__objectTransform.__colorTransform.__copyFrom(value.get_colorTransform());
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,set_width: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.width) {
			this.set_scaleX(value / rect.width);
		} else {
			this.set_scaleX(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_shader:"set_shader",get_shader:"get_shader",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_scale9Grid:"set_scale9Grid",get_scale9Grid:"get_scale9Grid",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = "openfl.display.InteractiveObject";
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,__tabEnabled: null
	,__tabIndex: null
	,requestSoftKeyboard: function() {
		openfl_utils__$internal_Lib.notImplemented({ fileName : "openfl/display/InteractiveObject.hx", lineNumber : 1251, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__allowMouseFocus: function() {
		if(this.mouseEnabled) {
			return this.get_tabEnabled();
		} else {
			return false;
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__tabTest: function(stack) {
		if(this.get_tabEnabled()) {
			stack.push(this);
		}
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) {
			return true;
		} else {
			return false;
		}
	}
	,set_tabEnabled: function(value) {
		if(this.__tabEnabled != value) {
			this.__tabEnabled = value;
			this.dispatchEvent(new openfl_events_Event("tabEnabledChange",true,false));
		}
		return this.__tabEnabled;
	}
	,get_tabIndex: function() {
		return this.__tabIndex;
	}
	,set_tabIndex: function(value) {
		if(this.__tabIndex != value) {
			if(value < -1) {
				throw new openfl_errors_RangeError("Parameter tabIndex must be a non-negative number; got " + value);
			}
			this.__tabIndex = value;
			this.dispatchEvent(new openfl_events_Event("tabIndexChange",true,false));
		}
		return this.__tabIndex;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabIndex:"set_tabIndex",get_tabIndex:"get_tabIndex",set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__tabChildren = true;
	this.__children = [];
	this.__removedChildren = openfl_Vector.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = "openfl.display.DisplayObjectContainer";
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,__removedChildren: null
	,__tabChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw error;
		} else if(child.stage == child) {
			var error = new openfl_errors_ArgumentError("Error #3783: A Stage object cannot be added as the child of another object.");
			error.errorID = 3783;
			throw error;
		}
		if(index > this.__children.length || index < 0) {
			throw haxe_Exception.thrown("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				child.__setStageReference(this.stage);
			}
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("added");
			event.bubbles = true;
			event.target = child;
			child.__dispatchWithCapture(event);
			if(addedToStage) {
				event = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
			}
		}
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g = 0;
		var _g1 = this.__children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("removed",true);
			child.__dispatchWithCapture(event);
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				var event = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) {
				return;
			}
		}
		if(beginIndex > this.__children.length - 1) {
			return;
		} else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
			throw new openfl_errors_RangeError("The supplied index is out of bounds.");
		}
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			--numRemovals;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = this.__children.indexOf(child1);
			var index2 = this.__children.indexOf(child2);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__cleanup: function() {
		openfl_display_InteractiveObject.prototype.__cleanup.call(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__cleanup();
		}
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__cleanupRemovedChildren: function() {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) {
					break;
				}
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__scrollRect != null) {
			return;
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			var childRect = openfl_geom_Rectangle.__pool.get();
			child.__getFilterBounds(childRect,childWorldTransform);
			rect.__expand(childRect.x,childRect.y,childRect.width,childRect.height);
			openfl_geom_Rectangle.__pool.release(childRect);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getRenderBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive && stack.length > length) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			var hitTest = false;
			while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i])) {
				hitTest = true;
				if(stack == null) {
					break;
				}
			}
			return hitTest;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__tabTest: function(stack) {
		openfl_display_InteractiveObject.prototype.__tabTest.call(this,stack);
		if(!this.get_tabChildren()) {
			return;
		}
		var interactive = false;
		var interactiveObject = null;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			interactive = child.__getInteractive(null);
			if(interactive) {
				interactiveObject = child;
				interactiveObject.__tabTest(stack);
			}
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true);
			}
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,get_tabChildren: function() {
		return this.__tabChildren;
	}
	,set_tabChildren: function(value) {
		if(this.__tabChildren != value) {
			this.__tabChildren = value;
			this.dispatchEvent(new openfl_events_Event("tabChildrenChange",true,false));
		}
		return this.__tabChildren;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_tabChildren:"set_tabChildren",get_tabChildren:"get_tabChildren",get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.__drawableType = 4;
	this.__buttonMode = false;
	this.useHandCursor = true;
	if(this.__pendingBindLibrary != null) {
		var library = this.__pendingBindLibrary;
		var className = this.__pendingBindClassName;
		this.__pendingBindLibrary = null;
		this.__pendingBindClassName = null;
		library.bind(className,this);
	} else if(openfl_display_Sprite.__constructor != null) {
		var method = openfl_display_Sprite.__constructor;
		openfl_display_Sprite.__constructor = null;
		method(this);
	}
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = "openfl.display.Sprite";
openfl_display_Sprite.fromTimeline = function(timeline) {
	var sprite = new openfl_display_Sprite();
	timeline.initializeSprite(sprite);
	return sprite;
};
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,__buttonMode: null
	,__pendingBindClassName: null
	,__pendingBindLibrary: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__bind: function(library,className) {
		if(this.__worldTransform == null) {
			this.__pendingBindLibrary = library;
			this.__pendingBindClassName = className;
		} else if(library == null || className == null || !library.bind(className,this)) {
			lime_utils_Log.error("Cannot bind class name \"" + className + "\"",{ fileName : "openfl/display/Sprite.hx", lineNumber : 281, className : "openfl.display.Sprite", methodName : "__bind"});
		}
	}
	,__getCursor: function() {
		if(this.__buttonMode && this.useHandCursor) {
			return "button";
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(!hitObject.get_visible() || this.__isMask) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
			if(stack != null) {
				return interactiveOnly;
			} else {
				return true;
			}
		} else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && (!interactiveOnly || this.mouseEnabled)) {
				stack.push(hitObject);
			}
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(stack != null && hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__buttonMode;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_buttonMode: function() {
		return this.__buttonMode;
	}
	,set_buttonMode: function(value) {
		return this.__buttonMode = value;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics",set_buttonMode:"set_buttonMode",get_buttonMode:"get_buttonMode"})
});
var Main = function() {
	var _gthis = this;
	openfl_display_Sprite.call(this);
	this.stage.set_mouseLock(true);
	texter_general_markdown_MarkdownVisualizer.visualConfig.font = "_typewriter";
	texter_general_markdown_MarkdownVisualizer.visualConfig.set_darkMode(true);
	this.input = new openfl_text_TextField();
	this.input.set_defaultTextFormat(texter_general_markdown_MarkdownVisualizer.get_markdownTextFormat());
	this.input.set_background(true);
	this.input.set_backgroundColor(1052688);
	this.input.set_height(320);
	this.input.set_width(608);
	this.input.set_type(1);
	this.input.set_multiline(true);
	this.input.set_wordWrap(false);
	this.input.set_text("define welcome = \" world\"\nprint(\"hello\" + welcome)\nprint({define i = \"Hi!\", (i + \" Whats up?\")})");
	this.input.set_x(38);
	this.input.set_y(0);
	this.lines = new openfl_text_TextField();
	var linesF = texter_general_markdown_MarkdownVisualizer.get_markdownTextFormat();
	linesF.align = 4;
	linesF.color = 3618615;
	this.lines.set_defaultTextFormat(linesF);
	this.lines.set_multiline(true);
	this.lines.set_wordWrap(false);
	this.lines.set_background(true);
	this.lines.set_backgroundColor(1052688);
	this.lines.set_height(320);
	this.lines.set_width(40);
	this.lines.set_x(0);
	this.lines.set_y(0);
	this.lines.set_selectable(false);
	this.lines.set_mouseWheelEnabled(false);
	this.input.addEventListener("change",function(e) {
		try {
			little_Little.run(_gthis.input.get_text());
			_gthis.output.set_text(TextTools.replaceFirst(little_Little.runtime.stdout.output,"\n",""));
			_gthis.input.setTextFormat(texter_general_markdown_MarkdownVisualizer.get_markdownTextFormat(),0,_gthis.input.get_text().length);
			var coloring = _gthis.parseLittle(_gthis.input.get_text());
			var _g = 0;
			while(_g < coloring.length) {
				var i = coloring[_g];
				++_g;
				_gthis.input.setTextFormat(new openfl_text_TextFormat("_typewriter",null,i.color),i.start,i.end);
			}
			var lineCount = TextTools.countOccurrencesOf(_gthis.input.get_text(),"\n");
			var status = TextTools.countOccurrencesOf(_gthis.lines.get_text(),"\n");
			var _g = status;
			var _g1 = lineCount + 1;
			while(_g < _g1) {
				var i = _g++;
				var fh = _gthis.lines;
				fh.set_text(fh.get_text() + ("" + i + "|\n"));
			}
			var _g = lineCount + 1;
			var _g1 = status;
			while(_g < _g1) {
				var i = _g++;
				_gthis.lines.set_text(TextTools.replaceLast(_gthis.lines.get_text(),"" + i + "|\n",""));
			}
			_gthis.lines.set_scrollV(_gthis.input.get_scrollV());
		} catch( _g ) {
			var e = haxe_Exception.caught(_g);
			haxe_Log.trace(e.details(),{ fileName : "Source/Main.hx", lineNumber : 77, className : "Main", methodName : "new"});
		}
	});
	this.input.addEventListener("scroll",function(e) {
		_gthis.lines.set_scrollV(_gthis.input.get_scrollV());
	});
	this.output = new openfl_text_TextField();
	this.output.set_defaultTextFormat(texter_general_markdown_MarkdownVisualizer.get_markdownTextFormat());
	this.output.set_background(true);
	this.output.set_backgroundColor(1052688);
	this.output.set_height(340);
	this.output.set_width(646);
	this.output.set_multiline(true);
	this.output.set_wordWrap(true);
	this.output.set_x(0);
	this.output.set_y(20 + this.input.get_height());
	this.addChild(this.input);
	this.addChild(this.lines);
	this.addChild(this.output);
	this.input.dispatchEvent(new openfl_events_Event("change"));
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.__super__ = openfl_display_Sprite;
Main.prototype = $extend(openfl_display_Sprite.prototype,{
	input: null
	,lines: null
	,output: null
	,textVisuals: function() {
		var text = new openfl_text_TextField();
		text.set_background(true);
		text.set_backgroundColor(1052688);
		text.set_textColor(16777215);
		text.set_height(365);
		text.set_width(608);
		return text;
	}
	,parseLittle: function(text) {
		var interp = [];
		var indexOfIdent = TextTools.indexesFromEReg(text,new EReg("\\w+",""));
		var indexOfBlue = TextTools.indexesFromEReg(text,new EReg("\\b(" + little_Little.keywords.VARIABLE_DECLARATION + "|" + little_Little.keywords.FUNCTION_DECLARATION + "|" + little_Little.keywords.TRUE_VALUE + "|" + little_Little.keywords.FALSE_VALUE + "|" + little_Little.keywords.NULL_VALUE + "|" + little_Little.keywords.FOR_LOOP_FROM + "|" + little_Little.keywords.FOR_LOOP_TO + "|" + little_Little.keywords.FOR_LOOP_JUMP + ")\\b","m"));
		var indexOfPurple = TextTools.indexesOfSubs(text,little_Little.keywords.CONDITION_TYPES.concat([little_Little.keywords.ELSE]));
		var indexOfFunctionName = TextTools.indexesFromEReg(text,new EReg("([a-zA-Z0-9_]+)\\(","m"));
		var indexOfClassName = TextTools.indexesFromEReg(text,new EReg("(?::|\\(| |\n|^)[A-Z][a-zA-Z]+","m"));
		var indexOfString = TextTools.indexesFromEReg(text,new EReg("\"[^\"]*\"|'[^']*'",""));
		var indexOfNumbers = TextTools.indexesOfSubs(text,["0","1","2","3","4","5","6","7","8","9"]);
		var indexOfComments = TextTools.indexesFromEReg(text,new EReg("//.*","m"));
		var _g = 0;
		while(_g < indexOfIdent.length) {
			var i = indexOfIdent[_g];
			++_g;
			interp.push({ color : 10280190, start : i.startIndex, end : i.endIndex});
		}
		var _g = 0;
		while(_g < indexOfFunctionName.length) {
			var i = indexOfFunctionName[_g];
			++_g;
			interp.push({ color : 14474410, start : i.startIndex, end : i.endIndex - 1});
		}
		var _g = 0;
		while(_g < indexOfBlue.length) {
			var i = indexOfBlue[_g];
			++_g;
			interp.push({ color : 5676246, start : i.startIndex, end : i.endIndex});
		}
		var _g = 0;
		while(_g < indexOfClassName.length) {
			var i = indexOfClassName[_g];
			++_g;
			interp.push({ color : 4508080, start : i.startIndex, end : i.endIndex});
		}
		var _g = 0;
		while(_g < indexOfPurple.length) {
			var i = indexOfPurple[_g];
			++_g;
			interp.push({ color : 12945088, start : i.startIndex, end : i.endIndex});
		}
		var _g = 0;
		while(_g < indexOfNumbers.length) {
			var i = indexOfNumbers[_g];
			++_g;
			interp.push({ color : 11914920, start : i.startIndex, end : i.endIndex});
		}
		var _g = 0;
		while(_g < indexOfString.length) {
			var i = indexOfString[_g];
			++_g;
			interp.push({ color : 16735744, start : i.startIndex, end : i.endIndex});
		}
		var _g = 0;
		while(_g < indexOfComments.length) {
			var i = indexOfComments[_g];
			++_g;
			interp.push({ color : 6184542, start : i.startIndex, end : i.endIndex});
		}
		return interp;
	}
	,__class__: Main
});
var DocumentClass = function(current) {
	current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = "DocumentClass";
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		do {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
		} while(this.r.global);
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var IOrderedMap = function() { };
$hxClasses["IOrderedMap"] = IOrderedMap;
IOrderedMap.__name__ = "IOrderedMap";
IOrderedMap.__isInterface__ = true;
IOrderedMap.__interfaces__ = [haxe_IMap];
IOrderedMap.prototype = {
	get_length: null
	,get_orderedKeys: null
	,get_innerMap: null
	,get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,copy: null
	,toString: null
	,orderedKeys: null
	,innerMap: null
	,keysCopy: null
	,clear: null
	,__class__: IOrderedMap
	,__properties__: {get_innerMap:"get_innerMap",get_orderedKeys:"get_orderedKeys",get_length:"get_length"}
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = "ManifestResources";
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	ManifestResources.rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		ManifestResources.rootPath = Reflect.field(config,"rootPath");
		if(!StringTools.endsWith(ManifestResources.rootPath,"/")) {
			ManifestResources.rootPath += "/";
		}
	}
	if(ManifestResources.rootPath == null) {
		ManifestResources.rootPath = "./";
	}
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$assets_$texter_$mathtextfield_$math_$bold_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$assets_$texter_$mathtextfield_$math_$regular_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$assets_$texter_$texttools_$sans_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$assets_$texter_$texttools_$serif_$ttf);
	var bundle;
	var data = "{\"name\":null,\"assets\":\"aoy4:pathy54:assets%2Ftexter%2FDynamicTextField%2FRotationJoint.pngy4:sizei498y4:typey5:IMAGEy2:idR1y7:preloadtgoR2i285096R3y4:FONTy9:classNamey50:__ASSET__assets_texter_mathtextfield_math_bold_ttfR5y47:assets%2Ftexter%2FMathTextField%2Fmath-bold.ttfR6tgoR2i291936R3R7R8y53:__ASSET__assets_texter_mathtextfield_math_regular_ttfR5y50:assets%2Ftexter%2FMathTextField%2Fmath-regular.ttfR6tgoR2i129796R3R7R8y41:__ASSET__assets_texter_texttools_sans_ttfR5y38:assets%2Ftexter%2FTextTools%2Fsans.ttfR6tgoR2i454852R3R7R8y42:__ASSET__assets_texter_texttools_serif_ttfR5y39:assets%2Ftexter%2FTextTools%2Fserif.ttfR6tgh\",\"rootPath\":null,\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	var manifest = lime_utils_AssetManifest.parse(data,ManifestResources.rootPath);
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(!this.__init) {
		if(this.ascender == undefined) {
			this.ascender = 0;
		}
		if(this.descender == undefined) {
			this.descender = 0;
		}
		if(this.height == undefined) {
			this.height = 0;
		}
		if(this.numGlyphs == undefined) {
			this.numGlyphs = 0;
		}
		if(this.underlinePosition == undefined) {
			this.underlinePosition = 0;
		}
		if(this.underlineThickness == undefined) {
			this.underlineThickness = 0;
		}
		if(this.unitsPerEM == undefined) {
			this.unitsPerEM = 0;
		}
		if(this.__fontID != null) {
			if(lime_utils_Assets.isLocal(this.__fontID)) {
				this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
			}
		} else if(this.__fontPath != null) {
			this.__fromFile(this.__fontPath);
		}
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = "lime.text.Font";
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
};
lime_text_Font.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$text_$Font();
	return request.load(path).then(function(font) {
		if(font != null) {
			return lime_app_Future.withValue(font);
		} else {
			return lime_app_Future.withError("");
		}
	});
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontID: null
	,__fontPath: null
	,__init: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) {
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		}
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__copyFrom: function(other) {
		if(other != null) {
			this.ascender = other.ascender;
			this.descender = other.descender;
			this.height = other.height;
			this.name = other.name;
			this.numGlyphs = other.numGlyphs;
			this.src = other.src;
			this.underlinePosition = other.underlinePosition;
			this.underlineThickness = other.underlineThickness;
			this.unitsPerEM = other.unitsPerEM;
			this.__fontID = other.__fontID;
			this.__fontPath = other.__fontPath;
			this.__init = true;
		}
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__initializeSource: function() {
		this.__init = true;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var userAgent = $global.navigator.userAgent.toLowerCase();
		var isSafari = userAgent.indexOf(" safari/") >= 0 && userAgent.indexOf(" chrome/") < 0;
		var isUIWebView = new EReg("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)","i").match(userAgent);
		if(!isSafari && !isUIWebView && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 515, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				loaded = node1.offsetWidth != width1 || node2.offsetWidth != width2;
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 550, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__setSize: function(size) {
	}
	,__class__: lime_text_Font
};
var _$_$ASSET_$_$assets_$texter_$mathtextfield_$math_$bold_$ttf = $hx_exports["__ASSET__assets_texter_mathtextfield_math_bold_ttf"] = function() {
	this.ascender = 1907;
	this.descender = -849;
	this.height = 2756;
	this.numGlyphs = 682;
	this.underlinePosition = -307;
	this.underlineThickness = 102;
	this.unitsPerEM = 2048;
	this.name = "CMU Serif BoldItalic";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__assets_texter_mathtextfield_math_bold_ttf"] = _$_$ASSET_$_$assets_$texter_$mathtextfield_$math_$bold_$ttf;
_$_$ASSET_$_$assets_$texter_$mathtextfield_$math_$bold_$ttf.__name__ = "__ASSET__assets_texter_mathtextfield_math_bold_ttf";
_$_$ASSET_$_$assets_$texter_$mathtextfield_$math_$bold_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$texter_$mathtextfield_$math_$bold_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$texter_$mathtextfield_$math_$bold_$ttf
});
var _$_$ASSET_$_$assets_$texter_$mathtextfield_$math_$regular_$ttf = $hx_exports["__ASSET__assets_texter_mathtextfield_math_regular_ttf"] = function() {
	this.ascender = 1905;
	this.descender = -765;
	this.height = 2670;
	this.numGlyphs = 682;
	this.underlinePosition = -307;
	this.underlineThickness = 102;
	this.unitsPerEM = 2048;
	this.name = "CMU Classical Serif Italic";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__assets_texter_mathtextfield_math_regular_ttf"] = _$_$ASSET_$_$assets_$texter_$mathtextfield_$math_$regular_$ttf;
_$_$ASSET_$_$assets_$texter_$mathtextfield_$math_$regular_$ttf.__name__ = "__ASSET__assets_texter_mathtextfield_math_regular_ttf";
_$_$ASSET_$_$assets_$texter_$mathtextfield_$math_$regular_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$texter_$mathtextfield_$math_$regular_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$texter_$mathtextfield_$math_$regular_$ttf
});
var _$_$ASSET_$_$assets_$texter_$texttools_$sans_$ttf = $hx_exports["__ASSET__assets_texter_texttools_sans_ttf"] = function() {
	this.ascender = 2189;
	this.descender = -600;
	this.height = 2789;
	this.numGlyphs = 1140;
	this.underlinePosition = -125;
	this.underlineThickness = 50;
	this.unitsPerEM = 2048;
	this.name = "Open Sans Regular";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__assets_texter_texttools_sans_ttf"] = _$_$ASSET_$_$assets_$texter_$texttools_$sans_$ttf;
_$_$ASSET_$_$assets_$texter_$texttools_$sans_$ttf.__name__ = "__ASSET__assets_texter_texttools_sans_ttf";
_$_$ASSET_$_$assets_$texter_$texttools_$sans_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$texter_$texttools_$sans_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$texter_$texttools_$sans_$ttf
});
var _$_$ASSET_$_$assets_$texter_$texttools_$serif_$ttf = $hx_exports["__ASSET__assets_texter_texttools_serif_ttf"] = function() {
	this.ascender = 1825;
	this.descender = -443;
	this.height = 2355;
	this.numGlyphs = 2503;
	this.underlinePosition = -273;
	this.underlineThickness = 100;
	this.unitsPerEM = 2048;
	this.name = "Tinos Regular";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__assets_texter_texttools_serif_ttf"] = _$_$ASSET_$_$assets_$texter_$texttools_$serif_$ttf;
_$_$ASSET_$_$assets_$texter_$texttools_$serif_$ttf.__name__ = "__ASSET__assets_texter_texttools_serif_ttf";
_$_$ASSET_$_$assets_$texter_$texttools_$serif_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$texter_$texttools_$serif_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$texter_$texttools_$serif_$ttf
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = "openfl.text.Font";
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils_ByteArray.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.loadFromBytes = function(bytes) {
	return lime_text_Font.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromFile = function(path) {
	return lime_text_Font.loadFromFile(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromName = function(path) {
	return lime_text_Font.loadFromName(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.registerFont = function(font) {
	var instance = null;
	if(js_Boot.getClass(font) == null) {
		instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	} else {
		instance = js_Boot.__cast(font , openfl_text_Font);
	}
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
		openfl_text_Font.__fontByName.h[instance.name] = instance;
	}
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,__initialized: null
	,__fromLimeFont: function(font) {
		this.__copyFrom(font);
	}
	,__initialize: function() {
		return this.__initialized;
	}
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: {set_fontName:"set_fontName",get_fontName:"get_fontName"}
});
var _$_$ASSET_$_$OPENFL_$_$assets_$texter_$mathtextfield_$math_$bold_$ttf = $hx_exports["__ASSET__OPENFL__assets_texter_mathtextfield_math_bold_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$assets_$texter_$mathtextfield_$math_$bold_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__assets_texter_mathtextfield_math_bold_ttf"] = _$_$ASSET_$_$OPENFL_$_$assets_$texter_$mathtextfield_$math_$bold_$ttf;
_$_$ASSET_$_$OPENFL_$_$assets_$texter_$mathtextfield_$math_$bold_$ttf.__name__ = "__ASSET__OPENFL__assets_texter_mathtextfield_math_bold_ttf";
_$_$ASSET_$_$OPENFL_$_$assets_$texter_$mathtextfield_$math_$bold_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$assets_$texter_$mathtextfield_$math_$bold_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$assets_$texter_$mathtextfield_$math_$bold_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$assets_$texter_$mathtextfield_$math_$regular_$ttf = $hx_exports["__ASSET__OPENFL__assets_texter_mathtextfield_math_regular_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$assets_$texter_$mathtextfield_$math_$regular_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__assets_texter_mathtextfield_math_regular_ttf"] = _$_$ASSET_$_$OPENFL_$_$assets_$texter_$mathtextfield_$math_$regular_$ttf;
_$_$ASSET_$_$OPENFL_$_$assets_$texter_$mathtextfield_$math_$regular_$ttf.__name__ = "__ASSET__OPENFL__assets_texter_mathtextfield_math_regular_ttf";
_$_$ASSET_$_$OPENFL_$_$assets_$texter_$mathtextfield_$math_$regular_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$assets_$texter_$mathtextfield_$math_$regular_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$assets_$texter_$mathtextfield_$math_$regular_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$assets_$texter_$texttools_$sans_$ttf = $hx_exports["__ASSET__OPENFL__assets_texter_texttools_sans_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$assets_$texter_$texttools_$sans_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__assets_texter_texttools_sans_ttf"] = _$_$ASSET_$_$OPENFL_$_$assets_$texter_$texttools_$sans_$ttf;
_$_$ASSET_$_$OPENFL_$_$assets_$texter_$texttools_$sans_$ttf.__name__ = "__ASSET__OPENFL__assets_texter_texttools_sans_ttf";
_$_$ASSET_$_$OPENFL_$_$assets_$texter_$texttools_$sans_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$assets_$texter_$texttools_$sans_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$assets_$texter_$texttools_$sans_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$assets_$texter_$texttools_$serif_$ttf = $hx_exports["__ASSET__OPENFL__assets_texter_texttools_serif_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$assets_$texter_$texttools_$serif_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__assets_texter_texttools_serif_ttf"] = _$_$ASSET_$_$OPENFL_$_$assets_$texter_$texttools_$serif_$ttf;
_$_$ASSET_$_$OPENFL_$_$assets_$texter_$texttools_$serif_$ttf.__name__ = "__ASSET__OPENFL__assets_texter_texttools_serif_ttf";
_$_$ASSET_$_$OPENFL_$_$assets_$texter_$texttools_$serif_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$assets_$texter_$texttools_$serif_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$assets_$texter_$texttools_$serif_$ttf
});
Math.__name__ = "Math";
var OrderedEnumValueMap = {};
OrderedEnumValueMap._new = function() {
	return new OrderedEnumValueMapImpl();
};
OrderedEnumValueMap._get = function(this1,key) {
	return this1._innerMap.get(key);
};
OrderedEnumValueMap._set = function(this1,key,value) {
	this1.set(key,value);
	return value;
};
var OrderedEnumValueMapImpl = function() {
	this._innerMap = new haxe_ds_EnumValueMap();
	this._orderedKeys = [];
};
$hxClasses["OrderedEnumValueMapImpl"] = OrderedEnumValueMapImpl;
OrderedEnumValueMapImpl.__name__ = "OrderedEnumValueMapImpl";
OrderedEnumValueMapImpl.__interfaces__ = [IOrderedMap];
OrderedEnumValueMapImpl.prototype = {
	_orderedKeys: null
	,_innerMap: null
	,set: function(key,value) {
		if(!this._innerMap.exists(key)) {
			this._orderedKeys.push(key);
		}
		this._innerMap.set(key,value);
	}
	,get: function(key) {
		return this._innerMap.get(key);
	}
	,exists: function(key) {
		return this._innerMap.exists(key);
	}
	,remove: function(key) {
		var removed = this._innerMap.remove(key);
		if(removed) {
			HxOverrides.remove(this._orderedKeys,key);
		}
		return removed;
	}
	,keys: function() {
		return new haxe_iterators_ArrayIterator(this._orderedKeys);
	}
	,iterator: function() {
		return new OrderedEnumValueMapIterator(this);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var clone = new OrderedEnumValueMapImpl();
		clone._orderedKeys = this._orderedKeys.slice();
		clone._innerMap = this._innerMap.copy();
		return clone;
	}
	,get_length: function() {
		return this._orderedKeys.length;
	}
	,orderedKeys: null
	,get_orderedKeys: function() {
		return this._orderedKeys;
	}
	,innerMap: null
	,get_innerMap: function() {
		return this._innerMap;
	}
	,keysCopy: function() {
		return this._orderedKeys.slice();
	}
	,clear: function() {
		this._orderedKeys = [];
		this._innerMap = new haxe_ds_EnumValueMap();
	}
	,toString: function() {
		var k;
		var len = this._orderedKeys.length;
		var str = "[";
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			k = this._orderedKeys[i];
			str += Std.string(k) + " => " + Std.string(this._innerMap.get(k)) + (i != len - 1 ? ", " : "");
		}
		return str + "]";
	}
	,__class__: OrderedEnumValueMapImpl
	,__properties__: {get_innerMap:"get_innerMap",get_orderedKeys:"get_orderedKeys",get_length:"get_length"}
};
var OrderedEnumValueMapIterator = function(omap) {
	this.index = 0;
	this.map = omap;
};
$hxClasses["OrderedEnumValueMapIterator"] = OrderedEnumValueMapIterator;
OrderedEnumValueMapIterator.__name__ = "OrderedEnumValueMapIterator";
OrderedEnumValueMapIterator.prototype = {
	map: null
	,index: null
	,hasNext: function() {
		return this.index < this.map._orderedKeys.length;
	}
	,next: function() {
		return this.map._innerMap.get(this.map._orderedKeys[this.index++]);
	}
	,__class__: OrderedEnumValueMapIterator
};
var OrderedIntMap = {};
OrderedIntMap._new = function() {
	return new OrderedIntMapImpl();
};
OrderedIntMap._get = function(this1,key) {
	return this1._innerMap.h[key];
};
OrderedIntMap._set = function(this1,key,value) {
	this1.set(key,value);
	return value;
};
var OrderedIntMapImpl = function() {
	this._innerMap = new haxe_ds_IntMap();
	this._orderedKeys = [];
};
$hxClasses["OrderedIntMapImpl"] = OrderedIntMapImpl;
OrderedIntMapImpl.__name__ = "OrderedIntMapImpl";
OrderedIntMapImpl.__interfaces__ = [IOrderedMap];
OrderedIntMapImpl.prototype = {
	_orderedKeys: null
	,_innerMap: null
	,set: function(key,value) {
		if(!this._innerMap.h.hasOwnProperty(key)) {
			this._orderedKeys.push(key);
		}
		this._innerMap.h[key] = value;
	}
	,get: function(key) {
		return this._innerMap.h[key];
	}
	,exists: function(key) {
		return this._innerMap.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		var removed = this._innerMap.remove(key);
		if(removed) {
			HxOverrides.remove(this._orderedKeys,key);
		}
		return removed;
	}
	,keys: function() {
		return new haxe_iterators_ArrayIterator(this._orderedKeys);
	}
	,iterator: function() {
		return new OrderedIntMapIterator(this);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var clone = new OrderedIntMapImpl();
		clone._orderedKeys = this._orderedKeys.slice();
		clone._innerMap = this._innerMap.copy();
		return clone;
	}
	,get_length: function() {
		return this._orderedKeys.length;
	}
	,get_orderedKeys: function() {
		return this._orderedKeys;
	}
	,innerMap: null
	,get_innerMap: function() {
		return this._innerMap;
	}
	,keysCopy: function() {
		return this._orderedKeys.slice();
	}
	,clear: function() {
		this._orderedKeys = [];
		this._innerMap = new haxe_ds_IntMap();
	}
	,toString: function() {
		var k;
		var len = this._orderedKeys.length;
		var str = "[";
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			k = this._orderedKeys[i];
			str += k + " => " + Std.string(this._innerMap.h[k]) + (i != len - 1 ? ", " : "");
		}
		return str + "]";
	}
	,__class__: OrderedIntMapImpl
	,__properties__: {get_innerMap:"get_innerMap",get_orderedKeys:"get_orderedKeys",get_length:"get_length"}
};
var OrderedIntMapIterator = function(omap) {
	this.index = 0;
	this.map = omap;
};
$hxClasses["OrderedIntMapIterator"] = OrderedIntMapIterator;
OrderedIntMapIterator.__name__ = "OrderedIntMapIterator";
OrderedIntMapIterator.prototype = {
	map: null
	,index: null
	,hasNext: function() {
		return this.index < this.map._orderedKeys.length;
	}
	,next: function() {
		return this.map._innerMap.h[this.map._orderedKeys[this.index++]];
	}
	,__class__: OrderedIntMapIterator
};
var OrderedMap = {};
OrderedMap.__properties__ = {get_innerMap:"get_innerMap",get_orderedKeys:"get_orderedKeys",get_length:"get_length"};
OrderedMap.set = function(this1,key,value) {
	this1.set(key,value);
};
OrderedMap.get = function(this1,key) {
	return this1.get(key);
};
OrderedMap.exists = function(this1,key) {
	return this1.exists(key);
};
OrderedMap.remove = function(this1,key) {
	return this1.remove(key);
};
OrderedMap.keys = function(this1) {
	return this1.keys();
};
OrderedMap.iterator = function(this1) {
	return this1.iterator();
};
OrderedMap.keyValueIterator = function(this1) {
	return this1.keyValueIterator();
};
OrderedMap.copy = function(this1) {
	return this1.copy();
};
OrderedMap.get_length = function(this1) {
	return this1.get_length();
};
OrderedMap.get_orderedKeys = function(this1) {
	return this1.get_orderedKeys();
};
OrderedMap.get_innerMap = function(this1) {
	return this1.get_innerMap();
};
OrderedMap.keysCopy = function(this1) {
	return this1.keysCopy();
};
OrderedMap.clear = function(this1) {
	this1.clear();
};
OrderedMap.toString = function(this1) {
	return this1.toString();
};
OrderedMap.arrayWrite = function(this1,k,v) {
	this1.set(k,v);
	return v;
};
OrderedMap.toOrderedStringMap = function(t) {
	return new OrderedStringMapImpl();
};
OrderedMap.toOrderedIntMap = function(t) {
	return new OrderedIntMapImpl();
};
OrderedMap.toOrderedEnumValueMap = function(t) {
	return new OrderedEnumValueMapImpl();
};
OrderedMap.toOrderedObjectMap = function(t) {
	return new OrderedObjectMapImpl();
};
OrderedMap.fromOrderedStringMap = function(map) {
	return map;
};
OrderedMap.fromOrderedIntMap = function(map) {
	return map;
};
OrderedMap.fromOrderedObjectMap = function(map) {
	return map;
};
var OrderedObjectMap = {};
OrderedObjectMap._new = function() {
	return new OrderedObjectMapImpl();
};
OrderedObjectMap._get = function(this1,key) {
	return this1._innerMap.h[key.__id__];
};
OrderedObjectMap._set = function(this1,key,value) {
	this1.set(key,value);
	return value;
};
var OrderedObjectMapImpl = function() {
	this._innerMap = new haxe_ds_ObjectMap();
	this._orderedKeys = [];
};
$hxClasses["OrderedObjectMapImpl"] = OrderedObjectMapImpl;
OrderedObjectMapImpl.__name__ = "OrderedObjectMapImpl";
OrderedObjectMapImpl.__interfaces__ = [IOrderedMap];
OrderedObjectMapImpl.prototype = {
	_orderedKeys: null
	,_innerMap: null
	,set: function(key,value) {
		if(this._innerMap.h.__keys__[key.__id__] == null) {
			this._orderedKeys.push(key);
		}
		this._innerMap.set(key,value);
	}
	,get: function(key) {
		return this._innerMap.h[key.__id__];
	}
	,exists: function(key) {
		return this._innerMap.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var removed = this._innerMap.remove(key);
		if(removed) {
			HxOverrides.remove(this._orderedKeys,key);
		}
		return removed;
	}
	,keys: function() {
		return new haxe_iterators_ArrayIterator(this._orderedKeys);
	}
	,iterator: function() {
		return new OrderedObjectMapIterator(this);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var clone = new OrderedObjectMapImpl();
		clone._orderedKeys = this._orderedKeys.slice();
		clone._innerMap = this._innerMap.copy();
		return clone;
	}
	,get_length: function() {
		return this._orderedKeys.length;
	}
	,orderedKeys: null
	,get_orderedKeys: function() {
		return this._orderedKeys;
	}
	,innerMap: null
	,get_innerMap: function() {
		return this._innerMap;
	}
	,keysCopy: function() {
		return this._orderedKeys.slice();
	}
	,clear: function() {
		this._orderedKeys = [];
		this._innerMap = new haxe_ds_ObjectMap();
	}
	,toString: function() {
		var k;
		var len = this._orderedKeys.length;
		var str = "[";
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			k = this._orderedKeys[i];
			str += Std.string(k) + " => " + Std.string(this._innerMap.h[k.__id__]) + (i != len - 1 ? ", " : "");
		}
		return str + "]";
	}
	,__class__: OrderedObjectMapImpl
	,__properties__: {get_innerMap:"get_innerMap",get_orderedKeys:"get_orderedKeys",get_length:"get_length"}
};
var OrderedObjectMapIterator = function(omap) {
	this.index = 0;
	this.map = omap;
};
$hxClasses["OrderedObjectMapIterator"] = OrderedObjectMapIterator;
OrderedObjectMapIterator.__name__ = "OrderedObjectMapIterator";
OrderedObjectMapIterator.prototype = {
	map: null
	,index: null
	,hasNext: function() {
		return this.index < this.map._orderedKeys.length;
	}
	,next: function() {
		return this.map._innerMap.h[this.map._orderedKeys[this.index++].__id__];
	}
	,__class__: OrderedObjectMapIterator
};
var OrderedStringMap = {};
OrderedStringMap._new = function() {
	return new OrderedStringMapImpl();
};
OrderedStringMap._get = function(this1,key) {
	return this1._innerMap.h[key];
};
OrderedStringMap._set = function(this1,key,value) {
	this1.set(key,value);
	return value;
};
var OrderedStringMapImpl = function() {
	this._innerMap = new haxe_ds_StringMap();
	this._orderedKeys = [];
};
$hxClasses["OrderedStringMapImpl"] = OrderedStringMapImpl;
OrderedStringMapImpl.__name__ = "OrderedStringMapImpl";
OrderedStringMapImpl.__interfaces__ = [IOrderedMap];
OrderedStringMapImpl.prototype = {
	_orderedKeys: null
	,_innerMap: null
	,set: function(key,value) {
		if(!Object.prototype.hasOwnProperty.call(this._innerMap.h,key)) {
			this._orderedKeys.push(key);
		}
		this._innerMap.h[key] = value;
	}
	,get: function(key) {
		return this._innerMap.h[key];
	}
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this._innerMap.h,key);
	}
	,remove: function(key) {
		var _this = this._innerMap;
		var removed;
		if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
			delete(_this.h[key]);
			removed = true;
		} else {
			removed = false;
		}
		if(removed) {
			HxOverrides.remove(this._orderedKeys,key);
		}
		return removed;
	}
	,keys: function() {
		return new haxe_iterators_ArrayIterator(this._orderedKeys);
	}
	,iterator: function() {
		return new OrderedStringMapIterator(this);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var clone = new OrderedStringMapImpl();
		clone._orderedKeys = this._orderedKeys.slice();
		clone._innerMap = haxe_ds_StringMap.createCopy(this._innerMap.h);
		return clone;
	}
	,get_length: function() {
		return this._orderedKeys.length;
	}
	,orderedKeys: null
	,get_orderedKeys: function() {
		return this._orderedKeys;
	}
	,innerMap: null
	,get_innerMap: function() {
		return this._innerMap;
	}
	,keysCopy: function() {
		return this._orderedKeys.slice();
	}
	,clear: function() {
		this._orderedKeys = [];
		this._innerMap = new haxe_ds_StringMap();
	}
	,toString: function() {
		var k;
		var len = this._orderedKeys.length;
		var str = "[";
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			k = this._orderedKeys[i];
			str += k + " => " + Std.string(this._innerMap.h[k]) + (i != len - 1 ? ", " : "");
		}
		return str + "]";
	}
	,__class__: OrderedStringMapImpl
	,__properties__: {get_innerMap:"get_innerMap",get_orderedKeys:"get_orderedKeys",get_length:"get_length"}
};
var OrderedStringMapIterator = function(omap) {
	this.index = 0;
	this.map = omap;
};
$hxClasses["OrderedStringMapIterator"] = OrderedStringMapIterator;
OrderedStringMapIterator.__name__ = "OrderedStringMapIterator";
OrderedStringMapIterator.prototype = {
	map: null
	,index: null
	,hasNext: function() {
		return this.index < this.map._orderedKeys.length;
	}
	,next: function() {
		return this.map._innerMap.h[this.map._orderedKeys[this.index++]];
	}
	,__class__: OrderedStringMapIterator
};
var ReadOnlyMap = {};
ReadOnlyMap.get = function(this1,k) {
	return this1.get(k);
};
ReadOnlyMap.arrayWrite = function(this1,k,v) {
	throw haxe_Exception.thrown("Cannot modify a ReadOnlyMap.");
};
ReadOnlyMap.set = function(this1,k,v) {
	throw haxe_Exception.thrown("Cannot modify a ReadOnlyMap.");
};
ReadOnlyMap.remove = function(this1,k) {
	throw haxe_Exception.thrown("Cannot modify a ReadOnlyMap.");
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var _$String_String_$Impl_$ = function() { };
$hxClasses["_String.String_Impl_"] = _$String_String_$Impl_$;
_$String_String_$Impl_$.__name__ = "_String.String_Impl_";
_$String_String_$Impl_$.fromCharCode = function(code) {
	return String.fromCodePoint(code);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var _$TextTools_MultilangFonts = function() {
	this.serif = "assets/texter/TextTools/serif.ttf";
	this.sans = "assets/texter/TextTools/sans.ttf";
};
$hxClasses["_TextTools.MultilangFonts"] = _$TextTools_MultilangFonts;
_$TextTools_MultilangFonts.__name__ = "_TextTools.MultilangFonts";
_$TextTools_MultilangFonts.prototype = {
	sans: null
	,serif: null
	,__class__: _$TextTools_MultilangFonts
};
var TextTools = function() { };
$hxClasses["TextTools"] = TextTools;
TextTools.__name__ = "TextTools";
TextTools.replaceLast = function(string,replace,by) {
	var place = string.lastIndexOf(replace);
	var result = string.substring(0,place) + by + string.substring(place + replace.length);
	return result;
};
TextTools.replaceFirst = function(string,replace,by) {
	var place = string.indexOf(replace);
	var result = string.substring(0,place) + by + string.substring(place + replace.length);
	return result;
};
TextTools.splitOnFirst = function(string,delimiter) {
	var place = string.indexOf(delimiter);
	var result = [];
	result.push(string.substring(0,place));
	result.push(string.substring(place + delimiter.length));
	return result;
};
TextTools.splitOnLast = function(string,delimiter) {
	var place = string.lastIndexOf(delimiter);
	var result = [];
	result.push(string.substring(0,place));
	result.push(string.substring(place + delimiter.length));
	return result;
};
TextTools.splitOnParagraph = function(text) {
	return new EReg("<p>|</p>|\n\n|\r\n\r\n","g").split(text);
};
TextTools.filter = function(text,filter) {
	if(((filter) instanceof EReg)) {
		var pattern = filter;
		text = text.replace(pattern.r,"");
		return text;
	}
	var patternType = filter;
	if(TextTools.replaceFirst(text,"/","") != patternType) {
		var regexDetector = new EReg("^~?/(.*)/(.*)$","s");
		regexDetector.match(patternType);
		return filter(text,new EReg(regexDetector.matched(1),regexDetector.matched(2)));
	}
	switch(patternType.toLowerCase()) {
	case "alpha":
		return filter(text,new EReg("[^a-zA-Z]","g"));
	case "alphanumeric":
		return filter(text,new EReg("[^a-zA-Z0-9]","g"));
	case "numeric":
		return filter(text,new EReg("[^0-9]","g"));
	}
	return text;
};
TextTools.indexesOf = function(string,sub) {
	var indexArray = [];
	var removedLength = 0;
	var index = string.indexOf(sub);
	while(index != -1) {
		indexArray.push({ startIndex : index + removedLength, endIndex : index + sub.length + removedLength - 1});
		removedLength += sub.length;
		string = string.substring(0,index) + string.substring(index + sub.length,string.length);
		index = string.indexOf(sub);
	}
	return indexArray;
};
TextTools.indexesOfSubs = function(string,subs) {
	var indexArray = [];
	var orgString = string;
	var _g = 0;
	while(_g < subs.length) {
		var sub = subs[_g];
		++_g;
		var removedLength = 0;
		var index = string.indexOf(sub);
		while(index != -1) {
			indexArray.push({ startIndex : index + removedLength, endIndex : index + sub.length + removedLength});
			removedLength += sub.length;
			string = string.substring(0,index) + string.substring(index + sub.length,string.length);
			index = string.indexOf(sub);
		}
		string = orgString;
	}
	return indexArray;
};
TextTools.indexesFromArray = function(string,subs) {
	return TextTools.indexesOfSubs(string,subs);
};
TextTools.indexesFromEReg = function(string,ereg) {
	var indexArray = [];
	while(ereg.match(string)) {
		var info = ereg.matchedPos();
		var by = TextTools.multiply("⨔",info.len);
		string = string.replace(ereg.r,by);
		indexArray.push({ startIndex : info.pos, endIndex : info.pos + info.len});
	}
	return indexArray;
};
TextTools.multiply = function(string,times) {
	var stringcopy = string;
	if(times <= 0) {
		return "";
	}
	while(--times > 0) string += stringcopy;
	return string;
};
TextTools.subtract = function(string,by) {
	return TextTools.replaceLast(string,by,"");
};
TextTools.loremIpsum = function(paragraphs,length) {
	if(length == null) {
		length = -1;
	}
	if(paragraphs == null) {
		paragraphs = 1;
	}
	var text = StringTools.replace(TextTools.loremIpsumText,"\t","");
	var loremArray = new EReg("<p>|</p>|\n\n|\r\n\r\n","g").split(text);
	var loremText = loremArray.join("\n\n");
	if(paragraphs > loremArray.length) {
		var multiplier = Math.ceil(paragraphs / loremArray.length);
		loremText = TextTools.multiply(TextTools.loremIpsumText,multiplier);
		loremArray = new EReg("<p>|</p>|\n\n|\r\n\r\n","g").split(loremText);
	}
	while(loremArray.length > paragraphs) loremArray.pop();
	var loremString = loremArray.join("\n\n");
	if(length != -1) {
		return loremString.substring(0,length);
	}
	return loremString;
};
TextTools.sortByLength = function(array) {
	array.sort(function(a,b) {
		return a.length - b.length;
	});
	return array;
};
TextTools.sortByValue = function(array) {
	array.sort(function(a,b) {
		return a - b | 0;
	});
	return array;
};
TextTools.sortByIntValue = function(array) {
	array.sort(function(a,b) {
		return a - b;
	});
	return array;
};
TextTools.getLineIndexOfChar = function(string,index) {
	var lines = string.split("\n");
	var lineIndex = 0;
	var _g = 0;
	var _g1 = lines.length;
	while(_g < _g1) {
		var i = _g++;
		if(index < lines[i].length) {
			lineIndex = i;
			break;
		}
		index -= lines[i].length;
	}
	return lineIndex;
};
TextTools.countOccurrencesOf = function(string,sub) {
	var count = 0;
	while(TextTools.contains(string,sub)) {
		++count;
		string = TextTools.replaceFirst(string,sub,"");
	}
	return count;
};
TextTools.contains = function(string,contains) {
	if(string == null) {
		return false;
	}
	return string.indexOf(contains) != -1;
};
TextTools.remove = function(string,sub) {
	return TextTools.replace(string,sub,"");
};
TextTools.replace = function(string,replace,$with) {
	if(replace == null || $with == null) {
		return string;
	}
	return StringTools.replace(string,replace,$with);
};
TextTools.reverse = function(string) {
	var returnedString = "";
	var _g = 1;
	var _g1 = string.length + 1;
	while(_g < _g1) {
		var i = _g++;
		returnedString += string.charAt(string.length - 1);
	}
	return returnedString;
};
TextTools.insert = function(string,substring,at) {
	return string.substring(0,at + 1) + substring + string.substring(at + 1);
};
var TextDirection = $hxEnums["TextDirection"] = { __ename__:"TextDirection",__constructs__:null
	,RTL: {_hx_name:"RTL",_hx_index:0,__enum__:"TextDirection",toString:$estr}
	,LTR: {_hx_name:"LTR",_hx_index:1,__enum__:"TextDirection",toString:$estr}
	,UNDETERMINED: {_hx_name:"UNDETERMINED",_hx_index:2,__enum__:"TextDirection",toString:$estr}
};
TextDirection.__constructs__ = [TextDirection.RTL,TextDirection.LTR,TextDirection.UNDETERMINED];
var ValueType = $hxEnums["ValueType"] = { __ename__:"ValueType",__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var params = enm.__constructs__[a._hx_index].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:"haxe.StackItem",__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function(fullStack) {
	if(fullStack == null) {
		fullStack = false;
	}
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return fullStack ? eStack : haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m2 = item2.m;
				var m1 = item1.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item21 = item2.s;
				var file2 = item2.file;
				var line2 = item2.line;
				var col2 = item2.column;
				var col1 = item1.column;
				var line1 = item1.line;
				var file1 = item1.file;
				var item11 = item1.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class2 = item2.classname;
				var method2 = item2.method;
				var method1 = item1.method;
				var class1 = item1.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v2 = item2.v;
				var v1 = item1.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var s1 = s.s;
		var file = s.file;
		var line = s.line;
		var col = s.column;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var cname = s.classname;
		var meth = s.method;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,details: function() {
		if(this.get_previous() == null) {
			var tmp = "Exception: " + this.toString();
			var tmp1 = this.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		} else {
			var result = "";
			var e = this;
			var prev = null;
			while(e != null) {
				if(prev == null) {
					var result1 = "Exception: " + e.get_message();
					var tmp = e.get_stack();
					result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
				} else {
					var prevStack = haxe_CallStack.subtract(e.get_stack(),prev.get_stack());
					result = "Exception: " + e.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
				}
				prev = e;
				e = e.get_previous();
			}
			return result;
		}
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_previous: function() {
		return this.__previousException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_previous:"get_previous",get_stack:"get_stack",get_message:"get_message"}
});
var haxe_Int32 = {};
haxe_Int32.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe_Int64 = {};
haxe_Int64.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		switch(divisor.low) {
		case 0:
			throw haxe_Exception.thrown("divide by zero");
		case 1:
			return { quotient : new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low), modulus : new haxe__$Int64__$_$_$Int64(0,0)};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = ~dividend.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	} else {
		modulus = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
	}
	if(divisor.high < 0) {
		var high = ~divisor.high;
		var low = ~divisor.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		divisor = new haxe__$Int64__$_$_$Int64(high,low);
	}
	var quotient = new haxe__$Int64__$_$_$Int64(0,0);
	var mask = new haxe__$Int64__$_$_$Int64(0,1);
	while(!(divisor.high < 0)) {
		var v = haxe_Int32.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe_Int32.ucompare(divisor.low,modulus.low);
		var b = 1;
		b &= 63;
		divisor = b == 0 ? new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b) : new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
		var b1 = 1;
		b1 &= 63;
		mask = b1 == 0 ? new haxe__$Int64__$_$_$Int64(mask.high,mask.low) : b1 < 32 ? new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1) : new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(mask.high != b_high || mask.low != b_low)) {
			break;
		}
		var v = haxe_Int32.ucompare(modulus.high,divisor.high);
		if((v != 0 ? v : haxe_Int32.ucompare(modulus.low,divisor.low)) >= 0) {
			quotient = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			var high = modulus.high - divisor.high | 0;
			var low = modulus.low - divisor.low | 0;
			if(haxe_Int32.ucompare(modulus.low,divisor.low) < 0) {
				var ret = high--;
				high = high | 0;
			}
			modulus = new haxe__$Int64__$_$_$Int64(high,low);
		}
		var b = 1;
		b &= 63;
		mask = b == 0 ? new haxe__$Int64__$_$_$Int64(mask.high,mask.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(mask.high >>> b,mask.high << 32 - b | mask.low >>> b) : new haxe__$Int64__$_$_$Int64(0,mask.high >>> b - 32);
		var b1 = 1;
		b1 &= 63;
		divisor = b1 == 0 ? new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low) : b1 < 32 ? new haxe__$Int64__$_$_$Int64(divisor.high >>> b1,divisor.high << 32 - b1 | divisor.low >>> b1) : new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b1 - 32);
	}
	if(divSign) {
		var high = ~quotient.high;
		var low = ~quotient.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		quotient = new haxe__$Int64__$_$_$Int64(high,low);
	}
	if(dividend.high < 0) {
		var high = ~modulus.high;
		var low = ~modulus.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	}
	return { quotient : quotient, modulus : modulus};
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([$A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		this.shash.h[s] = this.scount++;
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v1 = v;
			if(isNaN(v1)) {
				this.buf.b += "k";
			} else if(!isFinite(v1)) {
				this.buf.b += v1 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v1 == null ? "null" : "" + v1;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw haxe_Exception.thrown("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v1.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v1 = v;
				var _g_head = v1.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i = val;
					this.serialize(i);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					var id = Reflect.field(k1,"__id__");
					Reflect.deleteField(k1,"__id__");
					this.serialize(k1);
					k1["__id__"] = id;
					this.serialize(v1.h[k1.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v1 = v;
				var h = v1.h;
				var _g_h = h;
				var _g_keys = Object.keys(h);
				var _g_length = _g_keys.length;
				var _g_current = 0;
				while(_g_current < _g_length) {
					var k = _g_keys[_g_current++];
					this.serializeString(k);
					this.serialize(v1.h[k]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v1 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v1.length * 8 / 6));
				this.buf.b += ":";
				var i = 0;
				var max = v1.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					b64 = new Array(haxe_Serializer.BASE64.length);
					var _g1 = 0;
					var _g2 = haxe_Serializer.BASE64.length;
					while(_g1 < _g2) {
						var i1 = _g1++;
						b64[i1] = HxOverrides.cca(haxe_Serializer.BASE64,i1);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i < max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					var b3 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i == max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b2 << 2 & 63]);
				} else if(i == max + 1) {
					var b1 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b1 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e = v;
				this.serializeString($hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = new Date().getTime() / 1000;
	var r = f();
	haxe_Log.trace(new Date().getTime() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = this.buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var _this = edecl.__constructs__;
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i]._hx_name;
			}
			var tag = result[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	a1: null
	,a2: null
	,update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value & 255;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len = this.length < other.length ? this.length : other.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		return new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = _$String_String_$Impl_$.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) {
			var i = _g++;
			var c = this.b[i];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.iteratorLoop = function(node,acc) {
	if(node != null) {
		haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
		acc.push(node.value);
		haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
	}
};
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,copy: function() {
		var copied = new haxe_ds_EnumValueMap();
		copied.root = this.root;
		return copied;
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_IntMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.h[key1] = this.h[key1];
		}
		return copied;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.createCopy = function(h) {
	var copy = new haxe_ds_StringMap();
	for (var key in h) copy.h[key] = h[key];
	return copy;
};
haxe_ds_StringMap.stringify = function(h) {
	var s = "[";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "]";
};
haxe_ds_StringMap.prototype = {
	h: null
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapValueIterator(this.h);
	}
	,keyValueIterator: function() {
		return new haxe_ds__$StringMap_StringMapKeyValueIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_ds__$StringMap_StringMapValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapValueIterator"] = haxe_ds__$StringMap_StringMapValueIterator;
haxe_ds__$StringMap_StringMapValueIterator.__name__ = "haxe.ds._StringMap.StringMapValueIterator";
haxe_ds__$StringMap_StringMapValueIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.h[this.keys[this.current++]];
	}
	,__class__: haxe_ds__$StringMap_StringMapValueIterator
};
var haxe_ds__$StringMap_StringMapKeyValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyValueIterator"] = haxe_ds__$StringMap_StringMapKeyValueIterator;
haxe_ds__$StringMap_StringMapKeyValueIterator.__name__ = "haxe.ds._StringMap.StringMapKeyValueIterator";
haxe_ds__$StringMap_StringMapKeyValueIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		var key = this.keys[this.current++];
		return { key : key, value : this.h[key]};
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyValueIterator
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
	this.__skipStack++;
};
$hxClasses["haxe.exceptions.PosException"] = haxe_exceptions_PosException;
haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException";
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	posInfos: null
	,toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_ArgumentException = function(argument,message,previous,pos) {
	haxe_exceptions_PosException.call(this,message == null ? "Invalid argument \"" + argument + "\"" : message,previous,pos);
	this.argument = argument;
	this.__skipStack++;
};
$hxClasses["haxe.exceptions.ArgumentException"] = haxe_exceptions_ArgumentException;
haxe_exceptions_ArgumentException.__name__ = "haxe.exceptions.ArgumentException";
haxe_exceptions_ArgumentException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_ArgumentException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	argument: null
	,__class__: haxe_exceptions_ArgumentException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
	this.__skipStack++;
};
$hxClasses["haxe.exceptions.NotImplementedException"] = haxe_exceptions_NotImplementedException;
haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException";
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_hash_Murmur1 = function() {
};
$hxClasses["haxe.hash.Murmur1"] = haxe_hash_Murmur1;
haxe_hash_Murmur1.__name__ = "haxe.hash.Murmur1";
haxe_hash_Murmur1.hash = function(b,seed) {
	if(seed == null) {
		seed = 0;
	}
	var length = b.length;
	var h = seed ^ haxe_Int32._mul(length,-962287725);
	var quarterLength = length >> 2;
	var _g = 0;
	var _g1 = quarterLength;
	while(_g < _g1) {
		var i = _g++;
		var pos = i << 2;
		var k = b.b[pos];
		k |= b.b[pos + 1] << 8;
		k |= b.b[pos + 2] << 16;
		k |= b.b[pos + 3] << 24;
		h = h + k | 0;
		h = haxe_Int32._mul(h,-962287725);
		h ^= h >>> 16;
	}
	var offset = quarterLength << 2;
	var rlen = length & 3;
	if(rlen == 3) {
		h = h + (b.b[offset + 2] << 16) | 0;
	}
	if(rlen >= 2) {
		h = h + (b.b[offset + 1] << 8) | 0;
	}
	if(rlen >= 1) {
		h = h + b.b[offset] | 0;
		h = haxe_Int32._mul(h,-962287725);
		h ^= h >>> 16;
	}
	h = haxe_Int32._mul(h,-962287725);
	h ^= h >>> 10;
	h = haxe_Int32._mul(h,-962287725);
	h ^= h >>> 17;
	return h;
};
haxe_hash_Murmur1.prototype = {
	__class__: haxe_hash_Murmur1
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:"haxe.io.Encoding",__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:"haxe.io.Error",__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	haxe_io_FPHelper.helper.setFloat64(0,v,true);
	i64.low = haxe_io_FPHelper.helper.getInt32(0,true);
	i64.high = haxe_io_FPHelper.helper.getInt32(4,true);
	return i64;
};
var haxe_io_Float32Array = {};
haxe_io_Float32Array.fromBytes = function(bytes,bytePos,length) {
	if(bytePos == null) {
		bytePos = 0;
	}
	if(length == null) {
		length = bytes.length - bytePos >> 2;
	}
	return new Float32Array(bytes.b.bufferValue,bytePos,length);
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__:"haxe.zip.ExtraField",__constructs__:null
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_._hx_name="FUnknown",$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_._hx_name="FInfoZipUnicodePath",$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_name:"FUtf8",_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
haxe_zip_ExtraField.__constructs__ = [haxe_zip_ExtraField.FUnknown,haxe_zip_ExtraField.FInfoZipUnicodePath,haxe_zip_ExtraField.FUtf8];
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__:"haxe.zip.Huffman",__constructs__:null
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="Found",$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBit",$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBits",$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__constructs__ = [haxe_zip_Huffman.Found,haxe_zip_Huffman.NeedBit,haxe_zip_Huffman.NeedBits];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var a = t.left;
			var b = t.right;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.n;
			var _g = t.table;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var a = t.left;
				var b = t.right;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var a = t.left;
			var b = t.right;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	buffer: null
	,pos: null
	,crc: null
	,slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__:"haxe.zip._InflateImpl.State",__constructs__:null
	,Head: {_hx_name:"Head",_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_name:"Block",_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_name:"CData",_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_name:"Crc",_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_name:"Dist",_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_name:"DistOne",_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.prototype = {
	nbits: null
	,bits: null
	,state: null
	,isFinal: null
	,huffman: null
	,huffdist: null
	,htools: null
	,len: null
	,dist: null
	,needed: null
	,output: null
	,outpos: null
	,input: null
	,lengths: null
	,window: null
	,buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var a = h.left;
			var b = h.right;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var n = h.n;
			var tbl = h.table;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Reader = function(i) {
	this.i = i;
};
$hxClasses["haxe.zip.Reader"] = haxe_zip_Reader;
haxe_zip_Reader.__name__ = "haxe.zip.Reader";
haxe_zip_Reader.readZip = function(i) {
	var r = new haxe_zip_Reader(i);
	return r.read();
};
haxe_zip_Reader.prototype = {
	i: null
	,readZipDate: function() {
		var t = this.i.readUInt16();
		var hour = t >> 11 & 31;
		var min = t >> 5 & 63;
		var sec = t & 31;
		var d = this.i.readUInt16();
		var year = d >> 9;
		var month = d >> 5 & 15;
		var day = d & 31;
		return new Date(year + 1980,month - 1,day,hour,min,sec << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					var name = this.i.read(len - 5).toString();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(name,crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw haxe_Exception.thrown("Invalid Zip Data");
		}
		var version = i.readUInt16();
		var flags = i.readUInt16();
		var utf8 = (flags & 2048) != 0;
		if((flags & 63473) != 0) {
			throw haxe_Exception.thrown("Unsupported flags " + flags);
		}
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw haxe_Exception.thrown("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if(utf8) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		var data = null;
		if((flags & 8) != 0) {
			crc32 = null;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : data, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new haxe_ds_List();
		var buf = null;
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.crc32 == null) {
				if(e.compressed) {
					var bufSize = 65536;
					if(tmp == null) {
						tmp = new haxe_io_Bytes(new ArrayBuffer(bufSize));
					}
					var out = new haxe_io_BytesBuffer();
					var z = new haxe_zip_InflateImpl(this.i,false,false);
					while(true) {
						var n = z.readBytes(tmp,0,bufSize);
						out.addBytes(tmp,0,n);
						if(n < bufSize) {
							break;
						}
					}
					e.data = out.getBytes();
				} else {
					e.data = this.i.read(e.dataSize);
				}
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe_zip_Reader
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.__properties__ = {get_supported:"get_supported"};
js_Browser.get_supported = function() {
	if(typeof(window) != "undefined" && typeof(window.location) != "undefined") {
		return typeof(window.location.protocol) == "string";
	} else {
		return false;
	}
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var lime__$internal_backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._internal.backend.html5.GameDeviceData"] = lime__$internal_backend_html5_GameDeviceData;
lime__$internal_backend_html5_GameDeviceData.__name__ = "lime._internal.backend.html5.GameDeviceData";
lime__$internal_backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$internal_backend_html5_GameDeviceData
};
var lime__$internal_backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.id = -1;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._internal.backend.html5.HTML5AudioSource"] = lime__$internal_backend_html5_HTML5AudioSource;
lime__$internal_backend_html5_HTML5AudioSource.__name__ = "lime._internal.backend.html5.HTML5AudioSource";
lime__$internal_backend_html5_HTML5AudioSource.prototype = {
	completed: null
	,gain: null
	,id: null
	,length: null
	,loops: null
	,parent: null
	,playing: null
	,position: null
	,dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		if(this.playing || this.parent.buffer == null || this.parent.buffer.__srcHowl == null) {
			return;
		}
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		var cacheVolume = this.parent.buffer.__srcHowl._volume;
		this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
		this.id = this.parent.buffer.__srcHowl.play();
		this.parent.buffer.__srcHowl._volume = cacheVolume;
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,pause: function() {
		this.playing = false;
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.pause(this.id);
		}
	}
	,stop: function() {
		this.playing = false;
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
			this.parent.buffer.__srcHowl.off("end",$bind(this,this.howl_onEnd),this.id);
		}
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
			this.parent.buffer.__srcHowl.off("end",$bind(this,this.howl_onEnd),this.id);
		}
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.id == -1) {
			return 0;
		}
		if(this.completed) {
			return this.getLength();
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var time = (this.parent.buffer.__srcHowl.seek(this.id) * 1000 | 0) - this.parent.offset;
			if(time < 0) {
				return 0;
			}
			return time;
		}
		return 0;
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) {
				pos = 0;
			}
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null && this.id != -1) {
			this.parent.buffer.__srcHowl.volume(value,this.id);
		}
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) {
			return this.length;
		}
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			return this.parent.buffer.__srcHowl.duration() * 1000 | 0;
		}
		return 0;
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,getLoops: function() {
		return this.loops;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPitch: function() {
		return this.parent.buffer.__srcHowl.rate();
	}
	,setPitch: function(value) {
		this.parent.buffer.__srcHowl.rate(value);
		return this.getPitch();
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null && this.parent.buffer.__srcHowl.pos != null) {
			this.parent.buffer.__srcHowl.pos(this.position.x,this.position.y,this.position.z,this.id);
		}
		return this.position;
	}
	,__class__: lime__$internal_backend_html5_HTML5AudioSource
};
var lime__$internal_backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
};
$hxClasses["lime._internal.backend.html5.HTML5HTTPRequest"] = lime__$internal_backend_html5_HTML5HTTPRequest;
lime__$internal_backend_html5_HTML5HTTPRequest.__name__ = "lime._internal.backend.html5.HTML5HTTPRequest";
lime__$internal_backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,0);
	} else {
		lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 0});
	}
	return promise.future;
};
lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes = function(bytes,type) {
	var uri = URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
	if(uri != null) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,1);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 1});
		}
		return promise.future;
	} else {
		return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + lime__$internal_format_Base64.encode(bytes));
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit && lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.pop();
		switch(queueItem.type) {
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case "IMAGE":
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise,queueItem.options);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__createBlobURIFromBytes = function(bytes,type) {
	return URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI = function(uri) {
	if(!StringTools.startsWith(uri,"data:")) {
		return StringTools.startsWith(uri,"blob:");
	} else {
		return true;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(path == null || path == "") {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(path)) {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.originElement == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.originElement = window.document.createElement("a");
		lime__$internal_backend_html5_HTML5HTTPRequest.originHostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname($global.location.hostname);
		lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol($global.location.protocol);
		lime__$internal_backend_html5_HTML5HTTPRequest.originPort = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort($global.location.port,lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$internal_backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == lime__$internal_backend_html5_HTML5HTTPRequest.originHostname;
	var samePort = port == "" || port == lime__$internal_backend_html5_HTML5HTTPRequest.originPort;
	if(protocol != "file:" && sameHost) {
		return samePort;
	} else {
		return false;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise,options) {
	var image = new window.Image ();
	if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress || lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(uri)) {
		image.addEventListener("load",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event) {
			promise.progress(event.loaded,event.total);
		},false);
		image.addEventListener("error",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(new lime_net__$HTTPRequestErrorResponse(event.detail,null));
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img) {
				promise.complete(img);
			});
		};
		request.onerror = function(event) {
			promise.error(new lime_net__$HTTPRequestErrorResponse(event.message,null));
		};
		request.onprogress = function(event) {
			if(event.lengthComputable) {
				promise.progress(event.loaded,event.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI = function(uri,options) {
	if((options & 1) != 0) {
		URL.revokeObjectURL(uri);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.prototype = {
	binary: null
	,parent: null
	,request: null
	,validStatus0: null
	,cancel: function() {
		if(this.request != null) {
			this.request.abort();
		}
	}
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST") {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var h = this.parent.formData.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(query.length > 0) {
					query += "&";
				}
				var value = this.parent.formData.h[key];
				if(key.indexOf("[]") > -1 && ((value) instanceof Array)) {
					var _g = [];
					var x = $getIterator(value);
					while(x.hasNext()) {
						var x1 = x.next();
						_g.push(encodeURIComponent(x1));
					}
					var arrayValue = _g.join("&amp;" + key + "=");
					query += encodeURIComponent(key) + "=" + arrayValue;
				} else {
					var query1 = encodeURIComponent(key) + "=";
					var s = Std.string(value);
					query += query1 + encodeURIComponent(s);
				}
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.parent.contentType != null) {
			contentType = this.parent.contentType;
		}
		if(contentType == null) {
			if(this.parent.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.parent.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY", options : 0});
		}
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT", options : 0});
		}
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			var bytes = null;
			if(_gthis.request.responseType == "") {
				if(_gthis.request.responseText != null) {
					bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
				}
			} else if(_gthis.request.response != null) {
				bytes = haxe_io_Bytes.ofData(_gthis.request.response);
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(new lime_net__$HTTPRequestErrorResponse(_gthis.request.status,bytes));
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(new lime_net__$HTTPRequestErrorResponse(_gthis.request.status,_gthis.request.responseText));
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$internal_backend_html5_HTML5HTTPRequest
};
var lime__$internal_backend_html5_HTML5Window = function(parent) {
	this.imeCompositionActive = false;
	this.unusedTouchesPool = new haxe_ds_List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	this.cursor = lime_ui_MouseCursor.DEFAULT;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
	var attributes = parent.__attributes;
	if(!Object.prototype.hasOwnProperty.call(attributes,"context")) {
		attributes.context = { };
	}
	this.renderType = attributes.context.type;
	if(Object.prototype.hasOwnProperty.call(attributes,"element")) {
		parent.element = attributes.element;
	}
	var element = parent.element;
	if(Object.prototype.hasOwnProperty.call(attributes,"allowHighDPI") && attributes.allowHighDPI && this.renderType != "dom") {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.setWidth = Object.prototype.hasOwnProperty.call(attributes,"width") ? attributes.width : 0;
	this.setHeight = Object.prototype.hasOwnProperty.call(attributes,"height") ? attributes.height : 0;
	parent.__width = this.setWidth;
	parent.__height = this.setHeight;
	parent.id = lime__$internal_backend_html5_HTML5Window.windowID++;
	if(((element) instanceof HTMLCanvasElement)) {
		this.canvas = element;
	} else if(this.renderType == "dom") {
		this.div = window.document.createElement("div");
	} else {
		this.canvas = window.document.createElement("canvas");
	}
	if(this.canvas != null) {
		var style = this.canvas.style;
		style.setProperty("-webkit-transform","translateZ(0)",null);
		style.setProperty("transform","translateZ(0)",null);
	} else if(this.div != null) {
		var style = this.div.style;
		style.setProperty("-webkit-transform","translate3D(0,0,0)",null);
		style.setProperty("transform","translate3D(0,0,0)",null);
		style.position = "relative";
		style.overflow = "hidden";
		style.setProperty("-webkit-user-select","none",null);
		style.setProperty("-moz-user-select","none",null);
		style.setProperty("-ms-user-select","none",null);
		style.setProperty("-o-user-select","none",null);
	}
	if(parent.__width == 0 && parent.__height == 0) {
		if(element != null) {
			parent.__width = element.clientWidth;
			parent.__height = element.clientHeight;
		} else {
			parent.__width = window.innerWidth;
			parent.__height = window.innerHeight;
		}
		this.cacheElementWidth = parent.__width;
		this.cacheElementHeight = parent.__height;
		this.resizeElement = true;
	}
	if(this.canvas != null) {
		this.canvas.width = Math.round(parent.__width * this.scale);
		this.canvas.height = Math.round(parent.__height * this.scale);
		this.canvas.style.width = parent.__width + "px";
		this.canvas.style.height = parent.__height + "px";
	} else {
		this.div.style.width = parent.__width + "px";
		this.div.style.height = parent.__height + "px";
	}
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && attributes.resizable || !Object.prototype.hasOwnProperty.call(attributes,"width") && this.setWidth == 0 && this.setHeight == 0) {
		parent.__resizable = true;
	}
	this.updateSize();
	if(element != null) {
		if(this.canvas != null) {
			if(element != this.canvas) {
				element.appendChild(this.canvas);
			}
		} else {
			element.appendChild(this.div);
		}
		var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
		}
		element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
		element.addEventListener("dragstart",$bind(this,this.handleDragEvent),true);
		element.addEventListener("dragover",$bind(this,this.handleDragEvent),true);
		element.addEventListener("drop",$bind(this,this.handleDragEvent),true);
		element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
		element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
	}
	this.createContext();
	if(parent.context.type == "webgl") {
		this.canvas.addEventListener("webglcontextlost",$bind(this,this.handleContextEvent),false);
		this.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleContextEvent),false);
	}
};
$hxClasses["lime._internal.backend.html5.HTML5Window"] = lime__$internal_backend_html5_HTML5Window;
lime__$internal_backend_html5_HTML5Window.__name__ = "lime._internal.backend.html5.HTML5Window";
lime__$internal_backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,cacheElementHeight: null
	,cacheElementWidth: null
	,cacheMouseX: null
	,cacheMouseY: null
	,cursor: null
	,currentTouches: null
	,isFullscreen: null
	,parent: null
	,primaryTouch: null
	,renderType: null
	,requestedFullscreen: null
	,resizeElement: null
	,scale: null
	,setHeight: null
	,setWidth: null
	,textInputEnabled: null
	,textInputRect: null
	,unusedTouchesPool: null
	,__focusPending: null
	,alert: function(message,title) {
		if(message != null) {
			window.alert(Std.string(message));
		}
	}
	,close: function() {
		var element = this.parent.element;
		if(element != null) {
			if(this.canvas != null) {
				if(element != this.canvas) {
					element.removeChild(this.canvas);
				}
				this.canvas = null;
			} else if(this.div != null) {
				element.removeChild(this.div);
				this.div = null;
			}
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				element.removeEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			element.removeEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
			element.removeEventListener("dragstart",$bind(this,this.handleDragEvent),true);
			element.removeEventListener("dragover",$bind(this,this.handleDragEvent),true);
			element.removeEventListener("drop",$bind(this,this.handleDragEvent),true);
			element.removeEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			element.removeEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			element.removeEventListener("touchend",$bind(this,this.handleTouchEvent),true);
			element.removeEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
			element.removeEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
			element.removeEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
		}
		this.parent.application.__removeWindow(this.parent);
	}
	,createContext: function() {
		var context = new lime_graphics_RenderContext();
		var contextAttributes = this.parent.__attributes.context;
		context.window = this.parent;
		context.attributes = contextAttributes;
		if(this.div != null) {
			context.dom = this.div;
			context.type = "dom";
			context.version = "";
		} else if(this.canvas != null) {
			var webgl = null;
			var forceCanvas = this.renderType == "canvas";
			var forceWebGL = this.renderType == "opengl" || this.renderType == "opengles" || this.renderType == "webgl";
			var allowWebGL2 = !Object.prototype.hasOwnProperty.call(contextAttributes,"version") || contextAttributes.version != "1";
			var isWebGL2 = false;
			if(forceWebGL || !forceCanvas && (!Object.prototype.hasOwnProperty.call(contextAttributes,"hardware") || contextAttributes.hardware)) {
				var transparentBackground = Object.prototype.hasOwnProperty.call(contextAttributes,"background") && contextAttributes.background == null;
				var colorDepth = Object.prototype.hasOwnProperty.call(contextAttributes,"colorDepth") ? contextAttributes.colorDepth : 16;
				var options = Object.prototype.hasOwnProperty.call(contextAttributes,"antialiasing") && contextAttributes.antialiasing > 0;
				var options1 = Object.prototype.hasOwnProperty.call(contextAttributes,"depth") ? contextAttributes.depth : true;
				var options2 = Object.prototype.hasOwnProperty.call(contextAttributes,"stencil") && contextAttributes.stencil;
				var options3 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : options1, premultipliedAlpha : true, stencil : options2, preserveDrawingBuffer : false, failIfMajorPerformanceCaveat : false};
				var glContextType = ["webgl","experimental-webgl"];
				if(allowWebGL2) {
					glContextType.unshift("webgl2");
				}
				var _g = 0;
				while(_g < glContextType.length) {
					var name = glContextType[_g];
					++_g;
					webgl = this.canvas.getContext(name,options3);
					if(webgl != null && name == "webgl2") {
						isWebGL2 = true;
					}
					if(webgl != null) {
						break;
					}
				}
			}
			if(webgl == null) {
				context.canvas2D = this.canvas.getContext("2d");
				context.type = "canvas";
				context.version = "";
			} else {
				context.webgl = lime_graphics_WebGLRenderContext.fromWebGL2RenderContext(webgl);
				if(isWebGL2) {
					context.webgl2 = webgl;
				}
				if(lime_graphics_opengl_GL.context == null) {
					lime_graphics_opengl_GL.context = webgl;
					lime_graphics_opengl_GL.type = "webgl";
					lime_graphics_opengl_GL.version = isWebGL2 ? 2 : 1;
				}
				context.type = "webgl";
				context.version = isWebGL2 ? "2" : "1";
			}
		}
		this.parent.context = context;
	}
	,focus: function() {
	}
	,focusTextInput: function() {
		var _gthis = this;
		if(this.__focusPending) {
			return;
		}
		this.__focusPending = true;
		haxe_Timer.delay(function() {
			_gthis.__focusPending = false;
			if(_gthis.textInputEnabled) {
				lime__$internal_backend_html5_HTML5Window.textInput.focus();
			}
		},20);
	}
	,getCursor: function() {
		return this.cursor;
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getDisplayMode: function() {
		return lime_system_System.getDisplay(0).currentMode;
	}
	,getFrameRate: function() {
		if(this.parent.application == null) {
			return 0;
		}
		if(this.parent.application.__backend.framePeriod < 0) {
			return 60;
		} else if(this.parent.application.__backend.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.parent.application.__backend.framePeriod;
		}
	}
	,getMouseLock: function() {
		return false;
	}
	,getOpacity: function() {
		return 1.0;
	}
	,getTextInputEnabled: function() {
		return this.textInputEnabled;
	}
	,handleContextEvent: function(event) {
		switch(event.type) {
		case "webglcontextlost":
			if(event.cancelable) {
				event.preventDefault();
			}
			var tmp = lime_graphics_opengl_GL.context != null;
			this.parent.context = null;
			this.parent.onRenderContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onRenderContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,handleContextMenuEvent: function(event) {
		if((this.parent.onMouseUp.canceled || this.parent.onMouseDown.canceled) && event.cancelable) {
			event.preventDefault();
		}
	}
	,handleCutOrCopyEvent: function(event) {
		var text = lime_system_Clipboard.get_text();
		if(text == null) {
			text = "";
		}
		event.clipboardData.setData("text/plain",text);
		if(event.cancelable) {
			event.preventDefault();
		}
	}
	,handleDragEvent: function(event) {
		switch(event.type) {
		case "dragover":
			event.preventDefault();
			return false;
		case "dragstart":
			if((js_Boot.__cast(event.target , HTMLElement)).nodeName.toLowerCase() == "img" && event.cancelable) {
				event.preventDefault();
				return false;
			}
			break;
		case "drop":
			if(event.dataTransfer != null && event.dataTransfer.files.length > 0) {
				this.parent.onDropFile.dispatch(event.dataTransfer.files);
				event.preventDefault();
				return false;
			}
			break;
		}
		return true;
	}
	,handleFocusEvent: function(event) {
		if(this.textInputEnabled) {
			if(event.relatedTarget == null || this.isDescendent(event.relatedTarget)) {
				this.focusTextInput();
			}
		}
	}
	,handleFullscreenEvent: function(event) {
		var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
		if(fullscreenElement != null) {
			this.isFullscreen = true;
			this.parent.__fullscreen = true;
			if(this.requestedFullscreen) {
				this.requestedFullscreen = false;
				this.parent.onFullscreen.dispatch();
			}
		} else {
			this.isFullscreen = false;
			this.parent.__fullscreen = false;
			this.parent.onRestore.dispatch();
			var changeEvents = ["fullscreenchange","mozfullscreenchange","webkitfullscreenchange","MSFullscreenChange"];
			var errorEvents = ["fullscreenerror","mozfullscreenerror","webkitfullscreenerror","MSFullscreenError"];
			var _g = 0;
			var _g1 = changeEvents.length;
			while(_g < _g1) {
				var i = _g++;
				window.document.removeEventListener(changeEvents[i],$bind(this,this.handleFullscreenEvent),false);
				window.document.removeEventListener(errorEvents[i],$bind(this,this.handleFullscreenEvent),false);
			}
		}
	}
	,handleGamepadEvent: function(event) {
		switch(event.type) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(this.imeCompositionActive) {
			return;
		}
		if(lime__$internal_backend_html5_HTML5Window.textInput.value != lime__$internal_backend_html5_HTML5Window.dummyCharacter) {
			var value = StringTools.replace(lime__$internal_backend_html5_HTML5Window.textInput.value,lime__$internal_backend_html5_HTML5Window.dummyCharacter,"");
			if(value.length > 0) {
				this.parent.onTextInput.dispatch(value);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.parent.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect = this.div.getBoundingClientRect();
					x = event.clientX - rect.left;
					y = event.clientY - rect.top;
				} else {
					var rect = this.parent.element.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			switch(event.type) {
			case "mousedown":
				if(event.currentTarget == this.parent.element) {
					window.addEventListener("mouseup",$bind(this,this.handleMouseEvent));
				}
				this.parent.clickCount = event.detail;
				this.parent.onMouseDown.dispatch(x,y,event.button);
				this.parent.clickCount = 0;
				if(this.parent.onMouseDown.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.parent.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.parent.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if((this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				window.removeEventListener("mouseup",$bind(this,this.handleMouseEvent));
				if(event.currentTarget == this.parent.element) {
					event.stopPropagation();
				}
				this.parent.clickCount = event.detail;
				this.parent.onMouseUp.dispatch(x,y,event.button);
				this.parent.clickCount = 0;
				if(this.parent.onMouseUp.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			var deltaMode;
			switch(event.deltaMode) {
			case 0:
				deltaMode = lime_ui_MouseWheelMode.PIXELS;
				break;
			case 1:
				deltaMode = lime_ui_MouseWheelMode.LINES;
				break;
			case 2:
				deltaMode = lime_ui_MouseWheelMode.PAGES;
				break;
			default:
				deltaMode = lime_ui_MouseWheelMode.UNKNOWN;
			}
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY,deltaMode);
			if(this.parent.onMouseWheel.canceled && event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = event.clipboardData.getData("text/plain");
			lime_system_Clipboard.set_text(text);
			if(this.textInputEnabled) {
				this.parent.onTextInput.dispatch(text);
			}
			if(event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		if(event.cancelable) {
			event.preventDefault();
		}
		var rect = null;
		if(this.parent.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.parent.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) {
					touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch;
				}
				if(touch == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
			} else {
				touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					switch(event.type) {
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.primaryTouch = null;
						}
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseMove.dispatch(x,y);
						}
						break;
					default:
					}
				}
			}
		}
	}
	,isDescendent: function(node) {
		if(node == this.parent.element) {
			return true;
		}
		while(node != null) {
			if(node.parentNode == this.parent.element) {
				return true;
			}
			node = node.parentNode;
		}
		return false;
	}
	,move: function(x,y) {
	}
	,readPixels: function(rect) {
		if(this.canvas != null) {
			var stageRect = new lime_math_Rectangle(0,0,this.canvas.width,this.canvas.height);
			if(rect == null) {
				rect = stageRect;
			} else {
				rect.intersection(stageRect,rect);
			}
			if(rect.width > 0 && rect.height > 0) {
				var canvas2 = window.document.createElement("canvas");
				canvas2.width = rect.width | 0;
				canvas2.height = rect.height | 0;
				var context = canvas2.getContext("2d");
				context.drawImage(this.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas2);
			}
		}
		return null;
	}
	,resize: function(width,height) {
	}
	,setMinSize: function(width,height) {
	}
	,setMaxSize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setClipboard: function(value) {
		if(lime__$internal_backend_html5_HTML5Window.textArea == null) {
			lime__$internal_backend_html5_HTML5Window.textArea = window.document.createElement("textarea");
			lime__$internal_backend_html5_HTML5Window.textArea.style.height = "0px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.left = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.opacity = "0";
			lime__$internal_backend_html5_HTML5Window.textArea.style.position = "fixed";
			lime__$internal_backend_html5_HTML5Window.textArea.style.top = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.width = "0px";
			window.document.body.appendChild(lime__$internal_backend_html5_HTML5Window.textArea);
		}
		lime__$internal_backend_html5_HTML5Window.textArea.value = value;
		lime__$internal_backend_html5_HTML5Window.textArea.focus();
		lime__$internal_backend_html5_HTML5Window.textArea.select();
		if(window.document.queryCommandEnabled("copy")) {
			window.document.execCommand("copy");
		}
		if(this.textInputEnabled) {
			this.focusTextInput();
		}
	}
	,setCursor: function(value) {
		if(this.cursor != value) {
			if(value == null) {
				this.parent.element.style.cursor = "none";
			} else {
				var tmp;
				switch(value._hx_index) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				this.parent.element.style.cursor = tmp;
			}
			this.cursor = value;
		}
		return this.cursor;
	}
	,setDisplayMode: function(value) {
		return value;
	}
	,setFrameRate: function(value) {
		if(this.parent.application != null) {
			if(value >= 60) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = -1;
				}
			} else if(value > 0) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = 1000 / value;
				}
			} else if(this.parent == this.parent.application.__window) {
				this.parent.application.__backend.framePeriod = 1000;
			}
		}
		return value;
	}
	,setFullscreen: function(value) {
		if(value) {
			if(!this.requestedFullscreen && !this.isFullscreen) {
				this.requestedFullscreen = true;
				if(($_=this.parent.element,$bind($_,$_.requestFullscreen))) {
					document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.requestFullscreen();
				} else if(this.parent.element.mozRequestFullScreen) {
					document.addEventListener("mozfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("mozfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.mozRequestFullScreen();
				} else if(this.parent.element.webkitRequestFullscreen) {
					document.addEventListener("webkitfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("webkitfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.webkitRequestFullscreen();
				} else if(this.parent.element.msRequestFullscreen) {
					document.addEventListener("MSFullscreenChange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("MSFullscreenError",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.msRequestFullscreen();
				}
			}
		} else if(this.isFullscreen) {
			this.requestedFullscreen = false;
			if(document.exitFullscreen) {
				document.exitFullscreen();
			} else if(document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if(document.webkitExitFullscreen) {
				document.webkitExitFullscreen();
			} else if(document.msExitFullscreen) {
				document.msExitFullscreen();
			}
		}
		return value;
	}
	,setIcon: function(image) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
		var link = window.document.querySelector("link[rel*='icon']");
		if(link == null) {
			link = window.document.createElement("link");
		}
		link.type = "image/x-icon";
		link.rel = "shortcut icon";
		link.href = image.buffer.get_src().toDataURL("image/x-icon");
		window.document.getElementsByTagName("head")[0].appendChild(link);
	}
	,setMaximized: function(value) {
		return false;
	}
	,setMinimized: function(value) {
		return false;
	}
	,setMouseLock: function(value) {
	}
	,setOpacity: function(value) {
	}
	,setResizable: function(value) {
		return value;
	}
	,setTextInputEnabled: function(value) {
		if(value) {
			if(lime__$internal_backend_html5_HTML5Window.textInput == null) {
				lime__$internal_backend_html5_HTML5Window.textInput = window.document.createElement("input");
				var tmp = $global.navigator.userAgent.indexOf("Android") >= 0 ? "password" : "text";
				lime__$internal_backend_html5_HTML5Window.textInput.type = tmp;
				lime__$internal_backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$internal_backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$internal_backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
				lime__$internal_backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$internal_backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$internal_backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$internal_backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$internal_backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
			}
			if(lime__$internal_backend_html5_HTML5Window.textInput.parentNode == null) {
				this.parent.element.appendChild(lime__$internal_backend_html5_HTML5Window.textInput);
			}
			if(!this.textInputEnabled) {
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("compositionstart",$bind(this,this.handleCompositionstartEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("compositionend",$bind(this,this.handleCompositionendEvent),true);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.focus();
			lime__$internal_backend_html5_HTML5Window.textInput.select();
		} else if(lime__$internal_backend_html5_HTML5Window.textInput != null) {
			lime__$internal_backend_html5_HTML5Window.textInput.blur();
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("compositionstart",$bind(this,this.handleCompositionstartEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("compositionend",$bind(this,this.handleCompositionendEvent),true);
		}
		return this.textInputEnabled = value;
	}
	,setTextInputRect: function(value) {
		return this.textInputRect = value;
	}
	,imeCompositionActive: null
	,handleCompositionstartEvent: function(e) {
		this.imeCompositionActive = true;
	}
	,handleCompositionendEvent: function(e) {
		this.imeCompositionActive = false;
		this.handleInputEvent(e);
	}
	,setTitle: function(value) {
		if(value != null) {
			window.document.title = value;
		}
		return value;
	}
	,setVisible: function(value) {
		return value;
	}
	,updateSize: function() {
		if(!this.parent.__resizable) {
			return;
		}
		var elementWidth;
		var elementHeight;
		if(this.parent.element != null) {
			elementWidth = this.parent.element.clientWidth;
			elementHeight = this.parent.element.clientHeight;
		} else {
			elementWidth = window.innerWidth;
			elementHeight = window.innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.parent.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.__width = elementWidth;
						this.parent.__height = elementHeight;
						if(this.canvas != null) {
							if(this.parent.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
					var scaleY = this.setHeight != 0 ? elementHeight / this.setHeight : 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.parent.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,warpMouse: function(x,y) {
	}
	,__class__: lime__$internal_backend_html5_HTML5Window
};
var lime__$internal_backend_native_NativeCFFI = function() { };
$hxClasses["lime._internal.backend.native.NativeCFFI"] = lime__$internal_backend_native_NativeCFFI;
lime__$internal_backend_native_NativeCFFI.__name__ = "lime._internal.backend.native.NativeCFFI";
var lime__$internal_format_BMP = function() { };
$hxClasses["lime._internal.format.BMP"] = lime__$internal_format_BMP;
lime__$internal_format_BMP.__name__ = "lime._internal.format.BMP";
lime__$internal_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) {
		type = lime__$internal_format_BMPType.RGB;
	}
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) {
		switch(type._hx_index) {
		case 0:
			pixelValuesLength = (image.width * 3 + image.width * 3 % 4) * image.height;
			break;
		case 1:
			infoHeaderLength = 108;
			break;
		case 2:
			fileHeaderLength = 0;
			pixelValuesLength += image.width * image.height;
			break;
		}
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		data.b[position++] = 66;
		data.b[position++] = 77;
		data.setInt32(position,data.length);
		position += 4;
		data.setUInt16(position,0);
		position += 2;
		data.setUInt16(position,0);
		position += 2;
		data.setInt32(position,fileHeaderLength + infoHeaderLength);
		position += 4;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime__$internal_format_BMPType.ICO ? image.height * 2 : image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime__$internal_format_BMPType.RGB ? 24 : 32);
	position += 2;
	data.setInt32(position,type == lime__$internal_format_BMPType.BITFIELD ? 3 : 0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime__$internal_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.b[position++] = 32;
		data.b[position++] = 110;
		data.b[position++] = 105;
		data.b[position++] = 87;
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.b[position++] = 0;
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) {
		switch(type._hx_index) {
		case 0:
			var _g = 0;
			var _g1 = image.height;
			while(_g < _g1) {
				var y = _g++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g3 = image.width;
				while(_g2 < _g3) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
				}
				var _g4 = 0;
				var _g5 = image.width * 3 % 4;
				while(_g4 < _g5) {
					var i = _g4++;
					data.b[position++] = 0;
				}
			}
			break;
		case 1:
			var _g = 0;
			var _g1 = image.height;
			while(_g < _g1) {
				var y = _g++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g3 = image.width;
				while(_g2 < _g3) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
				}
			}
			break;
		case 2:
			var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
			var maskPosition = 0;
			var _g = 0;
			var _g1 = image.height;
			while(_g < _g1) {
				var y = _g++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g3 = image.width;
				while(_g2 < _g3) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
					andMask.b[maskPosition++] = 0;
				}
			}
			data.blit(position,andMask,0,image.width * image.height);
			break;
		}
	}
	return data;
};
var lime__$internal_format_BMPType = $hxEnums["lime._internal.format.BMPType"] = { __ename__:"lime._internal.format.BMPType",__constructs__:null
	,RGB: {_hx_name:"RGB",_hx_index:0,__enum__:"lime._internal.format.BMPType",toString:$estr}
	,BITFIELD: {_hx_name:"BITFIELD",_hx_index:1,__enum__:"lime._internal.format.BMPType",toString:$estr}
	,ICO: {_hx_name:"ICO",_hx_index:2,__enum__:"lime._internal.format.BMPType",toString:$estr}
};
lime__$internal_format_BMPType.__constructs__ = [lime__$internal_format_BMPType.RGB,lime__$internal_format_BMPType.BITFIELD,lime__$internal_format_BMPType.ICO];
var lime__$internal_format_Base64 = function() { };
$hxClasses["lime._internal.format.Base64"] = lime__$internal_format_Base64;
lime__$internal_format_Base64.__name__ = "lime._internal.format.Base64";
lime__$internal_format_Base64.decode = function(source) {
	return haxe_crypto_Base64.decode(source);
};
lime__$internal_format_Base64.encode = function(source) {
	var result = [];
	var dictionary = lime__$internal_format_Base64.DICTIONARY;
	var extendedDictionary = lime__$internal_format_Base64.EXTENDED_DICTIONARY;
	var numBytes = source.length;
	var numInputTriplets = Math.floor(numBytes / 3);
	var numChunksToWrite = numInputTriplets * 2;
	result.length = Math.ceil(numBytes / 3) * 2;
	var numBytesRead = 0;
	var numChunksWritten = 0;
	var inputTriplet;
	while(numChunksWritten < numChunksToWrite) {
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8 | source.b[numBytesRead + 2];
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = extendedDictionary[inputTriplet & 4095];
		numBytesRead += 3;
		numChunksWritten += 2;
	}
	switch(numBytes - numInputTriplets * 3) {
	case 1:
		inputTriplet = source.b[numBytesRead] << 16;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = "==";
		break;
	case 2:
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = dictionary[inputTriplet >> 6 & 63] + "=";
		break;
	default:
	}
	return result.join("");
};
var lime__$internal_format_Deflate = function() { };
$hxClasses["lime._internal.format.Deflate"] = lime__$internal_format_Deflate;
lime__$internal_format_Deflate.__name__ = "lime._internal.format.Deflate";
lime__$internal_format_Deflate.compress = function(bytes) {
	var data = pako.deflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Deflate.decompress = function(bytes) {
	var data = pako.inflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_GZip = function() { };
$hxClasses["lime._internal.format.GZip"] = lime__$internal_format_GZip;
lime__$internal_format_GZip.__name__ = "lime._internal.format.GZip";
lime__$internal_format_GZip.compress = function(bytes) {
	var data = pako.gzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_GZip.decompress = function(bytes) {
	var data = pako.ungzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_JPEG = function() { };
$hxClasses["lime._internal.format.JPEG"] = lime__$internal_format_JPEG;
lime__$internal_format_JPEG.__name__ = "lime._internal.format.JPEG";
lime__$internal_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_LZMA = function() { };
$hxClasses["lime._internal.format.LZMA"] = lime__$internal_format_LZMA;
lime__$internal_format_LZMA.__name__ = "lime._internal.format.LZMA";
lime__$internal_format_LZMA.compress = function(bytes) {
	return null;
};
lime__$internal_format_LZMA.decompress = function(bytes) {
	return null;
};
var lime__$internal_format_PNG = function() { };
$hxClasses["lime._internal.format.PNG"] = lime__$internal_format_PNG;
lime__$internal_format_PNG.__name__ = "lime._internal.format.PNG";
lime__$internal_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/png");
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_Zlib = function() { };
$hxClasses["lime._internal.format.Zlib"] = lime__$internal_format_Zlib;
lime__$internal_format_Zlib.__name__ = "lime._internal.format.Zlib";
lime__$internal_format_Zlib.compress = function(bytes) {
	var data = pako.deflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Zlib.decompress = function(bytes) {
	var data = pako.inflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_graphics_ImageCanvasUtil = function() { };
$hxClasses["lime._internal.graphics.ImageCanvasUtil"] = lime__$internal_graphics_ImageCanvasUtil;
lime__$internal_graphics_ImageCanvasUtil.__name__ = "lime._internal.graphics.ImageCanvasUtil";
lime__$internal_graphics_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime__$internal_graphics_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime__$internal_graphics_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var array = null;
			var vector = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime__$internal_graphics_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime__$internal_graphics_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = sourceImage.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(sourceRect.x + alphaPoint.x,sourceRect.y + alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.globalCompositeOperation = "source-over";
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
	}
};
lime__$internal_graphics_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer1,0);
			} else {
				this1 = new Uint8Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime__$internal_graphics_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		a = image.get_transparent() ? color >> 24 & 255 : 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		a = image.get_transparent() ? color & 255 : 255;
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) {
		image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel32(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixels(image,rect,format);
};
lime__$internal_graphics_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime__$internal_graphics_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
	buffer.__srcImageData = null;
	buffer.data = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) {
		return;
	}
	var copy = image.clone();
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(copy.get_src(),x,y);
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixels(image,rect,bytePointer,format,endian);
};
lime__$internal_graphics_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) {
		return;
	}
	if(image.type == lime_graphics_ImageType.CANVAS && (image.buffer.__srcCanvas != null || image.buffer.data != null)) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,clear);
	} else if(image.type == lime_graphics_ImageType.DATA) {
		lime__$internal_graphics_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime__$internal_graphics_ImageDataUtil = function() { };
$hxClasses["lime._internal.graphics.ImageDataUtil"] = lime__$internal_graphics_ImageDataUtil;
lime__$internal_graphics_ImageDataUtil.__name__ = "lime._internal.graphics.ImageDataUtil";
lime__$internal_graphics_ImageDataUtil.displaceMap = function(target,source,map,mapPoint,componentX,componentY,smooth) {
	var targetData = target.buffer.data;
	var sourceData = source.buffer.data;
	var mapData = map.buffer.data;
	var targetFormat = target.buffer.format;
	var sourceFormat = source.buffer.format;
	var mapFormat = map.buffer.format;
	var targetPremultiplied = target.get_premultiplied();
	var sourcePremultiplied = source.get_premultiplied();
	var mapPremultiplied = map.get_premultiplied();
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(source);
	var mapView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(map);
	var row;
	var sourceOffset;
	var sourcePixel = 0;
	var mapPixel = 0;
	var targetPixel = 0;
	var mapPixelX;
	var mapPixelY;
	var mapPixelA;
	var s1 = 0;
	var s2 = 0;
	var s3 = 0;
	var s4 = 0;
	var mPointXFloor;
	var mPointYFloor;
	var disOffsetXFloor;
	var disOffsetYFloor;
	var disX;
	var disY;
	var _g = 0;
	var _g1 = sourceView.height;
	while(_g < _g1) {
		var y = _g++;
		row = sourceView.byteOffset + sourceView.stride * y;
		var _g2 = 0;
		var _g3 = sourceView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			sourceOffset = row + x * 4;
			mPointXFloor = mapPoint.x | 0;
			mPointYFloor = mapPoint.y | 0;
			if(smooth) {
				var offset = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor) * 4;
				var format = mapFormat;
				var premultiplied = mapPremultiplied;
				if(premultiplied == null) {
					premultiplied = false;
				}
				if(format == null) {
					format = 0;
				}
				switch(format) {
				case 0:
					s1 = (mapData[offset] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset + 2] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				case 1:
					s1 = (mapData[offset + 1] & 255) << 24 | (mapData[offset + 2] & 255) << 16 | (mapData[offset + 3] & 255) << 8 | mapData[offset] & 255;
					break;
				case 2:
					s1 = (mapData[offset + 2] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				}
				if(premultiplied) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math_RGBA.__clamp[Math.round((s1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset1 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor + 1) * 4;
				var format1 = mapFormat;
				var premultiplied1 = mapPremultiplied;
				if(premultiplied1 == null) {
					premultiplied1 = false;
				}
				if(format1 == null) {
					format1 = 0;
				}
				switch(format1) {
				case 0:
					s2 = (mapData[offset1] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1 + 2] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				case 1:
					s2 = (mapData[offset1 + 1] & 255) << 24 | (mapData[offset1 + 2] & 255) << 16 | (mapData[offset1 + 3] & 255) << 8 | mapData[offset1] & 255;
					break;
				case 2:
					s2 = (mapData[offset1 + 2] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				}
				if(premultiplied1) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math_RGBA.__clamp[Math.round((s2 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset2 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor + 1) * 4;
				var format2 = mapFormat;
				var premultiplied2 = mapPremultiplied;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				switch(format2) {
				case 0:
					s3 = (mapData[offset2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2 + 2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				case 1:
					s3 = (mapData[offset2 + 1] & 255) << 24 | (mapData[offset2 + 2] & 255) << 16 | (mapData[offset2 + 3] & 255) << 8 | mapData[offset2] & 255;
					break;
				case 2:
					s3 = (mapData[offset2 + 2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				}
				if(premultiplied2) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math_RGBA.__clamp[Math.round((s3 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset3 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				var format3 = mapFormat;
				var premultiplied3 = mapPremultiplied;
				if(premultiplied3 == null) {
					premultiplied3 = false;
				}
				if(format3 == null) {
					format3 = 0;
				}
				switch(format3) {
				case 0:
					s4 = (mapData[offset3] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3 + 2] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				case 1:
					s4 = (mapData[offset3 + 1] & 255) << 24 | (mapData[offset3 + 2] & 255) << 16 | (mapData[offset3 + 3] & 255) << 8 | mapData[offset3] & 255;
					break;
				case 2:
					s4 = (mapData[offset3 + 2] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				}
				if(premultiplied3) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math_RGBA.__clamp[Math.round((s4 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				mapPixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,mapPoint.x - mPointXFloor,mapPoint.y - mPointYFloor);
			} else {
				var offset4 = mapView.byteOffset + mapView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				var format4 = mapFormat;
				var premultiplied4 = mapPremultiplied;
				if(premultiplied4 == null) {
					premultiplied4 = false;
				}
				if(format4 == null) {
					format4 = 0;
				}
				switch(format4) {
				case 0:
					mapPixel = (mapData[offset4] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4 + 2] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				case 1:
					mapPixel = (mapData[offset4 + 1] & 255) << 24 | (mapData[offset4 + 2] & 255) << 16 | (mapData[offset4 + 3] & 255) << 8 | mapData[offset4] & 255;
					break;
				case 2:
					mapPixel = (mapData[offset4 + 2] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				}
				if(premultiplied4) {
					if((mapPixel & 255) != 0 && (mapPixel & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (mapPixel & 255);
						mapPixel = (lime_math_RGBA.__clamp[Math.round((mapPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((mapPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((mapPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | mapPixel & 255 & 255;
					}
				}
			}
			mapPixelA = (mapPixel & 255) / 255.0;
			mapPixelX = ((mapPixel >>> 24 & 255) - 128) / 255.0 * mapPixelA;
			mapPixelY = ((mapPixel >>> 16 & 255) - 128) / 255.0 * mapPixelA;
			disX = mapPixelX * componentX.x + mapPixelY * componentY.x;
			disY = mapPixelX * componentX.y + mapPixelY * componentY.y;
			disOffsetXFloor = Math.floor(disX * sourceView.width);
			disOffsetYFloor = Math.floor(disY * sourceView.height);
			if(smooth) {
				var offset5 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor) * 4;
				var format5 = sourceFormat;
				var premultiplied5 = sourcePremultiplied;
				if(premultiplied5 == null) {
					premultiplied5 = false;
				}
				if(format5 == null) {
					format5 = 0;
				}
				switch(format5) {
				case 0:
					s1 = (sourceData[offset5] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5 + 2] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				case 1:
					s1 = (sourceData[offset5 + 1] & 255) << 24 | (sourceData[offset5 + 2] & 255) << 16 | (sourceData[offset5 + 3] & 255) << 8 | sourceData[offset5] & 255;
					break;
				case 2:
					s1 = (sourceData[offset5 + 2] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				}
				if(premultiplied5) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math_RGBA.__clamp[Math.round((s1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset6 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor + 1) * 4;
				var format6 = sourceFormat;
				var premultiplied6 = sourcePremultiplied;
				if(premultiplied6 == null) {
					premultiplied6 = false;
				}
				if(format6 == null) {
					format6 = 0;
				}
				switch(format6) {
				case 0:
					s2 = (sourceData[offset6] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6 + 2] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				case 1:
					s2 = (sourceData[offset6 + 1] & 255) << 24 | (sourceData[offset6 + 2] & 255) << 16 | (sourceData[offset6 + 3] & 255) << 8 | sourceData[offset6] & 255;
					break;
				case 2:
					s2 = (sourceData[offset6 + 2] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				}
				if(premultiplied6) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math_RGBA.__clamp[Math.round((s2 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset7 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor + 1) * 4;
				var format7 = sourceFormat;
				var premultiplied7 = sourcePremultiplied;
				if(premultiplied7 == null) {
					premultiplied7 = false;
				}
				if(format7 == null) {
					format7 = 0;
				}
				switch(format7) {
				case 0:
					s3 = (sourceData[offset7] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7 + 2] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				case 1:
					s3 = (sourceData[offset7 + 1] & 255) << 24 | (sourceData[offset7 + 2] & 255) << 16 | (sourceData[offset7 + 3] & 255) << 8 | sourceData[offset7] & 255;
					break;
				case 2:
					s3 = (sourceData[offset7 + 2] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				}
				if(premultiplied7) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math_RGBA.__clamp[Math.round((s3 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset8 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				var format8 = sourceFormat;
				var premultiplied8 = sourcePremultiplied;
				if(premultiplied8 == null) {
					premultiplied8 = false;
				}
				if(format8 == null) {
					format8 = 0;
				}
				switch(format8) {
				case 0:
					s4 = (sourceData[offset8] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8 + 2] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				case 1:
					s4 = (sourceData[offset8 + 1] & 255) << 24 | (sourceData[offset8 + 2] & 255) << 16 | (sourceData[offset8 + 3] & 255) << 8 | sourceData[offset8] & 255;
					break;
				case 2:
					s4 = (sourceData[offset8 + 2] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				}
				if(premultiplied8) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math_RGBA.__clamp[Math.round((s4 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				sourcePixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,disX * sourceView.width - disOffsetXFloor,disY * sourceView.height - disOffsetYFloor);
			} else {
				var offset9 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				var format9 = sourceFormat;
				var premultiplied9 = sourcePremultiplied;
				if(premultiplied9 == null) {
					premultiplied9 = false;
				}
				if(format9 == null) {
					format9 = 0;
				}
				switch(format9) {
				case 0:
					sourcePixel = (sourceData[offset9] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9 + 2] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[offset9 + 1] & 255) << 24 | (sourceData[offset9 + 2] & 255) << 16 | (sourceData[offset9 + 3] & 255) << 8 | sourceData[offset9] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[offset9 + 2] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				}
				if(premultiplied9) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
			}
			var format10 = targetFormat;
			var premultiplied10 = targetPremultiplied;
			if(premultiplied10 == null) {
				premultiplied10 = false;
			}
			if(format10 == null) {
				format10 = 0;
			}
			if(premultiplied10) {
				if((sourcePixel & 255) == 0) {
					if(sourcePixel != 0) {
						sourcePixel = 0;
					}
				} else if((sourcePixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
					sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(format10) {
			case 0:
				targetData[sourceOffset] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			case 1:
				targetData[sourceOffset] = sourcePixel & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 3] = sourcePixel >>> 8 & 255;
				break;
			case 2:
				targetData[sourceOffset] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			}
		}
	}
	target.dirty = true;
	target.version++;
};
lime__$internal_graphics_ImageDataUtil.bilinear = function(s1,s2,s3,s4,su,sv) {
	return lime__$internal_graphics_ImageDataUtil.lerpRGBA(lime__$internal_graphics_ImageDataUtil.lerpRGBA(s4,s2,su),lime__$internal_graphics_ImageDataUtil.lerpRGBA(s1,s3,su),sv);
};
lime__$internal_graphics_ImageDataUtil.lerpRGBA = function(v0,v1,x) {
	var result = 0;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 24 & 255,v1 >>> 24 & 255,x));
	result = (value & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 16 & 255,v1 >>> 16 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 8 & 255,v1 >>> 8 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | result & 255 & 255;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 & 255,v1 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | value & 255;
	return result;
};
lime__$internal_graphics_ImageDataUtil.lerp4f = function(v0,v1,x) {
	return new lime_math_Vector4(lime__$internal_graphics_ImageDataUtil.lerp(v0.x,v1.x,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.y,v1.y,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.z,v1.z,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.w,v1.w,x));
};
lime__$internal_graphics_ImageDataUtil.lerp = function(v0,v1,x) {
	return (1.0 - x) * v0 + x * v1;
};
lime__$internal_graphics_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math_ColorMatrix.getAlphaTable(colorMatrix);
	var redTable = lime_math_ColorMatrix.getRedTable(colorMatrix);
	var greenTable = lime_math_ColorMatrix.getGreenTable(colorMatrix);
	var blueTable = lime_math_ColorMatrix.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel = 0;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			offset = row + x * 4;
			var format1 = format;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			var format2 = format;
			var premultiplied2 = premultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel._hx_index) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel._hx_index) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel = 0;
	var destPixel = 0;
	var value = 0;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = srcFormat;
			var premultiplied = srcPremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			var format1 = destFormat;
			var premultiplied1 = destPremultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			var format2 = destFormat;
			var premultiplied2 = destPremultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false && image.get_format() == sourceImage.get_format()) {
		image.buffer.data.set(sourceImage.buffer.data);
	} else {
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if(sourceData == null || destData == null) {
			return;
		}
		var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
		var destRect = new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height);
		var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,destRect);
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePosition;
		var destPosition;
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var sourcePixel = 0;
		var destPixel = 0;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourceBytesPerPixel = sourceImage.buffer.bitsPerPixel / 8 | 0;
		var destBytesPerPixel = image.buffer.bitsPerPixel / 8 | 0;
		var useAlphaImage = alphaImage != null && alphaImage.get_transparent();
		var blend = mergeAlpha || useAlphaImage && !image.get_transparent() || !mergeAlpha && !image.get_transparent() && sourceImage.get_transparent();
		if(!useAlphaImage) {
			if(blend) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if(blendAlpha == 0) {
							destPixel = 0;
						} else {
							var value = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math_RGBA.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
						}
						var format2 = destFormat;
						var premultiplied2 = destPremultiplied;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						if(premultiplied2) {
							if((destPixel & 255) == 0) {
								if(destPixel != 0) {
									destPixel = 0;
								}
							} else if((destPixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
								destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(format2) {
						case 0:
							destData[destPosition] = destPixel >>> 24 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 8 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						case 1:
							destData[destPosition] = destPixel & 255;
							destData[destPosition + 1] = destPixel >>> 24 & 255;
							destData[destPosition + 2] = destPixel >>> 16 & 255;
							destData[destPosition + 3] = destPixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = destPixel >>> 8 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 24 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else if(sourceFormat == destFormat && sourcePremultiplied == destPremultiplied && sourceBytesPerPixel == destBytesPerPixel) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					destData.set(sourceData.subarray(sourcePosition,sourcePosition + destView.width * destBytesPerPixel),destPosition);
				}
			} else {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						if(premultiplied1) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format1) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			}
		} else {
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPosition;
			var alphaPixel = 0;
			var alphaView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(sourceView.x + (alphaPoint == null ? 0 : alphaPoint.x),sourceView.y + (alphaPoint == null ? 0 : alphaPoint.y),sourceView.width,sourceView.height));
			destView.clip(destPoint.x | 0,destPoint.y | 0,alphaView.width,alphaView.height);
			if(blend) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						var format2 = alphaFormat;
						var premultiplied2 = false;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						switch(format2) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied2) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						sourceAlpha = (alphaPixel & 255) / 255.0 * ((sourcePixel & 255) / 255.0);
						if(sourceAlpha > 0) {
							destAlpha = (destPixel & 255) / 255.0;
							oneMinusSourceAlpha = 1 - sourceAlpha;
							blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
							var value = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math_RGBA.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
							var format3 = destFormat;
							var premultiplied3 = destPremultiplied;
							if(premultiplied3 == null) {
								premultiplied3 = false;
							}
							if(format3 == null) {
								format3 = 0;
							}
							if(premultiplied3) {
								if((destPixel & 255) == 0) {
									if(destPixel != 0) {
										destPixel = 0;
									}
								} else if((destPixel & 255) != 255) {
									lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
									destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
								}
							}
							switch(format3) {
							case 0:
								destData[destPosition] = destPixel >>> 24 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >>> 24 & 255;
								destData[destPosition + 2] = destPixel >>> 16 & 255;
								destData[destPosition + 3] = destPixel >>> 8 & 255;
								break;
							case 2:
								destData[destPosition] = destPixel >>> 8 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							}
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			} else {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = alphaFormat;
						var premultiplied1 = false;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						var value = Math.round((sourcePixel & 255) * ((alphaPixel & 255) / 255));
						sourcePixel = (sourcePixel >>> 24 & 255 & 255) << 24 | (sourcePixel >>> 16 & 255 & 255) << 16 | (sourcePixel >>> 8 & 255 & 255) << 8 | value & 255;
						var format2 = destFormat;
						var premultiplied2 = destPremultiplied;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						if(premultiplied2) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format2) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var rgba = 0;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var offset = row + x * 4;
			var format1 = format;
			var premultiplied = false;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) {
						fillColor = 0;
					}
				} else if((fillColor & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
					fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	if(format == 1) {
		color = (color & 16777215) << 8 | color >> 24 & 255;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor = 0;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	var format1 = format;
	var premultiplied1 = premultiplied;
	if(premultiplied1 == null) {
		premultiplied1 = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied1) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (hitColor & 255);
			hitColor = (lime_math_RGBA.__clamp[Math.round((hitColor >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((hitColor >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((hitColor >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
		hitColor = (hitColor >>> 24 & 255 & 255) << 24 | (hitColor >>> 16 & 255 & 255) << 16 | (hitColor >>> 8 & 255 & 255) << 8 | 255;
	}
	if(fillColor == hitColor) {
		return;
	}
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor = 0;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) {
				continue;
			}
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			var format1 = format;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (readColor & 255);
					readColor = (lime_math_RGBA.__clamp[Math.round((readColor >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((readColor >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((readColor >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				var format2 = format;
				var premultiplied2 = false;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				if(premultiplied2) {
					if((fillColor & 255) == 0) {
						if(fillColor != 0) {
							fillColor = 0;
						}
					} else if((fillColor & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
						fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch(format2) {
				case 0:
					data[nextPointOffset] = fillColor >>> 24 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >>> 24 & 255;
					data[nextPointOffset + 2] = fillColor >>> 16 & 255;
					data[nextPointOffset + 3] = fillColor >>> 8 & 255;
					break;
				case 2:
					data[nextPointOffset] = fillColor >>> 8 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.gaussianBlur = function(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality,strength,color) {
	if(strength == null) {
		strength = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	var imagePremultiplied = image.get_premultiplied();
	if(imagePremultiplied) {
		image.set_premultiplied(false);
	}
	lime__$internal_graphics_StackBlur.blur(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality);
	image.dirty = true;
	image.version++;
	if(imagePremultiplied) {
		image.set_premultiplied(true);
	}
	return image;
};
lime__$internal_graphics_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb = mask;
		var rgba = 0;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_mask = rgba;
		break;
	case 2:
		var bgra = color;
		var rgba = 0;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba;
		var bgra = mask;
		var rgba = 0;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_mask = rgba;
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >>> 24 & 255 & 255) << 24 | (_color >>> 16 & 255 & 255) << 16 | (_color >>> 8 & 255 & 255) << 8 | 255;
		_mask = (_mask >>> 24 & 255 & 255) << 24 | (_mask >>> 16 & 255 & 255) << 16 | (_mask >>> 8 & 255 & 255) << 8 | 255;
	}
	var pixel;
	var hit;
	var _g = 0;
	var _g1 = image.width;
	while(_g < _g1) {
		var x = _g++;
		hit = false;
		var _g2 = 0;
		var _g3 = image.height;
		while(_g2 < _g3) {
			var y = _g2++;
			pixel = image.getPixel32(x,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(x < left) {
					left = x;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var ix;
	var _g = 0;
	var _g1 = image.width;
	while(_g < _g1) {
		var x = _g++;
		ix = image.width - 1 - x;
		hit = false;
		var _g2 = 0;
		var _g3 = image.height;
		while(_g2 < _g3) {
			var y = _g2++;
			pixel = image.getPixel32(ix,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(ix > right) {
					right = ix;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var _g = 0;
	var _g1 = image.height;
	while(_g < _g1) {
		var y = _g++;
		hit = false;
		var _g2 = 0;
		var _g3 = image.width;
		while(_g2 < _g3) {
			var x = _g2++;
			pixel = image.getPixel32(x,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(y < top) {
					top = y;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var iy;
	var _g = 0;
	var _g1 = image.height;
	while(_g < _g1) {
		var y = _g++;
		iy = image.height - 1 - y;
		hit = false;
		var _g2 = 0;
		var _g3 = image.width;
		while(_g2 < _g3) {
			var x = _g2++;
			pixel = image.getPixel32(x,iy,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(iy > bottom) {
					bottom = iy;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) {
		++w;
	}
	if(h > 0) {
		++h;
	}
	if(w < 0) {
		w = 0;
	}
	if(h < 0) {
		h = 0;
	}
	if(left == right) {
		w = 1;
	}
	if(top == bottom) {
		h = 1;
	}
	if(left > image.width) {
		left = 0;
	}
	if(top > image.height) {
		top = 0;
	}
	return new lime_math_Rectangle(left,top,w,h);
};
lime__$internal_graphics_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var argb = 0;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var bgra = 0;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		var argb = 0;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var bgra = 0;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) {
		return null;
	}
	var length = rect.width * rect.height | 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb = 0;
	var bgra = 0;
	var pixel = 0;
	var destPosition = 0;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		position = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format1 = sourceFormat;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				var argb1 = 0;
				argb1 = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
				argb = argb1;
				pixel = argb;
				break;
			case 2:
				var bgra1 = 0;
				bgra1 = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
				bgra = bgra1;
				pixel = bgra;
				break;
			default:
			}
			bytes.b[destPosition++] = pixel >>> 24 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 16 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 8 & 255 & 255;
			bytes.b[destPosition++] = pixel & 255 & 255;
			position += 4;
		}
	}
	return bytes;
};
lime__$internal_graphics_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) {
		return;
	}
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel = 0;
	var destPixel = 0;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		sourcePosition = sourceView.byteOffset + sourceView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = sourceFormat;
			var premultiplied = sourcePremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
					sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			var format1 = destFormat;
			var premultiplied1 = destPremultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >>> 24 & 255) * redMultiplier + (destPixel >>> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value1 = ((sourcePixel >>> 16 & 255) * greenMultiplier + (destPixel >>> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value2 = ((sourcePixel >>> 8 & 255) * blueMultiplier + (destPixel >>> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
			var format2 = destFormat;
			var premultiplied2 = destPremultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel = 0;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = false;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math_RGBA.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = true;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) {
		return;
	}
	var elements = newWidth * newHeight * 4;
	var array = null;
	var vector = null;
	var view = null;
	var buffer1 = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(vector != null) {
		this1 = new Uint8Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer1 != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer1,0);
		} else {
			this1 = new Uint8Array(buffer1,0,len);
		}
	} else {
		this1 = null;
	}
	var newBuffer = new lime_graphics_ImageBuffer(this1,newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	var _g1 = newHeight;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = newWidth;
		while(_g2 < _g3) {
			var x = _g2++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			sourceIndexX = sourceX < imageWidth - 1 ? sourceIndex + 4 : sourceIndex;
			sourceIndexY = sourceY < imageHeight - 1 ? sourceIndex + imageWidth * 4 : sourceIndex;
			sourceIndexXY = sourceIndexX != sourceIndex ? sourceIndexY + 4 : sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (UInt.toFloat(data[sourceIndex]) * uOpposite + UInt.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (UInt.toFloat(data[sourceIndexY]) * uOpposite + UInt.toFloat(data[sourceIndexXY]) * uRatio) * vRatio | 0;
			newData[index + 1] = (UInt.toFloat(data[sourceIndex + 1]) * uOpposite + UInt.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (UInt.toFloat(data[sourceIndexY + 1]) * uOpposite + UInt.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio | 0;
			newData[index + 2] = (UInt.toFloat(data[sourceIndex + 2]) * uOpposite + UInt.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (UInt.toFloat(data[sourceIndexY + 2]) * uOpposite + UInt.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) {
				newData[index + 3] = 0;
			} else {
				newData[index + 3] = data[sourceIndex + 3];
			}
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var elements = newWidth * newHeight * 4;
	var array = null;
	var vector = null;
	var view = null;
	var buffer1 = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(vector != null) {
		this1 = new Uint8Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer1 != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer1,0);
		} else {
			this1 = new Uint8Array(buffer1,0,len);
		}
	} else {
		this1 = null;
	}
	var newData = this1;
	var sourceIndex;
	var index;
	var _g = 0;
	var _g1 = buffer.height;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = buffer.width;
		while(_g2 < _g3) {
			var x = _g2++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	switch(image.get_format()) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var rgba = 0;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba;
		break;
	default:
		pixel = color;
	}
	var source = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (source & 255);
			source = (lime_math_RGBA.__clamp[Math.round((source >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((source >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((source >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | value & 255;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var rgba = 0;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba;
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	if(image.buffer.data == null) {
		return;
	}
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var bytes = bytePointer.bytes;
	var dataPosition = bytePointer.offset;
	var littleEndian = endian != lime_system_Endian.BIG_ENDIAN;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			if(littleEndian) {
				color = bytes.getInt32(dataPosition);
			} else {
				color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			}
			dataPosition += 4;
			switch(format) {
			case 1:
				var argb = color;
				var rgba = 0;
				rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
				pixel = rgba;
				break;
			case 2:
				var bgra = color;
				var rgba1 = 0;
				rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
				pixel = rgba1;
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
			}
			var offset = row + x * 4;
			var format1 = sourceFormat;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			if(premultiplied1) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb = mask;
		var rgba = 0;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_mask = rgba;
		var argb = threshold;
		var rgba = 0;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_threshold = rgba;
		break;
	case 2:
		var bgra = color;
		var rgba = 0;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba;
		var bgra = mask;
		var rgba = 0;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_mask = rgba;
		var bgra = threshold;
		var rgba = 0;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_threshold = rgba;
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) {
		return 0;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel = 0;
	var destPixel = 0;
	var pixelMask;
	var test;
	var value;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = srcFormat;
			var premultiplied = srcPremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			var tmp1 = pixelMask >>> 24 & 255;
			var tmp2 = _threshold >>> 24 & 255;
			if(tmp1 != tmp2) {
				value = UInt.gt(tmp1,tmp2) ? 1 : -1;
			} else {
				tmp1 = pixelMask >>> 16 & 255;
				tmp2 = _threshold >>> 16 & 255;
				if(tmp1 != tmp2) {
					value = UInt.gt(tmp1,tmp2) ? 1 : -1;
				} else {
					tmp1 = pixelMask >>> 8 & 255;
					tmp2 = _threshold >>> 8 & 255;
					if(tmp1 != tmp2) {
						value = UInt.gt(tmp1,tmp2) ? 1 : -1;
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						value = tmp1 != tmp2 ? UInt.gt(tmp1,tmp2) ? 1 : -1 : 0;
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				test = value == 0 || value == -1;
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				test = value == 0 || value == 1;
				break;
			default:
				test = false;
			}
			if(test) {
				var format1 = destFormat;
				var premultiplied1 = destPremultiplied;
				if(premultiplied1 == null) {
					premultiplied1 = false;
				}
				if(format1 == null) {
					format1 = 0;
				}
				if(premultiplied1) {
					if((_color & 255) == 0) {
						if(_color != 0) {
							_color = 0;
						}
					} else if((_color & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[_color & 255];
						_color = ((_color >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((_color >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((_color >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(format1) {
				case 0:
					destData[destPosition] = _color >>> 24 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >>> 24 & 255;
					destData[destPosition + 2] = _color >>> 16 & 255;
					destData[destPosition + 3] = _color >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = _color >>> 8 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				}
				++hits;
			} else if(copySource) {
				var format2 = destFormat;
				var premultiplied2 = destPremultiplied;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				if(premultiplied2) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) {
							srcPixel = 0;
						}
					} else if((srcPixel & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((srcPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((srcPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(format2) {
				case 0:
					destData[destPosition] = srcPixel >>> 24 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >>> 24 & 255;
					destData[destPosition + 2] = srcPixel >>> 16 & 255;
					destData[destPosition + 3] = srcPixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = srcPixel >>> 8 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel = 0;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = true;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math_RGBA.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = false;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.__boxBlur = function(imgA,imgB,w,h,bx,by) {
	imgB.set(imgA);
	var bx1 = bx | 0;
	var by1 = by | 0;
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,0);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,1);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,2);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,3);
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + 1;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + 2;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + 3;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurH = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = h;
	while(_g < _g1) {
		var i = _g++;
		ti = i * w;
		li = ti;
		ri = ti + r;
		fv = imgA[ti * 4 + off];
		lv = imgA[(ti + w - 1) * 4 + off];
		val = (r + 1) * fv;
		var _g2 = 0;
		var _g3 = r;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[(ti + j) * 4 + off];
		}
		var _g4 = 0;
		var _g5 = r + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri * 4 + off] - fv);
			imgB[ti * 4 + off] = Math.round(UInt.toFloat(val) * iarr);
			++ri;
			++ti;
		}
		var _g6 = r + 1;
		var _g7 = w - r;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri * 4 + off] - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(UInt.toFloat(val) * iarr);
			++ri;
			++li;
			++ti;
		}
		var _g8 = w - r;
		var _g9 = w;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(UInt.toFloat(val) * iarr);
			++li;
			++ti;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurT = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + off;
		li = ti;
		ri = ti + r * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (r + 1) * fv;
		var _g2 = 0;
		var _g3 = r;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = r + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = r + 1;
		var _g7 = h - r;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - r;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset = function(sourceRect,destPoint,destX,destY) {
	var sourceX = destX - (destPoint.x | 0);
	var sourceY = destY - (destPoint.y | 0);
	var offset = 0;
	if(sourceX < 0 || sourceY < 0 || sourceX >= sourceRect.width || sourceY >= sourceRect.height) {
		offset = -1;
	} else {
		offset = 4 * (sourceY * (sourceRect.width | 0) + sourceX);
	}
	return offset;
};
lime__$internal_graphics_ImageDataUtil.__getBoxesForGaussianBlur = function(sigma,n) {
	var wIdeal = Math.sqrt(12 * sigma * sigma / n + 1);
	var wl = Math.floor(wIdeal);
	if(wl % 2 == 0) {
		--wl;
	}
	var wu = wl + 2;
	var mIdeal = (12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4);
	var m = Math.round(mIdeal);
	var sizes = [];
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		sizes.push(i < m ? wl : wu);
	}
	return sizes;
};
lime__$internal_graphics_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1 = n1 >>> 24 & 255;
	var tmp2 = n2 >>> 24 & 255;
	if(tmp1 != tmp2) {
		if(UInt.gt(tmp1,tmp2)) {
			return 1;
		} else {
			return -1;
		}
	} else {
		tmp1 = n1 >>> 16 & 255;
		tmp2 = n2 >>> 16 & 255;
		if(tmp1 != tmp2) {
			if(UInt.gt(tmp1,tmp2)) {
				return 1;
			} else {
				return -1;
			}
		} else {
			tmp1 = n1 >>> 8 & 255;
			tmp2 = n2 >>> 8 & 255;
			if(tmp1 != tmp2) {
				if(UInt.gt(tmp1,tmp2)) {
					return 1;
				} else {
					return -1;
				}
			} else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) {
					if(UInt.gt(tmp1,tmp2)) {
						return 1;
					} else {
						return -1;
					}
				} else {
					return 0;
				}
			}
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__translatePixel = function(imgB,sourceRect,destRect,destPoint,destX,destY,strength) {
	var d = 4 * (destY * (destRect.width | 0) + destX);
	var s = lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset(sourceRect,destPoint,destX,destY);
	if(s < 0) {
		imgB[d] = imgB[d + 1] = imgB[d + 2] = imgB[d + 3] = 0;
	} else {
		imgB[d] = imgB[s];
		imgB[d + 1] = imgB[s + 1];
		imgB[d + 2] = imgB[s + 2];
		var a = UInt.toFloat(imgB[s + 3]) * strength | 0;
		imgB[d + 3] = a < 0 ? 0 : a > 255 ? 255 : a;
	}
};
var lime__$internal_graphics__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime._internal.graphics._ImageDataUtil.ImageDataView"] = lime__$internal_graphics__$ImageDataUtil_ImageDataView;
lime__$internal_graphics__$ImageDataUtil_ImageDataView.__name__ = "lime._internal.graphics._ImageDataUtil.ImageDataView";
lime__$internal_graphics__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,byteOffset: null
	,image: null
	,rect: null
	,stride: null
	,tempRect: null
	,clip: function(x,y,width,height) {
		if(this.tempRect == null) {
			this.tempRect = new lime_math_Rectangle();
		}
		this.tempRect.setTo(x,y,width,height);
		this.rect.intersection(this.tempRect,this.rect);
		this.__update();
	}
	,hasRow: function(y) {
		if(y >= 0) {
			return y < this.height;
		} else {
			return false;
		}
	}
	,offset: function(x,y) {
		if(x < 0) {
			this.rect.x += x;
			if(this.rect.x < 0) {
				this.rect.x = 0;
			}
		} else {
			this.rect.x += x;
			this.rect.width -= x;
		}
		if(y < 0) {
			this.rect.y += y;
			if(this.rect.y < 0) {
				this.rect.y = 0;
			}
		} else {
			this.rect.y += y;
			this.rect.height -= y;
		}
		this.__update();
	}
	,row: function(y) {
		return this.byteOffset + this.stride * y;
	}
	,__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime__$internal_graphics__$ImageDataUtil_ImageDataView
};
var lime__$internal_graphics_StackBlur = function() { };
$hxClasses["lime._internal.graphics.StackBlur"] = lime__$internal_graphics_StackBlur;
lime__$internal_graphics_StackBlur.__name__ = "lime._internal.graphics.StackBlur";
lime__$internal_graphics_StackBlur.blur = function(dest,source,sourceRect,destPoint,blurX,blurY,quality) {
	dest.copyPixels(source,sourceRect,destPoint);
	lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA(dest,sourceRect.width | 0,sourceRect.height | 0,blurX,blurY,quality);
};
lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA = function(image,width,height,blurX,blurY,quality) {
	var radiusX = Math.round(blurX) >> 1;
	var radiusY = Math.round(blurY) >> 1;
	if(lime__$internal_graphics_StackBlur.MUL_TABLE == null) {
		return;
	}
	if(radiusX >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusX = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusY >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusY = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusX < 0 || radiusY < 0) {
		return;
	}
	var iterations = quality;
	if(iterations < 1) {
		iterations = 1;
	}
	if(iterations > 3) {
		iterations = 3;
	}
	var px = image.get_data();
	var x;
	var y;
	var i;
	var p;
	var yp;
	var yi;
	var yw;
	var r;
	var g;
	var b;
	var a;
	var pr;
	var pg;
	var pb;
	var pa;
	var f;
	var divx = radiusX + radiusX + 1;
	var divy = radiusY + radiusY + 1;
	var w = width;
	var h = height;
	var w1 = w - 1;
	var h1 = h - 1;
	var rxp1 = radiusX + 1;
	var ryp1 = radiusY + 1;
	var ssx = new lime__$internal_graphics_BlurStack();
	var sx = ssx;
	var _g = 1;
	var _g1 = divx;
	while(_g < _g1) {
		var i1 = _g++;
		sx = sx.n = new lime__$internal_graphics_BlurStack();
	}
	sx.n = ssx;
	var ssy = new lime__$internal_graphics_BlurStack();
	var sy = ssy;
	var _g = 1;
	var _g1 = divy;
	while(_g < _g1) {
		var i1 = _g++;
		sy = sy.n = new lime__$internal_graphics_BlurStack();
	}
	sy.n = ssy;
	var si = null;
	var mtx = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusX];
	var stx = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusX];
	var mty = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusY];
	var sty = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusY];
	while(iterations > 0) {
		--iterations;
		yi = 0;
		yw = yi;
		var ms = mtx;
		var ss = stx;
		y = h;
		do {
			pr = px[yi];
			r = rxp1 * pr;
			pg = px[yi + 1];
			g = rxp1 * pg;
			pb = px[yi + 2];
			b = rxp1 * pb;
			pa = px[yi + 3];
			a = rxp1 * pa;
			sx = ssx;
			i = rxp1;
			do {
				sx.r = pr;
				sx.g = pg;
				sx.b = pb;
				sx.a = pa;
				sx = sx.n;
			} while(--i > -1);
			var _g = 1;
			var _g1 = rxp1;
			while(_g < _g1) {
				var i1 = _g++;
				p = yi + ((w1 < i1 ? w1 : i1) << 2);
				r += sx.r = px[p];
				g += sx.g = px[p + 1];
				b += sx.b = px[p + 2];
				a += sx.a = px[p + 3];
				sx = sx.n;
			}
			si = ssx;
			var _g2 = 0;
			var _g3 = w;
			while(_g2 < _g3) {
				var x = _g2++;
				px[yi++] = r * ms >>> ss;
				px[yi++] = g * ms >>> ss;
				px[yi++] = b * ms >>> ss;
				px[yi++] = a * ms >>> ss;
				p = x + radiusX + 1;
				p = yw + (p < w1 ? p : w1) << 2;
				r -= si.r - (si.r = px[p]);
				g -= si.g - (si.g = px[p + 1]);
				b -= si.b - (si.b = px[p + 2]);
				a -= si.a - (si.a = px[p + 3]);
				si = si.n;
			}
			yw += w;
		} while(--y > 0);
		ms = mty;
		ss = sty;
		var _g4 = 0;
		var _g5 = w;
		while(_g4 < _g5) {
			var x1 = _g4++;
			yi = x1 << 2;
			pr = px[yi];
			r = ryp1 * pr;
			pg = px[yi + 1];
			g = ryp1 * pg;
			pb = px[yi + 2];
			b = ryp1 * pb;
			pa = px[yi + 3];
			a = ryp1 * pa;
			sy = ssy;
			var _g6 = 0;
			var _g7 = ryp1;
			while(_g6 < _g7) {
				var i2 = _g6++;
				sy.r = pr;
				sy.g = pg;
				sy.b = pb;
				sy.a = pa;
				sy = sy.n;
			}
			yp = w;
			var _g8 = 1;
			var _g9 = radiusY + 1;
			while(_g8 < _g9) {
				var i3 = _g8++;
				yi = yp + x1 << 2;
				r += sy.r = px[yi];
				g += sy.g = px[yi + 1];
				b += sy.b = px[yi + 2];
				a += sy.a = px[yi + 3];
				sy = sy.n;
				if(i3 < h1) {
					yp += w;
				}
			}
			yi = x1;
			si = ssy;
			if(iterations > 0) {
				var _g10 = 0;
				var _g11 = h;
				while(_g10 < _g11) {
					var y1 = _g10++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						px[p] = r * ms >>> ss;
						px[p + 1] = g * ms >>> ss;
						px[p + 2] = b * ms >>> ss;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y1 + ryp1;
					p = x1 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			} else {
				var _g12 = 0;
				var _g13 = h;
				while(_g12 < _g13) {
					var y2 = _g12++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						f = 255 / pa;
						pr = (r * ms >>> ss) * f | 0;
						pg = (g * ms >>> ss) * f | 0;
						pb = (b * ms >>> ss) * f | 0;
						px[p] = pr > 255 ? 255 : pr;
						px[p + 1] = pg > 255 ? 255 : pg;
						px[p + 2] = pb > 255 ? 255 : pb;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y2 + ryp1;
					p = x1 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			}
		}
	}
};
var lime__$internal_graphics_BlurStack = function() {
	this.r = 0;
	this.g = 0;
	this.b = 0;
	this.a = 0;
	this.n = null;
};
$hxClasses["lime._internal.graphics.BlurStack"] = lime__$internal_graphics_BlurStack;
lime__$internal_graphics_BlurStack.__name__ = "lime._internal.graphics.BlurStack";
lime__$internal_graphics_BlurStack.prototype = {
	r: null
	,g: null
	,b: null
	,a: null
	,n: null
	,__class__: lime__$internal_graphics_BlurStack
};
var lime__$internal_macros_AssetsMacro = function() { };
$hxClasses["lime._internal.macros.AssetsMacro"] = lime__$internal_macros_AssetsMacro;
lime__$internal_macros_AssetsMacro.__name__ = "lime._internal.macros.AssetsMacro";
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = "lime.app.Event";
lime_app_Event.prototype = {
	canceled: null
	,__listeners: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,dispatch: null
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__class__: lime_app_Event
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				this.error = e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = "lime.app.Future";
lime_app_Future.ofEvents = function(onComplete,onError,onProgress) {
	var promise = new lime_app_Promise();
	onComplete.add(function(data) {
		promise.complete(data);
	},true);
	if(onError != null) {
		onError.add(function(error) {
			promise.error(error);
		},true);
	}
	if(onProgress != null) {
		onProgress.add(function(progress,total) {
			promise.progress(progress,total);
		},true);
	}
	return promise.future;
};
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	error: null
	,isComplete: null
	,isError: null
	,value: null
	,__completeListeners: null
	,__errorListeners: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,ready: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		if(this.isComplete || this.isError) {
			return this;
		} else {
			lime_utils_Log.warn("Cannot block thread in JavaScript",{ fileName : "lime/app/Future.hx", lineNumber : 208, className : "lime.app.Future", methodName : "ready"});
			return this;
		}
	}
	,result: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		this.ready(waitTime);
		if(this.isComplete) {
			return this.value;
		} else {
			return null;
		}
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.isError = true;
			future.error = this.error;
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future = next(val);
				future.onError($bind(promise,promise.error));
				future.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = "lime.app._Future.FutureWork";
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = "lime.app.Promise";
lime_app_Promise.prototype = {
	future: null
	,isComplete: null
	,isError: null
	,complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,get_isComplete: function() {
		return this.future.isComplete;
	}
	,get_isError: function() {
		return this.future.isError;
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isError:"get_isError",get_isComplete:"get_isComplete"}
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = "lime.app._Event_Dynamic_Void";
lime_app__$Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = "lime.app._Event_Float_Float_Int_Void";
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseButton_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseButton_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Float_Void";
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Void";
lime_app__$Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = "lime.app._Event_Int_Int_Void";
lime_app__$Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = "lime.app._Event_Int_Void";
lime_app__$Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = "lime.app._Event_Int_lime_ui_JoystickHatPosition_Void";
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = "lime.app._Event_String_Int_Int_Void";
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = "lime.app._Event_String_Void";
lime_app__$Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = "lime.app._Event_Void_Void";
lime_app__$Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = "lime.app._Event_lime_graphics_RenderContext_Void";
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = "lime.app._Event_lime_ui_GamepadAxis_Float_Void";
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = "lime.app._Event_lime_ui_GamepadButton_Void";
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = "lime.app._Event_lime_ui_Gamepad_Void";
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = "lime.app._Event_lime_ui_Joystick_Void";
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = "lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void";
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = "lime.app._Event_lime_ui_Touch_Void";
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$lime_$ui_$Window_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Window_Void"] = lime_app__$Event_$lime_$ui_$Window_$Void;
lime_app__$Event_$lime_$ui_$Window_$Void.__name__ = "lime.app._Event_lime_ui_Window_Void";
lime_app__$Event_$lime_$ui_$Window_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Window_$Void
};
var lime_app__$Event_$ofEvents_$T_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_ofEvents_T_Void"] = lime_app__$Event_$ofEvents_$T_$Void;
lime_app__$Event_$ofEvents_$T_$Void.__name__ = "lime.app._Event_ofEvents_T_Void";
lime_app__$Event_$ofEvents_$T_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l == listener) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(this.__listeners[i] == listener) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,removeAll: function() {
		var len = this.__listeners.length;
		this.__listeners.splice(0,len);
		this.__priorities.splice(0,len);
		this.__repeat.splice(0,len);
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$ofEvents_$T_$Void
};
var lime_graphics_CairoRenderContext = {};
lime_graphics_CairoRenderContext.fromRenderContext = function(context) {
	return context.cairo;
};
var lime_graphics_Canvas2DRenderContext = {};
lime_graphics_Canvas2DRenderContext.fromRenderContext = function(context) {
	return context.canvas2D;
};
var lime_graphics_DOMRenderContext = {};
lime_graphics_DOMRenderContext.fromRenderContext = function(context) {
	return context.dom;
};
var lime_graphics_FlashRenderContext = {};
lime_graphics_FlashRenderContext.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		type = lime_graphics_ImageType.CANVAS;
	}
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			switch(this.type._hx_index) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime__$internal_graphics_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var array = null;
				var vector = null;
				var view = null;
				var buffer1 = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer1 != null) {
					if(len == null) {
						this1 = new Uint8Array(buffer1,0);
					} else {
						this1 = new Uint8Array(buffer1,0,len);
					}
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = "lime.graphics.Image";
lime_graphics_Image.fromBase64 = function(base64,type) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromBytes(bytes)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromFile(path)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	if(base64 == null || type == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + base64);
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return lime_app_Future.withValue(null);
	}
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(lime_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(lime_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(lime_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes(bytes,type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) {
		return false;
	}
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255) {
		return bytes.b[bytes.length - 1] == 217;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) {
		return false;
	}
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,version: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math_ColorMatrix.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel._hx_index) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel._hx_index) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this && destPoint.x < sourceRect.get_right() && destPoint.y < sourceRect.get_bottom()) {
			sourceImage = this.clone();
		}
		if(alphaImage == sourceImage && (alphaPoint == null || alphaPoint.x == 0 && alphaPoint.y == 0)) {
			alphaImage = null;
			alphaPoint = null;
		}
		switch(this.type._hx_index) {
		case 0:
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
				if(alphaImage != null) {
					lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
				}
				lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
				lime__$internal_graphics_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			}
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
			}
			lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null ? alphaImage.buffer.get_src() : null,alphaPoint != null ? alphaPoint.__toFlashPoint() : null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) {
			quality = 90;
		}
		if(format == null) {
			return lime__$internal_format_PNG.encode(this);
		} else {
			switch(format._hx_index) {
			case 0:
				return lime__$internal_format_BMP.encode(this);
			case 1:
				return lime__$internal_format_JPEG.encode(this,quality);
			case 2:
				return lime__$internal_format_PNG.encode(this);
			}
		}
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime__$internal_graphics_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var argb1 = 0;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var argb1 = 0;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) {
			findColor = true;
		}
		if(this.buffer == null) {
			return null;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var rgba = 0;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var bgra = 0;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var rgba = 0;
					rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba1 = rgba;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var rgba = 0;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var bgra = 0;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var rgba = 0;
					rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba1 = rgba;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) {
			return null;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			lime__$internal_graphics_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return;
		}
	}
	,resize: function(newWidth,newHeight) {
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime__$internal_graphics_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var argb1 = 0;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var argb1 = 0;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytePointer,format,endian) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		if(endian == null) {
			endian = lime_system_Endian.BIG_ENDIAN;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(this.buffer == null || sourceImage == null || sourceRect == null) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			return lime__$internal_graphics_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format == null) {
				var rgba = color;
				var argb = 0;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_color = argb;
			} else {
				switch(format) {
				case 1:
					_color = color;
					break;
				case 2:
					var bgra = color;
					var argb = 0;
					argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_color = argb;
					break;
				default:
					var rgba = color;
					var argb = 0;
					argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					_color = argb;
				}
			}
			var _mask;
			if(format == null) {
				var rgba = mask;
				var argb = 0;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_mask = argb;
			} else {
				switch(format) {
				case 1:
					_mask = mask;
					break;
				case 2:
					var bgra = mask;
					var argb = 0;
					argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_mask = argb;
					break;
				default:
					var rgba = mask;
					var argb = 0;
					argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					_mask = argb;
				}
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new window.Image ();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			return false;
		}
		this.__fromBase64(lime__$internal_format_Base64.encode(bytes),type,onload);
		return true;
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new window.Image ();
		if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) {
			image.crossOrigin = "Anonymous";
		}
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
		var image1 = image.complete;
		return true;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		if(this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width) {
			if(this.buffer.height != 0) {
				return (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			if(newWidth == this.buffer.width && newHeight == this.buffer.height) {
				return value;
			}
			switch(this.type._hx_index) {
			case 0:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 1:
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			switch(this.type._hx_index) {
			case 0:case 1:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null && (this.buffer.data != null || this.type == lime_graphics_ImageType.DATA)) {
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = "lime.graphics.ImageBuffer";
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var array = null;
			var vector = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
			var elements = null;
			var array = null;
			var vector = null;
			var view = this.data;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			var copy = this1;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(((value) instanceof Image)) {
			this.__srcImage = value;
		} else if(((value) instanceof HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * (this.bitsPerPixel / 8 | 0);
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxEnums["lime.graphics.ImageChannel"] = { __ename__:"lime.graphics.ImageChannel",__constructs__:null
	,RED: {_hx_name:"RED",_hx_index:0,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,GREEN: {_hx_name:"GREEN",_hx_index:1,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,BLUE: {_hx_name:"BLUE",_hx_index:2,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,ALPHA: {_hx_name:"ALPHA",_hx_index:3,__enum__:"lime.graphics.ImageChannel",toString:$estr}
};
lime_graphics_ImageChannel.__constructs__ = [lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.GREEN,lime_graphics_ImageChannel.BLUE,lime_graphics_ImageChannel.ALPHA];
var lime_graphics_ImageFileFormat = $hxEnums["lime.graphics.ImageFileFormat"] = { __ename__:"lime.graphics.ImageFileFormat",__constructs__:null
	,BMP: {_hx_name:"BMP",_hx_index:0,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
	,JPEG: {_hx_name:"JPEG",_hx_index:1,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
	,PNG: {_hx_name:"PNG",_hx_index:2,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
};
lime_graphics_ImageFileFormat.__constructs__ = [lime_graphics_ImageFileFormat.BMP,lime_graphics_ImageFileFormat.JPEG,lime_graphics_ImageFileFormat.PNG];
var lime_graphics_ImageType = $hxEnums["lime.graphics.ImageType"] = { __ename__:"lime.graphics.ImageType",__constructs__:null
	,CANVAS: {_hx_name:"CANVAS",_hx_index:0,__enum__:"lime.graphics.ImageType",toString:$estr}
	,DATA: {_hx_name:"DATA",_hx_index:1,__enum__:"lime.graphics.ImageType",toString:$estr}
	,FLASH: {_hx_name:"FLASH",_hx_index:2,__enum__:"lime.graphics.ImageType",toString:$estr}
	,CUSTOM: {_hx_name:"CUSTOM",_hx_index:3,__enum__:"lime.graphics.ImageType",toString:$estr}
};
lime_graphics_ImageType.__constructs__ = [lime_graphics_ImageType.CANVAS,lime_graphics_ImageType.DATA,lime_graphics_ImageType.FLASH,lime_graphics_ImageType.CUSTOM];
var lime_graphics_OpenGLES2RenderContext = {};
lime_graphics_OpenGLES2RenderContext.fromGL = function(gl) {
	return null;
};
lime_graphics_OpenGLES2RenderContext.fromOpenGLES3RenderContext = function(gl) {
	return null;
};
lime_graphics_OpenGLES2RenderContext.fromRenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES2RenderContext.fromWebGLRenderContext = function(gl) {
	return null;
};
var lime_graphics_OpenGLES3RenderContext = {};
lime_graphics_OpenGLES3RenderContext.fromRenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromGL = function(gl) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromOpenGLES2RenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromWebGLRenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromWebGL2RenderContext = function(context) {
	return null;
};
var lime_graphics_OpenGLRenderContext = {};
lime_graphics_OpenGLRenderContext.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_RenderContext = function() {
};
$hxClasses["lime.graphics.RenderContext"] = lime_graphics_RenderContext;
lime_graphics_RenderContext.__name__ = "lime.graphics.RenderContext";
lime_graphics_RenderContext.prototype = {
	attributes: null
	,cairo: null
	,canvas2D: null
	,dom: null
	,flash: null
	,gl: null
	,gles2: null
	,gles3: null
	,type: null
	,version: null
	,webgl: null
	,webgl2: null
	,window: null
	,__class__: lime_graphics_RenderContext
};
var lime_graphics_WebGL2RenderContext = {};
lime_graphics_WebGL2RenderContext.bufferData = function(this1,target,srcData,usage,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_WebGL2RenderContext.bufferSubData = function(this1,target,dstByteOffset,srcData,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics_WebGL2RenderContext.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_WebGL2RenderContext.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_WebGL2RenderContext.getBufferSubData = function(this1,target,srcByteOffset,dstData,srcOffset,length) {
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics_WebGL2RenderContext.readPixels = function(this1,x,y,width,height,format,type,pixels,dstOffset) {
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_WebGL2RenderContext.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_WebGL2RenderContext.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_WebGL2RenderContext.uniform1fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform1iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform2fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform2iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform3fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform3iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform4fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform4iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniformMatrix2fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics_WebGL2RenderContext.uniformMatrix3fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics_WebGL2RenderContext.uniformMatrix4fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics_WebGL2RenderContext.fromGL = function(gl) {
	return null;
};
lime_graphics_WebGL2RenderContext.fromRenderContext = function(context) {
	return context.webgl2;
};
lime_graphics_WebGL2RenderContext.toWebGLRenderContext = function(gl) {
	return gl;
};
var lime_graphics_WebGLRenderContext = {};
lime_graphics_WebGLRenderContext.bufferData = function(this1,target,srcData,usage) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,null);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_WebGLRenderContext.bufferSubData = function(this1,target,offset,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.bufferSubData(target,offset,srcData,srcOffset,null);
	} else {
		this1.bufferSubData(target,offset,srcData);
	}
};
lime_graphics_WebGLRenderContext.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,null);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_WebGLRenderContext.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,null);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_WebGLRenderContext.readPixels = function(this1,x,y,width,height,format,type,pixels) {
	var dstOffset = null;
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_WebGLRenderContext.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_WebGLRenderContext.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix2fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix3fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix4fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.fromWebGL2RenderContext = function(gl) {
	return gl;
};
lime_graphics_WebGLRenderContext.fromRenderContext = function(context) {
	return context.webgl;
};
lime_graphics_WebGLRenderContext.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
var lime_graphics_cairo_Cairo = function(surface) {
	var tmp = surface != null;
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = "lime.graphics.cairo.Cairo";
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"};
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	target: null
	,userData: null
	,handle: null
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,getOperator: function() {
		return 0;
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,moveTo: function(x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,rotate: function(amount) {
	}
	,save: function() {
	}
	,scale: function(x,y) {
	}
	,setFontSize: function(size) {
	}
	,setOperator: function(value) {
		return value;
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showGlyphs: function(glyphs) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,textPath: function(utf8) {
	}
	,transform: function(matrix) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo_CairoFTFontFace = {};
lime_graphics_cairo_CairoFTFontFace._new = function() {
	return 0;
};
lime_graphics_cairo_CairoFTFontFace.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo_CairoFontFace = {};
lime_graphics_cairo_CairoFontFace._new = function() {
	return null;
};
lime_graphics_cairo_CairoFontFace.status = function(this1) {
	return 0;
};
var lime_graphics_cairo_CairoFontOptions = {};
lime_graphics_cairo_CairoFontOptions.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"};
lime_graphics_cairo_CairoFontOptions._new = function() {
	return null;
};
lime_graphics_cairo_CairoFontOptions.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoFontOptions.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoFontOptions.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoFontOptions.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoGlyph = function(index,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.index = index;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
lime_graphics_cairo_CairoGlyph.__name__ = "lime.graphics.cairo.CairoGlyph";
lime_graphics_cairo_CairoGlyph.prototype = {
	index: null
	,x: null
	,y: null
	,__class__: lime_graphics_cairo_CairoGlyph
};
var lime_graphics_cairo_CairoImageSurface = {};
lime_graphics_cairo_CairoImageSurface.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"};
lime_graphics_cairo_CairoImageSurface._new = function(format,width,height) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.fromImage = function(image) {
	return null;
};
lime_graphics_cairo_CairoImageSurface.get_data = function(this1) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_graphics_cairo_CairoImageSurface.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo_CairoPattern = {};
lime_graphics_cairo_CairoPattern.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"};
lime_graphics_cairo_CairoPattern._new = function(handle) {
	return handle;
};
lime_graphics_cairo_CairoPattern.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo_CairoPattern.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo_CairoPattern.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo_CairoPattern.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoPattern.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoPattern.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo_CairoPattern.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoSurface = {};
lime_graphics_cairo_CairoSurface.flush = function(this1) {
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = "lime.graphics.opengl.GL";
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.beginQuery = function(target,query) {
	lime_graphics_opengl_GL.context.beginQuery(target,query);
};
lime_graphics_opengl_GL.beginTransformFeedback = function(primitiveNode) {
	lime_graphics_opengl_GL.context.beginTransformFeedback(primitiveNode);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindBufferBase = function(target,index,buffer) {
	lime_graphics_opengl_GL.context.bindBufferBase(target,index,buffer);
};
lime_graphics_opengl_GL.bindBufferRange = function(target,index,buffer,offset,size) {
	lime_graphics_opengl_GL.context.bindBufferRange(target,index,buffer,offset,lime_utils_DataPointer.fromFloat(size));
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindSampler = function(unit,sampler) {
	lime_graphics_opengl_GL.context.bindSampler(unit,sampler);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.bindTransformFeedback = function(target,transformFeedback) {
	lime_graphics_opengl_GL.context.bindTransformFeedback(target,transformFeedback);
};
lime_graphics_opengl_GL.bindVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.bindVertexArray(vertexArray);
};
lime_graphics_opengl_GL.blitFramebuffer = function(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	lime_graphics_opengl_GL.context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferDataWEBGL = function(target,srcData,usage,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_opengl_GL.bufferSubDataWEBGL = function(target,dstByteOffset,srcData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearBufferfi = function(buffer,drawbuffer,depth,stencil) {
	lime_graphics_opengl_GL.context.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
lime_graphics_opengl_GL.clearBufferfvWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferfv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferuivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferuiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.clientWaitSync = function(sync,flags,timeout) {
	return lime_graphics_opengl_GL.context.clientWaitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2DWEBGL = function(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.compressedTexSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.copyTexSubImage3D = function(target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createQuery = function() {
	return lime_graphics_opengl_GL.context.createQuery();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createSampler = function() {
	return lime_graphics_opengl_GL.context.createSampler();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.createTransformFeedback = function() {
	return lime_graphics_opengl_GL.context.createTransformFeedback();
};
lime_graphics_opengl_GL.createVertexArray = function() {
	return lime_graphics_opengl_GL.context.createVertexArray();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteQuery = function(query) {
	lime_graphics_opengl_GL.context.deleteQuery(query);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteSampler = function(sampler) {
	lime_graphics_opengl_GL.context.deleteSampler(sampler);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteSync = function(sync) {
	lime_graphics_opengl_GL.context.deleteSync(sync);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.deleteTransformFeedback = function(transformFeedback) {
	lime_graphics_opengl_GL.context.deleteTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.deleteVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.deleteVertexArray(vertexArray);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawArraysInstanced = function(mode,first,count,instanceCount) {
	lime_graphics_opengl_GL.context.drawArraysInstanced(mode,first,count,instanceCount);
};
lime_graphics_opengl_GL.drawBuffers = function(buffers) {
	lime_graphics_opengl_GL.context.drawBuffers(buffers);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.drawElementsInstanced = function(mode,count,type,offset,instanceCount) {
	lime_graphics_opengl_GL.context.drawElementsInstanced(mode,count,type,offset,instanceCount);
};
lime_graphics_opengl_GL.drawRangeElements = function(mode,start,end,count,type,offset) {
	lime_graphics_opengl_GL.context.drawRangeElements(mode,start,end,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.endQuery = function(target) {
	lime_graphics_opengl_GL.context.endQuery(target);
};
lime_graphics_opengl_GL.endTransformFeedback = function() {
	lime_graphics_opengl_GL.context.endTransformFeedback();
};
lime_graphics_opengl_GL.fenceSync = function(condition,flags) {
	return lime_graphics_opengl_GL.context.fenceSync(condition,flags);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.framebufferTextureLayer = function(target,attachment,texture,level,layer) {
	lime_graphics_opengl_GL.context.framebufferTextureLayer(target,attachment,texture,level,layer);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getActiveUniformBlockName = function(program,uniformBlockIndex) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockName(program,uniformBlockIndex);
};
lime_graphics_opengl_GL.getActiveUniformBlockParameter = function(program,uniformBlockIndex,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl_GL.getActiveUniforms = function(program,uniformIndices,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniforms(program,uniformIndices,pname);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getBufferSubDataWEBGL = function(target,srcByteOffset,dstData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFragDataLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getFragDataLocation(program,name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getIndexedParameter = function(target,index) {
	return lime_graphics_opengl_GL.context.getIndexedParameter(target,index);
};
lime_graphics_opengl_GL.getInternalformatParameter = function(target,internalformat,pname) {
	return lime_graphics_opengl_GL.context.getInternalformatParameter(target,internalformat,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getQuery = function(target,pname) {
	return lime_graphics_opengl_GL.context.getQuery(target,pname);
};
lime_graphics_opengl_GL.getQueryParameter = function(query,pname) {
	return lime_graphics_opengl_GL.context.getQueryParameter(query,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getSamplerParameter = function(sampler,pname) {
	return lime_graphics_opengl_GL.context.getSamplerParameter(sampler,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getSyncParameter = function(sync,pname) {
	return lime_graphics_opengl_GL.context.getSyncParameter(sync,pname);
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getTransformFeedbackVarying = function(program,index) {
	return lime_graphics_opengl_GL.context.getTransformFeedbackVarying(program,index);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformBlockIndex = function(program,uniformBlockName) {
	return lime_graphics_opengl_GL.context.getUniformBlockIndex(program,uniformBlockName);
};
lime_graphics_opengl_GL.getUniformIndices = function(program,uniformNames) {
	return lime_graphics_opengl_GL.context.getUniformIndices(program,uniformNames);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_utils_DataPointer.fromFloat(lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.invalidateFramebuffer = function(target,attachments) {
	lime_graphics_opengl_GL.context.invalidateFramebuffer(target,attachments);
};
lime_graphics_opengl_GL.invalidateSubFramebuffer = function(target,attachments,x,y,width,height) {
	lime_graphics_opengl_GL.context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isQuery = function(query) {
	return lime_graphics_opengl_GL.context.isQuery(query);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isSampler = function(sampler) {
	return lime_graphics_opengl_GL.context.isSampler(sampler);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isSync = function(sync) {
	return lime_graphics_opengl_GL.context.isSync(sync);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.isTransformFeedback = function(transformFeedback) {
	return lime_graphics_opengl_GL.context.isTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.isVertexArray = function(vertexArray) {
	return lime_graphics_opengl_GL.context.isVertexArray(vertexArray);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pauseTransformFeedback = function() {
	lime_graphics_opengl_GL.context.pauseTransformFeedback();
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readBuffer = function(src) {
	lime_graphics_opengl_GL.context.readBuffer(src);
};
lime_graphics_opengl_GL.readPixelsWEBGL = function(x,y,width,height,format,type,pixels,dstOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.renderbufferStorageMultisample = function(target,samples,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
lime_graphics_opengl_GL.resumeTransformFeedback = function() {
	lime_graphics_opengl_GL.context.resumeTransformFeedback();
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.samplerParameterf = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameterf(sampler,pname,param);
};
lime_graphics_opengl_GL.samplerParameteri = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameteri(sampler,pname,param);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2DWEBGL = function(target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_opengl_GL.texImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
	lime_graphics_opengl_GL.context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl_GL.texStorage2D = function(target,level,internalformat,width,height) {
	lime_graphics_opengl_GL.context.texStorage2D(target,level,internalformat,width,height);
};
lime_graphics_opengl_GL.texStorage3D = function(target,level,internalformat,width,height,depth) {
	lime_graphics_opengl_GL.context.texStorage3D(target,level,internalformat,width,height,depth);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_opengl_GL.texSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset) {
	lime_graphics_opengl_GL.context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset);
};
lime_graphics_opengl_GL.transformFeedbackVaryings = function(program,varyings,bufferMode) {
	lime_graphics_opengl_GL.context.transformFeedbackVaryings(program,varyings,bufferMode);
};
lime_graphics_opengl_GL.uniform1f = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1f(location,v0);
};
lime_graphics_opengl_GL.uniform1fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1i = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1i(location,v0);
};
lime_graphics_opengl_GL.uniform1ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1ui = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1ui(location,v0);
};
lime_graphics_opengl_GL.uniform1uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform1uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2f = function(location,v0,v1) {
	lime_graphics_opengl_GL.context.uniform2f(location,v0,v1);
};
lime_graphics_opengl_GL.uniform2fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_WebGL2RenderContext.uniform2fv(lime_graphics_opengl_GL.context,location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform2ui = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2ui(location,x,y);
};
lime_graphics_opengl_GL.uniform2uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform2uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform3f = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3f(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3i = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3i(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3ui = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3ui(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform3uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform4f = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4f(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4i = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4i(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4ui = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4ui(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform4uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformBlockBinding = function(program,uniformBlockIndex,uniformBlockBinding) {
	lime_graphics_opengl_GL.context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
lime_graphics_opengl_GL.uniformMatrix2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix2x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix2x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix3x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix4x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(index,v0) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(index,v0);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib1fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(index,v0,v1) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(index,v0,v1);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(index,v0,v1,v2) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(index,v0,v1,v2);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttribDivisor = function(index,divisor) {
	lime_graphics_opengl_GL.context.vertexAttribDivisor(index,divisor);
};
lime_graphics_opengl_GL.vertexAttribI4i = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4i(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4iv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ui = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4ui(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4uiv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4uivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribIPointer = function(index,size,type,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribIPointer(index,size,type,stride,offset);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(index,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(index,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.waitSync = function(sync,flags,timeout) {
	lime_graphics_opengl_GL.context.waitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.__getObjectID = function(object) {
	if(object == null) {
		return 0;
	} else {
		return object.id;
	}
};
var lime_graphics_opengl_GLProgram = {};
lime_graphics_opengl_GLProgram.fromSources = function(gl,vertexSource,fragmentSource) {
	var vertexShader = lime_graphics_opengl_GLShader.fromSource(gl,vertexSource,gl.VERTEX_SHADER);
	var fragmentShader = lime_graphics_opengl_GLShader.fromSource(gl,fragmentSource,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	gl.attachShader(program,vertexShader);
	gl.attachShader(program,fragmentShader);
	gl.linkProgram(program);
	if(gl.getProgramParameter(program,35714) == 0) {
		var message = "Unable to initialize the shader program";
		message += "\n" + lime_graphics_opengl_GL.context.getProgramInfoLog(program);
		lime_utils_Log.error(message,{ fileName : "lime/graphics/opengl/GLProgram.hx", lineNumber : 39, className : "lime.graphics.opengl._GLProgram.GLProgram_Impl_", methodName : "fromSources"});
	}
	return program;
};
var lime_graphics_opengl_GLShader = {};
lime_graphics_opengl_GLShader.fromSource = function(gl,source,type) {
	var shader = gl.createShader(type);
	gl.shaderSource(shader,source);
	gl.compileShader(shader);
	var shaderInfoLog = gl.getShaderInfoLog(shader);
	var compileStatus = gl.getShaderParameter(shader,gl.COMPILE_STATUS);
	if(shaderInfoLog != null || compileStatus == 0) {
		var message;
		if(compileStatus == 0) {
			message = "Error ";
		} else {
			message = "Info ";
		}
		if(type == gl.VERTEX_SHADER) {
			message = "compiling vertex shader";
		} else if(type == gl.FRAGMENT_SHADER) {
			message = "compiling fragment shader";
		} else {
			message = "compiling unknown shader type";
		}
		message += "\n" + shaderInfoLog;
		if(compileStatus == 0) {
			lime_utils_Log.error(message,{ fileName : "lime/graphics/opengl/GLShader.hx", lineNumber : 47, className : "lime.graphics.opengl._GLShader.GLShader_Impl_", methodName : "fromSource"});
		} else if(shaderInfoLog != null) {
			lime_utils_Log.debug(message,{ fileName : "lime/graphics/opengl/GLShader.hx", lineNumber : 48, className : "lime.graphics.opengl._GLShader.GLShader_Impl_", methodName : "fromSource"});
		}
	}
	return shader;
};
var lime_graphics_opengl_ext_KHR_$debug = function() {
	this.STACK_UNDERFLOW = 1284;
	this.STACK_OVERFLOW = 1283;
	this.CONTEXT_FLAG_DEBUG_BIT = 2;
	this.DEBUG_OUTPUT = 37600;
	this.DEBUG_SEVERITY_LOW = 37192;
	this.DEBUG_SEVERITY_MEDIUM = 37191;
	this.DEBUG_SEVERITY_HIGH = 37190;
	this.DEBUG_LOGGED_MESSAGES = 37189;
	this.MAX_DEBUG_LOGGED_MESSAGES = 37188;
	this.MAX_DEBUG_MESSAGE_LENGTH = 37187;
	this.MAX_LABEL_LENGTH = 33512;
	this.SAMPLER = 33510;
	this.QUERY = 33507;
	this.PROGRAM = 33506;
	this.SHADER = 33505;
	this.BUFFER = 33504;
	this.DEBUG_GROUP_STACK_DEPTH = 33389;
	this.MAX_DEBUG_GROUP_STACK_DEPTH = 33388;
	this.DEBUG_SEVERITY_NOTIFICATION = 33387;
	this.DEBUG_TYPE_POP_GROUP = 33386;
	this.DEBUG_TYPE_PUSH_GROUP = 33385;
	this.DEBUG_TYPE_MARKER = 33384;
	this.DEBUG_TYPE_OTHER = 33361;
	this.DEBUG_TYPE_PERFORMANCE = 33360;
	this.DEBUG_TYPE_PORTABILITY = 33359;
	this.DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;
	this.DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;
	this.DEBUG_TYPE_ERROR = 33356;
	this.DEBUG_SOURCE_OTHER = 33355;
	this.DEBUG_SOURCE_APPLICATION = 33354;
	this.DEBUG_SOURCE_THIRD_PARTY = 33353;
	this.DEBUG_SOURCE_SHADER_COMPILER = 33352;
	this.DEBUG_SOURCE_WINDOW_SYSTEM = 33351;
	this.DEBUG_SOURCE_API = 33350;
	this.DEBUG_CALLBACK_USER_PARAM = 33349;
	this.DEBUG_CALLBACK_FUNCTION = 33348;
	this.DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;
	this.DEBUG_OUTPUT_SYNCHRONOUS = 33346;
};
$hxClasses["lime.graphics.opengl.ext.KHR_debug"] = lime_graphics_opengl_ext_KHR_$debug;
lime_graphics_opengl_ext_KHR_$debug.__name__ = "lime.graphics.opengl.ext.KHR_debug";
lime_graphics_opengl_ext_KHR_$debug.prototype = {
	DEBUG_OUTPUT_SYNCHRONOUS: null
	,DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: null
	,DEBUG_CALLBACK_FUNCTION: null
	,DEBUG_CALLBACK_USER_PARAM: null
	,DEBUG_SOURCE_API: null
	,DEBUG_SOURCE_WINDOW_SYSTEM: null
	,DEBUG_SOURCE_SHADER_COMPILER: null
	,DEBUG_SOURCE_THIRD_PARTY: null
	,DEBUG_SOURCE_APPLICATION: null
	,DEBUG_SOURCE_OTHER: null
	,DEBUG_TYPE_ERROR: null
	,DEBUG_TYPE_DEPRECATED_BEHAVIOR: null
	,DEBUG_TYPE_UNDEFINED_BEHAVIOR: null
	,DEBUG_TYPE_PORTABILITY: null
	,DEBUG_TYPE_PERFORMANCE: null
	,DEBUG_TYPE_OTHER: null
	,DEBUG_TYPE_MARKER: null
	,DEBUG_TYPE_PUSH_GROUP: null
	,DEBUG_TYPE_POP_GROUP: null
	,DEBUG_SEVERITY_NOTIFICATION: null
	,MAX_DEBUG_GROUP_STACK_DEPTH: null
	,DEBUG_GROUP_STACK_DEPTH: null
	,BUFFER: null
	,SHADER: null
	,PROGRAM: null
	,QUERY: null
	,SAMPLER: null
	,MAX_LABEL_LENGTH: null
	,MAX_DEBUG_MESSAGE_LENGTH: null
	,MAX_DEBUG_LOGGED_MESSAGES: null
	,DEBUG_LOGGED_MESSAGES: null
	,DEBUG_SEVERITY_HIGH: null
	,DEBUG_SEVERITY_MEDIUM: null
	,DEBUG_SEVERITY_LOW: null
	,DEBUG_OUTPUT: null
	,CONTEXT_FLAG_DEBUG_BIT: null
	,STACK_OVERFLOW: null
	,STACK_UNDERFLOW: null
	,__class__: lime_graphics_opengl_ext_KHR_$debug
};
var lime_math_ARGB = {};
lime_math_ARGB.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
lime_math_ARGB._new = function(argb) {
	if(argb == null) {
		argb = 0;
	}
	return argb;
};
lime_math_ARGB.create = function(a,r,g,b) {
	var argb = 0;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_ARGB.multiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) == 0) {
		this1 = 0;
	} else if((this1 >>> 24 & 255) != 255) {
		lime_math_ARGB.a16 = lime_math_RGBA.__alpha16[this1 >>> 24 & 255];
		this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_ARGB.a16 >> 16 & 255;
	}
};
lime_math_ARGB.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
			lime_math_ARGB.unmult = 255.0 / (this1 >>> 24 & 255);
			this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_ARGB.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_ARGB.unmult)] & 255) << 8 | lime_math_RGBA.__clamp[Math.floor((this1 & 255) * lime_math_ARGB.unmult)] & 255;
		}
	}
};
lime_math_ARGB.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_ARGB.unmultiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
		lime_math_ARGB.unmult = 255.0 / (this1 >>> 24 & 255);
		this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_ARGB.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_ARGB.unmult)] & 255) << 8 | lime_math_RGBA.__clamp[Math.floor((this1 & 255) * lime_math_ARGB.unmult)] & 255;
	}
};
lime_math_ARGB.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) == 0) {
			this1 = 0;
		} else if((this1 >>> 24 & 255) != 255) {
			lime_math_ARGB.a16 = lime_math_RGBA.__alpha16[this1 >>> 24 & 255];
			this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_ARGB.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 16 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	}
};
lime_math_ARGB.__fromBGRA = function(bgra) {
	var argb = 0;
	argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
	return argb;
};
lime_math_ARGB.__fromRGBA = function(rgba) {
	var argb = 0;
	argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
	return argb;
};
lime_math_ARGB.get_a = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_ARGB.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_ARGB.get_b = function(this1) {
	return this1 & 255;
};
lime_math_ARGB.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_ARGB.get_g = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_ARGB.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_ARGB.get_r = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_ARGB.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_BGRA = {};
lime_math_BGRA.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
lime_math_BGRA._new = function(bgra) {
	if(bgra == null) {
		bgra = 0;
	}
	return bgra;
};
lime_math_BGRA.create = function(b,g,r,a) {
	var bgra = 0;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_BGRA.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_BGRA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_BGRA.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_BGRA.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_RGBA.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_BGRA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_BGRA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_BGRA.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_BGRA.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_BGRA.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_BGRA.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_RGBA.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_BGRA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_BGRA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_BGRA.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_BGRA.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_BGRA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_BGRA.__fromARGB = function(argb) {
	var bgra = 0;
	bgra = (argb & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb >>> 16 & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return bgra;
};
lime_math_BGRA.__fromRGBA = function(rgba) {
	var bgra = 0;
	bgra = (rgba >>> 8 & 255 & 255) << 24 | (rgba >>> 16 & 255 & 255) << 16 | (rgba >>> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_BGRA.get_a = function(this1) {
	return this1 & 255;
};
lime_math_BGRA.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_BGRA.get_b = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_BGRA.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_BGRA.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_BGRA.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_BGRA.get_r = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_BGRA.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_ColorMatrix = {};
lime_math_ColorMatrix.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"};
lime_math_ColorMatrix._new = function(data) {
	var this1;
	if(data != null && data.length == 20) {
		this1 = data;
	} else {
		var elements = null;
		var array = lime_math_ColorMatrix.__identity;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2;
		if(elements != null) {
			this2 = new Float32Array(elements);
		} else if(array != null) {
			this2 = new Float32Array(array);
		} else if(vector != null) {
			this2 = new Float32Array(vector.__array);
		} else if(view != null) {
			this2 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,0);
			} else {
				this2 = new Float32Array(buffer,0,len);
			}
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math_ColorMatrix.clone = function(this1) {
	var elements = null;
	var array = null;
	var vector = null;
	var view = lime_utils_Float32Array.toArrayBufferView(this1);
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(vector != null) {
		this1 = new Float32Array(vector.__array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	return lime_math_ColorMatrix._new(this1);
};
lime_math_ColorMatrix.concat = function(this1,second) {
	this1[0] += second[0];
	this1[6] += second[6];
	this1[12] += second[12];
	this1[18] += second[18];
};
lime_math_ColorMatrix.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math_ColorMatrix.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math_ColorMatrix.getAlphaTable = function(this1) {
	if(lime_math_ColorMatrix.__alphaTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		lime_math_ColorMatrix.__alphaTable = new Uint8Array(256);
	}
	var value;
	lime_math_ColorMatrix.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__alphaTable[i] = value;
	}
	return lime_math_ColorMatrix.__alphaTable;
};
lime_math_ColorMatrix.getBlueTable = function(this1) {
	if(lime_math_ColorMatrix.__blueTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		lime_math_ColorMatrix.__blueTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__blueTable[i] = value;
	}
	return lime_math_ColorMatrix.__blueTable;
};
lime_math_ColorMatrix.getGreenTable = function(this1) {
	if(lime_math_ColorMatrix.__greenTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		lime_math_ColorMatrix.__greenTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__greenTable[i] = value;
	}
	return lime_math_ColorMatrix.__greenTable;
};
lime_math_ColorMatrix.getRedTable = function(this1) {
	if(lime_math_ColorMatrix.__redTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		lime_math_ColorMatrix.__redTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__redTable[i] = value;
	}
	return lime_math_ColorMatrix.__redTable;
};
lime_math_ColorMatrix.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math_ColorMatrix.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math_ColorMatrix.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math_ColorMatrix.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math_ColorMatrix.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math_ColorMatrix.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math_ColorMatrix.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math_ColorMatrix.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math_ColorMatrix.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math_ColorMatrix.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math_ColorMatrix.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math_ColorMatrix.get_color(this1);
};
lime_math_ColorMatrix.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math_ColorMatrix.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math_ColorMatrix.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math_ColorMatrix.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math_ColorMatrix.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math_ColorMatrix.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math_ColorMatrix.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math_ColorMatrix.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math_ColorMatrix.get = function(this1,index) {
	return this1[index];
};
lime_math_ColorMatrix.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = "lime.math.Matrix3";
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector4.x;
			this.b = vector4.y;
		} else if(column == 1) {
			this.c = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
			this.tx = vector4.z;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
			this.ty = vector4.z;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(matrix3) {
		if(matrix3 != null && this.tx == matrix3.tx && this.ty == matrix3.ty && this.a == matrix3.a && this.b == matrix3.b && this.c == matrix3.c) {
			return this.d == matrix3.d;
		} else {
			return false;
		}
	}
	,deltaTransformVector: function(Vector2,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = Vector2.x * this.a + Vector2.y * this.c;
		result.y = Vector2.x * this.b + Vector2.y * this.d;
		return result;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformRect: function(rect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var tx0 = this.a * rect.x + this.c * rect.y;
		var tx1 = tx0;
		var ty0 = this.b * rect.x + this.d * rect.y;
		var ty1 = ty0;
		var tx = this.a * (rect.x + rect.width) + this.c * rect.y;
		var ty = this.b * (rect.x + rect.width) + this.d * rect.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * (rect.x + rect.width) + this.c * (rect.y + rect.height);
		ty = this.b * (rect.x + rect.width) + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * rect.x + this.c * (rect.y + rect.height);
		ty = this.b * rect.x + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		result.setTo(tx0 + tx,ty0 + ty,tx1 - tx0,ty1 - ty0);
		return result;
	}
	,transformVector: function(pos,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = pos.x * this.a + pos.y * this.c + this.tx;
		result.y = pos.x * this.b + pos.y * this.d + this.ty;
		return result;
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__class__: lime_math_Matrix3
};
var lime_math_Matrix4 = {};
lime_math_Matrix4.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"};
lime_math_Matrix4._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var elements = null;
		var array = lime_math_Matrix4.__identity;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2;
		if(elements != null) {
			this2 = new Float32Array(elements);
		} else if(array != null) {
			this2 = new Float32Array(array);
		} else if(vector != null) {
			this2 = new Float32Array(vector.__array);
		} else if(view != null) {
			this2 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,0);
			} else {
				this2 = new Float32Array(buffer,0,len);
			}
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math_Matrix4.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math_Matrix4.get(lhs,0);
	var m221 = lime_math_Matrix4.get(lhs,4);
	var m231 = lime_math_Matrix4.get(lhs,8);
	var m241 = lime_math_Matrix4.get(lhs,12);
	var m212 = lime_math_Matrix4.get(lhs,1);
	var m222 = lime_math_Matrix4.get(lhs,5);
	var m232 = lime_math_Matrix4.get(lhs,9);
	var m242 = lime_math_Matrix4.get(lhs,13);
	var m213 = lime_math_Matrix4.get(lhs,2);
	var m223 = lime_math_Matrix4.get(lhs,6);
	var m233 = lime_math_Matrix4.get(lhs,10);
	var m243 = lime_math_Matrix4.get(lhs,14);
	var m214 = lime_math_Matrix4.get(lhs,3);
	var m224 = lime_math_Matrix4.get(lhs,7);
	var m234 = lime_math_Matrix4.get(lhs,11);
	var m244 = lime_math_Matrix4.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math_Matrix4.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math_Matrix4.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math_Matrix4.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math_Matrix4.append(this1,m);
};
lime_math_Matrix4.appendScale = function(this1,xScale,yScale,zScale) {
	var elements = null;
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(vector != null) {
		this2 = new Float32Array(vector.__array);
	} else if(view != null) {
		this2 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	lime_math_Matrix4.append(this1,lime_math_Matrix4._new(this2));
};
lime_math_Matrix4.appendTranslation = function(this1,x,y,z) {
	this1[12] += x;
	this1[13] += y;
	this1[14] += z;
};
lime_math_Matrix4.clone = function(this1) {
	var elements = null;
	var array = null;
	var vector = null;
	var view = lime_utils_Float32Array.toArrayBufferView(this1);
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(vector != null) {
		this1 = new Float32Array(vector.__array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	return lime_math_Matrix4._new(this1);
};
lime_math_Matrix4.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 187, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnFrom"});
	}
};
lime_math_Matrix4.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 225, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnTo"});
	}
};
lime_math_Matrix4.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math_Matrix4.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 272, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowFrom"});
	}
};
lime_math_Matrix4.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 310, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowTo"});
	}
};
lime_math_Matrix4.create2D = function(this1,a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	this1[0] = a;
	this1[1] = b;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = c;
	this1[5] = d;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = tx;
	this1[13] = ty;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math_Matrix4.createOrtho = function(this1,left,right,bottom,top,zNear,zFar) {
	var sx = 1.0 / (right - left);
	var sy = 1.0 / (top - bottom);
	var sz = 1.0 / (zFar - zNear);
	this1[0] = 2 * sx;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 2 * sy;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = -2 * sz;
	this1[11] = 0;
	this1[12] = -(left + right) * sx;
	this1[13] = -(bottom + top) * sy;
	this1[14] = -(zNear + zFar) * sz;
	this1[15] = 1;
};
lime_math_Matrix4.deltaTransformVector = function(this1,v,result) {
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var x = v.x;
	var y = v.y;
	var z = v.z;
	result.x = x * this1[0] + y * this1[4] + z * this1[8] + this1[3];
	result.y = x * this1[1] + y * this1[5] + z * this1[9] + this1[7];
	result.z = x * this1[2] + y * this1[6] + z * this1[10] + this1[11];
	return result;
};
lime_math_Matrix4.fromMatrix3 = function(matrix3) {
	var mat = lime_math_Matrix4._new();
	lime_math_Matrix4.create2D(mat,matrix3.a,matrix3.b,matrix3.c,matrix3.d,matrix3.tx,matrix3.ty);
	return mat;
};
lime_math_Matrix4.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math_Matrix4.interpolate = function(thisMat,toMat,percent,result) {
	if(result == null) {
		result = lime_math_Matrix4._new();
	}
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math_Matrix4.set(result,i,lime_math_Matrix4.get(thisMat,i) + (lime_math_Matrix4.get(toMat,i) - lime_math_Matrix4.get(thisMat,i)) * percent);
	}
	return result;
};
lime_math_Matrix4.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] += (lime_math_Matrix4.get(toMat,i) - this1[i]) * percent;
	}
};
lime_math_Matrix4.invert = function(this1) {
	var d = lime_math_Matrix4.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math_Matrix4.pointAt = function(this1,pos,at,up) {
	if(at == null) {
		at = new lime_math_Vector4(0,0,1);
	}
	if(up == null) {
		up = new lime_math_Vector4(0,1,0);
	}
	var result = null;
	if(result == null) {
		result = new lime_math_Vector4();
	}
	result.x = pos.x - at.x;
	result.y = pos.y - at.y;
	result.z = pos.z - at.z;
	var dir = result;
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var l = Math.sqrt(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);
	if(l != 0) {
		dir.x /= l;
		dir.y /= l;
		dir.z /= l;
	}
	var l = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
	if(l != 0) {
		vup.x /= l;
		vup.y /= l;
		vup.z /= l;
	}
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	var s = vup.x * dir.x + vup.y * dir.y + vup.z * dir.z;
	dir2.x *= s;
	dir2.y *= s;
	dir2.z *= s;
	var result = null;
	if(result == null) {
		result = new lime_math_Vector4();
	}
	result.x = vup.x - dir2.x;
	result.y = vup.y - dir2.y;
	result.z = vup.z - dir2.z;
	vup = result;
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) {
		var l = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
		if(l != 0) {
			vup.x /= l;
			vup.y /= l;
			vup.z /= l;
		}
	} else if(dir.x != 0) {
		vup = new lime_math_Vector4(-dir.y,dir.x,0);
	} else {
		vup = new lime_math_Vector4(1,0,0);
	}
	var result = null;
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var ya = vup.z * dir.x - vup.x * dir.z;
	var za = vup.x * dir.y - vup.y * dir.x;
	result.x = vup.y * dir.z - vup.z * dir.y;
	result.y = ya;
	result.z = za;
	result.w = 1;
	var right = result;
	var l = Math.sqrt(right.x * right.x + right.y * right.y + right.z * right.z);
	if(l != 0) {
		right.x /= l;
		right.y /= l;
		right.z /= l;
	}
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math_Matrix4.prepend = function(this1,rhs) {
	var m111 = lime_math_Matrix4.get(rhs,0);
	var m121 = lime_math_Matrix4.get(rhs,4);
	var m131 = lime_math_Matrix4.get(rhs,8);
	var m141 = lime_math_Matrix4.get(rhs,12);
	var m112 = lime_math_Matrix4.get(rhs,1);
	var m122 = lime_math_Matrix4.get(rhs,5);
	var m132 = lime_math_Matrix4.get(rhs,9);
	var m142 = lime_math_Matrix4.get(rhs,13);
	var m113 = lime_math_Matrix4.get(rhs,2);
	var m123 = lime_math_Matrix4.get(rhs,6);
	var m133 = lime_math_Matrix4.get(rhs,10);
	var m143 = lime_math_Matrix4.get(rhs,14);
	var m114 = lime_math_Matrix4.get(rhs,3);
	var m124 = lime_math_Matrix4.get(rhs,7);
	var m134 = lime_math_Matrix4.get(rhs,11);
	var m144 = lime_math_Matrix4.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math_Matrix4.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math_Matrix4.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math_Matrix4.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math_Matrix4.prepend(this1,m);
};
lime_math_Matrix4.prependScale = function(this1,xScale,yScale,zScale) {
	var elements = null;
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(vector != null) {
		this2 = new Float32Array(vector.__array);
	} else if(view != null) {
		this2 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	lime_math_Matrix4.prepend(this1,lime_math_Matrix4._new(this2));
};
lime_math_Matrix4.prependTranslation = function(this1,x,y,z) {
	var m = lime_math_Matrix4._new();
	lime_math_Matrix4.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math_Matrix4.prepend(this1,m);
};
lime_math_Matrix4.transformVector = function(this1,v,result) {
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var x = v.x;
	var y = v.y;
	var z = v.z;
	result.x = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
	result.y = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
	result.z = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
	result.w = x * this1[3] + y * this1[7] + z * this1[11] + this1[15];
	return result;
};
lime_math_Matrix4.transformVectors = function(this1,ain,aout) {
	var i = 0;
	var x;
	var y;
	var z;
	while(i + 3 <= ain.length) {
		x = ain[i];
		y = ain[i + 1];
		z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math_Matrix4.transpose = function(this1) {
	var temp = this1[1];
	this1[1] = this1[4];
	this1[4] = temp;
	var temp = this1[2];
	this1[2] = this1[8];
	this1[8] = temp;
	var temp = this1[3];
	this1[3] = this1[12];
	this1[12] = temp;
	var temp = this1[6];
	this1[6] = this1[9];
	this1[9] = temp;
	var temp = this1[7];
	this1[7] = this1[13];
	this1[13] = temp;
	var temp = this1[11];
	this1[11] = this1[14];
	this1[14] = temp;
};
lime_math_Matrix4.__getAxisRotation = function(this1,x,y,z,degrees) {
	var m = lime_math_Matrix4._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math_Matrix4.set(m,0,c + a1.x * a1.x * t);
	lime_math_Matrix4.set(m,5,c + a1.y * a1.y * t);
	lime_math_Matrix4.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math_Matrix4.set(m,4,tmp1 + tmp2);
	lime_math_Matrix4.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math_Matrix4.set(m,8,tmp1 - tmp2);
	lime_math_Matrix4.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math_Matrix4.set(m,9,tmp1 + tmp2);
	lime_math_Matrix4.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math_Matrix4.__swap = function(this1,a,b) {
	var temp = this1[a];
	this1[a] = this1[b];
	this1[b] = temp;
};
lime_math_Matrix4.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math_Matrix4.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math_Matrix4.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math_Matrix4.get = function(this1,index) {
	return this1[index];
};
lime_math_Matrix4.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_RGBA = {};
lime_math_RGBA.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
lime_math_RGBA._new = function(rgba) {
	if(rgba == null) {
		rgba = 0;
	}
	return rgba;
};
lime_math_RGBA.create = function(r,g,b,a) {
	var rgba = 0;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_RGBA.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) {
			this1 = 0;
		}
	} else if((this1 & 255) != 255) {
		lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_RGBA.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_RGBA.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_RGBA.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_RGBA.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_RGBA.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_RGBA.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_RGBA.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) {
				this1 = 0;
			}
		} else if((this1 & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 24 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 8 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_RGBA.__fromARGB = function(argb) {
	var rgba = 0;
	rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return rgba;
};
lime_math_RGBA.__fromBGRA = function(bgra) {
	var rgba = 0;
	rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_RGBA.get_a = function(this1) {
	return this1 & 255;
};
lime_math_RGBA.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_RGBA.get_b = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_RGBA.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_RGBA.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_RGBA.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_RGBA.get_r = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_RGBA.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = "lime.math.Rectangle";
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.containsVector(point);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,containsVector: function(vector) {
		return this.contains(vector.x,vector.y);
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflateVector: function(vector) {
		this.inflate(vector.x,vector.y);
	}
	,intersection: function(toIntersect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			result.setEmpty();
			return result;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			result.setEmpty();
			return result;
		}
		result.x = x0;
		result.y = y0;
		result.width = x1 - x0;
		result.height = y1 - y0;
		return result;
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetVector: function(vector) {
		this.x += vector.x;
		this.y += vector.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,union: function(toUnion,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		if(this.width == 0 || this.height == 0) {
			result.copyFrom(toUnion);
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			result.copyFrom(this);
		} else {
			var x0 = this.x > toUnion.x ? toUnion.x : this.x;
			var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
			var y0 = this.y > toUnion.y ? toUnion.y : this.y;
			var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
			result.setTo(x0,y0,x1 - x0,y1 - y0);
		}
		return result;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = "lime.math.Vector2";
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	result.x = pt2.x + f * (pt1.x - pt2.x);
	result.y = pt2.y + f * (pt1.y - pt2.y);
	return result;
};
lime_math_Vector2.polar = function(len,angle,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	var ya = len * Math.sin(angle);
	result.x = len * Math.cos(angle);
	result.y = ya;
	return result;
};
lime_math_Vector2.prototype = {
	x: null
	,y: null
	,add: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = v.x + this.x;
		result.y = v.y + this.y;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = this.x - v.x;
		result.y = this.y - v.y;
		return result;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = "lime.math.Vector4";
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"};
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	var l = Math.sqrt(a0.x * a0.x + a0.y * a0.y + a0.z * a0.z);
	if(l != 0) {
		a0.x /= l;
		a0.y /= l;
		a0.z /= l;
	}
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	var l = Math.sqrt(b0.x * b0.x + b0.y * b0.y + b0.z * b0.z);
	if(l != 0) {
		b0.x /= l;
		b0.y /= l;
		b0.z /= l;
	}
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.distanceSquared = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return x * x + y * y + z * z;
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,add: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		result.x = this.x + a.x;
		result.y = this.y + a.y;
		result.z = this.z + a.z;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		var ya = this.z * a.x - this.x * a.z;
		var za = this.x * a.y - this.y * a.x;
		result.x = this.y * a.z - this.z * a.y;
		result.y = ya;
		result.z = za;
		result.w = 1;
		return result;
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		result.x = this.x - a.x;
		result.y = this.y - a.y;
		result.z = this.z - a.z;
		return result;
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_media_AudioBuffer = function() {
};
$hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
lime_media_AudioBuffer.__name__ = "lime.media.AudioBuffer";
lime_media_AudioBuffer.fromBase64 = function(base64String) {
	if(base64String == null) {
		return null;
	}
	if(base64String.indexOf(",") == -1) {
		base64String = "data:" + lime_media_AudioBuffer.__getCodec(lime__$internal_format_Base64.decode(base64String)) + ";base64," + base64String;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : [base64String], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : ["data:" + lime_media_AudioBuffer.__getCodec(bytes) + ";base64," + lime__$internal_format_Base64.encode(bytes)], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromVorbisFile = function(vorbisFile) {
	return null;
};
lime_media_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function(id,msg) {
				promise.error(msg);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.__getCodec = function(bytes) {
	var signature = bytes.getString(0,4);
	switch(signature) {
	case "OggS":
		return "audio/ogg";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") {
			return "audio/wav";
		} else {
			var _g = bytes.b[1];
			var _g1 = bytes.b[2];
			switch(bytes.b[0]) {
			case 73:
				if(_g == 68) {
					if(_g1 == 51) {
						return "audio/mp3";
					}
				}
				break;
			case 255:
				switch(_g) {
				case 243:case 250:case 251:
					return "audio/mp3";
				default:
				}
				break;
			default:
			}
		}
		break;
	case "fLaC":
		return "audio/flac";
	default:
		var _g = bytes.b[1];
		var _g1 = bytes.b[2];
		switch(bytes.b[0]) {
		case 73:
			if(_g == 68) {
				if(_g1 == 51) {
					return "audio/mp3";
				}
			}
			break;
		case 255:
			switch(_g) {
			case 243:case 250:case 251:
				return "audio/mp3";
			default:
			}
			break;
		default:
		}
	}
	lime_utils_Log.error("Unsupported sound format",{ fileName : "lime/media/AudioBuffer.hx", lineNumber : 362, className : "lime.media.AudioBuffer", methodName : "__getCodec"});
	return null;
};
lime_media_AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,sampleRate: null
	,__srcAudio: null
	,__srcBuffer: null
	,__srcCustom: null
	,__srcHowl: null
	,__srcSound: null
	,__srcVorbisFile: null
	,dispose: function() {
		this.__srcHowl.unload();
	}
	,get_src: function() {
		return this.__srcHowl;
	}
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_media_AudioBuffer
	,__properties__: {set_src:"set_src",get_src:"get_src"}
};
var lime_media_AudioContext = function(type) {
	if(type != "custom") {
		if(type == null || type == "web") {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				this.web = new window.AudioContext ();
				this.type = "web";
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
		if(this.web == null && type != "web") {
			this.html5 = new lime_media_HTML5AudioContext();
			this.type = "html5";
		}
	} else {
		this.type = "custom";
	}
};
$hxClasses["lime.media.AudioContext"] = lime_media_AudioContext;
lime_media_AudioContext.__name__ = "lime.media.AudioContext";
lime_media_AudioContext.prototype = {
	custom: null
	,flash: null
	,html5: null
	,openal: null
	,type: null
	,web: null
	,__class__: lime_media_AudioContext
};
var lime_media_AudioManager = function() { };
$hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
lime_media_AudioManager.__name__ = "lime.media.AudioManager";
lime_media_AudioManager.init = function(context) {
	if(lime_media_AudioManager.context == null) {
		if(context == null) {
			lime_media_AudioManager.context = new lime_media_AudioContext();
			context = lime_media_AudioManager.context;
			if(context.type == "openal") {
				var alc = context.openal;
				var device = alc.openDevice();
				var ctx = alc.createContext(device);
				alc.makeContextCurrent(ctx);
				alc.processContext(ctx);
			}
		}
		lime_media_AudioManager.context = context;
	}
};
lime_media_AudioManager.resume = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			var device = alc.getContextsDevice(currentContext);
			alc.resumeDevice(device);
			alc.processContext(currentContext);
		}
	}
};
lime_media_AudioManager.shutdown = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			var device = alc.getContextsDevice(currentContext);
			alc.makeContextCurrent(null);
			alc.destroyContext(currentContext);
			if(device != null) {
				alc.closeDevice(device);
			}
		}
	}
	lime_media_AudioManager.context = null;
};
lime_media_AudioManager.suspend = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			alc.suspendContext(currentContext);
			var device = alc.getContextsDevice(currentContext);
			if(device != null) {
				alc.pauseDevice(device);
			}
		}
	}
};
var lime_media_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) {
		loops = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	this.__backend = new lime__$internal_backend_html5_HTML5AudioSource(this);
	if(length != null && length != 0) {
		this.set_length(length);
	}
	this.set_loops(loops);
	if(buffer != null) {
		this.init();
	}
};
$hxClasses["lime.media.AudioSource"] = lime_media_AudioSource;
lime_media_AudioSource.__name__ = "lime.media.AudioSource";
lime_media_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,__backend: null
	,dispose: function() {
		this.__backend.dispose();
	}
	,init: function() {
		this.__backend.init();
	}
	,play: function() {
		this.__backend.play();
	}
	,pause: function() {
		this.__backend.pause();
	}
	,stop: function() {
		this.__backend.stop();
	}
	,get_currentTime: function() {
		return this.__backend.getCurrentTime();
	}
	,set_currentTime: function(value) {
		return this.__backend.setCurrentTime(value);
	}
	,get_gain: function() {
		return this.__backend.getGain();
	}
	,set_gain: function(value) {
		return this.__backend.setGain(value);
	}
	,get_length: function() {
		return this.__backend.getLength();
	}
	,set_length: function(value) {
		return this.__backend.setLength(value);
	}
	,get_loops: function() {
		return this.__backend.getLoops();
	}
	,set_loops: function(value) {
		return this.__backend.setLoops(value);
	}
	,get_pitch: function() {
		return this.__backend.getPitch();
	}
	,set_pitch: function(value) {
		return this.__backend.setPitch(value);
	}
	,get_position: function() {
		return this.__backend.getPosition();
	}
	,set_position: function(value) {
		return this.__backend.setPosition(value);
	}
	,__class__: lime_media_AudioSource
	,__properties__: {set_position:"set_position",get_position:"get_position",set_pitch:"set_pitch",get_pitch:"get_pitch",set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_media_FlashAudioContext = function() {
};
$hxClasses["lime.media.FlashAudioContext"] = lime_media_FlashAudioContext;
lime_media_FlashAudioContext.__name__ = "lime.media.FlashAudioContext";
lime_media_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) {
			startPosition = -1;
		}
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0;
		}
		return null;
	}
	,__class__: lime_media_FlashAudioContext
};
var lime_media_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
lime_media_HTML5AudioContext.__name__ = "lime.media.HTML5AudioContext";
lime_media_HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.canPlayType(type);
		}
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_media_AudioBuffer();
		buffer.__srcAudio = new Audio();
		buffer.__srcAudio.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.autoplay;
		}
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.buffered;
		}
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentSrc;
		}
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentTime;
		}
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.defaultPlaybackRate;
		}
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.duration;
		}
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.ended;
		}
		return false;
	}
	,getError: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.error;
		}
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.loop;
		}
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.muted;
		}
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.networkState;
		}
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.paused;
		}
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.played;
		}
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.preload;
		}
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.readyState;
		}
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seekable;
		}
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seeking;
		}
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.src;
		}
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.volume;
		}
		return 1;
	}
	,load: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.load();
		}
	}
	,pause: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.pause();
		}
	}
	,play: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.play();
		}
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.autoplay = value;
		}
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.currentTime = value;
		}
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.defaultPlaybackRate = value;
		}
	}
	,setLoop: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.loop = value;
		}
	}
	,setMuted: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.muted = value;
		}
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.playbackRate = value;
		}
	}
	,setPreload: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.preload = value;
		}
	}
	,setSrc: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.src = value;
		}
	}
	,setVolume: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.volume = value;
		}
	}
	,__class__: lime_media_HTML5AudioContext
};
var lime_media_OpenALAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.media.OpenALAudioContext"] = lime_media_OpenALAudioContext;
lime_media_OpenALAudioContext.__name__ = "lime.media.OpenALAudioContext";
lime_media_OpenALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,bufferData: function(buffer,format,data,size,freq) {
		lime_media_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_media_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_media_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_media_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_media_openal_AL.bufferiv(buffer,param,values);
	}
	,closeDevice: function(device) {
		return lime_media_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_media_openal_ALC.createContext(device,attrlist);
	}
	,createBuffer: function() {
		return lime_media_openal_AL.createBuffer();
	}
	,createSource: function() {
		return lime_media_openal_AL.createSource();
	}
	,deleteBuffer: function(buffer) {
		lime_media_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_media_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_media_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_media_openal_AL.deleteSources(sources);
	}
	,destroyContext: function(context) {
		if(context == null) {
			return;
		}
		lime_media_openal_ALC.destroyContext(context);
	}
	,disable: function(capability) {
		lime_media_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_media_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_media_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_media_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_media_openal_AL.enable(capability);
	}
	,genSource: function() {
		return this.createSource();
	}
	,genSources: function(n) {
		return lime_media_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return this.createBuffer();
	}
	,genBuffers: function(n) {
		return lime_media_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_media_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_media_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_media_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferiv(buffer,param,count);
	}
	,getContextsDevice: function(context) {
		if(context == null) {
			return null;
		}
		return lime_media_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_media_openal_ALC.getCurrentContext();
	}
	,getDouble: function(param) {
		return lime_media_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_media_openal_AL.getEnumValue(ename);
	}
	,getError: function(device) {
		if(device == null) {
			return lime_media_openal_AL.getError();
		} else {
			return lime_media_openal_ALC.getError(device);
		}
	}
	,getErrorString: function(device) {
		if(device == null) {
			return lime_media_openal_AL.getErrorString();
		} else {
			return lime_media_openal_ALC.getErrorString(device);
		}
	}
	,getFloat: function(param) {
		return lime_media_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_media_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count,device) {
		if(count == null) {
			count = 1;
		}
		if(device == null) {
			return lime_media_openal_AL.getIntegerv(param,count);
		} else {
			return lime_media_openal_ALC.getIntegerv(device,param,count);
		}
	}
	,getListener3f: function(param) {
		return lime_media_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_media_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_media_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_media_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_media_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_media_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_media_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_media_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_media_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param,device) {
		if(device == null) {
			return lime_media_openal_AL.getString(param);
		} else {
			return lime_media_openal_ALC.getString(device,param);
		}
	}
	,isBuffer: function(buffer) {
		return lime_media_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_media_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_media_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_media_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_media_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_media_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_media_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_media_openal_AL.listeneriv(param,values);
	}
	,makeContextCurrent: function(context) {
		return lime_media_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_media_openal_ALC.openDevice(deviceName);
	}
	,pauseDevice: function(device) {
		lime_media_openal_ALC.pauseDevice(device);
	}
	,processContext: function(context) {
		lime_media_openal_ALC.processContext(context);
	}
	,resumeDevice: function(device) {
		lime_media_openal_ALC.resumeDevice(device);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_media_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_media_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_media_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_media_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_media_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_media_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_media_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_media_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_media_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_media_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_media_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_media_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_media_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_media_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_media_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_media_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_media_openal_AL.speedOfSound(value);
	}
	,suspendContext: function(context) {
		lime_media_openal_ALC.suspendContext(context);
	}
	,__class__: lime_media_OpenALAudioContext
};
var lime_media_openal_AL = function() { };
$hxClasses["lime.media.openal.AL"] = lime_media_openal_AL;
lime_media_openal_AL.__name__ = "lime.media.openal.AL";
lime_media_openal_AL.removeDirectFilter = function(source) {
};
lime_media_openal_AL.removeSend = function(source,index) {
};
lime_media_openal_AL.auxf = function(aux,param,value) {
};
lime_media_openal_AL.auxfv = function(aux,param,values) {
};
lime_media_openal_AL.auxi = function(aux,param,value) {
};
lime_media_openal_AL.auxiv = function(aux,param,values) {
};
lime_media_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_media_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.bufferf = function(buffer,param,value) {
};
lime_media_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_media_openal_AL.bufferi = function(buffer,param,value) {
};
lime_media_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_media_openal_AL.createAux = function() {
	return null;
};
lime_media_openal_AL.createBuffer = function() {
	return null;
};
lime_media_openal_AL.createEffect = function() {
	return null;
};
lime_media_openal_AL.createFilter = function() {
	return null;
};
lime_media_openal_AL.createSource = function() {
	return null;
};
lime_media_openal_AL.deleteBuffer = function(buffer) {
};
lime_media_openal_AL.deleteBuffers = function(buffers) {
};
lime_media_openal_AL.deleteSource = function(source) {
};
lime_media_openal_AL.deleteSources = function(sources) {
};
lime_media_openal_AL.disable = function(capability) {
};
lime_media_openal_AL.distanceModel = function(distanceModel) {
};
lime_media_openal_AL.dopplerFactor = function(value) {
};
lime_media_openal_AL.dopplerVelocity = function(value) {
};
lime_media_openal_AL.effectf = function(effect,param,value) {
};
lime_media_openal_AL.effectfv = function(effect,param,values) {
};
lime_media_openal_AL.effecti = function(effect,param,value) {
};
lime_media_openal_AL.effectiv = function(effect,param,values) {
};
lime_media_openal_AL.enable = function(capability) {
};
lime_media_openal_AL.genSource = function() {
	return null;
};
lime_media_openal_AL.genSources = function(n) {
	return null;
};
lime_media_openal_AL.genBuffer = function() {
	return null;
};
lime_media_openal_AL.genBuffers = function(n) {
	return null;
};
lime_media_openal_AL.getBoolean = function(param) {
	return false;
};
lime_media_openal_AL.getBooleanv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getDouble = function(param) {
	return 0;
};
lime_media_openal_AL.getDoublev = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_media_openal_AL.getError = function() {
	return 0;
};
lime_media_openal_AL.getErrorString = function() {
	switch(lime_media_openal_AL.getError()) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_AL.getFilteri = function(filter,param) {
	return 0;
};
lime_media_openal_AL.getFloat = function(param) {
	return 0;
};
lime_media_openal_AL.getFloatv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getInteger = function(param) {
	return 0;
};
lime_media_openal_AL.getIntegerv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListener3f = function(param) {
	return null;
};
lime_media_openal_AL.getListener3i = function(param) {
	return null;
};
lime_media_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_media_openal_AL.getListenerfv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_media_openal_AL.getListeneriv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getParameter = function(param) {
	return null;
};
lime_media_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_media_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getString = function(param) {
	return null;
};
lime_media_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_media_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_media_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_media_openal_AL.isAux = function(aux) {
	return false;
};
lime_media_openal_AL.isEffect = function(effect) {
	return false;
};
lime_media_openal_AL.isFilter = function(filter) {
	return false;
};
lime_media_openal_AL.isSource = function(source) {
	return false;
};
lime_media_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listenerf = function(param,value) {
};
lime_media_openal_AL.listenerfv = function(param,values) {
};
lime_media_openal_AL.listeneri = function(param,value) {
};
lime_media_openal_AL.listeneriv = function(param,values) {
};
lime_media_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.sourcef = function(source,param,value) {
};
lime_media_openal_AL.sourcefv = function(source,param,values) {
};
lime_media_openal_AL.sourcei = function(source,param,value) {
};
lime_media_openal_AL.filteri = function(filter,param,value) {
};
lime_media_openal_AL.filterf = function(filter,param,value) {
};
lime_media_openal_AL.sourceiv = function(source,param,values) {
};
lime_media_openal_AL.sourcePlay = function(source) {
};
lime_media_openal_AL.sourcePlayv = function(sources) {
};
lime_media_openal_AL.sourceStop = function(source) {
};
lime_media_openal_AL.sourceStopv = function(sources) {
};
lime_media_openal_AL.sourceRewind = function(source) {
};
lime_media_openal_AL.sourceRewindv = function(sources) {
};
lime_media_openal_AL.sourcePause = function(source) {
};
lime_media_openal_AL.sourcePausev = function(sources) {
};
lime_media_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_media_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_media_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_media_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_media_openal_AL.speedOfSound = function(value) {
};
var lime_media_openal_ALAuxiliaryEffectSlot = {};
lime_media_openal_ALAuxiliaryEffectSlot._new = function(handle) {
	return handle;
};
var lime_media_openal_ALBuffer = {};
lime_media_openal_ALBuffer._new = function(handle) {
	return handle;
};
var lime_media_openal_ALC = function() { };
$hxClasses["lime.media.openal.ALC"] = lime_media_openal_ALC;
lime_media_openal_ALC.__name__ = "lime.media.openal.ALC";
lime_media_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_media_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_media_openal_ALC.destroyContext = function(context) {
};
lime_media_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_media_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_media_openal_ALC.getError = function(device) {
	return 0;
};
lime_media_openal_ALC.getErrorString = function(device) {
	switch(lime_media_openal_ALC.getError(device)) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_media_openal_ALC.getString = function(device,param) {
	return null;
};
lime_media_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_media_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_media_openal_ALC.pauseDevice = function(device) {
};
lime_media_openal_ALC.processContext = function(context) {
};
lime_media_openal_ALC.resumeDevice = function(device) {
};
lime_media_openal_ALC.suspendContext = function(context) {
};
var lime_media_openal_ALContext = {};
lime_media_openal_ALContext._new = function(handle) {
	return handle;
};
var lime_media_openal_ALDevice = {};
lime_media_openal_ALDevice._new = function(handle) {
	return handle;
};
var lime_media_openal_ALEffect = {};
lime_media_openal_ALEffect._new = function(handle) {
	return handle;
};
var lime_media_openal_ALFilter = {};
lime_media_openal_ALFilter._new = function(handle) {
	return handle;
};
var lime_media_openal_ALSource = {};
lime_media_openal_ALSource._new = function(handle) {
	return handle;
};
var lime_media_vorbis_VorbisComment = function() {
};
$hxClasses["lime.media.vorbis.VorbisComment"] = lime_media_vorbis_VorbisComment;
lime_media_vorbis_VorbisComment.__name__ = "lime.media.vorbis.VorbisComment";
lime_media_vorbis_VorbisComment.prototype = {
	userComments: null
	,vendor: null
	,__class__: lime_media_vorbis_VorbisComment
};
var lime_media_vorbis_VorbisFile = function(handle) {
	this.handle = handle;
};
$hxClasses["lime.media.vorbis.VorbisFile"] = lime_media_vorbis_VorbisFile;
lime_media_vorbis_VorbisFile.__name__ = "lime.media.vorbis.VorbisFile";
lime_media_vorbis_VorbisFile.fromBytes = function(bytes) {
	return null;
};
lime_media_vorbis_VorbisFile.fromFile = function(path) {
	return null;
};
lime_media_vorbis_VorbisFile.prototype = {
	bitstream: null
	,handle: null
	,bitrate: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,bitrateInstant: function() {
		return 0;
	}
	,clear: function() {
	}
	,comment: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,crosslap: function(other) {
		return 0;
	}
	,info: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,pcmSeek: function(pos) {
		return 0;
	}
	,pcmSeekLap: function(pos) {
		return 0;
	}
	,pcmSeekPage: function(pos) {
		return 0;
	}
	,pcmSeekPageLap: function(pos) {
		return 0;
	}
	,pcmTell: function() {
		return new haxe__$Int64__$_$_$Int64(0,0);
	}
	,pcmTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return new haxe__$Int64__$_$_$Int64(0,0);
	}
	,rawSeek: function(pos) {
		return 0;
	}
	,rawSeekLap: function(pos) {
		return 0;
	}
	,rawTell: function() {
		return new haxe__$Int64__$_$_$Int64(0,0);
	}
	,rawTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return new haxe__$Int64__$_$_$Int64(0,0);
	}
	,read: function(buffer,position,length,bigEndianPacking,wordSize,signed) {
		if(signed == null) {
			signed = true;
		}
		if(wordSize == null) {
			wordSize = 2;
		}
		if(bigEndianPacking == null) {
			bigEndianPacking = false;
		}
		if(length == null) {
			length = 4096;
		}
		return 0;
	}
	,readFloat: function(pcmChannels,samples) {
		return 0;
	}
	,seekable: function() {
		return false;
	}
	,serialNumber: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,streams: function() {
		return 0;
	}
	,timeSeek: function(s) {
		return 0;
	}
	,timeSeekLap: function(s) {
		return 0;
	}
	,timeSeekPage: function(s) {
		return 0;
	}
	,timeSeekPageLap: function(s) {
		return 0;
	}
	,timeTell: function() {
		return 0;
	}
	,timeTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,__class__: lime_media_vorbis_VorbisFile
};
var lime_media_vorbis_VorbisInfo = function() {
};
$hxClasses["lime.media.vorbis.VorbisInfo"] = lime_media_vorbis_VorbisInfo;
lime_media_vorbis_VorbisInfo.__name__ = "lime.media.vorbis.VorbisInfo";
lime_media_vorbis_VorbisInfo.prototype = {
	bitrateLower: null
	,bitrateNominal: null
	,bitrateUpper: null
	,channels: null
	,rate: null
	,version: null
	,__class__: lime_media_vorbis_VorbisInfo
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = "lime.net._IHTTPRequest";
lime_net__$IHTTPRequest.__isInterface__ = true;
lime_net__$IHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,manageCookies: null
	,cancel: null
	,__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.manageCookies = true;
	this.__backend = new lime__$internal_backend_html5_HTML5HTTPRequest();
	this.__backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = "lime.net._HTTPRequest.AbstractHTTPRequest";
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseData: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,manageCookies: null
	,__backend: null
	,cancel: function() {
		this.__backend.cancel();
	}
	,load: function(uri) {
		return null;
	}
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net_HTTPRequest = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = "lime.net.HTTPRequest";
lime_net_HTTPRequest.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net_HTTPRequest.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	__class__: lime_net_HTTPRequest
});
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = "lime.net._HTTPRequest_Bytes";
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError(function(errorResponse) {
			_gthis.responseData = errorResponse.responseData;
			promise.error(errorResponse.error);
		});
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = "lime.net._HTTPRequest_String";
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError(function(errorResponse) {
			_gthis.responseData = errorResponse.responseData;
			promise.error(errorResponse.error);
		});
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net__$HTTPRequestErrorResponse = function(error,responseData) {
	this.error = error;
	this.responseData = responseData;
};
$hxClasses["lime.net._HTTPRequestErrorResponse"] = lime_net__$HTTPRequestErrorResponse;
lime_net__$HTTPRequestErrorResponse.__name__ = "lime.net._HTTPRequestErrorResponse";
lime_net__$HTTPRequestErrorResponse.prototype = {
	error: null
	,responseData: null
	,__class__: lime_net__$HTTPRequestErrorResponse
};
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = "lime.net.HTTPRequestHeader";
lime_net_HTTPRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$text_$Font = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_text_Font"] = lime_net__$HTTPRequest_$lime_$text_$Font;
lime_net__$HTTPRequest_$lime_$text_$Font.__name__ = "lime.net._HTTPRequest_lime_text_Font";
lime_net__$HTTPRequest_$lime_$text_$Font.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$text_$Font.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_text_Font.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$text_$Font
});
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = "lime.net._HTTPRequest_lime_utils_Bytes";
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils_Bytes.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = "lime.net._HTTPRequest_openfl_utils_ByteArray";
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return openfl_utils_ByteArray.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
});
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = "lime.system.CFFI";
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	if(!lime_system_CFFI.enabled) {
		return Reflect.makeVarArgs(function(__) {
			return { };
		});
	}
	var result = null;
	return result;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system_CFFIPointer = {};
lime_system_CFFIPointer._new = function(handle) {
	return handle;
};
lime_system_CFFIPointer.get = function(this1) {
	var tmp = this1 != null;
	return 0;
};
lime_system_CFFIPointer.equals = function(a,b) {
	return lime_system_CFFIPointer.get(a) == b;
};
lime_system_CFFIPointer.equalsPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) == lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.greaterThan = function(a,b) {
	return lime_system_CFFIPointer.get(a) > b;
};
lime_system_CFFIPointer.greaterThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) > lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.greaterThanOrEqual = function(a,b) {
	return lime_system_CFFIPointer.get(a) >= b;
};
lime_system_CFFIPointer.greaterThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) >= lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.lessThan = function(a,b) {
	return lime_system_CFFIPointer.get(a) < b;
};
lime_system_CFFIPointer.lessThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) < lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.lessThanOrEqual = function(a,b) {
	return lime_system_CFFIPointer.get(a) <= b;
};
lime_system_CFFIPointer.lessThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) <= lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.notEquals = function(a,b) {
	return lime_system_CFFIPointer.get(a) != b;
};
lime_system_CFFIPointer.notEqualsPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) != lime_system_CFFIPointer.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = "lime.system.Clipboard";
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"};
lime_system_Clipboard.__update = function() {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = null;
	lime_system_Clipboard.__updated = true;
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
};
lime_system_Clipboard.get_text = function() {
	lime_system_Clipboard.__update();
	return lime_system_Clipboard._text;
};
lime_system_Clipboard.set_text = function(value) {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = value;
	var $window = lime_app_Application.current.__window;
	if($window != null) {
		$window.__backend.setClipboard(value);
	}
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
	return value;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = "lime.system.Display";
lime_system_Display.prototype = {
	bounds: null
	,currentMode: null
	,id: null
	,dpi: null
	,name: null
	,supportedModes: null
	,__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = "lime.system.DisplayMode";
lime_system_DisplayMode.prototype = {
	height: null
	,pixelFormat: null
	,refreshRate: null
	,width: null
	,__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxEnums["lime.system.Endian"] = { __ename__:"lime.system.Endian",__constructs__:null
	,LITTLE_ENDIAN: {_hx_name:"LITTLE_ENDIAN",_hx_index:0,__enum__:"lime.system.Endian",toString:$estr}
	,BIG_ENDIAN: {_hx_name:"BIG_ENDIAN",_hx_index:1,__enum__:"lime.system.Endian",toString:$estr}
};
lime_system_Endian.__constructs__ = [lime_system_Endian.LITTLE_ENDIAN,lime_system_Endian.BIG_ENDIAN];
var lime_system_Sensor = function(type,id) {
	this.onUpdate = new lime_app__$Event_$Float_$Float_$Float_$Void();
	this.type = type;
	this.id = id;
};
$hxClasses["lime.system.Sensor"] = lime_system_Sensor;
lime_system_Sensor.__name__ = "lime.system.Sensor";
lime_system_Sensor.getSensors = function(type) {
	if(type == null) {
		return lime_system_Sensor.sensors.slice();
	} else {
		var result = [];
		var _g = 0;
		var _g1 = lime_system_Sensor.sensors;
		while(_g < _g1.length) {
			var sensor = _g1[_g];
			++_g;
			if(sensor.type == type) {
				result.push(sensor);
			}
		}
		return result;
	}
};
lime_system_Sensor.registerSensor = function(type,id) {
	var sensor = new lime_system_Sensor(type,id);
	lime_system_Sensor.sensors.push(sensor);
	lime_system_Sensor.sensorByID.h[id] = sensor;
	return sensor;
};
lime_system_Sensor.prototype = {
	id: null
	,onUpdate: null
	,type: null
	,__class__: lime_system_Sensor
};
var lime_system_SensorType = $hxEnums["lime.system.SensorType"] = { __ename__:"lime.system.SensorType",__constructs__:null
	,ACCELEROMETER: {_hx_name:"ACCELEROMETER",_hx_index:0,__enum__:"lime.system.SensorType",toString:$estr}
};
lime_system_SensorType.__constructs__ = [lime_system_SensorType.ACCELEROMETER];
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = "lime.system.System";
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_platformVersion:"get_platformVersion",get_platformName:"get_platformName",get_platformLabel:"get_platformLabel",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_deviceVendor:"get_deviceVendor",get_deviceModel:"get_deviceModel",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"};
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(projectName,element,width,height,config) {
	if(lime_system_System.__applicationEntryPoint == null) {
		return;
	}
	if(Object.prototype.hasOwnProperty.call(lime_system_System.__applicationEntryPoint.h,projectName)) {
		var htmlElement = null;
		if(typeof(element) == "string") {
			htmlElement = window.document.getElementById(element);
		} else if(element == null) {
			htmlElement = window.document.createElement("div");
		} else {
			htmlElement = element;
		}
		if(htmlElement == null) {
			window.console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
			return;
		}
		if(width == null) {
			width = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(config == null) {
			config = { };
		}
		if(Object.prototype.hasOwnProperty.call(config,"background") && typeof(config.background) == "string") {
			var background = StringTools.replace(Std.string(config.background),"#","");
			if(background.indexOf("0x") > -1) {
				config.background = Std.parseInt(background);
			} else {
				config.background = Std.parseInt("0x" + background);
			}
		}
		config.element = htmlElement;
		config.width = width;
		config.height = height;
		lime_system_System.__applicationEntryPoint.h[projectName](config);
	}
};
lime_system_System.exit = function(code) {
	var currentApp = lime_app_Application.current;
	if(currentApp != null) {
		currentApp.onExit.dispatch(code);
		if(currentApp.onExit.canceled) {
			return;
		}
	}
	if(currentApp != null && currentApp.__window != null) {
		currentApp.__window.close();
	}
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.dpi = 96 * window.devicePixelRatio;
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return window.performance.now() | 0;
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.openFile = function(path) {
	if(path != null) {
		window.open(path,"_blank");
	}
};
lime_system_System.openURL = function(url,target) {
	if(target == null) {
		target = "_blank";
	}
	if(url != null) {
		window.open(url,target);
	}
};
lime_system_System.__copyMissingFields = function(target,source) {
	if(source == null || target == null) {
		return;
	}
	var _g = 0;
	var _g1 = Reflect.fields(source);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(target,field)) {
			target[field] = Reflect.field(source,field);
		}
	}
};
lime_system_System.__getDirectory = function(type) {
	return null;
};
lime_system_System.__parseBool = function(value) {
	return value == "true";
};
lime_system_System.__registerEntryPoint = function(projectName,entryPoint) {
	if(lime_system_System.__applicationEntryPoint == null) {
		lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
	}
	lime_system_System.__applicationEntryPoint.h[projectName] = entryPoint;
};
lime_system_System.__runProcess = function(command,args) {
	return null;
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	if(lime_system_System.__applicationDirectory == null) {
		lime_system_System.__applicationDirectory = lime_system_System.__getDirectory(0);
	}
	return lime_system_System.__applicationDirectory;
};
lime_system_System.get_applicationStorageDirectory = function() {
	if(lime_system_System.__applicationStorageDirectory == null) {
		lime_system_System.__applicationStorageDirectory = lime_system_System.__getDirectory(1);
	}
	return lime_system_System.__applicationStorageDirectory;
};
lime_system_System.get_deviceModel = function() {
	var tmp = lime_system_System.__deviceModel == null;
	return lime_system_System.__deviceModel;
};
lime_system_System.get_deviceVendor = function() {
	var tmp = lime_system_System.__deviceVendor == null;
	return lime_system_System.__deviceVendor;
};
lime_system_System.get_desktopDirectory = function() {
	if(lime_system_System.__desktopDirectory == null) {
		lime_system_System.__desktopDirectory = lime_system_System.__getDirectory(2);
	}
	return lime_system_System.__desktopDirectory;
};
lime_system_System.get_documentsDirectory = function() {
	if(lime_system_System.__documentsDirectory == null) {
		lime_system_System.__documentsDirectory = lime_system_System.__getDirectory(3);
	}
	return lime_system_System.__documentsDirectory;
};
lime_system_System.get_endianness = function() {
	if(lime_system_System.__endianness == null) {
		var arrayBuffer = new ArrayBuffer(2);
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(arrayBuffer != null) {
			if(len == null) {
				this1 = new Uint8Array(arrayBuffer,0);
			} else {
				this1 = new Uint8Array(arrayBuffer,0,len);
			}
		} else {
			this1 = null;
		}
		var uint8Array = this1;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint16Array(elements);
		} else if(array != null) {
			this1 = new Uint16Array(array);
		} else if(vector != null) {
			this1 = new Uint16Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint16Array(view);
		} else if(arrayBuffer != null) {
			if(len == null) {
				this1 = new Uint16Array(arrayBuffer,0);
			} else {
				this1 = new Uint16Array(arrayBuffer,0,len);
			}
		} else {
			this1 = null;
		}
		var uint16array = this1;
		uint8Array[0] = 170;
		uint8Array[1] = 187;
		if(uint16array[0] == 43707) {
			lime_system_System.__endianness = lime_system_Endian.BIG_ENDIAN;
		} else {
			lime_system_System.__endianness = lime_system_Endian.LITTLE_ENDIAN;
		}
	}
	return lime_system_System.__endianness;
};
lime_system_System.get_fontsDirectory = function() {
	if(lime_system_System.__fontsDirectory == null) {
		lime_system_System.__fontsDirectory = lime_system_System.__getDirectory(4);
	}
	return lime_system_System.__fontsDirectory;
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_platformLabel = function() {
	if(lime_system_System.__platformLabel == null) {
		var name = lime_system_System.get_platformName();
		var version = lime_system_System.get_platformVersion();
		if(name != null && version != null) {
			lime_system_System.__platformLabel = name + " " + version;
		} else if(name != null) {
			lime_system_System.__platformLabel = name;
		}
	}
	return lime_system_System.__platformLabel;
};
lime_system_System.get_platformName = function() {
	if(lime_system_System.__platformName == null) {
		lime_system_System.__platformName = "HTML5";
	}
	return lime_system_System.__platformName;
};
lime_system_System.get_platformVersion = function() {
	var tmp = lime_system_System.__platformVersion == null;
	return lime_system_System.__platformVersion;
};
lime_system_System.get_userDirectory = function() {
	if(lime_system_System.__userDirectory == null) {
		lime_system_System.__userDirectory = lime_system_System.__getDirectory(5);
	}
	return lime_system_System.__userDirectory;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onRun = new lime_app__$Event_$Dynamic_$Void();
	this.onProgress = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = "lime.system.ThreadPool";
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,onRun: null
	,queue: function(state) {
		this.runWork(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,runWork: function(state) {
		this.onRun.dispatch(state);
		this.doWork.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxEnums["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__:"lime.system._ThreadPool.ThreadPoolMessageType",__constructs__:null
	,COMPLETE: {_hx_name:"COMPLETE",_hx_index:0,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,ERROR: {_hx_name:"ERROR",_hx_index:1,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,EXIT: {_hx_name:"EXIT",_hx_index:2,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,PROGRESS: {_hx_name:"PROGRESS",_hx_index:3,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,WORK: {_hx_name:"WORK",_hx_index:4,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
};
lime_system__$ThreadPool_ThreadPoolMessageType.__constructs__ = [lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE,lime_system__$ThreadPool_ThreadPoolMessageType.ERROR,lime_system__$ThreadPool_ThreadPoolMessageType.EXIT,lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS,lime_system__$ThreadPool_ThreadPoolMessageType.WORK];
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = "lime.system._ThreadPool.ThreadPoolMessage";
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	state: null
	,type: null
	,__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text_Glyph = {};
lime_text_Glyph._new = function(i) {
	return i;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = "lime.text.GlyphMetrics";
lime_text_GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime_text_GlyphMetrics
};
var lime_text_harfbuzz_HB = function() { };
$hxClasses["lime.text.harfbuzz.HB"] = lime_text_harfbuzz_HB;
lime_text_harfbuzz_HB.__name__ = "lime.text.harfbuzz.HB";
lime_text_harfbuzz_HB.shape = function(font,buffer,features) {
};
var lime_text_harfbuzz_HBBlob = {};
lime_text_harfbuzz_HBBlob.__properties__ = {get_length:"get_length",get_immutable:"get_immutable",get_dataWritable:"get_dataWritable",get_data:"get_data",get_empty:"get_empty"};
lime_text_harfbuzz_HBBlob._new = function(data,length,memoryMode) {
	return null;
};
lime_text_harfbuzz_HBBlob.createSubBlob = function(this1,offset,length) {
	return null;
};
lime_text_harfbuzz_HBBlob.makeImmutable = function(this1) {
};
lime_text_harfbuzz_HBBlob.get_data = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBlob.get_dataWritable = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBlob.get_empty = function() {
	return null;
};
lime_text_harfbuzz_HBBlob.get_immutable = function(this1) {
	return false;
};
lime_text_harfbuzz_HBBlob.get_length = function(this1) {
	return 0;
};
var lime_text_harfbuzz_HBBuffer = {};
lime_text_harfbuzz_HBBuffer.__properties__ = {set_segmentProperties:"set_segmentProperties",get_segmentProperties:"get_segmentProperties",set_script:"set_script",get_script:"get_script",set_replacementCodepoint:"set_replacementCodepoint",get_replacementCodepoint:"get_replacementCodepoint",set_length:"set_length",get_length:"get_length",set_language:"set_language",get_language:"get_language",set_flags:"set_flags",get_flags:"get_flags",set_direction:"set_direction",get_direction:"get_direction",set_contentType:"set_contentType",get_contentType:"get_contentType",set_clusterLevel:"set_clusterLevel",get_clusterLevel:"get_clusterLevel",get_allocationSuccessful:"get_allocationSuccessful"};
lime_text_harfbuzz_HBBuffer._new = function() {
	return null;
};
lime_text_harfbuzz_HBBuffer.add = function(this1,codepoint,cluster) {
};
lime_text_harfbuzz_HBBuffer.addCodepoints = function(this1,text,textLength,itemOffset,itemLength) {
};
lime_text_harfbuzz_HBBuffer.addUTF8 = function(this1,text,itemOffset,itemLength) {
};
lime_text_harfbuzz_HBBuffer.addUTF16 = function(this1,text,textLength,itemOffset,itemLength) {
};
lime_text_harfbuzz_HBBuffer.addUTF32 = function(this1,text,textLength,itemOffset,itemLength) {
};
lime_text_harfbuzz_HBBuffer.clearContents = function(this1) {
};
lime_text_harfbuzz_HBBuffer.getGlyphInfo = function(this1) {
	return null;
};
lime_text_harfbuzz_HBBuffer.getGlyphPositions = function(this1) {
	return null;
};
lime_text_harfbuzz_HBBuffer.guessSegmentProperties = function(this1) {
};
lime_text_harfbuzz_HBBuffer.normalizeGlyphs = function(this1) {
};
lime_text_harfbuzz_HBBuffer.preallocate = function(this1,size) {
	return false;
};
lime_text_harfbuzz_HBBuffer.reset = function(this1) {
};
lime_text_harfbuzz_HBBuffer.reverse = function(this1) {
};
lime_text_harfbuzz_HBBuffer.reverseClusters = function(this1) {
};
lime_text_harfbuzz_HBBuffer.get_allocationSuccessful = function(this1) {
	return false;
};
lime_text_harfbuzz_HBBuffer.get_clusterLevel = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_clusterLevel = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_contentType = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_contentType = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_direction = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_direction = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_empty = function() {
	return null;
};
lime_text_harfbuzz_HBBuffer.get_flags = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_flags = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_language = function(this1) {
	return null;
};
lime_text_harfbuzz_HBBuffer.set_language = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_length = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_length = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_replacementCodepoint = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_replacementCodepoint = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_script = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_script = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_segmentProperties = function(this1) {
	return null;
};
lime_text_harfbuzz_HBBuffer.set_segmentProperties = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBFTFont = {};
lime_text_harfbuzz_HBFTFont.__properties__ = {set_loadFlags:"set_loadFlags",get_loadFlags:"get_loadFlags"};
lime_text_harfbuzz_HBFTFont._new = function(font) {
	var this1;
	if(font.src != null) {
		this1 = null;
	} else {
		this1 = null;
	}
	return this1;
};
lime_text_harfbuzz_HBFTFont.get_loadFlags = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBFTFont.set_loadFlags = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBFace = {};
lime_text_harfbuzz_HBFace.__properties__ = {set_upem:"set_upem",get_upem:"get_upem",set_index:"set_index",get_index:"get_index",get_immutable:"get_immutable",set_glyphCount:"set_glyphCount",get_glyphCount:"get_glyphCount",get_empty:"get_empty"};
lime_text_harfbuzz_HBFace._new = function(blob,index) {
	return null;
};
lime_text_harfbuzz_HBFace.get_empty = function() {
	return null;
};
lime_text_harfbuzz_HBFace.get_glyphCount = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBFace.set_glyphCount = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBFace.get_immutable = function(this1) {
	return false;
};
lime_text_harfbuzz_HBFace.get_index = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBFace.set_index = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBFace.get_upem = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBFace.set_upem = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBFeature = function() {
};
$hxClasses["lime.text.harfbuzz.HBFeature"] = lime_text_harfbuzz_HBFeature;
lime_text_harfbuzz_HBFeature.__name__ = "lime.text.harfbuzz.HBFeature";
lime_text_harfbuzz_HBFeature.prototype = {
	__class__: lime_text_harfbuzz_HBFeature
};
var lime_text_harfbuzz_HBFont = {};
lime_text_harfbuzz_HBFont.__properties__ = {set_scale:"set_scale",get_scale:"get_scale",set_ppem:"set_ppem",get_ppem:"get_ppem",get_parent:"get_parent",get_immutable:"get_immutable",get_face:"get_face",get_empty:"get_empty"};
lime_text_harfbuzz_HBFont._new = function(face) {
	return null;
};
lime_text_harfbuzz_HBFont.addGlyphOriginForDirection = function(this1,glyph,direction,x,y) {
};
lime_text_harfbuzz_HBFont.createSubFont = function(this1) {
	return null;
};
lime_text_harfbuzz_HBFont.getGlyphAdvanceForDirection = function(this1,glyph,direction) {
	return null;
};
lime_text_harfbuzz_HBFont.getGlyphKerningForDirection = function(this1,glyph,firstGlyph,secondGlyph,direction) {
	return null;
};
lime_text_harfbuzz_HBFont.getGlyphOriginForDirection = function(this1,glyph,direction) {
	return null;
};
lime_text_harfbuzz_HBFont.glyphFromString = function(this1,s) {
	return 0;
};
lime_text_harfbuzz_HBFont.glyphToString = function(this1,codepoint) {
	return null;
};
lime_text_harfbuzz_HBFont.makeImmutable = function(this1) {
};
lime_text_harfbuzz_HBFont.subtractGlyphOriginForDirection = function(this1,glyph,direction,x,y) {
};
lime_text_harfbuzz_HBFont.get_empty = function() {
	return null;
};
lime_text_harfbuzz_HBFont.get_face = function(this1) {
	return null;
};
lime_text_harfbuzz_HBFont.get_immutable = function(this1) {
	return false;
};
lime_text_harfbuzz_HBFont.get_parent = function(this1) {
	return null;
};
lime_text_harfbuzz_HBFont.get_ppem = function(this1) {
	return null;
};
lime_text_harfbuzz_HBFont.set_ppem = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBFont.get_scale = function(this1) {
	return null;
};
lime_text_harfbuzz_HBFont.set_scale = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBGlyphInfo = function() {
};
$hxClasses["lime.text.harfbuzz.HBGlyphInfo"] = lime_text_harfbuzz_HBGlyphInfo;
lime_text_harfbuzz_HBGlyphInfo.__name__ = "lime.text.harfbuzz.HBGlyphInfo";
lime_text_harfbuzz_HBGlyphInfo.prototype = {
	codepoint: null
	,mask: null
	,cluster: null
	,__class__: lime_text_harfbuzz_HBGlyphInfo
};
var lime_text_harfbuzz_HBGlyphPosition = function() {
};
$hxClasses["lime.text.harfbuzz.HBGlyphPosition"] = lime_text_harfbuzz_HBGlyphPosition;
lime_text_harfbuzz_HBGlyphPosition.__name__ = "lime.text.harfbuzz.HBGlyphPosition";
lime_text_harfbuzz_HBGlyphPosition.prototype = {
	xAdvance: null
	,xOffset: null
	,yAdvance: null
	,yOffset: null
	,__class__: lime_text_harfbuzz_HBGlyphPosition
};
var lime_text_harfbuzz_HBLanguage = {};
lime_text_harfbuzz_HBLanguage._new = function(language) {
	return null;
};
lime_text_harfbuzz_HBLanguage.toString = function(this1) {
	return null;
};
lime_text_harfbuzz_HBLanguage.fromString = function(value) {
	return lime_text_harfbuzz_HBLanguage._new(value);
};
var lime_text_harfbuzz_HBSegmentProperties = function() {
};
$hxClasses["lime.text.harfbuzz.HBSegmentProperties"] = lime_text_harfbuzz_HBSegmentProperties;
lime_text_harfbuzz_HBSegmentProperties.__name__ = "lime.text.harfbuzz.HBSegmentProperties";
lime_text_harfbuzz_HBSegmentProperties.prototype = {
	__class__: lime_text_harfbuzz_HBSegmentProperties
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = "lime.ui.Gamepad";
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui_GamepadAxis = {};
lime_ui_GamepadAxis.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_GamepadButton = {};
lime_ui_GamepadButton.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = "lime.ui.Joystick";
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	var res = null;
	try {
		res = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
	}
	return res;
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_numAxes: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].axes.length;
	}
	,get_numButtons: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui_JoystickHatPosition = {};
lime_ui_JoystickHatPosition.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"};
lime_ui_JoystickHatPosition._new = function(value) {
	return value;
};
lime_ui_JoystickHatPosition.get_center = function(this1) {
	return this1 == 0;
};
lime_ui_JoystickHatPosition.set_center = function(this1,value) {
	if(value) {
		this1 = 0;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui_JoystickHatPosition.set_down = function(this1,value) {
	if(value) {
		this1 |= 4;
	} else {
		this1 &= 268435455 - 4;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui_JoystickHatPosition.set_left = function(this1,value) {
	if(value) {
		this1 |= 8;
	} else {
		this1 &= 268435455 - 8;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui_JoystickHatPosition.set_right = function(this1,value) {
	if(value) {
		this1 |= 2;
	} else {
		this1 &= 268435455 - 2;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui_JoystickHatPosition.set_up = function(this1,value) {
	if(value) {
		this1 |= 1;
	} else {
		this1 &= 268435455 - 1;
	}
	return value;
};
var lime_ui_KeyCode = {};
lime_ui_KeyCode.fromScanCode = function(scanCode) {
	return 0;
};
lime_ui_KeyCode.toScanCode = function(keyCode) {
	return 0;
};
lime_ui_KeyCode.gt = function(a,b) {
	return a > b;
};
lime_ui_KeyCode.gte = function(a,b) {
	return a >= b;
};
lime_ui_KeyCode.lt = function(a,b) {
	return a < b;
};
lime_ui_KeyCode.lte = function(a,b) {
	return a <= b;
};
lime_ui_KeyCode.plus = function(a,b) {
	return a + b;
};
var lime_ui_KeyModifier = {};
lime_ui_KeyModifier.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"};
lime_ui_KeyModifier.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_altKey = function(this1,value) {
	if(value) {
		this1 |= 768;
	} else {
		this1 &= 268435455 - 768;
	}
	return value;
};
lime_ui_KeyModifier.get_capsLock = function(this1) {
	if((this1 & 8192) <= 0) {
		return (this1 & 8192) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_capsLock = function(this1,value) {
	if(value) {
		this1 |= 8192;
	} else {
		this1 &= 268435455 - 8192;
	}
	return value;
};
lime_ui_KeyModifier.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_ctrlKey = function(this1,value) {
	if(value) {
		this1 |= 192;
	} else {
		this1 &= 268435455 - 192;
	}
	return value;
};
lime_ui_KeyModifier.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_metaKey = function(this1,value) {
	if(value) {
		this1 |= 3072;
	} else {
		this1 &= 268435455 - 3072;
	}
	return value;
};
lime_ui_KeyModifier.get_numLock = function(this1) {
	if((this1 & 4096) <= 0) {
		return (this1 & 4096) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_numLock = function(this1,value) {
	if(value) {
		this1 |= 4096;
	} else {
		this1 &= 268435455 - 4096;
	}
	return value;
};
lime_ui_KeyModifier.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_shiftKey = function(this1,value) {
	if(value) {
		this1 |= 3;
	} else {
		this1 &= 268435455 - 3;
	}
	return value;
};
var lime_ui_MouseCursor = $hxEnums["lime.ui.MouseCursor"] = { __ename__:"lime.ui.MouseCursor",__constructs__:null
	,ARROW: {_hx_name:"ARROW",_hx_index:0,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CROSSHAIR: {_hx_name:"CROSSHAIR",_hx_index:1,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,DEFAULT: {_hx_name:"DEFAULT",_hx_index:2,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,MOVE: {_hx_name:"MOVE",_hx_index:3,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,POINTER: {_hx_name:"POINTER",_hx_index:4,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NESW: {_hx_name:"RESIZE_NESW",_hx_index:5,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NS: {_hx_name:"RESIZE_NS",_hx_index:6,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NWSE: {_hx_name:"RESIZE_NWSE",_hx_index:7,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_WE: {_hx_name:"RESIZE_WE",_hx_index:8,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,TEXT: {_hx_name:"TEXT",_hx_index:9,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT: {_hx_name:"WAIT",_hx_index:10,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT_ARROW: {_hx_name:"WAIT_ARROW",_hx_index:11,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CUSTOM: {_hx_name:"CUSTOM",_hx_index:12,__enum__:"lime.ui.MouseCursor",toString:$estr}
};
lime_ui_MouseCursor.__constructs__ = [lime_ui_MouseCursor.ARROW,lime_ui_MouseCursor.CROSSHAIR,lime_ui_MouseCursor.DEFAULT,lime_ui_MouseCursor.MOVE,lime_ui_MouseCursor.POINTER,lime_ui_MouseCursor.RESIZE_NESW,lime_ui_MouseCursor.RESIZE_NS,lime_ui_MouseCursor.RESIZE_NWSE,lime_ui_MouseCursor.RESIZE_WE,lime_ui_MouseCursor.TEXT,lime_ui_MouseCursor.WAIT,lime_ui_MouseCursor.WAIT_ARROW,lime_ui_MouseCursor.CUSTOM];
var lime_ui_MouseWheelMode = $hxEnums["lime.ui.MouseWheelMode"] = { __ename__:"lime.ui.MouseWheelMode",__constructs__:null
	,PIXELS: {_hx_name:"PIXELS",_hx_index:0,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,LINES: {_hx_name:"LINES",_hx_index:1,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,PAGES: {_hx_name:"PAGES",_hx_index:2,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,UNKNOWN: {_hx_name:"UNKNOWN",_hx_index:3,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
};
lime_ui_MouseWheelMode.__constructs__ = [lime_ui_MouseWheelMode.PIXELS,lime_ui_MouseWheelMode.LINES,lime_ui_MouseWheelMode.PAGES,lime_ui_MouseWheelMode.UNKNOWN];
var lime_ui_ScanCode = {};
lime_ui_ScanCode.fromKeyCode = function(keyCode) {
	return lime_ui_KeyCode.toScanCode(keyCode);
};
lime_ui_ScanCode.toKeyCode = function(scanCode) {
	return lime_ui_KeyCode.fromScanCode(scanCode);
};
lime_ui_ScanCode.gt = function(a,b) {
	return a > b;
};
lime_ui_ScanCode.gte = function(a,b) {
	return a >= b;
};
lime_ui_ScanCode.lt = function(a,b) {
	return a < b;
};
lime_ui_ScanCode.lte = function(a,b) {
	return a <= b;
};
lime_ui_ScanCode.plus = function(a,b) {
	return a + b;
};
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = "lime.ui.Touch";
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(application,attributes) {
	this.__maxHeight = 2147483647;
	this.__maxWidth = 2147483647;
	this.__minHeight = 0;
	this.__minWidth = 0;
	this.clickCount = 0;
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onShow = new lime_app__$Event_$Void_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onRenderContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onRenderContextLost = new lime_app__$Event_$Void_$Void();
	this.onRender = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onMaximize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onHide = new lime_app__$Event_$Void_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onExpose = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.application = application;
	this.__attributes = attributes != null ? attributes : { };
	if(Object.prototype.hasOwnProperty.call(this.__attributes,"parameters")) {
		this.parameters = this.__attributes.parameters;
	}
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = Object.prototype.hasOwnProperty.call(this.__attributes,"title") ? this.__attributes.title : "";
	this.id = -1;
	this.__backend = new lime__$internal_backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = "lime.ui.Window";
lime_ui_Window.prototype = {
	application: null
	,context: null
	,display: null
	,element: null
	,hidden: null
	,id: null
	,onActivate: null
	,onClose: null
	,onDeactivate: null
	,onDropFile: null
	,onEnter: null
	,onExpose: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onHide: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMaximize: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onRender: null
	,onRenderContextLost: null
	,onRenderContextRestored: null
	,onResize: null
	,onRestore: null
	,onShow: null
	,onTextEdit: null
	,onTextInput: null
	,parameters: null
	,scale: null
	,stage: null
	,clickCount: null
	,__attributes: null
	,__backend: null
	,__borderless: null
	,__fullscreen: null
	,__height: null
	,__hidden: null
	,__maximized: null
	,__minimized: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__visible: null
	,__width: null
	,__x: null
	,__y: null
	,__minWidth: null
	,__minHeight: null
	,__maxWidth: null
	,__maxHeight: null
	,alert: function(message,title) {
		this.__backend.alert(message,title);
	}
	,close: function() {
		this.__backend.close();
	}
	,focus: function() {
		this.__backend.focus();
	}
	,move: function(x,y) {
		this.__backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,readPixels: function(rect) {
		return this.__backend.readPixels(rect);
	}
	,resize: function(width,height) {
		if(width < this.__minWidth) {
			width = this.__minWidth;
		} else if(width > this.__maxWidth) {
			width = this.__maxWidth;
		}
		if(height < this.__minHeight) {
			height = this.__minHeight;
		} else if(height > this.__maxHeight) {
			height = this.__maxHeight;
		}
		this.__backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setMinSize: function(width,height) {
		this.__backend.setMinSize(width,height);
		this.__minWidth = width;
		this.__minHeight = height;
		if(this.__width < this.__minWidth || this.__height < this.__minHeight) {
			this.resize(this.__width,this.__height);
		}
	}
	,setMaxSize: function(width,height) {
		this.__backend.setMaxSize(width,height);
		this.__maxWidth = width;
		this.__maxHeight = height;
		if(this.__width > this.__maxWidth || this.__height > this.__maxHeight) {
			this.resize(this.__width,this.__height);
		}
	}
	,setIcon: function(image) {
		if(image == null) {
			return;
		}
		this.__backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,warpMouse: function(x,y) {
		this.__backend.warpMouse(x,y);
	}
	,get_cursor: function() {
		return this.__backend.getCursor();
	}
	,set_cursor: function(value) {
		return this.__backend.setCursor(value);
	}
	,get_display: function() {
		return this.__backend.getDisplay();
	}
	,get_displayMode: function() {
		return this.__backend.getDisplayMode();
	}
	,set_displayMode: function(value) {
		return this.__backend.setDisplayMode(value);
	}
	,get_borderless: function() {
		return this.__borderless;
	}
	,set_borderless: function(value) {
		return this.__borderless = this.__backend.setBorderless(value);
	}
	,get_frameRate: function() {
		return this.__backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.__backend.setFrameRate(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.__backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_hidden: function() {
		return this.__hidden;
	}
	,get_maxHeight: function() {
		return this.__maxHeight;
	}
	,set_maxHeight: function(value) {
		this.setMaxSize(this.__maxWidth,value);
		return this.__maxHeight;
	}
	,get_maximized: function() {
		return this.__maximized;
	}
	,set_maximized: function(value) {
		this.__minimized = false;
		return this.__maximized = this.__backend.setMaximized(value);
	}
	,get_maxWidth: function() {
		return this.__maxWidth;
	}
	,set_maxWidth: function(value) {
		this.setMinSize(value,this.__maxHeight);
		return this.__maxWidth;
	}
	,get_minHeight: function() {
		return this.__minHeight;
	}
	,set_minHeight: function(value) {
		this.setMinSize(this.__minWidth,value);
		return this.__minHeight;
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		this.__maximized = false;
		return this.__minimized = this.__backend.setMinimized(value);
	}
	,get_minWidth: function() {
		return this.__minWidth;
	}
	,set_minWidth: function(value) {
		this.setMinSize(value,this.__minHeight);
		return this.__minWidth;
	}
	,get_mouseLock: function() {
		return this.__backend.getMouseLock();
	}
	,set_mouseLock: function(value) {
		this.__backend.setMouseLock(value);
		return value;
	}
	,get_opacity: function() {
		return this.__backend.getOpacity();
	}
	,set_opacity: function(value) {
		this.__backend.setOpacity(value);
		return value;
	}
	,get_resizable: function() {
		return this.__resizable;
	}
	,set_resizable: function(value) {
		this.__resizable = this.__backend.setResizable(value);
		return this.__resizable;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_textInputEnabled: function() {
		return this.__backend.getTextInputEnabled();
	}
	,set_textInputEnabled: function(value) {
		return this.__backend.setTextInputEnabled(value);
	}
	,setTextInputRect: function(value) {
		return this.__backend.setTextInputRect(value);
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.__backend.setTitle(value);
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		this.__visible = this.__backend.setVisible(value);
		return this.__visible;
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_title:"set_title",get_title:"get_title",set_textInputEnabled:"set_textInputEnabled",get_textInputEnabled:"get_textInputEnabled",get_scale:"get_scale",set_resizable:"set_resizable",get_resizable:"get_resizable",set_opacity:"set_opacity",get_opacity:"get_opacity",set_mouseLock:"set_mouseLock",get_mouseLock:"get_mouseLock",set_minWidth:"set_minWidth",get_minWidth:"get_minWidth",set_minimized:"set_minimized",get_minimized:"get_minimized",set_minHeight:"set_minHeight",get_minHeight:"get_minHeight",set_maxWidth:"set_maxWidth",get_maxWidth:"get_maxWidth",set_maximized:"set_maximized",get_maximized:"get_maximized",set_maxHeight:"set_maxHeight",get_maxHeight:"get_maxHeight",get_hidden:"get_hidden",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_displayMode:"set_displayMode",get_displayMode:"get_displayMode",get_display:"get_display",set_cursor:"set_cursor",get_cursor:"get_cursor",set_borderless:"set_borderless",get_borderless:"get_borderless"}
};
var lime_utils_TAError = $hxEnums["lime.utils.TAError"] = { __ename__:"lime.utils.TAError",__constructs__:null
	,RangeError: {_hx_name:"RangeError",_hx_index:0,__enum__:"lime.utils.TAError",toString:$estr}
};
lime_utils_TAError.__constructs__ = [lime_utils_TAError.RangeError];
var lime_utils_AssetBundle = function() {
	this.data = new haxe_ds_StringMap();
	this.paths = [];
};
$hxClasses["lime.utils.AssetBundle"] = lime_utils_AssetBundle;
lime_utils_AssetBundle.__name__ = "lime.utils.AssetBundle";
lime_utils_AssetBundle.fromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	return lime_utils_AssetBundle.__extractBundle(input);
};
lime_utils_AssetBundle.fromFile = function(path) {
	return null;
};
lime_utils_AssetBundle.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils_AssetBundle.fromBytes(bytes));
};
lime_utils_AssetBundle.loadFromFile = function(path) {
	return lime_utils_Bytes.loadFromFile(path).then(lime_utils_AssetBundle.loadFromBytes);
};
lime_utils_AssetBundle.__extractBundle = function(input) {
	var entries = haxe_zip_Reader.readZip(input);
	var bundle = new lime_utils_AssetBundle();
	var _g_head = entries.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var entry = val;
		if(entry.compressed) {
			var bytes = entry.data;
			var this1 = bundle.data;
			var key = entry.fileName;
			var value = lime_utils_Bytes.decompress(bytes,lime_utils_CompressionAlgorithm.DEFLATE);
			this1.h[key] = value;
		} else {
			bundle.data.h[entry.fileName] = entry.data;
		}
		bundle.paths.push(entry.fileName);
	}
	return bundle;
};
lime_utils_AssetBundle.prototype = {
	data: null
	,paths: null
	,__class__: lime_utils_AssetBundle
};
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 896377;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = "lime.utils.AssetCache";
lime_utils_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.image.h,id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.font.h,id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.audio.h,id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			this.font.h[id] = asset;
			break;
		case "IMAGE":
			if(!((asset) instanceof lime_graphics_Image)) {
				throw haxe_Exception.thrown("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			this.image.h[id] = asset;
			break;
		case "MUSIC":case "SOUND":
			if(!((asset) instanceof lime_media_AudioBuffer)) {
				throw haxe_Exception.thrown("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			this.audio.h[id] = asset;
			break;
		default:
			throw haxe_Exception.thrown(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var h = this.audio.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(StringTools.startsWith(key,prefix)) {
					var _this = this.audio;
					if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
						delete(_this.h[key]);
					}
				}
			}
			var h = this.font.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(StringTools.startsWith(key,prefix)) {
					var _this = this.font;
					if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
						delete(_this.h[key]);
					}
				}
			}
			var h = this.image.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(StringTools.startsWith(key,prefix)) {
					var _this = this.image;
					if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
						delete(_this.h[key]);
					}
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.sizes = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.pathGroups = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = "lime.utils.AssetLibrary";
lime_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
lime_utils_AssetLibrary.fromBundle = function(bundle) {
	if(Object.prototype.hasOwnProperty.call(bundle.data.h,"library.json")) {
		var manifest = lime_utils_AssetManifest.fromBytes(bundle.data.h["library.json"]);
		if(manifest != null) {
			var library = null;
			if(manifest.libraryType == null) {
				library = new lime_utils_AssetLibrary();
			} else {
				var name = manifest.libraryType;
				var libraryClass = $hxClasses[name];
				if(libraryClass != null) {
					library = Type.createInstance(libraryClass,manifest.libraryArgs);
				} else {
					lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 122, className : "lime.utils.AssetLibrary", methodName : "fromBundle"});
					return null;
				}
			}
			library.__fromBundle(bundle,manifest);
			return library;
		}
	} else {
		var library = new lime_utils_AssetLibrary();
		library.__fromBundle(bundle);
		return library;
	}
	return null;
};
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	if(manifest == null) {
		return null;
	}
	var library = null;
	if(manifest.libraryType == null) {
		library = new lime_utils_AssetLibrary();
	} else {
		var name = manifest.libraryType;
		var libraryClass = $hxClasses[name];
		if(libraryClass != null) {
			library = Type.createInstance(libraryClass,manifest.libraryArgs);
		} else {
			lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 160, className : "lime.utils.AssetLibrary", methodName : "fromManifest"});
			return null;
		}
	}
	library.__fromManifest(manifest);
	return library;
};
lime_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(bytes,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load();
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
lime_utils_AssetLibrary.prototype = {
	onChange: null
	,assetsLoaded: null
	,assetsTotal: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesTotal: null
	,cachedAudioBuffers: null
	,cachedBytes: null
	,cachedFonts: null
	,cachedImages: null
	,cachedText: null
	,classTypes: null
	,loaded: null
	,pathGroups: null
	,paths: null
	,preload: null
	,promise: null
	,sizes: null
	,types: null
	,exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var assetType = this.types.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		case "TEXT":
			return this.getText(id);
		default:
			throw haxe_Exception.thrown("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id)) {
			return this.cachedAudioBuffers.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , haxe_io_Bytes));
		} else {
			return lime_media_AudioBuffer.fromFile(this.getPath(id));
		}
	}
	,getBytes: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return this.cachedBytes.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			var bytes = lime_utils_Bytes.ofString(this.cachedText.h[id]);
			this.cachedBytes.h[id] = bytes;
			return bytes;
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , haxe_io_Bytes);
		} else {
			return lime_utils_Bytes.fromFile(this.getPath(id));
		}
	}
	,getFont: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id)) {
			return this.cachedFonts.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , lime_text_Font);
		} else {
			return lime_text_Font.fromFile(this.getPath(id));
		}
	}
	,getImage: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedImages.h,id)) {
			return this.cachedImages.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , lime_graphics_Image);
		} else {
			return lime_graphics_Image.fromFile(this.getPath(id));
		}
	}
	,getPath: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.paths.h,id)) {
			return this.paths.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			return this.pathGroups.h[id][0];
		} else {
			return null;
		}
	}
	,getText: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			return this.cachedText.h[id];
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return true;
		}
		var _g = js_Boot.__cast(type , String);
		if(_g == null) {
			if(!(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id) || Object.prototype.hasOwnProperty.call(this.cachedText.h,id) || Object.prototype.hasOwnProperty.call(this.cachedImages.h,id) || Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id))) {
				return Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id);
			} else {
				return true;
			}
		} else {
			switch(_g) {
			case "FONT":
				return Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id);
			case "IMAGE":
				return Object.prototype.hasOwnProperty.call(this.cachedImages.h,id);
			case "MUSIC":case "SOUND":
				return Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id);
			default:
				if(!Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
					return Object.prototype.hasOwnProperty.call(this.cachedText.h,id);
				} else {
					return true;
				}
			}
		}
	}
	,list: function(type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var items = [];
		var h = this.types.h;
		var id_h = h;
		var id_keys = Object.keys(h);
		var id_length = id_keys.length;
		var id_current = 0;
		while(id_current < id_length) {
			var id = id_keys[id_current++];
			if(requestedType == null || this.exists(id,type)) {
				items.push(id);
			}
		}
		return items;
	}
	,loadAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.loadBytes(id);
		case "FONT":
			return this.loadFont(id);
		case "IMAGE":
			return this.loadImage(id);
		case "MUSIC":case "SOUND":
			return this.loadAudioBuffer(id);
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to load template: " + id);
		case "TEXT":
			return this.loadText(id);
		default:
			throw haxe_Exception.thrown("Unknown asset type: " + type);
		}
	}
	,load: function() {
		if(this.loaded) {
			return lime_app_Future.withValue(this);
		}
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.bytesLoadedCache = new haxe_ds_StringMap();
			this.assetsLoaded = 0;
			this.assetsTotal = 1;
			var h = this.preload.h;
			var id_h = h;
			var id_keys = Object.keys(h);
			var id_length = id_keys.length;
			var id_current = 0;
			while(id_current < id_length) {
				var id = id_keys[id_current++];
				if(!this.preload.h[id]) {
					continue;
				}
				lime_utils_Log.verbose("Preloading asset: " + id + " [" + this.types.h[id] + "]",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 408, className : "lime.utils.AssetLibrary", methodName : "load"});
				var _g = this.types.h[id];
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.assetsTotal++;
						var future = this.loadBytes(id);
						future.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0].load_onProgress(id[0],bytesLoaded,bytesTotal);
							};
						})([id],[this]));
						future.onError((function(id,_g) {
							return function(message) {
								_g[0].load_onError(id[0],message);
							};
						})([id],[this]));
						future.onComplete((function(id,_g) {
							return function(bytes) {
								_g[0].loadBytes_onComplete(id[0],bytes);
							};
						})([id],[this]));
						break;
					case "FONT":
						this.assetsTotal++;
						var future1 = this.loadFont(id);
						future1.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0].load_onProgress(id[0],bytesLoaded,bytesTotal);
							};
						})([id],[this]));
						future1.onError((function(id,_g) {
							return function(message) {
								_g[0].load_onError(id[0],message);
							};
						})([id],[this]));
						future1.onComplete((function(id,_g) {
							return function(font) {
								_g[0].loadFont_onComplete(id[0],font);
							};
						})([id],[this]));
						break;
					case "IMAGE":
						this.assetsTotal++;
						var future2 = this.loadImage(id);
						future2.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0].load_onProgress(id[0],bytesLoaded,bytesTotal);
							};
						})([id],[this]));
						future2.onError((function(id,_g) {
							return function(message) {
								_g[0].load_onError(id[0],message);
							};
						})([id],[this]));
						future2.onComplete((function(id,_g) {
							return function(image) {
								_g[0].loadImage_onComplete(id[0],image);
							};
						})([id],[this]));
						break;
					case "MUSIC":case "SOUND":
						this.assetsTotal++;
						var future3 = this.loadAudioBuffer(id);
						future3.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0].load_onProgress(id[0],bytesLoaded,bytesTotal);
							};
						})([id],[this]));
						future3.onError((function(id,_g) {
							return function(message) {
								_g[0].loadAudioBuffer_onError(id[0],message);
							};
						})([id],[this]));
						future3.onComplete((function(id,_g) {
							return function(audioBuffer) {
								_g[0].loadAudioBuffer_onComplete(id[0],audioBuffer);
							};
						})([id],[this]));
						break;
					case "TEXT":
						this.assetsTotal++;
						var future4 = this.loadText(id);
						future4.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0].load_onProgress(id[0],bytesLoaded,bytesTotal);
							};
						})([id],[this]));
						future4.onError((function(id,_g) {
							return function(message) {
								_g[0].load_onError(id[0],message);
							};
						})([id],[this]));
						future4.onComplete((function(id,_g) {
							return function(text) {
								_g[0].loadText_onComplete(id[0],text);
							};
						})([id],[this]));
						break;
					default:
					}
				}
			}
			this.__assetLoaded(null);
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id)) {
			return lime_app_Future.withValue(this.cachedAudioBuffers.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , haxe_io_Bytes)));
		} else if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			return lime_media_AudioBuffer.loadFromFiles(this.pathGroups.h[id]);
		} else {
			return lime_media_AudioBuffer.loadFromFile(this.paths.h[id]);
		}
	}
	,loadBytes: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return lime_app_Future.withValue(this.cachedBytes.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else {
			return lime_utils_Bytes.loadFromFile(this.getPath(id));
		}
	}
	,loadFont: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id)) {
			return lime_app_Future.withValue(this.cachedFonts.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			var font = Type.createInstance(this.classTypes.h[id],[]);
			return font.__loadFromName(font.name);
		} else {
			return lime_text_Font.loadFromName(this.getPath(id));
		}
	}
	,loadImage: function(id) {
		var _gthis = this;
		if(Object.prototype.hasOwnProperty.call(this.cachedImages.h,id)) {
			return lime_app_Future.withValue(this.cachedImages.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return lime_graphics_Image.loadFromBytes(this.cachedBytes.h[id]).then(function(image) {
				var _this = _gthis.cachedBytes;
				if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
					delete(_this.h[id]);
				}
				_gthis.cachedImages.h[id] = image;
				return lime_app_Future.withValue(image);
			});
		} else {
			return lime_graphics_Image.loadFromFile(this.getPath(id));
		}
	}
	,loadText: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			return lime_app_Future.withValue(this.cachedText.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id) || Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return lime_app_Future.withValue(null);
			} else {
				var text = bytes.getString(0,bytes.length);
				this.cachedText.h[id] = text;
				return lime_app_Future.withValue(text);
			}
		} else {
			var request = new lime_net__$HTTPRequest_$String();
			return request.load(this.getPath(id));
		}
	}
	,unload: function() {
		this.cachedBytes.h = Object.create(null);
		this.cachedFonts.h = Object.create(null);
		this.cachedImages.h = Object.create(null);
		this.cachedAudioBuffers.h = Object.create(null);
		this.cachedText.h = Object.create(null);
	}
	,__assetLoaded: function(id) {
		this.assetsLoaded++;
		if(id != null) {
			lime_utils_Log.verbose("Loaded asset: " + id + " [" + this.types.h[id] + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 637, className : "lime.utils.AssetLibrary", methodName : "__assetLoaded"});
		}
		if(id != null) {
			var size = Object.prototype.hasOwnProperty.call(this.sizes.h,id) ? this.sizes.h[id] : 0;
			if(!Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h,id)) {
				this.bytesLoaded += size;
			} else {
				var cache = this.bytesLoadedCache.h[id];
				if(cache < size) {
					this.bytesLoaded += size - cache;
				}
			}
			this.bytesLoadedCache.h[id] = size;
		}
		if(this.assetsLoaded < this.assetsTotal) {
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		} else {
			this.loaded = true;
			this.promise.progress(this.bytesTotal,this.bytesTotal);
			this.promise.complete(this);
		}
	}
	,__cacheBreak: function(path) {
		return lime_utils_Assets.__cacheBreak(path);
	}
	,__fromBundle: function(bundle,manifest) {
		if(manifest != null) {
			var id;
			var data;
			var type;
			var _g = 0;
			var _g1 = manifest.assets;
			while(_g < _g1.length) {
				var asset = _g1[_g];
				++_g;
				id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
				data = bundle.data.h[asset.path];
				if(Object.prototype.hasOwnProperty.call(asset,"type")) {
					type = asset.type;
					if(type == "TEXT") {
						this.cachedText.h[id] = data != null ? Std.string(data) : null;
					} else {
						this.cachedBytes.h[id] = data;
					}
					this.types.h[id] = asset.type;
				} else {
					this.cachedBytes.h[id] = data;
					this.types.h[id] = "BINARY";
				}
			}
		} else {
			var _g = 0;
			var _g1 = bundle.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				this.cachedBytes.h[path] = bundle.data.h[path];
				this.types.h[path] = "BINARY";
			}
		}
	}
	,__fromManifest: function(manifest) {
		var hasSize = manifest.version >= 2;
		var size;
		var id;
		var pathGroup;
		var classRef;
		var basePath = manifest.rootPath;
		if(basePath == null) {
			basePath = "";
		}
		if(basePath != "") {
			basePath += "/";
		}
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			size = hasSize && Object.prototype.hasOwnProperty.call(asset,"size") ? asset.size : 100;
			id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
			if(Object.prototype.hasOwnProperty.call(asset,"path")) {
				var this1 = this.paths;
				var value = this.__cacheBreak(this.__resolvePath(basePath + Std.string(Reflect.field(asset,"path"))));
				this1.h[id] = value;
			}
			if(Object.prototype.hasOwnProperty.call(asset,"pathGroup")) {
				pathGroup = Reflect.field(asset,"pathGroup");
				var _g2 = 0;
				var _g3 = pathGroup.length;
				while(_g2 < _g3) {
					var i = _g2++;
					pathGroup[i] = this.__cacheBreak(this.__resolvePath(basePath + pathGroup[i]));
				}
				this.pathGroups.h[id] = pathGroup;
			}
			this.sizes.h[id] = size;
			this.types.h[id] = asset.type;
			if(Object.prototype.hasOwnProperty.call(asset,"preload")) {
				this.preload.h[id] = Reflect.field(asset,"preload");
			}
			if(Object.prototype.hasOwnProperty.call(asset,"className")) {
				var name = Reflect.field(asset,"className");
				classRef = $hxClasses[name];
				this.classTypes.h[id] = classRef;
			}
		}
		this.bytesTotal = 0;
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
			if(Object.prototype.hasOwnProperty.call(this.preload.h,id) && this.preload.h[id] && Object.prototype.hasOwnProperty.call(this.sizes.h,id)) {
				this.bytesTotal += this.sizes.h[id];
			}
		}
	}
	,__resolvePath: function(path) {
		path = StringTools.replace(path,"\\","/");
		var colonIdx = path.indexOf(":");
		if(StringTools.startsWith(path,"http") && colonIdx > 0) {
			var lastSlashIdx = colonIdx + 3;
			var httpSection = HxOverrides.substr(path,0,lastSlashIdx);
			path = httpSection + StringTools.replace(HxOverrides.substr(path,lastSlashIdx,null),"//","/");
		} else {
			path = StringTools.replace(path,"//","/");
		}
		if(path.indexOf("./") > -1) {
			var split = path.split("/");
			var newPath = [];
			var _g = 0;
			var _g1 = split.length;
			while(_g < _g1) {
				var i = _g++;
				if(split[i] == "..") {
					if(i == 0 || newPath[i - 1] == "..") {
						newPath.push("..");
					} else {
						newPath.pop();
					}
				} else if(split[i] == ".") {
					if(i == 0) {
						newPath.push(".");
					}
				} else {
					newPath.push(split[i]);
				}
			}
			path = newPath.join("/");
		}
		return path;
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		this.cachedAudioBuffers.h[id] = audioBuffer;
		if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			var pathGroup = this.pathGroups.h[id];
			var h = this.pathGroups.h;
			var otherID_h = h;
			var otherID_keys = Object.keys(h);
			var otherID_length = otherID_keys.length;
			var otherID_current = 0;
			while(otherID_current < otherID_length) {
				var otherID = otherID_keys[otherID_current++];
				if(otherID == id) {
					continue;
				}
				var _g = 0;
				while(_g < pathGroup.length) {
					var path = pathGroup[_g];
					++_g;
					if(this.pathGroups.h[otherID].indexOf(path) > -1) {
						this.cachedAudioBuffers.h[otherID] = audioBuffer;
						break;
					}
				}
			}
		}
		this.__assetLoaded(id);
	}
	,loadAudioBuffer_onError: function(id,message) {
		if(message != null && message != "") {
			lime_utils_Log.warn("Could not load \"" + id + "\": " + Std.string(message),{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 883, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		} else {
			lime_utils_Log.warn("Could not load \"" + id + "\"",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 887, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		}
		this.loadAudioBuffer_onComplete(id,new lime_media_AudioBuffer());
	}
	,loadBytes_onComplete: function(id,bytes) {
		this.cachedBytes.h[id] = bytes;
		this.__assetLoaded(id);
	}
	,loadFont_onComplete: function(id,font) {
		this.cachedFonts.h[id] = font;
		this.__assetLoaded(id);
	}
	,loadImage_onComplete: function(id,image) {
		this.cachedImages.h[id] = image;
		this.__assetLoaded(id);
	}
	,loadText_onComplete: function(id,text) {
		this.cachedText.h[id] = text;
		this.__assetLoaded(id);
	}
	,load_onError: function(id,message) {
		if(message != null && message != "") {
			this.promise.error("Error loading asset \"" + id + "\": " + Std.string(message));
		} else {
			this.promise.error("Error loading asset \"" + id + "\"");
		}
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(bytesLoaded > 0) {
			var size = this.sizes.h[id];
			var percent;
			if(bytesTotal > 0) {
				percent = bytesLoaded / bytesTotal;
				if(percent > 1) {
					percent = 1;
				}
				bytesLoaded = Math.floor(percent * size);
			} else if(bytesLoaded > size) {
				bytesLoaded = size;
			}
			if(Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h,id)) {
				var cache = this.bytesLoadedCache.h[id];
				if(bytesLoaded != cache) {
					this.bytesLoaded += bytesLoaded - cache;
				}
			} else {
				this.bytesLoaded += bytesLoaded;
			}
			this.bytesLoadedCache.h[id] = bytesLoaded;
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 2;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = "lime.utils.AssetManifest";
lime_utils_AssetManifest.fromBytes = function(bytes,rootPath) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length),rootPath);
	} else {
		return null;
	}
};
lime_utils_AssetManifest.fromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_AssetManifest.fromBytes(lime_utils_Bytes.fromFile(path),rootPath);
};
lime_utils_AssetManifest.loadFromBytes = function(bytes,rootPath) {
	return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetManifest.loadFromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_Bytes.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
	});
};
lime_utils_AssetManifest.parse = function(data,rootPath) {
	if(data == null || data == "") {
		return null;
	}
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	if(Object.prototype.hasOwnProperty.call(manifestData,"name")) {
		manifest.name = manifestData.name;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryType")) {
		manifest.libraryType = manifestData.libraryType;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryArgs")) {
		manifest.libraryArgs = manifestData.libraryArgs;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"assets")) {
		var assets = manifestData.assets;
		if(Object.prototype.hasOwnProperty.call(manifestData,"version") && manifestData.version <= 2) {
			manifest.assets = haxe_Unserializer.run(assets);
		} else {
			manifest.assets = assets;
		}
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"rootPath")) {
		manifest.rootPath = manifestData.rootPath;
	}
	if(rootPath != null && rootPath != "") {
		if(manifest.rootPath == null || manifest.rootPath == "") {
			manifest.rootPath = rootPath;
		} else {
			manifest.rootPath = rootPath + "/" + manifest.rootPath;
		}
	}
	return manifest;
};
lime_utils_AssetManifest.__resolvePath = function(path) {
	if(path == null) {
		return null;
	}
	var queryIndex = path.indexOf("?");
	var basePath;
	if(queryIndex > -1) {
		basePath = HxOverrides.substr(path,0,queryIndex);
	} else {
		basePath = path;
	}
	basePath = StringTools.replace(basePath,"\\","/");
	while(StringTools.endsWith(basePath,"/")) basePath = HxOverrides.substr(basePath,0,basePath.length - 1);
	if(StringTools.endsWith(basePath,".bundle")) {
		if(queryIndex > -1) {
			return basePath + "/library.json" + HxOverrides.substr(path,queryIndex,null);
		} else {
			return basePath + "/library.json";
		}
	} else {
		return path;
	}
};
lime_utils_AssetManifest.__resolveRootPath = function(rootPath,path) {
	if(rootPath != null) {
		return rootPath;
	}
	var queryIndex = path.indexOf("?");
	if(queryIndex > -1) {
		rootPath = HxOverrides.substr(path,0,queryIndex);
	} else {
		rootPath = path;
	}
	rootPath = StringTools.replace(rootPath,"\\","/");
	while(StringTools.endsWith(rootPath,"/")) {
		if(rootPath == "/") {
			return rootPath;
		}
		rootPath = HxOverrides.substr(rootPath,0,rootPath.length - 1);
	}
	if(StringTools.endsWith(rootPath,".bundle")) {
		return rootPath;
	} else {
		return haxe_io_Path.directory(rootPath);
	}
};
lime_utils_AssetManifest.prototype = {
	assets: null
	,libraryArgs: null
	,libraryType: null
	,name: null
	,rootPath: null
	,version: null
	,serialize: function() {
		var manifestData = { };
		manifestData.version = this.version;
		manifestData.libraryType = this.libraryType;
		manifestData.libraryArgs = this.libraryArgs;
		manifestData.name = this.name;
		manifestData.assets = haxe_Serializer.run(this.assets);
		manifestData.rootPath = this.rootPath;
		return JSON.stringify(manifestData);
	}
	,__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = "lime.utils.Assets";
lime_utils_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.exists(symbol_symbolName,type);
	}
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "FONT":
			var font = lime_utils_Assets.cache.font.h[id];
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		default:
			return null;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			if(symbol_library.isLocal(symbol_symbolName,type)) {
				var asset = symbol_library.getAsset(symbol_symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.error(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "lime/utils/Assets.hx", lineNumber : 133, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.error("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "lime/utils/Assets.hx", lineNumber : 138, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "lime/utils/Assets.hx", lineNumber : 143, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"SOUND",useCache);
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"FONT",useCache);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	return lime_utils_Assets.libraries.h[name];
};
lime_utils_Assets.getPath = function(id) {
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,null)) {
			return symbol_library.getPath(symbol_symbolName);
		} else {
			lime_utils_Log.error("There is no asset with an ID of \"" + id + "\"",{ fileName : "lime/utils/Assets.hx", lineNumber : 224, className : "lime.utils.Assets", methodName : "getPath"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "lime/utils/Assets.hx", lineNumber : 229, className : "lime.utils.Assets", methodName : "getPath"});
	}
	return null;
};
lime_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getAsset(id,"TEXT",false);
};
lime_utils_Assets.hasLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	return Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraries.h,name);
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.isLocal(symbol_symbolName,type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(image) {
	if(image != null) {
		return image.buffer != null;
	} else {
		return false;
	}
};
lime_utils_Assets.list = function(type) {
	var items = [];
	var h = lime_utils_Assets.libraries.h;
	var library_h = h;
	var library_keys = Object.keys(h);
	var library_length = library_keys.length;
	var library_current = 0;
	while(library_current < library_length) {
		var library = library_h[library_keys[library_current++]];
		var libraryItems = library.list(type);
		if(libraryItems != null) {
			items = items.concat(libraryItems);
		}
	}
	return items;
};
lime_utils_Assets.loadAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "FONT":
			var font = lime_utils_Assets.cache.font.h[id];
			if(font != null) {
				return lime_app_Future.withValue(font);
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return lime_app_Future.withValue(image);
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return lime_app_Future.withValue(audio);
			}
			break;
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		default:
			return null;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			var future = symbol_library.loadAsset(symbol_symbolName,type);
			if(useCache && lime_utils_Assets.cache.enabled) {
				future.onComplete(function(asset) {
					lime_utils_Assets.cache.set(id,type,asset);
				});
			}
			return future;
		} else {
			return lime_app_Future.withError("There is no " + type + " asset with an ID of \"" + id + "\"");
		}
	} else {
		return lime_app_Future.withError(lime_utils_Assets.__libraryNotFound(symbol_libraryName));
	}
};
lime_utils_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"SOUND",useCache);
};
lime_utils_Assets.loadBytes = function(id) {
	return lime_utils_Assets.loadAsset(id,"BINARY",false);
};
lime_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"FONT",useCache);
};
lime_utils_Assets.loadImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.loadLibrary = function(id) {
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return library.load();
	}
	var path = id;
	var rootPath = null;
	if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.bundlePaths.h,id)) {
		lime_utils_AssetBundle.loadFromFile(lime_utils_Assets.bundlePaths.h[id]).onComplete(function(bundle) {
			if(bundle == null) {
				promise.error("Cannot load bundle for library \"" + id + "\"");
				return;
			}
			var library = lime_utils_AssetLibrary.fromBundle(bundle);
			if(library == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				lime_utils_Assets.libraries.h[id] = library;
				library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				promise.completeWith(library.load());
			}
		}).onError(function(_) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	} else {
		if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraryPaths.h,id)) {
			path = lime_utils_Assets.libraryPaths.h[id];
			rootPath = haxe_io_Path.directory(path);
		} else {
			if(StringTools.endsWith(path,".bundle")) {
				rootPath = path;
				path += "/library.json";
			} else {
				rootPath = haxe_io_Path.directory(path);
			}
			path = lime_utils_Assets.__cacheBreak(path);
		}
		lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
			if(manifest == null) {
				promise.error("Cannot parse asset manifest for library \"" + id + "\"");
				return;
			}
			var library = lime_utils_AssetLibrary.fromManifest(manifest);
			if(library == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				lime_utils_Assets.libraries.h[id] = library;
				library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				promise.completeWith(library.load());
			}
		}).onError(function(_) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	}
	return promise.future;
};
lime_utils_Assets.loadText = function(id) {
	return lime_utils_Assets.loadAsset(id,"TEXT",false);
};
lime_utils_Assets.registerLibrary = function(name,library) {
	if(name == null || name == "") {
		name = "default";
	}
	if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraries.h,name)) {
		if(lime_utils_Assets.libraries.h[name] == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	lime_utils_Assets.libraries.h[name] = library;
};
lime_utils_Assets.unloadLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var library = lime_utils_Assets.libraries.h[name];
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	var _this = lime_utils_Assets.libraries;
	if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
		delete(_this.h[name]);
	}
};
lime_utils_Assets.__cacheBreak = function(path) {
	if(lime_utils_Assets.cache.version > 0) {
		if(path.indexOf("?") > -1) {
			path += "&" + lime_utils_Assets.cache.version;
		} else {
			path += "?" + lime_utils_Assets.cache.version;
		}
	}
	return path;
};
lime_utils_Assets.__libraryNotFound = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	if(lime_app_Application.current != null && lime_app_Application.current.__preloader != null && !lime_app_Application.current.__preloader.complete) {
		return "There is no asset library named \"" + name + "\", or it is not yet preloaded";
	} else {
		return "There is no asset library named \"" + name + "\"";
	}
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Assets_LibrarySymbol = function(id) {
	var colonIndex = id.indexOf(":");
	this.libraryName = id.substring(0,colonIndex);
	this.symbolName = id.substring(colonIndex + 1);
	this.library = lime_utils_Assets.getLibrary(this.libraryName);
};
$hxClasses["lime.utils._Assets.LibrarySymbol"] = lime_utils__$Assets_LibrarySymbol;
lime_utils__$Assets_LibrarySymbol.__name__ = "lime.utils._Assets.LibrarySymbol";
lime_utils__$Assets_LibrarySymbol.prototype = {
	library: null
	,libraryName: null
	,symbolName: null
	,isLocal: function(type) {
		return this.library.isLocal(this.symbolName,type);
	}
	,exists: function(type) {
		return this.library.exists(this.symbolName,type);
	}
	,__class__: lime_utils__$Assets_LibrarySymbol
};
var lime_utils_BytePointer = {};
lime_utils_BytePointer._new = function(bytes,offset) {
	if(offset == null) {
		offset = 0;
	}
	return new lime_utils_BytePointerData(bytes,offset);
};
lime_utils_BytePointer.set = function(this1,bytes,bufferView,buffer,offset) {
	if(buffer != null) {
		bytes = haxe_io_Bytes.ofData(buffer);
	}
	if(bytes != null || bufferView == null) {
		this1.bytes = bytes;
		this1.offset = offset != null ? offset : 0;
	} else {
		this1.bytes = haxe_io_Bytes.ofData(bufferView.buffer);
		this1.offset = offset != null ? bufferView.byteOffset + offset : bufferView.byteOffset;
	}
};
lime_utils_BytePointer.__arrayGet = function(this1,index) {
	if(this1.bytes != null) {
		return this1.bytes.b[index + this1.offset];
	} else {
		return 0;
	}
};
lime_utils_BytePointer.__arraySet = function(this1,index,value) {
	if(this1.bytes == null) {
		this1.bytes.b[index + this1.offset] = value & 255;
	}
	return value;
};
lime_utils_BytePointer.fromArrayBufferView = function(arrayBufferView) {
	if(arrayBufferView == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(arrayBufferView.buffer),arrayBufferView.byteOffset);
};
lime_utils_BytePointer.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(buffer),0);
};
lime_utils_BytePointer.fromBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils_BytePointer.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return new lime_utils_BytePointerData(null,0);
	} else {
		return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(bytesData),0);
	}
};
lime_utils_BytePointer.fromFile = function(path) {
	return new lime_utils_BytePointerData(lime_utils_Bytes.fromFile(path),0);
};
lime_utils_BytePointer.fromLimeBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils_BytePointer.toUInt8Array = function(bytePointer) {
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(vector != null) {
		this1 = new Uint8Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer,byteoffset);
		} else {
			this1 = new Uint8Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toUInt8ClampedArray = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint8ClampedArray(elements);
	} else if(array != null) {
		this1 = new Uint8ClampedArray(array);
	} else if(vector != null) {
		this1 = new Uint8ClampedArray(vector.__array);
	} else if(view != null) {
		this1 = new Uint8ClampedArray(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint8ClampedArray(buffer,byteoffset);
		} else {
			this1 = new Uint8ClampedArray(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toInt8Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int8Array(elements);
	} else if(array != null) {
		this1 = new Int8Array(array);
	} else if(vector != null) {
		this1 = new Int8Array(vector.__array);
	} else if(view != null) {
		this1 = new Int8Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int8Array(buffer,byteoffset);
		} else {
			this1 = new Int8Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toUInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint16Array(elements);
	} else if(array != null) {
		this1 = new Uint16Array(array);
	} else if(vector != null) {
		this1 = new Uint16Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint16Array(buffer,byteoffset);
		} else {
			this1 = new Uint16Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int16Array(elements);
	} else if(array != null) {
		this1 = new Int16Array(array);
	} else if(vector != null) {
		this1 = new Int16Array(vector.__array);
	} else if(view != null) {
		this1 = new Int16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int16Array(buffer,byteoffset);
		} else {
			this1 = new Int16Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toUInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint32Array(elements);
	} else if(array != null) {
		this1 = new Uint32Array(array);
	} else if(vector != null) {
		this1 = new Uint32Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint32Array(buffer,byteoffset);
		} else {
			this1 = new Uint32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int32Array(elements);
	} else if(array != null) {
		this1 = new Int32Array(array);
	} else if(vector != null) {
		this1 = new Int32Array(vector.__array);
	} else if(view != null) {
		this1 = new Int32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int32Array(buffer,byteoffset);
		} else {
			this1 = new Int32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toFloat32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(vector != null) {
		this1 = new Float32Array(vector.__array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,byteoffset);
		} else {
			this1 = new Float32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toFloat64Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 64 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Float64Array(elements);
	} else if(array != null) {
		this1 = new Float64Array(array);
	} else if(vector != null) {
		this1 = new Float64Array(vector.__array);
	} else if(view != null) {
		this1 = new Float64Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float64Array(buffer,byteoffset);
		} else {
			this1 = new Float64Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
var lime_utils_BytePointerData = function(bytes,offset) {
	this.bytes = bytes;
	this.offset = offset;
};
$hxClasses["lime.utils.BytePointerData"] = lime_utils_BytePointerData;
lime_utils_BytePointerData.__name__ = "lime.utils.BytePointerData";
lime_utils_BytePointerData.prototype = {
	bytes: null
	,offset: null
	,__class__: lime_utils_BytePointerData
};
var lime_utils_Bytes = {};
lime_utils_Bytes._new = function(length,bytesData) {
	return new haxe_io_Bytes(bytesData);
};
lime_utils_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
lime_utils_Bytes.compress = function(this1,algorithm) {
	switch(algorithm._hx_index) {
	case 0:
		return lime__$internal_format_Deflate.compress(this1);
	case 1:
		return lime__$internal_format_GZip.compress(this1);
	case 2:
		return lime__$internal_format_LZMA.compress(this1);
	case 3:
		return lime__$internal_format_Zlib.compress(this1);
	}
};
lime_utils_Bytes.decompress = function(this1,algorithm) {
	switch(algorithm._hx_index) {
	case 0:
		return lime__$internal_format_Deflate.decompress(this1);
	case 1:
		return lime__$internal_format_GZip.decompress(this1);
	case 2:
		return lime__$internal_format_LZMA.decompress(this1);
	case 3:
		return lime__$internal_format_Zlib.decompress(this1);
	}
};
lime_utils_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils_Bytes.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.fromFile = function(path) {
	return null;
};
lime_utils_Bytes.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils_Bytes.fromBytes(bytes));
};
lime_utils_Bytes.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
lime_utils_Bytes.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
var lime_utils_CompressionAlgorithm = $hxEnums["lime.utils.CompressionAlgorithm"] = { __ename__:"lime.utils.CompressionAlgorithm",__constructs__:null
	,DEFLATE: {_hx_name:"DEFLATE",_hx_index:0,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,GZIP: {_hx_name:"GZIP",_hx_index:1,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,LZMA: {_hx_name:"LZMA",_hx_index:2,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,ZLIB: {_hx_name:"ZLIB",_hx_index:3,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
};
lime_utils_CompressionAlgorithm.__constructs__ = [lime_utils_CompressionAlgorithm.DEFLATE,lime_utils_CompressionAlgorithm.GZIP,lime_utils_CompressionAlgorithm.LZMA,lime_utils_CompressionAlgorithm.ZLIB];
var lime_utils_DataPointer = {};
lime_utils_DataPointer._new = function(data) {
	return data;
};
lime_utils_DataPointer.fromFloat = function(value) {
	return value;
};
lime_utils_DataPointer.fromBytesPointer = function(pointer) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromArrayBufferView = function(arrayBufferView) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromArrayBuffer = function(buffer) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromBytes = function(bytes) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromBytesData = function(bytesData) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromLimeBytes = function(bytes) {
	return lime_utils_DataPointer.fromBytes(bytes);
};
lime_utils_DataPointer.fromCFFIPointer = function(pointer) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromFile = function(path) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.__withOffset = function(data,offset) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.equals = function(a,b) {
	return a == b;
};
lime_utils_DataPointer.equalsPointer = function(a,b) {
	return a == b;
};
lime_utils_DataPointer.greaterThan = function(a,b) {
	return a > b;
};
lime_utils_DataPointer.greaterThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) > lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.greaterThanOrEqual = function(a,b) {
	return a >= b;
};
lime_utils_DataPointer.greaterThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) >= lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.lessThan = function(a,b) {
	return a < b;
};
lime_utils_DataPointer.lessThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) < lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.lessThanOrEqual = function(a,b) {
	return a <= b;
};
lime_utils_DataPointer.lessThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) <= lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.notEquals = function(a,b) {
	return a != b;
};
lime_utils_DataPointer.notEqualsPointer = function(a,b) {
	return a != b;
};
lime_utils_DataPointer.plus = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,b);
};
lime_utils_DataPointer.plusPointer = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,b | 0);
};
lime_utils_DataPointer.minus = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,-b);
};
lime_utils_DataPointer.minusPointer = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,-(b | 0));
};
var lime_utils_Float32Array = {};
lime_utils_Float32Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_Float32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Float32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Float32Array.toString = function(this1) {
	if(this1 != null) {
		return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Float64Array = {};
lime_utils_Float64Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_Float64Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float64Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float64Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float64Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Float64Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Float64Array.toString = function(this1) {
	if(this1 != null) {
		return "Float64Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Int16Array = {};
lime_utils_Int16Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_Int16Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Int16Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Int16Array.toString = function(this1) {
	if(this1 != null) {
		return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Int32Array = {};
lime_utils_Int32Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_Int32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Int32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Int32Array.toString = function(this1) {
	if(this1 != null) {
		return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Int8Array = {};
lime_utils_Int8Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_Int8Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	return new Int8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Int8Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Int8Array.toString = function(this1) {
	if(this1 != null) {
		return "Int8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = "lime.utils.Log";
lime_utils_Log.debug = function(message,info) {
	if(lime_utils_Log.level >= 4) {
		console.debug("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + Std.string(message);
		if(lime_utils_Log.throwErrors) {
			throw haxe_Exception.thrown(message1);
		} else {
			console.error(message1);
		}
	}
};
lime_utils_Log.info = function(message,info) {
	if(lime_utils_Log.level >= 3) {
		console.info("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.print = function(message) {
	console.log(message);
};
lime_utils_Log.println = function(message) {
	console.log(message);
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		var message1 = "[" + info.className + "] " + Std.string(message);
		console.log(message1);
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.warn("[" + info.className + "] WARNING: " + Std.string(message));
	}
};
var lime_utils_LogLevel = {};
lime_utils_LogLevel.gt = function(a,b) {
	return a > b;
};
lime_utils_LogLevel.gte = function(a,b) {
	return a >= b;
};
lime_utils_LogLevel.lt = function(a,b) {
	return a < b;
};
lime_utils_LogLevel.lte = function(a,b) {
	return a <= b;
};
var lime_utils_Preloader = function() {
	this.bytesTotalCache = new haxe_ds_StringMap();
	this.bytesLoadedCache2 = new haxe_ds_StringMap();
	this.bytesLoadedCache = new haxe_ds_ObjectMap();
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.libraries = [];
	this.libraryNames = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.utils.Preloader"] = lime_utils_Preloader;
lime_utils_Preloader.__name__ = "lime.utils.Preloader";
lime_utils_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesLoadedCache2: null
	,bytesTotal: null
	,bytesTotalCache: null
	,initLibraryNames: null
	,libraries: null
	,libraryNames: null
	,loadedLibraries: null
	,loadedStage: null
	,preloadComplete: null
	,preloadStarted: null
	,simulateProgress: null
	,addLibrary: function(library) {
		this.libraries.push(library);
	}
	,addLibraryName: function(name) {
		if(this.libraryNames.indexOf(name) == -1) {
			this.libraryNames.push(name);
		}
	}
	,load: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			this.bytesTotal += library.bytesTotal;
		}
		this.loadedLibraries = -1;
		this.preloadStarted = false;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = [_g1[_g]];
			++_g;
			lime_utils_Log.verbose("Preloading asset library",{ fileName : "lime/utils/Preloader.hx", lineNumber : 134, className : "lime.utils.Preloader", methodName : "load"});
			library[0].load().onProgress((function(library) {
				return function(loaded,total) {
					if(_gthis.bytesLoadedCache.h.__keys__[library[0].__id__] == null) {
						_gthis.bytesLoaded += loaded;
					} else {
						_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache.h[library[0].__id__];
					}
					_gthis.bytesLoadedCache.set(library[0],loaded);
					if(!_gthis.simulateProgress) {
						_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
					}
				};
			})(library)).onComplete((function(library) {
				return function(_) {
					if(_gthis.bytesLoadedCache.h.__keys__[library[0].__id__] == null) {
						_gthis.bytesLoaded += library[0].bytesTotal;
					} else {
						_gthis.bytesLoaded += (library[0].bytesTotal | 0) - _gthis.bytesLoadedCache.h[library[0].__id__];
					}
					_gthis.loadedAssetLibrary();
				};
			})(library)).onError((function() {
				return function(e) {
					lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 170, className : "lime.utils.Preloader", methodName : "load"});
				};
			})());
		}
		var _g = 0;
		var _g1 = this.libraryNames;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			this.bytesTotal += 200;
		}
		this.loadedLibraries++;
		this.preloadStarted = true;
		this.updateProgress();
	}
	,loadedAssetLibrary: function(name) {
		this.loadedLibraries++;
		var current = this.loadedLibraries;
		if(!this.preloadStarted) {
			++current;
		}
		var totalLibraries = this.libraries.length + this.libraryNames.length;
		if(name != null) {
			lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 197, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		} else {
			lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 201, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		}
		this.updateProgress();
	}
	,start: function() {
		if(this.complete || this.simulateProgress || !this.preloadComplete) {
			return;
		}
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		var _gthis = this;
		if(!this.simulateProgress) {
			this.onProgress.dispatch(this.bytesLoaded,this.bytesTotal);
		}
		if(this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
			this.initLibraryNames = true;
			var _g = 0;
			var _g1 = this.libraryNames;
			while(_g < _g1.length) {
				var name = [_g1[_g]];
				++_g;
				lime_utils_Log.verbose("Preloading asset library: " + name[0],{ fileName : "lime/utils/Preloader.hx", lineNumber : 239, className : "lime.utils.Preloader", methodName : "updateProgress"});
				lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name) {
					return function(loaded,total) {
						if(total > 0) {
							if(!Object.prototype.hasOwnProperty.call(_gthis.bytesTotalCache.h,name[0])) {
								_gthis.bytesTotalCache.h[name[0]] = total;
								_gthis.bytesTotal += total - 200;
							}
							if(loaded > total) {
								loaded = total;
							}
							if(!Object.prototype.hasOwnProperty.call(_gthis.bytesLoadedCache2.h,name[0])) {
								_gthis.bytesLoaded += loaded;
							} else {
								_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache2.h[name[0]];
							}
							_gthis.bytesLoadedCache2.h[name[0]] = loaded;
							if(!_gthis.simulateProgress) {
								_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
							}
						}
					};
				})(name)).onComplete((function(name) {
					return function(library) {
						var total = 200;
						if(Object.prototype.hasOwnProperty.call(_gthis.bytesTotalCache.h,name[0])) {
							total = _gthis.bytesTotalCache.h[name[0]];
						}
						if(!Object.prototype.hasOwnProperty.call(_gthis.bytesLoadedCache2.h,name[0])) {
							_gthis.bytesLoaded += total;
						} else {
							_gthis.bytesLoaded += total - _gthis.bytesLoadedCache2.h[name[0]];
						}
						_gthis.loadedAssetLibrary(name[0]);
					};
				})(name)).onError((function() {
					return function(e) {
						lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 293, className : "lime.utils.Preloader", methodName : "updateProgress"});
					};
				})());
			}
		}
		if(!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
			if(!this.preloadComplete) {
				this.preloadComplete = true;
				lime_utils_Log.verbose("Preload complete",{ fileName : "lime/utils/Preloader.hx", lineNumber : 306, className : "lime.utils.Preloader", methodName : "updateProgress"});
			}
			this.start();
		}
	}
	,__class__: lime_utils_Preloader
};
var lime_utils_UInt16Array = {};
lime_utils_UInt16Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_UInt16Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt16Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt16Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_UInt32Array = {};
lime_utils_UInt32Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_UInt32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt32Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_UInt8Array = {};
lime_utils_UInt8Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_UInt8Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt8Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt8Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_UInt8ClampedArray = {};
lime_utils_UInt8ClampedArray.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_UInt8ClampedArray.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt8ClampedArray.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt8ClampedArray.toString = function(this1) {
	if(this1 != null) {
		return "UInt8ClampedArray [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
lime_utils_UInt8ClampedArray._clamp = function(_in) {
	var _out = _in | 0;
	if(_out > 255) {
		_out = 255;
	}
	if(_out < 0) {
		return 0;
	} else {
		return _out;
	}
};
var little_KeywordConfig = function(VARIABLE_DECLARATION,FUNCTION_DECLARATION,TYPE_DECL_OR_CAST,FUNCTION_RETURN,NULL_VALUE,TRUE_VALUE,FALSE_VALUE,TYPE_DYNAMIC,TYPE_INT,TYPE_FLOAT,TYPE_BOOLEAN,TYPE_STRING,TYPE_FUNCTION,TYPE_CONDITION,TYPE_MODULE,TYPE_SIGN,MAIN_MODULE_NAME,REGISTERED_MODULE_NAME,OBJECT_TYPE_PROPERTY_NAME,OBJECT_ADDRESS_PROPERTY_NAME,OBJECT_DOC_PROPERTY_NAME,TO_STRING_PROPERTY_NAME,PRINT_FUNCTION_NAME,RAISE_ERROR_FUNCTION_NAME,READ_FUNCTION_NAME,RUN_CODE_FUNCTION_NAME,CONDITION_PATTERN_PARAMETER_NAME,CONDITION_BODY_PARAMETER_NAME,THIS,TYPE_UNKNOWN,CONDITION_TYPES,RECOGNIZED_SIGNS,PROPERTY_ACCESS_SIGN,EQUALS_SIGN,NOT_EQUALS_SIGN,LARGER_SIGN,SMALLER_SIGN,LARGER_EQUALS_SIGN,SMALLER_EQUALS_SIGN,XOR_SIGN,OR_SIGN,AND_SIGN,FOR_LOOP_FROM,FOR_LOOP_TO,FOR_LOOP_JUMP,TYPE_CAST_FUNCTION_PREFIX,ELSE) {
	this.ELSE = "else";
	this.TYPE_CAST_FUNCTION_PREFIX = "to";
	this.FOR_LOOP_JUMP = "jump";
	this.FOR_LOOP_TO = "to";
	this.FOR_LOOP_FROM = "from";
	this.AND_SIGN = "&&";
	this.OR_SIGN = "||";
	this.XOR_SIGN = "^^";
	this.SMALLER_EQUALS_SIGN = "<=";
	this.LARGER_EQUALS_SIGN = ">=";
	this.SMALLER_SIGN = "<";
	this.LARGER_SIGN = ">";
	this.NOT_EQUALS_SIGN = "!=";
	this.EQUALS_SIGN = "==";
	this.PROPERTY_ACCESS_SIGN = ".";
	this.RECOGNIZED_SIGNS = [];
	this.CONDITION_TYPES = [];
	this.TYPE_UNKNOWN = "Unknown";
	this.THIS = "self";
	this.CONDITION_BODY_PARAMETER_NAME = "code";
	this.CONDITION_PATTERN_PARAMETER_NAME = "pattern";
	this.RUN_CODE_FUNCTION_NAME = "run";
	this.READ_FUNCTION_NAME = "read";
	this.RAISE_ERROR_FUNCTION_NAME = "error";
	this.PRINT_FUNCTION_NAME = "print";
	this.TO_STRING_PROPERTY_NAME = "toString";
	this.OBJECT_DOC_PROPERTY_NAME = "documentation";
	this.OBJECT_ADDRESS_PROPERTY_NAME = "address";
	this.OBJECT_TYPE_PROPERTY_NAME = "type";
	this.REGISTERED_MODULE_NAME = "Registered";
	this.MAIN_MODULE_NAME = "Main";
	this.TYPE_SIGN = "Sign";
	this.TYPE_MODULE = "Type";
	this.TYPE_CONDITION = "Condition";
	this.TYPE_FUNCTION = "Action";
	this.TYPE_STRING = "Characters";
	this.TYPE_BOOLEAN = "Boolean";
	this.TYPE_FLOAT = "Decimal";
	this.TYPE_INT = "Number";
	this.TYPE_DYNAMIC = "Anything";
	this.FALSE_VALUE = "false";
	this.TRUE_VALUE = "true";
	this.NULL_VALUE = "nothing";
	this.FUNCTION_RETURN = "return";
	this.TYPE_DECL_OR_CAST = "as";
	this.FUNCTION_DECLARATION = "action";
	this.VARIABLE_DECLARATION = "define";
	if(VARIABLE_DECLARATION != null) {
		this.VARIABLE_DECLARATION = VARIABLE_DECLARATION;
	}
	if(FUNCTION_DECLARATION != null) {
		this.FUNCTION_DECLARATION = FUNCTION_DECLARATION;
	}
	if(TYPE_DECL_OR_CAST != null) {
		this.TYPE_DECL_OR_CAST = TYPE_DECL_OR_CAST;
	}
	if(FUNCTION_RETURN != null) {
		this.FUNCTION_RETURN = FUNCTION_RETURN;
	}
	if(NULL_VALUE != null) {
		this.NULL_VALUE = NULL_VALUE;
	}
	if(TRUE_VALUE != null) {
		this.TRUE_VALUE = TRUE_VALUE;
	}
	if(FALSE_VALUE != null) {
		this.FALSE_VALUE = FALSE_VALUE;
	}
	if(TYPE_DYNAMIC != null) {
		this.TYPE_DYNAMIC = TYPE_DYNAMIC;
	}
	if(TYPE_INT != null) {
		this.TYPE_INT = TYPE_INT;
	}
	if(TYPE_FLOAT != null) {
		this.TYPE_FLOAT = TYPE_FLOAT;
	}
	if(TYPE_BOOLEAN != null) {
		this.TYPE_BOOLEAN = TYPE_BOOLEAN;
	}
	if(TYPE_STRING != null) {
		this.TYPE_STRING = TYPE_STRING;
	}
	if(TYPE_FUNCTION != null) {
		this.TYPE_FUNCTION = TYPE_FUNCTION;
	}
	if(TYPE_CONDITION != null) {
		this.TYPE_CONDITION = TYPE_CONDITION;
	}
	if(TYPE_MODULE != null) {
		this.TYPE_MODULE = TYPE_MODULE;
	}
	if(TYPE_SIGN != null) {
		this.TYPE_SIGN = TYPE_SIGN;
	}
	if(MAIN_MODULE_NAME != null) {
		this.MAIN_MODULE_NAME = MAIN_MODULE_NAME;
	}
	if(REGISTERED_MODULE_NAME != null) {
		this.REGISTERED_MODULE_NAME = REGISTERED_MODULE_NAME;
	}
	if(OBJECT_TYPE_PROPERTY_NAME != null) {
		this.OBJECT_TYPE_PROPERTY_NAME = OBJECT_TYPE_PROPERTY_NAME;
	}
	if(OBJECT_ADDRESS_PROPERTY_NAME != null) {
		this.OBJECT_ADDRESS_PROPERTY_NAME = OBJECT_ADDRESS_PROPERTY_NAME;
	}
	if(OBJECT_DOC_PROPERTY_NAME != null) {
		this.OBJECT_DOC_PROPERTY_NAME = OBJECT_DOC_PROPERTY_NAME;
	}
	if(TO_STRING_PROPERTY_NAME != null) {
		this.TO_STRING_PROPERTY_NAME = TO_STRING_PROPERTY_NAME;
	}
	if(PRINT_FUNCTION_NAME != null) {
		this.PRINT_FUNCTION_NAME = PRINT_FUNCTION_NAME;
	}
	if(RAISE_ERROR_FUNCTION_NAME != null) {
		this.RAISE_ERROR_FUNCTION_NAME = RAISE_ERROR_FUNCTION_NAME;
	}
	if(READ_FUNCTION_NAME != null) {
		this.READ_FUNCTION_NAME = READ_FUNCTION_NAME;
	}
	if(RUN_CODE_FUNCTION_NAME != null) {
		this.RUN_CODE_FUNCTION_NAME = RUN_CODE_FUNCTION_NAME;
	}
	if(CONDITION_PATTERN_PARAMETER_NAME != null) {
		this.CONDITION_PATTERN_PARAMETER_NAME = CONDITION_PATTERN_PARAMETER_NAME;
	}
	if(CONDITION_BODY_PARAMETER_NAME != null) {
		this.CONDITION_BODY_PARAMETER_NAME = CONDITION_BODY_PARAMETER_NAME;
	}
	if(THIS != null) {
		this.THIS = THIS;
	}
	if(TYPE_UNKNOWN != null) {
		this.TYPE_UNKNOWN = TYPE_UNKNOWN;
	}
	if(CONDITION_TYPES != null) {
		this.CONDITION_TYPES = CONDITION_TYPES;
	}
	if(RECOGNIZED_SIGNS != null) {
		this.RECOGNIZED_SIGNS = RECOGNIZED_SIGNS;
	}
	if(PROPERTY_ACCESS_SIGN != null) {
		this.PROPERTY_ACCESS_SIGN = PROPERTY_ACCESS_SIGN;
	}
	if(EQUALS_SIGN != null) {
		this.EQUALS_SIGN = EQUALS_SIGN;
	}
	if(NOT_EQUALS_SIGN != null) {
		this.NOT_EQUALS_SIGN = NOT_EQUALS_SIGN;
	}
	if(LARGER_SIGN != null) {
		this.LARGER_SIGN = LARGER_SIGN;
	}
	if(SMALLER_SIGN != null) {
		this.SMALLER_SIGN = SMALLER_SIGN;
	}
	if(LARGER_EQUALS_SIGN != null) {
		this.LARGER_EQUALS_SIGN = LARGER_EQUALS_SIGN;
	}
	if(SMALLER_EQUALS_SIGN != null) {
		this.SMALLER_EQUALS_SIGN = SMALLER_EQUALS_SIGN;
	}
	if(XOR_SIGN != null) {
		this.XOR_SIGN = XOR_SIGN;
	}
	if(OR_SIGN != null) {
		this.OR_SIGN = OR_SIGN;
	}
	if(AND_SIGN != null) {
		this.AND_SIGN = AND_SIGN;
	}
	if(FOR_LOOP_FROM != null) {
		this.FOR_LOOP_FROM = FOR_LOOP_FROM;
	}
	if(FOR_LOOP_TO != null) {
		this.FOR_LOOP_TO = FOR_LOOP_TO;
	}
	if(FOR_LOOP_JUMP != null) {
		this.FOR_LOOP_JUMP = FOR_LOOP_JUMP;
	}
	if(TYPE_CAST_FUNCTION_PREFIX != null) {
		this.TYPE_CAST_FUNCTION_PREFIX = TYPE_CAST_FUNCTION_PREFIX;
	}
	if(ELSE != null) {
		this.ELSE = ELSE;
	}
};
$hxClasses["little.KeywordConfig"] = little_KeywordConfig;
little_KeywordConfig.__name__ = "little.KeywordConfig";
little_KeywordConfig.prototype = {
	VARIABLE_DECLARATION: null
	,FUNCTION_DECLARATION: null
	,TYPE_DECL_OR_CAST: null
	,FUNCTION_RETURN: null
	,NULL_VALUE: null
	,TRUE_VALUE: null
	,FALSE_VALUE: null
	,TYPE_DYNAMIC: null
	,TYPE_INT: null
	,TYPE_FLOAT: null
	,TYPE_BOOLEAN: null
	,TYPE_STRING: null
	,TYPE_FUNCTION: null
	,TYPE_CONDITION: null
	,TYPE_MODULE: null
	,TYPE_SIGN: null
	,MAIN_MODULE_NAME: null
	,REGISTERED_MODULE_NAME: null
	,OBJECT_TYPE_PROPERTY_NAME: null
	,OBJECT_ADDRESS_PROPERTY_NAME: null
	,OBJECT_DOC_PROPERTY_NAME: null
	,TO_STRING_PROPERTY_NAME: null
	,PRINT_FUNCTION_NAME: null
	,RAISE_ERROR_FUNCTION_NAME: null
	,READ_FUNCTION_NAME: null
	,RUN_CODE_FUNCTION_NAME: null
	,CONDITION_PATTERN_PARAMETER_NAME: null
	,CONDITION_BODY_PARAMETER_NAME: null
	,THIS: null
	,TYPE_UNKNOWN: null
	,CONDITION_TYPES: null
	,RECOGNIZED_SIGNS: null
	,PROPERTY_ACCESS_SIGN: null
	,EQUALS_SIGN: null
	,NOT_EQUALS_SIGN: null
	,LARGER_SIGN: null
	,SMALLER_SIGN: null
	,LARGER_EQUALS_SIGN: null
	,SMALLER_EQUALS_SIGN: null
	,XOR_SIGN: null
	,OR_SIGN: null
	,AND_SIGN: null
	,FOR_LOOP_FROM: null
	,FOR_LOOP_TO: null
	,FOR_LOOP_JUMP: null
	,TYPE_CAST_FUNCTION_PREFIX: null
	,ELSE: null
	,__class__: little_KeywordConfig
};
var little_interpreter_memory_Memory = function() {
	this.maxMemorySize = 2097152;
	this.memoryChunkSize = 512;
	this.storage = new little_interpreter_memory_Storage(this);
	this.referrer = new little_interpreter_memory_Referrer(this);
	this.constants = new little_interpreter_memory_ConstantPool(this);
	this.externs = new little_interpreter_memory_ExternalInterfacing(this);
};
$hxClasses["little.interpreter.memory.Memory"] = little_interpreter_memory_Memory;
little_interpreter_memory_Memory.__name__ = "little.interpreter.memory.Memory";
little_interpreter_memory_Memory.prototype = {
	storage: null
	,referrer: null
	,externs: null
	,constants: null
	,memoryChunkSize: null
	,maxMemorySize: null
	,get_currentMemorySize: function() {
		return this.storage.reserved.length + this.referrer.bytes.length;
	}
	,reset: function() {
		this.storage = new little_interpreter_memory_Storage(this);
		this.referrer = new little_interpreter_memory_Referrer(this);
		this.externs = new little_interpreter_memory_ExternalInterfacing(this);
	}
	,store: function(token) {
		var _this = [little_tools_InterpTokensSimple.TRUE_VALUE,little_tools_InterpTokensSimple.FALSE_VALUE,little_tools_InterpTokensSimple.NULL_VALUE].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1) {
			return this.constants.get(token);
		} else {
			var tmp;
			var _this = [little_tools_InterpTokensSimple.TRUE_VALUE,little_tools_InterpTokensSimple.FALSE_VALUE,little_tools_InterpTokensSimple.NULL_VALUE,little_tools_InterpTokensSimple.NUMBER,little_tools_InterpTokensSimple.DECIMAL,little_tools_InterpTokensSimple.SIGN,little_tools_InterpTokensSimple.CHARACTERS].slice();
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				var x = _this[i];
				result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) == -1) {
				var _this = [little_tools_InterpTokensSimple.CHARACTERS].slice();
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					var x = _this[i];
					result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
				}
				tmp = result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1;
			} else {
				tmp = true;
			}
			if(tmp) {
				return this.storage.storeStatic(token);
			} else {
				var _this = [little_tools_InterpTokensSimple.OBJECT].slice();
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					var x = _this[i];
					result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
				}
				if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1) {
					return this.storage.storeObject(token);
				} else {
					var _this = [little_tools_InterpTokensSimple.FUNCTION_CODE,little_tools_InterpTokensSimple.BLOCK].slice();
					var result = new Array(_this.length);
					var _g = 0;
					var _g1 = _this.length;
					while(_g < _g1) {
						var i = _g++;
						var x = _this[i];
						result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
					}
					if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1) {
						return this.storage.storeCodeBlock(token);
					} else {
						var _this = [little_tools_InterpTokensSimple.CONDITION_CODE].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1) {
							return this.storage.storeCondition(token);
						} else {
							var _this = [little_tools_InterpTokensSimple.CLASS_POINTER].slice();
							var result = new Array(_this.length);
							var _g = 0;
							var _g1 = _this.length;
							while(_g < _g1) {
								var i = _g++;
								var x = _this[i];
								result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
							}
							if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1) {
								return Type.enumParameters(token)[0];
							}
						}
					}
				}
			}
		}
		little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Unable to allocate memory for token `" + Std.string(token) + "`."),"Memory, Storage");
		throw haxe_Exception.thrown("Unable to allocate memory for token `" + Std.string(token) + "`.");
	}
	,retrieve: function(token) {
		haxe_Log.trace(token,{ fileName : "little/interpreter/memory/Memory.hx", lineNumber : 93, className : "little.interpreter.memory.Memory", methodName : "retrieve"});
		var tmp;
		var _this = [little_tools_InterpTokensSimple.TRUE_VALUE,little_tools_InterpTokensSimple.FALSE_VALUE,little_tools_InterpTokensSimple.NULL_VALUE,little_tools_InterpTokensSimple.OBJECT,little_tools_InterpTokensSimple.FUNCTION_CODE,little_tools_InterpTokensSimple.BLOCK,little_tools_InterpTokensSimple.CONDITION_CODE,little_tools_InterpTokensSimple.CLASS_POINTER].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) == -1) {
			var _this = [little_tools_InterpTokensSimple.TRUE_VALUE,little_tools_InterpTokensSimple.FALSE_VALUE,little_tools_InterpTokensSimple.NULL_VALUE,little_tools_InterpTokensSimple.NUMBER,little_tools_InterpTokensSimple.DECIMAL,little_tools_InterpTokensSimple.SIGN,little_tools_InterpTokensSimple.CHARACTERS].slice();
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				var x = _this[i];
				result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			tmp = result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1;
		} else {
			tmp = true;
		}
		if(tmp) {
			return this.store(token);
		} else {
			switch(token._hx_index) {
			case 13:
				var _g = token.parts;
				var _g = token.type;
				var result = little_interpreter_Interpreter.evaluate(token);
				switch(result._hx_index) {
				case 16:
					var _g = result.name;
					var _g = result.property;
					this.retrieve(result);
					break;
				case 19:
					var string = result.string;
					return this.retrieve(little_tools_Extensions.asTokenPath(string));
				case 26:
					var _g = result.word;
					this.retrieve(result);
					break;
				default:
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Code block returned a value that cannot be read from (for value: " + little_tools_PrettyPrinter.stringifyInterpreter(null,result) + ")"));
					throw haxe_Exception.thrown("Unable to retrieve a pointer to token " + Std.string(result));
				}
				break;
			case 14:
				var _g = token.body;
				var _g = token.type;
				var result = little_interpreter_Interpreter.evaluate(token);
				switch(result._hx_index) {
				case 16:
					var _g = result.name;
					var _g = result.property;
					this.retrieve(result);
					break;
				case 19:
					var string = result.string;
					return this.retrieve(little_tools_Extensions.asTokenPath(string));
				case 26:
					var _g = result.word;
					this.retrieve(result);
					break;
				default:
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Code block returned a value that cannot be read from (for value: " + little_tools_PrettyPrinter.stringifyInterpreter(null,result) + ")"));
					throw haxe_Exception.thrown("Unable to retrieve a pointer to token " + Std.string(result));
				}
				break;
			case 16:
				var _g = token.name;
				var _g = token.property;
				var path = little_tools_Extensions.asStringPath(token);
				var cell = ($_=this,$_.read.apply($_,path));
				return cell.objectAddress;
			case 26:
				var _g = token.word;
				var path = little_tools_Extensions.asStringPath(token);
				var cell = ($_=this,$_.read.apply($_,path));
				return cell.objectAddress;
			default:
			}
		}
		little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Unable to retrieve a pointer to token " + Std.string(token)));
		throw haxe_Exception.thrown("Unable to retrieve a pointer to token " + Std.string(token));
	}
	,read: function() {
		var $l=arguments.length;
		var path = new Array($l>0?$l-0:0);
		for(var $i=0;$i<$l;++$i){path[$i-0]=arguments[$i];}
		if(path.length == 0) {
			return { objectValue : null, objectTypeName : null, objectAddress : null};
		}
		var current = null;
		var currentAddress = null;
		var currentType = null;
		var processed = path.slice();
		var wentThroughPath = [];
		if(this.externs.hasGlobal(processed[0])) {
			if(($_=this.externs,$_.hasGlobal.apply($_,path))) {
				var object = ($_=this.externs,$_.getGlobal.apply($_,path));
				var typeName = this.getTypeName(($_=this.externs,$_.createPathFor.apply($_,[this.externs.globalProperties].concat(path))).type);
				return { objectValue : object.objectValue, objectTypeName : typeName, objectAddress : object.objectAddress};
			} else {
				var external = [processed.shift()];
				wentThroughPath.push(external[0]);
				while(($_=this.externs,$_.hasGlobal.apply($_,external.concat([processed[0]])))) {
					external.push(processed.shift());
					wentThroughPath.push(external[external.length - 1]);
				}
				var object = ($_=this.externs,$_.getGlobal.apply($_,external));
				current = object.objectValue;
				currentAddress = object.objectAddress;
				currentType = this.getTypeName(($_=this.externs,$_.createPathFor.apply($_,[this.externs.globalProperties].concat(external))).type);
			}
		} else {
			if(!this.referrer.exists(path[0])) {
				little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Variable `" + path[0] + "` does not exist"),"Memory, Referrer");
			}
			var data = this.referrer.get(path[0]);
			var _g = data.type;
			var _hx_tmp;
			var _hx_tmp1;
			var _hx_tmp2;
			var _hx_tmp3;
			var _hx_tmp4;
			var _hx_tmp5;
			var _hx_tmp6;
			var _hx_tmp7;
			if(_g == little_Little.keywords.TYPE_STRING == true) {
				current = little_interpreter_InterpTokens.Characters(this.storage.readString(data.address));
			} else {
				_hx_tmp7 = _g == little_Little.keywords.TYPE_INT;
				if(_hx_tmp7 == true) {
					current = little_interpreter_InterpTokens.Number(this.storage.readInt32(data.address));
				} else {
					_hx_tmp6 = _g == little_Little.keywords.TYPE_FLOAT;
					if(_hx_tmp6 == true) {
						current = little_interpreter_InterpTokens.Decimal(this.storage.readDouble(data.address));
					} else {
						_hx_tmp5 = _g == little_Little.keywords.TYPE_BOOLEAN;
						if(_hx_tmp5 == true) {
							current = this.constants.getFromPointer(data.address);
						} else {
							_hx_tmp4 = _g == little_Little.keywords.TYPE_FUNCTION;
							if(_hx_tmp4 == true) {
								current = this.storage.readCodeBlock(data.address);
							} else {
								_hx_tmp3 = _g == little_Little.keywords.TYPE_CONDITION;
								if(_hx_tmp3 == true) {
									current = this.storage.readCondition(data.address);
								} else {
									_hx_tmp2 = _g == little_Little.keywords.TYPE_MODULE;
									if(_hx_tmp2 == true) {
										current = little_interpreter_InterpTokens.ClassPointer(data.address);
									} else {
										_hx_tmp1 = _g == little_Little.keywords.TYPE_DYNAMIC && this.constants.hasPointer(data.address) && Type.enumEq(this.constants.getFromPointer(data.address),little_interpreter_InterpTokens.NullValue);
										if(_hx_tmp1 == true) {
											current = little_interpreter_InterpTokens.NullValue;
										} else {
											_hx_tmp = _g == little_Little.keywords.TYPE_SIGN;
											current = _hx_tmp == true ? this.storage.readSign(data.address) : this.storage.readObject(data.address);
										}
									}
								}
							}
						}
					}
				}
			}
			currentAddress = data.address;
			currentType = data.type;
			wentThroughPath.push(processed.shift());
		}
		while(processed.length > 0) {
			var identifier = processed.shift();
			wentThroughPath.push(identifier);
			var typeName = little_tools_Extensions.type(current);
			if(($_=this.externs,$_.hasInstance.apply($_,typeName.split(little_Little.keywords.PROPERTY_ACCESS_SIGN)))) {
				var classProperties = this.externs.instanceProperties.properties.h[typeName];
				if(Object.prototype.hasOwnProperty.call(classProperties.properties.h,identifier)) {
					var newCurrent = classProperties.properties.h[identifier].getter(current,currentAddress);
					current = newCurrent.objectValue;
					currentAddress = newCurrent.objectAddress;
					continue;
				}
			}
			if(($_=this.externs,$_.hasInstance.apply($_,little_Little.keywords.TYPE_DYNAMIC.split(little_Little.keywords.PROPERTY_ACCESS_SIGN)))) {
				var classProperties1 = this.externs.instanceProperties.properties.h[little_Little.keywords.TYPE_DYNAMIC];
				if(Object.prototype.hasOwnProperty.call(classProperties1.properties.h,identifier)) {
					var newCurrent1 = classProperties1.properties.h[identifier].getter(current,currentAddress);
					current = newCurrent1.objectValue;
					currentAddress = newCurrent1.objectAddress;
					continue;
				}
			}
			var _this = [little_tools_InterpTokensSimple.OBJECT].slice();
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				var x = _this[i];
				result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			if(result.indexOf($hxEnums[current.__enum__].__constructs__[current._hx_index]._hx_name.toLowerCase()) != -1) {
				var objectHashTableBytes = little_interpreter_memory_HashTables.getHashTableOf(currentAddress,this.storage);
				if(little_interpreter_memory_HashTables.hashTableHasKey(objectHashTableBytes,identifier,this.storage)) {
					var keyData = little_interpreter_memory_HashTables.hashTableGetKey(objectHashTableBytes,identifier,this.storage);
					var _g2 = this.getTypeName(keyData.type);
					var _hx_tmp;
					var _hx_tmp1;
					var _hx_tmp2;
					var _hx_tmp3;
					var _hx_tmp4;
					var _hx_tmp5;
					var _hx_tmp6;
					var _hx_tmp7;
					if(_g2 == little_Little.keywords.TYPE_STRING == true) {
						current = little_interpreter_InterpTokens.Characters(this.storage.readString(keyData.value));
					} else {
						_hx_tmp7 = _g2 == little_Little.keywords.TYPE_INT;
						if(_hx_tmp7 == true) {
							current = little_interpreter_InterpTokens.Number(this.storage.readInt32(keyData.value));
						} else {
							_hx_tmp6 = _g2 == little_Little.keywords.TYPE_FLOAT;
							if(_hx_tmp6 == true) {
								current = little_interpreter_InterpTokens.Decimal(this.storage.readDouble(keyData.value));
							} else {
								_hx_tmp5 = _g2 == little_Little.keywords.TYPE_BOOLEAN;
								if(_hx_tmp5 == true) {
									current = this.constants.getFromPointer(keyData.value);
								} else {
									_hx_tmp4 = _g2 == little_Little.keywords.TYPE_FUNCTION;
									if(_hx_tmp4 == true) {
										current = this.storage.readCodeBlock(keyData.value);
									} else {
										_hx_tmp3 = _g2 == little_Little.keywords.TYPE_CONDITION;
										if(_hx_tmp3 == true) {
											current = this.storage.readCondition(keyData.value);
										} else {
											_hx_tmp2 = _g2 == little_Little.keywords.TYPE_MODULE;
											if(_hx_tmp2 == true) {
												current = little_interpreter_InterpTokens.ClassPointer(keyData.value);
											} else {
												_hx_tmp1 = keyData.value == this.constants.NULL;
												if(_hx_tmp1 == true) {
													current = little_interpreter_InterpTokens.NullValue;
												} else {
													_hx_tmp = _g2 == little_Little.keywords.TYPE_SIGN;
													if(_hx_tmp == true) {
														current = this.storage.readSign(keyData.value);
													} else {
														current = this.storage.readObject(keyData.value);
													}
												}
											}
										}
									}
								}
							}
						}
					}
					currentAddress = keyData.value;
				}
			} else {
				wentThroughPath.pop();
				var p = wentThroughPath.join(little_Little.keywords.PROPERTY_ACCESS_SIGN);
				var tmp = little_Little.runtime;
				var tmp1 = "Field `" + identifier + "` does not exist on `" + p + "` ";
				var _this1 = [little_tools_InterpTokensSimple.NULL_VALUE].slice();
				var result1 = new Array(_this1.length);
				var _g3 = 0;
				var _g4 = _this1.length;
				while(_g3 < _g4) {
					var i1 = _g3++;
					var x1 = _this1[i1];
					result1[i1] = little_tools_TextTools.remove($hxEnums[x1.__enum__].__constructs__[x1._hx_index]._hx_name,"_").toLowerCase();
				}
				tmp.throwError(little_interpreter_InterpTokens.ErrorMessage(tmp1 + (result1.indexOf($hxEnums[current.__enum__].__constructs__[current._hx_index]._hx_name.toLowerCase()) != -1 ? "(`" + p + "` is `" + little_Little.keywords.NULL_VALUE + "`)" : "")));
				return { objectValue : little_interpreter_InterpTokens.NullValue, objectAddress : this.constants.NULL, objectTypeName : little_Little.keywords.TYPE_DYNAMIC};
			}
		}
		return { objectValue : current, objectAddress : currentAddress, objectTypeName : little_tools_Extensions.type(current)};
	}
	,readFrom: function(value) {
		var $l=arguments.length;
		var path = new Array($l>1?$l-1:0);
		for(var $i=1;$i<$l;++$i){path[$i-1]=arguments[$i];}
		var current = value.objectValue;
		var currentAddress = value.objectAddress;
		var processed = path.slice();
		var wentThroughPath = [];
		while(processed.length > 0) {
			var identifier = processed.shift();
			wentThroughPath.push(identifier);
			var typeName = little_tools_Extensions.type(current);
			if(($_=this.externs,$_.hasInstance.apply($_,typeName.split(little_Little.keywords.PROPERTY_ACCESS_SIGN)))) {
				var classProperties = this.externs.instanceProperties.properties.h[typeName];
				if(Object.prototype.hasOwnProperty.call(classProperties.properties.h,identifier)) {
					var newCurrent = classProperties.properties.h[identifier].getter(current,currentAddress);
					current = newCurrent.objectValue;
					currentAddress = newCurrent.objectAddress;
					continue;
				}
			}
			if(($_=this.externs,$_.hasInstance.apply($_,little_Little.keywords.TYPE_DYNAMIC.split(little_Little.keywords.PROPERTY_ACCESS_SIGN)))) {
				var classProperties1 = this.externs.instanceProperties.properties.h[little_Little.keywords.TYPE_DYNAMIC];
				if(Object.prototype.hasOwnProperty.call(classProperties1.properties.h,identifier)) {
					var newCurrent1 = classProperties1.properties.h[identifier].getter(current,currentAddress);
					current = newCurrent1.objectValue;
					currentAddress = newCurrent1.objectAddress;
					continue;
				}
			}
			var _this = [little_tools_InterpTokensSimple.OBJECT].slice();
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				var x = _this[i];
				result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			if(result.indexOf($hxEnums[current.__enum__].__constructs__[current._hx_index]._hx_name.toLowerCase()) != -1) {
				var objectHashTableBytesLength = this.storage.readInt32(currentAddress);
				var objectHashTableBytes = this.storage.readBytes(little_interpreter_memory_MemoryPointer.fromInt(currentAddress + 4),objectHashTableBytesLength);
				if(little_interpreter_memory_HashTables.hashTableHasKey(objectHashTableBytes,identifier,this.storage)) {
					var keyData = little_interpreter_memory_HashTables.hashTableGetKey(objectHashTableBytes,identifier,this.storage);
					var _g2 = this.getTypeName(keyData.type);
					var _hx_tmp;
					var _hx_tmp1;
					var _hx_tmp2;
					var _hx_tmp3;
					var _hx_tmp4;
					var _hx_tmp5;
					var _hx_tmp6;
					var _hx_tmp7;
					if(_g2 == little_Little.keywords.TYPE_STRING == true) {
						current = little_interpreter_InterpTokens.Characters(this.storage.readString(keyData.value));
					} else {
						_hx_tmp7 = _g2 == little_Little.keywords.TYPE_INT;
						if(_hx_tmp7 == true) {
							current = little_interpreter_InterpTokens.Number(this.storage.readInt32(keyData.value));
						} else {
							_hx_tmp6 = _g2 == little_Little.keywords.TYPE_FLOAT;
							if(_hx_tmp6 == true) {
								current = little_interpreter_InterpTokens.Decimal(this.storage.readDouble(keyData.value));
							} else {
								_hx_tmp5 = _g2 == little_Little.keywords.TYPE_BOOLEAN;
								if(_hx_tmp5 == true) {
									current = this.constants.getFromPointer(keyData.value);
								} else {
									_hx_tmp4 = _g2 == little_Little.keywords.TYPE_FUNCTION;
									if(_hx_tmp4 == true) {
										current = this.storage.readCodeBlock(keyData.value);
									} else {
										_hx_tmp3 = _g2 == little_Little.keywords.TYPE_CONDITION;
										if(_hx_tmp3 == true) {
											current = this.storage.readCondition(keyData.value);
										} else {
											_hx_tmp2 = _g2 == little_Little.keywords.TYPE_MODULE;
											if(_hx_tmp2 == true) {
												current = little_interpreter_InterpTokens.ClassPointer(keyData.value);
											} else {
												_hx_tmp1 = keyData.value == this.constants.NULL;
												if(_hx_tmp1 == true) {
													current = little_interpreter_InterpTokens.NullValue;
												} else {
													_hx_tmp = _g2 == little_Little.keywords.TYPE_SIGN;
													if(_hx_tmp == true) {
														current = this.storage.readSign(keyData.value);
													} else {
														current = this.storage.readObject(keyData.value);
													}
												}
											}
										}
									}
								}
							}
						}
					}
					currentAddress = keyData.value;
				}
			} else {
				wentThroughPath.pop();
				var p = wentThroughPath.join(little_Little.keywords.PROPERTY_ACCESS_SIGN);
				var tmp = little_Little.runtime;
				var tmp1 = "Field `" + identifier + "` does not exist on `" + p + "` ";
				var _this1 = [little_tools_InterpTokensSimple.NULL_VALUE].slice();
				var result1 = new Array(_this1.length);
				var _g3 = 0;
				var _g4 = _this1.length;
				while(_g3 < _g4) {
					var i1 = _g3++;
					var x1 = _this1[i1];
					result1[i1] = little_tools_TextTools.remove($hxEnums[x1.__enum__].__constructs__[x1._hx_index]._hx_name,"_").toLowerCase();
				}
				tmp.throwError(little_interpreter_InterpTokens.ErrorMessage(tmp1 + (result1.indexOf($hxEnums[current.__enum__].__constructs__[current._hx_index]._hx_name.toLowerCase()) != -1 ? "(`" + p + "` is `" + little_Little.keywords.NULL_VALUE + "`)" : "")));
				return { objectValue : little_interpreter_InterpTokens.NullValue, objectAddress : this.constants.NULL, objectTypeName : little_Little.keywords.TYPE_DYNAMIC};
			}
		}
		return { objectValue : current, objectAddress : currentAddress, objectTypeName : little_tools_Extensions.type(current)};
	}
	,write: function(path,value,type,doc) {
		if(path.length == 0) {
			little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot write to an empty path"));
		}
		if(path.length == 1) {
			this.referrer.reference(path[0],this.retrieve(value),type);
		} else {
			var pathCopy = path.slice(0,path.length - 1);
			var wentThroughPath = [path[0]];
			var current = this.referrer.get(pathCopy.shift());
			while(pathCopy.length > 0) {
				if(!this.getTypeInformation(current.type).passedByReference) {
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot write to a static type. Only objects can have dynamic properties (" + wentThroughPath.join(little_Little.keywords.PROPERTY_ACCESS_SIGN) + " is `" + current.type + "`)"));
				}
				if(!little_interpreter_memory_HashTables.hashTableHasKey(little_interpreter_memory_HashTables.getHashTableOf(current.address,this.storage),pathCopy[0],this.storage)) {
					var a = wentThroughPath.concat([pathCopy[0]]).join(little_Little.keywords.PROPERTY_ACCESS_SIGN);
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot write a property to " + a + ", since " + pathCopy[0] + " does not exist (did you forget to define " + a + "?)"));
				}
				var hashTableKey = little_interpreter_memory_HashTables.hashTableGetKey(little_interpreter_memory_HashTables.getHashTableOf(current.address,this.storage),pathCopy[0],this.storage);
				current = { address : hashTableKey.value, type : this.getTypeName(hashTableKey.type)};
				wentThroughPath.push(pathCopy.shift());
			}
			if(!this.getTypeInformation(current.type).passedByReference) {
				little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot write to a property to values of a static type. Only objects can have dynamic properties (" + wentThroughPath.join(little_Little.keywords.PROPERTY_ACCESS_SIGN) + " is `" + current.type + "`)"));
			}
			if(!little_interpreter_memory_HashTables.hashTableHasKey(little_interpreter_memory_HashTables.getHashTableOf(current.address,this.storage),path[path.length - 1],this.storage)) {
				little_interpreter_memory_HashTables.objectAddKey(current.address,path[path.length - 1],this.retrieve(value),this.getTypeInformation(type).pointer,this.storage.storeString(doc),this.storage);
			} else if(Object.prototype.hasOwnProperty.call(this.externs.instanceProperties.properties.h,path[path.length - 1])) {
				little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot write to an extern property (" + path[path.length - 1] + ")"));
			} else {
				little_interpreter_memory_HashTables.objectSetKey(current.address,path[path.length - 1],{ value : value != null ? this.retrieve(value) : null, type : type != null ? this.getTypeInformation(type).pointer : null, doc : doc != null ? this.storage.storeString(doc) : null},this.storage);
			}
		}
	}
	,set: function(path,value,type,doc) {
		if(path.length == 0) {
			little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot set the value of an empty path"));
		}
		if(path.length == 1) {
			if(this.referrer.exists(path[0])) {
				this.referrer.set(path[0],{ address : value != null ? this.retrieve(value) : null, type : type != null ? type : null});
			} else {
				little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Variable/function " + path[0] + " does not exist"));
			}
		} else {
			var pathCopy = path.slice(0,path.length - 1);
			var wentThroughPath = [path[0]];
			var current = this.referrer.get(pathCopy.shift());
			while(pathCopy.length > 0) {
				if(!this.getTypeInformation(current.type).passedByReference) {
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot set properties to values of a static type. Only objects can have dynamic properties (" + wentThroughPath.join(little_Little.keywords.PROPERTY_ACCESS_SIGN) + " is `" + current.type + "`)"));
				}
				if(!little_interpreter_memory_HashTables.hashTableHasKey(little_interpreter_memory_HashTables.getHashTableOf(current.address,this.storage),pathCopy[0],this.storage)) {
					var a = wentThroughPath.concat([pathCopy[0]]).join(little_Little.keywords.PROPERTY_ACCESS_SIGN);
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot set a property of " + a + ", since " + pathCopy[0] + " does not exist (did you forget to define " + a + "?)"));
				}
				var hashTableKey = little_interpreter_memory_HashTables.hashTableGetKey(little_interpreter_memory_HashTables.getHashTableOf(current.address,this.storage),pathCopy[0],this.storage);
				current = { address : hashTableKey.value, type : this.getTypeName(hashTableKey.type)};
				wentThroughPath.push(pathCopy.shift());
			}
			if(!this.getTypeInformation(current.type).passedByReference) {
				little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot set properties to values of a static type. Only objects can have dynamic properties (" + wentThroughPath.join(little_Little.keywords.PROPERTY_ACCESS_SIGN) + " is `" + current.type + "`)"));
			}
			if(little_interpreter_memory_HashTables.hashTableHasKey(little_interpreter_memory_HashTables.getHashTableOf(current.address,this.storage),path[path.length - 1],this.storage)) {
				little_interpreter_memory_HashTables.objectSetKey(current.address,path[path.length - 1],{ value : value != null ? this.retrieve(value) : null, type : type != null ? this.getTypeInformation(type).pointer : null, doc : doc != null ? this.storage.storeString(doc) : null},this.storage);
			} else if(Object.prototype.hasOwnProperty.call(this.externs.instanceProperties.properties.h,path[path.length - 1])) {
				little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot set an extern property (" + path[path.length - 1] + ")"));
			} else {
				little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot set the value of " + path.join(little_Little.keywords.PROPERTY_ACCESS_SIGN) + ", since " + path[path.length - 1] + " does not exist."));
			}
		}
	}
	,allocate: function(size) {
		if(size <= 0) {
			little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot allocate " + size + " bytes"));
		}
		return this.storage.storeBytes(size);
	}
	,getTypeInformation: function(name) {
		var p;
		var _hx_tmp;
		var _hx_tmp1;
		var _hx_tmp2;
		var _hx_tmp3;
		var _hx_tmp4;
		if(name == little_Little.keywords.TYPE_INT == true) {
			p = this.constants.INT;
		} else {
			_hx_tmp4 = name == little_Little.keywords.TYPE_FLOAT;
			if(_hx_tmp4 == true) {
				p = this.constants.FLOAT;
			} else {
				_hx_tmp3 = name == little_Little.keywords.TYPE_BOOLEAN;
				if(_hx_tmp3 == true) {
					p = this.constants.BOOL;
				} else {
					_hx_tmp2 = name == little_Little.keywords.TYPE_DYNAMIC;
					if(_hx_tmp2 == true) {
						p = this.constants.DYNAMIC;
					} else {
						_hx_tmp1 = name == little_Little.keywords.TYPE_MODULE;
						if(_hx_tmp1 == true) {
							p = this.constants.TYPE;
						} else {
							_hx_tmp = name == little_Little.keywords.TYPE_UNKNOWN;
							p = _hx_tmp == true ? this.constants.UNKNOWN : little_interpreter_memory_MemoryPointer.fromInt(0);
						}
					}
				}
			}
		}
		if(p != 0) {
			var tmp;
			switch(p) {
			case 11:
				tmp = little_Little.keywords.TYPE_INT;
				break;
			case 12:
				tmp = little_Little.keywords.TYPE_FLOAT;
				break;
			case 13:
				tmp = little_Little.keywords.TYPE_BOOLEAN;
				break;
			case 14:
				tmp = little_Little.keywords.TYPE_DYNAMIC;
				break;
			case 15:
				tmp = little_Little.keywords.TYPE_MODULE;
				break;
			case 16:
				tmp = little_Little.keywords.TYPE_UNKNOWN;
				break;
			default:
				throw haxe_Exception.thrown("How did we get here? 5");
			}
			var tmp1 = p >= 14 && p <= 15;
			var tmp2 = new haxe_ds_StringMap();
			var tmp3 = new haxe_ds_StringMap();
			var tmp4;
			switch(p) {
			case 11:
				tmp4 = 4;
				break;
			case 12:
				tmp4 = 8;
				break;
			case 13:
				tmp4 = 1;
				break;
			case 14:
				tmp4 = -1;
				break;
			case 15:
				tmp4 = -1;
				break;
			case 16:
				tmp4 = -1;
				break;
			default:
				throw haxe_Exception.thrown("How did we get here? 51");
			}
			return { pointer : p, typeName : tmp, passedByReference : tmp1, isExternal : false, instanceFields : tmp2, staticFields : tmp3, defaultInstanceSize : tmp4};
		}
		if(Object.prototype.hasOwnProperty.call(this.externs.typeToPointer.h,name)) {
			var instProps = ($_=this.externs,$_.createPathFor.apply($_,[this.externs.instanceProperties].concat(name.split(little_Little.keywords.PROPERTY_ACCESS_SIGN))));
			var statProps = ($_=this.externs,$_.createPathFor.apply($_,[this.externs.globalProperties].concat(name.split(little_Little.keywords.PROPERTY_ACCESS_SIGN))));
			var instances = new haxe_ds_StringMap();
			var statics = new haxe_ds_StringMap();
			var h = instProps.properties.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var key1 = _g_key;
				var value = _g_value;
				var v = { type : value.type, doc : value.doc};
				instances.h[key1] = v;
			}
			var h = statProps.properties.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var key1 = _g_key;
				var value = _g_value;
				var v = { type : value.type, doc : value.doc};
				statics.h[key1] = v;
			}
			return { pointer : this.externs.typeToPointer.h[name], typeName : name, passedByReference : true, isExternal : true, instanceFields : instances, staticFields : statics, defaultInstanceSize : 8};
		}
		var reference = this.referrer.get(name);
		var typeInfo = this.storage.readType(reference.address);
		return typeInfo;
	}
	,getTypeName: function(pointer) {
		if(this.externs.get_pointerToType().h.hasOwnProperty(pointer)) {
			return this.externs.get_pointerToType().h[pointer];
		}
		if(this.constants.hasPointer(pointer)) {
			var token = this.constants.getFromPointer(pointer);
			var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				var x = _this[i];
				result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1) {
				return Type.enumParameters(token)[0];
			} else {
				return Type.enumParameters(little_interpreter_Interpreter.run([token]))[0];
			}
		}
		return this.storage.readType(pointer).typeName;
	}
	,__class__: little_interpreter_memory_Memory
	,__properties__: {get_currentMemorySize:"get_currentMemorySize"}
};
var little_interpreter_memory_Storage = function(memory) {
	this.parent = memory;
	var length = this.parent.memoryChunkSize;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
	this1.fill(0,length,0);
	this.storage = this1;
	var length = this.parent.memoryChunkSize;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
	this1.fill(0,length,0);
	this.reserved = this1;
	this.reserved.fill(0,this.parent.memoryChunkSize,0);
};
$hxClasses["little.interpreter.memory.Storage"] = little_interpreter_memory_Storage;
little_interpreter_memory_Storage.__name__ = "little.interpreter.memory.Storage";
little_interpreter_memory_Storage.prototype = {
	parent: null
	,reserved: null
	,storage: null
	,requestMemory: function() {
		if(this.storage.length > this.parent.maxMemorySize) {
			little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Out of memory"),"Memory, Storage");
		}
		var newBytes = new haxe_io_Bytes(new ArrayBuffer(this.storage.length + this.parent.memoryChunkSize));
		var tmp = this.storage;
		var values = [newBytes.length,this.storage.length];
		var min = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] < min) {
				min = values[i];
			}
		}
		newBytes.blit(0,tmp,0,min);
		this.storage = newBytes;
		var newBytes = new haxe_io_Bytes(new ArrayBuffer(this.reserved.length + this.parent.memoryChunkSize));
		var tmp = this.reserved;
		var values = [newBytes.length,this.reserved.length];
		var min = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] < min) {
				min = values[i];
			}
		}
		newBytes.blit(0,tmp,0,min);
		this.reserved = newBytes;
	}
	,storeByte: function(b) {
		if(b == 0) {
			return this.parent.constants.ZERO;
		}
		if(b == null) {
			return this.parent.constants.NULL;
		}
		var i = this.parent.constants.capacity;
		while(i < this.reserved.length && this.reserved.b[i] != 0) ++i;
		if(i >= this.reserved.length) {
			this.requestMemory();
		}
		this.storage.b[i] = b & 255;
		this.reserved.b[i] = 1;
		return little_interpreter_memory_MemoryPointer.fromInt(i);
	}
	,setByte: function(address,b) {
		this.storage.b[address] = b & 255;
		this.reserved.b[address] = 1;
	}
	,readByte: function(address) {
		return this.storage.b[address];
	}
	,freeByte: function(address) {
		this.storage.b[address] = 0;
		this.reserved.b[address] = 0;
	}
	,storeBytes: function(size,b) {
		var i = this.parent.constants.capacity;
		while(true) {
			var tmp;
			if(i < this.reserved.length - size) {
				var this1 = this.reserved;
				var this2 = new haxe_io_Bytes(new ArrayBuffer(size));
				this2.fill(0,size,0);
				var array = this2;
				array.blit(0,this1,i,size);
				tmp = !vision_ds_ByteArray.isEmpty(array);
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			++i;
		}
		if(i >= this.reserved.length - size) {
			this.requestMemory();
			i += size;
		}
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var j = _g++;
			this.storage.b[i + j] = (j > b.length ? 0 : b.b[j]) & 255;
			this.reserved.b[i + j] = 1;
		}
		return little_interpreter_memory_MemoryPointer.fromInt(i);
	}
	,setBytes: function(address,bytes) {
		var _g = 0;
		var _g1 = bytes.length;
		while(_g < _g1) {
			var j = _g++;
			this.storage.b[address + j] = bytes.b[j] & 255;
			this.reserved.b[address + j] = 1;
		}
	}
	,readBytes: function(address,size) {
		if(address == this.parent.constants.NULL) {
			return null;
		}
		var this1 = new haxe_io_Bytes(new ArrayBuffer(size));
		this1.fill(0,size,0);
		var bytes = this1;
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var j = _g++;
			bytes.b[j] = this.storage.b[address + j] & 255;
		}
		return bytes;
	}
	,freeBytes: function(address,size) {
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var j = _g++;
			this.storage.b[address + j] = 0;
			this.reserved.b[address + j] = 0;
		}
	}
	,storeArray: function(length,elementSize,defaultElement) {
		var size = elementSize * length;
		var length1 = size + 4;
		var this1 = new haxe_io_Bytes(new ArrayBuffer(length1));
		this1.fill(0,length1,0);
		var bytes = this1;
		if(!vision_ds_ByteArray.isEmpty(defaultElement)) {
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				bytes.blit(i + 4,defaultElement,0,defaultElement.length);
			}
		}
		bytes.setInt32(0,length);
		return this.storeBytes(bytes.length,bytes);
	}
	,setArray: function(address,length,elementSize,defaultElement) {
		var size = elementSize * length;
		var length1 = size + 4 + 4;
		var this1 = new haxe_io_Bytes(new ArrayBuffer(length1));
		this1.fill(0,length1,0);
		var bytes = this1;
		if(defaultElement != null) {
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				bytes.blit(i + 8,defaultElement,0,defaultElement.length);
			}
		}
		bytes.setInt32(0,length);
		bytes.setInt32(4,elementSize);
		this.setBytes(address,bytes);
	}
	,readArray: function(address) {
		if(address == this.parent.constants.NULL) {
			return null;
		}
		var length = this.readInt32(address);
		var elementSize = this.readInt32(little_interpreter_memory_MemoryPointer.fromInt(address + 4));
		address = address + 8;
		var array = [];
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			array.push(this.readBytes(address,elementSize));
			address = address + elementSize;
		}
		return array;
	}
	,freeArray: function(address) {
		var length = this.readInt32(address);
		var elementSize = this.readInt32(little_interpreter_memory_MemoryPointer.fromInt(address + 4));
		this.freeBytes(address,length * elementSize + 8);
	}
	,storeInt16: function(b) {
		if(b == 0) {
			return this.parent.constants.ZERO;
		}
		if(b == null) {
			return this.parent.constants.NULL;
		}
		var i = this.parent.constants.capacity;
		while(i < this.reserved.length - 1 && this.reserved.b[i] != 0 && this.reserved.b[i + 1] != 0) ++i;
		if(i >= this.reserved.length - 1) {
			this.requestMemory();
			i += 2;
		}
		this.storage.b[i] = b & 255 & 255;
		b >>= 8;
		this.reserved.b[i] = 1;
		return little_interpreter_memory_MemoryPointer.fromInt(i);
	}
	,setInt16: function(address,b) {
		this.storage.b[address] = b & 255 & 255;
		this.storage.b[address + 1] = b >> 8 & 255 & 255;
		this.reserved.b[address] = 1;
		this.reserved.b[address + 1] = 1;
	}
	,readInt16: function(address) {
		if(address == this.parent.constants.NULL) {
			return null;
		}
		return this.storage.b[address] + (this.storage.b[address + 1] << 8) - 32767;
	}
	,freeInt16: function(address) {
		this.storage.b[address] = 0;
		this.storage.b[address + 1] = 0;
		this.reserved.b[address] = 0;
		this.reserved.b[address + 1] = 0;
	}
	,storeUInt16: function(b) {
		return this.storeInt16(b < 0 ? b + 32767 : b);
	}
	,setUInt16: function(address,b) {
		this.setInt16(address,b < 0 ? b + 32767 : b);
	}
	,readUInt16: function(address) {
		if(address == this.parent.constants.NULL) {
			return null;
		}
		return this.storage.b[address] + (this.storage.b[address + 1] << 8);
	}
	,freeUInt16: function(address) {
		this.freeInt16(address);
	}
	,storeInt32: function(b) {
		if(b == 0) {
			return this.parent.constants.ZERO;
		}
		if(b == null) {
			return this.parent.constants.NULL;
		}
		var i = this.parent.constants.capacity;
		while(i < this.reserved.length - 3 && this.reserved.b[i] + this.reserved.b[i + 1] + this.reserved.b[i + 2] + this.reserved.b[i + 3] != 0) ++i;
		if(i >= this.reserved.length - 3) {
			this.requestMemory();
			i += 4;
		}
		this.storage.b[i] = b & 255 & 255;
		b >>= 8;
		this.reserved.b[i] = 1;
		this.storage.b[i + 1] = b & 255 & 255;
		b >>= 8;
		this.reserved.b[i + 1] = 1;
		this.storage.b[i + 2] = b & 255 & 255;
		b >>= 8;
		this.reserved.b[i + 2] = 1;
		this.storage.b[i + 3] = b & 255 & 255;
		b >>= 8;
		this.reserved.b[i + 3] = 1;
		return little_interpreter_memory_MemoryPointer.fromInt(i);
	}
	,setInt32: function(address,b) {
		this.storage.b[address] = b & 255 & 255;
		this.storage.b[address + 1] = b >> 8 & 255 & 255;
		this.storage.b[address + 2] = b >> 16 & 255 & 255;
		this.storage.b[address + 3] = b >> 24 & 255 & 255;
		this.reserved.b[address] = 1;
		this.reserved.b[address + 1] = 1;
		this.reserved.b[address + 2] = 1;
		this.reserved.b[address + 3] = 1;
	}
	,readInt32: function(address) {
		if(address == this.parent.constants.NULL) {
			return null;
		}
		return this.storage.b[address] + (this.storage.b[address + 1] << 8) + (this.storage.b[address + 2] << 16) + (this.storage.b[address + 3] << 24);
	}
	,freeInt32: function(address) {
		this.storage.b[address] = 0;
		this.reserved.b[address] = 0;
		this.storage.b[address + 1] = 0;
		this.reserved.b[address + 1] = 0;
		this.storage.b[address + 2] = 0;
		this.reserved.b[address + 2] = 0;
		this.storage.b[address + 3] = 0;
		this.reserved.b[address + 3] = 0;
	}
	,storeUInt32: function(b) {
		return this.storeInt32(b);
	}
	,setUInt32: function(address,b) {
		this.setInt32(address,b);
	}
	,readUInt32: function(address) {
		return this.readInt32(address);
	}
	,freeUInt32: function(address) {
		this.freeInt32(address);
	}
	,storeDouble: function(b) {
		if(b == 0) {
			return this.parent.constants.ZERO;
		}
		if(b == null) {
			return this.parent.constants.NULL;
		}
		var i = this.parent.constants.capacity;
		while(i < this.reserved.length - 7 && this.reserved.b[i] + this.reserved.b[i + 1] + this.reserved.b[i + 2] + this.reserved.b[i + 3] + this.reserved.b[i + 4] + this.reserved.b[i + 5] + this.reserved.b[i + 6] + this.reserved.b[i + 7] != 0) ++i;
		if(i >= this.reserved.length - 7) {
			this.requestMemory();
			i += 8;
		}
		var bytes = new haxe_io_Bytes(new ArrayBuffer(8));
		bytes.setDouble(0,b);
		this.storage.b[i] = bytes.b[0] & 255;
		this.reserved.b[i] = 1;
		this.storage.b[i + 1] = bytes.b[1] & 255;
		this.reserved.b[i + 1] = 1;
		this.storage.b[i + 2] = bytes.b[2] & 255;
		this.reserved.b[i + 2] = 1;
		this.storage.b[i + 3] = bytes.b[3] & 255;
		this.reserved.b[i + 3] = 1;
		this.storage.b[i + 4] = bytes.b[4] & 255;
		this.reserved.b[i + 4] = 1;
		this.storage.b[i + 5] = bytes.b[5] & 255;
		this.reserved.b[i + 5] = 1;
		this.storage.b[i + 6] = bytes.b[6] & 255;
		this.reserved.b[i + 6] = 1;
		this.storage.b[i + 7] = bytes.b[7] & 255;
		this.reserved.b[i + 7] = 1;
		return little_interpreter_memory_MemoryPointer.fromInt(i);
	}
	,setDouble: function(address,b) {
		this.storage.setDouble(address,b);
		this.reserved.b[address] = 1;
		this.reserved.b[address + 1] = 1;
		this.reserved.b[address + 2] = 1;
		this.reserved.b[address + 3] = 1;
		this.reserved.b[address + 4] = 1;
		this.reserved.b[address + 5] = 1;
		this.reserved.b[address + 6] = 1;
		this.reserved.b[address + 7] = 1;
	}
	,readDouble: function(address) {
		if(address == this.parent.constants.NULL) {
			return null;
		}
		return this.storage.getDouble(address);
	}
	,freeDouble: function(address) {
		this.storage.b[address] = 0;
		this.reserved.b[address] = 0;
		this.storage.b[address + 1] = 0;
		this.reserved.b[address + 1] = 0;
		this.storage.b[address + 2] = 0;
		this.reserved.b[address + 2] = 0;
		this.storage.b[address + 3] = 0;
		this.reserved.b[address + 3] = 0;
		this.storage.b[address + 4] = 0;
		this.reserved.b[address + 4] = 0;
		this.storage.b[address + 5] = 0;
		this.reserved.b[address + 5] = 0;
		this.storage.b[address + 6] = 0;
		this.reserved.b[address + 6] = 0;
		this.storage.b[address + 7] = 0;
		this.reserved.b[address + 7] = 0;
	}
	,storePointer: function(p) {
		return this.storeInt32(p);
	}
	,setPointer: function(address,p) {
		this.setInt32(address,p);
	}
	,readPointer: function(address) {
		return little_interpreter_memory_MemoryPointer.fromInt(this.readInt32(address));
	}
	,freePointer: function(address) {
		this.freeInt32(address);
	}
	,storeString: function(b) {
		if(b == "") {
			return this.parent.constants.ZERO;
		}
		if(b == null) {
			return this.parent.constants.NULL;
		}
		var stringBytes = haxe_io_Bytes.ofString(b,haxe_io_Encoding.UTF8);
		var value = stringBytes.length;
		var this1 = new haxe_io_Bytes(new ArrayBuffer(4));
		this1.fill(0,4,0);
		var bytes = this1;
		bytes.setInt32(0,value);
		var this1 = bytes;
		var newBytes = new haxe_io_Bytes(new ArrayBuffer(this1.length + stringBytes.length));
		newBytes.blit(0,this1,0,this1.length);
		newBytes.blit(this1.length,stringBytes,0,stringBytes.length);
		var bytes = newBytes;
		var i = this.parent.constants.capacity;
		while(true) {
			var tmp;
			if(i < this.reserved.length - bytes.length) {
				var this1 = this.reserved;
				var length = bytes.length;
				var this2 = new haxe_io_Bytes(new ArrayBuffer(length));
				this2.fill(0,length,0);
				var array = this2;
				array.blit(0,this1,i,length);
				tmp = !vision_ds_ByteArray.isEmpty(array);
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			++i;
		}
		if(i >= this.reserved.length - bytes.length) {
			this.requestMemory();
			i += bytes.length;
		}
		this.storage.blit(i,bytes,0,bytes.length);
		var this1 = this.reserved;
		var length = bytes.length;
		var fillWith = 1;
		if(fillWith == null) {
			fillWith = 0;
		}
		var this2 = new haxe_io_Bytes(new ArrayBuffer(length));
		this2.fill(0,length,fillWith);
		var array = this2;
		this1.blit(i,array,0,array.length);
		return little_interpreter_memory_MemoryPointer.fromInt(i);
	}
	,setString: function(address,b) {
		var stringBytes = haxe_io_Bytes.ofString(b,haxe_io_Encoding.UTF8);
		var value = stringBytes.length;
		var this1 = new haxe_io_Bytes(new ArrayBuffer(4));
		this1.fill(0,4,0);
		var bytes = this1;
		bytes.setInt32(0,value);
		var this1 = bytes;
		var newBytes = new haxe_io_Bytes(new ArrayBuffer(this1.length + stringBytes.length));
		newBytes.blit(0,this1,0,this1.length);
		newBytes.blit(this1.length,stringBytes,0,stringBytes.length);
		var bytes = newBytes;
		var _g = 0;
		var _g1 = bytes.length;
		while(_g < _g1) {
			var j = _g++;
			this.storage.b[address + j] = bytes.b[j] & 255;
			this.reserved.b[address + j] = 1;
		}
	}
	,readString: function(address) {
		if(address == this.parent.constants.NULL) {
			return null;
		}
		var length = this.readInt32(little_interpreter_memory_MemoryPointer.fromInt(address));
		return this.storage.getString(address + 4,length,haxe_io_Encoding.UTF8);
	}
	,freeString: function(address) {
		var len = this.storage.getInt32(address) + 4;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var j = _g++;
			this.storage.b[address + j] = 0;
			this.reserved.b[address + j] = 0;
		}
	}
	,storeCodeBlock: function(caller) {
		switch(caller._hx_index) {
		case 8:
			var requiredParams = caller.requiredParams;
			var body = caller.body;
			return this.storeString(little_interpreter_ByteCode.compile(caller));
		case 14:
			var _g = caller.type;
			var body = caller.body;
			return this.storeString(little_interpreter_ByteCode.compile(little_interpreter_InterpTokens.FunctionCode(new OrderedStringMapImpl(),caller)));
		default:
			throw new haxe_exceptions_ArgumentException("caller","" + Std.string(caller) + " must be a code block",null,{ fileName : "little/interpreter/memory/Storage.hx", lineNumber : 602, className : "little.interpreter.memory.Storage", methodName : "storeCodeBlock"});
		}
	}
	,setCodeBlock: function(address,caller) {
		switch(caller._hx_index) {
		case 8:
			var requiredParams = caller.requiredParams;
			var body = caller.body;
			this.setString(address,little_interpreter_ByteCode.compile(caller));
			break;
		case 14:
			var _g = caller.type;
			var body = caller.body;
			this.setString(address,little_interpreter_ByteCode.compile(little_interpreter_InterpTokens.FunctionCode(new OrderedStringMapImpl(),caller)));
			break;
		default:
			throw new haxe_exceptions_ArgumentException("caller","" + Std.string(caller) + " must be a code block",null,{ fileName : "little/interpreter/memory/Storage.hx", lineNumber : 617, className : "little.interpreter.memory.Storage", methodName : "setCodeBlock"});
		}
	}
	,readCodeBlock: function(address) {
		return little_interpreter_ByteCode.decompile(this.readString(little_interpreter_memory_MemoryPointer.fromInt(address)))[0];
	}
	,storeCondition: function(caller) {
		if(caller._hx_index == 6) {
			var _g = caller.callers;
			return this.storeString(little_interpreter_ByteCode.compile(caller));
		} else {
			var e = little_interpreter_InterpTokens.ConditionCode(null);
			throw new haxe_exceptions_ArgumentException("caller","" + Std.string(caller) + " must be a token of type " + $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name,null,{ fileName : "little/interpreter/memory/Storage.hx", lineNumber : 638, className : "little.interpreter.memory.Storage", methodName : "storeCondition"});
		}
	}
	,setCondition: function(address,caller) {
		if(caller._hx_index == 6) {
			var _g = caller.callers;
			this.setString(address,little_interpreter_ByteCode.compile(caller));
		} else {
			var e = little_interpreter_InterpTokens.ConditionCode(null);
			throw new haxe_exceptions_ArgumentException("caller","" + Std.string(caller) + " must be a token of type " + $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name,null,{ fileName : "little/interpreter/memory/Storage.hx", lineNumber : 651, className : "little.interpreter.memory.Storage", methodName : "setCondition"});
		}
	}
	,readCondition: function(address) {
		return little_interpreter_ByteCode.decompile(this.readString(little_interpreter_memory_MemoryPointer.fromInt(address)))[0];
	}
	,freeCondition: function(address) {
		this.freeString(address);
	}
	,storeSign: function(sign) {
		return this.storeString(sign);
	}
	,setSign: function(address,sign) {
		this.setString(address,sign);
	}
	,readSign: function(address) {
		if(address == this.parent.constants.NULL) {
			return null;
		}
		return little_interpreter_InterpTokens.Sign(this.readString(address));
	}
	,freeSign: function(address) {
		this.freeString(address);
	}
	,storeStatic: function(token) {
		switch(token._hx_index) {
		case 17:
			var num = token.num;
			return this.storeInt32(num);
		case 18:
			var num = token.num;
			return this.storeDouble(num);
		case 19:
			var string = token.string;
			return this.storeString(string);
		case 22:
			var sign = token.sign;
			return this.storeSign(sign);
		case 23:case 24:case 25:
			return this.parent.constants.get(token);
		default:
			throw new haxe_exceptions_ArgumentException("token","" + Std.string(token) + " cannot be statically stored to the storage",null,{ fileName : "little/interpreter/memory/Storage.hx", lineNumber : 719, className : "little.interpreter.memory.Storage", methodName : "storeStatic"});
		}
	}
	,storeObject: function(object) {
		var _this = [little_tools_InterpTokensSimple.NULL_VALUE].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		if(result.indexOf($hxEnums[object.__enum__].__constructs__[object._hx_index]._hx_name.toLowerCase()) != -1) {
			return this.parent.constants.NULL;
		}
		var _this = [little_tools_InterpTokensSimple.OBJECT].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		if(result.indexOf($hxEnums[object.__enum__].__constructs__[object._hx_index]._hx_name.toLowerCase()) == -1) {
			throw new haxe_exceptions_ArgumentException("object","" + Std.string(object) + " is not a dynamic object",null,{ fileName : "little/interpreter/memory/Storage.hx", lineNumber : 736, className : "little.interpreter.memory.Storage", methodName : "storeObject"});
		}
		if(object._hx_index == 27) {
			var props = object.props;
			var typeName = object.typeName;
			var quintuples = [];
			var propsC = haxe_ds_StringMap.createCopy(props.h);
			var v = { value : little_interpreter_InterpTokens.Characters(typeName), documentation : "The type of this object, as a " + little_Little.keywords.TYPE_STRING + "."};
			propsC.h[little_Little.keywords.OBJECT_TYPE_PROPERTY_NAME] = v;
			var h = propsC.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var k = _g_key;
				var v = _g_value;
				var key1 = k;
				var keyPointer = this.storeString(key1);
				var value;
				var _g = v.value;
				switch(_g._hx_index) {
				case 8:
					var _g1 = _g.requiredParams;
					var _g2 = _g.body;
					value = this.storeCodeBlock(v.value);
					break;
				case 27:
					var _g3 = _g.props;
					var _g4 = _g.typeName;
					value = this.storeObject(v.value);
					break;
				default:
					value = this.storeStatic(v.value);
				}
				var type;
				var _g5 = v.value;
				switch(_g5._hx_index) {
				case 8:
					var _g6 = _g5.requiredParams;
					var _g7 = _g5.body;
					type = this.parent.getTypeInformation(little_Little.keywords.TYPE_FUNCTION).pointer;
					break;
				case 17:
					var _g8 = _g5.num;
					type = this.parent.getTypeInformation(little_Little.keywords.TYPE_INT).pointer;
					break;
				case 18:
					var _g9 = _g5.num;
					type = this.parent.getTypeInformation(little_Little.keywords.TYPE_FLOAT).pointer;
					break;
				case 19:
					var _g10 = _g5.string;
					type = this.parent.getTypeInformation(little_Little.keywords.TYPE_STRING).pointer;
					break;
				case 23:
					type = this.parent.getTypeInformation(little_Little.keywords.TYPE_DYNAMIC).pointer;
					break;
				case 24:case 25:
					type = this.parent.getTypeInformation(little_Little.keywords.TYPE_BOOLEAN).pointer;
					break;
				case 27:
					var _g11 = _g5.props;
					var t = _g5.typeName;
					type = this.parent.getTypeInformation(t).pointer;
					break;
				default:
					throw haxe_Exception.thrown("Property value must be a static value, a code block or an object (given: `" + Std.string(v) + "`)");
				}
				quintuples.push({ key : key1, keyPointer : keyPointer, value : value, type : type, doc : this.storeString(v.documentation)});
			}
			var bytes = little_interpreter_memory_HashTables.generateObjectHashTable(quintuples);
			var value = bytes.length;
			var this1 = new haxe_io_Bytes(new ArrayBuffer(4));
			this1.fill(0,4,0);
			var bytes1 = this1;
			bytes1.setInt32(0,value);
			var bytesLength = bytes1;
			var bytesPointer = this.storeBytes(bytes.length,bytes);
			var value = bytes.length;
			var this1 = new haxe_io_Bytes(new ArrayBuffer(4));
			this1.fill(0,4,0);
			var bytes = this1;
			bytes.setInt32(0,value);
			var this1 = bytes;
			var this2 = new haxe_io_Bytes(new ArrayBuffer(4));
			this2.fill(0,4,0);
			var bytes = this2;
			bytes.setInt32(0,bytesPointer);
			var array = bytes;
			var newBytes = new haxe_io_Bytes(new ArrayBuffer(this1.length + array.length));
			newBytes.blit(0,this1,0,this1.length);
			newBytes.blit(this1.length,array,0,array.length);
			return this.storeBytes(8,newBytes);
		} else {
			throw new haxe_exceptions_ArgumentException("object","" + Std.string(object) + " must be an `Interpreter.Object`",null,{ fileName : "little/interpreter/memory/Storage.hx", lineNumber : 785, className : "little.interpreter.memory.Storage", methodName : "storeObject"});
		}
	}
	,readObject: function(pointer) {
		if(pointer == this.parent.constants.NULL) {
			return null;
		}
		var hashTableBytes = this.readBytes(this.readPointer(little_interpreter_memory_MemoryPointer.fromInt(pointer + 4)),this.readInt32(pointer));
		var table = little_interpreter_memory_HashTables.readObjectHashTable(hashTableBytes,this);
		var map = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < table.length) {
			var entry = table[_g];
			++_g;
			var k = entry.key;
			var v;
			var _g1 = this.parent.getTypeName(entry.type);
			var _hx_tmp;
			var _hx_tmp1;
			var _hx_tmp2;
			var _hx_tmp3;
			var _hx_tmp4;
			if(_g1 == little_Little.keywords.TYPE_STRING == true) {
				v = little_interpreter_InterpTokens.Characters(this.readString(entry.value));
			} else {
				_hx_tmp4 = _g1 == little_Little.keywords.TYPE_INT;
				if(_hx_tmp4 == true) {
					v = little_interpreter_InterpTokens.Number(this.readInt32(entry.value));
				} else {
					_hx_tmp3 = _g1 == little_Little.keywords.TYPE_FLOAT;
					if(_hx_tmp3 == true) {
						v = little_interpreter_InterpTokens.Decimal(this.readDouble(entry.value));
					} else {
						_hx_tmp2 = _g1 == little_Little.keywords.TYPE_BOOLEAN;
						if(_hx_tmp2 == true) {
							v = this.readByte(entry.value) == 1 ? little_interpreter_InterpTokens.TrueValue : little_interpreter_InterpTokens.FalseValue;
						} else {
							_hx_tmp1 = _g1 == little_Little.keywords.TYPE_FUNCTION;
							if(_hx_tmp1 == true) {
								v = this.readCodeBlock(entry.value);
							} else {
								_hx_tmp = _g1 == little_Little.keywords.TYPE_DYNAMIC && Type.enumEq(this.parent.constants.getFromPointer(entry.value),little_interpreter_InterpTokens.NullValue);
								v = _hx_tmp == true ? little_interpreter_InterpTokens.NullValue : this.readObject(entry.value);
							}
						}
					}
				}
			}
			var v1 = { value : v, documentation : this.readString(entry.doc)};
			map.h[k] = v1;
		}
		return little_interpreter_InterpTokens.Object(map,Type.enumParameters(map.h[little_Little.keywords.OBJECT_TYPE_PROPERTY_NAME].value)[0]);
	}
	,freeObject: function(pointer) {
		var hashTableSize = this.readInt32(pointer);
		var hashTablePointer = this.readPointer(little_interpreter_memory_MemoryPointer.fromInt(pointer + 4));
		this.freeBytes(hashTablePointer,hashTableSize);
		this.freeBytes(pointer,8);
	}
	,storeType: function(name,statics,instances) {
		var value = this.storeString(name);
		var this1 = new haxe_io_Bytes(new ArrayBuffer(4));
		this1.fill(0,4,0);
		var bytes = this1;
		bytes.setInt32(0,value);
		var bytes1 = bytes;
		var cellSize = 16;
		cellSize = 16;
		var staticsLength = little_tools_Extensions.toArray(new haxe_ds__$StringMap_StringMapKeyIterator(statics.h)).length;
		var length = Math.floor(staticsLength * cellSize * 3 / 2);
		var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
		this1.fill(0,length,0);
		var staticHashMap = this1;
		var instancesLength = little_tools_Extensions.toArray(new haxe_ds__$StringMap_StringMapKeyIterator(instances.h)).length;
		var length = Math.floor(instancesLength * (cellSize - 4) * 3 / 2);
		var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
		this1.fill(0,length,0);
		var instancesHashMap = this1;
		var _g = 0;
		var _g1 = [{ a : staticsLength, b : staticHashMap, c : statics},{ a : instancesLength, b : instancesHashMap, c : instances}];
		while(_g < _g1.length) {
			var __item = _g1[_g];
			++_g;
			var elements = __item.a;
			var hashTable = __item.b;
			var fields = __item.c;
			var h = fields.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var k = _g_key;
				var v = _g_value;
				var keyHash = haxe_hash_Murmur1.hash(haxe_io_Bytes.ofString(k));
				var khI64_high = 0;
				var khI64_low = keyHash;
				var b_high = cellSize >> 31;
				var b_low = cellSize;
				var mask = 65535;
				var al = khI64_low & mask;
				var ah = khI64_low >>> 16;
				var bl = b_low & mask;
				var bh = b_low >>> 16;
				var p00 = haxe_Int32._mul(al,bl);
				var p10 = haxe_Int32._mul(ah,bl);
				var p01 = haxe_Int32._mul(al,bh);
				var p11 = haxe_Int32._mul(ah,bh);
				var low = p00;
				var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
				p01 <<= 16;
				low = low + p01 | 0;
				if(haxe_Int32.ucompare(low,p01) < 0) {
					var ret = high++;
					high = high | 0;
				}
				p10 <<= 16;
				low = low + p10 | 0;
				if(haxe_Int32.ucompare(low,p10) < 0) {
					var ret1 = high++;
					high = high | 0;
				}
				high = high + (haxe_Int32._mul(khI64_low,b_high) + haxe_Int32._mul(khI64_high,b_low) | 0) | 0;
				var keyIndex = haxe_Int64.divMod(new haxe__$Int64__$_$_$Int64(high,low),new haxe__$Int64__$_$_$Int64(elements >> 31,elements)).modulus.low;
				if(hashTable.getInt32(keyIndex) == 0) {
					var address = keyIndex;
					hashTable.setInt32(address,this.storeString(k));
					address = address + 4 | 0;
					if(fields == statics) {
						hashTable.setInt32(address,this.parent.store(v.value));
						address = address + 4 | 0;
					}
					hashTable.setInt32(address,this.parent.getTypeInformation(v.type).pointer);
					address = address + 4 | 0;
					hashTable.setInt32(keyIndex,this.storeString(v.documentation));
				} else {
					var incrementation = 0;
					var i = keyIndex;
					while(hashTable.getInt32(i) != 0) {
						i = i + cellSize | 0;
						incrementation += cellSize;
						if(i >= hashTable.length) {
							i = 0;
						}
						if(incrementation >= hashTable.length) {
							throw haxe_Exception.thrown("Object hash table did not generate. This should never happen. Initial length may be incorrect.");
						}
					}
					var address1 = keyIndex;
					hashTable.setInt32(address1,this.storeString(k));
					address1 = address1 + 4 | 0;
					if(fields == statics) {
						hashTable.setInt32(address1,this.parent.store(v.value));
						address1 = address1 + 4 | 0;
					}
					hashTable.setInt32(address1,this.parent.getTypeInformation(v.type).pointer);
					address1 = address1 + 4 | 0;
					hashTable.setInt32(keyIndex,this.storeString(v.documentation));
				}
			}
			cellSize -= 4;
		}
		var value = staticHashMap.length;
		var this1 = new haxe_io_Bytes(new ArrayBuffer(4));
		this1.fill(0,4,0);
		var bytes = this1;
		bytes.setInt32(0,value);
		var this1 = bytes;
		var newBytes = new haxe_io_Bytes(new ArrayBuffer(this1.length + staticHashMap.length));
		newBytes.blit(0,this1,0,this1.length);
		newBytes.blit(this1.length,staticHashMap,0,staticHashMap.length);
		staticHashMap = newBytes;
		var value = instancesHashMap.length;
		var this1 = new haxe_io_Bytes(new ArrayBuffer(4));
		this1.fill(0,4,0);
		var bytes = this1;
		bytes.setInt32(0,value);
		var this1 = bytes;
		var newBytes = new haxe_io_Bytes(new ArrayBuffer(this1.length + instancesHashMap.length));
		newBytes.blit(0,this1,0,this1.length);
		newBytes.blit(this1.length,instancesHashMap,0,instancesHashMap.length);
		instancesHashMap = newBytes;
		var newBytes = new haxe_io_Bytes(new ArrayBuffer(bytes1.length + staticHashMap.length));
		newBytes.blit(0,bytes1,0,bytes1.length);
		newBytes.blit(bytes1.length,staticHashMap,0,staticHashMap.length);
		var this1 = newBytes;
		var newBytes = new haxe_io_Bytes(new ArrayBuffer(this1.length + instancesHashMap.length));
		newBytes.blit(0,this1,0,this1.length);
		newBytes.blit(this1.length,instancesHashMap,0,instancesHashMap.length);
		bytes1 = newBytes;
		return this.storeBytes(bytes1.length,bytes1);
	}
	,readType: function(pointer) {
		if(pointer == this.parent.constants.NULL) {
			return null;
		}
		var className = this.readString(this.readPointer(little_interpreter_memory_MemoryPointer.fromInt(pointer)));
		var cellSize = 16;
		var statics = new haxe_ds_StringMap();
		var staticsLength = this.readInt32(little_interpreter_memory_MemoryPointer.fromInt(pointer + 4));
		var i = pointer + 4;
		while(i < pointer + 4 + staticsLength) {
			var keyPointer = little_interpreter_memory_MemoryPointer.fromInt(this.readInt32(little_interpreter_memory_MemoryPointer.fromInt(i)));
			var value = little_interpreter_memory_MemoryPointer.fromInt(this.readInt32(little_interpreter_memory_MemoryPointer.fromInt(i + 4)));
			var type = little_interpreter_memory_MemoryPointer.fromInt(this.readInt32(little_interpreter_memory_MemoryPointer.fromInt(i + 8)));
			var doc = little_interpreter_memory_MemoryPointer.fromInt(this.readInt32(little_interpreter_memory_MemoryPointer.fromInt(i + 12)));
			if(keyPointer == 0) {
				i += cellSize;
				continue;
			}
			var k = this.readString(keyPointer);
			var v = { value : value, type : type, doc : doc};
			statics.h[k] = v;
			i += cellSize;
		}
		cellSize -= 4;
		var instances = new haxe_ds_StringMap();
		var instancesLength = this.readInt32(little_interpreter_memory_MemoryPointer.fromInt(i + 4));
		while(i < i + 4 + instancesLength) {
			var keyPointer = this.readPointer(little_interpreter_memory_MemoryPointer.fromInt(i));
			var type = this.readPointer(little_interpreter_memory_MemoryPointer.fromInt(i + 4));
			var doc = this.readPointer(little_interpreter_memory_MemoryPointer.fromInt(i + 8));
			if(keyPointer == 0) {
				i += cellSize;
				continue;
			}
			var k = this.readString(keyPointer);
			var v = { type : type, doc : doc};
			instances.h[k] = v;
			i += cellSize;
		}
		return { typeName : className, pointer : pointer, passedByReference : true, isExternal : false, instanceFields : instances, staticFields : statics, defaultInstanceSize : 8};
	}
	,freeType: function(pointer) {
		this.freeString(pointer);
		var byteCount = this.readInt32(little_interpreter_memory_MemoryPointer.fromInt(pointer + 4));
		byteCount += this.readInt32(little_interpreter_memory_MemoryPointer.fromInt(pointer + 4 + byteCount));
		byteCount += 8;
		this.freeBytes(pointer,byteCount);
	}
	,__class__: little_interpreter_memory_Storage
};
var little_interpreter_memory_Referrer = function(memory) {
	this.parent = memory;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(1024));
	this1.fill(0,1024,0);
	this.bytes = this1;
	this.bytes.setInt32(0,4);
	this.bytes.setUInt16(4,0);
	this.bytes.setUInt16(6,0);
};
$hxClasses["little.interpreter.memory.Referrer"] = little_interpreter_memory_Referrer;
little_interpreter_memory_Referrer.__name__ = "little.interpreter.memory.Referrer";
little_interpreter_memory_Referrer.prototype = {
	parent: null
	,bytes: null
	,currentScopeStart: null
	,get_currentScopeStart: function() {
		return this.bytes.getInt32(0);
	}
	,currentScopeLength: null
	,get_currentScopeLength: function() {
		return this.bytes.getUInt16(this.bytes.getInt32(0) + 2);
	}
	,requestMemory: function() {
		if(this.bytes.length > this.parent.maxMemorySize) {
			little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Too many scopes have been created, referrer's stack has overflown (check for infinite recursion)"),"Memory, Referrer");
		}
		var newBytes = new haxe_io_Bytes(new ArrayBuffer(this.bytes.length + 1024));
		var tmp = this.bytes;
		var values = [newBytes.length,this.bytes.length];
		var min = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] < min) {
				min = values[i];
			}
		}
		newBytes.blit(0,tmp,0,min);
		this.bytes = newBytes;
	}
	,pushScope: function() {
		var currentScopeLength = this.bytes.getUInt16(this.bytes.getInt32(0) + 2);
		var currentScopeStart = this.bytes.getInt32(0) + 4;
		var this1 = new haxe_io_Bytes(new ArrayBuffer(4));
		this1.fill(0,4,0);
		var header = this1;
		header.setUInt16(0,currentScopeLength);
		header.setUInt16(2,0);
		var writePosition = currentScopeStart + currentScopeLength * little_interpreter_memory_Referrer.KEY_SIZE;
		if(writePosition + 2 + 2 > this.bytes.length) {
			this.requestMemory();
		}
		this.bytes.blit(writePosition,header,0,header.length);
		this.bytes.setInt32(0,writePosition);
	}
	,popScope: function() {
		var currentScopePosition = this.bytes.getInt32(0);
		var previousScopeLength = this.bytes.getUInt16(currentScopePosition);
		var currentScopeLength = this.bytes.getUInt16(currentScopePosition + 2);
		this.bytes.setInt32(0,currentScopePosition - previousScopeLength * little_interpreter_memory_Referrer.KEY_SIZE - 4);
	}
	,reference: function(key,address,type) {
		var keyHash = haxe_hash_Murmur1.hash(haxe_io_Bytes.ofString(haxe_Serializer.run(key)));
		var stringName = this.parent.storage.storeString(key);
		var writePosition = this.get_currentScopeStart() + 4 + this.get_currentScopeLength() * little_interpreter_memory_Referrer.KEY_SIZE;
		if(writePosition + little_interpreter_memory_Referrer.KEY_SIZE > this.bytes.length) {
			this.requestMemory();
		}
		this.bytes.setInt32(writePosition,keyHash);
		this.bytes.setInt32(writePosition + 4,stringName);
		this.bytes.setInt32(writePosition + 4 + 4,address);
		this.bytes.setInt32(writePosition + 4 + 8,this.parent.getTypeInformation(type).pointer);
		this.bytes.setUInt16(this.get_currentScopeStart() + 2,this.bytes.getUInt16(this.get_currentScopeStart() + 2) + 1);
	}
	,dereference: function(key) {
		var keyHash = haxe_hash_Murmur1.hash(haxe_io_Bytes.ofString(haxe_Serializer.run(key)));
		var writePosition = this.get_currentScopeStart() + 4;
		while(true) {
			var currentKeyHash = this.bytes.getInt32(writePosition);
			if(currentKeyHash == keyHash) {
				var stringName = this.parent.storage.readString(little_interpreter_memory_MemoryPointer.fromInt(this.bytes.getInt32(writePosition + 4)));
				if(stringName == key) {
					break;
				}
			}
			writePosition += little_interpreter_memory_Referrer.KEY_SIZE;
			if(writePosition >= this.get_currentScopeStart() + this.get_currentScopeLength() * little_interpreter_memory_Referrer.KEY_SIZE) {
				throw haxe_Exception.thrown("Cannot dereference key that doesn't exist. (key: " + key + ")");
			}
		}
		this.bytes.setUInt16(this.bytes.getInt32(0) + 2,this.bytes.getUInt16(this.bytes.getInt32(0) + 2) - 1);
	}
	,get: function(key) {
		var keyHash = haxe_hash_Murmur1.hash(haxe_io_Bytes.ofString(haxe_Serializer.run(key)));
		var checkingScope = this.get_currentScopeStart();
		var elementCount = this.bytes.getUInt16(this.get_currentScopeStart() + 2);
		var nextScope = this.get_currentScopeStart() - this.bytes.getUInt16(this.get_currentScopeStart()) * little_interpreter_memory_Referrer.KEY_SIZE - 4;
		do {
			var i = checkingScope + 4;
			while(i < checkingScope + elementCount * little_interpreter_memory_Referrer.KEY_SIZE) {
				var testingHash = this.bytes.getInt32(i);
				if(keyHash == testingHash) {
					var stringName = this.parent.storage.readString(little_interpreter_memory_MemoryPointer.fromInt(this.bytes.getInt32(i + 4)));
					if(stringName == key) {
						return { address : little_interpreter_memory_MemoryPointer.fromInt(this.bytes.getInt32(i + 4 + 4)), type : this.parent.getTypeName(little_interpreter_memory_MemoryPointer.fromInt(this.bytes.getInt32(i + 4 + 8)))};
					}
				}
				i += little_interpreter_memory_Referrer.KEY_SIZE;
			}
			checkingScope = nextScope;
			elementCount = this.bytes.getUInt16(nextScope + 2);
			nextScope = nextScope - this.bytes.getUInt16(nextScope) * little_interpreter_memory_Referrer.KEY_SIZE - 4;
		} while(checkingScope != 0);
		throw haxe_Exception.thrown("Key " + key + " does not exist.");
	}
	,set: function(key,value) {
		var keyHash = haxe_hash_Murmur1.hash(haxe_io_Bytes.ofString(haxe_Serializer.run(key)));
		var checkingScope = this.get_currentScopeStart();
		var elementCount = this.bytes.getUInt16(this.get_currentScopeStart() + 2);
		var nextScope = this.get_currentScopeStart() - this.bytes.getUInt16(this.get_currentScopeStart()) * little_interpreter_memory_Referrer.KEY_SIZE - 4;
		do {
			var i = checkingScope + 4;
			while(i < checkingScope + elementCount * little_interpreter_memory_Referrer.KEY_SIZE) {
				var testingHash = this.bytes.getInt32(i);
				if(keyHash == testingHash) {
					var stringName = this.parent.storage.readString(little_interpreter_memory_MemoryPointer.fromInt(this.bytes.getInt32(i + 4)));
					if(stringName == key) {
						if(value.address != null) {
							this.bytes.setInt32(i + 4 + 4,value.address);
						}
						if(value.type != null) {
							this.bytes.setInt32(i + 4 + 8,this.parent.getTypeInformation(value.type).pointer);
						}
						return;
					}
				}
				i += little_interpreter_memory_Referrer.KEY_SIZE;
			}
			checkingScope = nextScope;
			elementCount = this.bytes.getUInt16(nextScope + 2);
			nextScope = nextScope - this.bytes.getUInt16(nextScope) * little_interpreter_memory_Referrer.KEY_SIZE - 4;
		} while(checkingScope != 0);
		throw haxe_Exception.thrown("Cannot set " + key + " -  does not exist.");
	}
	,exists: function(key) {
		var keyHash = haxe_hash_Murmur1.hash(haxe_io_Bytes.ofString(haxe_Serializer.run(key)));
		var checkingScope = this.get_currentScopeStart();
		var elementCount = this.bytes.getUInt16(this.get_currentScopeStart() + 2);
		var nextScope = this.get_currentScopeStart() - this.bytes.getUInt16(this.get_currentScopeStart()) * little_interpreter_memory_Referrer.KEY_SIZE - 4;
		do {
			var i = checkingScope + 4;
			while(i < checkingScope + elementCount * little_interpreter_memory_Referrer.KEY_SIZE) {
				var testingHash = this.bytes.getInt32(i);
				if(keyHash == testingHash) {
					var stringName = this.parent.storage.readString(little_interpreter_memory_MemoryPointer.fromInt(this.bytes.getInt32(i + 4)));
					if(stringName == key) {
						return true;
					}
				}
				i += little_interpreter_memory_Referrer.KEY_SIZE;
			}
			checkingScope = nextScope;
			elementCount = this.bytes.getUInt16(nextScope + 2);
			nextScope = nextScope - this.bytes.getUInt16(nextScope) * little_interpreter_memory_Referrer.KEY_SIZE - 4;
		} while(checkingScope != 0);
		return false;
	}
	,keyValueIterator: function() {
		var map_h = Object.create(null);
		var checkingScope = this.get_currentScopeStart();
		var elementCount = this.bytes.getUInt16(this.get_currentScopeStart() + 2);
		var nextScope = this.get_currentScopeStart() - this.bytes.getUInt16(this.get_currentScopeStart()) * little_interpreter_memory_Referrer.KEY_SIZE - 4;
		do {
			var i = checkingScope;
			while(i < checkingScope + elementCount * little_interpreter_memory_Referrer.KEY_SIZE) {
				var stringName = this.parent.storage.readString(little_interpreter_memory_MemoryPointer.fromInt(this.bytes.getInt32(i + 4)));
				map_h[stringName] = { address : little_interpreter_memory_MemoryPointer.fromInt(this.bytes.getInt32(i + 4 + 4)), type : this.parent.storage.readString(little_interpreter_memory_MemoryPointer.fromInt(this.bytes.getInt32(i + 4 + 8)))};
				i += little_interpreter_memory_Referrer.KEY_SIZE;
			}
			checkingScope = nextScope;
			elementCount = this.bytes.getUInt16(nextScope + 2);
			nextScope = nextScope - this.bytes.getUInt16(nextScope) * little_interpreter_memory_Referrer.KEY_SIZE - 4;
		} while(checkingScope != 0);
		return new haxe_ds__$StringMap_StringMapKeyValueIterator(map_h);
	}
	,__class__: little_interpreter_memory_Referrer
	,__properties__: {get_currentScopeLength:"get_currentScopeLength",get_currentScopeStart:"get_currentScopeStart"}
};
var little_interpreter_memory_ConstantPool = function(memory) {
	this.EMPTY_STRING = little_interpreter_memory_MemoryPointer.fromInt(19);
	this.EXTERN = little_interpreter_memory_MemoryPointer.fromInt(18);
	this.ERROR = little_interpreter_memory_MemoryPointer.fromInt(17);
	this.UNKNOWN = little_interpreter_memory_MemoryPointer.fromInt(16);
	this.TYPE = little_interpreter_memory_MemoryPointer.fromInt(15);
	this.DYNAMIC = little_interpreter_memory_MemoryPointer.fromInt(14);
	this.BOOL = little_interpreter_memory_MemoryPointer.fromInt(13);
	this.FLOAT = little_interpreter_memory_MemoryPointer.fromInt(12);
	this.INT = little_interpreter_memory_MemoryPointer.fromInt(11);
	this.ZERO = little_interpreter_memory_MemoryPointer.fromInt(3);
	this.TRUE = little_interpreter_memory_MemoryPointer.fromInt(2);
	this.FALSE = little_interpreter_memory_MemoryPointer.fromInt(1);
	this.NULL = little_interpreter_memory_MemoryPointer.fromInt(0);
	this.capacity = 24;
	var _g = 0;
	var _g1 = this.capacity;
	while(_g < _g1) {
		var i = _g++;
		memory.storage.reserved.b[i] = 1;
	}
	memory.storage.setByte(this.TRUE,1);
};
$hxClasses["little.interpreter.memory.ConstantPool"] = little_interpreter_memory_ConstantPool;
little_interpreter_memory_ConstantPool.__name__ = "little.interpreter.memory.ConstantPool";
little_interpreter_memory_ConstantPool.prototype = {
	capacity: null
	,NULL: null
	,FALSE: null
	,TRUE: null
	,ZERO: null
	,INT: null
	,FLOAT: null
	,BOOL: null
	,DYNAMIC: null
	,TYPE: null
	,UNKNOWN: null
	,ERROR: null
	,EXTERN: null
	,EMPTY_STRING: null
	,get: function(token) {
		var _hx_tmp;
		var _hx_tmp1;
		var _hx_tmp2;
		var _hx_tmp3;
		var _hx_tmp4;
		var _hx_tmp5;
		switch(token._hx_index) {
		case 8:
			var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_INT);
			_hx_tmp5 = Type.enumEq(token,b);
			if(_hx_tmp5 == true) {
				return this.INT;
			} else {
				var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_FLOAT);
				_hx_tmp4 = Type.enumEq(token,b);
				if(_hx_tmp4 == true) {
					return this.FLOAT;
				} else {
					var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_BOOLEAN);
					_hx_tmp3 = Type.enumEq(token,b);
					if(_hx_tmp3 == true) {
						return this.BOOL;
					} else {
						var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC);
						_hx_tmp2 = Type.enumEq(token,b);
						if(_hx_tmp2 == true) {
							return this.DYNAMIC;
						} else {
							var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_MODULE);
							_hx_tmp1 = Type.enumEq(token,b);
							if(_hx_tmp1 == true) {
								return this.TYPE;
							} else {
								var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_UNKNOWN);
								_hx_tmp = Type.enumEq(token,b);
								if(_hx_tmp == true) {
									return this.UNKNOWN;
								} else if(Type.enumParameters(token.body)[0].filter(function(x) {
									return x.is(little_tools_InterpTokensSimple.HAXE_EXTERN);
								}) == true) {
									var p = token.requiredParams;
									return this.EXTERN;
								} else {
									throw new haxe_exceptions_ArgumentException("token","" + Std.string(token) + " does not exist in the constant pool",null,{ fileName : "little/interpreter/memory/ConstantPool.hx", lineNumber : 63, className : "little.interpreter.memory.ConstantPool", methodName : "get"});
								}
							}
						}
					}
				}
			}
			break;
		case 17:
			if(token.num == 0) {
				return this.ZERO;
			} else {
				var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_INT);
				_hx_tmp5 = Type.enumEq(token,b);
				if(_hx_tmp5 == true) {
					return this.INT;
				} else {
					var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_FLOAT);
					_hx_tmp4 = Type.enumEq(token,b);
					if(_hx_tmp4 == true) {
						return this.FLOAT;
					} else {
						var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_BOOLEAN);
						_hx_tmp3 = Type.enumEq(token,b);
						if(_hx_tmp3 == true) {
							return this.BOOL;
						} else {
							var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC);
							_hx_tmp2 = Type.enumEq(token,b);
							if(_hx_tmp2 == true) {
								return this.DYNAMIC;
							} else {
								var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_MODULE);
								_hx_tmp1 = Type.enumEq(token,b);
								if(_hx_tmp1 == true) {
									return this.TYPE;
								} else {
									var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_UNKNOWN);
									_hx_tmp = Type.enumEq(token,b);
									if(_hx_tmp == true) {
										return this.UNKNOWN;
									} else {
										throw new haxe_exceptions_ArgumentException("token","" + Std.string(token) + " does not exist in the constant pool",null,{ fileName : "little/interpreter/memory/ConstantPool.hx", lineNumber : 63, className : "little.interpreter.memory.ConstantPool", methodName : "get"});
									}
								}
							}
						}
					}
				}
			}
			break;
		case 18:
			if(token.num == 0.) {
				return this.ZERO;
			} else {
				var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_INT);
				_hx_tmp5 = Type.enumEq(token,b);
				if(_hx_tmp5 == true) {
					return this.INT;
				} else {
					var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_FLOAT);
					_hx_tmp4 = Type.enumEq(token,b);
					if(_hx_tmp4 == true) {
						return this.FLOAT;
					} else {
						var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_BOOLEAN);
						_hx_tmp3 = Type.enumEq(token,b);
						if(_hx_tmp3 == true) {
							return this.BOOL;
						} else {
							var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC);
							_hx_tmp2 = Type.enumEq(token,b);
							if(_hx_tmp2 == true) {
								return this.DYNAMIC;
							} else {
								var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_MODULE);
								_hx_tmp1 = Type.enumEq(token,b);
								if(_hx_tmp1 == true) {
									return this.TYPE;
								} else {
									var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_UNKNOWN);
									_hx_tmp = Type.enumEq(token,b);
									if(_hx_tmp == true) {
										return this.UNKNOWN;
									} else {
										throw new haxe_exceptions_ArgumentException("token","" + Std.string(token) + " does not exist in the constant pool",null,{ fileName : "little/interpreter/memory/ConstantPool.hx", lineNumber : 63, className : "little.interpreter.memory.ConstantPool", methodName : "get"});
									}
								}
							}
						}
					}
				}
			}
			break;
		case 19:
			if(token.string == "") {
				return this.EMPTY_STRING;
			} else {
				var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_INT);
				_hx_tmp5 = Type.enumEq(token,b);
				if(_hx_tmp5 == true) {
					return this.INT;
				} else {
					var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_FLOAT);
					_hx_tmp4 = Type.enumEq(token,b);
					if(_hx_tmp4 == true) {
						return this.FLOAT;
					} else {
						var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_BOOLEAN);
						_hx_tmp3 = Type.enumEq(token,b);
						if(_hx_tmp3 == true) {
							return this.BOOL;
						} else {
							var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC);
							_hx_tmp2 = Type.enumEq(token,b);
							if(_hx_tmp2 == true) {
								return this.DYNAMIC;
							} else {
								var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_MODULE);
								_hx_tmp1 = Type.enumEq(token,b);
								if(_hx_tmp1 == true) {
									return this.TYPE;
								} else {
									var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_UNKNOWN);
									_hx_tmp = Type.enumEq(token,b);
									if(_hx_tmp == true) {
										return this.UNKNOWN;
									} else {
										throw new haxe_exceptions_ArgumentException("token","" + Std.string(token) + " does not exist in the constant pool",null,{ fileName : "little/interpreter/memory/ConstantPool.hx", lineNumber : 63, className : "little.interpreter.memory.ConstantPool", methodName : "get"});
									}
								}
							}
						}
					}
				}
			}
			break;
		case 23:
			return this.NULL;
		case 24:
			return this.TRUE;
		case 25:
			return this.FALSE;
		case 28:
			var _g = token.msg;
			var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_INT);
			_hx_tmp5 = Type.enumEq(token,b);
			if(_hx_tmp5 == true) {
				return this.INT;
			} else {
				var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_FLOAT);
				_hx_tmp4 = Type.enumEq(token,b);
				if(_hx_tmp4 == true) {
					return this.FLOAT;
				} else {
					var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_BOOLEAN);
					_hx_tmp3 = Type.enumEq(token,b);
					if(_hx_tmp3 == true) {
						return this.BOOL;
					} else {
						var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC);
						_hx_tmp2 = Type.enumEq(token,b);
						if(_hx_tmp2 == true) {
							return this.DYNAMIC;
						} else {
							var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_MODULE);
							_hx_tmp1 = Type.enumEq(token,b);
							if(_hx_tmp1 == true) {
								return this.TYPE;
							} else {
								var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_UNKNOWN);
								_hx_tmp = Type.enumEq(token,b);
								if(_hx_tmp == true) {
									return this.UNKNOWN;
								} else {
									return this.ERROR;
								}
							}
						}
					}
				}
			}
			break;
		default:
			var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_INT);
			_hx_tmp5 = Type.enumEq(token,b);
			if(_hx_tmp5 == true) {
				return this.INT;
			} else {
				var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_FLOAT);
				_hx_tmp4 = Type.enumEq(token,b);
				if(_hx_tmp4 == true) {
					return this.FLOAT;
				} else {
					var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_BOOLEAN);
					_hx_tmp3 = Type.enumEq(token,b);
					if(_hx_tmp3 == true) {
						return this.BOOL;
					} else {
						var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC);
						_hx_tmp2 = Type.enumEq(token,b);
						if(_hx_tmp2 == true) {
							return this.DYNAMIC;
						} else {
							var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_MODULE);
							_hx_tmp1 = Type.enumEq(token,b);
							if(_hx_tmp1 == true) {
								return this.TYPE;
							} else {
								var b = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_UNKNOWN);
								_hx_tmp = Type.enumEq(token,b);
								if(_hx_tmp == true) {
									return this.UNKNOWN;
								} else {
									throw new haxe_exceptions_ArgumentException("token","" + Std.string(token) + " does not exist in the constant pool",null,{ fileName : "little/interpreter/memory/ConstantPool.hx", lineNumber : 63, className : "little.interpreter.memory.ConstantPool", methodName : "get"});
								}
							}
						}
					}
				}
			}
		}
	}
	,getFromPointer: function(pointer) {
		switch(pointer) {
		case 0:
			return little_interpreter_InterpTokens.NullValue;
		case 1:
			return little_interpreter_InterpTokens.FalseValue;
		case 2:
			return little_interpreter_InterpTokens.TrueValue;
		case 3:
			return little_interpreter_InterpTokens.Number(0);
		case 11:
			return little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_INT);
		case 12:
			return little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_FLOAT);
		case 13:
			return little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_BOOLEAN);
		case 14:
			return little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC);
		case 15:
			return little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_MODULE);
		case 16:
			return little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_UNKNOWN);
		case 17:
			return little_interpreter_InterpTokens.ErrorMessage("Default value for error message");
		case 18:
			return little_interpreter_InterpTokens.HaxeExtern(function() {
				return little_interpreter_InterpTokens.Characters("Default value for external haxe code");
			});
		case 19:
			return little_interpreter_InterpTokens.Characters("");
		default:
			throw haxe_Exception.thrown("pointer " + (pointer == null ? "null" : little_interpreter_memory_MemoryPointer.toString(pointer)) + " not in constant pool");
		}
	}
	,hasPointer: function(pointer) {
		if(pointer < this.capacity) {
			return pointer >= 0;
		} else {
			return false;
		}
	}
	,__class__: little_interpreter_memory_ConstantPool
};
var little_interpreter_memory_ExternalInterfacing = function(memory) {
	this.globalProperties = new little_interpreter_memory_ExtTree(little_interpreter_memory_MemoryPointer.fromInt(0),null,null,little_interpreter_memory_MemoryPointer.fromInt(0));
	this.instanceProperties = new little_interpreter_memory_ExtTree(little_interpreter_memory_MemoryPointer.fromInt(0),null,null,little_interpreter_memory_MemoryPointer.fromInt(0));
	this.parent = memory;
	this.typeToPointer = new haxe_ds_StringMap();
};
$hxClasses["little.interpreter.memory.ExternalInterfacing"] = little_interpreter_memory_ExternalInterfacing;
little_interpreter_memory_ExternalInterfacing.__name__ = "little.interpreter.memory.ExternalInterfacing";
little_interpreter_memory_ExternalInterfacing.prototype = {
	parent: null
	,typeToPointer: null
	,pointerToType: null
	,get_pointerToType: function() {
		var pointerToType = new haxe_ds_IntMap();
		var h = this.typeToPointer.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_key = key;
			var _g_value = _g_h[key];
			var type = _g_key;
			var pointer = _g_value;
			pointerToType.h[pointer] = type;
		}
		return pointerToType;
	}
	,instanceProperties: null
	,globalProperties: null
	,createPathFor: function(extType) {
		var $l=arguments.length;
		var path = new Array($l>1?$l-1:0);
		for(var $i=1;$i<$l;++$i){path[$i-1]=arguments[$i];}
		var identifiers = path.slice();
		var handle = extType;
		while(identifiers.length > 0) {
			var identifier = identifiers.shift();
			if(Object.prototype.hasOwnProperty.call(handle.properties.h,identifier)) {
				handle = handle.properties.h[identifier];
			} else {
				var this1 = handle.properties;
				var v = new little_interpreter_memory_ExtTree();
				this1.h[identifier] = v;
				handle = handle.properties.h[identifier];
			}
		}
		return handle;
	}
	,createAllPathsFor: function() {
		var $l=arguments.length;
		var path = new Array($l>0?$l-0:0);
		for(var $i=0;$i<$l;++$i){path[$i-0]=arguments[$i];}
		var tree = this.globalProperties;
		($_=this,$_.createPathFor.apply($_,[tree].concat(path)));
		var tree = this.instanceProperties;
		($_=this,$_.createPathFor.apply($_,[tree].concat(path)));
	}
	,hasGlobal: function() {
		var $l=arguments.length;
		var path = new Array($l>0?$l-0:0);
		for(var $i=0;$i<$l;++$i){path[$i-0]=arguments[$i];}
		var identifiers = path.slice();
		var handle = this.globalProperties;
		while(identifiers.length > 0) {
			var identifier = identifiers.shift();
			if(Object.prototype.hasOwnProperty.call(handle.properties.h,identifier)) {
				handle = handle.properties.h[identifier];
			} else {
				return false;
			}
		}
		return true;
	}
	,hasInstance: function() {
		var $l=arguments.length;
		var path = new Array($l>0?$l-0:0);
		for(var $i=0;$i<$l;++$i){path[$i-0]=arguments[$i];}
		var identifiers = path.slice();
		var handle = this.instanceProperties;
		while(identifiers.length > 0) {
			var identifier = identifiers.shift();
			if(Object.prototype.hasOwnProperty.call(handle.properties.h,identifier)) {
				handle = handle.properties.h[identifier];
			} else {
				return false;
			}
		}
		return true;
	}
	,getGlobal: function() {
		var $l=arguments.length;
		var path = new Array($l>0?$l-0:0);
		for(var $i=0;$i<$l;++$i){path[$i-0]=arguments[$i];}
		var identifiers = path.slice();
		var handle = this.globalProperties;
		var _g = 0;
		while(_g < identifiers.length) {
			var ident = identifiers[_g];
			++_g;
			handle = handle.properties.h[ident];
		}
		return handle.getter(null,null);
	}
	,__class__: little_interpreter_memory_ExternalInterfacing
	,__properties__: {get_pointerToType:"get_pointerToType"}
};
var little_interpreter_memory_Operators = function() {
	this.lhsOnly = new haxe_ds_StringMap();
	this.rhsOnly = new haxe_ds_StringMap();
	this.standard = new haxe_ds_StringMap();
	this.priority = new haxe_ds_IntMap();
};
$hxClasses["little.interpreter.memory.Operators"] = little_interpreter_memory_Operators;
little_interpreter_memory_Operators.__name__ = "little.interpreter.memory.Operators";
little_interpreter_memory_Operators.prototype = {
	priority: null
	,standard: null
	,rhsOnly: null
	,lhsOnly: null
	,setPriority: function(op,type,opPriority) {
		var obj = { sign : op, side : type};
		if(opPriority == "first") {
			if(this.priority.h[-1] == null) {
				var v = [];
				this.priority.h[-1] = v;
			}
			this.priority.h[-1].push(obj);
		} else if(opPriority == "last") {
			var i = -1;
			var key = this.priority.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				if(i < key1) {
					i = key1;
				}
			}
			if(this.priority.h[i + 1] == null) {
				var v = [];
				this.priority.h[i + 1] = v;
			}
			this.priority.h[i + 1].push(obj);
		} else if(new EReg("[0-9]+","").match(opPriority)) {
			var p = Std.parseInt(opPriority);
			if(this.priority.h[p] == null) {
				var v = [];
				this.priority.h[p] = v;
			}
			this.priority.h[p].push(obj);
		} else if(StringTools.startsWith(opPriority,"before") || StringTools.startsWith(opPriority,"after") || StringTools.startsWith(opPriority,"with")) {
			var destinationOp;
			var opSide;
			var signPos = StringTools.trim(little_tools_TextTools.remove(little_tools_TextTools.remove(little_tools_TextTools.remove(opPriority,"before"),"after"),"with"));
			if(little_tools_TextTools.countOccurrencesOf(signPos,"_") != 1) {
				destinationOp = StringTools.replace(signPos,"_","");
				opSide = little_interpreter_memory_OperatorType.LHS_RHS;
			} else if(StringTools.startsWith(signPos,"_")) {
				destinationOp = StringTools.replace(signPos,"_","");
				opSide = little_interpreter_memory_OperatorType.LHS_ONLY;
			} else {
				destinationOp = StringTools.replace(signPos,"_","");
				opSide = little_interpreter_memory_OperatorType.RHS_ONLY;
			}
			var map = this.priority;
			var _g_map = map;
			var _g_keys = map.keys();
			while(_g_keys.hasNext()) {
				var key = _g_keys.next();
				var _g_value = _g_map.get(key);
				var _g_key = key;
				var key1 = _g_key;
				var value = _g_value;
				var _g = [];
				var _g1 = 0;
				var _g2 = value;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(v.side == opSide && v.sign == destinationOp) {
						_g.push(v);
					}
				}
				if(_g.length > 0) {
					if(StringTools.startsWith(opPriority,"before")) {
						if(this.priority.h[key1 - 1] == null) {
							var v1 = [];
							this.priority.h[key1 - 1] = v1;
						}
						this.priority.h[key1 - 1].push(obj);
					} else if(StringTools.startsWith(opPriority,"after")) {
						if(this.priority.h[key1 + 1] == null) {
							var v2 = [];
							this.priority.h[key1 + 1] = v2;
						}
						this.priority.h[key1 + 1].push(obj);
					} else {
						this.priority.h[key1].push(obj);
					}
					break;
				}
			}
		} else if(StringTools.startsWith(opPriority,"between")) {
			var signPos = StringTools.trim(little_tools_TextTools.remove(opPriority,"between"));
			var _this = signPos.split(" ");
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = StringTools.trim(_this[i]);
			}
			var signs = result;
			var sign1Data = this.signPosToObject(signs[0]);
			var sign2Data = this.signPosToObject(signs[1]);
			var sign1Level = -1;
			var sign2Level = -1;
			var map = this.priority;
			var _g_map = map;
			var _g_keys = map.keys();
			while(_g_keys.hasNext()) {
				var key = _g_keys.next();
				var _g_value = _g_map.get(key);
				var _g_key = key;
				var key1 = _g_key;
				var value = _g_value;
				var _g = [];
				var _g1 = 0;
				var _g2 = value;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(v.side == sign1Data.side && v.sign == sign1Data.sign) {
						_g.push(v);
					}
				}
				if(_g.length > 0) {
					sign1Level = key1;
				}
				var _g3 = [];
				var _g4 = 0;
				var _g5 = value;
				while(_g4 < _g5.length) {
					var v1 = _g5[_g4];
					++_g4;
					if(v1.side == sign2Data.side && v1.sign == sign2Data.sign) {
						_g3.push(v1);
					}
				}
				if(_g3.length > 0) {
					sign2Level = key1;
				}
			}
			if(sign1Level != -1 && sign2Level != -1 && sign1Level != sign2Level && Math.abs(sign1Level - sign2Level) <= 2) {
				if(Math.abs(sign1Level - sign2Level) == 2) {
					var key = (sign1Level + sign2Level) / 2 | 0;
					if(this.priority.h[key] == null) {
						var v = [];
						this.priority.h[key] = v;
					}
					this.priority.h[key].push(obj);
				} else {
					var insert = Math.max(sign1Level,sign2Level) | 0;
					var newMap = new haxe_ds_IntMap();
					var map = this.priority;
					var _g_map = map;
					var _g_keys = map.keys();
					while(_g_keys.hasNext()) {
						var key = _g_keys.next();
						var _g_value = _g_map.get(key);
						var _g_key = key;
						var k = _g_key;
						var v = _g_value;
						if(k < insert) {
							newMap.h[k] = v;
						} else {
							newMap.h[k + 1] = v;
						}
					}
					var v = [obj];
					newMap.h[insert] = v;
					this.priority = newMap;
				}
			}
		}
		var _g = [];
		var x = this.priority.keys();
		while(x.hasNext()) {
			var x1 = x.next();
			_g.push(x1);
		}
		var a = _g;
		if(a.length == 0) {
			return;
		}
		haxe_ds_ArraySort.sort(a,function(x,y) {
			return x - y;
		});
		var minimumKey = a[0];
		if(minimumKey != 0) {
			var diff = 0 - minimumKey;
			var priorityCopy = new haxe_ds_IntMap();
			var map = this.priority;
			var _g_map = map;
			var _g_keys = map.keys();
			while(_g_keys.hasNext()) {
				var key = _g_keys.next();
				var _g_value = _g_map.get(key);
				var _g_key = key;
				var key1 = _g_key;
				var value = _g_value;
				priorityCopy.h[key1 + diff] = value;
			}
			this.priority = priorityCopy;
		}
	}
	,getPriority: function(op,type) {
		var map = this.priority;
		var _g_map = map;
		var _g_keys = map.keys();
		while(_g_keys.hasNext()) {
			var key = _g_keys.next();
			var _g_value = _g_map.get(key);
			var _g_key = key;
			var index = _g_key;
			var key1 = _g_value;
			var _g = [];
			var _g1 = 0;
			var _g2 = key1;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				if(v.sign == op && v.side == type) {
					_g.push(v);
				}
			}
			if(_g.length > 0) {
				return index;
			}
		}
		throw haxe_Exception.thrown("Operator " + op + " not found");
	}
	,iterateByPriority: function() {
		var _g = [];
		var x = this.priority.keys();
		while(x.hasNext()) {
			var x1 = x.next();
			_g.push(x1);
		}
		var a = _g;
		haxe_ds_ArraySort.sort(a,function(x,y) {
			return x - y;
		});
		var _g = [];
		var _g1 = 0;
		while(_g1 < a.length) {
			var x = a[_g1];
			++_g1;
			_g.push(this.priority.h[x]);
		}
		var b = _g;
		var i = 0;
		return { next : function() {
			i += 1;
			return b[i - 1];
		}, hasNext : function() {
			return i < b.length;
		}};
	}
	,add: function(op,operatorType,priority,callback) {
		var _g = 0;
		var _g1 = op.length;
		while(_g < _g1) {
			var i = _g++;
			if(little_lexer_Lexer.signs.indexOf(op.charAt(i)) == -1) {
				little_lexer_Lexer.signs.push(op.charAt(i));
			}
		}
		little_Little.keywords.RECOGNIZED_SIGNS.push(op);
		switch(operatorType._hx_index) {
		case 0:
			this.standard.h[op] = callback;
			break;
		case 1:
			this.lhsOnly.h[op] = callback;
			break;
		case 2:
			this.rhsOnly.h[op] = callback;
			break;
		}
		this.setPriority(op,operatorType,priority);
	}
	,signPosToObject: function(signPos) {
		var destinationOp;
		var opSide;
		if(little_tools_TextTools.countOccurrencesOf(signPos,"_") != 1) {
			destinationOp = StringTools.replace(signPos,"_","");
			opSide = little_interpreter_memory_OperatorType.LHS_RHS;
		} else if(StringTools.startsWith(signPos,"_")) {
			destinationOp = StringTools.replace(signPos,"_","");
			opSide = little_interpreter_memory_OperatorType.LHS_ONLY;
		} else {
			destinationOp = StringTools.replace(signPos,"_","");
			opSide = little_interpreter_memory_OperatorType.RHS_ONLY;
		}
		return { sign : destinationOp, side : opSide};
	}
	,__class__: little_interpreter_memory_Operators
};
var little_tools_Plugins = function(memory) {
	this.memory = memory;
};
$hxClasses["little.tools.Plugins"] = little_tools_Plugins;
little_tools_Plugins.__name__ = "little.tools.Plugins";
little_tools_Plugins.combosHas = function(combos,lhs,rhs) {
	var _g = 0;
	while(_g < combos.length) {
		var c = combos[_g];
		++_g;
		if(c.rhs == rhs && c.lhs == lhs) {
			return true;
		}
	}
	return false;
};
little_tools_Plugins.containsCombo = function(array,lhs,rhs) {
	var _g = 0;
	while(_g < array.length) {
		var a = array[_g];
		++_g;
		if(a.lhs == lhs && a.rhs == rhs) {
			return true;
		}
	}
	return false;
};
little_tools_Plugins.prototype = {
	memory: null
	,registerType: function(typeName,fields) {
		var _gthis = this;
		var instances = ($_=this.memory.externs,$_.createPathFor.apply($_,[this.memory.externs.instanceProperties].concat(typeName.split("."))));
		var statics = ($_=this.memory.externs,$_.createPathFor.apply($_,[this.memory.externs.globalProperties].concat(typeName.split("."))));
		instances.type = statics.type = this.memory.getTypeInformation(little_Little.keywords.TYPE_MODULE).pointer;
		if(little_tools_Plugins.__noTypeCreation) {
			little_tools_Plugins.__noTypeCreation = false;
		} else {
			var this1 = this.memory.externs.typeToPointer;
			var v = this.memory.storage.storeByte(1);
			this1.h[typeName] = v;
			statics.getter = function(_,_1) {
				return { objectValue : little_interpreter_InterpTokens.ClassPointer(_gthis.memory.externs.typeToPointer.h[typeName]), objectAddress : _gthis.memory.externs.typeToPointer.h[typeName]};
			};
		}
		var h = fields.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_key = key;
			var _g_value = _g_h[key];
			var key1 = _g_key;
			var field = [_g_value];
			var _g = key1.split(" ");
			var _hx_tmp;
			var _hx_tmp1;
			var _hx_tmp2;
			if((_g[0] == "public" && _g.length == 3) == true) {
				var name = key1.split(" ")[2];
				var type = this.memory.getTypeInformation(key1.split(" ")[1]).pointer;
				var this1 = instances.properties;
				var v = new little_interpreter_memory_ExtTree(type,(function(field) {
					return function(value,address) {
						try {
							var result = field[0](value,address);
							if(js_Boot.__instanceof(result,little_interpreter_InterpTokens)) {
								return { objectValue : result, objectAddress : _gthis.memory.store(result)};
							}
							return { objectValue : result.value, objectAddress : result.address};
						} catch( _g ) {
							var e = haxe_Exception.caught(_g);
							return { objectValue : little_interpreter_InterpTokens.ErrorMessage("External Variable Error: " + e.details()), objectAddress : _gthis.memory.constants.ERROR};
						}
					};
				})(field));
				this1.h[name] = v;
			} else {
				_hx_tmp2 = _g[0] == "public";
				if(_hx_tmp2 == true) {
					var name1 = key1.split(" ")[2];
					var type1 = [this.memory.getTypeInformation(key1.split(" ")[1])];
					var params = little_interpreter_Interpreter.convert.apply(null,little_parser_Parser.parse(little_lexer_Lexer.lex(little_tools_TextTools.replaceLast(little_tools_TextTools.replaceFirst(little_tools_TextTools.replaceFirst(key1,"public function " + name1 + " ",""),"(",""),")",""))));
					var paramMap = [new OrderedStringMapImpl()];
					var _g1 = 0;
					while(_g1 < params.length) {
						var entry = params[_g1];
						++_g1;
						var _this = [little_tools_InterpTokensSimple.SPLIT_LINE,little_tools_InterpTokensSimple.SET_LINE].slice();
						var result = new Array(_this.length);
						var _g2 = 0;
						var _g3 = _this.length;
						while(_g2 < _g3) {
							var i = _g2++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						if(result.indexOf($hxEnums[entry.__enum__].__constructs__[entry._hx_index]._hx_name.toLowerCase()) != -1) {
							continue;
						}
						switch(entry._hx_index) {
						case 2:
							var _g4 = entry.name;
							var _g5 = entry.type;
							var _g6 = entry.doc;
							if(_g5 == null) {
								var name2 = _g4;
								var _this1 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
								var result1 = new Array(_this1.length);
								var _g7 = 0;
								var _g8 = _this1.length;
								while(_g7 < _g8) {
									var i1 = _g7++;
									var x1 = _this1[i1];
									result1[i1] = little_tools_TextTools.remove($hxEnums[x1.__enum__].__constructs__[x1._hx_index]._hx_name,"_").toLowerCase();
								}
								var k = result1.indexOf($hxEnums[name2.__enum__].__constructs__[name2._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name2)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name2]))[0];
								var v1 = little_interpreter_InterpTokens.TypeCast(little_interpreter_InterpTokens.NullValue,little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC));
								paramMap[0].set(k,v1);
							} else {
								var type2 = _g5;
								var name3 = _g4;
								var _this2 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
								var result2 = new Array(_this2.length);
								var _g9 = 0;
								var _g10 = _this2.length;
								while(_g9 < _g10) {
									var i2 = _g9++;
									var x2 = _this2[i2];
									result2[i2] = little_tools_TextTools.remove($hxEnums[x2.__enum__].__constructs__[x2._hx_index]._hx_name,"_").toLowerCase();
								}
								var k1 = result2.indexOf($hxEnums[name3.__enum__].__constructs__[name3._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name3)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name3]))[0];
								var v2 = little_interpreter_InterpTokens.TypeCast(little_interpreter_InterpTokens.NullValue,type2);
								paramMap[0].set(k1,v2);
							}
							break;
						case 11:
							var assignees = entry.assignees;
							var value = entry.value;
							var _g11 = assignees[0];
							if(_g11._hx_index == 2) {
								var _g12 = _g11.name;
								var _g13 = _g11.type;
								var _g14 = _g11.doc;
								if(_g13 == null) {
									var name4 = _g12;
									var _this3 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
									var result3 = new Array(_this3.length);
									var _g15 = 0;
									var _g16 = _this3.length;
									while(_g15 < _g16) {
										var i3 = _g15++;
										var x3 = _this3[i3];
										result3[i3] = little_tools_TextTools.remove($hxEnums[x3.__enum__].__constructs__[x3._hx_index]._hx_name,"_").toLowerCase();
									}
									var k2 = result3.indexOf($hxEnums[name4.__enum__].__constructs__[name4._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name4)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name4]))[0];
									var v3 = little_interpreter_InterpTokens.TypeCast(value,little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC));
									paramMap[0].set(k2,v3);
								} else {
									var type3 = _g13;
									var name5 = _g12;
									var _this4 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
									var result4 = new Array(_this4.length);
									var _g17 = 0;
									var _g18 = _this4.length;
									while(_g17 < _g18) {
										var i4 = _g17++;
										var x4 = _this4[i4];
										result4[i4] = little_tools_TextTools.remove($hxEnums[x4.__enum__].__constructs__[x4._hx_index]._hx_name,"_").toLowerCase();
									}
									var k3 = result4.indexOf($hxEnums[name5.__enum__].__constructs__[name5._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name5)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name5]))[0];
									var v4 = little_interpreter_InterpTokens.TypeCast(value,type3);
									paramMap[0].set(k3,v4);
								}
							}
							break;
						default:
						}
					}
					var this2 = instances.properties;
					var v5 = new little_interpreter_memory_ExtTree(this.memory.getTypeInformation(little_Little.keywords.TYPE_FUNCTION).pointer,(function(paramMap,type,field) {
						return function(value,address) {
							var returnType = little_tools_Extensions.asTokenPath(type[0].typeName);
							return { objectValue : little_interpreter_InterpTokens.FunctionCode(paramMap[0],little_interpreter_InterpTokens.Block([little_interpreter_InterpTokens.FunctionReturn(little_interpreter_InterpTokens.HaxeExtern((function(paramMap,field) {
								return function() {
									var field1 = field[0];
									var address1 = address;
									var value1 = value;
									var _this = little_tools_Extensions.toArray(paramMap[0].keys());
									var result = new Array(_this.length);
									var _g = 0;
									var _g1 = _this.length;
									while(_g < _g1) {
										var i = _g++;
										result[i] = little_interpreter_Interpreter.evaluate(_gthis.memory.read(_this[i]).objectValue);
									}
									var result1 = field1(address1,value1,result);
									return result1;
								};
							})(paramMap,field)),returnType)],returnType)), objectAddress : _gthis.memory.constants.EXTERN};
						};
					})(paramMap,type1,field));
					this2.h[name1] = v5;
				} else {
					_hx_tmp1 = _g[0] == "static" && _g.length == 3;
					if(_hx_tmp1 == true) {
						var name6 = key1.split(" ")[2];
						var type4 = this.memory.getTypeInformation(key1.split(" ")[1]).pointer;
						if(((field[0]) instanceof haxe_ds_StringMap)) {
							little_tools_Plugins.__noTypeCreation = true;
							this.registerType(typeName + "." + name6,field[0]);
							continue;
						}
						var this3 = statics.properties;
						var v6 = new little_interpreter_memory_ExtTree(type4,(function(field) {
							return function(_,_1) {
								try {
									var result = field[0]();
									if(js_Boot.__instanceof(result,little_interpreter_InterpTokens)) {
										return { objectValue : result, objectAddress : _gthis.memory.store(result)};
									}
									return { objectValue : result.value, objectAddress : result.address};
								} catch( _g ) {
									var e = haxe_Exception.caught(_g);
									return { objectValue : little_interpreter_InterpTokens.ErrorMessage("External Variable Error: " + e.details()), objectAddress : _gthis.memory.constants.ERROR};
								}
							};
						})(field));
						this3.h[name6] = v6;
					} else {
						_hx_tmp = _g[0] == "static";
						if(_hx_tmp == true) {
							var name7 = key1.split(" ")[2];
							var type5 = [this.memory.getTypeInformation(key1.split(" ")[1])];
							var params1 = little_interpreter_Interpreter.convert.apply(null,little_parser_Parser.parse(little_lexer_Lexer.lex(little_tools_TextTools.replaceLast(little_tools_TextTools.replaceFirst(little_tools_TextTools.replaceFirst(key1,"static function " + name7 + " ",""),"(",""),")",""))));
							var paramMap1 = [new OrderedStringMapImpl()];
							var _g19 = 0;
							while(_g19 < params1.length) {
								var entry1 = params1[_g19];
								++_g19;
								var _this5 = [little_tools_InterpTokensSimple.SPLIT_LINE,little_tools_InterpTokensSimple.SET_LINE].slice();
								var result5 = new Array(_this5.length);
								var _g20 = 0;
								var _g21 = _this5.length;
								while(_g20 < _g21) {
									var i5 = _g20++;
									var x5 = _this5[i5];
									result5[i5] = little_tools_TextTools.remove($hxEnums[x5.__enum__].__constructs__[x5._hx_index]._hx_name,"_").toLowerCase();
								}
								if(result5.indexOf($hxEnums[entry1.__enum__].__constructs__[entry1._hx_index]._hx_name.toLowerCase()) != -1) {
									continue;
								}
								switch(entry1._hx_index) {
								case 2:
									var _g22 = entry1.name;
									var _g23 = entry1.type;
									var _g24 = entry1.doc;
									if(_g23 == null) {
										var name8 = _g22;
										var _this6 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
										var result6 = new Array(_this6.length);
										var _g25 = 0;
										var _g26 = _this6.length;
										while(_g25 < _g26) {
											var i6 = _g25++;
											var x6 = _this6[i6];
											result6[i6] = little_tools_TextTools.remove($hxEnums[x6.__enum__].__constructs__[x6._hx_index]._hx_name,"_").toLowerCase();
										}
										var k4 = result6.indexOf($hxEnums[name8.__enum__].__constructs__[name8._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name8)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name8]))[0];
										var v7 = little_interpreter_InterpTokens.TypeCast(little_interpreter_InterpTokens.NullValue,little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC));
										paramMap1[0].set(k4,v7);
									} else {
										var type6 = _g23;
										var name9 = _g22;
										var _this7 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
										var result7 = new Array(_this7.length);
										var _g27 = 0;
										var _g28 = _this7.length;
										while(_g27 < _g28) {
											var i7 = _g27++;
											var x7 = _this7[i7];
											result7[i7] = little_tools_TextTools.remove($hxEnums[x7.__enum__].__constructs__[x7._hx_index]._hx_name,"_").toLowerCase();
										}
										var k5 = result7.indexOf($hxEnums[name9.__enum__].__constructs__[name9._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name9)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name9]))[0];
										var v8 = little_interpreter_InterpTokens.TypeCast(little_interpreter_InterpTokens.NullValue,type6);
										paramMap1[0].set(k5,v8);
									}
									break;
								case 11:
									var assignees1 = entry1.assignees;
									var value1 = entry1.value;
									var _g29 = assignees1[0];
									if(_g29._hx_index == 2) {
										var _g30 = _g29.name;
										var _g31 = _g29.type;
										var _g32 = _g29.doc;
										if(_g31 == null) {
											var name10 = _g30;
											var _this8 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
											var result8 = new Array(_this8.length);
											var _g33 = 0;
											var _g34 = _this8.length;
											while(_g33 < _g34) {
												var i8 = _g33++;
												var x8 = _this8[i8];
												result8[i8] = little_tools_TextTools.remove($hxEnums[x8.__enum__].__constructs__[x8._hx_index]._hx_name,"_").toLowerCase();
											}
											var k6 = result8.indexOf($hxEnums[name10.__enum__].__constructs__[name10._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name10)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name10]))[0];
											var v9 = little_interpreter_InterpTokens.TypeCast(value1,little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC));
											paramMap1[0].set(k6,v9);
										} else {
											var type7 = _g31;
											var name11 = _g30;
											var _this9 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
											var result9 = new Array(_this9.length);
											var _g35 = 0;
											var _g36 = _this9.length;
											while(_g35 < _g36) {
												var i9 = _g35++;
												var x9 = _this9[i9];
												result9[i9] = little_tools_TextTools.remove($hxEnums[x9.__enum__].__constructs__[x9._hx_index]._hx_name,"_").toLowerCase();
											}
											var k7 = result9.indexOf($hxEnums[name11.__enum__].__constructs__[name11._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name11)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name11]))[0];
											var v10 = little_interpreter_InterpTokens.TypeCast(value1,type7);
											paramMap1[0].set(k7,v10);
										}
									}
									break;
								default:
								}
							}
							var this4 = statics.properties;
							var v11 = new little_interpreter_memory_ExtTree(this.memory.getTypeInformation(little_Little.keywords.TYPE_FUNCTION).pointer,(function(paramMap,type,field) {
								return function(_,_1) {
									var returnType = little_tools_Extensions.asTokenPath(type[0].typeName);
									return { objectValue : little_interpreter_InterpTokens.FunctionCode(paramMap[0],little_interpreter_InterpTokens.Block([little_interpreter_InterpTokens.FunctionReturn(little_interpreter_InterpTokens.HaxeExtern((function(paramMap,field) {
										return function() {
											var field1 = field[0];
											var _this = little_tools_Extensions.toArray(paramMap[0].keys());
											var result = new Array(_this.length);
											var _g = 0;
											var _g1 = _this.length;
											while(_g < _g1) {
												var i = _g++;
												result[i] = little_interpreter_Interpreter.evaluate(_gthis.memory.read(_this[i]).objectValue);
											}
											var result1 = field1(result);
											return result1;
										};
									})(paramMap,field)),returnType)],returnType)), objectAddress : _gthis.memory.constants.EXTERN};
								};
							})(paramMap1,type5,field));
							this4.h[name7] = v11;
						} else {
							throw haxe_Exception.thrown("Invalid key syntax for `" + key1 + "`. Must start with either `public`/`static` `function`/`var`, and end with a variable name. (Example: `public var myVar`). Each item must be separated by a single whitespace.");
						}
					}
				}
			}
		}
	}
	,registerVariable: function(variableName,variableType,documentation,staticValue,valueGetter) {
		var _gthis = this;
		var varPath = variableName.split(".");
		var object = ($_=this.memory.externs,$_.createPathFor.apply($_,[this.memory.externs.globalProperties].concat(varPath)));
		object.type = this.memory.getTypeInformation(variableName).pointer;
		object.getter = function(_,_1) {
			try {
				var value = staticValue == null ? valueGetter() : staticValue;
				return { objectValue : value, objectAddress : _gthis.memory.store(value)};
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				return { objectValue : little_interpreter_InterpTokens.ErrorMessage("External Variable Error: " + e.details()), objectAddress : _gthis.memory.constants.ERROR};
			}
		};
	}
	,registerFunction: function(functionName,documentation,expectedParameters,callback,returnType) {
		var _gthis = this;
		var params = typeof(expectedParameters) == "string" ? little_interpreter_Interpreter.convert.apply(null,little_parser_Parser.parse(little_lexer_Lexer.lex(expectedParameters))) : expectedParameters;
		var functionPath = functionName.split(".");
		var paramMap = new OrderedStringMapImpl();
		var _g = 0;
		while(_g < params.length) {
			var entry = params[_g];
			++_g;
			var _this = [little_tools_InterpTokensSimple.SPLIT_LINE,little_tools_InterpTokensSimple.SET_LINE].slice();
			var result = new Array(_this.length);
			var _g1 = 0;
			var _g2 = _this.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var x = _this[i];
				result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			if(result.indexOf($hxEnums[entry.__enum__].__constructs__[entry._hx_index]._hx_name.toLowerCase()) != -1) {
				continue;
			}
			switch(entry._hx_index) {
			case 2:
				var _g3 = entry.name;
				var _g4 = entry.type;
				var _g5 = entry.doc;
				if(_g4 == null) {
					var name = _g3;
					var _this1 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
					var result1 = new Array(_this1.length);
					var _g6 = 0;
					var _g7 = _this1.length;
					while(_g6 < _g7) {
						var i1 = _g6++;
						var x1 = _this1[i1];
						result1[i1] = little_tools_TextTools.remove($hxEnums[x1.__enum__].__constructs__[x1._hx_index]._hx_name,"_").toLowerCase();
					}
					var k = result1.indexOf($hxEnums[name.__enum__].__constructs__[name._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name]))[0];
					var v = little_interpreter_InterpTokens.TypeCast(little_interpreter_InterpTokens.NullValue,little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC));
					paramMap.set(k,v);
				} else {
					var type = _g4;
					var name1 = _g3;
					var _this2 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
					var result2 = new Array(_this2.length);
					var _g8 = 0;
					var _g9 = _this2.length;
					while(_g8 < _g9) {
						var i2 = _g8++;
						var x2 = _this2[i2];
						result2[i2] = little_tools_TextTools.remove($hxEnums[x2.__enum__].__constructs__[x2._hx_index]._hx_name,"_").toLowerCase();
					}
					var k1 = result2.indexOf($hxEnums[name1.__enum__].__constructs__[name1._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name1)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name1]))[0];
					var v1 = little_interpreter_InterpTokens.TypeCast(little_interpreter_InterpTokens.NullValue,type);
					paramMap.set(k1,v1);
				}
				break;
			case 11:
				var assignees = entry.assignees;
				var value = entry.value;
				var _g10 = assignees[0];
				if(_g10._hx_index == 2) {
					var _g11 = _g10.name;
					var _g12 = _g10.type;
					var _g13 = _g10.doc;
					if(_g12 == null) {
						var name2 = _g11;
						var _this3 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result3 = new Array(_this3.length);
						var _g14 = 0;
						var _g15 = _this3.length;
						while(_g14 < _g15) {
							var i3 = _g14++;
							var x3 = _this3[i3];
							result3[i3] = little_tools_TextTools.remove($hxEnums[x3.__enum__].__constructs__[x3._hx_index]._hx_name,"_").toLowerCase();
						}
						var k2 = result3.indexOf($hxEnums[name2.__enum__].__constructs__[name2._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name2)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name2]))[0];
						var v2 = little_interpreter_InterpTokens.TypeCast(value,little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC));
						paramMap.set(k2,v2);
					} else {
						var type1 = _g12;
						var name3 = _g11;
						var _this4 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result4 = new Array(_this4.length);
						var _g16 = 0;
						var _g17 = _this4.length;
						while(_g16 < _g17) {
							var i4 = _g16++;
							var x4 = _this4[i4];
							result4[i4] = little_tools_TextTools.remove($hxEnums[x4.__enum__].__constructs__[x4._hx_index]._hx_name,"_").toLowerCase();
						}
						var k3 = result4.indexOf($hxEnums[name3.__enum__].__constructs__[name3._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name3)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name3]))[0];
						var v3 = little_interpreter_InterpTokens.TypeCast(value,type1);
						paramMap.set(k3,v3);
					}
				}
				break;
			default:
			}
		}
		var returnTypeToken = little_interpreter_Interpreter.convert.apply(null,little_parser_Parser.parse(little_lexer_Lexer.lex(returnType)))[0];
		var token = little_interpreter_InterpTokens.Block([little_interpreter_InterpTokens.FunctionReturn(little_interpreter_InterpTokens.HaxeExtern(function() {
			var callback1 = callback;
			var _this = little_tools_Extensions.toArray(paramMap.keys());
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = little_interpreter_Interpreter.evaluate(_gthis.memory.read(_this[i]).objectValue);
			}
			return callback1(result);
		}),returnTypeToken)],returnTypeToken);
		var token1 = little_interpreter_InterpTokens.FunctionCode(paramMap,token);
		var object = ($_=this.memory.externs,$_.createPathFor.apply($_,[this.memory.externs.globalProperties].concat(functionPath)));
		object.type = this.memory.getTypeInformation(little_Little.keywords.TYPE_FUNCTION).pointer;
		object.getter = function(_,_1) {
			return { objectValue : token1, objectAddress : _gthis.memory.constants.EXTERN};
		};
	}
	,registerCondition: function(conditionName,documentation,callback) {
		var _gthis = this;
		var conditionPath = conditionName.split(".");
		var object = ($_=this.memory.externs,$_.createPathFor.apply($_,[this.memory.externs.globalProperties].concat(conditionPath)));
		object.getter = function(_,_1) {
			var _g = new haxe_ds_ObjectMap();
			_g.set(null,little_interpreter_InterpTokens.Block([little_interpreter_InterpTokens.HaxeExtern(function() {
				return callback(little_interpreter_Interpreter.convert.apply(null,little_parser_Parser.parse(little_lexer_Lexer.lex(Type.enumParameters(_gthis.memory.read(little_Little.keywords.CONDITION_PATTERN_PARAMETER_NAME).objectValue)[0]))),little_interpreter_Interpreter.convert.apply(null,little_parser_Parser.parse(little_lexer_Lexer.lex(Type.enumParameters(_gthis.memory.read(little_Little.keywords.CONDITION_BODY_PARAMETER_NAME).objectValue)[0]))));
			})],null));
			return { objectValue : little_interpreter_InterpTokens.ConditionCode(_g), objectAddress : _gthis.memory.constants.EXTERN};
		};
	}
	,registerInstanceVariable: function(propertyName,propertyType,onType,documentation,staticValue,valueGetter) {
		var _gthis = this;
		var classPath = onType.split(".");
		classPath.push(propertyName);
		var object = ($_=this.memory.externs,$_.createPathFor.apply($_,[this.memory.externs.instanceProperties].concat(classPath)));
		object.type = this.memory.getTypeInformation(propertyType).pointer;
		object.getter = function(v,a) {
			try {
				var value = staticValue == null ? valueGetter(v,a) : staticValue;
				return { objectValue : value, objectAddress : _gthis.memory.store(value)};
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				return { objectValue : little_interpreter_InterpTokens.ErrorMessage("External Function Error: " + e.details()), objectAddress : _gthis.memory.constants.ERROR};
			}
		};
	}
	,registerInstanceFunction: function(propertyName,onType,documentation,expectedParameters,callback,returnType) {
		var _gthis = this;
		var params = typeof(expectedParameters) == "string" ? little_interpreter_Interpreter.convert.apply(null,little_parser_Parser.parse(little_lexer_Lexer.lex(expectedParameters))) : expectedParameters;
		var paramMap = new OrderedStringMapImpl();
		var _g = 0;
		while(_g < params.length) {
			var entry = params[_g];
			++_g;
			var _this = [little_tools_InterpTokensSimple.SPLIT_LINE,little_tools_InterpTokensSimple.SET_LINE].slice();
			var result = new Array(_this.length);
			var _g1 = 0;
			var _g2 = _this.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var x = _this[i];
				result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			if(result.indexOf($hxEnums[entry.__enum__].__constructs__[entry._hx_index]._hx_name.toLowerCase()) != -1) {
				continue;
			}
			switch(entry._hx_index) {
			case 2:
				var _g3 = entry.name;
				var _g4 = entry.type;
				var _g5 = entry.doc;
				if(_g4 == null) {
					var name = _g3;
					var _this1 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
					var result1 = new Array(_this1.length);
					var _g6 = 0;
					var _g7 = _this1.length;
					while(_g6 < _g7) {
						var i1 = _g6++;
						var x1 = _this1[i1];
						result1[i1] = little_tools_TextTools.remove($hxEnums[x1.__enum__].__constructs__[x1._hx_index]._hx_name,"_").toLowerCase();
					}
					var k = result1.indexOf($hxEnums[name.__enum__].__constructs__[name._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name]))[0];
					var v = little_interpreter_InterpTokens.TypeCast(little_interpreter_InterpTokens.NullValue,little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC));
					paramMap.set(k,v);
				} else {
					var type = _g4;
					var name1 = _g3;
					var _this2 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
					var result2 = new Array(_this2.length);
					var _g8 = 0;
					var _g9 = _this2.length;
					while(_g8 < _g9) {
						var i2 = _g8++;
						var x2 = _this2[i2];
						result2[i2] = little_tools_TextTools.remove($hxEnums[x2.__enum__].__constructs__[x2._hx_index]._hx_name,"_").toLowerCase();
					}
					var k1 = result2.indexOf($hxEnums[name1.__enum__].__constructs__[name1._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name1)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name1]))[0];
					var v1 = little_interpreter_InterpTokens.TypeCast(little_interpreter_InterpTokens.NullValue,type);
					paramMap.set(k1,v1);
				}
				break;
			case 11:
				var assignees = entry.assignees;
				var value = entry.value;
				var _g10 = assignees[0];
				if(_g10._hx_index == 2) {
					var _g11 = _g10.name;
					var _g12 = _g10.type;
					var _g13 = _g10.doc;
					if(_g12 == null) {
						var name2 = _g11;
						var _this3 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result3 = new Array(_this3.length);
						var _g14 = 0;
						var _g15 = _this3.length;
						while(_g14 < _g15) {
							var i3 = _g14++;
							var x3 = _this3[i3];
							result3[i3] = little_tools_TextTools.remove($hxEnums[x3.__enum__].__constructs__[x3._hx_index]._hx_name,"_").toLowerCase();
						}
						var k2 = result3.indexOf($hxEnums[name2.__enum__].__constructs__[name2._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name2)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name2]))[0];
						var v2 = little_interpreter_InterpTokens.TypeCast(value,little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC));
						paramMap.set(k2,v2);
					} else {
						var type1 = _g12;
						var name3 = _g11;
						var _this4 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result4 = new Array(_this4.length);
						var _g16 = 0;
						var _g17 = _this4.length;
						while(_g16 < _g17) {
							var i4 = _g16++;
							var x4 = _this4[i4];
							result4[i4] = little_tools_TextTools.remove($hxEnums[x4.__enum__].__constructs__[x4._hx_index]._hx_name,"_").toLowerCase();
						}
						var k3 = result4.indexOf($hxEnums[name3.__enum__].__constructs__[name3._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name3)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name3]))[0];
						var v3 = little_interpreter_InterpTokens.TypeCast(value,type1);
						paramMap.set(k3,v3);
					}
				}
				break;
			default:
			}
		}
		var classPath = onType.split(".");
		classPath.push(propertyName);
		var object = ($_=this.memory.externs,$_.createPathFor.apply($_,[this.memory.externs.instanceProperties].concat(classPath)));
		var returnTypeToken = little_interpreter_Interpreter.convert.apply(null,little_parser_Parser.parse(little_lexer_Lexer.lex(returnType)))[0];
		object.type = this.memory.getTypeInformation(little_Little.keywords.TYPE_FUNCTION).pointer;
		object.getter = function(v,a) {
			try {
				var tmp = little_interpreter_InterpTokens.Block([little_interpreter_InterpTokens.FunctionReturn(little_interpreter_InterpTokens.HaxeExtern(function() {
					var callback1 = callback;
					var v1 = v;
					var a1 = a;
					var _this = little_tools_Extensions.toArray(paramMap.keys());
					var result = new Array(_this.length);
					var _g = 0;
					var _g1 = _this.length;
					while(_g < _g1) {
						var i = _g++;
						result[i] = little_interpreter_Interpreter.evaluate(_gthis.memory.read(_this[i]).objectValue);
					}
					return callback1(v1,a1,result);
				}),returnTypeToken)],returnTypeToken);
				return { objectValue : little_interpreter_InterpTokens.FunctionCode(paramMap,tmp), objectAddress : _gthis.memory.constants.EXTERN};
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				return { objectValue : little_interpreter_InterpTokens.ErrorMessage("External Function Error: " + e.details()), objectAddress : _gthis.memory.constants.ERROR};
			}
		};
	}
	,registerSign: function(symbol,info) {
		if(info.operatorType == null || info.operatorType == little_interpreter_memory_OperatorType.LHS_RHS) {
			if(info.callback == null && info.singleSidedOperatorCallback != null) {
				var tmp = info.operatorType;
				throw new haxe_exceptions_ArgumentException("callback","Incorrect callback given for operator type " + Std.string(tmp != null ? tmp : little_interpreter_memory_OperatorType.LHS_RHS) + " - `singleSidedOperatorCallback` was given, when `callback` was expected",null,{ fileName : "little/tools/Plugins.hx", lineNumber : 452, className : "little.tools.Plugins", methodName : "registerSign"});
			} else if(info.callback == null) {
				var tmp = info.operatorType;
				throw new haxe_exceptions_ArgumentException("callback","No callback given for operator type " + Std.string(tmp != null ? tmp : little_interpreter_memory_OperatorType.LHS_RHS) + " (`callback` is null)",null,{ fileName : "little/tools/Plugins.hx", lineNumber : 454, className : "little.tools.Plugins", methodName : "registerSign"});
			}
			var callbackFunc;
			if(info.lhsAllowedTypes != null && info.rhsAllowedTypes == null && info.allowedTypeCombos == null) {
				callbackFunc = function(lhs,rhs) {
					var lType = little_tools_Extensions.type(little_interpreter_Interpreter.evaluate(lhs));
					var rType = little_tools_Extensions.type(little_interpreter_Interpreter.evaluate(rhs));
					if(info.lhsAllowedTypes.indexOf(lType) == -1) {
						var callbackFunc = little_Little.runtime;
						var callbackFunc1 = "Cannot preform " + lType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						var callbackFunc2 = callbackFunc1 + (result.indexOf($hxEnums[lhs.__enum__].__constructs__[lhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(lhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([lhs]))[0]) + ") " + symbol + " " + rType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						return callbackFunc.throwError(little_interpreter_InterpTokens.ErrorMessage(callbackFunc2 + (result.indexOf($hxEnums[rhs.__enum__].__constructs__[rhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(rhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([rhs]))[0]) + ") - Left operand cannot be of type " + lType + " (accepted types: " + Std.string(info.lhsAllowedTypes) + ")"));
					}
					return info.callback(lhs,rhs);
				};
			} else if(info.lhsAllowedTypes == null && info.rhsAllowedTypes != null && info.allowedTypeCombos == null) {
				callbackFunc = function(lhs,rhs) {
					var lType = little_tools_Extensions.type(little_interpreter_Interpreter.evaluate(lhs));
					var rType = little_tools_Extensions.type(little_interpreter_Interpreter.evaluate(rhs));
					if(info.rhsAllowedTypes.indexOf(rType) == -1) {
						var callbackFunc = little_Little.runtime;
						var callbackFunc1 = "Cannot preform " + lType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						var callbackFunc2 = callbackFunc1 + (result.indexOf($hxEnums[lhs.__enum__].__constructs__[lhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(lhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([lhs]))[0]) + ") " + symbol + " " + rType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						return callbackFunc.throwError(little_interpreter_InterpTokens.ErrorMessage(callbackFunc2 + (result.indexOf($hxEnums[rhs.__enum__].__constructs__[rhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(rhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([rhs]))[0]) + ") - Right operand cannot be of type " + rType + " (accepted types: " + Std.string(info.rhsAllowedTypes) + ")"));
					}
					return info.callback(lhs,rhs);
				};
			} else if(info.lhsAllowedTypes != null && info.rhsAllowedTypes != null && info.allowedTypeCombos == null) {
				callbackFunc = function(lhs,rhs) {
					var lType = little_tools_Extensions.type(little_interpreter_Interpreter.evaluate(lhs));
					var rType = little_tools_Extensions.type(little_interpreter_Interpreter.evaluate(rhs));
					if(info.rhsAllowedTypes.indexOf(rType) == -1) {
						var callbackFunc = little_Little.runtime;
						var callbackFunc1 = "Cannot preform " + lType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						var callbackFunc2 = callbackFunc1 + (result.indexOf($hxEnums[lhs.__enum__].__constructs__[lhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(lhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([lhs]))[0]) + ") " + symbol + " " + rType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						return callbackFunc.throwError(little_interpreter_InterpTokens.ErrorMessage(callbackFunc2 + (result.indexOf($hxEnums[rhs.__enum__].__constructs__[rhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(rhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([rhs]))[0]) + ") - Right operand cannot be of type " + rType + " (accepted types: " + Std.string(info.rhsAllowedTypes) + ")"));
					}
					if(info.rhsAllowedTypes.indexOf(lType) == -1) {
						var callbackFunc = little_Little.runtime;
						var callbackFunc1 = "Cannot preform " + lType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						var callbackFunc2 = callbackFunc1 + (result.indexOf($hxEnums[lhs.__enum__].__constructs__[lhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(lhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([lhs]))[0]) + ") " + symbol + " " + rType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						return callbackFunc.throwError(little_interpreter_InterpTokens.ErrorMessage(callbackFunc2 + (result.indexOf($hxEnums[rhs.__enum__].__constructs__[rhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(rhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([rhs]))[0]) + ") - Left operand cannot be of type " + lType + " (accepted types: " + Std.string(info.lhsAllowedTypes) + ")"));
					}
					return info.callback(lhs,rhs);
				};
			} else if(info.lhsAllowedTypes != null && info.rhsAllowedTypes == null && info.allowedTypeCombos != null) {
				callbackFunc = function(lhs,rhs) {
					var lType = little_tools_Extensions.type(little_interpreter_Interpreter.evaluate(lhs));
					var rType = little_tools_Extensions.type(little_interpreter_Interpreter.evaluate(rhs));
					if(info.lhsAllowedTypes.indexOf(lType) == -1 && !little_tools_Plugins.containsCombo(info.allowedTypeCombos,lType,rType)) {
						var callbackFunc = little_Little.runtime;
						var callbackFunc1 = "Cannot preform " + lType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						var callbackFunc2 = callbackFunc1 + (result.indexOf($hxEnums[lhs.__enum__].__constructs__[lhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(lhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([lhs]))[0]) + ") " + symbol + " " + rType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						var callbackFunc1 = callbackFunc2 + (result.indexOf($hxEnums[rhs.__enum__].__constructs__[rhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(rhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([rhs]))[0]) + ") - Right operand cannot be of type " + rType + " while left operand is of type " + lType + " (accepted types for left operand: " + Std.string(info.lhsAllowedTypes) + ", accepted type combinations: ";
						var _this = info.allowedTypeCombos;
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var object = _this[i];
							result[i] = "" + object.rhs + " " + symbol + " " + object.lhs;
						}
						return callbackFunc.throwError(little_interpreter_InterpTokens.ErrorMessage(callbackFunc1 + Std.string(result) + ")"));
					}
					return info.callback(lhs,rhs);
				};
			} else if(info.lhsAllowedTypes == null && info.rhsAllowedTypes != null && info.allowedTypeCombos != null) {
				callbackFunc = function(lhs,rhs) {
					var lType = little_tools_Extensions.type(little_interpreter_Interpreter.evaluate(lhs));
					var rType = little_tools_Extensions.type(little_interpreter_Interpreter.evaluate(rhs));
					if(info.rhsAllowedTypes.indexOf(rType) == -1 && !little_tools_Plugins.containsCombo(info.allowedTypeCombos,lType,rType)) {
						var callbackFunc = little_Little.runtime;
						var callbackFunc1 = "Cannot preform " + lType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						var callbackFunc2 = callbackFunc1 + (result.indexOf($hxEnums[lhs.__enum__].__constructs__[lhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(lhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([lhs]))[0]) + ") " + symbol + " " + rType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						var callbackFunc1 = callbackFunc2 + (result.indexOf($hxEnums[rhs.__enum__].__constructs__[rhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(rhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([rhs]))[0]) + ") - Right operand cannot be of type " + rType + " while left operand is of type " + lType + " (accepted types for right operand: " + Std.string(info.rhsAllowedTypes) + ", accepted type combinations: ";
						var _this = info.allowedTypeCombos;
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var object = _this[i];
							result[i] = "" + object.rhs + " " + symbol + " " + object.lhs;
						}
						return callbackFunc.throwError(little_interpreter_InterpTokens.ErrorMessage(callbackFunc1 + Std.string(result) + ")"));
					}
					return info.callback(lhs,rhs);
				};
			} else if(info.lhsAllowedTypes != null && info.rhsAllowedTypes != null && info.allowedTypeCombos != null) {
				callbackFunc = function(lhs,rhs) {
					var lType = little_tools_Extensions.type(little_interpreter_Interpreter.evaluate(lhs));
					var rType = little_tools_Extensions.type(little_interpreter_Interpreter.evaluate(rhs));
					if(info.rhsAllowedTypes.indexOf(rType) == -1 && !little_tools_Plugins.containsCombo(info.allowedTypeCombos,lType,rType)) {
						var callbackFunc = little_Little.runtime;
						var callbackFunc1 = "Cannot preform " + lType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						var callbackFunc2 = callbackFunc1 + (result.indexOf($hxEnums[lhs.__enum__].__constructs__[lhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(lhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([lhs]))[0]) + ") " + symbol + " " + rType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						var callbackFunc1 = callbackFunc2 + (result.indexOf($hxEnums[rhs.__enum__].__constructs__[rhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(rhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([rhs]))[0]) + ") - Right operand cannot be of type " + rType + " (accepted types: " + Std.string(info.rhsAllowedTypes) + ", accepted type combinations: ";
						var _this = info.allowedTypeCombos;
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var object = _this[i];
							result[i] = "" + object.rhs + " " + symbol + " " + object.lhs;
						}
						return callbackFunc.throwError(little_interpreter_InterpTokens.ErrorMessage(callbackFunc1 + Std.string(result) + ")"));
					}
					if(info.rhsAllowedTypes.indexOf(lType) == -1 && !little_tools_Plugins.containsCombo(info.allowedTypeCombos,lType,rType)) {
						var callbackFunc = little_Little.runtime;
						var callbackFunc1 = "Cannot preform " + lType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						var callbackFunc2 = callbackFunc1 + (result.indexOf($hxEnums[lhs.__enum__].__constructs__[lhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(lhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([lhs]))[0]) + ") " + symbol + " " + rType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						var callbackFunc1 = callbackFunc2 + (result.indexOf($hxEnums[rhs.__enum__].__constructs__[rhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(rhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([rhs]))[0]) + ") - Left operand cannot be of type " + lType + " (accepted types: " + Std.string(info.lhsAllowedTypes) + ", accepted type combinations: ";
						var _this = info.allowedTypeCombos;
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var object = _this[i];
							result[i] = "" + object.rhs + " " + symbol + " " + object.lhs;
						}
						return callbackFunc.throwError(little_interpreter_InterpTokens.ErrorMessage(callbackFunc1 + Std.string(result) + ")"));
					}
					return info.callback(lhs,rhs);
				};
			} else {
				callbackFunc = info.callback;
			}
			little_Little.operators.add(symbol,little_interpreter_memory_OperatorType.LHS_RHS,info.priority,callbackFunc);
		} else {
			if(info.singleSidedOperatorCallback == null && info.callback != null) {
				throw new haxe_exceptions_ArgumentException("singleSidedOperatorCallback","Incorrect callback given for operator type " + Std.string(info.operatorType) + " - `callback` was given, when `singleSidedOperatorCallback` was expected",null,{ fileName : "little/tools/Plugins.hx", lineNumber : 526, className : "little.tools.Plugins", methodName : "registerSign"});
			} else if(info.singleSidedOperatorCallback == null) {
				var tmp = info.operatorType;
				throw new haxe_exceptions_ArgumentException("singleSidedOperatorCallback","No callback given for operator type " + Std.string(tmp != null ? tmp : little_interpreter_memory_OperatorType.LHS_RHS) + " (`singleSidedOperatorCallback` is null)",null,{ fileName : "little/tools/Plugins.hx", lineNumber : 528, className : "little.tools.Plugins", methodName : "registerSign"});
			}
			var callbackFunc;
			if(info.operatorType == little_interpreter_memory_OperatorType.LHS_ONLY) {
				callbackFunc = function(lhs) {
					var lType = little_tools_Extensions.type(little_interpreter_Interpreter.evaluate(lhs));
					if(info.lhsAllowedTypes.indexOf(lType) == -1) {
						var callbackFunc = little_Little.runtime;
						var callbackFunc1 = "Cannot perform " + lType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						return callbackFunc.throwError(little_interpreter_InterpTokens.ErrorMessage(callbackFunc1 + (result.indexOf($hxEnums[lhs.__enum__].__constructs__[lhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(lhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([lhs]))[0]) + ")" + symbol + " - Operand cannot be of type " + lType + " (accepted types: " + Std.string(info.lhsAllowedTypes) + ")"));
					}
					return info.singleSidedOperatorCallback(lhs);
				};
			} else {
				callbackFunc = function(rhs) {
					var rType = little_tools_Extensions.type(little_interpreter_Interpreter.evaluate(rhs));
					if(info.rhsAllowedTypes.indexOf(rType) == -1) {
						var callbackFunc = little_Little.runtime;
						var callbackFunc1 = "Cannot perform " + symbol + rType + "(";
						var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						return callbackFunc.throwError(little_interpreter_InterpTokens.ErrorMessage(callbackFunc1 + (result.indexOf($hxEnums[rhs.__enum__].__constructs__[rhs._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(rhs)[0] : Type.enumParameters(little_interpreter_Interpreter.run([rhs]))[0]) + ") - Operand cannot be of type " + rType + " (accepted types: " + Std.string(info.rhsAllowedTypes) + ")"));
					}
					return info.singleSidedOperatorCallback(rhs);
				};
			}
			little_Little.operators.add(symbol,info.operatorType,info.priority,callbackFunc);
		}
	}
	,__class__: little_tools_Plugins
};
var vision_ds_Queue = function() {
	this.length = 0;
};
$hxClasses["vision.ds.Queue"] = vision_ds_Queue;
vision_ds_Queue.__name__ = "vision.ds.Queue";
vision_ds_Queue.prototype = {
	length: null
	,first: null
	,iterator: function() {
		var l = this.first;
		return { hasNext : function() {
			return l != null;
		}, next : function() {
			var k = l;
			l = k.next;
			return k.value;
		}};
	}
	,dequeue: function() {
		var v = this.get_last().value;
		this.get_last().previous.next = null;
		this.length--;
		return v;
	}
	,enqueue: function(value) {
		if(this.first == null) {
			this.first = new vision_ds_QueueCell(value,null,null);
			this.length++;
			return value;
		}
		this.first.previous = new vision_ds_QueueCell(value,this.first,null);
		this.first = this.first.previous;
		this.length++;
		return value;
	}
	,has: function(value) {
		var processed = this.first;
		while(processed.next != null) {
			if(processed.value == value) {
				return true;
			}
			processed = processed.next;
		}
		return false;
	}
	,toString: function() {
		var s = "[";
		var processed = this.first;
		while(processed.next != null) {
			s += "" + Std.string(processed.value) + " -> ";
			processed = processed.next;
		}
		s += "" + Std.string(processed.value) + "]";
		return s;
	}
	,get_last: function() {
		var processed = this.first;
		while(processed.next != null) processed = processed.next;
		return processed;
	}
	,set_last: function(value) {
		var processed = this.first;
		while(processed.next != null) processed = processed.next;
		processed = value;
		return value;
	}
	,__class__: vision_ds_Queue
	,__properties__: {set_last:"set_last",get_last:"get_last"}
};
var little_interpreter_Runtime = function() {
	this.callStack = [];
	this.stdout = new little_interpreter_StdOut();
	this.onFieldDeclared = [];
	this.onConditionCalled = [];
	this.onFunctionCalled = [];
	this.onWriteValue = [];
	this.onErrorThrown = [];
	this.onTokenInterpreted = [];
	this.onLineSplit = [];
	this.onLineChanged = [];
	this.errorThrown = false;
	this.exitCode = 0;
	this.currentToken = null;
	this.line = 0;
};
$hxClasses["little.interpreter.Runtime"] = little_interpreter_Runtime;
little_interpreter_Runtime.__name__ = "little.interpreter.Runtime";
little_interpreter_Runtime.prototype = {
	line: null
	,currentToken: null
	,module: null
	,previousToken: null
	,exitCode: null
	,errorThrown: null
	,errorToken: null
	,onLineChanged: null
	,onLineSplit: null
	,onTokenInterpreted: null
	,onErrorThrown: null
	,onWriteValue: null
	,onFunctionCalled: null
	,onConditionCalled: null
	,onFieldDeclared: null
	,stdout: null
	,callStack: null
	,throwError: function(token,layer) {
		if(layer == null) {
			layer = "Interpreter";
		}
		this.callStack.push(token);
		var mod = this.module;
		var title = "";
		var reason = little_tools_TextTools.replaceLast(little_tools_TextTools.remove(Std.string(token),$hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name).substring(1),")","");
		var content = "" + (little_Little.debug ? layer.toUpperCase() + ": " : "") + "ERROR: Module " + this.module + ", Line " + this.line + ":  " + reason;
		this.stdout.output += "\n" + content;
		this.stdout.stdoutTokens.push(token);
		this.exitCode = little_tools_Layer.getIndexOf(layer);
		this.errorToken = token;
		this.errorThrown = true;
		var _g = 0;
		var _g1 = this.onErrorThrown;
		while(_g < _g1.length) {
			var func = _g1[_g];
			++_g;
			func(mod,this.line,title,reason);
		}
		throw haxe_Exception.thrown("Quitting...");
	}
	,warn: function(token,layer) {
		if(layer == null) {
			layer = "Interpreter";
		}
		this.callStack.push(token);
		var reason = little_tools_TextTools.replaceLast(little_tools_TextTools.remove(Std.string(token),$hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name).substring(1),")","");
		var content = "" + (little_Little.debug ? layer.toUpperCase() + ": " : "") + "WARNING: Module " + this.module + ", Line " + this.line + ":  " + reason;
		this.stdout.output += "\n" + content;
		this.stdout.stdoutTokens.push(token);
	}
	,print: function(item) {
		this.stdout.output += "\n" + (little_Little.debug ? "Interpreter".toUpperCase() + ": " : "") + "Module " + this.module + ", Line " + this.line + ":  " + item;
		this.stdout.stdoutTokens.push(little_interpreter_InterpTokens.Characters(item));
	}
	,broadcast: function(item) {
		this.stdout.output += "\n" + (little_Little.debug ? "BROADCAST: " : "") + item;
		this.stdout.stdoutTokens.push(little_interpreter_InterpTokens.Characters(item));
	}
	,__broadcast: function(item) {
		this.stdout.output += "\n" + (little_Little.debug ? "BROADCAST: " : "") + item;
	}
	,__print: function(item,representativeToken) {
		this.stdout.output += "\n" + (little_Little.debug ? "Interpreter".toUpperCase() + ": " : "") + "Module " + this.module + ", Line " + this.line + ":  " + item;
		this.stdout.stdoutTokens.push(representativeToken);
	}
	,__class__: little_interpreter_Runtime
};
var little_Little = $hx_exports["little"]["Little"] = function() { };
$hxClasses["little.Little"] = little_Little;
little_Little.__name__ = "little.Little";
little_Little.loadModule = function(code,name,debug,runRightBeforeMain) {
	if(runRightBeforeMain == null) {
		runRightBeforeMain = false;
	}
	if(debug == null) {
		debug = false;
	}
	little_Little.runtime.errorThrown = false;
	little_Little.runtime.line = 0;
	little_Little.runtime.module = name;
	if(runRightBeforeMain) {
		little_Little.queue.enqueue(code);
	} else {
		var previous = little_Little.debug;
		if(debug != null) {
			little_Little.debug = debug;
		}
		if(!little_tools_PrepareRun.prepared) {
			little_tools_PrepareRun.addTypes();
			little_tools_PrepareRun.addSigns();
			little_tools_PrepareRun.addFunctions();
			little_tools_PrepareRun.addConditions();
			little_tools_PrepareRun.addProps();
		}
		little_interpreter_Interpreter.run(little_interpreter_Interpreter.convert.apply(null,little_parser_Parser.parse(little_lexer_Lexer.lex(code))));
		if(debug != null) {
			little_Little.debug = previous;
		}
	}
};
little_Little.run = function(code,debug) {
	try {
		var previous = little_Little.debug;
		if(debug != null) {
			little_Little.debug = debug;
		}
		if(!little_tools_PrepareRun.prepared) {
			little_tools_PrepareRun.addTypes();
			little_tools_PrepareRun.addSigns();
			little_tools_PrepareRun.addFunctions();
			little_tools_PrepareRun.addConditions();
			little_tools_PrepareRun.addProps();
		}
		little_Little.runtime.module = little_Little.keywords.MAIN_MODULE_NAME;
		little_Little.queue.enqueue(code);
		var item = little_Little.queue.iterator();
		while(item.hasNext()) {
			var item1 = item.next();
			little_interpreter_Interpreter.run(little_interpreter_Interpreter.convert.apply(null,little_parser_Parser.parse(little_lexer_Lexer.lex(item1))));
		}
		if(debug != null) {
			little_Little.debug = previous;
		}
	} catch( _g ) {
		var e = haxe_Exception.caught(_g);
		if(e.get_message() == "Quitting...") {
			haxe_Log.trace(e.get_message(),{ fileName : "little/Little.hx", lineNumber : 133, className : "little.Little", methodName : "run"});
		} else {
			haxe_Log.trace(e.details(),{ fileName : "little/Little.hx", lineNumber : 133, className : "little.Little", methodName : "run"});
		}
	}
};
little_Little.reset = function() {
	little_Little.runtime = new little_interpreter_Runtime();
	little_Little.operators.lhsOnly.h = Object.create(null);
	little_Little.operators.rhsOnly.h = Object.create(null);
	little_Little.operators.standard.h = Object.create(null);
	little_Little.operators.priority.h = { };
	little_Little.memory.reset();
	little_Little.queue = new vision_ds_Queue();
};
var little_interpreter_ByteCode = function() { };
$hxClasses["little.interpreter.ByteCode"] = little_interpreter_ByteCode;
little_interpreter_ByteCode.__name__ = "little.interpreter.ByteCode";
little_interpreter_ByteCode.compile = function() {
	var $l=arguments.length;
	var tokens = new Array($l>0?$l-0:0);
	for(var $i=0;$i<$l;++$i){tokens[$i-0]=arguments[$i];}
	return haxe_Serializer.run(tokens);
};
little_interpreter_ByteCode.decompile = function(bytecode) {
	return haxe_Unserializer.run(bytecode);
};
var little_interpreter_Interpreter = function() { };
$hxClasses["little.interpreter.Interpreter"] = little_interpreter_Interpreter;
little_interpreter_Interpreter.__name__ = "little.interpreter.Interpreter";
little_interpreter_Interpreter.convert = function() {
	var $l=arguments.length;
	var pre = new Array($l>0?$l-0:0);
	for(var $i=0;$i<$l;++$i){pre[$i-0]=arguments[$i];}
	if(pre.length == 1 && pre[0] == null) {
		return [null];
	}
	var post = [];
	var _g_current = 0;
	var _g_args = pre;
	while(_g_current < _g_args.length) {
		var item = _g_args[_g_current++];
		var tmp;
		switch(item._hx_index) {
		case 0:
			var line = item.line;
			tmp = little_interpreter_InterpTokens.SetLine(line);
			break;
		case 1:
			tmp = little_interpreter_InterpTokens.SplitLine;
			break;
		case 2:
			var name = item.name;
			var type = item.type;
			var doc = item.doc;
			tmp = little_interpreter_InterpTokens.VariableDeclaration(little_interpreter_Interpreter.convert(name)[0],type == null ? little_tools_Extensions.asTokenPath(little_Little.keywords.TYPE_DYNAMIC) : little_interpreter_Interpreter.convert(type)[0],doc == null ? little_interpreter_InterpTokens.Characters("") : little_interpreter_Interpreter.convert(doc)[0]);
			break;
		case 3:
			var name1 = item.name;
			var params = item.params;
			var type1 = item.type;
			var doc1 = item.doc;
			tmp = little_interpreter_InterpTokens.FunctionDeclaration(little_interpreter_Interpreter.convert(name1)[0],little_interpreter_Interpreter.convert(params)[0],type1 == null ? little_tools_Extensions.asTokenPath(little_Little.keywords.TYPE_DYNAMIC) : little_interpreter_Interpreter.convert(type1)[0],doc1 == null ? little_interpreter_InterpTokens.Characters("") : little_interpreter_Interpreter.convert(doc1)[0]);
			break;
		case 4:
			var name2 = item.name;
			var exp = item.exp;
			var body = item.body;
			tmp = little_interpreter_InterpTokens.ConditionCall(little_interpreter_Interpreter.convert(name2)[0],little_interpreter_Interpreter.convert(exp)[0],little_interpreter_Interpreter.convert(body)[0]);
			break;
		case 5:
			var name3 = item.name;
			tmp = null;
			break;
		case 6:
			var assignees = item.assignees;
			var value = item.value;
			tmp = little_interpreter_InterpTokens.Write(little_interpreter_Interpreter.convert.apply(null,assignees),little_interpreter_Interpreter.convert(value)[0]);
			break;
		case 7:
			var word = item.word;
			tmp = little_interpreter_InterpTokens.Identifier(word);
			break;
		case 8:
			var value1 = item.value;
			var type2 = item.type;
			tmp = little_interpreter_InterpTokens.TypeCast(little_interpreter_Interpreter.convert(value1)[0],little_interpreter_Interpreter.convert(type2)[0]);
			break;
		case 9:
			var name4 = item.name;
			var params1 = item.params;
			tmp = little_interpreter_InterpTokens.FunctionCall(little_interpreter_Interpreter.convert(name4)[0],little_interpreter_Interpreter.convert(params1)[0]);
			break;
		case 10:
			var value2 = item.value;
			var type3 = item.type;
			tmp = little_interpreter_InterpTokens.FunctionReturn(little_interpreter_Interpreter.convert(value2)[0],type3 == null ? little_tools_Extensions.asTokenPath(little_Little.keywords.TYPE_DYNAMIC) : little_interpreter_Interpreter.convert(type3)[0]);
			break;
		case 11:
			var parts = item.parts;
			var type4 = item.type;
			tmp = little_interpreter_InterpTokens.Expression(little_interpreter_Interpreter.convert.apply(null,parts),type4 == null ? little_tools_Extensions.asTokenPath(little_Little.keywords.TYPE_DYNAMIC) : little_interpreter_Interpreter.convert(type4)[0]);
			break;
		case 12:
			var body1 = item.body;
			var type5 = item.type;
			tmp = little_interpreter_InterpTokens.Block(little_interpreter_Interpreter.convert.apply(null,body1),type5 == null ? little_tools_Extensions.asTokenPath(little_Little.keywords.TYPE_DYNAMIC) : little_interpreter_Interpreter.convert(type5)[0]);
			break;
		case 13:
			var parts1 = item.parts;
			tmp = little_interpreter_InterpTokens.PartArray(little_interpreter_Interpreter.convert.apply(null,parts1));
			break;
		case 14:
			var name5 = item.name;
			var property = item.property;
			tmp = little_interpreter_InterpTokens.PropertyAccess(little_interpreter_Interpreter.convert(name5)[0],little_interpreter_Interpreter.convert(property)[0]);
			break;
		case 15:
			var sign = item.sign;
			tmp = little_interpreter_InterpTokens.Sign(sign);
			break;
		case 16:
			var num = item.num;
			tmp = Math.abs(parseFloat(num)) > 2147483647 ? little_interpreter_InterpTokens.Decimal(parseFloat(num)) : little_interpreter_InterpTokens.Number(Std.parseInt(num));
			break;
		case 17:
			var num1 = item.num;
			tmp = little_interpreter_InterpTokens.Decimal(parseFloat(num1));
			break;
		case 18:
			var string = item.string;
			tmp = little_interpreter_InterpTokens.Characters(string);
			break;
		case 19:
			var doc2 = item.doc;
			tmp = little_interpreter_InterpTokens.Characters("\"\"" + doc2 + "\"\"");
			break;
		case 20:
			var msg = item.msg;
			tmp = little_interpreter_InterpTokens.ErrorMessage(msg);
			break;
		case 21:
			tmp = little_interpreter_InterpTokens.NullValue;
			break;
		case 22:
			tmp = little_interpreter_InterpTokens.TrueValue;
			break;
		case 23:
			tmp = little_interpreter_InterpTokens.FalseValue;
			break;
		case 24:
			var name6 = item.name;
			var params2 = item.params;
			throw haxe_Exception.thrown("Custom tokens cannot remain when transitioning from Parser to Interpreter tokens (found " + Std.string(item) + ")");
		}
		post.push(tmp);
	}
	return post;
};
little_interpreter_Interpreter.error = function(message,layer) {
	if(layer == null) {
		layer = "Interpreter";
	}
	little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage(message),layer);
	throw haxe_Exception.thrown("");
};
little_interpreter_Interpreter.warn = function(message,layer) {
	if(layer == null) {
		layer = "Interpreter";
	}
	little_Little.runtime.warn(little_interpreter_InterpTokens.ErrorMessage(message),layer);
	return little_interpreter_InterpTokens.ErrorMessage(message);
};
little_interpreter_Interpreter.assert = function(token,isType,errorMessage) {
	var _this = [isType].slice();
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var x = _this[i];
		result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
	}
	if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) == -1) {
		little_Little.runtime.throwError(errorMessage != null ? little_interpreter_InterpTokens.ErrorMessage(errorMessage) : little_interpreter_InterpTokens.ErrorMessage("Assertion failed, token " + Std.string(token) + " is not of type " + Std.string(isType)),"Interpreter");
		return little_interpreter_InterpTokens.NullValue;
	}
	return token;
};
little_interpreter_Interpreter.setLine = function(l) {
	var o = little_Little.runtime.line;
	little_Little.runtime.line = l;
	var _g = 0;
	var _g1 = little_Little.runtime.onLineChanged;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(o);
	}
};
little_interpreter_Interpreter.splitLine = function() {
	var _g = 0;
	var _g1 = little_Little.runtime.onLineSplit;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
little_interpreter_Interpreter.declareVariable = function(name,type,doc) {
	var path = little_tools_Extensions.asStringPath(name);
	var tmp = little_Little.memory;
	var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var x = _this[i];
		result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
	}
	var tmp1 = result.indexOf($hxEnums[type.__enum__].__constructs__[type._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(type)[0] : Type.enumParameters(little_interpreter_Interpreter.run([type]))[0];
	var tmp2;
	if(doc != null) {
		var token = little_interpreter_Interpreter.evaluate(doc);
		var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		tmp2 = result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(token)[0] : Type.enumParameters(little_interpreter_Interpreter.run([token]))[0];
	} else {
		tmp2 = "";
	}
	tmp.write(path,little_interpreter_InterpTokens.NullValue,tmp1,tmp2);
	var _g = 0;
	var _g1 = little_Little.runtime.onFieldDeclared;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(little_tools_Extensions.asJoinedStringPath(name),little_interpreter_FieldDeclarationType.VARIABLE);
	}
};
little_interpreter_Interpreter.declareFunction = function(name,params,doc) {
	var path = little_tools_Extensions.asStringPath(name);
	var paramMap = new OrderedStringMapImpl();
	var array = Type.enumParameters(params)[0];
	var _g = 0;
	while(_g < array.length) {
		var entry = array[_g];
		++_g;
		var _this = [little_tools_InterpTokensSimple.SPLIT_LINE,little_tools_InterpTokensSimple.SET_LINE].slice();
		var result = new Array(_this.length);
		var _g1 = 0;
		var _g2 = _this.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		if(result.indexOf($hxEnums[entry.__enum__].__constructs__[entry._hx_index]._hx_name.toLowerCase()) != -1) {
			continue;
		}
		switch(entry._hx_index) {
		case 2:
			var _g3 = entry.name;
			var _g4 = entry.type;
			var _g5 = entry.doc;
			if(_g4 == null) {
				var name1 = _g3;
				var _this1 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
				var result1 = new Array(_this1.length);
				var _g6 = 0;
				var _g7 = _this1.length;
				while(_g6 < _g7) {
					var i1 = _g6++;
					var x1 = _this1[i1];
					result1[i1] = little_tools_TextTools.remove($hxEnums[x1.__enum__].__constructs__[x1._hx_index]._hx_name,"_").toLowerCase();
				}
				var k = result1.indexOf($hxEnums[name1.__enum__].__constructs__[name1._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name1)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name1]))[0];
				var v = little_interpreter_InterpTokens.TypeCast(little_interpreter_InterpTokens.NullValue,little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC));
				paramMap.set(k,v);
			} else {
				var type = _g4;
				var name2 = _g3;
				var _this2 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
				var result2 = new Array(_this2.length);
				var _g8 = 0;
				var _g9 = _this2.length;
				while(_g8 < _g9) {
					var i2 = _g8++;
					var x2 = _this2[i2];
					result2[i2] = little_tools_TextTools.remove($hxEnums[x2.__enum__].__constructs__[x2._hx_index]._hx_name,"_").toLowerCase();
				}
				var v1 = little_interpreter_InterpTokens.TypeCast(little_interpreter_InterpTokens.NullValue,type);
				paramMap.set(result2.indexOf($hxEnums[name2.__enum__].__constructs__[name2._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name2)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name2]))[0],v1);
			}
			break;
		case 11:
			var assignees = entry.assignees;
			var value = entry.value;
			var _g10 = assignees[0];
			if(_g10._hx_index == 2) {
				var _g11 = _g10.name;
				var _g12 = _g10.type;
				var _g13 = _g10.doc;
				if(_g12 == null) {
					var name3 = _g11;
					var _this3 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
					var result3 = new Array(_this3.length);
					var _g14 = 0;
					var _g15 = _this3.length;
					while(_g14 < _g15) {
						var i3 = _g14++;
						var x3 = _this3[i3];
						result3[i3] = little_tools_TextTools.remove($hxEnums[x3.__enum__].__constructs__[x3._hx_index]._hx_name,"_").toLowerCase();
					}
					var k1 = result3.indexOf($hxEnums[name3.__enum__].__constructs__[name3._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name3)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name3]))[0];
					var v2 = little_interpreter_InterpTokens.TypeCast(value,little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC));
					paramMap.set(k1,v2);
				} else {
					var type1 = _g12;
					var name4 = _g11;
					var _this4 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
					var result4 = new Array(_this4.length);
					var _g16 = 0;
					var _g17 = _this4.length;
					while(_g16 < _g17) {
						var i4 = _g16++;
						var x4 = _this4[i4];
						result4[i4] = little_tools_TextTools.remove($hxEnums[x4.__enum__].__constructs__[x4._hx_index]._hx_name,"_").toLowerCase();
					}
					var v3 = little_interpreter_InterpTokens.TypeCast(value,type1);
					paramMap.set(result4.indexOf($hxEnums[name4.__enum__].__constructs__[name4._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(name4)[0] : Type.enumParameters(little_interpreter_Interpreter.run([name4]))[0],v3);
				}
			}
			break;
		default:
		}
	}
	var tmp = little_Little.memory;
	var tmp1 = little_interpreter_InterpTokens.FunctionCode(paramMap,little_interpreter_InterpTokens.Block([],little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC)));
	var tmp2 = little_Little.keywords.TYPE_FUNCTION;
	var tmp3;
	if(doc != null) {
		var token = little_interpreter_Interpreter.evaluate(doc);
		var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		tmp3 = result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(token)[0] : Type.enumParameters(little_interpreter_Interpreter.run([token]))[0];
	} else {
		tmp3 = "";
	}
	tmp.write(path,tmp1,tmp2,tmp3);
	var _g = 0;
	var _g1 = little_Little.runtime.onFieldDeclared;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(little_tools_Extensions.asJoinedStringPath(name),little_interpreter_FieldDeclarationType.FUNCTION);
	}
};
little_interpreter_Interpreter.condition = function(name,pattern,body) {
	var conditionToken = ($_=little_Little.memory,$_.read.apply($_,little_tools_Extensions.asStringPath(name)));
	little_interpreter_Interpreter.assert(conditionToken.objectValue,little_tools_InterpTokensSimple.CONDITION_CODE,"" + Std.string(little_tools_Extensions.asStringPath(name)) + " is not a condition.");
	var patterns = Type.enumParameters(conditionToken.objectValue)[0];
	var givenPattern = Type.enumParameters(pattern)[0];
	var fit = null;
	fit = function(given,pattern,currentlyFits) {
		if(currentlyFits == null) {
			currentlyFits = true;
		}
		var _g = 0;
		var _g1 = given.length;
		while(_g < _g1) {
			var i = _g++;
			if(pattern[i] == null) {
				continue;
			}
			if(Type.enumEq(given[i],pattern[i])) {
				continue;
			}
			var e = given[i];
			var e1 = pattern[i];
			if($hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name != $hxEnums[e1.__enum__].__constructs__[e1._hx_index]._hx_name) {
				return false;
			}
			var _g2 = given[i];
			switch(_g2._hx_index) {
			case 0:
				var _g3 = _g2.line;
				if(Type.enumParameters(pattern[i])[0] != null) {
					return false;
				}
				break;
			case 2:
				var _g4 = _g2.name;
				var _g5 = _g2.type;
				var _g6 = _g2.doc;
				currentlyFits = currentlyFits && fit(Type.enumParameters(given[i]),Type.enumParameters(pattern[i]),currentlyFits);
				break;
			case 3:
				var _g7 = _g2.name;
				var _g8 = _g2.params;
				var _g9 = _g2.type;
				var _g10 = _g2.doc;
				currentlyFits = currentlyFits && fit(Type.enumParameters(given[i]),Type.enumParameters(pattern[i]),currentlyFits);
				break;
			case 4:
				var _g11 = _g2.name;
				var _g12 = _g2.conditionType;
				var _g13 = _g2.doc;
				currentlyFits = currentlyFits && fit(Type.enumParameters(given[i]),Type.enumParameters(pattern[i]),currentlyFits);
				break;
			case 5:
				var _g14 = _g2.name;
				var _g15 = _g2.doc;
				currentlyFits = currentlyFits && fit(Type.enumParameters(given[i]),Type.enumParameters(pattern[i]),currentlyFits);
				break;
			case 6:
				var _g16 = _g2.callers;
				return false;
			case 7:
				var _g17 = _g2.name;
				var _g18 = _g2.exp;
				var _g19 = _g2.body;
				currentlyFits = currentlyFits && fit(Type.enumParameters(given[i]),Type.enumParameters(pattern[i]),currentlyFits);
				break;
			case 8:
				var _g20 = _g2.requiredParams;
				var _g21 = _g2.body;
				return false;
			case 9:
				var _g22 = _g2.name;
				var _g23 = _g2.params;
				currentlyFits = currentlyFits && fit(Type.enumParameters(given[i]),Type.enumParameters(pattern[i]),currentlyFits);
				break;
			case 10:
				var _g24 = _g2.value;
				var _g25 = _g2.type;
				currentlyFits = currentlyFits && fit(Type.enumParameters(given[i]),Type.enumParameters(pattern[i]),currentlyFits);
				break;
			case 11:
				var assignees = _g2.assignees;
				var value = _g2.value;
				var patternAssignees = Type.enumParameters(pattern[i])[0];
				if(patternAssignees != null) {
					currentlyFits = currentlyFits && fit(assignees,patternAssignees,currentlyFits);
				}
				if(Type.enumParameters(pattern[i])[1] != null) {
					currentlyFits = currentlyFits && fit(Type.enumParameters(value),Type.enumParameters(pattern[i])[1].getParameters(),currentlyFits);
				}
				break;
			case 12:
				var _g26 = _g2.value;
				var _g27 = _g2.type;
				currentlyFits = currentlyFits && fit(Type.enumParameters(given[i]),Type.enumParameters(pattern[i]),currentlyFits);
				break;
			case 13:
				var parts = _g2.parts;
				var type = _g2.type;
				var patternParts = Type.enumParameters(pattern[i])[0].copy();
				if(patternParts != null) {
					currentlyFits = currentlyFits && fit(parts,patternParts,currentlyFits);
				}
				if(Type.enumParameters(pattern[i])[1] != null) {
					currentlyFits = currentlyFits && fit(Type.enumParameters(type),Type.enumParameters(pattern[i])[1].getParameters(),currentlyFits);
				}
				break;
			case 14:
				var parts1 = _g2.body;
				var type1 = _g2.type;
				var patternParts1 = Type.enumParameters(pattern[i])[0].copy();
				if(patternParts1 != null) {
					currentlyFits = currentlyFits && fit(parts1,patternParts1,currentlyFits);
				}
				if(Type.enumParameters(pattern[i])[1] != null) {
					currentlyFits = currentlyFits && fit(Type.enumParameters(type1),Type.enumParameters(pattern[i])[1].getParameters(),currentlyFits);
				}
				break;
			case 15:
				var parts2 = _g2.parts;
				var patternParts2 = Type.enumParameters(pattern[i])[0];
				if(patternParts2 != null) {
					currentlyFits = currentlyFits && fit(parts2,patternParts2,currentlyFits);
				}
				break;
			case 16:
				var name = _g2.name;
				var property = _g2.property;
				currentlyFits = currentlyFits && fit(Type.enumParameters(given[i]),Type.enumParameters(pattern[i]),currentlyFits);
				break;
			case 17:
				var _g28 = _g2.num;
				if(Type.enumParameters(pattern[i])[0] != null) {
					return false;
				}
				break;
			case 18:
				var _g29 = _g2.num;
				if(Type.enumParameters(pattern[i])[0] != null) {
					return false;
				}
				break;
			case 19:
				var _g30 = _g2.string;
				if(Type.enumParameters(pattern[i])[0] != null) {
					return false;
				}
				break;
			case 20:
				var _g31 = _g2.doc;
				if(Type.enumParameters(pattern[i])[0] != null) {
					return false;
				}
				break;
			case 22:
				var _g32 = _g2.sign;
				if(Type.enumParameters(pattern[i])[0] != null) {
					return false;
				}
				break;
			case 26:
				var _g33 = _g2.word;
				if(Type.enumParameters(pattern[i])[0] != null) {
					return false;
				}
				break;
			case 27:
				var props = _g2.props;
				var typeName = _g2.typeName;
				return false;
			case 28:
				var _g34 = _g2.msg;
				if(Type.enumParameters(pattern[i])[0] != null) {
					return false;
				}
				break;
			default:
				continue;
			}
			if(!currentlyFits) {
				return false;
			}
		}
		return currentlyFits;
	};
	var patternString = little_tools_PrettyPrinter.stringifyInterpreter(null,pattern);
	var bodyString = little_tools_PrettyPrinter.stringifyInterpreter(Type.enumParameters(body)[0]);
	var map = patterns;
	var _g_map = map;
	var _g_keys = map.keys();
	while(_g_keys.hasNext()) {
		var key = _g_keys.next();
		var _g_value = _g_map.get(key);
		var _g_key = key;
		var _pattern = _g_key;
		var caller = _g_value;
		if(_pattern == null || fit(givenPattern,_pattern)) {
			var conditionRunner = Type.enumParameters(caller)[0];
			var params = [little_interpreter_InterpTokens.Write([little_interpreter_InterpTokens.VariableDeclaration(little_interpreter_InterpTokens.Identifier(little_Little.keywords.CONDITION_PATTERN_PARAMETER_NAME),little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_STRING),null)],little_interpreter_InterpTokens.Characters(patternString)),little_interpreter_InterpTokens.Write([little_interpreter_InterpTokens.VariableDeclaration(little_interpreter_InterpTokens.Identifier(little_Little.keywords.CONDITION_BODY_PARAMETER_NAME),little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_STRING),null)],little_interpreter_InterpTokens.Characters(bodyString))];
			var _g = 0;
			var _g1 = little_Little.runtime.onConditionCalled;
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(little_tools_Extensions.asJoinedStringPath(name),givenPattern,body);
			}
			return little_interpreter_Interpreter.run(params.concat(conditionRunner),true);
		}
	}
	var tmp = "Pattern " + patternString + " is not supported in condition " + Std.string(little_tools_Extensions.asStringPath(name)) + " (patterns (`*` means any value): \n\t(";
	var _g = [];
	var pattern = patterns.keys();
	while(pattern.hasNext()) {
		var pattern1 = pattern.next();
		_g.push(pattern1);
	}
	var _this = _g;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = little_tools_TextTools.replace(little_tools_PrettyPrinter.stringifyInterpreter(_this[i]),"null","*");
	}
	return little_interpreter_Interpreter.error(tmp + result.join("),\n\t(") + ")\n)");
};
little_interpreter_Interpreter.write = function(assignees,value) {
	var vars = [];
	var funcs = [];
	var containsFunction = false;
	var containsVariable = false;
	var _g = 0;
	while(_g < assignees.length) {
		var assignee = assignees[_g];
		++_g;
		switch(assignee._hx_index) {
		case 2:
			var name = assignee.name;
			var type = assignee.type;
			var doc = assignee.doc;
			little_interpreter_Interpreter.declareVariable(name,type,doc);
			vars.push(name);
			containsVariable = true;
			break;
		case 3:
			var name1 = assignee.name;
			var params = assignee.params;
			var type1 = assignee.type;
			var doc1 = assignee.doc;
			little_interpreter_Interpreter.declareFunction(name1,params,doc1);
			funcs.push(name1);
			containsFunction = true;
			break;
		case 4:
			var name2 = assignee.name;
			var ct = assignee.conditionType;
			var doc2 = assignee.doc;
			break;
		default:
			vars.push(assignee);
			containsVariable = true;
		}
	}
	if(containsFunction) {
		var result = new Array(funcs.length);
		var _g = 0;
		var _g1 = funcs.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = little_tools_Extensions.asStringPath(funcs[i]);
		}
		var paths = result;
		var _g = 0;
		while(_g < paths.length) {
			var path = paths[_g];
			++_g;
			var func = ($_=little_Little.memory,$_.read.apply($_,path)).objectValue;
			little_Little.memory.set(path,little_interpreter_InterpTokens.FunctionCode(Type.enumParameters(func)[0],value),little_Little.keywords.TYPE_FUNCTION,"");
		}
	}
	if(containsVariable) {
		var result = new Array(vars.length);
		var _g = 0;
		var _g1 = vars.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = little_tools_Extensions.asStringPath(vars[i]);
		}
		var paths = result;
		var evaluated = little_interpreter_Interpreter.evaluate(value);
		var _g = 0;
		while(_g < paths.length) {
			var path = paths[_g];
			++_g;
			var tmp = little_Little.memory;
			var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.PROPERTY_ACCESS].slice();
			var result = new Array(_this.length);
			var _g1 = 0;
			var _g2 = _this.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var x = _this[i];
				result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			tmp.set(path,result.indexOf($hxEnums[value.__enum__].__constructs__[value._hx_index]._hx_name.toLowerCase()) != -1 ? value : evaluated,little_tools_Extensions.type(evaluated),"");
		}
	}
	var _g = 0;
	var _g1 = little_Little.runtime.onWriteValue.slice();
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		var result = new Array(vars.length);
		var _g2 = 0;
		var _g3 = vars.length;
		while(_g2 < _g3) {
			var i = _g2++;
			var x = vars[i];
			var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
			var result1 = new Array(_this.length);
			var _g4 = 0;
			var _g5 = _this.length;
			while(_g4 < _g5) {
				var i1 = _g4++;
				var x1 = _this[i1];
				result1[i1] = little_tools_TextTools.remove($hxEnums[x1.__enum__].__constructs__[x1._hx_index]._hx_name,"_").toLowerCase();
			}
			result[i] = result1.indexOf($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(x)[0] : Type.enumParameters(little_interpreter_Interpreter.run([x]))[0];
		}
		var tmp = result;
		var result2 = new Array(funcs.length);
		var _g6 = 0;
		var _g7 = funcs.length;
		while(_g6 < _g7) {
			var i2 = _g6++;
			var x2 = funcs[i2];
			var _this1 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
			var result3 = new Array(_this1.length);
			var _g8 = 0;
			var _g9 = _this1.length;
			while(_g8 < _g9) {
				var i3 = _g8++;
				var x3 = _this1[i3];
				result3[i3] = little_tools_TextTools.remove($hxEnums[x3.__enum__].__constructs__[x3._hx_index]._hx_name,"_").toLowerCase();
			}
			result2[i2] = result3.indexOf($hxEnums[x2.__enum__].__constructs__[x2._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(x2)[0] : Type.enumParameters(little_interpreter_Interpreter.run([x2]))[0];
		}
		listener(tmp.concat(result2));
	}
	return value;
};
little_interpreter_Interpreter.call = function(name,params) {
	var functionCode = little_interpreter_Interpreter.evaluate(name);
	var functionName = little_tools_Extensions.asJoinedStringPath(name);
	var processedParams = [];
	var current = [];
	var _g = 0;
	var _g1 = Type.enumParameters(params)[0];
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		switch(p._hx_index) {
		case 0:
			var l = p.line;
			little_interpreter_Interpreter.setLine(l);
			break;
		case 1:
			processedParams.push(little_interpreter_Interpreter.calculate(current));
			current = [];
			break;
		default:
			current.push(p);
		}
	}
	if(current.length > 0) {
		processedParams.push(little_interpreter_Interpreter.calculate(current));
	}
	if(functionCode._hx_index == 8) {
		var requiredParams = functionCode.requiredParams;
		var body = functionCode.body;
		var given = processedParams;
		var resulting = [];
		var attachment = [];
		var _g = requiredParams.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var typeCast = _g1.value;
			var name = key;
			var value = little_interpreter_InterpTokens.NullValue;
			var type = little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_DYNAMIC);
			if(typeCast._hx_index == 12) {
				var _g2 = typeCast.value;
				var _g3 = typeCast.type;
				if(_g2._hx_index == 23) {
					var t = _g3;
					type = t;
				} else if(Type.enumParameters(_g3)[0] == little_Little.keywords.TYPE_DYNAMIC == true) {
					var v = _g2;
					value = v;
				} else {
					var v1 = _g2;
					var t1 = _g3;
					type = t1;
					value = v1;
				}
			}
			if(processedParams.length > 0) {
				value = processedParams.shift();
			}
			resulting.push(value);
			attachment.push(little_interpreter_InterpTokens.Write([little_interpreter_InterpTokens.VariableDeclaration(little_interpreter_InterpTokens.Identifier(name),type,null)],value));
		}
		var _g = 0;
		var _g1 = little_Little.runtime.onFunctionCalled;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(functionName,resulting);
		}
		return little_interpreter_Interpreter.run(attachment.concat(Type.enumParameters(body)[0]));
	} else {
		return null;
	}
};
little_interpreter_Interpreter.read = function(name) {
	return ($_=little_Little.memory,$_.read.apply($_,little_tools_Extensions.asStringPath(name))).objectValue;
};
little_interpreter_Interpreter.typeCast = function(value,type) {
	var _this = [little_tools_InterpTokensSimple.NUMBER].slice();
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var x = _this[i];
		result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
	}
	if(result.indexOf($hxEnums[value.__enum__].__constructs__[value._hx_index]._hx_name.toLowerCase()) != -1 && Type.enumParameters(type)[0] == little_Little.keywords.TYPE_FLOAT) {
		return little_interpreter_InterpTokens.Decimal(Type.enumParameters(value)[0]);
	}
	var _this = [little_tools_InterpTokensSimple.DECIMAL].slice();
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var x = _this[i];
		result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
	}
	if(result.indexOf($hxEnums[value.__enum__].__constructs__[value._hx_index]._hx_name.toLowerCase()) != -1 && Type.enumParameters(type)[0] == little_Little.keywords.TYPE_INT) {
		return little_interpreter_InterpTokens.Number(Type.enumParameters(value)[0] | 0);
	}
	var _this = [little_tools_InterpTokensSimple.NUMBER,little_tools_InterpTokensSimple.DECIMAL].slice();
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var x = _this[i];
		result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
	}
	if(result.indexOf($hxEnums[value.__enum__].__constructs__[value._hx_index]._hx_name.toLowerCase()) != -1 && Type.enumParameters(type)[0] == little_Little.keywords.TYPE_STRING) {
		return little_interpreter_InterpTokens.Characters(Std.string(Type.enumParameters(value)[0]));
	}
	var _this = [little_tools_InterpTokensSimple.TRUE_VALUE,little_tools_InterpTokensSimple.FALSE_VALUE,little_tools_InterpTokensSimple.NULL_VALUE].slice();
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var x = _this[i];
		result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
	}
	if(result.indexOf($hxEnums[value.__enum__].__constructs__[value._hx_index]._hx_name.toLowerCase()) != -1 && Type.enumParameters(type)[0] == little_Little.keywords.TYPE_STRING) {
		var tmp;
		var _this = [little_tools_InterpTokensSimple.TRUE_VALUE].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		if(result.indexOf($hxEnums[value.__enum__].__constructs__[value._hx_index]._hx_name.toLowerCase()) != -1) {
			tmp = little_Little.keywords.TRUE_VALUE;
		} else {
			var _this = [little_tools_InterpTokensSimple.FALSE_VALUE].slice();
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				var x = _this[i];
				result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			tmp = result.indexOf($hxEnums[value.__enum__].__constructs__[value._hx_index]._hx_name.toLowerCase()) != -1 ? little_Little.keywords.FALSE_VALUE : little_Little.keywords.NULL_VALUE;
		}
		return little_interpreter_InterpTokens.Characters(tmp);
	}
	return value;
};
little_interpreter_Interpreter.run = function(body,propagateReturns) {
	if(propagateReturns == null) {
		propagateReturns = false;
	}
	var returnVal = null;
	little_Little.memory.referrer.pushScope();
	var i = 0;
	while(i < body.length) {
		var token = body[i];
		if(token == null) {
			++i;
			continue;
		}
		little_Little.runtime.currentToken = token;
		switch(token._hx_index) {
		case 0:
			var line = token.line;
			little_interpreter_Interpreter.setLine(line);
			break;
		case 1:
			little_interpreter_Interpreter.splitLine();
			break;
		case 2:
			var name = token.name;
			var type = token.type;
			var doc = token.doc;
			var _this = [little_tools_InterpTokensSimple.BLOCK].slice();
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i1 = _g++;
				var x = _this[i1];
				result[i1] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			var tmp = result.indexOf($hxEnums[name.__enum__].__constructs__[name._hx_index]._hx_name.toLowerCase()) != -1 ? little_interpreter_Interpreter.evaluate(name) : name;
			var _this1 = [little_tools_InterpTokensSimple.BLOCK].slice();
			var result1 = new Array(_this1.length);
			var _g2 = 0;
			var _g3 = _this1.length;
			while(_g2 < _g3) {
				var i2 = _g2++;
				var x1 = _this1[i2];
				result1[i2] = little_tools_TextTools.remove($hxEnums[x1.__enum__].__constructs__[x1._hx_index]._hx_name,"_").toLowerCase();
			}
			little_interpreter_Interpreter.declareVariable(tmp,result1.indexOf($hxEnums[type.__enum__].__constructs__[type._hx_index]._hx_name.toLowerCase()) != -1 ? little_interpreter_Interpreter.evaluate(type) : type,doc != null ? little_interpreter_Interpreter.evaluate(doc) : little_interpreter_InterpTokens.Characters(""));
			returnVal = little_interpreter_InterpTokens.NullValue;
			break;
		case 3:
			var name1 = token.name;
			var params = token.params;
			var type1 = token.type;
			var doc1 = token.doc;
			var _this2 = [little_tools_InterpTokensSimple.BLOCK].slice();
			var result2 = new Array(_this2.length);
			var _g4 = 0;
			var _g5 = _this2.length;
			while(_g4 < _g5) {
				var i3 = _g4++;
				var x2 = _this2[i3];
				result2[i3] = little_tools_TextTools.remove($hxEnums[x2.__enum__].__constructs__[x2._hx_index]._hx_name,"_").toLowerCase();
			}
			little_interpreter_Interpreter.declareFunction(result2.indexOf($hxEnums[name1.__enum__].__constructs__[name1._hx_index]._hx_name.toLowerCase()) != -1 ? little_interpreter_Interpreter.evaluate(name1) : name1,params,doc1 != null ? little_interpreter_Interpreter.evaluate(doc1) : little_interpreter_InterpTokens.Characters(""));
			returnVal = little_interpreter_InterpTokens.NullValue;
			break;
		case 7:
			var name2 = token.name;
			var exp = token.exp;
			var body1 = token.body;
			returnVal = little_interpreter_Interpreter.condition(name2,exp,body1);
			var _this3 = [little_tools_InterpTokensSimple.FUNCTION_RETURN].slice();
			var result3 = new Array(_this3.length);
			var _g6 = 0;
			var _g7 = _this3.length;
			while(_g6 < _g7) {
				var i4 = _g6++;
				var x3 = _this3[i4];
				result3[i4] = little_tools_TextTools.remove($hxEnums[x3.__enum__].__constructs__[x3._hx_index]._hx_name,"_").toLowerCase();
			}
			if(result3.indexOf($hxEnums[returnVal.__enum__].__constructs__[returnVal._hx_index]._hx_name.toLowerCase()) != -1) {
				return little_interpreter_Interpreter.evaluate(returnVal);
			}
			break;
		case 9:
			var name3 = token.name;
			var params1 = token.params;
			returnVal = little_interpreter_Interpreter.call(name3,params1);
			break;
		case 10:
			var value = token.value;
			var type2 = token.type;
			var v = little_interpreter_Interpreter.evaluate(value);
			var t = little_tools_Extensions.asTokenPath(little_tools_Extensions.type(v));
			if(propagateReturns) {
				return little_interpreter_InterpTokens.FunctionReturn(v,t);
			} else {
				return v;
			}
			break;
		case 11:
			var assignees = token.assignees;
			var value1 = token.value;
			returnVal = little_interpreter_Interpreter.write(assignees,value1);
			break;
		case 14:
			var body2 = token.body;
			var type3 = token.type;
			returnVal = little_interpreter_Interpreter.run(body2);
			break;
		case 16:
			var name4 = token.name;
			var property = token.property;
			returnVal = little_interpreter_Interpreter.evaluate(token);
			break;
		case 26:
			var name5 = token.word;
			returnVal = little_interpreter_Interpreter.read(token);
			break;
		case 29:
			var func = token.func;
			returnVal = little_interpreter_Interpreter.evaluate(func());
			break;
		default:
			returnVal = little_interpreter_Interpreter.evaluate(token);
		}
		var _g8 = 0;
		var _g9 = little_Little.runtime.onTokenInterpreted;
		while(_g8 < _g9.length) {
			var listener = _g9[_g8];
			++_g8;
			listener(token);
		}
		little_Little.runtime.previousToken = token;
		++i;
	}
	little_Little.memory.referrer.popScope();
	return returnVal;
};
little_interpreter_Interpreter.evaluate = function(exp,dontThrow) {
	if(dontThrow == null) {
		dontThrow = false;
	}
	switch(exp._hx_index) {
	case 0:
		var line = exp.line;
		little_interpreter_Interpreter.setLine(line);
		return little_interpreter_InterpTokens.NullValue;
	case 1:
		little_interpreter_Interpreter.splitLine();
		return little_interpreter_InterpTokens.NullValue;
	case 2:
		var name = exp.name;
		var type = exp.type;
		var doc = exp.doc;
		var _this = [little_tools_InterpTokensSimple.BLOCK].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		var tmp = result.indexOf($hxEnums[name.__enum__].__constructs__[name._hx_index]._hx_name.toLowerCase()) != -1 ? little_interpreter_Interpreter.evaluate(name) : name;
		var _this = [little_tools_InterpTokensSimple.BLOCK].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		little_interpreter_Interpreter.declareVariable(tmp,result.indexOf($hxEnums[type.__enum__].__constructs__[type._hx_index]._hx_name.toLowerCase()) != -1 ? little_interpreter_Interpreter.evaluate(type) : type,little_interpreter_Interpreter.evaluate(doc));
		return little_interpreter_InterpTokens.NullValue;
	case 3:
		var name = exp.name;
		var params = exp.params;
		var type = exp.type;
		var doc = exp.doc;
		var _this = [little_tools_InterpTokensSimple.BLOCK].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		little_interpreter_Interpreter.declareFunction(result.indexOf($hxEnums[name.__enum__].__constructs__[name._hx_index]._hx_name.toLowerCase()) != -1 ? little_interpreter_Interpreter.evaluate(name) : name,params,little_interpreter_Interpreter.evaluate(doc));
		return little_interpreter_InterpTokens.NullValue;
	case 7:
		var name = exp.name;
		var exp1 = exp.exp;
		var body = exp.body;
		return little_interpreter_Interpreter.condition(name,exp1,body);
	case 8:
		var _g = exp.requiredParams;
		var _g = exp.body;
		return exp;
	case 9:
		var name = exp.name;
		var params = exp.params;
		var currentLine = little_Little.runtime.line;
		return little_interpreter_Interpreter.call(name,params);
	case 10:
		var value = exp.value;
		var t = exp.type;
		return little_interpreter_Interpreter.evaluate(little_interpreter_Interpreter.typeCast(value,t));
	case 11:
		var assignees = exp.assignees;
		var value = exp.value;
		return little_interpreter_Interpreter.write(assignees,value);
	case 12:
		var value = exp.value;
		var t = exp.type;
		return little_interpreter_Interpreter.typeCast(value,t);
	case 13:
		var parts = exp.parts;
		var t = exp.type;
		if(little_tools_Extensions.asJoinedStringPath(t) == little_Little.keywords.TYPE_DYNAMIC) {
			return little_interpreter_Interpreter.calculate(parts);
		}
		return little_interpreter_Interpreter.typeCast(little_interpreter_Interpreter.calculate(parts),t);
	case 14:
		var body = exp.body;
		var t = exp.type;
		var currentLine = little_Little.runtime.line;
		var returnVal = little_interpreter_Interpreter.run(body);
		little_interpreter_Interpreter.setLine(currentLine);
		if(little_tools_Extensions.asJoinedStringPath(t) == little_Little.keywords.TYPE_DYNAMIC) {
			return little_interpreter_Interpreter.evaluate(returnVal,dontThrow);
		}
		return little_interpreter_Interpreter.evaluate(little_interpreter_Interpreter.typeCast(returnVal,t),dontThrow);
	case 15:
		var parts = exp.parts;
		var _g = [];
		var _g1 = 0;
		while(_g1 < parts.length) {
			var p = parts[_g1];
			++_g1;
			_g.push(little_interpreter_Interpreter.evaluate(p,dontThrow));
		}
		return little_interpreter_InterpTokens.PartArray(_g);
	case 16:
		var name = exp.name;
		var property = exp.property;
		var path = little_tools_Extensions.toIdentifierPath(exp);
		var _g = [];
		var _g1 = 0;
		var _g2 = path;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			var _this = [little_tools_InterpTokensSimple.IDENTIFIER].slice();
			var result = new Array(_this.length);
			var _g3 = 0;
			var _g4 = _this.length;
			while(_g3 < _g4) {
				var i = _g3++;
				var x = _this[i];
				result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			if(result.indexOf($hxEnums[v.__enum__].__constructs__[v._hx_index]._hx_name.toLowerCase()) == -1) {
				_g.push(v);
			}
		}
		if(_g.length == 0) {
			return little_interpreter_Interpreter.read(exp);
		} else {
			var tmp;
			var token = path[0];
			var _this = [little_tools_InterpTokensSimple.IDENTIFIER].slice();
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				var x = _this[i];
				result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) == -1) {
				var _g = [];
				var _g1 = 0;
				var _g2 = path.slice(1);
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					var _this = [little_tools_InterpTokensSimple.IDENTIFIER].slice();
					var result = new Array(_this.length);
					var _g3 = 0;
					var _g4 = _this.length;
					while(_g3 < _g4) {
						var i = _g3++;
						var x = _this[i];
						result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
					}
					if(result.indexOf($hxEnums[v.__enum__].__constructs__[v._hx_index]._hx_name.toLowerCase()) == -1) {
						_g.push(v);
					}
				}
				tmp = _g.length == 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				var value = little_interpreter_Interpreter.evaluate(path[0]);
				var tmp = little_Little.memory;
				var tmp1 = { objectValue : value, objectAddress : little_Little.memory.store(value)};
				var _this = path.slice(1);
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					var token = _this[i];
					var _this1 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
					var result1 = new Array(_this1.length);
					var _g2 = 0;
					var _g3 = _this1.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var x = _this1[i1];
						result1[i1] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
					}
					result[i] = result1.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(token)[0] : Type.enumParameters(little_interpreter_Interpreter.run([token]))[0];
				}
				return ($_=tmp,$_.readFrom.apply($_,[tmp1].concat(result))).objectValue;
			} else {
				var tmp = "Cannot access " + path.join(little_Little.keywords.PROPERTY_ACCESS_SIGN) + ", path cannot contain a raw value in the middle (for property: ";
				var _g = [];
				var _g1 = 0;
				var _g2 = path.slice(1);
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					var _this = [little_tools_InterpTokensSimple.IDENTIFIER].slice();
					var result = new Array(_this.length);
					var _g3 = 0;
					var _g4 = _this.length;
					while(_g3 < _g4) {
						var i = _g3++;
						var x = _this[i];
						result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
					}
					if(result.indexOf($hxEnums[v.__enum__].__constructs__[v._hx_index]._hx_name.toLowerCase()) == -1) {
						_g.push(v);
					}
				}
				return little_interpreter_Interpreter.error(tmp + little_tools_PrettyPrinter.stringifyInterpreter(null,_g[0]));
			}
		}
		break;
	case 17:
		var _g = exp.num;
		return exp;
	case 18:
		var _g = exp.num;
		return exp;
	case 19:
		var _g = exp.string;
		return exp;
	case 21:
		var _g = exp.pointer;
		return exp;
	case 22:
		var _g = exp.sign;
		return exp;
	case 23:case 24:case 25:
		return exp;
	case 26:
		var word = exp.word;
		return little_interpreter_Interpreter.read(exp);
	case 27:
		var _g = exp.props;
		var _g = exp.typeName;
		return exp;
	case 28:
		var msg = exp.msg;
		if(!dontThrow) {
			little_Little.runtime.throwError(exp,"Interpreter, Value Evaluator");
		}
		return exp;
	case 29:
		var func = exp.func;
		return little_interpreter_Interpreter.evaluate(func());
	default:
		return little_interpreter_Interpreter.evaluate(little_interpreter_InterpTokens.ErrorMessage("Unable to evaluate token `" + Std.string(exp) + "`"),dontThrow);
	}
};
little_interpreter_Interpreter.calculate = function(p) {
	while(true) {
		var tmp;
		if(p.length == 1 && ((Type.enumParameters(p[0])[0]) instanceof Array)) {
			var token = p[0];
			var _this = [little_tools_InterpTokensSimple.BLOCK].slice();
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				var x = _this[i];
				result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			tmp = result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) == -1;
		} else {
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		p = Type.enumParameters(p[0])[0];
	}
	var tokens = little_interpreter_Interpreter.group(p);
	var castType = null;
	if(tokens.length == 1) {
		var token = tokens[0];
		var _this = [little_tools_InterpTokensSimple.PART_ARRAY].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1) {
			tokens = Type.enumParameters(tokens[0])[0];
		} else {
			var token = tokens[0];
			var _this = [little_tools_InterpTokensSimple.EXPRESSION].slice();
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				var x = _this[i];
				result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1) {
				tokens = Type.enumParameters(tokens[0])[0];
				castType = Type.enumParameters(tokens[0])[1];
			} else {
				var token = tokens[0];
				var _this = [little_tools_InterpTokensSimple.BLOCK].slice();
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					var x = _this[i];
					result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
				}
				if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1) {
					tokens = [little_interpreter_Interpreter.run(Type.enumParameters(tokens[0])[0])];
					castType = Type.enumParameters(tokens[0])[1];
				}
			}
		}
	}
	var calculated = null;
	var sign = "";
	var _g = [];
	var _g1 = 0;
	var _g2 = tokens;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null) {
			_g.push(v);
		}
	}
	tokens = _g;
	var _g = 0;
	while(_g < tokens.length) {
		var token = tokens[_g];
		++_g;
		switch(token._hx_index) {
		case 13:
			var parts = token.parts;
			var t = token.type;
			var val = t != null ? little_interpreter_Interpreter.typeCast(little_interpreter_Interpreter.calculate(parts),t) : little_interpreter_Interpreter.calculate(parts);
			if(sign != "" && calculated == null) {
				var _this = little_Little.operators;
				calculated = Object.prototype.hasOwnProperty.call(_this.rhsOnly.h,sign) ? _this.rhsOnly.h[sign](val) : Object.prototype.hasOwnProperty.call(_this.lhsOnly.h,sign) ? little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " is used incorrectly - should appear before the sign (" + little_tools_PrettyPrinter.stringifyInterpreter(null,val) + sign + " instead of " + sign + little_tools_PrettyPrinter.stringifyInterpreter(null,val) + ")") : Object.prototype.hasOwnProperty.call(_this.standard.h,sign) ? little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " is used incorrectly - should appear between two values (" + little_tools_PrettyPrinter.stringifyInterpreter(null,val) + " " + sign + " <some value>)") : little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " does not exist. did you make a typo?");
			} else if(calculated == null) {
				calculated = val;
			} else if(sign == "") {
				little_interpreter_Interpreter.error("Two values cannot come one after the other (" + Std.string(calculated) + ", " + Std.string(token) + "). At least one of them should be an operator, or, put an operator in between.");
			} else {
				var _this1 = little_Little.operators;
				calculated = Object.prototype.hasOwnProperty.call(_this1.standard.h,sign) ? _this1.standard.h[sign](calculated,val) : Object.prototype.hasOwnProperty.call(_this1.lhsOnly.h,sign) ? little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " is used incorrectly - should not appear between two values, only to the right of one of them (" + little_tools_PrettyPrinter.stringifyInterpreter(null,val) + sign + " or " + little_tools_PrettyPrinter.stringifyInterpreter(null,calculated) + sign + ")") : Object.prototype.hasOwnProperty.call(_this1.rhsOnly.h,sign) ? little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " is used incorrectly - should not appear between two values, only to the left of one of them (" + sign + little_tools_PrettyPrinter.stringifyInterpreter(null,val) + " or " + sign + little_tools_PrettyPrinter.stringifyInterpreter(null,calculated) + ")") : little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " does not exist. did you make a typo?");
			}
			break;
		case 15:
			var parts1 = token.parts;
			if(sign != "" && calculated == null) {
				var _this2 = little_Little.operators;
				var rhs = little_interpreter_Interpreter.calculate(parts1);
				calculated = Object.prototype.hasOwnProperty.call(_this2.rhsOnly.h,sign) ? _this2.rhsOnly.h[sign](rhs) : Object.prototype.hasOwnProperty.call(_this2.lhsOnly.h,sign) ? little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " is used incorrectly - should appear before the sign (" + little_tools_PrettyPrinter.stringifyInterpreter(null,rhs) + sign + " instead of " + sign + little_tools_PrettyPrinter.stringifyInterpreter(null,rhs) + ")") : Object.prototype.hasOwnProperty.call(_this2.standard.h,sign) ? little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " is used incorrectly - should appear between two values (" + little_tools_PrettyPrinter.stringifyInterpreter(null,rhs) + " " + sign + " <some value>)") : little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " does not exist. did you make a typo?");
			} else if(calculated == null) {
				calculated = little_interpreter_Interpreter.calculate(parts1);
			} else if(sign == "") {
				little_interpreter_Interpreter.error("Two values cannot come one after the other (" + Std.string(calculated) + ", " + Std.string(token) + "). At least one of them should be an operator, or, put an operator in between.");
			} else {
				var _this3 = little_Little.operators;
				var rhs1 = little_interpreter_Interpreter.calculate(parts1);
				calculated = Object.prototype.hasOwnProperty.call(_this3.standard.h,sign) ? _this3.standard.h[sign](calculated,rhs1) : Object.prototype.hasOwnProperty.call(_this3.lhsOnly.h,sign) ? little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " is used incorrectly - should not appear between two values, only to the right of one of them (" + little_tools_PrettyPrinter.stringifyInterpreter(null,rhs1) + sign + " or " + little_tools_PrettyPrinter.stringifyInterpreter(null,calculated) + sign + ")") : Object.prototype.hasOwnProperty.call(_this3.rhsOnly.h,sign) ? little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " is used incorrectly - should not appear between two values, only to the left of one of them (" + sign + little_tools_PrettyPrinter.stringifyInterpreter(null,rhs1) + " or " + sign + little_tools_PrettyPrinter.stringifyInterpreter(null,calculated) + ")") : little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " does not exist. did you make a typo?");
			}
			break;
		case 22:
			var s = token.sign;
			sign = s;
			if(tokens.length == 1) {
				return token;
			}
			if(Type.enumEq(tokens[tokens.length - 1],token)) {
				var _this4 = little_Little.operators;
				calculated = Object.prototype.hasOwnProperty.call(_this4.lhsOnly.h,sign) ? _this4.lhsOnly.h[sign](calculated) : Object.prototype.hasOwnProperty.call(_this4.rhsOnly.h,sign) ? little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " is used incorrectly - should appear after the sign (" + sign + little_tools_PrettyPrinter.stringifyInterpreter(null,calculated) + " instead of " + little_tools_PrettyPrinter.stringifyInterpreter(null,calculated) + sign + ")") : Object.prototype.hasOwnProperty.call(_this4.standard.h,sign) ? little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " is used incorrectly - should appear between two values (" + little_tools_PrettyPrinter.stringifyInterpreter(null,calculated) + " " + sign + " <some value>)") : little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " does not exist. did you make a typo?");
			}
			break;
		default:
			if(sign != "" && calculated == null) {
				var _this5 = little_Little.operators;
				calculated = Object.prototype.hasOwnProperty.call(_this5.rhsOnly.h,sign) ? _this5.rhsOnly.h[sign](token) : Object.prototype.hasOwnProperty.call(_this5.lhsOnly.h,sign) ? little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " is used incorrectly - should appear before the sign (" + little_tools_PrettyPrinter.stringifyInterpreter(null,token) + sign + " instead of " + sign + little_tools_PrettyPrinter.stringifyInterpreter(null,token) + ")") : Object.prototype.hasOwnProperty.call(_this5.standard.h,sign) ? little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " is used incorrectly - should appear between two values (" + little_tools_PrettyPrinter.stringifyInterpreter(null,token) + " " + sign + " <some value>)") : little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " does not exist. did you make a typo?");
			} else if(sign == "" && calculated != null) {
				throw haxe_Exception.thrown("Unexpected token: " + Std.string(token) + " After calculating " + Std.string(calculated));
			} else if(calculated == null) {
				calculated = token;
			} else if(sign == "") {
				little_interpreter_Interpreter.error("Two values cannot come one after the other (" + Std.string(calculated) + ", " + Std.string(token) + "). At least one of them should be an operator, or, put an operator in between.");
			} else {
				var _this6 = little_Little.operators;
				calculated = Object.prototype.hasOwnProperty.call(_this6.standard.h,sign) ? _this6.standard.h[sign](calculated,token) : Object.prototype.hasOwnProperty.call(_this6.lhsOnly.h,sign) ? little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " is used incorrectly - should not appear between two values, only to the right of one of them (" + little_tools_PrettyPrinter.stringifyInterpreter(null,token) + sign + " or " + little_tools_PrettyPrinter.stringifyInterpreter(null,calculated) + sign + ")") : Object.prototype.hasOwnProperty.call(_this6.rhsOnly.h,sign) ? little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " is used incorrectly - should not appear between two values, only to the left of one of them (" + sign + little_tools_PrettyPrinter.stringifyInterpreter(null,token) + " or " + sign + little_tools_PrettyPrinter.stringifyInterpreter(null,calculated) + ")") : little_interpreter_InterpTokens.ErrorMessage("Operator " + sign + " does not exist. did you make a typo?");
			}
		}
	}
	if(castType != null) {
		return little_interpreter_Interpreter.typeCast(calculated,castType);
	}
	return calculated;
};
little_interpreter_Interpreter.group = function(tokens) {
	var post = tokens;
	var pre = [];
	var operatorGroup = little_Little.operators.iterateByPriority();
	while(operatorGroup.hasNext()) {
		var operatorGroup1 = operatorGroup.next();
		pre = post.slice();
		post = [];
		var i = 0;
		_hx_loop2: while(i < pre.length) {
			var token = pre[i];
			var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.BLOCK].slice();
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i1 = _g++;
				var x = _this[i1];
				result[i1] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			var token1 = result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1 ? little_interpreter_Interpreter.evaluate(pre[i]) : pre[i];
			switch(token1._hx_index) {
			case 13:
				var parts = token1.parts;
				var type = token1.type;
				post.push(little_interpreter_InterpTokens.Expression(little_interpreter_Interpreter.group(parts),type));
				break;
			case 22:
				var _g2 = token1.sign;
				var _g3 = [];
				var _g4 = 0;
				var _g5 = operatorGroup1;
				while(_g4 < _g5.length) {
					var v = _g5[_g4];
					++_g4;
					if(v.sign == _g2) {
						_g3.push(v);
					}
				}
				if(_g3.length > 0 == true) {
					if(i == pre.length - 1) {
						post.push(little_interpreter_InterpTokens.PartArray([post.pop(),token1]));
						break _hx_loop2;
					}
					var lookbehind = post.length > 0 ? post[post.length - 1] : little_interpreter_InterpTokens.Sign("_");
					var token2 = pre[i + 1];
					var _this1 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.BLOCK].slice();
					var result1 = new Array(_this1.length);
					var _g6 = 0;
					var _g7 = _this1.length;
					while(_g6 < _g7) {
						var i2 = _g6++;
						var x1 = _this1[i2];
						result1[i2] = little_tools_TextTools.remove($hxEnums[x1.__enum__].__constructs__[x1._hx_index]._hx_name,"_").toLowerCase();
					}
					var lookahead = result1.indexOf($hxEnums[token2.__enum__].__constructs__[token2._hx_index]._hx_name.toLowerCase()) != -1 ? little_interpreter_Interpreter.evaluate(pre[i + 1]) : pre[i + 1];
					var tmp;
					var _this2 = [little_tools_InterpTokensSimple.SIGN].slice();
					var result2 = new Array(_this2.length);
					var _g8 = 0;
					var _g9 = _this2.length;
					while(_g8 < _g9) {
						var i3 = _g8++;
						var x2 = _this2[i3];
						result2[i3] = little_tools_TextTools.remove($hxEnums[x2.__enum__].__constructs__[x2._hx_index]._hx_name,"_").toLowerCase();
					}
					if(result2.indexOf($hxEnums[lookbehind.__enum__].__constructs__[lookbehind._hx_index]._hx_name.toLowerCase()) != -1) {
						var _g10 = [];
						var _g11 = 0;
						var _g12 = operatorGroup1;
						while(_g11 < _g12.length) {
							var v1 = _g12[_g11];
							++_g11;
							if(v1.sign == Type.enumParameters(lookbehind)[1]) {
								_g10.push(v1);
							}
						}
						tmp = _g10.length > 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						var _this3 = [little_tools_InterpTokensSimple.SIGN].slice();
						var result3 = new Array(_this3.length);
						var _g13 = 0;
						var _g14 = _this3.length;
						while(_g13 < _g14) {
							var i4 = _g13++;
							var x3 = _this3[i4];
							result3[i4] = little_tools_TextTools.remove($hxEnums[x3.__enum__].__constructs__[x3._hx_index]._hx_name,"_").toLowerCase();
						}
						if(result3.indexOf($hxEnums[lookahead.__enum__].__constructs__[lookahead._hx_index]._hx_name.toLowerCase()) != -1) {
							++i;
							if(i + 1 >= pre.length) {
								little_interpreter_Interpreter.error("Expression ended with an operator, when an operand was expected.");
							}
							var token3 = pre[i + 1];
							var _this4 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.BLOCK].slice();
							var result4 = new Array(_this4.length);
							var _g15 = 0;
							var _g16 = _this4.length;
							while(_g15 < _g16) {
								var i5 = _g15++;
								var x4 = _this4[i5];
								result4[i5] = little_tools_TextTools.remove($hxEnums[x4.__enum__].__constructs__[x4._hx_index]._hx_name,"_").toLowerCase();
							}
							var lookahead2 = result4.indexOf($hxEnums[token3.__enum__].__constructs__[token3._hx_index]._hx_name.toLowerCase()) != -1 ? little_interpreter_Interpreter.evaluate(pre[i + 1]) : pre[i + 1];
							var g = [];
							while(true) {
								var tmp1;
								var _this5 = [little_tools_InterpTokensSimple.SIGN].slice();
								var result5 = new Array(_this5.length);
								var _g17 = 0;
								var _g18 = _this5.length;
								while(_g17 < _g18) {
									var i6 = _g17++;
									var x5 = _this5[i6];
									result5[i6] = little_tools_TextTools.remove($hxEnums[x5.__enum__].__constructs__[x5._hx_index]._hx_name,"_").toLowerCase();
								}
								if(result5.indexOf($hxEnums[lookahead2.__enum__].__constructs__[lookahead2._hx_index]._hx_name.toLowerCase()) != -1) {
									var _g19 = [];
									var _g20 = 0;
									var _g21 = operatorGroup1;
									while(_g20 < _g21.length) {
										var v2 = _g21[_g20];
										++_g20;
										if(v2.sign == Type.enumParameters(lookahead2)[1] && v2.side == little_interpreter_memory_OperatorType.RHS_ONLY) {
											_g19.push(v2);
										}
									}
									tmp1 = _g19.length > 0;
								} else {
									tmp1 = false;
								}
								if(!tmp1) {
									break;
								}
								g.push(lookahead2);
								++i;
								if(i + 1 >= pre.length) {
									little_interpreter_Interpreter.error("Expression ended with an operator, when an operand was expected.");
								}
								var token4 = pre[i + 1];
								var _this6 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.BLOCK].slice();
								var result6 = new Array(_this6.length);
								var _g22 = 0;
								var _g23 = _this6.length;
								while(_g22 < _g23) {
									var i7 = _g22++;
									var x6 = _this6[i7];
									result6[i7] = little_tools_TextTools.remove($hxEnums[x6.__enum__].__constructs__[x6._hx_index]._hx_name,"_").toLowerCase();
								}
								lookahead2 = result6.indexOf($hxEnums[token4.__enum__].__constructs__[token4._hx_index]._hx_name.toLowerCase()) != -1 ? little_interpreter_Interpreter.evaluate(pre[i + 1]) : pre[i + 1];
							}
							g.push(lookahead2);
							post.push(little_interpreter_InterpTokens.PartArray([token1,little_interpreter_InterpTokens.PartArray(little_interpreter_Interpreter.group(g))]));
							++i;
						} else {
							var _this7 = [little_tools_InterpTokensSimple.EXPRESSION].slice();
							var result7 = new Array(_this7.length);
							var _g24 = 0;
							var _g25 = _this7.length;
							while(_g24 < _g25) {
								var i8 = _g24++;
								var x7 = _this7[i8];
								result7[i8] = little_tools_TextTools.remove($hxEnums[x7.__enum__].__constructs__[x7._hx_index]._hx_name,"_").toLowerCase();
							}
							if(result7.indexOf($hxEnums[lookahead.__enum__].__constructs__[lookahead._hx_index]._hx_name.toLowerCase()) != -1) {
								post.push(little_interpreter_InterpTokens.PartArray([token1,little_interpreter_InterpTokens.Expression(little_interpreter_Interpreter.group(Type.enumParameters(lookahead)[0]),Type.enumParameters(lookahead)[1])]));
							} else {
								post.push(little_interpreter_InterpTokens.PartArray([token1,lookahead]));
							}
						}
					} else {
						var tmp2;
						var _this8 = [little_tools_InterpTokensSimple.SIGN].slice();
						var result8 = new Array(_this8.length);
						var _g26 = 0;
						var _g27 = _this8.length;
						while(_g26 < _g27) {
							var i9 = _g26++;
							var x8 = _this8[i9];
							result8[i9] = little_tools_TextTools.remove($hxEnums[x8.__enum__].__constructs__[x8._hx_index]._hx_name,"_").toLowerCase();
						}
						if(result8.indexOf($hxEnums[lookahead.__enum__].__constructs__[lookahead._hx_index]._hx_name.toLowerCase()) != -1) {
							var _g28 = [];
							var _g29 = 0;
							var _g30 = operatorGroup1;
							while(_g29 < _g30.length) {
								var v3 = _g30[_g29];
								++_g29;
								if(v3.sign == Type.enumParameters(lookahead)[0]) {
									_g28.push(v3);
								}
							}
							tmp2 = _g28.length > 0;
						} else {
							tmp2 = false;
						}
						if(tmp2) {
							var _g31 = [];
							var _g32 = 0;
							var _g33 = operatorGroup1;
							while(_g32 < _g33.length) {
								var v4 = _g33[_g32];
								++_g32;
								if(v4.sign == Type.enumParameters(token1)[0] && v4.side == little_interpreter_memory_OperatorType.LHS_ONLY) {
									_g31.push(v4);
								}
							}
							if(_g31.length > 0) {
								post.push(little_interpreter_InterpTokens.PartArray([post.pop(),token1]));
							} else {
								var _g34 = [];
								var _g35 = 0;
								var _g36 = operatorGroup1;
								while(_g35 < _g36.length) {
									var v5 = _g36[_g35];
									++_g35;
									if(v5.sign == Type.enumParameters(token1)[0] && v5.side == little_interpreter_memory_OperatorType.LHS_RHS) {
										_g34.push(v5);
									}
								}
								if(_g34.length > 0) {
									var operand1 = post.pop();
									var op = lookahead;
									if(i + 2 >= pre.length) {
										little_interpreter_Interpreter.error("Expression ended with an operator, when an operand was expected.");
									}
									var token5 = pre[i + 2];
									var _this9 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.BLOCK].slice();
									var result9 = new Array(_this9.length);
									var _g37 = 0;
									var _g38 = _this9.length;
									while(_g37 < _g38) {
										var i10 = _g37++;
										var x9 = _this9[i10];
										result9[i10] = little_tools_TextTools.remove($hxEnums[x9.__enum__].__constructs__[x9._hx_index]._hx_name,"_").toLowerCase();
									}
									var lookahead21 = result9.indexOf($hxEnums[token5.__enum__].__constructs__[token5._hx_index]._hx_name.toLowerCase()) != -1 ? little_interpreter_Interpreter.evaluate(pre[i + 2]) : pre[i + 2];
									var _this10 = [little_tools_InterpTokensSimple.SIGN].slice();
									var result10 = new Array(_this10.length);
									var _g39 = 0;
									var _g40 = _this10.length;
									while(_g39 < _g40) {
										var i11 = _g39++;
										var x10 = _this10[i11];
										result10[i11] = little_tools_TextTools.remove($hxEnums[x10.__enum__].__constructs__[x10._hx_index]._hx_name,"_").toLowerCase();
									}
									if(result10.indexOf($hxEnums[lookahead21.__enum__].__constructs__[lookahead21._hx_index]._hx_name.toLowerCase()) == -1) {
										post.push(little_interpreter_InterpTokens.PartArray([operand1,token1,little_interpreter_InterpTokens.PartArray([lookahead,lookahead21])]));
										i += 2;
									} else {
										var g1 = [];
										while(true) {
											var tmp3;
											var _this11 = [little_tools_InterpTokensSimple.SIGN].slice();
											var result11 = new Array(_this11.length);
											var _g41 = 0;
											var _g42 = _this11.length;
											while(_g41 < _g42) {
												var i12 = _g41++;
												var x11 = _this11[i12];
												result11[i12] = little_tools_TextTools.remove($hxEnums[x11.__enum__].__constructs__[x11._hx_index]._hx_name,"_").toLowerCase();
											}
											if(result11.indexOf($hxEnums[lookahead21.__enum__].__constructs__[lookahead21._hx_index]._hx_name.toLowerCase()) != -1) {
												var _g43 = [];
												var _g44 = 0;
												var _g45 = operatorGroup1;
												while(_g44 < _g45.length) {
													var v6 = _g45[_g44];
													++_g44;
													if(v6.sign == Type.enumParameters(lookahead21)[0] && v6.side == little_interpreter_memory_OperatorType.RHS_ONLY) {
														_g43.push(v6);
													}
												}
												tmp3 = _g43.length > 0;
											} else {
												tmp3 = false;
											}
											if(!tmp3) {
												break;
											}
											g1.push(lookahead21);
											++i;
											if(i + 2 >= pre.length) {
												little_interpreter_Interpreter.error("Expression ended with an operator, when an operand was expected.");
											}
											var token6 = pre[i + 2];
											var _this12 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.BLOCK].slice();
											var result12 = new Array(_this12.length);
											var _g46 = 0;
											var _g47 = _this12.length;
											while(_g46 < _g47) {
												var i13 = _g46++;
												var x12 = _this12[i13];
												result12[i13] = little_tools_TextTools.remove($hxEnums[x12.__enum__].__constructs__[x12._hx_index]._hx_name,"_").toLowerCase();
											}
											lookahead21 = result12.indexOf($hxEnums[token6.__enum__].__constructs__[token6._hx_index]._hx_name.toLowerCase()) != -1 ? little_interpreter_Interpreter.evaluate(pre[i + 2]) : pre[i + 2];
										}
										g1.push(lookahead21);
										++i;
										var operand2 = g1.length == 1 ? g1[0] : little_interpreter_InterpTokens.PartArray(little_interpreter_Interpreter.group(g1));
										post.push(little_interpreter_InterpTokens.PartArray([operand1,op,operand2]));
									}
								} else {
									var _g48 = [];
									var _g49 = 0;
									var _g50 = operatorGroup1;
									while(_g49 < _g50.length) {
										var v7 = _g50[_g49];
										++_g49;
										if(v7.sign == Type.enumParameters(token1)[0] && v7.side == little_interpreter_memory_OperatorType.RHS_ONLY) {
											_g48.push(v7);
										}
									}
									if(_g48.length > 0) {
										little_interpreter_Interpreter.error("An operator that expects a right side can't be preceded by an operator that expects a left side.");
									}
								}
							}
						} else {
							var _this13 = [little_tools_InterpTokensSimple.SIGN].slice();
							var result13 = new Array(_this13.length);
							var _g51 = 0;
							var _g52 = _this13.length;
							while(_g51 < _g52) {
								var i14 = _g51++;
								var x13 = _this13[i14];
								result13[i14] = little_tools_TextTools.remove($hxEnums[x13.__enum__].__constructs__[x13._hx_index]._hx_name,"_").toLowerCase();
							}
							if(result13.indexOf($hxEnums[lookahead.__enum__].__constructs__[lookahead._hx_index]._hx_name.toLowerCase()) != -1) {
								post.push(little_interpreter_InterpTokens.PartArray([post.pop(),token1]));
							} else {
								post.push(little_interpreter_InterpTokens.PartArray([post.pop(),token1,lookahead]));
								++i;
							}
						}
					}
				} else {
					post.push(token1);
				}
				break;
			default:
				post.push(token1);
			}
			++i;
		}
	}
	return post;
};
var little_interpreter_FieldDeclarationType = $hxEnums["little.interpreter.FieldDeclarationType"] = { __ename__:"little.interpreter.FieldDeclarationType",__constructs__:null
	,VARIABLE: {_hx_name:"VARIABLE",_hx_index:0,__enum__:"little.interpreter.FieldDeclarationType",toString:$estr}
	,FUNCTION: {_hx_name:"FUNCTION",_hx_index:1,__enum__:"little.interpreter.FieldDeclarationType",toString:$estr}
	,CONDITION: {_hx_name:"CONDITION",_hx_index:2,__enum__:"little.interpreter.FieldDeclarationType",toString:$estr}
	,CLASS: {_hx_name:"CLASS",_hx_index:3,__enum__:"little.interpreter.FieldDeclarationType",toString:$estr}
	,OPERATOR: {_hx_name:"OPERATOR",_hx_index:4,__enum__:"little.interpreter.FieldDeclarationType",toString:$estr}
};
little_interpreter_FieldDeclarationType.__constructs__ = [little_interpreter_FieldDeclarationType.VARIABLE,little_interpreter_FieldDeclarationType.FUNCTION,little_interpreter_FieldDeclarationType.CONDITION,little_interpreter_FieldDeclarationType.CLASS,little_interpreter_FieldDeclarationType.OPERATOR];
var little_interpreter_StdOut = function() {
	this.stdoutTokens = [];
	this.output = "";
};
$hxClasses["little.interpreter.StdOut"] = little_interpreter_StdOut;
little_interpreter_StdOut.__name__ = "little.interpreter.StdOut";
little_interpreter_StdOut.prototype = {
	output: null
	,stdoutTokens: null
	,reset: function() {
		this.output = "";
		this.stdoutTokens = [];
	}
	,__class__: little_interpreter_StdOut
};
var little_interpreter_InterpTokens = $hxEnums["little.interpreter.InterpTokens"] = { __ename__:"little.interpreter.InterpTokens",__constructs__:null
	,SetLine: ($_=function(line) { return {_hx_index:0,line:line,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="SetLine",$_.__params__ = ["line"],$_)
	,SplitLine: {_hx_name:"SplitLine",_hx_index:1,__enum__:"little.interpreter.InterpTokens",toString:$estr}
	,VariableDeclaration: ($_=function(name,type,doc) { return {_hx_index:2,name:name,type:type,doc:doc,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="VariableDeclaration",$_.__params__ = ["name","type","doc"],$_)
	,FunctionDeclaration: ($_=function(name,params,type,doc) { return {_hx_index:3,name:name,params:params,type:type,doc:doc,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="FunctionDeclaration",$_.__params__ = ["name","params","type","doc"],$_)
	,ConditionDeclaration: ($_=function(name,conditionType,doc) { return {_hx_index:4,name:name,conditionType:conditionType,doc:doc,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="ConditionDeclaration",$_.__params__ = ["name","conditionType","doc"],$_)
	,ClassDeclaration: ($_=function(name,doc) { return {_hx_index:5,name:name,doc:doc,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="ClassDeclaration",$_.__params__ = ["name","doc"],$_)
	,ConditionCode: ($_=function(callers) { return {_hx_index:6,callers:callers,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="ConditionCode",$_.__params__ = ["callers"],$_)
	,ConditionCall: ($_=function(name,exp,body) { return {_hx_index:7,name:name,exp:exp,body:body,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="ConditionCall",$_.__params__ = ["name","exp","body"],$_)
	,FunctionCode: ($_=function(requiredParams,body) { return {_hx_index:8,requiredParams:requiredParams,body:body,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="FunctionCode",$_.__params__ = ["requiredParams","body"],$_)
	,FunctionCall: ($_=function(name,params) { return {_hx_index:9,name:name,params:params,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="FunctionCall",$_.__params__ = ["name","params"],$_)
	,FunctionReturn: ($_=function(value,type) { return {_hx_index:10,value:value,type:type,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="FunctionReturn",$_.__params__ = ["value","type"],$_)
	,Write: ($_=function(assignees,value) { return {_hx_index:11,assignees:assignees,value:value,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="Write",$_.__params__ = ["assignees","value"],$_)
	,TypeCast: ($_=function(value,type) { return {_hx_index:12,value:value,type:type,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="TypeCast",$_.__params__ = ["value","type"],$_)
	,Expression: ($_=function(parts,type) { return {_hx_index:13,parts:parts,type:type,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="Expression",$_.__params__ = ["parts","type"],$_)
	,Block: ($_=function(body,type) { return {_hx_index:14,body:body,type:type,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="Block",$_.__params__ = ["body","type"],$_)
	,PartArray: ($_=function(parts) { return {_hx_index:15,parts:parts,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="PartArray",$_.__params__ = ["parts"],$_)
	,PropertyAccess: ($_=function(name,property) { return {_hx_index:16,name:name,property:property,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="PropertyAccess",$_.__params__ = ["name","property"],$_)
	,Number: ($_=function(num) { return {_hx_index:17,num:num,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="Number",$_.__params__ = ["num"],$_)
	,Decimal: ($_=function(num) { return {_hx_index:18,num:num,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="Decimal",$_.__params__ = ["num"],$_)
	,Characters: ($_=function(string) { return {_hx_index:19,string:string,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="Characters",$_.__params__ = ["string"],$_)
	,Documentation: ($_=function(doc) { return {_hx_index:20,doc:doc,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="Documentation",$_.__params__ = ["doc"],$_)
	,ClassPointer: ($_=function(pointer) { return {_hx_index:21,pointer:pointer,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="ClassPointer",$_.__params__ = ["pointer"],$_)
	,Sign: ($_=function(sign) { return {_hx_index:22,sign:sign,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="Sign",$_.__params__ = ["sign"],$_)
	,NullValue: {_hx_name:"NullValue",_hx_index:23,__enum__:"little.interpreter.InterpTokens",toString:$estr}
	,TrueValue: {_hx_name:"TrueValue",_hx_index:24,__enum__:"little.interpreter.InterpTokens",toString:$estr}
	,FalseValue: {_hx_name:"FalseValue",_hx_index:25,__enum__:"little.interpreter.InterpTokens",toString:$estr}
	,Identifier: ($_=function(word) { return {_hx_index:26,word:word,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="Identifier",$_.__params__ = ["word"],$_)
	,Object: ($_=function(props,typeName) { return {_hx_index:27,props:props,typeName:typeName,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="Object",$_.__params__ = ["props","typeName"],$_)
	,ErrorMessage: ($_=function(msg) { return {_hx_index:28,msg:msg,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="ErrorMessage",$_.__params__ = ["msg"],$_)
	,HaxeExtern: ($_=function(func) { return {_hx_index:29,func:func,__enum__:"little.interpreter.InterpTokens",toString:$estr}; },$_._hx_name="HaxeExtern",$_.__params__ = ["func"],$_)
};
little_interpreter_InterpTokens.__constructs__ = [little_interpreter_InterpTokens.SetLine,little_interpreter_InterpTokens.SplitLine,little_interpreter_InterpTokens.VariableDeclaration,little_interpreter_InterpTokens.FunctionDeclaration,little_interpreter_InterpTokens.ConditionDeclaration,little_interpreter_InterpTokens.ClassDeclaration,little_interpreter_InterpTokens.ConditionCode,little_interpreter_InterpTokens.ConditionCall,little_interpreter_InterpTokens.FunctionCode,little_interpreter_InterpTokens.FunctionCall,little_interpreter_InterpTokens.FunctionReturn,little_interpreter_InterpTokens.Write,little_interpreter_InterpTokens.TypeCast,little_interpreter_InterpTokens.Expression,little_interpreter_InterpTokens.Block,little_interpreter_InterpTokens.PartArray,little_interpreter_InterpTokens.PropertyAccess,little_interpreter_InterpTokens.Number,little_interpreter_InterpTokens.Decimal,little_interpreter_InterpTokens.Characters,little_interpreter_InterpTokens.Documentation,little_interpreter_InterpTokens.ClassPointer,little_interpreter_InterpTokens.Sign,little_interpreter_InterpTokens.NullValue,little_interpreter_InterpTokens.TrueValue,little_interpreter_InterpTokens.FalseValue,little_interpreter_InterpTokens.Identifier,little_interpreter_InterpTokens.Object,little_interpreter_InterpTokens.ErrorMessage,little_interpreter_InterpTokens.HaxeExtern];
var little_interpreter_memory_ExtTree = function(type,getter,properties,doc) {
	var tmp = getter;
	this.getter = tmp != null ? tmp : function(objectValue,objectAddress) {
		return { objectValue : little_interpreter_InterpTokens.Characters("Externally registered, attached to " + (objectAddress == null ? "null" : little_interpreter_memory_MemoryPointer.toString(objectAddress))), objectAddress : objectAddress};
	};
	var tmp = properties;
	this.properties = tmp != null ? tmp : new haxe_ds_StringMap();
	var tmp = doc;
	this.doc = tmp != null ? tmp : little_Little.memory.constants.EMPTY_STRING;
	var tmp = type;
	this.type = tmp != null ? tmp : little_Little.memory.constants.UNKNOWN;
};
$hxClasses["little.interpreter.memory.ExtTree"] = little_interpreter_memory_ExtTree;
little_interpreter_memory_ExtTree.__name__ = "little.interpreter.memory.ExtTree";
little_interpreter_memory_ExtTree.prototype = {
	getter: null
	,doc: null
	,type: null
	,properties: null
	,__class__: little_interpreter_memory_ExtTree
};
var little_interpreter_memory_HashTables = function() { };
$hxClasses["little.interpreter.memory.HashTables"] = little_interpreter_memory_HashTables;
little_interpreter_memory_HashTables.__name__ = "little.interpreter.memory.HashTables";
little_interpreter_memory_HashTables.generateObjectHashTable = function(pairs) {
	var initialLength = (pairs.length > 1 ? pairs.length : 5) * little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE * 3;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(initialLength));
	this1.fill(0,initialLength,0);
	var array = this1;
	var _g = 0;
	while(_g < pairs.length) {
		var pair = pairs[_g];
		++_g;
		var keyHash = haxe_hash_Murmur1.hash(haxe_io_Bytes.ofString(pair.key));
		var khI64_high = 0;
		var khI64_low = keyHash;
		var x = little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE;
		var b_high = x >> 31;
		var b_low = x;
		var mask = 65535;
		var al = khI64_low & mask;
		var ah = khI64_low >>> 16;
		var bl = b_low & mask;
		var bh = b_low >>> 16;
		var p00 = haxe_Int32._mul(al,bl);
		var p10 = haxe_Int32._mul(ah,bl);
		var p01 = haxe_Int32._mul(al,bh);
		var p11 = haxe_Int32._mul(ah,bh);
		var low = p00;
		var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 <<= 16;
		low = low + p01 | 0;
		if(haxe_Int32.ucompare(low,p01) < 0) {
			var ret = high++;
			high = high | 0;
		}
		p10 <<= 16;
		low = low + p10 | 0;
		if(haxe_Int32.ucompare(low,p10) < 0) {
			var ret1 = high++;
			high = high | 0;
		}
		high = high + (haxe_Int32._mul(khI64_low,b_high) + haxe_Int32._mul(khI64_high,b_low) | 0) | 0;
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		var x1 = array.length;
		var keyIndex = haxe_Int64.divMod(this1,new haxe__$Int64__$_$_$Int64(x1 >> 31,x1)).modulus.low;
		if(array.getInt32(keyIndex) == 0) {
			array.setInt32(keyIndex,pair.keyPointer);
			array.setInt32(keyIndex + 4 | 0,pair.value);
			array.setInt32(keyIndex + 8 | 0,pair.type);
			array.setInt32(keyIndex + 12 | 0,pair.doc);
		} else {
			var incrementation = 0;
			var i = keyIndex;
			while(array.getInt32(i) != 0) {
				i = i + little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE | 0;
				incrementation += little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE;
				if(i >= array.length) {
					i = 0;
				}
				if(incrementation >= array.length) {
					throw haxe_Exception.thrown("Object hash table did not generate. This should never happen. Initial length may be incorrect.");
				}
			}
			array.setInt32(i,pair.keyPointer);
			array.setInt32(i + 4 | 0,pair.value);
			array.setInt32(i + 8 | 0,pair.type);
			array.setInt32(i + 12 | 0,pair.doc);
		}
	}
	return array;
};
little_interpreter_memory_HashTables.readObjectHashTable = function(bytes,storage) {
	var arr = [];
	var i = 0;
	while(i < bytes.length) {
		var keyPointer = little_interpreter_memory_MemoryPointer.fromInt(bytes.getInt32(i));
		var value = little_interpreter_memory_MemoryPointer.fromInt(bytes.getInt32(i + 4));
		var type = little_interpreter_memory_MemoryPointer.fromInt(bytes.getInt32(i + 8));
		var doc = little_interpreter_memory_MemoryPointer.fromInt(bytes.getInt32(i + 12));
		var key = null;
		if(keyPointer == 0) {
			i += little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE;
			continue;
		}
		if(storage != null) {
			key = storage.readString(keyPointer);
		}
		arr.push({ key : key, keyPointer : keyPointer, value : value, type : type, doc : doc});
		i += little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE;
	}
	return arr;
};
little_interpreter_memory_HashTables.hashTableHasKey = function(hashTable,key,storage) {
	var keyHash = haxe_hash_Murmur1.hash(haxe_io_Bytes.ofString(key));
	var khI64_high = 0;
	var khI64_low = keyHash;
	var x = little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE;
	var b_high = x >> 31;
	var b_low = x;
	var mask = 65535;
	var al = khI64_low & mask;
	var ah = khI64_low >>> 16;
	var bl = b_low & mask;
	var bh = b_low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(khI64_low,b_high) + haxe_Int32._mul(khI64_high,b_low) | 0) | 0;
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	var x = hashTable.length;
	var keyIndex = haxe_Int64.divMod(this1,new haxe__$Int64__$_$_$Int64(x >> 31,x)).modulus.low;
	var incrementation = 0;
	while(true) {
		var currentKey = storage.readString(little_interpreter_memory_MemoryPointer.fromInt(hashTable.getInt32(keyIndex)));
		if(currentKey == key) {
			return true;
		}
		keyIndex = keyIndex + little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE | 0;
		++incrementation;
		if(keyIndex >= hashTable.length) {
			keyIndex = 0;
		}
		if(incrementation >= hashTable.length) {
			return false;
		}
	}
};
little_interpreter_memory_HashTables.hashTableGetKey = function(hashTable,key,storage) {
	var keyHash = haxe_hash_Murmur1.hash(haxe_io_Bytes.ofString(key));
	var khI64_high = 0;
	var khI64_low = keyHash;
	var x = little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE;
	var b_high = x >> 31;
	var b_low = x;
	var mask = 65535;
	var al = khI64_low & mask;
	var ah = khI64_low >>> 16;
	var bl = b_low & mask;
	var bh = b_low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(khI64_low,b_high) + haxe_Int32._mul(khI64_high,b_low) | 0) | 0;
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	var x = hashTable.length;
	var keyIndex = haxe_Int64.divMod(this1,new haxe__$Int64__$_$_$Int64(x >> 31,x)).modulus.low;
	var incrementation = 0;
	while(true) {
		var currentKey = storage.readString(little_interpreter_memory_MemoryPointer.fromInt(hashTable.getInt32(keyIndex)));
		if(currentKey == key) {
			return { key : key, keyPointer : little_interpreter_memory_MemoryPointer.fromInt(hashTable.getInt32(keyIndex)), value : little_interpreter_memory_MemoryPointer.fromInt(hashTable.getInt32(keyIndex + 4 | 0)), type : little_interpreter_memory_MemoryPointer.fromInt(hashTable.getInt32(keyIndex + 8 | 0)), doc : little_interpreter_memory_MemoryPointer.fromInt(hashTable.getInt32(keyIndex + 12 | 0))};
		}
		keyIndex = keyIndex + little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE | 0;
		incrementation += little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE;
		if(keyIndex >= hashTable.length) {
			keyIndex = 0;
		}
		if(incrementation >= hashTable.length) {
			throw haxe_Exception.thrown("Key " + key + " not found in hash table");
		}
	}
};
little_interpreter_memory_HashTables.objectAddKey = function(object,key,value,type,doc,storage) {
	var hashTableBytes = storage.readBytes(storage.readPointer(little_interpreter_memory_MemoryPointer.fromInt(object + 4)),storage.readInt32(little_interpreter_memory_MemoryPointer.fromInt(object)));
	var table = little_interpreter_memory_HashTables.readObjectHashTable(hashTableBytes,storage);
	var tableSize = hashTableBytes.length;
	var occupied = table.length * little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE;
	if(occupied / tableSize >= 0.7) {
		table.push({ key : key, keyPointer : storage.storeString(key), value : value, type : type, doc : doc});
		haxe_Log.trace("Rehashing object: " + object,{ fileName : "little/interpreter/memory/HashTables.hx", lineNumber : 213, className : "little.interpreter.memory.HashTables", methodName : "objectAddKey"});
		var newHashTable = little_interpreter_memory_HashTables.generateObjectHashTable(table);
		storage.freeBytes(storage.readPointer(little_interpreter_memory_MemoryPointer.fromInt(object + 4)),hashTableBytes.length);
		var tablePointer = storage.storeBytes(newHashTable.length,newHashTable);
		haxe_Log.trace(tablePointer == null ? "null" : little_interpreter_memory_MemoryPointer.toString(tablePointer),{ fileName : "little/interpreter/memory/HashTables.hx", lineNumber : 220, className : "little.interpreter.memory.HashTables", methodName : "objectAddKey", customParams : [newHashTable.length]});
		storage.setPointer(little_interpreter_memory_MemoryPointer.fromInt(object + 4),tablePointer);
		storage.setInt32(little_interpreter_memory_MemoryPointer.fromInt(object),newHashTable.length);
		return;
	}
	var hashTablePosition = storage.readPointer(little_interpreter_memory_MemoryPointer.fromInt(object + 4));
	var keyHash = haxe_hash_Murmur1.hash(haxe_io_Bytes.ofString(key));
	var khI64_high = 0;
	var khI64_low = keyHash;
	var x = little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE;
	var b_high = x >> 31;
	var b_low = x;
	var mask = 65535;
	var al = khI64_low & mask;
	var ah = khI64_low >>> 16;
	var bl = b_low & mask;
	var bh = b_low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(khI64_low,b_high) + haxe_Int32._mul(khI64_high,b_low) | 0) | 0;
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	var x = hashTableBytes.length;
	var keyIndex = haxe_Int64.divMod(this1,new haxe__$Int64__$_$_$Int64(x >> 31,x)).modulus.low;
	var incrementation = 0;
	while(true) {
		if(hashTableBytes.getInt32(keyIndex) == 0) {
			storage.setPointer(little_interpreter_memory_MemoryPointer.fromInt(hashTablePosition + keyIndex | 0),little_interpreter_memory_MemoryPointer.fromInt(storage.storeString(key)));
			storage.setPointer(little_interpreter_memory_MemoryPointer.fromInt((hashTablePosition + keyIndex | 0) + 4 | 0),little_interpreter_memory_MemoryPointer.fromInt(value));
			storage.setPointer(little_interpreter_memory_MemoryPointer.fromInt((hashTablePosition + keyIndex | 0) + 8 | 0),little_interpreter_memory_MemoryPointer.fromInt(type));
			storage.setPointer(little_interpreter_memory_MemoryPointer.fromInt((hashTablePosition + keyIndex | 0) + 12 | 0),little_interpreter_memory_MemoryPointer.fromInt(doc));
			return;
		}
		keyIndex = keyIndex + little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE | 0;
		incrementation += little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE;
		if(keyIndex >= tableSize) {
			keyIndex = 0;
		}
		if(incrementation >= tableSize) {
			throw haxe_Exception.thrown("How did you get here? 6");
		}
	}
};
little_interpreter_memory_HashTables.objectSetKey = function(object,key,pair,storage) {
	var hashTableBytesLength = storage.readInt32(little_interpreter_memory_MemoryPointer.fromInt(object));
	var hashTablePosition = storage.readPointer(little_interpreter_memory_MemoryPointer.fromInt(object + 4));
	var keyHash = haxe_hash_Murmur1.hash(haxe_io_Bytes.ofString(key));
	var khI64_high = 0;
	var khI64_low = keyHash;
	var x = little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE;
	var b_high = x >> 31;
	var b_low = x;
	var mask = 65535;
	var al = khI64_low & mask;
	var ah = khI64_low >>> 16;
	var bl = b_low & mask;
	var bh = b_low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(khI64_low,b_high) + haxe_Int32._mul(khI64_high,b_low) | 0) | 0;
	var keyIndex = haxe_Int64.divMod(new haxe__$Int64__$_$_$Int64(high,low),new haxe__$Int64__$_$_$Int64(hashTableBytesLength >> 31,hashTableBytesLength)).modulus.low;
	var incrementation = 0;
	while(true) {
		var currentKey = storage.readString(storage.readPointer(little_interpreter_memory_MemoryPointer.fromInt(hashTablePosition + keyIndex | 0)));
		if(currentKey == key) {
			if(pair.value != null) {
				storage.setInt32(little_interpreter_memory_MemoryPointer.fromInt((hashTablePosition + keyIndex | 0) + 4 | 0),pair.value);
			}
			if(pair.type != null) {
				storage.setInt32(little_interpreter_memory_MemoryPointer.fromInt((hashTablePosition + keyIndex | 0) + 8 | 0),pair.type);
			}
			if(pair.doc != null) {
				storage.setInt32(little_interpreter_memory_MemoryPointer.fromInt((hashTablePosition + keyIndex | 0) + 12 | 0),pair.doc);
			}
			return;
		}
		keyIndex = keyIndex + little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE | 0;
		incrementation += little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE;
		if(keyIndex >= hashTableBytesLength) {
			keyIndex = 0;
		}
		if(incrementation >= hashTableBytesLength) {
			throw haxe_Exception.thrown("Cannot set a non-existing key in the object's hash table.");
		}
	}
};
little_interpreter_memory_HashTables.objectGetKey = function(object,key,storage) {
	var hashTableBytes = storage.readBytes(storage.readPointer(little_interpreter_memory_MemoryPointer.fromInt(object + 4)),storage.readInt32(little_interpreter_memory_MemoryPointer.fromInt(object)));
	return little_interpreter_memory_HashTables.hashTableGetKey(hashTableBytes,key,storage);
};
little_interpreter_memory_HashTables.getHashTableOf = function(objectPointer,storage) {
	var bytesLength = storage.readInt32(little_interpreter_memory_MemoryPointer.fromInt(objectPointer));
	var bytesPointer = storage.readPointer(little_interpreter_memory_MemoryPointer.fromInt(objectPointer + 4));
	return storage.readBytes(bytesPointer,bytesLength);
};
var little_interpreter_memory_MemoryPointer = {};
little_interpreter_memory_MemoryPointer.__properties__ = {set_rawLocation:"set_rawLocation",get_rawLocation:"get_rawLocation"};
little_interpreter_memory_MemoryPointer.get_rawLocation = function(this1) {
	return this1;
};
little_interpreter_memory_MemoryPointer.set_rawLocation = function(this1,v) {
	this1 = v;
	return this1;
};
little_interpreter_memory_MemoryPointer._new = function(address) {
	return address;
};
little_interpreter_memory_MemoryPointer.fromInt = function(i) {
	return little_interpreter_memory_MemoryPointer._new(i);
};
little_interpreter_memory_MemoryPointer.fromInt64 = function(i) {
	return little_interpreter_memory_MemoryPointer._new(i.low);
};
little_interpreter_memory_MemoryPointer.toString = function(this1) {
	return this1 + "";
};
little_interpreter_memory_MemoryPointer.toArray = function(this1) {
	var bytes = [];
	var i = this1;
	bytes.unshift(i & 255);
	i >>= 8;
	bytes.unshift(i & 255);
	i >>= 8;
	bytes.unshift(i & 255);
	i >>= 8;
	bytes.unshift(i & 255);
	i >>= 8;
	bytes.unshift(0);
	bytes.unshift(0);
	bytes.unshift(0);
	bytes.unshift(0);
	return bytes;
};
little_interpreter_memory_MemoryPointer.toBytes = function(this1) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(4));
	bytes.b[0] = this1 & 255 & 255;
	bytes.b[1] = this1 >> 8 & 255 & 255;
	bytes.b[2] = this1 >> 16 & 255 & 255;
	return bytes;
};
var little_interpreter_memory_OperatorType = $hxEnums["little.interpreter.memory.OperatorType"] = { __ename__:"little.interpreter.memory.OperatorType",__constructs__:null
	,LHS_RHS: {_hx_name:"LHS_RHS",_hx_index:0,__enum__:"little.interpreter.memory.OperatorType",toString:$estr}
	,LHS_ONLY: {_hx_name:"LHS_ONLY",_hx_index:1,__enum__:"little.interpreter.memory.OperatorType",toString:$estr}
	,RHS_ONLY: {_hx_name:"RHS_ONLY",_hx_index:2,__enum__:"little.interpreter.memory.OperatorType",toString:$estr}
};
little_interpreter_memory_OperatorType.__constructs__ = [little_interpreter_memory_OperatorType.LHS_RHS,little_interpreter_memory_OperatorType.LHS_ONLY,little_interpreter_memory_OperatorType.RHS_ONLY];
var little_lexer_Lexer = function() { };
$hxClasses["little.lexer.Lexer"] = little_lexer_Lexer;
little_lexer_Lexer.__name__ = "little.lexer.Lexer";
little_lexer_Lexer.lex = function(code) {
	var tokens = [];
	var i = 0;
	while(i < code.length) {
		var char = code.charAt(i);
		if(i < code.length - 2 && little_tools_TextTools.replace(HxOverrides.substr(code,i,3),"\"","").length == 0) {
			var string = "";
			var queuedNewlines = 0;
			i += 3;
			while(i < code.length - 2 && little_tools_TextTools.replace(HxOverrides.substr(code,i,3),"\"","").length != 0) {
				string += code.charAt(i);
				if(code.charAt(i) == "\n") {
					++queuedNewlines;
				}
				++i;
			}
			i += 2;
			var _g = 0;
			var _g1 = queuedNewlines;
			while(_g < _g1) {
				var j = _g++;
				tokens.push(little_lexer_LexerTokens.Newline);
			}
			tokens.push(little_lexer_LexerTokens.Documentation(StringTools.trim(little_tools_TextTools.replace(little_tools_TextTools.replace(string,"<br>","\n"),"</br>","\n"))));
		} else if(char == "\"") {
			var string1 = "";
			++i;
			while(i < code.length && code.charAt(i) != "\"") {
				string1 += code.charAt(i);
				++i;
			}
			tokens.push(little_lexer_LexerTokens.Characters(string1));
		} else if(little_tools_TextTools.contains("1234567890.",char)) {
			var num = char;
			++i;
			while(i < code.length && little_tools_TextTools.contains("1234567890.",code.charAt(i))) {
				num += code.charAt(i);
				++i;
			}
			--i;
			if(num == ".") {
				tokens.push(little_lexer_LexerTokens.Sign("."));
			} else if(StringTools.endsWith(num,".")) {
				tokens.push(little_lexer_LexerTokens.Number(little_tools_TextTools.replaceLast(num,".","")));
				tokens.push(little_lexer_LexerTokens.Sign("."));
			} else {
				tokens.push(little_lexer_LexerTokens.Number(num));
			}
		} else if(char == "\n") {
			tokens.push(little_lexer_LexerTokens.Newline);
		} else if(char == ";" || char == ",") {
			tokens.push(little_lexer_LexerTokens.SplitLine);
		} else if(little_lexer_Lexer.signs.indexOf(char) != -1) {
			var sign = char;
			++i;
			while(i < code.length && little_lexer_Lexer.signs.indexOf(code.charAt(i)) != -1) {
				sign += code.charAt(i);
				++i;
			}
			--i;
			tokens.push(little_lexer_LexerTokens.Sign(sign));
		} else if(new EReg("[^+-.!@#$%%^&*0-9 \t\n\r;,\\(\\)\\[\\]\\{\\}]","").match(char)) {
			var name = char;
			++i;
			while(i < code.length && new EReg("[^+-.!@#$%%^&* \t\n\r;,\\(\\)\\[\\]\\{\\}]","").match(code.charAt(i))) {
				name += code.charAt(i);
				++i;
			}
			--i;
			tokens.push(little_lexer_LexerTokens.Identifier(name));
		}
		++i;
	}
	tokens = little_lexer_Lexer.separateBooleanIdentifiers(tokens);
	tokens = little_lexer_Lexer.mergeOrSplitKnownSigns(tokens);
	return tokens;
};
little_lexer_Lexer.separateBooleanIdentifiers = function(tokens) {
	var result = new Array(tokens.length);
	var _g = 0;
	var _g1 = tokens.length;
	while(_g < _g1) {
		var i = _g++;
		var token = tokens[i];
		result[i] = Type.enumEq(token,little_lexer_LexerTokens.Identifier(little_Little.keywords.TRUE_VALUE)) || Type.enumEq(token,little_lexer_LexerTokens.Identifier(little_Little.keywords.FALSE_VALUE)) ? little_lexer_LexerTokens.Boolean(Type.enumParameters(token)[0]) : Type.enumEq(token,little_lexer_LexerTokens.Identifier(little_Little.keywords.NULL_VALUE)) ? little_lexer_LexerTokens.NullValue : token;
	}
	return result;
};
little_lexer_Lexer.mergeOrSplitKnownSigns = function(tokens) {
	var post = [];
	var i = 0;
	while(i < tokens.length) {
		var token = tokens[i];
		if(token._hx_index == 1) {
			var char = token.char;
			var recognizedSigns = little_tools_TextTools.sortByLength(little_Little.keywords.RECOGNIZED_SIGNS.concat([little_Little.keywords.PROPERTY_ACCESS_SIGN]));
			recognizedSigns.reverse();
			var shouldContinue = false;
			while(char.length > 0) {
				shouldContinue = false;
				var _g = 0;
				while(_g < recognizedSigns.length) {
					var sign = recognizedSigns[_g];
					++_g;
					if(StringTools.startsWith(char,sign)) {
						char = char.substring(sign.length);
						post.push(little_lexer_LexerTokens.Sign(sign));
						shouldContinue = true;
						break;
					}
				}
				if(shouldContinue) {
					continue;
				}
				post.push(little_lexer_LexerTokens.Sign(char.charAt(0)));
				char = char.substring(1);
			}
		} else {
			post.push(token);
		}
		++i;
	}
	return post;
};
var little_lexer_LexerTokens = $hxEnums["little.lexer.LexerTokens"] = { __ename__:"little.lexer.LexerTokens",__constructs__:null
	,Identifier: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"little.lexer.LexerTokens",toString:$estr}; },$_._hx_name="Identifier",$_.__params__ = ["name"],$_)
	,Sign: ($_=function(char) { return {_hx_index:1,char:char,__enum__:"little.lexer.LexerTokens",toString:$estr}; },$_._hx_name="Sign",$_.__params__ = ["char"],$_)
	,Number: ($_=function(num) { return {_hx_index:2,num:num,__enum__:"little.lexer.LexerTokens",toString:$estr}; },$_._hx_name="Number",$_.__params__ = ["num"],$_)
	,Boolean: ($_=function(value) { return {_hx_index:3,value:value,__enum__:"little.lexer.LexerTokens",toString:$estr}; },$_._hx_name="Boolean",$_.__params__ = ["value"],$_)
	,Characters: ($_=function(string) { return {_hx_index:4,string:string,__enum__:"little.lexer.LexerTokens",toString:$estr}; },$_._hx_name="Characters",$_.__params__ = ["string"],$_)
	,NullValue: {_hx_name:"NullValue",_hx_index:5,__enum__:"little.lexer.LexerTokens",toString:$estr}
	,Newline: {_hx_name:"Newline",_hx_index:6,__enum__:"little.lexer.LexerTokens",toString:$estr}
	,SplitLine: {_hx_name:"SplitLine",_hx_index:7,__enum__:"little.lexer.LexerTokens",toString:$estr}
	,Documentation: ($_=function(content) { return {_hx_index:8,content:content,__enum__:"little.lexer.LexerTokens",toString:$estr}; },$_._hx_name="Documentation",$_.__params__ = ["content"],$_)
};
little_lexer_LexerTokens.__constructs__ = [little_lexer_LexerTokens.Identifier,little_lexer_LexerTokens.Sign,little_lexer_LexerTokens.Number,little_lexer_LexerTokens.Boolean,little_lexer_LexerTokens.Characters,little_lexer_LexerTokens.NullValue,little_lexer_LexerTokens.Newline,little_lexer_LexerTokens.SplitLine,little_lexer_LexerTokens.Documentation];
var little_parser_ParserTokens = $hxEnums["little.parser.ParserTokens"] = { __ename__:"little.parser.ParserTokens",__constructs__:null
	,SetLine: ($_=function(line) { return {_hx_index:0,line:line,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="SetLine",$_.__params__ = ["line"],$_)
	,SplitLine: {_hx_name:"SplitLine",_hx_index:1,__enum__:"little.parser.ParserTokens",toString:$estr}
	,Variable: ($_=function(name,type,doc) { return {_hx_index:2,name:name,type:type,doc:doc,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="Variable",$_.__params__ = ["name","type","doc"],$_)
	,Function: ($_=function(name,params,type,doc) { return {_hx_index:3,name:name,params:params,type:type,doc:doc,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="Function",$_.__params__ = ["name","params","type","doc"],$_)
	,ConditionCall: ($_=function(name,exp,body) { return {_hx_index:4,name:name,exp:exp,body:body,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="ConditionCall",$_.__params__ = ["name","exp","body"],$_)
	,Read: ($_=function(name) { return {_hx_index:5,name:name,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="Read",$_.__params__ = ["name"],$_)
	,Write: ($_=function(assignees,value) { return {_hx_index:6,assignees:assignees,value:value,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="Write",$_.__params__ = ["assignees","value"],$_)
	,Identifier: ($_=function(word) { return {_hx_index:7,word:word,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="Identifier",$_.__params__ = ["word"],$_)
	,TypeDeclaration: ($_=function(value,type) { return {_hx_index:8,value:value,type:type,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="TypeDeclaration",$_.__params__ = ["value","type"],$_)
	,FunctionCall: ($_=function(name,params) { return {_hx_index:9,name:name,params:params,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="FunctionCall",$_.__params__ = ["name","params"],$_)
	,Return: ($_=function(value,type) { return {_hx_index:10,value:value,type:type,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="Return",$_.__params__ = ["value","type"],$_)
	,Expression: ($_=function(parts,type) { return {_hx_index:11,parts:parts,type:type,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="Expression",$_.__params__ = ["parts","type"],$_)
	,Block: ($_=function(body,type) { return {_hx_index:12,body:body,type:type,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="Block",$_.__params__ = ["body","type"],$_)
	,PartArray: ($_=function(parts) { return {_hx_index:13,parts:parts,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="PartArray",$_.__params__ = ["parts"],$_)
	,PropertyAccess: ($_=function(name,property) { return {_hx_index:14,name:name,property:property,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="PropertyAccess",$_.__params__ = ["name","property"],$_)
	,Sign: ($_=function(sign) { return {_hx_index:15,sign:sign,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="Sign",$_.__params__ = ["sign"],$_)
	,Number: ($_=function(num) { return {_hx_index:16,num:num,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="Number",$_.__params__ = ["num"],$_)
	,Decimal: ($_=function(num) { return {_hx_index:17,num:num,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="Decimal",$_.__params__ = ["num"],$_)
	,Characters: ($_=function(string) { return {_hx_index:18,string:string,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="Characters",$_.__params__ = ["string"],$_)
	,Documentation: ($_=function(doc) { return {_hx_index:19,doc:doc,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="Documentation",$_.__params__ = ["doc"],$_)
	,ErrorMessage: ($_=function(msg) { return {_hx_index:20,msg:msg,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="ErrorMessage",$_.__params__ = ["msg"],$_)
	,NullValue: {_hx_name:"NullValue",_hx_index:21,__enum__:"little.parser.ParserTokens",toString:$estr}
	,TrueValue: {_hx_name:"TrueValue",_hx_index:22,__enum__:"little.parser.ParserTokens",toString:$estr}
	,FalseValue: {_hx_name:"FalseValue",_hx_index:23,__enum__:"little.parser.ParserTokens",toString:$estr}
	,Custom: ($_=function(name,params) { return {_hx_index:24,name:name,params:params,__enum__:"little.parser.ParserTokens",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["name","params"],$_)
};
little_parser_ParserTokens.__constructs__ = [little_parser_ParserTokens.SetLine,little_parser_ParserTokens.SplitLine,little_parser_ParserTokens.Variable,little_parser_ParserTokens.Function,little_parser_ParserTokens.ConditionCall,little_parser_ParserTokens.Read,little_parser_ParserTokens.Write,little_parser_ParserTokens.Identifier,little_parser_ParserTokens.TypeDeclaration,little_parser_ParserTokens.FunctionCall,little_parser_ParserTokens.Return,little_parser_ParserTokens.Expression,little_parser_ParserTokens.Block,little_parser_ParserTokens.PartArray,little_parser_ParserTokens.PropertyAccess,little_parser_ParserTokens.Sign,little_parser_ParserTokens.Number,little_parser_ParserTokens.Decimal,little_parser_ParserTokens.Characters,little_parser_ParserTokens.Documentation,little_parser_ParserTokens.ErrorMessage,little_parser_ParserTokens.NullValue,little_parser_ParserTokens.TrueValue,little_parser_ParserTokens.FalseValue,little_parser_ParserTokens.Custom];
var little_tools_ParserTokensSimple = $hxEnums["little.tools.ParserTokensSimple"] = { __ename__:"little.tools.ParserTokensSimple",__constructs__:null
	,SET_LINE: {_hx_name:"SET_LINE",_hx_index:0,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,SPLIT_LINE: {_hx_name:"SPLIT_LINE",_hx_index:1,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,VARIABLE: {_hx_name:"VARIABLE",_hx_index:2,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,FUNCTION: {_hx_name:"FUNCTION",_hx_index:3,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,CONDITION_CALL: {_hx_name:"CONDITION_CALL",_hx_index:4,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,READ: {_hx_name:"READ",_hx_index:5,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,WRITE: {_hx_name:"WRITE",_hx_index:6,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,IDENTIFIER: {_hx_name:"IDENTIFIER",_hx_index:7,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,TYPE_DECLARATION: {_hx_name:"TYPE_DECLARATION",_hx_index:8,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,FUNCTION_CALL: {_hx_name:"FUNCTION_CALL",_hx_index:9,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,RETURN: {_hx_name:"RETURN",_hx_index:10,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,EXPRESSION: {_hx_name:"EXPRESSION",_hx_index:11,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,BLOCK: {_hx_name:"BLOCK",_hx_index:12,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,PART_ARRAY: {_hx_name:"PART_ARRAY",_hx_index:13,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,PROPERTY_ACCESS: {_hx_name:"PROPERTY_ACCESS",_hx_index:14,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,SIGN: {_hx_name:"SIGN",_hx_index:15,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,NUMBER: {_hx_name:"NUMBER",_hx_index:16,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,DECIMAL: {_hx_name:"DECIMAL",_hx_index:17,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,CHARACTERS: {_hx_name:"CHARACTERS",_hx_index:18,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,DOCUMENTATION: {_hx_name:"DOCUMENTATION",_hx_index:19,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,MODULE: {_hx_name:"MODULE",_hx_index:20,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,EXTERNAL: {_hx_name:"EXTERNAL",_hx_index:21,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,EXTERNAL_CONDITION: {_hx_name:"EXTERNAL_CONDITION",_hx_index:22,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,ERROR_MESSAGE: {_hx_name:"ERROR_MESSAGE",_hx_index:23,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,NULL_VALUE: {_hx_name:"NULL_VALUE",_hx_index:24,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,TRUE_VALUE: {_hx_name:"TRUE_VALUE",_hx_index:25,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,FALSE_VALUE: {_hx_name:"FALSE_VALUE",_hx_index:26,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
	,NOBODY: {_hx_name:"NOBODY",_hx_index:27,__enum__:"little.tools.ParserTokensSimple",toString:$estr}
};
little_tools_ParserTokensSimple.__constructs__ = [little_tools_ParserTokensSimple.SET_LINE,little_tools_ParserTokensSimple.SPLIT_LINE,little_tools_ParserTokensSimple.VARIABLE,little_tools_ParserTokensSimple.FUNCTION,little_tools_ParserTokensSimple.CONDITION_CALL,little_tools_ParserTokensSimple.READ,little_tools_ParserTokensSimple.WRITE,little_tools_ParserTokensSimple.IDENTIFIER,little_tools_ParserTokensSimple.TYPE_DECLARATION,little_tools_ParserTokensSimple.FUNCTION_CALL,little_tools_ParserTokensSimple.RETURN,little_tools_ParserTokensSimple.EXPRESSION,little_tools_ParserTokensSimple.BLOCK,little_tools_ParserTokensSimple.PART_ARRAY,little_tools_ParserTokensSimple.PROPERTY_ACCESS,little_tools_ParserTokensSimple.SIGN,little_tools_ParserTokensSimple.NUMBER,little_tools_ParserTokensSimple.DECIMAL,little_tools_ParserTokensSimple.CHARACTERS,little_tools_ParserTokensSimple.DOCUMENTATION,little_tools_ParserTokensSimple.MODULE,little_tools_ParserTokensSimple.EXTERNAL,little_tools_ParserTokensSimple.EXTERNAL_CONDITION,little_tools_ParserTokensSimple.ERROR_MESSAGE,little_tools_ParserTokensSimple.NULL_VALUE,little_tools_ParserTokensSimple.TRUE_VALUE,little_tools_ParserTokensSimple.FALSE_VALUE,little_tools_ParserTokensSimple.NOBODY];
var little_tools__$TextTools_MultilangFonts = function() {
	this.serif = "assets/texter/TextTools/serif.ttf";
	this.sans = "assets/texter/TextTools/sans.ttf";
};
$hxClasses["little.tools._TextTools.MultilangFonts"] = little_tools__$TextTools_MultilangFonts;
little_tools__$TextTools_MultilangFonts.__name__ = "little.tools._TextTools.MultilangFonts";
little_tools__$TextTools_MultilangFonts.prototype = {
	sans: null
	,serif: null
	,__class__: little_tools__$TextTools_MultilangFonts
};
var little_tools_TextTools = function() { };
$hxClasses["little.tools.TextTools"] = little_tools_TextTools;
little_tools_TextTools.__name__ = "little.tools.TextTools";
little_tools_TextTools.replaceLast = function(string,replace,by) {
	var place = string.lastIndexOf(replace);
	var result = string.substring(0,place) + by + string.substring(place + replace.length);
	return result;
};
little_tools_TextTools.replaceFirst = function(string,replace,by) {
	var place = string.indexOf(replace);
	var result = string.substring(0,place) + by + string.substring(place + replace.length);
	return result;
};
little_tools_TextTools.splitOnFirst = function(string,delimiter) {
	var place = string.indexOf(delimiter);
	var result = [];
	result.push(string.substring(0,place));
	result.push(string.substring(place + delimiter.length));
	return result;
};
little_tools_TextTools.splitOnLast = function(string,delimiter) {
	var place = string.lastIndexOf(delimiter);
	var result = [];
	result.push(string.substring(0,place));
	result.push(string.substring(place + delimiter.length));
	return result;
};
little_tools_TextTools.splitOnParagraph = function(text) {
	return new EReg("<p>|</p>|\n\n|\r\n\r\n","g").split(text);
};
little_tools_TextTools.filter = function(text,filter) {
	if(((filter) instanceof EReg)) {
		var pattern = filter;
		text = text.replace(pattern.r,"");
		return text;
	}
	var patternType = filter;
	if(little_tools_TextTools.replaceFirst(text,"/","") != patternType) {
		var regexDetector = new EReg("^~?/(.*)/(.*)$","s");
		regexDetector.match(patternType);
		return filter(text,new EReg(regexDetector.matched(1),regexDetector.matched(2)));
	}
	switch(patternType.toLowerCase()) {
	case "alpha":
		return filter(text,new EReg("[^a-zA-Z]","g"));
	case "alphanumeric":
		return filter(text,new EReg("[^a-zA-Z0-9]","g"));
	case "numeric":
		return filter(text,new EReg("[^0-9]","g"));
	}
	return text;
};
little_tools_TextTools.indexesOf = function(string,sub) {
	var indexArray = [];
	var removedLength = 0;
	var index = string.indexOf(sub);
	while(index != -1) {
		indexArray.push({ startIndex : index + removedLength, endIndex : index + sub.length + removedLength - 1});
		removedLength += sub.length;
		string = string.substring(0,index) + string.substring(index + sub.length,string.length);
		index = string.indexOf(sub);
	}
	return indexArray;
};
little_tools_TextTools.indexesOfSubs = function(string,subs) {
	var indexArray = [];
	var orgString = string;
	var _g = 0;
	while(_g < subs.length) {
		var sub = subs[_g];
		++_g;
		var removedLength = 0;
		var index = string.indexOf(sub);
		while(index != -1) {
			indexArray.push({ startIndex : index + removedLength, endIndex : index + sub.length + removedLength});
			removedLength += sub.length;
			string = string.substring(0,index) + string.substring(index + sub.length,string.length);
			index = string.indexOf(sub);
		}
		string = orgString;
	}
	return indexArray;
};
little_tools_TextTools.indexesFromArray = function(string,subs) {
	return little_tools_TextTools.indexesOfSubs(string,subs);
};
little_tools_TextTools.indexesFromEReg = function(string,ereg) {
	var indexArray = [];
	while(ereg.match(string)) {
		var info = ereg.matchedPos();
		var by = little_tools_TextTools.multiply("⨔",info.len);
		string = string.replace(ereg.r,by);
		indexArray.push({ startIndex : info.pos, endIndex : info.pos + info.len});
	}
	return indexArray;
};
little_tools_TextTools.multiply = function(string,times) {
	var stringcopy = string;
	if(times <= 0) {
		return "";
	}
	while(--times > 0) string += stringcopy;
	return string;
};
little_tools_TextTools.subtract = function(string,by) {
	return little_tools_TextTools.replaceLast(string,by,"");
};
little_tools_TextTools.loremIpsum = function(paragraphs,length) {
	if(length == null) {
		length = -1;
	}
	if(paragraphs == null) {
		paragraphs = 1;
	}
	var text = StringTools.replace(little_tools_TextTools.loremIpsumText,"\t","");
	var loremArray = new EReg("<p>|</p>|\n\n|\r\n\r\n","g").split(text);
	var loremText = loremArray.join("\n\n");
	if(paragraphs > loremArray.length) {
		var multiplier = Math.ceil(paragraphs / loremArray.length);
		loremText = little_tools_TextTools.multiply(little_tools_TextTools.loremIpsumText,multiplier);
		loremArray = new EReg("<p>|</p>|\n\n|\r\n\r\n","g").split(loremText);
	}
	while(loremArray.length > paragraphs) loremArray.pop();
	var loremString = loremArray.join("\n\n");
	if(length != -1) {
		return loremString.substring(0,length);
	}
	return loremString;
};
little_tools_TextTools.sortByLength = function(array) {
	array.sort(function(a,b) {
		return a.length - b.length;
	});
	return array;
};
little_tools_TextTools.sortByValue = function(array) {
	array.sort(function(a,b) {
		return a - b | 0;
	});
	return array;
};
little_tools_TextTools.sortByIntValue = function(array) {
	array.sort(function(a,b) {
		return a - b;
	});
	return array;
};
little_tools_TextTools.getLineIndexOfChar = function(string,index) {
	var lines = string.split("\n");
	var lineIndex = 0;
	var _g = 0;
	var _g1 = lines.length;
	while(_g < _g1) {
		var i = _g++;
		if(index < lines[i].length) {
			lineIndex = i;
			break;
		}
		index -= lines[i].length;
	}
	return lineIndex;
};
little_tools_TextTools.countOccurrencesOf = function(string,sub) {
	var count = 0;
	while(little_tools_TextTools.contains(string,sub)) {
		++count;
		string = little_tools_TextTools.replaceFirst(string,sub,"");
	}
	return count;
};
little_tools_TextTools.contains = function(string,contains) {
	if(string == null) {
		return false;
	}
	return string.indexOf(contains) != -1;
};
little_tools_TextTools.remove = function(string,sub) {
	return little_tools_TextTools.replace(string,sub,"");
};
little_tools_TextTools.replace = function(string,replace,$with) {
	if(replace == null || $with == null) {
		return string;
	}
	return StringTools.replace(string,replace,$with);
};
little_tools_TextTools.reverse = function(string) {
	var returnedString = "";
	var _g = 1;
	var _g1 = string.length + 1;
	while(_g < _g1) {
		var i = _g++;
		returnedString += string.charAt(string.length - 1);
	}
	return returnedString;
};
little_tools_TextTools.insert = function(string,substring,at) {
	return string.substring(0,at + 1) + substring + string.substring(at + 1);
};
little_tools_TextTools.parseBool = function(string) {
	if(string == "true" || parseFloat(string) != null && parseFloat(string) != 0) {
		return true;
	} else if(string == "false") {
		return false;
	} else {
		return null;
	}
};
var little_parser_Parser = function() { };
$hxClasses["little.parser.Parser"] = little_parser_Parser;
little_parser_Parser.__name__ = "little.parser.Parser";
little_parser_Parser.__properties__ = {set_line:"set_line",get_line:"get_line"};
little_parser_Parser.parse = function(lexerTokens) {
	var tokens = little_parser_Parser.convert(lexerTokens);
	tokens = little_parser_Parser.mergeBlocks(tokens);
	tokens = little_parser_Parser.mergeExpressions(tokens);
	tokens = little_parser_Parser.mergePropertyOperations(tokens);
	tokens = little_parser_Parser.mergeTypeDecls(tokens);
	tokens = little_parser_Parser.mergeComplexStructures(tokens);
	tokens = little_parser_Parser.mergeCalls(tokens);
	tokens = little_parser_Parser.mergeWrites(tokens);
	tokens = little_parser_Parser.mergeValuesWithTypeDeclarations(tokens);
	tokens = little_parser_Parser.mergeNonBlockBodies(tokens);
	var _g = 0;
	var _g1 = little_parser_Parser.additionalParsingLevels;
	while(_g < _g1.length) {
		var level = _g1[_g];
		++_g;
		tokens = level(tokens);
	}
	return tokens;
};
little_parser_Parser.convert = function(lexerTokens) {
	var tokens = [];
	var line = 1;
	var i = 0;
	while(i < lexerTokens.length) {
		var token = lexerTokens[i];
		switch(token._hx_index) {
		case 0:
			var name = token.name;
			tokens.push(little_parser_ParserTokens.Identifier(name));
			break;
		case 1:
			var char = token.char;
			tokens.push(little_parser_ParserTokens.Sign(char));
			break;
		case 2:
			var num = token.num;
			if(little_tools_TextTools.countOccurrencesOf(num,".") == 0) {
				tokens.push(little_parser_ParserTokens.Number(num));
			} else if(little_tools_TextTools.countOccurrencesOf(num,".") == 1) {
				tokens.push(little_parser_ParserTokens.Decimal(num));
			}
			break;
		case 3:
			var value = token.value;
			if(value == little_Little.keywords.FALSE_VALUE) {
				tokens.push(little_parser_ParserTokens.FalseValue);
			} else if(value == little_Little.keywords.TRUE_VALUE) {
				tokens.push(little_parser_ParserTokens.TrueValue);
			}
			break;
		case 4:
			var string = token.string;
			tokens.push(little_parser_ParserTokens.Characters(string));
			break;
		case 5:
			tokens.push(little_parser_ParserTokens.NullValue);
			break;
		case 6:
			tokens.push(little_parser_ParserTokens.SetLine(line));
			++line;
			break;
		case 7:
			tokens.push(little_parser_ParserTokens.SplitLine);
			break;
		case 8:
			var content = token.content;
			tokens.push(little_parser_ParserTokens.Documentation(content));
			break;
		}
		++i;
	}
	return tokens;
};
little_parser_Parser.mergeBlocks = function(pre) {
	if(pre == null) {
		return null;
	}
	if(pre.length == 1 && pre[0] == null) {
		return [null];
	}
	var post = [];
	var i = 0;
	while(i < pre.length) {
		var token = pre[i];
		switch(token._hx_index) {
		case 0:
			var line = token.line;
			little_parser_Parser.setLine(line);
			post.push(token);
			break;
		case 1:
			little_parser_Parser.nextPart();
			post.push(token);
			break;
		case 11:
			var parts = token.parts;
			var type = token.type;
			post.push(little_parser_ParserTokens.Expression(little_parser_Parser.mergeBlocks(parts),little_parser_Parser.mergeBlocks([type])[0]));
			break;
		case 12:
			var body = token.body;
			var type1 = token.type;
			post.push(little_parser_ParserTokens.Block(little_parser_Parser.mergeBlocks(body),little_parser_Parser.mergeBlocks([type1])[0]));
			break;
		case 15:
			if(token.sign == "{") {
				var blockStartLine = little_parser_Parser.get_line();
				var blockBody = [];
				var blockStack = 1;
				while(i + 1 < pre.length) {
					var lookahead = pre[i + 1];
					if(Type.enumEq(lookahead,little_parser_ParserTokens.Sign("{"))) {
						++blockStack;
						blockBody.push(lookahead);
					} else if(Type.enumEq(lookahead,little_parser_ParserTokens.Sign("}"))) {
						--blockStack;
						if(blockStack == 0) {
							break;
						}
						blockBody.push(lookahead);
					} else {
						blockBody.push(lookahead);
					}
					++i;
				}
				if(i + 1 == pre.length) {
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Unclosed code block, starting at line " + blockStartLine));
					return null;
				}
				post.push(little_parser_ParserTokens.Block(little_parser_Parser.mergeBlocks(blockBody),null));
				++i;
			} else {
				post.push(token);
			}
			break;
		case 24:
			var name = token.name;
			var params = token.params;
			var result = new Array(params.length);
			var _g = 0;
			var _g1 = params.length;
			while(_g < _g1) {
				var i1 = _g++;
				result[i1] = little_parser_Parser.mergeBlocks([params[i1]])[0];
			}
			post.push(little_parser_ParserTokens.Custom(name,result));
			break;
		default:
			post.push(token);
		}
		++i;
	}
	little_parser_Parser.resetLines();
	return post;
};
little_parser_Parser.mergeExpressions = function(pre) {
	if(pre == null) {
		return null;
	}
	if(pre.length == 1 && pre[0] == null) {
		return [null];
	}
	var post = [];
	var i = 0;
	while(i < pre.length) {
		var token = pre[i];
		switch(token._hx_index) {
		case 0:
			var line = token.line;
			little_parser_Parser.setLine(line);
			post.push(token);
			break;
		case 1:
			little_parser_Parser.nextPart();
			post.push(token);
			break;
		case 11:
			var parts = token.parts;
			var type = token.type;
			post.push(little_parser_ParserTokens.Expression(little_parser_Parser.mergeExpressions(parts),little_parser_Parser.mergeExpressions([type])[0]));
			break;
		case 12:
			var body = token.body;
			var type1 = token.type;
			post.push(little_parser_ParserTokens.Block(little_parser_Parser.mergeExpressions(body),little_parser_Parser.mergeExpressions([type1])[0]));
			break;
		case 15:
			if(token.sign == "(") {
				var expressionStartLine = little_parser_Parser.get_line();
				var expressionBody = [];
				var expressionStack = 1;
				while(i + 1 < pre.length) {
					var lookahead = pre[i + 1];
					if(Type.enumEq(lookahead,little_parser_ParserTokens.Sign("("))) {
						++expressionStack;
						expressionBody.push(lookahead);
					} else if(Type.enumEq(lookahead,little_parser_ParserTokens.Sign(")"))) {
						--expressionStack;
						if(expressionStack == 0) {
							break;
						}
						expressionBody.push(lookahead);
					} else {
						expressionBody.push(lookahead);
					}
					++i;
				}
				if(i + 1 == pre.length) {
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Unclosed expression, starting at line " + expressionStartLine));
					return null;
				}
				post.push(little_parser_ParserTokens.Expression(little_parser_Parser.mergeExpressions(expressionBody),null));
				++i;
			} else {
				post.push(token);
			}
			break;
		case 24:
			var name = token.name;
			var params = token.params;
			var result = new Array(params.length);
			var _g = 0;
			var _g1 = params.length;
			while(_g < _g1) {
				var i1 = _g++;
				result[i1] = little_parser_Parser.mergeExpressions([params[i1]])[0];
			}
			post.push(little_parser_ParserTokens.Custom(name,result));
			break;
		default:
			post.push(token);
		}
		++i;
	}
	little_parser_Parser.resetLines();
	return post;
};
little_parser_Parser.mergePropertyOperations = function(pre) {
	if(pre == null) {
		return null;
	}
	if(pre.length == 1 && pre[0] == null) {
		return [null];
	}
	var post = [];
	var i = 0;
	while(i < pre.length) {
		var token = pre[i];
		switch(token._hx_index) {
		case 0:
			var line = token.line;
			little_parser_Parser.setLine(line);
			post.push(token);
			break;
		case 1:
			little_parser_Parser.nextPart();
			post.push(token);
			break;
		case 11:
			var parts = token.parts;
			var type = token.type;
			post.push(little_parser_ParserTokens.Expression(little_parser_Parser.mergePropertyOperations(parts),little_parser_Parser.mergePropertyOperations([type])[0]));
			break;
		case 12:
			var body = token.body;
			var type1 = token.type;
			post.push(little_parser_ParserTokens.Block(little_parser_Parser.mergePropertyOperations(body),little_parser_Parser.mergePropertyOperations([type1])[0]));
			break;
		case 15:
			if(token.sign == little_Little.keywords.PROPERTY_ACCESS_SIGN == true) {
				if(i + 1 >= pre.length) {
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Property access cut off by the end of file, block or expression."),"Parser");
					return null;
				}
				if(post.length == 0) {
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Property access cut off by the start of file, block or expression."),"Parser");
					return null;
				}
				var lookbehind = post.pop();
				if(lookbehind == null) {
					var field = pre[++i];
					var tmp;
					if(i + 1 < pre.length) {
						var token1 = pre[i + 1];
						var _this = [little_tools_ParserTokensSimple.EXPRESSION].slice();
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i1 = _g++;
							var x = _this[i1];
							result[i1] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
						}
						tmp = result.indexOf($hxEnums[token1.__enum__].__constructs__[token1._hx_index]._hx_name.toLowerCase()) != -1;
					} else {
						tmp = false;
					}
					if(tmp) {
						var expression = pre[++i];
						post.push(little_parser_ParserTokens.FunctionCall(little_parser_ParserTokens.PropertyAccess(lookbehind,field),expression));
					} else {
						post.push(little_parser_ParserTokens.PropertyAccess(lookbehind,field));
					}
				} else {
					switch(lookbehind._hx_index) {
					case 0:
						var _g2 = lookbehind.line;
						little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Property access cut off by the start of a line, or by a line split (; or ,)."),"Parser");
						return null;
					case 1:
						little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Property access cut off by the start of a line, or by a line split (; or ,)."),"Parser");
						return null;
					default:
						var field1 = pre[++i];
						var tmp1;
						if(i + 1 < pre.length) {
							var token2 = pre[i + 1];
							var _this1 = [little_tools_ParserTokensSimple.EXPRESSION].slice();
							var result1 = new Array(_this1.length);
							var _g3 = 0;
							var _g4 = _this1.length;
							while(_g3 < _g4) {
								var i2 = _g3++;
								var x1 = _this1[i2];
								result1[i2] = little_tools_TextTools.remove($hxEnums[x1.__enum__].__constructs__[x1._hx_index]._hx_name,"_").toLowerCase();
							}
							tmp1 = result1.indexOf($hxEnums[token2.__enum__].__constructs__[token2._hx_index]._hx_name.toLowerCase()) != -1;
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							var expression1 = pre[++i];
							post.push(little_parser_ParserTokens.FunctionCall(little_parser_ParserTokens.PropertyAccess(lookbehind,field1),expression1));
						} else {
							post.push(little_parser_ParserTokens.PropertyAccess(lookbehind,field1));
						}
					}
				}
			} else {
				post.push(token);
			}
			break;
		case 24:
			var name = token.name;
			var params = token.params;
			var result2 = new Array(params.length);
			var _g5 = 0;
			var _g6 = params.length;
			while(_g5 < _g6) {
				var i3 = _g5++;
				result2[i3] = little_parser_Parser.mergePropertyOperations([params[i3]])[0];
			}
			post.push(little_parser_ParserTokens.Custom(name,result2));
			break;
		default:
			post.push(token);
		}
		++i;
	}
	little_parser_Parser.resetLines();
	return post;
};
little_parser_Parser.mergeTypeDecls = function(pre) {
	if(pre == null) {
		return null;
	}
	if(pre.length == 1 && pre[0] == null) {
		return [null];
	}
	var post = [];
	var i = 0;
	while(i < pre.length) {
		var token = pre[i];
		switch(token._hx_index) {
		case 0:
			var line = token.line;
			little_parser_Parser.setLine(line);
			post.push(token);
			break;
		case 1:
			little_parser_Parser.nextPart();
			post.push(token);
			break;
		case 7:
			var word = token.word;
			if(word == little_Little.keywords.TYPE_DECL_OR_CAST && i + 1 < pre.length) {
				var lookahead = pre[i + 1];
				post.push(little_parser_ParserTokens.TypeDeclaration(null,little_parser_Parser.mergeTypeDecls([lookahead])[0]));
				++i;
			} else if(word == little_Little.keywords.TYPE_DECL_OR_CAST) {
				if(i + 1 == pre.length) {
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Incomplete type declaration, make sure to input a type after the `" + little_Little.keywords.TYPE_DECL_OR_CAST + "`."));
					return null;
				}
			} else {
				post.push(token);
			}
			break;
		case 11:
			var parts = token.parts;
			var type = token.type;
			post.push(little_parser_ParserTokens.Expression(little_parser_Parser.mergeTypeDecls(parts),little_parser_Parser.mergeTypeDecls([type])[0]));
			break;
		case 12:
			var body = token.body;
			var type1 = token.type;
			post.push(little_parser_ParserTokens.Block(little_parser_Parser.mergeTypeDecls(body),little_parser_Parser.mergeTypeDecls([type1])[0]));
			break;
		case 14:
			var name = token.name;
			var property = token.property;
			post.push(little_parser_ParserTokens.PropertyAccess(little_parser_Parser.mergeTypeDecls([name])[0],little_parser_Parser.mergeTypeDecls([property])[0]));
			break;
		case 24:
			var name1 = token.name;
			var params = token.params;
			var result = new Array(params.length);
			var _g = 0;
			var _g1 = params.length;
			while(_g < _g1) {
				var i1 = _g++;
				result[i1] = little_parser_Parser.mergeTypeDecls([params[i1]])[0];
			}
			post.push(little_parser_ParserTokens.Custom(name1,result));
			break;
		default:
			post.push(token);
		}
		++i;
	}
	little_parser_Parser.resetLines();
	return post;
};
little_parser_Parser.mergeComplexStructures = function(pre) {
	if(pre == null) {
		return null;
	}
	if(pre.length == 1 && pre[0] == null) {
		return [null];
	}
	var post = [];
	var currentDoc = null;
	var i = 0;
	while(i < pre.length) {
		var token = pre[i];
		switch(token._hx_index) {
		case 0:
			var line = token.line;
			little_parser_Parser.setLine(line);
			post.push(token);
			break;
		case 1:
			little_parser_Parser.nextPart();
			post.push(token);
			break;
		case 7:
			var _g = token.word;
			var _hx_tmp;
			var _hx_tmp1;
			if(_g == little_Little.keywords.VARIABLE_DECLARATION == true) {
				++i;
				if(i >= pre.length) {
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Missing variable name, variable is cut off by the end of the file, block or expression."),"Parser");
					return null;
				}
				var name = null;
				var type = null;
				_hx_loop2: while(i < pre.length) {
					var lookahead = pre[i];
					switch(lookahead._hx_index) {
					case 0:
						var _g1 = lookahead.line;
						--i;
						break _hx_loop2;
					case 1:
						--i;
						break _hx_loop2;
					case 8:
						var _g2 = lookahead.value;
						var typeToken = lookahead.type;
						if(name == null) {
							little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Missing variable name before type declaration."),"Parser");
							return null;
						}
						type = typeToken;
						break _hx_loop2;
					case 11:
						var body = lookahead.parts;
						var type1 = lookahead.type;
						if(name == null) {
							name = little_parser_ParserTokens.Expression(little_parser_Parser.mergeComplexStructures(body),little_parser_Parser.mergeComplexStructures([type1])[0]);
						} else if(type1 == null) {
							type1 = little_parser_ParserTokens.Expression(little_parser_Parser.mergeComplexStructures(body),little_parser_Parser.mergeComplexStructures([type1])[0]);
						} else {
							--i;
							break _hx_loop2;
						}
						break;
					case 12:
						var body1 = lookahead.body;
						var type2 = lookahead.type;
						if(name == null) {
							name = little_parser_ParserTokens.Block(little_parser_Parser.mergeComplexStructures(body1),little_parser_Parser.mergeComplexStructures([type2])[0]);
						} else if(type2 == null) {
							type2 = little_parser_ParserTokens.Block(little_parser_Parser.mergeComplexStructures(body1),little_parser_Parser.mergeComplexStructures([type2])[0]);
						} else {
							--i;
							break _hx_loop2;
						}
						break;
					case 15:
						if(lookahead.sign == "=") {
							--i;
							break _hx_loop2;
						} else if(name == null) {
							name = lookahead;
						} else {
							var tmp;
							if(type == null) {
								var _this = [little_tools_ParserTokensSimple.TYPE_DECLARATION].slice();
								var result = new Array(_this.length);
								var _g3 = 0;
								var _g4 = _this.length;
								while(_g3 < _g4) {
									var i1 = _g3++;
									var x = _this[i1];
									result[i1] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
								}
								tmp = result.indexOf($hxEnums[lookahead.__enum__].__constructs__[lookahead._hx_index]._hx_name.toLowerCase()) != -1;
							} else {
								tmp = false;
							}
							if(tmp) {
								type = lookahead;
							} else {
								--i;
								break _hx_loop2;
							}
						}
						break;
					default:
						if(name == null) {
							name = lookahead;
						} else {
							var tmp1;
							if(type == null) {
								var _this1 = [little_tools_ParserTokensSimple.TYPE_DECLARATION].slice();
								var result1 = new Array(_this1.length);
								var _g5 = 0;
								var _g6 = _this1.length;
								while(_g5 < _g6) {
									var i2 = _g5++;
									var x1 = _this1[i2];
									result1[i2] = little_tools_TextTools.remove($hxEnums[x1.__enum__].__constructs__[x1._hx_index]._hx_name,"_").toLowerCase();
								}
								tmp1 = result1.indexOf($hxEnums[lookahead.__enum__].__constructs__[lookahead._hx_index]._hx_name.toLowerCase()) != -1;
							} else {
								tmp1 = false;
							}
							if(tmp1) {
								type = lookahead;
							} else {
								--i;
								break _hx_loop2;
							}
						}
					}
					++i;
				}
				if(name == null) {
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Missing variable name, variable is cut off by the end of the file, block or expression."),"Parser");
				}
				post.push(little_parser_ParserTokens.Variable(name,type,currentDoc));
				currentDoc = null;
			} else {
				_hx_tmp1 = _g == little_Little.keywords.FUNCTION_DECLARATION;
				if(_hx_tmp1 == true) {
					++i;
					if(i >= pre.length) {
						little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Missing function name, function is cut off by the end of the file, block or expression."),"Parser");
						return null;
					}
					if(i + 1 >= pre.length) {
						little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Missing function parameter body, function is cut off by the end of the file, block or expression."),"Parser");
						return null;
					}
					var name1 = null;
					var params = null;
					var type3 = null;
					_hx_loop5: while(i < pre.length) {
						var lookahead1 = pre[i];
						switch(lookahead1._hx_index) {
						case 8:
							var _g7 = lookahead1.value;
							var typeToken1 = lookahead1.type;
							if(name1 == null) {
								little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Missing function name and parameters before type declaration."),"Parser");
								return null;
							} else if(params == null) {
								little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Missing function parameters before type declaration."),"Parser");
								return null;
							}
							type3 = little_parser_Parser.mergeComplexStructures([typeToken1])[0];
							break _hx_loop5;
						case 11:
							var body2 = lookahead1.parts;
							var type4 = lookahead1.type;
							if(name1 == null) {
								name1 = little_parser_ParserTokens.Expression(little_parser_Parser.mergeComplexStructures(body2),little_parser_Parser.mergeComplexStructures([type4])[0]);
							} else if(params == null) {
								params = little_parser_ParserTokens.Expression(little_parser_Parser.mergeComplexStructures(body2),little_parser_Parser.mergeComplexStructures([type4])[0]);
							} else if(type4 == null) {
								type4 = little_parser_ParserTokens.Expression(little_parser_Parser.mergeComplexStructures(body2),little_parser_Parser.mergeComplexStructures([type4])[0]);
							} else {
								break _hx_loop5;
							}
							break;
						case 12:
							var body3 = lookahead1.body;
							var type5 = lookahead1.type;
							if(name1 == null) {
								name1 = little_parser_ParserTokens.Block(little_parser_Parser.mergeComplexStructures(body3),little_parser_Parser.mergeComplexStructures([type5])[0]);
							} else if(params == null) {
								params = little_parser_ParserTokens.Block(little_parser_Parser.mergeComplexStructures(body3),little_parser_Parser.mergeComplexStructures([type5])[0]);
							} else if(type5 == null) {
								type5 = little_parser_ParserTokens.Block(little_parser_Parser.mergeComplexStructures(body3),little_parser_Parser.mergeComplexStructures([type5])[0]);
							} else {
								break _hx_loop5;
							}
							break;
						case 15:
							if(lookahead1.sign == "=") {
								--i;
								break _hx_loop5;
							} else if(name1 == null) {
								name1 = lookahead1;
							} else if(params == null) {
								params = lookahead1;
							} else if(type3 == null && $hxEnums[lookahead1.__enum__].__constructs__[lookahead1._hx_index]._hx_name == "TypeDeclaration") {
								type3 = little_parser_Parser.mergeComplexStructures([Type.enumParameters(lookahead1)[1]])[0];
							} else {
								break _hx_loop5;
							}
							break;
						default:
							if(name1 == null) {
								name1 = lookahead1;
							} else if(params == null) {
								params = lookahead1;
							} else if(type3 == null && $hxEnums[lookahead1.__enum__].__constructs__[lookahead1._hx_index]._hx_name == "TypeDeclaration") {
								type3 = little_parser_Parser.mergeComplexStructures([Type.enumParameters(lookahead1)[1]])[0];
							} else {
								break _hx_loop5;
							}
						}
						++i;
					}
					if(name1 == null) {
						little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Missing function name and parameters, function is cut off by the end of the file, block or expression."),"Parser");
					} else if(params == null) {
						little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Missing function parameters, function is cut off by the end of the file, block or expression."),"Parser");
					}
					post.push(little_parser_ParserTokens.Function(name1,params,type3,currentDoc));
					currentDoc = null;
				} else {
					_hx_tmp = _g == little_Little.keywords.FUNCTION_RETURN;
					if(_hx_tmp == true) {
						++i;
						if(i >= pre.length) {
							little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Missing return value, value is cut off by the end of the file, block or expression."),"Parser");
							return null;
						}
						var valueToReturn = [];
						_hx_loop6: while(i < pre.length) {
							var lookahead2 = pre[i];
							switch(lookahead2._hx_index) {
							case 0:
								var _g8 = lookahead2.line;
								--i;
								break _hx_loop6;
							case 1:
								--i;
								break _hx_loop6;
							case 11:
								var body4 = lookahead2.parts;
								var type6 = lookahead2.type;
								valueToReturn.push(little_parser_ParserTokens.Expression(little_parser_Parser.mergeComplexStructures(body4),little_parser_Parser.mergeComplexStructures([type6])[0]));
								break;
							case 12:
								var body5 = lookahead2.body;
								var type7 = lookahead2.type;
								valueToReturn.push(little_parser_ParserTokens.Block(little_parser_Parser.mergeComplexStructures(body5),little_parser_Parser.mergeComplexStructures([type7])[0]));
								break;
							default:
								valueToReturn.push(lookahead2);
							}
							++i;
						}
						post.push(little_parser_ParserTokens.Return(valueToReturn.length == 1 ? valueToReturn[0] : little_parser_ParserTokens.Expression(valueToReturn.slice(),null),null));
					} else {
						++i;
						if(i + 1 >= pre.length) {
							post.push(token);
							continue;
						}
						var name2 = little_parser_ParserTokens.Identifier(Type.enumParameters(token)[0]);
						var exp = null;
						var body6 = null;
						var fallback = i - 1;
						_hx_loop7: while(true) {
							if(i >= pre.length) {
								i = fallback;
								break;
							}
							var lookahead3 = pre[i];
							switch(lookahead3._hx_index) {
							case 0:
								var _g9 = lookahead3.line;
								break;
							case 1:
								if(exp != null && body6 != null) {
									break _hx_loop7;
								}
								i = fallback;
								break _hx_loop7;
							case 11:
								var parts = lookahead3.parts;
								var type8 = lookahead3.type;
								if(exp == null) {
									exp = little_parser_ParserTokens.Expression(little_parser_Parser.mergeComplexStructures(parts),little_parser_Parser.mergeComplexStructures([type8])[0]);
								} else if(body6 == null) {
									i = fallback;
								} else {
									break _hx_loop7;
								}
								break;
							case 12:
								var b = lookahead3.body;
								var type9 = lookahead3.type;
								if(exp == null) {
									i = fallback;
									break _hx_loop7;
								} else if(body6 == null) {
									body6 = little_parser_ParserTokens.Block(little_parser_Parser.mergeComplexStructures(b),little_parser_Parser.mergeComplexStructures([type9])[0]);
								} else {
									break _hx_loop7;
								}
								break;
							default:
								if(exp == null || body6 == null) {
									i = fallback;
									break _hx_loop7;
								} else {
									break _hx_loop7;
								}
							}
							++i;
						}
						if(i == fallback) {
							post.push(token);
						} else {
							--i;
							post.push(little_parser_ParserTokens.ConditionCall(name2,exp,body6));
							currentDoc = null;
						}
					}
				}
			}
			break;
		case 11:
			var parts1 = token.parts;
			var type10 = token.type;
			post.push(little_parser_ParserTokens.Expression(little_parser_Parser.mergeComplexStructures(parts1),little_parser_Parser.mergeComplexStructures([type10])[0]));
			break;
		case 12:
			var body7 = token.body;
			var type11 = token.type;
			post.push(little_parser_ParserTokens.Block(little_parser_Parser.mergeComplexStructures(body7),little_parser_Parser.mergeComplexStructures([type11])[0]));
			break;
		case 14:
			var name3 = token.name;
			var property = token.property;
			post.push(little_parser_ParserTokens.PropertyAccess(little_parser_Parser.mergeComplexStructures([name3])[0],little_parser_Parser.mergeComplexStructures([property])[0]));
			break;
		case 19:
			var doc = token.doc;
			currentDoc = token;
			break;
		case 24:
			var name4 = token.name;
			var params1 = token.params;
			var result2 = new Array(params1.length);
			var _g10 = 0;
			var _g11 = params1.length;
			while(_g10 < _g11) {
				var i3 = _g10++;
				result2[i3] = little_parser_Parser.mergeComplexStructures([params1[i3]])[0];
			}
			post.push(little_parser_ParserTokens.Custom(name4,result2));
			break;
		default:
			post.push(token);
		}
		++i;
	}
	little_parser_Parser.resetLines();
	return post;
};
little_parser_Parser.mergeCalls = function(pre) {
	if(pre == null) {
		return null;
	}
	if(pre.length == 1 && pre[0] == null) {
		return [null];
	}
	var post = [];
	var i = 0;
	while(i < pre.length) {
		var token = pre[i];
		switch(token._hx_index) {
		case 0:
			var line = token.line;
			little_parser_Parser.setLine(line);
			post.push(token);
			break;
		case 1:
			little_parser_Parser.nextPart();
			post.push(token);
			break;
		case 2:
			var name = token.name;
			var type = token.type;
			var doc = token.doc;
			post.push(little_parser_ParserTokens.Variable(little_parser_Parser.mergeCalls([name])[0],little_parser_Parser.mergeCalls([type])[0],little_parser_Parser.mergeCalls([doc])[0]));
			break;
		case 3:
			var name1 = token.name;
			var params = token.params;
			var type1 = token.type;
			var doc1 = token.doc;
			post.push(little_parser_ParserTokens.Function(little_parser_Parser.mergeCalls([name1])[0],little_parser_Parser.mergeCalls([params])[0],little_parser_Parser.mergeCalls([type1])[0],little_parser_Parser.mergeCalls([doc1])[0]));
			break;
		case 4:
			var name2 = token.name;
			var exp = token.exp;
			var body = token.body;
			post.push(little_parser_ParserTokens.ConditionCall(little_parser_Parser.mergeCalls([name2])[0],little_parser_Parser.mergeCalls([exp])[0],little_parser_Parser.mergeCalls([body])[0]));
			break;
		case 10:
			var value = token.value;
			var type2 = token.type;
			post.push(little_parser_ParserTokens.Return(little_parser_Parser.mergeCalls([value])[0],little_parser_Parser.mergeCalls([type2])[0]));
			break;
		case 11:
			var parts = token.parts;
			var type3 = token.type;
			parts = little_parser_Parser.mergeCalls(parts);
			if(i == 0) {
				post.push(little_parser_ParserTokens.Expression(parts,type3));
			} else {
				var lookbehind = pre[i - 1];
				switch(lookbehind._hx_index) {
				case 0:
					var _g = lookbehind.line;
					post.push(little_parser_ParserTokens.Expression(parts,type3));
					break;
				case 1:
					post.push(little_parser_ParserTokens.Expression(parts,type3));
					break;
				case 15:
					var _g1 = lookbehind.sign;
					post.push(little_parser_ParserTokens.Expression(parts,type3));
					break;
				default:
					var previous = post.pop();
					token = little_parser_ParserTokens.PartArray(parts);
					post.push(little_parser_ParserTokens.FunctionCall(previous,token));
				}
			}
			break;
		case 12:
			var body1 = token.body;
			var type4 = token.type;
			post.push(little_parser_ParserTokens.Block(little_parser_Parser.mergeCalls(body1),little_parser_Parser.mergeCalls([type4])[0]));
			break;
		case 13:
			var parts1 = token.parts;
			post.push(little_parser_ParserTokens.PartArray(little_parser_Parser.mergeCalls(parts1)));
			break;
		case 14:
			var name3 = token.name;
			var property = token.property;
			post.push(little_parser_ParserTokens.PropertyAccess(little_parser_Parser.mergeCalls([name3])[0],little_parser_Parser.mergeCalls([property])[0]));
			break;
		case 24:
			var name4 = token.name;
			var params1 = token.params;
			var result = new Array(params1.length);
			var _g2 = 0;
			var _g3 = params1.length;
			while(_g2 < _g3) {
				var i1 = _g2++;
				result[i1] = little_parser_Parser.mergeCalls([params1[i1]])[0];
			}
			post.push(little_parser_ParserTokens.Custom(name4,result));
			break;
		default:
			post.push(token);
		}
		++i;
	}
	little_parser_Parser.resetLines();
	return post;
};
little_parser_Parser.mergeWrites = function(pre) {
	if(pre == null) {
		return null;
	}
	if(pre.length == 1 && pre[0] == null) {
		return [null];
	}
	var post = [];
	var potentialAssignee = little_parser_ParserTokens.NullValue;
	var i = 0;
	while(i < pre.length) {
		var token = pre[i];
		switch(token._hx_index) {
		case 0:
			var line = token.line;
			little_parser_Parser.setLine(line);
			if(potentialAssignee != null) {
				post.push(potentialAssignee);
			}
			potentialAssignee = token;
			break;
		case 1:
			little_parser_Parser.nextPart();
			if(potentialAssignee != null) {
				post.push(potentialAssignee);
			}
			potentialAssignee = token;
			break;
		case 2:
			var name = token.name;
			var type = token.type;
			var doc = token.doc;
			if(potentialAssignee != null) {
				post.push(potentialAssignee);
			}
			potentialAssignee = little_parser_ParserTokens.Variable(little_parser_Parser.mergeWrites([name])[0],little_parser_Parser.mergeWrites([type])[0],little_parser_Parser.mergeWrites([doc])[0]);
			break;
		case 3:
			var name1 = token.name;
			var params = token.params;
			var type1 = token.type;
			var doc1 = token.doc;
			if(potentialAssignee != null) {
				post.push(potentialAssignee);
			}
			potentialAssignee = little_parser_ParserTokens.Function(little_parser_Parser.mergeWrites([name1])[0],little_parser_Parser.mergeWrites([params])[0],little_parser_Parser.mergeWrites([type1])[0],little_parser_Parser.mergeWrites([doc1])[0]);
			break;
		case 4:
			var name2 = token.name;
			var exp = token.exp;
			var body = token.body;
			if(potentialAssignee != null) {
				post.push(potentialAssignee);
			}
			potentialAssignee = little_parser_ParserTokens.ConditionCall(little_parser_Parser.mergeWrites([name2])[0],little_parser_Parser.mergeWrites([exp])[0],little_parser_Parser.mergeWrites([body])[0]);
			break;
		case 9:
			var name3 = token.name;
			var params1 = token.params;
			if(potentialAssignee != null) {
				post.push(potentialAssignee);
			}
			potentialAssignee = little_parser_ParserTokens.FunctionCall(little_parser_Parser.mergeWrites([name3])[0],little_parser_Parser.mergeWrites([params1])[0]);
			break;
		case 10:
			var value = token.value;
			var type2 = token.type;
			if(potentialAssignee != null) {
				post.push(potentialAssignee);
			}
			potentialAssignee = little_parser_ParserTokens.Return(little_parser_Parser.mergeWrites([value])[0],little_parser_Parser.mergeWrites([type2])[0]);
			break;
		case 11:
			var parts = token.parts;
			var type3 = token.type;
			if(potentialAssignee != null) {
				post.push(potentialAssignee);
			}
			potentialAssignee = little_parser_ParserTokens.Expression(little_parser_Parser.mergeWrites(parts),little_parser_Parser.mergeWrites([type3])[0]);
			break;
		case 12:
			var body1 = token.body;
			var type4 = token.type;
			if(potentialAssignee != null) {
				post.push(potentialAssignee);
			}
			potentialAssignee = little_parser_ParserTokens.Block(little_parser_Parser.mergeWrites(body1),little_parser_Parser.mergeWrites([type4])[0]);
			break;
		case 13:
			var parts1 = token.parts;
			if(potentialAssignee != null) {
				post.push(potentialAssignee);
			}
			potentialAssignee = little_parser_ParserTokens.PartArray(little_parser_Parser.mergeWrites(parts1));
			break;
		case 14:
			var name4 = token.name;
			var property = token.property;
			if(potentialAssignee != null) {
				post.push(potentialAssignee);
			}
			potentialAssignee = little_parser_ParserTokens.PropertyAccess(little_parser_Parser.mergeWrites([name4])[0],little_parser_Parser.mergeWrites([property])[0]);
			break;
		case 15:
			if(token.sign == "=") {
				if(i + 1 >= pre.length) {
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Missing value after the `=`"),"Parser");
					return null;
				}
				var currentAssignee = [potentialAssignee];
				var assignees = [currentAssignee.length == 1 ? currentAssignee[0] : little_parser_ParserTokens.Expression(currentAssignee.slice(),null)];
				currentAssignee = [];
				_hx_loop2: while(i + 1 < pre.length) {
					var lookahead = pre[i + 1];
					switch(lookahead._hx_index) {
					case 0:
						var _g = lookahead.line;
						break _hx_loop2;
					case 1:
						break _hx_loop2;
					case 15:
						if(lookahead.sign == "=") {
							var assignee = currentAssignee.length == 1 ? currentAssignee[0] : little_parser_ParserTokens.Expression(currentAssignee.slice(),null);
							assignees.push(assignee);
							currentAssignee = [];
						} else {
							currentAssignee.push(lookahead);
						}
						break;
					default:
						currentAssignee.push(lookahead);
					}
					++i;
				}
				if(currentAssignee.length == 0) {
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Missing value after the last `=`"),"Parser");
					return null;
				}
				var value1 = currentAssignee.length == 1 ? currentAssignee[0] : little_parser_ParserTokens.Expression(currentAssignee,null);
				var fValue = little_parser_Parser.mergeWrites([value1]);
				var v = fValue.length == 1 ? fValue[0] : little_parser_ParserTokens.Expression(fValue,null);
				post.push(little_parser_ParserTokens.Write(assignees,v));
				potentialAssignee = null;
			} else {
				if(potentialAssignee != null) {
					post.push(potentialAssignee);
				}
				potentialAssignee = token;
			}
			break;
		case 24:
			var name5 = token.name;
			var params2 = token.params;
			if(potentialAssignee != null) {
				post.push(potentialAssignee);
			}
			var result = new Array(params2.length);
			var _g1 = 0;
			var _g2 = params2.length;
			while(_g1 < _g2) {
				var i1 = _g1++;
				result[i1] = little_parser_Parser.mergeWrites([params2[i1]])[0];
			}
			potentialAssignee = little_parser_ParserTokens.Custom(name5,result);
			break;
		default:
			if(potentialAssignee != null) {
				post.push(potentialAssignee);
			}
			potentialAssignee = token;
		}
		++i;
	}
	if(potentialAssignee != null) {
		post.push(potentialAssignee);
	}
	post.shift();
	little_parser_Parser.resetLines();
	return post;
};
little_parser_Parser.mergeValuesWithTypeDeclarations = function(pre) {
	if(pre == null) {
		return null;
	}
	if(pre.length == 1 && pre[0] == null) {
		return [null];
	}
	var post = [];
	var i = pre.length - 1;
	while(i >= 0) {
		var token = pre[i];
		switch(token._hx_index) {
		case 0:
			var line = token.line;
			little_parser_Parser.setLine(line);
			post.unshift(token);
			break;
		case 1:
			little_parser_Parser.nextPart();
			post.unshift(token);
			break;
		case 2:
			var name = token.name;
			var type = token.type;
			var doc = token.doc;
			post.unshift(little_parser_ParserTokens.Variable(little_parser_Parser.mergeValuesWithTypeDeclarations([name])[0],little_parser_Parser.mergeValuesWithTypeDeclarations([type])[0],little_parser_Parser.mergeValuesWithTypeDeclarations([doc])[0]));
			break;
		case 3:
			var name1 = token.name;
			var params = token.params;
			var type1 = token.type;
			var doc1 = token.doc;
			post.unshift(little_parser_ParserTokens.Function(little_parser_Parser.mergeValuesWithTypeDeclarations([name1])[0],little_parser_Parser.mergeValuesWithTypeDeclarations([params])[0],little_parser_Parser.mergeValuesWithTypeDeclarations([type1])[0],little_parser_Parser.mergeValuesWithTypeDeclarations([doc1])[0]));
			break;
		case 4:
			var name2 = token.name;
			var exp = token.exp;
			var body = token.body;
			post.unshift(little_parser_ParserTokens.ConditionCall(little_parser_Parser.mergeValuesWithTypeDeclarations([name2])[0],little_parser_Parser.mergeValuesWithTypeDeclarations([exp])[0],little_parser_Parser.mergeValuesWithTypeDeclarations([body])[0]));
			break;
		case 6:
			var assignees = token.assignees;
			var value = token.value;
			post.unshift(little_parser_ParserTokens.Write(little_parser_Parser.mergeValuesWithTypeDeclarations(assignees),little_parser_Parser.mergeValuesWithTypeDeclarations([value])[0]));
			break;
		case 8:
			if(token.value == null) {
				var type2 = token.type;
				if(i-- <= 0) {
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Value's type declaration cut off by the start of file, block or expression."),"Parser");
					return null;
				}
				var lookbehind = pre[i];
				switch(lookbehind._hx_index) {
				case 0:
					var _g = lookbehind.line;
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Value's type declaration access cut off by the start of a line, or by a line split (; or ,)."),"Parser");
					return null;
				case 1:
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Value's type declaration access cut off by the start of a line, or by a line split (; or ,)."),"Parser");
					return null;
				default:
					post.unshift(little_parser_ParserTokens.TypeDeclaration(lookbehind,type2));
				}
			} else {
				post.unshift(token);
			}
			break;
		case 9:
			var name3 = token.name;
			var params1 = token.params;
			post.unshift(little_parser_ParserTokens.FunctionCall(little_parser_Parser.mergeValuesWithTypeDeclarations([name3])[0],little_parser_Parser.mergeValuesWithTypeDeclarations([params1])[0]));
			break;
		case 10:
			var value1 = token.value;
			var type3 = token.type;
			post.unshift(little_parser_ParserTokens.Return(little_parser_Parser.mergeValuesWithTypeDeclarations([value1])[0],little_parser_Parser.mergeValuesWithTypeDeclarations([type3])[0]));
			break;
		case 11:
			var parts = token.parts;
			var type4 = token.type;
			post.unshift(little_parser_ParserTokens.Expression(little_parser_Parser.mergeValuesWithTypeDeclarations(parts),little_parser_Parser.mergeValuesWithTypeDeclarations([type4])[0]));
			break;
		case 12:
			var body1 = token.body;
			var type5 = token.type;
			post.unshift(little_parser_ParserTokens.Block(little_parser_Parser.mergeValuesWithTypeDeclarations(body1),little_parser_Parser.mergeValuesWithTypeDeclarations([type5])[0]));
			break;
		case 13:
			var parts1 = token.parts;
			post.unshift(little_parser_ParserTokens.PartArray(little_parser_Parser.mergeValuesWithTypeDeclarations(parts1)));
			break;
		case 14:
			var name4 = token.name;
			var property = token.property;
			post.unshift(little_parser_ParserTokens.PropertyAccess(little_parser_Parser.mergeValuesWithTypeDeclarations([name4])[0],little_parser_Parser.mergeValuesWithTypeDeclarations([property])[0]));
			break;
		case 24:
			var name5 = token.name;
			var params2 = token.params;
			var result = new Array(params2.length);
			var _g1 = 0;
			var _g2 = params2.length;
			while(_g1 < _g2) {
				var i1 = _g1++;
				result[i1] = little_parser_Parser.mergeValuesWithTypeDeclarations([params2[i1]])[0];
			}
			post.unshift(little_parser_ParserTokens.Custom(name5,result));
			break;
		default:
			post.unshift(token);
		}
		--i;
	}
	little_parser_Parser.resetLines();
	return post;
};
little_parser_Parser.mergeNonBlockBodies = function(pre) {
	if(pre == null) {
		return null;
	}
	if(pre.length == 1 && pre[0] == null) {
		return [null];
	}
	var post = [];
	var i = 0;
	while(i < pre.length) {
		var token = pre[i];
		switch(token._hx_index) {
		case 0:
			var line = token.line;
			little_parser_Parser.setLine(line);
			post.push(token);
			break;
		case 1:
			little_parser_Parser.nextPart();
			post.push(token);
			break;
		case 2:
			var name = token.name;
			var type = token.type;
			var doc = token.doc;
			post.push(little_parser_ParserTokens.Variable(little_parser_Parser.mergeNonBlockBodies([name])[0],little_parser_Parser.mergeNonBlockBodies([type])[0],little_parser_Parser.mergeNonBlockBodies([doc])[0]));
			break;
		case 3:
			var name1 = token.name;
			var params = token.params;
			var type1 = token.type;
			var doc1 = token.doc;
			post.push(little_parser_ParserTokens.Function(little_parser_Parser.mergeNonBlockBodies([name1])[0],little_parser_Parser.mergeNonBlockBodies([params])[0],little_parser_Parser.mergeNonBlockBodies([type1])[0],little_parser_Parser.mergeNonBlockBodies([doc1])[0]));
			break;
		case 4:
			var name2 = token.name;
			var exp = token.exp;
			var body = token.body;
			post.push(little_parser_ParserTokens.ConditionCall(little_parser_Parser.mergeNonBlockBodies([name2])[0],little_parser_Parser.mergeNonBlockBodies([exp])[0],little_parser_Parser.mergeNonBlockBodies([body])[0]));
			break;
		case 6:
			var assignees = token.assignees;
			var value = token.value;
			post.push(little_parser_ParserTokens.Write(little_parser_Parser.mergeNonBlockBodies(assignees),little_parser_Parser.mergeNonBlockBodies([value])[0]));
			break;
		case 9:
			var name3 = token.name;
			var params1 = token.params;
			if(i + 1 >= pre.length) {
				post.push(little_parser_ParserTokens.FunctionCall(little_parser_Parser.mergeNonBlockBodies([name3])[0],little_parser_Parser.mergeNonBlockBodies([params1])[0]));
				++i;
				continue;
			}
			var lookahead = pre[i + 1];
			switch(lookahead._hx_index) {
			case 0:
				var _g = lookahead.line;
				post.push(little_parser_ParserTokens.FunctionCall(little_parser_Parser.mergeNonBlockBodies([name3])[0],little_parser_Parser.mergeNonBlockBodies([params1])[0]));
				break;
			case 1:
				post.push(little_parser_ParserTokens.FunctionCall(little_parser_Parser.mergeNonBlockBodies([name3])[0],little_parser_Parser.mergeNonBlockBodies([params1])[0]));
				break;
			default:
				post.push(little_parser_ParserTokens.ConditionCall(little_parser_Parser.mergeNonBlockBodies([name3])[0],little_parser_Parser.mergeNonBlockBodies([params1])[0],little_parser_ParserTokens.Block(little_parser_Parser.mergeNonBlockBodies([lookahead]),null)));
				++i;
			}
			break;
		case 10:
			var value1 = token.value;
			var type2 = token.type;
			post.push(little_parser_ParserTokens.Return(little_parser_Parser.mergeNonBlockBodies([value1])[0],little_parser_Parser.mergeNonBlockBodies([type2])[0]));
			break;
		case 11:
			var parts = token.parts;
			var type3 = token.type;
			post.push(little_parser_ParserTokens.Expression(little_parser_Parser.mergeNonBlockBodies(parts),little_parser_Parser.mergeNonBlockBodies([type3])[0]));
			break;
		case 12:
			var body1 = token.body;
			var type4 = token.type;
			post.push(little_parser_ParserTokens.Block(little_parser_Parser.mergeNonBlockBodies(body1),little_parser_Parser.mergeNonBlockBodies([type4])[0]));
			break;
		case 13:
			var parts1 = token.parts;
			post.push(little_parser_ParserTokens.PartArray(little_parser_Parser.mergeNonBlockBodies(parts1)));
			break;
		case 14:
			var name4 = token.name;
			var property = token.property;
			post.push(little_parser_ParserTokens.PropertyAccess(little_parser_Parser.mergeNonBlockBodies([name4])[0],little_parser_Parser.mergeNonBlockBodies([property])[0]));
			break;
		case 24:
			var name5 = token.name;
			var params2 = token.params;
			var result = new Array(params2.length);
			var _g1 = 0;
			var _g2 = params2.length;
			while(_g1 < _g2) {
				var i1 = _g1++;
				result[i1] = little_parser_Parser.mergeNonBlockBodies([params2[i1]])[0];
			}
			post.push(little_parser_ParserTokens.Custom(name5,result));
			break;
		default:
			post.push(token);
		}
		++i;
	}
	little_parser_Parser.resetLines();
	return post;
};
little_parser_Parser.mergeElses = function(pre) {
	if(pre == null) {
		return null;
	}
	if(pre.length == 1 && pre[0] == null) {
		return [null];
	}
	var post = [];
	var i = 0;
	while(i < pre.length) {
		var token = pre[i];
		switch(token._hx_index) {
		case 0:
			var line = token.line;
			little_parser_Parser.setLine(line);
			post.push(token);
			break;
		case 1:
			little_parser_Parser.nextPart();
			post.push(token);
			break;
		case 2:
			var name = token.name;
			var type = token.type;
			var doc = token.doc;
			post.push(little_parser_ParserTokens.Variable(little_parser_Parser.mergeElses([name])[0],little_parser_Parser.mergeElses([type])[0],little_parser_Parser.mergeElses([doc])[0]));
			break;
		case 3:
			var name1 = token.name;
			var params = token.params;
			var type1 = token.type;
			var doc1 = token.doc;
			post.push(little_parser_ParserTokens.Function(little_parser_Parser.mergeElses([name1])[0],little_parser_Parser.mergeElses([params])[0],little_parser_Parser.mergeElses([type1])[0],little_parser_Parser.mergeElses([doc1])[0]));
			break;
		case 4:
			var name2 = token.name;
			var exp = token.exp;
			var body = token.body;
			post.push(little_parser_ParserTokens.ConditionCall(little_parser_Parser.mergeElses([name2])[0],little_parser_Parser.mergeElses([exp])[0],little_parser_Parser.mergeElses([body])[0]));
			break;
		case 6:
			var assignees = token.assignees;
			var value = token.value;
			post.push(little_parser_ParserTokens.Write(little_parser_Parser.mergeElses(assignees),little_parser_Parser.mergeElses([value])[0]));
			break;
		case 7:
			if(token.word == little_Little.keywords.ELSE == true) {
				var tmp;
				if(post.length != 0) {
					var token1 = post[post.length - 1];
					var _this = [little_tools_ParserTokensSimple.CONDITION_CALL].slice();
					var result = new Array(_this.length);
					var _g = 0;
					var _g1 = _this.length;
					while(_g < _g1) {
						var i1 = _g++;
						var x = _this[i1];
						result[i1] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
					}
					tmp = result.indexOf($hxEnums[token1.__enum__].__constructs__[token1._hx_index]._hx_name.toLowerCase()) == -1;
				} else {
					tmp = true;
				}
				if(tmp) {
					post.push(token);
					++i;
					continue;
				}
				if(i + 1 >= pre.length) {
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Condition has no body, body may be cut off by the end of file, block or expression."),"Parser");
					return null;
				}
				var exp1 = Type.enumParameters(post[post.length - 1])[1];
				exp1 = little_parser_ParserTokens.Expression([exp1,little_parser_ParserTokens.Sign("!="),little_parser_ParserTokens.TrueValue],null);
				++i;
				var body1 = pre[i];
				switch(body1._hx_index) {
				case 0:
					var _g2 = body1.line;
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("`" + little_Little.keywords.ELSE + "` condition has no body, body cut off by a new line, or does not exist"),"Parser");
					return null;
				case 1:
					little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("`" + little_Little.keywords.ELSE + "` condition has no body, body cut off by a line split, or does not exist"),"Parser");
					return null;
				case 4:
					var _g3 = body1.name;
					if(_g3._hx_index == 7) {
						if(_g3.word == "if") {
							var exp2 = body1.exp;
							var body2 = body1.body;
							var tmp1 = little_parser_ParserTokens.Identifier("if");
							var tmp2 = little_parser_ParserTokens.Expression([exp1,little_parser_ParserTokens.Sign("&&"),exp2],null);
							var _this1 = [little_tools_ParserTokensSimple.BLOCK].slice();
							var result1 = new Array(_this1.length);
							var _g4 = 0;
							var _g5 = _this1.length;
							while(_g4 < _g5) {
								var i2 = _g4++;
								var x1 = _this1[i2];
								result1[i2] = little_tools_TextTools.remove($hxEnums[x1.__enum__].__constructs__[x1._hx_index]._hx_name,"_").toLowerCase();
							}
							post.push(little_parser_ParserTokens.ConditionCall(tmp1,tmp2,result1.indexOf($hxEnums[body2.__enum__].__constructs__[body2._hx_index]._hx_name.toLowerCase()) == -1 ? little_parser_ParserTokens.Block([body2],null) : body2));
						} else {
							var tmp3 = little_parser_ParserTokens.Identifier("if");
							var _this2 = [little_tools_ParserTokensSimple.BLOCK].slice();
							var result2 = new Array(_this2.length);
							var _g6 = 0;
							var _g7 = _this2.length;
							while(_g6 < _g7) {
								var i3 = _g6++;
								var x2 = _this2[i3];
								result2[i3] = little_tools_TextTools.remove($hxEnums[x2.__enum__].__constructs__[x2._hx_index]._hx_name,"_").toLowerCase();
							}
							post.push(little_parser_ParserTokens.ConditionCall(tmp3,exp1,result2.indexOf($hxEnums[body1.__enum__].__constructs__[body1._hx_index]._hx_name.toLowerCase()) == -1 ? little_parser_ParserTokens.Block([body1],null) : body1));
						}
					} else {
						var tmp4 = little_parser_ParserTokens.Identifier("if");
						var _this3 = [little_tools_ParserTokensSimple.BLOCK].slice();
						var result3 = new Array(_this3.length);
						var _g8 = 0;
						var _g9 = _this3.length;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var x3 = _this3[i4];
							result3[i4] = little_tools_TextTools.remove($hxEnums[x3.__enum__].__constructs__[x3._hx_index]._hx_name,"_").toLowerCase();
						}
						post.push(little_parser_ParserTokens.ConditionCall(tmp4,exp1,result3.indexOf($hxEnums[body1.__enum__].__constructs__[body1._hx_index]._hx_name.toLowerCase()) == -1 ? little_parser_ParserTokens.Block([body1],null) : body1));
					}
					break;
				default:
					var tmp5 = little_parser_ParserTokens.Identifier("if");
					var _this4 = [little_tools_ParserTokensSimple.BLOCK].slice();
					var result4 = new Array(_this4.length);
					var _g10 = 0;
					var _g11 = _this4.length;
					while(_g10 < _g11) {
						var i5 = _g10++;
						var x4 = _this4[i5];
						result4[i5] = little_tools_TextTools.remove($hxEnums[x4.__enum__].__constructs__[x4._hx_index]._hx_name,"_").toLowerCase();
					}
					post.push(little_parser_ParserTokens.ConditionCall(tmp5,exp1,result4.indexOf($hxEnums[body1.__enum__].__constructs__[body1._hx_index]._hx_name.toLowerCase()) == -1 ? little_parser_ParserTokens.Block([body1],null) : body1));
				}
			} else {
				post.push(token);
			}
			break;
		case 9:
			var name3 = token.name;
			var params1 = token.params;
			post.push(little_parser_ParserTokens.FunctionCall(little_parser_Parser.mergeElses([name3])[0],little_parser_Parser.mergeElses([params1])[0]));
			break;
		case 10:
			var value1 = token.value;
			var type2 = token.type;
			post.push(little_parser_ParserTokens.Return(little_parser_Parser.mergeElses([value1])[0],little_parser_Parser.mergeElses([type2])[0]));
			break;
		case 11:
			var parts = token.parts;
			var type3 = token.type;
			post.push(little_parser_ParserTokens.Expression(little_parser_Parser.mergeElses(parts),little_parser_Parser.mergeElses([type3])[0]));
			break;
		case 12:
			var body3 = token.body;
			var type4 = token.type;
			post.push(little_parser_ParserTokens.Block(little_parser_Parser.mergeElses(body3),little_parser_Parser.mergeElses([type4])[0]));
			break;
		case 13:
			var parts1 = token.parts;
			post.push(little_parser_ParserTokens.PartArray(little_parser_Parser.mergeElses(parts1)));
			break;
		case 14:
			var name4 = token.name;
			var property = token.property;
			post.push(little_parser_ParserTokens.PropertyAccess(little_parser_Parser.mergeElses([name4])[0],little_parser_Parser.mergeElses([property])[0]));
			break;
		case 24:
			var name5 = token.name;
			var params2 = token.params;
			var result5 = new Array(params2.length);
			var _g12 = 0;
			var _g13 = params2.length;
			while(_g12 < _g13) {
				var i6 = _g12++;
				result5[i6] = little_parser_Parser.mergeElses([params2[i6]])[0];
			}
			post.push(little_parser_ParserTokens.Custom(name5,result5));
			break;
		default:
			post.push(token);
		}
		++i;
	}
	little_parser_Parser.resetLines();
	return post;
};
little_parser_Parser.get_line = function() {
	return little_Little.runtime.line;
};
little_parser_Parser.set_line = function(l) {
	return little_Little.runtime.line = l;
};
little_parser_Parser.setLine = function(l) {
	little_parser_Parser.set_line(l);
	little_parser_Parser.linePart = 0;
};
little_parser_Parser.nextPart = function() {
	little_parser_Parser.linePart++;
};
little_parser_Parser.resetLines = function() {
	little_parser_Parser.set_line(0);
	little_parser_Parser.linePart = 0;
};
var little_tools_Conversion = function() { };
$hxClasses["little.tools.Conversion"] = little_tools_Conversion;
little_tools_Conversion.__name__ = "little.tools.Conversion";
little_tools_Conversion.extractHaxeType = function(type) {
	switch(type._hx_index) {
	case 0:
		return "Dynamic";
	case 1:
		return "Int";
	case 2:
		return "Float";
	case 3:
		return "Bool";
	case 4:
		return "Dynamic";
	case 5:
		return "Dynamic";
	case 6:
		var c = type.c;
		return c.__name__.split(".").pop();
	case 7:
		var e = type.e;
		return e.__ename__.split(".").pop();
	case 8:
		return "Dynamic";
	}
};
little_tools_Conversion.toLittleValue = function(val) {
	if(val == null) {
		return little_interpreter_InterpTokens.NullValue;
	}
	if(typeof(val) == "string") {
		return little_interpreter_InterpTokens.Characters(val);
	}
	var type = Type.typeof(val);
	switch(type._hx_index) {
	case 0:
		return little_interpreter_InterpTokens.NullValue;
	case 1:
		return little_interpreter_InterpTokens.Number(val);
	case 2:
		return little_interpreter_InterpTokens.Decimal(val);
	case 3:
		if(val) {
			return little_interpreter_InterpTokens.TrueValue;
		} else {
			return little_interpreter_InterpTokens.FalseValue;
		}
		break;
	case 4:
		if(js_Boot.getClass(val) != null) {
			var map = new haxe_ds_StringMap();
			var _g = 0;
			var _g1 = Type.getInstanceFields(js_Boot.getClass(val));
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				var v = { value : little_tools_Conversion.toLittleValue(Reflect.getProperty(val,field)), documentation : ""};
				map.h[field] = v;
			}
			var v = { value : little_interpreter_InterpTokens.Block([little_interpreter_InterpTokens.FunctionReturn(little_interpreter_InterpTokens.Characters(Std.string(val)),little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_STRING))],little_interpreter_InterpTokens.Identifier(little_Little.keywords.TYPE_STRING)), documentation : "The function that will be used to convert this object to a string."};
			map.h[little_Little.keywords.TO_STRING_PROPERTY_NAME] = v;
			var k = little_Little.keywords.OBJECT_TYPE_PROPERTY_NAME;
			var v = { value : little_interpreter_InterpTokens.Characters(little_tools_Conversion.toLittleType(val.__name__)), documentation : "The type of this object, as a " + little_Little.keywords.TYPE_STRING + "."};
			map.h[k] = v;
			return little_interpreter_InterpTokens.Object(map,Type.enumParameters(map.h[little_Little.keywords.OBJECT_TYPE_PROPERTY_NAME].value)[0]);
		} else {
			var objType = little_Little.keywords.TYPE_DYNAMIC;
			var map = new haxe_ds_StringMap();
			var _g = 0;
			var _g1 = Type.getInstanceFields(js_Boot.getClass(val));
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				var v = { value : little_tools_Conversion.toLittleValue(Reflect.getProperty(val,field)), documentation : ""};
				map.h[field] = v;
			}
			return little_interpreter_InterpTokens.Object(map,objType);
		}
		break;
	case 5:
		return little_interpreter_InterpTokens.NullValue;
	case 6:
		var c = type.c;
		return little_interpreter_InterpTokens.NullValue;
	case 7:
		var e = type.e;
		return little_interpreter_InterpTokens.NullValue;
	case 8:
		return little_interpreter_InterpTokens.NullValue;
	}
};
little_tools_Conversion.toHaxeValue = function(val) {
	val = little_interpreter_Interpreter.evaluate(val);
	switch(val._hx_index) {
	case 8:
		var _g = val.requiredParams;
		var _g = val.body;
		return null;
	case 17:
		var num = val.num;
		return num;
	case 18:
		var num = val.num;
		return num;
	case 19:
		var string = val.string;
		return string;
	case 23:
		return null;
	case 24:
		return true;
	case 25:
		return false;
	case 27:
		var props = val.props;
		var typeName = val.typeName;
		var obj = { };
		var h = props.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_key = key;
			var _g_value = _g_h[key];
			var key1 = _g_key;
			var value = _g_value;
			if(key1 == little_Little.keywords.TO_STRING_PROPERTY_NAME) {
				continue;
			}
			obj.key = little_tools_Conversion.toHaxeValue(value.value);
		}
		return obj;
	case 28:
		var msg = val.msg;
		haxe_Log.trace("WARNING: " + msg + ". Returning null",{ fileName : "little/tools/Conversion.hx", lineNumber : 99, className : "little.tools.Conversion", methodName : "toHaxeValue"});
		return null;
	default:
		return null;
	}
};
little_tools_Conversion.toLittleType = function(type) {
	switch(type) {
	case "Bool":
		return little_Little.keywords.TYPE_BOOLEAN;
	case "Dynamic":
		return little_Little.keywords.TYPE_DYNAMIC;
	case "Float":
		return little_Little.keywords.TYPE_FLOAT;
	case "Int":
		return little_Little.keywords.TYPE_INT;
	case "String":
		return little_Little.keywords.TYPE_STRING;
	default:
		return type;
	}
};
var little_tools_Extensions = function() { };
$hxClasses["little.tools.Extensions"] = little_tools_Extensions;
little_tools_Extensions.__name__ = "little.tools.Extensions";
little_tools_Extensions.tokenize = function(code) {
	return little_interpreter_Interpreter.convert.apply(null,little_parser_Parser.parse(little_lexer_Lexer.lex(code)));
};
little_tools_Extensions.eval = function(code) {
	return little_interpreter_Interpreter.run(little_interpreter_Interpreter.convert.apply(null,little_parser_Parser.parse(little_lexer_Lexer.lex(code))));
};
little_tools_Extensions.passedByValue = function(token) {
	var _this = [little_tools_InterpTokensSimple.TRUE_VALUE,little_tools_InterpTokensSimple.FALSE_VALUE,little_tools_InterpTokensSimple.NULL_VALUE,little_tools_InterpTokensSimple.NUMBER,little_tools_InterpTokensSimple.DECIMAL,little_tools_InterpTokensSimple.SIGN,little_tools_InterpTokensSimple.CHARACTERS].slice();
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var x = _this[i];
		result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
	}
	return result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1;
};
little_tools_Extensions.passedByReference = function(token) {
	var _this = [little_tools_InterpTokensSimple.TRUE_VALUE,little_tools_InterpTokensSimple.FALSE_VALUE,little_tools_InterpTokensSimple.NULL_VALUE,little_tools_InterpTokensSimple.NUMBER,little_tools_InterpTokensSimple.DECIMAL,little_tools_InterpTokensSimple.SIGN,little_tools_InterpTokensSimple.CHARACTERS].slice();
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var x = _this[i];
		result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
	}
	return result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) == -1;
};
little_tools_Extensions.staticallyStorable = function(token) {
	var _this = [little_tools_InterpTokensSimple.TRUE_VALUE,little_tools_InterpTokensSimple.FALSE_VALUE,little_tools_InterpTokensSimple.NULL_VALUE,little_tools_InterpTokensSimple.NUMBER,little_tools_InterpTokensSimple.DECIMAL,little_tools_InterpTokensSimple.SIGN,little_tools_InterpTokensSimple.CHARACTERS].slice();
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var x = _this[i];
		result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
	}
	if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) == -1) {
		var _this = [little_tools_InterpTokensSimple.CHARACTERS].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		return result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1;
	} else {
		return true;
	}
};
little_tools_Extensions.extractIdentifier = function(token) {
	var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var x = _this[i];
		result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
	}
	if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1) {
		return Type.enumParameters(token)[0];
	} else {
		return Type.enumParameters(little_interpreter_Interpreter.run([token]))[0];
	}
};
little_tools_Extensions.asStringPath = function(token) {
	var path = [];
	var current = token;
	while(current != null) switch(current._hx_index) {
	case 16:
		var source = current.name;
		var property = current.property;
		var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		path.unshift(result.indexOf($hxEnums[property.__enum__].__constructs__[property._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(property)[0] : Type.enumParameters(little_interpreter_Interpreter.run([property]))[0]);
		current = source;
		break;
	case 19:
		var word = current.string;
		path.unshift(word);
		current = null;
		break;
	case 26:
		var word1 = current.word;
		path.unshift(word1);
		current = null;
		break;
	default:
		var _this1 = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
		var result1 = new Array(_this1.length);
		var _g2 = 0;
		var _g3 = _this1.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var x1 = _this1[i1];
			result1[i1] = little_tools_TextTools.remove($hxEnums[x1.__enum__].__constructs__[x1._hx_index]._hx_name,"_").toLowerCase();
		}
		path.unshift(result1.indexOf($hxEnums[current.__enum__].__constructs__[current._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(current)[0] : Type.enumParameters(little_interpreter_Interpreter.run([current]))[0]);
		current = null;
	}
	return path;
};
little_tools_Extensions.asJoinedStringPath = function(token) {
	return little_tools_Extensions.asStringPath(token).join(little_Little.keywords.PROPERTY_ACCESS_SIGN);
};
little_tools_Extensions.type = function(token) {
	switch(token._hx_index) {
	case 8:
		var requiredParams = token.requiredParams;
		var body = token.body;
		return little_Little.keywords.TYPE_FUNCTION;
	case 17:
		var number = token.num;
		return little_Little.keywords.TYPE_INT;
	case 18:
		var number = token.num;
		return little_Little.keywords.TYPE_FLOAT;
	case 19:
		var string = token.string;
		return little_Little.keywords.TYPE_STRING;
	case 21:
		var pointer = token.pointer;
		return little_Little.keywords.TYPE_MODULE;
	case 22:
		var sign = token.sign;
		return little_Little.keywords.TYPE_SIGN;
	case 23:
		return little_Little.keywords.TYPE_DYNAMIC;
	case 24:case 25:
		return little_Little.keywords.TYPE_BOOLEAN;
	case 27:
		var _g = token.props;
		var typeName = token.typeName;
		return typeName;
	default:
		throw haxe_Exception.thrown("" + Std.string(token) + " is not a simple token (given " + Std.string(token) + ")");
	}
};
little_tools_Extensions.asTokenPath = function(string) {
	var path = string.split(little_Little.keywords.PROPERTY_ACCESS_SIGN);
	if(path.length == 1) {
		return little_interpreter_InterpTokens.Identifier(path[0]);
	} else {
		return little_interpreter_InterpTokens.PropertyAccess(little_tools_Extensions.asTokenPath(path.slice(0,path.length - 1).join(little_Little.keywords.PROPERTY_ACCESS_SIGN)),little_interpreter_InterpTokens.Identifier(path.pop()));
	}
};
little_tools_Extensions.toIdentifierPath = function(propertyAccess) {
	var arr = [];
	var current = propertyAccess;
	while(current != null) if(current._hx_index == 16) {
		var source = current.name;
		var property = current.property;
		arr.unshift(property);
		current = source;
	} else {
		arr.unshift(current);
		current = null;
	}
	return arr;
};
little_tools_Extensions.containsAny = function(array,func) {
	var _g = [];
	var _g1 = 0;
	var _g2 = array;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(func(v)) {
			_g.push(v);
		}
	}
	return _g.length > 0;
};
little_tools_Extensions.toArray = function(iter) {
	var _g = [];
	var i = iter;
	while(i.hasNext()) {
		var i1 = i.next();
		_g.push(i1);
	}
	return _g;
};
var little_tools_InterpTokensSimple = $hxEnums["little.tools.InterpTokensSimple"] = { __ename__:"little.tools.InterpTokensSimple",__constructs__:null
	,SET_LINE: {_hx_name:"SET_LINE",_hx_index:0,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,SPLIT_LINE: {_hx_name:"SPLIT_LINE",_hx_index:1,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,VARIABLE_DECLARATION: {_hx_name:"VARIABLE_DECLARATION",_hx_index:2,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,FUNCTION_DECLARATION: {_hx_name:"FUNCTION_DECLARATION",_hx_index:3,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,CONDITION_DECLARATION: {_hx_name:"CONDITION_DECLARATION",_hx_index:4,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,CLASS_DECLARATION: {_hx_name:"CLASS_DECLARATION",_hx_index:5,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,CONDITION_CALL: {_hx_name:"CONDITION_CALL",_hx_index:6,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,CONDITION_CODE: {_hx_name:"CONDITION_CODE",_hx_index:7,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,FUNCTION_CALL: {_hx_name:"FUNCTION_CALL",_hx_index:8,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,FUNCTION_CODE: {_hx_name:"FUNCTION_CODE",_hx_index:9,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,FUNCTION_RETURN: {_hx_name:"FUNCTION_RETURN",_hx_index:10,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,WRITE: {_hx_name:"WRITE",_hx_index:11,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,TYPE_CAST: {_hx_name:"TYPE_CAST",_hx_index:12,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,EXPRESSION: {_hx_name:"EXPRESSION",_hx_index:13,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,BLOCK: {_hx_name:"BLOCK",_hx_index:14,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,PART_ARRAY: {_hx_name:"PART_ARRAY",_hx_index:15,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,PROPERTY_ACCESS: {_hx_name:"PROPERTY_ACCESS",_hx_index:16,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,NUMBER: {_hx_name:"NUMBER",_hx_index:17,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,DECIMAL: {_hx_name:"DECIMAL",_hx_index:18,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,CHARACTERS: {_hx_name:"CHARACTERS",_hx_index:19,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,DOCUMENTATION: {_hx_name:"DOCUMENTATION",_hx_index:20,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,CLASS_POINTER: {_hx_name:"CLASS_POINTER",_hx_index:21,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,SIGN: {_hx_name:"SIGN",_hx_index:22,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,NULL_VALUE: {_hx_name:"NULL_VALUE",_hx_index:23,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,TRUE_VALUE: {_hx_name:"TRUE_VALUE",_hx_index:24,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,FALSE_VALUE: {_hx_name:"FALSE_VALUE",_hx_index:25,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,IDENTIFIER: {_hx_name:"IDENTIFIER",_hx_index:26,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,TYPE_REFERENCE: {_hx_name:"TYPE_REFERENCE",_hx_index:27,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,OBJECT: {_hx_name:"OBJECT",_hx_index:28,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,CLASS: {_hx_name:"CLASS",_hx_index:29,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,ERROR_MESSAGE: {_hx_name:"ERROR_MESSAGE",_hx_index:30,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
	,HAXE_EXTERN: {_hx_name:"HAXE_EXTERN",_hx_index:31,__enum__:"little.tools.InterpTokensSimple",toString:$estr}
};
little_tools_InterpTokensSimple.__constructs__ = [little_tools_InterpTokensSimple.SET_LINE,little_tools_InterpTokensSimple.SPLIT_LINE,little_tools_InterpTokensSimple.VARIABLE_DECLARATION,little_tools_InterpTokensSimple.FUNCTION_DECLARATION,little_tools_InterpTokensSimple.CONDITION_DECLARATION,little_tools_InterpTokensSimple.CLASS_DECLARATION,little_tools_InterpTokensSimple.CONDITION_CALL,little_tools_InterpTokensSimple.CONDITION_CODE,little_tools_InterpTokensSimple.FUNCTION_CALL,little_tools_InterpTokensSimple.FUNCTION_CODE,little_tools_InterpTokensSimple.FUNCTION_RETURN,little_tools_InterpTokensSimple.WRITE,little_tools_InterpTokensSimple.TYPE_CAST,little_tools_InterpTokensSimple.EXPRESSION,little_tools_InterpTokensSimple.BLOCK,little_tools_InterpTokensSimple.PART_ARRAY,little_tools_InterpTokensSimple.PROPERTY_ACCESS,little_tools_InterpTokensSimple.NUMBER,little_tools_InterpTokensSimple.DECIMAL,little_tools_InterpTokensSimple.CHARACTERS,little_tools_InterpTokensSimple.DOCUMENTATION,little_tools_InterpTokensSimple.CLASS_POINTER,little_tools_InterpTokensSimple.SIGN,little_tools_InterpTokensSimple.NULL_VALUE,little_tools_InterpTokensSimple.TRUE_VALUE,little_tools_InterpTokensSimple.FALSE_VALUE,little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.TYPE_REFERENCE,little_tools_InterpTokensSimple.OBJECT,little_tools_InterpTokensSimple.CLASS,little_tools_InterpTokensSimple.ERROR_MESSAGE,little_tools_InterpTokensSimple.HAXE_EXTERN];
var little_tools_Layer = {};
little_tools_Layer.getIndexOf = function(layer) {
	switch(layer) {
	case "Interpreter":
		return 4;
	case "Interpreter, Expression Evaluator":
		return 6;
	case "Interpreter, Token Identifier Stringifier":
		return 8;
	case "Interpreter, Token Value Stringifier":
		return 7;
	case "Interpreter, Value Evaluator":
		return 5;
	case "Lexer":
		return 1;
	case "Memory":
		return 9;
	case "Memory, External Interfacing":
		return 12;
	case "Memory, Garbage Collector":
		return 14;
	case "Memory, Referrer":
		return 10;
	case "Memory, Size Evaluator":
		return 13;
	case "Memory, Storage":
		return 11;
	case "Parser":
		return 2;
	case "Parser, Macro":
		return 3;
	default:
		return 999999999;
	}
};
var little_tools_PrepareRun = function() { };
$hxClasses["little.tools.PrepareRun"] = little_tools_PrepareRun;
little_tools_PrepareRun.__name__ = "little.tools.PrepareRun";
little_tools_PrepareRun.addTypes = function() {
	little_Little.plugin.registerType(little_Little.keywords.TYPE_FUNCTION,new haxe_ds_StringMap());
	little_Little.plugin.registerType(little_Little.keywords.TYPE_CONDITION,new haxe_ds_StringMap());
	little_Little.plugin.registerType(little_Little.keywords.TYPE_INT,new haxe_ds_StringMap());
	little_Little.plugin.registerType(little_Little.keywords.TYPE_FLOAT,new haxe_ds_StringMap());
	little_Little.plugin.registerType(little_Little.keywords.TYPE_STRING,new haxe_ds_StringMap());
	little_Little.plugin.registerType(little_Little.keywords.TYPE_SIGN,new haxe_ds_StringMap());
	var tmp = little_Little.plugin;
	var tmp1 = little_Little.keywords.TYPE_MODULE;
	var _g = new haxe_ds_StringMap();
	_g.h["public " + little_Little.keywords.TYPE_STRING + " toString ()"] = function(address,_,_1) {
		return little_tools_Conversion.toLittleValue(little_Little.memory.getTypeName(address));
	};
	tmp.registerType(tmp1,_g);
	var tmp = little_Little.plugin;
	var _g = new haxe_ds_StringMap();
	_g.h["static " + little_Little.keywords.TYPE_STRING + " now ()"] = function(_) {
		return little_tools_Conversion.toLittleValue(HxOverrides.dateStr(new Date()));
	};
	tmp.registerType("Date",_g);
	var tmp = little_Little.plugin;
	var tmp1 = little_Little.keywords.TYPE_INT;
	var _g = new haxe_ds_StringMap();
	_g.h["public " + little_Little.keywords.TYPE_STRING + " toString ()"] = function(_,value,_1) {
		return little_tools_Conversion.toLittleValue(Std.string(Type.enumParameters(value)[0]));
	};
	tmp.registerType(tmp1,_g);
	var tmp = little_Little.plugin;
	var tmp1 = little_Little.keywords.TYPE_FLOAT;
	var _g = new haxe_ds_StringMap();
	_g.h["public " + little_Little.keywords.TYPE_STRING + " toString ()"] = function(_,value,_1) {
		return little_tools_Conversion.toLittleValue(Std.string(Type.enumParameters(value)[0]));
	};
	_g.h["public " + little_Little.keywords.TYPE_BOOLEAN + " isWhole ()"] = function(_,value,_1) {
		return little_tools_Conversion.toLittleValue(Type.enumParameters(value)[0] % 1 == 0);
	};
	tmp.registerType(tmp1,_g);
	var tmp = little_Little.plugin;
	var tmp1 = little_Little.keywords.TYPE_STRING;
	var _g = new haxe_ds_StringMap();
	_g.h["public " + little_Little.keywords.TYPE_INT + " length"] = function(_,value) {
		return little_tools_Conversion.toLittleValue(Type.enumParameters(value)[0].length);
	};
	_g.h["public " + little_Little.keywords.TYPE_STRING + " charAt (define index as " + little_Little.keywords.TYPE_INT + ")"] = function(_,value,params) {
		return little_tools_Conversion.toLittleValue(Type.enumParameters(value)[0].charAt(little_tools_Conversion.toHaxeValue(params[0])));
	};
	_g.h["public " + little_Little.keywords.TYPE_STRING + " substring (define start as " + little_Little.keywords.TYPE_INT + ", define end as " + little_Little.keywords.TYPE_INT + " = -1)"] = function(_,value,params) {
		return little_interpreter_InterpTokens.Characters(Type.enumParameters(value)[0].substring(little_tools_Conversion.toHaxeValue(params[0]),little_tools_Conversion.toHaxeValue(params[1])));
	};
	_g.h["public " + little_Little.keywords.TYPE_STRING + " toLowerCase ()"] = function(_,value,_1) {
		return little_interpreter_InterpTokens.Characters(Type.enumParameters(value)[0].toLowerCase());
	};
	_g.h["public " + little_Little.keywords.TYPE_STRING + " toUpperCase ()"] = function(_,value,_1) {
		return little_interpreter_InterpTokens.Characters(Type.enumParameters(value)[0].toUpperCase());
	};
	_g.h["public " + little_Little.keywords.TYPE_STRING + " replace (define search as " + little_Little.keywords.TYPE_STRING + ", define replace as " + little_Little.keywords.TYPE_STRING + ")"] = function(_,value,params) {
		return little_interpreter_InterpTokens.Characters(Type.enumParameters(value)[0].replace(little_tools_Conversion.toHaxeValue(params[0]),little_tools_Conversion.toHaxeValue(params[1])));
	};
	_g.h["public " + little_Little.keywords.TYPE_STRING + " trim ()"] = function(_,value,_1) {
		return little_interpreter_InterpTokens.Characters(Type.enumParameters(value)[0].trim());
	};
	_g.h["public " + little_Little.keywords.TYPE_STRING + " remove (define search as " + little_Little.keywords.TYPE_STRING + ")"] = function(_,value,params) {
		return little_interpreter_InterpTokens.Characters(Type.enumParameters(value)[0].replace(little_tools_Conversion.toHaxeValue(params[0]),""));
	};
	_g.h["public " + little_Little.keywords.TYPE_BOOLEAN + " contains (define search as " + little_Little.keywords.TYPE_STRING + ")"] = function(_,value,params) {
		return little_tools_Conversion.toLittleValue(Type.enumParameters(value)[0].contains(little_tools_Conversion.toHaxeValue(params[0])));
	};
	_g.h["public " + little_Little.keywords.TYPE_INT + " indexOf (define search as " + little_Little.keywords.TYPE_STRING + ")"] = function(_,value,params) {
		return little_tools_Conversion.toLittleValue(Type.enumParameters(value)[0].indexOf(little_tools_Conversion.toHaxeValue(params[0])));
	};
	_g.h["public " + little_Little.keywords.TYPE_INT + " lastIndexOf (define search as " + little_Little.keywords.TYPE_STRING + ")"] = function(_,value,params) {
		return little_tools_Conversion.toLittleValue(Type.enumParameters(value)[0].lastIndexOf(little_tools_Conversion.toHaxeValue(params[0])));
	};
	_g.h["public " + little_Little.keywords.TYPE_BOOLEAN + " startsWith (define prefix as " + little_Little.keywords.TYPE_STRING + ")"] = function(_,value,params) {
		return little_tools_Conversion.toLittleValue(Type.enumParameters(value)[0].indexOf(little_tools_Conversion.toHaxeValue(params[0]) == 0));
	};
	_g.h["public " + little_Little.keywords.TYPE_BOOLEAN + " endsWith (define postfix as " + little_Little.keywords.TYPE_STRING + ")"] = function(_,value,params) {
		return little_tools_Conversion.toLittleValue(Type.enumParameters(value)[0].indexOf(little_tools_Conversion.toHaxeValue(params[0])) == Type.enumParameters(value)[0].length - little_tools_Conversion.toHaxeValue(params[0]).length);
	};
	_g.h["static " + little_Little.keywords.TYPE_STRING + " fromCharCode (define code as " + little_Little.keywords.TYPE_INT + ")"] = function(_,value,params) {
		var code = little_tools_Conversion.toHaxeValue(params[0]);
		return little_tools_Conversion.toLittleValue(String.fromCodePoint(code));
	};
	tmp.registerType(tmp1,_g);
	var tmp = little_Little.plugin;
	var _g = new haxe_ds_StringMap();
	_g.h["static Object create (define fieldEstimate as " + little_Little.keywords.TYPE_INT + " = 20)"] = function(params) {
		return little_interpreter_InterpTokens.Object(new haxe_ds_StringMap(),"Object");
	};
	tmp.registerType("Object",_g);
};
little_tools_PrepareRun.addFunctions = function() {
	little_Little.plugin.registerFunction(little_Little.keywords.PRINT_FUNCTION_NAME,null,[little_interpreter_InterpTokens.VariableDeclaration(little_interpreter_InterpTokens.Identifier("item"),null)],function(params) {
		var $eval = little_interpreter_Interpreter.evaluate(params[0]);
		var tmp = little_Little.runtime;
		var tmp1;
		var _this = [little_tools_InterpTokensSimple.OBJECT].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		if(result.indexOf($hxEnums[$eval.__enum__].__constructs__[$eval._hx_index]._hx_name.toLowerCase()) != -1) {
			var _this = little_tools_PrettyPrinter.printInterpreterAst([$eval]).split("\n").slice(1);
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i].substring(6);
			}
			tmp1 = result.join("\n");
		} else {
			tmp1 = little_tools_PrettyPrinter.stringifyInterpreter(null,$eval);
		}
		tmp.__print(tmp1,$eval);
		return little_interpreter_InterpTokens.NullValue;
	},little_Little.keywords.TYPE_DYNAMIC);
	little_Little.plugin.registerFunction(little_Little.keywords.RAISE_ERROR_FUNCTION_NAME,null,[little_interpreter_InterpTokens.VariableDeclaration(little_interpreter_InterpTokens.Identifier("message"),null)],function(params) {
		little_Little.runtime.throwError(params[0]);
		return little_interpreter_InterpTokens.NullValue;
	},little_Little.keywords.TYPE_DYNAMIC);
	little_Little.plugin.registerFunction(little_Little.keywords.READ_FUNCTION_NAME,null,[little_interpreter_InterpTokens.VariableDeclaration(little_interpreter_InterpTokens.Identifier("identifier"),little_tools_Extensions.asTokenPath(little_Little.keywords.TYPE_STRING))],function(params) {
		return little_interpreter_InterpTokens.Identifier(little_tools_Conversion.toHaxeValue(params[0]));
	},little_Little.keywords.TYPE_DYNAMIC);
	little_Little.plugin.registerFunction(little_Little.keywords.RUN_CODE_FUNCTION_NAME,null,[little_interpreter_InterpTokens.VariableDeclaration(little_interpreter_InterpTokens.Identifier("code"),little_tools_Extensions.asTokenPath(little_Little.keywords.TYPE_STRING))],function(params) {
		return little_interpreter_Interpreter.run(little_interpreter_Interpreter.convert.apply(null,little_parser_Parser.parse(little_lexer_Lexer.lex(little_tools_Conversion.toHaxeValue(params[0])))));
	},little_Little.keywords.TYPE_DYNAMIC);
};
little_tools_PrepareRun.addProps = function() {
	little_Little.plugin.registerInstanceVariable(little_Little.keywords.OBJECT_TYPE_PROPERTY_NAME,little_Little.keywords.TYPE_STRING,little_Little.keywords.TYPE_DYNAMIC,"The name of this value's type, as a " + little_Little.keywords.TYPE_STRING,null,function(value,address) {
		return little_interpreter_InterpTokens.Characters(little_tools_Extensions.type(value));
	});
	little_Little.plugin.registerInstanceVariable(little_Little.keywords.OBJECT_ADDRESS_PROPERTY_NAME,little_Little.keywords.TYPE_INT,little_Little.keywords.TYPE_DYNAMIC,"The address of this value",null,function(value,address) {
		return little_interpreter_InterpTokens.Number(address);
	});
};
little_tools_PrepareRun.addSigns = function() {
	little_Little.plugin.registerSign("+",{ rhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], operatorType : little_interpreter_memory_OperatorType.RHS_ONLY, priority : "last", singleSidedOperatorCallback : function(rhs) {
		var r = little_tools_Conversion.toHaxeValue(rhs);
		if(typeof(r) == "number" && ((r | 0) === r)) {
			return little_interpreter_InterpTokens.Number(r);
		}
		return little_interpreter_InterpTokens.Decimal(r);
	}});
	little_Little.plugin.registerSign("-",{ rhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], operatorType : little_interpreter_memory_OperatorType.RHS_ONLY, priority : "with +_", singleSidedOperatorCallback : function(rhs) {
		var r = little_tools_Conversion.toHaxeValue(rhs);
		if(typeof(r) == "number" && ((r | 0) === r)) {
			return little_interpreter_InterpTokens.Number(-r);
		}
		return little_interpreter_InterpTokens.Decimal(-r);
	}});
	little_Little.plugin.registerSign("√",{ rhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], operatorType : little_interpreter_memory_OperatorType.RHS_ONLY, priority : "first", singleSidedOperatorCallback : function(rhs) {
		var r = little_tools_Conversion.toHaxeValue(rhs);
		return little_interpreter_InterpTokens.Decimal(Math.sqrt(r));
	}});
	little_Little.plugin.registerSign("!",{ rhsAllowedTypes : [little_Little.keywords.TYPE_BOOLEAN], operatorType : little_interpreter_memory_OperatorType.RHS_ONLY, priority : "with +_", singleSidedOperatorCallback : function(rhs) {
		var r = little_tools_Conversion.toHaxeValue(rhs);
		if(r) {
			return little_interpreter_InterpTokens.FalseValue;
		} else {
			return little_interpreter_InterpTokens.TrueValue;
		}
	}});
	little_Little.plugin.registerSign("!",{ lhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], operatorType : little_interpreter_memory_OperatorType.LHS_ONLY, priority : "with √_", singleSidedOperatorCallback : function(lhs) {
		var l = little_tools_Conversion.toHaxeValue(lhs);
		var shifted = Math.pow(10,10) * l;
		if(shifted != Math.floor(shifted)) {
			return little_interpreter_InterpTokens.Number(Math.round(vision_tools_MathTools.factorial(l)));
		}
		return little_interpreter_InterpTokens.Decimal(vision_tools_MathTools.factorial(l));
	}});
	little_Little.plugin.registerSign("+",{ rhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT,little_Little.keywords.TYPE_STRING], lhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT,little_Little.keywords.TYPE_STRING], allowedTypeCombos : [{ lhs : little_Little.keywords.TYPE_STRING, rhs : little_Little.keywords.TYPE_DYNAMIC},{ lhs : little_Little.keywords.TYPE_DYNAMIC, rhs : little_Little.keywords.TYPE_STRING}], priority : "with +_", callback : function(lhs,rhs) {
		lhs = little_interpreter_Interpreter.evaluate(lhs);
		rhs = little_interpreter_Interpreter.evaluate(rhs);
		var l = little_tools_Conversion.toHaxeValue(lhs);
		var r = little_tools_Conversion.toHaxeValue(rhs);
		if(typeof(l) == "string" || typeof(r) == "string") {
			if(l == null) {
				l = little_Little.keywords.NULL_VALUE;
			}
			if(r == null) {
				r = little_Little.keywords.NULL_VALUE;
			}
			return little_interpreter_InterpTokens.Characters("" + l + r);
		}
		if(little_tools_Extensions.type(lhs) == little_Little.keywords.TYPE_INT && little_tools_Extensions.type(rhs) == little_Little.keywords.TYPE_INT) {
			return little_interpreter_InterpTokens.Number(l + r);
		}
		return little_interpreter_InterpTokens.Decimal(l + r);
	}});
	little_Little.plugin.registerSign("-",{ rhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], lhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], allowedTypeCombos : [{ lhs : little_Little.keywords.TYPE_STRING, rhs : little_Little.keywords.TYPE_STRING}], priority : "with +", callback : function(lhs,rhs) {
		lhs = little_interpreter_Interpreter.evaluate(lhs);
		rhs = little_interpreter_Interpreter.evaluate(rhs);
		var l = little_tools_Conversion.toHaxeValue(lhs);
		var r = little_tools_Conversion.toHaxeValue(rhs);
		if(typeof(l) == "string") {
			if(l == null) {
				l = little_Little.keywords.NULL_VALUE;
			}
			if(r == null) {
				r = little_Little.keywords.NULL_VALUE;
			}
			return little_interpreter_InterpTokens.Characters(little_tools_TextTools.replaceLast(l,r,""));
		}
		if(little_tools_Extensions.type(lhs) == little_Little.keywords.TYPE_INT && little_tools_Extensions.type(rhs) == little_Little.keywords.TYPE_INT) {
			return little_interpreter_InterpTokens.Number(l - r);
		}
		return little_interpreter_InterpTokens.Decimal(l - r);
	}});
	little_Little.plugin.registerSign("*",{ rhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], lhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], allowedTypeCombos : [{ lhs : little_Little.keywords.TYPE_STRING, rhs : little_Little.keywords.TYPE_INT}], priority : "between + √_", callback : function(lhs,rhs) {
		lhs = little_interpreter_Interpreter.evaluate(lhs);
		rhs = little_interpreter_Interpreter.evaluate(rhs);
		var l = little_tools_Conversion.toHaxeValue(lhs);
		var r = little_tools_Conversion.toHaxeValue(rhs);
		if(typeof(l) == "string") {
			if(l == null) {
				l = little_Little.keywords.NULL_VALUE;
			}
			return little_interpreter_InterpTokens.Characters(little_tools_TextTools.multiply(l,r));
		}
		if(little_tools_Extensions.type(lhs) == little_Little.keywords.TYPE_INT && little_tools_Extensions.type(rhs) == little_Little.keywords.TYPE_INT) {
			return little_interpreter_InterpTokens.Number(l * r);
		}
		return little_interpreter_InterpTokens.Decimal(l * r);
	}});
	little_Little.plugin.registerSign("/",{ rhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], lhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], priority : "with *", callback : function(lhs,rhs) {
		var l = little_tools_Conversion.toHaxeValue(lhs);
		var r = little_tools_Conversion.toHaxeValue(rhs);
		if(r == 0) {
			little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot divide by 0"));
		}
		return little_interpreter_InterpTokens.Decimal(l / r);
	}});
	little_Little.plugin.registerSign("^",{ rhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], lhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], priority : "before *", callback : function(lhs,rhs) {
		lhs = little_interpreter_Interpreter.evaluate(lhs);
		rhs = little_interpreter_Interpreter.evaluate(rhs);
		var l = little_tools_Conversion.toHaxeValue(lhs);
		var r = little_tools_Conversion.toHaxeValue(rhs);
		if(little_tools_Extensions.type(lhs) == little_Little.keywords.TYPE_INT && little_tools_Extensions.type(rhs) == little_Little.keywords.TYPE_INT) {
			return little_interpreter_InterpTokens.Number(Math.pow(l,r) | 0);
		}
		return little_interpreter_InterpTokens.Decimal(Math.pow(l,r));
	}});
	little_Little.plugin.registerSign("√",{ rhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], lhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], priority : "with ^", callback : function(lhs,rhs) {
		var l = little_tools_Conversion.toHaxeValue(lhs);
		var r = little_tools_Conversion.toHaxeValue(rhs);
		var lPositive = l >= 0;
		var oddN = r % 2 == 1;
		if(!lPositive) {
			l = -l;
		}
		return little_interpreter_InterpTokens.Decimal(Math.pow(l * (!lPositive && oddN ? -1 : 1),1 / r));
	}});
	little_Little.plugin.registerSign("&&",{ rhsAllowedTypes : [little_Little.keywords.TYPE_BOOLEAN], lhsAllowedTypes : [little_Little.keywords.TYPE_BOOLEAN], priority : "last", callback : function(lhs,rhs) {
		if(little_tools_Conversion.toHaxeValue(lhs) && little_tools_Conversion.toHaxeValue(rhs)) {
			return little_interpreter_InterpTokens.TrueValue;
		} else {
			return little_interpreter_InterpTokens.FalseValue;
		}
	}});
	little_Little.plugin.registerSign("||",{ rhsAllowedTypes : [little_Little.keywords.TYPE_BOOLEAN], lhsAllowedTypes : [little_Little.keywords.TYPE_BOOLEAN], priority : "with &&", callback : function(lhs,rhs) {
		if(little_tools_Conversion.toHaxeValue(lhs) || little_tools_Conversion.toHaxeValue(rhs)) {
			return little_interpreter_InterpTokens.TrueValue;
		} else {
			return little_interpreter_InterpTokens.FalseValue;
		}
	}});
	little_Little.plugin.registerSign("==",{ priority : "last", callback : function(lhs,rhs) {
		if(little_tools_Conversion.toHaxeValue(lhs) == little_tools_Conversion.toHaxeValue(rhs)) {
			return little_interpreter_InterpTokens.TrueValue;
		} else {
			return little_interpreter_InterpTokens.FalseValue;
		}
	}});
	little_Little.plugin.registerSign("!=",{ priority : "with ==", callback : function(lhs,rhs) {
		if(little_tools_Conversion.toHaxeValue(lhs) != little_tools_Conversion.toHaxeValue(rhs)) {
			return little_interpreter_InterpTokens.TrueValue;
		} else {
			return little_interpreter_InterpTokens.FalseValue;
		}
	}});
	little_Little.plugin.registerSign("^^",{ rhsAllowedTypes : [little_Little.keywords.TYPE_BOOLEAN], lhsAllowedTypes : [little_Little.keywords.TYPE_BOOLEAN], priority : "with &&", callback : function(lhs,rhs) {
		if(little_tools_Conversion.toHaxeValue(lhs) != little_tools_Conversion.toHaxeValue(rhs)) {
			return little_interpreter_InterpTokens.TrueValue;
		} else {
			return little_interpreter_InterpTokens.FalseValue;
		}
	}});
	little_Little.plugin.registerSign(">",{ rhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], lhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], allowedTypeCombos : [{ lhs : little_Little.keywords.TYPE_STRING, rhs : little_Little.keywords.TYPE_STRING}], priority : "with ==", callback : function(lhs,rhs) {
		var l = little_tools_Conversion.toHaxeValue(lhs);
		var r = little_tools_Conversion.toHaxeValue(rhs);
		if(typeof(l) == "string") {
			if(l.length > r.length) {
				return little_interpreter_InterpTokens.TrueValue;
			} else {
				return little_interpreter_InterpTokens.FalseValue;
			}
		}
		if(l > r) {
			return little_interpreter_InterpTokens.TrueValue;
		} else {
			return little_interpreter_InterpTokens.FalseValue;
		}
	}});
	little_Little.plugin.registerSign(">=",{ rhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], lhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], allowedTypeCombos : [{ lhs : little_Little.keywords.TYPE_STRING, rhs : little_Little.keywords.TYPE_STRING}], priority : "with ==", callback : function(lhs,rhs) {
		var l = little_tools_Conversion.toHaxeValue(lhs);
		var r = little_tools_Conversion.toHaxeValue(rhs);
		if(typeof(l) == "string") {
			if(l.length >= r.length) {
				return little_interpreter_InterpTokens.TrueValue;
			} else {
				return little_interpreter_InterpTokens.FalseValue;
			}
		}
		if(l >= r) {
			return little_interpreter_InterpTokens.TrueValue;
		} else {
			return little_interpreter_InterpTokens.FalseValue;
		}
	}});
	little_Little.plugin.registerSign("<",{ rhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], lhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], allowedTypeCombos : [{ lhs : little_Little.keywords.TYPE_STRING, rhs : little_Little.keywords.TYPE_STRING}], priority : "with ==", callback : function(lhs,rhs) {
		var l = little_tools_Conversion.toHaxeValue(lhs);
		var r = little_tools_Conversion.toHaxeValue(rhs);
		if(typeof(l) == "string") {
			if(l.length < r.length) {
				return little_interpreter_InterpTokens.TrueValue;
			} else {
				return little_interpreter_InterpTokens.FalseValue;
			}
		}
		if(l < r) {
			return little_interpreter_InterpTokens.TrueValue;
		} else {
			return little_interpreter_InterpTokens.FalseValue;
		}
	}});
	little_Little.plugin.registerSign("<=",{ rhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], lhsAllowedTypes : [little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_INT], allowedTypeCombos : [{ lhs : little_Little.keywords.TYPE_STRING, rhs : little_Little.keywords.TYPE_STRING}], priority : "with ==", callback : function(lhs,rhs) {
		var l = little_tools_Conversion.toHaxeValue(lhs);
		var r = little_tools_Conversion.toHaxeValue(rhs);
		if(typeof(l) == "string") {
			if(l.length <= r.length) {
				return little_interpreter_InterpTokens.TrueValue;
			} else {
				return little_interpreter_InterpTokens.FalseValue;
			}
		}
		if(l <= r) {
			return little_interpreter_InterpTokens.TrueValue;
		} else {
			return little_interpreter_InterpTokens.FalseValue;
		}
	}});
};
little_tools_PrepareRun.addConditions = function() {
	little_Little.plugin.registerCondition("while","A loop that executes code until the condition is not met",function(params,body) {
		var val = little_interpreter_InterpTokens.NullValue;
		var safetyNet = 0;
		while(safetyNet < 500000) {
			var condition = little_tools_Conversion.toHaxeValue(little_interpreter_Interpreter.calculate(params));
			if(typeof(condition) == "boolean" && condition) {
				val = little_interpreter_Interpreter.run(body);
				++safetyNet;
			} else if(typeof(condition) == "boolean" && !condition) {
				return val;
			} else {
				little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("While condition must be a " + little_Little.keywords.TYPE_BOOLEAN + " or " + little_Little.keywords.FALSE_VALUE),"Interpreter");
				return val;
			}
		}
		if(safetyNet >= 500000) {
			little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Too much iteration (is `" + little_tools_PrettyPrinter.stringifyInterpreter(params) + "` forever `" + little_Little.keywords.TRUE_VALUE + "`?)"),"Interpreter");
		}
		return val;
	});
	little_Little.plugin.registerCondition("if","Executes the following block of code if the given condition is true.",function(params,body) {
		var val = little_interpreter_InterpTokens.NullValue;
		var cond = little_tools_Conversion.toHaxeValue(little_interpreter_Interpreter.calculate(params));
		if(typeof(cond) == "boolean" && cond) {
			val = little_interpreter_Interpreter.run(body);
		} else if(typeof(cond) != "boolean") {
			little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("If condition must be a " + little_Little.keywords.TYPE_BOOLEAN),"Interpreter");
		}
		return val;
	});
	little_Little.plugin.registerCondition("for","A loop that executes code while changing a variable, until it meets a condition",function(params,body) {
		var val = little_interpreter_InterpTokens.NullValue;
		var fp = [];
		var _g = 0;
		while(_g < params.length) {
			var p = params[_g];
			++_g;
			if(p._hx_index == 9) {
				var _g1 = p.name;
				var _g2 = p.params;
				var _hx_tmp;
				var _hx_tmp1;
				var _hx_tmp2;
				if(Type.enumParameters(_g1)[0] == little_Little.keywords.FOR_LOOP_FROM == true) {
					var params1 = _g2;
					fp.push(little_interpreter_InterpTokens.Identifier(little_Little.keywords.FOR_LOOP_FROM));
					fp.push(little_interpreter_InterpTokens.Expression(Type.enumParameters(params1)[0],null));
				} else {
					_hx_tmp2 = Type.enumParameters(_g1)[0] == little_Little.keywords.FOR_LOOP_TO;
					if(_hx_tmp2 == true) {
						var params2 = _g2;
						fp.push(little_interpreter_InterpTokens.Identifier(little_Little.keywords.FOR_LOOP_TO));
						fp.push(little_interpreter_InterpTokens.Expression(Type.enumParameters(params2)[0],null));
					} else {
						_hx_tmp1 = Type.enumParameters(_g1)[0] == little_Little.keywords.FOR_LOOP_JUMP;
						if(_hx_tmp1 == true) {
							var params3 = _g2;
							fp.push(little_interpreter_InterpTokens.Identifier(little_Little.keywords.FOR_LOOP_JUMP));
							fp.push(little_interpreter_InterpTokens.Expression(Type.enumParameters(params3)[0],null));
						} else {
							var _this = [little_tools_InterpTokensSimple.BLOCK].slice();
							var result = new Array(_this.length);
							var _g3 = 0;
							var _g4 = _this.length;
							while(_g3 < _g4) {
								var i = _g3++;
								var x = _this[i];
								result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
							}
							_hx_tmp = result.indexOf($hxEnums[_g1.__enum__].__constructs__[_g1._hx_index]._hx_name.toLowerCase()) != -1 && [little_Little.keywords.FOR_LOOP_FROM,little_Little.keywords.FOR_LOOP_TO,little_Little.keywords.FOR_LOOP_JUMP].indexOf(Type.enumParameters(little_interpreter_Interpreter.evaluate(_g1))[0]) != -1;
							if(_hx_tmp == true) {
								var params4 = _g2;
								fp.push(little_interpreter_InterpTokens.Identifier(Type.enumParameters(little_interpreter_Interpreter.evaluate(Type.enumParameters(p)[0]))[0]));
								fp.push(little_interpreter_InterpTokens.Expression(Type.enumParameters(params4)[0],null));
							} else {
								fp.push(p);
							}
						}
					}
				}
			} else {
				fp.push(p);
			}
		}
		params = fp;
		var token = params[0];
		var _this = [little_tools_InterpTokensSimple.VARIABLE_DECLARATION].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) == -1) {
			little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("`for` loop must start with a variable to count on (expected definition/block, found: `" + little_tools_PrettyPrinter.stringifyInterpreter(null,params[0]) + "`)"));
			return val;
		}
		var typeName = little_tools_Extensions.asJoinedStringPath(Type.enumParameters(params[0])[1]);
		if([little_Little.keywords.TYPE_INT,little_Little.keywords.TYPE_FLOAT,little_Little.keywords.TYPE_DYNAMIC].indexOf(typeName) == -1) {
			little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("`for` loop's variable must be of type " + little_Little.keywords.TYPE_INT + ", " + little_Little.keywords.TYPE_FLOAT + " or " + little_Little.keywords.TYPE_DYNAMIC + " (given: " + typeName + ")"));
		}
		var from = null;
		var to = null;
		var jump = 1;
		var currentExpression = [];
		var currentlySet = -1;
		var _g = 1;
		var _g1 = params.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = params[i];
			if(_g2._hx_index == 26) {
				var _g3 = _g2.word;
				var _hx_tmp;
				var _hx_tmp1;
				if(_g3 == little_Little.keywords.FOR_LOOP_FROM == true) {
					if(currentExpression.length > 0) {
						switch(currentlySet) {
						case -1:
							little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Invalid `for` loop syntax: expected a `" + little_Little.keywords.FOR_LOOP_TO + "`, `" + little_Little.keywords.FOR_LOOP_FROM + "` or `" + little_Little.keywords.FOR_LOOP_JUMP + "` after the variable"));
							break;
						case 0:
							little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot repeat `" + little_Little.keywords.FOR_LOOP_FROM + "` tag twice in `for` loop."));
							break;
						case 1:
							to = little_tools_Conversion.toHaxeValue(little_interpreter_Interpreter.calculate(currentExpression));
							break;
						case 2:
							jump = little_tools_Conversion.toHaxeValue(little_interpreter_Interpreter.calculate(currentExpression));
							break;
						}
					}
					currentExpression = [];
					currentlySet = 0;
				} else {
					_hx_tmp1 = _g3 == little_Little.keywords.FOR_LOOP_TO;
					if(_hx_tmp1 == true) {
						if(currentExpression.length > 0) {
							switch(currentlySet) {
							case -1:
								little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Invalid `for` loop syntax: expected a `" + little_Little.keywords.FOR_LOOP_TO + "`, `" + little_Little.keywords.FOR_LOOP_FROM + "` or `" + little_Little.keywords.FOR_LOOP_JUMP + "` after the variable"));
								break;
							case 0:
								from = little_tools_Conversion.toHaxeValue(little_interpreter_Interpreter.calculate(currentExpression));
								break;
							case 1:
								little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot repeat `" + little_Little.keywords.FOR_LOOP_TO + "` tag twice in `for` loop."));
								break;
							case 2:
								jump = little_tools_Conversion.toHaxeValue(little_interpreter_Interpreter.calculate(currentExpression));
								break;
							}
						}
						currentExpression = [];
						currentlySet = 1;
					} else {
						_hx_tmp = _g3 == little_Little.keywords.FOR_LOOP_JUMP;
						if(_hx_tmp == true) {
							if(currentExpression.length > 0) {
								switch(currentlySet) {
								case -1:
									little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Invalid `for` loop syntax: expected a `" + little_Little.keywords.FOR_LOOP_TO + "`, `" + little_Little.keywords.FOR_LOOP_FROM + "` or `" + little_Little.keywords.FOR_LOOP_JUMP + "` after the variable"));
									break;
								case 0:
									from = little_tools_Conversion.toHaxeValue(little_interpreter_Interpreter.calculate(currentExpression));
									break;
								case 1:
									to = little_tools_Conversion.toHaxeValue(little_interpreter_Interpreter.calculate(currentExpression));
									break;
								case 2:
									little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot repeat `" + little_Little.keywords.FOR_LOOP_JUMP + "` tag twice in `for` loop."));
									break;
								}
							}
							currentExpression = [];
							currentlySet = 2;
						} else {
							currentExpression.push(params[i]);
						}
					}
				}
			} else {
				currentExpression.push(params[i]);
			}
		}
		switch(currentlySet) {
		case -1:
			little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Invalid `for` loop syntax: expected a `" + little_Little.keywords.FOR_LOOP_TO + "`, `" + little_Little.keywords.FOR_LOOP_FROM + "` or `" + little_Little.keywords.FOR_LOOP_JUMP + "` after the variable"));
			break;
		case 0:
			little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("Cannot repeat `" + little_Little.keywords.FOR_LOOP_FROM + "` tag twice in `for` loop."));
			break;
		case 1:
			to = little_tools_Conversion.toHaxeValue(little_interpreter_Interpreter.calculate(currentExpression));
			break;
		case 2:
			jump = little_tools_Conversion.toHaxeValue(little_interpreter_Interpreter.calculate(currentExpression));
			break;
		}
		if(jump == null) {
			jump = 1;
		}
		if(from < to) {
			while(from < to) {
				val = little_interpreter_Interpreter.run([little_interpreter_InterpTokens.Write([params[0]],little_tools_Conversion.toLittleValue(from))].concat(body));
				from += jump;
			}
		} else {
			while(from > to) {
				val = little_interpreter_Interpreter.run([little_interpreter_InterpTokens.Write([params[0]],little_tools_Conversion.toLittleValue(from))].concat(body));
				from -= jump;
			}
		}
		return val;
	});
	little_Little.plugin.registerCondition("after",null,function(params,body) {
		var val = little_interpreter_InterpTokens.NullValue;
		var ident = "";
		var token = params[0];
		var _this = [little_tools_InterpTokensSimple.BLOCK].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1) {
			var output = little_interpreter_Interpreter.evaluate(params[0]);
			little_interpreter_Interpreter.assert(output,little_tools_InterpTokensSimple.CHARACTERS,"`after` condition that starts with a code block must have it's code block return a `" + little_Little.keywords.TYPE_STRING + "` (returned: " + little_tools_PrettyPrinter.stringifyInterpreter(null,output) + ")");
			ident = little_tools_Conversion.toHaxeValue(output);
		} else {
			var token = params[0];
			var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.PROPERTY_ACCESS].slice();
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				var x = _this[i];
				result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1) {
				var token = params[0];
				var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					var x = _this[i];
					result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
				}
				ident = result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(token)[0] : Type.enumParameters(little_interpreter_Interpreter.run([token]))[0];
			} else {
				little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("`after` condition must start with a variable to watch (expected definition, found: `" + little_tools_PrettyPrinter.stringifyInterpreter(null,params[0]) + "`)"));
				return val;
			}
		}
		var listener = null;
		listener = function(setIdentifiers) {
			var cond = little_tools_Conversion.toHaxeValue(little_interpreter_Interpreter.calculate(params));
			if(setIdentifiers.indexOf(ident) != -1 && cond) {
				little_interpreter_Interpreter.run(body);
				HxOverrides.remove(little_Little.runtime.onWriteValue,listener);
			}
		};
		little_Little.runtime.onWriteValue.push(listener);
		return val;
	});
	little_Little.plugin.registerCondition("whenever",null,function(params,body) {
		var val = little_interpreter_InterpTokens.NullValue;
		var ident = "";
		var token = params[0];
		var _this = [little_tools_InterpTokensSimple.BLOCK].slice();
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var x = _this[i];
			result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
		}
		if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1) {
			var output = little_interpreter_Interpreter.evaluate(params[0]);
			little_interpreter_Interpreter.assert(output,little_tools_InterpTokensSimple.CHARACTERS,"`whenever` condition that starts with a code block must have it's code block return a `" + little_Little.keywords.TYPE_STRING + "` (returned: " + little_tools_PrettyPrinter.stringifyInterpreter(null,output) + ")");
			ident = little_tools_Conversion.toHaxeValue(output);
		} else {
			var token = params[0];
			var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.PROPERTY_ACCESS].slice();
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				var x = _this[i];
				result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
			}
			if(result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1) {
				var token = params[0];
				var _this = [little_tools_InterpTokensSimple.IDENTIFIER,little_tools_InterpTokensSimple.CHARACTERS].slice();
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					var x = _this[i];
					result[i] = little_tools_TextTools.remove($hxEnums[x.__enum__].__constructs__[x._hx_index]._hx_name,"_").toLowerCase();
				}
				ident = result.indexOf($hxEnums[token.__enum__].__constructs__[token._hx_index]._hx_name.toLowerCase()) != -1 ? Type.enumParameters(token)[0] : Type.enumParameters(little_interpreter_Interpreter.run([token]))[0];
			} else {
				little_Little.runtime.throwError(little_interpreter_InterpTokens.ErrorMessage("`whenever` condition must start with a variable to watch (expected definition, found: `" + little_tools_PrettyPrinter.stringifyInterpreter(null,params[0]) + "`)"));
				return val;
			}
		}
		var listener = function(setIdentifiers) {
			var cond = little_tools_Conversion.toHaxeValue(little_interpreter_Interpreter.calculate(params));
			if(setIdentifiers.indexOf(ident) != -1 && cond) {
				little_interpreter_Interpreter.run(body);
			}
		};
		little_Little.runtime.onWriteValue.push(listener);
		return val;
	});
};
var little_tools_PrettyPrinter = function() { };
$hxClasses["little.tools.PrettyPrinter"] = little_tools_PrettyPrinter;
little_tools_PrettyPrinter.__name__ = "little.tools.PrettyPrinter";
little_tools_PrettyPrinter.printParserAst = function(ast,spacingBetweenNodes) {
	if(spacingBetweenNodes == null) {
		spacingBetweenNodes = 6;
	}
	if(ast == null) {
		return "null (look for errors in input)";
	}
	little_tools_PrettyPrinter.s = little_tools_TextTools.multiply(" ",spacingBetweenNodes);
	var unfilteredResult = little_tools_PrettyPrinter.getTree_PARSER(little_parser_ParserTokens.Expression(ast,null),[],0,true);
	var filtered = "";
	var _g = 0;
	var _g1 = unfilteredResult.split("\n");
	while(_g < _g1.length) {
		var line = _g1[_g];
		++_g;
		if(line == "└─── Expression") {
			continue;
		}
		filtered += line.substring(spacingBetweenNodes - 1) + "\n";
	}
	return "\nAst\n" + filtered;
};
little_tools_PrettyPrinter.printInterpreterAst = function(ast,spacingBetweenNodes) {
	if(spacingBetweenNodes == null) {
		spacingBetweenNodes = 6;
	}
	if(ast == null) {
		return "null (look for errors in input)";
	}
	little_tools_PrettyPrinter.s = little_tools_TextTools.multiply(" ",spacingBetweenNodes);
	var unfilteredResult = little_tools_PrettyPrinter.getTree_INTERP(little_interpreter_InterpTokens.Expression(ast,null),[],0,true);
	var filtered = "";
	var _g = 0;
	var _g1 = unfilteredResult.split("\n");
	while(_g < _g1.length) {
		var line = _g1[_g];
		++_g;
		if(line == "└─── Expression") {
			continue;
		}
		filtered += line.substring(spacingBetweenNodes - 1) + "\n";
	}
	return "\nAst\n" + filtered;
};
little_tools_PrettyPrinter.prefixFA = function(pArray) {
	var prefix = "";
	var _g = 0;
	var _g1 = little_tools_PrettyPrinter.l;
	while(_g < _g1) {
		var i = _g++;
		if(pArray[i] == 1) {
			prefix += "│" + little_tools_PrettyPrinter.s.substring(1);
		} else {
			prefix += little_tools_PrettyPrinter.s;
		}
	}
	return prefix;
};
little_tools_PrettyPrinter.pushIndex = function(pArray,i) {
	var arr = pArray.slice();
	arr[i + 1] = 1;
	return arr;
};
little_tools_PrettyPrinter.getTree_PARSER = function(root,prefix,level,last) {
	little_tools_PrettyPrinter.l = level;
	var t = last ? "└" : "├";
	var c = "├";
	var d = "───";
	if(root == null) {
		return "";
	}
	switch(root._hx_index) {
	case 0:
		var line = root.line;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " SetLine(" + line + ")\n";
	case 1:
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " SplitLine\n";
	case 2:
		var name = root.name;
		var type = root.type;
		var doc = root.doc;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Variable Creation\n";
		if(doc != null) {
			title += little_tools_PrettyPrinter.getTree_PARSER(doc,prefix.slice(),level + 1,false);
		}
		title += little_tools_PrettyPrinter.getTree_PARSER(name,prefix.slice(),level + 1,type == null);
		if(type != null) {
			title += little_tools_PrettyPrinter.getTree_PARSER(type,prefix.slice(),level + 1,true);
		}
		return title;
	case 3:
		var name = root.name;
		var params = root.params;
		var type = root.type;
		var doc = root.doc;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Function Creation\n";
		if(doc != null) {
			title += little_tools_PrettyPrinter.getTree_PARSER(doc,prefix.slice(),level + 1,false);
		}
		title += little_tools_PrettyPrinter.getTree_PARSER(name,prefix.slice(),level + 1,false);
		title += little_tools_PrettyPrinter.getTree_PARSER(params,prefix.slice(),level + 1,type == null);
		if(type != null) {
			title += little_tools_PrettyPrinter.getTree_PARSER(type,prefix.slice(),level + 1,true);
		}
		return title;
	case 4:
		var name = root.name;
		var exp = root.exp;
		var body = root.body;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Condition\n";
		title += little_tools_PrettyPrinter.getTree_PARSER(name,prefix.slice(),level + 1,false);
		title += little_tools_PrettyPrinter.getTree_PARSER(exp,little_tools_PrettyPrinter.pushIndex(prefix,level),level + 1,false);
		title += little_tools_PrettyPrinter.getTree_PARSER(body,prefix.slice(),level + 1,true);
		return title;
	case 5:
		var name = root.name;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Read: " + Std.string(name) + "\n";
	case 6:
		var assignees = root.assignees;
		var value = root.value;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Variable Write\n" + little_tools_PrettyPrinter.getTree_PARSER(little_parser_ParserTokens.PartArray(assignees),little_tools_PrettyPrinter.pushIndex(prefix,level),level + 1,false) + little_tools_PrettyPrinter.getTree_PARSER(value,prefix.slice(),level + 1,true);
	case 7:
		var value = root.word;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + value + "\n";
	case 8:
		var value = root.value;
		var type = root.type;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Type Declaration\n" + little_tools_PrettyPrinter.getTree_PARSER(value,type == null ? prefix.slice() : little_tools_PrettyPrinter.pushIndex(prefix,level),level + 1,type == null) + little_tools_PrettyPrinter.getTree_PARSER(type,prefix.slice(),level + 1,true);
	case 9:
		var name = root.name;
		var params = root.params;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Function Call\n";
		title += little_tools_PrettyPrinter.getTree_PARSER(name,little_tools_PrettyPrinter.pushIndex(prefix,level),level + 1,false);
		title += little_tools_PrettyPrinter.getTree_PARSER(params,prefix.slice(),level + 1,true);
		return title;
	case 10:
		var value = root.value;
		var type = root.type;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Return\n" + little_tools_PrettyPrinter.getTree_PARSER(value,prefix.slice(),level + 1,type == null) + little_tools_PrettyPrinter.getTree_PARSER(type,prefix.slice(),level + 1,true);
	case 11:
		var parts = root.parts;
		var type = root.type;
		if(parts.length == 0) {
			return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " <empty expression>\n";
		}
		var strParts = ["" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Expression\n" + little_tools_PrettyPrinter.getTree_PARSER(type,prefix.slice(),level + 1,false)];
		var _g = [];
		var _g1 = 0;
		var _g2 = parts.length - 1;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(little_tools_PrettyPrinter.getTree_PARSER(parts[i],little_tools_PrettyPrinter.pushIndex(prefix,level),level + 1,false));
		}
		var strParts1 = strParts.concat(_g);
		strParts1.push(little_tools_PrettyPrinter.getTree_PARSER(parts[parts.length - 1],prefix.slice(),level + 1,true));
		return strParts1.join("");
	case 12:
		var body = root.body;
		var type = root.type;
		if(body.length == 0) {
			return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " <empty block>\n";
		}
		var strParts = ["" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Block\n" + little_tools_PrettyPrinter.getTree_PARSER(type,prefix.slice(),level + 1,false)];
		var _g = [];
		var _g1 = 0;
		var _g2 = body.length - 1;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(little_tools_PrettyPrinter.getTree_PARSER(body[i],little_tools_PrettyPrinter.pushIndex(prefix,level),level + 1,false));
		}
		var strParts1 = strParts.concat(_g);
		strParts1.push(little_tools_PrettyPrinter.getTree_PARSER(body[body.length - 1],prefix.slice(),level + 1,true));
		return strParts1.join("");
	case 13:
		var body = root.parts;
		if(body.length == 0) {
			return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " <empty array>\n";
		}
		var strParts = ["" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Part Array\n"];
		var _g = [];
		var _g1 = 0;
		var _g2 = body.length - 1;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(little_tools_PrettyPrinter.getTree_PARSER(body[i],little_tools_PrettyPrinter.pushIndex(prefix,level),level + 1,false));
		}
		var strParts1 = strParts.concat(_g);
		strParts1.push(little_tools_PrettyPrinter.getTree_PARSER(body[body.length - 1],prefix.slice(),level + 1,true));
		return strParts1.join("");
	case 14:
		var name = root.name;
		var property = root.property;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Property Access\n" + little_tools_PrettyPrinter.getTree_PARSER(name,little_tools_PrettyPrinter.pushIndex(prefix,level),level + 1,false) + little_tools_PrettyPrinter.getTree_PARSER(property,prefix.slice(),level + 1,true);
	case 15:
		var value = root.sign;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + value + "\n";
	case 16:
		var num = root.num;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + num + "\n";
	case 17:
		var num = root.num;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + num + "\n";
	case 18:
		var string = root.string;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " \"" + string + "\"\n";
	case 19:
		var doc = root.doc;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Documentation: " + little_tools_TextTools.replace(doc,"\n","\n" + little_tools_PrettyPrinter.prefixFA(prefix) + "│                  ") + "\n";
	case 20:
		var name = root.msg;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Error: " + name + "\n";
	case 21:
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + little_Little.keywords.NULL_VALUE + "\n";
	case 22:
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + little_Little.keywords.TRUE_VALUE + "\n";
	case 23:
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + little_Little.keywords.FALSE_VALUE + "\n";
	case 24:
		var name = root.name;
		var parts = root.params;
		if(parts.length == 0) {
			return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + name + "\n";
		}
		var strParts = ["" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + name + "\n"];
		var _g = [];
		var _g1 = 0;
		var _g2 = parts.length - 1;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(little_tools_PrettyPrinter.getTree_PARSER(parts[i],little_tools_PrettyPrinter.pushIndex(prefix,level),level + 1,false));
		}
		var strParts1 = strParts.concat(_g);
		strParts1.push(little_tools_PrettyPrinter.getTree_PARSER(parts[parts.length - 1],prefix.slice(),level + 1,true));
		return strParts1.join("");
	}
};
little_tools_PrettyPrinter.getTree_INTERP = function(root,prefix,level,last) {
	little_tools_PrettyPrinter.l = level;
	var t = last ? "└" : "├";
	var c = "├";
	var d = "───";
	if(root == null) {
		return "";
	}
	switch(root._hx_index) {
	case 0:
		var line = root.line;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " SetLine(" + line + ")\n";
	case 1:
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " SplitLine\n";
	case 2:
		var name = root.name;
		var type = root.type;
		var doc = root.doc;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Variable Declaration\n";
		if(doc != null) {
			title += little_tools_PrettyPrinter.getTree_INTERP(doc,prefix.slice(),level + 1,false);
		}
		title += little_tools_PrettyPrinter.getTree_INTERP(name,prefix.slice(),level + 1,type == null);
		if(type != null) {
			title += little_tools_PrettyPrinter.getTree_INTERP(type,prefix.slice(),level + 1,true);
		}
		return title;
	case 3:
		var name = root.name;
		var params = root.params;
		var type = root.type;
		var doc = root.doc;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Function Declaration\n";
		if(doc != null) {
			title += little_tools_PrettyPrinter.getTree_INTERP(doc,prefix.slice(),level + 1,false);
		}
		title += little_tools_PrettyPrinter.getTree_INTERP(name,prefix.slice(),level + 1,false);
		title += little_tools_PrettyPrinter.getTree_INTERP(params,prefix.slice(),level + 1,type == null);
		if(type != null) {
			title += little_tools_PrettyPrinter.getTree_INTERP(type,prefix.slice(),level + 1,true);
		}
		return title;
	case 4:
		var name = root.name;
		var ct = root.conditionType;
		var doc = root.doc;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Condition Declaration\n";
		if(doc != null) {
			title += little_tools_PrettyPrinter.getTree_INTERP(doc,prefix.slice(),level + 1,false);
		}
		title += little_tools_PrettyPrinter.getTree_INTERP(name,prefix.slice(),level + 1,false);
		title += little_tools_PrettyPrinter.getTree_INTERP(ct,prefix.slice(),level + 1,true);
		return title;
	case 5:
		var name = root.name;
		var doc = root.doc;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Class Declaration\n";
		if(doc != null) {
			title += little_tools_PrettyPrinter.getTree_INTERP(doc,prefix.slice(),level + 1,false);
		}
		title += little_tools_PrettyPrinter.getTree_INTERP(name,prefix.slice(),level + 1,true);
		return title;
	case 6:
		var callers = root.callers;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Condition Code\n";
		title += little_tools_PrettyPrinter.getTree_INTERP(little_interpreter_InterpTokens.Characters(callers.toString()),prefix.slice(),level + 1,true);
		return title;
	case 7:
		var name = root.name;
		var exp = root.exp;
		var body = root.body;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Condition Call\n";
		title += little_tools_PrettyPrinter.getTree_INTERP(name,prefix.slice(),level + 1,false);
		title += little_tools_PrettyPrinter.getTree_INTERP(exp,little_tools_PrettyPrinter.pushIndex(prefix,level),level + 1,false);
		title += little_tools_PrettyPrinter.getTree_INTERP(body,prefix.slice(),level + 1,true);
		return title;
	case 8:
		var requiredParams = root.requiredParams;
		var body = root.body;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Function Code\n";
		title += little_tools_PrettyPrinter.getTree_INTERP(little_interpreter_InterpTokens.Identifier(requiredParams.toString()),prefix.slice(),level + 1,false);
		title += little_tools_PrettyPrinter.getTree_INTERP(body,prefix.slice(),level + 1,true);
		return title;
	case 9:
		var name = root.name;
		var params = root.params;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Function Call\n";
		title += little_tools_PrettyPrinter.getTree_INTERP(name,little_tools_PrettyPrinter.pushIndex(prefix,level),level + 1,false);
		title += little_tools_PrettyPrinter.getTree_INTERP(params,prefix.slice(),level + 1,true);
		return title;
	case 10:
		var value = root.value;
		var type = root.type;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Function Return\n";
		title += little_tools_PrettyPrinter.getTree_INTERP(value,prefix.slice(),level + 1,type == null);
		if(type != null) {
			title += little_tools_PrettyPrinter.getTree_INTERP(type,prefix.slice(),level + 1,true);
		}
		return title;
	case 11:
		var assignees = root.assignees;
		var value = root.value;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Write\n";
		title += little_tools_PrettyPrinter.getTree_INTERP(little_interpreter_InterpTokens.PartArray(assignees),little_tools_PrettyPrinter.pushIndex(prefix,level),level + 1,false);
		title += little_tools_PrettyPrinter.getTree_INTERP(value,prefix.slice(),level + 1,true);
		return title;
	case 12:
		var value = root.value;
		var type = root.type;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Type Cast\n";
		title += little_tools_PrettyPrinter.getTree_INTERP(value,prefix.slice(),level + 1,false);
		title += little_tools_PrettyPrinter.getTree_INTERP(type,prefix.slice(),level + 1,true);
		return title;
	case 13:
		var parts = root.parts;
		var type = root.type;
		if(parts.length == 0) {
			return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " <empty expression>\n";
		}
		var strParts = ["" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Expression\n" + little_tools_PrettyPrinter.getTree_INTERP(type,prefix.slice(),level + 1,false)];
		var _g = [];
		var _g1 = 0;
		var _g2 = parts.length - 1;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(little_tools_PrettyPrinter.getTree_INTERP(parts[i],little_tools_PrettyPrinter.pushIndex(prefix,level),level + 1,false));
		}
		var strParts1 = strParts.concat(_g);
		strParts1.push(little_tools_PrettyPrinter.getTree_INTERP(parts[parts.length - 1],prefix.slice(),level + 1,true));
		return strParts1.join("");
	case 14:
		var body = root.body;
		var type = root.type;
		if(body.length == 0) {
			return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " <empty block>\n";
		}
		var strParts = ["" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Block\n" + little_tools_PrettyPrinter.getTree_INTERP(type,prefix.slice(),level + 1,false)];
		var _g = [];
		var _g1 = 0;
		var _g2 = body.length - 1;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(little_tools_PrettyPrinter.getTree_INTERP(body[i],little_tools_PrettyPrinter.pushIndex(prefix,level),level + 1,false));
		}
		var strParts1 = strParts.concat(_g);
		strParts1.push(little_tools_PrettyPrinter.getTree_INTERP(body[body.length - 1],prefix.slice(),level + 1,true));
		return strParts1.join("");
	case 15:
		var parts = root.parts;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Part Array\n";
		var _g = 0;
		while(_g < parts.length) {
			var part = parts[_g];
			++_g;
			title += little_tools_PrettyPrinter.getTree_INTERP(part,prefix.slice(),level + 1,part == parts[parts.length - 1]);
		}
		return title;
	case 16:
		var name = root.name;
		var property = root.property;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Property Access\n";
		title += little_tools_PrettyPrinter.getTree_INTERP(name,prefix.slice(),level + 1,false);
		title += little_tools_PrettyPrinter.getTree_INTERP(property,prefix.slice(),level + 1,true);
		return title;
	case 17:
		var num = root.num;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + num + "\n";
	case 18:
		var num = root.num;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + num + "\n";
	case 19:
		var string = root.string;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " \"" + string + "\"\n";
	case 20:
		var doc = root.doc;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " \"\"\"" + doc + "\"\"\"\n";
	case 21:
		var pointer = root.pointer;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " ClassPointer: " + (pointer == null ? "null" : little_interpreter_memory_MemoryPointer.toString(pointer)) + "\n";
	case 22:
		var sign = root.sign;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + sign + "\n";
	case 23:
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + Std.string(little_parser_ParserTokens.NullValue) + "\n";
	case 24:
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + Std.string(little_parser_ParserTokens.TrueValue) + "\n";
	case 25:
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + Std.string(little_parser_ParserTokens.FalseValue) + "\n";
	case 26:
		var word = root.word;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + word + "\n";
	case 27:
		var _g = root.typeName;
		var props = root.props;
		var title = "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " Object\n";
		var i = 0;
		var h = props.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_key = key;
			var _g_value = _g_h[key];
			var key1 = _g_key;
			var value = _g_value;
			++i;
			var title1 = little_interpreter_InterpTokens.Identifier(key1);
			var title2 = prefix.slice();
			var title3 = level + 1;
			var _g = [];
			var h = props.h;
			var x_h = h;
			var x_keys = Object.keys(h);
			var x_length = x_keys.length;
			var x_current = 0;
			while(x_current < x_length) {
				var x = x_keys[x_current++];
				_g.push(x);
			}
			title += little_tools_PrettyPrinter.getTree_INTERP(title1,title2,title3,i == _g.length);
			var title4 = little_interpreter_InterpTokens.Characters(value.documentation);
			var _g1 = [];
			var h1 = props.h;
			var x_h1 = h1;
			var x_keys1 = Object.keys(h1);
			var x_length1 = x_keys1.length;
			var x_current1 = 0;
			while(x_current1 < x_length1) {
				var x1 = x_keys1[x_current1++];
				_g1.push(x1);
			}
			title += little_tools_PrettyPrinter.getTree_INTERP(title4,i == _g1.length ? prefix.slice() : little_tools_PrettyPrinter.pushIndex(prefix,level),level + 2,false);
			var value1 = value.value;
			var _g2 = [];
			var h2 = props.h;
			var x_h2 = h2;
			var x_keys2 = Object.keys(h2);
			var x_length2 = x_keys2.length;
			var x_current2 = 0;
			while(x_current2 < x_length2) {
				var x2 = x_keys2[x_current2++];
				_g2.push(x2);
			}
			title += little_tools_PrettyPrinter.getTree_INTERP(value1,i == _g2.length ? prefix.slice() : little_tools_PrettyPrinter.pushIndex(prefix,level),level + 2,true);
		}
		return title;
	case 28:
		var msg = root.msg;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " " + Std.string(root) + "\n";
	case 29:
		var func = root.func;
		return "" + little_tools_PrettyPrinter.prefixFA(prefix) + t + d + " <Haxe Extern>\n";
	}
};
little_tools_PrettyPrinter.stringifyParser = function(code,token) {
	if(token != null) {
		code = [token];
	}
	var s = "";
	var _g = 0;
	while(_g < code.length) {
		var token = code[_g];
		++_g;
		switch(token._hx_index) {
		case 0:
			var line = token.line;
			s += "\n" + little_tools_PrettyPrinter.indent;
			break;
		case 1:
			s += ", ";
			break;
		case 2:
			var _g1 = token.doc;
			var name = token.name;
			var type = token.type;
			s += "" + little_Little.keywords.VARIABLE_DECLARATION + " " + Std.string(name) + " " + (type != null ? "" + little_Little.keywords.TYPE_DECL_OR_CAST + " " + little_tools_PrettyPrinter.stringifyParser(null,type) : "");
			break;
		case 3:
			var _g2 = token.doc;
			var name1 = token.name;
			var params = token.params;
			var type1 = token.type;
			s += "" + little_Little.keywords.FUNCTION_DECLARATION + " " + little_tools_PrettyPrinter.stringifyParser(null,name1) + "(" + little_tools_PrettyPrinter.stringifyParser(null,params) + ") " + (type1 != null ? "" + little_Little.keywords.TYPE_DECL_OR_CAST + " " + little_tools_PrettyPrinter.stringifyParser(null,type1) : "");
			break;
		case 4:
			var name2 = token.name;
			var exp = token.exp;
			var body = token.body;
			little_tools_PrettyPrinter.indent += "\t";
			s += "" + little_tools_PrettyPrinter.stringifyParser(null,name2) + " (" + little_tools_PrettyPrinter.stringifyParser(null,exp) + ") \n" + little_tools_PrettyPrinter.stringifyParser(null,body);
			little_tools_PrettyPrinter.indent = little_tools_TextTools.replaceLast(little_tools_PrettyPrinter.indent,"\t","");
			break;
		case 5:
			var name3 = token.name;
			s += little_tools_PrettyPrinter.stringifyParser(null,name3);
			break;
		case 6:
			var assignees = token.assignees;
			var value = token.value;
			var _this = assignees.concat([value]);
			var result = new Array(_this.length);
			var _g3 = 0;
			var _g4 = _this.length;
			while(_g3 < _g4) {
				var i = _g3++;
				result[i] = little_tools_PrettyPrinter.stringifyParser(null,_this[i]);
			}
			s += Std.string([result.join(" = ")]);
			break;
		case 7:
			var word = token.word;
			s += word;
			break;
		case 8:
			var value1 = token.value;
			var type2 = token.type;
			s += "" + little_tools_PrettyPrinter.stringifyParser(null,value1) + " " + little_Little.keywords.TYPE_DECL_OR_CAST + " " + little_tools_PrettyPrinter.stringifyParser(null,type2);
			break;
		case 9:
			var name4 = token.name;
			var params1 = token.params;
			s += "" + little_tools_PrettyPrinter.stringifyParser(null,name4) + "(" + little_tools_PrettyPrinter.stringifyParser(null,params1) + ")";
			break;
		case 10:
			var value2 = token.value;
			var type3 = token.type;
			s += "" + little_Little.keywords.FUNCTION_RETURN + " " + little_tools_PrettyPrinter.stringifyParser(null,value2);
			break;
		case 11:
			var parts = token.parts;
			var type4 = token.type;
			s += little_tools_PrettyPrinter.stringifyParser(parts);
			break;
		case 12:
			var body1 = token.body;
			var type5 = token.type;
			little_tools_PrettyPrinter.indent += "\t";
			s += "{" + little_tools_PrettyPrinter.stringifyParser(body1) + "} " + (type5 != null ? "" + little_Little.keywords.TYPE_DECL_OR_CAST + " " + little_tools_PrettyPrinter.stringifyParser(null,type5) : "");
			little_tools_PrettyPrinter.indent = little_tools_TextTools.replaceLast(little_tools_PrettyPrinter.indent,"\t","");
			break;
		case 13:
			var parts1 = token.parts;
			s += little_tools_PrettyPrinter.stringifyParser(parts1);
			break;
		case 14:
			var name5 = token.name;
			var property = token.property;
			s += "" + little_tools_PrettyPrinter.stringifyParser(null,name5) + little_Little.keywords.PROPERTY_ACCESS_SIGN + little_tools_PrettyPrinter.stringifyParser(null,property);
			break;
		case 15:
			var sign = token.sign;
			s += " " + sign + " ";
			break;
		case 16:
			var num = token.num;
			s += num;
			break;
		case 17:
			var num1 = token.num;
			s += num1;
			break;
		case 18:
			var string = token.string;
			s += "\"" + string + "\"";
			break;
		case 19:
			var doc = token.doc;
			s += "\"\"\"" + doc + "\"\"\"";
			break;
		case 20:
			var msg = token.msg;
			break;
		case 21:
			s += little_Little.keywords.NULL_VALUE;
			break;
		case 22:
			s += little_Little.keywords.TRUE_VALUE;
			break;
		case 23:
			s += little_Little.keywords.FALSE_VALUE;
			break;
		case 24:
			var _g5 = token.name;
			var _g6 = token.params;
			throw haxe_Exception.thrown("Custom tokens cannot be stringified, as they dont represent any output syntax (found " + Std.string(token) + ")");
		}
	}
	return s;
};
little_tools_PrettyPrinter.stringifyInterpreter = function(code,token) {
	if(token != null) {
		code = [token];
	}
	var s = "";
	var _g = 0;
	while(_g < code.length) {
		var token = code[_g];
		++_g;
		switch(token._hx_index) {
		case 0:
			var line = token.line;
			s += "\n" + little_tools_PrettyPrinter.indent;
			break;
		case 1:
			s += ", ";
			break;
		case 2:
			var name = token.name;
			var type = token.type;
			var doc = token.doc;
			s += "" + little_Little.keywords.VARIABLE_DECLARATION + " " + little_tools_PrettyPrinter.stringifyInterpreter(null,name) + " " + (type != null ? "" + little_Little.keywords.TYPE_DECL_OR_CAST + " " + little_tools_PrettyPrinter.stringifyInterpreter(null,type) : "");
			break;
		case 3:
			var name1 = token.name;
			var params = token.params;
			var type1 = token.type;
			var doc1 = token.doc;
			s += "" + little_Little.keywords.FUNCTION_DECLARATION + " " + little_tools_PrettyPrinter.stringifyInterpreter(null,name1) + "(" + little_tools_PrettyPrinter.stringifyInterpreter(null,params) + ") " + (type1 != null ? "" + little_Little.keywords.TYPE_DECL_OR_CAST + " " + little_tools_PrettyPrinter.stringifyInterpreter(null,type1) : "");
			break;
		case 4:
			var name2 = token.name;
			var ct = token.conditionType;
			var doc2 = token.doc;
			throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "little/tools/PrettyPrinter.hx", lineNumber : 414, className : "little.tools.PrettyPrinter", methodName : "stringifyInterpreter"});
		case 5:
			var name3 = token.name;
			var doc3 = token.doc;
			throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "little/tools/PrettyPrinter.hx", lineNumber : 415, className : "little.tools.PrettyPrinter", methodName : "stringifyInterpreter"});
		case 7:
			var name4 = token.name;
			var exp = token.exp;
			var body = token.body;
			s += "" + little_tools_PrettyPrinter.stringifyInterpreter(null,name4) + " (" + little_tools_PrettyPrinter.stringifyInterpreter(null,exp) + ") \n" + little_tools_PrettyPrinter.stringifyInterpreter(null,body);
			break;
		case 9:
			var name5 = token.name;
			var params1 = token.params;
			s += "" + little_tools_PrettyPrinter.stringifyInterpreter(null,name5) + "(" + little_tools_PrettyPrinter.stringifyInterpreter(null,params1) + ")";
			break;
		case 10:
			var value = token.value;
			var type2 = token.type;
			s += "" + little_Little.keywords.FUNCTION_RETURN + " " + little_tools_PrettyPrinter.stringifyInterpreter(null,value);
			break;
		case 11:
			var assignees = token.assignees;
			var value1 = token.value;
			var _this = assignees.concat([value1]);
			var result = new Array(_this.length);
			var _g1 = 0;
			var _g2 = _this.length;
			while(_g1 < _g2) {
				var i = _g1++;
				result[i] = little_tools_PrettyPrinter.stringifyInterpreter(null,_this[i]);
			}
			s += result.join(" = ");
			break;
		case 12:
			var value2 = token.value;
			var type3 = token.type;
			s += "" + little_tools_PrettyPrinter.stringifyInterpreter(null,value2) + " " + little_Little.keywords.TYPE_DECL_OR_CAST + " " + little_tools_PrettyPrinter.stringifyInterpreter(null,type3);
			break;
		case 13:
			var parts = token.parts;
			var type4 = token.type;
			s += little_tools_PrettyPrinter.stringifyInterpreter(parts);
			break;
		case 14:
			var body1 = token.body;
			var type5 = token.type;
			little_tools_PrettyPrinter.indent += "\t";
			s += "{" + little_tools_PrettyPrinter.stringifyInterpreter(body1) + "} " + (type5 != null ? "" + little_Little.keywords.TYPE_DECL_OR_CAST + " " + little_tools_PrettyPrinter.stringifyInterpreter(null,type5) : "");
			little_tools_PrettyPrinter.indent = little_tools_TextTools.replaceLast(little_tools_PrettyPrinter.indent,"\t","");
			break;
		case 15:
			var parts1 = token.parts;
			s += little_tools_PrettyPrinter.stringifyInterpreter(parts1);
			break;
		case 16:
			var name6 = token.name;
			var property = token.property;
			s += "" + little_tools_PrettyPrinter.stringifyInterpreter(null,name6) + little_Little.keywords.PROPERTY_ACCESS_SIGN + little_tools_PrettyPrinter.stringifyInterpreter(null,property);
			break;
		case 17:
			var num = token.num;
			s += num;
			break;
		case 18:
			var num1 = token.num;
			s += num1;
			break;
		case 19:
			var string = token.string;
			s += "\"" + string + "\"";
			break;
		case 20:
			var doc4 = token.doc;
			s += "\"\"\"" + doc4 + "\"\"\"";
			break;
		case 21:
			var pointer = token.pointer;
			var s1;
			if(little_Little.memory != null) {
				s1 = little_Little.memory.getTypeName(pointer);
			} else {
				throw haxe_Exception.thrown("No memory for ClassPointer token " + (pointer == null ? "null" : little_interpreter_memory_MemoryPointer.toString(pointer)));
			}
			s += s1;
			break;
		case 22:
			var sign = token.sign;
			s += sign;
			break;
		case 23:
			s += little_Little.keywords.NULL_VALUE;
			break;
		case 24:
			s += little_Little.keywords.TRUE_VALUE;
			break;
		case 25:
			s += little_Little.keywords.FALSE_VALUE;
			break;
		case 26:
			var word = token.word;
			s += word;
			break;
		case 28:
			var msg = token.msg;
			break;
		default:
			throw haxe_Exception.thrown("Stringifying token " + Std.string(token) + " does not make sense, as it is represented by other tokens on parse time, and thus cannot appear in a non-manipulated InterpTokens AST");
		}
		s += " ";
	}
	return little_tools_TextTools.replaceLast(s," ","");
};
little_tools_PrettyPrinter.prettyPrintOperatorPriority = function(priority) {
	var _g = [];
	var x = priority.keys();
	while(x.hasNext()) {
		var x1 = x.next();
		_g.push(x1);
	}
	var sortedKeys = _g;
	haxe_ds_ArraySort.sort(sortedKeys,function(x,y) {
		return x - y;
	});
	var string = "";
	var _g = 0;
	while(_g < sortedKeys.length) {
		var key = sortedKeys[_g];
		++_g;
		string += "" + key + ": (";
		var _g1 = 0;
		var _g2 = priority.h[key];
		while(_g1 < _g2.length) {
			var obj = _g2[_g1];
			++_g1;
			if(obj.side == little_interpreter_memory_OperatorType.LHS_RHS) {
				string += "_" + obj.sign + "_";
			} else if(obj.side == little_interpreter_memory_OperatorType.LHS_ONLY) {
				string += "_" + obj.sign;
			} else if(obj.side == little_interpreter_memory_OperatorType.RHS_ONLY) {
				string += "" + obj.sign + "_";
			}
			string += ", ";
		}
		string = little_tools_TextTools.replaceLast(string,", ",")") + "\n";
	}
	return string;
};
var little_tools_TextDirection = $hxEnums["little.tools.TextDirection"] = { __ename__:"little.tools.TextDirection",__constructs__:null
	,RTL: {_hx_name:"RTL",_hx_index:0,__enum__:"little.tools.TextDirection",toString:$estr}
	,LTR: {_hx_name:"LTR",_hx_index:1,__enum__:"little.tools.TextDirection",toString:$estr}
	,UNDETERMINED: {_hx_name:"UNDETERMINED",_hx_index:2,__enum__:"little.tools.TextDirection",toString:$estr}
};
little_tools_TextDirection.__constructs__ = [little_tools_TextDirection.RTL,little_tools_TextDirection.LTR,little_tools_TextDirection.UNDETERMINED];
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = "openfl.Lib";
openfl_Lib.__properties__ = {get_current:"get_current",get_application:"get_application"};
openfl_Lib.as = function(v,c) {
	if(js_Boot.__instanceof(v,c)) {
		return v;
	} else {
		return null;
	}
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.clearInterval = function(id) {
	if(openfl_Lib.__timers.h.hasOwnProperty(id)) {
		var timer = openfl_Lib.__timers.h[id];
		timer.stop();
		openfl_Lib.__timers.remove(id);
	}
};
openfl_Lib.clearTimeout = function(id) {
	if(openfl_Lib.__timers.h.hasOwnProperty(id)) {
		var timer = openfl_Lib.__timers.h[id];
		timer.stop();
		openfl_Lib.__timers.remove(id);
	}
};
openfl_Lib.getDefinitionByName = function(name) {
	if(name == null) {
		return null;
	}
	return $hxClasses[name];
};
openfl_Lib.getQualifiedClassName = function(value) {
	if(value == null) {
		return null;
	}
	var ref = js_Boot.__instanceof(value,Class) ? value : js_Boot.getClass(value);
	if(ref == null) {
		if(typeof(value) == "boolean" || value == Bool) {
			return "Bool";
		} else if(typeof(value) == "number" && ((value | 0) === value) || value == Int) {
			return "Int";
		} else if(typeof(value) == "number" || value == Float) {
			return "Float";
		} else {
			return null;
		}
	}
	return ref.__name__;
};
openfl_Lib.getQualifiedSuperclassName = function(value) {
	if(value == null) {
		return null;
	}
	var ref = js_Boot.__instanceof(value,Class) ? value : js_Boot.getClass(value);
	if(ref == null) {
		return null;
	}
	var parentRef = ref.__super__;
	if(parentRef == null) {
		return null;
	}
	return parentRef.__name__;
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	openfl_Lib.navigateToURL(request,target);
};
openfl_Lib.navigateToURL = function(request,$window) {
	if($window == null) {
		$window = "_blank";
	}
	var uri = request.url;
	if(Type.typeof(request.data) == ValueType.TObject) {
		var query = "";
		var fields = Reflect.fields(request.data);
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(query.length > 0) {
				query += "&";
			}
			var query1 = encodeURIComponent(field) + "=";
			var s = Std.string(Reflect.field(request.data,field));
			query += query1 + encodeURIComponent(s);
		}
		if(uri.indexOf("?") > -1) {
			uri += "&" + query;
		} else {
			uri += "?" + query;
		}
	}
	lime_system_System.openURL(uri,$window);
};
openfl_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	if(!Object.prototype.hasOwnProperty.call(openfl_Lib.__sentWarnings.h,api)) {
		openfl_Lib.__sentWarnings.h[api] = true;
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.sendToURL = function(request) {
	var urlLoader = new openfl_net_URLLoader();
	urlLoader.load(request);
};
openfl_Lib.setInterval = function(closure,delay,args) {
	var id = ++openfl_Lib.__lastTimerID;
	var timer = new haxe_Timer(delay);
	openfl_Lib.__timers.h[id] = timer;
	timer.run = function() {
		closure.apply(closure,args == null ? [] : args);
	};
	return id;
};
openfl_Lib.setTimeout = function(closure,delay,args) {
	var id = ++openfl_Lib.__lastTimerID;
	var this1 = openfl_Lib.__timers;
	var v = haxe_Timer.delay(function() {
		openfl_Lib.__timers.remove(id);
		closure.apply(closure,args == null ? [] : args);
	},delay);
	this1.h[id] = v;
	return id;
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "openfl/Lib.hx", lineNumber : 569, className : "openfl.Lib", methodName : "trace"});
};
openfl_Lib.isXMLName = function(name) {
	if(name == null) {
		return false;
	}
	if(!new EReg("^[a-zA-Z_]","").match(name)) {
		return false;
	}
	if(new EReg("^[xX][mM][lL]","").match(name)) {
		return false;
	}
	if(!new EReg("^[a-zA-Z0-9_\\-\\.]+$","").match(name)) {
		return false;
	}
	return true;
};
openfl_Lib.getClassByAlias = function(aliasName) {
	if(!Object.prototype.hasOwnProperty.call(openfl_Lib.__registeredClassAliases.h,aliasName)) {
		throw new openfl_errors_Error("Class " + aliasName + " could not be found.");
	}
	return openfl_Lib.__registeredClassAliases.h[aliasName];
};
openfl_Lib.registerClassAlias = function(aliasName,classObject) {
	if(classObject == null) {
		throw new openfl_errors_TypeError("Parameter classObject must be non-null");
	}
	if(aliasName == null) {
		throw new openfl_errors_TypeError("Parameter aliasName must be non-null");
	}
	openfl_Lib.__registeredClassAliases.h[aliasName] = classObject;
};
openfl_Lib.get_application = function() {
	return openfl_utils__$internal_Lib.application;
};
openfl_Lib.get_current = function() {
	if(openfl_utils__$internal_Lib.current == null) {
		openfl_utils__$internal_Lib.current = new openfl_display_MovieClip();
	}
	return openfl_utils__$internal_Lib.current;
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = "openfl._Vector.IVector";
openfl__$Vector_IVector.__isInterface__ = true;
openfl__$Vector_IVector.prototype = {
	get_length: null
	,set_length: null
	,fixed: null
	,concat: null
	,copy: null
	,filter: null
	,get: null
	,indexOf: null
	,insertAt: null
	,iterator: null
	,join: null
	,lastIndexOf: null
	,pop: null
	,push: null
	,removeAt: null
	,reverse: null
	,set: null
	,shift: null
	,slice: null
	,sort: null
	,splice: null
	,toString: null
	,unshift: null
	,__tempIndex: null
	,__class__: openfl__$Vector_IVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = "openfl._Vector.BoolVector";
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	fixed: null
	,__array: null
	,__tempIndex: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_BoolVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_BoolVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_BoolVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_BoolVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_BoolVector(0,tmp,_g);
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return false;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return false;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_BoolVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_BoolVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = false;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FloatVector = function(length,fixed,array,forceCopy) {
	if(forceCopy == null) {
		forceCopy = false;
	}
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(forceCopy) {
		this.__array = [];
		if(array != null) {
			var _g = 0;
			var _g1 = array.length;
			while(_g < _g1) {
				var i = _g++;
				this.__array[i] = array[i];
			}
		}
	} else {
		if(array == null) {
			array = [];
		}
		this.__array = array;
	}
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = "openfl._Vector.FloatVector";
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	fixed: null
	,__array: null
	,__tempIndex: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FloatVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_FloatVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_FloatVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_FloatVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_FloatVector(0,tmp,_g);
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_FloatVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FloatVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(value != this.__array.length && !this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = "openfl._Vector.FunctionVector";
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	fixed: null
	,__array: null
	,__tempIndex: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FunctionVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_FunctionVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_FunctionVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_FunctionVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_FunctionVector(0,tmp,_g);
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return null;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_FunctionVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FunctionVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = null;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = "openfl._Vector.IntVector";
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	fixed: null
	,__array: null
	,__tempIndex: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_IntVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_IntVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_IntVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_IntVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_IntVector(0,tmp,_g);
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_IntVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_IntVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_ObjectVector = function(length,fixed,array,forceCopy) {
	if(forceCopy == null) {
		forceCopy = false;
	}
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(forceCopy) {
		this.__array = [];
		if(array != null) {
			var _g = 0;
			var _g1 = array.length;
			while(_g < _g1) {
				var i = _g++;
				this.__array[i] = array[i];
			}
		}
	} else {
		if(array == null) {
			array = [];
		}
		this.__array = array;
	}
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = "openfl._Vector.ObjectVector";
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	fixed: null
	,__array: null
	,__tempIndex: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_ObjectVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_ObjectVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_ObjectVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_ObjectVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_ObjectVector(0,tmp,_g);
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_ObjectVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array.push(null);
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl_utils__$internal_Lib.application == null) {
		openfl_utils__$internal_Lib.application = this;
	}
	if(openfl_utils__$internal_Lib.current == null) {
		openfl_utils__$internal_Lib.current = new openfl_display_MovieClip();
	}
	openfl_utils__$internal_Lib.current.__loaderInfo = openfl_display_LoaderInfo.create(null);
	openfl_utils__$internal_Lib.current.__loaderInfo.content = openfl_utils__$internal_Lib.current;
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = "openfl.display.Application";
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	createWindow: function(attributes) {
		var $window = new openfl_display_Window(this,attributes);
		this.__windows.push($window);
		this.__windowByID.h[$window.id] = $window;
		var _g = this;
		var window1 = $window;
		var tmp = function() {
			_g.__onWindowClose(window1);
		};
		$window.onClose.add(tmp,false,-10000);
		if(this.__window == null) {
			this.__window = $window;
			$window.onActivate.add($bind(this,this.onWindowActivate));
			$window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
			$window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
			$window.onDeactivate.add($bind(this,this.onWindowDeactivate));
			$window.onDropFile.add($bind(this,this.onWindowDropFile));
			$window.onEnter.add($bind(this,this.onWindowEnter));
			$window.onExpose.add($bind(this,this.onWindowExpose));
			$window.onFocusIn.add($bind(this,this.onWindowFocusIn));
			$window.onFocusOut.add($bind(this,this.onWindowFocusOut));
			$window.onFullscreen.add($bind(this,this.onWindowFullscreen));
			$window.onKeyDown.add($bind(this,this.onKeyDown));
			$window.onKeyUp.add($bind(this,this.onKeyUp));
			$window.onLeave.add($bind(this,this.onWindowLeave));
			$window.onMinimize.add($bind(this,this.onWindowMinimize));
			$window.onMouseDown.add($bind(this,this.onMouseDown));
			$window.onMouseMove.add($bind(this,this.onMouseMove));
			$window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
			$window.onMouseUp.add($bind(this,this.onMouseUp));
			$window.onMouseWheel.add($bind(this,this.onMouseWheel));
			$window.onMove.add($bind(this,this.onWindowMove));
			$window.onRender.add($bind(this,this.render));
			$window.onResize.add($bind(this,this.onWindowResize));
			$window.onRestore.add($bind(this,this.onWindowRestore));
			$window.onTextEdit.add($bind(this,this.onTextEdit));
			$window.onTextInput.add($bind(this,this.onTextInput));
			this.onWindowCreate();
		}
		this.onCreateWindow.dispatch($window);
		return $window;
	}
	,exec: function() {
		return lime_app_Application.prototype.exec.call(this);
	}
	,__checkForAllWindowsClosed: function() {
		if(this.__windows.length > 0) {
			return;
		}
		lime_app_Application.prototype.__checkForAllWindowsClosed.call(this);
	}
	,__onModuleExit: function(code) {
		if(this.onExit.canceled) {
			return;
		}
		if(openfl_utils__$internal_Lib.application == this) {
			openfl_utils__$internal_Lib.application = null;
		}
		lime_app_Application.prototype.__onModuleExit.call(this,code);
	}
	,__class__: openfl_display_Application
});
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.__drawableType = 2;
	this.__bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = "openfl.display.Bitmap";
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	pixelSnapping: null
	,smoothing: null
	,__image: null
	,__bitmapData: null
	,__imageVersion: null
	,__enterFrame: function(deltaTime) {
		if(this.__bitmapData != null && this.__bitmapData.image != null && this.__bitmapData.image.version != this.__imageVersion) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		if(this.__bitmapData != null) {
			bounds.setTo(0,0,this.__bitmapData.width,this.__bitmapData.height);
		} else {
			bounds.setTo(0,0,0,0);
		}
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.__bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			if(this.__scrollRect != null && !this.__scrollRect.contains(px,py)) {
				return false;
			}
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__bitmapData == null) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			return true;
		}
		return false;
	}
	,get_bitmapData: function() {
		return this.__bitmapData;
	}
	,set_bitmapData: function(value) {
		this.__bitmapData = value;
		this.smoothing = false;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		var tmp = this.__filters != null;
		this.__imageVersion = -1;
		return this.__bitmapData;
	}
	,set_height: function(value) {
		if(this.__bitmapData != null) {
			this.set_scaleY(value / this.__bitmapData.height);
		} else {
			this.set_scaleY(0);
		}
		return value;
	}
	,set_width: function(value) {
		if(this.__bitmapData != null) {
			this.set_scaleX(value / this.__bitmapData.width);
		} else {
			this.set_scaleX(0);
		}
		return value;
	}
	,__class__: openfl_display_Bitmap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"})
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.__drawableType = 0;
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	}
	if(height == null) {
		height = 0;
	}
	if(width < 0) {
		width = 0;
	}
	if(height < 0) {
		height = 0;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	this.__textureWidth = width;
	this.__textureHeight = height;
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = "openfl.display.BitmapData";
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type) {
	return null;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha) {
	return null;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path) {
	return null;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	if(bitmapData.image != null) {
		return bitmapData;
	} else {
		return null;
	}
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture;
	bitmapData.__textureContext = texture.__textureContext;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.loadFromBase64 = function(base64,type) {
	return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.loadFromBytes = function(bytes,rawAlpha) {
	return lime_graphics_Image.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(image) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(rawAlpha != null) {
			bitmapData.__applyAlpha(rawAlpha);
		}
		return lime_app_Future.withValue(bitmapData);
	});
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return lime_graphics_Image.loadFromFile(path).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__blendMode: null
	,__drawableType: null
	,__framebuffer: null
	,__framebufferContext: null
	,__indexBuffer: null
	,__indexBufferContext: null
	,__indexBufferData: null
	,__indexBufferGrid: null
	,__isMask: null
	,__isValid: null
	,__mask: null
	,__renderable: null
	,__renderTransform: null
	,__scrollRect: null
	,__stencilBuffer: null
	,__surface: null
	,__texture: null
	,__textureContext: null
	,__textureHeight: null
	,__textureVersion: null
	,__textureWidth: null
	,__transform: null
	,__uvRect: null
	,__vertexBuffer: null
	,__vertexBufferContext: null
	,__vertexBufferData: null
	,__vertexBufferGrid: null
	,__vertexBufferHeight: null
	,__vertexBufferScaleX: null
	,__vertexBufferScaleY: null
	,__vertexBufferWidth: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable) {
			return;
		}
		var needSecondBitmapData = filter.__needSecondBitmapData;
		var needCopyOfOriginal = filter.__preserveObject;
		var bitmapData2 = null;
		var bitmapData3 = null;
		if(needSecondBitmapData) {
			bitmapData2 = new openfl_display_BitmapData(this.width,this.height,true,0);
		} else {
			bitmapData2 = this;
		}
		if(needCopyOfOriginal) {
			bitmapData3 = new openfl_display_BitmapData(this.width,this.height,true,0);
		}
		if(filter.__preserveObject) {
			bitmapData3.copyPixels(this,this.rect,destPoint);
		}
		var lastBitmap = filter.__applyFilter(bitmapData2,this,sourceRect,destPoint);
		if(filter.__preserveObject) {
			lastBitmap.draw(bitmapData3,null,null);
		}
		if(needSecondBitmapData && lastBitmap == bitmapData2) {
			bitmapData2.image.version = this.image.version;
			this.image = bitmapData2.image;
		}
		this.image.dirty = true;
		this.image.version++;
	}
	,clone: function() {
		var bitmapData;
		if(!this.__isValid) {
			bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent,0);
		} else if(!this.readable && this.image == null) {
			bitmapData = new openfl_display_BitmapData(0,0,this.transparent,0);
			bitmapData.width = this.width;
			bitmapData.height = this.height;
			bitmapData.__textureWidth = this.__textureWidth;
			bitmapData.__textureHeight = this.__textureHeight;
			bitmapData.rect.copyFrom(this.rect);
			bitmapData.__framebuffer = this.__framebuffer;
			bitmapData.__framebufferContext = this.__framebufferContext;
			bitmapData.__texture = this.__texture;
			bitmapData.__textureContext = this.__textureContext;
			bitmapData.__isValid = true;
		} else {
			bitmapData = openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
		bitmapData.__worldTransform.copyFrom(this.__worldTransform);
		bitmapData.__renderTransform.copyFrom(this.__renderTransform);
		return bitmapData;
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) {
			return 0;
		} else if(otherBitmapData == null) {
			return -1;
		} else if(this.readable == false || otherBitmapData.readable == false) {
			return -2;
		} else if(this.width != otherBitmapData.width) {
			return -3;
		} else if(this.height != otherBitmapData.height) {
			return -4;
		}
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) {
				return 0;
			}
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g = 0;
		var _g1 = this.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.width;
			while(_g2 < _g3) {
				var x = _g2++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >>> 16 & 255) - (otherPixel >>> 16 & 255);
					g = (pixel >>> 8 & 255) - (otherPixel >>> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) {
						r *= -1;
					}
					if(g < 0) {
						g *= -1;
					}
					if(b < 0) {
						b *= -1;
					}
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >>> 24 & 255) - (otherPixel >>> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | 255;
							comparePixel = (a & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | b & 255;
						comparePixel = -16777216 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) {
						bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					}
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) {
			return 0;
		}
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.readable) {
			return;
		}
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.readable || sourceBitmapData == null) {
			return;
		}
		if(alphaPoint != null) {
			openfl_display_BitmapData.__tempVector.x = alphaPoint.x;
			openfl_display_BitmapData.__tempVector.y = alphaPoint.y;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint != null ? openfl_display_BitmapData.__tempVector : null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__vertexBuffer = null;
		this.__framebuffer = null;
		this.__framebufferContext = null;
		this.__texture = null;
		this.__textureContext = null;
	}
	,disposeImage: function() {
		this.readable = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(source == null) {
			return;
		}
		var wasVisible = true;
		var sourceAsDisplayObject = null;
		if(((source) instanceof openfl_display_DisplayObject)) {
			sourceAsDisplayObject = js_Boot.__cast(source , openfl_display_DisplayObject);
			if(!sourceAsDisplayObject.get_visible()) {
				wasVisible = false;
				sourceAsDisplayObject.set_visible(true);
			}
		}
		source.__update(false,true);
		var transform = openfl_geom_Matrix.__pool.get();
		transform.copyFrom(source.__renderTransform);
		transform.invert();
		if(matrix != null) {
			transform.concat(matrix);
		}
		var clipMatrix = null;
		if(clipRect != null) {
			clipMatrix = openfl_geom_Matrix.__pool.get();
			clipMatrix.copyFrom(transform);
			clipMatrix.invert();
		}
		var _colorTransform = new openfl_geom_ColorTransform();
		_colorTransform.__copyFrom(source.__worldColorTransform);
		_colorTransform.__invert();
		if(!this.readable && openfl_Lib.get_current().stage.context3D != null) {
			if(this.__textureContext == null) {
				this.__textureContext = lime_app_Application.current.__window.context;
			}
			if(colorTransform != null) {
				_colorTransform.__combine(colorTransform);
			}
			var renderer = new openfl_display_OpenGLRenderer(openfl_Lib.get_current().stage.context3D,this);
			renderer.__allowSmoothing = smoothing;
			renderer.__pixelRatio = openfl_Lib.get_current().stage.window.__scale;
			renderer.__overrideBlendMode = blendMode;
			renderer.__worldTransform = transform;
			renderer.__worldAlpha = 1 / source.__worldAlpha;
			renderer.__worldColorTransform = _colorTransform;
			renderer.__resize(this.width,this.height);
			if(clipRect != null) {
				renderer.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawGL(source,renderer);
			if(clipRect != null) {
				renderer.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				boundsMatrix.tx = -bounds.x;
				boundsMatrix.ty = -bounds.y;
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source,boundsMatrix);
				copy.colorTransform(copy.rect,colorTransform);
				copy.__renderTransform.identity();
				copy.__renderTransform.tx = bounds.x;
				copy.__renderTransform.ty = bounds.y;
				copy.__renderTransform.concat(source.__renderTransform);
				copy.__worldAlpha = source.__worldAlpha;
				copy.__worldColorTransform.__copyFrom(source.__worldColorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
			var renderer = new openfl_display_CanvasRenderer(this.image.buffer.__srcContext);
			renderer.__allowSmoothing = smoothing;
			renderer.__overrideBlendMode = blendMode;
			renderer.__worldTransform = transform;
			renderer.__worldAlpha = 1 / source.__worldAlpha;
			renderer.__worldColorTransform = _colorTransform;
			if(clipRect != null) {
				renderer.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawCanvas(source,renderer);
			if(clipRect != null) {
				renderer.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		}
		openfl_geom_Matrix.__pool.release(transform);
		if(sourceAsDisplayObject != null && !wasVisible) {
			sourceAsDisplayObject.set_visible(false);
		}
	}
	,drawWithQuality: function(source,matrix,colorTransform,blendMode,clipRect,smoothing,quality) {
		if(smoothing == null) {
			smoothing = false;
		}
		this.draw(source,matrix,colorTransform,blendMode,clipRect,quality != 2 && smoothing);
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.readable || rect == null) {
			byteArray = null;
			return byteArray;
		}
		if(byteArray == null) {
			byteArray = new openfl_utils_ByteArrayData(0);
		}
		var image = this.image;
		if(!rect.equals(this.rect)) {
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.tx = Math.round(-rect.x);
			matrix.ty = Math.round(-rect.y);
			var bitmapData = new openfl_display_BitmapData(Math.ceil(rect.width),Math.ceil(rect.height),true,0);
			bitmapData.draw(this,matrix);
			image = bitmapData.image;
			openfl_geom_Matrix.__pool.release(matrix);
		}
		if(((compressor) instanceof openfl_display_PNGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils_ByteArray.fromBytes(image.encode(lime_graphics_ImageFileFormat.PNG)),0,0);
			return byteArray;
		} else if(((compressor) instanceof openfl_display_JPEGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils_ByteArray.fromBytes(image.encode(lime_graphics_ImageFileFormat.JPEG,(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality)),0,0);
			return byteArray;
		}
		byteArray = null;
		return byteArray;
	}
	,fillRect: function(rect,color) {
		this.__fillRect(rect,color,true);
	}
	,floodFill: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.floodFill(x,y,color,1);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getIndexBuffer: function(context,scale9Grid) {
		var gl = context.gl;
		if(this.__indexBuffer == null || this.__indexBufferContext != context.__context || scale9Grid != null && this.__indexBufferGrid == null || this.__indexBufferGrid != null && !this.__indexBufferGrid.equals(scale9Grid)) {
			this.__indexBufferContext = context.__context;
			this.__indexBuffer = null;
			if(scale9Grid != null) {
				if(this.__indexBufferGrid == null) {
					this.__indexBufferGrid = new openfl_geom_Rectangle();
				}
				this.__indexBufferGrid.copyFrom(scale9Grid);
				var centerX = scale9Grid.width;
				var centerY = scale9Grid.height;
				if(centerX != 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					this.__indexBufferData = new Uint16Array(54);
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 0;
					this.__indexBufferData[8] = 5;
					this.__indexBufferData[9] = 5;
					this.__indexBufferData[10] = 0;
					this.__indexBufferData[11] = 2;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 4;
					this.__indexBufferData[14] = 7;
					this.__indexBufferData[15] = 7;
					this.__indexBufferData[16] = 4;
					this.__indexBufferData[17] = 5;
					this.__indexBufferData[18] = 8;
					this.__indexBufferData[19] = 9;
					this.__indexBufferData[20] = 0;
					this.__indexBufferData[21] = 0;
					this.__indexBufferData[22] = 9;
					this.__indexBufferData[23] = 1;
					this.__indexBufferData[24] = 10;
					this.__indexBufferData[25] = 8;
					this.__indexBufferData[26] = 4;
					this.__indexBufferData[27] = 4;
					this.__indexBufferData[28] = 8;
					this.__indexBufferData[29] = 0;
					this.__indexBufferData[30] = 11;
					this.__indexBufferData[31] = 10;
					this.__indexBufferData[32] = 6;
					this.__indexBufferData[33] = 6;
					this.__indexBufferData[34] = 10;
					this.__indexBufferData[35] = 4;
					this.__indexBufferData[36] = 12;
					this.__indexBufferData[37] = 13;
					this.__indexBufferData[38] = 8;
					this.__indexBufferData[39] = 8;
					this.__indexBufferData[40] = 13;
					this.__indexBufferData[41] = 9;
					this.__indexBufferData[42] = 14;
					this.__indexBufferData[43] = 12;
					this.__indexBufferData[44] = 10;
					this.__indexBufferData[45] = 10;
					this.__indexBufferData[46] = 12;
					this.__indexBufferData[47] = 8;
					this.__indexBufferData[48] = 15;
					this.__indexBufferData[49] = 14;
					this.__indexBufferData[50] = 11;
					this.__indexBufferData[51] = 11;
					this.__indexBufferData[52] = 14;
					this.__indexBufferData[53] = 10;
					this.__indexBuffer = context.createIndexBuffer(54);
				} else if(centerX == 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					this.__indexBufferData = new Uint16Array(18);
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 5;
					this.__indexBufferData[8] = 0;
					this.__indexBufferData[9] = 0;
					this.__indexBufferData[10] = 5;
					this.__indexBufferData[11] = 1;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 7;
					this.__indexBufferData[14] = 4;
					this.__indexBufferData[15] = 4;
					this.__indexBufferData[16] = 7;
					this.__indexBufferData[17] = 5;
					this.__indexBuffer = context.createIndexBuffer(18);
				} else if(centerX != 0 && centerY == 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					this.__indexBufferData = new Uint16Array(18);
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 0;
					this.__indexBufferData[8] = 5;
					this.__indexBufferData[9] = 5;
					this.__indexBufferData[10] = 0;
					this.__indexBufferData[11] = 2;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 4;
					this.__indexBufferData[14] = 7;
					this.__indexBufferData[15] = 7;
					this.__indexBufferData[16] = 4;
					this.__indexBufferData[17] = 5;
					this.__indexBuffer = context.createIndexBuffer(18);
				}
			} else {
				this.__indexBufferGrid = null;
			}
			if(this.__indexBuffer == null) {
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				this.__indexBufferData = new Uint16Array(6);
				this.__indexBufferData[0] = 0;
				this.__indexBufferData[1] = 1;
				this.__indexBufferData[2] = 2;
				this.__indexBufferData[3] = 2;
				this.__indexBufferData[4] = 1;
				this.__indexBufferData[5] = 3;
				this.__indexBuffer = context.createIndexBuffer(6);
			}
			this.__indexBuffer.uploadFromTypedArray(this.__indexBufferData);
		}
		return this.__indexBuffer;
	}
	,getVertexBuffer: function(context,scale9Grid,targetObject) {
		var gl = context.gl;
		if(this.__vertexBuffer == null || this.__vertexBufferContext != context.__context || scale9Grid != null && this.__vertexBufferGrid == null || this.__vertexBufferGrid != null && !this.__vertexBufferGrid.equals(scale9Grid) || targetObject != null && (this.__vertexBufferWidth != targetObject.get_width() || this.__vertexBufferHeight != targetObject.get_height() || this.__vertexBufferScaleX != targetObject.get_scaleX() || this.__vertexBufferScaleY != targetObject.get_scaleY())) {
			this.__uvRect = new openfl_geom_Rectangle(0,0,this.width,this.height);
			var uvWidth = 1;
			var uvHeight = 1;
			this.__vertexBufferContext = context.__context;
			this.__vertexBuffer = null;
			if(targetObject != null) {
				this.__vertexBufferWidth = targetObject.get_width();
				this.__vertexBufferHeight = targetObject.get_height();
				this.__vertexBufferScaleX = targetObject.get_scaleX();
				this.__vertexBufferScaleY = targetObject.get_scaleY();
			}
			if(scale9Grid != null && targetObject != null) {
				if(this.__vertexBufferGrid == null) {
					this.__vertexBufferGrid = new openfl_geom_Rectangle();
				}
				this.__vertexBufferGrid.copyFrom(scale9Grid);
				this.__vertexBufferWidth = targetObject.get_width();
				this.__vertexBufferHeight = targetObject.get_height();
				this.__vertexBufferScaleX = targetObject.get_scaleX();
				this.__vertexBufferScaleY = targetObject.get_scaleY();
				var centerX = scale9Grid.width;
				var centerY = scale9Grid.height;
				if(centerX != 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					this.__vertexBufferData = new Float32Array(224);
					var left = scale9Grid.x;
					var top = scale9Grid.y;
					var right = this.width - centerX - left;
					var bottom = this.height - centerY - top;
					var uvLeft = left / this.width;
					var uvTop = top / this.height;
					var uvCenterX = centerX / this.width;
					var uvCenterY = centerY / this.height;
					var uvRight = right / this.width;
					var uvBottom = bottom / this.height;
					var renderedLeft = left / targetObject.get_scaleX();
					var renderedTop = top / targetObject.get_scaleY();
					var renderedRight = right / targetObject.get_scaleX();
					var renderedBottom = bottom / targetObject.get_scaleY();
					var renderedCenterX = targetObject.get_width() / targetObject.get_scaleX() - renderedLeft - renderedRight;
					var renderedCenterY = targetObject.get_height() / targetObject.get_scaleY() - renderedTop - renderedBottom;
					this.__vertexBufferData[0] = renderedLeft;
					this.__vertexBufferData[1] = renderedTop;
					this.__vertexBufferData[3] = uvWidth * uvLeft;
					this.__vertexBufferData[4] = uvHeight * uvTop;
					this.__vertexBufferData[15] = renderedTop;
					this.__vertexBufferData[18] = uvHeight * uvTop;
					this.__vertexBufferData[28] = renderedLeft;
					this.__vertexBufferData[31] = uvWidth * uvLeft;
					this.__vertexBufferData[56] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[57] = renderedTop;
					this.__vertexBufferData[59] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[60] = uvHeight * uvTop;
					this.__vertexBufferData[70] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[73] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[84] = this.width;
					this.__vertexBufferData[85] = renderedTop;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight * uvTop;
					this.__vertexBufferData[98] = this.width;
					this.__vertexBufferData[101] = uvWidth;
					this.__vertexBufferData[112] = renderedLeft;
					this.__vertexBufferData[113] = renderedTop + renderedCenterY;
					this.__vertexBufferData[115] = uvWidth * uvLeft;
					this.__vertexBufferData[116] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[127] = renderedTop + renderedCenterY;
					this.__vertexBufferData[130] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[140] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[141] = renderedTop + renderedCenterY;
					this.__vertexBufferData[143] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[144] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[154] = this.width;
					this.__vertexBufferData[155] = renderedTop + renderedCenterY;
					this.__vertexBufferData[157] = uvWidth;
					this.__vertexBufferData[158] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[168] = renderedLeft;
					this.__vertexBufferData[169] = this.height;
					this.__vertexBufferData[171] = uvWidth * uvLeft;
					this.__vertexBufferData[172] = uvHeight;
					this.__vertexBufferData[183] = this.height;
					this.__vertexBufferData[186] = uvHeight;
					this.__vertexBufferData[196] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[197] = this.height;
					this.__vertexBufferData[199] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[200] = uvHeight;
					this.__vertexBufferData[210] = this.width;
					this.__vertexBufferData[211] = this.height;
					this.__vertexBufferData[213] = uvWidth;
					this.__vertexBufferData[214] = uvHeight;
					this.__vertexBuffer = context.createVertexBuffer(16,14);
				} else if(centerX == 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					this.__vertexBufferData = new Float32Array(112);
					var top = scale9Grid.y;
					var bottom = this.height - centerY - top;
					var uvTop = top / this.height;
					var uvCenterY = centerY / this.height;
					var uvBottom = bottom / this.height;
					var renderedTop = top / targetObject.get_scaleY();
					var renderedBottom = bottom / targetObject.get_scaleY();
					var renderedCenterY = targetObject.get_height() / targetObject.get_scaleY() - renderedTop - renderedBottom;
					var renderedWidth = targetObject.get_width() / targetObject.get_scaleX();
					this.__vertexBufferData[0] = renderedWidth;
					this.__vertexBufferData[1] = renderedTop;
					this.__vertexBufferData[3] = uvWidth;
					this.__vertexBufferData[4] = uvHeight * uvTop;
					this.__vertexBufferData[15] = renderedTop;
					this.__vertexBufferData[18] = uvHeight * uvTop;
					this.__vertexBufferData[28] = renderedWidth;
					this.__vertexBufferData[31] = uvWidth;
					this.__vertexBufferData[56] = renderedWidth;
					this.__vertexBufferData[57] = renderedTop + renderedCenterY;
					this.__vertexBufferData[59] = uvWidth;
					this.__vertexBufferData[60] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[71] = renderedTop + renderedCenterY;
					this.__vertexBufferData[74] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[84] = renderedWidth;
					this.__vertexBufferData[85] = this.height;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight;
					this.__vertexBufferData[99] = this.height;
					this.__vertexBufferData[102] = uvHeight;
					this.__vertexBuffer = context.createVertexBuffer(8,14);
				} else if(centerY == 0 && centerX != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					this.__vertexBufferData = new Float32Array(112);
					var left = scale9Grid.x;
					var right = this.width - centerX - left;
					var uvLeft = left / this.width;
					var uvCenterX = centerX / this.width;
					var uvRight = right / this.width;
					var renderedLeft = left / targetObject.get_scaleX();
					var renderedRight = right / targetObject.get_scaleX();
					var renderedCenterX = targetObject.get_width() / targetObject.get_scaleX() - renderedLeft - renderedRight;
					var renderedHeight = targetObject.get_height() / targetObject.get_scaleY();
					this.__vertexBufferData[0] = renderedLeft;
					this.__vertexBufferData[1] = renderedHeight;
					this.__vertexBufferData[3] = uvWidth * uvLeft;
					this.__vertexBufferData[4] = uvHeight;
					this.__vertexBufferData[15] = renderedHeight;
					this.__vertexBufferData[18] = uvHeight;
					this.__vertexBufferData[28] = renderedLeft;
					this.__vertexBufferData[31] = uvWidth * uvLeft;
					this.__vertexBufferData[56] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[57] = renderedHeight;
					this.__vertexBufferData[59] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[60] = uvHeight;
					this.__vertexBufferData[70] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[73] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[84] = this.width;
					this.__vertexBufferData[85] = renderedHeight;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight;
					this.__vertexBufferData[98] = this.width;
					this.__vertexBufferData[101] = uvWidth;
					this.__vertexBuffer = context.createVertexBuffer(8,14);
				}
			} else {
				this.__vertexBufferGrid = null;
			}
			if(this.__vertexBuffer == null) {
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				this.__vertexBufferData = new Float32Array(56);
				this.__vertexBufferData[0] = this.width;
				this.__vertexBufferData[1] = this.height;
				this.__vertexBufferData[3] = uvWidth;
				this.__vertexBufferData[4] = uvHeight;
				this.__vertexBufferData[15] = this.height;
				this.__vertexBufferData[18] = uvHeight;
				this.__vertexBufferData[28] = this.width;
				this.__vertexBufferData[31] = uvWidth;
				this.__vertexBuffer = context.createVertexBuffer(3,14);
			}
			this.__vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__vertexBufferData));
		}
		return this.__vertexBuffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) {
			findColor = true;
		}
		if(!this.readable) {
			return new openfl_geom_Rectangle(0,0,this.width,this.height);
		}
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >>> 24 & 255) == 0) {
				color1 = 0;
			}
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.readable) {
			return null;
		}
		if(rect == null) {
			rect = this.rect;
		}
		var byteArray = openfl_utils_ByteArray.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
		byteArray.__endian = 0;
		return byteArray;
	}
	,getSurface: function() {
		if(!this.readable) {
			return null;
		}
		if(this.__surface == null) {
			this.__surface = lime_graphics_cairo_CairoImageSurface.fromImage(this.image);
		}
		return this.__surface;
	}
	,getTexture: function(context) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null || this.__textureContext != context.__context) {
			this.__textureContext = context.__context;
			this.__texture = context.createRectangleTexture(this.width,this.height,1,false);
			this.__textureVersion = -1;
		}
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version > this.__textureVersion) {
			if(this.__surface != null) {
				lime_graphics_cairo_CairoSurface.flush(this.__surface);
			}
			var textureImage = this.image;
			if(!openfl_display3D_textures_TextureBase.__supportsBGRA && textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			this.__texture.__uploadFromImage(textureImage);
			this.__textureVersion = this.image.version;
			this.__textureWidth = textureImage.buffer.width;
			this.__textureHeight = textureImage.buffer.height;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = UInt.toFloat(openfl_utils_ByteArray.get_length(pixels)) / UInt.toFloat(4) | 0;
		var result = openfl_Vector.toIntVector(null,length,true);
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			result.set(i,pixels.readUnsignedInt());
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect = hRect != null ? hRect : new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var _g = [];
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var result = _g;
		var _g = 0;
		var _g1 = openfl_utils_ByteArray.get_length(pixels);
		while(_g < _g1) {
			var i = _g++;
			var result1 = result[i % 4];
			++result1[pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) {
			secondAlphaThreshold = 1;
		}
		if(!this.readable) {
			return false;
		}
		if(((secondObject) instanceof openfl_display_Bitmap)) {
			secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).__bitmapData;
		}
		if(((secondObject) instanceof openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) > firstAlphaThreshold) {
					return true;
				}
			}
		} else if(((secondObject) instanceof openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x;
			var y;
			if(secondBitmapDataPoint == null) {
				x = 0;
				y = 0;
			} else {
				x = Math.round(secondBitmapDataPoint.x - firstPoint.x);
				y = Math.round(secondBitmapDataPoint.y - firstPoint.y);
			}
			var hitRect = openfl_geom_Rectangle.__pool.get();
			hitRect.setTo(x,y,secondBitmapData.width,secondBitmapData.height);
			if(this.rect.intersects(hitRect)) {
				if(x < 0) {
					hitRect.x = 0;
					hitRect.width = Math.min(secondBitmapData.width + x,this.width);
				} else {
					hitRect.width = Math.min(secondBitmapData.width,this.width - x);
				}
				if(y < 0) {
					hitRect.y = 0;
					hitRect.height = Math.min(secondBitmapData.height + y,this.height);
				} else {
					hitRect.height = Math.min(secondBitmapData.height,this.height - y);
				}
				var pixels = this.getPixels(hitRect);
				hitRect.x = x < 0 ? -x : 0;
				hitRect.y = y < 0 ? -y : 0;
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel;
				var testPixel;
				var _g = 0;
				var _g1 = length;
				while(_g < _g1) {
					var i = _g++;
					pixel = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if(UInt.gt(pixel >>> 24 & 255,firstAlphaThreshold) && UInt.gt(testPixel >>> 24 & 255,secondAlphaThreshold)) {
						openfl_geom_Rectangle.__pool.release(hitRect);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(hitRect);
		} else if(((secondObject) instanceof openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__pool.get();
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels = this.getPixels(secondRectangle);
				var length = UInt.toFloat(openfl_utils_ByteArray.get_length(pixels)) / UInt.toFloat(4) | 0;
				var pixel;
				var _g = 0;
				var _g1 = length;
				while(_g < _g1) {
					var i = _g++;
					pixel = pixels.readUnsignedInt();
					if(UInt.gt(pixel >>> 24 & 255,firstAlphaThreshold)) {
						openfl_geom_Rectangle.__pool.release(secondRectangle);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(secondRectangle);
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable || sourceRect == null || destPoint == null) {
			return;
		}
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(high == null) {
			high = 255;
		}
		if(low == null) {
			low = 0;
		}
		if(!this.readable) {
			return;
		}
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return (Math.abs(randomSeed / 65536) | 0) % 32768;
		};
		var rand = func;
		rand();
		var range = high - low;
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g = 0;
		var _g1 = this.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.width;
			while(_g2 < _g3) {
				var x = _g2++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					blue = low + rand() % range;
					green = blue;
					red = green;
					alpha = 255;
				} else {
					if(redChannel) {
						red = low + rand() % range;
					}
					if(greenChannel) {
						green = low + rand() % range;
					}
					if(blueChannel) {
						blue = low + rand() % range;
					}
					if(alphaChannel) {
						alpha = low + rand() % range;
					}
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = sourceBitmapData.getPixels(sourceRect);
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var _g = 0;
		var _g1 = sh * sw;
		while(_g < _g1) {
			var i = _g++;
			pixelValue = pixels.readUnsignedInt();
			a = alphaArray == null ? pixelValue & -16777216 : alphaArray[pixelValue >> 24 & 255];
			r = redArray == null ? pixelValue & 16711680 : redArray[pixelValue >> 16 & 255];
			g = greenArray == null ? pixelValue & 65280 : greenArray[pixelValue >> 8 & 255];
			b = blueArray == null ? pixelValue & 255 : blueArray[pixelValue & 255];
			color = a + r + g + b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = openfl_geom_Rectangle.__pool.get();
		destRect.setTo(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
		openfl_geom_Rectangle.__pool.release(destRect);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(!this.readable) {
			return;
		}
		var noise = new openfl_display__$internal_PerlinNoise(randomSeed,numOctaves,channelOptions,grayScale,0.5,stitch,0.15);
		noise.fill(this,baseX,baseY,0);
	}
	,scroll: function(x,y) {
		if(!this.readable) {
			return;
		}
		this.image.scroll(x,y);
	}
	,setPixel: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel(x,y,color,1);
	}
	,setPixel32: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel32(x,y,color,1);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.readable || rect == null) {
			return;
		}
		var length = rect.width * rect.height * 4;
		if(UInt.toFloat(byteArray.length - byteArray.position) < length) {
			throw new openfl_errors_Error("End of file was encountered.",2030);
		}
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils_ByteArray.toBytePointer(byteArray),1,openfl_utils_Endian.toLimeEndian(byteArray.__endian));
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new openfl_utils_ByteArrayData(0);
		openfl_utils_ByteArray.set_length(byteArray,inputVector.get_length() * 4);
		var color = inputVector.iterator();
		while(color.hasNext()) {
			var color1 = color.next();
			byteArray.writeUnsignedInt(color1);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__applyAlpha: function(alpha) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(this.image);
		var data = this.image.buffer.data;
		var _g = 0;
		var _g1 = openfl_utils_ByteArray.get_length(alpha);
		while(_g < _g1) {
			var i = _g++;
			data[i * 4 + 3] = alpha.readUnsignedByte();
		}
		this.image.version++;
	}
	,__drawCairo: function(source,renderer) {
	}
	,__drawCanvas: function(source,renderer) {
		var buffer = this.image.buffer;
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,false);
		}
		renderer.__render(source);
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,true);
		}
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
		this.image.dirty = true;
		this.image.version++;
	}
	,__drawGL: function(source,renderer) {
		var context = renderer.__context3D;
		var cacheRTT = context.__state.renderToTexture;
		var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
		var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
		var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
		context.setRenderToTexture(this.getTexture(context),true);
		renderer.__render(source);
		if(cacheRTT != null) {
			context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
		} else {
			context.setRenderToBackBuffer();
		}
	}
	,__fillRect: function(rect,color,allowFramebuffer) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(allowFramebuffer && this.__texture != null && this.__texture.__glFramebuffer != null && openfl_Lib.get_current().stage.__renderer.__type == "opengl") {
			var renderer = openfl_Lib.get_current().stage.__renderer;
			var context = renderer.__context3D;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			var cacheRTT = context.__state.renderToTexture;
			var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
			var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
			var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
			context.setRenderToTexture(this.__texture);
			if(useScissor) {
				context.setScissorRectangle(rect);
			}
			context.clear((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,this.transparent ? (color1 >>> 24 & 255) / 255 : 1,0,0,1);
			if(useScissor) {
				context.setScissorRectangle(null);
			}
			if(cacheRTT != null) {
				context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
			} else {
				context.setRenderToBackBuffer();
			}
		} else if(this.readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		}
	}
	,__fromBase64: function(base64,type) {
		var image = lime_graphics_Image.fromBase64(base64,type);
		this.__fromImage(image);
	}
	,__fromBytes: function(bytes,rawAlpha) {
		var image = lime_graphics_Image.fromBytes(openfl_utils_ByteArray.toBytes(bytes));
		this.__fromImage(image);
		if(rawAlpha != null) {
			this.__applyAlpha(rawAlpha);
		}
	}
	,__fromFile: function(path) {
		var image = lime_graphics_Image.fromFile(path);
		this.__fromImage(image);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__textureWidth = this.width;
			this.__textureHeight = this.height;
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.rect.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__loadFromBase64: function(base64,type) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromBytes: function(bytes,rawAlpha) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(image) {
			_gthis.__fromImage(image);
			if(rawAlpha != null) {
				_gthis.__applyAlpha(rawAlpha);
			}
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromFile: function(path) {
		var _gthis = this;
		return lime_graphics_Image.loadFromFile(path).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
		this.__textureWidth = width;
		this.__textureHeight = height;
	}
	,__setUVRect: function(context,x,y,width,height) {
		var buffer = this.getVertexBuffer(context);
		if(buffer != null && (width != this.__uvRect.width || height != this.__uvRect.height || x != this.__uvRect.x || y != this.__uvRect.y)) {
			var gl = context.gl;
			if(this.__uvRect == null) {
				this.__uvRect = new openfl_geom_Rectangle();
			}
			this.__uvRect.setTo(x,y,width,height);
			var uvX = this.__textureWidth > 0 ? x / this.__textureWidth : 0;
			var uvY = this.__textureHeight > 0 ? y / this.__textureHeight : 0;
			var uvWidth = this.__textureWidth > 0 ? width / this.__textureWidth : 0;
			var uvHeight = this.__textureHeight > 0 ? height / this.__textureHeight : 0;
			this.__vertexBufferData[0] = width;
			this.__vertexBufferData[1] = height;
			this.__vertexBufferData[3] = uvX + uvWidth;
			this.__vertexBufferData[4] = uvY + uvHeight;
			this.__vertexBufferData[15] = height;
			this.__vertexBufferData[17] = uvX;
			this.__vertexBufferData[18] = uvY + uvHeight;
			this.__vertexBufferData[28] = width;
			this.__vertexBufferData[31] = uvX + uvWidth;
			this.__vertexBufferData[32] = uvY;
			this.__vertexBufferData[45] = uvX;
			this.__vertexBufferData[46] = uvY;
			this.__vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__vertexBufferData));
		}
	}
	,__sync: function() {
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
	}
	,__update: function(transformOnly,updateChildren) {
		this.__updateTransforms();
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform.copyFrom(overrideTransform);
		}
		this.__renderTransform.copyFrom(this.__worldTransform);
	}
	,__class__: openfl_display_BitmapData
};
var openfl_display_BlendMode = {};
openfl_display_BlendMode.fromString = function(value) {
	switch(value) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "shader":
		return 13;
	case "subtract":
		return 14;
	default:
		return null;
	}
};
openfl_display_BlendMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "add";
	case 1:
		return "alpha";
	case 2:
		return "darken";
	case 3:
		return "difference";
	case 4:
		return "erase";
	case 5:
		return "hardlight";
	case 6:
		return "invert";
	case 7:
		return "layer";
	case 8:
		return "lighten";
	case 9:
		return "multiply";
	case 10:
		return "normal";
	case 11:
		return "overlay";
	case 12:
		return "screen";
	case 13:
		return "shader";
	case 14:
		return "subtract";
	default:
		return null;
	}
};
var openfl_display_DisplayObjectRenderer = function() {
	openfl_events_EventDispatcher.call(this);
	this.__allowSmoothing = true;
	this.__pixelRatio = 1;
	this.__tempColorTransform = new openfl_geom_ColorTransform();
	this.__worldAlpha = 1;
};
$hxClasses["openfl.display.DisplayObjectRenderer"] = openfl_display_DisplayObjectRenderer;
openfl_display_DisplayObjectRenderer.__name__ = "openfl.display.DisplayObjectRenderer";
openfl_display_DisplayObjectRenderer.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObjectRenderer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__allowSmoothing: null
	,__blendMode: null
	,__cleared: null
	,__context: null
	,__overrideBlendMode: null
	,__pixelRatio: null
	,__roundPixels: null
	,__stage: null
	,__tempColorTransform: null
	,__transparent: null
	,__type: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__clear: function() {
	}
	,__getAlpha: function(value) {
		return value * this.__worldAlpha;
	}
	,__getColorTransform: function(value) {
		if(this.__worldColorTransform != null) {
			this.__tempColorTransform.__copyFrom(this.__worldColorTransform);
			this.__tempColorTransform.__combine(value);
			return this.__tempColorTransform;
		} else {
			return value;
		}
	}
	,__popMask: function() {
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,__popMaskRect: function() {
	}
	,__pushMask: function(mask) {
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,__pushMaskRect: function(rect,transform) {
	}
	,__render: function(object) {
	}
	,__renderEvent: function(displayObject) {
		var renderer = this;
		if(displayObject.__customRenderEvent != null && displayObject.__renderable) {
			displayObject.__customRenderEvent.allowSmoothing = renderer.__allowSmoothing;
			displayObject.__customRenderEvent.objectMatrix.copyFrom(displayObject.__renderTransform);
			displayObject.__customRenderEvent.objectColorTransform.__copyFrom(displayObject.__worldColorTransform);
			displayObject.__customRenderEvent.renderer = renderer;
			switch(renderer.__type) {
			case "cairo":
				displayObject.__customRenderEvent.type = "renderCairo";
				break;
			case "canvas":
				displayObject.__customRenderEvent.type = "renderCanvas";
				break;
			case "dom":
				if(displayObject.stage != null && displayObject.__worldVisible) {
					displayObject.__customRenderEvent.type = "renderDOM";
				} else {
					displayObject.__customRenderEvent.type = "clearDOM";
				}
				break;
			case "opengl":
				if(!renderer.__cleared) {
					renderer.__clear();
				}
				var renderer1 = renderer;
				renderer1.setShader(displayObject.__worldShader);
				renderer1.__context3D.__flushGL();
				displayObject.__customRenderEvent.type = "renderOpenGL";
				break;
			default:
				return;
			}
			renderer.__setBlendMode(displayObject.__worldBlendMode);
			renderer.__pushMaskObject(displayObject);
			displayObject.dispatchEvent(displayObject.__customRenderEvent);
			renderer.__popMaskObject(displayObject);
			if(renderer.__type == "opengl") {
				var renderer1 = renderer;
				renderer1.setViewport();
			}
		}
	}
	,__resize: function(width,height) {
	}
	,__setBlendMode: function(value) {
	}
	,__shouldCacheHardware: function(displayObject,value) {
		if(displayObject == null) {
			return null;
		}
		switch(displayObject.__drawableType) {
		case 4:case 5:
			if(value == true) {
				return true;
			}
			value = this.__shouldCacheHardware_DisplayObject(displayObject,value);
			if(value == true) {
				return true;
			}
			if(displayObject.__children != null) {
				var _g = 0;
				var _g1 = displayObject.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					value = this.__shouldCacheHardware_DisplayObject(child,value);
					if(value == true) {
						return true;
					}
				}
			}
			return value;
		case 7:
			if(value == true) {
				return true;
			} else {
				return false;
			}
			break;
		case 9:
			return true;
		default:
			return this.__shouldCacheHardware_DisplayObject(displayObject,value);
		}
	}
	,__shouldCacheHardware_DisplayObject: function(displayObject,value) {
		if(value == true || displayObject.__filters != null) {
			return true;
		}
		if(value == false || displayObject.__graphics != null && !openfl_display__$internal_Context3DGraphics.isCompatible(displayObject.__graphics)) {
			return false;
		}
		return null;
	}
	,__updateCacheBitmap: function(displayObject,force) {
		if(displayObject == null) {
			return false;
		}
		var renderer = this;
		switch(displayObject.__drawableType) {
		case 2:
			var bitmap = displayObject;
			if(bitmap.__bitmapData == null || bitmap.__filters == null && renderer.__type == "opengl" && bitmap.__cacheBitmap == null) {
				return false;
			}
			force = bitmap.__bitmapData.image != null && bitmap.__bitmapData.image.version != bitmap.__imageVersion;
			break;
		case 7:
			var textField = displayObject;
			if(textField.__filters == null && renderer.__type == "opengl" && textField.__cacheBitmap == null && !textField.__domRender) {
				return false;
			}
			if(force) {
				textField.__renderDirty = true;
			}
			force = force || textField.__dirty;
			break;
		case 9:
			var tilemap = displayObject;
			if(tilemap.__filters == null && renderer.__type == "opengl" && tilemap.__cacheBitmap == null) {
				return false;
			}
			break;
		default:
		}
		if(displayObject.__isCacheBitmapRender) {
			return false;
		}
		var colorTransform = openfl_geom_ColorTransform.__pool.get();
		colorTransform.__copyFrom(displayObject.__worldColorTransform);
		if(renderer.__worldColorTransform != null) {
			colorTransform.__combine(renderer.__worldColorTransform);
		}
		var updated = false;
		if(displayObject.get_cacheAsBitmap() || renderer.__type != "opengl" && !colorTransform.__isDefault(true)) {
			var rect = null;
			var needRender = displayObject.__cacheBitmap == null || displayObject.__renderDirty && (force || displayObject.__children != null && displayObject.__children.length > 0) || displayObject.opaqueBackground != displayObject.__cacheBitmapBackground;
			var softwareDirty = needRender || displayObject.__graphics != null && displayObject.__graphics.__softwareDirty || !displayObject.__cacheBitmapColorTransform.__equals(colorTransform,true);
			var hardwareDirty = needRender || displayObject.__graphics != null && displayObject.__graphics.__hardwareDirty;
			var renderType = renderer.__type;
			if(softwareDirty || hardwareDirty) {
				if(renderType == "opengl") {
					if(this.__shouldCacheHardware(displayObject,null) == false) {
						renderType = "canvas";
					}
				}
				if(softwareDirty && (renderType == "canvas" || renderType == "cairo")) {
					needRender = true;
				}
				if(hardwareDirty && renderType == "opengl") {
					needRender = true;
				}
			}
			var updateTransform = needRender || !displayObject.__cacheBitmap.__worldTransform.equals(displayObject.__worldTransform);
			var hasFilters = displayObject.__filters != null;
			if(renderer.__type == "dom" && !hasFilters) {
				return false;
			}
			if(hasFilters && !needRender) {
				var _g = 0;
				var _g1 = displayObject.__filters;
				while(_g < _g1.length) {
					var filter = _g1[_g];
					++_g;
					if(filter.__renderDirty) {
						needRender = true;
						break;
					}
				}
			}
			if(displayObject.__cacheBitmapMatrix == null) {
				displayObject.__cacheBitmapMatrix = new openfl_geom_Matrix();
			}
			var bitmapMatrix = displayObject.__cacheAsBitmapMatrix != null ? displayObject.__cacheAsBitmapMatrix : displayObject.__renderTransform;
			if(!needRender && (bitmapMatrix.a != displayObject.__cacheBitmapMatrix.a || bitmapMatrix.b != displayObject.__cacheBitmapMatrix.b || bitmapMatrix.c != displayObject.__cacheBitmapMatrix.c || bitmapMatrix.d != displayObject.__cacheBitmapMatrix.d)) {
				needRender = true;
			}
			if(!needRender && renderer.__type != "opengl" && displayObject.__cacheBitmapData != null && displayObject.__cacheBitmapData.image != null && displayObject.__cacheBitmapData.image.version < displayObject.__cacheBitmapData.__textureVersion) {
				needRender = true;
			}
			if(!needRender) {
				var current = displayObject;
				while(current != null) {
					if(current.get_scrollRect() != null) {
						updateTransform = true;
						break;
					}
					current = current.parent;
				}
			}
			displayObject.__cacheBitmapMatrix.copyFrom(bitmapMatrix);
			displayObject.__cacheBitmapMatrix.tx = 0;
			displayObject.__cacheBitmapMatrix.ty = 0;
			var bitmapWidth = 0;
			var bitmapHeight = 0;
			var filterWidth = 0;
			var filterHeight = 0;
			var offsetX = 0.;
			var offsetY = 0.;
			var pixelRatio = this.__pixelRatio;
			if(updateTransform || needRender) {
				rect = openfl_geom_Rectangle.__pool.get();
				displayObject.__getFilterBounds(rect,displayObject.__cacheBitmapMatrix);
				filterWidth = rect.width > 0 ? Math.ceil((rect.width + 1) * pixelRatio) : 0;
				filterHeight = rect.height > 0 ? Math.ceil((rect.height + 1) * pixelRatio) : 0;
				offsetX = rect.x > 0 ? Math.ceil(rect.x) : Math.floor(rect.x);
				offsetY = rect.y > 0 ? Math.ceil(rect.y) : Math.floor(rect.y);
				if(displayObject.__cacheBitmapData != null) {
					if(filterWidth > displayObject.__cacheBitmapData.width || filterHeight > displayObject.__cacheBitmapData.height) {
						bitmapWidth = Math.ceil(Math.max(filterWidth * 1.25,displayObject.__cacheBitmapData.width));
						bitmapHeight = Math.ceil(Math.max(filterHeight * 1.25,displayObject.__cacheBitmapData.height));
						needRender = true;
					} else {
						bitmapWidth = displayObject.__cacheBitmapData.width;
						bitmapHeight = displayObject.__cacheBitmapData.height;
					}
				} else {
					bitmapWidth = filterWidth;
					bitmapHeight = filterHeight;
				}
			}
			if(needRender) {
				updateTransform = true;
				displayObject.__cacheBitmapBackground = displayObject.opaqueBackground;
				if(filterWidth >= 0.5 && filterHeight >= 0.5) {
					var needsFill = displayObject.opaqueBackground != null && (bitmapWidth != filterWidth || bitmapHeight != filterHeight);
					var fillColor = displayObject.opaqueBackground != null ? -16777216 | displayObject.opaqueBackground : 0;
					var bitmapColor = needsFill ? 0 : fillColor;
					var allowFramebuffer = renderer.__type == "opengl";
					if(displayObject.__cacheBitmapData == null || bitmapWidth > displayObject.__cacheBitmapData.width || bitmapHeight > displayObject.__cacheBitmapData.height) {
						displayObject.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,bitmapColor);
						if(displayObject.__cacheBitmap == null) {
							displayObject.__cacheBitmap = new openfl_display_Bitmap();
						}
						displayObject.__cacheBitmap.__bitmapData = displayObject.__cacheBitmapData;
						displayObject.__cacheBitmapRenderer = null;
					} else {
						displayObject.__cacheBitmapData.__fillRect(displayObject.__cacheBitmapData.rect,bitmapColor,allowFramebuffer);
					}
					if(needsFill) {
						rect.setTo(0,0,filterWidth,filterHeight);
						displayObject.__cacheBitmapData.__fillRect(rect,fillColor,allowFramebuffer);
					}
				} else {
					openfl_geom_ColorTransform.__pool.release(colorTransform);
					displayObject.__cacheBitmap = null;
					displayObject.__cacheBitmapData = null;
					displayObject.__cacheBitmapData2 = null;
					displayObject.__cacheBitmapData3 = null;
					displayObject.__cacheBitmapRenderer = null;
					if(displayObject.__drawableType == 7) {
						var textField = displayObject;
						if(textField.__cacheBitmap != null) {
							textField.__cacheBitmap.__renderTransform.tx -= textField.__offsetX * pixelRatio;
							textField.__cacheBitmap.__renderTransform.ty -= textField.__offsetY * pixelRatio;
						}
					}
					return true;
				}
			} else {
				displayObject.__cacheBitmapData = displayObject.__cacheBitmap.get_bitmapData();
				displayObject.__cacheBitmapData2 = null;
				displayObject.__cacheBitmapData3 = null;
			}
			if(updateTransform || needRender) {
				displayObject.__cacheBitmap.__worldTransform.copyFrom(displayObject.__worldTransform);
				if(bitmapMatrix == displayObject.__renderTransform) {
					displayObject.__cacheBitmap.__renderTransform.identity();
					displayObject.__cacheBitmap.__renderTransform.scale(1 / pixelRatio,1 / pixelRatio);
					displayObject.__cacheBitmap.__renderTransform.tx = displayObject.__renderTransform.tx + offsetX;
					displayObject.__cacheBitmap.__renderTransform.ty = displayObject.__renderTransform.ty + offsetY;
				} else {
					displayObject.__cacheBitmap.__renderTransform.copyFrom(displayObject.__cacheBitmapMatrix);
					displayObject.__cacheBitmap.__renderTransform.invert();
					displayObject.__cacheBitmap.__renderTransform.concat(displayObject.__renderTransform);
					displayObject.__cacheBitmap.__renderTransform.a *= 1 / pixelRatio;
					displayObject.__cacheBitmap.__renderTransform.d *= 1 / pixelRatio;
					displayObject.__cacheBitmap.__renderTransform.tx += offsetX;
					displayObject.__cacheBitmap.__renderTransform.ty += offsetY;
				}
			}
			displayObject.__cacheBitmap.smoothing = renderer.__allowSmoothing;
			displayObject.__cacheBitmap.__renderable = displayObject.__renderable;
			displayObject.__cacheBitmap.__worldAlpha = displayObject.__worldAlpha;
			displayObject.__cacheBitmap.__worldBlendMode = displayObject.__worldBlendMode;
			displayObject.__cacheBitmap.__worldShader = displayObject.__worldShader;
			displayObject.__cacheBitmap.set_mask(displayObject.__mask);
			if(needRender) {
				if(displayObject.__cacheBitmapRenderer == null || renderType != displayObject.__cacheBitmapRenderer.__type) {
					if(renderType == "opengl") {
						displayObject.__cacheBitmapRenderer = new openfl_display_OpenGLRenderer((js_Boot.__cast(renderer , openfl_display_OpenGLRenderer)).__context3D,displayObject.__cacheBitmapData);
					} else {
						if(displayObject.__cacheBitmapData.image == null) {
							var color = displayObject.opaqueBackground != null ? -16777216 | displayObject.opaqueBackground : 0;
							displayObject.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,color);
							displayObject.__cacheBitmap.__bitmapData = displayObject.__cacheBitmapData;
						}
						lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(displayObject.__cacheBitmapData.image);
						displayObject.__cacheBitmapRenderer = new openfl_display_CanvasRenderer(displayObject.__cacheBitmapData.image.buffer.__srcContext);
					}
					displayObject.__cacheBitmapRenderer.__worldTransform = new openfl_geom_Matrix();
					displayObject.__cacheBitmapRenderer.__worldColorTransform = new openfl_geom_ColorTransform();
				}
				if(displayObject.__cacheBitmapColorTransform == null) {
					displayObject.__cacheBitmapColorTransform = new openfl_geom_ColorTransform();
				}
				displayObject.__cacheBitmapRenderer.__stage = displayObject.stage;
				displayObject.__cacheBitmapRenderer.__allowSmoothing = renderer.__allowSmoothing;
				displayObject.__cacheBitmapRenderer.__setBlendMode(10);
				displayObject.__cacheBitmapRenderer.__worldAlpha = 1 / displayObject.__worldAlpha;
				displayObject.__cacheBitmapRenderer.__worldTransform.copyFrom(displayObject.__renderTransform);
				displayObject.__cacheBitmapRenderer.__worldTransform.invert();
				displayObject.__cacheBitmapRenderer.__worldTransform.concat(displayObject.__cacheBitmapMatrix);
				displayObject.__cacheBitmapRenderer.__worldTransform.tx -= offsetX;
				displayObject.__cacheBitmapRenderer.__worldTransform.ty -= offsetY;
				displayObject.__cacheBitmapRenderer.__worldTransform.scale(pixelRatio,pixelRatio);
				displayObject.__cacheBitmapRenderer.__pixelRatio = pixelRatio;
				displayObject.__cacheBitmapRenderer.__worldColorTransform.__copyFrom(colorTransform);
				displayObject.__cacheBitmapRenderer.__worldColorTransform.__invert();
				displayObject.__isCacheBitmapRender = true;
				if(displayObject.__cacheBitmapRenderer.__type == "opengl") {
					var parentRenderer = renderer;
					var childRenderer = displayObject.__cacheBitmapRenderer;
					var context = childRenderer.__context3D;
					var cacheRTT = context.__state.renderToTexture;
					var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
					var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
					var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
					var cacheBlendMode = parentRenderer.__blendMode;
					parentRenderer.__suspendClipAndMask();
					childRenderer.__copyShader(parentRenderer);
					displayObject.__cacheBitmapData.__setUVRect(context,0,0,filterWidth,filterHeight);
					childRenderer.__setRenderTarget(displayObject.__cacheBitmapData);
					if(displayObject.__cacheBitmapData.image != null) {
						displayObject.__cacheBitmapData.__textureVersion = displayObject.__cacheBitmapData.image.version + 1;
					}
					displayObject.__cacheBitmapData.__drawGL(displayObject,childRenderer);
					if(hasFilters) {
						var needSecondBitmapData = true;
						var needCopyOfOriginal = false;
						var _g = 0;
						var _g1 = displayObject.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__preserveObject) {
								needCopyOfOriginal = true;
							}
						}
						var bitmap = displayObject.__cacheBitmapData;
						var bitmap2 = null;
						var bitmap3 = null;
						if(displayObject.__cacheBitmapData2 == null || bitmapWidth > displayObject.__cacheBitmapData2.width || bitmapHeight > displayObject.__cacheBitmapData2.height) {
							displayObject.__cacheBitmapData2 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
						} else {
							displayObject.__cacheBitmapData2.fillRect(displayObject.__cacheBitmapData2.rect,0);
							if(displayObject.__cacheBitmapData2.image != null) {
								displayObject.__cacheBitmapData2.__textureVersion = displayObject.__cacheBitmapData2.image.version + 1;
							}
						}
						displayObject.__cacheBitmapData2.__setUVRect(context,0,0,filterWidth,filterHeight);
						bitmap2 = displayObject.__cacheBitmapData2;
						if(needCopyOfOriginal) {
							if(displayObject.__cacheBitmapData3 == null || bitmapWidth > displayObject.__cacheBitmapData3.width || bitmapHeight > displayObject.__cacheBitmapData3.height) {
								displayObject.__cacheBitmapData3 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								displayObject.__cacheBitmapData3.fillRect(displayObject.__cacheBitmapData3.rect,0);
								if(displayObject.__cacheBitmapData3.image != null) {
									displayObject.__cacheBitmapData3.__textureVersion = displayObject.__cacheBitmapData3.image.version + 1;
								}
							}
							displayObject.__cacheBitmapData3.__setUVRect(context,0,0,filterWidth,filterHeight);
							bitmap3 = displayObject.__cacheBitmapData3;
						}
						childRenderer.__setBlendMode(10);
						childRenderer.__worldAlpha = 1;
						childRenderer.__worldTransform.identity();
						childRenderer.__worldColorTransform.__identity();
						var shader;
						var cacheBitmap;
						var _g = 0;
						var _g1 = displayObject.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__preserveObject) {
								childRenderer.__setRenderTarget(bitmap3);
								childRenderer.__renderFilterPass(bitmap,childRenderer.__defaultDisplayShader,filter.__smooth);
							}
							var _g2 = 0;
							var _g3 = filter.__numShaderPasses;
							while(_g2 < _g3) {
								var i = _g2++;
								shader = filter.__initShader(childRenderer,i,filter.__preserveObject ? bitmap3 : null);
								childRenderer.__setBlendMode(filter.__shaderBlendMode);
								childRenderer.__setRenderTarget(bitmap2);
								childRenderer.__renderFilterPass(bitmap,shader,filter.__smooth);
								cacheBitmap = bitmap;
								bitmap = bitmap2;
								bitmap2 = cacheBitmap;
							}
							filter.__renderDirty = false;
						}
						displayObject.__cacheBitmap.__bitmapData = bitmap;
					}
					parentRenderer.__blendMode = 10;
					parentRenderer.__setBlendMode(cacheBlendMode);
					parentRenderer.__copyShader(childRenderer);
					if(cacheRTT != null) {
						context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
					} else {
						context.setRenderToBackBuffer();
					}
					parentRenderer.__resumeClipAndMask(childRenderer);
					parentRenderer.setViewport();
					displayObject.__cacheBitmapColorTransform.__copyFrom(colorTransform);
				} else {
					displayObject.__cacheBitmapData.__drawCanvas(displayObject,displayObject.__cacheBitmapRenderer);
					if(hasFilters) {
						var needSecondBitmapData = false;
						var needCopyOfOriginal = false;
						var _g = 0;
						var _g1 = displayObject.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__needSecondBitmapData) {
								needSecondBitmapData = true;
							}
							if(filter.__preserveObject) {
								needCopyOfOriginal = true;
							}
						}
						var bitmap = displayObject.__cacheBitmapData;
						var bitmap2 = null;
						var bitmap3 = null;
						if(needSecondBitmapData) {
							if(displayObject.__cacheBitmapData2 == null || displayObject.__cacheBitmapData2.image == null || bitmapWidth > displayObject.__cacheBitmapData2.width || bitmapHeight > displayObject.__cacheBitmapData2.height) {
								displayObject.__cacheBitmapData2 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								displayObject.__cacheBitmapData2.fillRect(displayObject.__cacheBitmapData2.rect,0);
							}
							bitmap2 = displayObject.__cacheBitmapData2;
						} else {
							bitmap2 = bitmap;
						}
						if(needCopyOfOriginal) {
							if(displayObject.__cacheBitmapData3 == null || displayObject.__cacheBitmapData3.image == null || bitmapWidth > displayObject.__cacheBitmapData3.width || bitmapHeight > displayObject.__cacheBitmapData3.height) {
								displayObject.__cacheBitmapData3 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								displayObject.__cacheBitmapData3.fillRect(displayObject.__cacheBitmapData3.rect,0);
							}
							bitmap3 = displayObject.__cacheBitmapData3;
						}
						if(displayObject.__tempPoint == null) {
							displayObject.__tempPoint = new openfl_geom_Point();
						}
						var destPoint = displayObject.__tempPoint;
						var cacheBitmap;
						var lastBitmap;
						var _g = 0;
						var _g1 = displayObject.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__preserveObject) {
								bitmap3.copyPixels(bitmap,bitmap.rect,destPoint);
							}
							lastBitmap = filter.__applyFilter(bitmap2,bitmap,bitmap.rect,destPoint);
							if(filter.__preserveObject) {
								lastBitmap.draw(bitmap3,null,displayObject.__objectTransform != null ? displayObject.__objectTransform.__colorTransform : null);
							}
							filter.__renderDirty = false;
							if(needSecondBitmapData && lastBitmap == bitmap2) {
								cacheBitmap = bitmap;
								bitmap = bitmap2;
								bitmap2 = cacheBitmap;
							}
						}
						if(displayObject.__cacheBitmapData != bitmap) {
							cacheBitmap = displayObject.__cacheBitmapData;
							displayObject.__cacheBitmapData = bitmap;
							displayObject.__cacheBitmapData2 = cacheBitmap;
							displayObject.__cacheBitmap.__bitmapData = displayObject.__cacheBitmapData;
							displayObject.__cacheBitmapRenderer = null;
						}
						displayObject.__cacheBitmap.__imageVersion = displayObject.__cacheBitmapData.__textureVersion;
					}
					displayObject.__cacheBitmapColorTransform.__copyFrom(colorTransform);
					if(!displayObject.__cacheBitmapColorTransform.__isDefault(true)) {
						displayObject.__cacheBitmapColorTransform.alphaMultiplier = 1;
						displayObject.__cacheBitmapData.colorTransform(displayObject.__cacheBitmapData.rect,displayObject.__cacheBitmapColorTransform);
					}
				}
				displayObject.__isCacheBitmapRender = false;
			}
			if(updateTransform || needRender) {
				openfl_geom_Rectangle.__pool.release(rect);
			}
			updated = updateTransform;
		} else if(displayObject.__cacheBitmap != null) {
			if(renderer.__type == "dom") {
				var domRenderer = renderer;
				domRenderer.__renderDrawableClear(displayObject.__cacheBitmap);
			}
			displayObject.__cacheBitmap = null;
			displayObject.__cacheBitmapData = null;
			displayObject.__cacheBitmapData2 = null;
			displayObject.__cacheBitmapData3 = null;
			displayObject.__cacheBitmapColorTransform = null;
			displayObject.__cacheBitmapRenderer = null;
			updated = true;
		}
		openfl_geom_ColorTransform.__pool.release(colorTransform);
		if(updated && displayObject.__drawableType == 7) {
			var textField = displayObject;
			if(textField.__cacheBitmap != null) {
				textField.__cacheBitmap.__renderTransform.tx -= textField.__offsetX;
				textField.__cacheBitmap.__renderTransform.ty -= textField.__offsetY;
			}
		}
		return updated;
	}
	,__class__: openfl_display_DisplayObjectRenderer
});
var openfl_display_CairoRenderer = function(cairo) {
	openfl_display_DisplayObjectRenderer.call(this);
};
$hxClasses["openfl.display.CairoRenderer"] = openfl_display_CairoRenderer;
openfl_display_CairoRenderer.__name__ = "openfl.display.CairoRenderer";
openfl_display_CairoRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_CairoRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	cairo: null
	,__matrix: null
	,__matrix3: null
	,applyMatrix: function(transform,cairo) {
		if(cairo == null) {
			cairo = this.cairo;
		}
		this.__matrix.copyFrom(transform);
		if(this.cairo == cairo && this.__worldTransform != null) {
			this.__matrix.concat(this.__worldTransform);
		}
		this.__matrix3.a = this.__matrix.a;
		this.__matrix3.b = this.__matrix.b;
		this.__matrix3.c = this.__matrix.c;
		this.__matrix3.d = this.__matrix.d;
		if(this.__roundPixels) {
			this.__matrix3.tx = Math.round(this.__matrix.tx);
			this.__matrix3.ty = Math.round(this.__matrix.ty);
		} else {
			this.__matrix3.tx = this.__matrix.tx;
			this.__matrix3.ty = this.__matrix.ty;
		}
		cairo.set_matrix(this.__matrix3);
	}
	,__clear: function() {
		if(this.cairo == null) {
			return;
		}
		this.cairo.identityMatrix();
		if(this.__stage != null && this.__stage.__clearBeforeRender) {
			var cacheBlendMode = this.__blendMode;
			this.__setBlendMode(10);
			this.cairo.setSourceRGB(this.__stage.__colorSplit[0],this.__stage.__colorSplit[1],this.__stage.__colorSplit[2]);
			this.cairo.paint();
			this.__setBlendMode(cacheBlendMode);
		}
	}
	,__popMask: function() {
		this.cairo.restore();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		this.cairo.restore();
	}
	,__pushMask: function(mask) {
		this.cairo.save();
		this.applyMatrix(mask.__renderTransform,this.cairo);
		this.cairo.newPath();
		this.__renderDrawableMask(mask);
		this.cairo.clip();
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		this.cairo.save();
		this.applyMatrix(transform,this.cairo);
		this.cairo.newPath();
		this.cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		this.cairo.clip();
	}
	,__render: function(object) {
		if(this.cairo == null) {
			return;
		}
		this.__renderDrawable(object);
	}
	,__renderDrawable: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:case 5:
			break;
		case 6:
			var simpleButton = object;
			if(!(!simpleButton.__renderable || simpleButton.__worldAlpha <= 0 || simpleButton.__currentState == null)) {
				this.__pushMaskObject(simpleButton);
				this.__renderDrawable(simpleButton.__currentState);
				this.__popMaskObject(simpleButton);
				this.__renderEvent(simpleButton);
			}
			break;
		case 7:
			break;
		case 8:
			break;
		case 9:
			break;
		default:
		}
	}
	,__renderDrawableMask: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			break;
		case 2:
			var bitmap = object;
			this.cairo.rectangle(0,0,bitmap.get_width(),bitmap.get_height());
			break;
		case 3:
			break;
		case 4:case 5:
			break;
		case 6:
			this.__renderDrawableMask(object.__currentState);
			break;
		case 7:
			break;
		case 8:
			break;
		case 9:
			break;
		default:
		}
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		this.__setBlendModeCairo(this.cairo,value);
	}
	,__setBlendModeCairo: function(cairo,value) {
		switch(value) {
		case 0:
			cairo.setOperator(12);
			break;
		case 2:
			cairo.setOperator(17);
			break;
		case 3:
			cairo.setOperator(23);
			break;
		case 5:
			cairo.setOperator(21);
			break;
		case 7:
			cairo.setOperator(2);
			break;
		case 8:
			cairo.setOperator(18);
			break;
		case 9:
			cairo.setOperator(14);
			break;
		case 11:
			cairo.setOperator(16);
			break;
		case 12:
			cairo.setOperator(15);
			break;
		default:
			cairo.setOperator(2);
		}
	}
	,__class__: openfl_display_CairoRenderer
});
var openfl_display_CanvasRenderer = function(context) {
	openfl_display_DisplayObjectRenderer.call(this);
	this.context = context;
	this.__tempMatrix = new openfl_geom_Matrix();
	this.__type = "canvas";
};
$hxClasses["openfl.display.CanvasRenderer"] = openfl_display_CanvasRenderer;
openfl_display_CanvasRenderer.__name__ = "openfl.display.CanvasRenderer";
openfl_display_CanvasRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_CanvasRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	context: null
	,__isDOM: null
	,__tempMatrix: null
	,applySmoothing: function(context,value) {
		context.imageSmoothingEnabled = value;
	}
	,setTransform: function(transform,context) {
		if(context == null) {
			context = this.context;
		} else if(this.context == context && this.__worldTransform != null) {
			this.__tempMatrix.copyFrom(transform);
			this.__tempMatrix.concat(this.__worldTransform);
			transform = this.__tempMatrix;
		}
		if(this.__roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
	}
	,__clear: function() {
		if(this.__stage != null) {
			var cacheBlendMode = this.__blendMode;
			this.__blendMode = null;
			this.__setBlendMode(10);
			this.context.setTransform(1,0,0,1,0,0);
			this.context.globalAlpha = 1;
			if(!this.__stage.__transparent && this.__stage.__clearBeforeRender) {
				this.context.fillStyle = this.__stage.__colorString;
				this.context.fillRect(0,0,this.__stage.stageWidth * this.__stage.window.__scale,this.__stage.stageHeight * this.__stage.window.__scale);
			} else if(this.__stage.__transparent && this.__stage.__clearBeforeRender) {
				this.context.clearRect(0,0,this.__stage.stageWidth * this.__stage.window.__scale,this.__stage.stageHeight * this.__stage.window.__scale);
			}
			this.__setBlendMode(cacheBlendMode);
		}
	}
	,__popMask: function() {
		this.context.restore();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		this.context.restore();
	}
	,__pushMask: function(mask) {
		this.context.save();
		this.setTransform(mask.__renderTransform,this.context);
		this.context.beginPath();
		this.__renderDrawableMask(mask);
		this.context.closePath();
		this.context.clip();
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		this.context.save();
		this.setTransform(transform,this.context);
		this.context.beginPath();
		this.context.rect(rect.x,rect.y,rect.width,rect.height);
		this.context.clip();
	}
	,__render: function(object) {
		this.__renderDrawable(object);
	}
	,__renderDrawable: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			openfl_display__$internal_CanvasBitmapData.renderDrawable(object,this);
			break;
		case 2:
			openfl_display__$internal_CanvasBitmap.renderDrawable(object,this);
			break;
		case 3:
			openfl_display__$internal_CanvasDisplayObject.renderDrawable(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_CanvasDisplayObjectContainer.renderDrawable(object,this);
			break;
		case 6:
			openfl_display__$internal_CanvasSimpleButton.renderDrawable(object,this);
			break;
		case 7:
			openfl_display__$internal_CanvasTextField.renderDrawable(object,this);
			break;
		case 8:
			openfl_display__$internal_CanvasVideo.renderDrawable(object,this);
			break;
		case 9:
			openfl_display__$internal_CanvasTilemap.renderDrawable(object,this);
			break;
		default:
		}
	}
	,__renderDrawableMask: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			openfl_display__$internal_CanvasBitmapData.renderDrawableMask(object,this);
			break;
		case 2:
			openfl_display__$internal_CanvasBitmap.renderDrawableMask(object,this);
			break;
		case 3:
			openfl_display__$internal_CanvasDisplayObject.renderDrawableMask(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_CanvasDisplayObjectContainer.renderDrawableMask(object,this);
			break;
		case 6:
			openfl_display__$internal_CanvasSimpleButton.renderDrawableMask(object,this);
			break;
		case 7:
			openfl_display__$internal_CanvasTextField.renderDrawableMask(object,this);
			break;
		case 8:
			openfl_display__$internal_CanvasVideo.renderDrawableMask(object,this);
			break;
		case 9:
			openfl_display__$internal_CanvasTilemap.renderDrawableMask(object,this);
			break;
		default:
		}
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		this.__setBlendModeContext(this.context,value);
	}
	,__setBlendModeContext: function(context,value) {
		switch(value) {
		case 0:
			context.globalCompositeOperation = "lighter";
			break;
		case 2:
			context.globalCompositeOperation = "darken";
			break;
		case 3:
			context.globalCompositeOperation = "difference";
			break;
		case 5:
			context.globalCompositeOperation = "hard-light";
			break;
		case 8:
			context.globalCompositeOperation = "lighten";
			break;
		case 9:
			context.globalCompositeOperation = "multiply";
			break;
		case 11:
			context.globalCompositeOperation = "overlay";
			break;
		case 12:
			context.globalCompositeOperation = "screen";
			break;
		default:
			context.globalCompositeOperation = "source-over";
		}
	}
	,__class__: openfl_display_CanvasRenderer
});
var openfl_display_CapsStyle = {};
openfl_display_CapsStyle.fromInt = function(value) {
	return value;
};
openfl_display_CapsStyle.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "round":
		return 1;
	case "square":
		return 2;
	default:
		return null;
	}
};
openfl_display_CapsStyle.toInt = function(this1) {
	return this1;
};
openfl_display_CapsStyle.toString = function(this1) {
	switch(this1) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_DOMElement = function(element) {
	openfl_display_DisplayObject.call(this);
	this.__drawableType = 10;
	this.__element = element;
};
$hxClasses["openfl.display.DOMElement"] = openfl_display_DOMElement;
openfl_display_DOMElement.__name__ = "openfl.display.DOMElement";
openfl_display_DOMElement.__super__ = openfl_display_DisplayObject;
openfl_display_DOMElement.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__active: null
	,__element: null
	,__class__: openfl_display_DOMElement
});
var openfl_display_DOMRenderer = function(element) {
	openfl_display_DisplayObjectRenderer.call(this);
	this.element = element;
	openfl_display_DisplayObject.__supportDOM = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('')
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.__vendorPrefix = prefix.lowercase;
	this.__transformProperty = prefix.lowercase == "webkit" ? "-webkit-transform" : "transform";
	this.__transformOriginProperty = prefix.lowercase == "webkit" ? "-webkit-transform-origin" : "transform-origin";
	this.__clipRects = [];
	this.__numClipRects = 0;
	this.__z = 0;
	this.__type = "dom";
	this.__canvasRenderer = new openfl_display_CanvasRenderer(null);
	this.__canvasRenderer.__isDOM = true;
};
$hxClasses["openfl.display.DOMRenderer"] = openfl_display_DOMRenderer;
openfl_display_DOMRenderer.__name__ = "openfl.display.DOMRenderer";
openfl_display_DOMRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_DOMRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	element: null
	,__canvasRenderer: null
	,__clipRects: null
	,__currentClipRect: null
	,__numClipRects: null
	,__transformOriginProperty: null
	,__transformProperty: null
	,__vendorPrefix: null
	,__z: null
	,applyStyle: function(parent,childElement) {
		if(parent != null && childElement != null) {
			if(parent.__style == null || childElement.parentElement != this.element) {
				this.__initializeElement(parent,childElement);
			}
			parent.__style = childElement.style;
			this.__updateClip(parent);
			this.__applyStyle(parent,true,true,true);
		}
	}
	,clearStyle: function(childElement) {
		if(childElement != null && childElement.parentElement == this.element) {
			this.element.removeChild(childElement);
		}
	}
	,__applyStyle: function(displayObject,setTransform,setAlpha,setClip) {
		var style = displayObject.__style;
		if(setTransform && displayObject.__renderTransformChanged) {
			var _this = displayObject.__renderTransform;
			var roundPixels = this.__roundPixels;
			if(roundPixels == null) {
				roundPixels = false;
			}
			style.setProperty(this.__transformProperty,roundPixels ? "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + (_this.tx | 0) + ", " + (_this.ty | 0) + ", 0, 1)" : "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + _this.tx + ", " + _this.ty + ", 0, 1)",null);
		}
		if(displayObject.__worldZ != ++this.__z) {
			displayObject.__worldZ = this.__z;
			style.setProperty("z-index",displayObject.__worldZ == null ? "null" : "" + displayObject.__worldZ,null);
		}
		if(setAlpha && displayObject.__worldAlphaChanged) {
			if(displayObject.__worldAlpha < 1) {
				style.setProperty("opacity",displayObject.__worldAlpha == null ? "null" : "" + displayObject.__worldAlpha,null);
			} else {
				style.removeProperty("opacity");
			}
		}
		if(setClip && displayObject.__worldClipChanged) {
			if(displayObject.__worldClip == null) {
				style.removeProperty("clip");
			} else {
				var clip = displayObject.__worldClip;
				style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
			}
		}
	}
	,__initializeElement: function(displayObject,element) {
		var style = displayObject.__style = element.style;
		style.setProperty("position","absolute",null);
		style.setProperty("top","0",null);
		style.setProperty("left","0",null);
		style.setProperty(this.__transformOriginProperty,"0 0 0",null);
		this.element.appendChild(element);
		displayObject.__worldAlphaChanged = true;
		displayObject.__renderTransformChanged = true;
		displayObject.__worldVisibleChanged = true;
		displayObject.__worldClipChanged = true;
		displayObject.__worldClip = null;
		displayObject.__worldZ = -1;
	}
	,__popMask: function() {
		this.__popMaskRect();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		if(this.__numClipRects > 0) {
			this.__numClipRects--;
			if(this.__numClipRects > 0) {
				this.__currentClipRect = this.__clipRects[this.__numClipRects - 1];
			} else {
				this.__currentClipRect = null;
			}
		}
	}
	,__pushMask: function(mask) {
		this.__pushMaskRect(mask.getBounds(mask),mask.__renderTransform);
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		if(this.__numClipRects == this.__clipRects.length) {
			this.__clipRects[this.__numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.__clipRects[this.__numClipRects];
		rect.__transform(clipRect,transform);
		if(this.__numClipRects > 0) {
			var parentClipRect = this.__clipRects[this.__numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.__currentClipRect = clipRect;
		this.__numClipRects++;
	}
	,__render: function(object) {
		if(!this.__stage.__transparent) {
			this.element.style.background = this.__stage.__colorString;
		} else {
			this.element.style.background = "none";
		}
		this.__z = 1;
		this.__renderDrawable(object);
	}
	,__renderDrawable: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			break;
		case 2:
			openfl_display__$internal_DOMBitmap.renderDrawable(object,this);
			break;
		case 3:
			openfl_display__$internal_DOMDisplayObject.renderDrawable(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_DOMDisplayObjectContainer.renderDrawable(object,this);
			break;
		case 6:
			openfl_display__$internal_DOMSimpleButton.renderDrawable(object,this);
			break;
		case 7:
			openfl_display__$internal_DOMTextField.renderDrawable(object,this);
			break;
		case 8:
			openfl_display__$internal_DOMVideo.renderDrawable(object,this);
			break;
		case 9:
			openfl_display__$internal_DOMTilemap.renderDrawable(object,this);
			break;
		case 10:
			var domElement = object;
			if(domElement.stage != null && domElement.__worldVisible && domElement.__renderable) {
				if(!domElement.__active) {
					this.__initializeElement(domElement,domElement.__element);
					domElement.__active = true;
				}
				this.__updateClip(domElement);
				this.__applyStyle(domElement,true,true,true);
			} else if(domElement.__active) {
				this.element.removeChild(domElement.__element);
				domElement.__active = false;
			}
			openfl_display__$internal_DOMDisplayObject.renderDrawable(domElement,this);
			break;
		default:
		}
	}
	,__renderDrawableClear: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			break;
		case 2:
			openfl_display__$internal_DOMBitmap.renderDrawableClear(object,this);
			break;
		case 3:
			openfl_display__$internal_DOMDisplayObject.renderDrawableClear(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_DOMDisplayObjectContainer.renderDrawableClear(object,this);
			break;
		case 6:
			openfl_display__$internal_DOMSimpleButton.renderDrawableClear(object,this);
			break;
		case 7:
			openfl_display__$internal_DOMTextField.renderDrawableClear(object,this);
			break;
		case 8:
			openfl_display__$internal_DOMVideo.renderDrawableClear(object,this);
			break;
		case 9:
			openfl_display__$internal_DOMTilemap.renderDrawableClear(object,this);
			break;
		default:
		}
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
	}
	,__updateClip: function(displayObject) {
		if(this.__currentClipRect == null) {
			displayObject.__worldClipChanged = displayObject.__worldClip != null;
			displayObject.__worldClip = null;
		} else {
			if(displayObject.__worldClip == null) {
				displayObject.__worldClip = new openfl_geom_Rectangle();
			}
			var clip = openfl_geom_Rectangle.__pool.get();
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			this.__currentClipRect.__transform(clip,matrix);
			if(clip.equals(displayObject.__worldClip)) {
				displayObject.__worldClipChanged = false;
			} else {
				displayObject.__worldClip.copyFrom(clip);
				displayObject.__worldClipChanged = true;
			}
			openfl_geom_Rectangle.__pool.release(clip);
			openfl_geom_Matrix.__pool.release(matrix);
		}
	}
	,__class__: openfl_display_DOMRenderer
});
var openfl_display_Shader = function(code) {
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
	this.__data = openfl_display_ShaderData._new(code);
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = "openfl.display.Shader";
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,program: null
	,__alpha: null
	,__bitmap: null
	,__colorMultiplier: null
	,__colorOffset: null
	,__context: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__hasColorTransform: null
	,__inputBitmapData: null
	,__isGenerated: null
	,__matrix: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__position: null
	,__textureCoord: null
	,__texture: null
	,__textureSize: null
	,__clearUseArray: function() {
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
	}
	,__createGLShader: function(source,type) {
		var gl = this.__context.gl;
		var shader = gl.createShader(type);
		gl.shaderSource(shader,source);
		gl.compileShader(shader);
		var shaderInfoLog = gl.getShaderInfoLog(shader);
		var hasInfoLog = shaderInfoLog != null && StringTools.trim(shaderInfoLog) != "";
		var compileStatus = gl.getShaderParameter(shader,gl.COMPILE_STATUS);
		if(hasInfoLog || compileStatus == 0) {
			var message = compileStatus == 0 ? "Error" : "Info";
			message += type == gl.VERTEX_SHADER ? " compiling vertex shader" : " compiling fragment shader";
			message += "\n" + shaderInfoLog;
			message += "\n" + source;
			if(compileStatus == 0) {
				lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 334, className : "openfl.display.Shader", methodName : "__createGLShader"});
			} else if(hasInfoLog) {
				lime_utils_Log.debug(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 335, className : "openfl.display.Shader", methodName : "__createGLShader"});
			}
		}
		return shader;
	}
	,__createGLProgram: function(vertexSource,fragmentSource) {
		var gl = this.__context.gl;
		var vertexShader = this.__createGLShader(vertexSource,gl.VERTEX_SHADER);
		var fragmentShader = this.__createGLShader(fragmentSource,gl.FRAGMENT_SHADER);
		var program = gl.createProgram();
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			if(param.name.indexOf("Position") > -1 && StringTools.startsWith(param.name,"openfl_")) {
				gl.bindAttribLocation(program,0,param.name);
				break;
			}
		}
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) {
			var message = "Unable to initialize the shader program";
			message += "\n" + gl.getProgramInfoLog(program);
			lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 368, className : "openfl.display.Shader", methodName : "__createGLProgram"});
		}
		return program;
	}
	,__disable: function() {
		if(this.program != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		var gl = this.__context.gl;
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__disableGL(this.__context,textureCount);
			++textureCount;
			if(textureCount == gl.MAX_TEXTURE_IMAGE_UNITS) {
				break;
			}
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		this.__context.__bindGLArrayBuffer(null);
		if(this.__context.__context.type == "opengl") {
			gl.disable(gl.TEXTURE_2D);
		}
	}
	,__enable: function() {
		this.__init();
		if(this.program != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var gl = this.__context.gl;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			gl.uniform1i(input.index,textureCount);
			++textureCount;
		}
		if(this.__context.__context.type == "opengl" && textureCount > 0) {
			gl.enable(gl.TEXTURE_2D);
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = openfl_display_ShaderData._new(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.program == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__paramBool == null) {
			this.__glSourceDirty = false;
			this.program = null;
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.__context != null && this.program == null) {
			var gl = this.__context.gl;
			var prefix = this.precisionHint == 1 ? "precision mediump float;\n" : "precision lowp float;\n";
			var vertex = prefix + this.get_glVertexSource();
			var fragment = prefix + this.get_glFragmentSource();
			var id = vertex + fragment;
			if(Object.prototype.hasOwnProperty.call(this.__context.__programs.h,id)) {
				this.program = this.__context.__programs.h[id];
			} else {
				this.program = this.__context.createProgram(1);
				this.program.__glProgram = this.__createGLProgram(vertex,fragment);
				this.__context.__programs.h[id] = this.program;
			}
			if(this.program != null) {
				this.glProgram = this.program.__glProgram;
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					if(input.__isUniform) {
						input.index = gl.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = gl.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramBool;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramFloat;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramInt;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(name,"gl_")) {
				continue;
			}
			var isUniform = storageType == "uniform";
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				input.__isUniform = isUniform;
				this.__inputBitmapData.push(input);
				switch(name) {
				case "bitmap":
					this.__bitmap = input;
					break;
				case "openfl_Texture":
					this.__texture = input;
					break;
				default:
				}
				this.__data[name] = input;
				if(this.__isGenerated) {
					this[name] = input;
				}
			} else if(!Object.prototype.hasOwnProperty.call(this.__data,name) || Reflect.field(this.__data,name) == null) {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				default:
					parameterType = null;
				}
				var length;
				switch(parameterType) {
				case 1:case 5:case 9:
					length = 2;
					break;
				case 2:case 6:case 10:
					length = 3;
					break;
				case 3:case 7:case 11:case 12:
					length = 4;
					break;
				case 16:
					length = 9;
					break;
				case 20:
					length = 16;
					break;
				default:
					length = 1;
				}
				var arrayLength;
				switch(parameterType) {
				case 12:
					arrayLength = 2;
					break;
				case 16:
					arrayLength = 3;
					break;
				case 20:
					arrayLength = 4;
					break;
				default:
					arrayLength = 1;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.set_name(name);
					parameter.type = parameterType;
					parameter.__arrayLength = arrayLength;
					parameter.__isBool = true;
					parameter.__isUniform = isUniform;
					parameter.__length = length;
					this.__paramBool.push(parameter);
					if(name == "openfl_HasColorTransform") {
						this.__hasColorTransform = parameter;
					}
					this.__data[name] = parameter;
					if(this.__isGenerated) {
						this[name] = parameter;
					}
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.set_name(name);
					parameter1.type = parameterType;
					parameter1.__arrayLength = arrayLength;
					parameter1.__isInt = true;
					parameter1.__isUniform = isUniform;
					parameter1.__length = length;
					this.__paramInt.push(parameter1);
					this.__data[name] = parameter1;
					if(this.__isGenerated) {
						this[name] = parameter1;
					}
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.set_name(name);
					parameter2.type = parameterType;
					parameter2.__arrayLength = arrayLength;
					if(arrayLength > 0) {
						var elements = arrayLength * arrayLength;
						var array = null;
						var vector = null;
						var view = null;
						var buffer = null;
						var len = null;
						var this1;
						if(elements != null) {
							this1 = new Float32Array(elements);
						} else if(array != null) {
							this1 = new Float32Array(array);
						} else if(vector != null) {
							this1 = new Float32Array(vector.__array);
						} else if(view != null) {
							this1 = new Float32Array(view);
						} else if(buffer != null) {
							if(len == null) {
								this1 = new Float32Array(buffer,0);
							} else {
								this1 = new Float32Array(buffer,0,len);
							}
						} else {
							this1 = null;
						}
						parameter2.__uniformMatrix = this1;
					}
					parameter2.__isFloat = true;
					parameter2.__isUniform = isUniform;
					parameter2.__length = length;
					this.__paramFloat.push(parameter2);
					if(StringTools.startsWith(name,"openfl_")) {
						switch(name) {
						case "openfl_Alpha":
							this.__alpha = parameter2;
							break;
						case "openfl_ColorMultiplier":
							this.__colorMultiplier = parameter2;
							break;
						case "openfl_ColorOffset":
							this.__colorOffset = parameter2;
							break;
						case "openfl_Matrix":
							this.__matrix = parameter2;
							break;
						case "openfl_Position":
							this.__position = parameter2;
							break;
						case "openfl_TextureCoord":
							this.__textureCoord = parameter2;
							break;
						case "openfl_TextureSize":
							this.__textureSize = parameter2;
							break;
						default:
						}
					}
					this.__data[name] = parameter2;
					if(this.__isGenerated) {
						this[name] = parameter2;
					}
				}
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.program != null) {
			this.__updateGL();
		}
	}
	,__updateFromBuffer: function(shaderBuffer,bufferOffset) {
		if(this.program != null) {
			this.__updateGLFromBuffer(shaderBuffer,bufferOffset);
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__updateGL(this.__context,textureCount);
			++textureCount;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
	}
	,__updateGLFromBuffer: function(shaderBuffer,bufferOffset) {
		var textureCount = 0;
		var input;
		var inputData;
		var inputFilter;
		var inputMipFilter;
		var inputWrap;
		var _g = 0;
		var _g1 = shaderBuffer.inputCount;
		while(_g < _g1) {
			var i = _g++;
			input = shaderBuffer.inputRefs[i];
			inputData = shaderBuffer.inputs[i];
			inputFilter = shaderBuffer.inputFilter[i];
			inputMipFilter = shaderBuffer.inputMipFilter[i];
			inputWrap = shaderBuffer.inputWrap[i];
			if(inputData != null) {
				input.__updateGL(this.__context,textureCount,inputData,inputFilter,inputMipFilter,inputWrap);
				++textureCount;
			}
		}
		var gl = this.__context.gl;
		if(shaderBuffer.paramDataLength > 0) {
			if(shaderBuffer.paramDataBuffer == null) {
				shaderBuffer.paramDataBuffer = gl.createBuffer();
			}
			this.__context.__bindGLArrayBuffer(shaderBuffer.paramDataBuffer);
			lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,shaderBuffer.paramData,gl.DYNAMIC_DRAW);
		} else {
			this.__context.__bindGLArrayBuffer(null);
		}
		var boolIndex = 0;
		var floatIndex = 0;
		var intIndex = 0;
		var boolCount = shaderBuffer.paramBoolCount;
		var floatCount = shaderBuffer.paramFloatCount;
		var paramData = shaderBuffer.paramData;
		var boolRef;
		var floatRef;
		var intRef;
		var hasOverride;
		var overrideBoolValue = null;
		var overrideFloatValue = null;
		var overrideIntValue = null;
		var _g = 0;
		var _g1 = shaderBuffer.paramCount;
		while(_g < _g1) {
			var i = _g++;
			hasOverride = false;
			if(i < boolCount) {
				boolRef = shaderBuffer.paramRefs_Bool[boolIndex];
				var _g2 = 0;
				var _g3 = shaderBuffer.overrideBoolCount;
				while(_g2 < _g3) {
					var j = _g2++;
					if(boolRef.name == shaderBuffer.overrideBoolNames[j]) {
						overrideBoolValue = shaderBuffer.overrideBoolValues[j];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					boolRef.__updateGL(this.__context,overrideBoolValue);
				} else {
					boolRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++boolIndex;
			} else if(i < boolCount + floatCount) {
				floatRef = shaderBuffer.paramRefs_Float[floatIndex];
				var _g4 = 0;
				var _g5 = shaderBuffer.overrideFloatCount;
				while(_g4 < _g5) {
					var j1 = _g4++;
					if(floatRef.name == shaderBuffer.overrideFloatNames[j1]) {
						overrideFloatValue = shaderBuffer.overrideFloatValues[j1];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					floatRef.__updateGL(this.__context,overrideFloatValue);
				} else {
					floatRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++floatIndex;
			} else {
				intRef = shaderBuffer.paramRefs_Int[intIndex];
				var _g6 = 0;
				var _g7 = shaderBuffer.overrideIntCount;
				while(_g6 < _g7) {
					var j2 = _g6++;
					if(intRef.name == shaderBuffer.overrideIntNames[j2]) {
						overrideIntValue = shaderBuffer.overrideIntValues[j2];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					intRef.__updateGL(this.__context,overrideIntValue);
				} else {
					intRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++intIndex;
			}
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	}
	,set_data: function(value) {
		return this.__data = value;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,set_glVertexSource: function(value) {
		if(value != this.__glVertexSource) {
			this.__glSourceDirty = true;
		}
		return this.__glVertexSource = value;
	}
	,__class__: openfl_display_Shader
	,__properties__: {set_glVertexSource:"set_glVertexSource",get_glVertexSource:"get_glVertexSource",set_glFragmentSource:"set_glFragmentSource",get_glFragmentSource:"get_glFragmentSource",set_data:"set_data",get_data:"get_data"}
};
var openfl_display_DisplayObjectShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\r\n\t\tvarying vec4 openfl_ColorMultiplierv;\r\n\t\tvarying vec4 openfl_ColorOffsetv;\r\n\t\tvarying vec2 openfl_TextureCoordv;\r\n\r\n\t\tuniform bool openfl_HasColorTransform;\r\n\t\tuniform sampler2D openfl_Texture;\r\n\t\tuniform vec2 openfl_TextureSize;\r\n\r\n\t\tvoid main(void) {\r\n\r\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\r\n\r\n\t\tif (color.a == 0.0) {\r\n\r\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\r\n\r\n\t\t} else if (openfl_HasColorTransform) {\r\n\r\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\r\n\r\n\t\t\tmat4 colorMultiplier = mat4 (0);\r\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\r\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\r\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\r\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\r\n\r\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\r\n\r\n\t\t\tif (color.a > 0.0) {\r\n\r\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgl_FragColor = color * openfl_Alphav;\r\n\r\n\t\t}\r\n\r\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\r\n\t\tattribute vec4 openfl_ColorMultiplier;\r\n\t\tattribute vec4 openfl_ColorOffset;\r\n\t\tattribute vec4 openfl_Position;\r\n\t\tattribute vec2 openfl_TextureCoord;\r\n\r\n\t\tvarying float openfl_Alphav;\r\n\t\tvarying vec4 openfl_ColorMultiplierv;\r\n\t\tvarying vec4 openfl_ColorOffsetv;\r\n\t\tvarying vec2 openfl_TextureCoordv;\r\n\r\n\t\tuniform mat4 openfl_Matrix;\r\n\t\tuniform bool openfl_HasColorTransform;\r\n\t\tuniform vec2 openfl_TextureSize;\r\n\r\n\t\tvoid main(void) {\r\n\r\n\t\t\topenfl_Alphav = openfl_Alpha;\r\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\r\n\r\n\t\tif (openfl_HasColorTransform) {\r\n\r\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\r\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\r\n\r\n\t\t}\r\n\r\n\t\tgl_Position = openfl_Matrix * openfl_Position;\r\n\r\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display.DisplayObjectShader"] = openfl_display_DisplayObjectShader;
openfl_display_DisplayObjectShader.__name__ = "openfl.display.DisplayObjectShader";
openfl_display_DisplayObjectShader.__super__ = openfl_display_Shader;
openfl_display_DisplayObjectShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Alpha: null
	,openfl_ColorMultiplier: null
	,openfl_ColorOffset: null
	,openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_HasColorTransform: null
	,openfl_TextureSize: null
	,openfl_Texture: null
	,__class__: openfl_display_DisplayObjectShader
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.name = name;
	this.frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = "openfl.display.FrameLabel";
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	frame: null
	,name: null
	,__class__: openfl_display_FrameLabel
});
var openfl_display_FrameScript = function(script,frame) {
	this.script = script;
	this.frame = frame;
};
$hxClasses["openfl.display.FrameScript"] = openfl_display_FrameScript;
openfl_display_FrameScript.__name__ = "openfl.display.FrameScript";
openfl_display_FrameScript.prototype = {
	frame: null
	,script: null
	,__class__: openfl_display_FrameScript
};
var openfl_display_GradientType = {};
openfl_display_GradientType.fromInt = function(value) {
	return value;
};
openfl_display_GradientType.fromString = function(value) {
	switch(value) {
	case "linear":
		return 0;
	case "radial":
		return 1;
	default:
		return null;
	}
};
openfl_display_GradientType.toInt = function(this1) {
	return this1;
};
openfl_display_GradientType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "linear";
	case 1:
		return "radial";
	default:
		return null;
	}
};
var openfl_display_Graphics = function(owner) {
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl_display__$internal_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__usedShaderBuffers = new haxe_ds_List();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.__bitmapScale = 1;
	this.__shaderBufferPool = new lime_utils_ObjectPool(function() {
		return new openfl_display__$internal_ShaderBuffer();
	});
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = "openfl.display.Graphics";
openfl_display_Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__hardwareDirty: null
	,__height: null
	,__managed: null
	,__positionX: null
	,__positionY: null
	,__quadBuffer: null
	,__renderTransform: null
	,__shaderBufferPool: null
	,__softwareDirty: null
	,__strokePadding: null
	,__transformDirty: null
	,__triangleIndexBuffer: null
	,__triangleIndexBufferCount: null
	,__triangleIndexBufferData: null
	,__usedShaderBuffers: null
	,__vertexBuffer: null
	,__vertexBufferCount: null
	,__vertexBufferCountUVT: null
	,__vertexBufferData: null
	,__vertexBufferDataUVT: null
	,__vertexBufferUVT: null
	,__visible: null
	,__owner: null
	,__width: null
	,__worldTransform: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,__bitmapScale: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		if(!bitmap.readable) {
			this.beginFill(0,1.0);
			return;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		if(colors == null || colors.length == 0) {
			return;
		}
		if(alphas == null) {
			alphas = [];
			var _g = 0;
			var _g1 = colors.length;
			while(_g < _g1) {
				var i = _g++;
				alphas.push(1);
			}
		}
		if(ratios == null) {
			ratios = [];
			var _g = 0;
			var _g1 = colors.length;
			while(_g < _g1) {
				var i = _g++;
				ratios.push(Math.ceil(i / (colors.length - 1) * 255));
			}
		}
		if(alphas.length < colors.length || ratios.length < colors.length) {
			return;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,beginShaderFill: function(shader,matrix) {
		if(shader != null) {
			var shaderBuffer = this.__shaderBufferPool.get();
			this.__usedShaderBuffers.add(shaderBuffer);
			shaderBuffer.update(shader);
			this.__commands.beginShaderFill(shaderBuffer);
		}
	}
	,clear: function() {
		var _g_head = this.__usedShaderBuffers.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var shaderBuffer = val;
			this.__shaderBufferPool.release(shaderBuffer);
		}
		this.__usedShaderBuffers.clear();
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__positionX = 0;
		this.__positionY = 0;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds != null ? sourceGraphics.__bounds.clone() : null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		var xs = this.__findExtrema(this.__positionX,controlX1,controlX2,anchorX);
		var ys = this.__findExtrema(this.__positionY,controlY1,controlY2,anchorY);
		this.__inflateBounds(xs.min - this.__strokePadding,ys.min - this.__strokePadding);
		this.__inflateBounds(xs.max + this.__strokePadding,ys.max + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) {
			return;
		}
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var shaderFill;
		var stroke;
		var path;
		var trianglePath;
		var quadPath;
		var graphics = graphicsData.iterator();
		while(graphics.hasNext()) {
			var graphics1 = graphics.next();
			switch(graphics1.__graphicsDataType) {
			case 0:
				stroke = graphics1;
				if(stroke.fill != null) {
					var thickness = stroke.thickness;
					if(isNaN(thickness)) {
						thickness = null;
					}
					switch(stroke.fill.__graphicsFillType) {
					case 0:
						fill = stroke.fill;
						this.lineStyle(thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						break;
					case 1:
						gradientFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
						break;
					case 2:
						bitmapFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
						break;
					default:
					}
				} else {
					this.lineStyle();
				}
				break;
			case 1:
				fill = graphics1;
				this.beginFill(fill.color,fill.alpha);
				break;
			case 2:
				gradientFill = graphics1;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
				break;
			case 3:
				path = graphics1;
				this.drawPath(path.commands,path.data,path.winding);
				break;
			case 4:
				bitmapFill = graphics1;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
				break;
			case 5:
				this.endFill();
				break;
			case 6:
				quadPath = graphics1;
				this.drawQuads(quadPath.rects,quadPath.indices,quadPath.transforms);
				break;
			case 7:
				trianglePath = graphics1;
				this.drawTriangles(trianglePath.vertices,trianglePath.indices,trianglePath.uvtData,trianglePath.culling);
				break;
			case 8:
				shaderFill = graphics1;
				this.beginShaderFill(shaderFill.shader,shaderFill.matrix);
				break;
			}
		}
	}
	,drawPath: function(commands,data,winding) {
		if(winding == null) {
			winding = 0;
		}
		var dataIndex = 0;
		if(winding == 1) {
			this.__commands.windingNonZero();
		}
		var command = commands.iterator();
		_hx_loop1: while(command.hasNext()) {
			var command1 = command.next();
			switch(command1) {
			case 1:
				this.moveTo(data.get(dataIndex),data.get(dataIndex + 1));
				dataIndex += 2;
				break;
			case 2:
				this.lineTo(data.get(dataIndex),data.get(dataIndex + 1));
				dataIndex += 2;
				break;
			case 3:
				this.curveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3));
				dataIndex += 4;
				break;
			case 4:
				this.moveTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
				break _hx_loop1;
			case 5:
				this.lineTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
				break _hx_loop1;
			case 6:
				this.cubicCurveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3),data.get(dataIndex + 4),data.get(dataIndex + 5));
				dataIndex += 6;
				break;
			default:
			}
		}
	}
	,drawQuads: function(rects,indices,transforms) {
		if(rects == null) {
			return;
		}
		var hasIndices = indices != null;
		var transformABCD = false;
		var transformXY = false;
		var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
		if(length == 0) {
			return;
		}
		if(transforms != null) {
			if(transforms.get_length() >= length * 6) {
				transformABCD = true;
				transformXY = true;
			} else if(transforms.get_length() >= length * 4) {
				transformABCD = true;
			} else if(transforms.get_length() >= length * 2) {
				transformXY = true;
			}
		}
		var tileRect = openfl_geom_Rectangle.__pool.get();
		var tileTransform = openfl_geom_Matrix.__pool.get();
		var minX = Infinity;
		var minY = Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var ri;
		var ti;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			ri = hasIndices ? indices.get(i) * 4 : i * 4;
			if(ri < 0) {
				continue;
			}
			tileRect.setTo(0,0,rects.get(ri + 2),rects.get(ri + 3));
			if(tileRect.width <= 0 || tileRect.height <= 0) {
				continue;
			}
			if(transformABCD && transformXY) {
				ti = i * 6;
				tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
			} else if(transformABCD) {
				ti = i * 4;
				tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
			} else if(transformXY) {
				ti = i * 2;
				tileTransform.tx = transforms.get(ti);
				tileTransform.ty = transforms.get(ti + 1);
			} else {
				tileTransform.tx = tileRect.x;
				tileTransform.ty = tileRect.y;
			}
			tileRect.__transform(tileRect,tileTransform);
			if(minX > tileRect.x) {
				minX = tileRect.x;
			}
			if(minY > tileRect.y) {
				minY = tileRect.y;
			}
			if(maxX < tileRect.get_right()) {
				maxX = tileRect.get_right();
			}
			if(maxY < tileRect.get_bottom()) {
				maxY = tileRect.get_bottom();
			}
		}
		this.__inflateBounds(minX,minY);
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawQuads(rects,indices,transforms);
		this.set___dirty(true);
		this.__visible = true;
		openfl_geom_Rectangle.__pool.release(tileRect);
		openfl_geom_Matrix.__pool.release(tileTransform);
	}
	,drawRect: function(x,y,width,height) {
		if(width == 0 && height == 0) {
			return;
		}
		var xSign = width < 0 ? -1 : 1;
		var ySign = height < 0 ? -1 : 1;
		this.__inflateBounds(x - this.__strokePadding * xSign,y - this.__strokePadding * ySign);
		this.__inflateBounds(x + width + this.__strokePadding * xSign,y + height + this.__strokePadding * ySign);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width == 0 && height == 0) {
			return;
		}
		var xSign = width < 0 ? -1 : 1;
		var ySign = height < 0 ? -1 : 1;
		this.__inflateBounds(x - this.__strokePadding * xSign,y - this.__strokePadding * ySign);
		this.__inflateBounds(x + width + this.__strokePadding * xSign,y + height + this.__strokePadding * ySign);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		var xw = x + width;
		var yh = y + height;
		var minSize = width < height ? width * 2 : height * 2;
		if(!(topLeftRadius < minSize)) {
			topLeftRadius = minSize;
		}
		if(!(topRightRadius < minSize)) {
			topRightRadius = minSize;
		}
		if(!(bottomLeftRadius < minSize)) {
			bottomLeftRadius = minSize;
		}
		if(!(bottomRightRadius < minSize)) {
			bottomRightRadius = minSize;
		}
		var anchor = 1 - Math.sin(45 * (Math.PI / 180));
		var control = 1 - Math.tan(22.5 * (Math.PI / 180));
		var a = bottomRightRadius * anchor;
		var s = bottomRightRadius * control;
		this.moveTo(xw,yh - bottomRightRadius);
		this.curveTo(xw,yh - s,xw - a,yh - a);
		this.curveTo(xw - s,yh,xw - bottomRightRadius,yh);
		a = bottomLeftRadius * anchor;
		s = bottomLeftRadius * control;
		this.lineTo(x + bottomLeftRadius,yh);
		this.curveTo(x + s,yh,x + a,yh - a);
		this.curveTo(x,yh - s,x,yh - bottomLeftRadius);
		a = topLeftRadius * anchor;
		s = topLeftRadius * control;
		this.lineTo(x,y + topLeftRadius);
		this.curveTo(x,y + s,x + a,y + a);
		this.curveTo(x + s,y,x + topLeftRadius,y);
		a = topRightRadius * anchor;
		s = topRightRadius * control;
		this.lineTo(xw - topRightRadius,y);
		this.curveTo(xw - s,y,xw - a,y + a);
		this.curveTo(xw,y + s,xw,y + topRightRadius);
		this.lineTo(xw,yh - bottomRightRadius);
		this.set___dirty(true);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		if(culling == null) {
			culling = 1;
		}
		if(vertices == null || vertices.get_length() == 0) {
			return;
		}
		var vertLength = vertices.get_length() / 2 | 0;
		if(indices == null) {
			if(vertLength % 3 != 0) {
				throw new openfl_errors_ArgumentError("Not enough vertices to close a triangle.");
			}
			indices = openfl_Vector.toIntVector(null);
			var _g = 0;
			var _g1 = vertLength;
			while(_g < _g1) {
				var i = _g++;
				indices.push(i);
			}
		}
		if(culling == null) {
			culling = 1;
		}
		var x;
		var y;
		var minX = Infinity;
		var minY = Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g = 0;
		var _g1 = vertLength;
		while(_g < _g1) {
			var i = _g++;
			x = vertices.get(i * 2);
			y = vertices.get(i * 2 + 1);
			if(minX > x) {
				minX = x;
			}
			if(minY > y) {
				minY = y;
			}
			if(maxX < x) {
				maxX = x;
			}
			if(maxY < y) {
				maxY = y;
			}
		}
		this.__inflateBounds(minX,minY);
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.lineBitmapStyle(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		if(alphas == null) {
			alphas = [];
			var _g = 0;
			var _g1 = colors.length;
			while(_g < _g1) {
				var i = _g++;
				alphas.push(1);
			}
		}
		if(ratios == null) {
			ratios = [];
			var _g = 0;
			var _g1 = colors.length;
			while(_g < _g1) {
				var i = _g++;
				ratios.push(Math.ceil(i / (colors.length - 1) * 255));
			}
		}
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(caps == null) {
			caps = 1;
		}
		if(joints == null) {
			joints = 2;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = Math.ceil(thickness);
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = Math.ceil(thickness / 2);
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) {
			return;
		}
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,overrideBlendMode: function(blendMode) {
		if(blendMode == null) {
			blendMode = 10;
		}
		this.__commands.overrideBlendMode(blendMode);
	}
	,readGraphicsData: function(recurse) {
		if(recurse == null) {
			recurse = true;
		}
		var graphicsData = openfl_Vector.toObjectVector(null);
		this.__owner.__readGraphicsData(graphicsData,recurse);
		return graphicsData;
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null && this.__canvas != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.__bitmap = null;
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var px = norm == 0 ? -matrix.tx : 1.0 / norm * (matrix.c * (matrix.ty - y) + matrix.d * (x - matrix.tx));
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var py = norm == 0 ? -matrix.ty : 1.0 / norm * (matrix.a * (y - matrix.ty) + matrix.b * (matrix.tx - x));
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl_display__$internal_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__findExtrema: function(p1,p2,p3,p4) {
		var solutions = [];
		if(!((p2 < p4 && p2 > p1 || p2 > p4 && p2 < p1) && (p3 < p4 && p3 > p1 || p3 > p4 && p3 < p1))) {
			var a = -p1 + 3 * p2 + p4 - 3 * p3;
			var b = 2 * p1 - 4 * p2 + 2 * p3;
			var c = p2 - p1;
			var d = b * b - 4 * a * c;
			if(a == 0) {
				var t = -c / b;
				if(t > 0 && t < 1) {
					solutions.push(this.__calculateBezierCubicPoint(t,p1,p2,p3,p4));
				}
			} else if(d >= 0) {
				var t1 = (-b + Math.sqrt(d)) / (2 * a);
				var t2 = (-b - Math.sqrt(d)) / (2 * a);
				if(t1 > 0 && t1 < 1) {
					solutions.push(this.__calculateBezierCubicPoint(t1,p1,p2,p3,p4));
				}
				if(t2 > 0 && t2 < 1) {
					solutions.push(this.__calculateBezierCubicPoint(t2,p1,p2,p3,p4));
				}
			}
		}
		var min = p1;
		var max = p1;
		solutions.push(p4);
		var _g = 0;
		while(_g < solutions.length) {
			var val = solutions[_g];
			++_g;
			if(val < min) {
				min = val;
			}
			if(val > max) {
				max = val;
			}
		}
		return { min : min, max : max};
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,__readGraphicsData: function(graphicsData) {
		var data = new openfl_display__$internal_DrawCommandReader(this.__commands);
		var path = null;
		var stroke;
		var _g = 0;
		var _g1 = this.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 4:case 5:case 6:case 7:case 9:case 10:case 17:case 18:
				if(path == null) {
					path = new openfl_display_GraphicsPath();
				}
				break;
			default:
				if(path != null) {
					graphicsData.push(path);
					path = null;
				}
			}
			switch(type._hx_index) {
			case 0:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
				var c = data;
				graphicsData.push(new openfl_display_GraphicsBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]));
				break;
			case 1:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
				var c1 = data;
				graphicsData.push(new openfl_display_GraphicsSolidFill(c1.buffer.i[c1.iPos],1));
				break;
			case 2:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL;
				var c2 = data;
				graphicsData.push(new openfl_display_GraphicsGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]));
				break;
			case 3:
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
				var c3 = data;
				path.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
				var c4 = data;
				path.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
				var c5 = data;
				path.__drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
				var c6 = data;
				path.__drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
				var c7 = data;
				path.__drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
				var c8 = data;
				path.__drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos] != null ? c8.buffer.o[c8.oPos] : c8.buffer.f[c8.fPos + 4]);
				break;
			case 13:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.END_FILL;
				var this1 = data;
				graphicsData.push(new openfl_display_GraphicsEndFill());
				break;
			case 14:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE;
				var c9 = data;
				path = null;
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE;
				var c10 = data;
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_STYLE;
				var c11 = data;
				stroke = new openfl_display_GraphicsStroke(c11.buffer.o[c11.oPos],c11.buffer.b[c11.bPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos + 1]);
				stroke.fill = new openfl_display_GraphicsSolidFill(c11.buffer.i[c11.iPos],c11.buffer.f[c11.fPos]);
				graphicsData.push(stroke);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
				var c12 = data;
				path.lineTo(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1]);
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
				var c13 = data;
				path.moveTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			}
		}
		if(path != null) {
			graphicsData.push(path);
		}
	}
	,__update: function(displayMatrix,pixelRatio) {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) {
			return;
		}
		var parentTransform = this.__owner.__renderTransform;
		if(parentTransform == null) {
			return;
		}
		var scaleX = pixelRatio;
		var scaleY = pixelRatio;
		if(this.__owner.__worldScale9Grid == null) {
			if(parentTransform.b == 0) {
				scaleX = Math.abs(parentTransform.a);
			} else {
				scaleX = Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
			}
			if(parentTransform.c == 0) {
				scaleY = Math.abs(parentTransform.d);
			} else {
				scaleY = Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
			}
			if(displayMatrix != null) {
				if(displayMatrix.b == 0) {
					scaleX *= displayMatrix.a;
				} else {
					scaleX *= Math.sqrt(displayMatrix.a * displayMatrix.a + displayMatrix.b * displayMatrix.b);
				}
				if(displayMatrix.c == 0) {
					scaleY *= displayMatrix.d;
				} else {
					scaleY *= Math.sqrt(displayMatrix.c * displayMatrix.c + displayMatrix.d * displayMatrix.d);
				}
			}
		}
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(width < 1 || height < 1) {
			if(this.__width >= 1 || this.__height >= 1) {
				this.set___dirty(true);
			}
			this.__width = 0;
			this.__height = 0;
			return;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && width > openfl_display_Graphics.maxTextureWidth) {
			width = openfl_display_Graphics.maxTextureWidth;
			scaleX = openfl_display_Graphics.maxTextureWidth / this.__bounds.width;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && height > openfl_display_Graphics.maxTextureHeight) {
			height = openfl_display_Graphics.maxTextureHeight;
			scaleY = openfl_display_Graphics.maxTextureHeight / this.__bounds.height;
		}
		var inverseA;
		var inverseD;
		if(this.__owner.__worldScale9Grid != null) {
			this.__renderTransform.a = pixelRatio;
			this.__renderTransform.d = pixelRatio;
			inverseA = 1 / pixelRatio;
			inverseD = 1 / pixelRatio;
		} else {
			this.__renderTransform.a = width / this.__bounds.width;
			this.__renderTransform.d = height / this.__bounds.height;
			inverseA = 1 / this.__renderTransform.a;
			inverseD = 1 / this.__renderTransform.d;
		}
		this.__worldTransform.a = inverseA * parentTransform.a;
		this.__worldTransform.b = inverseA * parentTransform.b;
		this.__worldTransform.c = inverseD * parentTransform.c;
		this.__worldTransform.d = inverseD * parentTransform.d;
		var x = this.__bounds.x;
		var y = this.__bounds.y;
		var tx = x * parentTransform.a + y * parentTransform.c + parentTransform.tx;
		var ty = x * parentTransform.b + y * parentTransform.d + parentTransform.ty;
		if(pixelRatio > 1.0) {
			var nativePixelSize = 1 / pixelRatio;
			this.__worldTransform.tx = Math.round(tx / nativePixelSize) * nativePixelSize;
			this.__worldTransform.ty = Math.round(ty / nativePixelSize) * nativePixelSize;
		} else {
			this.__worldTransform.tx = Math.round(tx);
			this.__worldTransform.ty = Math.round(ty);
		}
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		this.__renderTransform.tx = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - ty) + _this.d * (tx - _this.tx));
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		this.__renderTransform.ty = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (ty - _this.ty) + _this.b * (_this.tx - tx));
		var newWidth = Math.ceil(width + 1.0);
		var newHeight = Math.ceil(height + 1.0);
		if(newWidth != this.__width || newHeight != this.__height) {
			this.set___dirty(true);
		}
		this.__width = newWidth;
		this.__height = newHeight;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			var _this = this.__owner;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value) {
			this.__softwareDirty = true;
			this.__hardwareDirty = true;
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = "openfl.display.IGraphicsFill";
openfl_display_IGraphicsFill.__isInterface__ = true;
openfl_display_IGraphicsFill.prototype = {
	__graphicsFillType: null
	,__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = "openfl.display.IGraphicsData";
openfl_display_IGraphicsData.__isInterface__ = true;
openfl_display_IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) {
		smooth = false;
	}
	if(repeat == null) {
		repeat = true;
	}
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = 4;
	this.__graphicsFillType = 2;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = "openfl.display.GraphicsBitmapFill";
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	bitmapData: null
	,matrix: null
	,repeat: null
	,smooth: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = 5;
	this.__graphicsFillType = 3;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = "openfl.display.GraphicsEndFill";
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) {
		focalPointRatio = 0;
	}
	if(type == null) {
		type = 0;
	}
	if(spreadMethod == null) {
		spreadMethod = 0;
	}
	if(interpolationMethod == null) {
		interpolationMethod = 1;
	}
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = 2;
	this.__graphicsFillType = 1;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = "openfl.display.GraphicsGradientFill";
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	alphas: null
	,colors: null
	,focalPointRatio: null
	,interpolationMethod: null
	,matrix: null
	,ratios: null
	,spreadMethod: null
	,type: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = "openfl.display.IGraphicsPath";
openfl_display_IGraphicsPath.__isInterface__ = true;
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) {
		winding = 0;
	}
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = 3;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = "openfl.display.GraphicsPath";
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	commands: null
	,data: null
	,winding: null
	,__graphicsDataType: null
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(6);
		this.data.push(controlX1);
		this.data.push(controlY1);
		this.data.push(controlX2);
		this.data.push(controlY2);
		this.data.push(anchorX);
		this.data.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(3);
		this.data.push(controlX);
		this.data.push(controlY);
		this.data.push(anchorX);
		this.data.push(anchorY);
	}
	,lineTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(2);
		this.data.push(x);
		this.data.push(y);
	}
	,moveTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(1);
		this.data.push(x);
		this.data.push(y);
	}
	,wideLineTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(2);
		this.data.push(x);
		this.data.push(y);
	}
	,wideMoveTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(1);
		this.data.push(x);
		this.data.push(y);
	}
	,__drawCircle: function(x,y,radius) {
		this.__drawRoundRect(x - radius,y - radius,radius * 2,radius * 2,radius * 2,radius * 2);
	}
	,__drawEllipse: function(x,y,width,height) {
		this.__drawRoundRect(x,y,width,height,width,height);
	}
	,__drawRect: function(x,y,width,height) {
		this.moveTo(x,y);
		this.lineTo(x + width,y);
		this.lineTo(x + width,y + height);
		this.lineTo(x,y + height);
		this.lineTo(x,y);
	}
	,__drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		ellipseWidth *= 0.5;
		ellipseHeight *= 0.5;
		if(ellipseWidth > width / 2) {
			ellipseWidth = width / 2;
		}
		if(ellipseHeight > height / 2) {
			ellipseHeight = height / 2;
		}
		var xe = x + width;
		var ye = y + height;
		var cx1 = -ellipseWidth + ellipseWidth * 0.70710678118654752440084436210485;
		var cx2 = -ellipseWidth + ellipseWidth * 0.4142135623730950488016887242097;
		var cy1 = -ellipseHeight + ellipseHeight * 0.70710678118654752440084436210485;
		var cy2 = -ellipseHeight + ellipseHeight * 0.4142135623730950488016887242097;
		this.moveTo(xe,ye - ellipseHeight);
		this.curveTo(xe,ye + cy2,xe + cx1,ye + cy1);
		this.curveTo(xe + cx2,ye,xe - ellipseWidth,ye);
		this.lineTo(x + ellipseWidth,ye);
		this.curveTo(x - cx2,ye,x - cx1,ye + cy1);
		this.curveTo(x,ye + cy2,x,ye - ellipseHeight);
		this.lineTo(x,y + ellipseHeight);
		this.curveTo(x,y - cy2,x - cx1,y - cy1);
		this.curveTo(x - cx2,y,x + ellipseWidth,y);
		this.lineTo(xe - ellipseWidth,y);
		this.curveTo(xe + cx2,y,xe + cx1,y - cy1);
		this.curveTo(xe,y - cy2,xe,y + ellipseHeight);
		this.lineTo(xe,ye - ellipseHeight);
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display_GraphicsPathWinding = {};
openfl_display_GraphicsPathWinding.fromString = function(value) {
	switch(value) {
	case "evenOdd":
		return 0;
	case "nonZero":
		return 1;
	default:
		return null;
	}
};
openfl_display_GraphicsPathWinding.toString = function(this1) {
	switch(this1) {
	case 0:
		return "evenOdd";
	case 1:
		return "nonZero";
	default:
		return null;
	}
};
var openfl_display_GraphicsQuadPath = function(rects,indices,transforms) {
	this.rects = rects;
	this.indices = indices;
	this.transforms = transforms;
	this.__graphicsDataType = 6;
};
$hxClasses["openfl.display.GraphicsQuadPath"] = openfl_display_GraphicsQuadPath;
openfl_display_GraphicsQuadPath.__name__ = "openfl.display.GraphicsQuadPath";
openfl_display_GraphicsQuadPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsQuadPath.prototype = {
	indices: null
	,rects: null
	,transforms: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsQuadPath
};
var openfl_display_GraphicsShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\r\n\t\tvarying vec4 openfl_ColorMultiplierv;\r\n\t\tvarying vec4 openfl_ColorOffsetv;\r\n\t\tvarying vec2 openfl_TextureCoordv;\r\n\r\n\t\tuniform bool openfl_HasColorTransform;\r\n\t\tuniform vec2 openfl_TextureSize;\r\n\t\tuniform sampler2D bitmap;\r\n\r\n\t\tvoid main(void) {\r\n\r\n\t\t\tvec4 color = texture2D (bitmap, openfl_TextureCoordv);\r\n\r\n\t\tif (color.a == 0.0) {\r\n\r\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\r\n\r\n\t\t} else if (openfl_HasColorTransform) {\r\n\r\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\r\n\r\n\t\t\tmat4 colorMultiplier = mat4 (0);\r\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\r\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\r\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\r\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\r\n\r\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\r\n\r\n\t\t\tif (color.a > 0.0) {\r\n\r\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgl_FragColor = color * openfl_Alphav;\r\n\r\n\t\t}\r\n\r\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\r\n\t\tattribute vec4 openfl_ColorMultiplier;\r\n\t\tattribute vec4 openfl_ColorOffset;\r\n\t\tattribute vec4 openfl_Position;\r\n\t\tattribute vec2 openfl_TextureCoord;\r\n\r\n\t\tvarying float openfl_Alphav;\r\n\t\tvarying vec4 openfl_ColorMultiplierv;\r\n\t\tvarying vec4 openfl_ColorOffsetv;\r\n\t\tvarying vec2 openfl_TextureCoordv;\r\n\r\n\t\tuniform mat4 openfl_Matrix;\r\n\t\tuniform bool openfl_HasColorTransform;\r\n\t\tuniform vec2 openfl_TextureSize;\r\n\r\n\t\tvoid main(void) {\r\n\r\n\t\t\topenfl_Alphav = openfl_Alpha;\r\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\r\n\r\n\t\tif (openfl_HasColorTransform) {\r\n\r\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\r\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\r\n\r\n\t\t}\r\n\r\n\t\tgl_Position = openfl_Matrix * openfl_Position;\r\n\r\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display.GraphicsShader"] = openfl_display_GraphicsShader;
openfl_display_GraphicsShader.__name__ = "openfl.display.GraphicsShader";
openfl_display_GraphicsShader.__super__ = openfl_display_Shader;
openfl_display_GraphicsShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Alpha: null
	,openfl_ColorMultiplier: null
	,openfl_ColorOffset: null
	,openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_HasColorTransform: null
	,openfl_TextureSize: null
	,bitmap: null
	,__class__: openfl_display_GraphicsShader
});
var openfl_display_GraphicsShaderFill = function(shader,matrix) {
	this.shader = shader;
	this.matrix = matrix;
	this.__graphicsDataType = 8;
	this.__graphicsFillType = 4;
};
$hxClasses["openfl.display.GraphicsShaderFill"] = openfl_display_GraphicsShaderFill;
openfl_display_GraphicsShaderFill.__name__ = "openfl.display.GraphicsShaderFill";
openfl_display_GraphicsShaderFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsShaderFill.prototype = {
	matrix: null
	,shader: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsShaderFill
};
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = 1;
	this.__graphicsFillType = 0;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = "openfl.display.GraphicsSolidFill";
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	alpha: null
	,color: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = "openfl.display.IGraphicsStroke";
openfl_display_IGraphicsStroke.__isInterface__ = true;
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) {
		miterLimit = 3;
	}
	if(joints == null) {
		joints = 2;
	}
	if(caps == null) {
		caps = 0;
	}
	if(scaleMode == null) {
		scaleMode = 2;
	}
	if(pixelHinting == null) {
		pixelHinting = false;
	}
	if(thickness == null) {
		thickness = NaN;
	}
	this.caps = caps;
	this.fill = fill;
	this.joints = joints;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	this.scaleMode = scaleMode;
	this.thickness = thickness;
	this.__graphicsDataType = 0;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = "openfl.display.GraphicsStroke";
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	caps: null
	,fill: null
	,joints: null
	,miterLimit: null
	,pixelHinting: null
	,scaleMode: null
	,thickness: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsTrianglePath = function(vertices,indices,uvtData,culling) {
	if(culling == null) {
		culling = 1;
	}
	this.vertices = vertices;
	this.indices = indices;
	this.uvtData = uvtData;
	this.culling = culling;
	this.__graphicsDataType = 7;
};
$hxClasses["openfl.display.GraphicsTrianglePath"] = openfl_display_GraphicsTrianglePath;
openfl_display_GraphicsTrianglePath.__name__ = "openfl.display.GraphicsTrianglePath";
openfl_display_GraphicsTrianglePath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsTrianglePath.prototype = {
	culling: null
	,indices: null
	,uvtData: null
	,vertices: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsTrianglePath
};
var openfl_display_ITileContainer = function() { };
$hxClasses["openfl.display.ITileContainer"] = openfl_display_ITileContainer;
openfl_display_ITileContainer.__name__ = "openfl.display.ITileContainer";
openfl_display_ITileContainer.__isInterface__ = true;
openfl_display_ITileContainer.prototype = {
	get_numTiles: null
	,addTile: null
	,addTileAt: null
	,addTiles: null
	,contains: null
	,getTileAt: null
	,getTileIndex: null
	,removeTile: null
	,removeTileAt: null
	,removeTiles: null
	,setTileIndex: null
	,sortTiles: null
	,swapTiles: null
	,swapTilesAt: null
	,__class__: openfl_display_ITileContainer
	,__properties__: {get_numTiles:"get_numTiles"}
};
var openfl_display_InterpolationMethod = {};
openfl_display_InterpolationMethod.fromInt = function(value) {
	return value;
};
openfl_display_InterpolationMethod.fromString = function(value) {
	switch(value) {
	case "linearRGB":
		return 0;
	case "rgb":
		return 1;
	default:
		return null;
	}
};
openfl_display_InterpolationMethod.toInt = function(this1) {
	return this1;
};
openfl_display_InterpolationMethod.toString = function(this1) {
	switch(this1) {
	case 0:
		return "linearRGB";
	case 1:
		return "rgb";
	default:
		return null;
	}
};
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) {
		quality = 80;
	}
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = "openfl.display.JPEGEncoderOptions";
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display_JointStyle = {};
openfl_display_JointStyle.fromInt = function(value) {
	return value;
};
openfl_display_JointStyle.fromString = function(value) {
	switch(value) {
	case "bevel":
		return 0;
	case "miter":
		return 1;
	case "round":
		return 2;
	default:
		return null;
	}
};
openfl_display_JointStyle.toInt = function(this1) {
	return this1;
};
openfl_display_JointStyle.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display_LineScaleMode = {};
openfl_display_LineScaleMode.fromInt = function(value) {
	return value;
};
openfl_display_LineScaleMode.fromString = function(value) {
	switch(value) {
	case "horizontal":
		return 0;
	case "none":
		return 1;
	case "normal":
		return 2;
	case "vertical":
		return 3;
	default:
		return null;
	}
};
openfl_display_LineScaleMode.toInt = function(this1) {
	return this1;
};
openfl_display_LineScaleMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "horizontal";
	case 1:
		return "none";
	case 2:
		return "normal";
	case 3:
		return "vertical";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.__drawableType = 4;
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
	this.uncaughtErrorEvents = this.contentLoaderInfo.uncaughtErrorEvents;
	this.__unloaded = true;
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = "openfl.display.Loader";
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	content: null
	,contentLoaderInfo: null
	,uncaughtErrorEvents: null
	,__library: null
	,__path: null
	,__unloaded: null
	,addChild: function(child) {
		throw new openfl_errors_Error("Error #2069: The Loader class does not implement this method.",2069);
	}
	,addChildAt: function(child,index) {
		throw new openfl_errors_Error("Error #2069: The Loader class does not implement this method.",2069);
	}
	,close: function() {
		openfl_utils__$internal_Lib.notImplemented({ fileName : "openfl/display/Loader.hx", lineNumber : 228, className : "openfl.display.Loader", methodName : "close"});
	}
	,load: function(request,context) {
		this.unload();
		var openEvent = new openfl_events_Event("open");
		this.contentLoaderInfo.dispatchEvent(openEvent);
		this.contentLoaderInfo.loaderURL = openfl_Lib.get_current().get_loaderInfo().url;
		this.contentLoaderInfo.url = request.url;
		this.__unloaded = false;
		if(request.contentType == null || request.contentType == "") {
			var extension = "";
			this.__path = request.url;
			var queryIndex = this.__path.indexOf("?");
			if(queryIndex > -1) {
				this.__path = this.__path.substring(0,queryIndex);
			}
			while(StringTools.endsWith(this.__path,"/")) this.__path = this.__path.substring(0,this.__path.length - 1);
			if(StringTools.endsWith(this.__path,".bundle")) {
				this.__path += "/library.json";
				if(queryIndex > -1) {
					request.url = this.__path + request.url.substring(queryIndex);
				} else {
					request.url = this.__path;
				}
			}
			var extIndex = this.__path.lastIndexOf(".");
			if(extIndex > -1) {
				extension = this.__path.substring(extIndex + 1);
			}
			var tmp;
			switch(extension) {
			case "gif":
				tmp = "image/gif";
				break;
			case "jpeg":case "jpg":
				tmp = "image/jpeg";
				break;
			case "js":
				tmp = "application/javascript";
				break;
			case "json":
				tmp = "application/json";
				break;
			case "png":
				tmp = "image/png";
				break;
			case "swf":
				tmp = "application/x-shockwave-flash";
				break;
			default:
				tmp = "application/x-www-form-urlencoded";
			}
			this.contentLoaderInfo.contentType = tmp;
		} else {
			this.contentLoaderInfo.contentType = request.contentType;
		}
		if(this.contentLoaderInfo.contentType.indexOf("image/") > -1 && request.method == "GET" && (request.requestHeaders == null || request.requestHeaders.length == 0) && request.userAgent == null) {
			openfl_display_BitmapData.loadFromFile(request.url).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError)).onProgress($bind(this,this.BitmapData_onProgress));
			return;
		}
		var loader = new openfl_net_URLLoader();
		loader.dataFormat = 0;
		if(this.contentLoaderInfo.contentType.indexOf("/json") > -1 || this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1) {
			loader.dataFormat = 1;
		}
		loader.addEventListener("complete",$bind(this,this.loader_onComplete));
		loader.addEventListener("ioError",$bind(this,this.loader_onError));
		loader.addEventListener("progress",$bind(this,this.loader_onProgress));
		loader.load(request);
	}
	,loadBytes: function(buffer,context) {
		openfl_display_BitmapData.loadFromBytes(buffer).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
	}
	,removeChild: function(child) {
		if(child == this.content) {
			return openfl_display_DisplayObjectContainer.prototype.removeChild.call(this,this.content);
		} else {
			throw new openfl_errors_Error("Error #2069: The Loader class does not implement this method.",2069);
		}
	}
	,removeChildAt: function(index) {
		throw new openfl_errors_Error("Error #2069: The Loader class does not implement this method.",2069);
	}
	,setChildIndex: function(child,index) {
		throw new openfl_errors_Error("Error #2069: The Loader class does not implement this method.",2069);
	}
	,unload: function() {
		if(!this.__unloaded) {
			if(this.content != null && this.content.parent == this) {
				openfl_display_DisplayObjectContainer.prototype.removeChild.call(this,this.content);
			}
			if(this.__library != null) {
				openfl_utils_Assets.unloadLibrary(this.contentLoaderInfo.url);
				this.__library = null;
			}
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			this.__unloaded = true;
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("unload"));
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) {
			gc = true;
		}
		if(this.content != null) {
			this.content.__stopAllMovieClips();
		}
		var _g = 0;
		var _g1 = this.get_numChildren();
		while(_g < _g1) {
			var i = _g++;
			this.getChildAt(i).__stopAllMovieClips();
		}
		this.unload();
		var gc1 = gc;
	}
	,__dispatchError: function(text) {
		var event = new openfl_events_IOErrorEvent("ioError");
		event.text = text;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__setContent: function(content,width,height) {
		this.content = content;
		this.contentLoaderInfo.content = content;
		this.contentLoaderInfo.width = width;
		this.contentLoaderInfo.height = height;
		if(content != null) {
			openfl_display_DisplayObjectContainer.prototype.addChildAt.call(this,content,0);
		}
	}
	,BitmapData_onError: function(error) {
		this.__dispatchError(Std.string(error));
	}
	,BitmapData_onLoad: function(bitmapData) {
		if(bitmapData == null) {
			this.__dispatchError("Unknown error");
			return;
		}
		this.__setContent(new openfl_display_Bitmap(bitmapData),bitmapData.width,bitmapData.height);
		this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
	}
	,BitmapData_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onComplete: function(event) {
		var _gthis = this;
		var loader = event.target;
		if(this.contentLoaderInfo.contentType != null && this.contentLoaderInfo.contentType.indexOf("/json") > -1) {
			var manifest = lime_utils_AssetManifest.parse(loader.data,haxe_io_Path.directory(this.__path));
			if(manifest == null) {
				this.__dispatchError("Cannot parse asset manifest");
				return;
			}
			var library = lime_utils_AssetLibrary.fromManifest(manifest);
			if(library == null) {
				this.__dispatchError("Cannot open library");
				return;
			}
			if(((library) instanceof openfl_utils_AssetLibrary)) {
				library.load().onComplete(function(_) {
					_gthis.__library = library;
					openfl_utils_Assets.registerLibrary(_gthis.contentLoaderInfo.url,_gthis.__library);
					if(manifest.name != null && !openfl_utils_Assets.hasLibrary(manifest.name)) {
						openfl_utils_Assets.registerLibrary(manifest.name,_gthis.__library);
					}
					var clip = _gthis.__library.getMovieClip("");
					_gthis.__setContent(clip,clip.get_width() | 0,clip.get_height() | 0);
					_gthis.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
				}).onError(function(e) {
					_gthis.__dispatchError(e);
				});
			}
		} else if(this.contentLoaderInfo.contentType != null && (this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1)) {
			this.__setContent(new openfl_display_Sprite(),0,0);
			eval("(function () {" + Std.string(loader.data) + "})()");
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
		} else {
			this.contentLoaderInfo.bytes = loader.data;
			openfl_display_BitmapData.loadFromBytes(loader.data).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
		}
	}
	,loader_onError: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onProgress: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = "openfl.display.LoaderInfo";
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__completed: null
	,__complete: function() {
		if(!this.__completed) {
			if(this.bytesLoaded < this.bytesTotal) {
				this.bytesLoaded = this.bytesTotal;
			}
			this.__update(this.bytesLoaded,this.bytesTotal);
			this.__completed = true;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__update: function(bytesLoaded,bytesTotal) {
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,bytesLoaded,bytesTotal));
	}
	,__class__: openfl_display_LoaderInfo
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = "openfl.display.MovieClip";
openfl_display_MovieClip.fromTimeline = function(timeline) {
	var movieClip = new openfl_display_MovieClip();
	movieClip.attachTimeline(timeline);
	return movieClip;
};
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	__enabled: null
	,__hasDown: null
	,__hasOver: null
	,__hasUp: null
	,__mouseIsDown: null
	,__scene: null
	,__timeline: null
	,addFrameScript: function(index,method) {
		if(this.__timeline != null) {
			this.__timeline.__addFrameScript(index,method);
		}
	}
	,attachTimeline: function(timeline) {
		this.__timeline = timeline;
		if(timeline != null) {
			timeline.__attachMovieClip(this);
			this.play();
		}
	}
	,gotoAndPlay: function(frame,scene) {
		if(this.__timeline != null) {
			this.__timeline.__gotoAndPlay(frame,scene);
		}
	}
	,gotoAndStop: function(frame,scene) {
		if(this.__timeline != null) {
			this.__timeline.__gotoAndStop(frame,scene);
		}
	}
	,nextFrame: function() {
		if(this.__timeline != null) {
			this.__timeline.__nextFrame();
		}
	}
	,nextScene: function() {
		if(this.__timeline != null) {
			this.__timeline.__nextScene();
		}
	}
	,play: function() {
		if(this.__timeline != null) {
			this.__timeline.__play();
		}
	}
	,prevFrame: function() {
		if(this.__timeline != null) {
			this.__timeline.__prevFrame();
		}
	}
	,prevScene: function() {
		if(this.__timeline != null) {
			this.__timeline.__prevScene();
		}
	}
	,stop: function() {
		if(this.__timeline != null) {
			this.__timeline.__stop();
		}
	}
	,__enterFrame: function(deltaTime) {
		if(this.__timeline != null) {
			this.__timeline.__enterFrame(deltaTime);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__stopAllMovieClips: function() {
		openfl_display_Sprite.prototype.__stopAllMovieClips.call(this);
		this.stop();
	}
	,__tabTest: function(stack) {
		if(!this.__enabled) {
			return;
		}
		openfl_display_Sprite.prototype.__tabTest.call(this,stack);
	}
	,__onMouseDown: function(event) {
		if(this.__enabled && this.__hasDown) {
			this.gotoAndStop("_down");
		}
		this.__mouseIsDown = true;
		if(this.stage != null) {
			this.stage.addEventListener("mouseUp",$bind(this,this.__onMouseUp),true);
		}
	}
	,__onMouseUp: function(event) {
		this.__mouseIsDown = false;
		if(this.stage != null) {
			this.stage.removeEventListener("mouseUp",$bind(this,this.__onMouseUp));
		}
		if(!this.__buttonMode) {
			return;
		}
		if(openfl_utils_Object.__eq(event.target,this) && this.__enabled && this.__hasOver) {
			this.gotoAndStop("_over");
		} else if(this.__enabled && this.__hasUp) {
			this.gotoAndStop("_up");
		}
	}
	,__onRollOut: function(event) {
		if(!this.__enabled) {
			return;
		}
		if(this.__mouseIsDown && this.__hasOver) {
			this.gotoAndStop("_over");
		} else if(this.__hasUp) {
			this.gotoAndStop("_up");
		}
	}
	,__onRollOver: function(event) {
		if(this.__enabled && this.__hasOver) {
			this.gotoAndStop("_over");
		}
	}
	,set_buttonMode: function(value) {
		if(this.__buttonMode != value) {
			if(value) {
				this.__hasDown = false;
				this.__hasOver = false;
				this.__hasUp = false;
				var _g = 0;
				var _g1 = this.get_currentLabels();
				while(_g < _g1.length) {
					var frameLabel = _g1[_g];
					++_g;
					switch(frameLabel.name) {
					case "_down":
						this.__hasDown = true;
						break;
					case "_over":
						this.__hasOver = true;
						break;
					case "_up":
						this.__hasUp = true;
						break;
					default:
					}
				}
				if(this.__hasDown || this.__hasOver || this.__hasUp) {
					this.addEventListener("rollOver",$bind(this,this.__onRollOver));
					this.addEventListener("rollOut",$bind(this,this.__onRollOut));
					this.addEventListener("mouseDown",$bind(this,this.__onMouseDown));
				}
			} else {
				this.removeEventListener("rollOver",$bind(this,this.__onRollOver));
				this.removeEventListener("rollOut",$bind(this,this.__onRollOut));
				this.removeEventListener("mouseDown",$bind(this,this.__onMouseDown));
			}
			this.__buttonMode = value;
		}
		return value;
	}
	,get_currentFrame: function() {
		if(this.__timeline != null) {
			return this.__timeline.__currentFrame;
		} else {
			return 1;
		}
	}
	,get_currentFrameLabel: function() {
		if(this.__timeline != null) {
			return this.__timeline.__currentFrameLabel;
		} else {
			return null;
		}
	}
	,get_currentLabel: function() {
		if(this.__timeline != null) {
			return this.__timeline.__currentLabel;
		} else {
			return null;
		}
	}
	,get_currentLabels: function() {
		if(this.__timeline != null) {
			return this.__timeline.__currentLabels.slice();
		} else {
			return [];
		}
	}
	,get_currentScene: function() {
		if(this.__timeline != null) {
			return this.__timeline.__currentScene;
		} else {
			if(this.__scene == null) {
				this.__scene = new openfl_display_Scene("",[],1);
			}
			return this.__scene;
		}
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,get_framesLoaded: function() {
		if(this.__timeline != null) {
			return this.__timeline.__framesLoaded;
		} else {
			return 1;
		}
	}
	,get_isPlaying: function() {
		if(this.__timeline != null) {
			return this.__timeline.__isPlaying;
		} else {
			return false;
		}
	}
	,get_scenes: function() {
		if(this.__timeline != null) {
			return this.__timeline.scenes.slice();
		} else {
			return [this.get_currentScene()];
		}
	}
	,get_totalFrames: function() {
		if(this.__timeline != null) {
			return this.__timeline.__totalFrames;
		} else {
			return 1;
		}
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_scenes:"get_scenes",get_isPlaying:"get_isPlaying",get_framesLoaded:"get_framesLoaded",set_enabled:"set_enabled",get_enabled:"get_enabled",get_currentScene:"get_currentScene",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = "openfl.geom.Rectangle";
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare == this) {
			return true;
		} else if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return new openfl_geom_Rectangle();
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			return new openfl_geom_Rectangle();
		}
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x ? toUnion.x : this.x;
		var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
		var y0 = this.y > toUnion.y ? toUnion.y : this.y;
		var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var openfl_display_OpenGLRenderer = function(context,defaultRenderTarget) {
	openfl_display_DisplayObjectRenderer.call(this);
	this.__context3D = context;
	this.__context = context.__context;
	this.gl = context.__context.webgl;
	this.__gl = this.gl;
	this.__defaultRenderTarget = defaultRenderTarget;
	this.__flipped = this.__defaultRenderTarget == null;
	if(openfl_display_Graphics.maxTextureWidth == null) {
		openfl_display_Graphics.maxTextureWidth = openfl_display_Graphics.maxTextureHeight = this.__gl.getParameter(this.__gl.MAX_TEXTURE_SIZE);
	}
	this.__matrix = lime_math_Matrix4._new();
	this.__values = [];
	this.__softwareRenderer = new openfl_display_CanvasRenderer(null);
	this.__type = "opengl";
	this.__setBlendMode(10);
	this.__context3D.__setGLBlend(true);
	this.__clipRects = [];
	this.__maskObjects = [];
	this.__numClipRects = 0;
	this.__projection = lime_math_Matrix4._new();
	this.__projectionFlipped = lime_math_Matrix4._new();
	this.__stencilReference = 0;
	this.__tempRect = new openfl_geom_Rectangle();
	this.__defaultDisplayShader = new openfl_display_DisplayObjectShader();
	this.__defaultGraphicsShader = new openfl_display_GraphicsShader();
	this.__defaultShader = this.__defaultDisplayShader;
	this.__initShader(this.__defaultShader);
	this.__scrollRectMasks = new lime_utils_ObjectPool(function() {
		return new openfl_display_Shape();
	});
	this.__maskShader = new openfl_display__$internal_Context3DMaskShader();
};
$hxClasses["openfl.display.OpenGLRenderer"] = openfl_display_OpenGLRenderer;
openfl_display_OpenGLRenderer.__name__ = "openfl.display.OpenGLRenderer";
openfl_display_OpenGLRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_OpenGLRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	gl: null
	,__context3D: null
	,__clipRects: null
	,__currentDisplayShader: null
	,__currentGraphicsShader: null
	,__currentRenderTarget: null
	,__currentShader: null
	,__currentShaderBuffer: null
	,__defaultDisplayShader: null
	,__defaultGraphicsShader: null
	,__defaultRenderTarget: null
	,__defaultShader: null
	,__displayHeight: null
	,__displayWidth: null
	,__flipped: null
	,__gl: null
	,__height: null
	,__maskShader: null
	,__matrix: null
	,__maskObjects: null
	,__numClipRects: null
	,__offsetX: null
	,__offsetY: null
	,__projection: null
	,__projectionFlipped: null
	,__scrollRectMasks: null
	,__softwareRenderer: null
	,__stencilReference: null
	,__tempRect: null
	,__updatedStencil: null
	,__upscaled: null
	,__values: null
	,__width: null
	,applyAlpha: function(alpha) {
		openfl_display_OpenGLRenderer.__alphaValue[0] = alpha * this.__worldAlpha;
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addFloatOverride("openfl_Alpha",openfl_display_OpenGLRenderer.__alphaValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__alpha != null) {
				this.__currentShader.__alpha.value = openfl_display_OpenGLRenderer.__alphaValue;
			}
		}
	}
	,applyBitmapData: function(bitmapData,smooth,repeat) {
		if(repeat == null) {
			repeat = false;
		}
		if(this.__currentShaderBuffer != null) {
			if(bitmapData != null) {
				openfl_display_OpenGLRenderer.__textureSizeValue[0] = bitmapData.__textureWidth;
				openfl_display_OpenGLRenderer.__textureSizeValue[1] = bitmapData.__textureHeight;
				this.__currentShaderBuffer.addFloatOverride("openfl_TextureSize",openfl_display_OpenGLRenderer.__textureSizeValue);
			}
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__bitmap != null) {
				this.__currentShader.__bitmap.input = bitmapData;
				this.__currentShader.__bitmap.filter = smooth && this.__allowSmoothing ? 4 : 5;
				this.__currentShader.__bitmap.mipFilter = 2;
				this.__currentShader.__bitmap.wrap = repeat ? 2 : 0;
			}
			if(this.__currentShader.__texture != null) {
				this.__currentShader.__texture.input = bitmapData;
				this.__currentShader.__texture.filter = smooth && this.__allowSmoothing ? 4 : 5;
				this.__currentShader.__texture.mipFilter = 2;
				this.__currentShader.__texture.wrap = repeat ? 2 : 0;
			}
			if(this.__currentShader.__textureSize != null) {
				if(bitmapData != null) {
					openfl_display_OpenGLRenderer.__textureSizeValue[0] = bitmapData.__textureWidth;
					openfl_display_OpenGLRenderer.__textureSizeValue[1] = bitmapData.__textureHeight;
					this.__currentShader.__textureSize.value = openfl_display_OpenGLRenderer.__textureSizeValue;
				} else {
					this.__currentShader.__textureSize.value = null;
				}
			}
		}
	}
	,applyColorTransform: function(colorTransform) {
		var enabled = colorTransform != null && !colorTransform.__isDefault(true);
		this.applyHasColorTransform(enabled);
		if(enabled) {
			colorTransform.__setArrays(openfl_display_OpenGLRenderer.__colorMultipliersValue,openfl_display_OpenGLRenderer.__colorOffsetsValue);
			if(this.__currentShaderBuffer != null) {
				this.__currentShaderBuffer.addFloatOverride("openfl_ColorMultiplier",openfl_display_OpenGLRenderer.__colorMultipliersValue);
				this.__currentShaderBuffer.addFloatOverride("openfl_ColorOffset",openfl_display_OpenGLRenderer.__colorOffsetsValue);
			} else if(this.__currentShader != null) {
				if(this.__currentShader.__colorMultiplier != null) {
					this.__currentShader.__colorMultiplier.value = openfl_display_OpenGLRenderer.__colorMultipliersValue;
				}
				if(this.__currentShader.__colorOffset != null) {
					this.__currentShader.__colorOffset.value = openfl_display_OpenGLRenderer.__colorOffsetsValue;
				}
			}
		} else if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addFloatOverride("openfl_ColorMultiplier",openfl_display_OpenGLRenderer.__emptyColorValue);
			this.__currentShaderBuffer.addFloatOverride("openfl_ColorOffset",openfl_display_OpenGLRenderer.__emptyColorValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__colorMultiplier != null) {
				this.__currentShader.__colorMultiplier.value = openfl_display_OpenGLRenderer.__emptyColorValue;
			}
			if(this.__currentShader.__colorOffset != null) {
				this.__currentShader.__colorOffset.value = openfl_display_OpenGLRenderer.__emptyColorValue;
			}
		}
	}
	,applyHasColorTransform: function(enabled) {
		openfl_display_OpenGLRenderer.__hasColorTransformValue[0] = enabled;
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addBoolOverride("openfl_HasColorTransform",openfl_display_OpenGLRenderer.__hasColorTransformValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__hasColorTransform != null) {
				this.__currentShader.__hasColorTransform.value = openfl_display_OpenGLRenderer.__hasColorTransformValue;
			}
		}
	}
	,applyMatrix: function(matrix) {
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addFloatOverride("openfl_Matrix",matrix);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__matrix != null) {
				this.__currentShader.__matrix.value = matrix;
			}
		}
	}
	,getMatrix: function(transform) {
		if(this.gl != null) {
			var values = this.__getMatrix(transform,1);
			lime_math_Matrix4.set(this.__matrix,0,values[0]);
			lime_math_Matrix4.set(this.__matrix,1,values[1]);
			lime_math_Matrix4.set(this.__matrix,2,values[2]);
			lime_math_Matrix4.set(this.__matrix,3,values[3]);
			lime_math_Matrix4.set(this.__matrix,4,values[4]);
			lime_math_Matrix4.set(this.__matrix,5,values[5]);
			lime_math_Matrix4.set(this.__matrix,6,values[6]);
			lime_math_Matrix4.set(this.__matrix,7,values[7]);
			lime_math_Matrix4.set(this.__matrix,8,values[8]);
			lime_math_Matrix4.set(this.__matrix,9,values[9]);
			lime_math_Matrix4.set(this.__matrix,10,values[10]);
			lime_math_Matrix4.set(this.__matrix,11,values[11]);
			lime_math_Matrix4.set(this.__matrix,12,values[12]);
			lime_math_Matrix4.set(this.__matrix,13,values[13]);
			lime_math_Matrix4.set(this.__matrix,14,values[14]);
			lime_math_Matrix4.set(this.__matrix,15,values[15]);
			return this.__matrix;
		} else {
			lime_math_Matrix4.identity(this.__matrix);
			lime_math_Matrix4.set(this.__matrix,0,transform.a);
			lime_math_Matrix4.set(this.__matrix,1,transform.b);
			lime_math_Matrix4.set(this.__matrix,4,transform.c);
			lime_math_Matrix4.set(this.__matrix,5,transform.d);
			lime_math_Matrix4.set(this.__matrix,12,transform.tx);
			lime_math_Matrix4.set(this.__matrix,13,transform.ty);
			return this.__matrix;
		}
	}
	,setShader: function(shader) {
		this.__currentShaderBuffer = null;
		if(this.__currentShader == shader) {
			return;
		}
		var tmp = this.__currentShader != null;
		if(shader == null) {
			this.__currentShader = null;
			this.__context3D.setProgram(null);
			return;
		} else {
			this.__currentShader = shader;
			this.__initShader(shader);
			this.__context3D.setProgram(shader.program);
			this.__context3D.__flushGLProgram();
			this.__currentShader.__enable();
			this.__context3D.__state.shader = shader;
		}
	}
	,setViewport: function() {
		this.__gl.viewport(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
	}
	,updateShader: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__position != null) {
				this.__currentShader.__position.__useArray = true;
			}
			if(this.__currentShader.__textureCoord != null) {
				this.__currentShader.__textureCoord.__useArray = true;
			}
			this.__context3D.setProgram(this.__currentShader.program);
			this.__context3D.__flushGLProgram();
			this.__context3D.__flushGLTextures();
			this.__currentShader.__update();
		}
	}
	,useAlphaArray: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__alpha != null) {
				this.__currentShader.__alpha.__useArray = true;
			}
		}
	}
	,useColorTransformArray: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__colorMultiplier != null) {
				this.__currentShader.__colorMultiplier.__useArray = true;
			}
			if(this.__currentShader.__colorOffset != null) {
				this.__currentShader.__colorOffset.__useArray = true;
			}
		}
	}
	,__cleanup: function() {
		if(this.__stencilReference > 0) {
			this.__stencilReference = 0;
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__numClipRects = 0;
			this.__scissorRect();
		}
	}
	,__clear: function() {
		if(this.__stage == null || this.__stage.__transparent) {
			this.__context3D.clear(0,0,0,0,0,0,1);
		} else {
			this.__context3D.clear(this.__stage.__colorSplit[0],this.__stage.__colorSplit[1],this.__stage.__colorSplit[2],1,0,0,1);
		}
		this.__cleared = true;
	}
	,__clearShader: function() {
		if(this.__currentShader != null) {
			if(this.__currentShaderBuffer == null) {
				if(this.__currentShader.__bitmap != null) {
					this.__currentShader.__bitmap.input = null;
				}
			} else {
				this.__currentShaderBuffer.clearOverride();
			}
			if(this.__currentShader.__texture != null) {
				this.__currentShader.__texture.input = null;
			}
			if(this.__currentShader.__textureSize != null) {
				this.__currentShader.__textureSize.value = null;
			}
			if(this.__currentShader.__hasColorTransform != null) {
				this.__currentShader.__hasColorTransform.value = null;
			}
			if(this.__currentShader.__position != null) {
				this.__currentShader.__position.value = null;
			}
			if(this.__currentShader.__matrix != null) {
				this.__currentShader.__matrix.value = null;
			}
			this.__currentShader.__clearUseArray();
		}
	}
	,__copyShader: function(other) {
		this.__currentShader = other.__currentShader;
		this.__currentShaderBuffer = other.__currentShaderBuffer;
		this.__currentDisplayShader = other.__currentDisplayShader;
		this.__currentGraphicsShader = other.__currentGraphicsShader;
	}
	,__getMatrix: function(transform,pixelSnapping) {
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.__worldTransform);
		if(pixelSnapping == 0 || pixelSnapping == 1 && _matrix.b == 0 && _matrix.c == 0 && (_matrix.a < 1.001 && _matrix.a > 0.999) && (_matrix.d < 1.001 && _matrix.d > 0.999)) {
			_matrix.tx = Math.round(_matrix.tx);
			_matrix.ty = Math.round(_matrix.ty);
		}
		lime_math_Matrix4.identity(this.__matrix);
		lime_math_Matrix4.set(this.__matrix,0,_matrix.a);
		lime_math_Matrix4.set(this.__matrix,1,_matrix.b);
		lime_math_Matrix4.set(this.__matrix,4,_matrix.c);
		lime_math_Matrix4.set(this.__matrix,5,_matrix.d);
		lime_math_Matrix4.set(this.__matrix,12,_matrix.tx);
		lime_math_Matrix4.set(this.__matrix,13,_matrix.ty);
		lime_math_Matrix4.append(this.__matrix,this.__flipped ? this.__projectionFlipped : this.__projection);
		this.__values[0] = lime_math_Matrix4.get(this.__matrix,0);
		this.__values[1] = lime_math_Matrix4.get(this.__matrix,1);
		this.__values[2] = lime_math_Matrix4.get(this.__matrix,2);
		this.__values[3] = lime_math_Matrix4.get(this.__matrix,3);
		this.__values[4] = lime_math_Matrix4.get(this.__matrix,4);
		this.__values[5] = lime_math_Matrix4.get(this.__matrix,5);
		this.__values[6] = lime_math_Matrix4.get(this.__matrix,6);
		this.__values[7] = lime_math_Matrix4.get(this.__matrix,7);
		this.__values[8] = lime_math_Matrix4.get(this.__matrix,8);
		this.__values[9] = lime_math_Matrix4.get(this.__matrix,9);
		this.__values[10] = lime_math_Matrix4.get(this.__matrix,10);
		this.__values[11] = lime_math_Matrix4.get(this.__matrix,11);
		this.__values[12] = lime_math_Matrix4.get(this.__matrix,12);
		this.__values[13] = lime_math_Matrix4.get(this.__matrix,13);
		this.__values[14] = lime_math_Matrix4.get(this.__matrix,14);
		this.__values[15] = lime_math_Matrix4.get(this.__matrix,15);
		openfl_geom_Matrix.__pool.release(_matrix);
		return this.__values;
	}
	,__initShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultShader;
	}
	,__initDisplayShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultDisplayShader;
	}
	,__initGraphicsShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultGraphicsShader;
	}
	,__initShaderBuffer: function(shaderBuffer) {
		if(shaderBuffer != null) {
			return this.__initGraphicsShader(shaderBuffer.shader);
		}
		return this.__defaultGraphicsShader;
	}
	,__popMask: function() {
		if(this.__stencilReference == 0) {
			return;
		}
		var mask = this.__maskObjects.pop();
		if(this.__stencilReference > 1) {
			this.__context3D.setStencilActions(2,1,0,0,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,255);
			this.__context3D.setColorMask(false,false,false,false);
			this.__renderDrawableMask(mask);
			this.__stencilReference--;
			this.__context3D.setStencilActions(2,1,5,5,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
			this.__context3D.setColorMask(true,true,true,true);
		} else {
			this.__stencilReference = 0;
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			if(object.__renderTransform.b != 0 || object.__renderTransform.c != 0) {
				this.__scrollRectMasks.release(this.__maskObjects[this.__maskObjects.length - 1]);
				this.__popMask();
			} else {
				this.__popMaskRect();
			}
		}
	}
	,__popMaskRect: function() {
		if(this.__numClipRects > 0) {
			this.__numClipRects--;
			if(this.__numClipRects > 0) {
				this.__scissorRect(this.__clipRects[this.__numClipRects - 1]);
			} else {
				this.__scissorRect();
			}
		}
	}
	,__pushMask: function(mask) {
		if(this.__stencilReference == 0) {
			this.__context3D.clear(0,0,0,0,0,0,4);
			this.__updatedStencil = true;
		}
		this.__context3D.setStencilActions(2,1,2,5,5);
		this.__context3D.setStencilReferenceValue(this.__stencilReference,255,255);
		this.__context3D.setColorMask(false,false,false,false);
		this.__renderDrawableMask(mask);
		this.__maskObjects.push(mask);
		this.__stencilReference++;
		this.__context3D.setStencilActions(2,1,5,5,5);
		this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
		this.__context3D.setColorMask(true,true,true,true);
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			if(object.__renderTransform.b != 0 || object.__renderTransform.c != 0) {
				var shape = this.__scrollRectMasks.get();
				shape.get_graphics().clear();
				shape.get_graphics().beginFill(65280);
				shape.get_graphics().drawRect(object.__scrollRect.x,object.__scrollRect.y,object.__scrollRect.width,object.__scrollRect.height);
				shape.__renderTransform.copyFrom(object.__renderTransform);
				this.__pushMask(shape);
			} else {
				this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
			}
		}
		if(object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		if(this.__numClipRects == this.__clipRects.length) {
			this.__clipRects[this.__numClipRects] = new openfl_geom_Rectangle();
		}
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.__worldTransform);
		var clipRect = this.__clipRects[this.__numClipRects];
		rect.__transform(clipRect,_matrix);
		if(this.__numClipRects > 0) {
			var parentClipRect = this.__clipRects[this.__numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		openfl_geom_Matrix.__pool.release(_matrix);
		this.__scissorRect(clipRect);
		this.__numClipRects++;
	}
	,__render: function(object) {
		this.__context3D.setColorMask(true,true,true,true);
		this.__context3D.setCulling(3);
		this.__context3D.setDepthTest(false,0);
		this.__context3D.setStencilActions();
		this.__context3D.setStencilReferenceValue(0,0,0);
		this.__context3D.setScissorRectangle(null);
		this.__blendMode = null;
		this.__setBlendMode(10);
		if(this.__defaultRenderTarget == null) {
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
			this.__upscaled = this.__worldTransform.a != 1 || this.__worldTransform.d != 1;
			this.__renderDrawable(object);
			if(this.__offsetX > 0 || this.__offsetY > 0) {
				if(this.__offsetX > 0) {
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,0,this.__offsetX,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX + this.__displayWidth,0,this.__width,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
				}
				if(this.__offsetY > 0) {
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,0,this.__width,this.__offsetY);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,this.__offsetY + this.__displayHeight,this.__width,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
				}
				this.__context3D.setScissorRectangle(null);
			}
		} else {
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
			var cacheMask = object.__mask;
			var cacheScrollRect = object.__scrollRect;
			object.__mask = null;
			object.__scrollRect = null;
			this.__renderDrawable(object);
			object.__mask = cacheMask;
			object.__scrollRect = cacheScrollRect;
		}
		this.__context3D.present();
	}
	,__renderDrawable: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			openfl_display__$internal_Context3DBitmapData.renderDrawable(object,this);
			break;
		case 2:
			openfl_display__$internal_Context3DBitmap.renderDrawable(object,this);
			break;
		case 3:
			openfl_display__$internal_Context3DDisplayObject.renderDrawable(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_Context3DDisplayObjectContainer.renderDrawable(object,this);
			break;
		case 6:
			openfl_display__$internal_Context3DSimpleButton.renderDrawable(object,this);
			break;
		case 7:
			openfl_display__$internal_Context3DTextField.renderDrawable(object,this);
			break;
		case 8:
			openfl_display__$internal_Context3DVideo.renderDrawable(object,this);
			break;
		case 9:
			openfl_display__$internal_Context3DTilemap.renderDrawable(object,this);
			break;
		default:
		}
	}
	,__renderDrawableMask: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			openfl_display__$internal_Context3DBitmapData.renderDrawableMask(object,this);
			break;
		case 2:
			openfl_display__$internal_Context3DBitmap.renderDrawableMask(object,this);
			break;
		case 3:
			openfl_display__$internal_Context3DDisplayObject.renderDrawableMask(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_Context3DDisplayObjectContainer.renderDrawableMask(object,this);
			break;
		case 6:
			openfl_display__$internal_Context3DSimpleButton.renderDrawableMask(object,this);
			break;
		case 7:
			openfl_display__$internal_Context3DTextField.renderDrawableMask(object,this);
			break;
		case 8:
			openfl_display__$internal_Context3DVideo.renderDrawableMask(object,this);
			break;
		case 9:
			openfl_display__$internal_Context3DTilemap.renderDrawableMask(object,this);
			break;
		default:
		}
	}
	,__renderFilterPass: function(source,shader,smooth,clear) {
		if(clear == null) {
			clear = true;
		}
		if(source == null || shader == null) {
			return;
		}
		if(this.__defaultRenderTarget == null) {
			return;
		}
		var cacheRTT = this.__context3D.__state.renderToTexture;
		var cacheRTTDepthStencil = this.__context3D.__state.renderToTextureDepthStencil;
		var cacheRTTAntiAlias = this.__context3D.__state.renderToTextureAntiAlias;
		var cacheRTTSurfaceSelector = this.__context3D.__state.renderToTextureSurfaceSelector;
		this.__context3D.setRenderToTexture(this.__defaultRenderTarget.getTexture(this.__context3D),false);
		if(clear) {
			this.__context3D.clear(0,0,0,0,0,0,1);
		}
		var shader1 = this.__initShader(shader);
		this.setShader(shader1);
		this.applyAlpha(1);
		this.applyBitmapData(source,smooth);
		this.applyColorTransform(null);
		this.applyMatrix(this.__getMatrix(source.__renderTransform,1));
		this.updateShader();
		var vertexBuffer = source.getVertexBuffer(this.__context3D);
		if(shader1.__position != null) {
			this.__context3D.setVertexBufferAt(shader1.__position.index,vertexBuffer,0,3);
		}
		if(shader1.__textureCoord != null) {
			this.__context3D.setVertexBufferAt(shader1.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = source.getIndexBuffer(this.__context3D);
		this.__context3D.drawTriangles(indexBuffer);
		if(cacheRTT != null) {
			this.__context3D.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
		} else {
			this.__context3D.setRenderToBackBuffer();
		}
		this.__clearShader();
	}
	,__resize: function(width,height) {
		this.__width = width;
		this.__height = height;
		var w = this.__defaultRenderTarget == null ? this.__stage.stageWidth : this.__defaultRenderTarget.width;
		var h = this.__defaultRenderTarget == null ? this.__stage.stageHeight : this.__defaultRenderTarget.height;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(0 * _this.a + 0 * _this.c + _this.tx);
		} else {
			tmp = 0;
		}
		this.__offsetX = tmp;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(0 * _this.b + 0 * _this.d + _this.ty);
		} else {
			tmp = 0;
		}
		this.__offsetY = tmp;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(w * _this.a + 0 * _this.c + _this.tx - this.__offsetX);
		} else {
			tmp = w;
		}
		this.__displayWidth = tmp;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(0 * _this.b + h * _this.d + _this.ty - this.__offsetY);
		} else {
			tmp = h;
		}
		this.__displayHeight = tmp;
		lime_math_Matrix4.createOrtho(this.__projection,0,this.__displayWidth + this.__offsetX * 2,0,this.__displayHeight + this.__offsetY * 2,-1000,1000);
		lime_math_Matrix4.createOrtho(this.__projectionFlipped,0,this.__displayWidth + this.__offsetX * 2,this.__displayHeight + this.__offsetY * 2,0,-1000,1000);
	}
	,__resumeClipAndMask: function(childRenderer) {
		if(this.__stencilReference > 0) {
			this.__context3D.setStencilActions(2,1,5,5,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
		} else {
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__scissorRect(this.__clipRects[this.__numClipRects - 1]);
		} else {
			this.__scissorRect();
		}
	}
	,__scissorRect: function(clipRect) {
		if(clipRect != null) {
			var x = Math.floor(clipRect.x);
			var y = Math.floor(clipRect.y);
			var width = clipRect.width > 0 ? Math.ceil(clipRect.get_right()) - x : 0;
			var height = clipRect.height > 0 ? Math.ceil(clipRect.get_bottom()) - y : 0;
			if(this.__context3D.__backBufferWantsBestResolution) {
				x = Math.floor(clipRect.x / this.__pixelRatio);
				y = Math.floor(clipRect.y / this.__pixelRatio);
				width = clipRect.width > 0 ? Math.ceil(clipRect.get_right() / this.__pixelRatio) - x : 0;
				height = clipRect.height > 0 ? Math.ceil(clipRect.get_bottom() / this.__pixelRatio) - y : 0;
			}
			if(width < 0) {
				width = 0;
			}
			if(height < 0) {
				height = 0;
			}
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(x,y,width,height);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
		} else {
			this.__context3D.setScissorRectangle(null);
		}
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		switch(value) {
		case 0:
			this.__context3D.setBlendFactors(2,2);
			break;
		case 9:
			this.__context3D.setBlendFactors(1,5);
			break;
		case 12:
			this.__context3D.setBlendFactors(2,6);
			break;
		case 14:
			this.__context3D.setBlendFactors(2,2);
			this.__context3D.__setGLBlendEquation(this.__gl.FUNC_REVERSE_SUBTRACT);
			break;
		default:
			this.__context3D.setBlendFactors(2,5);
		}
	}
	,__setRenderTarget: function(renderTarget) {
		this.__defaultRenderTarget = renderTarget;
		this.__flipped = renderTarget == null;
		if(renderTarget != null) {
			this.__resize(renderTarget.width,renderTarget.height);
		}
	}
	,__setShaderBuffer: function(shaderBuffer) {
		this.setShader(shaderBuffer.shader);
		this.__currentShaderBuffer = shaderBuffer;
	}
	,__suspendClipAndMask: function() {
		if(this.__stencilReference > 0) {
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__scissorRect();
		}
	}
	,__updateShaderBuffer: function(bufferOffset) {
		if(this.__currentShader != null && this.__currentShaderBuffer != null) {
			this.__currentShader.__updateFromBuffer(this.__currentShaderBuffer,bufferOffset);
		}
	}
	,__class__: openfl_display_OpenGLRenderer
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) {
		fastCompression = false;
	}
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = "openfl.display.PNGEncoderOptions";
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display_PixelSnapping = {};
openfl_display_PixelSnapping.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "auto":
		return 1;
	case "never":
		return 2;
	default:
		return null;
	}
};
openfl_display_PixelSnapping.toString = function(this1) {
	switch(this1) {
	case 0:
		return "always";
	case 1:
		return "auto";
	case 2:
		return "never";
	default:
		return null;
	}
};
var openfl_display_Preloader = function(display) {
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.display = display;
	if(display != null) {
		display.addEventListener("unload",$bind(this,this.display_onUnload));
		openfl_Lib.get_current().addChild(display);
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = "openfl.display.Preloader";
openfl_display_Preloader.prototype = {
	onComplete: null
	,complete: null
	,display: null
	,ready: null
	,start: function() {
		this.ready = true;
		openfl_Lib.get_current().get_loaderInfo().__complete();
		if(this.display != null) {
			var complete = new openfl_events_Event("complete",true,true);
			this.display.dispatchEvent(complete);
			if(!complete.isDefaultPrevented()) {
				this.display.dispatchEvent(new openfl_events_Event("unload"));
			}
		} else if(!this.complete) {
			this.complete = true;
			this.onComplete.dispatch();
		}
	}
	,update: function(loaded,total) {
		openfl_Lib.get_current().get_loaderInfo().__update(loaded,total);
		if(this.display != null) {
			this.display.dispatchEvent(new openfl_events_ProgressEvent("progress",true,true,loaded,total));
		}
	}
	,display_onUnload: function(event) {
		if(this.display != null) {
			this.display.removeEventListener("unload",$bind(this,this.display_onUnload));
			if(this.display.parent == openfl_Lib.get_current()) {
				openfl_Lib.get_current().removeChild(this.display);
			}
			openfl_Lib.get_current().stage.set_focus(null);
			this.display = null;
		}
		if(this.ready) {
			if(!this.complete) {
				this.complete = true;
				this.onComplete.dispatch();
			}
		}
	}
	,__class__: openfl_display_Preloader
};
var openfl_display_DefaultPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) {
		color = 16777215;
	}
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Shape();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.addChild(this.outline);
	this.progress = new openfl_display_Shape();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
	this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
};
$hxClasses["openfl.display.DefaultPreloader"] = openfl_display_DefaultPreloader;
openfl_display_DefaultPreloader.__name__ = "openfl.display.DefaultPreloader";
openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
openfl_display_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	endAnimation: null
	,outline: null
	,progress: null
	,startAnimation: null
	,getBackgroundColor: function() {
		var attributes = openfl_Lib.get_current().stage.window.context.attributes;
		if(Object.prototype.hasOwnProperty.call(attributes,"background") && attributes.background != null) {
			return attributes.background;
		} else {
			return 0;
		}
	}
	,getHeight: function() {
		var height = openfl_Lib.get_current().stage.window.__height;
		if(height > 0) {
			return height;
		} else {
			return openfl_Lib.get_current().stage.stageHeight;
		}
	}
	,getWidth: function() {
		var width = openfl_Lib.get_current().stage.window.__width;
		if(width > 0) {
			return width;
		} else {
			return openfl_Lib.get_current().stage.stageWidth;
		}
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("unload"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) {
				percentLoaded = 1;
			}
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.this_onProgress));
		this.addEventListener("complete",$bind(this,this.this_onComplete));
	}
	,this_onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.this_onProgress));
		this.removeEventListener("complete",$bind(this,this.this_onComplete));
		this.onLoaded();
	}
	,this_onEnterFrame: function(event) {
		var elapsed = openfl_Lib.getTimer() - this.startAnimation;
		var total = this.endAnimation - this.startAnimation;
		var percent = elapsed / total;
		if(percent < 0) {
			percent = 0;
		}
		if(percent > 1) {
			percent = 1;
		}
		this.outline.set_alpha(this.progress.set_alpha(percent));
	}
	,this_onProgress: function(event) {
		this.onUpdate(event.bytesLoaded | 0,event.bytesTotal | 0);
	}
	,__class__: openfl_display_DefaultPreloader
});
var openfl_display_Scene = function(name,labels,numFrames) {
	this.name = name;
	this.labels = labels;
	this.numFrames = numFrames;
};
$hxClasses["openfl.display.Scene"] = openfl_display_Scene;
openfl_display_Scene.__name__ = "openfl.display.Scene";
openfl_display_Scene.prototype = {
	labels: null
	,name: null
	,numFrames: null
	,__class__: openfl_display_Scene
};
var openfl_display_ShaderData = {};
openfl_display_ShaderData._new = function(byteArray) {
	return { };
};
var openfl_display_ShaderInput = function() {
	this.channels = 0;
	this.filter = 5;
	this.height = 0;
	this.index = 0;
	this.mipFilter = 2;
	this.width = 0;
	this.wrap = 0;
};
$hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
openfl_display_ShaderInput.__name__ = "openfl.display.ShaderInput";
openfl_display_ShaderInput.prototype = {
	channels: null
	,filter: null
	,height: null
	,index: null
	,input: null
	,mipFilter: null
	,name: null
	,width: null
	,wrap: null
	,__isUniform: null
	,__disableGL: function(context,id) {
		if(id < 0) {
			return;
		}
		var gl = context.gl;
		context.setTextureAt(id,null);
	}
	,__updateGL: function(context,id,overrideInput,overrideFilter,overrideMipFilter,overrideWrap) {
		var gl = context.gl;
		var input = overrideInput != null ? overrideInput : this.input;
		var filter = overrideFilter != null ? overrideFilter : this.filter;
		var mipFilter = overrideMipFilter != null ? overrideMipFilter : this.mipFilter;
		var wrap = overrideWrap != null ? overrideWrap : this.wrap;
		if(input != null) {
			var bitmapData = input;
			context.setTextureAt(id,bitmapData.getTexture(context));
			context.setSamplerStateAt(id,wrap,filter,mipFilter);
		} else {
			context.setTextureAt(id,null);
		}
	}
	,__class__: openfl_display_ShaderInput
};
var openfl_display_ShaderParameter = function() {
	this.index = 0;
};
$hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
openfl_display_ShaderParameter.__name__ = "openfl.display.ShaderParameter";
openfl_display_ShaderParameter.prototype = {
	index: null
	,name: null
	,type: null
	,value: null
	,__arrayLength: null
	,__internal: null
	,__isBool: null
	,__isFloat: null
	,__isInt: null
	,__isUniform: null
	,__length: null
	,__uniformMatrix: null
	,__useArray: null
	,__disableGL: function(context) {
		if(this.index < 0) {
			return;
		}
		var gl = context.gl;
		if(!this.__isUniform) {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.disableVertexAttribArray(this.index + i);
			}
		}
	}
	,__updateGL: function(context,overrideValue) {
		if(this.index < 0) {
			return;
		}
		var gl = context.gl;
		var value = overrideValue != null ? overrideValue : this.value;
		var boolValue = this.__isBool ? value : null;
		var floatValue = this.__isFloat ? value : null;
		var intValue = this.__isInt ? value : null;
		if(this.__isUniform) {
			if(value != null && value.length >= this.__length) {
				switch(this.type) {
				case 0:
					gl.uniform1i(this.index,boolValue[0] ? 1 : 0);
					break;
				case 1:
					gl.uniform2i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0);
					break;
				case 2:
					gl.uniform3i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0);
					break;
				case 3:
					gl.uniform4i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0,boolValue[3] ? 1 : 0);
					break;
				case 4:
					gl.uniform1f(this.index,floatValue[0]);
					break;
				case 5:
					gl.uniform2f(this.index,floatValue[0],floatValue[1]);
					break;
				case 6:
					gl.uniform3f(this.index,floatValue[0],floatValue[1],floatValue[2]);
					break;
				case 7:
					gl.uniform4f(this.index,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					break;
				case 8:
					gl.uniform1i(this.index,intValue[0]);
					break;
				case 9:
					gl.uniform2i(this.index,intValue[0],intValue[1]);
					break;
				case 10:
					gl.uniform3i(this.index,intValue[0],intValue[1],intValue[2]);
					break;
				case 11:
					gl.uniform4i(this.index,intValue[0],intValue[1],intValue[2],intValue[3]);
					break;
				case 12:
					this.__uniformMatrix[0] = floatValue[0];
					this.__uniformMatrix[1] = floatValue[1];
					this.__uniformMatrix[2] = floatValue[2];
					this.__uniformMatrix[3] = floatValue[3];
					lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					this.__uniformMatrix[0] = floatValue[0];
					this.__uniformMatrix[1] = floatValue[1];
					this.__uniformMatrix[2] = floatValue[2];
					this.__uniformMatrix[3] = floatValue[3];
					this.__uniformMatrix[4] = floatValue[4];
					this.__uniformMatrix[5] = floatValue[5];
					this.__uniformMatrix[6] = floatValue[6];
					this.__uniformMatrix[7] = floatValue[7];
					this.__uniformMatrix[8] = floatValue[8];
					lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					this.__uniformMatrix[0] = floatValue[0];
					this.__uniformMatrix[1] = floatValue[1];
					this.__uniformMatrix[2] = floatValue[2];
					this.__uniformMatrix[3] = floatValue[3];
					this.__uniformMatrix[4] = floatValue[4];
					this.__uniformMatrix[5] = floatValue[5];
					this.__uniformMatrix[6] = floatValue[6];
					this.__uniformMatrix[7] = floatValue[7];
					this.__uniformMatrix[8] = floatValue[8];
					this.__uniformMatrix[9] = floatValue[9];
					this.__uniformMatrix[10] = floatValue[10];
					this.__uniformMatrix[11] = floatValue[11];
					this.__uniformMatrix[12] = floatValue[12];
					this.__uniformMatrix[13] = floatValue[13];
					this.__uniformMatrix[14] = floatValue[14];
					this.__uniformMatrix[15] = floatValue[15];
					lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			} else {
				switch(this.type) {
				case 4:
					gl.uniform1f(this.index,0);
					break;
				case 5:
					gl.uniform2f(this.index,0,0);
					break;
				case 6:
					gl.uniform3f(this.index,0,0,0);
					break;
				case 7:
					gl.uniform4f(this.index,0,0,0,0);
					break;
				case 0:case 8:
					gl.uniform1i(this.index,0);
					break;
				case 1:case 9:
					gl.uniform2i(this.index,0,0);
					break;
				case 2:case 10:
					gl.uniform3i(this.index,0,0,0);
					break;
				case 3:case 11:
					gl.uniform4i(this.index,0,0,0,0);
					break;
				case 12:
					this.__uniformMatrix[0] = 0;
					this.__uniformMatrix[1] = 0;
					this.__uniformMatrix[2] = 0;
					this.__uniformMatrix[3] = 0;
					lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					this.__uniformMatrix[0] = 0;
					this.__uniformMatrix[1] = 0;
					this.__uniformMatrix[2] = 0;
					this.__uniformMatrix[3] = 0;
					this.__uniformMatrix[4] = 0;
					this.__uniformMatrix[5] = 0;
					this.__uniformMatrix[6] = 0;
					this.__uniformMatrix[7] = 0;
					this.__uniformMatrix[8] = 0;
					lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					this.__uniformMatrix[0] = 0;
					this.__uniformMatrix[1] = 0;
					this.__uniformMatrix[2] = 0;
					this.__uniformMatrix[3] = 0;
					this.__uniformMatrix[4] = 0;
					this.__uniformMatrix[5] = 0;
					this.__uniformMatrix[6] = 0;
					this.__uniformMatrix[7] = 0;
					this.__uniformMatrix[8] = 0;
					this.__uniformMatrix[9] = 0;
					this.__uniformMatrix[10] = 0;
					this.__uniformMatrix[11] = 0;
					this.__uniformMatrix[12] = 0;
					this.__uniformMatrix[13] = 0;
					this.__uniformMatrix[14] = 0;
					this.__uniformMatrix[15] = 0;
					lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			}
		} else if(!this.__useArray && (value == null || value.length == this.__length)) {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.disableVertexAttribArray(this.index + i);
			}
			if(value != null) {
				switch(this.type) {
				case 0:
					gl.vertexAttrib1f(this.index,boolValue[0] ? 1 : 0);
					break;
				case 1:
					gl.vertexAttrib2f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0);
					break;
				case 2:
					gl.vertexAttrib3f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0);
					break;
				case 3:
					gl.vertexAttrib4f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0,boolValue[3] ? 1 : 0);
					break;
				case 4:
					gl.vertexAttrib1f(this.index,floatValue[0]);
					break;
				case 5:
					gl.vertexAttrib2f(this.index,floatValue[0],floatValue[1]);
					break;
				case 6:
					gl.vertexAttrib3f(this.index,floatValue[0],floatValue[1],floatValue[2]);
					break;
				case 7:
					gl.vertexAttrib4f(this.index,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					break;
				case 8:
					gl.vertexAttrib1f(this.index,intValue[0]);
					break;
				case 9:
					gl.vertexAttrib2f(this.index,intValue[0],intValue[1]);
					break;
				case 10:
					gl.vertexAttrib3f(this.index,intValue[0],intValue[1],intValue[2]);
					break;
				case 11:
					gl.vertexAttrib4f(this.index,intValue[0],intValue[1],intValue[2],intValue[3]);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,floatValue[0],floatValue[1]);
					gl.vertexAttrib2f(this.index + 1,floatValue[2],floatValue[3]);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,floatValue[0],floatValue[1],floatValue[2]);
					gl.vertexAttrib3f(this.index + 1,floatValue[3],floatValue[4],floatValue[5]);
					gl.vertexAttrib3f(this.index + 2,floatValue[6],floatValue[7],floatValue[8]);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					gl.vertexAttrib4f(this.index + 1,floatValue[4],floatValue[5],floatValue[6],floatValue[7]);
					gl.vertexAttrib4f(this.index + 2,floatValue[8],floatValue[9],floatValue[10],floatValue[11]);
					gl.vertexAttrib4f(this.index + 3,floatValue[12],floatValue[13],floatValue[14],floatValue[15]);
					break;
				default:
				}
			} else {
				switch(this.type) {
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,0);
					break;
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,0,0);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,0,0,0);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,0,0,0,0);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,0,0);
					gl.vertexAttrib2f(this.index + 1,0,0);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,0,0,0);
					gl.vertexAttrib3f(this.index + 1,0,0,0);
					gl.vertexAttrib3f(this.index + 2,0,0,0);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,0,0,0,0);
					gl.vertexAttrib4f(this.index + 1,0,0,0,0);
					gl.vertexAttrib4f(this.index + 2,0,0,0,0);
					gl.vertexAttrib4f(this.index + 3,0,0,0,0);
					break;
				default:
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.enableVertexAttribArray(this.index + i);
			}
		}
	}
	,__updateGLFromBuffer: function(context,buffer,position,length,bufferOffset) {
		if(this.index < 0) {
			return;
		}
		var gl = context.gl;
		if(this.__isUniform) {
			if(length >= this.__length) {
				switch(this.type) {
				case 4:
					gl.uniform1f(this.index,buffer[position]);
					break;
				case 5:
					gl.uniform2f(this.index,buffer[position],buffer[position + 1]);
					break;
				case 6:
					gl.uniform3f(this.index,buffer[position],buffer[position + 1],buffer[position + 2]);
					break;
				case 7:
					gl.uniform4f(this.index,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					break;
				case 0:case 8:
					gl.uniform1i(this.index,buffer[position] | 0);
					break;
				case 1:case 9:
					gl.uniform2i(this.index,buffer[position] | 0,buffer[position + 1] | 0);
					break;
				case 2:case 10:
					gl.uniform3i(this.index,buffer[position] | 0,buffer[position + 1] | 0,buffer[position + 2] | 0);
					break;
				case 3:case 11:
					gl.uniform4i(this.index,buffer[position] | 0,buffer[position + 1] | 0,buffer[position + 2] | 0,buffer[position + 3] | 0);
					break;
				case 12:
					this.__uniformMatrix[0] = buffer[position];
					this.__uniformMatrix[1] = buffer[position + 1];
					this.__uniformMatrix[2] = buffer[position + 2];
					this.__uniformMatrix[3] = buffer[position + 3];
					lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					this.__uniformMatrix[0] = buffer[position];
					this.__uniformMatrix[1] = buffer[position + 1];
					this.__uniformMatrix[2] = buffer[position + 2];
					this.__uniformMatrix[3] = buffer[position + 3];
					this.__uniformMatrix[4] = buffer[position + 4];
					this.__uniformMatrix[5] = buffer[position + 5];
					this.__uniformMatrix[6] = buffer[position + 6];
					this.__uniformMatrix[7] = buffer[position + 7];
					this.__uniformMatrix[8] = buffer[position + 8];
					lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					this.__uniformMatrix[0] = buffer[position];
					this.__uniformMatrix[1] = buffer[position + 1];
					this.__uniformMatrix[2] = buffer[position + 2];
					this.__uniformMatrix[3] = buffer[position + 3];
					this.__uniformMatrix[4] = buffer[position + 4];
					this.__uniformMatrix[5] = buffer[position + 5];
					this.__uniformMatrix[6] = buffer[position + 6];
					this.__uniformMatrix[7] = buffer[position + 7];
					this.__uniformMatrix[8] = buffer[position + 8];
					this.__uniformMatrix[9] = buffer[position + 9];
					this.__uniformMatrix[10] = buffer[position + 10];
					this.__uniformMatrix[11] = buffer[position + 11];
					this.__uniformMatrix[12] = buffer[position + 12];
					this.__uniformMatrix[13] = buffer[position + 13];
					this.__uniformMatrix[14] = buffer[position + 14];
					this.__uniformMatrix[15] = buffer[position + 15];
					lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			}
		} else if(!this.__internal && (length == 0 || length == this.__length)) {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.disableVertexAttribArray(this.index + i);
			}
			if(length > 0) {
				switch(this.type) {
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,buffer[position]);
					break;
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,buffer[position],buffer[position + 1]);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,buffer[position],buffer[position + 1],buffer[position + 2]);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,buffer[position],buffer[position + 1]);
					gl.vertexAttrib2f(this.index + 1,buffer[position + 2],buffer[position + 2 + 1]);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,buffer[position],buffer[position + 1],buffer[position + 2]);
					gl.vertexAttrib3f(this.index + 1,buffer[position + 3],buffer[position + 3 + 1],buffer[position + 3 + 2]);
					gl.vertexAttrib3f(this.index + 2,buffer[position + 6],buffer[position + 6 + 1],buffer[position + 6 + 2]);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					gl.vertexAttrib4f(this.index + 1,buffer[position + 4],buffer[position + 4 + 1],buffer[position + 4 + 2],buffer[position + 4 + 3]);
					gl.vertexAttrib4f(this.index + 2,buffer[position + 8],buffer[position + 8 + 1],buffer[position + 8 + 2],buffer[position + 8 + 3]);
					gl.vertexAttrib4f(this.index + 3,buffer[position + 12],buffer[position + 12 + 1],buffer[position + 12 + 2],buffer[position + 12 + 3]);
					break;
				default:
				}
			} else {
				switch(this.type) {
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,0);
					break;
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,0,0);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,0,0,0);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,0,0,0,0);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,0,0);
					gl.vertexAttrib2f(this.index + 1,0,0);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,0,0,0);
					gl.vertexAttrib3f(this.index + 1,0,0,0);
					gl.vertexAttrib3f(this.index + 2,0,0,0);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,0,0,0,0);
					gl.vertexAttrib4f(this.index + 1,0,0,0,0);
					gl.vertexAttrib4f(this.index + 2,0,0,0,0);
					gl.vertexAttrib4f(this.index + 3,0,0,0,0);
					break;
				default:
				}
			}
		} else {
			var type = gl.FLOAT;
			if(this.__isBool) {
				type = gl.INT;
			} else if(this.__isInt) {
				type = gl.INT;
			}
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.enableVertexAttribArray(this.index + i);
			}
			if(length > 0) {
				var _g = 0;
				var _g1 = this.__arrayLength;
				while(_g < _g1) {
					var i = _g++;
					gl.vertexAttribPointer(this.index + i,this.__length,type,false,this.__length * 4,(position + bufferOffset * this.__length + i * this.__arrayLength) * 4);
				}
			}
		}
	}
	,set_name: function(value) {
		this.__internal = StringTools.startsWith(value,"openfl_");
		return this.name = value;
	}
	,__class__: openfl_display_ShaderParameter
	,__properties__: {set_name:"set_name"}
};
var openfl_display_ShaderParameterType = {};
openfl_display_ShaderParameterType.fromString = function(value) {
	switch(value) {
	case "bool":
		return 0;
	case "bool2":
		return 1;
	case "bool3":
		return 1;
	case "bool4":
		return 1;
	case "float":
		return 4;
	case "float2":
		return 5;
	case "float3":
		return 6;
	case "float4":
		return 7;
	case "int":
		return 8;
	case "int2":
		return 9;
	case "int3":
		return 10;
	case "int4":
		return 11;
	case "matrix2x2":
		return 12;
	case "matrix2x3":
		return 13;
	case "matrix2x4":
		return 14;
	case "matrix3x2":
		return 15;
	case "matrix3x3":
		return 16;
	case "matrix3x4":
		return 17;
	case "matrix4x2":
		return 18;
	case "matrix4x3":
		return 19;
	case "matrix4x4":
		return 20;
	default:
		return null;
	}
};
openfl_display_ShaderParameterType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bool";
	case 1:
		return "bool2";
	case 2:
		return "bool3";
	case 3:
		return "bool4";
	case 4:
		return "float";
	case 5:
		return "float2";
	case 6:
		return "float3";
	case 7:
		return "float4";
	case 8:
		return "int";
	case 9:
		return "int2";
	case 10:
		return "int3";
	case 11:
		return "int4";
	case 12:
		return "matrix2x2";
	case 13:
		return "matrix2x3";
	case 14:
		return "matrix2x4";
	case 15:
		return "matrix3x2";
	case 16:
		return "matrix3x3";
	case 17:
		return "matrix3x4";
	case 18:
		return "matrix4x2";
	case 19:
		return "matrix4x3";
	case 20:
		return "matrix4x4";
	default:
		return null;
	}
};
var openfl_display_ShaderPrecision = {};
openfl_display_ShaderPrecision.fromString = function(value) {
	switch(value) {
	case "fast":
		return 0;
	case "full":
		return 1;
	default:
		return null;
	}
};
openfl_display_ShaderPrecision.toString = function(this1) {
	switch(this1) {
	case 0:
		return "fast";
	case 1:
		return "full";
	default:
		return null;
	}
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
	this.__drawableType = 3;
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = "openfl.display.Shape";
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.__drawableType = 6;
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.__upState = upState != null ? upState : new openfl_display_DisplayObject();
	this.__overState = overState;
	this.__downState = downState;
	this.set_hitTestState(hitTestState != null ? hitTestState : new openfl_display_DisplayObject());
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.__tabEnabled = true;
	this.set___currentState(this.__upState);
	if(openfl_display_SimpleButton.__constructor != null) {
		var method = openfl_display_SimpleButton.__constructor;
		openfl_display_SimpleButton.__constructor = null;
		method(this);
	}
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = "openfl.display.SimpleButton";
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	enabled: null
	,trackAsMenu: null
	,useHandCursor: null
	,__currentState: null
	,__downState: null
	,__hitTestState: null
	,__ignoreEvent: null
	,__overState: null
	,__previousStates: null
	,__soundTransform: null
	,__upState: null
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var local = this.__currentState.__transform;
		childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
		childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
		childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
		childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
		childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
		childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
		this.__currentState.__getBounds(rect,childWorldTransform);
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var local = this.__currentState.__transform;
		childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
		childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
		childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
		childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
		childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
		childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
		this.__currentState.__getRenderBounds(rect,childWorldTransform);
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent && this.enabled) {
			return "button";
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.get_hitTestState() != null) {
			if(this.get_hitTestState().__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				if(stack != null) {
					if(stack.length == 0) {
						stack[0] = hitObject;
					} else {
						stack[stack.length - 1] = hitObject;
					}
				}
				hitTest = !interactiveOnly || this.mouseEnabled;
			}
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled || this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				hitTest = false;
			} else if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				hitTest = interactiveOnly;
			}
		}
		if(stack != null) {
			while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		}
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		if(this.__currentState.__hitTestMask(x,y)) {
			hitTest = true;
		}
		return hitTest;
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__currentState != null) {
			this.__currentState.__setStageReference(stage);
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setStageReference(stage);
		}
	}
	,__setTransformDirty: function() {
		openfl_display_InteractiveObject.prototype.__setTransformDirty.call(this);
		if(this.__currentState != null) {
			this.__currentState.__setTransformDirty();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setTransformDirty();
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			if(this.__currentState != null) {
				this.__currentState.__update(transformOnly,true);
			}
			if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
				this.get_hitTestState().__update(transformOnly,true);
			}
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		if(this.__currentState != null) {
			this.__currentState.__updateTransforms();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__updateTransforms();
		}
	}
	,get_downState: function() {
		return this.__downState;
	}
	,set_downState: function(downState) {
		if(this.__downState != null && this.__currentState == this.__downState) {
			this.set___currentState(this.__downState);
		}
		return this.__downState = downState;
	}
	,get_hitTestState: function() {
		return this.__hitTestState;
	}
	,set_hitTestState: function(hitTestState) {
		if(this.__hitTestState != null && this.__hitTestState != hitTestState) {
			if(this.__hitTestState != this.get_downState() && this.__hitTestState != this.get_upState() && this.__hitTestState != this.get_overState()) {
				this.__hitTestState.__renderParent = null;
			}
		}
		if(hitTestState != null) {
			hitTestState.__renderParent = this;
			if(!hitTestState.__renderDirty) {
				hitTestState.__renderDirty = true;
				hitTestState.__setParentRenderDirty();
			}
		}
		return this.__hitTestState = hitTestState;
	}
	,get_overState: function() {
		return this.__overState;
	}
	,set_overState: function(overState) {
		if(this.__overState != null && this.__currentState == this.__overState) {
			this.set___currentState(overState);
		}
		return this.__overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) {
			this.__soundTransform = new openfl_media_SoundTransform();
		}
		return new openfl_media_SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl_media_SoundTransform(value.volume,value.pan);
		return value;
	}
	,get_upState: function() {
		return this.__upState;
	}
	,set_upState: function(upState) {
		if(this.__upState != null && this.__currentState == this.__upState) {
			this.set___currentState(upState);
		}
		return this.__upState = upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null && this.__currentState != this.get_hitTestState()) {
			this.__currentState.__renderParent = null;
		}
		if(value != null && value.parent != null) {
			value.parent.removeChild(value);
		}
		if(openfl_display_DisplayObject.__supportDOM && this.__previousStates == null) {
			this.__previousStates = openfl_Vector.toObjectVector(null);
		}
		if(value != this.__currentState) {
			if(openfl_display_DisplayObject.__supportDOM) {
				if(this.__currentState != null) {
					this.__currentState.__setStageReference(null);
					this.__previousStates.push(this.__currentState);
				}
				var index = this.__previousStates.indexOf(value,0);
				if(index > -1) {
					var this1 = this.__previousStates;
					this1.__tempIndex = index;
					var _g_current = 0;
					var _g_args = [];
					while(_g_current < _g_args.length) {
						var item = _g_args[_g_current++];
						this1.insertAt(this1.__tempIndex,item);
						this1.__tempIndex++;
					}
					this1.splice(this1.__tempIndex,1);
				}
			}
			if(value != null) {
				value.__renderParent = this;
				if(!value.__renderDirty) {
					value.__renderDirty = true;
					value.__setParentRenderDirty();
				}
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__currentState = value;
		return value;
	}
	,__this_onMouseDown: function(event) {
		if(this.enabled) {
			this.set___currentState(this.get_downState());
		}
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.get_upState() != this.__currentState) {
			this.set___currentState(this.get_upState());
		}
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) {
			this.__ignoreEvent = true;
		}
		if(this.get_overState() != this.__currentState && this.get_overState() != null && !this.__ignoreEvent && this.enabled) {
			this.set___currentState(this.get_overState());
		}
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.enabled && this.get_overState() != null) {
			this.set___currentState(this.get_overState());
		} else {
			this.set___currentState(this.get_upState());
		}
	}
	,__class__: openfl_display_SimpleButton
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",get_upState:"get_upState",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_overState:"set_overState",get_overState:"get_overState",set_hitTestState:"set_hitTestState",get_hitTestState:"get_hitTestState",set_downState:"set_downState",get_downState:"get_downState"})
});
var openfl_display_SpreadMethod = {};
openfl_display_SpreadMethod.fromInt = function(value) {
	return value;
};
openfl_display_SpreadMethod.fromString = function(value) {
	switch(value) {
	case "pad":
		return 0;
	case "reflect":
		return 1;
	case "repeat":
		return 2;
	default:
		return null;
	}
};
openfl_display_SpreadMethod.toInt = function(this1) {
	return this1;
};
openfl_display_SpreadMethod.toString = function(this1) {
	switch(this1) {
	case 0:
		return "pad";
	case 1:
		return "reflect";
	case 2:
		return "repeat";
	default:
		return null;
	}
};
var openfl_display_Stage = function($window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.__drawableType = 5;
	this.set_name(null);
	this.__color = -1;
	this.__colorSplit = [255,255,255];
	this.__colorString = "#FFFFFF";
	this.__contentsScaleFactor = 1;
	this.__currentTabOrderIndex = 0;
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.__displayRect = new openfl_geom_Rectangle();
	this.__renderDirty = true;
	this.stage3Ds = openfl_Vector.toObjectVector(null);
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = true;
	this.allowsFullScreenInteractive = true;
	this.__quality = 1;
	this.__scaleMode = 2;
	this.showDefaultContextMenu = true;
	this.softKeyboardRect = new openfl_geom_Rectangle();
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__forceRender = false;
	this.__stack = [];
	this.__rollOutStack = [];
	this.__mouseOutStack = [];
	this.__touchData = new haxe_ds_IntMap();
	if(openfl_Lib.get_current().__loaderInfo == null) {
		openfl_Lib.get_current().__loaderInfo = openfl_display_LoaderInfo.create(null);
		openfl_Lib.get_current().__loaderInfo.content = openfl_Lib.get_current();
	}
	this.__uncaughtErrorEvents = openfl_Lib.get_current().__loaderInfo.uncaughtErrorEvents;
	this.application = $window.application;
	this.window = $window;
	this.set_color(color);
	this.__mouseLock = $window.get_mouseLock();
	this.__contentsScaleFactor = $window.__scale;
	this.__wasFullscreen = $window.__fullscreen;
	this.__resize();
	if(openfl_Lib.get_current().stage == null) {
		this.stage.addChild(openfl_Lib.get_current());
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = "openfl.display.Stage";
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,context3D: null
	,showDefaultContextMenu: null
	,softKeyboardRect: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__cacheFocus: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__contentsScaleFactor: null
	,__currentTabOrderIndex: null
	,__deltaTime: null
	,__dirty: null
	,__displayMatrix: null
	,__displayRect: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__forceRender: null
	,__fullscreen: null
	,__fullScreenSourceRect: null
	,__invalidated: null
	,__lastClickTime: null
	,__lastClickTarget: null
	,__logicalWidth: null
	,__logicalHeight: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOutStack: null
	,__mouseOverTarget: null
	,__mouseX: null
	,__mouseY: null
	,__mouseLock: null
	,__pendingMouseEvent: null
	,__pendingMouseX: null
	,__pendingMouseY: null
	,__quality: null
	,__renderer: null
	,__rendering: null
	,__rollOutStack: null
	,__scaleMode: null
	,__stack: null
	,__touchData: null
	,__transparent: null
	,__uncaughtErrorEvents: null
	,__wasDirty: null
	,__wasFullscreen: null
	,__primaryTouch: null
	,invalidate: function() {
		this.__invalidated = true;
		this.__renderDirty = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,__broadcastEvent: function(event) {
		if(Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,event.type)) {
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.h[event.type];
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				if(dispatcher.stage == this || dispatcher.stage == null) {
					if(this.__uncaughtErrorEvents.__enabled) {
						try {
							dispatcher.__dispatch(event);
						} catch( _g1 ) {
							haxe_NativeStackTrace.lastError = _g1;
							var e = haxe_Exception.caught(_g1).unwrap();
							this.__handleError(e);
						}
					} else {
						dispatcher.__dispatch(event);
					}
				}
			}
		}
	}
	,__createRenderer: function() {
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		switch(this.window.context.type) {
		case "cairo":
			break;
		case "canvas":
			this.__renderer = new openfl_display_CanvasRenderer(this.window.context.canvas2D);
			break;
		case "dom":
			this.__renderer = new openfl_display_DOMRenderer(this.window.context.dom);
			break;
		case "opengl":case "opengles":case "webgl":
			this.context3D = new openfl_display3D_Context3D(this);
			this.context3D.configureBackBuffer(this.stageWidth,this.stageHeight,0,true,true,true);
			this.context3D.present();
			this.__renderer = new openfl_display_OpenGLRenderer(this.context3D);
			break;
		default:
		}
		if(this.__renderer != null) {
			var tmp = this.get_quality();
			this.__renderer.__allowSmoothing = tmp != 2;
			this.__renderer.__pixelRatio = this.window.__scale;
			this.__renderer.__worldTransform = this.__displayMatrix;
			this.__renderer.__stage = this;
			this.__renderer.__resize(windowWidth,windowHeight);
		}
	}
	,__dispatchEvent: function(event) {
		var result;
		if(this.__uncaughtErrorEvents.__enabled) {
			try {
				result = openfl_display_DisplayObjectContainer.prototype.__dispatchEvent.call(this,event);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				this.__handleError(e);
				result = false;
			}
		} else {
			result = openfl_display_DisplayObjectContainer.prototype.__dispatchEvent.call(this,event);
		}
		return result;
	}
	,__dispatchPendingMouseEvent: function() {
		if(this.__pendingMouseEvent) {
			this.__onMouse("mouseMove",this.__pendingMouseX,this.__pendingMouseY,0);
			this.__pendingMouseEvent = false;
		}
	}
	,__dispatchStack: function(event,stack) {
		if(this.__uncaughtErrorEvents.__enabled) {
			try {
				var target;
				var length = stack.length;
				if(length == 0) {
					event.eventPhase = 2;
					target = event.target;
					target.__dispatch(event);
				} else {
					event.eventPhase = 1;
					event.target = stack[stack.length - 1];
					var _g = 0;
					var _g1 = length - 1;
					while(_g < _g1) {
						var i = _g++;
						stack[i].__dispatch(event);
						if(event.__isCanceled) {
							return;
						}
					}
					event.eventPhase = 2;
					target = event.target;
					target.__dispatch(event);
					if(event.__isCanceled) {
						return;
					}
					if(event.bubbles) {
						event.eventPhase = 3;
						var i = length - 2;
						while(i >= 0) {
							stack[i].__dispatch(event);
							if(event.__isCanceled) {
								return;
							}
							--i;
						}
					}
				}
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				this.__handleError(e);
			}
		} else {
			var target;
			var length = stack.length;
			if(length == 0) {
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
			} else {
				event.eventPhase = 1;
				event.target = stack[stack.length - 1];
				var _g = 0;
				var _g1 = length - 1;
				while(_g < _g1) {
					var i = _g++;
					stack[i].__dispatch(event);
					if(event.__isCanceled) {
						return;
					}
				}
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
				if(event.__isCanceled) {
					return;
				}
				if(event.bubbles) {
					event.eventPhase = 3;
					var i = length - 2;
					while(i >= 0) {
						stack[i].__dispatch(event);
						if(event.__isCanceled) {
							return;
						}
						--i;
					}
				}
			}
		}
	}
	,__dispatchTarget: function(target,event) {
		if(this.__uncaughtErrorEvents.__enabled) {
			try {
				return target.__dispatchEvent(event);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				this.__handleError(e);
				return false;
			}
		} else {
			return target.__dispatchEvent(event);
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			var _this = parent.__getWorldTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				mouse.x = -_this.tx;
				mouse.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
				mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
				mouse.x = px;
			}
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__globalToLocal: function(global,local) {
		if(global != local) {
			local.copyFrom(global);
		}
		return local;
	}
	,__handleError: function(e) {
		var event = new openfl_events_UncaughtErrorEvent("uncaughtError",true,true,e);
		try {
			openfl_Lib.get_current().__loaderInfo.uncaughtErrorEvents.dispatchEvent(event);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		if(!event.__preventDefault) {
			var message = haxe_CallStack.toString(haxe_CallStack.exceptionStack());
			console.log(message);
			var message = Std.string(e);
			console.log(message);
			try {
				var exc = e;
				if(exc != null && Object.prototype.hasOwnProperty.call(exc,"stack") && exc.stack != null && exc.stack != "") {
					console.log(exc.stack);
					e.stack = exc.stack;
				} else {
					var msg = haxe_CallStack.toString(haxe_CallStack.callStack());
					console.log(msg);
				}
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
			throw e;
		}
	}
	,__onKey: function(type,keyCode,modifier) {
		this.__dispatchPendingMouseEvent();
		openfl_events_MouseEvent.__altKey = lime_ui_KeyModifier.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui_KeyModifier.get_metaKey(modifier);
		openfl_events_MouseEvent.__controlKey = lime_ui_KeyModifier.get_ctrlKey(modifier) && !lime_ui_KeyModifier.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui_KeyModifier.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui_KeyModifier.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 13;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui_KeyModifier.get_shiftKey(modifier));
			if(type == "keyUp" && (keyCode1 == 32 || keyCode1 == 13) && ((this.__focus) instanceof openfl_display_Sprite)) {
				var sprite = js_Boot.__cast(this.__focus , openfl_display_Sprite);
				if(sprite.get_buttonMode() && sprite.focusRect == true) {
					var localPoint = openfl_geom_Point.__pool.get();
					var targetPoint = openfl_geom_Point.__pool.get();
					targetPoint.x = this.__mouseX;
					targetPoint.y = this.__mouseY;
					var clickEvent = openfl_events_MouseEvent.__create("click",0,0,this.__mouseX,this.__mouseY,sprite.__globalToLocal(targetPoint,localPoint),sprite);
					this.__dispatchStack(clickEvent,stack);
					if(clickEvent.__updateAfterEventFlag) {
						this.__renderAfterEvent();
					}
					openfl_geom_Point.__pool.release(targetPoint);
					openfl_geom_Point.__pool.release(localPoint);
				}
			}
			var event = new openfl_events_KeyboardEvent(type,true,true,charCode,keyCode1,keyLocation,this.__macKeyboard ? lime_ui_KeyModifier.get_ctrlKey(modifier) || lime_ui_KeyModifier.get_metaKey(modifier) : lime_ui_KeyModifier.get_ctrlKey(modifier),lime_ui_KeyModifier.get_altKey(modifier),lime_ui_KeyModifier.get_shiftKey(modifier),lime_ui_KeyModifier.get_ctrlKey(modifier),lime_ui_KeyModifier.get_metaKey(modifier));
			stack.reverse();
			this.__dispatchStack(event,stack);
			if(event.__preventDefault) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			} else if(type == "keyDown" && keyCode1 == 9) {
				var tabStack = [];
				this.__tabTest(tabStack);
				var nextIndex = -1;
				var nextObject = null;
				var nextOffset = lime_ui_KeyModifier.get_shiftKey(modifier) ? -1 : 1;
				if(tabStack.length > 1) {
					haxe_ds_ArraySort.sort(tabStack,function(a,b) {
						return a.get_tabIndex() - b.get_tabIndex();
					});
					if(tabStack[tabStack.length - 1].get_tabIndex() != -1) {
						var i = 0;
						while(i < tabStack.length) {
							if(tabStack[i].get_tabIndex() > -1) {
								if(i > 0) {
									tabStack.splice(0,i);
								}
								break;
							}
							++i;
						}
					}
					if(this.get_focus() != null) {
						var current = this.get_focus();
						var index = tabStack.indexOf(current);
						while(index == -1 && current != null) {
							var currentParent = current.parent;
							if(currentParent != null && currentParent.get_tabChildren()) {
								var currentIndex = currentParent.getChildIndex(current);
								if(currentIndex == -1) {
									current = currentParent;
									continue;
								}
								var i = currentIndex + nextOffset;
								while(lime_ui_KeyModifier.get_shiftKey(modifier) ? i >= 0 : i < currentParent.get_numChildren()) {
									var sibling = currentParent.getChildAt(i);
									if(((sibling) instanceof openfl_display_InteractiveObject)) {
										var interactiveSibling = js_Boot.__cast(sibling , openfl_display_InteractiveObject);
										index = tabStack.indexOf(interactiveSibling);
										if(index != -1) {
											nextOffset = 0;
											break;
										}
									}
									i += nextOffset;
								}
							} else if(lime_ui_KeyModifier.get_shiftKey(modifier)) {
								index = tabStack.indexOf(currentParent);
								if(index != -1) {
									nextOffset = 0;
								}
							}
							current = currentParent;
						}
						if(index < 0) {
							nextIndex = 0;
						} else {
							nextIndex = index + nextOffset;
						}
					} else {
						nextIndex = this.__currentTabOrderIndex;
					}
				} else if(tabStack.length == 1) {
					nextObject = tabStack[0];
					if(this.get_focus() == nextObject) {
						nextObject = null;
					}
				}
				var cancelTab = nextIndex >= 0 && nextIndex < tabStack.length;
				if(tabStack.length == 1 || tabStack.length == 0 && this.get_focus() != null) {
					nextIndex = 0;
				} else if(tabStack.length > 1) {
					if(nextIndex < 0) {
						nextIndex += tabStack.length;
					}
					nextIndex %= tabStack.length;
					nextObject = tabStack[nextIndex];
					if(nextObject == this.get_focus()) {
						nextIndex += nextOffset;
						if(nextIndex < 0) {
							nextIndex += tabStack.length;
						}
						nextIndex %= tabStack.length;
						nextObject = tabStack[nextIndex];
					}
				}
				var focusEvent = null;
				if(this.get_focus() != null) {
					focusEvent = new openfl_events_FocusEvent("keyFocusChange",true,true,nextObject,lime_ui_KeyModifier.get_shiftKey(modifier),0);
					stack = [];
					this.get_focus().__getInteractive(stack);
					stack.reverse();
					this.__dispatchStack(focusEvent,stack);
					if(focusEvent.isDefaultPrevented()) {
						this.window.onKeyDown.cancel();
					}
				}
				if(focusEvent == null || !focusEvent.isDefaultPrevented()) {
					this.__currentTabOrderIndex = nextIndex;
					if(nextObject != null) {
						this.set_focus(nextObject);
					}
					if(cancelTab) {
						this.window.onKeyDown.cancel();
					}
				}
			}
			if(event.__updateAfterEventFlag) {
				this.__renderAfterEvent();
			}
		}
	}
	,__onLimeCreateWindow: function($window) {
		if(this.window != $window) {
			return;
		}
		var _g = this;
		var window1 = $window;
		var tmp = function() {
			_g.__onLimeWindowActivate(window1);
		};
		$window.onActivate.add(tmp);
		var _g1 = this;
		var window2 = $window;
		var tmp = function() {
			_g1.__onLimeWindowClose(window2);
		};
		$window.onClose.add(tmp,false,-9000);
		var _g2 = this;
		var window3 = $window;
		var tmp = function() {
			_g2.__onLimeWindowDeactivate(window3);
		};
		$window.onDeactivate.add(tmp);
		var _g3 = this;
		var window4 = $window;
		var tmp = function(file) {
			_g3.__onLimeWindowDropFile(window4,file);
		};
		$window.onDropFile.add(tmp);
		var _g4 = this;
		var window5 = $window;
		var tmp = function() {
			_g4.__onLimeWindowEnter(window5);
		};
		$window.onEnter.add(tmp);
		var _g5 = this;
		var window6 = $window;
		var tmp = function() {
			_g5.__onLimeWindowExpose(window6);
		};
		$window.onExpose.add(tmp);
		var _g6 = this;
		var window7 = $window;
		var tmp = function() {
			_g6.__onLimeWindowFocusIn(window7);
		};
		$window.onFocusIn.add(tmp);
		var _g7 = this;
		var window8 = $window;
		var tmp = function() {
			_g7.__onLimeWindowFocusOut(window8);
		};
		$window.onFocusOut.add(tmp);
		var _g8 = this;
		var window9 = $window;
		var tmp = function() {
			_g8.__onLimeWindowFullscreen(window9);
		};
		$window.onFullscreen.add(tmp);
		var _g9 = this;
		var window10 = $window;
		var tmp = function(keyCode,modifier) {
			_g9.__onLimeKeyDown(window10,keyCode,modifier);
		};
		$window.onKeyDown.add(tmp);
		var _g10 = this;
		var window11 = $window;
		var tmp = function(keyCode,modifier) {
			_g10.__onLimeKeyUp(window11,keyCode,modifier);
		};
		$window.onKeyUp.add(tmp);
		var _g11 = this;
		var window12 = $window;
		var tmp = function() {
			_g11.__onLimeWindowLeave(window12);
		};
		$window.onLeave.add(tmp);
		var _g12 = this;
		var window13 = $window;
		var tmp = function() {
			_g12.__onLimeWindowMinimize(window13);
		};
		$window.onMinimize.add(tmp);
		var _g13 = this;
		var window14 = $window;
		var tmp = function(x,y,button) {
			_g13.__onLimeMouseDown(window14,x,y,button);
		};
		$window.onMouseDown.add(tmp);
		var _g14 = this;
		var window15 = $window;
		var tmp = function(x,y) {
			_g14.__onLimeMouseMove(window15,x,y);
		};
		$window.onMouseMove.add(tmp);
		var _g15 = this;
		var window16 = $window;
		var tmp = function(x,y) {
			_g15.__onLimeMouseMoveRelative(window16,x,y);
		};
		$window.onMouseMoveRelative.add(tmp);
		var _g16 = this;
		var window17 = $window;
		var tmp = function(x,y,button) {
			_g16.__onLimeMouseUp(window17,x,y,button);
		};
		$window.onMouseUp.add(tmp);
		var _g17 = this;
		var window18 = $window;
		var tmp = function(deltaX,deltaY,deltaMode) {
			_g17.__onLimeMouseWheel(window18,deltaX,deltaY,deltaMode);
		};
		$window.onMouseWheel.add(tmp);
		var _g18 = this;
		var window19 = $window;
		var tmp = function(x,y) {
			_g18.__onLimeWindowMove(window19,x,y);
		};
		$window.onMove.add(tmp);
		$window.onRender.add($bind(this,this.__onLimeRender));
		$window.onRenderContextLost.add($bind(this,this.__onLimeRenderContextLost));
		$window.onRenderContextRestored.add($bind(this,this.__onLimeRenderContextRestored));
		var _g19 = this;
		var window20 = $window;
		var tmp = function(width,height) {
			_g19.__onLimeWindowResize(window20,width,height);
		};
		$window.onResize.add(tmp);
		var _g20 = this;
		var window21 = $window;
		var tmp = function() {
			_g20.__onLimeWindowRestore(window21);
		};
		$window.onRestore.add(tmp);
		var _g21 = this;
		var window22 = $window;
		var tmp = function(text,start,length) {
			_g21.__onLimeTextEdit(window22,text,start,length);
		};
		$window.onTextEdit.add(tmp);
		var _g22 = this;
		var window23 = $window;
		var tmp = function(text) {
			_g22.__onLimeTextInput(window23,text);
		};
		$window.onTextInput.add(tmp);
		this.__onLimeWindowCreate($window);
	}
	,__onLimeGamepadAxisMove: function(gamepad,axis,value) {
		if(this.__uncaughtErrorEvents.__enabled) {
			try {
				openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				this.__handleError(e);
			}
		} else {
			openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,__onLimeGamepadButtonDown: function(gamepad,button) {
		if(this.__uncaughtErrorEvents.__enabled) {
			try {
				openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				this.__handleError(e);
			}
		} else {
			openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
		}
	}
	,__onLimeGamepadButtonUp: function(gamepad,button) {
		if(this.__uncaughtErrorEvents.__enabled) {
			try {
				openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				this.__handleError(e);
			}
		} else {
			openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
		}
	}
	,__onLimeGamepadConnect: function(gamepad) {
		if(this.__uncaughtErrorEvents.__enabled) {
			try {
				openfl_ui_GameInput.__onGamepadConnect(gamepad);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				this.__handleError(e);
			}
		} else {
			openfl_ui_GameInput.__onGamepadConnect(gamepad);
		}
		var _g = this;
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			_g.__onLimeGamepadAxisMove(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var _g1 = this;
		var gamepad2 = gamepad;
		var tmp = function(button) {
			_g1.__onLimeGamepadButtonDown(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp);
		var _g2 = this;
		var gamepad3 = gamepad;
		var tmp = function(button) {
			_g2.__onLimeGamepadButtonUp(gamepad3,button);
		};
		gamepad.onButtonUp.add(tmp);
		var _g3 = this;
		var gamepad4 = gamepad;
		var tmp = function() {
			_g3.__onLimeGamepadDisconnect(gamepad4);
		};
		gamepad.onDisconnect.add(tmp);
	}
	,__onLimeGamepadDisconnect: function(gamepad) {
		if(this.__uncaughtErrorEvents.__enabled) {
			try {
				openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				this.__handleError(e);
			}
		} else {
			openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
		}
	}
	,__onLimeKeyDown: function($window,keyCode,modifier) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__onKey("keyDown",keyCode,modifier);
	}
	,__onLimeKeyUp: function($window,keyCode,modifier) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__onKey("keyUp",keyCode,modifier);
	}
	,__onLimeModuleExit: function(code) {
		if(this.window != null) {
			var event = null;
			event = new openfl_events_Event("deactivate");
			this.__broadcastEvent(event);
		}
	}
	,__onLimeMouseDown: function($window,x,y,button) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var type;
		switch(button) {
		case 1:
			type = "middleMouseDown";
			break;
		case 2:
			type = "rightMouseDown";
			break;
		default:
			type = "mouseDown";
		}
		this.__onMouse(type,x * $window.__scale | 0,y * $window.__scale | 0,button);
		if(!this.showDefaultContextMenu && button == 2) {
			$window.onMouseDown.cancel();
		}
	}
	,__onLimeMouseMove: function($window,x,y) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__pendingMouseEvent = true;
		this.__pendingMouseX = x * $window.__scale | 0;
		this.__pendingMouseY = y * $window.__scale | 0;
	}
	,__onLimeMouseMoveRelative: function($window,x,y) {
	}
	,__onLimeMouseUp: function($window,x,y,button) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var type;
		switch(button) {
		case 1:
			type = "middleMouseUp";
			break;
		case 2:
			type = "rightMouseUp";
			break;
		default:
			type = "mouseUp";
		}
		this.__onMouse(type,x * $window.__scale | 0,y * $window.__scale | 0,button);
		if(!this.showDefaultContextMenu && button == 2) {
			$window.onMouseUp.cancel();
		}
	}
	,__onLimeMouseWheel: function($window,deltaX,deltaY,deltaMode) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		if(deltaMode == lime_ui_MouseWheelMode.PIXELS) {
			this.__onMouseWheel(deltaX * $window.__scale | 0,deltaY * $window.__scale | 0,deltaMode);
		} else {
			this.__onMouseWheel(deltaX | 0,deltaY | 0,deltaMode);
		}
	}
	,__renderAfterEvent: function() {
		var cancelled = this.__render(this.window.context);
	}
	,__render: function(context) {
		var cancelled = false;
		var event = null;
		var shouldRender = this.__renderer != null && (this.__renderDirty || this.__forceRender);
		if(this.__invalidated && shouldRender) {
			this.__invalidated = false;
			event = new openfl_events_Event("render");
			this.__broadcastEvent(event);
		}
		this.__update(false,true);
		if(this.__renderer != null) {
			if(this.context3D != null) {
				var stage3D = this.stage3Ds.iterator();
				while(stage3D.hasNext()) {
					var stage3D1 = stage3D.next();
					this.context3D.__renderStage3D(stage3D1);
				}
				if(this.context3D.__present) {
					shouldRender = true;
				}
			}
			if(shouldRender) {
				var tmp = this.__renderer.__type == "cairo";
				if(this.context3D == null) {
					this.__renderer.__clear();
				}
				this.__renderer.__render(this);
			} else if(this.context3D == null) {
				cancelled = true;
			}
			if(this.context3D != null) {
				if(!this.context3D.__present) {
					cancelled = true;
				} else {
					if(!this.__renderer.__cleared) {
						this.__renderer.__clear();
					}
					this.context3D.__present = false;
					this.context3D.__cleared = false;
				}
			}
			this.__renderer.__cleared = false;
		}
		return cancelled;
	}
	,__onLimeRender: function(context) {
		if(this.__rendering) {
			return;
		}
		this.__rendering = true;
		var event = null;
		this.__broadcastEvent(new openfl_events_Event("enterFrame"));
		this.__broadcastEvent(new openfl_events_Event("frameConstructed"));
		this.__broadcastEvent(new openfl_events_Event("exitFrame"));
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		var cancelled = this.__render(context);
		if(cancelled) {
			this.window.onRender.cancel();
		}
		this.__rendering = false;
	}
	,__onLimeRenderContextLost: function() {
		this.__renderer = null;
		this.context3D = null;
		var stage3D = this.stage3Ds.iterator();
		while(stage3D.hasNext()) {
			var stage3D1 = stage3D.next();
			stage3D1.__lostContext();
		}
	}
	,__onLimeRenderContextRestored: function(context) {
		this.__createRenderer();
		var stage3D = this.stage3Ds.iterator();
		while(stage3D.hasNext()) {
			var stage3D1 = stage3D.next();
			stage3D1.__restoreContext();
		}
	}
	,__onLimeTextEdit: function($window,text,start,length) {
	}
	,__onLimeTextInput: function($window,text) {
		if(this.window == null || this.window != $window) {
			return;
		}
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		var event = new openfl_events_TextEvent("textInput",true,true,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__dispatchStack(event,stack);
		} else {
			this.__dispatchEvent(event);
		}
		if(event.isDefaultPrevented()) {
			$window.onTextInput.cancel();
		}
	}
	,__onLimeTouchCancel: function(touch) {
		var isPrimaryTouchPoint = this.__primaryTouch == touch;
		if(isPrimaryTouchPoint) {
			this.__primaryTouch = null;
		}
		this.__onTouch("touchEnd",touch,isPrimaryTouchPoint);
	}
	,__onLimeTouchMove: function(touch) {
		this.__onTouch("touchMove",touch,this.__primaryTouch == touch);
	}
	,__onLimeTouchEnd: function(touch) {
		var isPrimaryTouchPoint = this.__primaryTouch == touch;
		if(isPrimaryTouchPoint) {
			this.__primaryTouch = null;
		}
		this.__onTouch("touchEnd",touch,isPrimaryTouchPoint);
	}
	,__onLimeTouchStart: function(touch) {
		if(this.__primaryTouch == null) {
			this.__primaryTouch = touch;
		}
		this.__onTouch("touchBegin",touch,this.__primaryTouch == touch);
	}
	,__onLimeUpdate: function(deltaTime) {
		this.__deltaTime = deltaTime;
		this.__dispatchPendingMouseEvent();
	}
	,__onLimeWindowActivate: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
	}
	,__onLimeWindowClose: function($window) {
		if(this.window == $window) {
			this.window = null;
		}
		this.__primaryTouch = null;
		var event = null;
		event = new openfl_events_Event("deactivate");
		this.__broadcastEvent(event);
	}
	,__onLimeWindowCreate: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		if($window.context != null) {
			this.__createRenderer();
		}
	}
	,__onLimeWindowDeactivate: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
	}
	,__onLimeWindowDropFile: function($window,file) {
	}
	,__onLimeWindowEnter: function($window) {
	}
	,__onLimeWindowExpose: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__renderDirty = true;
	}
	,__onLimeWindowFocusIn: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__renderDirty = true;
		var event = null;
		event = new openfl_events_Event("activate");
		this.__broadcastEvent(event);
		this.set_focus(this.__cacheFocus);
	}
	,__onLimeWindowFocusOut: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__primaryTouch = null;
		var event = null;
		event = new openfl_events_Event("deactivate");
		this.__broadcastEvent(event);
		var currentFocus = this.get_focus();
		this.set_focus(null);
		this.__cacheFocus = currentFocus;
		openfl_events_MouseEvent.__altKey = false;
		openfl_events_MouseEvent.__commandKey = false;
		openfl_events_MouseEvent.__ctrlKey = false;
		openfl_events_MouseEvent.__shiftKey = false;
	}
	,__onLimeWindowFullscreen: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__resize();
		if(!this.__wasFullscreen) {
			this.__wasFullscreen = true;
			if(this.__displayState == 2) {
				this.__displayState = 1;
			}
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	}
	,__onLimeWindowLeave: function($window) {
		if(this.window == null || this.window != $window || openfl_events_MouseEvent.__buttonDown) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var event = null;
		event = new openfl_events_Event("mouseLeave");
		this.__dispatchEvent(event);
	}
	,__onLimeWindowMinimize: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
	}
	,__onLimeWindowMove: function($window,x,y) {
	}
	,__onLimeWindowResize: function($window,width,height) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__resize();
		if(this.__wasFullscreen && !$window.__fullscreen) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,__onLimeWindowRestore: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		if(this.__wasFullscreen && !$window.__fullscreen) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) {
			return;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		var supportsClickCount = false;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			supportsClickCount = true;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			supportsClickCount = true;
			break;
		case "mouseDown":
			if(this.get_focus() != null) {
				if(this.get_focus() != target) {
					var focusEvent = new openfl_events_FocusEvent("mouseFocusChange",true,true,target,false,0);
					this.get_focus().dispatchEvent(focusEvent);
					if(!focusEvent.isDefaultPrevented()) {
						if(target.__allowMouseFocus()) {
							this.set_focus(target);
						} else {
							this.set_focus(null);
						}
					}
				}
			} else if(target.__allowMouseFocus()) {
				this.set_focus(target);
			} else {
				this.set_focus(null);
			}
			this.__mouseDownLeft = target;
			openfl_events_MouseEvent.__buttonDown = true;
			supportsClickCount = true;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft != null) {
				openfl_events_MouseEvent.__buttonDown = false;
				if(this.__mouseDownLeft == target) {
					clickType = "click";
				} else {
					var event = null;
					event = openfl_events_MouseEvent.__create("releaseOutside",1,0,this.__mouseX,this.__mouseY,new openfl_geom_Point(this.__mouseX,this.__mouseY),this);
					this.__mouseDownLeft.dispatchEvent(event);
				}
				this.__mouseDownLeft = null;
			}
			supportsClickCount = true;
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			supportsClickCount = true;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			supportsClickCount = true;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var event = null;
		var clickCount = supportsClickCount ? this.window.clickCount : 0;
		event = openfl_events_MouseEvent.__create(type,button,clickCount,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
		this.__dispatchStack(event,stack);
		if(event.__updateAfterEventFlag) {
			this.__renderAfterEvent();
		}
		if(clickType != null) {
			event = openfl_events_MouseEvent.__create(clickType,button,0,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
			this.__dispatchStack(event,stack);
			if(event.__updateAfterEventFlag) {
				this.__renderAfterEvent();
			}
			if(type == "mouseUp" && target.doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500 && target == this.__lastClickTarget) {
					event = openfl_events_MouseEvent.__create("doubleClick",button,0,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
					this.__dispatchStack(event,stack);
					if(event.__updateAfterEventFlag) {
						this.__renderAfterEvent();
					}
					this.__lastClickTime = 0;
					this.__lastClickTarget = null;
				} else {
					this.__lastClickTarget = target;
					this.__lastClickTime = currentTime;
				}
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto" && !openfl_ui_Mouse.__hidden) {
			var cursor = null;
			if(this.__mouseDownLeft != null) {
				cursor = this.__mouseDownLeft.__getCursor();
			} else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null && this.window != null) {
						this.window.set_cursor(openfl_ui_MouseCursor.toLimeCursor(cursor));
						break;
					}
				}
			}
			if(cursor == null && this.window != null) {
				this.window.set_cursor(lime_ui_MouseCursor.ARROW);
			}
		}
		var event;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				event = openfl_events_MouseEvent.__create("mouseOut",button,0,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				this.__dispatchStack(event,this.__mouseOutStack);
				if(event.__updateAfterEventFlag) {
					this.__renderAfterEvent();
				}
			}
		}
		var item;
		var i = 0;
		while(i < this.__rollOutStack.length) {
			item = this.__rollOutStack[i];
			if(stack.indexOf(item) == -1) {
				HxOverrides.remove(this.__rollOutStack,item);
				event = openfl_events_MouseEvent.__create("rollOut",button,0,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),item);
				event.bubbles = false;
				this.__dispatchTarget(item,event);
				if(event.__updateAfterEventFlag) {
					this.__renderAfterEvent();
				}
			} else {
				++i;
			}
		}
		var _g = 0;
		while(_g < stack.length) {
			var item = stack[_g];
			++_g;
			if(this.__rollOutStack.indexOf(item) == -1 && this.__mouseOverTarget != null) {
				if(item.hasEventListener("rollOver")) {
					event = openfl_events_MouseEvent.__create("rollOver",button,0,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),item);
					event.bubbles = false;
					this.__dispatchTarget(item,event);
					if(event.__updateAfterEventFlag) {
						this.__renderAfterEvent();
					}
				}
				if(item.hasEventListener("rollOut") || item.hasEventListener("rollOver")) {
					this.__rollOutStack.push(item);
				}
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				event = openfl_events_MouseEvent.__create("mouseOver",button,0,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
				this.__dispatchStack(event,stack);
				if(event.__updateAfterEventFlag) {
					this.__renderAfterEvent();
				}
			}
			this.__mouseOverTarget = target;
			this.__mouseOutStack = stack;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
			var dropTarget = null;
			if(this.__mouseOverTarget == this.__dragObject) {
				var cacheMouseEnabled = this.__dragObject.mouseEnabled;
				var cacheMouseChildren = this.__dragObject.mouseChildren;
				this.__dragObject.mouseEnabled = false;
				this.__dragObject.mouseChildren = false;
				var stack = [];
				if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
					dropTarget = stack[stack.length - 1];
				}
				this.__dragObject.mouseEnabled = cacheMouseEnabled;
				this.__dragObject.mouseChildren = cacheMouseChildren;
			} else if(this.__mouseOverTarget != this) {
				dropTarget = this.__mouseOverTarget;
			}
			this.__dragObject.dropTarget = dropTarget;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY,deltaMode) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var delta = deltaY | 0;
		var event = openfl_events_MouseEvent.__create("mouseWheel",0,0,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,targetPoint),target,delta);
		event.cancelable = true;
		this.__dispatchStack(event,stack);
		if(event.isDefaultPrevented()) {
			this.window.onMouseWheel.cancel();
		}
		if(event.__updateAfterEventFlag) {
			this.__renderAfterEvent();
		}
		openfl_geom_Point.__pool.release(targetPoint);
	}
	,__onTouch: function(type,touch,isPrimaryTouchPoint) {
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(Math.round(touch.x * this.window.__width * this.window.__scale),Math.round(touch.y * this.window.__height * this.window.__scale));
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var touchX = targetPoint.x;
		var touchY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(touchX,touchY,false,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var touchId = touch.id;
		var touchData = null;
		if(this.__touchData.h.hasOwnProperty(touchId)) {
			touchData = this.__touchData.h[touchId];
		} else {
			touchData = openfl_utils__$internal_TouchData.__pool.get();
			touchData.reset();
			touchData.touch = touch;
			this.__touchData.h[touchId] = touchData;
		}
		var touchType = null;
		var releaseTouchData = false;
		switch(type) {
		case "touchBegin":
			touchData.touchDownTarget = target;
			break;
		case "touchEnd":
			if(touchData.touchDownTarget == target) {
				touchType = "touchTap";
			}
			touchData.touchDownTarget = null;
			releaseTouchData = true;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var touchEvent = openfl_events_TouchEvent.__create(type,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
		touchEvent.touchPointID = touchId;
		touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
		touchEvent.pressure = touch.pressure;
		this.__dispatchStack(touchEvent,stack);
		if(touchEvent.__updateAfterEventFlag) {
			this.__renderAfterEvent();
		}
		if(touchType != null) {
			touchEvent = openfl_events_TouchEvent.__create(touchType,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			touchEvent.pressure = touch.pressure;
			this.__dispatchStack(touchEvent,stack);
			if(touchEvent.__updateAfterEventFlag) {
				this.__renderAfterEvent();
			}
		}
		var touchOverTarget = touchData.touchOverTarget;
		if(target != touchOverTarget && touchOverTarget != null) {
			touchEvent = openfl_events_TouchEvent.__create("touchOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			touchEvent.pressure = touch.pressure;
			this.__dispatchTarget(touchOverTarget,touchEvent);
			if(touchEvent.__updateAfterEventFlag) {
				this.__renderAfterEvent();
			}
		}
		var touchOutStack = touchData.rollOutStack;
		var item;
		var i = 0;
		while(i < touchOutStack.length) {
			item = touchOutStack[i];
			if(stack.indexOf(item) == -1) {
				HxOverrides.remove(touchOutStack,item);
				touchEvent = openfl_events_TouchEvent.__create("touchRollOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = false;
				touchEvent.pressure = touch.pressure;
				this.__dispatchTarget(item,touchEvent);
				if(touchEvent.__updateAfterEventFlag) {
					this.__renderAfterEvent();
				}
			} else {
				++i;
			}
		}
		var _g = 0;
		while(_g < stack.length) {
			var item = stack[_g];
			++_g;
			if(touchOutStack.indexOf(item) == -1) {
				if(item.hasEventListener("touchRollOver")) {
					touchEvent = openfl_events_TouchEvent.__create("touchRollOver",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),item);
					touchEvent.touchPointID = touchId;
					touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
					touchEvent.bubbles = false;
					touchEvent.pressure = touch.pressure;
					this.__dispatchTarget(item,touchEvent);
					if(touchEvent.__updateAfterEventFlag) {
						this.__renderAfterEvent();
					}
				}
				if(item.hasEventListener("touchRollOut")) {
					touchOutStack.push(item);
				}
			}
		}
		if(target != touchOverTarget) {
			if(target != null) {
				touchEvent = openfl_events_TouchEvent.__create("touchOver",null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = true;
				touchEvent.pressure = touch.pressure;
				this.__dispatchTarget(target,touchEvent);
				if(touchEvent.__updateAfterEventFlag) {
					this.__renderAfterEvent();
				}
			}
			touchData.touchOverTarget = target;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
		if(releaseTouchData) {
			this.__touchData.remove(touchId);
			touchData.reset();
			openfl_utils__$internal_TouchData.__pool.release(touchData);
		}
	}
	,__registerLimeModule: function(application) {
		application.onCreateWindow.add($bind(this,this.__onLimeCreateWindow));
		application.onUpdate.add($bind(this,this.__onLimeUpdate));
		application.onExit.add($bind(this,this.__onLimeModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onLimeGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onLimeGamepadConnect));
		lime_ui_Touch.onStart.add($bind(this,this.__onLimeTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.__onLimeTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.__onLimeTouchEnd));
		lime_ui_Touch.onCancel.add($bind(this,this.__onLimeTouchCancel));
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		this.__displayMatrix.identity();
		if(this.get_fullScreenSourceRect() != null && this.window.__fullscreen) {
			this.stageWidth = this.get_fullScreenSourceRect().width | 0;
			this.stageHeight = this.get_fullScreenSourceRect().height | 0;
			var displayScaleX = windowWidth / this.stageWidth;
			var displayScaleY = windowHeight / this.stageHeight;
			this.__displayMatrix.translate(-this.get_fullScreenSourceRect().x,-this.get_fullScreenSourceRect().y);
			this.__displayMatrix.scale(displayScaleX,displayScaleY);
			this.__displayRect.setTo(this.get_fullScreenSourceRect().get_left(),this.get_fullScreenSourceRect().get_right(),this.get_fullScreenSourceRect().get_top(),this.get_fullScreenSourceRect().get_bottom());
		} else if(this.__logicalWidth == 0 || this.__logicalHeight == 0 || this.get_scaleMode() == 2 || windowWidth == 0 || windowHeight == 0) {
			this.stageWidth = Math.round(windowWidth / this.window.__scale);
			this.stageHeight = Math.round(windowHeight / this.window.__scale);
			this.__displayMatrix.scale(this.window.__scale,this.window.__scale);
			this.__displayRect.setTo(0,0,this.stageWidth,this.stageHeight);
		} else {
			this.stageWidth = this.__logicalWidth;
			this.stageHeight = this.__logicalHeight;
			switch(this.get_scaleMode()) {
			case 0:
				var displayScaleX = windowWidth / this.stageWidth;
				var displayScaleY = windowHeight / this.stageHeight;
				this.__displayMatrix.scale(displayScaleX,displayScaleY);
				this.__displayRect.setTo(0,0,this.stageWidth,this.stageHeight);
				break;
			case 1:
				var scaleX = windowWidth / this.stageWidth;
				var scaleY = windowHeight / this.stageHeight;
				var scale = Math.max(scaleX,scaleY);
				var scaledWidth = this.stageWidth * scale;
				var scaledHeight = this.stageHeight * scale;
				var visibleWidth = this.stageWidth - Math.round((scaledWidth - windowWidth) / scale);
				var visibleHeight = this.stageHeight - Math.round((scaledHeight - windowHeight) / scale);
				var visibleX = Math.round((this.stageWidth - visibleWidth) / 2);
				var visibleY = Math.round((this.stageHeight - visibleHeight) / 2);
				this.__displayMatrix.translate(-visibleX,-visibleY);
				this.__displayMatrix.scale(scale,scale);
				this.__displayRect.setTo(visibleX,visibleY,visibleWidth,visibleHeight);
				break;
			default:
				var scaleX = windowWidth / this.stageWidth;
				var scaleY = windowHeight / this.stageHeight;
				var scale = Math.min(scaleX,scaleY);
				var scaledWidth = this.stageWidth * scale;
				var scaledHeight = this.stageHeight * scale;
				var visibleWidth = this.stageWidth - Math.round((scaledWidth - windowWidth) / scale);
				var visibleHeight = this.stageHeight - Math.round((scaledHeight - windowHeight) / scale);
				var visibleX = Math.round((this.stageWidth - visibleWidth) / 2);
				var visibleY = Math.round((this.stageHeight - visibleHeight) / 2);
				this.__displayMatrix.translate(-visibleX,-visibleY);
				this.__displayMatrix.scale(scale,scale);
				this.__displayRect.setTo(visibleX,visibleY,visibleWidth,visibleHeight);
			}
		}
		if(this.context3D != null) {
			this.context3D.configureBackBuffer(this.stageWidth,this.stageHeight,0,true,true,true);
		}
		var stage3D = this.stage3Ds.iterator();
		while(stage3D.hasNext()) {
			var stage3D1 = stage3D.next();
			stage3D1.__resize(windowWidth,windowHeight);
		}
		if(this.__renderer != null) {
			this.__renderer.__resize(windowWidth,windowHeight);
		}
		this.__renderDirty = true;
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) {
			this.__setTransformDirty();
			var event = null;
			event = new openfl_events_Event("resize");
			this.__dispatchEvent(event);
		}
	}
	,__setLogicalSize: function(width,height) {
		this.__logicalWidth = width;
		this.__logicalHeight = height;
		this.__resize();
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) {
			this.__dragBounds = null;
		} else {
			this.__dragBounds = new openfl_geom_Rectangle();
			var right = bounds.get_right();
			var bottom = bounds.get_bottom();
			this.__dragBounds.x = right < bounds.x ? right : bounds.x;
			this.__dragBounds.y = bottom < bounds.y ? bottom : bounds.y;
			this.__dragBounds.width = Math.abs(bounds.width);
			this.__dragBounds.height = Math.abs(bounds.height);
		}
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = 0;
				this.__dragOffsetY = 0;
			} else {
				var mouse = openfl_geom_Point.__pool.get();
				mouse.setTo(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) {
					var _this = parent.__getWorldTransform();
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						mouse.x = -_this.tx;
						mouse.y = -_this.ty;
					} else {
						var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
						mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
						mouse.x = px;
					}
				}
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
				openfl_geom_Point.__pool.release(mouse);
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__unregisterLimeModule: function(application) {
		application.onCreateWindow.remove($bind(this,this.__onLimeCreateWindow));
		application.onUpdate.remove($bind(this,this.__onLimeUpdate));
		application.onExit.remove($bind(this,this.__onLimeModuleExit));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onLimeGamepadConnect));
		lime_ui_Touch.onStart.remove($bind(this,this.__onLimeTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.__onLimeTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.__onLimeTouchEnd));
		lime_ui_Touch.onCancel.remove($bind(this,this.__onLimeTouchCancel));
	}
	,__update: function(transformOnly,updateChildren) {
		if(transformOnly) {
			if(this.__transformDirty) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren);
				if(updateChildren) {
					this.__transformDirty = false;
				}
			}
		} else if(this.__transformDirty || this.__renderDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) {
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__wasDirty = true;
				}
			}
		} else if(!this.__renderDirty && this.__wasDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) {
				this.__wasDirty = false;
			}
		}
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value == null) {
			this.__transparent = true;
			value = 0;
		} else {
			this.__transparent = false;
		}
		if(this.__color != value) {
			var r = (value & 16711680) >>> 16;
			var g = (value & 65280) >>> 8;
			var b = value & 255;
			this.__colorSplit[0] = r / 255;
			this.__colorSplit[1] = g / 255;
			this.__colorSplit[2] = b / 255;
			this.__colorString = "#" + StringTools.hex(value & 16777215,6);
			this.__renderDirty = true;
			this.__color = -16777216 | value & 16777215;
		}
		return value;
	}
	,get_contentsScaleFactor: function() {
		return this.__contentsScaleFactor;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) {
			if(value == 2) {
				if(this.window.__fullscreen) {
					this.window.set_fullscreen(false);
				}
			} else if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,value,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
			if(value != null) {
				var event = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack = [];
				value.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
		}
		return value;
	}
	,get_frameRate: function() {
		if(this.window != null) {
			return this.window.__backend.getFrameRate();
		}
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.window != null) {
			return this.window.__backend.setFrameRate(value);
		}
		return value;
	}
	,get_fullScreenHeight: function() {
		return Math.ceil(this.window.get_display().currentMode.height * this.window.__scale);
	}
	,get_fullScreenSourceRect: function() {
		if(this.__fullScreenSourceRect == null) {
			return null;
		} else {
			return this.__fullScreenSourceRect.clone();
		}
	}
	,set_fullScreenSourceRect: function(value) {
		if(value == null) {
			if(this.__fullScreenSourceRect != null) {
				this.__fullScreenSourceRect = null;
				this.__resize();
			}
		} else if(!value.equals(this.__fullScreenSourceRect)) {
			this.__fullScreenSourceRect = value.clone();
			this.__resize();
		}
		return value;
	}
	,get_fullScreenWidth: function() {
		return Math.ceil(this.window.get_display().currentMode.width * this.window.__scale);
	}
	,set_height: function(value) {
		return this.get_height();
	}
	,get_mouseLock: function() {
		return this.__mouseLock;
	}
	,set_mouseLock: function(value) {
		throw new openfl_errors_IllegalOperationError("Mouse Locking is only available on desktop targets.");
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		this.__quality = value;
		if(this.__renderer != null) {
			var tmp = this.get_quality();
			this.__renderer.__allowSmoothing = tmp != 2;
		}
		return value;
	}
	,set_rotation: function(value) {
		return 0;
	}
	,get_scaleMode: function() {
		return this.__scaleMode;
	}
	,set_scaleMode: function(value) {
		if(value != this.__scaleMode) {
			this.__scaleMode = value;
			this.__resize();
		}
		return value;
	}
	,set_scaleX: function(value) {
		return 0;
	}
	,set_scaleY: function(value) {
		return 0;
	}
	,get_tabEnabled: function() {
		return false;
	}
	,set_tabEnabled: function(value) {
		throw new openfl_errors_IllegalOperationError("Error: The Stage class does not implement this property or method.");
	}
	,get_tabIndex: function() {
		return -1;
	}
	,set_tabIndex: function(value) {
		throw new openfl_errors_IllegalOperationError("Error: The Stage class does not implement this property or method.");
	}
	,set_transform: function(value) {
		return this.get_transform();
	}
	,set_width: function(value) {
		return this.get_width();
	}
	,set_x: function(value) {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_scaleMode:"set_scaleMode",get_scaleMode:"get_scaleMode",set_quality:"set_quality",get_quality:"get_quality",set_mouseLock:"set_mouseLock",get_mouseLock:"get_mouseLock",get_fullScreenWidth:"get_fullScreenWidth",set_fullScreenSourceRect:"set_fullScreenSourceRect",get_fullScreenSourceRect:"get_fullScreenSourceRect",get_fullScreenHeight:"get_fullScreenHeight",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",get_contentsScaleFactor:"get_contentsScaleFactor",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function(stage) {
	openfl_events_EventDispatcher.call(this);
	this.__stage = stage;
	this.__height = 0;
	this.__projectionTransform = new openfl_geom_Matrix3D();
	this.__renderTransform = new openfl_geom_Matrix3D();
	this.__width = 0;
	this.__x = 0;
	this.__y = 0;
	this.visible = true;
	if(stage.stageWidth > 0 && stage.stageHeight > 0) {
		this.__resize(stage.stageWidth,stage.stageHeight);
	}
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = "openfl.display.Stage3D";
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,__contextLost: null
	,__contextRequested: null
	,__height: null
	,__indexBuffer: null
	,__projectionTransform: null
	,__renderTransform: null
	,__stage: null
	,__vertexBuffer: null
	,__width: null
	,__x: null
	,__y: null
	,__canvas: null
	,__renderContext: null
	,__style: null
	,__webgl: null
	,requestContext3D: function(context3DRenderMode,profile) {
		if(profile == null) {
			profile = 0;
		}
		if(context3DRenderMode == null) {
			context3DRenderMode = 0;
		}
		if(this.__contextLost) {
			this.__contextRequested = true;
			return;
		}
		if(this.context3D != null) {
			this.__contextRequested = true;
			haxe_Timer.delay($bind(this,this.__dispatchCreate),1);
		} else if(!this.__contextRequested) {
			this.__contextRequested = true;
			haxe_Timer.delay($bind(this,this.__createContext),1);
		}
	}
	,requestContext3DMatchingProfiles: function(profiles) {
		this.requestContext3D();
	}
	,__createContext: function() {
		var stage = this.__stage;
		var renderer = stage.__renderer;
		if(renderer.__type == "cairo" || renderer.__type == "canvas") {
			this.__dispatchError();
			return;
		}
		if(renderer.__type == "opengl") {
			this.context3D = new openfl_display3D_Context3D(stage,stage.context3D.__contextState,this);
			this.__dispatchCreate();
		} else if(renderer.__type == "dom") {
			if(stage.context3D == null) {
				this.__canvas = window.document.createElement("canvas");
				this.__canvas.width = stage.stageWidth;
				this.__canvas.height = stage.stageHeight;
				var $window = stage.window;
				var attributes = stage.window.context.attributes;
				var transparentBackground = Object.prototype.hasOwnProperty.call(attributes,"background") && attributes.background == null;
				var colorDepth = Object.prototype.hasOwnProperty.call(attributes,"colorDepth") ? attributes.colorDepth : 32;
				var options = Object.prototype.hasOwnProperty.call(attributes,"antialiasing") && attributes.antialiasing > 0;
				var options1 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : true, premultipliedAlpha : true, stencil : true, preserveDrawingBuffer : false};
				this.__webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.__canvas,options1);
				if(this.__webgl != null) {
					if(lime_graphics_opengl_GL.context == null) {
						lime_graphics_opengl_GL.context = this.__webgl;
						lime_graphics_opengl_GL.type = "webgl";
						lime_graphics_opengl_GL.version = 1;
					}
					stage.context3D = new openfl_display3D_Context3D(stage);
					stage.context3D.configureBackBuffer(stage.window.__width,stage.window.__height,0,true,true,true);
					stage.context3D.present();
					var renderer1 = renderer;
					renderer1.element.appendChild(this.__canvas);
					this.__style = this.__canvas.style;
					this.__style.setProperty("position","absolute",null);
					this.__style.setProperty("top","0",null);
					this.__style.setProperty("left","0",null);
					this.__style.setProperty(renderer1.__transformOriginProperty,"0 0 0",null);
					this.__style.setProperty("z-index","-1",null);
				}
				if(stage.context3D != null) {
					this.context3D = new openfl_display3D_Context3D(stage,stage.context3D.__contextState,this);
				}
				this.__dispatchCreate();
			} else {
				this.__dispatchError();
			}
		}
	}
	,__dispatchError: function() {
		this.__contextRequested = false;
		this.dispatchEvent(new openfl_events_ErrorEvent("error",false,false,"Context3D not available"));
	}
	,__dispatchCreate: function() {
		if(this.__contextRequested) {
			this.__contextRequested = false;
			this.dispatchEvent(new openfl_events_Event("context3DCreate"));
		}
	}
	,__lostContext: function() {
		this.__contextLost = true;
		if(this.context3D != null) {
			this.context3D.__dispose();
			this.__contextRequested = true;
		}
	}
	,__resize: function(width,height) {
		if(width != this.__width || height != this.__height) {
			if(this.__canvas != null) {
				this.__canvas.width = width;
				this.__canvas.height = height;
			}
			this.__projectionTransform.copyRawDataFrom(openfl_Vector.toFloatVector(null,null,null,[2.0 / (width > 0 ? width : 1),0.0,0.0,0.0,0.0,-2.0 / (height > 0 ? height : 1),0.0,0.0,0.0,0.0,-0.001,0.0,-1.0,1.0,0.0,1.0]));
			this.__renderTransform.identity();
			this.__renderTransform.appendTranslation(this.__x,this.__y,0);
			this.__renderTransform.append(this.__projectionTransform);
			this.__width = width;
			this.__height = height;
		}
	}
	,__restoreContext: function() {
		this.__contextLost = false;
		this.__createContext();
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		if(this.__x == value) {
			return value;
		}
		this.__x = value;
		this.__renderTransform.identity();
		this.__renderTransform.appendTranslation(this.__x,this.__y,0);
		this.__renderTransform.append(this.__projectionTransform);
		return value;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		if(this.__y == value) {
			return value;
		}
		this.__y = value;
		this.__renderTransform.identity();
		this.__renderTransform.appendTranslation(this.__x,this.__y,0);
		this.__renderTransform.append(this.__projectionTransform);
		return value;
	}
	,__class__: openfl_display_Stage3D
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
});
var openfl_display_StageAlign = {};
openfl_display_StageAlign.fromString = function(value) {
	switch(value) {
	case "bottom":
		return 0;
	case "bottomLeft":
		return 1;
	case "bottomRight":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "top":
		return 5;
	case "topLeft":
		return 6;
	case "topRight":
		return 7;
	default:
		return null;
	}
};
openfl_display_StageAlign.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bottom";
	case 1:
		return "bottomLeft";
	case 2:
		return "bottomRight";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "top";
	case 6:
		return "topLeft";
	case 7:
		return "topRight";
	default:
		return null;
	}
};
var openfl_display_StageDisplayState = {};
openfl_display_StageDisplayState.fromString = function(value) {
	switch(value) {
	case "fullScreen":
		return 0;
	case "fullScreenInteractive":
		return 1;
	case "normal":
		return 2;
	default:
		return null;
	}
};
openfl_display_StageDisplayState.toString = function(this1) {
	switch(this1) {
	case 0:
		return "fullScreen";
	case 1:
		return "fullScreenInteractive";
	case 2:
		return "normal";
	default:
		return null;
	}
};
var openfl_display_StageQuality = {};
openfl_display_StageQuality.fromString = function(value) {
	switch(value) {
	case "best":
		return 0;
	case "high":
		return 1;
	case "low":
		return 2;
	case "medium":
		return 3;
	default:
		return null;
	}
};
openfl_display_StageQuality.toString = function(this1) {
	switch(this1) {
	case 0:
		return "best";
	case 1:
		return "high";
	case 2:
		return "low";
	case 3:
		return "medium";
	default:
		return null;
	}
};
var openfl_display_StageScaleMode = {};
openfl_display_StageScaleMode.fromString = function(value) {
	switch(value) {
	case "exactFit":
		return 0;
	case "noBorder":
		return 1;
	case "noScale":
		return 2;
	case "showAll":
		return 3;
	default:
		return null;
	}
};
openfl_display_StageScaleMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "exactFit";
	case 1:
		return "noBorder";
	case 2:
		return "noScale";
	case 3:
		return "showAll";
	default:
		return null;
	}
};
var openfl_display_Tile = function(id,x,y,scaleX,scaleY,rotation,originX,originY) {
	if(originY == null) {
		originY = 0;
	}
	if(originX == null) {
		originX = 0;
	}
	if(rotation == null) {
		rotation = 0;
	}
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(id == null) {
		id = 0;
	}
	this.__id = id;
	this.__matrix = new openfl_geom_Matrix();
	if(x != 0) {
		this.set_x(x);
	}
	if(y != 0) {
		this.set_y(y);
	}
	if(scaleX != 1) {
		this.set_scaleX(scaleX);
	}
	if(scaleY != 1) {
		this.set_scaleY(scaleY);
	}
	if(rotation != 0) {
		this.set_rotation(rotation);
	}
	this.__dirty = true;
	this.__length = 0;
	this.__originX = originX;
	this.__originY = originY;
	this.__alpha = 1;
	this.__blendMode = null;
	this.__visible = true;
};
$hxClasses["openfl.display.Tile"] = openfl_display_Tile;
openfl_display_Tile.__name__ = "openfl.display.Tile";
openfl_display_Tile.prototype = {
	data: null
	,parent: null
	,__alpha: null
	,__blendMode: null
	,__colorTransform: null
	,__dirty: null
	,__id: null
	,__length: null
	,__matrix: null
	,__originX: null
	,__originY: null
	,__rect: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scaleX: null
	,__scaleY: null
	,__shader: null
	,__tileset: null
	,__visible: null
	,clone: function() {
		var tile = new openfl_display_Tile(this.__id);
		tile.__alpha = this.__alpha;
		tile.__blendMode = this.__blendMode;
		tile.__originX = this.__originX;
		tile.__originY = this.__originY;
		if(this.__rect != null) {
			tile.__rect = this.__rect.clone();
		}
		tile.set_matrix(this.__matrix.clone());
		tile.__shader = this.__shader;
		tile.set_tileset(this.__tileset);
		if(this.__colorTransform != null) {
			tile.__colorTransform = this.__colorTransform.__clone();
		}
		return tile;
	}
	,getBounds: function(targetCoordinateSpace) {
		var result = new openfl_geom_Rectangle();
		this.__findTileRect(result);
		var matrix = openfl_geom_Matrix.__pool.get();
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			matrix.copyFrom(this.__getWorldTransform());
			var targetMatrix = openfl_geom_Matrix.__pool.get();
			targetMatrix.copyFrom(targetCoordinateSpace.__getWorldTransform());
			targetMatrix.invert();
			matrix.concat(targetMatrix);
			openfl_geom_Matrix.__pool.release(targetMatrix);
		} else {
			matrix.identity();
		}
		this.__getBounds(result,matrix);
		openfl_geom_Matrix.__pool.release(matrix);
		return result;
	}
	,__getBounds: function(result,matrix) {
		result.__transform(result,matrix);
	}
	,hitTestTile: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,invalidate: function() {
		this.__setRenderDirty();
	}
	,__findTileRect: function(result) {
		if(this.get_tileset() == null) {
			if(this.parent != null) {
				var parentTileset = this.parent.__findTileset();
				if(parentTileset == null) {
					result.setTo(0,0,0,0);
				} else {
					var _g = parentTileset.getRect(this.get_id());
					if(_g == null) {
						result.setTo(0,0,0,0);
					} else {
						var not_null = _g;
						result.copyFrom(not_null);
					}
				}
			} else {
				result.setTo(0,0,0,0);
			}
		} else {
			result.copyFrom(this.get_tileset().getRect(this.get_id()));
		}
		result.x = 0;
		result.y = 0;
	}
	,__findTileset: function() {
		if(this.get_tileset() != null) {
			return this.get_tileset();
		}
		if(((this.parent) instanceof openfl_display_Tilemap)) {
			return this.parent.get_tileset();
		}
		if(this.parent == null) {
			return null;
		}
		return this.parent.__findTileset();
	}
	,__getWorldTransform: function() {
		var retval = this.get_matrix().clone();
		if(this.parent != null) {
			retval.concat(this.parent.__getWorldTransform());
		}
		return retval;
	}
	,__setRenderDirty: function() {
		if(!this.__dirty) {
			this.__dirty = true;
			if(this.parent != null) {
				this.parent.__setRenderDirty();
			}
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			this.__alpha = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value != this.__blendMode) {
			this.__blendMode = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(value != this.__colorTransform) {
			this.__colorTransform = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_height: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		this.__getBounds(result,this.get_matrix());
		var h = result.height;
		openfl_geom_Rectangle.__pool.release(result);
		return h;
	}
	,set_height: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		if(result.height != 0) {
			this.set_scaleY(value / result.height);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,get_id: function() {
		return this.__id;
	}
	,set_id: function(value) {
		if(value != this.__id) {
			this.__id = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_matrix: function() {
		return this.__matrix;
	}
	,set_matrix: function(value) {
		if(value != this.__matrix) {
			this.__rotation = null;
			this.__scaleX = null;
			this.__scaleY = null;
			this.__matrix = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_originX: function() {
		return this.__originX;
	}
	,set_originX: function(value) {
		if(value != this.__originX) {
			this.__originX = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_originY: function() {
		return this.__originY;
	}
	,set_originY: function(value) {
		if(value != this.__originY) {
			this.__originY = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_rect: function() {
		return this.__rect;
	}
	,set_rect: function(value) {
		if(value != this.__rect) {
			this.__rect = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_rotation: function() {
		if(this.__rotation == null) {
			if(this.__matrix.b == 0 && this.__matrix.c == 0) {
				this.__rotation = 0;
				this.__rotationSine = 0;
				this.__rotationCosine = 1;
			} else {
				var radians = Math.atan2(this.__matrix.d,this.__matrix.c) - Math.PI / 2;
				this.__rotation = radians * (180 / Math.PI);
				this.__rotationSine = Math.sin(radians);
				this.__rotationCosine = Math.cos(radians);
			}
		}
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = value * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__matrix.a = this.__rotationCosine * __scaleX;
			this.__matrix.b = this.__rotationSine * __scaleX;
			this.__matrix.c = -this.__rotationSine * __scaleY;
			this.__matrix.d = this.__rotationCosine * __scaleY;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__scaleX == null) {
			if(this.get_matrix().b == 0) {
				this.__scaleX = this.__matrix.a;
			} else {
				this.__scaleX = Math.sqrt(this.__matrix.a * this.__matrix.a + this.__matrix.b * this.__matrix.b);
			}
		}
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__matrix.b == 0) {
				this.__matrix.a = value;
			} else {
				var rotation = this.get_rotation();
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				this.__matrix.a = a;
				this.__matrix.b = b;
			}
			this.__setRenderDirty();
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__scaleY == null) {
			if(this.__matrix.c == 0) {
				this.__scaleY = this.get_matrix().d;
			} else {
				this.__scaleY = Math.sqrt(this.__matrix.c * this.__matrix.c + this.__matrix.d * this.__matrix.d);
			}
		}
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__matrix.c == 0) {
				this.__matrix.d = value;
			} else {
				var rotation = this.get_rotation();
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				this.__matrix.c = c;
				this.__matrix.d = d;
			}
			this.__setRenderDirty();
		}
		return value;
	}
	,get_shader: function() {
		return this.__shader;
	}
	,set_shader: function(value) {
		if(value != this.__shader) {
			this.__shader = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_tileset: function() {
		return this.__tileset;
	}
	,set_tileset: function(value) {
		if(value != this.__tileset) {
			this.__tileset = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			this.__visible = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_width: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		this.__getBounds(result,this.get_matrix());
		var w = result.width;
		openfl_geom_Rectangle.__pool.release(result);
		return w;
	}
	,set_width: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		if(result.width != 0) {
			this.set_scaleX(value / result.width);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,get_x: function() {
		return this.__matrix.tx;
	}
	,set_x: function(value) {
		if(value != this.__matrix.tx) {
			this.__matrix.tx = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_y: function() {
		return this.__matrix.ty;
	}
	,set_y: function(value) {
		if(value != this.__matrix.ty) {
			this.__matrix.ty = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,__class__: openfl_display_Tile
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_tileset:"set_tileset",get_tileset:"get_tileset",set_shader:"set_shader",get_shader:"get_shader",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",set_rect:"set_rect",get_rect:"get_rect",set_originY:"set_originY",get_originY:"get_originY",set_originX:"set_originX",get_originX:"get_originX",set_matrix:"set_matrix",get_matrix:"get_matrix",set_id:"set_id",get_id:"get_id",set_height:"set_height",get_height:"get_height",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
};
var openfl_display_TileContainer = function(x,y,scaleX,scaleY,rotation,originX,originY) {
	if(originY == null) {
		originY = 0;
	}
	if(originX == null) {
		originX = 0;
	}
	if(rotation == null) {
		rotation = 0;
	}
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	openfl_display_Tile.call(this,-1,x,y,scaleX,scaleY,rotation,originX,originY);
	this.__tiles = [];
	this.__length = 0;
};
$hxClasses["openfl.display.TileContainer"] = openfl_display_TileContainer;
openfl_display_TileContainer.__name__ = "openfl.display.TileContainer";
openfl_display_TileContainer.__interfaces__ = [openfl_display_ITileContainer];
openfl_display_TileContainer.__super__ = openfl_display_Tile;
openfl_display_TileContainer.prototype = $extend(openfl_display_Tile.prototype,{
	__tiles: null
	,addTile: function(tile) {
		if(tile == null) {
			return null;
		}
		if(tile.parent == this) {
			HxOverrides.remove(this.__tiles,tile);
			this.__length--;
		}
		this.__tiles[this.get_numTiles()] = tile;
		tile.parent = this;
		this.__length++;
		this.__setRenderDirty();
		return tile;
	}
	,addTileAt: function(tile,index) {
		if(tile == null) {
			return null;
		}
		if(tile.parent == this) {
			HxOverrides.remove(this.__tiles,tile);
			this.__length--;
		}
		this.__tiles.splice(index,0,tile);
		tile.parent = this;
		this.__length++;
		this.__setRenderDirty();
		return tile;
	}
	,addTiles: function(tiles) {
		var _g = 0;
		while(_g < tiles.length) {
			var tile = tiles[_g];
			++_g;
			this.addTile(tile);
		}
		return tiles;
	}
	,clone: function() {
		var group = new openfl_display_TileContainer();
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			group.addTile(tile.clone());
		}
		return group;
	}
	,contains: function(tile) {
		return this.__tiles.indexOf(tile) > -1;
	}
	,getBounds: function(targetCoordinateSpace) {
		var result = new openfl_geom_Rectangle();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(targetCoordinateSpace);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		return result;
	}
	,getTileAt: function(index) {
		if(index >= 0 && index < this.get_numTiles()) {
			return this.__tiles[index];
		}
		return null;
	}
	,getTileIndex: function(tile) {
		var _g = 0;
		var _g1 = this.__tiles.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__tiles[i] == tile) {
				return i;
			}
		}
		return -1;
	}
	,removeTile: function(tile) {
		if(tile != null && tile.parent == this) {
			tile.parent = null;
			HxOverrides.remove(this.__tiles,tile);
			this.__length--;
			this.__setRenderDirty();
		}
		return tile;
	}
	,removeTileAt: function(index) {
		if(index >= 0 && index < this.get_numTiles()) {
			return this.removeTile(this.__tiles[index]);
		}
		return null;
	}
	,removeTiles: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(beginIndex < 0) {
			beginIndex = 0;
		}
		if(endIndex > this.__tiles.length - 1) {
			endIndex = this.__tiles.length - 1;
		}
		var removed = this.__tiles.splice(beginIndex,endIndex - beginIndex + 1);
		var _g = 0;
		while(_g < removed.length) {
			var tile = removed[_g];
			++_g;
			tile.parent = null;
		}
		this.__length = this.__tiles.length;
		this.__setRenderDirty();
	}
	,setTileIndex: function(tile,index) {
		if(index >= 0 && index <= this.get_numTiles() && tile.parent == this) {
			HxOverrides.remove(this.__tiles,tile);
			this.__tiles.splice(index,0,tile);
			this.__setRenderDirty();
		}
	}
	,sortTiles: function(compareFunction) {
		this.__tiles.sort(compareFunction);
		this.__setRenderDirty();
	}
	,swapTiles: function(tile1,tile2) {
		if(tile1.parent == this && tile2.parent == this) {
			var index1 = this.__tiles.indexOf(tile1);
			var index2 = this.__tiles.indexOf(tile2);
			this.__tiles[index1] = tile2;
			this.__tiles[index2] = tile1;
			this.__setRenderDirty();
		}
	}
	,swapTilesAt: function(index1,index2) {
		var swap = this.__tiles[index1];
		this.__tiles[index1] = this.__tiles[index2];
		this.__tiles[index2] = swap;
		swap = null;
		this.__setRenderDirty();
	}
	,get_numTiles: function() {
		return this.__length;
	}
	,get_height: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		this.__getBounds(result,this.get_matrix());
		var h = result.height;
		openfl_geom_Rectangle.__pool.release(result);
		return h;
	}
	,set_height: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		if(result.height != 0) {
			this.set_scaleY(value / result.height);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,get_width: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		this.__getBounds(result,this.get_matrix());
		var w = result.width;
		openfl_geom_Rectangle.__pool.release(result);
		return w;
	}
	,set_width: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		if(result.width != 0) {
			this.set_scaleX(value / result.width);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,__class__: openfl_display_TileContainer
	,__properties__: $extend(openfl_display_Tile.prototype.__properties__,{get_numTiles:"get_numTiles"})
});
var openfl_display_Tilemap = function(width,height,tileset,smoothing) {
	if(smoothing == null) {
		smoothing = true;
	}
	openfl_display_DisplayObject.call(this);
	this.__drawableType = 9;
	this.__tileset = tileset;
	this.smoothing = smoothing;
	this.tileAlphaEnabled = true;
	this.tileBlendModeEnabled = true;
	this.tileColorTransformEnabled = true;
	this.__group = new openfl_display_TileContainer();
	this.__group.set_tileset(tileset);
	this.__width = width;
	this.__height = height;
};
$hxClasses["openfl.display.Tilemap"] = openfl_display_Tilemap;
openfl_display_Tilemap.__name__ = "openfl.display.Tilemap";
openfl_display_Tilemap.__interfaces__ = [openfl_display_ITileContainer];
openfl_display_Tilemap.__super__ = openfl_display_DisplayObject;
openfl_display_Tilemap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	tileAlphaEnabled: null
	,tileBlendModeEnabled: null
	,tileColorTransformEnabled: null
	,smoothing: null
	,__group: null
	,__tileset: null
	,__buffer: null
	,__bufferDirty: null
	,__height: null
	,__width: null
	,addTile: function(tile) {
		return this.__group.addTile(tile);
	}
	,addTileAt: function(tile,index) {
		return this.__group.addTileAt(tile,index);
	}
	,addTiles: function(tiles) {
		return this.__group.addTiles(tiles);
	}
	,contains: function(tile) {
		return this.__group.contains(tile);
	}
	,getTileAt: function(index) {
		return this.__group.getTileAt(index);
	}
	,getTileIndex: function(tile) {
		return this.__group.getTileIndex(tile);
	}
	,getTiles: function() {
		return this.__group.clone();
	}
	,removeTile: function(tile) {
		return this.__group.removeTile(tile);
	}
	,removeTileAt: function(index) {
		return this.__group.removeTileAt(index);
	}
	,removeTiles: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		this.__group.removeTiles(beginIndex,endIndex);
	}
	,setTileIndex: function(tile,index) {
		this.__group.setTileIndex(tile,index);
	}
	,setTiles: function(group) {
		var _g = 0;
		var _g1 = this.__group.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			this.removeTile(tile);
		}
		var _g = 0;
		var _g1 = group.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			this.addTile(tile);
		}
	}
	,sortTiles: function(compareFunction) {
		this.__group.sortTiles(compareFunction);
	}
	,swapTiles: function(tile1,tile2) {
		this.__group.swapTiles(tile1,tile2);
	}
	,swapTilesAt: function(index1,index2) {
		this.__group.swapTilesAt(index1,index2);
	}
	,__enterFrame: function(deltaTime) {
		if(this.__group.__dirty) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.setTo(0,0,this.__width,this.__height);
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(px > 0 && py > 0 && px <= this.__width && py <= this.__height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__renderFlash: function() {
	}
	,get_height: function() {
		return this.__height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		this.__height = value | 0;
		return this.__height * Math.abs(this.get_scaleY());
	}
	,get_numTiles: function() {
		return this.__group.__length;
	}
	,get_tileset: function() {
		return this.__tileset;
	}
	,set_tileset: function(value) {
		if(value != this.__tileset) {
			this.__tileset = value;
			this.__group.set_tileset(value);
			this.__group.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_width: function() {
		return this.__width * Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		this.__width = value | 0;
		return this.__width * Math.abs(this.__scaleX);
	}
	,__class__: openfl_display_Tilemap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tileset:"set_tileset",get_tileset:"get_tileset",get_numTiles:"get_numTiles"})
});
var openfl_display_Tileset = function(bitmapData,rects) {
	this.__bitmapData = bitmapData;
	this.rectData = openfl_Vector.toFloatVector(null);
	this.__data = [];
	if(rects != null) {
		var _g = 0;
		while(_g < rects.length) {
			var rect = rects[_g];
			++_g;
			this.addRect(rect);
		}
	}
};
$hxClasses["openfl.display.Tileset"] = openfl_display_Tileset;
openfl_display_Tileset.__name__ = "openfl.display.Tileset";
openfl_display_Tileset.prototype = {
	rectData: null
	,__bitmapData: null
	,__data: null
	,addRect: function(rect) {
		if(rect == null) {
			return -1;
		}
		this.rectData.push(rect.x);
		this.rectData.push(rect.y);
		this.rectData.push(rect.width);
		this.rectData.push(rect.height);
		var tileData = new openfl_display__$Tileset_TileData(rect);
		tileData.__update(this.__bitmapData);
		this.__data.push(tileData);
		return this.__data.length - 1;
	}
	,clone: function() {
		var tileset = new openfl_display_Tileset(this.__bitmapData,null);
		var rect = openfl_geom_Rectangle.__pool.get();
		var _g = 0;
		var _g1 = this.__data;
		while(_g < _g1.length) {
			var tileData = _g1[_g];
			++_g;
			rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
			tileset.addRect(rect);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		return tileset;
	}
	,hasRect: function(rect) {
		var _g = 0;
		var _g1 = this.__data;
		while(_g < _g1.length) {
			var tileData = _g1[_g];
			++_g;
			if(rect.x == tileData.x && rect.y == tileData.y && rect.width == tileData.width && rect.height == tileData.height) {
				return true;
			}
		}
		return false;
	}
	,getRect: function(id) {
		if(id < this.__data.length && id >= 0) {
			return new openfl_geom_Rectangle(this.__data[id].x,this.__data[id].y,this.__data[id].width,this.__data[id].height);
		}
		return null;
	}
	,getRectID: function(rect) {
		var tileData;
		var _g = 0;
		var _g1 = this.__data.length;
		while(_g < _g1) {
			var i = _g++;
			tileData = this.__data[i];
			if(rect.x == tileData.x && rect.y == tileData.y && rect.width == tileData.width && rect.height == tileData.height) {
				return i;
			}
		}
		return null;
	}
	,get_bitmapData: function() {
		return this.__bitmapData;
	}
	,set_bitmapData: function(value) {
		this.__bitmapData = value;
		var _g = 0;
		var _g1 = this.__data;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			data.__update(this.__bitmapData);
		}
		return value;
	}
	,get_numRects: function() {
		return this.__data.length;
	}
	,__class__: openfl_display_Tileset
	,__properties__: {get_numRects:"get_numRects",set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"}
};
var openfl_display__$Tileset_TileData = function(rect) {
	if(rect != null) {
		this.x = rect.x | 0;
		this.y = rect.y | 0;
		this.width = rect.width | 0;
		this.height = rect.height | 0;
	}
};
$hxClasses["openfl.display._Tileset.TileData"] = openfl_display__$Tileset_TileData;
openfl_display__$Tileset_TileData.__name__ = "openfl.display._Tileset.TileData";
openfl_display__$Tileset_TileData.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,__bitmapData: null
	,__uvHeight: null
	,__uvWidth: null
	,__uvX: null
	,__uvY: null
	,__update: function(bitmapData) {
		if(bitmapData != null) {
			var bitmapWidth = bitmapData.width;
			var bitmapHeight = bitmapData.height;
			this.__uvX = this.x / bitmapWidth;
			this.__uvY = this.y / bitmapHeight;
			this.__uvWidth = (this.x + this.width) / bitmapWidth;
			this.__uvHeight = (this.y + this.height) / bitmapHeight;
		}
	}
	,__class__: openfl_display__$Tileset_TileData
};
var openfl_display_Timeline = function() {
	this.__framesLoaded = 1;
	this.__totalFrames = 1;
	this.__currentLabels = [];
	this.__currentFrame = 1;
	this.__lastFrameScriptEval = -1;
	this.__lastFrameUpdate = -1;
};
$hxClasses["openfl.display.Timeline"] = openfl_display_Timeline;
openfl_display_Timeline.__name__ = "openfl.display.Timeline";
openfl_display_Timeline.prototype = {
	frameRate: null
	,scenes: null
	,scripts: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__currentScene: null
	,__frameScripts: null
	,__framesLoaded: null
	,__frameTime: null
	,__isPlaying: null
	,__lastFrameScriptEval: null
	,__lastFrameUpdate: null
	,__scope: null
	,__timeElapsed: null
	,__totalFrames: null
	,attachMovieClip: function(movieClip) {
	}
	,enterFrame: function(frame) {
	}
	,initializeSprite: function(sprite) {
	}
	,__addFrameScript: function(index,method) {
		if(index < 0) {
			return;
		}
		var frame = index + 1;
		if(method != null) {
			if(this.__frameScripts == null) {
				this.__frameScripts = new haxe_ds_IntMap();
			}
			this.__frameScripts.h[frame] = function(scope) {
				method();
			};
		} else if(this.__frameScripts != null) {
			this.__frameScripts.remove(frame);
		}
	}
	,__attachMovieClip: function(movieClip) {
		this.__scope = movieClip;
		this.__totalFrames = 0;
		this.__framesLoaded = 0;
		if(this.scenes != null && this.scenes.length > 0) {
			var _g = 0;
			var _g1 = this.scenes;
			while(_g < _g1.length) {
				var scene = _g1[_g];
				++_g;
				this.__totalFrames += scene.numFrames;
				this.__framesLoaded += scene.numFrames;
				if(scene.labels != null) {
					this.__currentLabels = this.__currentLabels.concat(scene.labels);
				}
			}
			this.__currentScene = this.scenes[0];
		}
		if(this.scripts != null && this.scripts.length > 0) {
			this.__frameScripts = new haxe_ds_IntMap();
			var _g = 0;
			var _g1 = this.scripts;
			while(_g < _g1.length) {
				var script = _g1[_g];
				++_g;
				if(this.__frameScripts.h.hasOwnProperty(script.frame)) {
					var existing = [this.__frameScripts.h[script.frame]];
					var append = [script.script];
					this.__frameScripts.h[script.frame] = (function(append,existing) {
						return function(clip) {
							existing[0](clip);
							append[0](clip);
						};
					})(append,existing);
				} else {
					this.__frameScripts.h[script.frame] = script.script;
				}
			}
		}
		this.attachMovieClip(movieClip);
	}
	,__enterFrame: function(deltaTime) {
		if(this.__isPlaying) {
			var nextFrame = this.__getNextFrame(deltaTime);
			if(this.__lastFrameScriptEval == nextFrame) {
				return;
			}
			if(this.__frameScripts != null) {
				if(nextFrame < this.__currentFrame) {
					if(!this.__evaluateFrameScripts(this.__totalFrames)) {
						return;
					}
					this.__currentFrame = 1;
				}
				if(!this.__evaluateFrameScripts(nextFrame)) {
					return;
				}
			} else {
				this.__currentFrame = nextFrame;
			}
		}
		this.__updateSymbol(this.__currentFrame);
	}
	,__evaluateFrameScripts: function(advanceToFrame) {
		if(this.__frameScripts == null) {
			return true;
		}
		var _g = this.__currentFrame;
		var _g1 = advanceToFrame + 1;
		while(_g < _g1) {
			var frame = _g++;
			if(frame == this.__lastFrameScriptEval) {
				continue;
			}
			this.__lastFrameScriptEval = frame;
			this.__currentFrame = frame;
			if(this.__frameScripts.h.hasOwnProperty(frame)) {
				this.__updateSymbol(frame);
				var script = this.__frameScripts.h[frame];
				script(this.__scope);
				if(this.__currentFrame != frame) {
					return false;
				}
			}
			if(!this.__isPlaying) {
				return false;
			}
		}
		return true;
	}
	,__getNextFrame: function(deltaTime) {
		var nextFrame = 0;
		if(this.frameRate != null) {
			this.__timeElapsed += deltaTime;
			nextFrame = this.__currentFrame + Math.floor(this.__timeElapsed / this.__frameTime);
			if(nextFrame < 1) {
				nextFrame = 1;
			}
			if(nextFrame > this.__totalFrames) {
				nextFrame = Math.floor((nextFrame - 1) % this.__totalFrames) + 1;
			}
			this.__timeElapsed %= this.__frameTime;
		} else {
			nextFrame = this.__currentFrame + 1;
			if(nextFrame > this.__totalFrames) {
				nextFrame = 1;
			}
		}
		return nextFrame;
	}
	,__goto: function(frame) {
		if(frame < 1) {
			frame = 1;
		} else if(frame > this.__totalFrames) {
			frame = this.__totalFrames;
		}
		this.__lastFrameScriptEval = -1;
		this.__currentFrame = frame;
		this.__updateSymbol(this.__currentFrame);
		this.__evaluateFrameScripts(this.__currentFrame);
	}
	,__gotoAndPlay: function(frame,scene) {
		this.__play();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,__gotoAndStop: function(frame,scene) {
		this.__stop();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,__nextFrame: function() {
		this.__stop();
		this.__goto(this.__currentFrame + 1);
	}
	,__nextScene: function() {
	}
	,__play: function() {
		if(this.__isPlaying || this.__totalFrames < 2) {
			return;
		}
		this.__isPlaying = true;
		if(this.frameRate != null) {
			this.__frameTime = 1000 / this.frameRate | 0;
			this.__timeElapsed = 0;
		}
	}
	,__prevFrame: function() {
		this.__stop();
		this.__goto(this.__currentFrame - 1);
	}
	,__prevScene: function() {
	}
	,__stop: function() {
		this.__isPlaying = false;
	}
	,__resolveFrameReference: function(frame) {
		if(typeof(frame) == "number" && ((frame | 0) === frame)) {
			return frame;
		} else if(typeof(frame) == "string") {
			var label = frame;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var frameLabel = _g1[_g];
				++_g;
				if(frameLabel.name == label) {
					return frameLabel.frame;
				}
			}
			throw new openfl_errors_ArgumentError("Error #2109: Frame label " + label + " not found in scene.");
		} else {
			throw haxe_Exception.thrown("Invalid type for frame " + frame.__name__);
		}
	}
	,__updateFrameLabel: function() {
		this.__currentLabel = null;
		this.__currentFrameLabel = null;
		var _g = 0;
		var _g1 = this.__currentLabels;
		while(_g < _g1.length) {
			var label = _g1[_g];
			++_g;
			if(label.frame < this.__currentFrame) {
				this.__currentLabel = label.name;
			} else if(label.frame == this.__currentFrame) {
				this.__currentLabel = label.name;
				this.__currentFrameLabel = label.name;
			} else {
				break;
			}
		}
	}
	,__updateSymbol: function(targetFrame) {
		if(this.__currentFrame != this.__lastFrameUpdate) {
			this.__updateFrameLabel();
			this.enterFrame(targetFrame);
			this.__lastFrameUpdate = this.__currentFrame;
		}
	}
	,__class__: openfl_display_Timeline
};
var openfl_display_TriangleCulling = {};
openfl_display_TriangleCulling.fromString = function(value) {
	switch(value) {
	case "negative":
		return 0;
	case "none":
		return 1;
	case "positive":
		return 2;
	default:
		return null;
	}
};
openfl_display_TriangleCulling.toString = function(this1) {
	switch(this1) {
	case 0:
		return "negative";
	case 1:
		return "none";
	case 2:
		return "positive";
	default:
		return null;
	}
};
var openfl_display_Window = function(application,attributes) {
	lime_ui_Window.call(this,application,attributes);
	this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(attributes.context,"background") ? attributes.context.background : 16777215);
	if(Object.prototype.hasOwnProperty.call(attributes,"parameters")) {
		try {
			this.stage.get_loaderInfo().parameters = attributes.parameters;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
	}
	this.stage.__setLogicalSize(attributes.width,attributes.height);
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && !attributes.resizable) {
		this.stage.set_scaleMode(3);
	}
	application.addModule(this.stage);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = "openfl.display.Window";
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	close: function() {
		lime_ui_Window.prototype.close.call(this);
		if(this.onClose.canceled) {
			return;
		}
		if(this.stage == null) {
			return;
		}
		this.application.removeModule(this.stage);
		this.stage = null;
	}
	,__class__: openfl_display_Window
});
var openfl_display__$internal_AbstractNoise = function(seed,octaves,channels,grayScale,falloff,stitch,stitch_threshold) {
	if(stitch_threshold == null) {
		stitch_threshold = 0.05;
	}
	if(stitch == null) {
		stitch = false;
	}
	this.stitch = stitch;
	this.stitch_threshold = stitch_threshold;
	this.octaves = octaves;
	this.channels = channels;
	this.grayscale = grayScale;
	this.calculateOctaves(falloff);
};
$hxClasses["openfl.display._internal.AbstractNoise"] = openfl_display__$internal_AbstractNoise;
openfl_display__$internal_AbstractNoise.__name__ = "openfl.display._internal.AbstractNoise";
openfl_display__$internal_AbstractNoise.prototype = {
	octaves: null
	,stitch: null
	,stitch_threshold: null
	,channels: null
	,grayscale: null
	,octaves_frequencies: null
	,octaves_persistences: null
	,persistence_max: null
	,fill: function(bitmap,_scale_x,_scale_y,_scale_z) {
	}
	,stitching: function(bitmap,color,px,py,stitch_w,stitch_h,width,height) {
		var r = color >> 16 & 255;
		var g = color >> 8 & 255;
		var b = color & 255;
		if(width - stitch_w < px) {
			var dest = bitmap.getPixel32(width - px,py);
			var dest_r = dest >> 16 & 255;
			var dest_g = dest >> 8 & 255;
			var dest_b = dest & 255;
			var u = (width - px) / stitch_w;
			var uu = u * u;
			r = this.mixI(dest_r,r,u);
			g = this.mixI(dest_g,g,u);
			b = this.mixI(dest_b,b,u);
		}
		if(height - stitch_h < py) {
			var dest = bitmap.getPixel32(px,height - py);
			var dest_r = dest >> 16 & 255;
			var dest_g = dest >> 8 & 255;
			var dest_b = dest & 255;
			var u = (height - py) / stitch_h;
			var uu = u * u;
			r = this.mixI(dest_r,r,u);
			g = this.mixI(dest_g,g,u);
			b = this.mixI(dest_b,b,u);
		}
		return -16777216 | r << 16 | g << 8 | b;
	}
	,color: function(r_noise,g_noise,b_noise) {
		var color_r = 0;
		var color_g = 0;
		var color_b = 0;
		if(null != r_noise) {
			color_r = this.noiseToColor(r_noise);
		}
		if(null != g_noise) {
			color_g = this.noiseToColor(g_noise);
		}
		if(null != b_noise) {
			color_b = this.noiseToColor(b_noise);
		}
		return -16777216 | color_r << 16 | color_g << 8 | color_b;
	}
	,noiseToColor: function(noise) {
		return (noise * this.persistence_max + 1.0) * 128 | 0;
	}
	,fade: function(t) {
		return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
	}
	,mixI: function(x,y,t) {
		return (1.0 - t) * x + t * y | 0;
	}
	,mix: function(x,y,t) {
		return (1.0 - t) * x + t * y;
	}
	,fastfloor: function(x) {
		if(x > 0) {
			return x | 0;
		} else {
			return x - 1 | 0;
		}
	}
	,dot2d: function(grad,x,y) {
		return grad[0] * x + grad[1] * y;
	}
	,dot: function(grad,x,y,z) {
		return grad[0] * x + grad[1] * y + grad[2] * z;
	}
	,calculateOctaves: function(fPersistence) {
		var fFreq;
		var fPers;
		this.octaves_frequencies = [];
		this.octaves_persistences = [];
		this.persistence_max = 0;
		var _g = 0;
		var _g1 = this.octaves;
		while(_g < _g1) {
			var i = _g++;
			fFreq = Math.pow(2.0,i);
			fPers = Math.pow(fPersistence,i);
			this.persistence_max += fPers;
			this.octaves_frequencies.push(fFreq);
			this.octaves_persistences.push(fPers);
		}
		this.persistence_max = 1.0 / this.persistence_max;
	}
	,__class__: openfl_display__$internal_AbstractNoise
};
var openfl_display__$internal_CairoBitmap = function() { };
$hxClasses["openfl.display._internal.CairoBitmap"] = openfl_display__$internal_CairoBitmap;
openfl_display__$internal_CairoBitmap.__name__ = "openfl.display._internal.CairoBitmap";
openfl_display__$internal_CairoBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
	if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var cairo = renderer.cairo;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap);
		renderer.applyMatrix(bitmap.__renderTransform,cairo);
		var surface = bitmap.__bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo_CairoPattern.createForSurface(surface);
			lime_graphics_cairo_CairoPattern.set_filter(pattern,renderer.__allowSmoothing && bitmap.smoothing ? 1 : 3);
			cairo.set_source(pattern);
			if(alpha == 1) {
				cairo.paint();
			} else {
				cairo.paintWithAlpha(alpha);
			}
		}
		renderer.__popMaskObject(bitmap);
		renderer.__setBlendMode(10);
	}
};
openfl_display__$internal_CairoBitmap.renderDrawable = function(bitmap,renderer) {
};
openfl_display__$internal_CairoBitmap.renderDrawableMask = function(bitmap,renderer) {
	renderer.cairo.rectangle(0,0,bitmap.get_width(),bitmap.get_height());
};
var openfl_display__$internal_CairoBitmapData = function() { };
$hxClasses["openfl.display._internal.CairoBitmapData"] = openfl_display__$internal_CairoBitmapData;
openfl_display__$internal_CairoBitmapData.__name__ = "openfl.display._internal.CairoBitmapData";
openfl_display__$internal_CairoBitmapData.renderDrawable = function(bitmapData,renderer) {
};
openfl_display__$internal_CairoBitmapData.renderDrawableMask = function(tilemap,renderer) {
};
var openfl_display__$internal_CairoDisplayObject = function() { };
$hxClasses["openfl.display._internal.CairoDisplayObject"] = openfl_display__$internal_CairoDisplayObject;
openfl_display__$internal_CairoDisplayObject.__name__ = "openfl.display._internal.CairoDisplayObject";
openfl_display__$internal_CairoDisplayObject.render = function(displayObject,renderer) {
};
openfl_display__$internal_CairoDisplayObject.renderDrawable = function(displayObject,renderer) {
};
openfl_display__$internal_CairoDisplayObject.renderDrawableMask = function(displayObject,renderer) {
};
var openfl_display__$internal_CairoDisplayObjectContainer = function() { };
$hxClasses["openfl.display._internal.CairoDisplayObjectContainer"] = openfl_display__$internal_CairoDisplayObjectContainer;
openfl_display__$internal_CairoDisplayObjectContainer.__name__ = "openfl.display._internal.CairoDisplayObjectContainer";
openfl_display__$internal_CairoDisplayObjectContainer.renderDrawable = function(displayObjectContainer,renderer) {
};
openfl_display__$internal_CairoDisplayObjectContainer.renderDrawableMask = function(displayObjectContainer,renderer) {
};
var openfl_display__$internal_CairoGraphics = function() { };
$hxClasses["openfl.display._internal.CairoGraphics"] = openfl_display__$internal_CairoGraphics;
openfl_display__$internal_CairoGraphics.__name__ = "openfl.display._internal.CairoGraphics";
openfl_display__$internal_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl_display__$internal_CairoGraphics.render = function(graphics,renderer) {
};
openfl_display__$internal_CairoGraphics.renderMask = function(graphics,renderer) {
};
var openfl_display__$internal_CairoShape = function() { };
$hxClasses["openfl.display._internal.CairoShape"] = openfl_display__$internal_CairoShape;
openfl_display__$internal_CairoShape.__name__ = "openfl.display._internal.CairoShape";
openfl_display__$internal_CairoShape.render = function(shape,renderer) {
};
openfl_display__$internal_CairoShape.renderDrawable = function(shape,renderer) {
};
openfl_display__$internal_CairoShape.renderDrawableMask = function(shape,renderer) {
};
var openfl_display__$internal_CairoSimpleButton = function() { };
$hxClasses["openfl.display._internal.CairoSimpleButton"] = openfl_display__$internal_CairoSimpleButton;
openfl_display__$internal_CairoSimpleButton.__name__ = "openfl.display._internal.CairoSimpleButton";
openfl_display__$internal_CairoSimpleButton.renderDrawable = function(simpleButton,renderer) {
	if(!simpleButton.__renderable || simpleButton.__worldAlpha <= 0 || simpleButton.__currentState == null) {
		return;
	}
	renderer.__pushMaskObject(simpleButton);
	renderer.__renderDrawable(simpleButton.__currentState);
	renderer.__popMaskObject(simpleButton);
	renderer.__renderEvent(simpleButton);
};
openfl_display__$internal_CairoSimpleButton.renderDrawableMask = function(simpleButton,renderer) {
	renderer.__renderDrawableMask(simpleButton.__currentState);
};
var openfl_display__$internal_CairoTextField = function() { };
$hxClasses["openfl.display._internal.CairoTextField"] = openfl_display__$internal_CairoTextField;
openfl_display__$internal_CairoTextField.__name__ = "openfl.display._internal.CairoTextField";
openfl_display__$internal_CairoTextField.render = function(textField,renderer,transform) {
};
openfl_display__$internal_CairoTextField.renderDrawable = function(textField,renderer) {
};
openfl_display__$internal_CairoTextField.renderDrawableMask = function(textField,renderer) {
};
var openfl_display__$internal_CairoTilemap = function() { };
$hxClasses["openfl.display._internal.CairoTilemap"] = openfl_display__$internal_CairoTilemap;
openfl_display__$internal_CairoTilemap.__name__ = "openfl.display._internal.CairoTilemap";
openfl_display__$internal_CairoTilemap.render = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__group.__tiles.length == 0) {
		return;
	}
	var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	renderer.__setBlendMode(tilemap.__worldBlendMode);
	renderer.__pushMaskObject(tilemap);
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderer.__pushMaskRect(rect,tilemap.__renderTransform);
	openfl_display__$internal_CairoTilemap.renderTileContainer(tilemap.__group,renderer,tilemap.__renderTransform,tilemap.__tileset,renderer.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,null,rect,new lime_math_Matrix3());
	renderer.__popMaskRect();
	renderer.__popMaskObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
};
openfl_display__$internal_CairoTilemap.renderTileContainer = function(group,renderer,parentTransform,defaultTileset,smooth,alphaEnabled,worldAlpha,blendModeEnabled,defaultBlendMode,cacheBitmapData,surface,pattern,rect,matrix) {
	var cairo = renderer.cairo;
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var tiles = group.__tiles;
	var tile;
	var tileset;
	var alpha;
	var visible;
	var blendMode = null;
	var id;
	var tileData;
	var tileRect;
	var bitmapData;
	var _g = 0;
	while(_g < tiles.length) {
		var tile = tiles[_g];
		++_g;
		tileTransform.setTo(1,0,0,1,-tile.get_originX(),-tile.get_originY());
		tileTransform.concat(tile.get_matrix());
		tileTransform.concat(parentTransform);
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		if(!alphaEnabled) {
			alpha = 1;
		}
		if(blendModeEnabled) {
			blendMode = tile.__blendMode != null ? tile.__blendMode : defaultBlendMode;
		}
		if(tile.__length > 0) {
			openfl_display__$internal_CairoTilemap.renderTileContainer(tile,renderer,tileTransform,tileset,smooth,alphaEnabled,alpha,blendModeEnabled,blendMode,cacheBitmapData,surface,pattern,rect,matrix);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
				rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
				tileRect = rect;
			}
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null || bitmapData.image == null) {
				continue;
			}
			if(bitmapData != cacheBitmapData) {
				surface = bitmapData.getSurface();
				pattern = lime_graphics_cairo_CairoPattern.createForSurface(surface);
				lime_graphics_cairo_CairoPattern.set_filter(pattern,smooth ? 1 : 3);
				cairo.set_source(pattern);
				cacheBitmapData = bitmapData;
			}
			if(blendModeEnabled) {
				renderer.__setBlendMode(blendMode);
			}
			renderer.applyMatrix(tileTransform,cairo);
			matrix.tx = tileRect.x;
			matrix.ty = tileRect.y;
			lime_graphics_cairo_CairoPattern.set_matrix(pattern,matrix);
			cairo.set_source(pattern);
			cairo.save();
			cairo.newPath();
			cairo.rectangle(0,0,tileRect.width,tileRect.height);
			cairo.clip();
			if(alpha == 1) {
				cairo.paint();
			} else {
				cairo.paintWithAlpha(alpha);
			}
			cairo.restore();
		}
	}
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl_display__$internal_CairoTilemap.renderDrawable = function(tilemap,renderer) {
};
openfl_display__$internal_CairoTilemap.renderDrawableMask = function(tilemap,renderer) {
};
var openfl_display__$internal_CanvasBitmap = function() { };
$hxClasses["openfl.display._internal.CanvasBitmap"] = openfl_display__$internal_CanvasBitmap;
openfl_display__$internal_CanvasBitmap.__name__ = "openfl.display._internal.CanvasBitmap";
openfl_display__$internal_CanvasBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
	if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
		var context = renderer.context;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap,false);
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		context.globalAlpha = alpha;
		var scrollRect = bitmap.__scrollRect;
		renderer.setTransform(bitmap.__renderTransform,context);
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
		} else {
			context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			context.imageSmoothingEnabled = true;
		}
		renderer.__popMaskObject(bitmap,false);
	}
};
openfl_display__$internal_CanvasBitmap.renderDrawable = function(bitmap,renderer) {
	renderer.__updateCacheBitmap(bitmap,false);
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.image != null) {
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	if(bitmap.__cacheBitmap != null && !bitmap.__isCacheBitmapRender) {
		var bitmap1 = bitmap.__cacheBitmap;
		if(bitmap1.__renderable) {
			var alpha = renderer.__getAlpha(bitmap1.__worldAlpha);
			if(alpha > 0 && bitmap1.__bitmapData != null && bitmap1.__bitmapData.__isValid && bitmap1.__bitmapData.readable) {
				var context = renderer.context;
				renderer.__setBlendMode(bitmap1.__worldBlendMode);
				renderer.__pushMaskObject(bitmap1,false);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap1.__bitmapData.image);
				context.globalAlpha = alpha;
				var scrollRect = bitmap1.__scrollRect;
				renderer.setTransform(bitmap1.__renderTransform,context);
				if(!renderer.__allowSmoothing || !bitmap1.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				if(scrollRect == null) {
					context.drawImage(bitmap1.__bitmapData.image.get_src(),0,0,bitmap1.__bitmapData.image.width,bitmap1.__bitmapData.image.height);
				} else {
					context.drawImage(bitmap1.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				}
				if(!renderer.__allowSmoothing || !bitmap1.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer.__popMaskObject(bitmap1,false);
			}
		}
	} else {
		if(!(bitmap.opaqueBackground == null && bitmap.__graphics == null)) {
			if(bitmap.__renderable) {
				var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
				if(!(alpha <= 0)) {
					if(bitmap.opaqueBackground != null && !bitmap.__isCacheBitmapRender && bitmap.get_width() > 0 && bitmap.get_height() > 0) {
						renderer.__setBlendMode(bitmap.__worldBlendMode);
						renderer.__pushMaskObject(bitmap);
						var context = renderer.context;
						renderer.setTransform(bitmap.__renderTransform,context);
						var color = bitmap.opaqueBackground;
						context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
						context.fillRect(0,0,bitmap.get_width(),bitmap.get_height());
						renderer.__popMaskObject(bitmap);
					}
					if(bitmap.__graphics != null) {
						if(bitmap.__renderable) {
							var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
							if(!(alpha <= 0)) {
								var graphics = bitmap.__graphics;
								if(graphics != null) {
									openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
									var width = graphics.__width;
									var height = graphics.__height;
									var canvas = graphics.__canvas;
									if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
										var transform = graphics.__worldTransform;
										var context = renderer.context;
										var scrollRect = bitmap.__scrollRect;
										var scale9Grid = bitmap.__worldScale9Grid;
										if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
											renderer.__setBlendMode(bitmap.__worldBlendMode);
											renderer.__pushMaskObject(bitmap);
											context.globalAlpha = alpha;
											if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
												var pixelRatio = renderer.__pixelRatio;
												var matrix = openfl_geom_Matrix.__pool.get();
												matrix.translate(transform.tx,transform.ty);
												renderer.setTransform(matrix,context);
												openfl_geom_Matrix.__pool.release(matrix);
												var bounds = graphics.__bounds;
												var scaleX = graphics.__renderTransform.a / graphics.__bitmapScale;
												var scaleY = graphics.__renderTransform.d / graphics.__bitmapScale;
												var renderScaleX = scaleX * transform.a;
												var renderScaleY = scaleY * transform.d;
												var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
												var top = Math.round(scale9Grid.y * scaleY);
												var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
												var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
												var centerWidth = Math.round(scale9Grid.width * scaleX);
												var centerHeight = Math.round(scale9Grid.height * scaleY);
												var renderLeft = Math.round(left / pixelRatio);
												var renderTop = Math.round(top / pixelRatio);
												var renderRight = Math.round(right / pixelRatio);
												var renderBottom = Math.round(bottom / pixelRatio);
												var renderCenterWidth = bounds.width * renderScaleX - renderLeft - renderRight;
												var renderCenterHeight = bounds.height * renderScaleY - renderTop - renderBottom;
												renderer.applySmoothing(context,false);
												if(centerWidth != 0 && centerHeight != 0) {
													context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
													context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
													context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
													context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
													context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
													context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
													context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
													context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
												} else if(centerWidth == 0 && centerHeight != 0) {
													var renderWidth = renderLeft + renderCenterWidth + renderRight;
													context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
													context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
												} else if(centerHeight == 0 && centerWidth != 0) {
													var renderHeight = renderTop + renderCenterHeight + renderBottom;
													context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
													context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
													context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
												}
											} else {
												renderer.setTransform(transform,context);
												context.drawImage(canvas,0,0,width,height);
											}
											renderer.__popMaskObject(bitmap);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if(bitmap.__renderable) {
			var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
			if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				var context = renderer.context;
				renderer.__setBlendMode(bitmap.__worldBlendMode);
				renderer.__pushMaskObject(bitmap,false);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
				context.globalAlpha = alpha;
				var scrollRect = bitmap.__scrollRect;
				renderer.setTransform(bitmap.__renderTransform,context);
				if(!renderer.__allowSmoothing || !bitmap.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				if(scrollRect == null) {
					context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
				} else {
					context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				}
				if(!renderer.__allowSmoothing || !bitmap.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer.__popMaskObject(bitmap,false);
			}
		}
	}
	renderer.__renderEvent(bitmap);
};
openfl_display__$internal_CanvasBitmap.renderDrawableMask = function(bitmap,renderer) {
	renderer.context.rect(0,0,bitmap.get_width(),bitmap.get_height());
};
var openfl_display__$internal_CanvasBitmapData = function() { };
$hxClasses["openfl.display._internal.CanvasBitmapData"] = openfl_display__$internal_CanvasBitmapData;
openfl_display__$internal_CanvasBitmapData.__name__ = "openfl.display._internal.CanvasBitmapData";
openfl_display__$internal_CanvasBitmapData.renderDrawable = function(bitmapData,renderer) {
	if(!bitmapData.readable) {
		return;
	}
	var image = bitmapData.image;
	if(image.type == lime_graphics_ImageType.DATA) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	}
	var context = renderer.context;
	context.globalAlpha = 1;
	renderer.setTransform(bitmapData.__renderTransform,context);
	context.drawImage(image.get_src(),0,0,image.width,image.height);
};
openfl_display__$internal_CanvasBitmapData.renderDrawableMask = function(bitmapData,renderer) {
};
var openfl_display__$internal_CanvasDisplayObject = function() { };
$hxClasses["openfl.display._internal.CanvasDisplayObject"] = openfl_display__$internal_CanvasDisplayObject;
openfl_display__$internal_CanvasDisplayObject.__name__ = "openfl.display._internal.CanvasDisplayObject";
openfl_display__$internal_CanvasDisplayObject.render = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(displayObject.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderer.__setBlendMode(displayObject.__worldBlendMode);
		renderer.__pushMaskObject(displayObject);
		var context = renderer.context;
		renderer.setTransform(displayObject.__renderTransform,context);
		var color = displayObject.opaqueBackground;
		context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
		context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
		renderer.__popMaskObject(displayObject);
	}
	if(displayObject.__graphics != null) {
		if(displayObject.__renderable) {
			var alpha = renderer.__getAlpha(displayObject.__worldAlpha);
			if(!(alpha <= 0)) {
				var graphics = displayObject.__graphics;
				if(graphics != null) {
					openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
					var width = graphics.__width;
					var height = graphics.__height;
					var canvas = graphics.__canvas;
					if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
						var transform = graphics.__worldTransform;
						var context = renderer.context;
						var scrollRect = displayObject.__scrollRect;
						var scale9Grid = displayObject.__worldScale9Grid;
						if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
							renderer.__setBlendMode(displayObject.__worldBlendMode);
							renderer.__pushMaskObject(displayObject);
							context.globalAlpha = alpha;
							if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
								var pixelRatio = renderer.__pixelRatio;
								var matrix = openfl_geom_Matrix.__pool.get();
								matrix.translate(transform.tx,transform.ty);
								renderer.setTransform(matrix,context);
								openfl_geom_Matrix.__pool.release(matrix);
								var bounds = graphics.__bounds;
								var scaleX = graphics.__renderTransform.a / graphics.__bitmapScale;
								var scaleY = graphics.__renderTransform.d / graphics.__bitmapScale;
								var renderScaleX = scaleX * transform.a;
								var renderScaleY = scaleY * transform.d;
								var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
								var top = Math.round(scale9Grid.y * scaleY);
								var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
								var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
								var centerWidth = Math.round(scale9Grid.width * scaleX);
								var centerHeight = Math.round(scale9Grid.height * scaleY);
								var renderLeft = Math.round(left / pixelRatio);
								var renderTop = Math.round(top / pixelRatio);
								var renderRight = Math.round(right / pixelRatio);
								var renderBottom = Math.round(bottom / pixelRatio);
								var renderCenterWidth = bounds.width * renderScaleX - renderLeft - renderRight;
								var renderCenterHeight = bounds.height * renderScaleY - renderTop - renderBottom;
								renderer.applySmoothing(context,false);
								if(centerWidth != 0 && centerHeight != 0) {
									context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
									context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
									context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
									context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
									context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
									context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
									context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
									context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
									context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
								} else if(centerWidth == 0 && centerHeight != 0) {
									var renderWidth = renderLeft + renderCenterWidth + renderRight;
									context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
									context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
									context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
								} else if(centerHeight == 0 && centerWidth != 0) {
									var renderHeight = renderTop + renderCenterHeight + renderBottom;
									context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
									context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
									context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
								}
							} else {
								renderer.setTransform(transform,context);
								context.drawImage(canvas,0,0,width,height);
							}
							renderer.__popMaskObject(displayObject);
						}
					}
				}
			}
		}
	}
};
openfl_display__$internal_CanvasDisplayObject.renderDrawable = function(displayObject,renderer) {
	if(displayObject.get_mask() == null || displayObject.get_mask().get_width() > 0 && displayObject.get_mask().get_height() > 0) {
		renderer.__updateCacheBitmap(displayObject,false);
		if(displayObject.__cacheBitmap != null && !displayObject.__isCacheBitmapRender) {
			var bitmap = displayObject.__cacheBitmap;
			if(bitmap.__renderable) {
				var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
				if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
					var context = renderer.context;
					renderer.__setBlendMode(bitmap.__worldBlendMode);
					renderer.__pushMaskObject(bitmap,false);
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
					context.globalAlpha = alpha;
					var scrollRect = bitmap.__scrollRect;
					renderer.setTransform(bitmap.__renderTransform,context);
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = false;
					}
					if(scrollRect == null) {
						context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
					} else {
						context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
					}
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = true;
					}
					renderer.__popMaskObject(bitmap,false);
				}
			}
		} else if(!(displayObject.opaqueBackground == null && displayObject.__graphics == null)) {
			if(displayObject.__renderable) {
				var alpha = renderer.__getAlpha(displayObject.__worldAlpha);
				if(!(alpha <= 0)) {
					if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
						renderer.__setBlendMode(displayObject.__worldBlendMode);
						renderer.__pushMaskObject(displayObject);
						var context = renderer.context;
						renderer.setTransform(displayObject.__renderTransform,context);
						var color = displayObject.opaqueBackground;
						context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
						context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
						renderer.__popMaskObject(displayObject);
					}
					if(displayObject.__graphics != null) {
						if(displayObject.__renderable) {
							var alpha = renderer.__getAlpha(displayObject.__worldAlpha);
							if(!(alpha <= 0)) {
								var graphics = displayObject.__graphics;
								if(graphics != null) {
									openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
									var width = graphics.__width;
									var height = graphics.__height;
									var canvas = graphics.__canvas;
									if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
										var transform = graphics.__worldTransform;
										var context = renderer.context;
										var scrollRect = displayObject.__scrollRect;
										var scale9Grid = displayObject.__worldScale9Grid;
										if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
											renderer.__setBlendMode(displayObject.__worldBlendMode);
											renderer.__pushMaskObject(displayObject);
											context.globalAlpha = alpha;
											if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
												var pixelRatio = renderer.__pixelRatio;
												var matrix = openfl_geom_Matrix.__pool.get();
												matrix.translate(transform.tx,transform.ty);
												renderer.setTransform(matrix,context);
												openfl_geom_Matrix.__pool.release(matrix);
												var bounds = graphics.__bounds;
												var scaleX = graphics.__renderTransform.a / graphics.__bitmapScale;
												var scaleY = graphics.__renderTransform.d / graphics.__bitmapScale;
												var renderScaleX = scaleX * transform.a;
												var renderScaleY = scaleY * transform.d;
												var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
												var top = Math.round(scale9Grid.y * scaleY);
												var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
												var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
												var centerWidth = Math.round(scale9Grid.width * scaleX);
												var centerHeight = Math.round(scale9Grid.height * scaleY);
												var renderLeft = Math.round(left / pixelRatio);
												var renderTop = Math.round(top / pixelRatio);
												var renderRight = Math.round(right / pixelRatio);
												var renderBottom = Math.round(bottom / pixelRatio);
												var renderCenterWidth = bounds.width * renderScaleX - renderLeft - renderRight;
												var renderCenterHeight = bounds.height * renderScaleY - renderTop - renderBottom;
												renderer.applySmoothing(context,false);
												if(centerWidth != 0 && centerHeight != 0) {
													context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
													context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
													context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
													context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
													context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
													context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
													context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
													context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
												} else if(centerWidth == 0 && centerHeight != 0) {
													var renderWidth = renderLeft + renderCenterWidth + renderRight;
													context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
													context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
												} else if(centerHeight == 0 && centerWidth != 0) {
													var renderHeight = renderTop + renderCenterHeight + renderBottom;
													context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
													context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
													context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
												}
											} else {
												renderer.setTransform(transform,context);
												context.drawImage(canvas,0,0,width,height);
											}
											renderer.__popMaskObject(displayObject);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	renderer.__renderEvent(displayObject);
};
openfl_display__$internal_CanvasDisplayObject.renderDrawableMask = function(displayObject,renderer) {
	if(displayObject.__graphics != null) {
		openfl_display__$internal_CanvasGraphics.renderMask(displayObject.__graphics,renderer);
	}
};
var openfl_display__$internal_CanvasDisplayObjectContainer = function() { };
$hxClasses["openfl.display._internal.CanvasDisplayObjectContainer"] = openfl_display__$internal_CanvasDisplayObjectContainer;
openfl_display__$internal_CanvasDisplayObjectContainer.__name__ = "openfl.display._internal.CanvasDisplayObjectContainer";
openfl_display__$internal_CanvasDisplayObjectContainer.renderDrawable = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	if(!displayObjectContainer.__renderable || displayObjectContainer.__worldAlpha <= 0 || displayObjectContainer.get_mask() != null && (displayObjectContainer.get_mask().get_width() <= 0 || displayObjectContainer.get_mask().get_height() <= 0)) {
		return;
	}
	openfl_display__$internal_CanvasDisplayObject.renderDrawable(displayObjectContainer,renderer);
	if(displayObjectContainer.__cacheBitmap != null && !displayObjectContainer.__isCacheBitmapRender) {
		return;
	}
	renderer.__pushMaskObject(displayObjectContainer);
	if(renderer.__stage != null) {
		var _g = 0;
		var _g1 = displayObjectContainer.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			renderer.__renderDrawable(child);
			child.__renderDirty = false;
		}
		displayObjectContainer.__renderDirty = false;
	} else {
		var _g = 0;
		var _g1 = displayObjectContainer.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			renderer.__renderDrawable(child);
		}
	}
	renderer.__popMaskObject(displayObjectContainer);
};
openfl_display__$internal_CanvasDisplayObjectContainer.renderDrawableMask = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	if(displayObjectContainer.__graphics != null) {
		openfl_display__$internal_CanvasGraphics.renderMask(displayObjectContainer.__graphics,renderer);
	}
	var _g = 0;
	var _g1 = displayObjectContainer.__children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		renderer.__renderDrawableMask(child);
	}
};
var openfl_display__$internal_DrawCommandBuffer = function() {
	if(openfl_display__$internal_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else {
		this.clear();
	}
};
$hxClasses["openfl.display._internal.DrawCommandBuffer"] = openfl_display__$internal_DrawCommandBuffer;
openfl_display__$internal_DrawCommandBuffer.__name__ = "openfl.display._internal.DrawCommandBuffer";
openfl_display__$internal_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,copyOnWrite: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl_display__$internal_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 0:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
				var c = data;
				this.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				break;
			case 1:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
				var c1 = data;
				this.beginFill(c1.buffer.i[c1.iPos],c1.buffer.f[c1.fPos]);
				break;
			case 2:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL;
				var c2 = data;
				this.beginGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				break;
			case 3:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
				var c3 = data;
				this.beginShaderFill(c3.buffer.o[c3.oPos]);
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
				var c4 = data;
				this.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
				var c5 = data;
				this.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
				var c6 = data;
				this.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
				var c7 = data;
				this.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
				var c8 = data;
				this.drawQuads(c8.buffer.o[c8.oPos],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2]);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
				var c9 = data;
				this.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
				var c10 = data;
				this.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
				break;
			case 12:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
				var c11 = data;
				this.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3]);
				break;
			case 13:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.END_FILL;
				var c12 = data;
				this.endFill();
				break;
			case 14:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE;
				var c13 = data;
				this.lineBitmapStyle(c13.buffer.o[c13.oPos],c13.buffer.o[c13.oPos + 1],c13.buffer.b[c13.bPos],c13.buffer.b[c13.bPos + 1]);
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE;
				var c14 = data;
				this.lineGradientStyle(c14.buffer.o[c14.oPos],c14.buffer.ii[c14.iiPos],c14.buffer.ff[c14.ffPos],c14.buffer.ii[c14.iiPos + 1],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.f[c14.fPos]);
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_STYLE;
				var c15 = data;
				this.lineStyle(c15.buffer.o[c15.oPos],c15.buffer.i[c15.iPos],c15.buffer.f[c15.fPos],c15.buffer.b[c15.bPos],c15.buffer.o[c15.oPos + 1],c15.buffer.o[c15.oPos + 2],c15.buffer.o[c15.oPos + 3],c15.buffer.f[c15.fPos + 1]);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
				var c16 = data;
				this.lineTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
				var c17 = data;
				this.moveTo(c17.buffer.f[c17.fPos],c17.buffer.f[c17.fPos + 1]);
				break;
			case 20:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.OVERRIDE_MATRIX;
				var c18 = data;
				this.overrideMatrix(c18.buffer.o[c18.oPos]);
				break;
			case 21:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.WINDING_EVEN_ODD;
				var c19 = data;
				this.windingEvenOdd();
				break;
			case 22:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.WINDING_NON_ZERO;
				var c20 = data;
				this.windingNonZero();
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,beginShaderFill: function(shaderBuffer) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL);
		this.o.push(shaderBuffer);
	}
	,clear: function() {
		this.types = openfl_display__$internal_DrawCommandBuffer.empty.types;
		this.b = openfl_display__$internal_DrawCommandBuffer.empty.b;
		this.i = openfl_display__$internal_DrawCommandBuffer.empty.i;
		this.f = openfl_display__$internal_DrawCommandBuffer.empty.f;
		this.o = openfl_display__$internal_DrawCommandBuffer.empty.o;
		this.ff = openfl_display__$internal_DrawCommandBuffer.empty.ff;
		this.ii = openfl_display__$internal_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl_display__$internal_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawQuads: function(rects,indices,transforms) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_QUADS);
		this.o.push(rects);
		this.o.push(indices);
		this.o.push(transforms);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideBlendMode: function(blendMode) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.OVERRIDE_BLEND_MODE);
		this.o.push(blendMode);
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,windingEvenOdd: function() {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.WINDING_EVEN_ODD);
	}
	,windingNonZero: function() {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.WINDING_NON_ZERO);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl_display__$internal_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl_display__$internal_CanvasGraphics = function() { };
$hxClasses["openfl.display._internal.CanvasGraphics"] = openfl_display__$internal_CanvasGraphics;
openfl_display__$internal_CanvasGraphics.__name__ = "openfl.display._internal.CanvasGraphics";
openfl_display__$internal_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl_display__$internal_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	if(!strokeBefore) {
		openfl_display__$internal_CanvasGraphics.context.closePath();
	}
	openfl_display__$internal_CanvasGraphics.context.stroke();
	if(strokeBefore) {
		openfl_display__$internal_CanvasGraphics.context.closePath();
	}
	openfl_display__$internal_CanvasGraphics.context.beginPath();
};
openfl_display__$internal_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl_display__$internal_CanvasGraphics.setSmoothing(smooth);
	return openfl_display__$internal_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat ? "repeat" : "no-repeat");
};
openfl_display__$internal_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		releaseMatrix = true;
	}
	switch(type) {
	case 0:
		gradientFill = openfl_display__$internal_CanvasGraphics.context.createLinearGradient(-819.2,0,819.2,0);
		openfl_display__$internal_CanvasGraphics.pendingMatrix = matrix.clone();
		openfl_display__$internal_CanvasGraphics.inversePendingMatrix = matrix.clone();
		openfl_display__$internal_CanvasGraphics.inversePendingMatrix.invert();
		break;
	case 1:
		var radius = 819.2;
		if(focalPointRatio > 1.0) {
			focalPointRatio = 1.0;
		} else if(focalPointRatio < -1.0) {
			focalPointRatio = -1.0;
		}
		gradientFill = openfl_display__$internal_CanvasGraphics.context.createRadialGradient(radius * focalPointRatio,0,0,0,0,radius);
		openfl_display__$internal_CanvasGraphics.pendingMatrix = matrix.clone();
		openfl_display__$internal_CanvasGraphics.inversePendingMatrix = matrix.clone();
		openfl_display__$internal_CanvasGraphics.inversePendingMatrix.invert();
		break;
	}
	var rgb;
	var alpha;
	var r;
	var g;
	var b;
	var ratio;
	var _g = 0;
	var _g1 = colors.length;
	while(_g < _g1) {
		var i = _g++;
		rgb = colors[i];
		alpha = alphas[i];
		r = (rgb & 16711680) >>> 16;
		g = (rgb & 65280) >>> 8;
		b = rgb & 255;
		ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	if(point != null) {
		openfl_geom_Point.__pool.release(point);
	}
	if(point2 != null) {
		openfl_geom_Point.__pool.release(point2);
	}
	if(releaseMatrix) {
		openfl_geom_Matrix.__pool.release(matrix);
	}
	return gradientFill;
};
openfl_display__$internal_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	var tmp = bitmap.image.get_src();
	context.fillStyle = context.createPattern(tmp,repeat ? "repeat" : "no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
		context.fill(openfl_display__$internal_CanvasGraphics.windingRule);
	}
	return canvas;
};
openfl_display__$internal_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * 0.70710678118654752440084436210485;
	var cx2 = -ellipseWidth + ellipseWidth * 0.4142135623730950488016887242097;
	var cy1 = -ellipseHeight + ellipseHeight * 0.70710678118654752440084436210485;
	var cy2 = -ellipseHeight + ellipseHeight * 0.4142135623730950488016887242097;
	openfl_display__$internal_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl_display__$internal_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl_display__$internal_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl_display__$internal_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl_display__$internal_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl_display__$internal_CanvasGraphics.endFill = function() {
	openfl_display__$internal_CanvasGraphics.context.beginPath();
	openfl_display__$internal_CanvasGraphics.playCommands(openfl_display__$internal_CanvasGraphics.fillCommands,false);
	openfl_display__$internal_CanvasGraphics.fillCommands.clear();
};
openfl_display__$internal_CanvasGraphics.endStroke = function() {
	openfl_display__$internal_CanvasGraphics.context.beginPath();
	openfl_display__$internal_CanvasGraphics.playCommands(openfl_display__$internal_CanvasGraphics.strokeCommands,true);
	openfl_display__$internal_CanvasGraphics.context.closePath();
	openfl_display__$internal_CanvasGraphics.strokeCommands.clear();
};
openfl_display__$internal_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl_display__$internal_CanvasGraphics.bounds = graphics.__bounds;
	openfl_display__$internal_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl_display__$internal_CanvasGraphics.bounds == null || openfl_display__$internal_CanvasGraphics.bounds.width <= 0 || openfl_display__$internal_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl_display__$internal_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = x * transform.a + y * transform.c + transform.tx;
		var py = x * transform.b + y * transform.d + transform.ty;
		x = px;
		y = py;
		x -= openfl_display__$internal_CanvasGraphics.bounds.x * transform.a + openfl_display__$internal_CanvasGraphics.bounds.y * transform.c + transform.tx;
		y -= openfl_display__$internal_CanvasGraphics.bounds.x * transform.b + openfl_display__$internal_CanvasGraphics.bounds.y * transform.d + transform.ty;
		var cacheCanvas = graphics.__canvas;
		var cacheContext = graphics.__context;
		graphics.__canvas = openfl_display__$internal_CanvasGraphics.hitTestCanvas;
		graphics.__context = openfl_display__$internal_CanvasGraphics.hitTestContext;
		openfl_display__$internal_CanvasGraphics.context = graphics.__context;
		openfl_display__$internal_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl_display__$internal_CanvasGraphics.fillCommands.clear();
		openfl_display__$internal_CanvasGraphics.strokeCommands.clear();
		openfl_display__$internal_CanvasGraphics.hasFill = false;
		openfl_display__$internal_CanvasGraphics.hasStroke = false;
		openfl_display__$internal_CanvasGraphics.bitmapFill = null;
		openfl_display__$internal_CanvasGraphics.bitmapRepeat = false;
		openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
		var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 0:case 1:case 2:case 3:
				openfl_display__$internal_CanvasGraphics.endFill();
				if(openfl_display__$internal_CanvasGraphics.hasFill && openfl_display__$internal_CanvasGraphics.context.isPointInPath(x,y,openfl_display__$internal_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl_display__$internal_CanvasGraphics.endStroke();
				if(openfl_display__$internal_CanvasGraphics.hasStroke && openfl_display__$internal_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				if(type == openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
					var c = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					openfl_display__$internal_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				} else if(type == openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL;
					var c1 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					openfl_display__$internal_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
				} else if(type == openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
					var c2 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
					openfl_display__$internal_CanvasGraphics.strokeCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
				} else {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
					var c3 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.beginFill(c3.buffer.i[c3.iPos],1);
					openfl_display__$internal_CanvasGraphics.strokeCommands.beginFill(c3.buffer.i[c3.iPos],1);
				}
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
				var c4 = data;
				openfl_display__$internal_CanvasGraphics.fillCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
				var c5 = data;
				openfl_display__$internal_CanvasGraphics.fillCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
				var c6 = data;
				openfl_display__$internal_CanvasGraphics.fillCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
				var c7 = data;
				openfl_display__$internal_CanvasGraphics.fillCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
				var c8 = data;
				openfl_display__$internal_CanvasGraphics.fillCommands.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
				var c9 = data;
				openfl_display__$internal_CanvasGraphics.fillCommands.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.o[c9.oPos]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.o[c9.oPos]);
				break;
			case 13:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.END_FILL;
				var this1 = data;
				openfl_display__$internal_CanvasGraphics.endFill();
				if(openfl_display__$internal_CanvasGraphics.hasFill && openfl_display__$internal_CanvasGraphics.context.isPointInPath(x,y,openfl_display__$internal_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl_display__$internal_CanvasGraphics.endStroke();
				if(openfl_display__$internal_CanvasGraphics.hasStroke && openfl_display__$internal_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl_display__$internal_CanvasGraphics.hasFill = false;
				openfl_display__$internal_CanvasGraphics.bitmapFill = null;
				break;
			case 14:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE;
				var c10 = data;
				openfl_display__$internal_CanvasGraphics.strokeCommands.lineBitmapStyle(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE;
				var c11 = data;
				openfl_display__$internal_CanvasGraphics.strokeCommands.lineGradientStyle(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_STYLE;
				var c12 = data;
				openfl_display__$internal_CanvasGraphics.strokeCommands.lineStyle(c12.buffer.o[c12.oPos],c12.buffer.i[c12.iPos],1,c12.buffer.b[c12.bPos],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos + 1]);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
				var c13 = data;
				openfl_display__$internal_CanvasGraphics.fillCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
				var c14 = data;
				openfl_display__$internal_CanvasGraphics.fillCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				break;
			case 21:
				openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
				break;
			case 22:
				openfl_display__$internal_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			}
		}
		var hitTest = false;
		if(openfl_display__$internal_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl_display__$internal_CanvasGraphics.endFill();
		}
		if(openfl_display__$internal_CanvasGraphics.hasFill && openfl_display__$internal_CanvasGraphics.context.isPointInPath(x,y,openfl_display__$internal_CanvasGraphics.windingRule)) {
			hitTest = true;
		}
		if(openfl_display__$internal_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl_display__$internal_CanvasGraphics.endStroke();
		}
		if(openfl_display__$internal_CanvasGraphics.hasStroke && openfl_display__$internal_CanvasGraphics.context.isPointInStroke(x,y)) {
			hitTest = true;
		}
		data.destroy();
		graphics.__canvas = cacheCanvas;
		graphics.__context = cacheContext;
		return hitTest;
	}
};
openfl_display__$internal_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl_display__$internal_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.get_length();
	var _g = 1;
	var _g1 = len + 1;
	while(_g < _g1) {
		var t = _g++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl_Vector.toFloatVector(null);
	var _g = 1;
	var _g1 = len + 1;
	while(_g < _g1) {
		var t = _g++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		result.push(uvt.get(t - 1));
	}
	return { max : max, uvt : result};
};
openfl_display__$internal_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl_display__$internal_CanvasGraphics.bounds = openfl_display__$internal_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl_display__$internal_CanvasGraphics.bounds.x;
	var offsetY = openfl_display__$internal_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
	openfl_display__$internal_CanvasGraphics.setSmoothing(true);
	var hasPath = false;
	var data = new openfl_display__$internal_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var kappa = .5522848;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var optimizationUsed;
	var canOptimizeMatrix;
	var st;
	var sr;
	var sb;
	var sl;
	var stl = null;
	var sbr = null;
	var _g = 0;
	var _g1 = commands.types;
	_hx_loop1: while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
			var c = data;
			openfl_display__$internal_CanvasGraphics.bitmapFill = c.buffer.o[c.oPos];
			openfl_display__$internal_CanvasGraphics.context.fillStyle = openfl_display__$internal_CanvasGraphics.createBitmapFill(c.buffer.o[c.oPos],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
			openfl_display__$internal_CanvasGraphics.hasFill = true;
			if(c.buffer.o[c.oPos + 1] != null) {
				openfl_display__$internal_CanvasGraphics.pendingMatrix = c.buffer.o[c.oPos + 1];
				openfl_display__$internal_CanvasGraphics.inversePendingMatrix = c.buffer.o[c.oPos + 1].clone();
				openfl_display__$internal_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl_display__$internal_CanvasGraphics.pendingMatrix = null;
				openfl_display__$internal_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
			var c1 = data;
			if(c1.buffer.f[c1.fPos] < 0.005) {
				openfl_display__$internal_CanvasGraphics.hasFill = false;
			} else {
				if(c1.buffer.f[c1.fPos] == 1) {
					var tmp = StringTools.hex(c1.buffer.i[c1.iPos] & 16777215,6);
					openfl_display__$internal_CanvasGraphics.context.fillStyle = "#" + tmp;
				} else {
					r = (c1.buffer.i[c1.iPos] & 16711680) >>> 16;
					g = (c1.buffer.i[c1.iPos] & 65280) >>> 8;
					b = c1.buffer.i[c1.iPos] & 255;
					openfl_display__$internal_CanvasGraphics.context.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c1.buffer.f[c1.fPos] + ")";
				}
				openfl_display__$internal_CanvasGraphics.bitmapFill = null;
				openfl_display__$internal_CanvasGraphics.setSmoothing(true);
				openfl_display__$internal_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL;
			var c2 = data;
			openfl_display__$internal_CanvasGraphics.context.fillStyle = openfl_display__$internal_CanvasGraphics.createGradientPattern(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
			openfl_display__$internal_CanvasGraphics.bitmapFill = null;
			openfl_display__$internal_CanvasGraphics.setSmoothing(true);
			openfl_display__$internal_CanvasGraphics.hasFill = true;
			break;
		case 3:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
			var c3 = data;
			var shaderBuffer = c3.buffer.o[c3.oPos];
			if(shaderBuffer.inputCount > 0) {
				openfl_display__$internal_CanvasGraphics.bitmapFill = shaderBuffer.inputs[0];
				openfl_display__$internal_CanvasGraphics.context.fillStyle = openfl_display__$internal_CanvasGraphics.createBitmapFill(openfl_display__$internal_CanvasGraphics.bitmapFill,shaderBuffer.inputWrap[0] != 0,shaderBuffer.inputFilter[0] != 5);
				openfl_display__$internal_CanvasGraphics.hasFill = true;
				openfl_display__$internal_CanvasGraphics.pendingMatrix = null;
				openfl_display__$internal_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 4:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
			var c4 = data;
			hasPath = true;
			openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2] - offsetX,c4.buffer.f[c4.fPos + 3] - offsetY,c4.buffer.f[c4.fPos + 4] - offsetX,c4.buffer.f[c4.fPos + 5] - offsetY);
			break;
		case 5:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
			var c5 = data;
			hasPath = true;
			openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2] - offsetX,c5.buffer.f[c5.fPos + 3] - offsetY);
			break;
		case 6:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
			var c6 = data;
			hasPath = true;
			openfl_display__$internal_CanvasGraphics.context.moveTo(c6.buffer.f[c6.fPos] - offsetX + c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 1] - offsetY);
			openfl_display__$internal_CanvasGraphics.context.arc(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY,c6.buffer.f[c6.fPos + 2],0,Math.PI * 2,true);
			break;
		case 7:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
			var c7 = data;
			hasPath = true;
			x = c7.buffer.f[c7.fPos];
			y = c7.buffer.f[c7.fPos + 1];
			width = c7.buffer.f[c7.fPos + 2];
			height = c7.buffer.f[c7.fPos + 3];
			x -= offsetX;
			y -= offsetY;
			ox = width / 2 * kappa;
			oy = height / 2 * kappa;
			xe = x + width;
			ye = y + height;
			xm = x + width / 2;
			ym = y + height / 2;
			openfl_display__$internal_CanvasGraphics.context.moveTo(x,ym);
			openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 8:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
			var c8 = data;
			var rects = c8.buffer.o[c8.oPos];
			var indices = c8.buffer.o[c8.oPos + 1];
			var transforms = c8.buffer.o[c8.oPos + 2];
			var hasIndices = indices != null;
			var transformABCD = false;
			var transformXY = false;
			var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
			if(length == 0) {
				return;
			}
			if(transforms != null) {
				if(transforms.get_length() >= length * 6) {
					transformABCD = true;
					transformXY = true;
				} else if(transforms.get_length() >= length * 4) {
					transformABCD = true;
				} else if(transforms.get_length() >= length * 2) {
					transformXY = true;
				}
			}
			var tileRect = openfl_geom_Rectangle.__pool.get();
			var tileTransform = openfl_geom_Matrix.__pool.get();
			var transform = openfl_display__$internal_CanvasGraphics.graphics.__renderTransform;
			var alpha = openfl_display__$internal_CanvasGraphics.worldAlpha;
			var ri;
			var ti;
			openfl_display__$internal_CanvasGraphics.context.save();
			var _g2 = 0;
			var _g3 = length;
			while(_g2 < _g3) {
				var i = _g2++;
				ri = hasIndices ? indices.get(i) * 4 : i * 4;
				if(ri < 0) {
					continue;
				}
				tileRect.setTo(rects.get(ri),rects.get(ri + 1),rects.get(ri + 2),rects.get(ri + 3));
				if(tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
				if(transformABCD && transformXY) {
					ti = i * 6;
					tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
				} else if(transformABCD) {
					ti = i * 4;
					tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
				} else if(transformXY) {
					ti = i * 2;
					tileTransform.tx = transforms.get(ti);
					tileTransform.ty = transforms.get(ti + 1);
				} else {
					tileTransform.tx = tileRect.x;
					tileTransform.ty = tileRect.y;
				}
				tileTransform.tx += positionX - offsetX;
				tileTransform.ty += positionY - offsetY;
				tileTransform.concat(transform);
				openfl_display__$internal_CanvasGraphics.context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx,tileTransform.ty);
				if(openfl_display__$internal_CanvasGraphics.bitmapFill != null) {
					openfl_display__$internal_CanvasGraphics.context.drawImage(openfl_display__$internal_CanvasGraphics.bitmapFill.image.get_src(),tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,tileRect.width,tileRect.height);
				} else {
					openfl_display__$internal_CanvasGraphics.context.fillRect(0,0,tileRect.width,tileRect.height);
				}
			}
			openfl_geom_Rectangle.__pool.release(tileRect);
			openfl_geom_Matrix.__pool.release(tileTransform);
			openfl_display__$internal_CanvasGraphics.context.restore();
			break;
		case 9:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
			var c9 = data;
			optimizationUsed = false;
			if(openfl_display__$internal_CanvasGraphics.bitmapFill != null && !openfl_display__$internal_CanvasGraphics.hitTesting) {
				st = 0;
				sr = 0;
				sb = 0;
				sl = 0;
				canOptimizeMatrix = true;
				if(openfl_display__$internal_CanvasGraphics.pendingMatrix != null) {
					if(openfl_display__$internal_CanvasGraphics.pendingMatrix.b != 0 || openfl_display__$internal_CanvasGraphics.pendingMatrix.c != 0) {
						canOptimizeMatrix = false;
					} else {
						if(stl == null) {
							stl = openfl_geom_Point.__pool.get();
						}
						if(sbr == null) {
							sbr = openfl_geom_Point.__pool.get();
						}
						stl.setTo(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1]);
						var _this = openfl_display__$internal_CanvasGraphics.inversePendingMatrix;
						var px = stl.x;
						var py = stl.y;
						stl.x = px * _this.a + py * _this.c + _this.tx;
						stl.y = px * _this.b + py * _this.d + _this.ty;
						sbr.setTo(c9.buffer.f[c9.fPos] + c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 1] + c9.buffer.f[c9.fPos + 3]);
						var _this1 = openfl_display__$internal_CanvasGraphics.inversePendingMatrix;
						var px1 = sbr.x;
						var py1 = sbr.y;
						sbr.x = px1 * _this1.a + py1 * _this1.c + _this1.tx;
						sbr.y = px1 * _this1.b + py1 * _this1.d + _this1.ty;
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = c9.buffer.f[c9.fPos + 1];
					sl = c9.buffer.f[c9.fPos];
					sb = c9.buffer.f[c9.fPos + 1] + c9.buffer.f[c9.fPos + 3];
					sr = c9.buffer.f[c9.fPos] + c9.buffer.f[c9.fPos + 2];
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl_display__$internal_CanvasGraphics.bitmapFill.width && sb <= openfl_display__$internal_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
						openfl_display__$internal_CanvasGraphics.context.drawImage(openfl_display__$internal_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c9.buffer.f[c9.fPos] - offsetX,c9.buffer.f[c9.fPos + 1] - offsetY,c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					}
				}
			}
			if(!optimizationUsed) {
				hasPath = true;
				openfl_display__$internal_CanvasGraphics.context.rect(c9.buffer.f[c9.fPos] - offsetX,c9.buffer.f[c9.fPos + 1] - offsetY,c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
			}
			break;
		case 10:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
			var c10 = data;
			hasPath = true;
			openfl_display__$internal_CanvasGraphics.drawRoundRect(c10.buffer.f[c10.fPos] - offsetX,c10.buffer.f[c10.fPos + 1] - offsetY,c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
			break;
		case 12:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
			var c11 = data;
			var v = c11.buffer.o[c11.oPos];
			var ind = c11.buffer.o[c11.oPos + 1];
			var uvt = c11.buffer.o[c11.oPos + 2];
			var pattern = null;
			var colorFill = openfl_display__$internal_CanvasGraphics.bitmapFill == null;
			if(colorFill && uvt != null) {
				break _hx_loop1;
			}
			if(!colorFill) {
				if(uvt == null) {
					uvt = openfl_Vector.toFloatVector(null);
					var _g4 = 0;
					var _g5 = v.get_length() / 2 | 0;
					while(_g4 < _g5) {
						var i1 = _g4++;
						uvt.push(v.get(i1 * 2) - offsetX / openfl_display__$internal_CanvasGraphics.bitmapFill.width);
						uvt.push(v.get(i1 * 2 + 1) - offsetY / openfl_display__$internal_CanvasGraphics.bitmapFill.height);
					}
				}
				var skipT = uvt.get_length() != v.get_length();
				var normalizedUVT = openfl_display__$internal_CanvasGraphics.normalizeUVT(uvt,skipT);
				var maxUVT = normalizedUVT.max;
				uvt = normalizedUVT.uvt;
				if(maxUVT > 1) {
					pattern = openfl_display__$internal_CanvasGraphics.createTempPatternCanvas(openfl_display__$internal_CanvasGraphics.bitmapFill,openfl_display__$internal_CanvasGraphics.bitmapRepeat,openfl_display__$internal_CanvasGraphics.bounds.width | 0,openfl_display__$internal_CanvasGraphics.bounds.height | 0);
				} else {
					pattern = openfl_display__$internal_CanvasGraphics.createTempPatternCanvas(openfl_display__$internal_CanvasGraphics.bitmapFill,openfl_display__$internal_CanvasGraphics.bitmapRepeat,openfl_display__$internal_CanvasGraphics.bitmapFill.width,openfl_display__$internal_CanvasGraphics.bitmapFill.height);
				}
			}
			var i2 = 0;
			var l = ind.get_length();
			var a_;
			var b_;
			var c_;
			var iax;
			var iay;
			var ibx;
			var iby;
			var icx;
			var icy;
			var x1;
			var y1;
			var x2;
			var y2;
			var x3;
			var y3;
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			var uvx3;
			var uvy3;
			var denom;
			var t1;
			var t2;
			var t3;
			var t4;
			var dx;
			var dy;
			while(i2 < l) {
				a_ = i2;
				b_ = i2 + 1;
				c_ = i2 + 2;
				iax = ind.get(a_) * 2;
				iay = ind.get(a_) * 2 + 1;
				ibx = ind.get(b_) * 2;
				iby = ind.get(b_) * 2 + 1;
				icx = ind.get(c_) * 2;
				icy = ind.get(c_) * 2 + 1;
				x1 = v.get(iax) - offsetX;
				y1 = v.get(iay) - offsetY;
				x2 = v.get(ibx) - offsetX;
				y2 = v.get(iby) - offsetY;
				x3 = v.get(icx) - offsetX;
				y3 = v.get(icy) - offsetY;
				switch(c11.buffer.o[c11.oPos + 3]) {
				case 0:
					if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
						i2 += 3;
						continue;
					}
					break;
				case 2:
					if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
						i2 += 3;
						continue;
					}
					break;
				default:
				}
				if(colorFill) {
					openfl_display__$internal_CanvasGraphics.context.beginPath();
					openfl_display__$internal_CanvasGraphics.context.moveTo(x1,y1);
					openfl_display__$internal_CanvasGraphics.context.lineTo(x2,y2);
					openfl_display__$internal_CanvasGraphics.context.lineTo(x3,y3);
					openfl_display__$internal_CanvasGraphics.context.closePath();
					if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
						openfl_display__$internal_CanvasGraphics.context.fill(openfl_display__$internal_CanvasGraphics.windingRule);
					}
					i2 += 3;
					continue;
				}
				uvx1 = uvt.get(iax) * pattern.width;
				uvx2 = uvt.get(ibx) * pattern.width;
				uvx3 = uvt.get(icx) * pattern.width;
				uvy1 = uvt.get(iay) * pattern.height;
				uvy2 = uvt.get(iby) * pattern.height;
				uvy3 = uvt.get(icy) * pattern.height;
				denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
				if(denom == 0) {
					i2 += 3;
					openfl_display__$internal_CanvasGraphics.context.restore();
					continue;
				}
				openfl_display__$internal_CanvasGraphics.context.save();
				openfl_display__$internal_CanvasGraphics.context.beginPath();
				openfl_display__$internal_CanvasGraphics.context.moveTo(x1,y1);
				openfl_display__$internal_CanvasGraphics.context.lineTo(x2,y2);
				openfl_display__$internal_CanvasGraphics.context.lineTo(x3,y3);
				openfl_display__$internal_CanvasGraphics.context.closePath();
				openfl_display__$internal_CanvasGraphics.context.clip();
				t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
				t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
				t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
				t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
				dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
				dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
				openfl_display__$internal_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
				openfl_display__$internal_CanvasGraphics.context.drawImage(pattern,0,0,pattern.width,pattern.height);
				openfl_display__$internal_CanvasGraphics.context.restore();
				i2 += 3;
			}
			break;
		case 14:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE;
			var c12 = data;
			if(stroke && openfl_display__$internal_CanvasGraphics.hasStroke) {
				openfl_display__$internal_CanvasGraphics.closePath(true);
			}
			openfl_display__$internal_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl_display__$internal_CanvasGraphics.context.strokeStyle = openfl_display__$internal_CanvasGraphics.createBitmapFill(c12.buffer.o[c12.oPos],c12.buffer.b[c12.bPos],c12.buffer.b[c12.bPos + 1]);
			openfl_display__$internal_CanvasGraphics.hasStroke = true;
			break;
		case 15:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE;
			var c13 = data;
			if(stroke && openfl_display__$internal_CanvasGraphics.hasStroke) {
				openfl_display__$internal_CanvasGraphics.closePath(true);
			}
			openfl_display__$internal_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl_display__$internal_CanvasGraphics.context.strokeStyle = openfl_display__$internal_CanvasGraphics.createGradientPattern(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos]);
			openfl_display__$internal_CanvasGraphics.setSmoothing(true);
			openfl_display__$internal_CanvasGraphics.hasStroke = true;
			break;
		case 16:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.LINE_STYLE;
			var c14 = data;
			if(stroke && openfl_display__$internal_CanvasGraphics.hasStroke) {
				openfl_display__$internal_CanvasGraphics.closePath(true);
			}
			openfl_display__$internal_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(c14.buffer.o[c14.oPos] == null) {
				openfl_display__$internal_CanvasGraphics.hasStroke = false;
			} else {
				openfl_display__$internal_CanvasGraphics.context.lineWidth = c14.buffer.o[c14.oPos] > 0 ? c14.buffer.o[c14.oPos] : 1;
				var tmp1 = c14.buffer.o[c14.oPos + 3] == null ? "round" : (c14.buffer.o[c14.oPos + 3] == null ? "null" : openfl_display_JointStyle.toString(c14.buffer.o[c14.oPos + 3])).toLowerCase();
				openfl_display__$internal_CanvasGraphics.context.lineJoin = tmp1;
				var tmp2 = c14.buffer.o[c14.oPos + 2] == null ? "round" : c14.buffer.o[c14.oPos + 2] == 0 ? "butt" : (c14.buffer.o[c14.oPos + 2] == null ? "null" : openfl_display_CapsStyle.toString(c14.buffer.o[c14.oPos + 2])).toLowerCase();
				openfl_display__$internal_CanvasGraphics.context.lineCap = tmp2;
				openfl_display__$internal_CanvasGraphics.context.miterLimit = c14.buffer.f[c14.fPos + 1];
				if(c14.buffer.f[c14.fPos] == 1) {
					var tmp3 = StringTools.hex(c14.buffer.i[c14.iPos] & 16777215,6);
					openfl_display__$internal_CanvasGraphics.context.strokeStyle = "#" + tmp3;
				} else {
					r = (c14.buffer.i[c14.iPos] & 16711680) >>> 16;
					g = (c14.buffer.i[c14.iPos] & 65280) >>> 8;
					b = c14.buffer.i[c14.iPos] & 255;
					openfl_display__$internal_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c14.buffer.f[c14.fPos] + ")";
				}
				openfl_display__$internal_CanvasGraphics.setSmoothing(true);
				openfl_display__$internal_CanvasGraphics.hasStroke = true;
			}
			break;
		case 17:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
			var c15 = data;
			hasPath = true;
			openfl_display__$internal_CanvasGraphics.context.lineTo(c15.buffer.f[c15.fPos] - offsetX,c15.buffer.f[c15.fPos + 1] - offsetY);
			positionX = c15.buffer.f[c15.fPos];
			positionY = c15.buffer.f[c15.fPos + 1];
			if(positionX == startX && positionY == startY) {
				closeGap = true;
			}
			break;
		case 18:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
			var c16 = data;
			openfl_display__$internal_CanvasGraphics.context.moveTo(c16.buffer.f[c16.fPos] - offsetX,c16.buffer.f[c16.fPos + 1] - offsetY);
			positionX = c16.buffer.f[c16.fPos];
			positionY = c16.buffer.f[c16.fPos + 1];
			if(setStart && c16.buffer.f[c16.fPos] != startX && c16.buffer.f[c16.fPos + 1] != startY) {
				closeGap = true;
			}
			startX = c16.buffer.f[c16.fPos];
			startY = c16.buffer.f[c16.fPos + 1];
			setStart = true;
			break;
		case 21:
			openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
			break;
		case 22:
			openfl_display__$internal_CanvasGraphics.windingRule = "nonzero";
			break;
		default:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
		}
	}
	if(stl != null) {
		openfl_geom_Point.__pool.release(stl);
	}
	if(sbr != null) {
		openfl_geom_Point.__pool.release(sbr);
	}
	data.destroy();
	if(hasPath) {
		if(stroke && openfl_display__$internal_CanvasGraphics.hasStroke) {
			if(openfl_display__$internal_CanvasGraphics.hasFill) {
				if(positionX != startX || positionY != startY) {
					openfl_display__$internal_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
					closeGap = true;
				}
				if(closeGap) {
					openfl_display__$internal_CanvasGraphics.closePath(true);
				}
			} else if(closeGap && positionX == startX && positionY == startY) {
				openfl_display__$internal_CanvasGraphics.closePath(true);
			}
			if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
				openfl_display__$internal_CanvasGraphics.context.stroke();
			}
		}
		if(!stroke) {
			if(openfl_display__$internal_CanvasGraphics.hasFill || openfl_display__$internal_CanvasGraphics.bitmapFill != null) {
				openfl_display__$internal_CanvasGraphics.context.translate(-openfl_display__$internal_CanvasGraphics.bounds.x,-openfl_display__$internal_CanvasGraphics.bounds.y);
				if(openfl_display__$internal_CanvasGraphics.pendingMatrix != null) {
					openfl_display__$internal_CanvasGraphics.context.transform(openfl_display__$internal_CanvasGraphics.pendingMatrix.a,openfl_display__$internal_CanvasGraphics.pendingMatrix.b,openfl_display__$internal_CanvasGraphics.pendingMatrix.c,openfl_display__$internal_CanvasGraphics.pendingMatrix.d,openfl_display__$internal_CanvasGraphics.pendingMatrix.tx,openfl_display__$internal_CanvasGraphics.pendingMatrix.ty);
					if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
						openfl_display__$internal_CanvasGraphics.context.fill(openfl_display__$internal_CanvasGraphics.windingRule);
					}
					openfl_display__$internal_CanvasGraphics.context.transform(openfl_display__$internal_CanvasGraphics.inversePendingMatrix.a,openfl_display__$internal_CanvasGraphics.inversePendingMatrix.b,openfl_display__$internal_CanvasGraphics.inversePendingMatrix.c,openfl_display__$internal_CanvasGraphics.inversePendingMatrix.d,openfl_display__$internal_CanvasGraphics.inversePendingMatrix.tx,openfl_display__$internal_CanvasGraphics.inversePendingMatrix.ty);
				} else if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
					openfl_display__$internal_CanvasGraphics.context.fill(openfl_display__$internal_CanvasGraphics.windingRule);
				}
				openfl_display__$internal_CanvasGraphics.context.translate(openfl_display__$internal_CanvasGraphics.bounds.x,openfl_display__$internal_CanvasGraphics.bounds.y);
				openfl_display__$internal_CanvasGraphics.context.closePath();
			}
		}
	}
};
openfl_display__$internal_CanvasGraphics.render = function(graphics,renderer) {
	var pixelRatio = renderer.__pixelRatio;
	graphics.__update(renderer.__worldTransform,pixelRatio);
	if(graphics.__softwareDirty) {
		openfl_display__$internal_CanvasGraphics.hitTesting = false;
		openfl_display__$internal_CanvasGraphics.graphics = graphics;
		openfl_display__$internal_CanvasGraphics.allowSmoothing = renderer.__allowSmoothing;
		openfl_display__$internal_CanvasGraphics.worldAlpha = renderer.__getAlpha(graphics.__owner.__worldAlpha);
		openfl_display__$internal_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl_display__$internal_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl_display__$internal_CanvasGraphics.context = graphics.__context;
			var transform = graphics.__renderTransform;
			var canvas = graphics.__canvas;
			var scale = renderer.__pixelRatio;
			var scaledWidth = width * scale | 0;
			var scaledHeight = height * scale | 0;
			renderer.__setBlendModeContext(openfl_display__$internal_CanvasGraphics.context,10);
			if(renderer.__isDOM) {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl_display__$internal_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = scaledWidth;
					canvas.height = scaledHeight;
					canvas.style.width = width + "px";
					canvas.style.height = height + "px";
				}
				var transform1 = graphics.__renderTransform;
				openfl_display__$internal_CanvasGraphics.context.setTransform(transform1.a * scale,transform1.b * scale,transform1.c * scale,transform1.d * scale,transform1.tx * scale,transform1.ty * scale);
			} else {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl_display__$internal_CanvasGraphics.context.closePath();
					openfl_display__$internal_CanvasGraphics.context.setTransform(1,0,0,1,0,0);
					openfl_display__$internal_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = width;
					canvas.height = height;
				}
				openfl_display__$internal_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			openfl_display__$internal_CanvasGraphics.fillCommands.clear();
			openfl_display__$internal_CanvasGraphics.strokeCommands.clear();
			openfl_display__$internal_CanvasGraphics.hasFill = false;
			openfl_display__$internal_CanvasGraphics.hasStroke = false;
			openfl_display__$internal_CanvasGraphics.bitmapFill = null;
			openfl_display__$internal_CanvasGraphics.bitmapRepeat = false;
			var hasLineStyle = false;
			var initStrokeX = 0.0;
			var initStrokeY = 0.0;
			openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
			var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type._hx_index) {
				case 0:case 1:case 2:case 3:
					openfl_display__$internal_CanvasGraphics.endFill();
					openfl_display__$internal_CanvasGraphics.endStroke();
					if(type == openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
						var c = data;
						openfl_display__$internal_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
						openfl_display__$internal_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					} else if(type == openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL;
						var c1 = data;
						openfl_display__$internal_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
						openfl_display__$internal_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					} else if(type == openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
						var c2 = data;
						openfl_display__$internal_CanvasGraphics.fillCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
						openfl_display__$internal_CanvasGraphics.strokeCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
					} else {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
						var c3 = data;
						openfl_display__$internal_CanvasGraphics.fillCommands.beginFill(c3.buffer.i[c3.iPos],c3.buffer.f[c3.fPos]);
						openfl_display__$internal_CanvasGraphics.strokeCommands.beginFill(c3.buffer.i[c3.iPos],c3.buffer.f[c3.fPos]);
					}
					break;
				case 4:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
					var c4 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
					} else {
						initStrokeX = c4.buffer.f[c4.fPos + 4];
						initStrokeY = c4.buffer.f[c4.fPos + 5];
					}
					break;
				case 5:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
					var c5 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
					} else {
						initStrokeX = c5.buffer.f[c5.fPos + 2];
						initStrokeY = c5.buffer.f[c5.fPos + 3];
					}
					break;
				case 6:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
					var c6 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
					}
					break;
				case 7:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
					var c7 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					}
					break;
				case 8:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
					var c8 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawQuads(c8.buffer.o[c8.oPos],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2]);
					break;
				case 9:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
					var c9 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					}
					break;
				case 10:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
					var c10 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
					}
					break;
				case 12:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
					var c11 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3]);
					break;
				case 13:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.END_FILL;
					var this1 = data;
					openfl_display__$internal_CanvasGraphics.endFill();
					openfl_display__$internal_CanvasGraphics.endStroke();
					openfl_display__$internal_CanvasGraphics.hasFill = false;
					hasLineStyle = false;
					openfl_display__$internal_CanvasGraphics.bitmapFill = null;
					initStrokeX = 0;
					initStrokeY = 0;
					break;
				case 14:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE;
					var c12 = data;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl_display__$internal_CanvasGraphics.strokeCommands.lineBitmapStyle(c12.buffer.o[c12.oPos],c12.buffer.o[c12.oPos + 1],c12.buffer.b[c12.bPos],c12.buffer.b[c12.bPos + 1]);
					break;
				case 15:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE;
					var c13 = data;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl_display__$internal_CanvasGraphics.strokeCommands.lineGradientStyle(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos]);
					break;
				case 16:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.LINE_STYLE;
					var c14 = data;
					if(!hasLineStyle && c14.buffer.o[c14.oPos] != null) {
						if(initStrokeX != 0 || initStrokeY != 0) {
							openfl_display__$internal_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
							initStrokeX = 0;
							initStrokeY = 0;
						}
					}
					hasLineStyle = c14.buffer.o[c14.oPos] != null;
					openfl_display__$internal_CanvasGraphics.strokeCommands.lineStyle(c14.buffer.o[c14.oPos],c14.buffer.i[c14.iPos],c14.buffer.f[c14.fPos],c14.buffer.b[c14.bPos],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.f[c14.fPos + 1]);
					break;
				case 17:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
					var c15 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.lineTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.lineTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
					} else {
						initStrokeX = c15.buffer.f[c15.fPos];
						initStrokeY = c15.buffer.f[c15.fPos + 1];
					}
					break;
				case 18:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
					var c16 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.moveTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.moveTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
					} else {
						initStrokeX = c16.buffer.f[c16.fPos];
						initStrokeY = c16.buffer.f[c16.fPos + 1];
					}
					break;
				case 19:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.OVERRIDE_BLEND_MODE;
					var c17 = data;
					renderer.__setBlendModeContext(openfl_display__$internal_CanvasGraphics.context,c17.buffer.o[c17.oPos]);
					break;
				case 21:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.WINDING_EVEN_ODD;
					var this2 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.windingEvenOdd();
					openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
					break;
				case 22:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.WINDING_NON_ZERO;
					var this3 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.windingNonZero();
					openfl_display__$internal_CanvasGraphics.windingRule = "nonzero";
					break;
				default:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = type;
				}
			}
			if(openfl_display__$internal_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl_display__$internal_CanvasGraphics.endFill();
			}
			if(openfl_display__$internal_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl_display__$internal_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.__softwareDirty = false;
		graphics.set___dirty(false);
	}
};
openfl_display__$internal_CanvasGraphics.renderMask = function(graphics,renderer) {
	if(graphics.__commands.get_length() != 0) {
		openfl_display__$internal_CanvasGraphics.context = renderer.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var kappa = .5522848;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
				var c = data;
				openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 5];
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
				var c1 = data;
				openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
				var c2 = data;
				openfl_display__$internal_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
				var c3 = data;
				x = c3.buffer.f[c3.fPos];
				y = c3.buffer.f[c3.fPos + 1];
				width = c3.buffer.f[c3.fPos + 2];
				height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl_display__$internal_CanvasGraphics.context.moveTo(x,ym);
				openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
				var c4 = data;
				openfl_display__$internal_CanvasGraphics.context.beginPath();
				openfl_display__$internal_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				openfl_display__$internal_CanvasGraphics.context.closePath();
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
				var c5 = data;
				openfl_display__$internal_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
				var c6 = data;
				openfl_display__$internal_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
				var c7 = data;
				openfl_display__$internal_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			}
		}
		data.destroy();
	}
};
openfl_display__$internal_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl_display__$internal_CanvasGraphics.allowSmoothing) {
		smooth = false;
	}
	if(openfl_display__$internal_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl_display__$internal_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl_display__$internal_CanvasShape = function() { };
$hxClasses["openfl.display._internal.CanvasShape"] = openfl_display__$internal_CanvasShape;
openfl_display__$internal_CanvasShape.__name__ = "openfl.display._internal.CanvasShape";
openfl_display__$internal_CanvasShape.render = function(shape,renderer) {
	if(!shape.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(shape.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
		var width = graphics.__width;
		var height = graphics.__height;
		var canvas = graphics.__canvas;
		if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
			var transform = graphics.__worldTransform;
			var context = renderer.context;
			var scrollRect = shape.__scrollRect;
			var scale9Grid = shape.__worldScale9Grid;
			if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
				renderer.__setBlendMode(shape.__worldBlendMode);
				renderer.__pushMaskObject(shape);
				context.globalAlpha = alpha;
				if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
					var pixelRatio = renderer.__pixelRatio;
					var matrix = openfl_geom_Matrix.__pool.get();
					matrix.translate(transform.tx,transform.ty);
					renderer.setTransform(matrix,context);
					openfl_geom_Matrix.__pool.release(matrix);
					var bounds = graphics.__bounds;
					var scaleX = graphics.__renderTransform.a / graphics.__bitmapScale;
					var scaleY = graphics.__renderTransform.d / graphics.__bitmapScale;
					var renderScaleX = scaleX * transform.a;
					var renderScaleY = scaleY * transform.d;
					var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
					var top = Math.round(scale9Grid.y * scaleY);
					var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
					var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
					var centerWidth = Math.round(scale9Grid.width * scaleX);
					var centerHeight = Math.round(scale9Grid.height * scaleY);
					var renderLeft = Math.round(left / pixelRatio);
					var renderTop = Math.round(top / pixelRatio);
					var renderRight = Math.round(right / pixelRatio);
					var renderBottom = Math.round(bottom / pixelRatio);
					var renderCenterWidth = bounds.width * renderScaleX - renderLeft - renderRight;
					var renderCenterHeight = bounds.height * renderScaleY - renderTop - renderBottom;
					renderer.applySmoothing(context,false);
					if(centerWidth != 0 && centerHeight != 0) {
						context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
						context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
						context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
						context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
						context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
						context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
						context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
						context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
						context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
					} else if(centerWidth == 0 && centerHeight != 0) {
						var renderWidth = renderLeft + renderCenterWidth + renderRight;
						context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
						context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
						context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
					} else if(centerHeight == 0 && centerWidth != 0) {
						var renderHeight = renderTop + renderCenterHeight + renderBottom;
						context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
						context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
						context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
					}
				} else {
					renderer.setTransform(transform,context);
					context.drawImage(canvas,0,0,width,height);
				}
				renderer.__popMaskObject(shape);
			}
		}
	}
};
var openfl_display__$internal_CanvasSimpleButton = function() { };
$hxClasses["openfl.display._internal.CanvasSimpleButton"] = openfl_display__$internal_CanvasSimpleButton;
openfl_display__$internal_CanvasSimpleButton.__name__ = "openfl.display._internal.CanvasSimpleButton";
openfl_display__$internal_CanvasSimpleButton.renderDrawable = function(simpleButton,renderer) {
	if(!simpleButton.__renderable || simpleButton.__worldAlpha <= 0 || simpleButton.__currentState == null) {
		return;
	}
	renderer.__pushMaskObject(simpleButton);
	renderer.__renderDrawable(simpleButton.__currentState);
	renderer.__popMaskObject(simpleButton);
	renderer.__renderEvent(simpleButton);
};
openfl_display__$internal_CanvasSimpleButton.renderDrawableMask = function(simpleButton,renderer) {
	renderer.__renderDrawableMask(simpleButton.__currentState);
};
var openfl_display__$internal_CanvasTextField = function() { };
$hxClasses["openfl.display._internal.CanvasTextField"] = openfl_display__$internal_CanvasTextField;
openfl_display__$internal_CanvasTextField.__name__ = "openfl.display._internal.CanvasTextField";
openfl_display__$internal_CanvasTextField.render = function(textField,renderer,transform) {
	var textEngine = textField.__textEngine;
	var useTextBounds = !(textEngine.background || textEngine.border);
	var bounds = useTextBounds ? textEngine.textBounds : textEngine.bounds;
	var graphics = textField.__graphics;
	var cursorOffsetX = 0.0;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		if(textField.get_text().length == 0) {
			var boundsWidth = textEngine.bounds.width - 4;
			var align = textField.get_defaultTextFormat().align;
			cursorOffsetX = align == 3 ? 0 : align == 4 ? boundsWidth : boundsWidth / 2;
			switch(align) {
			case 0:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin / 2;
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin / 2;
				cursorOffsetX += textField.get_defaultTextFormat().indent / 2;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent / 2;
				break;
			case 1:
				break;
			case 2:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 3:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 4:
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin;
				break;
			case 5:
				break;
			}
			if(useTextBounds) {
				bounds.y = textEngine.bounds.y;
				bounds.x = cursorOffsetX;
			}
		}
		graphics.__bounds.copyFrom(bounds);
	}
	var pixelRatio = renderer.__pixelRatio;
	graphics.__update(renderer.__worldTransform,pixelRatio);
	if(textField.__dirty || graphics.__softwareDirty) {
		var width = Math.round(graphics.__width * pixelRatio);
		var height = Math.round(graphics.__height * pixelRatio);
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.__softwareDirty = false;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl_display__$internal_CanvasTextField.context = graphics.__context;
			graphics.__canvas.width = width;
			graphics.__canvas.height = height;
			if(renderer.__isDOM) {
				graphics.__canvas.style.width = Math.round(width / pixelRatio) + "px";
				graphics.__canvas.style.height = Math.round(height / pixelRatio) + "px";
			}
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.scale(pixelRatio,pixelRatio);
			matrix.concat(graphics.__renderTransform);
			openfl_display__$internal_CanvasTextField.context.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			openfl_geom_Matrix.__pool.release(matrix);
			if(openfl_display__$internal_CanvasTextField.clearRect == null) {
				openfl_display__$internal_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl_display__$internal_CanvasTextField.clearRect) {
				openfl_display__$internal_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				openfl_display__$internal_CanvasTextField.context.textBaseline = "alphabetic";
				openfl_display__$internal_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g = 0;
				var _g1 = textField.get_scrollV() - 1;
				while(_g < _g1) {
					var i = _g++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var group = textEngine.layoutGroups.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
						break;
					}
					var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.font = openfl_text__$internal_TextEngine.getFont(group1.format);
					openfl_display__$internal_CanvasTextField.context.fillStyle = color;
					openfl_display__$internal_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g = 0;
								var _g1 = textField.__caretIndex - group1.startIndex;
								while(_g < _g1) {
									var i = _g++;
									if(group1.positions.length <= i) {
										break;
									}
									advance += group1.positions[i];
								}
								var scrollY1 = 0.0;
								var _g2 = textField.get_scrollV();
								var _g3 = group1.lineIndex + 1;
								while(_g2 < _g3) {
									var i1 = _g2++;
									scrollY1 += textEngine.lineHeights.get(i1 - 1);
								}
								openfl_display__$internal_CanvasTextField.context.beginPath();
								var tmp = StringTools.hex(group1.format.color & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								openfl_display__$internal_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.stroke();
								openfl_display__$internal_CanvasTextField.context.closePath();
							}
						} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group1.startIndex > selectionStart) {
								selectionStart = group1.startIndex;
							}
							if(group1.endIndex < selectionEnd) {
								selectionEnd = group1.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= group1.endIndex) {
								end = textField.getCharBoundaries(group1.endIndex - 1);
								if(end != null) {
									end.x += end.width + 2;
								}
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#000000";
								openfl_display__$internal_CanvasTextField.context.fillRect(start.x + scrollX - bounds.x,start.y + scrollY,end.x - start.x,group1.height);
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl_display__$internal_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x - bounds.x,group1.offsetY + group1.ascent + scrollY);
							}
						}
					}
					if(group1.format.underline) {
						openfl_display__$internal_CanvasTextField.context.beginPath();
						openfl_display__$internal_CanvasTextField.context.strokeStyle = color;
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var descent = Math.floor(group1.ascent * 0.185);
						var x = group1.offsetX + scrollX - bounds.x;
						var y = Math.ceil(group1.offsetY + scrollY + group1.ascent - bounds.y) + descent + 0.5;
						openfl_display__$internal_CanvasTextField.context.moveTo(x,y);
						openfl_display__$internal_CanvasTextField.context.lineTo(x + group1.width,y);
						openfl_display__$internal_CanvasTextField.context.stroke();
						openfl_display__$internal_CanvasTextField.context.closePath();
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl_display__$internal_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						openfl_display__$internal_CanvasTextField.context.lineCap = "square";
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX = -textField.get_scrollH() + (useTextBounds ? 0 : cursorOffsetX);
					var scrollY = 0.0;
					var _g = 0;
					var _g1 = textField.get_scrollV() - 1;
					while(_g < _g1) {
						var i = _g++;
						scrollY += textEngine.lineHeights.get(i);
					}
					openfl_display__$internal_CanvasTextField.context.beginPath();
					var tmp = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
					openfl_display__$internal_CanvasTextField.context.moveTo(scrollX + 2.5,scrollY + 2.5);
					openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
					openfl_display__$internal_CanvasTextField.context.lineTo(scrollX + 2.5,scrollY + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl_display__$internal_CanvasTextField.context.stroke();
					openfl_display__$internal_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__bitmapScale = pixelRatio;
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.__softwareDirty = false;
			graphics.set___dirty(false);
		}
	}
};
openfl_display__$internal_CanvasTextField.renderDrawable = function(textField,renderer) {
	if(renderer.__isDOM && !textField.__renderedOnCanvasWhileOnDOM) {
		textField.__renderedOnCanvasWhileOnDOM = true;
		if(textField.get_type() == 1) {
			textField.replaceText(0,textField.__text.length,textField.__text);
		}
		if(textField.__isHTML) {
			textField.__updateText(openfl_text__$internal_HTMLParser.parse(textField.__text,textField.get_multiline(),textField.__styleSheet,textField.__textFormat,textField.__textEngine.textFormatRanges));
		}
		textField.__dirty = true;
		textField.__layoutDirty = true;
		if(!textField.__renderDirty) {
			textField.__renderDirty = true;
			textField.__setParentRenderDirty();
		}
	}
	if(textField.get_mask() == null || textField.get_mask().get_width() > 0 && textField.get_mask().get_height() > 0) {
		renderer.__updateCacheBitmap(textField,textField.__dirty);
		if(textField.__cacheBitmap != null && !textField.__isCacheBitmapRender) {
			var bitmap = textField.__cacheBitmap;
			if(bitmap.__renderable) {
				var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
				if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
					var context = renderer.context;
					renderer.__setBlendMode(bitmap.__worldBlendMode);
					renderer.__pushMaskObject(bitmap,false);
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
					context.globalAlpha = alpha;
					var scrollRect = bitmap.__scrollRect;
					renderer.setTransform(bitmap.__renderTransform,context);
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = false;
					}
					if(scrollRect == null) {
						context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
					} else {
						context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
					}
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = true;
					}
					renderer.__popMaskObject(bitmap,false);
				}
			}
		} else {
			var transform = textField.__worldTransform;
			var textEngine = textField.__textEngine;
			var useTextBounds = !(textEngine.background || textEngine.border);
			var bounds = useTextBounds ? textEngine.textBounds : textEngine.bounds;
			var graphics = textField.__graphics;
			var cursorOffsetX = 0.0;
			if(textField.__dirty) {
				textField.__updateLayout();
				if(graphics.__bounds == null) {
					graphics.__bounds = new openfl_geom_Rectangle();
				}
				if(textField.get_text().length == 0) {
					var boundsWidth = textEngine.bounds.width - 4;
					var align = textField.get_defaultTextFormat().align;
					cursorOffsetX = align == 3 ? 0 : align == 4 ? boundsWidth : boundsWidth / 2;
					switch(align) {
					case 0:
						cursorOffsetX += textField.get_defaultTextFormat().leftMargin / 2;
						cursorOffsetX -= textField.get_defaultTextFormat().rightMargin / 2;
						cursorOffsetX += textField.get_defaultTextFormat().indent / 2;
						cursorOffsetX += textField.get_defaultTextFormat().blockIndent / 2;
						break;
					case 1:
						break;
					case 2:
						cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
						cursorOffsetX += textField.get_defaultTextFormat().indent;
						cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
						break;
					case 3:
						cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
						cursorOffsetX += textField.get_defaultTextFormat().indent;
						cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
						break;
					case 4:
						cursorOffsetX -= textField.get_defaultTextFormat().rightMargin;
						break;
					case 5:
						break;
					}
					if(useTextBounds) {
						bounds.y = textEngine.bounds.y;
						bounds.x = cursorOffsetX;
					}
				}
				graphics.__bounds.copyFrom(bounds);
			}
			var pixelRatio = renderer.__pixelRatio;
			graphics.__update(renderer.__worldTransform,pixelRatio);
			if(textField.__dirty || graphics.__softwareDirty) {
				var width = Math.round(graphics.__width * pixelRatio);
				var height = Math.round(graphics.__height * pixelRatio);
				if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
					textField.__graphics.__canvas = null;
					textField.__graphics.__context = null;
					textField.__graphics.__bitmap = null;
					textField.__graphics.__softwareDirty = false;
					textField.__graphics.set___dirty(false);
					textField.__dirty = false;
				} else {
					if(textField.__graphics.__canvas == null) {
						textField.__graphics.__canvas = window.document.createElement("canvas");
						textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
					}
					openfl_display__$internal_CanvasTextField.context = graphics.__context;
					graphics.__canvas.width = width;
					graphics.__canvas.height = height;
					if(renderer.__isDOM) {
						graphics.__canvas.style.width = Math.round(width / pixelRatio) + "px";
						graphics.__canvas.style.height = Math.round(height / pixelRatio) + "px";
					}
					var matrix = openfl_geom_Matrix.__pool.get();
					matrix.scale(pixelRatio,pixelRatio);
					matrix.concat(graphics.__renderTransform);
					openfl_display__$internal_CanvasTextField.context.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
					openfl_geom_Matrix.__pool.release(matrix);
					if(openfl_display__$internal_CanvasTextField.clearRect == null) {
						openfl_display__$internal_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
					}
					if(openfl_display__$internal_CanvasTextField.clearRect) {
						openfl_display__$internal_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
					}
					if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
						var text = textEngine.text;
						if(!renderer.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
							graphics.__context.imageSmoothingEnabled = false;
						} else {
							graphics.__context.imageSmoothingEnabled = true;
						}
						if(textEngine.border || textEngine.background) {
							openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
							if(textEngine.background) {
								var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.fill();
							}
							if(textEngine.border) {
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.stroke();
							}
						}
						openfl_display__$internal_CanvasTextField.context.textBaseline = "alphabetic";
						openfl_display__$internal_CanvasTextField.context.textAlign = "start";
						var scrollX = -textField.get_scrollH();
						var scrollY = 0.0;
						var _g = 0;
						var _g1 = textField.get_scrollV() - 1;
						while(_g < _g1) {
							var i = _g++;
							scrollY -= textEngine.lineHeights.get(i);
						}
						var advance;
						var group = textEngine.layoutGroups.iterator();
						while(group.hasNext()) {
							var group1 = group.next();
							if(group1.lineIndex < textField.get_scrollV() - 1) {
								continue;
							}
							if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
								break;
							}
							var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
							openfl_display__$internal_CanvasTextField.context.font = openfl_text__$internal_TextEngine.getFont(group1.format);
							openfl_display__$internal_CanvasTextField.context.fillStyle = color;
							openfl_display__$internal_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
							if(textField.__caretIndex > -1 && textEngine.selectable) {
								if(textField.__selectionIndex == textField.__caretIndex) {
									if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
										advance = 0.0;
										var _g = 0;
										var _g1 = textField.__caretIndex - group1.startIndex;
										while(_g < _g1) {
											var i = _g++;
											if(group1.positions.length <= i) {
												break;
											}
											advance += group1.positions[i];
										}
										var scrollY1 = 0.0;
										var _g2 = textField.get_scrollV();
										var _g3 = group1.lineIndex + 1;
										while(_g2 < _g3) {
											var i1 = _g2++;
											scrollY1 += textEngine.lineHeights.get(i1 - 1);
										}
										openfl_display__$internal_CanvasTextField.context.beginPath();
										var tmp = StringTools.hex(group1.format.color & 16777215,6);
										openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
										openfl_display__$internal_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
										openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
										openfl_display__$internal_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
										openfl_display__$internal_CanvasTextField.context.stroke();
										openfl_display__$internal_CanvasTextField.context.closePath();
									}
								} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
									var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
									var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
									if(group1.startIndex > selectionStart) {
										selectionStart = group1.startIndex;
									}
									if(group1.endIndex < selectionEnd) {
										selectionEnd = group1.endIndex;
									}
									var end;
									var start = textField.getCharBoundaries(selectionStart);
									if(selectionEnd >= group1.endIndex) {
										end = textField.getCharBoundaries(group1.endIndex - 1);
										if(end != null) {
											end.x += end.width + 2;
										}
									} else {
										end = textField.getCharBoundaries(selectionEnd);
									}
									if(start != null && end != null) {
										openfl_display__$internal_CanvasTextField.context.fillStyle = "#000000";
										openfl_display__$internal_CanvasTextField.context.fillRect(start.x + scrollX - bounds.x,start.y + scrollY,end.x - start.x,group1.height);
										openfl_display__$internal_CanvasTextField.context.fillStyle = "#FFFFFF";
										openfl_display__$internal_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x - bounds.x,group1.offsetY + group1.ascent + scrollY);
									}
								}
							}
							if(group1.format.underline) {
								openfl_display__$internal_CanvasTextField.context.beginPath();
								openfl_display__$internal_CanvasTextField.context.strokeStyle = color;
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								var descent = Math.floor(group1.ascent * 0.185);
								var x = group1.offsetX + scrollX - bounds.x;
								var y = Math.ceil(group1.offsetY + scrollY + group1.ascent - bounds.y) + descent + 0.5;
								openfl_display__$internal_CanvasTextField.context.moveTo(x,y);
								openfl_display__$internal_CanvasTextField.context.lineTo(x + group1.width,y);
								openfl_display__$internal_CanvasTextField.context.stroke();
								openfl_display__$internal_CanvasTextField.context.closePath();
							}
						}
					} else {
						if(textEngine.border || textEngine.background) {
							if(textEngine.border) {
								openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
							} else {
								openfl_display__$internal_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
							}
							if(textEngine.background) {
								var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.fill();
							}
							if(textEngine.border) {
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								openfl_display__$internal_CanvasTextField.context.lineCap = "square";
								var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.stroke();
							}
						}
						if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
							var scrollX = -textField.get_scrollH() + (useTextBounds ? 0 : cursorOffsetX);
							var scrollY = 0.0;
							var _g = 0;
							var _g1 = textField.get_scrollV() - 1;
							while(_g < _g1) {
								var i = _g++;
								scrollY += textEngine.lineHeights.get(i);
							}
							openfl_display__$internal_CanvasTextField.context.beginPath();
							var tmp = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
							openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
							openfl_display__$internal_CanvasTextField.context.moveTo(scrollX + 2.5,scrollY + 2.5);
							openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
							openfl_display__$internal_CanvasTextField.context.lineTo(scrollX + 2.5,scrollY + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
							openfl_display__$internal_CanvasTextField.context.stroke();
							openfl_display__$internal_CanvasTextField.context.closePath();
						}
					}
					graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
					graphics.__bitmapScale = pixelRatio;
					graphics.__visible = true;
					textField.__dirty = false;
					graphics.__softwareDirty = false;
					graphics.set___dirty(false);
				}
			}
			var smoothingEnabled = false;
			if(textField.__textEngine.antiAliasType == 0 && textField.__textEngine.gridFitType == 1) {
				smoothingEnabled = renderer.context.imageSmoothingEnabled;
				if(smoothingEnabled) {
					renderer.context.imageSmoothingEnabled = false;
				}
			}
			if(!(textField.opaqueBackground == null && textField.__graphics == null)) {
				if(textField.__renderable) {
					var alpha = renderer.__getAlpha(textField.__worldAlpha);
					if(!(alpha <= 0)) {
						if(textField.opaqueBackground != null && !textField.__isCacheBitmapRender && textField.get_width() > 0 && textField.get_height() > 0) {
							renderer.__setBlendMode(textField.__worldBlendMode);
							renderer.__pushMaskObject(textField);
							var context = renderer.context;
							renderer.setTransform(textField.__renderTransform,context);
							var color = textField.opaqueBackground;
							context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
							context.fillRect(0,0,textField.get_width(),textField.get_height());
							renderer.__popMaskObject(textField);
						}
						if(textField.__graphics != null) {
							if(textField.__renderable) {
								var alpha = renderer.__getAlpha(textField.__worldAlpha);
								if(!(alpha <= 0)) {
									var graphics = textField.__graphics;
									if(graphics != null) {
										openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
										var width = graphics.__width;
										var height = graphics.__height;
										var canvas = graphics.__canvas;
										if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
											var transform = graphics.__worldTransform;
											var context = renderer.context;
											var scrollRect = textField.__scrollRect;
											var scale9Grid = textField.__worldScale9Grid;
											if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
												renderer.__setBlendMode(textField.__worldBlendMode);
												renderer.__pushMaskObject(textField);
												context.globalAlpha = alpha;
												if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
													var pixelRatio = renderer.__pixelRatio;
													var matrix = openfl_geom_Matrix.__pool.get();
													matrix.translate(transform.tx,transform.ty);
													renderer.setTransform(matrix,context);
													openfl_geom_Matrix.__pool.release(matrix);
													var bounds = graphics.__bounds;
													var scaleX = graphics.__renderTransform.a / graphics.__bitmapScale;
													var scaleY = graphics.__renderTransform.d / graphics.__bitmapScale;
													var renderScaleX = scaleX * transform.a;
													var renderScaleY = scaleY * transform.d;
													var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
													var top = Math.round(scale9Grid.y * scaleY);
													var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
													var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
													var centerWidth = Math.round(scale9Grid.width * scaleX);
													var centerHeight = Math.round(scale9Grid.height * scaleY);
													var renderLeft = Math.round(left / pixelRatio);
													var renderTop = Math.round(top / pixelRatio);
													var renderRight = Math.round(right / pixelRatio);
													var renderBottom = Math.round(bottom / pixelRatio);
													var renderCenterWidth = bounds.width * renderScaleX - renderLeft - renderRight;
													var renderCenterHeight = bounds.height * renderScaleY - renderTop - renderBottom;
													renderer.applySmoothing(context,false);
													if(centerWidth != 0 && centerHeight != 0) {
														context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
														context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
														context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
														context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
														context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
														context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
														context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
														context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
														context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
													} else if(centerWidth == 0 && centerHeight != 0) {
														var renderWidth = renderLeft + renderCenterWidth + renderRight;
														context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
														context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
														context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
													} else if(centerHeight == 0 && centerWidth != 0) {
														var renderHeight = renderTop + renderCenterHeight + renderBottom;
														context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
														context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
														context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
													}
												} else {
													renderer.setTransform(transform,context);
													context.drawImage(canvas,0,0,width,height);
												}
												renderer.__popMaskObject(textField);
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if(smoothingEnabled) {
				renderer.context.imageSmoothingEnabled = true;
			}
		}
	}
};
openfl_display__$internal_CanvasTextField.renderDrawableMask = function(textField,renderer) {
	openfl_display__$internal_CanvasDisplayObject.renderDrawableMask(textField,renderer);
};
var openfl_display__$internal_CanvasTilemap = function() { };
$hxClasses["openfl.display._internal.CanvasTilemap"] = openfl_display__$internal_CanvasTilemap;
openfl_display__$internal_CanvasTilemap.__name__ = "openfl.display._internal.CanvasTilemap";
openfl_display__$internal_CanvasTilemap.render = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__group.__tiles.length == 0) {
		return;
	}
	var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	var context = renderer.context;
	renderer.__setBlendMode(tilemap.__worldBlendMode);
	renderer.__pushMaskObject(tilemap);
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderer.__pushMaskRect(rect,tilemap.__renderTransform);
	if(!renderer.__allowSmoothing || !tilemap.smoothing) {
		context.imageSmoothingEnabled = false;
	}
	openfl_display__$internal_CanvasTilemap.renderTileContainer(tilemap.__group,renderer,tilemap.__renderTransform,tilemap.__tileset,renderer.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,rect);
	if(!renderer.__allowSmoothing || !tilemap.smoothing) {
		context.imageSmoothingEnabled = true;
	}
	renderer.__popMaskRect();
	renderer.__popMaskObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
};
openfl_display__$internal_CanvasTilemap.renderTileContainer = function(group,renderer,parentTransform,defaultTileset,smooth,alphaEnabled,worldAlpha,blendModeEnabled,defaultBlendMode,cacheBitmapData,source,rect) {
	var context = renderer.context;
	var roundPixels = renderer.__roundPixels;
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var tiles = group.__tiles;
	var length = group.__length;
	var tile;
	var tileset;
	var alpha;
	var visible;
	var blendMode = null;
	var id;
	var tileData;
	var tileRect;
	var bitmapData;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		tile = tiles[i];
		tileTransform.setTo(1,0,0,1,-tile.get_originX(),-tile.get_originY());
		tileTransform.concat(tile.get_matrix());
		tileTransform.concat(parentTransform);
		if(roundPixels) {
			tileTransform.tx = Math.round(tileTransform.tx);
			tileTransform.ty = Math.round(tileTransform.ty);
		}
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		if(!alphaEnabled) {
			alpha = 1;
		}
		if(blendModeEnabled) {
			blendMode = tile.__blendMode != null ? tile.__blendMode : defaultBlendMode;
		}
		if(tile.__length > 0) {
			openfl_display__$internal_CanvasTilemap.renderTileContainer(tile,renderer,tileTransform,tileset,smooth,alphaEnabled,alpha,blendModeEnabled,blendMode,cacheBitmapData,source,rect);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
				rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
				tileRect = rect;
			}
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null || bitmapData.image == null) {
				continue;
			}
			if(bitmapData != cacheBitmapData) {
				if(bitmapData.image.buffer.__srcImage == null) {
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmapData.image);
				}
				source = bitmapData.image.get_src();
				cacheBitmapData = bitmapData;
			}
			context.globalAlpha = alpha;
			if(blendModeEnabled) {
				renderer.__setBlendMode(blendMode);
			}
			renderer.setTransform(tileTransform,context);
			context.drawImage(source,tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,tileRect.width,tileRect.height);
		}
	}
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl_display__$internal_CanvasTilemap.renderDrawable = function(tilemap,renderer) {
	renderer.__updateCacheBitmap(tilemap,false);
	if(tilemap.__cacheBitmap != null && !tilemap.__isCacheBitmapRender) {
		var bitmap = tilemap.__cacheBitmap;
		if(bitmap.__renderable) {
			var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
			if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				var context = renderer.context;
				renderer.__setBlendMode(bitmap.__worldBlendMode);
				renderer.__pushMaskObject(bitmap,false);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
				context.globalAlpha = alpha;
				var scrollRect = bitmap.__scrollRect;
				renderer.setTransform(bitmap.__renderTransform,context);
				if(!renderer.__allowSmoothing || !bitmap.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				if(scrollRect == null) {
					context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
				} else {
					context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				}
				if(!renderer.__allowSmoothing || !bitmap.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer.__popMaskObject(bitmap,false);
			}
		}
	} else {
		if(!(tilemap.opaqueBackground == null && tilemap.__graphics == null)) {
			if(tilemap.__renderable) {
				var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
				if(!(alpha <= 0)) {
					if(tilemap.opaqueBackground != null && !tilemap.__isCacheBitmapRender && tilemap.get_width() > 0 && tilemap.get_height() > 0) {
						renderer.__setBlendMode(tilemap.__worldBlendMode);
						renderer.__pushMaskObject(tilemap);
						var context = renderer.context;
						renderer.setTransform(tilemap.__renderTransform,context);
						var color = tilemap.opaqueBackground;
						context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
						context.fillRect(0,0,tilemap.get_width(),tilemap.get_height());
						renderer.__popMaskObject(tilemap);
					}
					if(tilemap.__graphics != null) {
						if(tilemap.__renderable) {
							var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
							if(!(alpha <= 0)) {
								var graphics = tilemap.__graphics;
								if(graphics != null) {
									openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
									var width = graphics.__width;
									var height = graphics.__height;
									var canvas = graphics.__canvas;
									if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
										var transform = graphics.__worldTransform;
										var context = renderer.context;
										var scrollRect = tilemap.__scrollRect;
										var scale9Grid = tilemap.__worldScale9Grid;
										if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
											renderer.__setBlendMode(tilemap.__worldBlendMode);
											renderer.__pushMaskObject(tilemap);
											context.globalAlpha = alpha;
											if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
												var pixelRatio = renderer.__pixelRatio;
												var matrix = openfl_geom_Matrix.__pool.get();
												matrix.translate(transform.tx,transform.ty);
												renderer.setTransform(matrix,context);
												openfl_geom_Matrix.__pool.release(matrix);
												var bounds = graphics.__bounds;
												var scaleX = graphics.__renderTransform.a / graphics.__bitmapScale;
												var scaleY = graphics.__renderTransform.d / graphics.__bitmapScale;
												var renderScaleX = scaleX * transform.a;
												var renderScaleY = scaleY * transform.d;
												var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
												var top = Math.round(scale9Grid.y * scaleY);
												var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
												var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
												var centerWidth = Math.round(scale9Grid.width * scaleX);
												var centerHeight = Math.round(scale9Grid.height * scaleY);
												var renderLeft = Math.round(left / pixelRatio);
												var renderTop = Math.round(top / pixelRatio);
												var renderRight = Math.round(right / pixelRatio);
												var renderBottom = Math.round(bottom / pixelRatio);
												var renderCenterWidth = bounds.width * renderScaleX - renderLeft - renderRight;
												var renderCenterHeight = bounds.height * renderScaleY - renderTop - renderBottom;
												renderer.applySmoothing(context,false);
												if(centerWidth != 0 && centerHeight != 0) {
													context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
													context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
													context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
													context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
													context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
													context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
													context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
													context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
												} else if(centerWidth == 0 && centerHeight != 0) {
													var renderWidth = renderLeft + renderCenterWidth + renderRight;
													context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
													context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
												} else if(centerHeight == 0 && centerWidth != 0) {
													var renderHeight = renderTop + renderCenterHeight + renderBottom;
													context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
													context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
													context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
												}
											} else {
												renderer.setTransform(transform,context);
												context.drawImage(canvas,0,0,width,height);
											}
											renderer.__popMaskObject(tilemap);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if(!(!tilemap.__renderable || tilemap.__group.__tiles.length == 0)) {
			var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
			if(!(alpha <= 0)) {
				var context = renderer.context;
				renderer.__setBlendMode(tilemap.__worldBlendMode);
				renderer.__pushMaskObject(tilemap);
				var rect = openfl_geom_Rectangle.__pool.get();
				rect.setTo(0,0,tilemap.__width,tilemap.__height);
				renderer.__pushMaskRect(rect,tilemap.__renderTransform);
				if(!renderer.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				openfl_display__$internal_CanvasTilemap.renderTileContainer(tilemap.__group,renderer,tilemap.__renderTransform,tilemap.__tileset,renderer.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,rect);
				if(!renderer.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer.__popMaskRect();
				renderer.__popMaskObject(tilemap);
				openfl_geom_Rectangle.__pool.release(rect);
			}
		}
	}
	renderer.__renderEvent(tilemap);
};
openfl_display__$internal_CanvasTilemap.renderDrawableMask = function(tilemap,renderer) {
};
var openfl_display__$internal_CanvasVideo = function() { };
$hxClasses["openfl.display._internal.CanvasVideo"] = openfl_display__$internal_CanvasVideo;
openfl_display__$internal_CanvasVideo.__name__ = "openfl.display._internal.CanvasVideo";
openfl_display__$internal_CanvasVideo.render = function(video,renderer) {
	if(!video.__renderable || video.__stream == null) {
		return;
	}
	var alpha = renderer.__getAlpha(video.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	var context = renderer.context;
	if(video.__stream.__video != null) {
		renderer.__setBlendMode(video.__worldBlendMode);
		renderer.__pushMaskObject(video);
		context.globalAlpha = alpha;
		var scrollRect = video.__scrollRect;
		var smoothing = video.smoothing;
		renderer.setTransform(video.__worldTransform,context);
		if(!smoothing) {
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(video.__stream.__video,0,0,video.get_width(),video.get_height());
		} else {
			context.drawImage(video.__stream.__video,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!smoothing) {
			context.imageSmoothingEnabled = true;
		}
		renderer.__popMaskObject(video);
	}
};
openfl_display__$internal_CanvasVideo.renderDrawable = function(video,renderer) {
	openfl_display__$internal_CanvasVideo.render(video,renderer);
	renderer.__renderEvent(video);
};
openfl_display__$internal_CanvasVideo.renderDrawableMask = function(video,renderer) {
};
var openfl_display__$internal_Context3DBitmap = function() { };
$hxClasses["openfl.display._internal.Context3DBitmap"] = openfl_display__$internal_Context3DBitmap;
openfl_display__$internal_Context3DBitmap.__name__ = "openfl.display._internal.Context3DBitmap";
openfl_display__$internal_Context3DBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var context = renderer.__context3D;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap);
		var shader = renderer.__initDisplayShader(bitmap.__worldShader);
		renderer.setShader(shader);
		renderer.applyBitmapData(bitmap.__bitmapData,renderer.__allowSmoothing && (bitmap.smoothing || renderer.__upscaled));
		renderer.applyMatrix(renderer.__getMatrix(bitmap.__renderTransform,bitmap.pixelSnapping));
		renderer.applyAlpha(bitmap.__worldAlpha);
		renderer.applyColorTransform(bitmap.__worldColorTransform);
		renderer.updateShader();
		var vertexBuffer = bitmap.__bitmapData.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = bitmap.__bitmapData.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
		renderer.__popMaskObject(bitmap);
	}
};
openfl_display__$internal_Context3DBitmap.renderDrawable = function(bitmap,renderer) {
	renderer.__updateCacheBitmap(bitmap,false);
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.image != null) {
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	if(bitmap.__cacheBitmap != null && !bitmap.__isCacheBitmapRender) {
		openfl_display__$internal_Context3DBitmap.render(bitmap.__cacheBitmap,renderer);
	} else {
		if(!(bitmap.opaqueBackground == null && bitmap.__graphics == null)) {
			if(!(!bitmap.__renderable || bitmap.__worldAlpha <= 0)) {
				if(bitmap.opaqueBackground != null && !bitmap.__isCacheBitmapRender && bitmap.get_width() > 0 && bitmap.get_height() > 0) {
					renderer.__setBlendMode(bitmap.__worldBlendMode);
					renderer.__pushMaskObject(bitmap);
					var context = renderer.__context3D;
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,bitmap.get_width(),bitmap.get_height());
					renderer.__pushMaskRect(rect,bitmap.__renderTransform);
					var color = bitmap.opaqueBackground;
					context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
					renderer.__popMaskRect();
					renderer.__popMaskObject(bitmap);
					openfl_geom_Rectangle.__pool.release(rect);
				}
				if(bitmap.__graphics != null) {
					openfl_display__$internal_Context3DShape.render(bitmap,renderer);
				}
			}
		}
		openfl_display__$internal_Context3DBitmap.render(bitmap,renderer);
	}
	renderer.__renderEvent(bitmap);
};
openfl_display__$internal_Context3DBitmap.renderDrawableMask = function(bitmap,renderer) {
	openfl_display__$internal_Context3DBitmap.renderMask(bitmap,renderer);
};
openfl_display__$internal_Context3DBitmap.renderMask = function(bitmap,renderer) {
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var context = renderer.__context3D;
		var shader = renderer.__maskShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(openfl_display__$internal_Context3DMaskShader.opaqueBitmapData,true);
		renderer.applyMatrix(renderer.__getMatrix(bitmap.__renderTransform,bitmap.pixelSnapping));
		renderer.updateShader();
		var vertexBuffer = bitmap.__bitmapData.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = bitmap.__bitmapData.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
	}
};
var openfl_display__$internal_Context3DBitmapData = function() { };
$hxClasses["openfl.display._internal.Context3DBitmapData"] = openfl_display__$internal_Context3DBitmapData;
openfl_display__$internal_Context3DBitmapData.__name__ = "openfl.display._internal.Context3DBitmapData";
openfl_display__$internal_Context3DBitmapData.renderDrawable = function(bitmapData,renderer) {
	var context = renderer.__context3D;
	var gl = context.gl;
	renderer.__setBlendMode(10);
	var shader = renderer.__defaultDisplayShader;
	renderer.setShader(shader);
	renderer.applyBitmapData(bitmapData,renderer.__upscaled);
	renderer.applyMatrix(renderer.__getMatrix(bitmapData.__worldTransform,1));
	renderer.applyAlpha(bitmapData.__worldAlpha);
	renderer.applyColorTransform(bitmapData.__worldColorTransform);
	renderer.updateShader();
	var vertexBuffer = bitmapData.getVertexBuffer(context);
	if(shader.__position != null) {
		context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
	}
	if(shader.__textureCoord != null) {
		context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
	}
	var indexBuffer = bitmapData.getIndexBuffer(context);
	context.drawTriangles(indexBuffer);
	renderer.__clearShader();
};
openfl_display__$internal_Context3DBitmapData.renderDrawableMask = function(bitmapData,renderer) {
	var context = renderer.__context3D;
	var gl = context.gl;
	var shader = renderer.__maskShader;
	renderer.setShader(shader);
	renderer.applyBitmapData(bitmapData,renderer.__upscaled);
	renderer.applyMatrix(renderer.__getMatrix(bitmapData.__worldTransform,1));
	renderer.updateShader();
	var vertexBuffer = bitmapData.getVertexBuffer(context);
	if(shader.__position != null) {
		context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
	}
	if(shader.__textureCoord != null) {
		context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
	}
	var indexBuffer = bitmapData.getIndexBuffer(context);
	context.drawTriangles(indexBuffer);
	renderer.__clearShader();
};
var openfl_display__$internal_Context3DBuffer = function(context3D,elementType,elementCount,dataPerVertex) {
	this.context3D = context3D;
	this.elementType = elementType;
	this.dataPerVertex = dataPerVertex;
	this.indexCount = 0;
	this.vertexCount = 0;
	this.resize(elementCount);
};
$hxClasses["openfl.display._internal.Context3DBuffer"] = openfl_display__$internal_Context3DBuffer;
openfl_display__$internal_Context3DBuffer.__name__ = "openfl.display._internal.Context3DBuffer";
openfl_display__$internal_Context3DBuffer.prototype = {
	dataPerVertex: null
	,elementCount: null
	,elementType: null
	,indexBufferData: null
	,indexBuffers: null
	,indexCount: null
	,vertexBuffer: null
	,vertexBufferData: null
	,vertexCount: null
	,context3D: null
	,drawElements: function(start,length) {
		if(length == null) {
			length = -1;
		}
		if(this.indexCount == 0 || this.vertexCount == 0) {
			return;
		}
		if(this.elementType._hx_index == 0) {
			if(length == -1) {
				length = this.elementCount * 2;
			}
			if(start < 10922 && length - start < 10922) {
				this.context3D.drawTriangles(this.indexBuffers[0],start,length * 2);
			} else {
				var end = start + length;
				while(start < end) {
					var arrayBufferIndex = Math.floor(start / 10922);
					length = Math.min(end - start,10922) | 0;
					if(length <= 0) {
						break;
					}
					this.context3D.drawTriangles(this.indexBuffers[arrayBufferIndex],(start - arrayBufferIndex * 10922) * 3,length * 2);
					start += length;
				}
			}
		}
	}
	,flushVertexBufferData: function() {
		if(this.vertexBufferData.length > this.vertexCount) {
			this.vertexCount = this.vertexBufferData.length;
			this.vertexBuffer = this.context3D.createVertexBuffer(this.vertexCount,this.dataPerVertex,0);
		}
		this.vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.vertexBufferData));
	}
	,resize: function(elementCount,dataPerVertex) {
		if(dataPerVertex == null) {
			dataPerVertex = -1;
		}
		this.elementCount = elementCount;
		if(dataPerVertex == -1) {
			dataPerVertex = this.dataPerVertex;
		}
		if(dataPerVertex != this.dataPerVertex) {
			this.vertexBuffer = null;
			this.vertexCount = 0;
			this.dataPerVertex = dataPerVertex;
		}
		var numVertices = 0;
		switch(this.elementType._hx_index) {
		case 0:
			numVertices = elementCount * 4;
			break;
		case 1:
			numVertices = elementCount * 3;
			break;
		case 2:
			numVertices = elementCount * 3;
			break;
		}
		var vertexLength = numVertices * dataPerVertex;
		if(this.vertexBufferData == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(vertexLength != null) {
				this1 = new Float32Array(vertexLength);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(vector != null) {
				this1 = new Float32Array(vector.__array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.vertexBufferData = this1;
		} else if(vertexLength > this.vertexBufferData.length) {
			var cacheBufferData = this.vertexBufferData;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(vertexLength != null) {
				this1 = new Float32Array(vertexLength);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(vector != null) {
				this1 = new Float32Array(vector.__array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.vertexBufferData = this1;
			this.vertexBufferData.set(cacheBufferData);
		}
	}
	,__class__: openfl_display__$internal_Context3DBuffer
};
var openfl_display__$internal_Context3DElementType = $hxEnums["openfl.display._internal.Context3DElementType"] = { __ename__:"openfl.display._internal.Context3DElementType",__constructs__:null
	,QUADS: {_hx_name:"QUADS",_hx_index:0,__enum__:"openfl.display._internal.Context3DElementType",toString:$estr}
	,TRIANGLES: {_hx_name:"TRIANGLES",_hx_index:1,__enum__:"openfl.display._internal.Context3DElementType",toString:$estr}
	,TRIANGLE_INDICES: {_hx_name:"TRIANGLE_INDICES",_hx_index:2,__enum__:"openfl.display._internal.Context3DElementType",toString:$estr}
};
openfl_display__$internal_Context3DElementType.__constructs__ = [openfl_display__$internal_Context3DElementType.QUADS,openfl_display__$internal_Context3DElementType.TRIANGLES,openfl_display__$internal_Context3DElementType.TRIANGLE_INDICES];
var openfl_display__$internal_Context3DDisplayObject = function() { };
$hxClasses["openfl.display._internal.Context3DDisplayObject"] = openfl_display__$internal_Context3DDisplayObject;
openfl_display__$internal_Context3DDisplayObject.__name__ = "openfl.display._internal.Context3DDisplayObject";
openfl_display__$internal_Context3DDisplayObject.render = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderer.__setBlendMode(displayObject.__worldBlendMode);
		renderer.__pushMaskObject(displayObject);
		var context = renderer.__context3D;
		var rect = openfl_geom_Rectangle.__pool.get();
		rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
		renderer.__pushMaskRect(rect,displayObject.__renderTransform);
		var color = displayObject.opaqueBackground;
		context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
		renderer.__popMaskRect();
		renderer.__popMaskObject(displayObject);
		openfl_geom_Rectangle.__pool.release(rect);
	}
	if(displayObject.__graphics != null) {
		openfl_display__$internal_Context3DShape.render(displayObject,renderer);
	}
};
openfl_display__$internal_Context3DDisplayObject.renderDrawable = function(displayObject,renderer) {
	renderer.__updateCacheBitmap(displayObject,false);
	if(displayObject.__cacheBitmap != null && !displayObject.__isCacheBitmapRender) {
		openfl_display__$internal_Context3DBitmap.render(displayObject.__cacheBitmap,renderer);
	} else if(!(displayObject.opaqueBackground == null && displayObject.__graphics == null)) {
		if(!(!displayObject.__renderable || displayObject.__worldAlpha <= 0)) {
			if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
				renderer.__setBlendMode(displayObject.__worldBlendMode);
				renderer.__pushMaskObject(displayObject);
				var context = renderer.__context3D;
				var rect = openfl_geom_Rectangle.__pool.get();
				rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
				renderer.__pushMaskRect(rect,displayObject.__renderTransform);
				var color = displayObject.opaqueBackground;
				context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
				renderer.__popMaskRect();
				renderer.__popMaskObject(displayObject);
				openfl_geom_Rectangle.__pool.release(rect);
			}
			if(displayObject.__graphics != null) {
				openfl_display__$internal_Context3DShape.render(displayObject,renderer);
			}
		}
	}
	renderer.__renderEvent(displayObject);
};
openfl_display__$internal_Context3DDisplayObject.renderDrawableMask = function(displayObject,renderer) {
	if(displayObject.__graphics != null) {
		openfl_display__$internal_Context3DShape.renderMask(displayObject,renderer);
	}
};
openfl_display__$internal_Context3DDisplayObject.renderMask = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	var tmp = displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	if(displayObject.__graphics != null) {
		openfl_display__$internal_Context3DShape.renderMask(displayObject,renderer);
	}
};
var openfl_display__$internal_Context3DDisplayObjectContainer = function() { };
$hxClasses["openfl.display._internal.Context3DDisplayObjectContainer"] = openfl_display__$internal_Context3DDisplayObjectContainer;
openfl_display__$internal_Context3DDisplayObjectContainer.__name__ = "openfl.display._internal.Context3DDisplayObjectContainer";
openfl_display__$internal_Context3DDisplayObjectContainer.renderDrawable = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	if(!displayObjectContainer.__renderable || displayObjectContainer.__worldAlpha <= 0) {
		return;
	}
	openfl_display__$internal_Context3DDisplayObject.renderDrawable(displayObjectContainer,renderer);
	if(displayObjectContainer.__cacheBitmap != null && !displayObjectContainer.__isCacheBitmapRender) {
		return;
	}
	if(displayObjectContainer.__children.length > 0) {
		renderer.__pushMaskObject(displayObjectContainer);
		if(renderer.__stage != null) {
			var _g = 0;
			var _g1 = displayObjectContainer.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				renderer.__renderDrawable(child);
				child.__renderDirty = false;
			}
			displayObjectContainer.__renderDirty = false;
		} else {
			var _g = 0;
			var _g1 = displayObjectContainer.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				renderer.__renderDrawable(child);
			}
		}
	}
	if(displayObjectContainer.__children.length > 0) {
		renderer.__popMaskObject(displayObjectContainer);
	}
};
openfl_display__$internal_Context3DDisplayObjectContainer.renderDrawableMask = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	if(displayObjectContainer.__graphics != null) {
		openfl_display__$internal_Context3DShape.renderMask(displayObjectContainer,renderer);
	}
	var _g = 0;
	var _g1 = displayObjectContainer.__children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		renderer.__renderDrawableMask(child);
	}
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = "openfl.geom.Matrix";
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector3D.x;
			this.b = vector3D.y;
		} else if(column == 1) {
			this.c = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
			this.tx = vector3D.z;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
			this.ty = vector3D.z;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.setTo(0,0,1);
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(this.__array == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			this.__array = new Float32Array(9);
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		openfl_geom_Matrix.__matrix3.setTo(this.a,this.b,this.c,this.d,this.tx,this.ty);
		return openfl_geom_Matrix.__matrix3;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = "openfl.geom.ColorTransform";
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redOffset = second.redOffset * this.redMultiplier + this.redOffset;
		this.greenOffset = second.greenOffset * this.greenMultiplier + this.greenOffset;
		this.blueOffset = second.blueOffset * this.blueMultiplier + this.blueOffset;
		this.alphaOffset = second.alphaOffset * this.alphaMultiplier + this.alphaOffset;
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__identity: function() {
		this.redMultiplier = 1;
		this.greenMultiplier = 1;
		this.blueMultiplier = 1;
		this.alphaMultiplier = 1;
		this.redOffset = 0;
		this.greenOffset = 0;
		this.blueOffset = 0;
		this.alphaOffset = 0;
	}
	,__invert: function() {
		this.redMultiplier = this.redMultiplier != 0 ? 1 / this.redMultiplier : 1;
		this.greenMultiplier = this.greenMultiplier != 0 ? 1 / this.greenMultiplier : 1;
		this.blueMultiplier = this.blueMultiplier != 0 ? 1 / this.blueMultiplier : 1;
		this.alphaMultiplier = this.alphaMultiplier != 0 ? 1 / this.alphaMultiplier : 1;
		this.redOffset = -this.redOffset;
		this.greenOffset = -this.greenOffset;
		this.blueOffset = -this.blueOffset;
		this.alphaOffset = -this.alphaOffset;
	}
	,__equals: function(ct,ignoreAlphaMultiplier) {
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (ignoreAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function(ignoreAlphaMultiplier) {
		if(ignoreAlphaMultiplier) {
			if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
				return this.alphaOffset == 0;
			} else {
				return false;
			}
		} else if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,__setArrays: function(colorMultipliers,colorOffsets) {
		colorMultipliers[0] = this.redMultiplier;
		colorMultipliers[1] = this.greenMultiplier;
		colorMultipliers[2] = this.blueMultiplier;
		colorMultipliers[3] = this.alphaMultiplier;
		colorOffsets[0] = this.redOffset;
		colorOffsets[1] = this.greenOffset;
		colorOffsets[2] = this.blueOffset;
		colorOffsets[3] = this.alphaOffset;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			openfl_geom_ColorTransform.__limeColorMatrix = new Float32Array(20);
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl_display__$internal_Context3DGraphics = function() { };
$hxClasses["openfl.display._internal.Context3DGraphics"] = openfl_display__$internal_Context3DGraphics;
openfl_display__$internal_Context3DGraphics.__name__ = "openfl.display._internal.Context3DGraphics";
openfl_display__$internal_Context3DGraphics.buildBuffer = function(graphics,renderer) {
	var quadBufferPosition = 0;
	var triangleIndexBufferPosition = 0;
	var vertexBufferPosition = 0;
	var vertexBufferPositionUVT = 0;
	var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
	var context = renderer.__context3D;
	var tileRect = openfl_geom_Rectangle.__pool.get();
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var bitmap = null;
	var _g = 0;
	var _g1 = graphics.__commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
			var c = data;
			bitmap = c.buffer.o[c.oPos];
			break;
		case 1:
			bitmap = null;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 3:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
			var c1 = data;
			var shaderBuffer = c1.buffer.o[c1.oPos];
			bitmap = null;
			if(shaderBuffer != null) {
				var _g2 = 0;
				var _g3 = shaderBuffer.inputCount;
				while(_g2 < _g3) {
					var i = _g2++;
					if(shaderBuffer.inputRefs[i].name == "bitmap") {
						bitmap = shaderBuffer.inputs[i];
						break;
					}
				}
			}
			break;
		case 8:
			if(bitmap != null) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
				var c2 = data;
				var rects = c2.buffer.o[c2.oPos];
				var indices = c2.buffer.o[c2.oPos + 1];
				var transforms = c2.buffer.o[c2.oPos + 2];
				var hasIndices = indices != null;
				var transformABCD = false;
				var transformXY = false;
				var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
				if(length == 0) {
					return;
				}
				if(transforms != null) {
					if(transforms.get_length() >= length * 6) {
						transformABCD = true;
						transformXY = true;
					} else if(transforms.get_length() >= length * 4) {
						transformABCD = true;
					} else if(transforms.get_length() >= length * 2) {
						transformXY = true;
					}
				}
				var dataPerVertex = 4;
				var stride = dataPerVertex * 4;
				if(graphics.__quadBuffer == null) {
					graphics.__quadBuffer = new openfl_display__$internal_Context3DBuffer(context,openfl_display__$internal_Context3DElementType.QUADS,length,dataPerVertex);
				} else {
					graphics.__quadBuffer.resize(quadBufferPosition + length,dataPerVertex);
				}
				var vertexOffset;
				var alpha = 1.0;
				var tileData;
				var id;
				var tileWidth;
				var tileHeight;
				var uvX;
				var uvY;
				var uvWidth;
				var uvHeight;
				var x;
				var y;
				var x2;
				var y2;
				var x3;
				var y3;
				var x4;
				var y4;
				var ri;
				var ti;
				var vertexBufferData = graphics.__quadBuffer.vertexBufferData;
				var bitmapWidth = bitmap.width;
				var bitmapHeight = bitmap.height;
				var sourceRect = bitmap.rect;
				var _g4 = 0;
				var _g5 = length;
				while(_g4 < _g5) {
					var i1 = _g4++;
					vertexOffset = (quadBufferPosition + i1) * stride;
					ri = hasIndices ? indices.get(i1) * 4 : i1 * 4;
					if(ri < 0) {
						continue;
					}
					tileRect.setTo(rects.get(ri),rects.get(ri + 1),rects.get(ri + 2),rects.get(ri + 3));
					tileWidth = tileRect.width;
					tileHeight = tileRect.height;
					if(tileWidth <= 0 || tileHeight <= 0) {
						continue;
					}
					if(transformABCD && transformXY) {
						ti = i1 * 6;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
					} else if(transformABCD) {
						ti = i1 * 4;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
					} else if(transformXY) {
						ti = i1 * 2;
						tileTransform.tx = transforms.get(ti);
						tileTransform.ty = transforms.get(ti + 1);
					} else {
						tileTransform.tx = tileRect.x;
						tileTransform.ty = tileRect.y;
					}
					uvX = tileRect.x / bitmapWidth;
					uvY = tileRect.y / bitmapHeight;
					uvWidth = tileRect.get_right() / bitmapWidth;
					uvHeight = tileRect.get_bottom() / bitmapHeight;
					x = 0 * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
					y = 0 * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
					x2 = tileWidth * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
					y2 = tileWidth * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
					x3 = 0 * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
					y3 = 0 * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
					x4 = tileWidth * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
					y4 = tileWidth * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
					vertexBufferData[vertexOffset] = x;
					vertexBufferData[vertexOffset + 1] = y;
					vertexBufferData[vertexOffset + 2] = uvX;
					vertexBufferData[vertexOffset + 3] = uvY;
					vertexBufferData[vertexOffset + dataPerVertex] = x2;
					vertexBufferData[vertexOffset + dataPerVertex + 1] = y2;
					vertexBufferData[vertexOffset + dataPerVertex + 2] = uvWidth;
					vertexBufferData[vertexOffset + dataPerVertex + 3] = uvY;
					vertexBufferData[vertexOffset + dataPerVertex * 2] = x3;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 1] = y3;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 2] = uvX;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 3] = uvHeight;
					vertexBufferData[vertexOffset + dataPerVertex * 3] = x4;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 1] = y4;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 2] = uvWidth;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 3] = uvHeight;
				}
				quadBufferPosition += length;
			}
			break;
		case 12:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
			var c3 = data;
			var vertices = c3.buffer.o[c3.oPos];
			var indices1 = c3.buffer.o[c3.oPos + 1];
			var uvtData = c3.buffer.o[c3.oPos + 2];
			var culling = c3.buffer.o[c3.oPos + 3];
			var hasIndices1 = indices1 != null;
			var numVertices = Math.floor(vertices.get_length() / 2);
			var length1 = hasIndices1 ? indices1.get_length() : numVertices;
			var hasUVData = uvtData != null;
			var hasUVTData = hasUVData && uvtData.get_length() >= numVertices * 3;
			var vertLength = hasUVTData ? 4 : 2;
			var uvStride = hasUVTData ? 3 : 2;
			var dataPerVertex1 = vertLength + 2;
			var vertexOffset1 = hasUVTData ? vertexBufferPositionUVT : vertexBufferPosition;
			openfl_display__$internal_Context3DGraphics.resizeVertexBuffer(graphics,hasUVTData,vertexOffset1 + length1 * dataPerVertex1);
			var vertexBufferData1 = hasUVTData ? graphics.__vertexBufferDataUVT : graphics.__vertexBufferData;
			var offset;
			var vertOffset;
			var uvOffset;
			var t;
			var _g6 = 0;
			var _g7 = length1;
			while(_g6 < _g7) {
				var i2 = _g6++;
				offset = vertexOffset1 + i2 * dataPerVertex1;
				vertOffset = hasIndices1 ? indices1.get(i2) * 2 : i2 * 2;
				uvOffset = hasIndices1 ? indices1.get(i2) * uvStride : i2 * uvStride;
				if(hasUVTData) {
					t = uvtData.get(uvOffset + 2);
					vertexBufferData1[offset] = vertices.get(vertOffset) / t;
					vertexBufferData1[offset + 1] = vertices.get(vertOffset + 1) / t;
					vertexBufferData1[offset + 2] = 0;
					vertexBufferData1[offset + 3] = 1 / t;
				} else {
					vertexBufferData1[offset] = vertices.get(vertOffset);
					vertexBufferData1[offset + 1] = vertices.get(vertOffset + 1);
				}
				vertexBufferData1[offset + vertLength] = hasUVData ? uvtData.get(uvOffset) : 0;
				vertexBufferData1[offset + vertLength + 1] = hasUVData ? uvtData.get(uvOffset + 1) : 0;
			}
			if(hasUVTData) {
				vertexBufferPositionUVT += length1 * dataPerVertex1;
			} else {
				vertexBufferPosition += length1 * dataPerVertex1;
			}
			break;
		case 13:
			bitmap = null;
			break;
		default:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
		}
	}
	if(quadBufferPosition > 0) {
		graphics.__quadBuffer.flushVertexBufferData();
	}
	if(triangleIndexBufferPosition > 0) {
		var buffer = graphics.__triangleIndexBuffer;
		if(buffer == null || triangleIndexBufferPosition > graphics.__triangleIndexBufferCount) {
			buffer = context.createIndexBuffer(triangleIndexBufferPosition,0);
			graphics.__triangleIndexBuffer = buffer;
			graphics.__triangleIndexBufferCount = triangleIndexBufferPosition;
		}
		buffer.uploadFromTypedArray(graphics.__triangleIndexBufferData);
	}
	if(vertexBufferPosition > 0) {
		var buffer = graphics.__vertexBuffer;
		if(buffer == null || vertexBufferPosition > graphics.__vertexBufferCount) {
			buffer = context.createVertexBuffer(vertexBufferPosition,4,0);
			graphics.__vertexBuffer = buffer;
			graphics.__vertexBufferCount = vertexBufferPosition;
		}
		buffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(graphics.__vertexBufferData));
	}
	if(vertexBufferPositionUVT > 0) {
		var buffer = graphics.__vertexBufferUVT;
		if(buffer == null || vertexBufferPositionUVT > graphics.__vertexBufferCountUVT) {
			buffer = context.createVertexBuffer(vertexBufferPositionUVT,6,0);
			graphics.__vertexBufferUVT = buffer;
			graphics.__vertexBufferCountUVT = vertexBufferPositionUVT;
		}
		buffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(graphics.__vertexBufferDataUVT));
	}
	openfl_geom_Rectangle.__pool.release(tileRect);
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl_display__$internal_Context3DGraphics.isCompatible = function(graphics) {
	if(graphics.__owner.__worldScale9Grid != null) {
		return false;
	}
	var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
	var hasColorFill = false;
	var hasBitmapFill = false;
	var hasShaderFill = false;
	var _g = 0;
	var _g1 = graphics.__commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			hasBitmapFill = true;
			hasColorFill = false;
			hasShaderFill = false;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 1:
			hasBitmapFill = false;
			hasColorFill = true;
			hasShaderFill = false;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 3:
			hasBitmapFill = false;
			hasColorFill = false;
			hasShaderFill = true;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 8:
			if(hasBitmapFill || hasShaderFill) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 9:
			if(hasColorFill) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 12:
			if(hasBitmapFill || hasShaderFill) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 13:
			hasBitmapFill = false;
			hasColorFill = false;
			hasShaderFill = false;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 18:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 19:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		default:
			data.destroy();
			return false;
		}
	}
	data.destroy();
	return true;
};
openfl_display__$internal_Context3DGraphics.render = function(graphics,renderer) {
	if(!graphics.__visible || graphics.__commands.get_length() == 0) {
		return;
	}
	if(graphics.__bitmap != null && !graphics.__dirty || !openfl_display__$internal_Context3DGraphics.isCompatible(graphics)) {
		renderer.__softwareRenderer.__pixelRatio = renderer.__pixelRatio;
		var cacheTransform = renderer.__softwareRenderer.__worldTransform;
		if(graphics.__owner.__drawableType == 7) {
			renderer.__softwareRenderer.__worldTransform = openfl_geom_Matrix.__identity;
		} else {
			renderer.__softwareRenderer.__worldTransform = renderer.__worldTransform;
		}
		openfl_display__$internal_CanvasGraphics.render(graphics,renderer.__softwareRenderer);
		renderer.__softwareRenderer.__worldTransform = cacheTransform;
	} else {
		graphics.__bitmap = null;
		var pixelRatio = renderer.__pixelRatio;
		graphics.__update(renderer.__worldTransform,pixelRatio);
		var bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(bounds != null && width >= 1 && height >= 1) {
			if(graphics.__hardwareDirty || graphics.__quadBuffer == null && graphics.__vertexBuffer == null && graphics.__vertexBufferUVT == null) {
				openfl_display__$internal_Context3DGraphics.buildBuffer(graphics,renderer);
			}
			var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
			var context = renderer.__context3D;
			var gl = context.gl;
			var matrix = openfl_geom_Matrix.__pool.get();
			var shaderBuffer = null;
			var bitmap = null;
			var repeat = false;
			var smooth = false;
			var fill = null;
			var positionX = 0.0;
			var positionY = 0.0;
			var quadBufferPosition = 0;
			var shaderBufferOffset = 0;
			var triangleIndexBufferPosition = 0;
			var vertexBufferPosition = 0;
			var vertexBufferPositionUVT = 0;
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type._hx_index) {
				case 0:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
					var c = data;
					bitmap = c.buffer.o[c.oPos];
					repeat = c.buffer.b[c.bPos];
					smooth = c.buffer.b[c.bPos + 1];
					shaderBuffer = null;
					fill = null;
					break;
				case 1:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
					var c1 = data;
					var color = c1.buffer.i[c1.iPos] | 0;
					var alpha = c1.buffer.f[c1.fPos] * 255 | 0;
					fill = color & 16777215 | alpha << 24;
					shaderBuffer = null;
					bitmap = null;
					break;
				case 3:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
					var c2 = data;
					shaderBuffer = c2.buffer.o[c2.oPos];
					shaderBufferOffset = 0;
					if(shaderBuffer == null || shaderBuffer.shader == null || shaderBuffer.shader.__bitmap == null) {
						bitmap = null;
					} else {
						bitmap = shaderBuffer.shader.__bitmap.input;
					}
					fill = null;
					break;
				case 8:
					if(bitmap != null) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
						var c3 = data;
						var rects = c3.buffer.o[c3.oPos];
						var indices = c3.buffer.o[c3.oPos + 1];
						var transforms = c3.buffer.o[c3.oPos + 2];
						var hasIndices = indices != null;
						var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
						var uMatrix = renderer.__getMatrix(graphics.__owner.__renderTransform,1);
						var shader;
						if(shaderBuffer != null && !openfl_display__$internal_Context3DGraphics.maskRender) {
							shader = renderer.__initShaderBuffer(shaderBuffer);
							renderer.__setShaderBuffer(shaderBuffer);
							renderer.applyMatrix(uMatrix);
							renderer.applyBitmapData(bitmap,false,repeat);
							renderer.applyAlpha(graphics.__owner.__worldAlpha);
							renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
						} else {
							shader = openfl_display__$internal_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
							renderer.setShader(shader);
							renderer.applyMatrix(uMatrix);
							renderer.applyBitmapData(bitmap,smooth,repeat);
							renderer.applyAlpha(graphics.__owner.__worldAlpha);
							renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
							renderer.updateShader();
						}
						var end = quadBufferPosition + length;
						while(quadBufferPosition < end) {
							length = Math.min(end - quadBufferPosition,context.__quadIndexBufferElements) | 0;
							if(length <= 0) {
								break;
							}
							if(shaderBuffer != null && !openfl_display__$internal_Context3DGraphics.maskRender) {
								renderer.__updateShaderBuffer(shaderBufferOffset);
							}
							if(shader.__position != null) {
								context.setVertexBufferAt(shader.__position.index,graphics.__quadBuffer.vertexBuffer,quadBufferPosition * 16,2);
							}
							if(shader.__textureCoord != null) {
								context.setVertexBufferAt(shader.__textureCoord.index,graphics.__quadBuffer.vertexBuffer,quadBufferPosition * 16 + 2,2);
							}
							context.drawTriangles(context.__quadIndexBuffer,0,length * 2);
							shaderBufferOffset += length * 4;
							quadBufferPosition += length;
						}
						renderer.__clearShader();
					}
					break;
				case 9:
					if(fill != null) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
						var c4 = data;
						var x = c4.buffer.f[c4.fPos];
						var y = c4.buffer.f[c4.fPos + 1];
						var width = c4.buffer.f[c4.fPos + 2];
						var height = c4.buffer.f[c4.fPos + 3];
						var color1 = fill;
						openfl_display__$internal_Context3DGraphics.tempColorTransform.redOffset = color1 >>> 16 & 255;
						openfl_display__$internal_Context3DGraphics.tempColorTransform.greenOffset = color1 >>> 8 & 255;
						openfl_display__$internal_Context3DGraphics.tempColorTransform.blueOffset = color1 & 255;
						openfl_display__$internal_Context3DGraphics.tempColorTransform.__combine(graphics.__owner.__worldColorTransform);
						matrix.identity();
						matrix.scale(width,height);
						matrix.tx = x;
						matrix.ty = y;
						matrix.concat(graphics.__owner.__renderTransform);
						var shader1 = openfl_display__$internal_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
						renderer.setShader(shader1);
						renderer.applyMatrix(renderer.__getMatrix(matrix,1));
						renderer.applyBitmapData(openfl_display__$internal_Context3DGraphics.blankBitmapData,true,repeat);
						renderer.applyAlpha((color1 >>> 24 & 255) / 255 * graphics.__owner.__worldAlpha);
						renderer.applyColorTransform(openfl_display__$internal_Context3DGraphics.tempColorTransform);
						renderer.updateShader();
						var vertexBuffer = openfl_display__$internal_Context3DGraphics.blankBitmapData.getVertexBuffer(context);
						if(shader1.__position != null) {
							context.setVertexBufferAt(shader1.__position.index,vertexBuffer,0,3);
						}
						if(shader1.__textureCoord != null) {
							context.setVertexBufferAt(shader1.__textureCoord.index,vertexBuffer,3,2);
						}
						var indexBuffer = openfl_display__$internal_Context3DGraphics.blankBitmapData.getIndexBuffer(context);
						context.drawTriangles(indexBuffer);
						shaderBufferOffset += 4;
						renderer.__clearShader();
					}
					break;
				case 12:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
					var c5 = data;
					var vertices = c5.buffer.o[c5.oPos];
					var indices1 = c5.buffer.o[c5.oPos + 1];
					var uvtData = c5.buffer.o[c5.oPos + 2];
					var culling = c5.buffer.o[c5.oPos + 3];
					var hasIndices1 = indices1 != null;
					var numVertices = Math.floor(vertices.get_length() / 2);
					var length1 = hasIndices1 ? indices1.get_length() : numVertices;
					var hasUVData = uvtData != null;
					var hasUVTData = hasUVData && uvtData.get_length() >= numVertices * 3;
					var vertLength = hasUVTData ? 4 : 2;
					var uvStride = hasUVTData ? 3 : 2;
					var dataPerVertex = vertLength + 2;
					var vertexBuffer1 = hasUVTData ? graphics.__vertexBufferUVT : graphics.__vertexBuffer;
					var bufferPosition = hasUVTData ? vertexBufferPositionUVT : vertexBufferPosition;
					var uMatrix1 = renderer.__getMatrix(graphics.__owner.__renderTransform,1);
					var shader2;
					if(shaderBuffer != null && !openfl_display__$internal_Context3DGraphics.maskRender) {
						shader2 = renderer.__initShaderBuffer(shaderBuffer);
						renderer.__setShaderBuffer(shaderBuffer);
						renderer.applyMatrix(uMatrix1);
						renderer.applyBitmapData(bitmap,false,repeat);
						renderer.applyAlpha(1);
						renderer.applyColorTransform(null);
						renderer.__updateShaderBuffer(shaderBufferOffset);
					} else {
						shader2 = openfl_display__$internal_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
						renderer.setShader(shader2);
						renderer.applyMatrix(uMatrix1);
						renderer.applyBitmapData(bitmap,smooth,repeat);
						renderer.applyAlpha(graphics.__owner.__worldAlpha);
						renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
						renderer.updateShader();
					}
					if(shader2.__position != null) {
						context.setVertexBufferAt(shader2.__position.index,vertexBuffer1,bufferPosition,hasUVTData ? 4 : 2);
					}
					if(shader2.__textureCoord != null) {
						context.setVertexBufferAt(shader2.__textureCoord.index,vertexBuffer1,bufferPosition + vertLength,2);
					}
					switch(culling) {
					case 0:
						context.setCulling(0);
						break;
					case 1:
						context.setCulling(3);
						break;
					case 2:
						context.setCulling(1);
						break;
					default:
					}
					context.__drawTriangles(0,length1);
					shaderBufferOffset += length1;
					if(hasUVTData) {
						vertexBufferPositionUVT += dataPerVertex * length1;
					} else {
						vertexBufferPosition += dataPerVertex * length1;
					}
					switch(culling) {
					case 1:case 2:
						context.setCulling(0);
						break;
					default:
					}
					renderer.__clearShader();
					break;
				case 13:
					bitmap = null;
					fill = null;
					shaderBuffer = null;
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = type;
					context.setCulling(3);
					break;
				case 18:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
					var c6 = data;
					positionX = c6.buffer.f[c6.fPos];
					positionY = c6.buffer.f[c6.fPos + 1];
					break;
				case 19:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.OVERRIDE_BLEND_MODE;
					var c7 = data;
					renderer.__setBlendMode(c7.buffer.o[c7.oPos]);
					break;
				default:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = type;
				}
			}
			openfl_geom_Matrix.__pool.release(matrix);
		}
		graphics.__hardwareDirty = false;
		graphics.set___dirty(false);
	}
};
openfl_display__$internal_Context3DGraphics.renderMask = function(graphics,renderer) {
	openfl_display__$internal_Context3DGraphics.maskRender = true;
	openfl_display__$internal_Context3DGraphics.render(graphics,renderer);
	openfl_display__$internal_Context3DGraphics.maskRender = false;
};
openfl_display__$internal_Context3DGraphics.resizeIndexBuffer = function(graphics,isQuad,length) {
	if(isQuad) {
		return;
	}
	var buffer = isQuad ? null : graphics.__triangleIndexBufferData;
	var position = 0;
	var newBuffer = null;
	if(buffer == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Uint16Array(length);
		} else if(array != null) {
			this1 = new Uint16Array(array);
		} else if(vector != null) {
			this1 = new Uint16Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint16Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint16Array(buffer1,0);
			} else {
				this1 = new Uint16Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
	} else if(length > buffer.length) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Uint16Array(length);
		} else if(array != null) {
			this1 = new Uint16Array(array);
		} else if(vector != null) {
			this1 = new Uint16Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint16Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint16Array(buffer1,0);
			} else {
				this1 = new Uint16Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
		newBuffer.set(buffer);
		position = buffer.length;
	}
	if(newBuffer != null) {
		if(!isQuad) {
			graphics.__triangleIndexBufferData = newBuffer;
		}
	}
};
openfl_display__$internal_Context3DGraphics.resizeVertexBuffer = function(graphics,hasUVTData,length) {
	var buffer = hasUVTData ? graphics.__vertexBufferDataUVT : graphics.__vertexBufferData;
	var newBuffer = null;
	if(buffer == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Float32Array(length);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(vector != null) {
			this1 = new Float32Array(vector.__array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Float32Array(buffer1,0);
			} else {
				this1 = new Float32Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
	} else if(length > buffer.length) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Float32Array(length);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(vector != null) {
			this1 = new Float32Array(vector.__array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Float32Array(buffer1,0);
			} else {
				this1 = new Float32Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
		newBuffer.set(buffer);
	}
	if(newBuffer != null) {
		if(hasUVTData) {
			graphics.__vertexBufferDataUVT = newBuffer;
		} else {
			graphics.__vertexBufferData = newBuffer;
		}
	}
};
var openfl_display__$internal_Context3DMaskShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 openfl_TextureCoordv;\r\n\r\n\t\tuniform sampler2D openfl_Texture;\r\n\r\n\t\tvoid main(void) {\r\n\r\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\r\n\r\n\t\t\tif (color.a == 0.0) {\r\n\r\n\t\t\t\tdiscard;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl_FragColor = color;\r\n\r\n\t\t\t}\r\n\r\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\r\n\t\tattribute vec2 openfl_TextureCoord;\r\n\t\tvarying vec2 openfl_TextureCoordv;\r\n\r\n\t\tuniform mat4 openfl_Matrix;\r\n\r\n\t\tvoid main(void) {\r\n\r\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\r\n\r\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\r\n\r\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display._internal.Context3DMaskShader"] = openfl_display__$internal_Context3DMaskShader;
openfl_display__$internal_Context3DMaskShader.__name__ = "openfl.display._internal.Context3DMaskShader";
openfl_display__$internal_Context3DMaskShader.__super__ = openfl_display_Shader;
openfl_display__$internal_Context3DMaskShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_Texture: null
	,__class__: openfl_display__$internal_Context3DMaskShader
});
var openfl_display__$internal_Context3DShape = function() { };
$hxClasses["openfl.display._internal.Context3DShape"] = openfl_display__$internal_Context3DShape;
openfl_display__$internal_Context3DShape.__name__ = "openfl.display._internal.Context3DShape";
openfl_display__$internal_Context3DShape.render = function(shape,renderer) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		renderer.__setBlendMode(shape.__worldBlendMode);
		renderer.__pushMaskObject(shape);
		openfl_display__$internal_Context3DGraphics.render(graphics,renderer);
		if(graphics.__bitmap != null && graphics.__visible) {
			var context = renderer.__context3D;
			var scale9Grid = shape.__worldScale9Grid;
			var shader = renderer.__initDisplayShader(shape.__worldShader);
			renderer.setShader(shader);
			renderer.applyBitmapData(graphics.__bitmap,true);
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.scale(1 / graphics.__bitmapScale,1 / graphics.__bitmapScale);
			matrix.concat(graphics.__worldTransform);
			renderer.applyMatrix(renderer.__getMatrix(matrix,1));
			openfl_geom_Matrix.__pool.release(matrix);
			renderer.applyAlpha(shape.__worldAlpha);
			renderer.applyColorTransform(shape.__worldColorTransform);
			renderer.updateShader();
			var vertexBuffer = graphics.__bitmap.getVertexBuffer(context);
			if(shader.__position != null) {
				context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
			}
			if(shader.__textureCoord != null) {
				context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
			}
			var indexBuffer = graphics.__bitmap.getIndexBuffer(context);
			context.drawTriangles(indexBuffer);
			renderer.__clearShader();
		}
		renderer.__popMaskObject(shape);
	}
};
openfl_display__$internal_Context3DShape.renderMask = function(shape,renderer) {
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl_display__$internal_Context3DGraphics.renderMask(graphics,renderer);
		if(graphics.__bitmap != null) {
			var context = renderer.__context3D;
			var shader = renderer.__maskShader;
			renderer.setShader(shader);
			renderer.applyBitmapData(graphics.__bitmap,true);
			renderer.applyMatrix(renderer.__getMatrix(graphics.__worldTransform,1));
			renderer.updateShader();
			var vertexBuffer = graphics.__bitmap.getVertexBuffer(context);
			if(shader.__position != null) {
				context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
			}
			if(shader.__textureCoord != null) {
				context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
			}
			var indexBuffer = graphics.__bitmap.getIndexBuffer(context);
			context.drawTriangles(indexBuffer);
			renderer.__clearShader();
		}
	}
};
var openfl_display__$internal_Context3DSimpleButton = function() { };
$hxClasses["openfl.display._internal.Context3DSimpleButton"] = openfl_display__$internal_Context3DSimpleButton;
openfl_display__$internal_Context3DSimpleButton.__name__ = "openfl.display._internal.Context3DSimpleButton";
openfl_display__$internal_Context3DSimpleButton.renderDrawable = function(simpleButton,renderer) {
	if(!simpleButton.__renderable || simpleButton.__worldAlpha <= 0 || simpleButton.__currentState == null) {
		return;
	}
	renderer.__pushMaskObject(simpleButton);
	renderer.__renderDrawable(simpleButton.__currentState);
	renderer.__popMaskObject(simpleButton);
	renderer.__renderEvent(simpleButton);
};
openfl_display__$internal_Context3DSimpleButton.renderDrawableMask = function(simpleButton,renderer) {
	if(simpleButton.__currentState == null) {
		return;
	}
	renderer.__renderDrawableMask(simpleButton.__currentState);
};
var openfl_display__$internal_Context3DTextField = function() { };
$hxClasses["openfl.display._internal.Context3DTextField"] = openfl_display__$internal_Context3DTextField;
openfl_display__$internal_Context3DTextField.__name__ = "openfl.display._internal.Context3DTextField";
openfl_display__$internal_Context3DTextField.render = function(textField,renderer) {
	renderer.__softwareRenderer.__pixelRatio = renderer.__pixelRatio;
	var renderer1 = renderer.__softwareRenderer;
	var transform = textField.__worldTransform;
	var textEngine = textField.__textEngine;
	var useTextBounds = !(textEngine.background || textEngine.border);
	var bounds = useTextBounds ? textEngine.textBounds : textEngine.bounds;
	var graphics = textField.__graphics;
	var cursorOffsetX = 0.0;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		if(textField.get_text().length == 0) {
			var boundsWidth = textEngine.bounds.width - 4;
			var align = textField.get_defaultTextFormat().align;
			cursorOffsetX = align == 3 ? 0 : align == 4 ? boundsWidth : boundsWidth / 2;
			switch(align) {
			case 0:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin / 2;
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin / 2;
				cursorOffsetX += textField.get_defaultTextFormat().indent / 2;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent / 2;
				break;
			case 1:
				break;
			case 2:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 3:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 4:
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin;
				break;
			case 5:
				break;
			}
			if(useTextBounds) {
				bounds.y = textEngine.bounds.y;
				bounds.x = cursorOffsetX;
			}
		}
		graphics.__bounds.copyFrom(bounds);
	}
	var pixelRatio = renderer1.__pixelRatio;
	graphics.__update(renderer1.__worldTransform,pixelRatio);
	if(textField.__dirty || graphics.__softwareDirty) {
		var width = Math.round(graphics.__width * pixelRatio);
		var height = Math.round(graphics.__height * pixelRatio);
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.__softwareDirty = false;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl_display__$internal_CanvasTextField.context = graphics.__context;
			graphics.__canvas.width = width;
			graphics.__canvas.height = height;
			if(renderer1.__isDOM) {
				graphics.__canvas.style.width = Math.round(width / pixelRatio) + "px";
				graphics.__canvas.style.height = Math.round(height / pixelRatio) + "px";
			}
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.scale(pixelRatio,pixelRatio);
			matrix.concat(graphics.__renderTransform);
			openfl_display__$internal_CanvasTextField.context.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			openfl_geom_Matrix.__pool.release(matrix);
			if(openfl_display__$internal_CanvasTextField.clearRect == null) {
				openfl_display__$internal_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl_display__$internal_CanvasTextField.clearRect) {
				openfl_display__$internal_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer1.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				openfl_display__$internal_CanvasTextField.context.textBaseline = "alphabetic";
				openfl_display__$internal_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g = 0;
				var _g1 = textField.get_scrollV() - 1;
				while(_g < _g1) {
					var i = _g++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var group = textEngine.layoutGroups.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
						break;
					}
					var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.font = openfl_text__$internal_TextEngine.getFont(group1.format);
					openfl_display__$internal_CanvasTextField.context.fillStyle = color;
					openfl_display__$internal_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g = 0;
								var _g1 = textField.__caretIndex - group1.startIndex;
								while(_g < _g1) {
									var i = _g++;
									if(group1.positions.length <= i) {
										break;
									}
									advance += group1.positions[i];
								}
								var scrollY1 = 0.0;
								var _g2 = textField.get_scrollV();
								var _g3 = group1.lineIndex + 1;
								while(_g2 < _g3) {
									var i1 = _g2++;
									scrollY1 += textEngine.lineHeights.get(i1 - 1);
								}
								openfl_display__$internal_CanvasTextField.context.beginPath();
								var tmp = StringTools.hex(group1.format.color & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								openfl_display__$internal_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.stroke();
								openfl_display__$internal_CanvasTextField.context.closePath();
							}
						} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group1.startIndex > selectionStart) {
								selectionStart = group1.startIndex;
							}
							if(group1.endIndex < selectionEnd) {
								selectionEnd = group1.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= group1.endIndex) {
								end = textField.getCharBoundaries(group1.endIndex - 1);
								if(end != null) {
									end.x += end.width + 2;
								}
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#000000";
								openfl_display__$internal_CanvasTextField.context.fillRect(start.x + scrollX - bounds.x,start.y + scrollY,end.x - start.x,group1.height);
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl_display__$internal_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x - bounds.x,group1.offsetY + group1.ascent + scrollY);
							}
						}
					}
					if(group1.format.underline) {
						openfl_display__$internal_CanvasTextField.context.beginPath();
						openfl_display__$internal_CanvasTextField.context.strokeStyle = color;
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var descent = Math.floor(group1.ascent * 0.185);
						var x = group1.offsetX + scrollX - bounds.x;
						var y = Math.ceil(group1.offsetY + scrollY + group1.ascent - bounds.y) + descent + 0.5;
						openfl_display__$internal_CanvasTextField.context.moveTo(x,y);
						openfl_display__$internal_CanvasTextField.context.lineTo(x + group1.width,y);
						openfl_display__$internal_CanvasTextField.context.stroke();
						openfl_display__$internal_CanvasTextField.context.closePath();
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl_display__$internal_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						openfl_display__$internal_CanvasTextField.context.lineCap = "square";
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX = -textField.get_scrollH() + (useTextBounds ? 0 : cursorOffsetX);
					var scrollY = 0.0;
					var _g = 0;
					var _g1 = textField.get_scrollV() - 1;
					while(_g < _g1) {
						var i = _g++;
						scrollY += textEngine.lineHeights.get(i);
					}
					openfl_display__$internal_CanvasTextField.context.beginPath();
					var tmp = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
					openfl_display__$internal_CanvasTextField.context.moveTo(scrollX + 2.5,scrollY + 2.5);
					openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
					openfl_display__$internal_CanvasTextField.context.lineTo(scrollX + 2.5,scrollY + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl_display__$internal_CanvasTextField.context.stroke();
					openfl_display__$internal_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__bitmapScale = pixelRatio;
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.__softwareDirty = false;
			graphics.set___dirty(false);
		}
	}
	textField.__graphics.__hardwareDirty = false;
};
openfl_display__$internal_Context3DTextField.renderDrawable = function(textField,renderer) {
	renderer.__updateCacheBitmap(textField,false);
	if(textField.__cacheBitmap != null && !textField.__isCacheBitmapRender) {
		openfl_display__$internal_Context3DBitmap.render(textField.__cacheBitmap,renderer);
	} else {
		openfl_display__$internal_Context3DTextField.render(textField,renderer);
		if(!(textField.opaqueBackground == null && textField.__graphics == null)) {
			if(!(!textField.__renderable || textField.__worldAlpha <= 0)) {
				if(textField.opaqueBackground != null && !textField.__isCacheBitmapRender && textField.get_width() > 0 && textField.get_height() > 0) {
					renderer.__setBlendMode(textField.__worldBlendMode);
					renderer.__pushMaskObject(textField);
					var context = renderer.__context3D;
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,textField.get_width(),textField.get_height());
					renderer.__pushMaskRect(rect,textField.__renderTransform);
					var color = textField.opaqueBackground;
					context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
					renderer.__popMaskRect();
					renderer.__popMaskObject(textField);
					openfl_geom_Rectangle.__pool.release(rect);
				}
				if(textField.__graphics != null) {
					openfl_display__$internal_Context3DShape.render(textField,renderer);
				}
			}
		}
	}
	renderer.__renderEvent(textField);
};
openfl_display__$internal_Context3DTextField.renderDrawableMask = function(textField,renderer) {
	openfl_display__$internal_Context3DTextField.renderMask(textField,renderer);
	openfl_display__$internal_Context3DDisplayObject.renderDrawableMask(textField,renderer);
};
openfl_display__$internal_Context3DTextField.renderMask = function(textField,renderer) {
	var renderer1 = renderer.__softwareRenderer;
	var transform = textField.__worldTransform;
	var textEngine = textField.__textEngine;
	var useTextBounds = !(textEngine.background || textEngine.border);
	var bounds = useTextBounds ? textEngine.textBounds : textEngine.bounds;
	var graphics = textField.__graphics;
	var cursorOffsetX = 0.0;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		if(textField.get_text().length == 0) {
			var boundsWidth = textEngine.bounds.width - 4;
			var align = textField.get_defaultTextFormat().align;
			cursorOffsetX = align == 3 ? 0 : align == 4 ? boundsWidth : boundsWidth / 2;
			switch(align) {
			case 0:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin / 2;
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin / 2;
				cursorOffsetX += textField.get_defaultTextFormat().indent / 2;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent / 2;
				break;
			case 1:
				break;
			case 2:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 3:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 4:
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin;
				break;
			case 5:
				break;
			}
			if(useTextBounds) {
				bounds.y = textEngine.bounds.y;
				bounds.x = cursorOffsetX;
			}
		}
		graphics.__bounds.copyFrom(bounds);
	}
	var pixelRatio = renderer1.__pixelRatio;
	graphics.__update(renderer1.__worldTransform,pixelRatio);
	if(textField.__dirty || graphics.__softwareDirty) {
		var width = Math.round(graphics.__width * pixelRatio);
		var height = Math.round(graphics.__height * pixelRatio);
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.__softwareDirty = false;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl_display__$internal_CanvasTextField.context = graphics.__context;
			graphics.__canvas.width = width;
			graphics.__canvas.height = height;
			if(renderer1.__isDOM) {
				graphics.__canvas.style.width = Math.round(width / pixelRatio) + "px";
				graphics.__canvas.style.height = Math.round(height / pixelRatio) + "px";
			}
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.scale(pixelRatio,pixelRatio);
			matrix.concat(graphics.__renderTransform);
			openfl_display__$internal_CanvasTextField.context.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			openfl_geom_Matrix.__pool.release(matrix);
			if(openfl_display__$internal_CanvasTextField.clearRect == null) {
				openfl_display__$internal_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl_display__$internal_CanvasTextField.clearRect) {
				openfl_display__$internal_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer1.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				openfl_display__$internal_CanvasTextField.context.textBaseline = "alphabetic";
				openfl_display__$internal_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g = 0;
				var _g1 = textField.get_scrollV() - 1;
				while(_g < _g1) {
					var i = _g++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var group = textEngine.layoutGroups.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
						break;
					}
					var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.font = openfl_text__$internal_TextEngine.getFont(group1.format);
					openfl_display__$internal_CanvasTextField.context.fillStyle = color;
					openfl_display__$internal_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g = 0;
								var _g1 = textField.__caretIndex - group1.startIndex;
								while(_g < _g1) {
									var i = _g++;
									if(group1.positions.length <= i) {
										break;
									}
									advance += group1.positions[i];
								}
								var scrollY1 = 0.0;
								var _g2 = textField.get_scrollV();
								var _g3 = group1.lineIndex + 1;
								while(_g2 < _g3) {
									var i1 = _g2++;
									scrollY1 += textEngine.lineHeights.get(i1 - 1);
								}
								openfl_display__$internal_CanvasTextField.context.beginPath();
								var tmp = StringTools.hex(group1.format.color & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								openfl_display__$internal_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.stroke();
								openfl_display__$internal_CanvasTextField.context.closePath();
							}
						} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group1.startIndex > selectionStart) {
								selectionStart = group1.startIndex;
							}
							if(group1.endIndex < selectionEnd) {
								selectionEnd = group1.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= group1.endIndex) {
								end = textField.getCharBoundaries(group1.endIndex - 1);
								if(end != null) {
									end.x += end.width + 2;
								}
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#000000";
								openfl_display__$internal_CanvasTextField.context.fillRect(start.x + scrollX - bounds.x,start.y + scrollY,end.x - start.x,group1.height);
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl_display__$internal_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x - bounds.x,group1.offsetY + group1.ascent + scrollY);
							}
						}
					}
					if(group1.format.underline) {
						openfl_display__$internal_CanvasTextField.context.beginPath();
						openfl_display__$internal_CanvasTextField.context.strokeStyle = color;
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var descent = Math.floor(group1.ascent * 0.185);
						var x = group1.offsetX + scrollX - bounds.x;
						var y = Math.ceil(group1.offsetY + scrollY + group1.ascent - bounds.y) + descent + 0.5;
						openfl_display__$internal_CanvasTextField.context.moveTo(x,y);
						openfl_display__$internal_CanvasTextField.context.lineTo(x + group1.width,y);
						openfl_display__$internal_CanvasTextField.context.stroke();
						openfl_display__$internal_CanvasTextField.context.closePath();
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl_display__$internal_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						openfl_display__$internal_CanvasTextField.context.lineCap = "square";
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX = -textField.get_scrollH() + (useTextBounds ? 0 : cursorOffsetX);
					var scrollY = 0.0;
					var _g = 0;
					var _g1 = textField.get_scrollV() - 1;
					while(_g < _g1) {
						var i = _g++;
						scrollY += textEngine.lineHeights.get(i);
					}
					openfl_display__$internal_CanvasTextField.context.beginPath();
					var tmp = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
					openfl_display__$internal_CanvasTextField.context.moveTo(scrollX + 2.5,scrollY + 2.5);
					openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
					openfl_display__$internal_CanvasTextField.context.lineTo(scrollX + 2.5,scrollY + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl_display__$internal_CanvasTextField.context.stroke();
					openfl_display__$internal_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__bitmapScale = pixelRatio;
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.__softwareDirty = false;
			graphics.set___dirty(false);
		}
	}
	textField.__graphics.__hardwareDirty = false;
};
var openfl_display__$internal_Context3DTilemap = function() { };
$hxClasses["openfl.display._internal.Context3DTilemap"] = openfl_display__$internal_Context3DTilemap;
openfl_display__$internal_Context3DTilemap.__name__ = "openfl.display._internal.Context3DTilemap";
openfl_display__$internal_Context3DTilemap.buildBuffer = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__group.__tiles.length == 0 || tilemap.__worldAlpha <= 0) {
		tilemap.__group.__dirty = false;
		return;
	}
	openfl_display__$internal_Context3DTilemap.numTiles = 0;
	openfl_display__$internal_Context3DTilemap.vertexBufferData = tilemap.__buffer != null ? tilemap.__buffer.vertexBufferData : null;
	openfl_display__$internal_Context3DTilemap.vertexDataPosition = 0;
	var rect = openfl_geom_Rectangle.__pool.get();
	var matrix = openfl_geom_Matrix.__pool.get();
	var parentTransform = openfl_geom_Matrix.__pool.get();
	openfl_display__$internal_Context3DTilemap.dataPerVertex = 4;
	if(tilemap.tileAlphaEnabled) {
		openfl_display__$internal_Context3DTilemap.dataPerVertex++;
	}
	if(tilemap.tileColorTransformEnabled) {
		openfl_display__$internal_Context3DTilemap.dataPerVertex += 8;
	}
	openfl_display__$internal_Context3DTilemap.buildBufferTileContainer(tilemap,tilemap.__group,renderer,parentTransform,tilemap.__tileset,tilemap.tileAlphaEnabled,tilemap.__worldAlpha,tilemap.tileColorTransformEnabled,tilemap.__worldColorTransform,null,rect,matrix);
	tilemap.__buffer.flushVertexBufferData();
	openfl_geom_Rectangle.__pool.release(rect);
	openfl_geom_Matrix.__pool.release(matrix);
	openfl_geom_Matrix.__pool.release(parentTransform);
};
openfl_display__$internal_Context3DTilemap.buildBufferTileContainer = function(tilemap,group,renderer,parentTransform,defaultTileset,alphaEnabled,worldAlpha,colorTransformEnabled,defaultColorTransform,cacheBitmapData,rect,matrix,isTopLevel) {
	if(isTopLevel == null) {
		isTopLevel = true;
	}
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var roundPixels = renderer.__roundPixels;
	var tiles = group.__tiles;
	var length = group.__length;
	var getLength = null;
	getLength = function(_group) {
		var _tiles = _group.__tiles;
		var totalLength = 0;
		var _g = 0;
		while(_g < _tiles.length) {
			var tile = _tiles[_g];
			++_g;
			if(tile.__length > 0) {
				totalLength += getLength(tile);
			} else {
				++totalLength;
			}
		}
		return totalLength;
	};
	if(isTopLevel) {
		openfl_display__$internal_Context3DTilemap.resizeBuffer(tilemap,openfl_display__$internal_Context3DTilemap.numTiles + getLength(group));
	}
	var tile;
	var tileset;
	var alpha;
	var visible;
	var colorTransform = null;
	var id;
	var tileData;
	var tileRect;
	var bitmapData;
	var tileWidth;
	var tileHeight;
	var uvX;
	var uvY;
	var uvHeight;
	var uvWidth;
	var vertexOffset;
	var x;
	var y;
	var x2;
	var y2;
	var x3;
	var y3;
	var x4;
	var y4;
	var alphaPosition = 4;
	var ctPosition = alphaEnabled ? 5 : 4;
	var _g = 0;
	while(_g < tiles.length) {
		var tile = tiles[_g];
		++_g;
		tileTransform.setTo(1,0,0,1,-tile.get_originX(),-tile.get_originY());
		tileTransform.concat(tile.get_matrix());
		tileTransform.concat(parentTransform);
		if(roundPixels) {
			tileTransform.tx = Math.round(tileTransform.tx);
			tileTransform.ty = Math.round(tileTransform.ty);
		}
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		tile.__dirty = false;
		if(!visible || alpha <= 0) {
			continue;
		}
		if(colorTransformEnabled) {
			if(tile.get_colorTransform() != null) {
				if(defaultColorTransform == null) {
					colorTransform = tile.get_colorTransform();
				} else {
					if(openfl_display__$internal_Context3DTilemap.cacheColorTransform == null) {
						openfl_display__$internal_Context3DTilemap.cacheColorTransform = new openfl_geom_ColorTransform();
					}
					colorTransform = openfl_display__$internal_Context3DTilemap.cacheColorTransform;
					colorTransform.redMultiplier = defaultColorTransform.redMultiplier * tile.get_colorTransform().redMultiplier;
					colorTransform.greenMultiplier = defaultColorTransform.greenMultiplier * tile.get_colorTransform().greenMultiplier;
					colorTransform.blueMultiplier = defaultColorTransform.blueMultiplier * tile.get_colorTransform().blueMultiplier;
					colorTransform.alphaMultiplier = defaultColorTransform.alphaMultiplier * tile.get_colorTransform().alphaMultiplier;
					colorTransform.redOffset = defaultColorTransform.redOffset + tile.get_colorTransform().redOffset;
					colorTransform.greenOffset = defaultColorTransform.greenOffset + tile.get_colorTransform().greenOffset;
					colorTransform.blueOffset = defaultColorTransform.blueOffset + tile.get_colorTransform().blueOffset;
					colorTransform.alphaOffset = defaultColorTransform.alphaOffset + tile.get_colorTransform().alphaOffset;
				}
			} else {
				colorTransform = defaultColorTransform;
			}
		}
		if(!alphaEnabled) {
			alpha = 1;
		}
		if(tile.__length > 0) {
			openfl_display__$internal_Context3DTilemap.buildBufferTileContainer(tilemap,tile,renderer,tileTransform,tileset,alphaEnabled,alpha,colorTransformEnabled,colorTransform,cacheBitmapData,rect,matrix,false);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
				uvX = tileRect.x / bitmapData.width;
				uvY = tileRect.y / bitmapData.height;
				uvWidth = tileRect.get_right() / bitmapData.width;
				uvHeight = tileRect.get_bottom() / bitmapData.height;
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
				rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
				tileRect = rect;
				uvX = tileData.__uvX;
				uvY = tileData.__uvY;
				uvWidth = tileData.__uvWidth;
				uvHeight = tileData.__uvHeight;
			}
			tileWidth = tileRect.width;
			tileHeight = tileRect.height;
			x = 0 * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
			y = 0 * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
			x2 = tileWidth * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
			y2 = tileWidth * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
			x3 = 0 * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
			y3 = 0 * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
			x4 = tileWidth * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
			y4 = tileWidth * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
			vertexOffset = openfl_display__$internal_Context3DTilemap.vertexDataPosition;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset] = x;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + 1] = y;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + 2] = uvX;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + 3] = uvY;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex] = x2;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex + 1] = y2;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex + 2] = uvWidth;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex + 3] = uvY;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 2] = x3;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 2 + 1] = y3;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 2 + 2] = uvX;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 2 + 3] = uvHeight;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 3] = x4;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 3 + 1] = y4;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 3 + 2] = uvWidth;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 3 + 3] = uvHeight;
			if(alphaEnabled) {
				openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 0 + alphaPosition] = alpha;
				openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex + alphaPosition] = alpha;
				openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 2 + alphaPosition] = alpha;
				openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 3 + alphaPosition] = alpha;
			}
			if(colorTransformEnabled) {
				if(colorTransform != null) {
					var _g1 = 0;
					while(_g1 < 4) {
						var i = _g1++;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition] = colorTransform.redMultiplier;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 1] = colorTransform.greenMultiplier;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 2] = colorTransform.blueMultiplier;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 3] = colorTransform.alphaMultiplier;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 4] = colorTransform.redOffset;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 5] = colorTransform.greenOffset;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 6] = colorTransform.blueOffset;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 7] = colorTransform.alphaOffset;
					}
				} else {
					var _g2 = 0;
					while(_g2 < 4) {
						var i1 = _g2++;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition] = 1;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 1] = 1;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 2] = 1;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 3] = 1;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 4] = 0;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 5] = 0;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 6] = 0;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 7] = 0;
					}
				}
			}
			openfl_display__$internal_Context3DTilemap.vertexDataPosition += openfl_display__$internal_Context3DTilemap.dataPerVertex * 4;
		}
	}
	group.__dirty = false;
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl_display__$internal_Context3DTilemap.flush = function(tilemap,renderer,blendMode) {
	if(openfl_display__$internal_Context3DTilemap.currentShader == null) {
		openfl_display__$internal_Context3DTilemap.currentShader = renderer.__defaultDisplayShader;
	}
	if(openfl_display__$internal_Context3DTilemap.bufferPosition > openfl_display__$internal_Context3DTilemap.lastFlushedPosition && openfl_display__$internal_Context3DTilemap.currentBitmapData != null && openfl_display__$internal_Context3DTilemap.currentShader != null) {
		var shader = renderer.__initDisplayShader(openfl_display__$internal_Context3DTilemap.currentShader);
		renderer.setShader(shader);
		renderer.applyBitmapData(openfl_display__$internal_Context3DTilemap.currentBitmapData,tilemap.smoothing);
		renderer.applyMatrix(renderer.__getMatrix(tilemap.__renderTransform,1));
		if(tilemap.tileAlphaEnabled) {
			renderer.useAlphaArray();
		} else {
			renderer.applyAlpha(tilemap.__worldAlpha);
		}
		if(tilemap.tileBlendModeEnabled) {
			renderer.__setBlendMode(blendMode);
		}
		if(tilemap.tileColorTransformEnabled) {
			renderer.applyHasColorTransform(true);
			renderer.useColorTransformArray();
		} else {
			renderer.applyColorTransform(tilemap.__worldColorTransform);
		}
		renderer.updateShader();
		var vertexBuffer = tilemap.__buffer.vertexBuffer;
		var vertexBufferPosition = openfl_display__$internal_Context3DTilemap.lastFlushedPosition * openfl_display__$internal_Context3DTilemap.dataPerVertex * 4;
		var length = openfl_display__$internal_Context3DTilemap.bufferPosition - openfl_display__$internal_Context3DTilemap.lastFlushedPosition;
		while(openfl_display__$internal_Context3DTilemap.lastFlushedPosition < openfl_display__$internal_Context3DTilemap.bufferPosition) {
			length = Math.min(openfl_display__$internal_Context3DTilemap.bufferPosition - openfl_display__$internal_Context3DTilemap.lastFlushedPosition,openfl_display__$internal_Context3DTilemap.context.__quadIndexBufferElements) | 0;
			if(length <= 0) {
				break;
			}
			if(shader.__position != null) {
				openfl_display__$internal_Context3DTilemap.context.setVertexBufferAt(shader.__position.index,vertexBuffer,vertexBufferPosition,2);
			}
			if(shader.__textureCoord != null) {
				openfl_display__$internal_Context3DTilemap.context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,vertexBufferPosition + 2,2);
			}
			if(tilemap.tileAlphaEnabled) {
				if(shader.__alpha != null) {
					openfl_display__$internal_Context3DTilemap.context.setVertexBufferAt(shader.__alpha.index,vertexBuffer,vertexBufferPosition + 4,1);
				}
			}
			if(tilemap.tileColorTransformEnabled) {
				var position = tilemap.tileAlphaEnabled ? 5 : 4;
				if(shader.__colorMultiplier != null) {
					openfl_display__$internal_Context3DTilemap.context.setVertexBufferAt(shader.__colorMultiplier.index,vertexBuffer,vertexBufferPosition + position,4);
				}
				if(shader.__colorOffset != null) {
					openfl_display__$internal_Context3DTilemap.context.setVertexBufferAt(shader.__colorOffset.index,vertexBuffer,vertexBufferPosition + position + 4,4);
				}
			}
			openfl_display__$internal_Context3DTilemap.context.drawTriangles(openfl_display__$internal_Context3DTilemap.context.__quadIndexBuffer,0,length * 2);
			openfl_display__$internal_Context3DTilemap.lastFlushedPosition += length;
		}
		renderer.__clearShader();
	}
	openfl_display__$internal_Context3DTilemap.lastUsedBitmapData = openfl_display__$internal_Context3DTilemap.currentBitmapData;
	openfl_display__$internal_Context3DTilemap.lastUsedShader = openfl_display__$internal_Context3DTilemap.currentShader;
};
openfl_display__$internal_Context3DTilemap.render = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__worldAlpha <= 0) {
		return;
	}
	openfl_display__$internal_Context3DTilemap.context = renderer.__context3D;
	openfl_display__$internal_Context3DTilemap.buildBuffer(tilemap,renderer);
	if(openfl_display__$internal_Context3DTilemap.numTiles == 0) {
		return;
	}
	openfl_display__$internal_Context3DTilemap.bufferPosition = 0;
	openfl_display__$internal_Context3DTilemap.lastFlushedPosition = 0;
	openfl_display__$internal_Context3DTilemap.lastUsedBitmapData = null;
	openfl_display__$internal_Context3DTilemap.lastUsedShader = null;
	openfl_display__$internal_Context3DTilemap.currentBitmapData = null;
	openfl_display__$internal_Context3DTilemap.currentShader = null;
	openfl_display__$internal_Context3DTilemap.currentBlendMode = tilemap.__worldBlendMode;
	if(!tilemap.tileBlendModeEnabled) {
		renderer.__setBlendMode(openfl_display__$internal_Context3DTilemap.currentBlendMode);
	}
	renderer.__pushMaskObject(tilemap);
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderer.__pushMaskRect(rect,tilemap.__renderTransform);
	openfl_display__$internal_Context3DTilemap.renderTileContainer(tilemap,renderer,tilemap.__group,tilemap.__worldShader,tilemap.__tileset,tilemap.__worldAlpha,tilemap.tileBlendModeEnabled,openfl_display__$internal_Context3DTilemap.currentBlendMode,null);
	openfl_display__$internal_Context3DTilemap.flush(tilemap,renderer,openfl_display__$internal_Context3DTilemap.currentBlendMode);
	renderer.__popMaskRect();
	renderer.__popMaskObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
};
openfl_display__$internal_Context3DTilemap.renderDrawable = function(tilemap,renderer) {
	renderer.__updateCacheBitmap(tilemap,false);
	if(tilemap.__cacheBitmap != null && !tilemap.__isCacheBitmapRender) {
		openfl_display__$internal_Context3DBitmap.render(tilemap.__cacheBitmap,renderer);
	} else {
		if(!(tilemap.opaqueBackground == null && tilemap.__graphics == null)) {
			if(!(!tilemap.__renderable || tilemap.__worldAlpha <= 0)) {
				if(tilemap.opaqueBackground != null && !tilemap.__isCacheBitmapRender && tilemap.get_width() > 0 && tilemap.get_height() > 0) {
					renderer.__setBlendMode(tilemap.__worldBlendMode);
					renderer.__pushMaskObject(tilemap);
					var context = renderer.__context3D;
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,tilemap.get_width(),tilemap.get_height());
					renderer.__pushMaskRect(rect,tilemap.__renderTransform);
					var color = tilemap.opaqueBackground;
					context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
					renderer.__popMaskRect();
					renderer.__popMaskObject(tilemap);
					openfl_geom_Rectangle.__pool.release(rect);
				}
				if(tilemap.__graphics != null) {
					openfl_display__$internal_Context3DShape.render(tilemap,renderer);
				}
			}
		}
		openfl_display__$internal_Context3DTilemap.render(tilemap,renderer);
	}
	renderer.__renderEvent(tilemap);
};
openfl_display__$internal_Context3DTilemap.renderDrawableMask = function(tilemap,renderer) {
	if(!(tilemap.opaqueBackground == null && tilemap.__graphics == null)) {
		var tmp = tilemap.opaqueBackground != null && !tilemap.__isCacheBitmapRender && tilemap.get_width() > 0 && tilemap.get_height() > 0;
		if(tilemap.__graphics != null) {
			openfl_display__$internal_Context3DShape.renderMask(tilemap,renderer);
		}
	}
	openfl_display__$internal_Context3DTilemap.renderMask(tilemap,renderer);
};
openfl_display__$internal_Context3DTilemap.renderTileContainer = function(tilemap,renderer,group,defaultShader,defaultTileset,worldAlpha,blendModeEnabled,defaultBlendMode,cacheBitmapData) {
	var tiles = group.__tiles;
	var tile;
	var tileset;
	var alpha;
	var visible;
	var blendMode = null;
	var id;
	var tileData;
	var tileRect;
	var shader;
	var bitmapData;
	var _g = 0;
	while(_g < tiles.length) {
		var tile = tiles[_g];
		++_g;
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		shader = tile.get_shader() != null ? tile.get_shader() : defaultShader;
		if(blendModeEnabled) {
			blendMode = tile.__blendMode != null ? tile.__blendMode : defaultBlendMode;
		}
		if(tile.__length > 0) {
			openfl_display__$internal_Context3DTilemap.renderTileContainer(tilemap,renderer,tile,shader,tileset,alpha,blendModeEnabled,blendMode,cacheBitmapData);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
			}
			if(shader != openfl_display__$internal_Context3DTilemap.currentShader || bitmapData != openfl_display__$internal_Context3DTilemap.currentBitmapData && openfl_display__$internal_Context3DTilemap.currentBitmapData != null || openfl_display__$internal_Context3DTilemap.currentBlendMode != blendMode) {
				openfl_display__$internal_Context3DTilemap.flush(tilemap,renderer,openfl_display__$internal_Context3DTilemap.currentBlendMode);
			}
			openfl_display__$internal_Context3DTilemap.currentBitmapData = bitmapData;
			openfl_display__$internal_Context3DTilemap.currentShader = shader;
			openfl_display__$internal_Context3DTilemap.currentBlendMode = blendMode;
			openfl_display__$internal_Context3DTilemap.bufferPosition++;
		}
	}
};
openfl_display__$internal_Context3DTilemap.renderMask = function(tilemap,renderer) {
};
openfl_display__$internal_Context3DTilemap.resizeBuffer = function(tilemap,count) {
	openfl_display__$internal_Context3DTilemap.numTiles = count;
	if(tilemap.__buffer == null) {
		tilemap.__buffer = new openfl_display__$internal_Context3DBuffer(openfl_display__$internal_Context3DTilemap.context,openfl_display__$internal_Context3DElementType.QUADS,openfl_display__$internal_Context3DTilemap.numTiles,openfl_display__$internal_Context3DTilemap.dataPerVertex);
	} else {
		tilemap.__buffer.resize(openfl_display__$internal_Context3DTilemap.numTiles,openfl_display__$internal_Context3DTilemap.dataPerVertex);
	}
	openfl_display__$internal_Context3DTilemap.vertexBufferData = tilemap.__buffer.vertexBufferData;
};
var openfl_display__$internal_Context3DVideo = function() { };
$hxClasses["openfl.display._internal.Context3DVideo"] = openfl_display__$internal_Context3DVideo;
openfl_display__$internal_Context3DVideo.__name__ = "openfl.display._internal.Context3DVideo";
openfl_display__$internal_Context3DVideo.render = function(video,renderer) {
	if(!video.__renderable || video.__worldAlpha <= 0 || video.__stream == null) {
		return;
	}
	if(video.__stream.__video != null) {
		var context = renderer.__context3D;
		var gl = context.gl;
		var texture = video.__getTexture(context);
		if(texture == null) {
			return;
		}
		renderer.__setBlendMode(video.__worldBlendMode);
		renderer.__pushMaskObject(video);
		var shader = renderer.__initDisplayShader(video.__worldShader);
		renderer.setShader(shader);
		renderer.applyBitmapData(null,true,false);
		renderer.applyMatrix(renderer.__getMatrix(video.__renderTransform,1));
		renderer.applyAlpha(video.__worldAlpha);
		renderer.applyColorTransform(video.__worldColorTransform);
		if(shader.__textureSize != null) {
			openfl_display__$internal_Context3DVideo.__textureSizeValue[0] = video.__stream != null ? video.__stream.__video.videoWidth : 0;
			openfl_display__$internal_Context3DVideo.__textureSizeValue[1] = video.__stream != null ? video.__stream.__video.videoHeight : 0;
			shader.__textureSize.value = openfl_display__$internal_Context3DVideo.__textureSizeValue;
		}
		renderer.updateShader();
		context.setTextureAt(0,video.__getTexture(context));
		context.__flushGLTextures();
		gl.uniform1i(shader.__texture.index,0);
		if(video.smoothing) {
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
		} else {
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
		}
		var vertexBuffer = video.__getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = video.__getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
		renderer.__popMaskObject(video);
	}
};
openfl_display__$internal_Context3DVideo.renderDrawable = function(video,renderer) {
	openfl_display__$internal_Context3DVideo.render(video,renderer);
	renderer.__renderEvent(video);
};
openfl_display__$internal_Context3DVideo.renderDrawableMask = function(video,renderer) {
	openfl_display__$internal_Context3DVideo.renderMask(video,renderer);
};
openfl_display__$internal_Context3DVideo.renderMask = function(video,renderer) {
	if(video.__stream == null) {
		return;
	}
	if(video.__stream.__video != null) {
		var context = renderer.__context3D;
		var gl = context.gl;
		var shader = renderer.__maskShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(openfl_display__$internal_Context3DMaskShader.opaqueBitmapData,true);
		renderer.applyMatrix(renderer.__getMatrix(video.__renderTransform,1));
		renderer.updateShader();
		var vertexBuffer = video.__getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = video.__getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
	}
};
var openfl_display__$internal_DOMBitmap = function() { };
$hxClasses["openfl.display._internal.DOMBitmap"] = openfl_display__$internal_DOMBitmap;
openfl_display__$internal_DOMBitmap.__name__ = "openfl.display._internal.DOMBitmap";
openfl_display__$internal_DOMBitmap.clear = function(bitmap,renderer) {
	openfl_display__$internal_DOMDisplayObject.clear(bitmap,renderer);
	if(bitmap.__image != null) {
		renderer.element.removeChild(bitmap.__image);
		bitmap.__image = null;
		bitmap.__style = null;
	}
	if(bitmap.__canvas != null) {
		renderer.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
		bitmap.__style = null;
	}
};
openfl_display__$internal_DOMBitmap.render = function(bitmap,renderer) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
		renderer.__pushMaskObject(bitmap);
		if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
			var src = bitmap.__bitmapData.image.buffer.__srcImage.src;
			if(StringTools.startsWith(src,"data:") || StringTools.startsWith(src,"blob:")) {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
			} else {
				openfl_display__$internal_DOMBitmap.renderImage(bitmap,renderer);
			}
		} else {
			openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
		}
		renderer.__popMaskObject(bitmap);
	} else {
		openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
	}
};
openfl_display__$internal_DOMBitmap.renderCanvas = function(bitmap,renderer) {
	if(bitmap.__image != null) {
		renderer.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		bitmap.__imageVersion = -1;
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.imageSmoothingEnabled = false;
		}
		renderer.__initializeElement(bitmap,bitmap.__canvas);
	}
	if(bitmap.__imageVersion != bitmap.__bitmapData.image.version) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		bitmap.__canvas.width = bitmap.__bitmapData.width + 1;
		bitmap.__canvas.width = bitmap.__bitmapData.width;
		bitmap.__canvas.height = bitmap.__bitmapData.height;
		bitmap.__context.drawImage(bitmap.__bitmapData.image.buffer.__srcCanvas,0,0);
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	renderer.__updateClip(bitmap);
	renderer.__applyStyle(bitmap,true,true,true);
};
openfl_display__$internal_DOMBitmap.renderDrawable = function(bitmap,renderer) {
	renderer.__updateCacheBitmap(bitmap,false);
	if(bitmap.__cacheBitmap != null && !bitmap.__isCacheBitmapRender) {
		renderer.__renderDrawableClear(bitmap);
		bitmap.__cacheBitmap.stage = bitmap.stage;
		var bitmap1 = bitmap.__cacheBitmap;
		if(bitmap1.stage != null && bitmap1.__worldVisible && bitmap1.__renderable && bitmap1.__bitmapData != null && bitmap1.__bitmapData.__isValid && bitmap1.__bitmapData.readable) {
			renderer.__pushMaskObject(bitmap1);
			if(bitmap1.__bitmapData.image.buffer.__srcImage != null) {
				var src = bitmap1.__bitmapData.image.buffer.__srcImage.src;
				if(StringTools.startsWith(src,"data:") || StringTools.startsWith(src,"blob:")) {
					openfl_display__$internal_DOMBitmap.renderCanvas(bitmap1,renderer);
				} else {
					openfl_display__$internal_DOMBitmap.renderImage(bitmap1,renderer);
				}
			} else {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap1,renderer);
			}
			renderer.__popMaskObject(bitmap1);
		} else {
			openfl_display__$internal_DOMBitmap.clear(bitmap1,renderer);
		}
	} else {
		var tmp = bitmap.opaqueBackground != null && !bitmap.__isCacheBitmapRender && bitmap.get_width() > 0 && bitmap.get_height() > 0;
		var graphics = bitmap.__graphics;
		if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && graphics != null) {
			openfl_display__$internal_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
			if(graphics.__softwareDirty || bitmap.__worldAlphaChanged || bitmap.__canvas != graphics.__canvas) {
				if(graphics.__canvas != null) {
					if(bitmap.__canvas != graphics.__canvas) {
						if(bitmap.__canvas != null) {
							renderer.element.removeChild(bitmap.__canvas);
						}
						bitmap.__canvas = graphics.__canvas;
						bitmap.__context = graphics.__context;
						renderer.__initializeElement(bitmap,bitmap.__canvas);
					}
				} else {
					openfl_display__$internal_DOMShape.clear(bitmap,renderer);
				}
			}
			if(bitmap.__canvas != null) {
				renderer.__pushMaskObject(bitmap);
				var cacheTransform = bitmap.__renderTransform;
				bitmap.__renderTransform = graphics.__worldTransform;
				if(graphics.__transformDirty) {
					graphics.__transformDirty = false;
					bitmap.__renderTransformChanged = true;
				}
				renderer.__updateClip(bitmap);
				renderer.__applyStyle(bitmap,true,true,true);
				bitmap.__renderTransform = cacheTransform;
				renderer.__popMaskObject(bitmap);
			}
		} else {
			openfl_display__$internal_DOMShape.clear(bitmap,renderer);
		}
		if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
			renderer.__pushMaskObject(bitmap);
			if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
				var src = bitmap.__bitmapData.image.buffer.__srcImage.src;
				if(StringTools.startsWith(src,"data:") || StringTools.startsWith(src,"blob:")) {
					openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
				} else {
					openfl_display__$internal_DOMBitmap.renderImage(bitmap,renderer);
				}
			} else {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
			}
			renderer.__popMaskObject(bitmap);
		} else {
			openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
		}
	}
	renderer.__renderEvent(bitmap);
};
openfl_display__$internal_DOMBitmap.renderDrawableClear = function(bitmap,renderer) {
	openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
};
openfl_display__$internal_DOMBitmap.renderImage = function(bitmap,renderer) {
	if(bitmap.__canvas != null) {
		renderer.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.crossOrigin = "Anonymous";
		bitmap.__image.src = bitmap.__bitmapData.image.buffer.__srcImage.src;
		renderer.__initializeElement(bitmap,bitmap.__image);
	}
	renderer.__updateClip(bitmap);
	renderer.__applyStyle(bitmap,true,true,true);
};
var openfl_display__$internal_DOMDisplayObject = function() { };
$hxClasses["openfl.display._internal.DOMDisplayObject"] = openfl_display__$internal_DOMDisplayObject;
openfl_display__$internal_DOMDisplayObject.__name__ = "openfl.display._internal.DOMDisplayObject";
openfl_display__$internal_DOMDisplayObject.clear = function(displayObject,renderer) {
	if(displayObject.__cacheBitmap != null) {
		openfl_display__$internal_DOMBitmap.clear(displayObject.__cacheBitmap,renderer);
	}
	openfl_display__$internal_DOMShape.clear(displayObject,renderer);
};
openfl_display__$internal_DOMDisplayObject.render = function(displayObject,renderer) {
	var tmp = displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	var graphics = displayObject.__graphics;
	if(displayObject.stage != null && displayObject.__worldVisible && displayObject.__renderable && graphics != null) {
		openfl_display__$internal_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
		if(graphics.__softwareDirty || displayObject.__worldAlphaChanged || displayObject.__canvas != graphics.__canvas) {
			if(graphics.__canvas != null) {
				if(displayObject.__canvas != graphics.__canvas) {
					if(displayObject.__canvas != null) {
						renderer.element.removeChild(displayObject.__canvas);
					}
					displayObject.__canvas = graphics.__canvas;
					displayObject.__context = graphics.__context;
					renderer.__initializeElement(displayObject,displayObject.__canvas);
				}
			} else {
				openfl_display__$internal_DOMShape.clear(displayObject,renderer);
			}
		}
		if(displayObject.__canvas != null) {
			renderer.__pushMaskObject(displayObject);
			var cacheTransform = displayObject.__renderTransform;
			displayObject.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				displayObject.__renderTransformChanged = true;
			}
			renderer.__updateClip(displayObject);
			renderer.__applyStyle(displayObject,true,true,true);
			displayObject.__renderTransform = cacheTransform;
			renderer.__popMaskObject(displayObject);
		}
	} else {
		openfl_display__$internal_DOMShape.clear(displayObject,renderer);
	}
};
openfl_display__$internal_DOMDisplayObject.renderDrawable = function(displayObject,renderer) {
	renderer.__updateCacheBitmap(displayObject,false);
	if(displayObject.__cacheBitmap != null && !displayObject.__isCacheBitmapRender) {
		renderer.__renderDrawableClear(displayObject);
		displayObject.__cacheBitmap.stage = displayObject.stage;
		var bitmap = displayObject.__cacheBitmap;
		if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
			renderer.__pushMaskObject(bitmap);
			if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
				var src = bitmap.__bitmapData.image.buffer.__srcImage.src;
				if(StringTools.startsWith(src,"data:") || StringTools.startsWith(src,"blob:")) {
					openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
				} else {
					openfl_display__$internal_DOMBitmap.renderImage(bitmap,renderer);
				}
			} else {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
			}
			renderer.__popMaskObject(bitmap);
		} else {
			openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
		}
	} else {
		var tmp = displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
		var graphics = displayObject.__graphics;
		if(displayObject.stage != null && displayObject.__worldVisible && displayObject.__renderable && graphics != null) {
			openfl_display__$internal_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
			if(graphics.__softwareDirty || displayObject.__worldAlphaChanged || displayObject.__canvas != graphics.__canvas) {
				if(graphics.__canvas != null) {
					if(displayObject.__canvas != graphics.__canvas) {
						if(displayObject.__canvas != null) {
							renderer.element.removeChild(displayObject.__canvas);
						}
						displayObject.__canvas = graphics.__canvas;
						displayObject.__context = graphics.__context;
						renderer.__initializeElement(displayObject,displayObject.__canvas);
					}
				} else {
					openfl_display__$internal_DOMShape.clear(displayObject,renderer);
				}
			}
			if(displayObject.__canvas != null) {
				renderer.__pushMaskObject(displayObject);
				var cacheTransform = displayObject.__renderTransform;
				displayObject.__renderTransform = graphics.__worldTransform;
				if(graphics.__transformDirty) {
					graphics.__transformDirty = false;
					displayObject.__renderTransformChanged = true;
				}
				renderer.__updateClip(displayObject);
				renderer.__applyStyle(displayObject,true,true,true);
				displayObject.__renderTransform = cacheTransform;
				renderer.__popMaskObject(displayObject);
			}
		} else {
			openfl_display__$internal_DOMShape.clear(displayObject,renderer);
		}
	}
	renderer.__renderEvent(displayObject);
};
openfl_display__$internal_DOMDisplayObject.renderDrawableClear = function(displayObject,renderer) {
	openfl_display__$internal_DOMDisplayObject.clear(displayObject,renderer);
};
var openfl_display__$internal_DOMDisplayObjectContainer = function() { };
$hxClasses["openfl.display._internal.DOMDisplayObjectContainer"] = openfl_display__$internal_DOMDisplayObjectContainer;
openfl_display__$internal_DOMDisplayObjectContainer.__name__ = "openfl.display._internal.DOMDisplayObjectContainer";
openfl_display__$internal_DOMDisplayObjectContainer.renderDrawable = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			renderer.__renderDrawable(orphan1);
		}
	}
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	openfl_display__$internal_DOMDisplayObject.renderDrawable(displayObjectContainer,renderer);
	if(displayObjectContainer.__cacheBitmap != null && !displayObjectContainer.__isCacheBitmapRender) {
		var _g = 0;
		var _g1 = displayObjectContainer.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			renderer.__renderDrawableClear(child);
		}
		openfl_display__$internal_DOMShape.clear(displayObjectContainer,renderer);
		displayObjectContainer.__cacheBitmap.stage = displayObjectContainer.stage;
		return;
	}
	renderer.__pushMaskObject(displayObjectContainer);
	if(renderer.__stage != null) {
		var _g = 0;
		var _g1 = displayObjectContainer.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			renderer.__renderDrawable(child);
			child.__renderDirty = false;
		}
		displayObjectContainer.__renderDirty = false;
	} else {
		var _g = 0;
		var _g1 = displayObjectContainer.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			renderer.__renderDrawable(child);
		}
	}
	renderer.__popMaskObject(displayObjectContainer);
};
openfl_display__$internal_DOMDisplayObjectContainer.renderDrawableClear = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			renderer.__renderDrawableClear(orphan1);
		}
	}
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	var _g = 0;
	var _g1 = displayObjectContainer.__children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		renderer.__renderDrawableClear(child);
	}
	openfl_display__$internal_DOMDisplayObject.clear(displayObjectContainer,renderer);
};
var openfl_display__$internal_DOMShape = function() { };
$hxClasses["openfl.display._internal.DOMShape"] = openfl_display__$internal_DOMShape;
openfl_display__$internal_DOMShape.__name__ = "openfl.display._internal.DOMShape";
openfl_display__$internal_DOMShape.clear = function(shape,renderer) {
	if(shape.__canvas != null) {
		renderer.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
openfl_display__$internal_DOMShape.render = function(shape,renderer) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		openfl_display__$internal_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
		if(graphics.__softwareDirty || shape.__worldAlphaChanged || shape.__canvas != graphics.__canvas) {
			if(graphics.__canvas != null) {
				if(shape.__canvas != graphics.__canvas) {
					if(shape.__canvas != null) {
						renderer.element.removeChild(shape.__canvas);
					}
					shape.__canvas = graphics.__canvas;
					shape.__context = graphics.__context;
					renderer.__initializeElement(shape,shape.__canvas);
				}
			} else {
				openfl_display__$internal_DOMShape.clear(shape,renderer);
			}
		}
		if(shape.__canvas != null) {
			renderer.__pushMaskObject(shape);
			var cacheTransform = shape.__renderTransform;
			shape.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				shape.__renderTransformChanged = true;
			}
			renderer.__updateClip(shape);
			renderer.__applyStyle(shape,true,true,true);
			shape.__renderTransform = cacheTransform;
			renderer.__popMaskObject(shape);
		}
	} else {
		openfl_display__$internal_DOMShape.clear(shape,renderer);
	}
};
var openfl_display__$internal_DOMSimpleButton = function() { };
$hxClasses["openfl.display._internal.DOMSimpleButton"] = openfl_display__$internal_DOMSimpleButton;
openfl_display__$internal_DOMSimpleButton.__name__ = "openfl.display._internal.DOMSimpleButton";
openfl_display__$internal_DOMSimpleButton.renderDrawable = function(simpleButton,renderer) {
	renderer.__pushMaskObject(simpleButton);
	var previousState = simpleButton.__previousStates.iterator();
	while(previousState.hasNext()) {
		var previousState1 = previousState.next();
		renderer.__renderDrawable(previousState1);
	}
	simpleButton.__previousStates.set_length(0);
	if(simpleButton.__currentState != null) {
		if(simpleButton.__currentState.stage != simpleButton.stage) {
			simpleButton.__currentState.__setStageReference(simpleButton.stage);
		}
		renderer.__renderDrawable(simpleButton.__currentState);
	}
	renderer.__popMaskObject(simpleButton);
	renderer.__renderEvent(simpleButton);
};
openfl_display__$internal_DOMSimpleButton.renderDrawableClear = function(simpleButton,renderer) {
	openfl_display__$internal_DOMDisplayObject.renderDrawableClear(simpleButton,renderer);
};
var openfl_display__$internal_DOMTextField = function() { };
$hxClasses["openfl.display._internal.DOMTextField"] = openfl_display__$internal_DOMTextField;
openfl_display__$internal_DOMTextField.__name__ = "openfl.display._internal.DOMTextField";
openfl_display__$internal_DOMTextField.clear = function(textField,renderer) {
	openfl_display__$internal_DOMDisplayObject.clear(textField,renderer);
	if(textField.__div != null) {
		renderer.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl_display__$internal_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		var _this_r = new RegExp("\n","g".split("u").join(""));
		div.innerHTML = textEngine.text.replace(_this_r,"<br>");
		div.style.setProperty("font",openfl_text__$internal_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) {
		div.style.width = Std.string(textEngine.width - 4) + "px";
	}
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) {
		window.document.body.removeChild(div);
	}
};
openfl_display__$internal_DOMTextField.render = function(textField,renderer) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__renderTransformChanged || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
				textField.__updateLayout();
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					renderer.__initializeElement(textField,textField.__div);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							var textField1 = textField.__displayAsPassword;
							textField.__dirty = false;
							textField.dispatchEvent(new openfl_events_TextEvent("textInput",false,false,textField.get_htmlText()));
						}
					},true);
				}
				if(!textEngine.wordWrap) {
					textField.__style.setProperty("white-space","nowrap",null);
				} else {
					textField.__style.setProperty("word-wrap","break-word",null);
				}
				textField.__style.setProperty("overflow","hidden",null);
				if(textEngine.selectable) {
					textField.__style.setProperty("cursor","text",null);
					textField.__style.setProperty("-webkit-user-select","text",null);
					textField.__style.setProperty("-moz-user-select","text",null);
					textField.__style.setProperty("-ms-user-select","text",null);
					textField.__style.setProperty("-o-user-select","text",null);
				} else {
					textField.__style.setProperty("cursor","inherit",null);
				}
				var div = textField.__div;
				div.contentEditable = textEngine.type == 1;
				var style = textField.__style;
				if(textEngine.background) {
					style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor & 16777215,6),null);
				} else {
					style.removeProperty("background-color");
				}
				var w = textEngine.width;
				var h = textEngine.height;
				var scale = 1;
				var text = "";
				if(textField.__isHTML) {
					textField.__updateText(openfl_text__$internal_HTMLParser.parse(textField.__text,textField.get_multiline(),textField.__styleSheet,textField.__textFormat,textField.__textEngine.textFormatRanges));
				}
				var useTextBounds = !(textEngine.background || textEngine.border);
				var bounds = useTextBounds ? textEngine.textBounds : textEngine.bounds;
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var group = textEngine.layoutGroups.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
						break;
					}
					text += "<div style=\"";
					if(group1.format.font != null) {
						text += "font: " + openfl_text__$internal_TextEngine.getFont(group1.format) + "; ";
					}
					if(group1.format.color != null) {
						text += "color: #" + StringTools.hex(group1.format.color & 16777215,6) + "; ";
					}
					if(group1.format.underline == true) {
						text += "text-decoration: underline; ";
					}
					if(group1.format.align != null) {
						switch(group1.format.align) {
						case 0:
							text += "text-align: center; ";
							break;
						case 2:
							text += "text-align: justify; ";
							break;
						case 4:
							text += "text-align: right; ";
							break;
						default:
							text += "text-align: left; ";
						}
					}
					if(group1.format.leftMargin != null) {
						text += "padding-left: " + group1.format.leftMargin * scale + "px; ";
					}
					if(group1.format.rightMargin != null) {
						text += "padding-right: " + group1.format.rightMargin * scale + "px; ";
					}
					if(group1.format.indent != null) {
						text += "text-indent: " + group1.format.indent * scale + "px; ";
					}
					var tmp = group1.format.leading != null;
					var x = group1.offsetX + scrollX;
					var y = group1.offsetY + scrollY + 3;
					text += "left: " + x + "px; top: " + y + "px; vertical-align: top; position: absolute;\">";
					if(group1.format.url != null && group1.format.url != "") {
						var anchorStyle = "text-decoration: underline; ";
						if(group1.format.color != null) {
							anchorStyle += "color: #" + StringTools.hex(group1.format.color & 16777215,6) + "; ";
						}
						text += "<a style='" + anchorStyle + "' href='" + group1.format.url + "' target='" + group1.format.target + "'>";
					}
					if(!textField.__isHTML) {
						text += StringTools.replace(StringTools.htmlEscape(textEngine.text.substring(group1.startIndex,group1.endIndex))," ","&nbsp;");
					} else {
						text += StringTools.replace(textEngine.text.substring(group1.startIndex,group1.endIndex)," ","&nbsp;");
					}
					if(group1.format.url != null && group1.format.url != "") {
						text += "</a>";
					}
					text += "</div>";
				}
				if(textEngine.border) {
					style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor & 16777215,6),null);
					textField.__renderTransform.translate(-1,-1);
					textField.__renderTransformChanged = true;
					textField.__transformDirty = true;
				} else if(style.border != "") {
					style.removeProperty("border");
					textField.__renderTransformChanged = true;
				}
				style.setProperty("width",w + "px",null);
				style.setProperty("height",h + "px",null);
				textField.__div.innerHTML = text;
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderer.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) {
			var old = renderer.__roundPixels;
			renderer.__roundPixels = true;
			renderer.__updateClip(textField);
			renderer.__applyStyle(textField,true,true,true);
			renderer.__roundPixels = old;
		}
	} else {
		openfl_display__$internal_DOMTextField.clear(textField,renderer);
	}
};
openfl_display__$internal_DOMTextField.renderDrawable = function(textField,renderer) {
	textField.__domRender = true;
	renderer.__updateCacheBitmap(textField,textField.__forceCachedBitmapUpdate);
	textField.__forceCachedBitmapUpdate = false;
	textField.__domRender = false;
	if(textField.__cacheBitmap != null && !textField.__isCacheBitmapRender) {
		renderer.__renderDrawableClear(textField);
		textField.__cacheBitmap.stage = textField.stage;
		var bitmap = textField.__cacheBitmap;
		if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
			renderer.__pushMaskObject(bitmap);
			if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
				var src = bitmap.__bitmapData.image.buffer.__srcImage.src;
				if(StringTools.startsWith(src,"data:") || StringTools.startsWith(src,"blob:")) {
					openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
				} else {
					openfl_display__$internal_DOMBitmap.renderImage(bitmap,renderer);
				}
			} else {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
			}
			renderer.__popMaskObject(bitmap);
		} else {
			openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
		}
	} else {
		if(textField.__renderedOnCanvasWhileOnDOM) {
			textField.__renderedOnCanvasWhileOnDOM = false;
			if(textField.__isHTML && textField.__htmlText != null) {
				textField.__updateText(textField.__htmlText);
				textField.__dirty = true;
				textField.__layoutDirty = true;
				if(!textField.__renderDirty) {
					textField.__renderDirty = true;
					textField.__setParentRenderDirty();
				}
			}
		}
		var textField1 = textField;
		var textEngine = textField1.__textEngine;
		if(textField1.stage != null && textField1.__worldVisible && textField1.__renderable) {
			if(textField1.__dirty || textField1.__renderTransformChanged || textField1.__div == null) {
				if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
					textField1.__updateLayout();
					if(textField1.__div == null) {
						textField1.__div = window.document.createElement("div");
						renderer.__initializeElement(textField1,textField1.__div);
						textField1.__style.setProperty("outline","none",null);
						textField1.__div.addEventListener("input",function(event) {
							event.preventDefault();
							if(textField1.get_htmlText() != textField1.__div.innerHTML) {
								textField1.set_htmlText(textField1.__div.innerHTML);
								var textField = textField1.__displayAsPassword;
								textField1.__dirty = false;
								textField1.dispatchEvent(new openfl_events_TextEvent("textInput",false,false,textField1.get_htmlText()));
							}
						},true);
					}
					if(!textEngine.wordWrap) {
						textField1.__style.setProperty("white-space","nowrap",null);
					} else {
						textField1.__style.setProperty("word-wrap","break-word",null);
					}
					textField1.__style.setProperty("overflow","hidden",null);
					if(textEngine.selectable) {
						textField1.__style.setProperty("cursor","text",null);
						textField1.__style.setProperty("-webkit-user-select","text",null);
						textField1.__style.setProperty("-moz-user-select","text",null);
						textField1.__style.setProperty("-ms-user-select","text",null);
						textField1.__style.setProperty("-o-user-select","text",null);
					} else {
						textField1.__style.setProperty("cursor","inherit",null);
					}
					var div = textField1.__div;
					div.contentEditable = textEngine.type == 1;
					var style = textField1.__style;
					if(textEngine.background) {
						style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor & 16777215,6),null);
					} else {
						style.removeProperty("background-color");
					}
					var w = textEngine.width;
					var h = textEngine.height;
					var scale = 1;
					var text = "";
					if(textField1.__isHTML) {
						textField1.__updateText(openfl_text__$internal_HTMLParser.parse(textField1.__text,textField1.get_multiline(),textField1.__styleSheet,textField1.__textFormat,textField1.__textEngine.textFormatRanges));
					}
					var useTextBounds = !(textEngine.background || textEngine.border);
					var bounds = useTextBounds ? textEngine.textBounds : textEngine.bounds;
					var scrollX = -textField1.get_scrollH();
					var scrollY = 0.0;
					var group = textEngine.layoutGroups.iterator();
					while(group.hasNext()) {
						var group1 = group.next();
						if(group1.lineIndex < textField1.get_scrollV() - 1) {
							continue;
						}
						if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
							break;
						}
						text += "<div style=\"";
						if(group1.format.font != null) {
							text += "font: " + openfl_text__$internal_TextEngine.getFont(group1.format) + "; ";
						}
						if(group1.format.color != null) {
							text += "color: #" + StringTools.hex(group1.format.color & 16777215,6) + "; ";
						}
						if(group1.format.underline == true) {
							text += "text-decoration: underline; ";
						}
						if(group1.format.align != null) {
							switch(group1.format.align) {
							case 0:
								text += "text-align: center; ";
								break;
							case 2:
								text += "text-align: justify; ";
								break;
							case 4:
								text += "text-align: right; ";
								break;
							default:
								text += "text-align: left; ";
							}
						}
						if(group1.format.leftMargin != null) {
							text += "padding-left: " + group1.format.leftMargin * scale + "px; ";
						}
						if(group1.format.rightMargin != null) {
							text += "padding-right: " + group1.format.rightMargin * scale + "px; ";
						}
						if(group1.format.indent != null) {
							text += "text-indent: " + group1.format.indent * scale + "px; ";
						}
						var tmp = group1.format.leading != null;
						var x = group1.offsetX + scrollX;
						var y = group1.offsetY + scrollY + 3;
						text += "left: " + x + "px; top: " + y + "px; vertical-align: top; position: absolute;\">";
						if(group1.format.url != null && group1.format.url != "") {
							var anchorStyle = "text-decoration: underline; ";
							if(group1.format.color != null) {
								anchorStyle += "color: #" + StringTools.hex(group1.format.color & 16777215,6) + "; ";
							}
							text += "<a style='" + anchorStyle + "' href='" + group1.format.url + "' target='" + group1.format.target + "'>";
						}
						if(!textField1.__isHTML) {
							text += StringTools.replace(StringTools.htmlEscape(textEngine.text.substring(group1.startIndex,group1.endIndex))," ","&nbsp;");
						} else {
							text += StringTools.replace(textEngine.text.substring(group1.startIndex,group1.endIndex)," ","&nbsp;");
						}
						if(group1.format.url != null && group1.format.url != "") {
							text += "</a>";
						}
						text += "</div>";
					}
					if(textEngine.border) {
						style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor & 16777215,6),null);
						textField1.__renderTransform.translate(-1,-1);
						textField1.__renderTransformChanged = true;
						textField1.__transformDirty = true;
					} else if(style.border != "") {
						style.removeProperty("border");
						textField1.__renderTransformChanged = true;
					}
					style.setProperty("width",w + "px",null);
					style.setProperty("height",h + "px",null);
					textField1.__div.innerHTML = text;
					textField1.__dirty = false;
				} else if(textField1.__div != null) {
					renderer.element.removeChild(textField1.__div);
					textField1.__div = null;
				}
			}
			if(textField1.__div != null) {
				var old = renderer.__roundPixels;
				renderer.__roundPixels = true;
				renderer.__updateClip(textField1);
				renderer.__applyStyle(textField1,true,true,true);
				renderer.__roundPixels = old;
			}
		} else {
			openfl_display__$internal_DOMTextField.clear(textField1,renderer);
		}
	}
	renderer.__renderEvent(textField);
};
openfl_display__$internal_DOMTextField.renderDrawableClear = function(textField,renderer) {
	openfl_display__$internal_DOMTextField.clear(textField,renderer);
};
openfl_display__$internal_DOMTextField.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl_display__$internal_DOMTilemap = function() { };
$hxClasses["openfl.display._internal.DOMTilemap"] = openfl_display__$internal_DOMTilemap;
openfl_display__$internal_DOMTilemap.__name__ = "openfl.display._internal.DOMTilemap";
openfl_display__$internal_DOMTilemap.clear = function(tilemap,renderer) {
	openfl_display__$internal_DOMDisplayObject.clear(tilemap,renderer);
	if(tilemap.__canvas != null) {
		renderer.element.removeChild(tilemap.__canvas);
		tilemap.__canvas = null;
		tilemap.__style = null;
	}
};
openfl_display__$internal_DOMTilemap.render = function(tilemap,renderer) {
	if(tilemap.stage != null && tilemap.__worldVisible && tilemap.__renderable && tilemap.__group.__tiles.length > 0) {
		if(tilemap.__canvas == null) {
			tilemap.__canvas = window.document.createElement("canvas");
			tilemap.__context = tilemap.__canvas.getContext("2d");
			renderer.__initializeElement(tilemap,tilemap.__canvas);
		}
		tilemap.__canvas.width = tilemap.__width;
		tilemap.__canvas.height = tilemap.__height;
		renderer.__canvasRenderer.context = tilemap.__context;
		var cacheRenderTransform = tilemap.__renderTransform;
		tilemap.__renderTransform = openfl_geom_Matrix.__identity;
		var renderer1 = renderer.__canvasRenderer;
		if(!(tilemap.opaqueBackground == null && tilemap.__graphics == null)) {
			if(tilemap.__renderable) {
				var alpha = renderer1.__getAlpha(tilemap.__worldAlpha);
				if(!(alpha <= 0)) {
					if(tilemap.opaqueBackground != null && !tilemap.__isCacheBitmapRender && tilemap.get_width() > 0 && tilemap.get_height() > 0) {
						renderer1.__setBlendMode(tilemap.__worldBlendMode);
						renderer1.__pushMaskObject(tilemap);
						var context = renderer1.context;
						renderer1.setTransform(tilemap.__renderTransform,context);
						var color = tilemap.opaqueBackground;
						context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
						context.fillRect(0,0,tilemap.get_width(),tilemap.get_height());
						renderer1.__popMaskObject(tilemap);
					}
					if(tilemap.__graphics != null) {
						if(tilemap.__renderable) {
							var alpha = renderer1.__getAlpha(tilemap.__worldAlpha);
							if(!(alpha <= 0)) {
								var graphics = tilemap.__graphics;
								if(graphics != null) {
									openfl_display__$internal_CanvasGraphics.render(graphics,renderer1);
									var width = graphics.__width;
									var height = graphics.__height;
									var canvas = graphics.__canvas;
									if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
										var transform = graphics.__worldTransform;
										var context = renderer1.context;
										var scrollRect = tilemap.__scrollRect;
										var scale9Grid = tilemap.__worldScale9Grid;
										if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
											renderer1.__setBlendMode(tilemap.__worldBlendMode);
											renderer1.__pushMaskObject(tilemap);
											context.globalAlpha = alpha;
											if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
												var pixelRatio = renderer1.__pixelRatio;
												var matrix = openfl_geom_Matrix.__pool.get();
												matrix.translate(transform.tx,transform.ty);
												renderer1.setTransform(matrix,context);
												openfl_geom_Matrix.__pool.release(matrix);
												var bounds = graphics.__bounds;
												var scaleX = graphics.__renderTransform.a / graphics.__bitmapScale;
												var scaleY = graphics.__renderTransform.d / graphics.__bitmapScale;
												var renderScaleX = scaleX * transform.a;
												var renderScaleY = scaleY * transform.d;
												var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
												var top = Math.round(scale9Grid.y * scaleY);
												var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
												var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
												var centerWidth = Math.round(scale9Grid.width * scaleX);
												var centerHeight = Math.round(scale9Grid.height * scaleY);
												var renderLeft = Math.round(left / pixelRatio);
												var renderTop = Math.round(top / pixelRatio);
												var renderRight = Math.round(right / pixelRatio);
												var renderBottom = Math.round(bottom / pixelRatio);
												var renderCenterWidth = bounds.width * renderScaleX - renderLeft - renderRight;
												var renderCenterHeight = bounds.height * renderScaleY - renderTop - renderBottom;
												renderer1.applySmoothing(context,false);
												if(centerWidth != 0 && centerHeight != 0) {
													context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
													context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
													context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
													context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
													context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
													context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
													context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
													context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
												} else if(centerWidth == 0 && centerHeight != 0) {
													var renderWidth = renderLeft + renderCenterWidth + renderRight;
													context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
													context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
												} else if(centerHeight == 0 && centerWidth != 0) {
													var renderHeight = renderTop + renderCenterHeight + renderBottom;
													context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
													context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
													context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
												}
											} else {
												renderer1.setTransform(transform,context);
												context.drawImage(canvas,0,0,width,height);
											}
											renderer1.__popMaskObject(tilemap);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		var renderer1 = renderer.__canvasRenderer;
		if(!(!tilemap.__renderable || tilemap.__group.__tiles.length == 0)) {
			var alpha = renderer1.__getAlpha(tilemap.__worldAlpha);
			if(!(alpha <= 0)) {
				var context = renderer1.context;
				renderer1.__setBlendMode(tilemap.__worldBlendMode);
				renderer1.__pushMaskObject(tilemap);
				var rect = openfl_geom_Rectangle.__pool.get();
				rect.setTo(0,0,tilemap.__width,tilemap.__height);
				renderer1.__pushMaskRect(rect,tilemap.__renderTransform);
				if(!renderer1.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				openfl_display__$internal_CanvasTilemap.renderTileContainer(tilemap.__group,renderer1,tilemap.__renderTransform,tilemap.__tileset,renderer1.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,rect);
				if(!renderer1.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer1.__popMaskRect();
				renderer1.__popMaskObject(tilemap);
				openfl_geom_Rectangle.__pool.release(rect);
			}
		}
		tilemap.__renderTransform = cacheRenderTransform;
		renderer.__canvasRenderer.context = null;
		renderer.__updateClip(tilemap);
		renderer.__applyStyle(tilemap,true,false,true);
	} else {
		openfl_display__$internal_DOMTilemap.clear(tilemap,renderer);
	}
};
openfl_display__$internal_DOMTilemap.renderDrawable = function(tilemap,renderer) {
	renderer.__updateCacheBitmap(tilemap,false);
	if(tilemap.__cacheBitmap != null && !tilemap.__isCacheBitmapRender) {
		renderer.__renderDrawableClear(tilemap);
		tilemap.__cacheBitmap.stage = tilemap.stage;
		var bitmap = tilemap.__cacheBitmap;
		if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
			renderer.__pushMaskObject(bitmap);
			if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
				var src = bitmap.__bitmapData.image.buffer.__srcImage.src;
				if(StringTools.startsWith(src,"data:") || StringTools.startsWith(src,"blob:")) {
					openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
				} else {
					openfl_display__$internal_DOMBitmap.renderImage(bitmap,renderer);
				}
			} else {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
			}
			renderer.__popMaskObject(bitmap);
		} else {
			openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
		}
	} else if(tilemap.stage != null && tilemap.__worldVisible && tilemap.__renderable && tilemap.__group.__tiles.length > 0) {
		if(tilemap.__canvas == null) {
			tilemap.__canvas = window.document.createElement("canvas");
			tilemap.__context = tilemap.__canvas.getContext("2d");
			renderer.__initializeElement(tilemap,tilemap.__canvas);
		}
		tilemap.__canvas.width = tilemap.__width;
		tilemap.__canvas.height = tilemap.__height;
		renderer.__canvasRenderer.context = tilemap.__context;
		var cacheRenderTransform = tilemap.__renderTransform;
		tilemap.__renderTransform = openfl_geom_Matrix.__identity;
		var renderer1 = renderer.__canvasRenderer;
		if(!(tilemap.opaqueBackground == null && tilemap.__graphics == null)) {
			if(tilemap.__renderable) {
				var alpha = renderer1.__getAlpha(tilemap.__worldAlpha);
				if(!(alpha <= 0)) {
					if(tilemap.opaqueBackground != null && !tilemap.__isCacheBitmapRender && tilemap.get_width() > 0 && tilemap.get_height() > 0) {
						renderer1.__setBlendMode(tilemap.__worldBlendMode);
						renderer1.__pushMaskObject(tilemap);
						var context = renderer1.context;
						renderer1.setTransform(tilemap.__renderTransform,context);
						var color = tilemap.opaqueBackground;
						context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
						context.fillRect(0,0,tilemap.get_width(),tilemap.get_height());
						renderer1.__popMaskObject(tilemap);
					}
					if(tilemap.__graphics != null) {
						if(tilemap.__renderable) {
							var alpha = renderer1.__getAlpha(tilemap.__worldAlpha);
							if(!(alpha <= 0)) {
								var graphics = tilemap.__graphics;
								if(graphics != null) {
									openfl_display__$internal_CanvasGraphics.render(graphics,renderer1);
									var width = graphics.__width;
									var height = graphics.__height;
									var canvas = graphics.__canvas;
									if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
										var transform = graphics.__worldTransform;
										var context = renderer1.context;
										var scrollRect = tilemap.__scrollRect;
										var scale9Grid = tilemap.__worldScale9Grid;
										if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
											renderer1.__setBlendMode(tilemap.__worldBlendMode);
											renderer1.__pushMaskObject(tilemap);
											context.globalAlpha = alpha;
											if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
												var pixelRatio = renderer1.__pixelRatio;
												var matrix = openfl_geom_Matrix.__pool.get();
												matrix.translate(transform.tx,transform.ty);
												renderer1.setTransform(matrix,context);
												openfl_geom_Matrix.__pool.release(matrix);
												var bounds = graphics.__bounds;
												var scaleX = graphics.__renderTransform.a / graphics.__bitmapScale;
												var scaleY = graphics.__renderTransform.d / graphics.__bitmapScale;
												var renderScaleX = scaleX * transform.a;
												var renderScaleY = scaleY * transform.d;
												var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
												var top = Math.round(scale9Grid.y * scaleY);
												var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
												var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
												var centerWidth = Math.round(scale9Grid.width * scaleX);
												var centerHeight = Math.round(scale9Grid.height * scaleY);
												var renderLeft = Math.round(left / pixelRatio);
												var renderTop = Math.round(top / pixelRatio);
												var renderRight = Math.round(right / pixelRatio);
												var renderBottom = Math.round(bottom / pixelRatio);
												var renderCenterWidth = bounds.width * renderScaleX - renderLeft - renderRight;
												var renderCenterHeight = bounds.height * renderScaleY - renderTop - renderBottom;
												renderer1.applySmoothing(context,false);
												if(centerWidth != 0 && centerHeight != 0) {
													context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
													context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
													context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
													context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
													context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
													context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
													context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
													context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
												} else if(centerWidth == 0 && centerHeight != 0) {
													var renderWidth = renderLeft + renderCenterWidth + renderRight;
													context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
													context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
												} else if(centerHeight == 0 && centerWidth != 0) {
													var renderHeight = renderTop + renderCenterHeight + renderBottom;
													context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
													context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
													context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
												}
											} else {
												renderer1.setTransform(transform,context);
												context.drawImage(canvas,0,0,width,height);
											}
											renderer1.__popMaskObject(tilemap);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		var renderer1 = renderer.__canvasRenderer;
		if(!(!tilemap.__renderable || tilemap.__group.__tiles.length == 0)) {
			var alpha = renderer1.__getAlpha(tilemap.__worldAlpha);
			if(!(alpha <= 0)) {
				var context = renderer1.context;
				renderer1.__setBlendMode(tilemap.__worldBlendMode);
				renderer1.__pushMaskObject(tilemap);
				var rect = openfl_geom_Rectangle.__pool.get();
				rect.setTo(0,0,tilemap.__width,tilemap.__height);
				renderer1.__pushMaskRect(rect,tilemap.__renderTransform);
				if(!renderer1.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				openfl_display__$internal_CanvasTilemap.renderTileContainer(tilemap.__group,renderer1,tilemap.__renderTransform,tilemap.__tileset,renderer1.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,rect);
				if(!renderer1.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer1.__popMaskRect();
				renderer1.__popMaskObject(tilemap);
				openfl_geom_Rectangle.__pool.release(rect);
			}
		}
		tilemap.__renderTransform = cacheRenderTransform;
		renderer.__canvasRenderer.context = null;
		renderer.__updateClip(tilemap);
		renderer.__applyStyle(tilemap,true,false,true);
	} else {
		openfl_display__$internal_DOMTilemap.clear(tilemap,renderer);
	}
	renderer.__renderEvent(tilemap);
};
openfl_display__$internal_DOMTilemap.renderDrawableClear = function(tilemap,renderer) {
	openfl_display__$internal_DOMTilemap.clear(tilemap,renderer);
};
var openfl_display__$internal_DOMVideo = function() { };
$hxClasses["openfl.display._internal.DOMVideo"] = openfl_display__$internal_DOMVideo;
openfl_display__$internal_DOMVideo.__name__ = "openfl.display._internal.DOMVideo";
openfl_display__$internal_DOMVideo.clear = function(video,renderer) {
	openfl_display__$internal_DOMDisplayObject.clear(video,renderer);
	if(video.__active) {
		renderer.element.removeChild(video.__stream.__video);
		video.__active = false;
	}
};
openfl_display__$internal_DOMVideo.render = function(video,renderer) {
	if(video.stage != null && video.__stream != null && video.__worldVisible && video.__renderable) {
		if(!video.__active) {
			renderer.__initializeElement(video,video.__stream.__video);
			video.__active = true;
			video.__dirty = true;
		}
		if(video.__dirty) {
			video.__stream.__video.width = video.__width | 0;
			video.__stream.__video.height = video.__height | 0;
			video.__dirty = false;
		}
		renderer.__updateClip(video);
		renderer.__applyStyle(video,true,true,true);
	} else {
		openfl_display__$internal_DOMVideo.clear(video,renderer);
	}
};
openfl_display__$internal_DOMVideo.renderDrawable = function(video,renderer) {
	openfl_display__$internal_DOMVideo.render(video,renderer);
	renderer.__renderEvent(video);
};
openfl_display__$internal_DOMVideo.renderDrawableClear = function(video,renderer) {
	openfl_display__$internal_DOMDisplayObject.renderDrawableClear(video,renderer);
};
var openfl_display__$internal_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl_display__$internal_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl.display._internal.DrawCommandReader"] = openfl_display__$internal_DrawCommandReader;
openfl_display__$internal_DrawCommandReader.__name__ = "openfl.display._internal.DrawCommandReader";
openfl_display__$internal_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,float: function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,int: function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
		return this;
	}
	,readBeginFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
		return this;
	}
	,readBeginGradientFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL;
		return this;
	}
	,readBeginShaderFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
		return this;
	}
	,readCubicCurveTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
		return this;
	}
	,readCurveTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
		return this;
	}
	,readDrawCircle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
		return this;
	}
	,readDrawEllipse: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
		return this;
	}
	,readDrawQuads: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
		return this;
	}
	,readDrawRect: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
		return this;
	}
	,readDrawRoundRect: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
		return this;
	}
	,readDrawTriangles: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
		return this;
	}
	,readEndFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.END_FILL;
		return this;
	}
	,readLineBitmapStyle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE;
		return this;
	}
	,readLineGradientStyle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE;
		return this;
	}
	,readLineStyle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.LINE_STYLE;
		return this;
	}
	,readLineTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
		return this;
	}
	,readMoveTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
		return this;
	}
	,readOverrideBlendMode: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.OVERRIDE_BLEND_MODE;
		return this;
	}
	,readOverrideMatrix: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.OVERRIDE_MATRIX;
		return this;
	}
	,readWindingEvenOdd: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.WINDING_EVEN_ODD;
		return this;
	}
	,readWindingNonZero: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.WINDING_NON_ZERO;
		return this;
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = type;
	}
	,__class__: openfl_display__$internal_DrawCommandReader
};
var openfl_display__$internal_BeginBitmapFillView = {};
openfl_display__$internal_BeginBitmapFillView.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"};
openfl_display__$internal_BeginBitmapFillView._new = function(d) {
	return d;
};
openfl_display__$internal_BeginBitmapFillView.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl_display__$internal_BeginBitmapFillView.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl_display__$internal_BeginBitmapFillView.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl_display__$internal_BeginBitmapFillView.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl_display__$internal_BeginFillView = {};
openfl_display__$internal_BeginFillView.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"};
openfl_display__$internal_BeginFillView._new = function(d) {
	return d;
};
openfl_display__$internal_BeginFillView.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl_display__$internal_BeginFillView.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl_display__$internal_BeginGradientFillView = {};
openfl_display__$internal_BeginGradientFillView.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"};
openfl_display__$internal_BeginGradientFillView._new = function(d) {
	return d;
};
openfl_display__$internal_BeginGradientFillView.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl_display__$internal_BeginGradientFillView.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl_display__$internal_BeginGradientFillView.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl_display__$internal_BeginGradientFillView.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl_display__$internal_BeginGradientFillView.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl_display__$internal_BeginGradientFillView.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl_display__$internal_BeginGradientFillView.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl_display__$internal_BeginGradientFillView.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl_display__$internal_BeginShaderFillView = {};
openfl_display__$internal_BeginShaderFillView.__properties__ = {get_shaderBuffer:"get_shaderBuffer"};
openfl_display__$internal_BeginShaderFillView._new = function(d) {
	return d;
};
openfl_display__$internal_BeginShaderFillView.get_shaderBuffer = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl_display__$internal_CubicCurveToView = {};
openfl_display__$internal_CubicCurveToView.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"};
openfl_display__$internal_CubicCurveToView._new = function(d) {
	return d;
};
openfl_display__$internal_CubicCurveToView.get_controlX1 = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_CubicCurveToView.get_controlY1 = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl_display__$internal_CubicCurveToView.get_controlX2 = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl_display__$internal_CubicCurveToView.get_controlY2 = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl_display__$internal_CubicCurveToView.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl_display__$internal_CubicCurveToView.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 5];
};
var openfl_display__$internal_CurveToView = {};
openfl_display__$internal_CurveToView.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"};
openfl_display__$internal_CurveToView._new = function(d) {
	return d;
};
openfl_display__$internal_CurveToView.get_controlX = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_CurveToView.get_controlY = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl_display__$internal_CurveToView.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl_display__$internal_CurveToView.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl_display__$internal_DrawCircleView = {};
openfl_display__$internal_DrawCircleView.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"};
openfl_display__$internal_DrawCircleView._new = function(d) {
	return d;
};
openfl_display__$internal_DrawCircleView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_DrawCircleView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl_display__$internal_DrawCircleView.get_radius = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
var openfl_display__$internal_DrawEllipseView = {};
openfl_display__$internal_DrawEllipseView.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl_display__$internal_DrawEllipseView._new = function(d) {
	return d;
};
openfl_display__$internal_DrawEllipseView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_DrawEllipseView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl_display__$internal_DrawEllipseView.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl_display__$internal_DrawEllipseView.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl_display__$internal_DrawQuadsView = {};
openfl_display__$internal_DrawQuadsView.__properties__ = {get_transforms:"get_transforms",get_indices:"get_indices",get_rects:"get_rects"};
openfl_display__$internal_DrawQuadsView._new = function(d) {
	return d;
};
openfl_display__$internal_DrawQuadsView.get_rects = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl_display__$internal_DrawQuadsView.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl_display__$internal_DrawQuadsView.get_transforms = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
var openfl_display__$internal_DrawRectView = {};
openfl_display__$internal_DrawRectView.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl_display__$internal_DrawRectView._new = function(d) {
	return d;
};
openfl_display__$internal_DrawRectView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_DrawRectView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl_display__$internal_DrawRectView.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl_display__$internal_DrawRectView.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl_display__$internal_DrawRoundRectView = {};
openfl_display__$internal_DrawRoundRectView.__properties__ = {get_ellipseHeight:"get_ellipseHeight",get_ellipseWidth:"get_ellipseWidth",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl_display__$internal_DrawRoundRectView._new = function(d) {
	return d;
};
openfl_display__$internal_DrawRoundRectView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_DrawRoundRectView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl_display__$internal_DrawRoundRectView.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl_display__$internal_DrawRoundRectView.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl_display__$internal_DrawRoundRectView.get_ellipseWidth = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl_display__$internal_DrawRoundRectView.get_ellipseHeight = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl_display__$internal_DrawTrianglesView = {};
openfl_display__$internal_DrawTrianglesView.__properties__ = {get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"};
openfl_display__$internal_DrawTrianglesView._new = function(d) {
	return d;
};
openfl_display__$internal_DrawTrianglesView.get_vertices = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl_display__$internal_DrawTrianglesView.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl_display__$internal_DrawTrianglesView.get_uvtData = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl_display__$internal_DrawTrianglesView.get_culling = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
var openfl_display__$internal_EndFillView = {};
openfl_display__$internal_EndFillView._new = function(d) {
	return d;
};
var openfl_display__$internal_LineBitmapStyleView = {};
openfl_display__$internal_LineBitmapStyleView.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"};
openfl_display__$internal_LineBitmapStyleView._new = function(d) {
	return d;
};
openfl_display__$internal_LineBitmapStyleView.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl_display__$internal_LineBitmapStyleView.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl_display__$internal_LineBitmapStyleView.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl_display__$internal_LineBitmapStyleView.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl_display__$internal_LineGradientStyleView = {};
openfl_display__$internal_LineGradientStyleView.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"};
openfl_display__$internal_LineGradientStyleView._new = function(d) {
	return d;
};
openfl_display__$internal_LineGradientStyleView.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl_display__$internal_LineGradientStyleView.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl_display__$internal_LineGradientStyleView.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl_display__$internal_LineGradientStyleView.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl_display__$internal_LineGradientStyleView.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl_display__$internal_LineGradientStyleView.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl_display__$internal_LineGradientStyleView.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl_display__$internal_LineGradientStyleView.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl_display__$internal_LineStyleView = {};
openfl_display__$internal_LineStyleView.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"};
openfl_display__$internal_LineStyleView._new = function(d) {
	return d;
};
openfl_display__$internal_LineStyleView.get_thickness = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl_display__$internal_LineStyleView.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl_display__$internal_LineStyleView.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_LineStyleView.get_pixelHinting = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl_display__$internal_LineStyleView.get_scaleMode = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl_display__$internal_LineStyleView.get_caps = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl_display__$internal_LineStyleView.get_joints = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl_display__$internal_LineStyleView.get_miterLimit = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl_display__$internal_LineToView = {};
openfl_display__$internal_LineToView.__properties__ = {get_y:"get_y",get_x:"get_x"};
openfl_display__$internal_LineToView._new = function(d) {
	return d;
};
openfl_display__$internal_LineToView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_LineToView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl_display__$internal_MoveToView = {};
openfl_display__$internal_MoveToView.__properties__ = {get_y:"get_y",get_x:"get_x"};
openfl_display__$internal_MoveToView._new = function(d) {
	return d;
};
openfl_display__$internal_MoveToView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_MoveToView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl_display__$internal_OverrideBlendModeView = {};
openfl_display__$internal_OverrideBlendModeView.__properties__ = {get_blendMode:"get_blendMode"};
openfl_display__$internal_OverrideBlendModeView._new = function(d) {
	return d;
};
openfl_display__$internal_OverrideBlendModeView.get_blendMode = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl_display__$internal_OverrideMatrixView = {};
openfl_display__$internal_OverrideMatrixView.__properties__ = {get_matrix:"get_matrix"};
openfl_display__$internal_OverrideMatrixView._new = function(d) {
	return d;
};
openfl_display__$internal_OverrideMatrixView.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl_display__$internal_WindingEvenOddView = {};
openfl_display__$internal_WindingEvenOddView._new = function(d) {
	return d;
};
var openfl_display__$internal_WindingNonZeroView = {};
openfl_display__$internal_WindingNonZeroView._new = function(d) {
	return d;
};
var openfl_display__$internal_DrawCommandType = $hxEnums["openfl.display._internal.DrawCommandType"] = { __ename__:"openfl.display._internal.DrawCommandType",__constructs__:null
	,BEGIN_BITMAP_FILL: {_hx_name:"BEGIN_BITMAP_FILL",_hx_index:0,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,BEGIN_FILL: {_hx_name:"BEGIN_FILL",_hx_index:1,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,BEGIN_GRADIENT_FILL: {_hx_name:"BEGIN_GRADIENT_FILL",_hx_index:2,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,BEGIN_SHADER_FILL: {_hx_name:"BEGIN_SHADER_FILL",_hx_index:3,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,CUBIC_CURVE_TO: {_hx_name:"CUBIC_CURVE_TO",_hx_index:4,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,CURVE_TO: {_hx_name:"CURVE_TO",_hx_index:5,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_CIRCLE: {_hx_name:"DRAW_CIRCLE",_hx_index:6,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_ELLIPSE: {_hx_name:"DRAW_ELLIPSE",_hx_index:7,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_QUADS: {_hx_name:"DRAW_QUADS",_hx_index:8,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_RECT: {_hx_name:"DRAW_RECT",_hx_index:9,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_ROUND_RECT: {_hx_name:"DRAW_ROUND_RECT",_hx_index:10,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_TILES: {_hx_name:"DRAW_TILES",_hx_index:11,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_TRIANGLES: {_hx_name:"DRAW_TRIANGLES",_hx_index:12,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,END_FILL: {_hx_name:"END_FILL",_hx_index:13,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,LINE_BITMAP_STYLE: {_hx_name:"LINE_BITMAP_STYLE",_hx_index:14,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,LINE_GRADIENT_STYLE: {_hx_name:"LINE_GRADIENT_STYLE",_hx_index:15,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,LINE_STYLE: {_hx_name:"LINE_STYLE",_hx_index:16,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,LINE_TO: {_hx_name:"LINE_TO",_hx_index:17,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,MOVE_TO: {_hx_name:"MOVE_TO",_hx_index:18,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,OVERRIDE_BLEND_MODE: {_hx_name:"OVERRIDE_BLEND_MODE",_hx_index:19,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,OVERRIDE_MATRIX: {_hx_name:"OVERRIDE_MATRIX",_hx_index:20,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,WINDING_EVEN_ODD: {_hx_name:"WINDING_EVEN_ODD",_hx_index:21,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,WINDING_NON_ZERO: {_hx_name:"WINDING_NON_ZERO",_hx_index:22,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,UNKNOWN: {_hx_name:"UNKNOWN",_hx_index:23,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
};
openfl_display__$internal_DrawCommandType.__constructs__ = [openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL,openfl_display__$internal_DrawCommandType.BEGIN_FILL,openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL,openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL,openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO,openfl_display__$internal_DrawCommandType.CURVE_TO,openfl_display__$internal_DrawCommandType.DRAW_CIRCLE,openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE,openfl_display__$internal_DrawCommandType.DRAW_QUADS,openfl_display__$internal_DrawCommandType.DRAW_RECT,openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT,openfl_display__$internal_DrawCommandType.DRAW_TILES,openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES,openfl_display__$internal_DrawCommandType.END_FILL,openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE,openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE,openfl_display__$internal_DrawCommandType.LINE_STYLE,openfl_display__$internal_DrawCommandType.LINE_TO,openfl_display__$internal_DrawCommandType.MOVE_TO,openfl_display__$internal_DrawCommandType.OVERRIDE_BLEND_MODE,openfl_display__$internal_DrawCommandType.OVERRIDE_MATRIX,openfl_display__$internal_DrawCommandType.WINDING_EVEN_ODD,openfl_display__$internal_DrawCommandType.WINDING_NON_ZERO,openfl_display__$internal_DrawCommandType.UNKNOWN];
var openfl_display__$internal_FlashRenderer = function() { };
$hxClasses["openfl.display._internal.FlashRenderer"] = openfl_display__$internal_FlashRenderer;
openfl_display__$internal_FlashRenderer.__name__ = "openfl.display._internal.FlashRenderer";
openfl_display__$internal_FlashRenderer.register = function(renderObject) {
	if(openfl_display__$internal_FlashRenderer.instances == null) {
		openfl_display__$internal_FlashRenderer.instances = openfl_utils_Dictionary.toObjectMap(null,true);
		openfl_Lib.get_current().stage.addEventListener("enterFrame",openfl_display__$internal_FlashRenderer.render,false,-2147483648);
	}
	openfl_display__$internal_FlashRenderer.instances.set(renderObject,true);
};
openfl_display__$internal_FlashRenderer.render = function(_) {
	var instance = openfl_display__$internal_FlashRenderer.instances.keys();
	while(instance.hasNext()) {
		var instance1 = instance.next();
		instance1.__renderFlash();
	}
};
var openfl_display__$internal_IDisplayObject = function() { };
$hxClasses["openfl.display._internal.IDisplayObject"] = openfl_display__$internal_IDisplayObject;
openfl_display__$internal_IDisplayObject.__name__ = "openfl.display._internal.IDisplayObject";
openfl_display__$internal_IDisplayObject.__isInterface__ = true;
openfl_display__$internal_IDisplayObject.prototype = {
	__renderFlash: null
	,__class__: openfl_display__$internal_IDisplayObject
};
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = "openfl.geom.Point";
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		}
		var _this = openfl_geom_Point.__limeVector2;
		_this.x = this.x;
		_this.y = this.y;
		return openfl_geom_Point.__limeVector2;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var openfl_display__$internal_FlashTilemap = function() { };
$hxClasses["openfl.display._internal.FlashTilemap"] = openfl_display__$internal_FlashTilemap;
openfl_display__$internal_FlashTilemap.__name__ = "openfl.display._internal.FlashTilemap";
openfl_display__$internal_FlashTilemap.render = function(tilemap) {
};
openfl_display__$internal_FlashTilemap.renderTileContainer = function(group,bitmapData,parentTransform,defaultTileset,smooth,alphaEnabled,worldAlpha,colorTransformEnabled,defaultColorTransform,blendModeEnabled,defaultBlendMode,cacheBitmapData) {
};
var openfl_display__$internal_PerlinNoise = function(seed,octaves,channels,grayScale,falloff,stitch,stitch_threshold) {
	if(stitch_threshold == null) {
		stitch_threshold = 0.05;
	}
	if(stitch == null) {
		stitch = false;
	}
	openfl_display__$internal_AbstractNoise.call(this,seed,octaves,channels,grayScale,falloff,stitch,stitch_threshold);
	this.p_perm = [];
	var _g = 0;
	while(_g < 512) {
		var i = _g++;
		this.p_perm[i] = openfl_display__$internal_PerlinNoise.P[i & 255];
	}
	this.base_factor = 0.03125;
	this.setSeed(seed);
};
$hxClasses["openfl.display._internal.PerlinNoise"] = openfl_display__$internal_PerlinNoise;
openfl_display__$internal_PerlinNoise.__name__ = "openfl.display._internal.PerlinNoise";
openfl_display__$internal_PerlinNoise.__super__ = openfl_display__$internal_AbstractNoise;
openfl_display__$internal_PerlinNoise.prototype = $extend(openfl_display__$internal_AbstractNoise.prototype,{
	p_perm: null
	,x_offset: null
	,y_offset: null
	,z_offset: null
	,base_factor: null
	,fill: function(bitmap,_scale_x,_scale_y,_scale_z) {
		var width = bitmap.width;
		var height = bitmap.height;
		var octaves = this.octaves;
		var octaves_frequencies = this.octaves_frequencies;
		var octaves_persistences = this.octaves_persistences;
		var isRed = (1 & this.channels) == 1;
		var isGreen = (2 & this.channels) == 2;
		var isBlue = (4 & this.channels) == 4;
		var channels = 0;
		if(isRed) {
			++channels;
		}
		if(isGreen) {
			++channels;
		}
		if(isBlue) {
			++channels;
		}
		var grayscale = this.grayscale;
		var stitch_w = this.stitch_threshold * width | 0;
		var stitch_h = this.stitch_threshold * height | 0;
		var base_x = _scale_x * this.base_factor + this.x_offset;
		_scale_y = _scale_y * this.base_factor + this.y_offset;
		_scale_z = _scale_z * this.base_factor + this.z_offset;
		var g_offset = 1.0;
		var b_offset = 2.0;
		var _g = 0;
		var _g1 = height;
		while(_g < _g1) {
			var py = _g++;
			_scale_x = base_x;
			var _g2 = 0;
			var _g3 = width;
			while(_g2 < _g3) {
				var px = _g2++;
				var color1 = 0.0;
				var color2 = 0.0;
				var color3 = 0.0;
				var _g4 = 0;
				var _g5 = octaves;
				while(_g4 < _g5) {
					var i = _g4++;
					var frequency = octaves_frequencies[i];
					var persistence = octaves_persistences[i];
					color1 += this.noise(_scale_x * frequency,_scale_y * frequency,_scale_z * frequency) * persistence;
					if(!grayscale) {
						if(1 < channels) {
							color2 += this.noise((_scale_x + g_offset) * frequency,(_scale_y + g_offset) * frequency,_scale_z * frequency) * persistence;
						}
						if(2 < channels) {
							color3 += this.noise((_scale_x + b_offset) * frequency,(_scale_y + b_offset) * frequency,_scale_z * frequency) * persistence;
						}
					}
				}
				var color = 0;
				if(grayscale) {
					color = this.color(color1,color1,color1);
				} else if(isRed && isGreen && isBlue) {
					color = this.color(color1,color2,color3);
				} else if(isRed && isGreen) {
					color = this.color(color1,color2,null);
				} else if(isRed && isBlue) {
					color = this.color(color1,null,color2);
				} else if(isGreen && isBlue) {
					color = this.color(null,color1,color2);
				} else if(isRed) {
					color = this.color(color1,null,null);
				} else if(isGreen) {
					color = this.color(null,color1,null);
				} else if(isBlue) {
					color = this.color(null,null,color1);
				}
				if(this.stitch) {
					color = this.stitching(bitmap,color,px,py,stitch_w,stitch_h,width,height);
				}
				bitmap.setPixel32(px,py,color);
				_scale_x += this.base_factor;
			}
			_scale_y += this.base_factor;
		}
	}
	,noise: function(x,y,z) {
		var xf = x - x % 1;
		var yf = y - y % 1;
		var zf = z - z % 1;
		x -= xf;
		y -= yf;
		z -= zf;
		var X = (xf | 0) & 255;
		var Y = (yf | 0) & 255;
		var Z = (zf | 0) & 255;
		var u = this.fade(x);
		var v = this.fade(y);
		var w = this.fade(z);
		var A = this.p_perm[X] + Y;
		var AA = this.p_perm[A] + Z;
		var AB = this.p_perm[A + 1] + Z;
		var B = this.p_perm[X + 1] + Y;
		var BA = this.p_perm[B] + Z;
		var BB = this.p_perm[B + 1] + Z;
		var x1 = x - 1;
		var y1 = y - 1;
		var z1 = z - 1;
		var hash = this.p_perm[BB + 1] & 15;
		var g1 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z1 : hash < 4 ? -y1 : hash == 14 ? -x1 : -z1);
		hash = this.p_perm[AB + 1] & 15;
		var g2 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z1 : hash < 4 ? -y1 : hash == 14 ? -x : -z1);
		hash = this.p_perm[BA + 1] & 15;
		var g3 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z1 : hash < 4 ? -y : hash == 14 ? -x1 : -z1);
		hash = this.p_perm[AA + 1] & 15;
		var g4 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z1 : hash < 4 ? -y : hash == 14 ? -x : -z1);
		hash = this.p_perm[BB] & 15;
		var g5 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z : hash < 4 ? -y1 : hash == 14 ? -x1 : -z);
		hash = this.p_perm[AB] & 15;
		var g6 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z : hash < 4 ? -y1 : hash == 14 ? -x : -z);
		hash = this.p_perm[BA] & 15;
		var g7 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z : hash < 4 ? -y : hash == 14 ? -x1 : -z);
		hash = this.p_perm[AA] & 15;
		var g8 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z : hash < 4 ? -y : hash == 14 ? -x : -z);
		g2 += u * (g1 - g2);
		g4 += u * (g3 - g4);
		g6 += u * (g5 - g6);
		g8 += u * (g7 - g8);
		g4 += v * (g2 - g4);
		g8 += v * (g6 - g8);
		return g8 + w * (g4 - g8);
	}
	,setSeed: function(seed) {
		seed = seed * 16807.0 % 2147483647 | 0;
		this.x_offset = seed;
		seed = seed * 16807.0 % 2147483647 | 0;
		this.y_offset = seed;
		seed = seed * 16807.0 % 2147483647 | 0;
		this.z_offset = seed;
	}
	,__class__: openfl_display__$internal_PerlinNoise
});
var openfl_display__$internal_SamplerState = function(wrap,filter,mipfilter,lodBias,ignoreSampler,centroid,textureAlpha) {
	if(textureAlpha == null) {
		textureAlpha = false;
	}
	if(centroid == null) {
		centroid = false;
	}
	if(ignoreSampler == null) {
		ignoreSampler = false;
	}
	if(lodBias == null) {
		lodBias = 0.0;
	}
	if(mipfilter == null) {
		mipfilter = 2;
	}
	if(filter == null) {
		filter = 5;
	}
	if(wrap == null) {
		wrap = 0;
	}
	this.wrap = wrap;
	this.filter = filter;
	this.mipfilter = mipfilter;
	this.lodBias = lodBias;
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
	this.textureAlpha = textureAlpha;
};
$hxClasses["openfl.display._internal.SamplerState"] = openfl_display__$internal_SamplerState;
openfl_display__$internal_SamplerState.__name__ = "openfl.display._internal.SamplerState";
openfl_display__$internal_SamplerState.prototype = {
	centroid: null
	,filter: null
	,ignoreSampler: null
	,lodBias: null
	,mipfilter: null
	,mipmapGenerated: null
	,textureAlpha: null
	,wrap: null
	,clone: function() {
		var copy = new openfl_display__$internal_SamplerState(this.wrap,this.filter,this.mipfilter,this.lodBias,this.ignoreSampler,this.centroid,this.textureAlpha);
		copy.mipmapGenerated = this.mipmapGenerated;
		return copy;
	}
	,copyFrom: function(other) {
		if(other == null || other.ignoreSampler) {
			return;
		}
		this.wrap = other.wrap;
		this.filter = other.filter;
		this.mipfilter = other.mipfilter;
		this.lodBias = other.lodBias;
		this.centroid = other.centroid;
		this.textureAlpha = other.textureAlpha;
	}
	,equals: function(other) {
		if(other == null) {
			return false;
		}
		if(this.wrap == other.wrap && this.filter == other.filter && this.mipfilter == other.mipfilter && this.lodBias == other.lodBias) {
			return this.textureAlpha == other.textureAlpha;
		} else {
			return false;
		}
	}
	,__class__: openfl_display__$internal_SamplerState
};
var openfl_display__$internal_ShaderBuffer = function() {
	this.inputRefs = [];
	this.inputFilter = [];
	this.inputMipFilter = [];
	this.inputs = [];
	this.inputWrap = [];
	this.overrideIntNames = [];
	this.overrideIntValues = [];
	this.overrideFloatNames = [];
	this.overrideFloatValues = [];
	this.overrideBoolNames = [];
	this.overrideBoolValues = [];
	this.paramLengths = [];
	this.paramPositions = [];
	this.paramRefs_Bool = [];
	this.paramRefs_Float = [];
	this.paramRefs_Int = [];
	this.paramTypes = [];
};
$hxClasses["openfl.display._internal.ShaderBuffer"] = openfl_display__$internal_ShaderBuffer;
openfl_display__$internal_ShaderBuffer.__name__ = "openfl.display._internal.ShaderBuffer";
openfl_display__$internal_ShaderBuffer.prototype = {
	inputCount: null
	,inputRefs: null
	,inputFilter: null
	,inputMipFilter: null
	,inputs: null
	,inputWrap: null
	,overrideBoolCount: null
	,overrideBoolNames: null
	,overrideBoolValues: null
	,overrideFloatCount: null
	,overrideFloatNames: null
	,overrideFloatValues: null
	,overrideIntCount: null
	,overrideIntNames: null
	,overrideIntValues: null
	,paramBoolCount: null
	,paramCount: null
	,paramData: null
	,paramDataBuffer: null
	,paramDataLength: null
	,paramFloatCount: null
	,paramIntCount: null
	,paramLengths: null
	,paramPositions: null
	,paramRefs_Bool: null
	,paramRefs_Float: null
	,paramRefs_Int: null
	,paramTypes: null
	,shader: null
	,addBoolOverride: function(name,values) {
		this.overrideBoolNames[this.overrideBoolCount] = name;
		this.overrideBoolValues[this.overrideBoolCount] = values;
		this.overrideBoolCount++;
	}
	,addFloatOverride: function(name,values) {
		this.overrideFloatNames[this.overrideFloatCount] = name;
		this.overrideFloatValues[this.overrideFloatCount] = values;
		this.overrideFloatCount++;
	}
	,addIntOverride: function(name,values) {
		this.overrideIntNames[this.overrideIntCount] = name;
		this.overrideIntValues[this.overrideIntCount] = values;
		this.overrideIntCount++;
	}
	,clearOverride: function() {
		this.overrideIntCount = 0;
		this.overrideFloatCount = 0;
		this.overrideBoolCount = 0;
	}
	,update: function(shader) {
		this.inputCount = 0;
		this.overrideIntCount = 0;
		this.overrideFloatCount = 0;
		this.overrideBoolCount = 0;
		this.paramBoolCount = 0;
		this.paramCount = 0;
		this.paramDataLength = 0;
		this.paramFloatCount = 0;
		this.paramIntCount = 0;
		this.shader = null;
		if(shader == null) {
			return;
		}
		shader.__init();
		this.inputCount = shader.__inputBitmapData.length;
		var input;
		var _g = 0;
		var _g1 = this.inputCount;
		while(_g < _g1) {
			var i = _g++;
			input = shader.__inputBitmapData[i];
			this.inputs[i] = input.input;
			this.inputFilter[i] = input.filter;
			this.inputMipFilter[i] = input.mipFilter;
			this.inputRefs[i] = input;
			this.inputWrap[i] = input.wrap;
		}
		var boolCount = shader.__paramBool.length;
		var floatCount = shader.__paramFloat.length;
		var intCount = shader.__paramInt.length;
		this.paramCount = boolCount + floatCount + intCount;
		this.paramBoolCount = boolCount;
		this.paramFloatCount = floatCount;
		this.paramIntCount = intCount;
		var length = 0;
		var p = 0;
		var param;
		var _g = 0;
		var _g1 = boolCount;
		while(_g < _g1) {
			var i = _g++;
			param = shader.__paramBool[i];
			this.paramPositions[p] = this.paramDataLength;
			length = param.value != null ? param.value.length : 0;
			this.paramLengths[p] = length;
			this.paramDataLength += length;
			this.paramTypes[p] = 0;
			this.paramRefs_Bool[i] = param;
			++p;
		}
		var param;
		var _g = 0;
		var _g1 = floatCount;
		while(_g < _g1) {
			var i = _g++;
			param = shader.__paramFloat[i];
			this.paramPositions[p] = this.paramDataLength;
			length = param.value != null ? param.value.length : 0;
			this.paramLengths[p] = length;
			this.paramDataLength += length;
			this.paramTypes[p] = 1;
			this.paramRefs_Float[i] = param;
			++p;
		}
		var param;
		var _g = 0;
		var _g1 = intCount;
		while(_g < _g1) {
			var i = _g++;
			param = shader.__paramInt[i];
			this.paramPositions[p] = this.paramDataLength;
			length = param.value != null ? param.value.length : 0;
			this.paramLengths[p] = length;
			this.paramDataLength += length;
			this.paramTypes[p] = 2;
			this.paramRefs_Int[i] = param;
			++p;
		}
		if(this.paramDataLength > 0) {
			if(this.paramData == null) {
				var elements = this.paramDataLength;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Float32Array(elements);
				} else if(array != null) {
					this1 = new Float32Array(array);
				} else if(vector != null) {
					this1 = new Float32Array(vector.__array);
				} else if(view != null) {
					this1 = new Float32Array(view);
				} else if(buffer != null) {
					if(len == null) {
						this1 = new Float32Array(buffer,0);
					} else {
						this1 = new Float32Array(buffer,0,len);
					}
				} else {
					this1 = null;
				}
				this.paramData = this1;
			} else if(this.paramDataLength > this.paramData.length) {
				var elements = this.paramDataLength;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Float32Array(elements);
				} else if(array != null) {
					this1 = new Float32Array(array);
				} else if(vector != null) {
					this1 = new Float32Array(vector.__array);
				} else if(view != null) {
					this1 = new Float32Array(view);
				} else if(buffer != null) {
					if(len == null) {
						this1 = new Float32Array(buffer,0);
					} else {
						this1 = new Float32Array(buffer,0,len);
					}
				} else {
					this1 = null;
				}
				var data = this1;
				data.set(this.paramData);
				this.paramData = data;
			}
		}
		var boolIndex = 0;
		var floatIndex = 0;
		var intIndex = 0;
		var paramPosition = 0;
		var boolParam;
		var floatParam;
		var intParam;
		var length;
		var _g = 0;
		var _g1 = this.paramCount;
		while(_g < _g1) {
			var i = _g++;
			length = this.paramLengths[i];
			if(i < boolCount) {
				boolParam = this.paramRefs_Bool[boolIndex];
				++boolIndex;
				var _g2 = 0;
				var _g3 = length;
				while(_g2 < _g3) {
					var j = _g2++;
					this.paramData[paramPosition] = boolParam.value[j] ? 1 : 0;
					++paramPosition;
				}
			} else if(i < boolCount + floatCount) {
				floatParam = this.paramRefs_Float[floatIndex];
				++floatIndex;
				var _g4 = 0;
				var _g5 = length;
				while(_g4 < _g5) {
					var j1 = _g4++;
					this.paramData[paramPosition] = floatParam.value[j1];
					++paramPosition;
				}
			} else {
				intParam = this.paramRefs_Int[intIndex];
				++intIndex;
				var _g6 = 0;
				var _g7 = length;
				while(_g6 < _g7) {
					var j2 = _g6++;
					this.paramData[paramPosition] = intParam.value[j2];
					++paramPosition;
				}
			}
		}
		this.shader = shader;
	}
	,__class__: openfl_display__$internal_ShaderBuffer
};
var openfl_display3D_Context3D = function(stage,contextState,stage3D) {
	this.profile = 3;
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage = stage;
	this.__contextState = contextState;
	this.__stage3D = stage3D;
	this.__context = stage.window.context;
	this.gl = this.__context.webgl;
	if(this.__contextState == null) {
		this.__contextState = new openfl_display3D__$internal_Context3DState();
	}
	this.__state = new openfl_display3D__$internal_Context3DState();
	var array = null;
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	this.__vertexConstants = new Float32Array(512);
	var array = null;
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	this.__fragmentConstants = new Float32Array(512);
	var elements = null;
	var array = [1.0,1.0,1.0,1.0];
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(vector != null) {
		this1 = new Float32Array(vector.__array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	this.__positionScale = this1;
	this.__programs = new haxe_ds_StringMap();
	if(openfl_display3D_Context3D.__glMaxViewportDims == -1) {
		openfl_display3D_Context3D.__glMaxViewportDims = this.gl.getParameter(this.gl.MAX_VIEWPORT_DIMS);
	}
	this.maxBackBufferWidth = openfl_display3D_Context3D.__glMaxViewportDims;
	this.maxBackBufferHeight = openfl_display3D_Context3D.__glMaxViewportDims;
	if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy == -1) {
		var extension = this.gl.getExtension("EXT_texture_filter_anisotropic");
		if(extension == null || !Object.prototype.hasOwnProperty.call(extension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
			extension = this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic");
		}
		if(extension == null || !Object.prototype.hasOwnProperty.call(extension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
			extension = this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
		}
		if(extension != null) {
			openfl_display3D_Context3D.__glTextureMaxAnisotropy = extension.TEXTURE_MAX_ANISOTROPY_EXT;
			openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy = this.gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
		} else {
			openfl_display3D_Context3D.__glTextureMaxAnisotropy = 0;
			openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy = 0;
		}
	}
	if(openfl_display3D_Context3D.__glDepthStencil == -1) {
		openfl_display3D_Context3D.__glDepthStencil = this.gl.DEPTH_STENCIL;
	}
	if(openfl_display3D_Context3D.__glMemoryTotalAvailable == -1) {
		var extension = this.gl.getExtension("NVX_gpu_memory_info");
		if(extension != null) {
			openfl_display3D_Context3D.__glMemoryTotalAvailable = extension.GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX;
			openfl_display3D_Context3D.__glMemoryCurrentAvailable = extension.GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX;
		}
	}
	if(openfl_display3D_Context3D.__driverInfo == null) {
		var vendor = this.gl.getParameter(this.gl.VENDOR);
		var version = this.gl.getParameter(this.gl.VERSION);
		var renderer = this.gl.getParameter(this.gl.RENDERER);
		var glslVersion = this.gl.getParameter(this.gl.SHADING_LANGUAGE_VERSION);
		openfl_display3D_Context3D.__driverInfo = "OpenGL Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
	}
	this.driverInfo = openfl_display3D_Context3D.__driverInfo;
	this.__quadIndexBufferElements = 16383;
	this.__quadIndexBufferCount = this.__quadIndexBufferElements * 6;
	var elements = this.__quadIndexBufferCount;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint16Array(elements);
	} else if(array != null) {
		this1 = new Uint16Array(array);
	} else if(vector != null) {
		this1 = new Uint16Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint16Array(buffer,0);
		} else {
			this1 = new Uint16Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	var data = this1;
	var index = 0;
	var vertex = 0;
	var _g = 0;
	var _g1 = this.__quadIndexBufferElements;
	while(_g < _g1) {
		var i = _g++;
		data[index] = vertex;
		data[index + 1] = vertex + 1;
		data[index + 2] = vertex + 2;
		data[index + 3] = vertex + 2;
		data[index + 4] = vertex + 1;
		data[index + 5] = vertex + 3;
		index = index + 6;
		vertex = vertex + 4;
	}
	this.__quadIndexBuffer = this.createIndexBuffer(this.__quadIndexBufferCount);
	this.__quadIndexBuffer.uploadFromTypedArray(data);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = "openfl.display3D.Context3D";
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	backBufferHeight: null
	,backBufferWidth: null
	,driverInfo: null
	,maxBackBufferHeight: null
	,maxBackBufferWidth: null
	,profile: null
	,gl: null
	,__backBufferAntiAlias: null
	,__backBufferTexture: null
	,__backBufferWantsBestResolution: null
	,__backBufferWantsBestResolutionOnBrowserZoom: null
	,__cleared: null
	,__context: null
	,__contextState: null
	,__renderStage3DProgram: null
	,__enableErrorChecking: null
	,__fragmentConstants: null
	,__frontBufferTexture: null
	,__positionScale: null
	,__present: null
	,__programs: null
	,__quadIndexBuffer: null
	,__quadIndexBufferCount: null
	,__quadIndexBufferElements: null
	,__stage: null
	,__stage3D: null
	,__state: null
	,__vertexConstants: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = 7;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(blue == null) {
			blue = 0;
		}
		if(green == null) {
			green = 0;
		}
		if(red == null) {
			red = 0;
		}
		this.__flushGLFramebuffer();
		this.__flushGLViewport();
		var clearMask = 0;
		if((mask & 1) != 0) {
			if(this.__state.renderToTexture == null) {
				if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
					this.__stage.__renderer.__cleared = true;
				}
				this.__cleared = true;
			}
			clearMask |= this.gl.COLOR_BUFFER_BIT;
			if(this.__contextState.colorMaskRed != true || this.__contextState.colorMaskGreen != true || this.__contextState.colorMaskBlue != true || this.__contextState.colorMaskAlpha != true) {
				this.gl.colorMask(true,true,true,true);
				this.__contextState.colorMaskRed = true;
				this.__contextState.colorMaskGreen = true;
				this.__contextState.colorMaskBlue = true;
				this.__contextState.colorMaskAlpha = true;
			}
			this.gl.clearColor(red,green,blue,alpha);
		}
		if((mask & 2) != 0) {
			clearMask |= this.gl.DEPTH_BUFFER_BIT;
			if(this.__contextState.depthMask != true) {
				this.gl.depthMask(true);
				this.__contextState.depthMask = true;
			}
			this.gl.clearDepth(depth);
		}
		if((mask & 4) != 0) {
			clearMask |= this.gl.STENCIL_BUFFER_BIT;
			if(this.__contextState.stencilWriteMask != 255) {
				this.gl.stencilMask(255);
				this.__contextState.stencilWriteMask = 255;
			}
			this.gl.clearStencil(stencil);
			this.__contextState.stencilWriteMask = 255;
		}
		if(clearMask == 0) {
			return;
		}
		this.__setGLScissorTest(false);
		this.gl.clear(clearMask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
		if(wantsBestResolutionOnBrowserZoom == null) {
			wantsBestResolutionOnBrowserZoom = false;
		}
		if(wantsBestResolution == null) {
			wantsBestResolution = false;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = true;
		}
		if(wantsBestResolution) {
			width = width * this.__stage.window.__scale | 0;
			height = height * this.__stage.window.__scale | 0;
		}
		if(this.__stage3D == null) {
			this.backBufferWidth = width;
			this.backBufferHeight = height;
			this.__backBufferAntiAlias = antiAlias;
			this.__state.backBufferEnableDepthAndStencil = enableDepthAndStencil;
			this.__backBufferWantsBestResolution = wantsBestResolution;
			this.__backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
		} else {
			if(this.__backBufferTexture == null || this.backBufferWidth != width || this.backBufferHeight != height) {
				if(this.__backBufferTexture != null) {
					this.__backBufferTexture.dispose();
				}
				if(this.__frontBufferTexture != null) {
					this.__frontBufferTexture.dispose();
				}
				this.__backBufferTexture = this.createRectangleTexture(width,height,1,true);
				this.__frontBufferTexture = this.createRectangleTexture(width,height,1,true);
				if(this.__stage3D.__vertexBuffer == null) {
					this.__stage3D.__vertexBuffer = this.createVertexBuffer(4,5);
				}
				var scaledWidth = wantsBestResolution ? width : width * this.__stage.window.__scale | 0;
				var scaledHeight = wantsBestResolution ? height : height * this.__stage.window.__scale | 0;
				var vertexData = openfl_Vector.toFloatVector(null,null,null,[scaledWidth,scaledHeight,0,1,1,0,scaledHeight,0,0,1,scaledWidth,0,0,1,0,0,0,0,0,0.0]);
				this.__stage3D.__vertexBuffer.uploadFromVector(vertexData,0,20);
				if(this.__stage3D.__indexBuffer == null) {
					this.__stage3D.__indexBuffer = this.createIndexBuffer(6);
					var indexData = openfl_Vector.toIntVector(null,null,null,[0,1,2,2,1,3]);
					this.__stage3D.__indexBuffer.uploadFromVector(indexData,0,6);
				}
			}
			this.backBufferWidth = width;
			this.backBufferHeight = height;
			this.__backBufferAntiAlias = antiAlias;
			this.__state.backBufferEnableDepthAndStencil = enableDepthAndStencil;
			this.__backBufferWantsBestResolution = wantsBestResolution;
			this.__backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
			this.__state.__primaryGLFramebuffer = this.__backBufferTexture.__getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
			this.__frontBufferTexture.__getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
		}
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_CubeTexture(this,size,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_IndexBuffer3D(this,numIndices,bufferUsage);
	}
	,createProgram: function(format) {
		if(format == null) {
			format = 0;
		}
		return new openfl_display3D_Program3D(this,format);
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D_Context3DTextureFormat.toString(format),optimizeForRenderToTexture);
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_Texture(this,width,height,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_VertexBuffer3D(this,numVertices,data32PerVertex,openfl_display3D_Context3DBufferUsage.toString(bufferUsage));
	}
	,createVideoTexture: function() {
		return new openfl_display3D_textures_VideoTexture(this);
	}
	,dispose: function(recreate) {
		if(recreate == null) {
			recreate = true;
		}
		this.gl = null;
		this.__dispose();
	}
	,drawToBitmapData: function(destination,srcRect,destPoint) {
		if(destination == null) {
			return;
		}
		var sourceRect = srcRect != null ? srcRect.__toLimeRectangle() : new lime_math_Rectangle(0,0,this.backBufferWidth,this.backBufferHeight);
		var destVector = destPoint != null ? destPoint.__toLimeVector2() : new lime_math_Vector2();
		if(this.__stage.context3D == this) {
			if(this.__stage.window != null) {
				if(this.__stage3D != null) {
					var xa = -this.__stage3D.get_x() | 0;
					var ya = -this.__stage3D.get_y() | 0;
					destVector.x = xa;
					destVector.y = ya;
				}
				var image = this.__stage.window.readPixels();
				destination.image.copyPixels(image,sourceRect,destVector);
			}
		} else if(this.__backBufferTexture != null) {
			var cacheRenderToTexture = this.__state.renderToTexture;
			this.setRenderToBackBuffer();
			this.__flushGLFramebuffer();
			this.__flushGLViewport();
			var elements = this.backBufferWidth * this.backBufferHeight * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			var this1 = this.gl;
			var width = this.backBufferWidth;
			var height = this.backBufferHeight;
			var format = this.__backBufferTexture.__format;
			var type = this.gl.UNSIGNED_BYTE;
			var pixels = data;
			var dstOffset = null;
			if(dstOffset != null) {
				this1.readPixels(0,0,width,height,format,type,pixels,dstOffset);
			} else {
				this1.readPixels(0,0,width,height,format,type,pixels);
			}
			var image = new lime_graphics_Image(new lime_graphics_ImageBuffer(data,this.backBufferWidth,this.backBufferHeight,32,2));
			destination.image.copyPixels(image,sourceRect,destVector);
			if(cacheRenderToTexture != null) {
				this.setRenderToTexture(cacheRenderToTexture,this.__state.renderToTextureDepthStencil,this.__state.renderToTextureAntiAlias,this.__state.renderToTextureSurfaceSelector);
			}
		}
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) {
			numTriangles = -1;
		}
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
				this.__stage.__renderer.__clear();
			} else if(!this.__cleared) {
				this.clear(0,0,0,0,1,0,1);
			}
		}
		this.__flushGL();
		if(this.__state.program != null) {
			this.__state.program.__flush();
		}
		var count = numTriangles == -1 ? indexBuffer.__numIndices : numTriangles * 3;
		this.__bindGLElementArrayBuffer(indexBuffer.__id);
		this.gl.drawElements(this.gl.TRIANGLES,count,this.gl.UNSIGNED_SHORT,firstIndex * 2);
	}
	,present: function() {
		this.setRenderToBackBuffer();
		if(this.__stage3D != null && this.__backBufferTexture != null) {
			if(!this.__cleared) {
				this.clear(0,0,0,0,1,0,1);
			}
			var cacheBuffer = this.__backBufferTexture;
			this.__backBufferTexture = this.__frontBufferTexture;
			this.__frontBufferTexture = cacheBuffer;
			this.__state.__primaryGLFramebuffer = this.__backBufferTexture.__getGLFramebuffer(this.__state.backBufferEnableDepthAndStencil,this.__backBufferAntiAlias,0);
			this.__cleared = false;
		}
		this.__present = true;
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.setBlendFactorsSeparate(sourceFactor,destinationFactor,sourceFactor,destinationFactor);
	}
	,setBlendFactorsSeparate: function(sourceRGBFactor,destinationRGBFactor,sourceAlphaFactor,destinationAlphaFactor) {
		this.__state.blendSourceRGBFactor = sourceRGBFactor;
		this.__state.blendDestinationRGBFactor = destinationRGBFactor;
		this.__state.blendSourceAlphaFactor = sourceAlphaFactor;
		this.__state.blendDestinationAlphaFactor = destinationAlphaFactor;
		this.__setGLBlendEquation(this.gl.FUNC_ADD);
	}
	,setColorMask: function(red,green,blue,alpha) {
		this.__state.colorMaskRed = red;
		this.__state.colorMaskGreen = green;
		this.__state.colorMaskBlue = blue;
		this.__state.colorMaskAlpha = alpha;
	}
	,setCulling: function(triangleFaceToCull) {
		this.__state.culling = triangleFaceToCull;
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		this.__state.depthMask = depthMask;
		this.__state.depthCompareMode = passCompareMode;
	}
	,setProgram: function(program) {
		this.__state.program = program;
		this.__state.shader = null;
		if(program != null) {
			var _g = 0;
			var _g1 = program.__samplerStates.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.__state.samplerStates[i] == null) {
					this.__state.samplerStates[i] = program.__samplerStates[i].clone();
				} else {
					this.__state.samplerStates[i].copyFrom(program.__samplerStates[i]);
				}
			}
		}
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		if(numRegisters == 0 || this.__state.program == null) {
			return;
		}
		if(!(this.__state.program != null && this.__state.program.__format == 1)) {
			if(numRegisters == -1) {
				numRegisters = (openfl_utils_ByteArray.get_length(data) >>> 2) - byteArrayOffset;
			}
			var isVertex = programType == 1;
			var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
			var bytes = openfl_utils_ByteArray.toBytes(data);
			var byteOffset = 0;
			var len = null;
			if(byteOffset == null) {
				byteOffset = 0;
			}
			var floatData = byteOffset == null ? new Float32Array(bytes.b.bufferValue) : len == null ? new Float32Array(bytes.b.bufferValue,byteOffset) : new Float32Array(bytes.b.bufferValue,byteOffset,len);
			var outOffset = firstRegister * 4;
			var inOffset = UInt.toFloat(byteArrayOffset) / UInt.toFloat(4) | 0;
			var _g = 0;
			var _g1 = numRegisters * 4;
			while(_g < _g1) {
				var i = _g++;
				dest[outOffset + i] = floatData[inOffset + i];
			}
			if(this.__state.program != null) {
				this.__state.program.__markDirty(isVertex,firstRegister,numRegisters);
			}
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) {
			transposedMatrix = false;
		}
		if(this.__state.program != null && this.__state.program.__format == 1) {
			this.__flushGLProgram();
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var data = new Float32Array(16);
			data[0] = matrix.rawData.get(0);
			data[1] = matrix.rawData.get(1);
			data[2] = matrix.rawData.get(2);
			data[3] = matrix.rawData.get(3);
			data[4] = matrix.rawData.get(4);
			data[5] = matrix.rawData.get(5);
			data[6] = matrix.rawData.get(6);
			data[7] = matrix.rawData.get(7);
			data[8] = matrix.rawData.get(8);
			data[9] = matrix.rawData.get(9);
			data[10] = matrix.rawData.get(10);
			data[11] = matrix.rawData.get(11);
			data[12] = matrix.rawData.get(12);
			data[13] = matrix.rawData.get(13);
			data[14] = matrix.rawData.get(14);
			data[15] = matrix.rawData.get(15);
			lime_graphics_WebGLRenderContext.uniformMatrix4fv(this.gl,firstRegister,transposedMatrix,data);
		} else {
			var isVertex = programType == 1;
			var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
			var source = matrix.rawData;
			var i = firstRegister * 4;
			if(transposedMatrix) {
				dest[i++] = source.get(0);
				dest[i++] = source.get(4);
				dest[i++] = source.get(8);
				dest[i++] = source.get(12);
				dest[i++] = source.get(1);
				dest[i++] = source.get(5);
				dest[i++] = source.get(9);
				dest[i++] = source.get(13);
				dest[i++] = source.get(2);
				dest[i++] = source.get(6);
				dest[i++] = source.get(10);
				dest[i++] = source.get(14);
				dest[i++] = source.get(3);
				dest[i++] = source.get(7);
				dest[i++] = source.get(11);
				dest[i++] = source.get(15);
			} else {
				dest[i++] = source.get(0);
				dest[i++] = source.get(1);
				dest[i++] = source.get(2);
				dest[i++] = source.get(3);
				dest[i++] = source.get(4);
				dest[i++] = source.get(5);
				dest[i++] = source.get(6);
				dest[i++] = source.get(7);
				dest[i++] = source.get(8);
				dest[i++] = source.get(9);
				dest[i++] = source.get(10);
				dest[i++] = source.get(11);
				dest[i++] = source.get(12);
				dest[i++] = source.get(13);
				dest[i++] = source.get(14);
				dest[i++] = source.get(15);
			}
			if(this.__state.program != null) {
				this.__state.program.__markDirty(isVertex,firstRegister,4);
			}
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) {
			numRegisters = -1;
		}
		if(numRegisters == 0) {
			return;
		}
		if(!(this.__state.program != null && this.__state.program.__format == 1)) {
			if(numRegisters == -1) {
				numRegisters = data.get_length() >> 2;
			}
			var isVertex = programType == 1;
			var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
			var source = data;
			var sourceIndex = 0;
			var destIndex = firstRegister * 4;
			var _g = 0;
			var _g1 = numRegisters;
			while(_g < _g1) {
				var i = _g++;
				dest[destIndex++] = source.get(sourceIndex++);
				dest[destIndex++] = source.get(sourceIndex++);
				dest[destIndex++] = source.get(sourceIndex++);
				dest[destIndex++] = source.get(sourceIndex++);
			}
			if(this.__state.program != null) {
				this.__state.program.__markDirty(isVertex,firstRegister,numRegisters);
			}
		}
	}
	,setRenderToBackBuffer: function() {
		this.__state.renderToTexture = null;
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		if(antiAlias == null) {
			antiAlias = 0;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		this.__state.renderToTexture = texture;
		this.__state.renderToTextureDepthStencil = enableDepthAndStencil;
		this.__state.renderToTextureAntiAlias = antiAlias;
		this.__state.renderToTextureSurfaceSelector = surfaceSelector;
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(this.__state.samplerStates[sampler] == null) {
			this.__state.samplerStates[sampler] = new openfl_display__$internal_SamplerState();
		}
		var state = this.__state.samplerStates[sampler];
		state.wrap = wrap;
		state.filter = filter;
		state.mipfilter = mipfilter;
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle != null) {
			this.__state.scissorEnabled = true;
			this.__state.scissorRectangle.copyFrom(rectangle);
		} else {
			this.__state.scissorEnabled = false;
		}
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		if(actionOnDepthPassStencilFail == null) {
			actionOnDepthPassStencilFail = 5;
		}
		if(actionOnDepthFail == null) {
			actionOnDepthFail = 5;
		}
		if(actionOnBothPass == null) {
			actionOnBothPass = 5;
		}
		if(compareMode == null) {
			compareMode = 0;
		}
		if(triangleFace == null) {
			triangleFace = 2;
		}
		this.__state.stencilTriangleFace = triangleFace;
		this.__state.stencilCompareMode = compareMode;
		this.__state.stencilPass = actionOnBothPass;
		this.__state.stencilDepthFail = actionOnDepthFail;
		this.__state.stencilFail = actionOnDepthPassStencilFail;
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		this.__state.stencilReferenceValue = referenceValue;
		this.__state.stencilReadMask = readMask;
		this.__state.stencilWriteMask = writeMask;
	}
	,setTextureAt: function(sampler,texture) {
		this.__state.textures[sampler] = texture;
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(format == null) {
			format = 4;
		}
		if(bufferOffset == null) {
			bufferOffset = 0;
		}
		if(index < 0) {
			return;
		}
		if(buffer == null) {
			this.gl.disableVertexAttribArray(index);
			this.__bindGLArrayBuffer(null);
			return;
		}
		this.__bindGLArrayBuffer(buffer.__id);
		this.gl.enableVertexAttribArray(index);
		var byteOffset = bufferOffset * 4;
		switch(format) {
		case 0:
			this.gl.vertexAttribPointer(index,4,this.gl.UNSIGNED_BYTE,true,buffer.__stride,byteOffset);
			break;
		case 1:
			this.gl.vertexAttribPointer(index,1,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 2:
			this.gl.vertexAttribPointer(index,2,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 3:
			this.gl.vertexAttribPointer(index,3,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 4:
			this.gl.vertexAttribPointer(index,4,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		default:
			throw new openfl_errors_IllegalOperationError();
		}
	}
	,__bindGLArrayBuffer: function(buffer) {
		if(this.__contextState.__currentGLArrayBuffer != buffer) {
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER,buffer);
			this.__contextState.__currentGLArrayBuffer = buffer;
		}
	}
	,__bindGLElementArrayBuffer: function(buffer) {
		if(this.__contextState.__currentGLElementArrayBuffer != buffer) {
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,buffer);
			this.__contextState.__currentGLElementArrayBuffer = buffer;
		}
	}
	,__bindGLFramebuffer: function(framebuffer) {
		if(this.__contextState.__currentGLFramebuffer != framebuffer) {
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,framebuffer);
			this.__contextState.__currentGLFramebuffer = framebuffer;
		}
	}
	,__bindGLTexture2D: function(texture) {
		this.gl.bindTexture(this.gl.TEXTURE_2D,texture);
		this.__contextState.__currentGLTexture2D = texture;
	}
	,__bindGLTextureCubeMap: function(texture) {
		this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP,texture);
		this.__contextState.__currentGLTextureCubeMap = texture;
	}
	,__dispose: function() {
		this.driverInfo += " (Disposed)";
		if(this.__stage3D != null) {
			this.__stage3D.__indexBuffer = null;
			this.__stage3D.__vertexBuffer = null;
			this.__stage3D.context3D = null;
			this.__stage3D = null;
		}
		this.__backBufferTexture = null;
		this.__context = null;
		this.__renderStage3DProgram = null;
		this.__fragmentConstants = null;
		this.__frontBufferTexture = null;
		this.__positionScale = null;
		this.__present = false;
		this.__quadIndexBuffer = null;
		this.__stage = null;
		this.__vertexConstants = null;
	}
	,__drawTriangles: function(firstIndex,count) {
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
				this.__stage.__renderer.__clear();
			} else if(!this.__cleared) {
				this.clear(0,0,0,0,1,0,1);
			}
		}
		this.__flushGL();
		if(this.__state.program != null) {
			this.__state.program.__flush();
		}
		this.gl.drawArrays(this.gl.TRIANGLES,firstIndex,count);
	}
	,__flushGL: function() {
		this.__flushGLProgram();
		this.__flushGLFramebuffer();
		this.__flushGLViewport();
		this.__flushGLBlend();
		if(this.__contextState.colorMaskRed != this.__state.colorMaskRed || this.__contextState.colorMaskGreen != this.__state.colorMaskGreen || this.__contextState.colorMaskBlue != this.__state.colorMaskBlue || this.__contextState.colorMaskAlpha != this.__state.colorMaskAlpha) {
			this.gl.colorMask(this.__state.colorMaskRed,this.__state.colorMaskGreen,this.__state.colorMaskBlue,this.__state.colorMaskAlpha);
			this.__contextState.colorMaskRed = this.__state.colorMaskRed;
			this.__contextState.colorMaskGreen = this.__state.colorMaskGreen;
			this.__contextState.colorMaskBlue = this.__state.colorMaskBlue;
			this.__contextState.colorMaskAlpha = this.__state.colorMaskAlpha;
		}
		this.__flushGLCulling();
		this.__flushGLDepth();
		this.__flushGLScissor();
		this.__flushGLStencil();
		this.__flushGLTextures();
	}
	,__flushGLBlend: function() {
		if(this.__contextState.blendDestinationRGBFactor != this.__state.blendDestinationRGBFactor || this.__contextState.blendSourceRGBFactor != this.__state.blendSourceRGBFactor || this.__contextState.blendDestinationAlphaFactor != this.__state.blendDestinationAlphaFactor || this.__contextState.blendSourceAlphaFactor != this.__state.blendSourceAlphaFactor) {
			this.__setGLBlend(true);
			if(this.__state.blendDestinationRGBFactor == this.__state.blendDestinationAlphaFactor && this.__state.blendSourceRGBFactor == this.__state.blendSourceAlphaFactor) {
				this.gl.blendFunc(this.__getGLBlend(this.__state.blendSourceRGBFactor),this.__getGLBlend(this.__state.blendDestinationRGBFactor));
			} else {
				this.gl.blendFuncSeparate(this.__getGLBlend(this.__state.blendSourceRGBFactor),this.__getGLBlend(this.__state.blendDestinationRGBFactor),this.__getGLBlend(this.__state.blendSourceAlphaFactor),this.__getGLBlend(this.__state.blendDestinationAlphaFactor));
			}
			this.__contextState.blendDestinationRGBFactor = this.__state.blendDestinationRGBFactor;
			this.__contextState.blendSourceRGBFactor = this.__state.blendSourceRGBFactor;
			this.__contextState.blendDestinationAlphaFactor = this.__state.blendDestinationAlphaFactor;
			this.__contextState.blendSourceAlphaFactor = this.__state.blendSourceAlphaFactor;
		}
	}
	,__flushGLColor: function() {
		if(this.__contextState.colorMaskRed != this.__state.colorMaskRed || this.__contextState.colorMaskGreen != this.__state.colorMaskGreen || this.__contextState.colorMaskBlue != this.__state.colorMaskBlue || this.__contextState.colorMaskAlpha != this.__state.colorMaskAlpha) {
			this.gl.colorMask(this.__state.colorMaskRed,this.__state.colorMaskGreen,this.__state.colorMaskBlue,this.__state.colorMaskAlpha);
			this.__contextState.colorMaskRed = this.__state.colorMaskRed;
			this.__contextState.colorMaskGreen = this.__state.colorMaskGreen;
			this.__contextState.colorMaskBlue = this.__state.colorMaskBlue;
			this.__contextState.colorMaskAlpha = this.__state.colorMaskAlpha;
		}
	}
	,__flushGLCulling: function() {
		if(this.__contextState.culling != this.__state.culling) {
			if(this.__state.culling == 3) {
				this.__setGLCullFace(false);
			} else {
				this.__setGLCullFace(true);
				switch(this.__state.culling) {
				case 0:
					this.gl.cullFace(this.gl.BACK);
					break;
				case 1:
					this.gl.cullFace(this.gl.FRONT);
					break;
				case 2:
					this.gl.cullFace(this.gl.FRONT_AND_BACK);
					break;
				case 3:
					break;
				default:
					throw new openfl_errors_IllegalOperationError();
				}
			}
			this.__contextState.culling = this.__state.culling;
		}
	}
	,__flushGLDepth: function() {
		var depthMask = this.__state.depthMask && (this.__state.renderToTexture != null ? this.__state.renderToTextureDepthStencil : this.__state.backBufferEnableDepthAndStencil);
		if(this.__contextState.depthMask != depthMask) {
			this.gl.depthMask(depthMask);
			this.__contextState.depthMask = depthMask;
		}
		if(this.__contextState.depthCompareMode != this.__state.depthCompareMode) {
			switch(this.__state.depthCompareMode) {
			case 0:
				this.gl.depthFunc(this.gl.ALWAYS);
				break;
			case 1:
				this.gl.depthFunc(this.gl.EQUAL);
				break;
			case 2:
				this.gl.depthFunc(this.gl.GREATER);
				break;
			case 3:
				this.gl.depthFunc(this.gl.GEQUAL);
				break;
			case 4:
				this.gl.depthFunc(this.gl.LESS);
				break;
			case 5:
				this.gl.depthFunc(this.gl.LEQUAL);
				break;
			case 6:
				this.gl.depthFunc(this.gl.NEVER);
				break;
			case 7:
				this.gl.depthFunc(this.gl.NOTEQUAL);
				break;
			default:
				throw new openfl_errors_IllegalOperationError();
			}
			this.__contextState.depthCompareMode = this.__state.depthCompareMode;
		}
	}
	,__flushGLFramebuffer: function() {
		if(this.__state.renderToTexture != null) {
			if(this.__contextState.renderToTexture != this.__state.renderToTexture || this.__contextState.renderToTextureSurfaceSelector != this.__state.renderToTextureSurfaceSelector) {
				var framebuffer = this.__state.renderToTexture.__getGLFramebuffer(this.__state.renderToTextureDepthStencil,this.__state.renderToTextureAntiAlias,this.__state.renderToTextureSurfaceSelector);
				this.__bindGLFramebuffer(framebuffer);
				this.__contextState.renderToTexture = this.__state.renderToTexture;
				this.__contextState.renderToTextureAntiAlias = this.__state.renderToTextureAntiAlias;
				this.__contextState.renderToTextureDepthStencil = this.__state.renderToTextureDepthStencil;
				this.__contextState.renderToTextureSurfaceSelector = this.__state.renderToTextureSurfaceSelector;
			}
			this.__setGLDepthTest(this.__state.renderToTextureDepthStencil);
			this.__setGLStencilTest(this.__state.renderToTextureDepthStencil);
			this.__setGLFrontFace(true);
		} else {
			if(this.__stage == null && this.backBufferWidth == 0 && this.backBufferHeight == 0) {
				throw new openfl_errors_Error("Context3D backbuffer has not been configured");
			}
			if(this.__contextState.renderToTexture != null || this.__contextState.__currentGLFramebuffer != this.__state.__primaryGLFramebuffer || this.__contextState.backBufferEnableDepthAndStencil != this.__state.backBufferEnableDepthAndStencil) {
				this.__bindGLFramebuffer(this.__state.__primaryGLFramebuffer);
				this.__contextState.renderToTexture = null;
				this.__contextState.backBufferEnableDepthAndStencil = this.__state.backBufferEnableDepthAndStencil;
			}
			this.__setGLDepthTest(this.__state.backBufferEnableDepthAndStencil);
			this.__setGLStencilTest(this.__state.backBufferEnableDepthAndStencil);
			this.__setGLFrontFace(this.__stage.context3D != this);
		}
	}
	,__flushGLProgram: function() {
		var shader = this.__state.shader;
		var program = this.__state.program;
		if(this.__contextState.shader != shader) {
			if(this.__contextState.shader != null) {
				this.__contextState.shader.__disable();
			}
			if(shader != null) {
				shader.__enable();
			}
			this.__contextState.shader = shader;
		}
		if(this.__contextState.program != program) {
			if(this.__contextState.program != null) {
				this.__contextState.program.__disable();
			}
			if(program != null) {
				program.__enable();
			}
			this.__contextState.program = program;
		}
		if(program != null && program.__format == 0) {
			this.__positionScale[1] = this.__stage.context3D == this && this.__state.renderToTexture == null ? 1.0 : -1.0;
			program.__setPositionScale(this.__positionScale);
		}
	}
	,__flushGLScissor: function() {
		if(!this.__state.scissorEnabled) {
			if(this.__contextState.scissorEnabled != this.__state.scissorEnabled) {
				this.__setGLScissorTest(false);
				this.__contextState.scissorEnabled = false;
			}
		} else {
			this.__setGLScissorTest(true);
			this.__contextState.scissorEnabled = true;
			var scissorX = this.__state.scissorRectangle.x | 0;
			var scissorY = this.__state.scissorRectangle.y | 0;
			var scissorWidth = this.__state.scissorRectangle.width | 0;
			var scissorHeight = this.__state.scissorRectangle.height | 0;
			if(this.__backBufferWantsBestResolution) {
				scissorX = this.__state.scissorRectangle.x * this.__stage.window.__scale | 0;
				scissorY = this.__state.scissorRectangle.y * this.__stage.window.__scale | 0;
				scissorWidth = this.__state.scissorRectangle.width * this.__stage.window.__scale | 0;
				scissorHeight = this.__state.scissorRectangle.height * this.__stage.window.__scale | 0;
			}
			if(this.__state.renderToTexture == null && this.__stage3D == null) {
				var contextHeight = this.__stage.window.__height * this.__stage.window.__scale | 0;
				scissorY = contextHeight - scissorHeight - scissorY;
			}
			if(this.__contextState.scissorRectangle.x != scissorX || this.__contextState.scissorRectangle.y != scissorY || this.__contextState.scissorRectangle.width != scissorWidth || this.__contextState.scissorRectangle.height != scissorHeight) {
				this.gl.scissor(scissorX,scissorY,scissorWidth,scissorHeight);
				this.__contextState.scissorRectangle.setTo(scissorX,scissorY,scissorWidth,scissorHeight);
			}
		}
	}
	,__flushGLStencil: function() {
		if(this.__contextState.stencilTriangleFace != this.__state.stencilTriangleFace || this.__contextState.stencilPass != this.__state.stencilPass || this.__contextState.stencilDepthFail != this.__state.stencilDepthFail || this.__contextState.stencilFail != this.__state.stencilFail) {
			this.gl.stencilOpSeparate(this.__getGLTriangleFace(this.__state.stencilTriangleFace),this.__getGLStencilAction(this.__state.stencilFail),this.__getGLStencilAction(this.__state.stencilDepthFail),this.__getGLStencilAction(this.__state.stencilPass));
			this.__contextState.stencilTriangleFace = this.__state.stencilTriangleFace;
			this.__contextState.stencilPass = this.__state.stencilPass;
			this.__contextState.stencilDepthFail = this.__state.stencilDepthFail;
			this.__contextState.stencilFail = this.__state.stencilFail;
		}
		if(this.__contextState.stencilWriteMask != this.__state.stencilWriteMask) {
			this.gl.stencilMask(this.__state.stencilWriteMask);
			this.__contextState.stencilWriteMask = this.__state.stencilWriteMask;
		}
		if(this.__contextState.stencilCompareMode != this.__state.stencilCompareMode || this.__contextState.stencilReferenceValue != this.__state.stencilReferenceValue || this.__contextState.stencilReadMask != this.__state.stencilReadMask) {
			this.gl.stencilFunc(this.__getGLCompareMode(this.__state.stencilCompareMode),this.__state.stencilReferenceValue,this.__state.stencilReadMask);
			this.__contextState.stencilCompareMode = this.__state.stencilCompareMode;
			this.__contextState.stencilReferenceValue = this.__state.stencilReferenceValue;
			this.__contextState.stencilReadMask = this.__state.stencilReadMask;
		}
	}
	,__flushGLTextures: function() {
		var sampler = 0;
		var texture;
		var samplerState;
		var _g = 0;
		var _g1 = this.__state.textures.length;
		while(_g < _g1) {
			var i = _g++;
			texture = this.__state.textures[i];
			samplerState = this.__state.samplerStates[i];
			if(samplerState == null) {
				this.__state.samplerStates[i] = new openfl_display__$internal_SamplerState();
				samplerState = this.__state.samplerStates[i];
			}
			this.gl.activeTexture(this.gl.TEXTURE0 + sampler);
			if(texture != null) {
				if(texture.__textureTarget == this.gl.TEXTURE_2D) {
					this.__bindGLTexture2D(texture.__getTexture());
				} else {
					this.__bindGLTextureCubeMap(texture.__getTexture());
				}
				this.__contextState.textures[i] = texture;
				texture.__setSamplerState(samplerState);
			} else {
				this.__bindGLTexture2D(null);
			}
			if(this.__state.program != null && this.__state.program.__format == 0 && samplerState.textureAlpha) {
				this.gl.activeTexture(this.gl.TEXTURE0 + sampler + 4);
				if(texture != null && texture.__alphaTexture != null) {
					if(texture.__alphaTexture.__textureTarget == this.gl.TEXTURE_2D) {
						this.__bindGLTexture2D(texture.__alphaTexture.__getTexture());
					} else {
						this.__bindGLTextureCubeMap(texture.__alphaTexture.__getTexture());
					}
					texture.__alphaTexture.__setSamplerState(samplerState);
					this.gl.uniform1i(this.__state.program.__agalAlphaSamplerEnabled[sampler].location,1);
				} else {
					this.__bindGLTexture2D(null);
					if(this.__state.program.__agalAlphaSamplerEnabled[sampler] != null) {
						this.gl.uniform1i(this.__state.program.__agalAlphaSamplerEnabled[sampler].location,0);
					}
				}
			}
			++sampler;
		}
	}
	,__flushGLViewport: function() {
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this) {
				var scaledBackBufferWidth = this.backBufferWidth;
				var scaledBackBufferHeight = this.backBufferHeight;
				if(this.__stage3D == null && !this.__backBufferWantsBestResolution) {
					scaledBackBufferWidth = this.backBufferWidth * this.__stage.window.__scale | 0;
					scaledBackBufferHeight = this.backBufferHeight * this.__stage.window.__scale | 0;
				}
				var x = this.__stage3D == null ? 0 : this.__stage3D.get_x() | 0;
				var y = this.__stage.window.__height * this.__stage.window.__scale - scaledBackBufferHeight - (this.__stage3D == null ? 0 : this.__stage3D.get_y()) | 0;
				this.gl.viewport(x,y,scaledBackBufferWidth,scaledBackBufferHeight);
			} else {
				this.gl.viewport(0,0,this.backBufferWidth,this.backBufferHeight);
			}
		} else {
			var width = 0;
			var height = 0;
			if(((this.__state.renderToTexture) instanceof openfl_display3D_textures_Texture)) {
				var texture2D = this.__state.renderToTexture;
				width = texture2D.__width;
				height = texture2D.__height;
			} else if(((this.__state.renderToTexture) instanceof openfl_display3D_textures_RectangleTexture)) {
				var rectTexture = this.__state.renderToTexture;
				width = rectTexture.__width;
				height = rectTexture.__height;
			} else if(((this.__state.renderToTexture) instanceof openfl_display3D_textures_CubeTexture)) {
				var cubeTexture = this.__state.renderToTexture;
				width = cubeTexture.__size;
				height = cubeTexture.__size;
			}
			this.gl.viewport(0,0,width,height);
		}
	}
	,__getGLBlend: function(blendFactor) {
		switch(blendFactor) {
		case 0:
			return this.gl.DST_ALPHA;
		case 1:
			return this.gl.DST_COLOR;
		case 2:
			return this.gl.ONE;
		case 3:
			return this.gl.ONE_MINUS_DST_ALPHA;
		case 4:
			return this.gl.ONE_MINUS_DST_COLOR;
		case 5:
			return this.gl.ONE_MINUS_SRC_ALPHA;
		case 6:
			return this.gl.ONE_MINUS_SRC_COLOR;
		case 7:
			return this.gl.SRC_ALPHA;
		case 8:
			return this.gl.SRC_COLOR;
		case 9:
			return this.gl.ZERO;
		default:
			throw new openfl_errors_IllegalOperationError();
		}
	}
	,__getGLCompareMode: function(mode) {
		switch(mode) {
		case 0:
			return this.gl.ALWAYS;
		case 1:
			return this.gl.EQUAL;
		case 2:
			return this.gl.GREATER;
		case 3:
			return this.gl.GEQUAL;
		case 4:
			return this.gl.LESS;
		case 5:
			return this.gl.LEQUAL;
		case 6:
			return this.gl.NEVER;
		case 7:
			return this.gl.NOTEQUAL;
		default:
			return this.gl.EQUAL;
		}
	}
	,__getGLStencilAction: function(action) {
		switch(action) {
		case 0:
			return this.gl.DECR;
		case 1:
			return this.gl.DECR_WRAP;
		case 2:
			return this.gl.INCR;
		case 3:
			return this.gl.INCR_WRAP;
		case 4:
			return this.gl.INVERT;
		case 5:
			return this.gl.KEEP;
		case 6:
			return this.gl.REPLACE;
		case 7:
			return this.gl.ZERO;
		default:
			return this.gl.KEEP;
		}
	}
	,__getGLTriangleFace: function(face) {
		switch(face) {
		case 0:
			return this.gl.BACK;
		case 1:
			return this.gl.FRONT;
		case 2:
			return this.gl.FRONT_AND_BACK;
		case 3:
			return this.gl.NONE;
		default:
			return this.gl.FRONT_AND_BACK;
		}
	}
	,__renderStage3D: function(stage3D) {
		var context = stage3D.context3D;
		if(context != null && context != this && context.__frontBufferTexture != null && stage3D.visible && this.backBufferHeight > 0 && this.backBufferWidth > 0) {
			if(this.__renderStage3DProgram == null) {
				var vertexAssembler = new openfl_utils_AGALMiniAssembler();
				vertexAssembler.assemble(openfl_display3D_Context3DProgramType.toString(1),"m44 op, va0, vc0\n" + "mov v0, va1");
				var fragmentAssembler = new openfl_utils_AGALMiniAssembler();
				fragmentAssembler.assemble(openfl_display3D_Context3DProgramType.toString(0),"tex ft1, v0, fs0 <2d,nearest,nomip>\n" + "mov oc, ft1");
				this.__renderStage3DProgram = this.createProgram();
				this.__renderStage3DProgram.upload(vertexAssembler.agalcode,fragmentAssembler.agalcode);
			}
			this.setProgram(this.__renderStage3DProgram);
			this.setBlendFactors(2,9);
			this.setColorMask(true,true,true,true);
			this.setCulling(3);
			this.setDepthTest(false,0);
			this.setStencilActions();
			this.setStencilReferenceValue(0,0,0);
			this.setScissorRectangle(null);
			this.setTextureAt(0,context.__frontBufferTexture);
			this.setVertexBufferAt(0,stage3D.__vertexBuffer,0,3);
			this.setVertexBufferAt(1,stage3D.__vertexBuffer,3,2);
			this.setProgramConstantsFromMatrix(1,0,stage3D.__renderTransform,true);
			this.drawTriangles(stage3D.__indexBuffer);
			this.__present = true;
		}
	}
	,__setGLBlend: function(enable) {
		if(this.__contextState.__enableGLBlend != enable) {
			if(enable) {
				this.gl.enable(this.gl.BLEND);
			} else {
				this.gl.disable(this.gl.BLEND);
			}
			this.__contextState.__enableGLBlend = enable;
		}
	}
	,__setGLBlendEquation: function(value) {
		if(this.__contextState.__glBlendEquation != value) {
			this.gl.blendEquation(value);
			this.__contextState.__glBlendEquation = value;
		}
	}
	,__setGLCullFace: function(enable) {
		if(this.__contextState.__enableGLCullFace != enable) {
			if(enable) {
				this.gl.enable(this.gl.CULL_FACE);
			} else {
				this.gl.disable(this.gl.CULL_FACE);
			}
			this.__contextState.__enableGLCullFace = enable;
		}
	}
	,__setGLDepthTest: function(enable) {
		if(this.__contextState.__enableGLDepthTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.DEPTH_TEST);
			} else {
				this.gl.disable(this.gl.DEPTH_TEST);
			}
			this.__contextState.__enableGLDepthTest = enable;
		}
	}
	,__setGLFrontFace: function(counterClockWise) {
		if(this.__contextState.__frontFaceGLCCW != counterClockWise) {
			this.gl.frontFace(counterClockWise ? this.gl.CCW : this.gl.CW);
			this.__contextState.__frontFaceGLCCW = counterClockWise;
		}
	}
	,__setGLScissorTest: function(enable) {
		if(this.__contextState.__enableGLScissorTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.SCISSOR_TEST);
			} else {
				this.gl.disable(this.gl.SCISSOR_TEST);
			}
			this.__contextState.__enableGLScissorTest = enable;
		}
	}
	,__setGLStencilTest: function(enable) {
		if(this.__contextState.__enableGLStencilTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.STENCIL_TEST);
			} else {
				this.gl.disable(this.gl.STENCIL_TEST);
			}
			this.__contextState.__enableGLStencilTest = enable;
		}
	}
	,get_enableErrorChecking: function() {
		return this.__enableErrorChecking;
	}
	,set_enableErrorChecking: function(value) {
		return this.__enableErrorChecking = value;
	}
	,get_totalGPUMemory: function() {
		if(openfl_display3D_Context3D.__glMemoryCurrentAvailable != -1) {
			var current = this.gl.getParameter(openfl_display3D_Context3D.__glMemoryCurrentAvailable);
			var total = this.gl.getParameter(openfl_display3D_Context3D.__glMemoryTotalAvailable);
			if(total > 0) {
				return (total - current) * 1024;
			}
		}
		return 0;
	}
	,__class__: openfl_display3D_Context3D
	,__properties__: {get_totalGPUMemory:"get_totalGPUMemory",set_enableErrorChecking:"set_enableErrorChecking",get_enableErrorChecking:"get_enableErrorChecking"}
});
var openfl_display3D_Context3DBlendFactor = {};
openfl_display3D_Context3DBlendFactor.fromString = function(value) {
	switch(value) {
	case "destinationAlpha":
		return 0;
	case "destinationColor":
		return 1;
	case "one":
		return 2;
	case "oneMinusDestinationAlpha":
		return 3;
	case "oneMinusDestinationColor":
		return 4;
	case "oneMinusSourceAlpha":
		return 5;
	case "oneMinusSourceColor":
		return 6;
	case "sourceAlpha":
		return 7;
	case "sourceColor":
		return 8;
	case "zero":
		return 9;
	default:
		return null;
	}
};
openfl_display3D_Context3DBlendFactor.toString = function(this1) {
	switch(this1) {
	case 0:
		return "destinationAlpha";
	case 1:
		return "destinationColor";
	case 2:
		return "one";
	case 3:
		return "oneMinusDestinationAlpha";
	case 4:
		return "oneMinusDestinationColor";
	case 5:
		return "oneMinusSourceAlpha";
	case 6:
		return "oneMinusSourceColor";
	case 7:
		return "sourceAlpha";
	case 8:
		return "sourceColor";
	case 9:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D_Context3DBufferUsage = {};
openfl_display3D_Context3DBufferUsage.fromString = function(value) {
	switch(value) {
	case "dynamicDraw":
		return 0;
	case "staticDraw":
		return 1;
	default:
		return null;
	}
};
openfl_display3D_Context3DBufferUsage.toString = function(this1) {
	switch(this1) {
	case 0:
		return "dynamicDraw";
	case 1:
		return "staticDraw";
	default:
		return null;
	}
};
var openfl_display3D_Context3DCompareMode = {};
openfl_display3D_Context3DCompareMode.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "equal":
		return 1;
	case "greater":
		return 2;
	case "greaterEqual":
		return 3;
	case "less":
		return 4;
	case "lessEqual":
		return 5;
	case "never":
		return 6;
	case "notEqual":
		return 7;
	default:
		return null;
	}
};
openfl_display3D_Context3DCompareMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "always";
	case 1:
		return "equal";
	case 2:
		return "greater";
	case 3:
		return "greaterEqual";
	case 4:
		return "less";
	case 5:
		return "lessEqual";
	case 6:
		return "never";
	case 7:
		return "notEqual";
	default:
		return null;
	}
};
var openfl_display3D_Context3DMipFilter = {};
openfl_display3D_Context3DMipFilter.fromString = function(value) {
	switch(value) {
	case "miplinear":
		return 0;
	case "mipnearest":
		return 1;
	case "mipnone":
		return 2;
	default:
		return null;
	}
};
openfl_display3D_Context3DMipFilter.toString = function(this1) {
	switch(this1) {
	case 0:
		return "miplinear";
	case 1:
		return "mipnearest";
	case 2:
		return "mipnone";
	default:
		return null;
	}
};
var openfl_display3D_Context3DProfile = {};
openfl_display3D_Context3DProfile.fromString = function(value) {
	switch(value) {
	case "baseline":
		return 0;
	case "baselineConstrained":
		return 1;
	case "baselineExtended":
		return 2;
	case "standard":
		return 3;
	case "standardConstrained":
		return 4;
	case "standardExtended":
		return 5;
	default:
		return null;
	}
};
openfl_display3D_Context3DProfile.toString = function(this1) {
	switch(this1) {
	case 0:
		return "baseline";
	case 1:
		return "baselineConstrained";
	case 2:
		return "baselineExtended";
	case 3:
		return "standard";
	case 4:
		return "standardConstrained";
	case 5:
		return "standardExtended";
	default:
		return null;
	}
};
var openfl_display3D_Context3DProgramFormat = {};
openfl_display3D_Context3DProgramFormat.fromString = function(value) {
	switch(value) {
	case "agal":
		return 0;
	case "glsl":
		return 1;
	default:
		return null;
	}
};
openfl_display3D_Context3DProgramFormat.toString = function(this1) {
	switch(this1) {
	case 0:
		return "agal";
	case 1:
		return "glsl";
	default:
		return null;
	}
};
var openfl_display3D_Context3DProgramType = {};
openfl_display3D_Context3DProgramType.fromString = function(value) {
	switch(value) {
	case "fragment":
		return 0;
	case "vertex":
		return 1;
	default:
		return null;
	}
};
openfl_display3D_Context3DProgramType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "fragment";
	case 1:
		return "vertex";
	default:
		return null;
	}
};
var openfl_display3D_Context3DRenderMode = {};
openfl_display3D_Context3DRenderMode.fromString = function(value) {
	switch(value) {
	case "auto":
		return 0;
	case "software":
		return 1;
	default:
		return null;
	}
};
openfl_display3D_Context3DRenderMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "auto";
	case 1:
		return "software";
	default:
		return null;
	}
};
var openfl_display3D_Context3DStencilAction = {};
openfl_display3D_Context3DStencilAction.fromString = function(value) {
	switch(value) {
	case "decrementSaturate":
		return 0;
	case "decrementWrap":
		return 1;
	case "incrementSaturate":
		return 2;
	case "incrementWrap":
		return 3;
	case "invert":
		return 4;
	case "keep":
		return 5;
	case "set":
		return 6;
	case "zero":
		return 7;
	default:
		return null;
	}
};
openfl_display3D_Context3DStencilAction.toString = function(this1) {
	switch(this1) {
	case 0:
		return "decrementSaturate";
	case 1:
		return "decrementWrap";
	case 2:
		return "incrementSaturate";
	case 3:
		return "incrementWrap";
	case 4:
		return "invert";
	case 5:
		return "keep";
	case 6:
		return "set";
	case 7:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D_Context3DTextureFilter = {};
openfl_display3D_Context3DTextureFilter.fromString = function(value) {
	switch(value) {
	case "anisotropic16x":
		return 0;
	case "anisotropic2x":
		return 1;
	case "anisotropic4x":
		return 2;
	case "anisotropic8x":
		return 3;
	case "linear":
		return 4;
	case "nearest":
		return 5;
	default:
		return null;
	}
};
openfl_display3D_Context3DTextureFilter.toString = function(this1) {
	switch(this1) {
	case 0:
		return "anisotropic16x";
	case 1:
		return "anisotropic2x";
	case 2:
		return "anisotropic4x";
	case 3:
		return "anisotropic8x";
	case 4:
		return "linear";
	case 5:
		return "nearest";
	default:
		return null;
	}
};
var openfl_display3D_Context3DTextureFormat = {};
openfl_display3D_Context3DTextureFormat.fromString = function(value) {
	switch(value) {
	case "bgrPacked565":
		return 0;
	case "bgra":
		return 1;
	case "bgraPacked4444":
		return 2;
	case "compressed":
		return 3;
	case "compressedAlpha":
		return 4;
	case "rgbaHalfFloat":
		return 5;
	default:
		return null;
	}
};
openfl_display3D_Context3DTextureFormat.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D_Context3DTriangleFace = {};
openfl_display3D_Context3DTriangleFace.fromString = function(value) {
	switch(value) {
	case "back":
		return 0;
	case "front":
		return 1;
	case "frontAndBack":
		return 2;
	case "none":
		return 3;
	default:
		return null;
	}
};
openfl_display3D_Context3DTriangleFace.toString = function(this1) {
	switch(this1) {
	case 0:
		return "back";
	case 1:
		return "front";
	case 2:
		return "frontAndBack";
	case 3:
		return "none";
	default:
		return null;
	}
};
var openfl_display3D_Context3DVertexBufferFormat = {};
openfl_display3D_Context3DVertexBufferFormat.fromString = function(value) {
	switch(value) {
	case "bytes4":
		return 0;
	case "float1":
		return 1;
	case "float2":
		return 2;
	case "float3":
		return 3;
	case "float4":
		return 4;
	default:
		return null;
	}
};
openfl_display3D_Context3DVertexBufferFormat.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bytes4";
	case 1:
		return "float1";
	case 2:
		return "float2";
	case 3:
		return "float3";
	case 4:
		return "float4";
	default:
		return null;
	}
};
var openfl_display3D_Context3DWrapMode = {};
openfl_display3D_Context3DWrapMode.fromString = function(value) {
	switch(value) {
	case "clamp":
		return 0;
	case "clamp_u_repeat_v":
		return 1;
	case "repeat":
		return 2;
	case "repeat_u_clamp_v":
		return 3;
	default:
		return null;
	}
};
openfl_display3D_Context3DWrapMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "clamp";
	case 1:
		return "clamp_u_repeat_v";
	case 2:
		return "repeat";
	case 3:
		return "repeat_u_clamp_v";
	default:
		return null;
	}
};
var openfl_display3D_IndexBuffer3D = function(context3D,numIndices,bufferUsage) {
	this.__context = context3D;
	this.__numIndices = numIndices;
	var gl = this.__context.gl;
	this.__id = gl.createBuffer();
	this.__usage = bufferUsage == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = "openfl.display3D.IndexBuffer3D";
openfl_display3D_IndexBuffer3D.prototype = {
	__context: null
	,__id: null
	,__memoryUsage: null
	,__numIndices: null
	,__tempUInt16Array: null
	,__usage: null
	,dispose: function() {
		var gl = this.__context.gl;
		gl.deleteBuffer(this.__id);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startOffset,count) {
		var offset = byteArrayOffset + startOffset * 2;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(data);
		var byteoffset = offset;
		if(byteoffset == null) {
			byteoffset = 0;
		}
		var this1;
		if(elements != null) {
			this1 = new Uint16Array(elements);
		} else if(array != null) {
			this1 = new Uint16Array(array);
		} else if(vector != null) {
			this1 = new Uint16Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint16Array(view);
		} else if(buffer != null) {
			if(count == null) {
				this1 = new Uint16Array(buffer,byteoffset);
			} else {
				this1 = new Uint16Array(buffer,byteoffset,count);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1);
	}
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		this.__context.__bindGLElementArrayBuffer(this.__id);
		lime_graphics_WebGLRenderContext.bufferData(gl,gl.ELEMENT_ARRAY_BUFFER,data,this.__usage);
	}
	,uploadFromVector: function(data,startOffset,count) {
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var length = startOffset + count;
		var existingUInt16Array = this.__tempUInt16Array;
		if(this.__tempUInt16Array == null || this.__tempUInt16Array.length < count) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(count != null) {
				this1 = new Uint16Array(count);
			} else if(array != null) {
				this1 = new Uint16Array(array);
			} else if(vector != null) {
				this1 = new Uint16Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint16Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint16Array(buffer,0);
				} else {
					this1 = new Uint16Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.__tempUInt16Array = this1;
			if(existingUInt16Array != null) {
				this.__tempUInt16Array.set(existingUInt16Array);
			}
		}
		var _g = startOffset;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			this.__tempUInt16Array[i - startOffset] = data.get(i);
		}
		this.uploadFromTypedArray(this.__tempUInt16Array);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context3D,format) {
	this.__context = context3D;
	this.__format = format;
	if(this.__format == 0) {
		this.__agalSamplerUsageMask = 0;
		this.__agalUniforms = new haxe_ds_List();
		this.__agalSamplerUniforms = new haxe_ds_List();
		this.__agalAlphaSamplerUniforms = new haxe_ds_List();
		this.__agalAlphaSamplerEnabled = [];
	} else {
		this.__glslAttribNames = [];
		this.__glslAttribTypes = [];
		this.__glslSamplerNames = [];
		this.__glslUniformLocations = [];
		this.__glslUniformNames = [];
		this.__glslUniformTypes = [];
	}
	this.__samplerStates = [];
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = "openfl.display3D.Program3D";
openfl_display3D_Program3D.prototype = {
	__agalAlphaSamplerEnabled: null
	,__agalAlphaSamplerUniforms: null
	,__agalFragmentUniformMap: null
	,__agalPositionScale: null
	,__agalSamplerUniforms: null
	,__agalSamplerUsageMask: null
	,__agalUniforms: null
	,__agalVertexUniformMap: null
	,__context: null
	,__format: null
	,__glFragmentShader: null
	,__glFragmentSource: null
	,__glProgram: null
	,__glslAttribNames: null
	,__glslAttribTypes: null
	,__glslSamplerNames: null
	,__glslUniformLocations: null
	,__glslUniformNames: null
	,__glslUniformTypes: null
	,__glVertexShader: null
	,__glVertexSource: null
	,__samplerStates: null
	,dispose: function() {
		this.__deleteShaders();
	}
	,getAttributeIndex: function(name) {
		if(this.__format == 0) {
			if(StringTools.startsWith(name,"va")) {
				return Std.parseInt(name.substring(2));
			} else {
				return -1;
			}
		} else {
			var _g = 0;
			var _g1 = this.__glslAttribNames.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.__glslAttribNames[i] == name) {
					return i;
				}
			}
			return -1;
		}
	}
	,getConstantIndex: function(name) {
		if(this.__format == 0) {
			if(StringTools.startsWith(name,"vc")) {
				return Std.parseInt(name.substring(2));
			} else if(StringTools.startsWith(name,"fc")) {
				return Std.parseInt(name.substring(2));
			} else {
				return -1;
			}
		} else {
			var _g = 0;
			var _g1 = this.__glslUniformNames.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.__glslUniformNames[i] == name) {
					return this.__glslUniformLocations[i];
				}
			}
			return -1;
		}
	}
	,upload: function(vertexProgram,fragmentProgram) {
		if(this.__format != 0) {
			return;
		}
		var samplerStates = [];
		var glslVertex = openfl_display3D__$internal_AGALConverter.convertToGLSL(vertexProgram,null);
		var glslFragment = openfl_display3D__$internal_AGALConverter.convertToGLSL(fragmentProgram,samplerStates);
		if(lime_utils_Log.level == 5) {
			lime_utils_Log.info(glslVertex,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 399, className : "openfl.display3D.Program3D", methodName : "upload"});
			lime_utils_Log.info(glslFragment,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 400, className : "openfl.display3D.Program3D", methodName : "upload"});
		}
		this.__deleteShaders();
		this.__uploadFromGLSL(glslVertex,glslFragment);
		this.__buildAGALUniformList();
		var _g = 0;
		var _g1 = samplerStates.length;
		while(_g < _g1) {
			var i = _g++;
			this.__samplerStates[i] = samplerStates[i];
		}
	}
	,uploadSources: function(vertexSource,fragmentSource) {
		if(this.__format != 1) {
			return;
		}
		var prefix = "#ifdef GL_ES\r\n\t\t\t#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\t\t\tprecision highp float;\r\n\t\t\t#else\r\n\t\t\tprecision mediump float;\r\n\t\t\t#endif\r\n\t\t\t#endif\r\n\t\t\t";
		var vertex = prefix + vertexSource;
		var fragment = prefix + fragmentSource;
		if(vertex == this.__glVertexSource && fragment == this.__glFragmentSource) {
			return;
		}
		this.__processGLSLData(vertexSource,"attribute");
		this.__processGLSLData(vertexSource,"uniform");
		this.__processGLSLData(fragmentSource,"uniform");
		this.__deleteShaders();
		this.__uploadFromGLSL(vertex,fragment);
		var samplerNames = this.__glslSamplerNames;
		var attribNames = this.__glslAttribNames;
		var attribTypes = this.__glslAttribTypes;
		var uniformNames = this.__glslUniformNames;
		this.__glslSamplerNames = [];
		this.__glslAttribNames = [];
		this.__glslAttribTypes = [];
		this.__glslUniformLocations = [];
		var gl = this.__context.gl;
		var index;
		var location;
		var _g = 0;
		while(_g < samplerNames.length) {
			var name = samplerNames[_g];
			++_g;
			index = gl.getUniformLocation(this.__glProgram,name);
			this.__glslSamplerNames[index] = name;
		}
		var _g = 0;
		var _g1 = attribNames.length;
		while(_g < _g1) {
			var i = _g++;
			index = gl.getAttribLocation(this.__glProgram,attribNames[i]);
			this.__glslAttribNames[index] = attribNames[i];
			this.__glslAttribTypes[index] = attribTypes[i];
		}
		var _g = 0;
		var _g1 = uniformNames.length;
		while(_g < _g1) {
			var i = _g++;
			location = gl.getUniformLocation(this.__glProgram,uniformNames[i]);
			this.__glslUniformLocations[i] = location;
		}
	}
	,__buildAGALUniformList: function() {
		if(this.__format == 1) {
			return;
		}
		var gl = this.__context.gl;
		this.__agalUniforms.clear();
		this.__agalSamplerUniforms.clear();
		this.__agalAlphaSamplerUniforms.clear();
		this.__agalAlphaSamplerEnabled = [];
		this.__agalSamplerUsageMask = 0;
		var numActive = 0;
		numActive = gl.getProgramParameter(this.__glProgram,gl.ACTIVE_UNIFORMS);
		var vertexUniforms = new haxe_ds_List();
		var fragmentUniforms = new haxe_ds_List();
		var _g = 0;
		var _g1 = numActive;
		while(_g < _g1) {
			var i = _g++;
			var info = gl.getActiveUniform(this.__glProgram,i);
			var name = info.name;
			var size = info.size;
			var uniformType = info.type;
			var uniform = new openfl_display3D_Uniform(this.__context);
			uniform.name = name;
			uniform.size = size;
			uniform.type = uniformType;
			uniform.location = gl.getUniformLocation(this.__glProgram,uniform.name);
			var indexBracket = uniform.name.indexOf("[");
			if(indexBracket >= 0) {
				uniform.name = uniform.name.substring(0,indexBracket);
			}
			switch(uniform.type) {
			case 35674:
				uniform.regCount = 2;
				break;
			case 35675:
				uniform.regCount = 3;
				break;
			case 35676:
				uniform.regCount = 4;
				break;
			default:
				uniform.regCount = 1;
			}
			uniform.regCount *= uniform.size;
			this.__agalUniforms.add(uniform);
			if(uniform.name == "vcPositionScale") {
				this.__agalPositionScale = uniform;
			} else if(StringTools.startsWith(uniform.name,"vc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__vertexConstants;
				vertexUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"fc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__fragmentConstants;
				fragmentUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && uniform.name.indexOf("alpha") == -1) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__agalSamplerUniforms.add(uniform);
				var _g2 = 0;
				var _g3 = uniform.regCount;
				while(_g2 < _g3) {
					var reg = _g2++;
					this.__agalSamplerUsageMask |= 1 << uniform.regIndex + reg;
				}
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alpha")) {
				var len = uniform.name.indexOf("_") - 7;
				uniform.regIndex = Std.parseInt(uniform.name.substring(7,7 + len)) + 4;
				this.__agalAlphaSamplerUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alphaEnabled")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__agalAlphaSamplerEnabled[uniform.regIndex] = uniform;
			}
			if(lime_utils_Log.level == 5) {
				lime_utils_Log.verbose("" + i + " name:" + uniform.name + " type:" + uniform.type + " size:" + uniform.size + " location:" + Std.string(uniform.location),{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 577, className : "openfl.display3D.Program3D", methodName : "__buildAGALUniformList"});
			}
		}
		this.__agalVertexUniformMap = new openfl_display3D_UniformMap(Lambda.array(vertexUniforms));
		this.__agalFragmentUniformMap = new openfl_display3D_UniformMap(Lambda.array(fragmentUniforms));
	}
	,__deleteShaders: function() {
		var gl = this.__context.gl;
		if(this.__glProgram != null) {
			this.__glProgram = null;
		}
		if(this.__glVertexShader != null) {
			gl.deleteShader(this.__glVertexShader);
			this.__glVertexShader = null;
		}
		if(this.__glFragmentShader != null) {
			gl.deleteShader(this.__glFragmentShader);
			this.__glFragmentShader = null;
		}
	}
	,__disable: function() {
		var tmp = this.__format == 1;
	}
	,__enable: function() {
		var gl = this.__context.gl;
		gl.useProgram(this.__glProgram);
		if(this.__format == 0) {
			this.__agalVertexUniformMap.markAllDirty();
			this.__agalFragmentUniformMap.markAllDirty();
			var _g_head = this.__agalSamplerUniforms.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var sampler = val;
				if(sampler.regCount == 1) {
					gl.uniform1i(sampler.location,sampler.regIndex);
				} else {
					throw new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl");
				}
			}
			var _g_head = this.__agalAlphaSamplerUniforms.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var sampler = val;
				if(sampler.regCount == 1) {
					gl.uniform1i(sampler.location,sampler.regIndex);
				} else {
					throw new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl");
				}
			}
		}
	}
	,__flush: function() {
		if(this.__format == 0) {
			this.__agalVertexUniformMap.flush();
			this.__agalFragmentUniformMap.flush();
		} else {
			return;
		}
	}
	,__getSamplerState: function(sampler) {
		return this.__samplerStates[sampler];
	}
	,__markDirty: function(isVertex,index,count) {
		if(this.__format == 1) {
			return;
		}
		if(isVertex) {
			this.__agalVertexUniformMap.markDirty(index,count);
		} else {
			this.__agalFragmentUniformMap.markDirty(index,count);
		}
	}
	,__processGLSLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(name,"gl_")) {
				continue;
			}
			if(StringTools.startsWith(type,"sampler")) {
				this.__glslSamplerNames.push(name);
			} else {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				default:
					parameterType = null;
				}
				if(storageType == "uniform") {
					this.__glslUniformNames.push(name);
					this.__glslUniformTypes.push(parameterType);
				} else {
					this.__glslAttribNames.push(name);
					this.__glslAttribTypes.push(parameterType);
				}
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__setPositionScale: function(positionScale) {
		if(this.__format == 1) {
			return;
		}
		if(this.__agalPositionScale != null) {
			var gl = this.__context.gl;
			var location = this.__agalPositionScale.location;
			var data = positionScale;
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform4fv(location,data,srcOffset,null);
			} else {
				gl.uniform4fv(location,data);
			}
		}
	}
	,__setSamplerState: function(sampler,state) {
		this.__samplerStates[sampler] = state;
	}
	,__uploadFromGLSL: function(vertexShaderSource,fragmentShaderSource) {
		var gl = this.__context.gl;
		this.__glVertexSource = vertexShaderSource;
		this.__glFragmentSource = fragmentShaderSource;
		this.__glVertexShader = gl.createShader(gl.VERTEX_SHADER);
		gl.shaderSource(this.__glVertexShader,vertexShaderSource);
		gl.compileShader(this.__glVertexShader);
		if(gl.getShaderParameter(this.__glVertexShader,gl.COMPILE_STATUS) == 0) {
			var message = "Error compiling vertex shader";
			message += "\n" + gl.getShaderInfoLog(this.__glVertexShader);
			message += "\n" + vertexShaderSource;
			lime_utils_Log.error(message,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 869, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__glFragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
		gl.shaderSource(this.__glFragmentShader,fragmentShaderSource);
		gl.compileShader(this.__glFragmentShader);
		if(gl.getShaderParameter(this.__glFragmentShader,gl.COMPILE_STATUS) == 0) {
			var message = "Error compiling fragment shader";
			message += "\n" + gl.getShaderInfoLog(this.__glFragmentShader);
			message += "\n" + fragmentShaderSource;
			lime_utils_Log.error(message,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 881, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__glProgram = gl.createProgram();
		if(this.__format == 0) {
			var _g = 0;
			while(_g < 16) {
				var i = _g++;
				var name = "va" + i;
				if(vertexShaderSource.indexOf(" " + name) != -1) {
					gl.bindAttribLocation(this.__glProgram,i,name);
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.__glslAttribNames;
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				if(name.indexOf("Position") > -1 && StringTools.startsWith(name,"openfl_")) {
					gl.bindAttribLocation(this.__glProgram,0,name);
					break;
				}
			}
		}
		gl.attachShader(this.__glProgram,this.__glVertexShader);
		gl.attachShader(this.__glProgram,this.__glFragmentShader);
		gl.linkProgram(this.__glProgram);
		if(gl.getProgramParameter(this.__glProgram,gl.LINK_STATUS) == 0) {
			var message = "Unable to initialize the shader program";
			message += "\n" + gl.getProgramInfoLog(this.__glProgram);
			lime_utils_Log.error(message,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 922, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_Uniform = function(context) {
	this.context = context;
	this.isDirty = true;
	this.regDataPointer = new lime_utils_BytePointerData(null,0);
};
$hxClasses["openfl.display3D.Uniform"] = openfl_display3D_Uniform;
openfl_display3D_Uniform.__name__ = "openfl.display3D.Uniform";
openfl_display3D_Uniform.prototype = {
	name: null
	,location: null
	,type: null
	,size: null
	,regData: null
	,regIndex: null
	,regCount: null
	,isDirty: null
	,context: null
	,regDataPointer: null
	,flush: function() {
		var gl = this.context.gl;
		var index = this.regIndex * 4;
		switch(this.type) {
		case 35664:
			lime_graphics_WebGL2RenderContext.uniform2fv(gl,this.location,this.regData.subarray(index,index + this.regCount * 2));
			break;
		case 35665:
			var location = this.location;
			var data = this.regData.subarray(index,index + this.regCount * 3);
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform3fv(location,data,srcOffset,null);
			} else {
				gl.uniform3fv(location,data);
			}
			break;
		case 35666:
			var location = this.location;
			var data = this.regData.subarray(index,index + this.regCount * 4);
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform4fv(location,data,srcOffset,null);
			} else {
				gl.uniform4fv(location,data);
			}
			break;
		case 35674:
			lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.location,false,this.regData.subarray(index,index + this.size * 2 * 2));
			break;
		case 35675:
			lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.location,false,this.regData.subarray(index,index + this.size * 3 * 3));
			break;
		case 35676:
			lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.location,false,this.regData.subarray(index,index + this.size * 4 * 4));
			break;
		default:
			var location = this.location;
			var data = this.regData.subarray(index,index + this.regCount * 4);
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform4fv(location,data,srcOffset,null);
			} else {
				gl.uniform4fv(location,data);
			}
		}
	}
	,__getUniformRegisters: function(index,size) {
		return this.regData.subarray(index,index + size);
	}
	,__class__: openfl_display3D_Uniform
};
var openfl_display3D_UniformMap = function(list) {
	this.__uniforms = list;
	this.__uniforms.sort(function(a,b) {
		return Reflect.compare(a.regIndex,b.regIndex);
	});
	var total = 0;
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		if(uniform.regIndex + uniform.regCount > total) {
			total = uniform.regIndex + uniform.regCount;
		}
	}
	this.__registerLookup = openfl_Vector.toObjectVector(null,total);
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = uniform.regCount;
		while(_g2 < _g3) {
			var i = _g2++;
			this.__registerLookup.set(uniform.regIndex + i,uniform);
		}
	}
	this.__anyDirty = this.__allDirty = true;
};
$hxClasses["openfl.display3D.UniformMap"] = openfl_display3D_UniformMap;
openfl_display3D_UniformMap.__name__ = "openfl.display3D.UniformMap";
openfl_display3D_UniformMap.prototype = {
	__allDirty: null
	,__anyDirty: null
	,__registerLookup: null
	,__uniforms: null
	,flush: function() {
		if(this.__anyDirty) {
			var _g = 0;
			var _g1 = this.__uniforms;
			while(_g < _g1.length) {
				var uniform = _g1[_g];
				++_g;
				if(this.__allDirty || uniform.isDirty) {
					uniform.flush();
					uniform.isDirty = false;
				}
			}
			this.__anyDirty = this.__allDirty = false;
		}
	}
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,markDirty: function(start,count) {
		if(this.__allDirty) {
			return;
		}
		var end = start + count;
		if(end > this.__registerLookup.get_length()) {
			end = this.__registerLookup.get_length();
		}
		var index = start;
		while(index < end) {
			var uniform = this.__registerLookup.get(index);
			if(uniform != null) {
				uniform.isDirty = true;
				this.__anyDirty = true;
				index = uniform.regIndex + uniform.regCount;
			} else {
				++index;
			}
		}
	}
	,__class__: openfl_display3D_UniformMap
};
var openfl_display3D_VertexBuffer3D = function(context3D,numVertices,dataPerVertex,bufferUsage) {
	this.__context = context3D;
	this.__numVertices = numVertices;
	this.__vertexSize = dataPerVertex;
	var gl = this.__context.gl;
	this.__id = gl.createBuffer();
	this.__stride = this.__vertexSize * 4;
	this.__usage = openfl_display3D_Context3DBufferUsage.fromString(bufferUsage) == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = "openfl.display3D.VertexBuffer3D";
openfl_display3D_VertexBuffer3D.prototype = {
	__context: null
	,__data: null
	,__id: null
	,__memoryUsage: null
	,__numVertices: null
	,__stride: null
	,__tempFloat32Array: null
	,__usage: null
	,__vertexSize: null
	,dispose: function() {
		var gl = this.__context.gl;
		gl.deleteBuffer(this.__id);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startVertex,numVertices) {
		var offset = byteArrayOffset + startVertex * this.__stride;
		var length = numVertices * this.__vertexSize;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(data);
		var byteoffset = offset;
		if(byteoffset == null) {
			byteoffset = 0;
		}
		var this1;
		if(elements != null) {
			this1 = new Float32Array(elements);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(vector != null) {
			this1 = new Float32Array(vector.__array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer != null) {
			if(length == null) {
				this1 = new Float32Array(buffer,byteoffset);
			} else {
				this1 = new Float32Array(buffer,byteoffset,length);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this1));
	}
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		this.__context.__bindGLArrayBuffer(this.__id);
		lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,data,this.__usage);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var start = startVertex * this.__vertexSize;
		var count = numVertices * this.__vertexSize;
		var length = start + count;
		var existingFloat32Array = this.__tempFloat32Array;
		if(this.__tempFloat32Array == null || this.__tempFloat32Array.length < count) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(count != null) {
				this1 = new Float32Array(count);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(vector != null) {
				this1 = new Float32Array(vector.__array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.__tempFloat32Array = this1;
			if(existingFloat32Array != null) {
				this.__tempFloat32Array.set(existingFloat32Array);
			}
		}
		var _g = start;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			this.__tempFloat32Array[i - start] = data.get(i);
		}
		this.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__tempFloat32Array));
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D__$internal_AGALConverter = function() { };
$hxClasses["openfl.display3D._internal.AGALConverter"] = openfl_display3D__$internal_AGALConverter;
openfl_display3D__$internal_AGALConverter.__name__ = "openfl.display3D._internal.AGALConverter";
openfl_display3D__$internal_AGALConverter.prefixFromType = function(regType,programType) {
	switch(regType) {
	case 0:
		return "va";
	case 1:
		if(programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX) {
			return "vc";
		} else {
			return "fc";
		}
		break;
	case 2:
		if(programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX) {
			return "vt";
		} else {
			return "ft";
		}
		break;
	case 3:
		return "output_";
	case 4:
		return "v";
	case 5:
		return "sampler";
	default:
		throw new openfl_errors_IllegalOperationError("Invalid data!");
	}
};
openfl_display3D__$internal_AGALConverter.readUInt64 = function(byteArray) {
	var low = byteArray.readInt();
	var high = byteArray.readInt();
	return new haxe__$Int64__$_$_$Int64(high,low);
};
openfl_display3D__$internal_AGALConverter.convertToGLSL = function(agal,samplerState) {
	agal.position = 0;
	agal.__endian = 1;
	var magic = agal.readByte() & 255;
	if(magic == 176) {
		return agal.readUTF();
	}
	if(magic != 160) {
		throw new openfl_errors_IllegalOperationError("Magic value must be 0xA0, may not be AGAL");
	}
	var version = agal.readInt();
	if(version != 1) {
		throw new openfl_errors_IllegalOperationError("Version must be 1");
	}
	var shaderTypeID = agal.readByte() & 255;
	if(shaderTypeID != 161) {
		throw new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1");
	}
	var programType = (agal.readByte() & 255) == 0 ? openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX : openfl_display3D__$internal__$AGALConverter_ProgramType.FRAGMENT;
	var map = new openfl_display3D__$internal_RegisterMap();
	var sb_b = "";
	while(true) {
		var a = agal.position;
		if(!UInt.gt(openfl_utils_ByteArray.get_length(agal),a)) {
			break;
		}
		var opcode = agal.readInt();
		var dest = agal.readUnsignedInt();
		var source1 = openfl_display3D__$internal_AGALConverter.readUInt64(agal);
		var source2 = openfl_display3D__$internal_AGALConverter.readUInt64(agal);
		var dr = openfl_display3D__$internal__$AGALConverter_DestRegister.parse(dest,programType);
		var sr1 = openfl_display3D__$internal__$AGALConverter_SourceRegister.parse(source1,programType,dr.mask);
		var sr2 = openfl_display3D__$internal__$AGALConverter_SourceRegister.parse(source2,programType,dr.mask);
		sb_b += "\t";
		switch(opcode) {
		case 0:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 1:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " + " + sr2.toGLSL() + "; // add");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 2:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " - " + sr2.toGLSL() + "; // sub");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 3:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL() + "; // mul");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 4:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " / " + sr2.toGLSL() + "; // div");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 5:
			var sr = sr1.toGLSL();
			if(sr.indexOf(".") > -1) {
				sb_b += Std.string(dr.toGLSL() + " = 1.0 / " + sr1.toGLSL() + "; // rcp");
			} else {
				sb_b += Std.string(dr.toGLSL() + " = vec4(1) / " + sr1.toGLSL() + "; // rcp");
			}
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 6:
			sb_b += Std.string(dr.toGLSL() + " = min(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // min");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 7:
			sb_b += Std.string(dr.toGLSL() + " = max(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // max");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 8:
			sb_b += Std.string(dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 9:
			sb_b += Std.string(dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 10:
			sb_b += Std.string(dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 11:
			sb_b += Std.string(dr.toGLSL() + " = pow(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // pow");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 12:
			sb_b += Std.string(dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 13:
			sb_b += Std.string(dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 14:
			sb_b += Std.string(dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 15:
			sb_b += Std.string(dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 16:
			sb_b += Std.string(dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 17:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = cross(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")); // crs");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 18:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp3");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 19:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec4(" + sr1.toGLSL() + "), vec4(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp4");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 20:
			sb_b += Std.string(dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 21:
			sb_b += Std.string(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 22:
			sb_b += Std.string(dr.toGLSL() + " = clamp(" + sr1.toGLSL() + ", 0.0, 1.0); // saturate");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 23:
			var existingUsage = map.getRegisterUsage(sr2);
			if(existingUsage != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * mat3(" + sr2.toGLSL(false) + "); // m33");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m33");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 24:
			var existingUsage1 = map.getRegisterUsage(sr2);
			if(existingUsage1 != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage1 != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m44");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec4(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,3) + ")); // m44");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,2);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,3);
			}
			break;
		case 25:
			dr.mask &= 7;
			var existingUsage2 = map.getRegisterUsage(sr2);
			if(existingUsage2 != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage2 != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m34");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m34");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 39:
			sr1.sourceMask = 15;
			sb_b += Std.string("if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;");
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 40:
			var sampler = openfl_display3D__$internal__$AGALConverter_SamplerRegister.parse(source2,programType);
			switch(sampler.d) {
			case 0:
				if(sampler.t == 2) {
					sr1.sourceMask = 3;
					map.addSaR(sampler,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA);
					sb_b += Std.string("if (" + sampler.toGLSL() + "_alphaEnabled) {\n");
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = vec4(texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + ").xyz, texture2D(" + sampler.toGLSL() + "_alpha, " + sr1.toGLSL() + ").x); // tex + alpha\n");
					sb_b += "\t} else {\n";
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex\n");
					sb_b += "\t}";
				} else {
					sr1.sourceMask = 3;
					map.addSaR(sampler,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_2D);
					sb_b += Std.string(dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				}
				break;
			case 1:
				if(sampler.t == 2) {
					sr1.sourceMask = 7;
					map.addSaR(sampler,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA);
					sb_b += Std.string("if (" + sampler.toGLSL() + "_alphaEnabled) {\n");
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = vec4(textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + ").xyz, textureCube(" + sampler.toGLSL() + "_alpha, " + sr1.toGLSL() + ").x); // tex + alpha\n");
					sb_b += "\t} else {\n";
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
					sb_b += "\t}";
				} else {
					sr1.sourceMask = 7;
					sb_b += Std.string(dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
					map.addSaR(sampler,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_CUBE);
				}
				break;
			}
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			if(samplerState != null) {
				samplerState[sampler.n] = sampler.toSamplerState();
			}
			break;
		case 41:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(greaterThanEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // ste");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 42:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(lessThan(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // slt");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 44:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(equal(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // seq");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 45:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(notEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // sne");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		default:
			throw new openfl_errors_IllegalOperationError("Opcode " + opcode);
		}
		sb_b += "\n";
	}
	if(openfl_display3D__$internal_AGALConverter.limitedProfile == null) {
		var version = lime_graphics_opengl_GL.context.getParameter(7938);
		openfl_display3D__$internal_AGALConverter.limitedProfile = version.indexOf("OpenGL ES") > -1 || version.indexOf("WebGL") > -1;
	}
	var glsl_b = "";
	glsl_b += Std.string("// AGAL " + (programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX ? "vertex" : "fragment") + " shader\n");
	if(openfl_display3D__$internal_AGALConverter.limitedProfile) {
		glsl_b += "#version 100\n";
		glsl_b += "#ifdef GL_FRAGMENT_PRECISION_HIGH\n";
		glsl_b += "precision highp float;\n";
		glsl_b += "#else\n";
		glsl_b += "precision mediump float;\n";
		glsl_b += "#endif\n";
	} else {
		glsl_b += "#version 120\n";
	}
	glsl_b += Std.string(map.toGLSL(false));
	if(programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "uniform vec4 vcPositionScale;\n";
	}
	glsl_b += "void main() {\n";
	glsl_b += Std.string(map.toGLSL(true));
	glsl_b += Std.string(sb_b);
	if(programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "\tgl_Position *= vcPositionScale;\n";
	}
	glsl_b += "}\n";
	return glsl_b;
};
var openfl_display3D__$internal__$AGALConverter_DestRegister = function() {
};
$hxClasses["openfl.display3D._internal._AGALConverter.DestRegister"] = openfl_display3D__$internal__$AGALConverter_DestRegister;
openfl_display3D__$internal__$AGALConverter_DestRegister.__name__ = "openfl.display3D._internal._AGALConverter.DestRegister";
openfl_display3D__$internal__$AGALConverter_DestRegister.parse = function(v,programType) {
	var dr = new openfl_display3D__$internal__$AGALConverter_DestRegister();
	dr.programType = programType;
	dr.type = v >>> 24 & 15;
	dr.mask = v >>> 16 & 15;
	dr.n = v & 65535;
	return dr;
};
openfl_display3D__$internal__$AGALConverter_DestRegister.prototype = {
	mask: null
	,n: null
	,programType: null
	,type: null
	,getWriteMask: function() {
		var str = ".";
		if((this.mask & 1) != 0) {
			str += "x";
		}
		if((this.mask & 2) != 0) {
			str += "y";
		}
		if((this.mask & 4) != 0) {
			str += "z";
		}
		if((this.mask & 8) != 0) {
			str += "w";
		}
		return str;
	}
	,toGLSL: function(useMask) {
		if(useMask == null) {
			useMask = true;
		}
		var str;
		if(this.type == 3) {
			str = this.programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX ? "gl_Position" : "gl_FragColor";
		} else {
			str = openfl_display3D__$internal_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		}
		if(useMask && this.mask != 15) {
			str += this.getWriteMask();
		}
		return str;
	}
	,__class__: openfl_display3D__$internal__$AGALConverter_DestRegister
};
var openfl_display3D__$internal__$AGALConverter_ProgramType = $hxEnums["openfl.display3D._internal._AGALConverter.ProgramType"] = { __ename__:"openfl.display3D._internal._AGALConverter.ProgramType",__constructs__:null
	,VERTEX: {_hx_name:"VERTEX",_hx_index:0,__enum__:"openfl.display3D._internal._AGALConverter.ProgramType",toString:$estr}
	,FRAGMENT: {_hx_name:"FRAGMENT",_hx_index:1,__enum__:"openfl.display3D._internal._AGALConverter.ProgramType",toString:$estr}
};
openfl_display3D__$internal__$AGALConverter_ProgramType.__constructs__ = [openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX,openfl_display3D__$internal__$AGALConverter_ProgramType.FRAGMENT];
var openfl_display3D__$internal_RegisterMap = function() {
	this.mEntries = [];
};
$hxClasses["openfl.display3D._internal.RegisterMap"] = openfl_display3D__$internal_RegisterMap;
openfl_display3D__$internal_RegisterMap.__name__ = "openfl.display3D._internal.RegisterMap";
openfl_display3D__$internal_RegisterMap.prototype = {
	mEntries: null
	,add: function(type,name,number,usage) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				if(entry.usage != usage) {
					throw new openfl_errors_IllegalOperationError("Cannot use register in multiple ways yet (mat4/vec4)");
				}
				return;
			}
		}
		var entry = new openfl_display3D__$internal__$AGALConverter_RegisterMapEntry();
		entry.type = type;
		entry.name = name;
		entry.number = number;
		entry.usage = usage;
		this.mEntries.push(entry);
	}
	,addDR: function(dr,usage) {
		this.add(dr.type,dr.toGLSL(false),dr.n,usage);
	}
	,addSaR: function(sr,usage) {
		this.add(sr.type,sr.toGLSL(),sr.n,usage);
	}
	,addSR: function(sr,usage,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(sr.d != 0) {
			this.add(sr.itype,openfl_display3D__$internal_AGALConverter.prefixFromType(sr.itype,sr.programType) + sr.n,sr.n,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			this.add(sr.type,openfl_display3D__$internal_AGALConverter.prefixFromType(sr.type,sr.programType) + sr.o,sr.o,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY);
			return;
		}
		this.add(sr.type,sr.toGLSL(false,offset),sr.n + offset,usage);
	}
	,getRegisterUsage: function(sr) {
		if(sr.d != 0) {
			return openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
		}
		return this.getUsage(sr.type,sr.toGLSL(false),sr.n);
	}
	,getUsage: function(type,name,number) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				return entry.usage;
			}
		}
		return openfl_display3D__$internal__$AGALConverter_RegisterUsage.UNUSED;
	}
	,toGLSL: function(tempRegistersOnly) {
		this.mEntries.sort(function(a,b) {
			return a.number - b.number;
		});
		var entry;
		this.mEntries.sort(function(a,b) {
			return js_Boot.__cast(a.type , Int) - js_Boot.__cast(b.type , Int);
		});
		var sb_b = "";
		var _g = 0;
		var _g1 = this.mEntries.length;
		while(_g < _g1) {
			var i = _g++;
			entry = this.mEntries[i];
			if(tempRegistersOnly && entry.type != 2 || !tempRegistersOnly && entry.type == 2) {
				continue;
			}
			if(entry.type == 3) {
				continue;
			}
			switch(entry.type) {
			case 0:
				sb_b += "attribute ";
				break;
			case 1:
				sb_b += "uniform ";
				break;
			case 2:
				sb_b += "\t";
				break;
			case 3:
				break;
			case 4:
				sb_b += "varying ";
				break;
			case 5:
				sb_b += "uniform ";
				break;
			default:
				throw new openfl_errors_IllegalOperationError();
			}
			switch(entry.usage._hx_index) {
			case 0:
				lime_utils_Log.info("Missing switch patten: RegisterUsage.UNUSED",{ fileName : "openfl/display3D/_internal/AGALConverter.hx", lineNumber : 751, className : "openfl.display3D._internal.RegisterMap", methodName : "toGLSL"});
				break;
			case 1:
				sb_b += "vec4 ";
				break;
			case 2:
				sb_b += "mat4 ";
				break;
			case 3:
				sb_b += "sampler2D ";
				break;
			case 4:
				break;
			case 5:
				sb_b += "samplerCube ";
				break;
			case 6:
				break;
			case 7:
				sb_b += "vec4 ";
				break;
			}
			if(entry.usage == openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA) {
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "bool ";
				sb_b += Std.string(entry.name + "_alphaEnabled");
				sb_b += ";\n";
			} else if(entry.usage == openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA) {
				sb_b += "samplerCube ";
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "samplerCube ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "bool ";
				sb_b += Std.string(entry.name + "_alphaEnabled");
				sb_b += ";\n";
			} else if(entry.usage == openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(entry.name + "[128]");
				sb_b += ";\n";
			} else {
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
			}
		}
		return sb_b;
	}
	,__class__: openfl_display3D__$internal_RegisterMap
};
var openfl_display3D__$internal__$AGALConverter_RegisterMapEntry = function() {
};
$hxClasses["openfl.display3D._internal._AGALConverter.RegisterMapEntry"] = openfl_display3D__$internal__$AGALConverter_RegisterMapEntry;
openfl_display3D__$internal__$AGALConverter_RegisterMapEntry.__name__ = "openfl.display3D._internal._AGALConverter.RegisterMapEntry";
openfl_display3D__$internal__$AGALConverter_RegisterMapEntry.prototype = {
	name: null
	,number: null
	,type: null
	,usage: null
	,__class__: openfl_display3D__$internal__$AGALConverter_RegisterMapEntry
};
var openfl_display3D__$internal__$AGALConverter_RegisterUsage = $hxEnums["openfl.display3D._internal._AGALConverter.RegisterUsage"] = { __ename__:"openfl.display3D._internal._AGALConverter.RegisterUsage",__constructs__:null
	,UNUSED: {_hx_name:"UNUSED",_hx_index:0,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,VECTOR_4: {_hx_name:"VECTOR_4",_hx_index:1,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,MATRIX_4_4: {_hx_name:"MATRIX_4_4",_hx_index:2,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_2D: {_hx_name:"SAMPLER_2D",_hx_index:3,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_2D_ALPHA: {_hx_name:"SAMPLER_2D_ALPHA",_hx_index:4,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_CUBE: {_hx_name:"SAMPLER_CUBE",_hx_index:5,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_CUBE_ALPHA: {_hx_name:"SAMPLER_CUBE_ALPHA",_hx_index:6,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,VECTOR_4_ARRAY: {_hx_name:"VECTOR_4_ARRAY",_hx_index:7,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
};
openfl_display3D__$internal__$AGALConverter_RegisterUsage.__constructs__ = [openfl_display3D__$internal__$AGALConverter_RegisterUsage.UNUSED,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,openfl_display3D__$internal__$AGALConverter_RegisterUsage.MATRIX_4_4,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_2D,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_CUBE,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY];
var openfl_display3D__$internal__$AGALConverter_SamplerRegister = function() {
};
$hxClasses["openfl.display3D._internal._AGALConverter.SamplerRegister"] = openfl_display3D__$internal__$AGALConverter_SamplerRegister;
openfl_display3D__$internal__$AGALConverter_SamplerRegister.__name__ = "openfl.display3D._internal._AGALConverter.SamplerRegister";
openfl_display3D__$internal__$AGALConverter_SamplerRegister.parse = function(v,programType) {
	var sr = new openfl_display3D__$internal__$AGALConverter_SamplerRegister();
	sr.programType = programType;
	var b = 60;
	b &= 63;
	var a = b == 0 ? new haxe__$Int64__$_$_$Int64(v.high,v.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b) : new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.f = this_low;
	var b = 56;
	b &= 63;
	var a = b == 0 ? new haxe__$Int64__$_$_$Int64(v.high,v.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b) : new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.m = this_low;
	var b = 52;
	b &= 63;
	var a = b == 0 ? new haxe__$Int64__$_$_$Int64(v.high,v.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b) : new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.w = this_low;
	var b = 48;
	b &= 63;
	var a = b == 0 ? new haxe__$Int64__$_$_$Int64(v.high,v.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b) : new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.s = this_low;
	var b = 44;
	b &= 63;
	var a = b == 0 ? new haxe__$Int64__$_$_$Int64(v.high,v.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b) : new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.d = this_low;
	var b = 40;
	b &= 63;
	var a = b == 0 ? new haxe__$Int64__$_$_$Int64(v.high,v.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b) : new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.t = this_low;
	var b = 32;
	b &= 63;
	var a = b == 0 ? new haxe__$Int64__$_$_$Int64(v.high,v.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b) : new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.type = this_low;
	var b = 16;
	b &= 63;
	var a = b == 0 ? new haxe__$Int64__$_$_$Int64(v.high,v.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b) : new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
	var b_high = 0;
	var b_low = 255;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.b = this_low;
	var b_high = 0;
	var b_low = 65535;
	var this_high = v.high & b_high;
	var this_low = v.low & b_low;
	sr.n = this_low;
	return sr;
};
openfl_display3D__$internal__$AGALConverter_SamplerRegister.prototype = {
	b: null
	,d: null
	,f: null
	,m: null
	,n: null
	,programType: null
	,s: null
	,t: null
	,type: null
	,w: null
	,toGLSL: function() {
		var str = openfl_display3D__$internal_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		return str;
	}
	,toSamplerState: function() {
		var wrap;
		var filter;
		var mipfilter;
		switch(this.f) {
		case 0:
			filter = 5;
			break;
		case 1:
			filter = 4;
			break;
		default:
			throw new openfl_errors_IllegalOperationError();
		}
		switch(this.m) {
		case 0:
			mipfilter = 2;
			break;
		case 1:
			mipfilter = 1;
			break;
		case 2:
			mipfilter = 0;
			break;
		default:
			throw new openfl_errors_IllegalOperationError();
		}
		switch(this.w) {
		case 0:
			wrap = 0;
			break;
		case 1:
			wrap = 2;
			break;
		default:
			throw new openfl_errors_IllegalOperationError();
		}
		var ignoreSampler = (this.s & 4) == 4;
		var centroid = (this.s & 1) == 1;
		var textureAlpha = this.t == 2;
		var lodBias = (this.b << 24 >> 24) / 8.0;
		return new openfl_display__$internal_SamplerState(wrap,filter,mipfilter,lodBias,ignoreSampler,centroid,textureAlpha);
	}
	,__class__: openfl_display3D__$internal__$AGALConverter_SamplerRegister
};
var openfl_display3D__$internal__$AGALConverter_SourceRegister = function() {
};
$hxClasses["openfl.display3D._internal._AGALConverter.SourceRegister"] = openfl_display3D__$internal__$AGALConverter_SourceRegister;
openfl_display3D__$internal__$AGALConverter_SourceRegister.__name__ = "openfl.display3D._internal._AGALConverter.SourceRegister";
openfl_display3D__$internal__$AGALConverter_SourceRegister.parse = function(v,programType,sourceMask) {
	var sr = new openfl_display3D__$internal__$AGALConverter_SourceRegister();
	sr.programType = programType;
	var b = 63;
	b &= 63;
	var a = b == 0 ? new haxe__$Int64__$_$_$Int64(v.high,v.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b) : new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
	var b_high = 0;
	var b_low = 1;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.d = this_low;
	var b = 48;
	b &= 63;
	var a = b == 0 ? new haxe__$Int64__$_$_$Int64(v.high,v.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b) : new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
	var b_high = 0;
	var b_low = 3;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.q = this_low;
	var b = 40;
	b &= 63;
	var a = b == 0 ? new haxe__$Int64__$_$_$Int64(v.high,v.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b) : new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.itype = this_low;
	var b = 32;
	b &= 63;
	var a = b == 0 ? new haxe__$Int64__$_$_$Int64(v.high,v.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b) : new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.type = this_low;
	var b = 24;
	b &= 63;
	var a = b == 0 ? new haxe__$Int64__$_$_$Int64(v.high,v.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b) : new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
	var b_high = 0;
	var b_low = 255;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.s = this_low;
	var b = 16;
	b &= 63;
	var a = b == 0 ? new haxe__$Int64__$_$_$Int64(v.high,v.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b) : new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
	var b_high = 0;
	var b_low = 255;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.o = this_low;
	var b_high = 0;
	var b_low = 65535;
	var this_high = v.high & b_high;
	var this_low = v.low & b_low;
	sr.n = this_low;
	sr.sourceMask = sourceMask;
	return sr;
};
openfl_display3D__$internal__$AGALConverter_SourceRegister.prototype = {
	d: null
	,itype: null
	,n: null
	,o: null
	,programType: null
	,q: null
	,s: null
	,sourceMask: null
	,type: null
	,toGLSL: function(emitSwizzle,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(emitSwizzle == null) {
			emitSwizzle = true;
		}
		if(this.type == 3) {
			if(this.programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX) {
				return "gl_Position";
			} else {
				return "gl_FragColor";
			}
		}
		var fullxyzw = this.s == 228 && this.sourceMask == 15;
		var swizzle = "";
		if(this.type != 5 && !fullxyzw) {
			if((this.sourceMask & 1) != 0) {
				switch(this.s & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 2) != 0) {
				switch(this.s >> 2 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 4) != 0) {
				switch(this.s >> 4 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 8) != 0) {
				switch(this.s >> 6 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
		}
		var str = openfl_display3D__$internal_AGALConverter.prefixFromType(this.type,this.programType);
		if(this.d == 0) {
			str += this.n + offset;
		} else {
			str += this.o;
			var indexComponent = "";
			switch(this.q) {
			case 0:
				indexComponent = "x";
				break;
			case 1:
				indexComponent = "y";
				break;
			case 2:
				indexComponent = "z";
				break;
			case 3:
				indexComponent = "w";
				break;
			}
			var indexRegister = openfl_display3D__$internal_AGALConverter.prefixFromType(this.itype,this.programType) + this.n + "." + indexComponent;
			str += "[ int(" + indexRegister + ") +" + offset + "]";
		}
		if(emitSwizzle && swizzle != "") {
			str += "." + swizzle;
		}
		return str;
	}
	,__class__: openfl_display3D__$internal__$AGALConverter_SourceRegister
};
var openfl_display3D__$internal_ATFReader = function(data,byteArrayOffset) {
	this.version = 0;
	data.position = byteArrayOffset;
	var signature = data.readUTFBytes(3);
	data.position = byteArrayOffset;
	if(signature != "ATF") {
		throw new openfl_errors_IllegalOperationError("ATF signature not found");
	}
	var length = 0;
	if(data.b[byteArrayOffset + 6] == 255) {
		this.version = data.b[byteArrayOffset + 7];
		data.position = byteArrayOffset + 8;
		length = this.__readUInt32(data);
	} else {
		this.version = 0;
		data.position = byteArrayOffset + 3;
		length = this.__readUInt24(data);
	}
	if(UInt.gt(js_Boot.__cast(byteArrayOffset + length , Int),openfl_utils_ByteArray.get_length(data))) {
		throw new openfl_errors_IllegalOperationError("ATF length exceeds byte array length");
	}
	this.data = data;
};
$hxClasses["openfl.display3D._internal.ATFReader"] = openfl_display3D__$internal_ATFReader;
openfl_display3D__$internal_ATFReader.__name__ = "openfl.display3D._internal.ATFReader";
openfl_display3D__$internal_ATFReader.prototype = {
	atfFormat: null
	,cubeMap: null
	,data: null
	,height: null
	,mipCount: null
	,version: null
	,width: null
	,readHeader: function(__width,__height,cubeMap) {
		var tdata = this.data.readUnsignedByte();
		var type = tdata >>> 7;
		if(!cubeMap && type != 0) {
			throw new openfl_errors_IllegalOperationError("ATF Cube map not expected");
		}
		if(cubeMap && type != 1) {
			throw new openfl_errors_IllegalOperationError("ATF Cube map expected");
		}
		this.cubeMap = cubeMap;
		this.atfFormat = tdata & 127;
		if(this.atfFormat != 3 && this.atfFormat != 5) {
			lime_utils_Log.warn("Only ATF block compressed textures without JPEG-XR+LZMA are supported",{ fileName : "openfl/display3D/_internal/ATFReader.hx", lineNumber : 97, className : "openfl.display3D._internal.ATFReader", methodName : "readHeader"});
		}
		this.width = 1 << this.data.readUnsignedByte();
		this.height = 1 << this.data.readUnsignedByte();
		if(this.width != __width || this.height != __height) {
			throw new openfl_errors_IllegalOperationError("ATF width and height dont match");
		}
		this.mipCount = this.data.readUnsignedByte();
		return this.atfFormat == 5;
	}
	,readTextures: function(uploadCallback) {
		var gpuFormats = this.version < 3 ? 3 : 4;
		var sideCount = this.cubeMap ? 6 : 1;
		var _g = 0;
		var _g1 = sideCount;
		while(_g < _g1) {
			var side = _g++;
			var _g2 = 0;
			var _g3 = this.mipCount;
			while(_g2 < _g3) {
				var level = _g2++;
				var _g4 = 0;
				var _g5 = gpuFormats;
				while(_g4 < _g5) {
					var gpuFormat = _g4++;
					var blockLength = this.version == 0 ? this.__readUInt24(this.data) : this.__readUInt32(this.data);
					if(UInt.gt(this.data.position + blockLength,openfl_utils_ByteArray.get_length(this.data))) {
						throw new openfl_errors_IllegalOperationError("Block length exceeds ATF file length");
					}
					if(UInt.gt(blockLength,0)) {
						var bytes = new haxe_io_Bytes(new ArrayBuffer(blockLength));
						var this1 = this.data;
						var bytes1 = openfl_utils_ByteArray.fromBytes(bytes);
						var offset = 0;
						var length = blockLength;
						if(length == null) {
							length = 0;
						}
						if(offset == null) {
							offset = 0;
						}
						this1.readBytes(bytes1,offset,length);
						uploadCallback(side,level,gpuFormat,this.width >> level,this.height >> level,blockLength,bytes);
					}
				}
			}
		}
	}
	,__readUInt24: function(data) {
		var value = data.readUnsignedByte() << 16;
		value = value | data.readUnsignedByte() << 8;
		value = value | data.readUnsignedByte();
		return value;
	}
	,__readUInt32: function(data) {
		var value = data.readUnsignedByte() << 24;
		value = value | data.readUnsignedByte() << 16;
		value = value | data.readUnsignedByte() << 8;
		value = value | data.readUnsignedByte();
		return value;
	}
	,__class__: openfl_display3D__$internal_ATFReader
};
var openfl_display3D__$internal_Context3DState = function() {
	this.backBufferEnableDepthAndStencil = false;
	this.blendDestinationAlphaFactor = 9;
	this.blendSourceAlphaFactor = 2;
	this.blendDestinationRGBFactor = 9;
	this.blendSourceRGBFactor = 2;
	this.colorMaskRed = true;
	this.colorMaskGreen = true;
	this.colorMaskBlue = true;
	this.colorMaskAlpha = true;
	this.culling = 3;
	this.depthCompareMode = 4;
	this.depthMask = true;
	this.samplerStates = [];
	this.scissorRectangle = new openfl_geom_Rectangle();
	this.stencilCompareMode = 0;
	this.stencilDepthFail = 5;
	this.stencilFail = 5;
	this.stencilPass = 5;
	this.stencilReadMask = 255;
	this.stencilReferenceValue = 0;
	this.stencilTriangleFace = 2;
	this.stencilWriteMask = 255;
	this.textures = [];
	this.__frontFaceGLCCW = true;
	this.__glBlendEquation = 32774;
};
$hxClasses["openfl.display3D._internal.Context3DState"] = openfl_display3D__$internal_Context3DState;
openfl_display3D__$internal_Context3DState.__name__ = "openfl.display3D._internal.Context3DState";
openfl_display3D__$internal_Context3DState.prototype = {
	backBufferEnableDepthAndStencil: null
	,blendDestinationAlphaFactor: null
	,blendSourceAlphaFactor: null
	,blendDestinationRGBFactor: null
	,blendSourceRGBFactor: null
	,colorMaskRed: null
	,colorMaskGreen: null
	,colorMaskBlue: null
	,colorMaskAlpha: null
	,culling: null
	,depthCompareMode: null
	,depthMask: null
	,program: null
	,renderToTexture: null
	,renderToTextureAntiAlias: null
	,renderToTextureDepthStencil: null
	,renderToTextureSurfaceSelector: null
	,samplerStates: null
	,scissorEnabled: null
	,scissorRectangle: null
	,stencilCompareMode: null
	,stencilDepthFail: null
	,stencilFail: null
	,stencilPass: null
	,stencilReadMask: null
	,stencilReferenceValue: null
	,stencilTriangleFace: null
	,stencilWriteMask: null
	,textures: null
	,shader: null
	,__currentGLArrayBuffer: null
	,__currentGLElementArrayBuffer: null
	,__currentGLFramebuffer: null
	,__currentGLTexture2D: null
	,__currentGLTextureCubeMap: null
	,__enableGLBlend: null
	,__enableGLCullFace: null
	,__enableGLDepthTest: null
	,__enableGLScissorTest: null
	,__enableGLStencilTest: null
	,__frontFaceGLCCW: null
	,__glBlendEquation: null
	,__primaryGLFramebuffer: null
	,__rttDepthGLRenderbuffer: null
	,__rttGLFramebuffer: null
	,__rttGLRenderbuffer: null
	,__rttStencilGLRenderbuffer: null
	,__class__: openfl_display3D__$internal_Context3DState
};
var openfl_display3D_textures_TextureBase = function(context) {
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	var gl = this.__context.gl;
	this.__textureID = gl.createTexture();
	this.__textureContext = this.__context.__context;
	if(openfl_display3D_textures_TextureBase.__supportsBGRA == null) {
		openfl_display3D_textures_TextureBase.__textureInternalFormat = gl.RGBA;
		var bgraExtension = null;
		if(bgraExtension != null) {
			openfl_display3D_textures_TextureBase.__supportsBGRA = true;
			openfl_display3D_textures_TextureBase.__textureFormat = bgraExtension.BGRA_EXT;
			if(context.__context.type == "opengles") {
				openfl_display3D_textures_TextureBase.__textureInternalFormat = bgraExtension.BGRA_EXT;
			}
		} else {
			openfl_display3D_textures_TextureBase.__supportsBGRA = false;
			openfl_display3D_textures_TextureBase.__textureFormat = gl.RGBA;
		}
		openfl_display3D_textures_TextureBase.__compressedFormats = new haxe_ds_IntMap();
		openfl_display3D_textures_TextureBase.__compressedFormatsAlpha = new haxe_ds_IntMap();
		var dxtExtension = gl.getExtension("WEBGL_compressed_texture_s3tc");
		var etc1Extension = gl.getExtension("WEBGL_compressed_texture_etc1");
		var pvrtcExtension = gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
		if(dxtExtension != null) {
			var v = dxtExtension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
			openfl_display3D_textures_TextureBase.__compressedFormats.h[0] = v;
			var v = dxtExtension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[0] = v;
		}
		if(etc1Extension != null) {
			var v = etc1Extension.COMPRESSED_RGB_ETC1_WEBGL;
			openfl_display3D_textures_TextureBase.__compressedFormats.h[2] = v;
			var v = etc1Extension.COMPRESSED_RGB_ETC1_WEBGL;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[2] = v;
		}
		if(pvrtcExtension != null) {
			var v = pvrtcExtension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
			openfl_display3D_textures_TextureBase.__compressedFormats.h[1] = v;
			var v = pvrtcExtension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[1] = v;
		}
	}
	this.__internalFormat = openfl_display3D_textures_TextureBase.__textureInternalFormat;
	this.__format = openfl_display3D_textures_TextureBase.__textureFormat;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = "openfl.display3D.textures.TextureBase";
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__alphaTexture: null
	,__context: null
	,__format: null
	,__glDepthRenderbuffer: null
	,__glFramebuffer: null
	,__glStencilRenderbuffer: null
	,__height: null
	,__internalFormat: null
	,__optimizeForRenderToTexture: null
	,__samplerState: null
	,__streamingLevels: null
	,__textureContext: null
	,__textureID: null
	,__textureTarget: null
	,__width: null
	,dispose: function() {
		var gl = this.__context.gl;
		if(this.__alphaTexture != null) {
			this.__alphaTexture.dispose();
			this.__alphaTexture = null;
		}
		if(this.__textureID != null) {
			gl.deleteTexture(this.__textureID);
			this.__textureID = null;
		}
		if(this.__glFramebuffer != null) {
			gl.deleteFramebuffer(this.__glFramebuffer);
			this.__glFramebuffer = null;
		}
		if(this.__glDepthRenderbuffer != null) {
			gl.deleteRenderbuffer(this.__glDepthRenderbuffer);
			this.__glDepthRenderbuffer = null;
		}
		if(this.__glStencilRenderbuffer != null) {
			gl.deleteRenderbuffer(this.__glStencilRenderbuffer);
			this.__glStencilRenderbuffer = null;
		}
	}
	,__getGLFramebuffer: function(enableDepthAndStencil,antiAlias,surfaceSelector) {
		var gl = this.__context.gl;
		if(this.__glFramebuffer == null) {
			this.__glFramebuffer = gl.createFramebuffer();
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__textureID,0);
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					lime_utils_Log.warn("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "openfl/display3D/textures/TextureBase.hx", lineNumber : 201, className : "openfl.display3D.textures.TextureBase", methodName : "__getGLFramebuffer"});
				}
			}
		}
		if(enableDepthAndStencil && this.__glDepthRenderbuffer == null) {
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			if(openfl_display3D_Context3D.__glDepthStencil != 0) {
				this.__glDepthRenderbuffer = gl.createRenderbuffer();
				this.__glStencilRenderbuffer = this.__glDepthRenderbuffer;
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,openfl_display3D_Context3D.__glDepthStencil,this.__width,this.__height);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.__glDepthRenderbuffer);
			} else {
				this.__glDepthRenderbuffer = gl.createRenderbuffer();
				this.__glStencilRenderbuffer = gl.createRenderbuffer();
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,this.__width,this.__height);
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glStencilRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,gl.STENCIL_INDEX8,this.__width,this.__height);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.__glStencilRenderbuffer);
			}
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					lime_utils_Log.warn("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "openfl/display3D/textures/TextureBase.hx", lineNumber : 239, className : "openfl.display3D.textures.TextureBase", methodName : "__getGLFramebuffer"});
				}
			}
			gl.bindRenderbuffer(gl.RENDERBUFFER,null);
		}
		return this.__glFramebuffer;
	}
	,__getImage: function(bitmapData) {
		var image = bitmapData.image;
		if(!bitmapData.__isValid || image == null) {
			return null;
		}
		lime__$internal_graphics_ImageCanvasUtil.sync(image,false);
		var gl = this.__context.gl;
		if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		} else if(!image.get_premultiplied() && image.get_transparent()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,0);
			image = image.clone();
			image.set_premultiplied(true);
		}
		if(image.get_format() != 0) {
			image = image.clone();
			image.set_format(0);
			image.buffer.premultiplied = true;
		}
		return image;
	}
	,__getTexture: function() {
		return this.__textureID;
	}
	,__setSamplerState: function(state) {
		if(!state.equals(this.__samplerState)) {
			var gl = this.__context.gl;
			if(this.__textureTarget == this.__context.gl.TEXTURE_CUBE_MAP) {
				this.__context.__bindGLTextureCubeMap(this.__textureID);
			} else {
				this.__context.__bindGLTexture2D(this.__textureID);
			}
			var wrapModeS = 0;
			var wrapModeT = 0;
			switch(state.wrap) {
			case 0:
				wrapModeS = gl.CLAMP_TO_EDGE;
				wrapModeT = gl.CLAMP_TO_EDGE;
				break;
			case 1:
				wrapModeS = gl.CLAMP_TO_EDGE;
				wrapModeT = gl.REPEAT;
				break;
			case 2:
				wrapModeS = gl.REPEAT;
				wrapModeT = gl.REPEAT;
				break;
			case 3:
				wrapModeS = gl.REPEAT;
				wrapModeT = gl.CLAMP_TO_EDGE;
				break;
			default:
				throw new openfl_errors_Error("wrap bad enum");
			}
			var magFilter = 0;
			var minFilter = 0;
			if(state.filter == 5) {
				magFilter = gl.NEAREST;
			} else {
				magFilter = gl.LINEAR;
			}
			switch(state.mipfilter) {
			case 0:
				minFilter = state.filter == 5 ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR_MIPMAP_LINEAR;
				break;
			case 1:
				minFilter = state.filter == 5 ? gl.NEAREST_MIPMAP_NEAREST : gl.LINEAR_MIPMAP_NEAREST;
				break;
			case 2:
				minFilter = state.filter == 5 ? gl.NEAREST : gl.LINEAR;
				break;
			default:
				throw new openfl_errors_Error("mipfiter bad enum");
			}
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_MIN_FILTER,minFilter);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_MAG_FILTER,magFilter);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_WRAP_S,wrapModeS);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_WRAP_T,wrapModeT);
			var tmp = state.lodBias != 0.0;
			if(this.__samplerState == null) {
				this.__samplerState = state.clone();
			}
			this.__samplerState.copyFrom(state);
			return true;
		}
		return false;
	}
	,__uploadFromImage: function(image) {
		var gl = this.__context.gl;
		var internalFormat;
		var format;
		if(this.__textureTarget != gl.TEXTURE_2D) {
			return;
		}
		if(image.buffer.bitsPerPixel == 1) {
			internalFormat = gl.ALPHA;
			format = gl.ALPHA;
		} else {
			internalFormat = openfl_display3D_textures_TextureBase.__textureInternalFormat;
			format = openfl_display3D_textures_TextureBase.__textureFormat;
		}
		this.__context.__bindGLTexture2D(this.__textureID);
		if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		} else if(!image.get_premultiplied() && image.get_transparent()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		}
		if(image.type == lime_graphics_ImageType.DATA) {
			lime_graphics_WebGLRenderContext.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,image.buffer.width,image.buffer.height,0,format,gl.UNSIGNED_BYTE,image.get_data());
		} else {
			lime_graphics_WebGLRenderContext.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,image.get_src());
		}
		this.__context.__bindGLTexture2D(null);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,size,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__size = size;
	this.__width = this.__height = this.__size;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	this.__textureTarget = this.__context.gl.TEXTURE_CUBE_MAP;
	this.__uploadedSides = 0;
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = "openfl.display3D.textures.CubeTexture";
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__framebufferSurface: null
	,__size: null
	,__uploadedSides: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		if(!async) {
			this.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
		} else {
			haxe_Timer.delay(function() {
				_gthis.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
				var event = null;
				event = new openfl_events_Event("textureReady");
				_gthis.dispatchEvent(event);
			},1);
		}
	}
	,uploadFromBitmapData: function(source,side,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		if(source == null) {
			return;
		}
		var size = this.__size >> miplevel;
		if(size == 0) {
			return;
		}
		var image = this.__getImage(source);
		if(image == null) {
			return;
		}
		if(miplevel == 0 && image.buffer != null && image.buffer.data == null && image.buffer.get_src() != null) {
			var gl = this.__context.gl;
			var size = this.__size >> miplevel;
			if(size == 0) {
				return;
			}
			var target = this.__sideToTarget(side);
			this.__context.__bindGLTextureCubeMap(this.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,target,miplevel,this.__internalFormat,this.__format,gl.UNSIGNED_BYTE,image.buffer.get_src());
			this.__context.__bindGLTextureCubeMap(null);
			this.__uploadedSides |= 1 << side;
			return;
		}
		this.uploadFromTypedArray(image.get_data(),side,miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b,side,miplevel);
			return;
		}
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(data);
		var byteoffset = byteArrayOffset;
		var len = null;
		if(byteoffset == null) {
			byteoffset = 0;
		}
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer,byteoffset);
			} else {
				this1 = new Uint8Array(buffer,byteoffset,len);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1,side,miplevel);
	}
	,uploadFromTypedArray: function(data,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var size = this.__size >> miplevel;
		if(size == 0) {
			return;
		}
		var target = this.__sideToTarget(side);
		this.__context.__bindGLTextureCubeMap(this.__textureID);
		lime_graphics_WebGLRenderContext.texImage2D(gl,target,miplevel,this.__internalFormat,size,size,0,this.__format,gl.UNSIGNED_BYTE,data);
		this.__context.__bindGLTextureCubeMap(null);
		this.__uploadedSides |= 1 << side;
	}
	,__getGLFramebuffer: function(enableDepthAndStencil,antiAlias,surfaceSelector) {
		var gl = this.__context.gl;
		if(this.__glFramebuffer == null) {
			this.__glFramebuffer = gl.createFramebuffer();
			this.__framebufferSurface = -1;
		}
		if(this.__framebufferSurface != surfaceSelector) {
			this.__framebufferSurface = surfaceSelector;
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_CUBE_MAP_POSITIVE_X + surfaceSelector,this.__textureID,0);
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					lime_utils_Log.error("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "openfl/display3D/textures/CubeTexture.hx", lineNumber : 279, className : "openfl.display3D.textures.CubeTexture", methodName : "__getGLFramebuffer"});
				}
			}
		}
		return openfl_display3D_textures_TextureBase.prototype.__getGLFramebuffer.call(this,enableDepthAndStencil,antiAlias,surfaceSelector);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(state.mipfilter != 2 && !this.__samplerState.mipmapGenerated) {
				gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
				this.__samplerState.mipmapGenerated = true;
			}
			if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy != 0) {
				var aniso;
				switch(state.filter) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy) {
					aniso = openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy;
				}
				gl.texParameterf(gl.TEXTURE_CUBE_MAP,openfl_display3D_Context3D.__glTextureMaxAnisotropy,aniso);
			}
			return true;
		}
		return false;
	}
	,__sideToTarget: function(side) {
		var gl = this.__context.gl;
		switch(side) {
		case 0:
			return gl.TEXTURE_CUBE_MAP_POSITIVE_X;
		case 1:
			return gl.TEXTURE_CUBE_MAP_NEGATIVE_X;
		case 2:
			return gl.TEXTURE_CUBE_MAP_POSITIVE_Y;
		case 3:
			return gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;
		case 4:
			return gl.TEXTURE_CUBE_MAP_POSITIVE_Z;
		case 5:
			return gl.TEXTURE_CUBE_MAP_NEGATIVE_Z;
		default:
			throw new openfl_errors_IllegalOperationError();
		}
	}
	,__uploadCompressedTextureFromByteArray: function(data,byteArrayOffset) {
		var _gthis = this;
		var reader = new openfl_display3D__$internal_ATFReader(data,byteArrayOffset);
		var alpha = reader.readHeader(this.__size,this.__size,true);
		var gl = this.__context.gl;
		this.__context.__bindGLTextureCubeMap(this.__textureID);
		var hasTexture = false;
		reader.readTextures(function(side,level,gpuFormat,width,height,blockLength,bytes) {
			var format = alpha ? openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[gpuFormat] : openfl_display3D_textures_TextureBase.__compressedFormats.h[gpuFormat];
			if(format == 0) {
				return;
			}
			hasTexture = true;
			var target = _gthis.__sideToTarget(side);
			_gthis.__format = format;
			_gthis.__internalFormat = format;
			if(alpha && gpuFormat == 2) {
				var size = blockLength / 2 | 0;
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = 0;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(size == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,size);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,target,level,_gthis.__internalFormat,width,height,0,this1);
				var alphaTexture = new openfl_display3D_textures_CubeTexture(_gthis.__context,_gthis.__size,3,_gthis.__optimizeForRenderToTexture,_gthis.__streamingLevels);
				alphaTexture.__format = format;
				alphaTexture.__internalFormat = format;
				_gthis.__context.__bindGLTextureCubeMap(alphaTexture.__textureID);
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = size;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(size == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,size);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,target,level,alphaTexture.__internalFormat,width,height,0,this1);
				_gthis.__alphaTexture = alphaTexture;
			} else {
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = 0;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(blockLength == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,blockLength);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,target,level,_gthis.__internalFormat,width,height,0,this1);
			}
		});
		if(!hasTexture) {
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(0),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(1),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(2),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(3),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(4),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(5),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
		}
		this.__context.__bindGLTextureCubeMap(null);
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__textureTarget = this.__context.gl.TEXTURE_2D;
	this.uploadFromTypedArray(null);
	if(optimizeForRenderToTexture) {
		this.__getGLFramebuffer(true,0,0);
	}
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = "openfl.display3D.textures.RectangleTexture";
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromBitmapData: function(source) {
		if(source == null) {
			return;
		}
		var image = this.__getImage(source);
		if(image == null) {
			return;
		}
		if(image.buffer != null && image.buffer.data == null && image.buffer.get_src() != null) {
			var gl = this.__context.gl;
			this.__context.__bindGLTexture2D(this.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__format,gl.UNSIGNED_BYTE,image.buffer.get_src());
			this.__context.__bindGLTexture2D(null);
			return;
		}
		this.uploadFromTypedArray(image.get_data());
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b);
			return;
		}
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(data);
		var byteoffset = byteArrayOffset;
		var len = null;
		if(byteoffset == null) {
			byteoffset = 0;
		}
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer,byteoffset);
			} else {
				this1 = new Uint8Array(buffer,byteoffset,len);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1);
	}
	,uploadFromTypedArray: function(data) {
		var gl = this.__context.gl;
		this.__context.__bindGLTexture2D(this.__textureID);
		lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,data);
		this.__context.__bindGLTexture2D(null);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy != 0) {
				var aniso;
				switch(state.filter) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy) {
					aniso = openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy;
				}
				gl.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.__glTextureMaxAnisotropy,aniso);
			}
			return true;
		}
		return false;
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,width,height,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	var gl = this.__context.gl;
	this.__textureTarget = gl.TEXTURE_2D;
	this.__context.__bindGLTexture2D(this.__textureID);
	lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,null);
	this.__context.__bindGLTexture2D(null);
	if(optimizeForRenderToTexture) {
		this.__getGLFramebuffer(true,0,0);
	}
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = "openfl.display3D.textures.Texture";
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		if(!async) {
			this.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
		} else {
			haxe_Timer.delay(function() {
				_gthis.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
				var event = null;
				event = new openfl_events_Event("textureReady");
				_gthis.dispatchEvent(event);
			},1);
		}
	}
	,uploadFromBitmapData: function(source,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		if(source == null) {
			return;
		}
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		if(width == 0 && height == 0) {
			return;
		}
		if(width == 0) {
			width = 1;
		}
		if(height == 0) {
			height = 1;
		}
		if(source.width != width || source.height != height) {
			var copy = new openfl_display_BitmapData(width,height,true,0);
			copy.draw(source);
			source = copy;
		}
		var image = this.__getImage(source);
		if(image == null) {
			return;
		}
		if(miplevel == 0 && image.buffer != null && image.buffer.data == null && image.buffer.get_src() != null) {
			var gl = this.__context.gl;
			var width = this.__width >> miplevel;
			var height = this.__height >> miplevel;
			if(width == 0 && height == 0) {
				return;
			}
			if(width == 0) {
				width = 1;
			}
			if(height == 0) {
				height = 1;
			}
			this.__context.__bindGLTexture2D(this.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,miplevel,this.__internalFormat,this.__format,gl.UNSIGNED_BYTE,image.buffer.get_src());
			this.__context.__bindGLTexture2D(null);
			return;
		}
		this.uploadFromTypedArray(image.get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b,miplevel);
			return;
		}
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(data);
		var byteoffset = byteArrayOffset;
		var len = null;
		if(byteoffset == null) {
			byteoffset = 0;
		}
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer,byteoffset);
			} else {
				this1 = new Uint8Array(buffer,byteoffset,len);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1,miplevel);
	}
	,uploadFromTypedArray: function(data,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		if(width == 0 && height == 0) {
			return;
		}
		if(width == 0) {
			width = 1;
		}
		if(height == 0) {
			height = 1;
		}
		this.__context.__bindGLTexture2D(this.__textureID);
		lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,miplevel,this.__internalFormat,width,height,0,this.__format,gl.UNSIGNED_BYTE,data);
		this.__context.__bindGLTexture2D(null);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(state.mipfilter != 2 && !this.__samplerState.mipmapGenerated) {
				gl.generateMipmap(gl.TEXTURE_2D);
				this.__samplerState.mipmapGenerated = true;
			}
			if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy != 0) {
				var aniso;
				switch(state.filter) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy) {
					aniso = openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy;
				}
				gl.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.__glTextureMaxAnisotropy,aniso);
			}
			return true;
		}
		return false;
	}
	,__uploadCompressedTextureFromByteArray: function(data,byteArrayOffset) {
		var _gthis = this;
		var reader = new openfl_display3D__$internal_ATFReader(data,byteArrayOffset);
		var alpha = reader.readHeader(this.__width,this.__height,false);
		var context = this.__context;
		var gl = context.gl;
		this.__context.__bindGLTexture2D(this.__textureID);
		var hasTexture = false;
		reader.readTextures(function(target,level,gpuFormat,width,height,blockLength,bytes) {
			var format = alpha ? openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[gpuFormat] : openfl_display3D_textures_TextureBase.__compressedFormats.h[gpuFormat];
			if(format == 0) {
				return;
			}
			hasTexture = true;
			_gthis.__format = format;
			_gthis.__internalFormat = format;
			if(alpha && gpuFormat == 2) {
				var size = blockLength / 2 | 0;
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = 0;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(size == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,size);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,_gthis.__textureTarget,level,_gthis.__internalFormat,width,height,0,this1);
				var alphaTexture = new openfl_display3D_textures_Texture(_gthis.__context,_gthis.__width,_gthis.__height,3,_gthis.__optimizeForRenderToTexture,_gthis.__streamingLevels);
				alphaTexture.__format = format;
				alphaTexture.__internalFormat = format;
				_gthis.__context.__bindGLTexture2D(alphaTexture.__textureID);
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = size;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(size == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,size);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,alphaTexture.__textureTarget,level,alphaTexture.__internalFormat,width,height,0,this1);
				_gthis.__alphaTexture = alphaTexture;
			} else {
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = 0;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(blockLength == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,blockLength);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,_gthis.__textureTarget,level,_gthis.__internalFormat,width,height,0,this1);
			}
		});
		if(!hasTexture) {
			var elements = this.__width * this.__height * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,data);
		}
		this.__context.__bindGLTexture2D(null);
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_display3D_textures_VideoTexture = function(context) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__textureTarget = this.__context.gl.TEXTURE_2D;
};
$hxClasses["openfl.display3D.textures.VideoTexture"] = openfl_display3D_textures_VideoTexture;
openfl_display3D_textures_VideoTexture.__name__ = "openfl.display3D.textures.VideoTexture";
openfl_display3D_textures_VideoTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_VideoTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	videoHeight: null
	,videoWidth: null
	,__cacheTime: null
	,__netStream: null
	,attachNetStream: function(netStream) {
		var _gthis = this;
		if(this.__netStream != null) {
			this.__netStream.__video.removeEventListener("canplay",$bind(this,this.__onCanPlay),false);
		}
		this.__cacheTime = -1;
		this.__netStream = netStream;
		if(this.__netStream != null) {
			if(this.__netStream.__video.readyState >= 2) {
				haxe_Timer.delay(function() {
					_gthis.__textureReady();
				},0);
			} else {
				this.__netStream.__video.addEventListener("canplay",$bind(this,this.__onCanPlay),false);
			}
		}
	}
	,dispose: function() {
		if(this.__netStream != null && this.__netStream.__video != null) {
			this.__netStream.__video.removeEventListener("timeupdate",$bind(this,this.__onTimeUpdate));
		}
		openfl_display3D_textures_TextureBase.prototype.dispose.call(this);
	}
	,__onCanPlay: function(_) {
		this.__netStream.__video.addEventListener("timeupdate",$bind(this,this.__onTimeUpdate));
		this.__textureReady();
	}
	,__onTimeUpdate: function(_) {
		if(this.__netStream != null && this.__netStream.__video.currentTime != this.__cacheTime && this.__netStream.__video.readyState >= 2) {
			this.__textureReady();
		}
	}
	,__getTexture: function() {
		if(this.__netStream.__video.currentTime != this.__cacheTime && this.__netStream.__video.readyState >= 2) {
			var gl = this.__context.gl;
			this.__context.__bindGLTexture2D(this.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,this.__netStream.__video);
			this.__cacheTime = this.__netStream.__video.currentTime;
		}
		return this.__textureID;
	}
	,__textureReady: function() {
		this.videoWidth = this.__netStream.__video.videoWidth;
		this.videoHeight = this.__netStream.__video.videoHeight;
		var event = null;
		event = new openfl_events_Event("textureReady");
		this.dispatchEvent(event);
	}
	,__class__: openfl_display3D_textures_VideoTexture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	haxe_Exception.call(this,message);
	this.errorID = id;
	this.name = "Error";
	this.__skipStack++;
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = "openfl.errors.Error";
openfl_errors_Error.__super__ = haxe_Exception;
openfl_errors_Error.prototype = $extend(haxe_Exception.prototype,{
	errorID: null
	,name: null
	,getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.get_message() != null) {
			return this.get_message();
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
});
var openfl_errors_ArgumentError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
	this.__skipStack++;
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = "openfl.errors.ArgumentError";
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
	this.__skipStack++;
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = "openfl.errors.IOError";
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function(message,id) {
	if(id == null) {
		id = 0;
	}
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
	this.__skipStack++;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = "openfl.errors.EOFError";
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
	this.__skipStack++;
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = "openfl.errors.IllegalOperationError";
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
	this.__skipStack++;
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = "openfl.errors.RangeError";
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
	this.__skipStack++;
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = "openfl.errors.TypeError";
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = "openfl.events.Event";
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) {
			parameters.push(p1);
		}
		if(p2 != null) {
			parameters.push(p2);
		}
		if(p3 != null) {
			parameters.push(p3);
		}
		if(p4 != null) {
			parameters.push(p4);
		}
		if(p5 != null) {
			parameters.push(p5);
		}
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") {
				output += " " + param + "=\"" + Std.string(arg) + "\"";
			} else {
				output += " " + param + "=" + Std.string(arg);
			}
		}
		output += "]";
		return output;
	}
	,__init: function() {
		this.target = null;
		this.currentTarget = null;
		this.bubbles = false;
		this.cancelable = false;
		this.eventPhase = 2;
		this.__isCanceled = false;
		this.__isCanceledNow = false;
		this.__preventDefault = false;
	}
	,__class__: openfl_events_Event
};
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = "openfl.events.ActivityEvent";
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.activating = false;
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = "openfl.events.TextEvent";
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.text = "";
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = "openfl.events.ErrorEvent";
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__init: function() {
		openfl_events_TextEvent.prototype.__init.call(this);
		this.errorID = 0;
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.active = false;
	this.reset(list);
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = "openfl.events._EventDispatcher.DispatchIterator";
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	active: null
	,index: null
	,isCopy: null
	,list: null
	,copy: function() {
		if(!this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		return this.index < this.list.length;
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex < this.index) {
					this.index--;
				}
			} else {
				var _g = this.index;
				var _g1 = this.list.length;
				while(_g < _g1) {
					var i = _g++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.isCopy = false;
		this.index = 0;
	}
	,start: function() {
		this.active = true;
	}
	,stop: function() {
		this.active = false;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority,useWeakReference) {
	if(useWeakReference && openfl_events__$EventDispatcher_Listener.supportsWeakReference) {
		this.weakRefCallback = new WeakRef(callback);
	} else {
		this.callback = callback;
	}
	this.useCapture = useCapture;
	this.priority = priority;
	this.useWeakReference = useWeakReference;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = "openfl.events._EventDispatcher.Listener";
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,weakRefCallback: null
	,priority: null
	,useCapture: null
	,useWeakReference: null
	,match: function(callback,useCapture) {
		var resolvedCallback = this.callback;
		if(this.weakRefCallback != null) {
			resolvedCallback = this.weakRefCallback.deref();
			if(resolvedCallback == null) {
				return false;
			}
		}
		if(resolvedCallback == callback) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_EventType = {};
openfl_events_EventType.equals = function(a,b) {
	return a == b;
};
openfl_events_EventType.notEquals = function(a,b) {
	return a != b;
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = "openfl.events.FocusEvent";
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.keyCode = 0;
		this.shiftKey = false;
		this.relatedObject = null;
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = "openfl.events.FullScreenEvent";
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__init: function() {
		openfl_events_ActivityEvent.prototype.__init.call(this);
		this.fullScreen = false;
		this.interactive = false;
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = "openfl.events.GameInputEvent";
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.device = null;
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) {
		redirected = false;
	}
	if(status == null) {
		status = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.responseHeaders = [];
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = "openfl.events.HTTPStatusEvent";
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,this.cancelable,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.status = 0;
		this.redirected = false;
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = "openfl.events.IOErrorEvent";
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null ? keyLocationValue : 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
	this.__updateAfterEventFlag = false;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = "openfl.events.KeyboardEvent";
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,__updateAfterEventFlag: null
	,clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,updateAfterEvent: function() {
		this.__updateAfterEventFlag = true;
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.charCode = 0;
		this.keyCode = 0;
		this.keyLocation = 0;
		this.ctrlKey = false;
		this.altKey = false;
		this.shiftKey = false;
		this.controlKey = false;
		this.commandKey = false;
		this.__updateAfterEventFlag = false;
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,controlKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.clickCount = clickCount;
	this.isRelatedObjectInaccessible = false;
	this.stageX = NaN;
	this.stageY = NaN;
	this.__updateAfterEventFlag = false;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = "openfl.events.MouseEvent";
openfl_events_MouseEvent.__create = function(type,button,clickCount,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey,openfl_events_MouseEvent.__controlKey,clickCount);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,controlKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,isRelatedObjectInaccessible: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,__updateAfterEventFlag: null
	,clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.controlKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
		this.__updateAfterEventFlag = true;
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.shiftKey = false;
		this.altKey = false;
		this.ctrlKey = false;
		this.bubbles = false;
		this.relatedObject = null;
		this.delta = 0;
		this.localX = 0;
		this.localY = 0;
		this.buttonDown = false;
		this.commandKey = false;
		this.controlKey = false;
		this.clickCount = 0;
		this.isRelatedObjectInaccessible = false;
		this.stageX = NaN;
		this.stageY = NaN;
		this.__updateAfterEventFlag = false;
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = "openfl.events.NetStatusEvent";
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	info: null
	,clone: function() {
		var event = new openfl_events_NetStatusEvent(this.type,this.bubbles,this.cancelable,this.info);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("NetStatusEvent",["type","bubbles","cancelable","info"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.info = null;
	}
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) {
		bytesTotal = 0;
	}
	if(bytesLoaded == null) {
		bytesLoaded = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = "openfl.events.ProgressEvent";
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.bytesLoaded = 0;
		this.bytesTotal = 0;
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_RenderEvent = function(type,bubbles,cancelable,objectMatrix,objectColorTransform,allowSmoothing) {
	if(allowSmoothing == null) {
		allowSmoothing = true;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.objectMatrix = objectMatrix;
	this.objectColorTransform = objectColorTransform;
	this.allowSmoothing = allowSmoothing;
};
$hxClasses["openfl.events.RenderEvent"] = openfl_events_RenderEvent;
openfl_events_RenderEvent.__name__ = "openfl.events.RenderEvent";
openfl_events_RenderEvent.__super__ = openfl_events_Event;
openfl_events_RenderEvent.prototype = $extend(openfl_events_Event.prototype,{
	allowSmoothing: null
	,objectColorTransform: null
	,objectMatrix: null
	,renderer: null
	,clone: function() {
		var event = new openfl_events_RenderEvent(this.type,this.bubbles,this.cancelable,this.objectMatrix.clone(),this.objectColorTransform.__clone(),this.allowSmoothing);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("RenderEvent",["type","bubbles","cancelable"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.objectMatrix = null;
		this.objectColorTransform = null;
		this.allowSmoothing = false;
		this.renderer = null;
	}
	,__class__: openfl_events_RenderEvent
});
var openfl_events_SampleDataEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.data = new openfl_utils_ByteArrayData(0);
	this.data.__endian = 1;
	this.position = 0.0;
};
$hxClasses["openfl.events.SampleDataEvent"] = openfl_events_SampleDataEvent;
openfl_events_SampleDataEvent.__name__ = "openfl.events.SampleDataEvent";
openfl_events_SampleDataEvent.__super__ = openfl_events_Event;
openfl_events_SampleDataEvent.prototype = $extend(openfl_events_Event.prototype,{
	data: null
	,position: null
	,tempBuffer: null
	,leftChannel: null
	,rightChannel: null
	,clone: function() {
		var event = new openfl_events_SampleDataEvent(this.type,this.bubbles,this.cancelable);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		event.data = this.data;
		event.position = this.position;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SampleDataEvent",["type","bubbles","cancelable"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.data = new openfl_utils_ByteArrayData(0);
		this.data.__endian = 1;
		this.position = 0.0;
	}
	,getBufferSize: function() {
		var bufferSize = UInt.toFloat(openfl_utils_ByteArray.get_length(this.data)) / UInt.toFloat(4) / 2 | 0;
		if(bufferSize > 0) {
			if(bufferSize != 0 && (bufferSize & bufferSize - 1) == 0 && bufferSize >= 2048 && bufferSize <= 8192) {
				this.tempBuffer = new Float32Array(bufferSize * 2);
				return bufferSize;
			} else {
				throw new openfl_errors_Error("To be consistent with flash the listener function registered to SampleDataEvent has to provide 2048, 4096 or 8192 samples if targeting HTML5.");
			}
		}
		return 0;
	}
	,getSamples: function(event) {
		this.data.position = 0;
		this.tempBuffer = haxe_io_Float32Array.fromBytes(openfl_utils_ByteArray.toBytes(this.data));
		this.leftChannel = event.outputBuffer.getChannelData(0);
		this.rightChannel = event.outputBuffer.getChannelData(1);
		var pos = 0;
		var bufferLength = UInt.toFloat(openfl_utils_ByteArray.get_length(this.data)) / UInt.toFloat(2) | 0;
		var _g = 0;
		var _g1 = bufferLength;
		while(_g < _g1) {
			var i = _g++;
			this.leftChannel[i] = this.tempBuffer[pos++];
			this.rightChannel[i] = this.tempBuffer[pos++];
		}
	}
	,__class__: openfl_events_SampleDataEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = "openfl.events.SecurityErrorEvent";
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
	this.__updateAfterEventFlag = false;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = "openfl.events.TouchEvent";
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,__updateAfterEventFlag: null
	,clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
		this.__updateAfterEventFlag = true;
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.touchPointID = 0;
		this.isPrimaryTouchPoint = false;
		this.localX = 0;
		this.localY = 0;
		this.sizeX = 0;
		this.sizeY = 0;
		this.pressure = 0;
		this.relatedObject = null;
		this.ctrlKey = false;
		this.altKey = false;
		this.shiftKey = false;
		this.commandKey = false;
		this.controlKey = false;
		this.stageX = NaN;
		this.stageY = NaN;
		this.__updateAfterEventFlag = false;
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_events_UncaughtErrorEvent = function(type,bubbles,cancelable,error) {
	if(cancelable == null) {
		cancelable = true;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.error = error;
};
$hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
openfl_events_UncaughtErrorEvent.__name__ = "openfl.events.UncaughtErrorEvent";
openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	error: null
	,clone: function() {
		var event = new openfl_events_UncaughtErrorEvent(this.type,this.bubbles,this.cancelable,this.error);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("UncaughtErrorEvent",["type","bubbles","cancelable","error"]);
	}
	,__init: function() {
		openfl_events_ErrorEvent.prototype.__init.call(this);
		this.error = null;
	}
	,__class__: openfl_events_UncaughtErrorEvent
});
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = "openfl.events.UncaughtErrorEvents";
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__enabled: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(Object.prototype.hasOwnProperty.call(this.__eventMap.h,"uncaughtError")) {
			this.__enabled = true;
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		if(!Object.prototype.hasOwnProperty.call(this.__eventMap.h,"uncaughtError")) {
			this.__enabled = false;
		}
	}
	,__class__: openfl_events_UncaughtErrorEvents
});
var openfl_filters_BitmapFilter = function() {
	this.__bottomExtension = 0;
	this.__leftExtension = 0;
	this.__needSecondBitmapData = true;
	this.__numShaderPasses = 0;
	this.__preserveObject = false;
	this.__rightExtension = 0;
	this.__shaderBlendMode = 10;
	this.__topExtension = 0;
	this.__smooth = true;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = "openfl.filters.BitmapFilter";
openfl_filters_BitmapFilter.prototype = {
	__bottomExtension: null
	,__leftExtension: null
	,__needSecondBitmapData: null
	,__numShaderPasses: null
	,__preserveObject: null
	,__renderDirty: null
	,__rightExtension: null
	,__shaderBlendMode: null
	,__smooth: null
	,__topExtension: null
	,clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		return sourceBitmapData;
	}
	,__initShader: function(renderer,pass,sourceBitmapData) {
		return null;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.get_length() == 16) {
		this.rawData = v.concat(null);
	} else {
		this.rawData = openfl_Vector.toFloatVector(null,null,null,[1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = "openfl.geom.Matrix3D";
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1]));
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1]));
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2.0 * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1]));
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		m.rawData.set(i,thisMat.rawData.get(i) + (toMat.rawData.get(i) - thisMat.rawData.get(i)) * percent);
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	m.rawData.set(0,c + a1.x * a1.x * t);
	m.rawData.set(5,c + a1.y * a1.y * t);
	m.rawData.set(10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	m.rawData.set(4,tmp1 + tmp2);
	m.rawData.set(1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	m.rawData.set(8,tmp1 - tmp2);
	m.rawData.set(2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	m.rawData.set(9,tmp1 + tmp2);
	m.rawData.set(6,tmp1 - tmp2);
	return m;
};
openfl_geom_Matrix3D.prototype = {
	rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.get(0);
		var m121 = this.rawData.get(4);
		var m131 = this.rawData.get(8);
		var m141 = this.rawData.get(12);
		var m112 = this.rawData.get(1);
		var m122 = this.rawData.get(5);
		var m132 = this.rawData.get(9);
		var m142 = this.rawData.get(13);
		var m113 = this.rawData.get(2);
		var m123 = this.rawData.get(6);
		var m133 = this.rawData.get(10);
		var m143 = this.rawData.get(14);
		var m114 = this.rawData.get(3);
		var m124 = this.rawData.get(7);
		var m134 = this.rawData.get(11);
		var m144 = this.rawData.get(15);
		var m211 = lhs.rawData.get(0);
		var m221 = lhs.rawData.get(4);
		var m231 = lhs.rawData.get(8);
		var m241 = lhs.rawData.get(12);
		var m212 = lhs.rawData.get(1);
		var m222 = lhs.rawData.get(5);
		var m232 = lhs.rawData.get(9);
		var m242 = lhs.rawData.get(13);
		var m213 = lhs.rawData.get(2);
		var m223 = lhs.rawData.get(6);
		var m233 = lhs.rawData.get(10);
		var m243 = lhs.rawData.get(14);
		var m214 = lhs.rawData.get(3);
		var m224 = lhs.rawData.get(7);
		var m234 = lhs.rawData.get(11);
		var m244 = lhs.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var tz = 0;
		var ty = tz;
		var tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
	}
	,appendTranslation: function(x,y,z) {
		var _g = this.rawData;
		_g.set(12,_g.get(12) + x);
		var _g = this.rawData;
		_g.set(13,_g.get(13) + y);
		var _g = this.rawData;
		_g.set(14,_g.get(14) + z);
	}
	,clone: function() {
		return new openfl_geom_Matrix3D(this.rawData.copy());
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(1,vector3D.y);
			this.rawData.set(2,vector3D.z);
			this.rawData.set(3,vector3D.w);
			break;
		case 1:
			this.rawData.set(4,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(6,vector3D.z);
			this.rawData.set(7,vector3D.w);
			break;
		case 2:
			this.rawData.set(8,vector3D.x);
			this.rawData.set(9,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(11,vector3D.w);
			break;
		case 3:
			this.rawData.set(12,vector3D.x);
			this.rawData.set(13,vector3D.y);
			this.rawData.set(14,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(1);
			vector3D.z = this.rawData.get(2);
			vector3D.w = this.rawData.get(3);
			break;
		case 1:
			vector3D.x = this.rawData.get(4);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(6);
			vector3D.w = this.rawData.get(7);
			break;
		case 2:
			vector3D.x = this.rawData.get(8);
			vector3D.y = this.rawData.get(9);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(11);
			break;
		case 3:
			vector3D.x = this.rawData.get(12);
			vector3D.y = this.rawData.get(13);
			vector3D.z = this.rawData.get(14);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		this.rawData = other.rawData.copy();
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var length = vector.get_length() - index;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			this.rawData.set(i,vector.get(i + index));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var _g = 0;
		var _g1 = this.rawData.get_length();
		while(_g < _g1) {
			var i = _g++;
			vector.set(i + index,this.rawData.get(i));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(4,vector3D.y);
			this.rawData.set(8,vector3D.z);
			this.rawData.set(12,vector3D.w);
			break;
		case 1:
			this.rawData.set(1,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(9,vector3D.z);
			this.rawData.set(13,vector3D.w);
			break;
		case 2:
			this.rawData.set(2,vector3D.x);
			this.rawData.set(6,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(14,vector3D.w);
			break;
		case 3:
			this.rawData.set(3,vector3D.x);
			this.rawData.set(7,vector3D.y);
			this.rawData.set(11,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(4);
			vector3D.z = this.rawData.get(8);
			vector3D.w = this.rawData.get(12);
			break;
		case 1:
			vector3D.x = this.rawData.get(1);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(9);
			vector3D.w = this.rawData.get(13);
			break;
		case 2:
			vector3D.x = this.rawData.get(2);
			vector3D.y = this.rawData.get(6);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(14);
			break;
		case 3:
			vector3D.x = this.rawData.get(3);
			vector3D.y = this.rawData.get(7);
			vector3D.z = this.rawData.get(11);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		other.rawData = this.rawData.copy();
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		var vec = openfl_Vector.toObjectVector(null);
		var m = this.clone();
		var mr = m.rawData.copy();
		var pos = new openfl_geom_Vector3D(mr.get(12),mr.get(13),mr.get(14));
		mr.set(12,0);
		mr.set(13,0);
		mr.set(14,0);
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.get(0) * mr.get(0) + mr.get(1) * mr.get(1) + mr.get(2) * mr.get(2));
		scale.y = Math.sqrt(mr.get(4) * mr.get(4) + mr.get(5) * mr.get(5) + mr.get(6) * mr.get(6));
		scale.z = Math.sqrt(mr.get(8) * mr.get(8) + mr.get(9) * mr.get(9) + mr.get(10) * mr.get(10));
		if(mr.get(0) * (mr.get(5) * mr.get(10) - mr.get(6) * mr.get(9)) - mr.get(1) * (mr.get(4) * mr.get(10) - mr.get(6) * mr.get(8)) + mr.get(2) * (mr.get(4) * mr.get(9) - mr.get(5) * mr.get(8)) < 0) {
			scale.z = -scale.z;
		}
		var _g = mr;
		_g.set(0,_g.get(0) / scale.x);
		var _g = mr;
		_g.set(1,_g.get(1) / scale.x);
		var _g = mr;
		_g.set(2,_g.get(2) / scale.x);
		var _g = mr;
		_g.set(4,_g.get(4) / scale.y);
		var _g = mr;
		_g.set(5,_g.get(5) / scale.y);
		var _g = mr;
		_g.set(6,_g.get(6) / scale.y);
		var _g = mr;
		_g.set(8,_g.get(8) / scale.z);
		var _g = mr;
		_g.set(9,_g.get(9) / scale.z);
		var _g = mr;
		_g.set(10,_g.get(10) / scale.z);
		var rot = new openfl_geom_Vector3D();
		switch(orientationStyle) {
		case 0:
			rot.w = Math.acos((mr.get(0) + mr.get(5) + mr.get(10) - 1) / 2);
			var len = Math.sqrt((mr.get(6) - mr.get(9)) * (mr.get(6) - mr.get(9)) + (mr.get(8) - mr.get(2)) * (mr.get(8) - mr.get(2)) + (mr.get(1) - mr.get(4)) * (mr.get(1) - mr.get(4)));
			if(len != 0) {
				rot.x = (mr.get(6) - mr.get(9)) / len;
				rot.y = (mr.get(8) - mr.get(2)) / len;
				rot.z = (mr.get(1) - mr.get(4)) / len;
			} else {
				rot.x = rot.y = rot.z = 0;
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.get(2));
			if(mr.get(2) != 1 && mr.get(2) != -1) {
				rot.x = Math.atan2(mr.get(6),mr.get(10));
				rot.z = Math.atan2(mr.get(1),mr.get(0));
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.get(4),mr.get(5));
			}
			break;
		case 2:
			var tr = mr.get(0) + mr.get(5) + mr.get(10);
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.get(6) - mr.get(9)) / (4 * rot.w);
				rot.y = (mr.get(8) - mr.get(2)) / (4 * rot.w);
				rot.z = (mr.get(1) - mr.get(4)) / (4 * rot.w);
			} else if(mr.get(0) > mr.get(5) && mr.get(0) > mr.get(10)) {
				rot.x = Math.sqrt(1 + mr.get(0) - mr.get(5) - mr.get(10)) / 2;
				rot.w = (mr.get(6) - mr.get(9)) / (4 * rot.x);
				rot.y = (mr.get(1) + mr.get(4)) / (4 * rot.x);
				rot.z = (mr.get(8) + mr.get(2)) / (4 * rot.x);
			} else if(mr.get(5) > mr.get(10)) {
				rot.y = Math.sqrt(1 + mr.get(5) - mr.get(0) - mr.get(10)) / 2;
				rot.x = (mr.get(1) + mr.get(4)) / (4 * rot.y);
				rot.w = (mr.get(8) - mr.get(2)) / (4 * rot.y);
				rot.z = (mr.get(6) + mr.get(9)) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.get(10) - mr.get(0) - mr.get(5)) / 2;
				rot.x = (mr.get(8) + mr.get(2)) / (4 * rot.z);
				rot.y = (mr.get(6) + mr.get(9)) / (4 * rot.z);
				rot.w = (mr.get(1) - mr.get(4)) / (4 * rot.z);
			}
			break;
		}
		vec.push(pos);
		vec.push(rot);
		vec.push(scale);
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10),x * this.rawData.get(3) + y * this.rawData.get(7) + z * this.rawData.get(11));
	}
	,identity: function() {
		this.rawData = openfl_Vector.toFloatVector(null,null,null,[1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.rawData.set(i,this.rawData.get(i) + (toMat.rawData.get(i) - this.rawData.get(i)) * percent);
		}
	}
	,invert: function() {
		var d = this.get_determinant();
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.get(0);
			var m21 = this.rawData.get(4);
			var m31 = this.rawData.get(8);
			var m41 = this.rawData.get(12);
			var m12 = this.rawData.get(1);
			var m22 = this.rawData.get(5);
			var m32 = this.rawData.get(9);
			var m42 = this.rawData.get(13);
			var m13 = this.rawData.get(2);
			var m23 = this.rawData.get(6);
			var m33 = this.rawData.get(10);
			var m43 = this.rawData.get(14);
			var m14 = this.rawData.get(3);
			var m24 = this.rawData.get(7);
			var m34 = this.rawData.get(11);
			var m44 = this.rawData.get(15);
			this.rawData.set(0,d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24)));
			this.rawData.set(1,-d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14)));
			this.rawData.set(2,d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14)));
			this.rawData.set(3,-d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14)));
			this.rawData.set(4,-d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24)));
			this.rawData.set(5,d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14)));
			this.rawData.set(6,-d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14)));
			this.rawData.set(7,d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14)));
			this.rawData.set(8,d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24)));
			this.rawData.set(9,-d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14)));
			this.rawData.set(10,d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14)));
			this.rawData.set(11,-d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14)));
			this.rawData.set(12,-d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23)));
			this.rawData.set(13,d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13)));
			this.rawData.set(14,-d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13)));
			this.rawData.set(15,d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) {
			at = new openfl_geom_Vector3D(0,0,-1);
		}
		if(up == null) {
			up = new openfl_geom_Vector3D(0,-1,0);
		}
		var dir = at.subtract(pos);
		var vup = up.clone();
		dir.normalize();
		vup.normalize();
		var dir2 = dir.clone();
		dir2.scaleBy(vup.dotProduct(dir));
		vup = vup.subtract(dir2);
		if(vup.get_length() > 0) {
			vup.normalize();
		} else if(dir.x != 0) {
			vup = new openfl_geom_Vector3D(-dir.y,dir.x,0);
		} else {
			vup = new openfl_geom_Vector3D(1,0,0);
		}
		var right = vup.crossProduct(dir);
		right.normalize();
		this.rawData.set(0,right.x);
		this.rawData.set(4,right.y);
		this.rawData.set(8,right.z);
		this.rawData.set(12,0.0);
		this.rawData.set(1,vup.x);
		this.rawData.set(5,vup.y);
		this.rawData.set(9,vup.z);
		this.rawData.set(13,0.0);
		this.rawData.set(2,dir.x);
		this.rawData.set(6,dir.y);
		this.rawData.set(10,dir.z);
		this.rawData.set(14,0.0);
		this.rawData.set(3,pos.x);
		this.rawData.set(7,pos.y);
		this.rawData.set(11,pos.z);
		this.rawData.set(15,1.0);
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.get(0);
		var m121 = rhs.rawData.get(4);
		var m131 = rhs.rawData.get(8);
		var m141 = rhs.rawData.get(12);
		var m112 = rhs.rawData.get(1);
		var m122 = rhs.rawData.get(5);
		var m132 = rhs.rawData.get(9);
		var m142 = rhs.rawData.get(13);
		var m113 = rhs.rawData.get(2);
		var m123 = rhs.rawData.get(6);
		var m133 = rhs.rawData.get(10);
		var m143 = rhs.rawData.get(14);
		var m114 = rhs.rawData.get(3);
		var m124 = rhs.rawData.get(7);
		var m134 = rhs.rawData.get(11);
		var m144 = rhs.rawData.get(15);
		var m211 = this.rawData.get(0);
		var m221 = this.rawData.get(4);
		var m231 = this.rawData.get(8);
		var m241 = this.rawData.get(12);
		var m212 = this.rawData.get(1);
		var m222 = this.rawData.get(5);
		var m232 = this.rawData.get(9);
		var m242 = this.rawData.get(13);
		var m213 = this.rawData.get(2);
		var m223 = this.rawData.get(6);
		var m233 = this.rawData.get(10);
		var m243 = this.rawData.get(14);
		var m214 = this.rawData.get(3);
		var m224 = this.rawData.get(7);
		var m234 = this.rawData.get(11);
		var m244 = this.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var tz = 0;
		var ty = tz;
		var tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		if(components.get_length() < 3 || components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).z == 0) {
			return false;
		}
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.get(2).x;
		scale[4] = scale[5] = scale[6] = components.get(2).y;
		scale[8] = scale[9] = scale[10] = components.get(2).z;
		if(orientationStyle == 1) {
			var cx = Math.cos(components.get(1).x);
			var cy = Math.cos(components.get(1).y);
			var cz = Math.cos(components.get(1).z);
			var sx = Math.sin(components.get(1).x);
			var sy = Math.sin(components.get(1).y);
			var sz = Math.sin(components.get(1).z);
			this.rawData.set(0,cy * cz * scale[0]);
			this.rawData.set(1,cy * sz * scale[1]);
			this.rawData.set(2,-sy * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(sx * sy * cz - cx * sz) * scale[4]);
			this.rawData.set(5,(sx * sy * sz + cx * cz) * scale[5]);
			this.rawData.set(6,sx * cy * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(cx * sy * cz + sx * sz) * scale[8]);
			this.rawData.set(9,(cx * sy * sz - sx * cz) * scale[9]);
			this.rawData.set(10,cx * cy * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		} else {
			var x = components.get(1).x;
			var y = components.get(1).y;
			var z = components.get(1).z;
			var w = components.get(1).w;
			if(orientationStyle == 0) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			this.rawData.set(0,(1 - 2 * y * y - 2 * z * z) * scale[0]);
			this.rawData.set(1,(2 * x * y + 2 * w * z) * scale[1]);
			this.rawData.set(2,(2 * x * z - 2 * w * y) * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(2 * x * y - 2 * w * z) * scale[4]);
			this.rawData.set(5,(1 - 2 * x * x - 2 * z * z) * scale[5]);
			this.rawData.set(6,(2 * y * z + 2 * w * x) * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(2 * x * z + 2 * w * y) * scale[8]);
			this.rawData.set(9,(2 * y * z - 2 * w * x) * scale[9]);
			this.rawData.set(10,(1 - 2 * x * x - 2 * y * y) * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		}
		if(components.get(2).x == 0) {
			this.rawData.set(0,1e-15);
		}
		if(components.get(2).y == 0) {
			this.rawData.set(5,1e-15);
		}
		if(components.get(2).z == 0) {
			this.rawData.set(10,1e-15);
		}
		return !(components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14),x * this.rawData.get(3) + y * this.rawData.get(7) + z * this.rawData.get(11) + this.rawData.get(15));
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.get_length()) {
			x = vin.get(i);
			y = vin.get(i + 1);
			z = vin.get(i + 2);
			vout.set(i,x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12));
			vout.set(i + 1,x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13));
			vout.set(i + 2,x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14));
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData = this.rawData.copy();
		this.rawData.set(1,oRawData.get(4));
		this.rawData.set(2,oRawData.get(8));
		this.rawData.set(3,oRawData.get(12));
		this.rawData.set(4,oRawData.get(1));
		this.rawData.set(6,oRawData.get(9));
		this.rawData.set(7,oRawData.get(13));
		this.rawData.set(8,oRawData.get(2));
		this.rawData.set(9,oRawData.get(6));
		this.rawData.set(11,oRawData.get(14));
		this.rawData.set(12,oRawData.get(3));
		this.rawData.set(13,oRawData.get(7));
		this.rawData.set(14,oRawData.get(11));
	}
	,get_determinant: function() {
		return (this.rawData.get(0) * this.rawData.get(5) - this.rawData.get(4) * this.rawData.get(1)) * (this.rawData.get(10) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(11)) - (this.rawData.get(0) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(7)) + (this.rawData.get(0) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(7)) + (this.rawData.get(4) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(3)) - (this.rawData.get(4) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(3)) + (this.rawData.get(8) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(9)) * (this.rawData.get(2) * this.rawData.get(7) - this.rawData.get(6) * this.rawData.get(3));
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.get(12),this.rawData.get(13),this.rawData.get(14));
	}
	,set_position: function(val) {
		this.rawData.set(12,val.x);
		this.rawData.set(13,val.y);
		this.rawData.set(14,val.z);
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom_Orientation3D = {};
openfl_geom_Orientation3D.fromString = function(value) {
	switch(value) {
	case "axisAngle":
		return 0;
	case "eulerAngles":
		return 1;
	case "quaternion":
		return 2;
	default:
		return null;
	}
};
openfl_geom_Orientation3D.toString = function(this1) {
	switch(this1) {
	case 0:
		return "axisAngle";
	case 1:
		return "eulerAngles";
	case 2:
		return "quaternion";
	default:
		return null;
	}
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = "openfl.geom.Transform";
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform.__clone();
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value,false)) {
			this.__colorTransform.__copyFrom(value);
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			var _this = this.__displayObject;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		return this.__colorTransform;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__getWorldTransform().clone();
		}
		return null;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__transform.clone();
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			return new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0]));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		this.__setTransform(value.rawData.get(0),value.rawData.get(1),value.rawData.get(4),value.rawData.get(5),value.rawData.get(12),value.rawData.get(13));
		return value;
	}
	,__setTransform: function(a,b,c,d,tx,ty) {
		if(this.__displayObject != null) {
			var transform = this.__displayObject.__transform;
			if(transform.a == a && transform.b == b && transform.c == c && transform.d == d && transform.tx == tx && transform.ty == ty) {
				return;
			}
			var scaleX = 0.0;
			var scaleY = 0.0;
			if(b == 0) {
				scaleX = a;
			} else {
				scaleX = Math.sqrt(a * a + b * b);
			}
			if(c == 0) {
				scaleY = d;
			} else {
				scaleY = Math.sqrt(c * c + d * d);
			}
			this.__displayObject.__scaleX = scaleX;
			this.__displayObject.__scaleY = scaleY;
			var rotation = 180 / Math.PI * Math.atan2(d,c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			transform.a = a;
			transform.b = b;
			transform.c = c;
			transform.d = d;
			transform.tx = tx;
			transform.ty = ty;
			this.__displayObject.__setTransformDirty();
		}
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = "openfl.geom.Vector3D";
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"};
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = a.get_length();
	var lb = b.get_length();
	var dot = a.dotProduct(b);
	if(la != 0) {
		dot /= la;
	}
	if(lb != 0) {
		dot /= lb;
	}
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(allFour) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = this.get_length();
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = "openfl.media.ID3Info";
openfl_media_ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	this.__webAudioContext = null;
	this.__urlLoading = false;
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
	if(stream == null && lime_media_AudioManager.context != null) {
		if(lime_media_AudioManager.context.type == "web") {
			this.__webAudioContext = lime_media_AudioManager.context.web;
		}
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = "openfl.media.Sound";
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	var buffer = lime_media_AudioBuffer.fromFile(path);
	if(buffer == null) {
		throw new openfl_errors_IOError("Error loading sound from file: " + path);
	}
	return openfl_media_Sound.fromAudioBuffer(buffer);
};
openfl_media_Sound.loadFromFile = function(path) {
	return lime_media_AudioBuffer.loadFromFile(path).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.loadFromFiles = function(paths) {
	return lime_media_AudioBuffer.loadFromFiles(paths).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__urlLoading: null
	,__pendingSoundChannel: null
	,__pendingAudioSource: null
	,__buffer: null
	,__webAudioContext: null
	,close: function() {
		if(this.__buffer != null) {
			this.__buffer.dispose();
			this.__buffer = null;
		}
	}
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		this.__urlLoading = true;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		if(defaultLibrary != null && Object.prototype.hasOwnProperty.call(defaultLibrary.cachedAudioBuffers.h,this.url)) {
			this.AudioBuffer_onURLLoad(defaultLibrary.cachedAudioBuffers.h[this.url]);
		} else {
			lime_media_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength) {
		if(bytes == null || bytesLength <= 0) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		if(UInt.gt(bytes.position,0) || UInt.gt(openfl_utils_ByteArray.get_length(bytes),bytesLength)) {
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			var copy = new openfl_utils_ByteArrayData(length);
			var offset = bytes.position;
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			copy.writeBytes(bytes,offset,length);
			bytes = copy;
		}
		this.__buffer = lime_media_AudioBuffer.fromBytes(openfl_utils_ByteArray.toBytes(bytes));
		if(this.__buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
		if(format == null) {
			format = "float";
		}
		if(bytes == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		var bitsPerSample = format == "float" ? 32 : 16;
		var channels = stereo ? 2 : 1;
		var bytesLength = samples * channels * (bitsPerSample / 8) | 0;
		if(UInt.gt(bytes.position,0) || UInt.gt(openfl_utils_ByteArray.get_length(bytes),bytesLength)) {
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			var copy = new openfl_utils_ByteArrayData(length);
			var offset = bytes.position;
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			copy.writeBytes(bytes,offset,length);
			bytes = copy;
		}
		var audioBuffer = new lime_media_AudioBuffer();
		audioBuffer.bitsPerSample = bitsPerSample;
		audioBuffer.channels = channels;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(bytes);
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer,0);
			} else {
				this1 = new Uint8Array(buffer,0,len);
			}
		} else {
			this1 = null;
		}
		audioBuffer.data = this1;
		audioBuffer.sampleRate = sampleRate | 0;
		this.__buffer = audioBuffer;
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(openfl_media_SoundMixer.__soundChannels.length >= 32) {
			return null;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform();
		} else {
			sndTransform = sndTransform.clone();
		}
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) {
			pan = 1;
		}
		if(pan < -1) {
			pan = -1;
		}
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var audioSource = new lime_media_AudioSource(this.__buffer);
		audioSource.offset = startTime | 0;
		if(loops > 1) {
			audioSource.set_loops(loops - 1);
		}
		audioSource.set_gain(volume);
		var position = audioSource.get_position();
		position.x = pan;
		position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		audioSource.set_position(position);
		var soundChannel = new openfl_media_SoundChannel(this,this.__urlLoading ? null : audioSource,sndTransform);
		if(this.__urlLoading) {
			this.__pendingAudioSource = audioSource;
			this.__pendingSoundChannel = soundChannel;
		} else if(this.__buffer == null) {
			if(this.__webAudioContext != null) {
				soundChannel.__startSampleData();
			}
		}
		return soundChannel;
	}
	,get_sampleRate: function() {
		return this.__webAudioContext.sampleRate | 0;
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
			return this.__buffer.get_src().duration() * 1000 | 0;
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		this.__urlLoading = false;
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
			if(this.__pendingSoundChannel != null) {
				this.__pendingAudioSource.buffer = this.__buffer;
				this.__pendingAudioSource.init();
				this.__pendingSoundChannel.__initAudioSource(this.__pendingAudioSource);
			}
		}
		this.__pendingSoundChannel = null;
		this.__pendingAudioSource = null;
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_sampleRate:"get_sampleRate",get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(sound,audioSource,soundTransform) {
	this.__firstRun = true;
	openfl_events_EventDispatcher.call(this,this);
	this.__sound = sound;
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) {
		this.__soundTransform = soundTransform;
	} else {
		this.__soundTransform = new openfl_media_SoundTransform();
	}
	this.__initAudioSource(audioSource);
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = "openfl.media.SoundChannel";
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__sound: null
	,__isValid: null
	,__soundTransform: null
	,__audioSource: null
	,__sampleDataEvent: null
	,__processor: null
	,__firstRun: null
	,stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) {
			return;
		}
		if(this.__processor != null) {
			this.__processor.disconnect();
			this.__processor.onaudioprocess = null;
			this.__processor = null;
		}
		this.__audioSource.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__audioSource.onComplete.remove($bind(this,this.audioSource_onComplete));
		this.__audioSource.dispose();
		this.__audioSource = null;
		this.__isValid = false;
	}
	,__startSampleData: function() {
		var _gthis = this;
		var webAudioContext = this.__sound.__webAudioContext;
		if(webAudioContext != null) {
			this.__sampleDataEvent = new openfl_events_SampleDataEvent("sampleData");
			this.__sound.dispatchEvent(this.__sampleDataEvent);
			var bufferSize = this.__sampleDataEvent.getBufferSize();
			if(bufferSize == 0) {
				openfl_Lib.setTimeout(function() {
					_gthis.stop();
					_gthis.dispatchEvent(new openfl_events_Event("soundComplete"));
				},1);
			} else {
				this.__processor = webAudioContext.createScriptProcessor(bufferSize,0,2);
				this.__processor.connect(webAudioContext.destination);
				this.__processor.onaudioprocess = $bind(this,this.onSample);
				webAudioContext.resume();
			}
		}
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,__initAudioSource: function(audioSource) {
		this.__audioSource = audioSource;
		if(this.__audioSource == null) {
			return;
		}
		this.__audioSource.onComplete.add($bind(this,this.audioSource_onComplete));
		this.__isValid = true;
		this.__audioSource.play();
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__audioSource.get_currentTime() + this.__audioSource.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__audioSource.set_currentTime((value | 0) - this.__audioSource.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) {
				pan = -1;
			}
			if(pan > 1) {
				pan = 1;
			}
			var volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			if(this.__isValid) {
				this.__audioSource.set_gain(volume);
				var position = this.__audioSource.get_position();
				position.x = pan;
				position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
				this.__audioSource.set_position(position);
				return value;
			}
		}
		return value;
	}
	,audioSource_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,onSample: function(event) {
		var hasSampleData = false;
		if(this.__firstRun) {
			hasSampleData = true;
			this.__firstRun = false;
		} else {
			openfl_utils_ByteArray.set_length(this.__sampleDataEvent.data,0);
			this.__sound.dispatchEvent(this.__sampleDataEvent);
			hasSampleData = UInt.gt(openfl_utils_ByteArray.get_length(this.__sampleDataEvent.data),0);
		}
		if(hasSampleData) {
			this.__sampleDataEvent.getSamples(event);
		} else {
			this.stop();
			this.dispatchEvent(new openfl_events_Event("soundComplete"));
		}
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	if(bufferTime == null) {
		bufferTime = 1000;
	}
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = "openfl.media.SoundLoaderContext";
openfl_media_SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = "openfl.media.SoundTransform";
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = "openfl.media.SoundMixer";
openfl_media_SoundMixer.__properties__ = {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform"};
openfl_media_SoundMixer.areSoundsInaccessible = function() {
	return false;
};
openfl_media_SoundMixer.stopAll = function() {
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.stop();
	}
};
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
openfl_media_SoundMixer.get_soundTransform = function() {
	return openfl_media_SoundMixer.__soundTransform;
};
openfl_media_SoundMixer.set_soundTransform = function(value) {
	openfl_media_SoundMixer.__soundTransform = value.clone();
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.__updateTransform();
	}
	return value;
};
var openfl_media_Video = function(width,height) {
	if(height == null) {
		height = 240;
	}
	if(width == null) {
		width = 320;
	}
	openfl_display_DisplayObject.call(this);
	this.__drawableType = 8;
	this.__width = width;
	this.__height = height;
	this.__textureTime = -1;
	this.smoothing = false;
	this.deblocking = 0;
};
$hxClasses["openfl.media.Video"] = openfl_media_Video;
openfl_media_Video.__name__ = "openfl.media.Video";
openfl_media_Video.__super__ = openfl_display_DisplayObject;
openfl_media_Video.prototype = $extend(openfl_display_DisplayObject.prototype,{
	deblocking: null
	,smoothing: null
	,__active: null
	,__buffer: null
	,__bufferAlpha: null
	,__bufferColorTransform: null
	,__bufferContext: null
	,__bufferData: null
	,__currentWidth: null
	,__currentHeight: null
	,__dirty: null
	,__height: null
	,__indexBuffer: null
	,__indexBufferContext: null
	,__indexBufferData: null
	,__stream: null
	,__texture: null
	,__textureTime: null
	,__uvRect: null
	,__vertexBuffer: null
	,__vertexBufferContext: null
	,__vertexBufferData: null
	,__width: null
	,attachNetStream: function(netStream) {
		this.__stream = netStream;
		if(this.__stream != null && this.__stream.__video != null && !this.__stream.__closed) {
			this.__stream.__video.play();
		}
	}
	,clear: function() {
	}
	,__enterFrame: function(deltaTime) {
		if(this.__renderable && this.__stream != null) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.setTo(0,0,this.__width,this.__height);
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getIndexBuffer: function(context) {
		var gl = context.gl;
		if(this.__indexBuffer == null || this.__indexBufferContext != context.__context) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			this.__indexBufferData = new Uint16Array(6);
			this.__indexBufferData[0] = 0;
			this.__indexBufferData[1] = 1;
			this.__indexBufferData[2] = 2;
			this.__indexBufferData[3] = 2;
			this.__indexBufferData[4] = 1;
			this.__indexBufferData[5] = 3;
			this.__indexBufferContext = context.__context;
			this.__indexBuffer = context.createIndexBuffer(6);
			this.__indexBuffer.uploadFromTypedArray(this.__indexBufferData);
		}
		return this.__indexBuffer;
	}
	,__getTexture: function(context) {
		if(this.__stream == null || this.__stream.__video == null) {
			return null;
		}
		var gl = context.__context.webgl;
		var internalFormat = gl.RGBA;
		var format = gl.RGBA;
		if(!this.__stream.__closed && this.__stream.__video.currentTime != this.__textureTime) {
			if(this.__texture == null) {
				this.__texture = context.createRectangleTexture(this.__stream.__video.videoWidth,this.__stream.__video.videoHeight,1,false);
			}
			context.__bindGLTexture2D(this.__texture.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,this.__stream.__video);
			this.__textureTime = this.__stream.__video.currentTime;
		}
		return this.__texture;
	}
	,__getVertexBuffer: function(context) {
		var gl = context.gl;
		if(this.__vertexBuffer == null || this.__vertexBufferContext != context.__context || this.__currentWidth != this.get_width() || this.__currentHeight != this.get_height()) {
			this.__currentWidth = this.get_width();
			this.__currentHeight = this.get_height();
			var uvWidth = 1;
			var uvHeight = 1;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			this.__vertexBufferData = new Float32Array(20);
			this.__vertexBufferData[0] = this.get_width();
			this.__vertexBufferData[1] = this.get_height();
			this.__vertexBufferData[3] = uvWidth;
			this.__vertexBufferData[4] = uvHeight;
			this.__vertexBufferData[6] = this.get_height();
			this.__vertexBufferData[9] = uvHeight;
			this.__vertexBufferData[10] = this.get_width();
			this.__vertexBufferData[13] = uvWidth;
			this.__vertexBufferContext = context.__context;
			this.__vertexBuffer = context.createVertexBuffer(3,5);
			this.__vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__vertexBufferData));
		}
		return this.__vertexBuffer;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(px > 0 && py > 0 && px <= this.__width && py <= this.__height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var point = openfl_geom_Point.__pool.get();
		point.setTo(x,y);
		this.__globalToLocal(point,point);
		var hit = point.x > 0 && point.y > 0 && point.x <= this.__width && point.y <= this.__height;
		openfl_geom_Point.__pool.release(point);
		return hit;
	}
	,get_height: function() {
		return this.__height * this.get_scaleY();
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__height) {
			this.__setTransformDirty();
			this.__dirty = true;
		}
		this.set_scaleY(1);
		return this.__height = value;
	}
	,get_videoHeight: function() {
		if(this.__stream != null && this.__stream.__video != null) {
			return this.__stream.__video.videoHeight | 0;
		}
		return 0;
	}
	,get_videoWidth: function() {
		if(this.__stream != null && this.__stream.__video != null) {
			return this.__stream.__video.videoWidth | 0;
		}
		return 0;
	}
	,get_width: function() {
		return this.__width * this.__scaleX;
	}
	,set_width: function(value) {
		if(this.__scaleX != 1 || this.__width != value) {
			this.__setTransformDirty();
			this.__dirty = true;
		}
		this.set_scaleX(1);
		return this.__width = value;
	}
	,__class__: openfl_media_Video
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_videoWidth:"get_videoWidth",get_videoHeight:"get_videoHeight"})
});
var openfl_net_IDynamicPropertyOutput = function() { };
$hxClasses["openfl.net.IDynamicPropertyOutput"] = openfl_net_IDynamicPropertyOutput;
openfl_net_IDynamicPropertyOutput.__name__ = "openfl.net.IDynamicPropertyOutput";
openfl_net_IDynamicPropertyOutput.__isInterface__ = true;
openfl_net_IDynamicPropertyOutput.prototype = {
	writeDynamicProperty: null
	,__class__: openfl_net_IDynamicPropertyOutput
};
var openfl_net_IDynamicPropertyWriter = function() { };
$hxClasses["openfl.net.IDynamicPropertyWriter"] = openfl_net_IDynamicPropertyWriter;
openfl_net_IDynamicPropertyWriter.__name__ = "openfl.net.IDynamicPropertyWriter";
openfl_net_IDynamicPropertyWriter.__isInterface__ = true;
openfl_net_IDynamicPropertyWriter.prototype = {
	writeDynamicProperties: null
	,__class__: openfl_net_IDynamicPropertyWriter
};
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = "openfl.net.NetConnection";
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connect: function(command,p1,p2,p3,p4,p5) {
		if(command != null) {
			throw haxe_Exception.thrown("Error: Can only connect in \"HTTP streaming\" mode");
		}
		this.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,true,{ code : "NetConnection.Connect.Success"}));
	}
	,__class__: openfl_net_NetConnection
});
var openfl_net_NetStream = function(connection,peerID) {
	openfl_events_EventDispatcher.call(this);
	this.__connection = connection;
	this.__soundTransform = new openfl_media_SoundTransform();
	this.__video = window.document.createElement("video");
	this.__video.setAttribute("playsinline","");
	this.__video.setAttribute("webkit-playsinline","");
	this.__video.setAttribute("crossorigin","anonymous");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
	this.__video.addEventListener("loadedmetadata",$bind(this,this.video_onLoadMetaData),false);
};
$hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
openfl_net_NetStream.__name__ = "openfl.net.NetStream";
openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
openfl_net_NetStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	audioCodec: null
	,bufferLength: null
	,bufferTime: null
	,bytesLoaded: null
	,bytesTotal: null
	,checkPolicyFile: null
	,client: null
	,currentFPS: null
	,decodedFrames: null
	,liveDelay: null
	,objectEncoding: null
	,time: null
	,videoCode: null
	,__closed: null
	,__connection: null
	,__soundTransform: null
	,__timer: null
	,__video: null
	,close: function() {
		if(this.__video == null) {
			return;
		}
		this.__closed = true;
		this.__video.pause();
		this.__video.src = "";
		this.time = 0;
	}
	,dispose: function() {
		this.close();
		this.__video = null;
	}
	,pause: function() {
		if(this.__video != null) {
			this.__video.pause();
		}
	}
	,play: function(url,p1,p2,p3,p4,p5) {
		if(this.__video == null) {
			return;
		}
		this.__video.volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
		if(typeof(url) == "string") {
			this.__video.src = url;
		} else {
			this.__video.srcObject = url;
		}
		this.__video.play();
	}
	,requestVideoStatus: function() {
		var _gthis = this;
		if(this.__video == null) {
			return;
		}
		if(this.__timer == null) {
			this.__timer = new haxe_Timer(1);
		}
		this.__timer.run = function() {
			if(_gthis.__video.paused) {
				_gthis.__playStatus("NetStream.Play.pause");
			} else {
				_gthis.__playStatus("NetStream.Play.playing");
			}
			_gthis.__timer.stop();
		};
	}
	,resume: function() {
		if(this.__video != null) {
			this.__video.play();
		}
	}
	,seek: function(time) {
		if(this.__video == null) {
			return;
		}
		if(time < 0) {
			time = 0;
		} else if(time > this.__video.duration) {
			time = this.__video.duration;
		}
		this.__dispatchStatus("NetStream.SeekStart.Notify");
		this.__video.currentTime = time;
	}
	,togglePause: function() {
		if(this.__video == null) {
			return;
		}
		if(this.__video.paused) {
			this.__video.play();
		} else {
			this.__video.pause();
		}
	}
	,__dispatchStatus: function(code) {
		var event = new openfl_events_NetStatusEvent("netStatus",false,false,{ code : code});
		this.__connection.dispatchEvent(event);
		this.dispatchEvent(event);
	}
	,__playStatus: function(code) {
		if(this.__video == null) {
			return;
		}
		if(this.client != null) {
			try {
				var handler = this.client.onPlayStatus;
				handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__dispatchStatus("NetStream.Play.Stop");
		this.__dispatchStatus("NetStream.Play.Complete");
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__dispatchStatus("NetStream.Play.Stop");
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadMetaData: function(event) {
		if(this.__video == null) {
			return;
		}
		if(this.client != null) {
			try {
				var handler = this.client.onMetaData;
				handler({ width : this.__video.videoWidth, height : this.__video.videoHeight, duration : this.__video.duration});
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__dispatchStatus("NetStream.Play.Start");
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
		this.__dispatchStatus("NetStream.Seek.Complete");
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		if(this.__video == null) {
			return;
		}
		this.time = this.__video.currentTime;
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			if(this.__video != null) {
				this.__video.volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			}
		}
		return value;
	}
	,get_speed: function() {
		if(this.__video != null) {
			return this.__video.playbackRate;
		} else {
			return 1;
		}
	}
	,set_speed: function(value) {
		if(this.__video != null) {
			return this.__video.playbackRate = value;
		} else {
			return value;
		}
	}
	,__class__: openfl_net_NetStream
	,__properties__: {set_speed:"set_speed",get_speed:"get_speed",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform"}
});
var openfl_net_ObjectEncoding = {};
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = 1;
	if(request != null) {
		this.load(request);
	}
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = "openfl.net.URLLoader";
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,__httpRequest: null
	,close: function() {
		if(this.__httpRequest != null) {
			this.__httpRequest.cancel();
		}
	}
	,load: function(request) {
		var _gthis = this;
		var openEvent = new openfl_events_Event("open");
		this.dispatchEvent(openEvent);
		if(this.dataFormat == 0) {
			var httpRequest = new lime_net__$HTTPRequest_$openfl_$utils_$ByteArray();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.__dispatchResponseStatus();
				_gthis.__dispatchStatus();
				_gthis.data = data;
				var event = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event);
			});
		} else {
			var httpRequest = new lime_net__$HTTPRequest_$String();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.__dispatchResponseStatus();
				_gthis.__dispatchStatus();
				_gthis.data = data;
				var event = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event);
			});
		}
	}
	,__dispatchResponseStatus: function() {
		var responseStatusEvent = new openfl_events_HTTPStatusEvent("httpResponseStatus",false,false,this.__httpRequest.responseStatus);
		responseStatusEvent.responseURL = this.__httpRequest.uri;
		var headers = [];
		if(this.__httpRequest.enableResponseHeaders && this.__httpRequest.responseHeaders != null) {
			var _g = 0;
			var _g1 = this.__httpRequest.responseHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				headers.push(new openfl_net_URLRequestHeader(header.name,header.value));
			}
		}
		responseStatusEvent.responseHeaders = headers;
		this.dispatchEvent(responseStatusEvent);
	}
	,__dispatchStatus: function() {
		var statusEvent = new openfl_events_HTTPStatusEvent("httpStatus",false,false,this.__httpRequest.responseStatus);
		this.dispatchEvent(statusEvent);
	}
	,__prepareRequest: function(httpRequest,request) {
		this.__httpRequest = httpRequest;
		this.__httpRequest.uri = request.url;
		this.__httpRequest.method = request.method;
		if(request.data != null) {
			if(Type.typeof(request.data) == ValueType.TObject) {
				var fields = Reflect.fields(request.data);
				var _g = 0;
				while(_g < fields.length) {
					var field = fields[_g];
					++_g;
					this.__httpRequest.formData.h[field] = Reflect.field(request.data,field);
				}
			} else if(((request.data) instanceof haxe_io_Bytes)) {
				this.__httpRequest.data = request.data;
			} else {
				this.__httpRequest.data = haxe_io_Bytes.ofString(Std.string(request.data));
			}
		}
		this.__httpRequest.contentType = request.contentType;
		if(request.requestHeaders != null) {
			var _g = 0;
			var _g1 = request.requestHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				this.__httpRequest.headers.push(new lime_net_HTTPRequestHeader(header.name,header.value));
			}
		}
		this.__httpRequest.followRedirects = request.followRedirects;
		this.__httpRequest.timeout = request.idleTimeout | 0;
		this.__httpRequest.manageCookies = request.manageCookies;
		var userAgent = request.userAgent;
		if(userAgent == null) {
			userAgent = "Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) OpenFL/1.0";
		}
		this.__httpRequest.userAgent = request.userAgent;
		this.__httpRequest.enableResponseHeaders = true;
	}
	,httpRequest_onError: function(error) {
		this.__dispatchResponseStatus();
		this.__dispatchStatus();
		if(((this.__httpRequest) instanceof lime_net__$HTTPRequest_$Bytes)) {
			var bytesRequest = this.__httpRequest;
			this.data = bytesRequest.responseData;
		} else if(((this.__httpRequest) instanceof lime_net__$HTTPRequest_$String)) {
			var stringRequest = this.__httpRequest;
			this.data = stringRequest.responseData;
		}
		if(error == 403) {
			var event = new openfl_events_SecurityErrorEvent("securityError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		} else {
			var event = new openfl_events_IOErrorEvent("ioError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		}
	}
	,httpRequest_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_URLLoader
});
var openfl_net_URLLoaderDataFormat = {};
openfl_net_URLLoaderDataFormat.fromString = function(value) {
	switch(value) {
	case "binary":
		return 0;
	case "text":
		return 1;
	case "variables":
		return 2;
	default:
		return null;
	}
};
openfl_net_URLLoaderDataFormat.toString = function(this1) {
	switch(this1) {
	case 0:
		return "binary";
	case 1:
		return "text";
	case 2:
		return "variables";
	default:
		return null;
	}
};
var openfl_net_URLRequest = function(url) {
	if(url != null) {
		this.url = url;
	}
	this.contentType = null;
	this.followRedirects = openfl_net_URLRequestDefaults.followRedirects;
	if(openfl_net_URLRequestDefaults.idleTimeout > 0) {
		this.idleTimeout = openfl_net_URLRequestDefaults.idleTimeout;
	} else {
		this.idleTimeout = 30000;
	}
	this.manageCookies = openfl_net_URLRequestDefaults.manageCookies;
	this.method = "GET";
	this.requestHeaders = [];
	this.userAgent = openfl_net_URLRequestDefaults.userAgent;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = "openfl.net.URLRequest";
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,followRedirects: null
	,idleTimeout: null
	,manageCookies: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestDefaults = function() { };
$hxClasses["openfl.net.URLRequestDefaults"] = openfl_net_URLRequestDefaults;
openfl_net_URLRequestDefaults.__name__ = "openfl.net.URLRequestDefaults";
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = "openfl.net.URLRequestHeader";
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = "openfl.system.ApplicationDomain";
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return $hxClasses[name];
	}
	,hasDefinition: function(name) {
		return $hxClasses[name] != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = "openfl.system.LoaderContext";
openfl_system_LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = "openfl.system.SecurityDomain";
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_text_AntiAliasType = {};
openfl_text_AntiAliasType.fromString = function(value) {
	switch(value) {
	case "advanced":
		return 0;
	case "normal":
		return 1;
	default:
		return null;
	}
};
openfl_text_AntiAliasType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "advanced";
	case 1:
		return "normal";
	default:
		return null;
	}
};
var openfl_text_FontStyle = {};
openfl_text_FontStyle.fromString = function(value) {
	switch(value) {
	case "bold":
		return 0;
	case "boldItalic":
		return 1;
	case "italic":
		return 2;
	case "regular":
		return 3;
	default:
		return null;
	}
};
openfl_text_FontStyle.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bold";
	case 1:
		return "boldItalic";
	case 2:
		return "italic";
	case 3:
		return "regular";
	default:
		return null;
	}
};
var openfl_text_FontType = {};
openfl_text_FontType.fromString = function(value) {
	switch(value) {
	case "device":
		return 0;
	case "embedded":
		return 1;
	case "embeddedCFF":
		return 2;
	default:
		return null;
	}
};
openfl_text_FontType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "device";
	case 1:
		return "embedded";
	case 2:
		return "embeddedCFF";
	default:
		return null;
	}
};
var openfl_text_GridFitType = {};
openfl_text_GridFitType.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "pixel":
		return 1;
	case "subpixel":
		return 2;
	default:
		return null;
	}
};
openfl_text_GridFitType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "none";
	case 1:
		return "pixel";
	case 2:
		return "subpixel";
	default:
		return null;
	}
};
var openfl_text_StyleSheet = function() {
	openfl_events_EventDispatcher.call(this);
	this.clear();
};
$hxClasses["openfl.text.StyleSheet"] = openfl_text_StyleSheet;
openfl_text_StyleSheet.__name__ = "openfl.text.StyleSheet";
openfl_text_StyleSheet.__super__ = openfl_events_EventDispatcher;
openfl_text_StyleSheet.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__styleNames: null
	,__styleNamesDirty: null
	,__styles: null
	,clear: function() {
		this.__styleNamesDirty = false;
		this.__styleNames = null;
		this.__styles = new haxe_ds_StringMap();
	}
	,getStyle: function(styleName) {
		styleName = styleName.toLowerCase();
		if(Object.prototype.hasOwnProperty.call(this.__styles.h,styleName)) {
			return this.__styles.h[styleName];
		} else {
			return null;
		}
	}
	,parseCSS: function(CSSText) {
		var _g = new haxe_ds_StringMap();
		_g.h["silent"] = true;
		var parser = new openfl_text__$internal_CSSParser(_g);
		var ast = parser.parse(CSSText);
		if(ast != null) {
			var rules = ast.h["rules"];
			var _g = 0;
			while(_g < rules.length) {
				var rule = rules[_g];
				++_g;
				var styleName = Object.prototype.hasOwnProperty.call(rule.h,"selectors") ? rule.h["selectors"] : null;
				if(styleName != null) {
					styleName = styleName.toLowerCase();
					if(!Object.prototype.hasOwnProperty.call(this.__styles.h,styleName)) {
						this.__styles.h[styleName] = { };
						this.__styleNamesDirty = true;
					}
					var object = this.__styles.h[styleName];
					var declarations = rule.h["declarations"];
					if(declarations != null) {
						var _g1 = 0;
						while(_g1 < declarations.length) {
							var declaration = declarations[_g1];
							++_g1;
							var property = declaration.h["property"];
							var value = Std.string(declaration.h["value"]);
							if(property != null) {
								if(property == null) {
									object[property] = value;
								} else {
									switch(property) {
									case "font-family":
										var value1 = StringTools.replace(value,"\"","");
										var this1 = object;
										if(this1 != null) {
											Reflect.setProperty(this1,"fontFamily",value1);
										}
										break;
									case "font-size":
										var this2 = object;
										if(this2 != null) {
											Reflect.setProperty(this2,"fontSize",value);
										}
										break;
									case "font-style":
										var this3 = object;
										if(this3 != null) {
											Reflect.setProperty(this3,"fontStyle",value);
										}
										break;
									case "font-weight":
										var this4 = object;
										if(this4 != null) {
											Reflect.setProperty(this4,"fontWeight",value);
										}
										break;
									case "letter-spacing":
										var this5 = object;
										if(this5 != null) {
											Reflect.setProperty(this5,"letterSpacing",value);
										}
										break;
									case "margin-left":
										var this6 = object;
										if(this6 != null) {
											Reflect.setProperty(this6,"marginLeft",value);
										}
										break;
									case "text-align":
										var this7 = object;
										if(this7 != null) {
											Reflect.setProperty(this7,"textAlign",value);
										}
										break;
									case "text-decoration":
										var this8 = object;
										if(this8 != null) {
											Reflect.setProperty(this8,"textDecoration",value);
										}
										break;
									case "text-indent":
										var this9 = object;
										if(this9 != null) {
											Reflect.setProperty(this9,"textIndent",value);
										}
										break;
									default:
										object[property] = value;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	,setStyle: function(styleName,styleObject) {
		styleName = styleName.toLowerCase();
		if(styleObject == null) {
			if(Object.prototype.hasOwnProperty.call(this.__styles.h,styleName)) {
				var _this = this.__styles;
				if(Object.prototype.hasOwnProperty.call(_this.h,styleName)) {
					delete(_this.h[styleName]);
				}
			}
		} else {
			var object = { };
			var _g = 0;
			var _g1 = Reflect.fields(styleObject);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				object[field] = Reflect.field(styleObject,field);
			}
			this.__styles.h[styleName] = object;
		}
	}
	,transform: function(formatObject) {
		var format = new openfl_text_TextFormat();
		this.__applyStyleObject(formatObject,format);
		return format;
	}
	,__applyStyle: function(styleName,textFormat) {
		styleName = styleName.toLowerCase();
		if(Object.prototype.hasOwnProperty.call(this.__styles.h,styleName)) {
			var style = this.__styles.h[styleName];
			this.__applyStyleObject(style,textFormat);
		}
	}
	,__applyStyleObject: function(styleObject,textFormat) {
		if(styleObject != null) {
			var hex = new EReg("[0-9A-Fa-f]+","");
			var numeric = new EReg("[0-9]+","");
			var tmp;
			var this1 = styleObject;
			if(this1 != null && Object.prototype.hasOwnProperty.call(this1,"color")) {
				var this1 = openfl_utils_Object.__get(styleObject,"color");
				tmp = hex.match(this1 == null ? null : Std.string(this1));
			} else {
				tmp = false;
			}
			if(tmp) {
				textFormat.color = Std.parseInt("0x" + hex.matched(0));
			}
			var this1 = styleObject;
			if(this1 != null && Object.prototype.hasOwnProperty.call(this1,"fontFamily")) {
				var this1 = openfl_utils_Object.__get(styleObject,"fontFamily");
				textFormat.font = this.__parseFont(this1 == null ? null : Std.string(this1));
			}
			var tmp;
			var this1 = styleObject;
			if(this1 != null && Object.prototype.hasOwnProperty.call(this1,"fontSize")) {
				var this1 = openfl_utils_Object.__get(styleObject,"fontSize");
				tmp = numeric.match(this1 == null ? null : Std.string(this1));
			} else {
				tmp = false;
			}
			if(tmp) {
				textFormat.size = Std.parseInt(numeric.matched(0));
			}
			var this1 = styleObject;
			if(this1 != null && Object.prototype.hasOwnProperty.call(this1,"fontStyle")) {
				switch(openfl_utils_Object.__get(styleObject,"fontStyle")) {
				case "italic":
					textFormat.italic = true;
					break;
				case "normal":
					textFormat.italic = false;
					break;
				default:
				}
			}
			var this1 = styleObject;
			if(this1 != null && Object.prototype.hasOwnProperty.call(this1,"fontWeight")) {
				switch(openfl_utils_Object.__get(styleObject,"fontWeight")) {
				case "bold":
					textFormat.bold = true;
					break;
				case "normal":
					textFormat.bold = false;
					break;
				default:
				}
			}
			var tmp;
			var this1 = styleObject;
			if(this1 != null && Object.prototype.hasOwnProperty.call(this1,"leading")) {
				var this1 = openfl_utils_Object.__get(styleObject,"leading");
				tmp = numeric.match(this1 == null ? null : Std.string(this1));
			} else {
				tmp = false;
			}
			if(tmp) {
				textFormat.leading = Std.parseInt(numeric.matched(0));
			}
			var tmp;
			var this1 = styleObject;
			if(this1 != null && Object.prototype.hasOwnProperty.call(this1,"letterSpacing")) {
				var this1 = openfl_utils_Object.__get(styleObject,"letterSpacing");
				tmp = numeric.match(this1 == null ? null : Std.string(this1));
			} else {
				tmp = false;
			}
			if(tmp) {
				textFormat.letterSpacing = parseFloat(numeric.matched(0));
			}
			var tmp;
			var this1 = styleObject;
			if(this1 != null && Object.prototype.hasOwnProperty.call(this1,"marginLeft")) {
				var this1 = openfl_utils_Object.__get(styleObject,"marginLeft");
				tmp = numeric.match(this1 == null ? null : Std.string(this1));
			} else {
				tmp = false;
			}
			if(tmp) {
				textFormat.leftMargin = Std.parseInt(numeric.matched(0));
			}
			var tmp;
			var this1 = styleObject;
			if(this1 != null && Object.prototype.hasOwnProperty.call(this1,"marginRight")) {
				var this1 = openfl_utils_Object.__get(styleObject,"marginRight");
				tmp = numeric.match(this1 == null ? null : Std.string(this1));
			} else {
				tmp = false;
			}
			if(tmp) {
				textFormat.rightMargin = Std.parseInt(numeric.matched(0));
			}
			var this1 = styleObject;
			if(this1 != null && Object.prototype.hasOwnProperty.call(this1,"textAlign")) {
				switch(openfl_utils_Object.__get(styleObject,"textAlign")) {
				case "center":
					textFormat.align = 0;
					break;
				case "justify":
					textFormat.align = 2;
					break;
				case "left":
					textFormat.align = 3;
					break;
				case "right":
					textFormat.align = 4;
					break;
				default:
				}
			}
			var this1 = styleObject;
			if(this1 != null && Object.prototype.hasOwnProperty.call(this1,"textDecoration")) {
				switch(openfl_utils_Object.__get(styleObject,"textDecoration")) {
				case "none":
					textFormat.underline = false;
					break;
				case "underline":
					textFormat.underline = true;
					break;
				default:
				}
			}
			var tmp;
			var this1 = styleObject;
			if(this1 != null && Object.prototype.hasOwnProperty.call(this1,"textIndent")) {
				var this1 = openfl_utils_Object.__get(styleObject,"textIndent");
				tmp = numeric.match(this1 == null ? null : Std.string(this1));
			} else {
				tmp = false;
			}
			if(tmp) {
				textFormat.blockIndent = Std.parseInt(numeric.matched(0));
			}
		}
	}
	,__parseFont: function(fontFamily) {
		if(fontFamily == null) {
			return null;
		}
		if(fontFamily.indexOf(",") > -1) {
			fontFamily = HxOverrides.substr(fontFamily,0,fontFamily.indexOf(","));
		}
		switch(fontFamily) {
		case "mono":
			return "_typewriter";
		case "sans-serif":
			return "_sans";
		case "serif":
			return "_serif";
		default:
			return fontFamily;
		}
	}
	,get_styleNames: function() {
		if(this.__styleNames == null || this.__styleNamesDirty) {
			this.__styleNames = [];
			var h = this.__styles.h;
			var style_h = h;
			var style_keys = Object.keys(h);
			var style_length = style_keys.length;
			var style_current = 0;
			while(style_current < style_length) {
				var style = style_keys[style_current++];
				this.__styleNames.push(style);
			}
			this.__styleNamesDirty = false;
		}
		return this.__styleNames;
	}
	,__class__: openfl_text_StyleSheet
	,__properties__: {get_styleNames:"get_styleNames"}
});
var openfl_text_TextField = function() {
	this.__forceCachedBitmapUpdate = false;
	this.__renderedOnCanvasWhileOnDOM = false;
	this.__mouseScrollVCounter = 0;
	this.condenseWhite = false;
	openfl_display_InteractiveObject.call(this);
	this.__drawableType = 7;
	this.__caretIndex = -1;
	this.__selectionIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl_text__$internal_TextEngine(this);
	this.__layoutDirty = true;
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__mouseWheelEnabled = true;
	this.__text = "";
	this.doubleClickEnabled = true;
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl_text__$internal_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
	this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
	this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
	this.addEventListener("keyDown",$bind(this,this.this_onKeyDown));
	this.addEventListener("mouseWheel",$bind(this,this.this_onMouseWheel));
	this.addEventListener("doubleClick",$bind(this,this.this_onDoubleClick));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = "openfl.text.TextField";
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	condenseWhite: null
	,__bounds: null
	,__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__displayAsPassword: null
	,__domRender: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__mouseScrollVCounter: null
	,__mouseWheelEnabled: null
	,__offsetX: null
	,__offsetY: null
	,__selectionIndex: null
	,__showCursor: null
	,__styleSheet: null
	,__text: null
	,__htmlText: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,__renderedOnCanvasWhileOnDOM: null
	,__forceCachedBitmapUpdate: null
	,appendText: function(text) {
		if(text == null || text == "") {
			return;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		this.__updateText(this.__text + text);
		this.__textEngine.textFormatRanges.get(this.__textEngine.textFormatRanges.get_length() - 1).end = this.__text.length;
		this.__selectionIndex = this.__caretIndex = this.__text.length;
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return null;
		}
		var rect = new openfl_geom_Rectangle();
		if(this.__getCharBoundaries(charIndex,rect)) {
			return rect;
		} else {
			return null;
		}
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g = 0;
		var _g1 = this.get_scrollV() - 1;
		while(_g < _g1) {
			var i = _g++;
			y += this.__textEngine.lineHeights.get(i);
		}
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(y >= group1.offsetY && y <= group1.offsetY + group1.height) {
				if(x >= group1.offsetX && x <= group1.offsetX + group1.width) {
					var advance = 0.0;
					var _g = 0;
					var _g1 = group1.positions.length;
					while(_g < _g1) {
						var i = _g++;
						advance += group1.positions[i];
						if(x <= group1.offsetX + advance) {
							return group1.startIndex + i;
						}
					}
					return group1.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > this.get_text().length) {
			return -1;
		}
		if(this.__textEngine.lineBreaks.get_length() == 0) {
			return 0;
		}
		var _g = 0;
		var _g1 = this.__textEngine.lineBreaks.get_length();
		while(_g < _g1) {
			var i = _g++;
			if(charIndex <= this.__textEngine.lineBreaks.get(i)) {
				if(i == 0) {
					return 0;
				} else {
					return this.__textEngine.lineBreaks.get(i - 1) + 1;
				}
			}
		}
		return this.__textEngine.lineBreaks.get(this.__textEngine.lineBreaks.get_length() - 1) + 1;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.get_scrollV() - 1;
		while(_g < _g1) {
			var i = _g++;
			y += this.__textEngine.lineHeights.get(i);
		}
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(y >= group1.offsetY && y <= group1.offsetY + group1.height) {
				return group1.lineIndex;
			}
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length) {
			return -1;
		}
		this.__updateLayout();
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.startIndex <= charIndex && group1.endIndex >= charIndex) {
				return group1.lineIndex;
			}
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return 0;
		}
		var startIndex = -1;
		var endIndex = -1;
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group1.startIndex;
				}
			} else if(group1.lineIndex == lineIndex + 1) {
				endIndex = group1.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = this.__text.length;
		}
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents.get(lineIndex);
		var descender = this.__textEngine.lineDescents.get(lineIndex);
		var leading = this.__textEngine.lineLeadings.get(lineIndex);
		var lineHeight = this.__textEngine.lineHeights.get(lineIndex);
		var lineWidth = this.__textEngine.lineWidths.get(lineIndex);
		var margin;
		switch(this.__textFormat.align) {
		case 0:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		case 1:case 4:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 2:case 3:case 5:
			margin = 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.lineIndex == lineIndex) {
				return group1.startIndex;
			}
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return null;
		}
		var startIndex = -1;
		var endIndex = -1;
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group1.startIndex;
				}
			} else if(group1.lineIndex == lineIndex + 1) {
				endIndex = group1.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = this.__text.length;
		}
		return this.__textEngine.text.substring(startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > this.get_text().length) {
			return -1;
		}
		var startIndex = this.getFirstCharInParagraph(charIndex);
		if(charIndex >= this.get_text().length) {
			return this.get_text().length - startIndex + 1;
		}
		var endIndex = this.__textEngine.getLineBreakIndex(charIndex) + 1;
		if(endIndex == 0) {
			endIndex = this.__text.length;
		}
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = -1;
		}
		if(beginIndex == null) {
			beginIndex = -1;
		}
		var format = null;
		if(beginIndex >= this.get_text().length || beginIndex < -1 || endIndex > this.get_text().length || endIndex < -1) {
			throw new openfl_errors_RangeError("The supplied index is out of bounds");
		}
		if(beginIndex == -1) {
			beginIndex = 0;
		}
		if(endIndex == -1) {
			endIndex = this.get_text().length;
		}
		if(beginIndex >= endIndex) {
			return new openfl_text_TextFormat();
		}
		var group = this.__textEngine.textFormatRanges.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.start <= beginIndex && group1.end > beginIndex || group1.start < endIndex && group1.end >= endIndex) {
				if(format == null) {
					format = group1.format.clone();
				} else {
					if(group1.format.font != format.font) {
						format.font = null;
					}
					if(group1.format.size != format.size) {
						format.size = null;
					}
					if(group1.format.color != format.color) {
						format.color = null;
					}
					if(group1.format.bold != format.bold) {
						format.bold = null;
					}
					if(group1.format.italic != format.italic) {
						format.italic = null;
					}
					if(group1.format.underline != format.underline) {
						format.underline = null;
					}
					if(group1.format.url != format.url) {
						format.url = null;
					}
					if(group1.format.target != format.target) {
						format.target = null;
					}
					if(group1.format.align != format.align) {
						format.align = null;
					}
					if(group1.format.leftMargin != format.leftMargin) {
						format.leftMargin = null;
					}
					if(group1.format.rightMargin != format.rightMargin) {
						format.rightMargin = null;
					}
					if(group1.format.indent != format.indent) {
						format.indent = null;
					}
					if(group1.format.leading != format.leading) {
						format.leading = null;
					}
					if(group1.format.blockIndent != format.blockIndent) {
						format.blockIndent = null;
					}
					if(group1.format.bullet != format.bullet) {
						format.bullet = null;
					}
					if(group1.format.kerning != format.kerning) {
						format.kerning = null;
					}
					if(group1.format.letterSpacing != format.letterSpacing) {
						format.letterSpacing = null;
					}
					if(group1.format.tabStops != format.tabStops) {
						format.tabStops = null;
					}
				}
			}
		}
		if(format == null) {
			format = new openfl_text_TextFormat();
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		this.__replaceSelectedText(value,false);
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		this.__replaceText(beginIndex,endIndex,newText,false);
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
		this.__updateScrollV();
		this.__updateScrollH();
		if(this.stage != null && this.stage.get_focus() == this) {
			this.__stopCursorTimer();
			this.__startCursorTimer();
		}
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = -1;
		}
		if(beginIndex == null) {
			beginIndex = -1;
		}
		var max = this.get_text().length;
		var range;
		if(beginIndex == -1) {
			if(endIndex == -1) {
				endIndex = max;
			}
			beginIndex = 0;
		} else if(endIndex == -1) {
			endIndex = beginIndex + 1;
		}
		if(beginIndex == endIndex) {
			return;
		}
		if(beginIndex < 0 || endIndex <= 0 || endIndex < beginIndex || beginIndex >= max || endIndex > max) {
			throw new openfl_errors_RangeError();
		}
		if(beginIndex == 0 && endIndex == max) {
			this.__textEngine.textFormatRanges.set_length(1);
			range = this.__textEngine.textFormatRanges.get(0);
			range.start = 0;
			range.end = max;
			range.format.__merge(format);
		} else {
			var index = 0;
			var newRange;
			while(index < this.__textEngine.textFormatRanges.get_length()) {
				range = this.__textEngine.textFormatRanges.get(index);
				if(range.end <= beginIndex) {
					++index;
				} else if(range.start >= endIndex) {
					break;
				} else if(range.start <= beginIndex && range.end >= endIndex) {
					if(range.start == beginIndex && range.end == endIndex) {
						range.format = range.format.clone();
						range.format.__merge(format);
						break;
					} else if(range.start == beginIndex) {
						newRange = new openfl_text__$internal_TextFormatRange(range.format.clone(),beginIndex,endIndex);
						newRange.format.__merge(format);
						this.__textEngine.textFormatRanges.insertAt(index,newRange);
						range.start = endIndex;
						index += 2;
					} else if(range.end == endIndex) {
						newRange = new openfl_text__$internal_TextFormatRange(range.format.clone(),beginIndex,endIndex);
						newRange.format.__merge(format);
						this.__textEngine.textFormatRanges.insertAt(index + 1,newRange);
						range.end = beginIndex;
						break;
					} else {
						newRange = new openfl_text__$internal_TextFormatRange(range.format.clone(),beginIndex,endIndex);
						newRange.format.__merge(format);
						this.__textEngine.textFormatRanges.insertAt(index + 1,newRange);
						newRange = new openfl_text__$internal_TextFormatRange(range.format.clone(),endIndex,range.end);
						this.__textEngine.textFormatRanges.insertAt(index + 2,newRange);
						range.end = beginIndex;
						break;
					}
				} else if(range.start >= beginIndex && range.end <= endIndex) {
					if(range.start == beginIndex) {
						range.format = range.format.clone();
						range.format.__merge(format);
						range.end = endIndex;
					} else {
						this.__textEngine.textFormatRanges.removeAt(index);
					}
				} else if(range.start > beginIndex && range.end > beginIndex) {
					range.start = endIndex;
					break;
				} else if(range.start < beginIndex && range.end <= endIndex) {
					newRange = new openfl_text__$internal_TextFormatRange(range.format.clone(),beginIndex,endIndex);
					newRange.format.__merge(format);
					this.__textEngine.textFormatRanges.insertAt(index + 1,newRange);
					range.end = beginIndex;
					index += 2;
				} else {
					++index;
					lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",{ fileName : "openfl/text/TextField.hx", lineNumber : 1578, className : "openfl.text.TextField", methodName : "setTextFormat"});
				}
			}
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__allowMouseFocus: function() {
		return this.mouseEnabled;
	}
	,__caretBeginningOfLine: function() {
		this.__caretIndex = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex));
	}
	,__caretBeginningOfNextLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.getLineOffset(lineIndex + 1);
		} else {
			this.__caretIndex = this.__text.length;
		}
	}
	,__caretBeginningOfPreviousLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex > 0) {
			var index = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex));
			if(this.__caretIndex == index) {
				this.__caretIndex = this.getLineOffset(lineIndex - 1);
			} else {
				this.__caretIndex = index;
			}
		}
	}
	,__caretEndOfLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.getLineOffset(lineIndex + 1) - 1;
		} else {
			this.__caretIndex = this.__text.length;
		}
	}
	,__caretNextCharacter: function() {
		if(this.__caretIndex < this.__text.length) {
			this.__caretIndex++;
		}
	}
	,__caretNextLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.__getCharIndexOnDifferentLine(this.get_caretIndex(),lineIndex + 1);
		}
	}
	,__caretPreviousCharacter: function() {
		if(this.__caretIndex > 0) {
			this.__caretIndex--;
		}
	}
	,__caretPreviousLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex > 0) {
			this.__caretIndex = this.__getCharIndexOnDifferentLine(this.get_caretIndex(),lineIndex - 1);
		}
	}
	,__disableInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.__backend.setTextInputEnabled(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__dispatch: function(event) {
		if(event.eventPhase == 2 && event.type == "mouseUp") {
			var event1 = event;
			var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
			if(group != null) {
				var url = group.format.url;
				if(url != null && url != "") {
					if(StringTools.startsWith(url,"event:")) {
						this.dispatchEvent(new openfl_events_TextEvent("link",true,false,HxOverrides.substr(url,6,null)));
					} else {
						openfl_Lib.getURL(new openfl_net_URLRequest(url));
					}
				}
			}
		}
		return openfl_display_InteractiveObject.prototype.__dispatch.call(this,event);
	}
	,__enableInput: function() {
		if(this.stage != null) {
			var bounds = this.getBounds(this.stage);
			var limeRect = new lime_math_Rectangle(bounds.x,bounds.y,bounds.width,bounds.height);
			this.stage.window.setTextInputRect(limeRect);
			this.stage.window.__backend.setTextInputEnabled(true);
			if(!this.__inputEnabled) {
				this.stage.window.__backend.setTextInputEnabled(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,__getAdvance: function(position) {
		return position;
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.copyFrom(this.__textEngine.bounds);
		bounds.offset(this.__offsetX,this.__offsetY);
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getCharBoundaries: function(charIndex,rect) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return false;
		}
		this.__updateLayout();
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(charIndex >= group1.startIndex && charIndex < group1.endIndex) {
				try {
					var x = group1.offsetX;
					var _g = 0;
					var _g1 = charIndex - group1.startIndex;
					while(_g < _g1) {
						var i = _g++;
						x += group1.positions[i];
					}
					var lastPosition = group1.positions[charIndex - group1.startIndex];
					rect.setTo(x,group1.offsetY,lastPosition,group1.ascent + group1.descent);
					return true;
				} catch( _g2 ) {
					haxe_NativeStackTrace.lastError = _g2;
				}
			}
		}
		return false;
	}
	,__getCharIndexOnDifferentLine: function(charIndex,lineIndex) {
		if(charIndex < 0 || charIndex > this.__text.length) {
			return -1;
		}
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var x = null;
		var y = null;
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(charIndex >= group1.startIndex && charIndex <= group1.endIndex) {
				x = group1.offsetX;
				var _g = 0;
				var _g1 = charIndex - group1.startIndex;
				while(_g < _g1) {
					var i = _g++;
					x += group1.positions[i];
				}
				if(y != null) {
					return this.__getPosition(x,y);
				}
			}
			if(group1.lineIndex == lineIndex) {
				y = group1.offsetY + group1.height / 2;
				var _g2 = 0;
				var _g3 = this.get_scrollV() - 1;
				while(_g2 < _g3) {
					var i1 = _g2++;
					y -= this.__textEngine.lineHeights.get(i1);
				}
				if(x != null) {
					return this.__getPosition(x,y);
				}
			}
		}
		return -1;
	}
	,__getCursor: function() {
		var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
		if(group != null && group.format.url != "") {
			return "button";
		} else if(this.__textEngine.selectable) {
			return "ibeam";
		}
		return null;
	}
	,__getGroup: function(x,y,precise) {
		if(precise == null) {
			precise = false;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g = 0;
		var _g1 = this.get_scrollV() - 1;
		while(_g < _g1) {
			var i = _g++;
			y += this.__textEngine.lineHeights.get(i);
		}
		if(!precise && y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups.get_length();
		while(_g < _g1) {
			var i = _g++;
			group = this.__textEngine.layoutGroups.get(i);
			if(i < this.__textEngine.layoutGroups.get_length() - 1) {
				nextGroup = this.__textEngine.layoutGroups.get(i + 1);
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || !precise && nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || !precise && (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					return group;
				}
			}
		}
		return null;
	}
	,__getPosition: function(x,y) {
		var group = this.__getGroup(x,y);
		if(group == null) {
			return this.__text.length;
		}
		var advance = 0.0;
		var _g = 0;
		var _g1 = group.positions.length;
		while(_g < _g1) {
			var i = _g++;
			advance += group.positions[i];
			if(x <= group.offsetX + advance) {
				if(x <= group.offsetX + (advance - group.positions[i]) + group.positions[i] / 2) {
					return group.startIndex + i;
				} else if(group.startIndex + i < group.endIndex) {
					return group.startIndex + i + 1;
				} else {
					return group.endIndex;
				}
			}
		}
		return group.endIndex;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			return true;
		}
		return false;
	}
	,__replaceSelectedText: function(value,restrict) {
		if(restrict == null) {
			restrict = true;
		}
		if(value == null) {
			value = "";
		}
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		var endIndex = this.__caretIndex > this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		if(startIndex == endIndex && this.__textEngine.maxChars > 0 && this.__text.length == this.__textEngine.maxChars) {
			return;
		}
		if(startIndex > this.__text.length) {
			startIndex = this.__text.length;
		}
		if(endIndex > this.__text.length) {
			endIndex = this.__text.length;
		}
		if(endIndex < startIndex) {
			var cache = endIndex;
			endIndex = startIndex;
			startIndex = cache;
		}
		if(startIndex < 0) {
			startIndex = 0;
		}
		this.__replaceText(startIndex,endIndex,value,restrict);
	}
	,__replaceText: function(beginIndex,endIndex,newText,restrict) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__text.length || newText == null) {
			return;
		}
		if(restrict) {
			newText = this.__textEngine.restrictText(newText);
			if(this.__textEngine.maxChars > 0) {
				var removeLength = endIndex - beginIndex;
				var maxLength = this.__textEngine.maxChars - this.__text.length + removeLength;
				if(maxLength <= 0) {
					newText = "";
				} else if(maxLength < newText.length) {
					newText = HxOverrides.substr(newText,0,maxLength);
				}
			}
		}
		this.__updateText(this.__text.substring(0,beginIndex) + newText + this.__text.substring(endIndex));
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.get_length()) {
			range = this.__textEngine.textFormatRanges.get(i);
			if(beginIndex == endIndex) {
				if(range.start == range.end) {
					if(range.start != 0) {
						lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",{ fileName : "openfl/text/TextField.hx", lineNumber : 2087, className : "openfl.text.TextField", methodName : "__replaceText"});
					} else {
						range.end += offset;
					}
				} else if(range.end >= beginIndex) {
					if(range.start >= beginIndex) {
						range.start += offset;
						range.end += offset;
					} else if(range.start < beginIndex && range.end >= endIndex) {
						range.end += offset;
					}
				}
			} else if(range.end > beginIndex) {
				if(range.start > endIndex) {
					range.start += offset;
					range.end += offset;
				} else if(range.start <= beginIndex && range.end > endIndex) {
					range.end += offset;
				} else if(range.start >= beginIndex && range.end <= endIndex) {
					var this1 = this.__textEngine.textFormatRanges;
					this1.__tempIndex = i--;
					var _g_current = 0;
					var _g_args = [];
					while(_g_current < _g_args.length) {
						var item = _g_args[_g_current++];
						this1.insertAt(this1.__tempIndex,item);
						this1.__tempIndex++;
					}
					this1.splice(this1.__tempIndex,1);
				} else if(range.end > endIndex && range.start > beginIndex && range.start <= endIndex) {
					range.start = beginIndex;
					range.end += offset;
				} else if(range.start < beginIndex && range.end > beginIndex && range.end <= endIndex) {
					range.end = beginIndex;
				}
			}
			++i;
		}
		if(this.__textEngine.textFormatRanges.get_length() == 0) {
			this.__textEngine.textFormatRanges.push(new openfl_text__$internal_TextFormatRange(this.get_defaultTextFormat().clone(),0,newText.length));
		} else if(beginIndex == endIndex && this.__textEngine.textFormatRanges.get(0).start > 0) {
			this.__textEngine.textFormatRanges.unshift(new openfl_text__$internal_TextFormatRange(this.get_defaultTextFormat().clone(),0,this.__textEngine.textFormatRanges.get(0).start));
		} else if(beginIndex != endIndex && this.__textEngine.textFormatRanges.get(this.__textEngine.textFormatRanges.get_length() - 1).end < this.__text.length) {
			this.__textEngine.textFormatRanges.push(new openfl_text__$internal_TextFormatRange(this.get_defaultTextFormat().clone(),this.__textEngine.textFormatRanges.get(this.__textEngine.textFormatRanges.get_length() - 1).end,this.__text.length));
		}
		this.__selectionIndex = this.__caretIndex = beginIndex + newText.length;
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__startCursorTimer: function() {
		if(this.get_type() == 1) {
			if(this.__inputEnabled) {
				this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
				this.__showCursor = !this.__showCursor;
			}
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else if(this.get_selectable()) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = this.__text.length;
			this.__selectionIndex = this.__caretIndex;
		}
		var enableInput = openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true;
		if(enableInput) {
			this.__enableInput();
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__stopTextInput: function() {
		var disableInput = openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true;
		if(disableInput) {
			this.__disableInput();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			var cacheWidth = this.__textEngine.width;
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(this.__textEngine.width != cacheWidth) {
					switch(this.__textEngine.autoSize) {
					case 0:
						this.set_x(this.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					case 3:
						this.set_x(this.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
			this.setSelection(this.__selectionIndex,this.__caretIndex);
		}
	}
	,__updateMouseDrag: function() {
		if(this.stage == null) {
			return;
		}
		var bounds = this.getBounds(this);
		if(this.get_mouseX() > bounds.width - 1) {
			this.set_scrollH(this.get_scrollH() + (Math.max(Math.min((this.get_mouseX() - bounds.width) * .1,10),1) | 0));
		} else if(this.get_mouseX() < 1) {
			this.set_scrollH(this.get_scrollH() - (Math.max(Math.min(this.get_mouseX() * -.1,10),1) | 0));
		}
		this.__mouseScrollVCounter++;
		if(this.__mouseScrollVCounter > this.stage.get_frameRate() / 10) {
			if(this.get_mouseY() > bounds.height - 2) {
				this.set_scrollV(Math.min(this.get_scrollV() + Math.max(Math.min((this.get_mouseY() - bounds.height) * .03,5),1),this.get_maxScrollV()) | 0);
			} else if(this.get_mouseY() < 2) {
				this.set_scrollV(this.get_scrollV() - (Math.max(Math.min(this.get_mouseY() * -.03,5),1) | 0));
			}
			this.__mouseScrollVCounter = 0;
		}
		this.stage_onMouseMove(null);
	}
	,__updateScrollH: function() {
		this.__updateLayout();
		var bounds = this.getBounds(this);
		if(this.get_textWidth() <= bounds.width - 4) {
			this.set_scrollH(0);
			return;
		}
		var tempScrollH = this.get_scrollH();
		if(this.__caretIndex == 0 || this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex)) == this.__caretIndex) {
			tempScrollH = 0;
		} else {
			var caret = openfl_geom_Rectangle.__pool.get();
			var written = false;
			if(this.__caretIndex < this.__text.length) {
				written = this.__getCharBoundaries(this.__caretIndex,caret);
			}
			if(!written) {
				this.__getCharBoundaries(this.__caretIndex - 1,caret);
				caret.x += caret.width;
			}
			while(caret.x < tempScrollH && tempScrollH > 0) tempScrollH -= 24;
			while(caret.x > tempScrollH + bounds.width - 4) tempScrollH += 24;
			openfl_geom_Rectangle.__pool.release(caret);
		}
		if(tempScrollH > 0 && this.get_type() != 1) {
			var lineLength = this.getLineLength(this.getLineIndexOfChar(this.__caretIndex));
			if(this.get_scrollH() + bounds.width - 4 > lineLength) {
				this.set_scrollH(Math.ceil(lineLength - bounds.width + 4));
			}
		}
		if(tempScrollH < 0) {
			this.set_scrollH(0);
		} else if(tempScrollH > this.get_maxScrollH()) {
			this.set_scrollH(this.get_maxScrollH());
		} else {
			this.set_scrollH(tempScrollH);
		}
	}
	,__updateScrollV: function() {
		this.__updateLayout();
		if(this.get_textHeight() <= this.get_height() - 4) {
			this.set_scrollV(1);
			return;
		}
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex == -1 && this.__caretIndex > 0) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex - 1) + 1;
		}
		if(lineIndex + 1 < this.get_scrollV()) {
			this.set_scrollV(lineIndex + 1);
		} else if(lineIndex + 1 > this.get_bottomScrollV()) {
			var i = lineIndex;
			var tempHeight = 0.0;
			if(i >= this.__textEngine.lineHeights.get_length()) {
				i = this.__textEngine.lineHeights.get_length() - 1;
			}
			while(i >= 0) {
				tempHeight += this.__textEngine.lineHeights.get(i);
				if(tempHeight > this.get_height() - 4) {
					i += tempHeight - this.get_height() < 0 ? 1 : 2;
					break;
				}
				--i;
			}
			this.set_scrollV(i);
		} else {
			this.set_scrollV(this.get_scrollV());
		}
	}
	,__updateText: function(value) {
		if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
			this.__forceCachedBitmapUpdate = this.__text != value;
		}
		this.__textEngine.set_text(value);
		this.__text = this.__textEngine.text;
		if(this.stage != null && this.stage.get_focus() == this) {
			if(this.__text.length < this.__selectionIndex) {
				this.__selectionIndex = this.__text.length;
			}
			if(this.__text.length < this.__caretIndex) {
				this.__caretIndex = this.__text.length;
			}
		} else if(this.__isHTML) {
			this.__selectionIndex = this.__caretIndex = this.__text.length;
		} else {
			this.__selectionIndex = 0;
			this.__caretIndex = 0;
		}
		if(!this.__displayAsPassword || openfl_display_DisplayObject.__supportDOM && !this.__renderedOnCanvasWhileOnDOM) {
			this.__textEngine.set_text(this.__text);
		} else {
			var length = this.get_text().length;
			var mask = "";
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				mask += "*";
			}
			this.__textEngine.set_text(mask);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		var _this = this.__renderTransform;
		var px = this.__offsetX;
		var py = this.__offsetY;
		_this.tx = px * _this.a + py * _this.c + _this.tx;
		_this.ty = px * _this.b + py * _this.d + _this.ty;
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		var tmp = value != this.__textEngine.antiAliasType;
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.get_bottomScrollV();
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		if(value != this.__textEngine.height) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.height = value;
		}
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,get_htmlText: function() {
		if(this.__isHTML) {
			return this.__htmlText;
		} else {
			return this.__text;
		}
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__isHTML = true;
		if(this.condenseWhite) {
			var _this_r = new RegExp("\\s+","g".split("u").join(""));
			value = value.replace(_this_r," ");
		}
		this.__htmlText = value;
		value = openfl_text__$internal_HTMLParser.parse(value,this.get_multiline(),this.__styleSheet,this.__textFormat,this.__textEngine.textFormatRanges);
		this.__updateText(value);
		return value;
	}
	,get_length: function() {
		if(this.__text != null) {
			return this.__text.length;
		}
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__textEngine.maxChars = value;
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.get_maxScrollV();
	}
	,get_mouseWheelEnabled: function() {
		return this.__mouseWheelEnabled;
	}
	,set_mouseWheelEnabled: function(value) {
		return this.__mouseWheelEnabled = value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		if(this.__textEngine.restrict != value) {
			this.__textEngine.set_restrict(value);
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) {
			value = this.__textEngine.maxScrollH;
		}
		if(value < 0) {
			value = 0;
		}
		if(value != this.__textEngine.scrollH) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.scrollH = value;
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.scrollH;
	}
	,get_scrollV: function() {
		return this.__textEngine.get_scrollV();
	}
	,set_scrollV: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.get_maxScrollV()) {
			value = this.__textEngine.get_maxScrollV();
		}
		if(value < 1) {
			value = 1;
		}
		if(value != this.__textEngine.get_scrollV() || this.__textEngine.get_scrollV() == 0) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.set_scrollV(value);
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.get_scrollV();
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Math.min(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_selectionEndIndex: function() {
		return Math.max(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.sharpness = value;
	}
	,get_styleSheet: function() {
		return this.__styleSheet;
	}
	,set_styleSheet: function(value) {
		if(!(this.__styleSheet != null && value == null)) {
			if(value != null) {
				if(this.__isHTML && value != this.__styleSheet) {
					this.__dirty = true;
					this.__layoutDirty = true;
					if(!this.__renderDirty) {
						this.__renderDirty = true;
						this.__setParentRenderDirty();
					}
					this.set_htmlText(this.__htmlText);
				}
				this.set_type(0);
			}
		}
		return this.__styleSheet = value;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__textEngine.type == 1;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__styleSheet != null) {
			return this.set_htmlText(value);
		}
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.get_length() > 1) {
			var this1 = this.__textEngine.textFormatRanges;
			var deleteCount = this.__textEngine.textFormatRanges.get_length() - 1;
			this1.__tempIndex = 1;
			var _g_current = 0;
			var _g_args = [];
			while(_g_current < _g_args.length) {
				var item = _g_args[_g_current++];
				this1.insertAt(this1.__tempIndex,item);
				this1.__tempIndex++;
			}
			this1.splice(this1.__tempIndex,deleteCount);
		}
		var utfValue = value;
		var range = this.__textEngine.textFormatRanges.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = utfValue.length;
		this.__isHTML = false;
		this.__updateText(value);
		return value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		var range = this.__textEngine.textFormatRanges.iterator();
		while(range.hasNext()) {
			var range1 = range.next();
			range1.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(this.__styleSheet != null) {
			value = 0;
		}
		if(value != this.__textEngine.type) {
			this.__textEngine.type = value;
			if(value == 1) {
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
				this.__textEngine.__useIntAdvances = true;
			} else {
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
				this.__textEngine.__useIntAdvances = null;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.type;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		if(value != this.__textEngine.width) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.width = value;
		}
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.wordWrap = value;
	}
	,get_x: function() {
		return this.__transform.tx + this.__offsetX;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx + this.__offsetX) {
			this.__setTransformDirty();
		}
		this.__transform.tx = value - this.__offsetX;
		return value;
	}
	,get_y: function() {
		return this.__transform.ty + this.__offsetY;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty + this.__offsetY) {
			this.__setTransformDirty();
		}
		this.__transform.ty = value - this.__offsetY;
		return value;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.get_selectable() && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				var setDirty = true;
				if(openfl_display_DisplayObject.__supportDOM) {
					if(this.__renderedOnCanvasWhileOnDOM) {
						this.__forceCachedBitmapUpdate = true;
					}
					setDirty = false;
				}
				if(setDirty) {
					this.__dirty = true;
					if(!this.__renderDirty) {
						this.__renderDirty = true;
						this.__setParentRenderDirty();
					}
				}
			}
		}
	}
	,stage_onMouseUp: function(event) {
		var stage = event.currentTarget;
		stage.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage != stage) {
			return;
		}
		if(stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var upPos = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			var leftPos = Math.min(this.__selectionIndex,upPos) | 0;
			var rightPos = Math.max(this.__selectionIndex,upPos) | 0;
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
				if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
					this.__forceCachedBitmapUpdate = true;
				}
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onEnterFrame: function(e) {
		this.__updateMouseDrag();
	}
	,this_onFocusIn: function(event) {
		if(this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
		} else if(this.get_type() != 1 && this.get_selectable() && this.stage != null && this.stage.get_focus() == this) {
			this.__startCursorTimer();
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopCursorTimer();
		this.__stopTextInput();
		if(this.__selectionIndex != this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,this_onKeyDown: function(event) {
		if(this.get_selectable() && this.get_type() != 1 && event.keyCode == 67 && (event.commandKey || event.ctrlKey)) {
			if(this.__caretIndex != this.__selectionIndex && !this.get_displayAsPassword()) {
				lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
			}
		}
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable() && this.get_type() != 1) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		if(!openfl_display_DisplayObject.__supportDOM) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.stage == null) {
			return;
		}
		this.stage.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,this_onMouseWheel: function(event) {
		if(this.get_mouseWheelEnabled()) {
			this.set_scrollV(Math.min(this.get_scrollV() - event.delta,this.get_maxScrollV()) | 0);
		}
	}
	,this_onDoubleClick: function(event) {
		if(this.get_selectable()) {
			this.__updateLayout();
			var delimiters = ["\n",".","!","?",","," ",";",":","(",")","-","_","/"];
			var txtStr = this.__text;
			var leftPos = -1;
			var rightPos = txtStr.length;
			var pos = 0;
			var startPos = Math.max(this.__caretIndex,1) | 0;
			if(txtStr.length > 0 && this.__caretIndex >= 0 && rightPos >= this.__caretIndex) {
				var _g = 0;
				while(_g < delimiters.length) {
					var c = delimiters[_g];
					++_g;
					pos = txtStr.lastIndexOf(c,startPos - 1);
					if(pos > leftPos) {
						leftPos = pos + 1;
					}
					pos = txtStr.indexOf(c,startPos);
					if(pos < rightPos && pos != -1) {
						rightPos = pos;
					}
				}
				if(leftPos != rightPos) {
					this.setSelection(leftPos,rightPos);
					var setDirty = true;
					if(openfl_display_DisplayObject.__supportDOM) {
						if(this.__renderedOnCanvasWhileOnDOM) {
							this.__forceCachedBitmapUpdate = true;
						}
						setDirty = false;
					}
					if(setDirty) {
						this.__dirty = true;
						if(!this.__renderDirty) {
							this.__renderDirty = true;
							this.__setParentRenderDirty();
						}
					}
				}
			}
		}
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			} else {
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 97:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.setSelection(0,this.__text.length);
				}
			}
			break;
		case 99:
			if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex && !this.get_displayAsPassword()) {
					lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
				}
			}
			break;
		case 120:
			if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex && !this.get_displayAsPassword()) {
					lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__text.length) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			} else {
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741898:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretIndex = 0;
				} else {
					this.__caretBeginningOfLine();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 1073741901:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretIndex = this.__text.length;
				} else {
					this.__caretEndOfLine();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 1073741903:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretBeginningOfNextLine();
				} else {
					this.__caretNextCharacter();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 1073741904:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretBeginningOfPreviousLine();
				} else {
					this.__caretPreviousCharacter();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 1073741905:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretIndex = this.__text.length;
				} else {
					this.__caretNextLine();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 1073741906:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretIndex = 0;
				} else {
					this.__caretPreviousLine();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 13:case 1073741912:
			if(this.__textEngine.multiline) {
				var te = new openfl_events_TextEvent("textInput",true,true,"\n");
				this.dispatchEvent(te);
				if(!te.isDefaultPrevented()) {
					this.__replaceSelectedText("\n",true);
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			} else {
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.__replaceSelectedText(value,true);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_styleSheet:"set_styleSheet",get_styleSheet:"get_styleSheet",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_mouseWheelEnabled:"set_mouseWheelEnabled",get_mouseWheelEnabled:"get_mouseWheelEnabled",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var openfl_text_TextFieldAutoSize = {};
openfl_text_TextFieldAutoSize.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "left":
		return 1;
	case "none":
		return 2;
	case "right":
		return 3;
	default:
		return null;
	}
};
openfl_text_TextFieldAutoSize.toString = function(this1) {
	switch(this1) {
	case 0:
		return "center";
	case 1:
		return "left";
	case 2:
		return "none";
	case 3:
		return "right";
	default:
		return null;
	}
};
var openfl_text_TextFieldType = {};
openfl_text_TextFieldType.fromString = function(value) {
	switch(value) {
	case "dynamic":
		return 0;
	case "input":
		return 1;
	default:
		return null;
	}
};
openfl_text_TextFieldType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "dynamic";
	case 1:
		return "input";
	default:
		return null;
	}
};
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = "openfl.text.TextFormat";
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,__ascent: null
	,__descent: null
	,__cacheKey: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		newFormat.__ascent = this.__ascent;
		newFormat.__descent = this.__descent;
		newFormat.__cacheKey = this.__toCacheKey();
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null) {
			this.url = format.url;
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
		if(format.__ascent != null) {
			this.__ascent = format.__ascent;
		}
		if(format.__descent != null) {
			this.__descent = format.__descent;
		}
		this.__toCacheKey();
	}
	,__toCacheKey: function() {
		return this.__cacheKey = "" + this.font + this.size + Std.string(this.bold) + Std.string(this.italic);
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text_TextFormatAlign = {};
openfl_text_TextFormatAlign.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
openfl_text_TextFormatAlign.toString = function(this1) {
	switch(this1) {
	case 0:
		return "center";
	case 1:
		return "end";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "start";
	default:
		return null;
	}
};
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = "openfl.text.TextLineMetrics";
openfl_text_TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl_text_TextLineMetrics
};
var openfl_text__$internal_CSSParser = function(options) {
	this.importRegex = new EReg("@import .*?;","ig");
	this.commentRegex = "(\\/\\*[\\s\\S]*?\\*\\/)";
	this.combinedCSSRegex = "((\\s*?(?:\\/\\*[\\s\\S]*?\\*\\/)?\\s*?@media[\\s\\S]*?){([\\s\\S]*?)}\\s*?})|(([\\s\\S]*?){([\\s\\S]*?)*?})";
	this.keyframeRegex = "((@.*?keyframes [\\s\\S]*?){([\\s\\S]*?}\\s*?)})";
	this.mediaQueryRegex = "((@media [\\s\\S]*?){([\\s\\S]*?}\\s*?)})";
	this.cssRegex = new EReg("([\\s\\S]*?){([\\s\\S]*?)*}","ig");
	this.keyframeStatements = [];
	this.importStatements = [];
};
$hxClasses["openfl.text._internal.CSSParser"] = openfl_text__$internal_CSSParser;
openfl_text__$internal_CSSParser.__name__ = "openfl.text._internal.CSSParser";
openfl_text__$internal_CSSParser.prototype = {
	source: null
	,options: null
	,importStatements: null
	,keyframeStatements: null
	,cssRegex: null
	,mediaQueryRegex: null
	,keyframeRegex: null
	,combinedCSSRegex: null
	,commentRegex: null
	,importRegex: null
	,stripComments: function(css) {
		var regex_r = new RegExp(this.commentRegex,"ig".split("u").join(""));
		return css.replace(regex_r,"");
	}
	,parseRules: function(rules) {
		var rulesReg = new EReg("(\\*?[-#/\\*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)+((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^};])+)","g");
		var arr = this.getMatches(rulesReg,rules);
		var ret = [];
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			if(!rulesReg.match(arr[i])) {
				return null;
			}
			rules = rulesReg.matched(0).split("\r\n").join("\n");
			var line = rules;
			line = StringTools.trim(line);
			if(line.indexOf(":") != -1) {
				var directive = StringTools.trim(line.split(":")[0]);
				var value = StringTools.trim(line.split(":")[1]);
				if(directive.length < 1 || value.length < 1) {
					continue;
				}
				var _g2 = new haxe_ds_StringMap();
				_g2.h["type"] = "declaration";
				_g2.h["property"] = directive;
				_g2.h["value"] = value;
				ret.push(_g2);
			} else if(HxOverrides.substr(StringTools.trim(line),0,7) == "base64,") {
				var _line = line + StringTools.trim(line);
				ret[ret.length - 1].h["value"] = _line;
			} else if(line.length > 0) {
				var _g3 = new haxe_ds_StringMap();
				_g3.h["type"] = "declaration";
				_g3.h["property"] = "";
				_g3.h["value"] = line;
				_g3.h["defective"] = true;
				ret.push(_g3);
			}
		}
		return ret;
	}
	,findCorrespondingRule: function(rules,directive,value) {
		var ret = null;
		var _g = 0;
		var _g1 = rules.length;
		while(_g < _g1) {
			var i = _g++;
			if(rules[i].h["directive"] == directive) {
				ret = rules[i];
				if(value == rules[i].h["value"]) {
					break;
				}
			}
		}
		return ret;
	}
	,findBySelector: function(objectArray,selector,contains) {
		if(contains == null) {
			contains = false;
		}
		var found = [];
		var _g = 0;
		var _g1 = objectArray.length;
		while(_g < _g1) {
			var i = _g++;
			if(contains == false) {
				if(objectArray[i].h["selector"] == selector) {
					found.push(objectArray[i]);
				}
			} else if((js_Boot.__cast(objectArray[i].h["selector"] , String)).indexOf(selector) != -1) {
				found.push(objectArray[i]);
			}
		}
		if(selector == "@imports" || found.length < 2) {
			return found;
		} else {
			var base = found[0];
			var _g = 0;
			var _g1 = found.length;
			while(_g < _g1) {
				var i = _g++;
				this.intelligentCSSPush([base],found[i]);
			}
			return [base];
		}
	}
	,deleteBySelector: function(objectArray,selector) {
		var ret = [];
		var _g = 0;
		var _g1 = objectArray.length;
		while(_g < _g1) {
			var i = _g++;
			if(objectArray[i].h["selector"] != selector) {
				ret.push(objectArray[i]);
			}
		}
		return ret;
	}
	,compress: function(objectArray) {
		var compressed = [];
		var done_h = Object.create(null);
		var _g = 0;
		var _g1 = objectArray.length;
		while(_g < _g1) {
			var i = _g++;
			var obj = objectArray[i];
			if(done_h[obj.h["selector"]] == true) {
				continue;
			}
			var found = this.findBySelector(objectArray,obj.h["selector"]);
			if(found.length != 0) {
				compressed = compressed.concat(found);
				done_h["selector"] = true;
			}
		}
		return compressed;
	}
	,diff: function(object1,object2) {
		if(object1.h["selector"] == object2.h["selector"]) {
			return null;
		}
		if(object1.h["type"] == "media" || object2.h["type"] == "media") {
			return null;
		}
		var _g = new haxe_ds_StringMap();
		_g.h["selector"] = object1.h["selector"];
		var value = [];
		_g.h["rules"] = value;
		var diff = _g;
		var rule1 = new haxe_ds_StringMap();
		var rule2 = new haxe_ds_StringMap();
		var _length = (js_Boot.__cast(object1.h["rules"] , Array)).length;
		var _length2 = (js_Boot.__cast(object2.h["rules"] , Array)).length;
		var _g = 0;
		var _g1 = _length;
		while(_g < _g1) {
			var i = _g++;
			rule1 = (js_Boot.__cast(object1.h["rules"] , Array))[1];
			rule2 = this.findCorrespondingRule(object2.h["rules"],object1.h["directive"],object1.h["value"]);
			if(rule2 == null) {
				(js_Boot.__cast(diff.h["rules"] , Array)).push(rule1);
			} else if(rule1.h["value"] != rule2.h["value"]) {
				(js_Boot.__cast(diff.h["rules"] , Array)).push(rule1);
			}
		}
		var _g = 0;
		var _g1 = _length2;
		while(_g < _g1) {
			var i = _g++;
			rule2 = (js_Boot.__cast(object1.h["rules"] , Array))[1];
			rule1 = this.findCorrespondingRule(object1.h["rules"],object2.h["directive"]);
			if(rule1 == null) {
				rule2.h["type"] = "DELETED";
				(js_Boot.__cast(diff.h["rules"] , Array)).push(rule2);
			}
		}
		if((js_Boot.__cast(diff.h["rules"] , Array)).length == 0) {
			return null;
		}
		return diff;
	}
	,intelligentMerge: function(objectArray,newArray,reverse) {
		if(reverse == null) {
			reverse = false;
		}
		var _g = 0;
		var _g1 = newArray.length;
		while(_g < _g1) {
			var i = _g++;
			this.intelligentCSSPush(objectArray,newArray[i],reverse);
		}
		var _g = 0;
		var _g1 = objectArray.length;
		while(_g < _g1) {
			var i = _g++;
			var cobj = objectArray[i];
			if(cobj.h["type"] == "media" || cobj.h["type"] == "keyframes") {
				continue;
			}
			var value = this.compactRules(cobj.h["rules"]);
			cobj.h["rules"] = value;
		}
	}
	,intelligentCSSPush: function(objectArray,minimalObject,reverse) {
		if(reverse == null) {
			reverse = false;
		}
		var pushSelector = minimalObject.h["selector"];
		var cssObject = null;
		if(reverse == false) {
			var _g = 0;
			var _g1 = objectArray.length;
			while(_g < _g1) {
				var i = _g++;
				if(objectArray[i].h["selector"] == minimalObject.h["selector"]) {
					cssObject = objectArray[i];
					break;
				}
			}
		} else {
			var j = objectArray.length - 1;
			while(j > -1) {
				if(objectArray[j].h["selector"] == minimalObject.h["selector"]) {
					cssObject = objectArray[j];
					break;
				}
				--j;
			}
		}
		if(cssObject == null) {
			objectArray.push(minimalObject);
		} else if(minimalObject.h["type"] != "media") {
			var mRules = minimalObject.h["rules"];
			var _g = 0;
			var _g1 = mRules.length;
			while(_g < _g1) {
				var i = _g++;
				var rule = mRules[i];
				var oldRule = this.findCorrespondingRule(cssObject.h["rules"],rule.h["directive"]);
				if(oldRule == null) {
					var cRules = cssObject.h["rules"];
					cRules.push(rule);
				} else if(rule.h["type"] == "DELETED") {
					oldRule.h["type"] = "DELETED";
				} else {
					oldRule.h["value"] = rule.h["value"];
				}
			}
		} else {
			var value = (js_Boot.__cast(cssObject.h["subStyles"] , Array)).concat(minimalObject.h["subStyles"]);
			cssObject.h["value"] = value;
		}
	}
	,compactRules: function(rules) {
		var newRules = [];
		var _g = 0;
		var _g1 = rules.length;
		while(_g < _g1) {
			var i = _g++;
			if(rules[i].h["type"] != "DELETED") {
				newRules.push(rules[i]);
			}
		}
		return newRules;
	}
	,getImports: function(objectArray) {
		var imps = [];
		var _g = 0;
		var _g1 = objectArray.length;
		while(_g < _g1) {
			var i = _g++;
			if(objectArray[i].h["type"] == "imports") {
				imps.push(objectArray[i].h["styles"]);
			}
		}
		return imps;
	}
	,parse: function(source) {
		if(source == null) {
			return null;
		}
		var _this_r = new RegExp("^\\s+|\\s+$","g".split("u").join(""));
		source = source.replace(_this_r,"");
		var css = [];
		var m = this.importRegex.match(source);
		while(m) {
			var imports = this.importRegex.matched(0);
			if(imports != null) {
				this.importStatements.push(imports);
				var _g = new haxe_ds_StringMap();
				_g.h["selector"] = "@imports";
				_g.h["type"] = "imports";
				_g.h["styles"] = imports;
				css.push(_g);
			} else {
				break;
			}
		}
		source = source.replace(this.importRegex.r,"");
		var keyframesRegex = new EReg(this.keyframeRegex,"gi");
		var arr = null;
		while(keyframesRegex.match(source)) {
			arr = this.getMatches(keyframesRegex,source);
			if(arr == null) {
				break;
			}
			var _g = new haxe_ds_StringMap();
			_g.h["selectors"] = "@keyframes";
			_g.h["type"] = "keyframes";
			var value = keyframesRegex.matchedRight();
			_g.h["styles"] = value;
			css.push(_g);
		}
		source = source.replace(keyframesRegex.r,"");
		var unified = new EReg(this.combinedCSSRegex,"gi");
		while(unified.match(source)) {
			arr = this.getMatches(unified,source);
			if(arr == null) {
				break;
			}
			var selector = "";
			var _g = 0;
			var _g1 = arr.length;
			while(_g < _g1) {
				var i = _g++;
				var selReg = new EReg("^([^{]+)","");
				if(selReg.match(arr[i])) {
					if(selReg.matched(0) != null) {
						selector = StringTools.trim(selReg.matched(0).split("\r\n").join("\n"));
					}
					var commentsRegex = new EReg(this.commentRegex,"gi");
					var comments = this.getMatches(commentsRegex,selector);
					if(comments != null) {
						selector = StringTools.trim(selector.replace(commentsRegex.r,""));
					}
					var _this_r = new RegExp("\n+","".split("u").join(""));
					selector = selector.replace(_this_r,"\n");
					if(selector.indexOf("@media") != -1) {
						var _g2 = new haxe_ds_StringMap();
						_g2.h["selectors"] = selector;
						_g2.h["type"] = "media";
						var value = this.parse(selReg.matchedRight() + "\n}");
						_g2.h["subStyles"] = value;
						var object = _g2;
						if(comments != null) {
							object.h["comments"] = comments[0];
						}
						css.push(object);
					} else if(selReg.matchedRight() != null) {
						var rules = this.parseRules(selReg.matchedRight());
						var _g3 = new haxe_ds_StringMap();
						_g3.h["selectors"] = selector;
						_g3.h["type"] = "rule";
						_g3.h["declarations"] = rules;
						var styleObject = _g3;
						if(selector == "@font-face") {
							styleObject.h["type"] = "font-face";
						}
						if(comments != null) {
							styleObject.h["comments"] = comments[0];
						}
						css.push(styleObject);
					}
				} else {
					break;
				}
			}
			break;
		}
		var _g = new haxe_ds_StringMap();
		_g.h["type"] = "stylesheet";
		_g.h["rules"] = css;
		_g.h["parsingErrors"] = [];
		var ret = _g;
		return ret;
	}
	,getMatches: function(ereg,input,index) {
		if(index == null) {
			index = 0;
		}
		var matches = [];
		while(ereg.match(input)) {
			var match = StringTools.trim(ereg.matched(index));
			matches.push(match);
			input = StringTools.trim(ereg.matchedRight());
		}
		if(matches.length == 0) {
			return null;
		}
		return matches;
	}
	,__class__: openfl_text__$internal_CSSParser
};
var openfl_text__$internal_CacheMeasurement = function(wordKey,positions) {
	this.__collisions = [];
	this.__wordMap = new haxe_ds_IntMap();
	this.set(wordKey,positions);
};
$hxClasses["openfl.text._internal.CacheMeasurement"] = openfl_text__$internal_CacheMeasurement;
openfl_text__$internal_CacheMeasurement.__name__ = "openfl.text._internal.CacheMeasurement";
openfl_text__$internal_CacheMeasurement.prototype = {
	__collisions: null
	,__wordMap: null
	,hash: null
	,set: function(wordKey,positions) {
		this.__addCollision(wordKey,positions);
	}
	,get: function(wordKey) {
		if(this.__collisions.length > 1) {
			return this.__wordMap.h[this.__collisions.indexOf(wordKey)];
		}
		return this.__wordMap.h[0];
	}
	,__addCollision: function(wordKey,positions) {
		if(!this.exists(wordKey)) {
			var _this = this.__wordMap;
			var key = this.__collisions.push(wordKey) - 1;
			_this.h[key] = positions;
		}
	}
	,exists: function(wordKey) {
		if(this.__collisions.length == 0) {
			return false;
		}
		return this.__collisions.indexOf(wordKey) > -1;
	}
	,__class__: openfl_text__$internal_CacheMeasurement
};
var openfl_text__$internal_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) {
		this.offset = offset;
	} else {
		this.offset = new lime_math_Vector2();
	}
};
$hxClasses["openfl.text._internal.GlyphPosition"] = openfl_text__$internal_GlyphPosition;
openfl_text__$internal_GlyphPosition.__name__ = "openfl.text._internal.GlyphPosition";
openfl_text__$internal_GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: openfl_text__$internal_GlyphPosition
};
var openfl_text__$internal_HTMLParser = function() { };
$hxClasses["openfl.text._internal.HTMLParser"] = openfl_text__$internal_HTMLParser;
openfl_text__$internal_HTMLParser.__name__ = "openfl.text._internal.HTMLParser";
openfl_text__$internal_HTMLParser.parse = function(value,multiline,styleSheet,textFormat,textFormatRanges) {
	if(multiline) {
		value = value.replace(openfl_text__$internal_HTMLParser.__regexBreakTag.r,"\n");
	} else {
		value = value.replace(openfl_text__$internal_HTMLParser.__regexBreakTag.r,"");
	}
	value = value.replace(openfl_text__$internal_HTMLParser.__regexEntities[5].r," ");
	value = openfl_text__$internal_HTMLParser.__regexCharEntity.map(value,function(ereg) {
		var decimalStr = ereg.matched(1);
		var hexStr = ereg.matched(2);
		if(decimalStr != null) {
			var decimal = Std.parseInt(decimalStr);
			if(decimal != null) {
				return String.fromCodePoint(decimal);
			}
		}
		if(hexStr != null) {
			var hex = Std.parseInt("0" + hexStr);
			if(hex != null) {
				return String.fromCodePoint(hex);
			}
		}
		return ereg.matched(0);
	});
	var segments = value.split("<");
	if(segments.length == 1) {
		value = StringTools.htmlUnescape(value.replace(openfl_text__$internal_HTMLParser.__regexHTMLTag.r,""));
		if(textFormatRanges.get_length() > 1) {
			var deleteCount = textFormatRanges.get_length() - 1;
			textFormatRanges.__tempIndex = 1;
			var _g_current = 0;
			var _g_args = [];
			while(_g_current < _g_args.length) {
				var item = _g_args[_g_current++];
				textFormatRanges.insertAt(textFormatRanges.__tempIndex,item);
				textFormatRanges.__tempIndex++;
			}
			textFormatRanges.splice(textFormatRanges.__tempIndex,deleteCount);
		}
		var range = textFormatRanges.get(0);
		range.format = textFormat;
		range.start = 0;
		range.end = value.length;
		return value;
	} else {
		var deleteCount = textFormatRanges.get_length();
		textFormatRanges.__tempIndex = 0;
		var _g_current = 0;
		var _g_args = [];
		while(_g_current < _g_args.length) {
			var item = _g_args[_g_current++];
			textFormatRanges.insertAt(textFormatRanges.__tempIndex,item);
			textFormatRanges.__tempIndex++;
		}
		textFormatRanges.splice(textFormatRanges.__tempIndex,deleteCount);
		value = "";
		var formatStack = [textFormat.clone()];
		var tagStack = [];
		var sub;
		var noLineBreak = false;
		var _g = 0;
		while(_g < segments.length) {
			var segment = segments[_g];
			++_g;
			if(segment == "") {
				continue;
			}
			var isClosingTag = HxOverrides.substr(segment,0,1) == "/";
			var tagEndIndex = segment.indexOf(">");
			var start = tagEndIndex + 1;
			var spaceIndex = segment.indexOf(" ");
			var tagName = segment.substring(isClosingTag ? 1 : 0,spaceIndex > -1 && spaceIndex < tagEndIndex ? spaceIndex : tagEndIndex).toLowerCase();
			var format;
			if(isClosingTag) {
				if(tagStack.length == 0 || tagName != tagStack[tagStack.length - 1]) {
					continue;
				}
				tagStack.pop();
				formatStack.pop();
				format = formatStack[formatStack.length - 1].clone();
				if((tagName == "p" || tagName == "li") && textFormatRanges.get_length() > 0) {
					if(multiline) {
						value += "\n";
					}
					noLineBreak = true;
				}
				if(start < segment.length) {
					sub = StringTools.htmlUnescape(HxOverrides.substr(segment,start,null));
					textFormatRanges.push(new openfl_text__$internal_TextFormatRange(format,value.length,value.length + sub.length));
					value += sub;
					noLineBreak = false;
				}
			} else {
				format = formatStack[formatStack.length - 1].clone();
				if(tagEndIndex > -1) {
					if(styleSheet != null) {
						styleSheet.__applyStyle(tagName,format);
						if(openfl_text__$internal_HTMLParser.__regexClass.match(segment)) {
							styleSheet.__applyStyle("." + openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexClass),format);
							styleSheet.__applyStyle(tagName + "." + openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexClass),format);
						}
					}
					switch(tagName) {
					case "a":
						if(styleSheet != null) {
							styleSheet.__applyStyle("a:link",format);
						}
						if(openfl_text__$internal_HTMLParser.__regexHref.match(segment)) {
							format.url = openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexHref);
						}
						break;
					case "b":
						format.bold = true;
						break;
					case "em":case "i":
						format.italic = true;
						break;
					case "font":
						if(openfl_text__$internal_HTMLParser.__regexFace.match(segment)) {
							format.font = openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexFace);
						}
						if(openfl_text__$internal_HTMLParser.__regexColor.match(segment)) {
							format.color = Std.parseInt("0x" + openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexColor));
						}
						if(openfl_text__$internal_HTMLParser.__regexSize.match(segment)) {
							var sizeAttr = openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							if(firstChar == 43 || firstChar == 45) {
								var parentFormat = formatStack.length >= 2 ? formatStack[formatStack.length - 2] : textFormat;
								format.size = parentFormat.size + Std.parseInt(sizeAttr);
							} else {
								format.size = Std.parseInt(sizeAttr);
							}
						}
						break;
					case "li":
						if(textFormatRanges.get_length() > 0 && !noLineBreak) {
							value += "\n";
						}
						var bullet = "• ";
						var bulletFormat = format.clone();
						bulletFormat.underline = false;
						textFormatRanges.push(new openfl_text__$internal_TextFormatRange(bulletFormat,value.length,value.length + bullet.length));
						value += bullet;
						break;
					case "p":
						if(textFormatRanges.get_length() > 0 && !noLineBreak) {
							value += "\n";
						}
						if(openfl_text__$internal_HTMLParser.__regexAlign.match(segment)) {
							var align = openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexAlign).toLowerCase();
							format.align = openfl_text_TextFormatAlign.fromString(align);
						}
						break;
					case "textformat":
						if(openfl_text__$internal_HTMLParser.__regexBlockIndent.match(segment)) {
							format.blockIndent = Std.parseInt(openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexBlockIndent));
						}
						if(openfl_text__$internal_HTMLParser.__regexIndent.match(segment)) {
							format.indent = Std.parseInt(openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexIndent));
						}
						if(openfl_text__$internal_HTMLParser.__regexLeading.match(segment)) {
							format.leading = Std.parseInt(openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexLeading));
						}
						if(openfl_text__$internal_HTMLParser.__regexLeftMargin.match(segment)) {
							format.leftMargin = Std.parseInt(openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexLeftMargin));
						}
						if(openfl_text__$internal_HTMLParser.__regexRightMargin.match(segment)) {
							format.rightMargin = Std.parseInt(openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexRightMargin));
						}
						if(openfl_text__$internal_HTMLParser.__regexTabStops.match(segment)) {
							var values = openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexTabStops).split(" ");
							var tabStops = [];
							var _g1 = 0;
							while(_g1 < values.length) {
								var stop = values[_g1];
								++_g1;
								tabStops.push(Std.parseInt(stop));
							}
							format.tabStops = tabStops;
						}
						break;
					case "u":
						format.underline = true;
						break;
					}
					formatStack.push(format);
					tagStack.push(tagName);
					if(start < segment.length) {
						sub = StringTools.htmlUnescape(segment.substring(start));
						textFormatRanges.push(new openfl_text__$internal_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						noLineBreak = false;
					}
				} else {
					sub = StringTools.htmlUnescape(segment);
					textFormatRanges.push(new openfl_text__$internal_TextFormatRange(format,value.length,value.length + sub.length));
					value += sub;
					noLineBreak = false;
				}
			}
		}
		if(textFormatRanges.get_length() == 0) {
			textFormatRanges.push(new openfl_text__$internal_TextFormatRange(formatStack[0],0,0));
		}
	}
	return value;
};
openfl_text__$internal_HTMLParser.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl_text__$internal_ShapeCache = function() {
	this.__shortWordMap = new haxe_ds_StringMap();
	this.__longWordMap = new haxe_ds_StringMap();
};
$hxClasses["openfl.text._internal.ShapeCache"] = openfl_text__$internal_ShapeCache;
openfl_text__$internal_ShapeCache.__name__ = "openfl.text._internal.ShapeCache";
openfl_text__$internal_ShapeCache.hashFunction = function(key) {
	var hash = 0;
	var i;
	var chr;
	var _g = 0;
	var _g1 = key.length;
	while(_g < _g1) {
		var i = _g++;
		chr = HxOverrides.cca(key,i);
		hash = (hash << 5) - hash + chr;
		hash |= 0;
	}
	return hash;
};
openfl_text__$internal_ShapeCache.prototype = {
	__shortWordMap: null
	,__longWordMap: null
	,cache: function(formatRange,getPositions,wordKey) {
		var formatKey = formatRange.format.__cacheKey;
		if(wordKey.length > 15) {
			return this.__cacheLongWord(wordKey,formatKey,getPositions);
		} else {
			return this.__cacheShortWord(wordKey,formatKey,getPositions);
		}
	}
	,__cacheShortWord: function(wordKey,formatKey,getPositions) {
		if(Object.prototype.hasOwnProperty.call(this.__shortWordMap.h,formatKey)) {
			var formatMap = this.__shortWordMap.h[formatKey];
			if(Object.prototype.hasOwnProperty.call(formatMap.h,wordKey)) {
				return formatMap.h[wordKey];
			} else {
				var value = getPositions();
				formatMap.h[wordKey] = value;
			}
		} else {
			var formatMap = new haxe_ds_StringMap();
			var value = getPositions();
			formatMap.h[wordKey] = value;
			this.__shortWordMap.h[formatKey] = formatMap;
		}
		return getPositions();
	}
	,__cacheLongWord: function(wordKey,formatKey,getPositions) {
		var hash = openfl_text__$internal_ShapeCache.hashFunction(wordKey);
		if(Object.prototype.hasOwnProperty.call(this.__longWordMap.h,formatKey)) {
			var formatMap = this.__longWordMap.h[formatKey];
			if(formatMap.h.hasOwnProperty(hash)) {
				var measurement = formatMap.h[hash];
				if(measurement.exists(wordKey)) {
					return measurement.get(wordKey);
				} else {
					measurement.set(wordKey,getPositions());
				}
			} else {
				var measurement = new openfl_text__$internal_CacheMeasurement(wordKey,getPositions());
				formatMap.h[hash] = measurement;
			}
		} else {
			var formatMap = new haxe_ds_IntMap();
			var measurement = new openfl_text__$internal_CacheMeasurement(wordKey,getPositions());
			measurement.hash = hash;
			formatMap.h[hash] = measurement;
			this.__longWordMap.h[formatKey] = formatMap;
		}
		return getPositions();
	}
	,__class__: openfl_text__$internal_ShapeCache
};
var openfl_text__$internal_TextEngine = function(textField) {
	this.__shapeCache = new openfl_text__$internal_ShapeCache();
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.set_text("");
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.textBounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.numLines = 1;
	this.sharpness = 0;
	this.scrollH = 0;
	this.set_scrollV(1);
	this.wordWrap = false;
	this.lineAscents = openfl_Vector.toFloatVector(null);
	this.lineBreaks = openfl_Vector.toIntVector(null);
	this.lineDescents = openfl_Vector.toFloatVector(null);
	this.lineLeadings = openfl_Vector.toFloatVector(null);
	this.lineHeights = openfl_Vector.toFloatVector(null);
	this.lineWidths = openfl_Vector.toFloatVector(null);
	this.layoutGroups = openfl_Vector.toObjectVector(null);
	this.textFormatRanges = openfl_Vector.toObjectVector(null);
	if(openfl_text__$internal_TextEngine.__context == null) {
		openfl_text__$internal_TextEngine.__context = window.document.createElement("canvas").getContext("2d");
	}
};
$hxClasses["openfl.text._internal.TextEngine"] = openfl_text__$internal_TextEngine;
openfl_text__$internal_TextEngine.__name__ = "openfl.text._internal.TextEngine";
openfl_text__$internal_TextEngine.findFont = function(name) {
	return openfl_text_Font.__fontByName.h[name];
};
openfl_text__$internal_TextEngine.findFontVariant = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	if(bold && italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold Italic")) {
		return openfl_text__$internal_TextEngine.findFont(fontNamePrefix + " Bold Italic");
	} else if(bold && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold")) {
		return openfl_text__$internal_TextEngine.findFont(fontNamePrefix + " Bold");
	} else if(italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Italic")) {
		return openfl_text__$internal_TextEngine.findFont(fontNamePrefix + " Italic");
	}
	return openfl_text__$internal_TextEngine.findFont(fontName);
};
openfl_text__$internal_TextEngine.getDefaultFont = function(name,bold,italic) {
	if(openfl_text__$internal_TextEngine.__defaultFonts == null) {
		openfl_text__$internal_TextEngine.__defaultFonts = new haxe_ds_StringMap();
	}
	var fontSet = openfl_text__$internal_TextEngine.__defaultFonts.h[name];
	if(fontSet == null) {
		return null;
	}
	if(bold && italic && fontSet.boldItalic != null) {
		return fontSet.boldItalic;
	} else if(italic && fontSet.italic != null) {
		return fontSet.italic;
	} else if(bold && fontSet.bold != null) {
		return fontSet.bold;
	} else {
		return fontSet.normal;
	}
};
openfl_text__$internal_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	var font = openfl_text__$internal_TextEngine.getFont(format);
	openfl_text__$internal_TextEngine.__context.font = font;
	var font = openfl_text__$internal_TextEngine.getFontInstance(format);
	if(format.__ascent != null) {
		ascent = format.size * format.__ascent;
		descent = format.size * format.__descent;
	} else if(font != null && font.unitsPerEM != 0) {
		ascent = font.ascender / font.unitsPerEM * format.size;
		descent = Math.abs(font.descender / font.unitsPerEM * format.size);
	} else {
		ascent = format.size;
		descent = format.size * 0.185;
	}
	var leading = format.leading;
	return ascent + descent + leading;
};
openfl_text__$internal_TextEngine.getFont = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	if(bold && italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold Italic")) {
		fontName = fontNamePrefix + " Bold Italic";
		bold = false;
		italic = false;
	} else if(bold && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold")) {
		fontName = fontNamePrefix + " Bold";
		bold = false;
	} else if(italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Italic")) {
		fontName = fontNamePrefix + " Italic";
		italic = false;
	} else {
		if(bold && (fontName.indexOf(" Bold ") > -1 || StringTools.endsWith(fontName," Bold"))) {
			bold = false;
		}
		if(italic && (fontName.indexOf(" Italic ") > -1 || StringTools.endsWith(fontName," Italic"))) {
			italic = false;
		}
	}
	var font = italic ? "italic " : "normal ";
	font += "normal ";
	font += bold ? "bold " : "normal ";
	font += format.size + "px";
	font += "/" + (format.size + 3) + "px ";
	var font1;
	switch(fontName) {
	case "_sans":
		font1 = "sans-serif";
		break;
	case "_serif":
		font1 = "serif";
		break;
	case "_typewriter":
		font1 = "monospace";
		break;
	default:
		var _this_r = new RegExp("^[\\s'\"]+(.*)[\\s'\"]+$","".split("u").join(""));
		font1 = "'" + fontName.replace(_this_r,"$1") + "'";
	}
	font += "" + font1;
	return font;
};
openfl_text__$internal_TextEngine.getFontInstance = function(format) {
	return openfl_text__$internal_TextEngine.findFontVariant(format);
};
openfl_text__$internal_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,caretIndex: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textBounds: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__cursorTimer: null
	,__hasFocus: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__restrictRegexp: null
	,__selectionStart: null
	,__shapeCache: null
	,__showCursor: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__useIntAdvances: null
	,__cairoFont: null
	,__font: null
	,createRestrictRegexp: function(restrict) {
		var declinedRange = new EReg("\\^([^\\^]+)","gu");
		var declined = "";
		var accepting = false;
		var accepted = declinedRange.map(restrict,function(ereg) {
			if(accepting) {
				accepting = !accepting;
				return ereg.matched(1);
			}
			declined += ereg.matched(1);
			accepting = !accepting;
			return "";
		});
		var testRegexpParts = [];
		if(accepted.length > 0) {
			testRegexpParts.push("[^" + accepted + "]");
		}
		if(declined.length > 0) {
			testRegexpParts.push("[" + declined + "]");
		}
		return new EReg("(" + testRegexpParts.join("|") + ")","g");
	}
	,getBounds: function() {
		var padding = this.border ? 1 : 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
		var x = this.width;
		var y = this.height;
		var lastIndex = this.layoutGroups.get_length() - 1;
		var _g = 0;
		var _g1 = this.layoutGroups.get_length();
		while(_g < _g1) {
			var i = _g++;
			var group = this.layoutGroups.get(i);
			if(i == lastIndex && group.startIndex == group.endIndex && this.type != 1) {
				continue;
			}
			if(group.offsetX < x) {
				x = group.offsetX;
			}
			if(group.offsetY < y) {
				y = group.offsetY;
			}
		}
		if(x >= this.width) {
			x = 2;
		}
		if(y >= this.height) {
			y = 2;
		}
		var textHeight = this.textHeight * 1.185;
		this.textBounds.setTo(Math.max(x - 2,0),Math.max(y - 2,0),Math.min(this.textWidth + 4,this.bounds.width + 4),Math.min(textHeight + 4,this.bounds.height + 4));
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.get_length() + 1) {
			return null;
		}
		if(this.lineBreaks.get_length() == 0) {
			return this.text;
		} else {
			return this.text.substring(index > 0 ? this.lineBreaks.get(index - 1) : 0,this.lineBreaks.get(index));
		}
	}
	,getLineBreaks: function() {
		this.lineBreaks.set_length(0);
		var index = -1;
		var cr = -1;
		var lf = -1;
		while(index < this.text.length) {
			lf = this.text.indexOf("\n",index + 1);
			cr = this.text.indexOf("\r",index + 1);
			index = cr == -1 ? lf : lf == -1 ? cr : cr < lf ? cr : lf;
			if(index > -1) {
				this.lineBreaks.push(index);
			} else {
				break;
			}
		}
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		var lineBreak = this.lineBreaks.iterator();
		while(lineBreak.hasNext()) {
			var lineBreak1 = lineBreak.next();
			if(lineBreak1 >= startIndex) {
				return lineBreak1;
			}
		}
		return -1;
	}
	,getLineMeasurements: function() {
		this.lineAscents.set_length(0);
		this.lineDescents.set_length(0);
		this.lineLeadings.set_length(0);
		this.lineHeights.set_length(0);
		this.lineWidths.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		var currentTextHeight = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.maxScrollH = 0;
		var lastIndex = this.layoutGroups.get_length() - 1;
		var _g = 0;
		var _g1 = this.layoutGroups.get_length();
		while(_g < _g1) {
			var i = _g++;
			var group = this.layoutGroups.get(i);
			if(i == lastIndex && group.startIndex == group.endIndex && this.type != 1) {
				continue;
			}
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group.leading;
			} else {
				currentLineLeading = Math.max(currentLineLeading,group.leading) | 0;
			}
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			currentTextHeight = Math.ceil(group.offsetY - 2 + group.ascent + group.descent);
			if(currentTextHeight > this.textHeight) {
				this.textHeight = currentTextHeight;
			}
		}
		if(this.textHeight == 0 && this.textField != null && this.type == 1) {
			var currentFormat = this.textField.__textFormat;
			var ascent;
			var descent;
			var font = openfl_text__$internal_TextEngine.getFontInstance(currentFormat);
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else if(font != null && font.unitsPerEM != 0) {
				ascent = font.ascender / font.unitsPerEM * currentFormat.size;
				descent = Math.abs(font.descender / font.unitsPerEM * currentFormat.size);
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			var leading = currentFormat.leading;
			var heightValue = Math.ceil(ascent + descent + leading);
			currentLineAscent = ascent;
			currentLineDescent = descent;
			currentLineLeading = leading;
			currentTextHeight = Math.ceil(ascent + descent);
			this.textHeight = currentTextHeight;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		}
		if(this.autoSize != 2) {
			switch(this.autoSize) {
			case 0:case 1:case 3:
				if(!this.wordWrap) {
					this.width = this.textWidth + 4;
				}
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = this.textWidth - this.width + 4 | 0;
		} else {
			this.maxScrollH = 0;
		}
		if(this.scrollH > this.maxScrollH) {
			this.scrollH = this.maxScrollH;
		}
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.set_length(0);
		if(this.text == null || this.text == "") {
			return;
		}
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var maxAscent = 0.0;
		var descent = 0.0;
		var align = 3;
		var blockIndent = 0;
		var bullet = false;
		var indent = 0;
		var leftMargin = 0;
		var rightMargin = 0;
		var firstLineOfParagraph = true;
		var tabStops = null;
		var layoutGroup = null;
		var positions = null;
		var widthValue = 0.0;
		var heightValue = 0;
		var maxHeightValue = 0;
		var previousSpaceIndex = -2;
		var previousBreakIndex = -1;
		var spaceIndex = this.text.indexOf(" ");
		var breakCount = 0;
		var breakIndex = breakCount < this.lineBreaks.get_length() ? this.lineBreaks.get(breakCount) : -1;
		var offsetX = 0.0;
		var offsetY = 0.0;
		var textIndex = 0;
		var lineIndex = 0;
		var getPositions = function(text,startIndex,endIndex) {
			var letterSpacing = 0.0;
			if(formatRange.format.letterSpacing != null) {
				letterSpacing = formatRange.format.letterSpacing;
			}
			var html5Positions = function() {
				var positions = [];
				if(_gthis.__useIntAdvances == null) {
					var html5Positions = new EReg("Trident/7.0","");
					_gthis.__useIntAdvances = html5Positions.match($global.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth = 0.0;
					var width;
					var _g = startIndex;
					var _g1 = endIndex;
					while(_g < _g1) {
						var i = _g++;
						width = _gthis.measureText(text.substring(startIndex,i + 1));
						positions.push(width - previousWidth);
						previousWidth = width;
					}
				} else {
					var _g = startIndex;
					var _g1 = endIndex;
					while(_g < _g1) {
						var i = _g++;
						var advance;
						if(i < text.length - 1) {
							var nextWidth = _gthis.measureText(text.charAt(i + 1));
							var twoWidths = _gthis.measureText(HxOverrides.substr(text,i,2));
							advance = twoWidths - nextWidth;
						} else {
							advance = openfl_text__$internal_TextEngine.__context.measureText(text.charAt(i)).width;
						}
						positions.push(advance);
					}
				}
				return positions;
			};
			if(currentFormat.align == 2) {
				return html5Positions();
			}
			return _gthis.__shapeCache.cache(formatRange,html5Positions,text.substring(startIndex,endIndex));
		};
		var getPositionsWidth = function(positions) {
			var width = 0.0;
			var _g = 0;
			while(_g < positions.length) {
				var position = positions[_g];
				++_g;
				width += position;
			}
			return width;
		};
		var getTextWidth = function(text) {
			return _gthis.measureText(text);
		};
		var getBaseX = function() {
			return 2 + leftMargin + blockIndent + (firstLineOfParagraph ? indent : 0);
		};
		var getWrapWidth = function() {
			return _gthis.width - 2 - rightMargin - getBaseX();
		};
		var nextLayoutGroup = function(startIndex,endIndex) {
			if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = new openfl_text__$internal_TextLayoutGroup(formatRange.format,startIndex,endIndex);
				_gthis.layoutGroups.push(layoutGroup);
			} else {
				layoutGroup.format = formatRange.format;
				layoutGroup.startIndex = startIndex;
				layoutGroup.endIndex = endIndex;
			}
		};
		var setLineMetrics = function() {
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else if(font != null && font.unitsPerEM != 0) {
				ascent = font.ascender / font.unitsPerEM * currentFormat.size;
				descent = Math.abs(font.descender / font.unitsPerEM * currentFormat.size);
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			heightValue = Math.ceil(ascent + descent + leading);
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
		};
		var setParagraphMetrics = function() {
			firstLineOfParagraph = true;
			align = currentFormat.align != null ? currentFormat.align : 3;
			blockIndent = currentFormat.blockIndent != null ? currentFormat.blockIndent : 0;
			indent = currentFormat.indent != null ? currentFormat.indent : 0;
			leftMargin = currentFormat.leftMargin != null ? currentFormat.leftMargin : 0;
			rightMargin = currentFormat.rightMargin != null ? currentFormat.rightMargin : 0;
			var setParagraphMetrics = currentFormat.bullet != null;
			var setParagraphMetrics = currentFormat.tabStops != null;
		};
		var nextFormatRange = function() {
			if(rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
				rangeIndex += 1;
				formatRange = _gthis.textFormatRanges.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				var fontString = openfl_text__$internal_TextEngine.getFont(currentFormat);
				openfl_text__$internal_TextEngine.__context.font = fontString;
				font = openfl_text__$internal_TextEngine.getFontInstance(currentFormat);
				return true;
			}
			return false;
		};
		var setFormattedPositions = function(startIndex,endIndex) {
			if(startIndex >= endIndex) {
				positions = [];
				widthValue = 0;
			} else if(endIndex <= formatRange.end) {
				positions = getPositions(_gthis.text,startIndex,endIndex);
				widthValue = getPositionsWidth(positions);
			} else {
				var tempIndex = startIndex;
				var tempRangeEnd = formatRange.end;
				var countRanges = 0;
				positions = [];
				widthValue = 0;
				while(true) {
					if(tempIndex != tempRangeEnd) {
						var tempPositions = getPositions(_gthis.text,tempIndex,tempRangeEnd);
						positions = positions.concat(tempPositions);
					}
					if(tempRangeEnd != endIndex) {
						if(!nextFormatRange()) {
							lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",{ fileName : "openfl/text/_internal/TextEngine.hx", lineNumber : 1117, className : "openfl.text._internal.TextEngine", methodName : "getLayoutGroups"});
							break;
						}
						tempIndex = tempRangeEnd;
						tempRangeEnd = endIndex < formatRange.end ? endIndex : formatRange.end;
						++countRanges;
					} else {
						widthValue = getPositionsWidth(positions);
						break;
					}
				}
				rangeIndex -= countRanges + 1;
				nextFormatRange();
			}
		};
		var placeFormattedText = function(endIndex) {
			if(endIndex <= formatRange.end) {
				positions = getPositions(_gthis.text,textIndex,endIndex);
				widthValue = getPositionsWidth(positions);
				nextLayoutGroup(textIndex,endIndex);
				layoutGroup.positions = positions;
				var offsetX1 = offsetX;
				var placeFormattedText = getBaseX();
				layoutGroup.offsetX = offsetX1 + placeFormattedText;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY + 2;
				layoutGroup.width = widthValue;
				layoutGroup.height = heightValue;
				offsetX += widthValue;
				if(endIndex == formatRange.end) {
					layoutGroup = null;
					nextFormatRange();
					setLineMetrics();
				}
			} else {
				while(true) {
					var tempRangeEnd = endIndex < formatRange.end ? endIndex : formatRange.end;
					if(textIndex != tempRangeEnd) {
						positions = getPositions(_gthis.text,textIndex,tempRangeEnd);
						widthValue = getPositionsWidth(positions);
						nextLayoutGroup(textIndex,tempRangeEnd);
						layoutGroup.positions = positions;
						var offsetX1 = offsetX;
						var placeFormattedText = getBaseX();
						layoutGroup.offsetX = offsetX1 + placeFormattedText;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY + 2;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						offsetX += widthValue;
						textIndex = tempRangeEnd;
					}
					if(tempRangeEnd == formatRange.end) {
						layoutGroup = null;
					}
					if(tempRangeEnd == endIndex) {
						break;
					}
					if(!nextFormatRange()) {
						lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and create an issue on GitHub so we can fix this.",{ fileName : "openfl/text/_internal/TextEngine.hx", lineNumber : 1205, className : "openfl.text._internal.TextEngine", methodName : "getLayoutGroups"});
						break;
					}
					setLineMetrics();
				}
			}
			textIndex = endIndex;
		};
		var alignBaseline = function() {
			setLineMetrics();
			var i = _gthis.layoutGroups.get_length();
			while(--i > -1) {
				var lg = _gthis.layoutGroups.get(i);
				if(lg.lineIndex < lineIndex) {
					break;
				}
				if(lg.lineIndex > lineIndex) {
					continue;
				}
				lg.ascent = maxAscent;
				lg.height = maxHeightValue;
			}
			offsetY += maxHeightValue;
			maxAscent = 0.0;
			maxHeightValue = 0;
			lineIndex += 1;
			offsetX = 0;
			firstLineOfParagraph = false;
		};
		var breakLongWords = function(endIndex) {
			var remainingPositions = positions;
			var bufferCount;
			var placeIndex;
			var positionWidth;
			var currentPosition;
			var tempWidth = getPositionsWidth(remainingPositions);
			var i = remainingPositions.length - 1;
			while(i >= 0) {
				var currentCharCode = HxOverrides.cca(_gthis.text,textIndex + i);
				if(currentCharCode != 32 && currentCharCode != 9) {
					break;
				}
				var position = remainingPositions[i];
				tempWidth -= position;
				--i;
			}
			while(remainingPositions.length > 0 && offsetX + tempWidth > getWrapWidth()) {
				bufferCount = 0;
				i = bufferCount;
				positionWidth = 0.0;
				while(offsetX + positionWidth < getWrapWidth()) {
					currentPosition = remainingPositions[i];
					if(currentPosition == 0.0) {
						++i;
						++bufferCount;
					} else {
						positionWidth += currentPosition;
						++i;
					}
				}
				if(i == bufferCount) {
					i = bufferCount + 1;
				} else {
					while(i > 1 && offsetX + positionWidth > getWrapWidth()) {
						--i;
						if(i - bufferCount > 0) {
							setFormattedPositions(textIndex,textIndex + i - bufferCount);
							positionWidth = widthValue;
						} else {
							i = 1;
							bufferCount = 0;
							setFormattedPositions(textIndex,textIndex + 1);
							positionWidth = 0;
						}
					}
				}
				placeIndex = textIndex + i - bufferCount;
				placeFormattedText(placeIndex);
				alignBaseline();
				setFormattedPositions(placeIndex,endIndex);
				remainingPositions = positions;
				tempWidth = widthValue;
			}
		};
		var placeText = function(endIndex) {
			if(_gthis.width >= 4 && _gthis.wordWrap) {
				breakLongWords(endIndex);
			}
			placeFormattedText(endIndex);
		};
		nextFormatRange();
		setParagraphMetrics();
		setLineMetrics();
		var wrap;
		var maxLoops = this.text.length + 1;
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex)) {
			if(textIndex <= breakIndex) {
				setFormattedPositions(textIndex,breakIndex);
				placeText(breakIndex);
				layoutGroup = null;
			} else if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				if(layoutGroup.endIndex == spaceIndex) {
					layoutGroup.width -= layoutGroup.positions[layoutGroup.positions.length - 1];
				}
				layoutGroup = null;
			}
			alignBaseline();
			if(formatRange.end == breakIndex) {
				nextFormatRange();
				setLineMetrics();
			}
			textIndex = breakIndex + 1;
			previousBreakIndex = breakIndex;
			++breakCount;
			breakIndex = breakCount < this.lineBreaks.get_length() ? this.lineBreaks.get(breakCount) : -1;
			setParagraphMetrics();
		} else if(spaceIndex > -1) {
			if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = null;
			}
			wrap = false;
			while(textIndex < this.text.length) {
				var endIndex = -1;
				if(spaceIndex == -1) {
					endIndex = breakIndex;
				} else {
					endIndex = spaceIndex + 1;
					if(breakIndex > -1 && breakIndex < endIndex) {
						endIndex = breakIndex;
					}
				}
				if(endIndex == -1) {
					endIndex = this.text.length;
				}
				setFormattedPositions(textIndex,endIndex);
				if(align == 2) {
					if(positions.length > 0 && textIndex == previousSpaceIndex) {
						textIndex += 1;
						var spaceWidth = positions.shift();
						widthValue -= spaceWidth;
						offsetX += spaceWidth;
					}
					if(positions.length > 0 && endIndex == spaceIndex + 1) {
						--endIndex;
						var spaceWidth1 = positions.pop();
						widthValue -= spaceWidth1;
					}
				}
				if(this.wordWrap) {
					if(offsetX + widthValue > getWrapWidth()) {
						wrap = true;
						if(positions.length > 0 && endIndex == spaceIndex + 1) {
							var lastPosition = positions[positions.length - 1];
							var spaceWidth2 = lastPosition;
							if(offsetX + widthValue - spaceWidth2 <= getWrapWidth()) {
								wrap = false;
							}
						}
					}
				}
				if(wrap) {
					if(align != 2 && (layoutGroup != null || this.layoutGroups.get_length() > 0)) {
						var previous = layoutGroup;
						if(previous == null) {
							previous = this.layoutGroups.get(this.layoutGroups.get_length() - 1);
						}
						previous.width -= previous.positions[previous.positions.length - 1];
						previous.endIndex--;
					}
					var i = this.layoutGroups.get_length() - 1;
					var offsetCount = 0;
					while(i >= 0) {
						layoutGroup = this.layoutGroups.get(i);
						if(i > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i;
					}
					if(textIndex == previousSpaceIndex + 1) {
						alignBaseline();
					}
					offsetX = 0;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups.get(this.layoutGroups.get_length() - offsetCount).offsetX;
						var _g = this.layoutGroups.get_length() - offsetCount;
						var _g1 = this.layoutGroups.get_length();
						while(_g < _g1) {
							var i1 = _g++;
							layoutGroup = this.layoutGroups.get(i1);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY + 2;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					placeText(endIndex);
					wrap = false;
				} else if(layoutGroup != null && textIndex == spaceIndex && previousSpaceIndex != spaceIndex - 1) {
					if(align != 2) {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.positions = layoutGroup.positions.concat(positions);
						layoutGroup.width += widthValue;
					}
					offsetX += widthValue;
					textIndex = endIndex;
				} else if(layoutGroup == null || align == 2) {
					placeText(endIndex);
					if(endIndex == this.text.length) {
						alignBaseline();
					}
				} else {
					var tempRangeEnd = endIndex < formatRange.end ? endIndex : formatRange.end;
					if(tempRangeEnd < endIndex) {
						positions = getPositions(this.text,textIndex,tempRangeEnd);
						widthValue = getPositionsWidth(positions);
					}
					layoutGroup.endIndex = tempRangeEnd;
					layoutGroup.positions = layoutGroup.positions.concat(positions);
					layoutGroup.width += widthValue;
					offsetX += widthValue;
					if(tempRangeEnd == formatRange.end) {
						layoutGroup = null;
						nextFormatRange();
						setLineMetrics();
						textIndex = tempRangeEnd;
						if(tempRangeEnd != endIndex) {
							placeFormattedText(endIndex);
						}
					}
					if(breakIndex == endIndex) {
						++endIndex;
					}
					textIndex = endIndex;
					if(endIndex == this.text.length) {
						alignBaseline();
						if(breakIndex != -1) {
							previousBreakIndex = breakIndex;
							++breakCount;
							breakIndex = breakCount < this.lineBreaks.get_length() ? this.lineBreaks.get(breakCount) : -1;
						}
					}
				}
				var nextSpaceIndex = this.text.indexOf(" ",textIndex);
				if(breakIndex == previousSpaceIndex) {
					layoutGroup.endIndex = breakIndex;
					if(breakIndex - layoutGroup.startIndex - layoutGroup.positions.length < 0) {
						layoutGroup.positions.push(0.0);
					}
					textIndex = breakIndex + 1;
				}
				previousSpaceIndex = spaceIndex;
				spaceIndex = nextSpaceIndex;
				if(breakIndex > -1 && breakIndex <= textIndex && (spaceIndex > breakIndex || spaceIndex == -1) || textIndex > this.text.length) {
					break;
				}
			}
		} else {
			if(textIndex < this.text.length) {
				setFormattedPositions(textIndex,this.text.length);
				placeText(this.text.length);
				alignBaseline();
			}
			textIndex += 1;
		}
		if(previousBreakIndex == textIndex - 2 && previousBreakIndex > -1) {
			nextLayoutGroup(textIndex - 1,textIndex - 1);
			layoutGroup.positions = [];
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetX = getBaseX();
			layoutGroup.offsetY = offsetY + 2;
			layoutGroup.width = 0;
			layoutGroup.height = heightValue;
		}
	}
	,measureText: function(text) {
		return openfl_text__$internal_TextEngine.__context.measureText(text).width;
	}
	,restrictText: function(value) {
		if(value == null) {
			return value;
		}
		if(this.__restrictRegexp != null) {
			value = this.__restrictRegexp.split(value).join("");
		}
		return value;
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var totalWidth = this.width - 4;
		var group;
		var lineLength;
		var lineMeasurementsDirty = false;
		var _g = 0;
		var _g1 = this.layoutGroups.get_length();
		while(_g < _g1) {
			var i = _g++;
			group = this.layoutGroups.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				totalWidth = this.width - 4 - group.format.rightMargin;
				switch(group.format.align) {
				case 0:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						offsetX = Math.round((totalWidth - this.lineWidths.get(lineIndex)) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						lineLength = 1;
						var _g2 = i + 1;
						var _g3 = this.layoutGroups.get_length();
						while(_g2 < _g3) {
							var j = _g2++;
							if(this.layoutGroups.get(j).lineIndex == lineIndex) {
								if(j == 0 || HxOverrides.cca(this.text,this.layoutGroups.get(j).startIndex - 1) == 32) {
									++lineLength;
								}
							} else {
								break;
							}
						}
						if(lineLength > 1) {
							group = this.layoutGroups.get(i + lineLength - 1);
							var endChar = HxOverrides.cca(this.text,group.endIndex);
							if(group.endIndex < this.text.length && endChar != 10 && endChar != 13) {
								offsetX = (totalWidth - this.lineWidths.get(lineIndex)) / (lineLength - 1);
								lineMeasurementsDirty = true;
								var j1 = 1;
								do this.layoutGroups.get(i + j1).offsetX += offsetX * j1; while(++j1 < lineLength);
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						offsetX = Math.round(totalWidth - this.lineWidths.get(lineIndex));
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
		if(lineMeasurementsDirty) {
			this.getLineMeasurements();
		}
	}
	,trimText: function(value) {
		if(value == null) {
			return value;
		}
		if(this.maxChars > 0 && value.length > this.maxChars) {
			value = HxOverrides.substr(value,0,this.maxChars);
		}
		return value;
	}
	,update: function() {
		if(this.text == null || this.textFormatRanges.get_length() == 0) {
			this.lineAscents.set_length(0);
			this.lineBreaks.set_length(0);
			this.lineDescents.set_length(0);
			this.lineLeadings.set_length(0);
			this.lineHeights.set_length(0);
			this.lineWidths.set_length(0);
			this.layoutGroups.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLineBreaks();
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,get_bottomScrollV: function() {
		if(this.numLines == 1 || this.lineHeights == null) {
			return 1;
		} else {
			var ret = this.lineHeights.get_length();
			var tempHeight = this.lineLeadings.get_length() == ret ? -this.lineLeadings.get(ret - 1) : 0.0;
			var _g = (this.get_scrollV() > 0 ? this.get_scrollV() : 1) - 1;
			var _g1 = this.lineHeights.get_length();
			while(_g < _g1) {
				var i = _g++;
				var lineHeight = this.lineHeights.get(i);
				tempHeight += lineHeight;
				if(tempHeight > this.height - 4) {
					ret = i + (tempHeight - this.height >= 0 ? 0 : 1);
					break;
				}
			}
			if(ret < this.get_scrollV()) {
				return this.get_scrollV();
			}
			return ret;
		}
	}
	,get_maxScrollV: function() {
		if(this.numLines == 1 || this.lineHeights == null) {
			return 1;
		} else {
			var i = this.numLines - 1;
			var tempHeight = 0.0;
			var j = i;
			while(i >= 0) {
				tempHeight += this.lineHeights.get(i);
				if(tempHeight > this.height - 4) {
					i += tempHeight - this.height < 0 ? 1 : 2;
					break;
				}
				--i;
			}
			if(i < 1) {
				return 1;
			}
			return i;
		}
	}
	,set_restrict: function(value) {
		if(this.restrict == value) {
			return this.restrict;
		}
		this.restrict = value;
		if(this.restrict == null || this.restrict.length == 0) {
			this.__restrictRegexp = null;
		} else {
			this.__restrictRegexp = this.createRestrictRegexp(value);
		}
		return this.restrict;
	}
	,get_scrollV: function() {
		if(this.numLines == 1 || this.lineHeights == null) {
			return 1;
		}
		var max = this.get_maxScrollV();
		if(this.scrollV > max) {
			return max;
		}
		return this.scrollV;
	}
	,set_scrollV: function(value) {
		if(value < 1) {
			value = 1;
		} else if(value > this.get_maxScrollV()) {
			value = this.get_maxScrollV();
		}
		return this.scrollV = value;
	}
	,set_text: function(value) {
		return this.text = value;
	}
	,__class__: openfl_text__$internal_TextEngine
	,__properties__: {set_text:"set_text",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_restrict:"set_restrict",get_maxScrollV:"get_maxScrollV",get_bottomScrollV:"get_bottomScrollV"}
};
var openfl_text__$internal__$TextEngine_DefaultFontSet = function(normal,bold,italic,boldItalic) {
	this.normal = normal;
	this.bold = bold;
	this.italic = italic;
	this.boldItalic = boldItalic;
};
$hxClasses["openfl.text._internal._TextEngine.DefaultFontSet"] = openfl_text__$internal__$TextEngine_DefaultFontSet;
openfl_text__$internal__$TextEngine_DefaultFontSet.__name__ = "openfl.text._internal._TextEngine.DefaultFontSet";
openfl_text__$internal__$TextEngine_DefaultFontSet.prototype = {
	bold: null
	,boldItalic: null
	,italic: null
	,normal: null
	,getFont: function(isBold,isItalic) {
		if(isBold && isItalic && this.boldItalic != null) {
			return this.boldItalic;
		}
		if(isItalic && this.italic != null) {
			return this.italic;
		}
		if(isBold && this.bold != null) {
			return this.bold;
		}
		return this.normal;
	}
	,__class__: openfl_text__$internal__$TextEngine_DefaultFontSet
};
var openfl_text__$internal_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl.text._internal.TextFormatRange"] = openfl_text__$internal_TextFormatRange;
openfl_text__$internal_TextFormatRange.__name__ = "openfl.text._internal.TextFormatRange";
openfl_text__$internal_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl_text__$internal_TextFormatRange
};
var openfl_text__$internal_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) {
		language = "en";
	}
	if(script == null) {
		script = "Zyyy";
	}
	if(direction == null) {
		direction = 4;
	}
	if(size == null) {
		size = 12;
	}
	if(text == null) {
		text = "";
	}
	this.letterSpacing = 0;
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
	this.__create(this.__direction,this.__script,this.__language);
};
$hxClasses["openfl.text._internal.TextLayout"] = openfl_text__$internal_TextLayout;
openfl_text__$internal_TextLayout.__name__ = "openfl.text._internal.TextLayout";
openfl_text__$internal_TextLayout.prototype = {
	autoHint: null
	,font: null
	,glyphs: null
	,letterSpacing: null
	,positions: null
	,size: null
	,text: null
	,__buffer: null
	,__direction: null
	,__dirty: null
	,__handle: null
	,__language: null
	,__script: null
	,__font: null
	,__hbBuffer: null
	,__hbFont: null
	,__create: function(direction,script,language) {
		if(language.length != 4) {
			return;
		}
		this.__hbBuffer = lime_text_harfbuzz_HBBuffer._new();
		var direction1 = direction;
		var this1 = this.__hbBuffer;
		var value = lime_text_harfbuzz_HBLanguage._new(language);
	}
	,__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) {
			return value;
		}
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) {
			return value;
		}
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) {
			return value;
		}
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) {
			return value;
		}
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) {
			return value;
		}
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) {
			return value;
		}
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: openfl_text__$internal_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var openfl_text__$internal_TextDirection = {};
openfl_text__$internal_TextDirection.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"};
openfl_text__$internal_TextDirection.reverse = function(this1) {
	this1 ^= 1;
};
openfl_text__$internal_TextDirection.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
openfl_text__$internal_TextDirection.toHBDirection = function(this1) {
	switch(this1) {
	case 4:
		return 4;
	case 5:
		return 5;
	case 6:
		return 6;
	case 7:
		return 7;
	default:
		return 0;
	}
};
openfl_text__$internal_TextDirection.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
openfl_text__$internal_TextDirection.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
openfl_text__$internal_TextDirection.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
openfl_text__$internal_TextDirection.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var openfl_text__$internal_TextScript = {};
openfl_text__$internal_TextScript.__properties__ = {get_rightToLeft:"get_rightToLeft"};
openfl_text__$internal_TextScript.toHBScript = function(this1) {
	return 1517910393;
};
openfl_text__$internal_TextScript.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Arab":case "Armi":case "Avst":case "Cprt":case "Hebr":case "Khar":case "Lydi":case "Mand":case "Nkoo":case "Orkh":case "Phli":case "Phlp":case "Phnx":case "Samr":case "Sarb":case "Syrc":case "Thaa":
		return true;
	default:
		return false;
	}
};
var openfl_text__$internal_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl.text._internal.TextLayoutGroup"] = openfl_text__$internal_TextLayoutGroup;
openfl_text__$internal_TextLayoutGroup.__name__ = "openfl.text._internal.TextLayoutGroup";
openfl_text__$internal_TextLayoutGroup.prototype = {
	ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,positions: null
	,startIndex: null
	,width: null
	,getAdvance: function(index) {
		return this.positions[index];
	}
	,__class__: openfl_text__$internal_TextLayoutGroup
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = "openfl.ui.GameInput";
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) {
		return openfl_ui_GameInput.__deviceList[index];
	}
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
		var devices = lime_ui_Joystick.__getDeviceData();
		var device = devices[gamepad.id].id;
		var devices = lime_ui_Joystick.__getDeviceData();
		var device1 = new openfl_ui_GameInputDevice(device,devices[gamepad.id].id);
		openfl_ui_GameInput.__deviceList.push(device1);
		openfl_ui_GameInput.__devices.set(gamepad,device1);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control;
			if(axis == null) {
				control = "null";
			} else {
				switch(axis) {
				case 0:
					control = "LEFT_X";
					break;
				case 1:
					control = "LEFT_Y";
					break;
				case 2:
					control = "RIGHT_X";
					break;
				case 3:
					control = "RIGHT_Y";
					break;
				case 4:
					control = "TRIGGER_LEFT";
					break;
				case 5:
					control = "TRIGGER_RIGHT";
					break;
				default:
					control = "UNKNOWN (" + axis + ")";
				}
			}
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + control,-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control = device.__axis.h[axis];
		control.value = value;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			if(button == null) {
				control = "null";
			} else {
				switch(button) {
				case 0:
					control = "A";
					break;
				case 1:
					control = "B";
					break;
				case 2:
					control = "X";
					break;
				case 3:
					control = "Y";
					break;
				case 4:
					control = "BACK";
					break;
				case 5:
					control = "GUIDE";
					break;
				case 6:
					control = "START";
					break;
				case 7:
					control = "LEFT_STICK";
					break;
				case 8:
					control = "RIGHT_STICK";
					break;
				case 9:
					control = "LEFT_SHOULDER";
					break;
				case 10:
					control = "RIGHT_SHOULDER";
					break;
				case 11:
					control = "DPAD_UP";
					break;
				case 12:
					control = "DPAD_DOWN";
					break;
				case 13:
					control = "DPAD_LEFT";
					break;
				case 14:
					control = "DPAD_RIGHT";
					break;
				default:
					control = "UNKNOWN (" + button + ")";
				}
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 1;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			if(button == null) {
				control = "null";
			} else {
				switch(button) {
				case 0:
					control = "A";
					break;
				case 1:
					control = "B";
					break;
				case 2:
					control = "X";
					break;
				case 3:
					control = "Y";
					break;
				case 4:
					control = "BACK";
					break;
				case 5:
					control = "GUIDE";
					break;
				case 6:
					control = "START";
					break;
				case 7:
					control = "LEFT_STICK";
					break;
				case 8:
					control = "RIGHT_STICK";
					break;
				case 9:
					control = "LEFT_SHOULDER";
					break;
				case 10:
					control = "RIGHT_SHOULDER";
					break;
				case 11:
					control = "DPAD_UP";
					break;
				case 12:
					control = "DPAD_DOWN";
					break;
				case 13:
					control = "DPAD_LEFT";
					break;
				case 14:
					control = "DPAD_RIGHT";
					break;
				default:
					control = "UNKNOWN (" + button + ")";
				}
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 0;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",true,false,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.h[gamepad.__id__]);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",true,false,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(type == "deviceAdded") {
			var _g = 0;
			var _g1 = openfl_ui_GameInput.__deviceList;
			while(_g < _g1.length) {
				var device = _g1[_g];
				++_g;
				this.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",true,false,device));
			}
		}
	}
	,__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = "openfl.ui.GameInputControl";
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 0,-1,1);
	this.__axis.h[0] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 1,-1,1);
	this.__axis.h[1] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 2,-1,1);
	this.__axis.h[2] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 3,-1,1);
	this.__axis.h[3] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 4,-1,1);
	this.__axis.h[4] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 5,-1,1);
	this.__axis.h[5] = control;
	this.__controls.push(control);
	var _g = 0;
	while(_g < 15) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i,0,1);
		this.__button.h[i] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = "openfl.ui.GameInputDevice";
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,sampleInterval: null
	,__axis: null
	,__button: null
	,__controls: null
	,__gamepad: null
	,getCachedSamples: function(data,append) {
		if(append == null) {
			append = false;
		}
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) {
			return this.__controls[i];
		}
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = "openfl.ui.Keyboard";
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 13;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = "openfl.ui.Mouse";
openfl_ui_Mouse.__properties__ = {set_cursor:"set_cursor",get_cursor:"get_cursor"};
openfl_ui_Mouse.hide = function() {
	openfl_ui_Mouse.__hidden = true;
	var _g = 0;
	var _g1 = lime_app_Application.current.__windows;
	while(_g < _g1.length) {
		var $window = _g1[_g];
		++_g;
		$window.set_cursor(null);
	}
};
openfl_ui_Mouse.show = function() {
	openfl_ui_Mouse.__hidden = false;
	var cacheCursor = openfl_ui_Mouse.__cursor;
	openfl_ui_Mouse.__cursor = null;
	openfl_ui_Mouse.set_cursor(cacheCursor);
};
openfl_ui_Mouse.get_cursor = function() {
	return openfl_ui_Mouse.__cursor;
};
openfl_ui_Mouse.set_cursor = function(value) {
	if(value == null) {
		value = "auto";
	}
	var setCursor = null;
	switch(value) {
	case "arrow":
		setCursor = lime_ui_MouseCursor.ARROW;
		break;
	case "button":
		setCursor = lime_ui_MouseCursor.POINTER;
		break;
	case "crosshair":
		setCursor = lime_ui_MouseCursor.CROSSHAIR;
		break;
	case "custom":
		setCursor = lime_ui_MouseCursor.CUSTOM;
		break;
	case "hand":
		setCursor = lime_ui_MouseCursor.MOVE;
		break;
	case "ibeam":
		setCursor = lime_ui_MouseCursor.TEXT;
		break;
	case "resize_nesw":
		setCursor = lime_ui_MouseCursor.RESIZE_NESW;
		break;
	case "resize_ns":
		setCursor = lime_ui_MouseCursor.RESIZE_NS;
		break;
	case "resize_nwse":
		setCursor = lime_ui_MouseCursor.RESIZE_NWSE;
		break;
	case "resize_we":
		setCursor = lime_ui_MouseCursor.RESIZE_WE;
		break;
	case "wait":
		setCursor = lime_ui_MouseCursor.WAIT;
		break;
	case "waitarrow":
		setCursor = lime_ui_MouseCursor.WAIT_ARROW;
		break;
	default:
	}
	if(setCursor != null && !openfl_ui_Mouse.__hidden) {
		var _g = 0;
		var _g1 = lime_app_Application.current.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.set_cursor(setCursor);
		}
	}
	return openfl_ui_Mouse.__cursor = value;
};
var openfl_ui_MouseCursor = {};
openfl_ui_MouseCursor.fromLimeCursor = function(cursor) {
	switch(cursor._hx_index) {
	case 0:
		return "arrow";
	case 1:
		return "crosshair";
	case 2:
		return "auto";
	case 3:
		return "hand";
	case 4:
		return "button";
	case 5:
		return "resize_nesw";
	case 6:
		return "resize_ns";
	case 7:
		return "resize_nwse";
	case 8:
		return "resize_we";
	case 9:
		return "ibeam";
	case 10:
		return "wait";
	case 11:
		return "waitarrow";
	case 12:
		return "custom";
	}
};
openfl_ui_MouseCursor.toLimeCursor = function(this1) {
	switch(this1) {
	case "arrow":
		return lime_ui_MouseCursor.ARROW;
	case "auto":
		return lime_ui_MouseCursor.DEFAULT;
	case "button":
		return lime_ui_MouseCursor.POINTER;
	case "crosshair":
		return lime_ui_MouseCursor.CROSSHAIR;
	case "custom":
		return lime_ui_MouseCursor.CUSTOM;
	case "hand":
		return lime_ui_MouseCursor.MOVE;
	case "ibeam":
		return lime_ui_MouseCursor.TEXT;
	case "resize_nesw":
		return lime_ui_MouseCursor.RESIZE_NESW;
	case "resize_ns":
		return lime_ui_MouseCursor.RESIZE_NS;
	case "resize_nwse":
		return lime_ui_MouseCursor.RESIZE_NWSE;
	case "resize_we":
		return lime_ui_MouseCursor.RESIZE_WE;
	case "wait":
		return lime_ui_MouseCursor.WAIT;
	case "waitarrow":
		return lime_ui_MouseCursor.WAIT_ARROW;
	default:
		return lime_ui_MouseCursor.DEFAULT;
	}
};
var openfl_utils_AGALMiniAssembler = function(debugging) {
	if(debugging == null) {
		debugging = false;
	}
	this.debugEnabled = false;
	this.debugEnabled = debugging;
	if(!openfl_utils_AGALMiniAssembler.initialized) {
		openfl_utils_AGALMiniAssembler.init();
	}
};
$hxClasses["openfl.utils.AGALMiniAssembler"] = openfl_utils_AGALMiniAssembler;
openfl_utils_AGALMiniAssembler.__name__ = "openfl.utils.AGALMiniAssembler";
openfl_utils_AGALMiniAssembler.init = function() {
	openfl_utils_AGALMiniAssembler.initialized = true;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("mov",2,0,0);
	this1.h["mov"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("add",3,1,0);
	this1.h["add"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sub",3,2,0);
	this1.h["sub"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("mul",3,3,0);
	this1.h["mul"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("div",3,4,0);
	this1.h["div"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("rcp",2,5,0);
	this1.h["rcp"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("min",3,6,0);
	this1.h["min"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("max",3,7,0);
	this1.h["max"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("frc",2,8,0);
	this1.h["frc"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sqt",2,9,0);
	this1.h["sqt"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("rsq",2,10,0);
	this1.h["rsq"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("pow",3,11,0);
	this1.h["pow"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("log",2,12,0);
	this1.h["log"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("exp",2,13,0);
	this1.h["exp"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("nrm",2,14,0);
	this1.h["nrm"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sin",2,15,0);
	this1.h["sin"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("cos",2,16,0);
	this1.h["cos"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("crs",3,17,0);
	this1.h["crs"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("dp3",3,18,0);
	this1.h["dp3"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("dp4",3,19,0);
	this1.h["dp4"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("abs",2,20,0);
	this1.h["abs"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("neg",2,21,0);
	this1.h["neg"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sat",2,22,0);
	this1.h["sat"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("m33",3,23,16);
	this1.h["m33"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("m44",3,24,16);
	this1.h["m44"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("m34",3,25,16);
	this1.h["m34"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ddx",2,26,288);
	this1.h["ddx"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ddy",2,27,288);
	this1.h["ddy"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ife",2,28,897);
	this1.h["ife"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ine",2,29,897);
	this1.h["ine"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ifg",2,30,897);
	this1.h["ifg"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ifl",2,31,897);
	this1.h["ifl"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("els",0,32,1921);
	this1.h["els"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("eif",0,33,1409);
	this1.h["eif"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("kil",1,39,160);
	this1.h["kil"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("tex",3,40,40);
	this1.h["tex"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sge",3,41,0);
	this1.h["sge"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("slt",3,42,0);
	this1.h["slt"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sgn",2,43,0);
	this1.h["sgn"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("seq",3,44,0);
	this1.h["seq"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sne",3,45,0);
	this1.h["sne"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("rgba",8,0);
	this1.h["rgba"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("compressed",8,1);
	this1.h["compressed"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("compressedalpha",8,2);
	this1.h["compressedalpha"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("dxt1",8,1);
	this1.h["dxt1"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("dxt5",8,2);
	this1.h["dxt5"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("video",8,3);
	this1.h["video"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("2d",12,0);
	this1.h["2d"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("3d",12,2);
	this1.h["3d"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("cube",12,1);
	this1.h["cube"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("mipnearest",24,1);
	this1.h["mipnearest"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("miplinear",24,2);
	this1.h["miplinear"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("mipnone",24,0);
	this1.h["mipnone"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("nomip",24,0);
	this1.h["nomip"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("nearest",28,0);
	this1.h["nearest"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("linear",28,1);
	this1.h["linear"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic2x",28,2);
	this1.h["anisotropic2x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic4x",28,3);
	this1.h["anisotropic4x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic8x",28,4);
	this1.h["anisotropic8x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic16x",28,5);
	this1.h["anisotropic16x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("centroid",16,1);
	this1.h["centroid"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("single",16,2);
	this1.h["single"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("ignoresampler",16,4);
	this1.h["ignoresampler"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("repeat",20,1);
	this1.h["repeat"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("wrap",20,1);
	this1.h["wrap"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("clamp",20,0);
	this1.h["clamp"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("clamp_u_repeat_v",20,2);
	this1.h["clamp_u_repeat_v"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("repeat_u_clamp_v",20,3);
	this1.h["repeat_u_clamp_v"] = v;
};
openfl_utils_AGALMiniAssembler.prototype = {
	agalcode: null
	,error: null
	,verbose: null
	,debugEnabled: null
	,assemble2: function(context3D,version,vertexSource,fragmentSource) {
		var agalVertex = this.assemble("vertex",vertexSource,version);
		var agalFragment = this.assemble("fragment",fragmentSource,version);
		var program = context3D.createProgram();
		program.upload(agalVertex,agalFragment);
		return program;
	}
	,assemble: function(mode,source,version,ignoreLimits) {
		if(ignoreLimits == null) {
			ignoreLimits = false;
		}
		if(version == null) {
			version = 1;
		}
		var start = openfl_Lib.getTimer();
		this.agalcode = new openfl_utils_ByteArrayData(0);
		this.error = "";
		var isFrag = false;
		if(mode == "fragment") {
			isFrag = true;
		} else if(mode != "vertex") {
			this.error = "ERROR: mode needs to be \"" + "fragment" + "\" or \"" + "vertex" + "\" but is \"" + mode + "\".";
		}
		this.agalcode.__endian = 1;
		this.agalcode.writeByte(160);
		this.agalcode.writeUnsignedInt(version);
		this.agalcode.writeByte(161);
		this.agalcode.writeByte(isFrag ? 1 : 0);
		this.initregmap(version,ignoreLimits);
		var lines = StringTools.replace(source,"\r","\n").split("\n");
		var nops = 0;
		var lng = lines.length;
		var reg1 = new EReg("<.*>","g");
		var reg2 = new EReg("([\\w\\.\\-\\+]+)","gi");
		var reg3 = new EReg("^\\w{3}","ig");
		var reg4 = new EReg("vc\\[([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw](\\+\\d{1,3})?)?\\](\\.[xyzw]{1,4})?|([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw]{1,4})?","gi");
		var reg5 = new EReg("\\[.*\\]","ig");
		var reg6 = new EReg("^\\b[A-Za-z]{1,3}","ig");
		var reg7 = new EReg("\\d+","");
		var reg8 = new EReg("(\\.[xyzw]{1,4})","");
		var reg9 = new EReg("[A-Za-z]{1,3}","ig");
		var reg10 = new EReg("(\\.[xyzw]{1,1})","");
		var reg11 = new EReg("\\+\\d{1,3}","ig");
		var i = 0;
		while(i < lng && this.error == "") {
			var line = StringTools.trim(lines[i]);
			var startcomment = line.indexOf("//");
			if(startcomment != -1) {
				line = HxOverrides.substr(line,0,startcomment);
			}
			var optsi = reg1.match(line) ? reg1.matchedPos().pos : -1;
			var opts = null;
			if(optsi != -1) {
				opts = this.match(HxOverrides.substr(line,optsi,null),reg2);
				line = HxOverrides.substr(line,0,optsi);
			}
			var opCode = null;
			var opFound = null;
			if(reg3.match(line)) {
				opCode = reg3.matched(0);
				opFound = openfl_utils_AGALMiniAssembler.OPMAP.h[opCode];
			}
			if(opFound == null) {
				if(line.length >= 3) {
					lime_utils_Log.warn("warning: bad line " + i + ": " + lines[i],{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 262, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			if(this.debugEnabled) {
				lime_utils_Log.info(opFound,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 272, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			if(opFound == null) {
				if(line.length >= 3) {
					lime_utils_Log.warn("warning: bad line " + i + ": " + lines[i],{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 279, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			line = HxOverrides.substr(line,line.indexOf(opFound.name) + opFound.name.length,null);
			if((opFound.flags & 256) != 0 && version < 2) {
				this.error = "error: opcode requires version 2.";
				break;
			}
			if((opFound.flags & 64) != 0 && isFrag) {
				this.error = "error: opcode is only allowed in vertex programs.";
				break;
			}
			if((opFound.flags & 32) != 0 && !isFrag) {
				this.error = "error: opcode is only allowed in fragment programs.";
				break;
			}
			if(this.verbose) {
				lime_utils_Log.info("emit opcode=" + Std.string(opFound),{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 308, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			this.agalcode.writeUnsignedInt(opFound.emitCode);
			++nops;
			if(nops > 4096) {
				this.error = "error: too many opcodes. maximum is " + 4096 + ".";
				break;
			}
			var regs = this.match(line,reg4);
			if(regs.length != opFound.numRegister) {
				this.error = "error: wrong number of operands. found " + regs.length + " but expected " + opFound.numRegister + ".";
				break;
			}
			var badreg = false;
			var pad = 160;
			var regLength = regs.length;
			var _g = 0;
			var _g1 = regLength;
			while(_g < _g1) {
				var j = _g++;
				var isRelative = false;
				var relreg = this.match(regs[j],reg5);
				if(relreg.length > 0) {
					regs[j] = StringTools.replace(regs[j],relreg[0],"0");
					if(this.verbose) {
						lime_utils_Log.info("IS REL",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 344, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					isRelative = true;
				}
				var res = this.match(regs[j],reg6);
				if(res.length == 0) {
					this.error = "error: could not parse operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				var regFound = openfl_utils_AGALMiniAssembler.REGMAP.h[res[0]];
				if(this.debugEnabled) {
					lime_utils_Log.info(regFound,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 363, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(regFound == null) {
					this.error = "error: could not find register name for operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				if(isFrag) {
					if((regFound.flags & 32) == 0) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in vertex programs.";
						badreg = true;
						break;
					}
					if(isRelative) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") relative adressing not allowed in fragment programs.";
						badreg = true;
						break;
					}
				} else if((regFound.flags & 64) == 0) {
					this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in fragment programs.";
					badreg = true;
					break;
				}
				regs[j] = HxOverrides.substr(regs[j],regs[j].indexOf(regFound.name) + regFound.name.length,null);
				var idxmatch = isRelative ? this.match(relreg[0],reg7) : this.match(regs[j],reg7);
				var regidx = 0;
				if(idxmatch.length > 0) {
					regidx = Std.parseInt(idxmatch[0]);
				}
				if(UInt.gt(regidx,regFound.range)) {
					var tmp = regFound.range + 1;
					this.error = "error: register operand " + j + " (" + regs[j] + ") index exceeds limit of " + (tmp == null ? "null" : Std.string(UInt.toFloat(tmp))) + ".";
					badreg = true;
					break;
				}
				var regmask = 0;
				var maskmatch = this.match(regs[j],reg8);
				var isDest = j == 0 && (opFound.flags & 128) == 0;
				var isSampler = j == 2 && (opFound.flags & 8) != 0;
				var reltype = 0;
				var relsel = 0;
				var reloffset = 0;
				if(isDest && isRelative) {
					this.error = "error: relative can not be destination";
					badreg = true;
					break;
				}
				if(maskmatch.length > 0) {
					regmask = 0;
					var cv = 0;
					var maskLength = maskmatch[0].length;
					var k = 1;
					while(k < maskLength) {
						cv = HxOverrides.cca(maskmatch[0],k) - 120;
						if(UInt.gt(cv,2)) {
							cv = 3;
						}
						if(isDest) {
							regmask |= 1 << cv;
						} else {
							regmask = regmask | cv << (k - 1 << 1);
						}
						++k;
					}
					if(!isDest) {
						while(k <= 4) {
							regmask = regmask | cv << (k - 1 << 1);
							++k;
						}
					}
				} else {
					regmask = isDest ? 15 : 228;
				}
				if(isRelative) {
					var relname = this.match(relreg[0],reg9);
					var regFoundRel = openfl_utils_AGALMiniAssembler.REGMAP.h[relname[0]];
					if(regFoundRel == null) {
						this.error = "error: bad index register";
						badreg = true;
						break;
					}
					reltype = regFoundRel.emitCode;
					var selmatch = this.match(relreg[0],reg10);
					if(selmatch.length == 0) {
						this.error = "error: bad index register select";
						badreg = true;
						break;
					}
					relsel = HxOverrides.cca(selmatch[0],1) - 120;
					if(UInt.gt(relsel,2)) {
						relsel = 3;
					}
					var relofs = this.match(relreg[0],reg11);
					if(relofs.length > 0) {
						reloffset = Std.parseInt(relofs[0]);
					}
					if(reloffset < 0 || reloffset > 255) {
						this.error = "error: index offset " + reloffset + " out of bounds. [0..255]";
						badreg = true;
						break;
					}
					if(this.verbose) {
						lime_utils_Log.info("RELATIVE: type=" + reltype + "==" + relname[0] + " sel=" + (relsel == null ? "null" : Std.string(UInt.toFloat(relsel))) + "==" + selmatch[0] + " idx=" + (regidx == null ? "null" : Std.string(UInt.toFloat(regidx))) + " offset=" + reloffset,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 518, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
				}
				if(this.verbose) {
					lime_utils_Log.info("  emit argcode=" + Std.string(regFound) + "[" + (regidx == null ? "null" : Std.string(UInt.toFloat(regidx))) + "][" + regmask + "]",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 525, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(isDest) {
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					pad -= 32;
				} else if(isSampler) {
					if(this.verbose) {
						lime_utils_Log.info("  emit sampler",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 541, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					var samplerbits = 5;
					var optsLength = opts == null ? 0 : opts.length;
					var bias = 0.0;
					var _g2 = 0;
					var _g3 = optsLength;
					while(_g2 < _g3) {
						var k1 = _g2++;
						if(this.verbose) {
							lime_utils_Log.info("    opt: " + opts[k1],{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 552, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
						}
						var optfound = openfl_utils_AGALMiniAssembler.SAMPLEMAP.h[opts[k1]];
						if(optfound == null) {
							bias = parseFloat(opts[k1]);
							if(this.verbose) {
								lime_utils_Log.info("    bias: " + bias,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 565, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
							}
						} else {
							if(optfound.flag != 16) {
								samplerbits &= ~(15 << optfound.flag);
							}
							samplerbits = samplerbits | optfound.mask << optfound.flag;
						}
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(bias * 8.0 | 0);
					this.agalcode.writeByte(0);
					this.agalcode.writeUnsignedInt(samplerbits);
					if(this.verbose) {
						lime_utils_Log.info("    bits: " + (samplerbits - 5),{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 586, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					pad -= 64;
				} else {
					if(j == 0) {
						this.agalcode.writeUnsignedInt(0);
						pad -= 32;
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(reloffset);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					this.agalcode.writeByte(reltype);
					this.agalcode.writeShort(isRelative ? relsel | 32768 : 0);
					pad -= 64;
				}
			}
			var j1 = 0;
			while(j1 < pad) {
				this.agalcode.writeByte(0);
				j1 += 8;
			}
			if(badreg) {
				break;
			}
			++i;
		}
		if(this.error != "") {
			this.error += "\n  at line " + i + " " + lines[i];
			openfl_utils_ByteArray.set_length(this.agalcode,0);
			lime_utils_Log.info(this.error,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 631, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.debugEnabled) {
			var dbgLine = "generated bytecode:";
			var agalLength = openfl_utils_ByteArray.get_length(this.agalcode);
			var _g = 0;
			var _g1 = agalLength;
			while(_g < _g1) {
				var index = _g++;
				if(index % 16 == 0) {
					dbgLine += "\n";
				}
				if(index % 4 == 0) {
					dbgLine += " ";
				}
				var byteStr = StringTools.hex(this.agalcode.b[index],2);
				if(byteStr.length < 2) {
					byteStr = "0" + byteStr;
				}
				dbgLine += byteStr;
			}
			lime_utils_Log.info(dbgLine,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 662, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.verbose) {
			lime_utils_Log.info("AGALMiniAssembler.assemble time: " + (openfl_Lib.getTimer() - start) / 1000 + "s",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 667, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		return this.agalcode;
	}
	,initregmap: function(version,ignorelimits) {
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("va","vertex attribute",0,ignorelimits ? 1024 : version == 1 || version == 2 ? 7 : 15,66);
		this1.h["va"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vc","vertex constant",1,ignorelimits ? 1024 : version == 1 ? 127 : 249,66);
		this1.h["vc"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vt","vertex temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,67);
		this1.h["vt"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vo","vertex output",3,ignorelimits ? 1024 : 0,65);
		this1.h["vo"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vi","varying",4,ignorelimits ? 1024 : version == 1 ? 7 : 9,99);
		this1.h["vi"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fc","fragment constant",1,ignorelimits ? 1024 : version == 1 ? 27 : version == 2 ? 63 : 199,34);
		this1.h["fc"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("ft","fragment temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,35);
		this1.h["ft"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fs","texture sampler",5,ignorelimits ? 1024 : 7,34);
		this1.h["fs"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fo","fragment output",3,ignorelimits ? 1024 : version == 1 ? 0 : 3,33);
		this1.h["fo"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fd","fragment depth output",6,ignorelimits ? 1024 : version == 1 ? -1 : 0,33);
		this1.h["fd"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("iid","instance id",7,ignorelimits ? 1024 : 0,66);
		this1.h["iid"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vo"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["op"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vi"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["i"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vi"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["v"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["fo"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["oc"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["fd"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["od"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vi"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["fi"] = v;
	}
	,match: function(value,reg) {
		var matches = [];
		var index = 0;
		var match;
		while(reg.matchSub(value,index)) {
			match = reg.matched(0);
			matches.push(match);
			index = reg.matchedPos().pos + match.length;
		}
		return matches;
	}
	,__class__: openfl_utils_AGALMiniAssembler
};
var openfl_utils__$AGALMiniAssembler_OpCode = function(name,numRegister,emitCode,flags) {
	this.name = name;
	this.numRegister = numRegister;
	this.emitCode = emitCode;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.OpCode"] = openfl_utils__$AGALMiniAssembler_OpCode;
openfl_utils__$AGALMiniAssembler_OpCode.__name__ = "openfl.utils._AGALMiniAssembler.OpCode";
openfl_utils__$AGALMiniAssembler_OpCode.prototype = {
	emitCode: null
	,flags: null
	,name: null
	,numRegister: null
	,toString: function() {
		return "[OpCode name=\"" + this.name + "\", numRegister=" + this.numRegister + ", emitCode=" + this.emitCode + ", flags=" + this.flags + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_OpCode
};
var openfl_utils__$AGALMiniAssembler_Register = function(name,longName,emitCode,range,flags) {
	this.name = name;
	this.longName = longName;
	this.emitCode = emitCode;
	this.range = range;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Register"] = openfl_utils__$AGALMiniAssembler_Register;
openfl_utils__$AGALMiniAssembler_Register.__name__ = "openfl.utils._AGALMiniAssembler.Register";
openfl_utils__$AGALMiniAssembler_Register.prototype = {
	emitCode: null
	,name: null
	,longName: null
	,flags: null
	,range: null
	,toString: function() {
		return "[Register name=\"" + this.name + "\", longName=\"" + this.longName + "\", emitCode=" + (this.emitCode == null ? "null" : Std.string(UInt.toFloat(this.emitCode))) + ", range=" + (this.range == null ? "null" : Std.string(UInt.toFloat(this.range))) + ", flags=" + (this.flags == null ? "null" : Std.string(UInt.toFloat(this.flags))) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Register
};
var openfl_utils__$AGALMiniAssembler_Sampler = function(name,flag,mask) {
	this.name = name;
	this.flag = flag;
	this.mask = mask;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Sampler"] = openfl_utils__$AGALMiniAssembler_Sampler;
openfl_utils__$AGALMiniAssembler_Sampler.__name__ = "openfl.utils._AGALMiniAssembler.Sampler";
openfl_utils__$AGALMiniAssembler_Sampler.prototype = {
	flag: null
	,mask: null
	,name: null
	,toString: function() {
		return "[Sampler name=\"" + this.name + "\", flag=\"" + (this.flag == null ? "null" : Std.string(UInt.toFloat(this.flag))) + "\", mask=" + (this.mask == null ? "null" : Std.string(UInt.toFloat(this.mask))) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Sampler
};
var openfl_utils_IAssetCache = function() { };
$hxClasses["openfl.utils.IAssetCache"] = openfl_utils_IAssetCache;
openfl_utils_IAssetCache.__name__ = "openfl.utils.IAssetCache";
openfl_utils_IAssetCache.__isInterface__ = true;
openfl_utils_IAssetCache.prototype = {
	get_enabled: null
	,set_enabled: null
	,clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl_utils_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_utils_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils.AssetCache"] = openfl_utils_AssetCache;
openfl_utils_AssetCache.__name__ = "openfl.utils.AssetCache";
openfl_utils_AssetCache.__interfaces__ = [openfl_utils_IAssetCache];
openfl_utils_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var h = this.bitmapData.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(StringTools.startsWith(key,prefix)) {
					this.removeBitmapData(key);
				}
			}
			var h = this.font.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(StringTools.startsWith(key,prefix)) {
					this.removeFont(key);
				}
			}
			var h = this.sound.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(StringTools.startsWith(key,prefix)) {
					this.removeSound(key);
				}
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.h[id];
	}
	,getFont: function(id) {
		return this.font.h[id];
	}
	,getSound: function(id) {
		return this.sound.h[id];
	}
	,hasBitmapData: function(id) {
		return Object.prototype.hasOwnProperty.call(this.bitmapData.h,id);
	}
	,hasFont: function(id) {
		return Object.prototype.hasOwnProperty.call(this.font.h,id);
	}
	,hasSound: function(id) {
		return Object.prototype.hasOwnProperty.call(this.sound.h,id);
	}
	,removeBitmapData: function(id) {
		var _this = lime_utils_Assets.cache.image;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
		var _this = this.bitmapData;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
			return true;
		} else {
			return false;
		}
	}
	,removeFont: function(id) {
		var _this = lime_utils_Assets.cache.font;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
		var _this = this.font;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
			return true;
		} else {
			return false;
		}
	}
	,removeSound: function(id) {
		var _this = lime_utils_Assets.cache.audio;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
		var _this = this.sound;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
			return true;
		} else {
			return false;
		}
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.h[id] = bitmapData;
	}
	,setFont: function(id,font) {
		this.font.h[id] = font;
	}
	,setSound: function(id,sound) {
		this.sound.h[id] = sound;
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_utils_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_utils_AssetLibrary = function() {
	lime_utils_AssetLibrary.call(this);
};
$hxClasses["openfl.utils.AssetLibrary"] = openfl_utils_AssetLibrary;
openfl_utils_AssetLibrary.__name__ = "openfl.utils.AssetLibrary";
openfl_utils_AssetLibrary.fromBundle = function(bundle) {
	var library = lime_utils_AssetLibrary.fromBundle(bundle);
	if(library != null) {
		if(((library) instanceof openfl_utils_AssetLibrary)) {
			return library;
		} else {
			var _library = new openfl_utils_AssetLibrary();
			_library.__proxy = library;
			return _library;
		}
	} else {
		return null;
	}
};
openfl_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(openfl_utils_ByteArray.toLimeBytes(bytes),rootPath));
};
openfl_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
openfl_utils_AssetLibrary.fromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		if(((library) instanceof openfl_utils_AssetLibrary)) {
			return library;
		} else {
			var _library = new openfl_utils_AssetLibrary();
			_library.__proxy = library;
			return _library;
		}
	} else {
		return null;
	}
};
openfl_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(openfl_utils_ByteArray.toLimeBytes(bytes),rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = openfl_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load().then(function(library) {
			return lime_app_Future.withValue(library);
		});
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
openfl_utils_AssetLibrary.__super__ = lime_utils_AssetLibrary;
openfl_utils_AssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	__proxy: null
	,bind: function(className,instance) {
		return false;
	}
	,exists: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.exists(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.exists.call(this,id,type);
		}
	}
	,getAsset: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.getAsset(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.getAsset.call(this,id,type);
		}
	}
	,getAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getAudioBuffer.call(this,id);
		}
	}
	,getBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getBytes.call(this,id);
		}
	}
	,getFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getFont.call(this,id);
		}
	}
	,getImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getImage.call(this,id);
		}
	}
	,getMovieClip: function(id) {
		return null;
	}
	,getPath: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getPath(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getPath.call(this,id);
		}
	}
	,getText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getText.call(this,id);
		}
	}
	,isLocal: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.isLocal(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.isLocal.call(this,id,type);
		}
	}
	,list: function(type) {
		if(this.__proxy != null) {
			return this.__proxy.list(type);
		} else {
			return lime_utils_AssetLibrary.prototype.list.call(this,type);
		}
	}
	,loadAsset: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.loadAsset(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.loadAsset.call(this,id,type);
		}
	}
	,load: function() {
		if(this.__proxy != null) {
			return this.__proxy.load();
		} else {
			return lime_utils_AssetLibrary.prototype.load.call(this);
		}
	}
	,loadAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadAudioBuffer.call(this,id);
		}
	}
	,loadBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadBytes.call(this,id);
		}
	}
	,loadFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadFont.call(this,id);
		}
	}
	,loadImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadImage.call(this,id);
		}
	}
	,loadMovieClip: function(id) {
		return lime_app_Future.withValue(this.getMovieClip(id));
	}
	,loadText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadText.call(this,id);
		}
	}
	,unload: function() {
		if(this.__proxy != null) {
			this.__proxy.unload();
			return;
		} else {
			lime_utils_AssetLibrary.prototype.unload.call(this);
			return;
		}
	}
	,__class__: openfl_utils_AssetLibrary
});
var openfl_utils_Assets = function() { };
$hxClasses["openfl.utils.Assets"] = openfl_utils_Assets;
openfl_utils_Assets.__name__ = "openfl.utils.Assets";
openfl_utils_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) {
		useWeakReference = false;
	}
	if(priority == null) {
		priority = 0;
	}
	if(useCapture == null) {
		useCapture = false;
	}
	if(!lime_utils_Assets.onChange.has(openfl_utils_Assets.LimeAssets_onChange)) {
		lime_utils_Assets.onChange.add(openfl_utils_Assets.LimeAssets_onChange);
	}
	openfl_utils_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_utils_Assets.dispatchEvent = function(event) {
	return openfl_utils_Assets.dispatcher.dispatchEvent(event);
};
openfl_utils_Assets.exists = function(id,type) {
	return lime_utils_Assets.exists(id,type);
};
openfl_utils_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			return bitmapData;
		}
	}
	var image = lime_utils_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setBitmapData(id,bitmapData);
		}
		return bitmapData;
	}
	return null;
};
openfl_utils_Assets.getBytes = function(id) {
	return openfl_utils_ByteArray.fromLimeBytes(lime_utils_Assets.getBytes(id));
};
openfl_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasFont(id)) {
		return openfl_utils_Assets.cache.getFont(id);
	}
	var limeFont = lime_utils_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setFont(id,font);
		}
		return font;
	}
	return new openfl_text_Font();
};
openfl_utils_Assets.getLibrary = function(name) {
	return lime_utils_Assets.getLibrary(name);
};
openfl_utils_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
	if(limeLibrary != null) {
		if(((limeLibrary) instanceof openfl_utils_AssetLibrary)) {
			var library = limeLibrary;
			if(library.exists(symbolName,"MOVIE_CLIP")) {
				if(library.isLocal(symbolName,"MOVIE_CLIP")) {
					return library.getMovieClip(symbolName);
				} else {
					lime_utils_Log.error("MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "openfl/utils/Assets.hx", lineNumber : 215, className : "openfl.utils.Assets", methodName : "getMovieClip"});
					return null;
				}
			}
		}
		lime_utils_Log.error("There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "openfl/utils/Assets.hx", lineNumber : 221, className : "openfl.utils.Assets", methodName : "getMovieClip"});
	} else {
		lime_utils_Log.error("There is no asset library named \"" + libraryName + "\"",{ fileName : "openfl/utils/Assets.hx", lineNumber : 225, className : "openfl.utils.Assets", methodName : "getMovieClip"});
	}
	return null;
};
openfl_utils_Assets.getMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return openfl_utils_Assets.getSound(id,useCache);
};
openfl_utils_Assets.getPath = function(id) {
	return lime_utils_Assets.getPath(id);
};
openfl_utils_Assets.getSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasSound(id)) {
		var sound = openfl_utils_Assets.cache.getSound(id);
		if(openfl_utils_Assets.isValidSound(sound)) {
			return sound;
		}
	}
	var buffer = lime_utils_Assets.getAudioBuffer(id,false);
	if(buffer != null) {
		var sound = openfl_media_Sound.fromAudioBuffer(buffer);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setSound(id,sound);
		}
		return sound;
	}
	return null;
};
openfl_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getText(id);
};
openfl_utils_Assets.hasEventListener = function(type) {
	return openfl_utils_Assets.dispatcher.hasEventListener(type);
};
openfl_utils_Assets.hasLibrary = function(name) {
	return lime_utils_Assets.hasLibrary(name);
};
openfl_utils_Assets.initBinding = function(className,instance) {
	if(Object.prototype.hasOwnProperty.call(openfl_utils_Assets.libraryBindings.h,className)) {
		var library = openfl_utils_Assets.libraryBindings.h[className];
		if(instance == null) {
			openfl_display_Sprite.__constructor = function(instance) {
				instance.__bind(library,className);
			};
		} else {
			openfl_display_Sprite.__constructor = null;
			instance.__bind(library,className);
		}
	} else {
		lime_utils_Log.warn("No asset is registered as \"" + className + "\"",{ fileName : "openfl/utils/Assets.hx", lineNumber : 367, className : "openfl.utils.Assets", methodName : "initBinding"});
	}
};
openfl_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_utils_Assets.cache.hasBitmapData(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(openfl_utils_Assets.cache.hasFont(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_utils_Assets.cache.hasSound(id)) {
				return true;
			}
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_utils_Assets.getLibrary(libraryName);
	if(library != null) {
		return library.isLocal(symbolName,type);
	}
	return false;
};
openfl_utils_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_utils_Assets.isValidSound = function(sound) {
	return true;
};
openfl_utils_Assets.list = function(type) {
	return lime_utils_Assets.list(type);
};
openfl_utils_Assets.loadBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_utils_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) {
				openfl_utils_Assets.cache.setBitmapData(id,bitmapData);
			}
			promise.complete(bitmapData);
		} else {
			promise.error("[Assets] Could not load Image \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadBytes = function(id) {
	var promise = new lime_app_Promise();
	var future = lime_utils_Assets.loadBytes(id);
	future.onComplete(function(bytes) {
		promise.complete(openfl_utils_ByteArray.fromLimeBytes(bytes));
	});
	future.onProgress(function(progress,total) {
		promise.progress(progress,total);
	});
	future.onError(function(msg) {
		promise.error(msg);
	});
	return promise.future;
};
openfl_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasFont(id)) {
		promise.complete(openfl_utils_Assets.cache.getFont(id));
		return promise.future;
	}
	lime_utils_Assets.loadFont(id).onComplete(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setFont(id,font);
		}
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadLibrary = function(name) {
	return lime_utils_Assets.loadLibrary(name).then(function(library) {
		var _library = null;
		if(library != null) {
			if(((library) instanceof openfl_utils_AssetLibrary)) {
				_library = library;
			} else {
				var _this = lime_utils_Assets.libraries;
				if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
					delete(_this.h[name]);
				}
				_library = new openfl_utils_AssetLibrary();
				_library.__proxy = library;
				lime_utils_Assets.registerLibrary(name,_library);
			}
		}
		return lime_app_Future.withValue(_library);
	});
};
openfl_utils_Assets.loadMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var future = new lime_app_Future(function() {
		return openfl_utils_Assets.getMusic(id,useCache);
	});
	return future;
};
openfl_utils_Assets.loadMovieClip = function(id) {
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
	if(limeLibrary != null) {
		if(((limeLibrary) instanceof openfl_utils_AssetLibrary)) {
			var library = limeLibrary;
			if(library.exists(symbolName,"MOVIE_CLIP")) {
				promise.completeWith(library.loadMovieClip(symbolName));
				return promise.future;
			}
		}
		promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
openfl_utils_Assets.loadSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	lime_utils_Assets.loadAudioBuffer(id,useCache).onComplete(function(buffer) {
		if(buffer != null) {
			var sound = openfl_media_Sound.fromAudioBuffer(buffer);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) {
				openfl_utils_Assets.cache.setSound(id,sound);
			}
			promise.complete(sound);
		} else {
			promise.error("[Assets] Could not load Sound \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadText = function(id) {
	var future = lime_utils_Assets.loadText(id);
	return future;
};
openfl_utils_Assets.registerBinding = function(className,library) {
	openfl_utils_Assets.libraryBindings.h[className] = library;
};
openfl_utils_Assets.registerLibrary = function(name,library) {
	lime_utils_Assets.registerLibrary(name,library);
};
openfl_utils_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) {
		capture = false;
	}
	openfl_utils_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_utils_Assets.resolveClass = function(name) {
	return $hxClasses[name];
};
openfl_utils_Assets.resolveEnum = function(name) {
	var value = $hxEnums[name];
	return value;
};
openfl_utils_Assets.unloadLibrary = function(name) {
	lime_utils_Assets.unloadLibrary(name);
};
openfl_utils_Assets.unregisterBinding = function(className,library) {
	if(Object.prototype.hasOwnProperty.call(openfl_utils_Assets.libraryBindings.h,className) && openfl_utils_Assets.libraryBindings.h[className] == library) {
		var _this = openfl_utils_Assets.libraryBindings;
		if(Object.prototype.hasOwnProperty.call(_this.h,className)) {
			delete(_this.h[className]);
		}
	}
};
openfl_utils_Assets.LimeAssets_onChange = function() {
	openfl_utils_Assets.dispatchEvent(new openfl_events_Event("change"));
};
var openfl_utils_ByteArray = {};
openfl_utils_ByteArray.__properties__ = {set_position:"set_position",get_position:"get_position",set_length:"set_length",get_length:"get_length",get_bytesAvailable:"get_bytesAvailable",set_defaultObjectEncoding:"set_defaultObjectEncoding",get_defaultObjectEncoding:"get_defaultObjectEncoding",set_defaultEndian:"set_defaultEndian",get_defaultEndian:"get_defaultEndian"};
openfl_utils_ByteArray._new = function(length) {
	if(length == null) {
		length = 0;
	}
	return new openfl_utils_ByteArrayData(length);
};
openfl_utils_ByteArray.clear = function(this1) {
	this1.clear();
};
openfl_utils_ByteArray.compress = function(this1,algorithm) {
	this1.compress(algorithm);
};
openfl_utils_ByteArray.deflate = function(this1) {
	this1.deflate();
};
openfl_utils_ByteArray.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
openfl_utils_ByteArray.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	if(((bytes) instanceof openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils_ByteArray.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
};
openfl_utils_ByteArray.fromFile = function(path) {
	return openfl_utils_ByteArray.fromLimeBytes(lime_utils_Bytes.fromFile(path));
};
openfl_utils_ByteArray.fromLimeBytes = function(bytes) {
	return openfl_utils_ByteArray.fromBytes(bytes);
};
openfl_utils_ByteArray.get = function(this1,index) {
	return this1.b[index];
};
openfl_utils_ByteArray.inflate = function(this1) {
	this1.inflate();
};
openfl_utils_ByteArray.loadFromBytes = function(bytes) {
	return lime_utils_Bytes.loadFromBytes(bytes).then(function(limeBytes) {
		var byteArray = openfl_utils_ByteArray.fromLimeBytes(limeBytes);
		return lime_app_Future.withValue(byteArray);
	});
};
openfl_utils_ByteArray.loadFromFile = function(path) {
	return lime_utils_Bytes.loadFromFile(path).then(function(limeBytes) {
		var byteArray = openfl_utils_ByteArray.fromLimeBytes(limeBytes);
		return lime_app_Future.withValue(byteArray);
	});
};
openfl_utils_ByteArray.readBoolean = function(this1) {
	return this1.readBoolean();
};
openfl_utils_ByteArray.readByte = function(this1) {
	return this1.readByte();
};
openfl_utils_ByteArray.readBytes = function(this1,bytes,offset,length) {
	if(length == null) {
		length = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this1.readBytes(bytes,offset,length);
};
openfl_utils_ByteArray.readDouble = function(this1) {
	return this1.readDouble();
};
openfl_utils_ByteArray.readFloat = function(this1) {
	return this1.readFloat();
};
openfl_utils_ByteArray.readInt = function(this1) {
	return this1.readInt();
};
openfl_utils_ByteArray.readMultiByte = function(this1,length,charSet) {
	return this1.readMultiByte(length,charSet);
};
openfl_utils_ByteArray.readObject = function(this1) {
	return this1.readObject();
};
openfl_utils_ByteArray.readShort = function(this1) {
	return this1.readShort();
};
openfl_utils_ByteArray.readUTF = function(this1) {
	return this1.readUTF();
};
openfl_utils_ByteArray.readUTFBytes = function(this1,length) {
	return this1.readUTFBytes(length);
};
openfl_utils_ByteArray.readUnsignedByte = function(this1) {
	return this1.readUnsignedByte();
};
openfl_utils_ByteArray.readUnsignedInt = function(this1) {
	return this1.readUnsignedInt();
};
openfl_utils_ByteArray.readUnsignedShort = function(this1) {
	return this1.readUnsignedShort();
};
openfl_utils_ByteArray.set = function(this1,index,value) {
	this1.__resize(index + 1);
	this1.b[index] = value & 255;
	return value;
};
openfl_utils_ByteArray.toArrayBuffer = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils_ByteArray.toBytePointer = function(byteArray) {
	lime_utils_BytePointer.set(openfl_utils_ByteArray.__bytePointer,byteArray,null,null,byteArray.position);
	return openfl_utils_ByteArray.__bytePointer;
};
openfl_utils_ByteArray.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils_ByteArray.toBytesData = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils_ByteArray.toLimeBytes = function(byteArray) {
	return byteArray;
};
openfl_utils_ByteArray.toString = function(this1) {
	return this1.toString();
};
openfl_utils_ByteArray.uncompress = function(this1,algorithm) {
	this1.uncompress(algorithm);
};
openfl_utils_ByteArray.writeBoolean = function(this1,value) {
	this1.writeBoolean(value);
};
openfl_utils_ByteArray.writeByte = function(this1,value) {
	this1.writeByte(value);
};
openfl_utils_ByteArray.writeBytes = function(this1,bytes,offset,length) {
	if(length == null) {
		length = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this1.writeBytes(bytes,offset,length);
};
openfl_utils_ByteArray.writeDouble = function(this1,value) {
	this1.writeDouble(value);
};
openfl_utils_ByteArray.writeFloat = function(this1,value) {
	this1.writeFloat(value);
};
openfl_utils_ByteArray.writeInt = function(this1,value) {
	this1.writeInt(value);
};
openfl_utils_ByteArray.writeMultiByte = function(this1,value,charSet) {
	this1.writeMultiByte(value,charSet);
};
openfl_utils_ByteArray.writeObject = function(this1,object) {
	this1.writeObject(object);
};
openfl_utils_ByteArray.writeShort = function(this1,value) {
	this1.writeShort(value);
};
openfl_utils_ByteArray.writeUTF = function(this1,value) {
	this1.writeUTF(value);
};
openfl_utils_ByteArray.writeUTFBytes = function(this1,value) {
	this1.writeUTFBytes(value);
};
openfl_utils_ByteArray.writeUnsignedInt = function(this1,value) {
	this1.writeUnsignedInt(value);
};
openfl_utils_ByteArray.get_bytesAvailable = function(this1) {
	return this1.length - this1.position;
};
openfl_utils_ByteArray.get_defaultEndian = function() {
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	return openfl_utils_ByteArrayData.__defaultEndian;
};
openfl_utils_ByteArray.set_defaultEndian = function(value) {
	return openfl_utils_ByteArrayData.__defaultEndian = value;
};
openfl_utils_ByteArray.get_defaultObjectEncoding = function() {
	return openfl_utils_ByteArrayData.defaultObjectEncoding;
};
openfl_utils_ByteArray.set_defaultObjectEncoding = function(value) {
	return openfl_utils_ByteArrayData.defaultObjectEncoding = value;
};
openfl_utils_ByteArray.get_endian = function(this1) {
	return this1.__endian;
};
openfl_utils_ByteArray.set_endian = function(this1,value) {
	return this1.__endian = value;
};
openfl_utils_ByteArray.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
openfl_utils_ByteArray.set_length = function(this1,value) {
	if(value >= 0) {
		this1.__resize(value);
		if(value < this1.position) {
			this1.position = value;
		}
	}
	this1.length = value;
	return value;
};
openfl_utils_ByteArray.get_objectEncoding = function(this1) {
	return this1.objectEncoding;
};
openfl_utils_ByteArray.set_objectEncoding = function(this1,value) {
	return this1.objectEncoding = value;
};
openfl_utils_ByteArray.get_position = function(this1) {
	return this1.position;
};
openfl_utils_ByteArray.set_position = function(this1,value) {
	return this1.position = value;
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = "openfl.utils.IDataOutput";
openfl_utils_IDataOutput.__isInterface__ = true;
openfl_utils_IDataOutput.prototype = {
	get_endian: null
	,set_endian: null
	,objectEncoding: null
	,writeBoolean: null
	,writeByte: null
	,writeBytes: null
	,writeDouble: null
	,writeFloat: null
	,writeInt: null
	,writeMultiByte: null
	,writeObject: null
	,writeShort: null
	,writeUnsignedInt: null
	,writeUTF: null
	,writeUTFBytes: null
	,__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = "openfl.utils.IDataInput";
openfl_utils_IDataInput.__isInterface__ = true;
openfl_utils_IDataInput.prototype = {
	get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,objectEncoding: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readMultiByte: null
	,readObject: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__allocated = length;
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	this.__endian = openfl_utils_ByteArrayData.__defaultEndian;
	this.objectEncoding = openfl_utils_ByteArrayData.defaultObjectEncoding;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = "openfl.utils.ByteArrayData";
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.__properties__ = {set_defaultEndian:"set_defaultEndian",get_defaultEndian:"get_defaultEndian"};
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.get_defaultEndian = function() {
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	return openfl_utils_ByteArrayData.__defaultEndian;
};
openfl_utils_ByteArrayData.set_defaultEndian = function(value) {
	return openfl_utils_ByteArrayData.__defaultEndian = value;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	objectEncoding: null
	,position: null
	,__endian: null
	,__allocated: null
	,clear: function() {
		this.length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__allocated > this.length) {
			var cacheLength = this.length;
			this.length = this.__allocated;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__allocated = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var limeBytes = this;
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_Bytes.compress(limeBytes,lime_utils_CompressionAlgorithm.DEFLATE);
			break;
		case 1:
			bytes = lime_utils_Bytes.compress(limeBytes,lime_utils_CompressionAlgorithm.LZMA);
			break;
		default:
			bytes = lime_utils_Bytes.compress(limeBytes,lime_utils_CompressionAlgorithm.ZLIB);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__allocated = bytes.length;
			this.data = bytes.data;
			this.length = this.__allocated;
			this.position = this.length;
		}
	}
	,deflate: function() {
		this.compress(0);
	}
	,inflate: function() {
		this.uncompress(0);
	}
	,readBoolean: function() {
		if(this.position < this.length) {
			return this.b[this.position++] != 0;
		} else {
			throw new openfl_errors_EOFError();
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(length == 0) {
			length = this.length - this.position;
		}
		if(this.position + length > this.length) {
			throw new openfl_errors_EOFError();
		}
		if(bytes.length < offset + length) {
			bytes.__resize(offset + length);
		}
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		if(this.__endian == 1) {
			if(this.position + 8 > this.length) {
				throw new openfl_errors_EOFError();
			}
			this.position += 8;
			return this.getDouble(this.position - 8);
		} else {
			var ch1 = this.readInt();
			var ch2 = this.readInt();
			return haxe_io_FPHelper.i64ToDouble(ch2,ch1);
		}
	}
	,readFloat: function() {
		if(this.__endian == 1) {
			if(this.position + 4 > this.length) {
				throw new openfl_errors_EOFError();
			}
			this.position += 4;
			return this.getFloat(this.position - 4);
		} else {
			return haxe_io_FPHelper.i32ToFloat(this.readInt());
		}
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readObject: function() {
		switch(this.objectEncoding) {
		case 10:
			var data = this.readUTF();
			return haxe_Unserializer.run(data);
		case 12:
			var data = this.readUTF();
			return JSON.parse(data);
		default:
			return null;
		}
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value;
		if(this.__endian == 1) {
			value = ch2 << 8 | ch1;
		} else {
			value = ch1 << 8 | ch2;
		}
		if((value & 32768) != 0) {
			return value - 65536;
		} else {
			return value;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.length) {
			return this.b[this.position++];
		} else {
			throw new openfl_errors_EOFError();
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.length) {
			throw new openfl_errors_EOFError();
		}
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__allocated > this.length) {
			var cacheLength = this.length;
			this.length = this.__allocated;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__allocated = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var limeBytes = this;
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_Bytes.decompress(limeBytes,lime_utils_CompressionAlgorithm.DEFLATE);
			break;
		case 1:
			bytes = lime_utils_Bytes.decompress(limeBytes,lime_utils_CompressionAlgorithm.LZMA);
			break;
		default:
			bytes = lime_utils_Bytes.decompress(limeBytes,lime_utils_CompressionAlgorithm.ZLIB);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__allocated = bytes.length;
			this.data = bytes.data;
			this.length = this.__allocated;
		}
		this.position = 0;
	}
	,writeBoolean: function(value) {
		this.writeByte(value ? 1 : 0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.b[this.position++] = value & 255 & 255;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(openfl_utils_ByteArray.get_length(bytes) == 0) {
			return;
		}
		if(length == 0) {
			length = openfl_utils_ByteArray.get_length(bytes) - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		var int64 = haxe_io_FPHelper.doubleToI64(value);
		if(this.__endian == 1) {
			this.writeInt(int64.low);
			this.writeInt(int64.high);
		} else {
			this.writeInt(int64.high);
			this.writeInt(int64.low);
		}
	}
	,writeFloat: function(value) {
		if(this.__endian == 1) {
			this.__resize(this.position + 4);
			this.setFloat(this.position,value);
			this.position += 4;
		} else {
			var int = haxe_io_FPHelper.floatToI32(value);
			this.writeInt(int);
		}
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 24 & 255 & 255;
		} else {
			this.b[this.position++] = value >> 24 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value & 255 & 255;
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeObject: function(object) {
		switch(this.objectEncoding) {
		case 10:
			var value = haxe_Serializer.run(object);
			this.writeUTF(value);
			break;
		case 12:
			var value = JSON.stringify(object);
			this.writeUTF(value);
			break;
		default:
			return;
		}
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255;
			this.b[this.position++] = value >> 8 & 255;
		} else {
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value & 255;
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils_ByteArray.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils_ByteArray.fromBytes(bytes));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.__allocated = bytes.length;
		this.data = bytes.data;
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__allocated) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			if(this.__allocated > 0) {
				var cacheLength = this.length;
				this.length = this.__allocated;
				bytes.blit(0,this,0,this.__allocated);
				this.length = cacheLength;
			}
			this.b = bytes.b;
			this.__allocated = bytes.length;
			this.data = bytes.data;
		}
		if(this.length < size) {
			this.length = size;
		}
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.__allocated = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,get___length: function() {
		return this.length;
	}
	,set___length: function(value) {
		return this.length = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set___length:"set___length",get___length:"get___length",set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_utils_CompressionAlgorithm = {};
openfl_utils_CompressionAlgorithm.fromString = function(value) {
	switch(value) {
	case "deflate":
		return 0;
	case "lzma":
		return 1;
	case "zlib":
		return 2;
	default:
		return null;
	}
};
openfl_utils_CompressionAlgorithm.toString = function(this1) {
	switch(this1) {
	case 0:
		return "deflate";
	case 1:
		return "lzma";
	case 2:
		return "zlib";
	default:
		return null;
	}
};
var openfl_utils_Dictionary = {};
openfl_utils_Dictionary.exists = function(this1,key) {
	return this1.exists(key);
};
openfl_utils_Dictionary.get = function(this1,key) {
	return this1.get(key);
};
openfl_utils_Dictionary.keyValueIterator = function(this1) {
	return this1.keyValueIterator();
};
openfl_utils_Dictionary.remove = function(this1,key) {
	return this1.remove(key);
};
openfl_utils_Dictionary.set = function(this1,key,value) {
	this1.set(key,value);
	return value;
};
openfl_utils_Dictionary.iterator = function(this1) {
	return this1.keys();
};
openfl_utils_Dictionary.each = function(this1) {
	return this1.iterator();
};
openfl_utils_Dictionary.toStringMap = function(t,weakKeys) {
	return new haxe_ds_StringMap();
};
openfl_utils_Dictionary.toIntMap = function(t,weakKeys) {
	return new haxe_ds_IntMap();
};
openfl_utils_Dictionary.toFloatMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_FloatMap();
};
openfl_utils_Dictionary.toEnumValueMapMap = function(t,weakKeys) {
	return new haxe_ds_EnumValueMap();
};
openfl_utils_Dictionary.toObjectMap = function(t,weakKeys) {
	return new haxe_ds_ObjectMap();
};
openfl_utils_Dictionary.toUtilsObjectMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_UtilsObjectMap();
};
openfl_utils_Dictionary.toClassMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_ClassMap();
};
openfl_utils_Dictionary.fromStringMap = function(map) {
	return map;
};
openfl_utils_Dictionary.fromIntMap = function(map) {
	return map;
};
openfl_utils_Dictionary.fromFloatMap = function(map) {
	return map;
};
openfl_utils_Dictionary.fromObjectMap = function(map) {
	return map;
};
openfl_utils_Dictionary.fromUtilsObjectMap = function(map) {
	return map;
};
openfl_utils_Dictionary.fromClassMap = function(map) {
	return map;
};
var openfl_utils__$Dictionary_ClassMap = function() {
	this.types = new haxe_ds_StringMap();
	this.values = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils._Dictionary.ClassMap"] = openfl_utils__$Dictionary_ClassMap;
openfl_utils__$Dictionary_ClassMap.__name__ = "openfl.utils._Dictionary.ClassMap";
openfl_utils__$Dictionary_ClassMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_ClassMap.prototype = {
	types: null
	,values: null
	,clear: function() {
		this.types.h = Object.create(null);
		this.values.h = Object.create(null);
	}
	,copy: function() {
		var copied = new openfl_utils__$Dictionary_ClassMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,exists: function(key) {
		var this1 = this.types;
		var key1 = key.__name__;
		return Object.prototype.hasOwnProperty.call(this1.h,key1);
	}
	,get: function(key) {
		var this1 = this.values;
		var key1 = key.__name__;
		return this1.h[key1];
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapValueIterator(this.types.h);
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapValueIterator(this.values.h);
	}
	,remove: function(key) {
		var name = key.__name__;
		var _this = this.types;
		var tmp;
		if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
			delete(_this.h[name]);
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			var _this = this.values;
			if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
				delete(_this.h[name]);
				return true;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,set: function(key,value) {
		var name = key.__name__;
		this.types.h[name] = key;
		this.values.h[name] = value;
	}
	,toString: function() {
		return haxe_ds_StringMap.stringify(this.values.h);
	}
	,__class__: openfl_utils__$Dictionary_ClassMap
};
var openfl_utils__$Dictionary_FloatMap = function() {
	this.floatKeys = [];
	this.values = [];
};
$hxClasses["openfl.utils._Dictionary.FloatMap"] = openfl_utils__$Dictionary_FloatMap;
openfl_utils__$Dictionary_FloatMap.__name__ = "openfl.utils._Dictionary.FloatMap";
openfl_utils__$Dictionary_FloatMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_FloatMap.prototype = {
	floatKeys: null
	,values: null
	,clear: function() {
		this.floatKeys = [];
		this.values = [];
	}
	,copy: function() {
		var copied = new openfl_utils__$Dictionary_FloatMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,exists: function(key) {
		return this.indexOf(key) > -1;
	}
	,get: function(key) {
		var ind = this.indexOf(key);
		if(ind > -1) {
			return this.values[ind];
		} else {
			return null;
		}
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		return new haxe_iterators_ArrayIterator(this.floatKeys.slice());
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.values.slice());
	}
	,remove: function(key) {
		var ind = this.indexOf(key);
		if(ind > -1) {
			this.floatKeys.splice(ind,1);
			this.values.splice(ind,1);
			return true;
		}
		return false;
	}
	,set: function(key,value) {
		this.insertSorted(key,value);
	}
	,indexOf: function(key) {
		var len = this.floatKeys.length;
		var startIndex = 0;
		var endIndex = len - 1;
		if(len == 0) {
			return -1;
		}
		var midIndex = 0;
		while(startIndex < endIndex) {
			midIndex = Math.floor((startIndex + endIndex) / 2);
			if(this.floatKeys[midIndex] == key) {
				return midIndex;
			} else if(this.floatKeys[midIndex] > key) {
				endIndex = midIndex - 1;
			} else {
				startIndex = midIndex + 1;
			}
		}
		if(this.floatKeys[startIndex] == key) {
			return startIndex;
		} else {
			return -1;
		}
	}
	,insertSorted: function(key,value) {
		var len = this.floatKeys.length;
		var startIndex = 0;
		var endIndex = len - 1;
		if(len == 0) {
			this.floatKeys.push(key);
			this.values.push(value);
			return;
		}
		var midIndex = 0;
		while(startIndex < endIndex) {
			midIndex = Math.floor((startIndex + endIndex) / 2);
			if(this.floatKeys[midIndex] == key) {
				this.values[midIndex] = value;
				return;
			} else if(this.floatKeys[midIndex] > key) {
				endIndex = midIndex - 1;
			} else {
				startIndex = midIndex + 1;
			}
		}
		if(this.floatKeys[startIndex] > key) {
			this.floatKeys.splice(startIndex,0,key);
			this.values.splice(startIndex,0,value);
		} else if(this.floatKeys[startIndex] < key) {
			this.floatKeys.splice(startIndex + 1,0,key);
			this.values.splice(startIndex + 1,0,value);
		} else {
			this.values[startIndex] = value;
		}
	}
	,toString: function() {
		return this.values.toString();
	}
	,__class__: openfl_utils__$Dictionary_FloatMap
};
var openfl_utils__$Dictionary_UtilsObjectMap = function() {
	this.map = new haxe_ds_ObjectMap();
};
$hxClasses["openfl.utils._Dictionary.UtilsObjectMap"] = openfl_utils__$Dictionary_UtilsObjectMap;
openfl_utils__$Dictionary_UtilsObjectMap.__name__ = "openfl.utils._Dictionary.UtilsObjectMap";
openfl_utils__$Dictionary_UtilsObjectMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_UtilsObjectMap.prototype = {
	map: null
	,clear: function() {
		this.map.h = { __keys__ : { }};
	}
	,copy: function() {
		var copied = new openfl_utils__$Dictionary_UtilsObjectMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,exists: function(key) {
		return this.map.h.__keys__[key.__id__] != null;
	}
	,get: function(key) {
		return this.map.h[key.__id__];
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		return this.map.keys();
	}
	,iterator: function() {
		return this.map.iterator();
	}
	,remove: function(key) {
		return this.map.remove(key);
	}
	,set: function(key,value) {
		this.map.set(key,value);
	}
	,toString: function() {
		return this.map.toString();
	}
	,__class__: openfl_utils__$Dictionary_UtilsObjectMap
};
var openfl_utils_Endian = {};
openfl_utils_Endian.fromLimeEndian = function(value) {
	switch(value._hx_index) {
	case 0:
		return 1;
	case 1:
		return 0;
	}
};
openfl_utils_Endian.fromString = function(value) {
	switch(value) {
	case "bigEndian":
		return 0;
	case "littleEndian":
		return 1;
	default:
		return null;
	}
};
openfl_utils_Endian.toLimeEndian = function(this1) {
	switch(this1) {
	case 0:
		return lime_system_Endian.BIG_ENDIAN;
	case 1:
		return lime_system_Endian.LITTLE_ENDIAN;
	default:
		return null;
	}
};
openfl_utils_Endian.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bigEndian";
	case 1:
		return "littleEndian";
	default:
		return null;
	}
};
var openfl_utils_Object = {};
openfl_utils_Object._new = function() {
	return { };
};
openfl_utils_Object.hasOwnProperty = function(this1,name) {
	if(this1 != null) {
		return Object.prototype.hasOwnProperty.call(this1,name);
	} else {
		return false;
	}
};
openfl_utils_Object.isPrototypeOf = function(this1,theClass) {
	if(this1 != null) {
		var c = js_Boot.getClass(this1);
		while(c != null) {
			if(c == theClass) {
				return true;
			}
			c = c.__super__;
		}
	}
	return false;
};
openfl_utils_Object.iterator = function(this1) {
	if(((this1) instanceof Array)) {
		var arr = this1;
		return new haxe_iterators_ArrayIterator(arr);
	} else {
		var fields = Reflect.fields(this1);
		if(fields == null) {
			fields = [];
		}
		if(((this1) instanceof openfl_display_DisplayObjectContainer)) {
			var container = this1;
			var _g = 0;
			var _g1 = container.get_numChildren();
			while(_g < _g1) {
				var i = _g++;
				var child = container.getChildAt(i);
				var name = child.get_name();
				if(name != null && fields.indexOf(name) == -1) {
					fields.push(name);
				}
			}
		}
		return new haxe_iterators_ArrayIterator(fields);
	}
};
openfl_utils_Object.propertyIsEnumerable = function(this1,name) {
	if(this1 != null && Object.prototype.hasOwnProperty.call(this1,name)) {
		return js_Boot.__implements(Reflect.field(this1,name),haxe_lang_Iterable);
	} else {
		return false;
	}
};
openfl_utils_Object.toLocaleString = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return Std.string(this1);
	}
};
openfl_utils_Object.toString = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return Std.string(this1);
	}
};
openfl_utils_Object.valueOf = function(this1) {
	return this1;
};
openfl_utils_Object.__fieldRead = function(this1,name) {
	return openfl_utils_Object.__get(this1,name);
};
openfl_utils_Object.__fieldWrite = function(this1,name,value) {
	var this2 = this1;
	if(this2 != null) {
		Reflect.setProperty(this2,name,value);
	}
	return value;
};
openfl_utils_Object.__get = function(this1,key) {
	if(this1 == null || key == null) {
		return null;
	}
	if(Object.prototype.hasOwnProperty.call(this1,key)) {
		return Reflect.field(this1,key);
	} else if(((this1) instanceof openfl_display_DisplayObjectContainer)) {
		var container = this1;
		var child = container.getChildByName(key);
		if(child != null) {
			return child;
		}
	}
	return Reflect.getProperty(this1,key);
};
openfl_utils_Object.__set = function(this1,key,value) {
	if(this1 != null) {
		Reflect.setProperty(this1,key,value);
	}
	return value;
};
openfl_utils_Object.__getArray = function(this1,index) {
	if(this1 == null) {
		return null;
	}
	var arr = js_Boot.__cast(this1 , Array);
	return arr[index];
};
openfl_utils_Object.__setArray = function(this1,index,value) {
	if(this1 == null) {
		return value;
	}
	var arr = js_Boot.__cast(this1 , Array);
	return arr[index] = value;
};
openfl_utils_Object.toFunction = function(this1) {
	return this1;
};
openfl_utils_Object.toFloat = function(this1) {
	if(typeof(this1) == "number") {
		return this1;
	} else {
		return NaN;
	}
};
openfl_utils_Object.toInt = function(this1) {
	return this1;
};
openfl_utils_Object.toBool = function(this1) {
	if(typeof(this1) == "boolean") {
		return this1;
	} else if(typeof(this1) == "number") {
		return this1 != 0;
	} else {
		return this1 != null;
	}
};
openfl_utils_Object.__negate = function(this1) {
	var float = this1;
	return -float;
};
openfl_utils_Object.__preIncrement = function(this1) {
	var float = this1;
	return ++float;
};
openfl_utils_Object.__postIncrement = function(this1) {
	var float = this1;
	return float++;
};
openfl_utils_Object.__preDecrement = function(this1) {
	var float = this1;
	return --float;
};
openfl_utils_Object.__postDecrement = function(this1) {
	var float = this1;
	return float--;
};
openfl_utils_Object.__add = function(a,b) {
	if(typeof(a) == "string" || typeof(b) == "string") {
		var tmp;
		if(a == null) {
			tmp = "null";
		} else {
			var this1 = a;
			tmp = this1 == null ? null : Std.string(this1);
		}
		var tmp1;
		if(b == null) {
			tmp1 = "null";
		} else {
			var this1 = b;
			tmp1 = this1 == null ? null : Std.string(this1);
		}
		return tmp + tmp1;
	} else {
		var floatA = a;
		var floatB = b;
		return floatA + floatB;
	}
};
openfl_utils_Object.__addString = function(a,b) {
	var stringA;
	if(a == null) {
		stringA = "null";
	} else {
		var this1 = a;
		stringA = this1 == null ? null : Std.string(this1);
	}
	return stringA + b;
};
openfl_utils_Object.__addInt = function(a,b) {
	var floatA = a;
	return floatA + b;
};
openfl_utils_Object.__addFloat = function(a,b) {
	var floatA = a;
	return floatA + b;
};
openfl_utils_Object.__sub = function(a,b) {
	var floatA = a;
	var floatB = b;
	return floatA - floatB;
};
openfl_utils_Object.__subInt = function(a,b) {
	var floatA = a;
	return floatA - b;
};
openfl_utils_Object.__intSub = function(a,b) {
	var floatB = b;
	return a - floatB;
};
openfl_utils_Object.__subFloat = function(a,b) {
	var floatA = a;
	return floatA - b;
};
openfl_utils_Object.__floatSub = function(a,b) {
	var floatB = b;
	return a - floatB;
};
openfl_utils_Object.__mul = function(a,b) {
	var floatA = a;
	var floatB = b;
	return floatA * floatB;
};
openfl_utils_Object.__mulInt = function(a,b) {
	var floatA = a;
	return floatA * b;
};
openfl_utils_Object.__mulFloat = function(a,b) {
	var floatA = a;
	return floatA * b;
};
openfl_utils_Object.__div = function(a,b) {
	var floatA = a;
	var floatB = b;
	return floatA / floatB;
};
openfl_utils_Object.__divInt = function(a,b) {
	var floatA = a;
	return floatA / b;
};
openfl_utils_Object.__intDiv = function(a,b) {
	var floatB = b;
	return a / floatB;
};
openfl_utils_Object.__divFloat = function(a,b) {
	var floatA = a;
	return floatA / b;
};
openfl_utils_Object.__floatDiv = function(a,b) {
	var floatB = b;
	return a / floatB;
};
openfl_utils_Object.__mod = function(a,b) {
	var floatA = a;
	var floatB = b;
	return floatA % floatB;
};
openfl_utils_Object.__modInt = function(a,b) {
	var floatA = a;
	return floatA % b;
};
openfl_utils_Object.__intMod = function(a,b) {
	var floatB = b;
	return a % floatB;
};
openfl_utils_Object.__modFloat = function(a,b) {
	var floatA = a;
	return floatA % b;
};
openfl_utils_Object.__floatMod = function(a,b) {
	var floatB = b;
	return a % floatB;
};
openfl_utils_Object.__eq = function(a,b) {
	var dynamicA = a;
	var dynamicB = b;
	return dynamicA == dynamicB;
};
openfl_utils_Object.__eqDynamic = function(a,b) {
	var dynamicA = a;
	return dynamicA == b;
};
openfl_utils_Object.__neq = function(a,b) {
	var dynamicA = a;
	var dynamicB = b;
	return dynamicA != dynamicB;
};
openfl_utils_Object.__neqDynamic = function(a,b) {
	var dynamicA = a;
	return dynamicA != b;
};
openfl_utils_Object.__lt = function(a,b) {
	var floatA = a;
	var floatB = b;
	return floatA < floatB;
};
openfl_utils_Object.__ltInt = function(a,b) {
	var floatA = a;
	return floatA < b;
};
openfl_utils_Object.__intLt = function(a,b) {
	var floatB = b;
	return a < floatB;
};
openfl_utils_Object.__ltFloat = function(a,b) {
	var floatA = a;
	return floatA < b;
};
openfl_utils_Object.__floatLt = function(a,b) {
	var floatB = b;
	return a < floatB;
};
openfl_utils_Object.__lte = function(a,b) {
	var floatA = a;
	var floatB = b;
	return floatA <= floatB;
};
openfl_utils_Object.__lteInt = function(a,b) {
	var floatB = b;
	return openfl_utils_Object.__lte(a,floatB);
};
openfl_utils_Object.__intLte = function(a,b) {
	var floatA = a;
	return openfl_utils_Object.__lte(floatA,b);
};
openfl_utils_Object.__lteFloat = function(a,b) {
	var floatB = b;
	return openfl_utils_Object.__lte(a,floatB);
};
openfl_utils_Object.__floatLte = function(a,b) {
	var floatA = a;
	return openfl_utils_Object.__lte(floatA,b);
};
openfl_utils_Object.__gt = function(a,b) {
	var floatA = a;
	var floatB = b;
	return floatA > floatB;
};
openfl_utils_Object.__gtInt = function(a,b) {
	var floatB = b;
	return openfl_utils_Object.__gt(a,floatB);
};
openfl_utils_Object.__intGt = function(a,b) {
	var floatB = b;
	return a > floatB;
};
openfl_utils_Object.__gtFloat = function(a,b) {
	var floatB = b;
	return openfl_utils_Object.__gt(a,floatB);
};
openfl_utils_Object.__floatGt = function(a,b) {
	var floatB = b;
	return a > floatB;
};
openfl_utils_Object.__gte = function(a,b) {
	var floatA = a;
	var floatB = b;
	return floatA >= floatB;
};
openfl_utils_Object.__gteInt = function(a,b) {
	var floatB = b;
	return openfl_utils_Object.__gte(a,floatB);
};
openfl_utils_Object.__intGte = function(a,b) {
	var floatB = b;
	return a >= floatB;
};
openfl_utils_Object.__gteFloat = function(a,b) {
	var floatB = b;
	return openfl_utils_Object.__gte(a,floatB);
};
openfl_utils_Object.__floatGte = function(a,b) {
	var floatB = b;
	return a >= floatB;
};
openfl_utils_Object.__complement = function(this1) {
	var int = this1;
	return ~int;
};
openfl_utils_Object.__and = function(a,b) {
	var intA = a;
	var intB = b;
	return intA & intB;
};
openfl_utils_Object.__andInt = function(a,b) {
	var intA = a;
	return intA & b;
};
openfl_utils_Object.__or = function(a,b) {
	var intA = a;
	var intB = b;
	return intA | intB;
};
openfl_utils_Object.__orInt = function(a,b) {
	var intA = a;
	return intA | b;
};
openfl_utils_Object.__xor = function(a,b) {
	var intA = a;
	var intB = b;
	return intA ^ intB;
};
openfl_utils_Object.__xorInt = function(a,b) {
	var intA = a;
	return intA ^ b;
};
openfl_utils_Object.__shr = function(a,b) {
	var intA = a;
	var intB = b;
	return intA >> intB;
};
openfl_utils_Object.__shrInt = function(a,b) {
	var intA = a;
	return intA >> b;
};
openfl_utils_Object.__intShr = function(a,b) {
	var intB = b;
	return a >> intB;
};
openfl_utils_Object.__ushr = function(a,b) {
	var intA = a;
	var intB = b;
	return intA >>> intB;
};
openfl_utils_Object.__ushrInt = function(a,b) {
	var intA = a;
	return intA >>> b;
};
openfl_utils_Object.__intUshr = function(a,b) {
	var intB = b;
	return a >>> intB;
};
openfl_utils_Object.__shl = function(a,b) {
	var intA = a;
	var intB = b;
	return intA << intB;
};
openfl_utils_Object.__shlInt = function(a,b) {
	var intA = a;
	return intA << b;
};
openfl_utils_Object.__intShl = function(a,b) {
	var intB = b;
	return a << intB;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = "haxe.lang.Iterator";
haxe_lang_Iterator.__isInterface__ = true;
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = "haxe.lang.Iterable";
haxe_lang_Iterable.__isInterface__ = true;
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var openfl_utils__$internal_Lib = function() { };
$hxClasses["openfl.utils._internal.Lib"] = openfl_utils__$internal_Lib;
openfl_utils__$internal_Lib.__name__ = "openfl.utils._internal.Lib";
openfl_utils__$internal_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	if(!Object.prototype.hasOwnProperty.call(openfl_utils__$internal_Lib.__sentWarnings.h,api)) {
		openfl_utils__$internal_Lib.__sentWarnings.h[api] = true;
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
var openfl_utils__$internal_TouchData = function() {
	this.rollOutStack = [];
};
$hxClasses["openfl.utils._internal.TouchData"] = openfl_utils__$internal_TouchData;
openfl_utils__$internal_TouchData.__name__ = "openfl.utils._internal.TouchData";
openfl_utils__$internal_TouchData.prototype = {
	rollOutStack: null
	,touch: null
	,touchDownTarget: null
	,touchOverTarget: null
	,reset: function() {
		this.touch = null;
		this.touchDownTarget = null;
		this.touchOverTarget = null;
		this.rollOutStack.splice(0,this.rollOutStack.length);
	}
	,__class__: openfl_utils__$internal_TouchData
};
var texter_general_Emoji = function() { };
$hxClasses["texter.general.Emoji"] = texter_general_Emoji;
texter_general_Emoji.__name__ = "texter.general.Emoji";
var texter_general_TextDirection = $hxEnums["texter.general.TextDirection"] = { __ename__:"texter.general.TextDirection",__constructs__:null
	,RTL: {_hx_name:"RTL",_hx_index:0,__enum__:"texter.general.TextDirection",toString:$estr}
	,LTR: {_hx_name:"LTR",_hx_index:1,__enum__:"texter.general.TextDirection",toString:$estr}
	,UNDETERMINED: {_hx_name:"UNDETERMINED",_hx_index:2,__enum__:"texter.general.TextDirection",toString:$estr}
};
texter_general_TextDirection.__constructs__ = [texter_general_TextDirection.RTL,texter_general_TextDirection.LTR,texter_general_TextDirection.UNDETERMINED];
var texter_general_markdown_MarkdownPatterns = function() { };
$hxClasses["texter.general.markdown.MarkdownPatterns"] = texter_general_markdown_MarkdownPatterns;
texter_general_markdown_MarkdownPatterns.__name__ = "texter.general.markdown.MarkdownPatterns";
var texter_general_markdown_MarkdownBlocks = function() { };
$hxClasses["texter.general.markdown.MarkdownBlocks"] = texter_general_markdown_MarkdownBlocks;
texter_general_markdown_MarkdownBlocks.__name__ = "texter.general.markdown.MarkdownBlocks";
texter_general_markdown_MarkdownBlocks.parseJSON = function(text) {
	var interp = [];
	var indexOfBool = TextTools.indexesOfSubs(text,["true","false","null"]);
	var indexOfCB = TextTools.indexesOfSubs(text,["{","}"]);
	var indexOfEnd = TextTools.indexesOfSubs(text,["\"\n","\","]);
	var indexOfKeyEnd = TextTools.indexesOf(text,"\":");
	var indexOfNumbers = TextTools.indexesOfSubs(text,["0","1","2","3","4","5","6","7","8","9"]);
	var _g = 0;
	while(_g < indexOfBool.length) {
		var i = indexOfBool[_g];
		++_g;
		interp.push({ color : 4286945, start : i.startIndex, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfNumbers.length) {
		var i = indexOfNumbers[_g];
		++_g;
		interp.push({ color : 9498256, start : i.startIndex, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfCB.length) {
		var i = indexOfCB[_g];
		++_g;
		interp.push({ color : 14381203, start : i.startIndex, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfKeyEnd.length) {
		var i = indexOfKeyEnd[_g];
		++_g;
		var colorSetup = { start : i.startIndex - 1, end : i.endIndex - 1, color : 48127};
		while(text.charAt(colorSetup.start) != "\"" && colorSetup.start > 0) colorSetup.start--;
		interp.push(colorSetup);
	}
	var _g = 0;
	while(_g < indexOfEnd.length) {
		var i = indexOfEnd[_g];
		++_g;
		var colorSetup = { start : i.startIndex - 1, end : i.endIndex - 1, color : 16744272};
		while(text.charAt(colorSetup.start) != "\"" && colorSetup.start > 0) colorSetup.start--;
		interp.push(colorSetup);
	}
	return interp;
};
texter_general_markdown_MarkdownBlocks.parseHaxe = function(text) {
	var interp = [];
	var indexOfBlue = TextTools.indexesFromEReg(text,new EReg("(?:\\(| |\n|^)(overload|true|false|null|public|static|dynamic|extern|inline|override|macro|abstract|final|var|function|package|enum|typedef|in|is|trace|new|this|class|super|extends|implements|interface|->)","m"));
	var indexOfPurple = TextTools.indexesOfSubs(text,["if","else","for","while","do","switch","case","default","break","continue","try","catch","throw","import"]);
	var indexOfFunctionName = TextTools.indexesFromEReg(text,new EReg("([a-zA-Z_]+)\\(","m"));
	var indexOfClassName = TextTools.indexesFromEReg(text,new EReg("(?::|\\(| |\n|^)[A-Z][a-zA-Z]+","m"));
	var indexOfString = TextTools.indexesFromEReg(text,new EReg("\"[^\"]*\"|'[^']*'",""));
	var indexOfNumbers = TextTools.indexesOfSubs(text,["0","1","2","3","4","5","6","7","8","9"]);
	var indexOfComments = TextTools.indexesFromEReg(text,new EReg("//.*","m"));
	var indexOfConditionals = TextTools.indexesFromEReg(text,new EReg("#(?:if|end|elseif) [^\n]*","m"));
	var _g = 0;
	while(_g < indexOfFunctionName.length) {
		var i = indexOfFunctionName[_g];
		++_g;
		interp.push({ color : 16746240, start : i.startIndex, end : i.endIndex - 1});
	}
	var _g = 0;
	while(_g < indexOfBlue.length) {
		var i = indexOfBlue[_g];
		++_g;
		interp.push({ color : 4286945, start : i.startIndex + 1, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfClassName.length) {
		var i = indexOfClassName[_g];
		++_g;
		interp.push({ color : 4371571, start : i.startIndex + 1, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfPurple.length) {
		var i = indexOfPurple[_g];
		++_g;
		interp.push({ color : 14439103, start : i.startIndex, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfString.length) {
		var i = indexOfString[_g];
		++_g;
		interp.push({ color : 16744272, start : i.startIndex, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfNumbers.length) {
		var i = indexOfNumbers[_g];
		++_g;
		interp.push({ color : 6476947, start : i.startIndex, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfComments.length) {
		var i = indexOfComments[_g];
		++_g;
		interp.push({ color : 5597999, start : i.startIndex, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfConditionals.length) {
		var i = indexOfConditionals[_g];
		++_g;
		interp.push({ color : 8947848, start : i.startIndex, end : i.endIndex});
	}
	return interp;
};
texter_general_markdown_MarkdownBlocks.parseCSharp = function(text) {
	var interp = [];
	var indexOfBlue = TextTools.indexesFromEReg(text,new EReg("(?:\\(| |\n|^)(virtual|true|false|null|public|static|as|base|bool|byte|abstract|char|var|checked|class|enum|const|int|is|decimal|new|this|delegate|super|double|extern|float|in|inerface|internal|long|namespace|object|override|private|protected|readonly|short|sizeof|string|struct|typeof|uint|ulong|ushort|using|void|volatile|dynamic|where|yield|to|partial)","m"));
	var indexOfPurple = TextTools.indexesFromEReg(text,new EReg("(?:\\(| |\n|^)(foreach|if|else|for|while|do|switch|case|default|break|continue|try|catch|throw|return)","m"));
	var indexOfFunctionName = TextTools.indexesFromEReg(text,new EReg("([a-zA-Z_]+)\\(","m"));
	var indexOfClassName = TextTools.indexesFromEReg(text,new EReg("(?:\\(| |\n|^)[A-Z]+[a-z]+","m"));
	var indexOfString = TextTools.indexesFromEReg(text,new EReg("\"[^\"]*\"|'[^']*'|\\$\".*?\"",""));
	var indexOfNumbers = TextTools.indexesOfSubs(text,["0","1","2","3","4","5","6","7","8","9"]);
	var indexOfComments = TextTools.indexesFromEReg(text,new EReg("//.*","m"));
	haxe_Log.trace("endParse",{ fileName : "texter/general/markdown/MarkdownBlocks.hx", lineNumber : 150, className : "texter.general.markdown.MarkdownBlocks", methodName : "parseCSharp"});
	var _g = 0;
	while(_g < indexOfBlue.length) {
		var i = indexOfBlue[_g];
		++_g;
		interp.push({ color : 4286945, start : i.startIndex + 1, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfClassName.length) {
		var i = indexOfClassName[_g];
		++_g;
		interp.push({ color : 4371571, start : i.startIndex + 1, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfFunctionName.length) {
		var i = indexOfFunctionName[_g];
		++_g;
		interp.push({ color : 16746240, start : i.startIndex, end : i.endIndex - 1});
	}
	var _g = 0;
	while(_g < indexOfPurple.length) {
		var i = indexOfPurple[_g];
		++_g;
		interp.push({ color : 14439103, start : i.startIndex + 1, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfString.length) {
		var i = indexOfString[_g];
		++_g;
		interp.push({ color : 16744272, start : i.startIndex, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfNumbers.length) {
		var i = indexOfNumbers[_g];
		++_g;
		interp.push({ color : 6476947, start : i.startIndex, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfComments.length) {
		var i = indexOfComments[_g];
		++_g;
		interp.push({ color : 5597999, start : i.startIndex, end : i.endIndex});
	}
	return interp;
};
texter_general_markdown_MarkdownBlocks.parseC = function(text) {
	var interp = [];
	var indexOfBlue = TextTools.indexesFromEReg(text,new EReg("(?:\\(| |\n|^)(auto|char|const|double|enum|extern|float|goto|inline|int|long|register|restrict|short|signed|sizeof|static|struct|typedef|union|unsigned|void|volatile)","m"));
	var indexOfPurple = TextTools.indexesFromEReg(text,new EReg("(?:\\(| |\n|^)(break|case|continue|default|do|else|for|if|return|switch|while)","m"));
	var indexOfFunctionName = TextTools.indexesFromEReg(text,new EReg("(?:\\(| |\n|^)([a-zA-Z_]+)\\(","m"));
	var indexOfString = TextTools.indexesFromEReg(text,new EReg("\"[^\"]*\"|'[^']*'",""));
	var indexOfNumbers = TextTools.indexesOfSubs(text,["0","1","2","3","4","5","6","7","8","9"]);
	var indexOfComments = TextTools.indexesFromEReg(text,new EReg("//.*","m"));
	var indexOfPink = TextTools.indexesFromEReg(text,new EReg("^#[^\n]*","m"));
	var _g = 0;
	while(_g < indexOfBlue.length) {
		var i = indexOfBlue[_g];
		++_g;
		interp.push({ color : 4286945, start : i.startIndex + 1, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfFunctionName.length) {
		var i = indexOfFunctionName[_g];
		++_g;
		interp.push({ color : 16746240, start : i.startIndex + 1, end : i.endIndex - 1});
	}
	var _g = 0;
	while(_g < indexOfPurple.length) {
		var i = indexOfPurple[_g];
		++_g;
		interp.push({ color : 14439103, start : i.startIndex + 1, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfString.length) {
		var i = indexOfString[_g];
		++_g;
		interp.push({ color : 16744272, start : i.startIndex, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfNumbers.length) {
		var i = indexOfNumbers[_g];
		++_g;
		interp.push({ color : 6476947, start : i.startIndex, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfComments.length) {
		var i = indexOfComments[_g];
		++_g;
		interp.push({ color : 5597999, start : i.startIndex, end : i.endIndex});
	}
	var _g = 0;
	while(_g < indexOfPink.length) {
		var i = indexOfPink[_g];
		++_g;
		interp.push({ color : 16711935, start : i.startIndex, end : i.endIndex});
	}
	return interp;
};
texter_general_markdown_MarkdownBlocks.parseR = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseCPP = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseFlash = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseXML = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseXAML = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseJava = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseKotlin = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseGo = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseHTML = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseCSS = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseSCSS = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseVue = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseJS = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseTS = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseLua = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseDart = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parsePython = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parsePHP = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseRuby = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseSQL = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseRust = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parsePerl = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseOCaml = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseYAML = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseHaskell = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseCrystal = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseClojure = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseScala = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseLisp = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseSwift = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseElixir = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseErlang = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseElm = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseAssembly = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseVB = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseBasic = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseVHDL = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseWASM = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseSolidity = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseCMake = function(text) {
	return [];
};
texter_general_markdown_MarkdownBlocks.parseDefault = function(text) {
	return [];
};
var texter_general_markdown__$MarkdownVisualizer_VisualConfig = function() {
	this.darkMode = false;
	this.codeblockBackgroundColor = 13421772;
	this.backgroundColor = 15658734;
	this.background = false;
	this.borderSize = 1;
	this.borderColor = 0;
	this.border = true;
	this.alignment = "left";
	this.blockIndent = 18;
	this.indent = 0;
	this.rightMargin = 0;
	this.leftMargin = 0;
	this.font = "_sans";
	this.color = 0;
	this.size = 18;
};
$hxClasses["texter.general.markdown._MarkdownVisualizer.VisualConfig"] = texter_general_markdown__$MarkdownVisualizer_VisualConfig;
texter_general_markdown__$MarkdownVisualizer_VisualConfig.__name__ = "texter.general.markdown._MarkdownVisualizer.VisualConfig";
texter_general_markdown__$MarkdownVisualizer_VisualConfig.prototype = {
	size: null
	,color: null
	,font: null
	,leftMargin: null
	,rightMargin: null
	,indent: null
	,leading: null
	,blockIndent: null
	,alignment: null
	,border: null
	,borderColor: null
	,borderSize: null
	,background: null
	,backgroundColor: null
	,codeblockBackgroundColor: null
	,darkMode: null
	,setAll: function(size,color,font,leftMargin,rightMargin,indent,leading,blockIndent,alignment,border,borderColor,borderSize,background,backgroundColor,codeblockBackgroundColor) {
		this.size = size != null ? size : this.size;
		this.color = color != null ? color : this.color;
		this.font = font != null ? font : this.font;
		this.leftMargin = leftMargin != null ? leftMargin : this.leftMargin;
		this.rightMargin = rightMargin != null ? rightMargin : this.rightMargin;
		this.indent = indent != null ? indent : this.indent;
		this.leading = leading != null ? leading : this.leading;
		this.blockIndent = blockIndent != null ? blockIndent : this.blockIndent;
		this.alignment = alignment != null ? alignment : this.alignment;
		this.border = border != null ? border : this.border;
		this.borderColor = borderColor != null ? borderColor : this.borderColor;
		this.borderSize = borderSize != null ? borderSize : this.borderSize;
		this.background = background != null ? background : this.background;
		this.backgroundColor = backgroundColor != null ? backgroundColor : this.backgroundColor;
		this.codeblockBackgroundColor = codeblockBackgroundColor != null ? codeblockBackgroundColor : this.codeblockBackgroundColor;
		return this;
	}
	,set_darkMode: function(mode) {
		this.backgroundColor = mode ? 2236962 : 15658734;
		this.color = mode ? -285212673 : 0;
		return mode;
	}
	,__class__: texter_general_markdown__$MarkdownVisualizer_VisualConfig
	,__properties__: {set_darkMode:"set_darkMode"}
};
var texter_general_markdown_MarkdownVisualizer = function() { };
$hxClasses["texter.general.markdown.MarkdownVisualizer"] = texter_general_markdown_MarkdownVisualizer;
texter_general_markdown_MarkdownVisualizer.__name__ = "texter.general.markdown.MarkdownVisualizer";
texter_general_markdown_MarkdownVisualizer.__properties__ = {get_markdownTextFormat:"get_markdownTextFormat"};
texter_general_markdown_MarkdownVisualizer.get_markdownTextFormat = function() {
	return new openfl_text_TextFormat(texter_general_markdown_MarkdownVisualizer.visualConfig.font,texter_general_markdown_MarkdownVisualizer.visualConfig.size,texter_general_markdown_MarkdownVisualizer.visualConfig.color,false,false,false,"","",openfl_text_TextFormatAlign.fromString(texter_general_markdown_MarkdownVisualizer.visualConfig.alignment),texter_general_markdown_MarkdownVisualizer.visualConfig.leftMargin,texter_general_markdown_MarkdownVisualizer.visualConfig.rightMargin,texter_general_markdown_MarkdownVisualizer.visualConfig.indent,texter_general_markdown_MarkdownVisualizer.visualConfig.leading);
};
var texter_general_markdown_Markdown = function() { };
$hxClasses["texter.general.markdown.Markdown"] = texter_general_markdown_Markdown;
texter_general_markdown_Markdown.__name__ = "texter.general.markdown.Markdown";
texter_general_markdown_Markdown.interpret = function(markdownText,onComplete) {
	var lineTexts = StringTools.replace(markdownText,"\r","");
	var effects = [];
	var _g = 0;
	var _g1 = texter_general_markdown_Markdown.markdownRules;
	while(_g < _g1.length) {
		var rule = _g1[_g];
		++_g;
		while(rule.match(lineTexts)) {
			if(rule == texter_general_markdown_MarkdownPatterns.indentEReg) {
				var by = TextTools.multiply("​",rule.matched(1).length) + rule.matched(2);
				lineTexts = lineTexts.replace(rule.r,by);
				var info = rule.matchedPos();
				var pos = info.pos - 1 < 0 ? info.pos : info.pos - 1;
				effects.push(texter_general_markdown_MarkdownEffect.Indent(rule.matched(1).length,pos,info.pos + info.len));
			}
			if(rule == texter_general_markdown_MarkdownPatterns.italicEReg || rule == texter_general_markdown_MarkdownPatterns.mathEReg || rule == texter_general_markdown_MarkdownPatterns.codeEReg || rule == texter_general_markdown_MarkdownPatterns.astItalicEReg) {
				lineTexts = lineTexts.replace(rule.r,"​$1​");
				var info1 = rule.matchedPos();
				effects.push(rule == texter_general_markdown_MarkdownPatterns.mathEReg ? texter_general_markdown_MarkdownEffect.Math(info1.pos,info1.pos + info1.len) : rule == texter_general_markdown_MarkdownPatterns.codeEReg ? texter_general_markdown_MarkdownEffect.Code(info1.pos,info1.pos + info1.len) : texter_general_markdown_MarkdownEffect.Italic(info1.pos,info1.pos + info1.len));
			} else if(rule == texter_general_markdown_MarkdownPatterns.boldEReg || rule == texter_general_markdown_MarkdownPatterns.strikeThroughEReg || rule == texter_general_markdown_MarkdownPatterns.astBoldEReg) {
				lineTexts = lineTexts.replace(rule.r,"​​$1​​");
				var info2 = rule.matchedPos();
				effects.push(rule == texter_general_markdown_MarkdownPatterns.boldEReg || rule == texter_general_markdown_MarkdownPatterns.astBoldEReg ? texter_general_markdown_MarkdownEffect.Bold(info2.pos,info2.pos + info2.len) : texter_general_markdown_MarkdownEffect.StrikeThrough(info2.pos,info2.pos + info2.len));
			} else if(rule == texter_general_markdown_MarkdownPatterns.hRuleEReg) {
				var by1 = rule == texter_general_markdown_MarkdownPatterns.parSepEReg ? "\n\n" : TextTools.multiply("—",rule.matched(1).length);
				lineTexts = lineTexts.replace(rule.r,by1);
				var info3 = rule.matchedPos();
				effects.push(texter_general_markdown_MarkdownEffect.HorizontalRule(rule.matched(1).charAt(0),info3.pos,info3.pos + info3.len));
			} else if(rule == texter_general_markdown_MarkdownPatterns.hRuledTitleEReg) {
				var by2 = rule.matched(1) + "\n" + TextTools.multiply("—",rule.matched(2).length);
				lineTexts = lineTexts.replace(rule.r,by2);
				var info4 = rule.matchedPos();
				var type = rule.matched(2).charAt(0);
				if(rule.matched(1).charAt(0) == "#") {
					continue;
				}
				effects.push(texter_general_markdown_MarkdownEffect.Heading(type == "*" || type == "+" || type == "=" ? 1 : 2,info4.pos == 0 ? info4.pos : info4.pos - 1,info4.pos + rule.matched(1).length));
				effects.push(texter_general_markdown_MarkdownEffect.HorizontalRule(type,info4.pos + rule.matched(1).length + 1,info4.pos + info4.len + 1));
			} else if(rule == texter_general_markdown_MarkdownPatterns.linkEReg) {
				var linkLength = TextTools.multiply("​",rule.matched(2).length);
				lineTexts = lineTexts.replace(rule.r,"​$1​​​" + linkLength);
				var info5 = rule.matchedPos();
				effects.push(texter_general_markdown_MarkdownEffect.Link(rule.matched(2),info5.pos,info5.pos + info5.len));
			} else if(rule == texter_general_markdown_MarkdownPatterns.listItemEReg) {
				if(!TextTools.contains(rule.matched(2),".")) {
					var n = rule.matched(1).length;
					var info6 = rule.matchedPos();
					var start = info6.pos - 2;
					if(start < 0) {
						lineTexts = lineTexts.replace(rule.r,"$1• $3");
						effects.push(texter_general_markdown_MarkdownEffect.UnorderedListItem(n,info6.pos,info6.pos + info6.len - 1));
						continue;
					}
					while(lineTexts.charAt(start--) != "\n" && start != 0) {
					}
					if(start != 0) {
						start += 2;
					}
					var prevLine = lineTexts.substring(start,info6.pos);
					if(StringTools.trim(prevLine).charAt(0) == "•" || StringTools.trim(prevLine).charAt(0) == "◦") {
						var len = 0;
						while(prevLine.charAt(len) != "•" && prevLine.charAt(len) != "◦") ++len;
						if(n < len) {
							lineTexts = lineTexts.replace(rule.r,"$1• $3");
						} else if(len == n) {
							if(StringTools.trim(prevLine).charAt(0) == "•") {
								lineTexts = lineTexts.replace(rule.r,"$1• $3");
							} else {
								lineTexts = lineTexts.replace(rule.r,"$1◦ $3");
							}
						} else {
							lineTexts = lineTexts.replace(rule.r,"$1◦ $3");
						}
						effects.push(texter_general_markdown_MarkdownEffect.UnorderedListItem(n,info6.pos,info6.pos + info6.len - 1));
						continue;
					}
					lineTexts = lineTexts.replace(rule.r,"$1• $3");
					effects.push(texter_general_markdown_MarkdownEffect.UnorderedListItem(n,info6.pos,info6.pos + info6.len - 1));
				} else {
					var by3 = rule.matched(1) + TextTools.replace(rule.matched(2),".","") + "․ $3";
					lineTexts = lineTexts.replace(rule.r,by3);
					var info7 = rule.matchedPos();
					effects.push(texter_general_markdown_MarkdownEffect.OrderedListItem(Std.parseInt(rule.matched(2)),rule.matched(1).length,info7.pos,info7.pos + info7.len - 1));
				}
			} else if(rule == texter_general_markdown_MarkdownPatterns.titleEReg) {
				var by4 = TextTools.replace(rule.matched(1),"#","​") + "$2";
				lineTexts = lineTexts.replace(rule.r,by4);
				var info8 = rule.matchedPos();
				effects.push(texter_general_markdown_MarkdownEffect.Heading(rule.matched(1).length,info8.pos,info8.pos + info8.len));
			} else if(rule == texter_general_markdown_MarkdownPatterns.codeblockEReg || rule == texter_general_markdown_MarkdownPatterns.tildeCodeblockEReg) {
				var langLength = "";
				while(langLength.length < rule.matched(1).length) langLength += "​";
				lineTexts = lineTexts.replace(rule.r,langLength + "​​​\r$2​​​");
				var info9 = rule.matchedPos();
				effects.push(texter_general_markdown_MarkdownEffect.CodeBlock(rule.matched(1),info9.pos,info9.pos + info9.len));
			} else if(rule == texter_general_markdown_MarkdownPatterns.tabCodeblockEReg) {
				lineTexts = lineTexts.replace(rule.r,"​​​​" + "​​​$1​​​");
				var info10 = rule.matchedPos();
				effects.push(texter_general_markdown_MarkdownEffect.TabCodeBlock(info10.pos,info10.pos + info10.len + 4));
			} else if(rule == texter_general_markdown_MarkdownPatterns.emojiEReg) {
				var this1 = texter_general_Emoji.emojiFromString;
				var key = rule.matched(1);
				var emoji = "​" + this1.h[key] + TextTools.multiply("​",rule.matched(1).length - 2);
				if(TextTools.contains(emoji,"undefined")) {
					emoji = TextTools.replace(rule.matched(1),":","​");
				}
				lineTexts = lineTexts.replace(rule.r,emoji);
				var info11 = rule.matchedPos();
				effects.push(texter_general_markdown_MarkdownEffect.Emoji(emoji,info11.pos,info11.pos + info11.len));
			} else if(rule == texter_general_markdown_MarkdownPatterns.parSepEReg) {
				lineTexts = lineTexts.replace(rule.r,"\r\r");
				var info12 = rule.matchedPos();
				effects.push(texter_general_markdown_MarkdownEffect.ParagraphGap(info12.pos,info12.pos + 2));
			} else if(rule == texter_general_markdown_MarkdownPatterns.alignmentEReg) {
				var align = rule.matched(1);
				var placeholder = TextTools.multiply("​",align.length);
				var by5 = TextTools.multiply("​",10) + placeholder + rule.matched(2) + TextTools.multiply("​",8);
				lineTexts = lineTexts.replace(rule.r,by5);
				var info13 = rule.matchedPos();
				effects.push(texter_general_markdown_MarkdownEffect.Alignment(align,info13.pos,info13.pos + info13.len));
			} else if(rule == texter_general_markdown_MarkdownPatterns.backslashNewlineEReg) {
				lineTexts = lineTexts.replace(rule.r,"\n");
			} else if(rule == texter_general_markdown_MarkdownPatterns.doubleSpaceNewlineEReg) {
				lineTexts = lineTexts.replace(rule.r,"\n" + "​");
			}
		}
	}
	onComplete(TextTools.replace(TextTools.replace(lineTexts,"\r","\n"),"\\t","  ") + "\n",effects);
};
var texter_general_markdown_MarkdownEffect = $hxEnums["texter.general.markdown.MarkdownEffect"] = { __ename__:"texter.general.markdown.MarkdownEffect",__constructs__:null
	,Indent: ($_=function(level,start,end) { return {_hx_index:0,level:level,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="Indent",$_.__params__ = ["level","start","end"],$_)
	,Bold: ($_=function(start,end) { return {_hx_index:1,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="Bold",$_.__params__ = ["start","end"],$_)
	,Italic: ($_=function(start,end) { return {_hx_index:2,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="Italic",$_.__params__ = ["start","end"],$_)
	,StrikeThrough: ($_=function(start,end) { return {_hx_index:3,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="StrikeThrough",$_.__params__ = ["start","end"],$_)
	,Code: ($_=function(start,end) { return {_hx_index:4,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="Code",$_.__params__ = ["start","end"],$_)
	,Math: ($_=function(start,end) { return {_hx_index:5,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="Math",$_.__params__ = ["start","end"],$_)
	,HorizontalRule: ($_=function(type,start,end) { return {_hx_index:6,type:type,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="HorizontalRule",$_.__params__ = ["type","start","end"],$_)
	,ParagraphGap: ($_=function(start,end) { return {_hx_index:7,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="ParagraphGap",$_.__params__ = ["start","end"],$_)
	,CodeBlock: ($_=function(language,start,end) { return {_hx_index:8,language:language,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="CodeBlock",$_.__params__ = ["language","start","end"],$_)
	,TabCodeBlock: ($_=function(start,end) { return {_hx_index:9,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="TabCodeBlock",$_.__params__ = ["start","end"],$_)
	,Link: ($_=function(link,start,end) { return {_hx_index:10,link:link,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="Link",$_.__params__ = ["link","start","end"],$_)
	,Image: ($_=function(altText,imageSource,start,end) { return {_hx_index:11,altText:altText,imageSource:imageSource,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="Image",$_.__params__ = ["altText","imageSource","start","end"],$_)
	,Emoji: ($_=function(type,start,end) { return {_hx_index:12,type:type,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="Emoji",$_.__params__ = ["type","start","end"],$_)
	,Heading: ($_=function(level,start,end) { return {_hx_index:13,level:level,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="Heading",$_.__params__ = ["level","start","end"],$_)
	,UnorderedListItem: ($_=function(nestingLevel,start,end) { return {_hx_index:14,nestingLevel:nestingLevel,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="UnorderedListItem",$_.__params__ = ["nestingLevel","start","end"],$_)
	,OrderedListItem: ($_=function(number,nestingLevel,start,end) { return {_hx_index:15,number:number,nestingLevel:nestingLevel,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="OrderedListItem",$_.__params__ = ["number","nestingLevel","start","end"],$_)
	,Alignment: ($_=function(alignment,start,end) { return {_hx_index:16,alignment:alignment,start:start,end:end,__enum__:"texter.general.markdown.MarkdownEffect",toString:$estr}; },$_._hx_name="Alignment",$_.__params__ = ["alignment","start","end"],$_)
};
texter_general_markdown_MarkdownEffect.__constructs__ = [texter_general_markdown_MarkdownEffect.Indent,texter_general_markdown_MarkdownEffect.Bold,texter_general_markdown_MarkdownEffect.Italic,texter_general_markdown_MarkdownEffect.StrikeThrough,texter_general_markdown_MarkdownEffect.Code,texter_general_markdown_MarkdownEffect.Math,texter_general_markdown_MarkdownEffect.HorizontalRule,texter_general_markdown_MarkdownEffect.ParagraphGap,texter_general_markdown_MarkdownEffect.CodeBlock,texter_general_markdown_MarkdownEffect.TabCodeBlock,texter_general_markdown_MarkdownEffect.Link,texter_general_markdown_MarkdownEffect.Image,texter_general_markdown_MarkdownEffect.Emoji,texter_general_markdown_MarkdownEffect.Heading,texter_general_markdown_MarkdownEffect.UnorderedListItem,texter_general_markdown_MarkdownEffect.OrderedListItem,texter_general_markdown_MarkdownEffect.Alignment];
var vision_algorithms_BilinearInterpolation = function() { };
$hxClasses["vision.algorithms.BilinearInterpolation"] = vision_algorithms_BilinearInterpolation;
vision_algorithms_BilinearInterpolation.__name__ = "vision.algorithms.BilinearInterpolation";
vision_algorithms_BilinearInterpolation.interpolate = function(image,width,height) {
	var length = width * height * 4 + vision_ds_Image.OFFSET;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
	this1.fill(0,length,0);
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var resized = this2;
	var xMultiplier = image.getUInt16(0) / width - 1 / width;
	var yMultiplier = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) / height - 1 / height;
	var _g = 0;
	var _g1 = resized.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((resized.length - vision_ds_Image.OFFSET) / (resized.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * resized.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = resized.b[position] << 24 | resized.b[position + 1] << 16 | resized.b[position + 2] << 8 | resized.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var c = value;
			var x1 = x * xMultiplier;
			var y1 = y * yMultiplier;
			var tmp;
			var x2 = Math.ceil(x1);
			var y2 = Math.ceil(y1);
			if(x2 >= 0 && y2 >= 0 && x2 < image.getUInt16(0) && y2 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))) {
				var x3 = Math.floor(x1);
				var y3 = Math.floor(y1);
				tmp = !(x3 >= 0 && y3 >= 0 && x3 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
			} else {
				tmp = true;
			}
			if(tmp) {
				x1 = vision_tools_MathTools.boundFloat(x1,0,image.getUInt16(0) - 1);
				y1 = vision_tools_MathTools.boundFloat(y1,0,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1);
			}
			var yFraction = y1 - (y1 | 0);
			var xFraction = x1 - (x1 | 0);
			var x4 = 1 - yFraction;
			var x5 = x1 | 0;
			var y4 = y1 | 0;
			if(!(x5 >= 0 && y4 >= 0 && x5 < image.getUInt16(0) && y4 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x = x5;
				var this_y = y4;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
			}
			var position1 = (y4 * image.getUInt16(0) + x5) * 4;
			position1 += vision_ds_Image.OFFSET;
			var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
			if(value1 == null) {
				value1 = 0;
			}
			var x6 = (1 - xFraction) * (value1 >> 16 & 255);
			var ma = image.getUInt16(0) - 1;
			var values = [(x1 | 0) + 1,0];
			var max = values[0];
			var _g4 = 0;
			var _g5 = values.length;
			while(_g4 < _g5) {
				var i = _g4++;
				if(values[i] > max) {
					max = values[i];
				}
			}
			var values1 = [max,ma];
			var min = values1[0];
			var _g6 = 0;
			var _g7 = values1.length;
			while(_g6 < _g7) {
				var i1 = _g6++;
				if(values1[i1] < min) {
					min = values1[i1];
				}
			}
			var x7 = min;
			var ma1 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
			var values2 = [y1 | 0,0];
			var max1 = values2[0];
			var _g8 = 0;
			var _g9 = values2.length;
			while(_g8 < _g9) {
				var i2 = _g8++;
				if(values2[i2] > max1) {
					max1 = values2[i2];
				}
			}
			var values3 = [max1,ma1];
			var min1 = values3[0];
			var _g10 = 0;
			var _g11 = values3.length;
			while(_g10 < _g11) {
				var i3 = _g10++;
				if(values3[i3] < min1) {
					min1 = values3[i3];
				}
			}
			var y5 = min1;
			if(!(x7 >= 0 && y5 >= 0 && x7 < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x1 = x7;
				var this_y1 = y5;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
			}
			var position2 = (y5 * image.getUInt16(0) + x7) * 4;
			position2 += vision_ds_Image.OFFSET;
			var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
			if(value2 == null) {
				value2 = 0;
			}
			var x8 = x4 * (x6 + xFraction * (value2 >> 16 & 255));
			var x9 = 1 - xFraction;
			var ma2 = image.getUInt16(0) - 1;
			var values4 = [x1 | 0,0];
			var max2 = values4[0];
			var _g12 = 0;
			var _g13 = values4.length;
			while(_g12 < _g13) {
				var i4 = _g12++;
				if(values4[i4] > max2) {
					max2 = values4[i4];
				}
			}
			var values5 = [max2,ma2];
			var min2 = values5[0];
			var _g14 = 0;
			var _g15 = values5.length;
			while(_g14 < _g15) {
				var i5 = _g14++;
				if(values5[i5] < min2) {
					min2 = values5[i5];
				}
			}
			var x10 = min2;
			var ma3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
			var values6 = [(y1 | 0) + 1,0];
			var max3 = values6[0];
			var _g16 = 0;
			var _g17 = values6.length;
			while(_g16 < _g17) {
				var i6 = _g16++;
				if(values6[i6] > max3) {
					max3 = values6[i6];
				}
			}
			var values7 = [max3,ma3];
			var min3 = values7[0];
			var _g18 = 0;
			var _g19 = values7.length;
			while(_g18 < _g19) {
				var i7 = _g18++;
				if(values7[i7] < min3) {
					min3 = values7[i7];
				}
			}
			var y6 = min3;
			if(!(x10 >= 0 && y6 >= 0 && x10 < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x2 = x10;
				var this_y2 = y6;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x2,this_y2)));
			}
			var position3 = (y6 * image.getUInt16(0) + x10) * 4;
			position3 += vision_ds_Image.OFFSET;
			var value3 = image.b[position3] << 24 | image.b[position3 + 1] << 16 | image.b[position3 + 2] << 8 | image.b[position3 + 3];
			if(value3 == null) {
				value3 = 0;
			}
			var x11 = x9 * (value3 >> 16 & 255);
			var ma4 = image.getUInt16(0) - 1;
			var values8 = [(x1 | 0) + 1,0];
			var max4 = values8[0];
			var _g20 = 0;
			var _g21 = values8.length;
			while(_g20 < _g21) {
				var i8 = _g20++;
				if(values8[i8] > max4) {
					max4 = values8[i8];
				}
			}
			var values9 = [max4,ma4];
			var min4 = values9[0];
			var _g22 = 0;
			var _g23 = values9.length;
			while(_g22 < _g23) {
				var i9 = _g22++;
				if(values9[i9] < min4) {
					min4 = values9[i9];
				}
			}
			var x12 = min4;
			var ma5 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
			var values10 = [(y1 | 0) + 1,0];
			var max5 = values10[0];
			var _g24 = 0;
			var _g25 = values10.length;
			while(_g24 < _g25) {
				var i10 = _g24++;
				if(values10[i10] > max5) {
					max5 = values10[i10];
				}
			}
			var values11 = [max5,ma5];
			var min5 = values11[0];
			var _g26 = 0;
			var _g27 = values11.length;
			while(_g26 < _g27) {
				var i11 = _g26++;
				if(values11[i11] < min5) {
					min5 = values11[i11];
				}
			}
			var y7 = min5;
			if(!(x12 >= 0 && y7 >= 0 && x12 < image.getUInt16(0) && y7 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x3 = x12;
				var this_y3 = y7;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x3,this_y3)));
			}
			var position4 = (y7 * image.getUInt16(0) + x12) * 4;
			position4 += vision_ds_Image.OFFSET;
			var value4 = image.b[position4] << 24 | image.b[position4 + 1] << 16 | image.b[position4 + 2] << 8 | image.b[position4 + 3];
			if(value4 == null) {
				value4 = 0;
			}
			var red = x8 + yFraction * (x11 + xFraction * (value4 >> 16 & 255)) | 0;
			var x13 = 1 - yFraction;
			var x14 = x1 | 0;
			var y8 = y1 | 0;
			if(!(x14 >= 0 && y8 >= 0 && x14 < image.getUInt16(0) && y8 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x4 = x14;
				var this_y4 = y8;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x4,this_y4)));
			}
			var position5 = (y8 * image.getUInt16(0) + x14) * 4;
			position5 += vision_ds_Image.OFFSET;
			var value5 = image.b[position5] << 24 | image.b[position5 + 1] << 16 | image.b[position5 + 2] << 8 | image.b[position5 + 3];
			if(value5 == null) {
				value5 = 0;
			}
			var x15 = (1 - xFraction) * (value5 >> 8 & 255);
			var ma6 = image.getUInt16(0) - 1;
			var values12 = [(x1 | 0) + 1,0];
			var max6 = values12[0];
			var _g28 = 0;
			var _g29 = values12.length;
			while(_g28 < _g29) {
				var i12 = _g28++;
				if(values12[i12] > max6) {
					max6 = values12[i12];
				}
			}
			var values13 = [max6,ma6];
			var min6 = values13[0];
			var _g30 = 0;
			var _g31 = values13.length;
			while(_g30 < _g31) {
				var i13 = _g30++;
				if(values13[i13] < min6) {
					min6 = values13[i13];
				}
			}
			var x16 = min6;
			var ma7 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
			var values14 = [y1 | 0,0];
			var max7 = values14[0];
			var _g32 = 0;
			var _g33 = values14.length;
			while(_g32 < _g33) {
				var i14 = _g32++;
				if(values14[i14] > max7) {
					max7 = values14[i14];
				}
			}
			var values15 = [max7,ma7];
			var min7 = values15[0];
			var _g34 = 0;
			var _g35 = values15.length;
			while(_g34 < _g35) {
				var i15 = _g34++;
				if(values15[i15] < min7) {
					min7 = values15[i15];
				}
			}
			var y9 = min7;
			if(!(x16 >= 0 && y9 >= 0 && x16 < image.getUInt16(0) && y9 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x5 = x16;
				var this_y5 = y9;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x5,this_y5)));
			}
			var position6 = (y9 * image.getUInt16(0) + x16) * 4;
			position6 += vision_ds_Image.OFFSET;
			var value6 = image.b[position6] << 24 | image.b[position6 + 1] << 16 | image.b[position6 + 2] << 8 | image.b[position6 + 3];
			if(value6 == null) {
				value6 = 0;
			}
			var x17 = x13 * (x15 + xFraction * (value6 >> 8 & 255));
			var x18 = 1 - xFraction;
			var ma8 = image.getUInt16(0) - 1;
			var values16 = [x1 | 0,0];
			var max8 = values16[0];
			var _g36 = 0;
			var _g37 = values16.length;
			while(_g36 < _g37) {
				var i16 = _g36++;
				if(values16[i16] > max8) {
					max8 = values16[i16];
				}
			}
			var values17 = [max8,ma8];
			var min8 = values17[0];
			var _g38 = 0;
			var _g39 = values17.length;
			while(_g38 < _g39) {
				var i17 = _g38++;
				if(values17[i17] < min8) {
					min8 = values17[i17];
				}
			}
			var x19 = min8;
			var ma9 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
			var values18 = [(y1 | 0) + 1,0];
			var max9 = values18[0];
			var _g40 = 0;
			var _g41 = values18.length;
			while(_g40 < _g41) {
				var i18 = _g40++;
				if(values18[i18] > max9) {
					max9 = values18[i18];
				}
			}
			var values19 = [max9,ma9];
			var min9 = values19[0];
			var _g42 = 0;
			var _g43 = values19.length;
			while(_g42 < _g43) {
				var i19 = _g42++;
				if(values19[i19] < min9) {
					min9 = values19[i19];
				}
			}
			var y10 = min9;
			if(!(x19 >= 0 && y10 >= 0 && x19 < image.getUInt16(0) && y10 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x6 = x19;
				var this_y6 = y10;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x6,this_y6)));
			}
			var position7 = (y10 * image.getUInt16(0) + x19) * 4;
			position7 += vision_ds_Image.OFFSET;
			var value7 = image.b[position7] << 24 | image.b[position7 + 1] << 16 | image.b[position7 + 2] << 8 | image.b[position7 + 3];
			if(value7 == null) {
				value7 = 0;
			}
			var x20 = x18 * (value7 >> 8 & 255);
			var ma10 = image.getUInt16(0) - 1;
			var values20 = [(x1 | 0) + 1,0];
			var max10 = values20[0];
			var _g44 = 0;
			var _g45 = values20.length;
			while(_g44 < _g45) {
				var i20 = _g44++;
				if(values20[i20] > max10) {
					max10 = values20[i20];
				}
			}
			var values21 = [max10,ma10];
			var min10 = values21[0];
			var _g46 = 0;
			var _g47 = values21.length;
			while(_g46 < _g47) {
				var i21 = _g46++;
				if(values21[i21] < min10) {
					min10 = values21[i21];
				}
			}
			var x21 = min10;
			var ma11 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
			var values22 = [(y1 | 0) + 1,0];
			var max11 = values22[0];
			var _g48 = 0;
			var _g49 = values22.length;
			while(_g48 < _g49) {
				var i22 = _g48++;
				if(values22[i22] > max11) {
					max11 = values22[i22];
				}
			}
			var values23 = [max11,ma11];
			var min11 = values23[0];
			var _g50 = 0;
			var _g51 = values23.length;
			while(_g50 < _g51) {
				var i23 = _g50++;
				if(values23[i23] < min11) {
					min11 = values23[i23];
				}
			}
			var y11 = min11;
			if(!(x21 >= 0 && y11 >= 0 && x21 < image.getUInt16(0) && y11 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x7 = x21;
				var this_y7 = y11;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x7,this_y7)));
			}
			var position8 = (y11 * image.getUInt16(0) + x21) * 4;
			position8 += vision_ds_Image.OFFSET;
			var value8 = image.b[position8] << 24 | image.b[position8 + 1] << 16 | image.b[position8 + 2] << 8 | image.b[position8 + 3];
			if(value8 == null) {
				value8 = 0;
			}
			var green = x17 + yFraction * (x20 + xFraction * (value8 >> 8 & 255)) | 0;
			var x22 = 1 - yFraction;
			var x23 = x1 | 0;
			var y12 = y1 | 0;
			if(!(x23 >= 0 && y12 >= 0 && x23 < image.getUInt16(0) && y12 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x8 = x23;
				var this_y8 = y12;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x8,this_y8)));
			}
			var position9 = (y12 * image.getUInt16(0) + x23) * 4;
			position9 += vision_ds_Image.OFFSET;
			var value9 = image.b[position9] << 24 | image.b[position9 + 1] << 16 | image.b[position9 + 2] << 8 | image.b[position9 + 3];
			if(value9 == null) {
				value9 = 0;
			}
			var x24 = (1 - xFraction) * (value9 & 255);
			var ma12 = image.getUInt16(0) - 1;
			var values24 = [(x1 | 0) + 1,0];
			var max12 = values24[0];
			var _g52 = 0;
			var _g53 = values24.length;
			while(_g52 < _g53) {
				var i24 = _g52++;
				if(values24[i24] > max12) {
					max12 = values24[i24];
				}
			}
			var values25 = [max12,ma12];
			var min12 = values25[0];
			var _g54 = 0;
			var _g55 = values25.length;
			while(_g54 < _g55) {
				var i25 = _g54++;
				if(values25[i25] < min12) {
					min12 = values25[i25];
				}
			}
			var x25 = min12;
			var ma13 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
			var values26 = [y1 | 0,0];
			var max13 = values26[0];
			var _g56 = 0;
			var _g57 = values26.length;
			while(_g56 < _g57) {
				var i26 = _g56++;
				if(values26[i26] > max13) {
					max13 = values26[i26];
				}
			}
			var values27 = [max13,ma13];
			var min13 = values27[0];
			var _g58 = 0;
			var _g59 = values27.length;
			while(_g58 < _g59) {
				var i27 = _g58++;
				if(values27[i27] < min13) {
					min13 = values27[i27];
				}
			}
			var y13 = min13;
			if(!(x25 >= 0 && y13 >= 0 && x25 < image.getUInt16(0) && y13 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x9 = x25;
				var this_y9 = y13;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x9,this_y9)));
			}
			var position10 = (y13 * image.getUInt16(0) + x25) * 4;
			position10 += vision_ds_Image.OFFSET;
			var value10 = image.b[position10] << 24 | image.b[position10 + 1] << 16 | image.b[position10 + 2] << 8 | image.b[position10 + 3];
			if(value10 == null) {
				value10 = 0;
			}
			var x26 = x22 * (x24 + xFraction * (value10 & 255));
			var x27 = 1 - xFraction;
			var ma14 = image.getUInt16(0) - 1;
			var values28 = [x1 | 0,0];
			var max14 = values28[0];
			var _g60 = 0;
			var _g61 = values28.length;
			while(_g60 < _g61) {
				var i28 = _g60++;
				if(values28[i28] > max14) {
					max14 = values28[i28];
				}
			}
			var values29 = [max14,ma14];
			var min14 = values29[0];
			var _g62 = 0;
			var _g63 = values29.length;
			while(_g62 < _g63) {
				var i29 = _g62++;
				if(values29[i29] < min14) {
					min14 = values29[i29];
				}
			}
			var x28 = min14;
			var ma15 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
			var values30 = [(y1 | 0) + 1,0];
			var max15 = values30[0];
			var _g64 = 0;
			var _g65 = values30.length;
			while(_g64 < _g65) {
				var i30 = _g64++;
				if(values30[i30] > max15) {
					max15 = values30[i30];
				}
			}
			var values31 = [max15,ma15];
			var min15 = values31[0];
			var _g66 = 0;
			var _g67 = values31.length;
			while(_g66 < _g67) {
				var i31 = _g66++;
				if(values31[i31] < min15) {
					min15 = values31[i31];
				}
			}
			var y14 = min15;
			if(!(x28 >= 0 && y14 >= 0 && x28 < image.getUInt16(0) && y14 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x10 = x28;
				var this_y10 = y14;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x10,this_y10)));
			}
			var position11 = (y14 * image.getUInt16(0) + x28) * 4;
			position11 += vision_ds_Image.OFFSET;
			var value11 = image.b[position11] << 24 | image.b[position11 + 1] << 16 | image.b[position11 + 2] << 8 | image.b[position11 + 3];
			if(value11 == null) {
				value11 = 0;
			}
			var x29 = x27 * (value11 & 255);
			var ma16 = image.getUInt16(0) - 1;
			var values32 = [(x1 | 0) + 1,0];
			var max16 = values32[0];
			var _g68 = 0;
			var _g69 = values32.length;
			while(_g68 < _g69) {
				var i32 = _g68++;
				if(values32[i32] > max16) {
					max16 = values32[i32];
				}
			}
			var values33 = [max16,ma16];
			var min16 = values33[0];
			var _g70 = 0;
			var _g71 = values33.length;
			while(_g70 < _g71) {
				var i33 = _g70++;
				if(values33[i33] < min16) {
					min16 = values33[i33];
				}
			}
			var x30 = min16;
			var ma17 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
			var values34 = [(y1 | 0) + 1,0];
			var max17 = values34[0];
			var _g72 = 0;
			var _g73 = values34.length;
			while(_g72 < _g73) {
				var i34 = _g72++;
				if(values34[i34] > max17) {
					max17 = values34[i34];
				}
			}
			var values35 = [max17,ma17];
			var min17 = values35[0];
			var _g74 = 0;
			var _g75 = values35.length;
			while(_g74 < _g75) {
				var i35 = _g74++;
				if(values35[i35] < min17) {
					min17 = values35[i35];
				}
			}
			var y15 = min17;
			if(!(x30 >= 0 && y15 >= 0 && x30 < image.getUInt16(0) && y15 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x11 = x30;
				var this_y11 = y15;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x11,this_y11)));
			}
			var position12 = (y15 * image.getUInt16(0) + x30) * 4;
			position12 += vision_ds_Image.OFFSET;
			var value12 = image.b[position12] << 24 | image.b[position12 + 1] << 16 | image.b[position12 + 2] << 8 | image.b[position12 + 3];
			if(value12 == null) {
				value12 = 0;
			}
			var blue = x26 + yFraction * (x29 + xFraction * (value12 & 255)) | 0;
			var x31 = 1 - yFraction;
			var x32 = x1 | 0;
			var y16 = y1 | 0;
			if(!(x32 >= 0 && y16 >= 0 && x32 < image.getUInt16(0) && y16 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x12 = x32;
				var this_y12 = y16;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x12,this_y12)));
			}
			var position13 = (y16 * image.getUInt16(0) + x32) * 4;
			position13 += vision_ds_Image.OFFSET;
			var value13 = image.b[position13] << 24 | image.b[position13 + 1] << 16 | image.b[position13 + 2] << 8 | image.b[position13 + 3];
			if(value13 == null) {
				value13 = 0;
			}
			var x33 = (1 - xFraction) * (value13 >> 24 & 255);
			var ma18 = image.getUInt16(0) - 1;
			var values36 = [(x1 | 0) + 1,0];
			var max18 = values36[0];
			var _g76 = 0;
			var _g77 = values36.length;
			while(_g76 < _g77) {
				var i36 = _g76++;
				if(values36[i36] > max18) {
					max18 = values36[i36];
				}
			}
			var values37 = [max18,ma18];
			var min18 = values37[0];
			var _g78 = 0;
			var _g79 = values37.length;
			while(_g78 < _g79) {
				var i37 = _g78++;
				if(values37[i37] < min18) {
					min18 = values37[i37];
				}
			}
			var x34 = min18;
			var ma19 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
			var values38 = [y1 | 0,0];
			var max19 = values38[0];
			var _g80 = 0;
			var _g81 = values38.length;
			while(_g80 < _g81) {
				var i38 = _g80++;
				if(values38[i38] > max19) {
					max19 = values38[i38];
				}
			}
			var values39 = [max19,ma19];
			var min19 = values39[0];
			var _g82 = 0;
			var _g83 = values39.length;
			while(_g82 < _g83) {
				var i39 = _g82++;
				if(values39[i39] < min19) {
					min19 = values39[i39];
				}
			}
			var y17 = min19;
			if(!(x34 >= 0 && y17 >= 0 && x34 < image.getUInt16(0) && y17 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x13 = x34;
				var this_y13 = y17;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x13,this_y13)));
			}
			var position14 = (y17 * image.getUInt16(0) + x34) * 4;
			position14 += vision_ds_Image.OFFSET;
			var value14 = image.b[position14] << 24 | image.b[position14 + 1] << 16 | image.b[position14 + 2] << 8 | image.b[position14 + 3];
			if(value14 == null) {
				value14 = 0;
			}
			var x35 = x31 * (x33 + xFraction * (value14 >> 24 & 255));
			var x36 = 1 - xFraction;
			var ma20 = image.getUInt16(0) - 1;
			var values40 = [x1 | 0,0];
			var max20 = values40[0];
			var _g84 = 0;
			var _g85 = values40.length;
			while(_g84 < _g85) {
				var i40 = _g84++;
				if(values40[i40] > max20) {
					max20 = values40[i40];
				}
			}
			var values41 = [max20,ma20];
			var min20 = values41[0];
			var _g86 = 0;
			var _g87 = values41.length;
			while(_g86 < _g87) {
				var i41 = _g86++;
				if(values41[i41] < min20) {
					min20 = values41[i41];
				}
			}
			var x37 = min20;
			var ma21 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
			var values42 = [(y1 | 0) + 1,0];
			var max21 = values42[0];
			var _g88 = 0;
			var _g89 = values42.length;
			while(_g88 < _g89) {
				var i42 = _g88++;
				if(values42[i42] > max21) {
					max21 = values42[i42];
				}
			}
			var values43 = [max21,ma21];
			var min21 = values43[0];
			var _g90 = 0;
			var _g91 = values43.length;
			while(_g90 < _g91) {
				var i43 = _g90++;
				if(values43[i43] < min21) {
					min21 = values43[i43];
				}
			}
			var y18 = min21;
			if(!(x37 >= 0 && y18 >= 0 && x37 < image.getUInt16(0) && y18 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x14 = x37;
				var this_y14 = y18;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x14,this_y14)));
			}
			var position15 = (y18 * image.getUInt16(0) + x37) * 4;
			position15 += vision_ds_Image.OFFSET;
			var value15 = image.b[position15] << 24 | image.b[position15 + 1] << 16 | image.b[position15 + 2] << 8 | image.b[position15 + 3];
			if(value15 == null) {
				value15 = 0;
			}
			var x38 = x36 * (value15 >> 24 & 255);
			var ma22 = image.getUInt16(0) - 1;
			var values44 = [(x1 | 0) + 1,0];
			var max22 = values44[0];
			var _g92 = 0;
			var _g93 = values44.length;
			while(_g92 < _g93) {
				var i44 = _g92++;
				if(values44[i44] > max22) {
					max22 = values44[i44];
				}
			}
			var values45 = [max22,ma22];
			var min22 = values45[0];
			var _g94 = 0;
			var _g95 = values45.length;
			while(_g94 < _g95) {
				var i45 = _g94++;
				if(values45[i45] < min22) {
					min22 = values45[i45];
				}
			}
			var x39 = min22;
			var ma23 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
			var values46 = [(y1 | 0) + 1,0];
			var max23 = values46[0];
			var _g96 = 0;
			var _g97 = values46.length;
			while(_g96 < _g97) {
				var i46 = _g96++;
				if(values46[i46] > max23) {
					max23 = values46[i46];
				}
			}
			var values47 = [max23,ma23];
			var min23 = values47[0];
			var _g98 = 0;
			var _g99 = values47.length;
			while(_g98 < _g99) {
				var i47 = _g98++;
				if(values47[i47] < min23) {
					min23 = values47[i47];
				}
			}
			var y19 = min23;
			if(!(x39 >= 0 && y19 >= 0 && x39 < image.getUInt16(0) && y19 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x15 = x39;
				var this_y15 = y19;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x15,this_y15)));
			}
			var position16 = (y19 * image.getUInt16(0) + x39) * 4;
			position16 += vision_ds_Image.OFFSET;
			var value16 = image.b[position16] << 24 | image.b[position16 + 1] << 16 | image.b[position16 + 2] << 8 | image.b[position16 + 3];
			if(value16 == null) {
				value16 = 0;
			}
			var alpha = x35 + yFraction * (x38 + xFraction * (value16 >> 24 & 255)) | 0;
			var Alpha = alpha;
			if(Alpha == null) {
				Alpha = 255;
			}
			var color = 0;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 255;
			}
			color &= -16711681;
			color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
			color &= -65281;
			color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
			color &= -256;
			color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
			color &= 16777215;
			color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
			var color1 = color;
			if(!(x >= 0 && y >= 0 && x < resized.getUInt16(0) && y < Math.ceil((resized.length - vision_ds_Image.OFFSET) / (resized.getUInt16(0) * 4)))) {
				var this_x16 = x;
				var this_y16 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(resized,new vision_ds_Point2D(this_x16,this_y16)));
			} else if(resized.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || resized.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp1;
				if(!(resized.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || resized.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp1 = x >= 0 && y >= 0 && x < resized.getUInt16(0) && y < Math.ceil((resized.length - vision_ds_Image.OFFSET) / (resized.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g100 = resized.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g101 = resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g102 = resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var resized1 = resized.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g100,_g101,_g102,resized.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),resized1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c1 = Math.sqrt(a * a - b * b);
							var x40 = view.x + view.width / 2 - c1;
							var y20 = view.y + view.height / 2;
							if(y20 == null) {
								y20 = 0;
							}
							if(x40 == null) {
								x40 = 0;
							}
							var f1_x = x40;
							var f1_y = y20;
							var x41 = view.x + view.width / 2 + c1;
							var y21 = view.y + view.height / 2;
							if(y21 == null) {
								y21 = 0;
							}
							if(x41 == null) {
								x41 = 0;
							}
							var f2_x = x41;
							var f2_y = y21;
							var p_x = x;
							var p_y = y;
							var x42 = p_x - f1_x;
							var y22 = p_y - f1_y;
							var x43 = p_x - f2_x;
							var y23 = p_y - f2_y;
							has = Math.sqrt(x42 * x42 + y22 * y22) + Math.sqrt(x43 * x43 + y23 * y23) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c2 = Math.sqrt(a1 * a1 - b1 * b1);
							var x44 = view.x + view.width / 2;
							var y24 = view.y + view.height / 2 - c2;
							if(y24 == null) {
								y24 = 0;
							}
							if(x44 == null) {
								x44 = 0;
							}
							var f1_x1 = x44;
							var f1_y1 = y24;
							var x45 = view.x + view.width / 2;
							var y25 = view.y + view.height / 2 + c2;
							if(y25 == null) {
								y25 = 0;
							}
							if(x45 == null) {
								x45 = 0;
							}
							var f2_x1 = x45;
							var f2_y1 = y25;
							var p_x1 = x;
							var p_y1 = y;
							var x46 = p_x1 - f1_x1;
							var y26 = p_y1 - f1_y1;
							var x47 = p_x1 - f2_x1;
							var y27 = p_y1 - f2_y1;
							has = Math.sqrt(x46 * x46 + y26 * y26) + Math.sqrt(x47 * x47 + y27 * y27) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x48 = x;
							var y28 = y;
							if(y28 == null) {
								y28 = 0;
							}
							if(x48 == null) {
								x48 = 0;
							}
							var point1_x = x48;
							var point1_y = y28;
							var x49 = view.x + view.width / 2;
							var y29 = view.y + view.height / 2;
							if(y29 == null) {
								y29 = 0;
							}
							if(x49 == null) {
								x49 = 0;
							}
							var point2_x = x49;
							var point2_y = y29;
							var x50 = point2_x - point1_x;
							var y30 = point2_y - point1_y;
							has = Math.sqrt(x50 * x50 + y30 * y30) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp1 = has;
				}
				if(tmp1) {
					var position17 = (y * resized.getUInt16(0) + x) * 4;
					position17 += vision_ds_Image.OFFSET;
					resized.b[position17] = color1 >> 24 & 255 & 255;
					resized.b[position17 + 1] = color1 >> 16 & 255 & 255;
					resized.b[position17 + 2] = color1 >> 8 & 255 & 255;
					resized.b[position17 + 3] = color1 & 255 & 255;
				}
			} else {
				var position18 = (y * resized.getUInt16(0) + x) * 4;
				position18 += vision_ds_Image.OFFSET;
				resized.b[position18] = color1 >> 24 & 255 & 255;
				resized.b[position18 + 1] = color1 >> 16 & 255 & 255;
				resized.b[position18 + 2] = color1 >> 8 & 255 & 255;
				resized.b[position18 + 3] = color1 & 255 & 255;
			}
		}
	}
	return resized;
};
vision_algorithms_BilinearInterpolation.interpolateMissingPixels = function(image,kernelRadiusX,kernelRadiusY,minX,minY) {
	if(kernelRadiusX == 0 && kernelRadiusY == 0) {
		return image;
	}
	var interpolated = vision_ds_Image.clone(image);
	var _g = minX;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = minY;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y * image.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
			if(value == null) {
				value = 0;
			}
			if(value != 0) {
				continue;
			}
			var neighborArray = [];
			var _g4 = -kernelRadiusX;
			var _g5 = kernelRadiusX + 1;
			while(_g4 < _g5) {
				var offX = _g4++;
				var _g6 = -kernelRadiusY;
				var _g7 = kernelRadiusY + 1;
				while(_g6 < _g7) {
					var offY = _g6++;
					var ma = image.getUInt16(0) - 1;
					var values = [x + offX,0];
					var max = values[0];
					var _g8 = 0;
					var _g9 = values.length;
					while(_g8 < _g9) {
						var i = _g8++;
						if(values[i] > max) {
							max = values[i];
						}
					}
					var values1 = [max,ma];
					var min = values1[0];
					var _g10 = 0;
					var _g11 = values1.length;
					while(_g10 < _g11) {
						var i1 = _g10++;
						if(values1[i1] < min) {
							min = values1[i1];
						}
					}
					var x1 = min;
					var ma1 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
					var values2 = [y + offY,0];
					var max1 = values2[0];
					var _g12 = 0;
					var _g13 = values2.length;
					while(_g12 < _g13) {
						var i2 = _g12++;
						if(values2[i2] > max1) {
							max1 = values2[i2];
						}
					}
					var values3 = [max1,ma1];
					var min1 = values3[0];
					var _g14 = 0;
					var _g15 = values3.length;
					while(_g14 < _g15) {
						var i3 = _g14++;
						if(values3[i3] < min1) {
							min1 = values3[i3];
						}
					}
					var y1 = min1;
					if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
						var this_x1 = x1;
						var this_y1 = y1;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
					}
					var position1 = (y1 * image.getUInt16(0) + x1) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					neighborArray.push(value1);
				}
			}
			var _g16 = [];
			var _g17 = 0;
			var _g18 = neighborArray;
			while(_g17 < _g18.length) {
				var v = _g18[_g17];
				++_g17;
				if(vision_ds_Color.toInt(v) != 0) {
					_g16.push(v);
				}
			}
			neighborArray = _g16;
			var sumR = 0;
			var sumG = 0;
			var sumB = 0;
			var sumA = 0;
			var _g19 = 0;
			while(_g19 < neighborArray.length) {
				var color = neighborArray[_g19];
				++_g19;
				sumR += color >> 16 & 255;
				sumG += color >> 8 & 255;
				sumB += color & 255;
				sumA += color >> 24 & 255;
			}
			var Red = Math.round(sumR / neighborArray.length);
			var Green = Math.round(sumG / neighborArray.length);
			var Blue = Math.round(sumB / neighborArray.length);
			var Alpha = Math.round(sumA / neighborArray.length);
			if(Alpha == null) {
				Alpha = 255;
			}
			var color1 = 0;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 255;
			}
			color1 &= -16711681;
			color1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
			color1 &= -65281;
			color1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
			color1 &= -256;
			color1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
			color1 &= 16777215;
			color1 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
			var color2 = color1;
			if(!(x >= 0 && y >= 0 && x < interpolated.getUInt16(0) && y < Math.ceil((interpolated.length - vision_ds_Image.OFFSET) / (interpolated.getUInt16(0) * 4)))) {
				var this_x2 = x;
				var this_y2 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(interpolated,new vision_ds_Point2D(this_x2,this_y2)));
			} else if(interpolated.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || interpolated.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || interpolated.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || interpolated.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || interpolated.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v1 = null;
				var tmp;
				if(!(interpolated.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || interpolated.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || interpolated.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || interpolated.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || interpolated.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
					tmp = x >= 0 && y >= 0 && x < interpolated.getUInt16(0) && y < Math.ceil((interpolated.length - vision_ds_Image.OFFSET) / (interpolated.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v1 != null) {
						view = v1;
					} else {
						var _g20 = interpolated.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g21 = interpolated.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g22 = interpolated.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var interpolated1 = interpolated.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g20,_g21,_g22,interpolated.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),interpolated1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var p_x = x;
							var p_y = y;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var p_x1 = x;
							var p_y1 = y;
							var x8 = p_x1 - f1_x1;
							var y8 = p_y1 - f1_y1;
							var x9 = p_x1 - f2_x1;
							var y9 = p_y1 - f2_y1;
							has = Math.sqrt(x8 * x8 + y8 * y8) + Math.sqrt(x9 * x9 + y9 * y9) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x10 = x;
							var y10 = y;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point1_x = x10;
							var point1_y = y10;
							var x11 = view.x + view.width / 2;
							var y11 = view.y + view.height / 2;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point2_x = x11;
							var point2_y = y11;
							var x12 = point2_x - point1_x;
							var y12 = point2_y - point1_y;
							has = Math.sqrt(x12 * x12 + y12 * y12) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position2 = (y * interpolated.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					interpolated.b[position2] = color2 >> 24 & 255 & 255;
					interpolated.b[position2 + 1] = color2 >> 16 & 255 & 255;
					interpolated.b[position2 + 2] = color2 >> 8 & 255 & 255;
					interpolated.b[position2 + 3] = color2 & 255 & 255;
				}
			} else {
				var position3 = (y * interpolated.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				interpolated.b[position3] = color2 >> 24 & 255 & 255;
				interpolated.b[position3 + 1] = color2 >> 16 & 255 & 255;
				interpolated.b[position3 + 2] = color2 >> 8 & 255 & 255;
				interpolated.b[position3 + 3] = color2 & 255 & 255;
			}
		}
	}
	return interpolated;
};
var vision_algorithms_Cramer = function() { };
$hxClasses["vision.algorithms.Cramer"] = vision_algorithms_Cramer;
vision_algorithms_Cramer.__name__ = "vision.algorithms.Cramer";
vision_algorithms_Cramer.solveVariablesFor = function(coefficients,solutions) {
	if(coefficients.width != solutions.length) {
		throw haxe_Exception.thrown("");
	}
	if(coefficients.height != solutions.length) {
		throw haxe_Exception.thrown("");
	}
	var arr = new vision_ds_Array2D(coefficients.width,coefficients.height);
	arr.inner = coefficients.inner.slice();
	var A = arr;
	var arr = new vision_ds_Array2D(A.width,A.height);
	arr.inner = A.inner.slice();
	var replacedA = arr;
	var variables = [];
	var _g = 0;
	var _g1 = solutions.length;
	while(_g < _g1) {
		var i = _g++;
		var arr = new vision_ds_Array2D(A.width,A.height);
		arr.inner = A.inner.slice();
		replacedA = arr;
		if(solutions.length < replacedA.height) {
			throw haxe_Exception.thrown("");
		}
		var _g2 = 0;
		var _g3 = replacedA.height;
		while(_g2 < _g3) {
			var y = _g2++;
			replacedA.inner[i + y * replacedA.width] = solutions[y];
		}
		var len = replacedA.width;
		var tmp;
		switch(len) {
		case 0:
			tmp = 1;
			break;
		case 1:
			tmp = replacedA.inner[0 * replacedA.width];
			break;
		case 2:
			tmp = replacedA.inner[0 * replacedA.width] * replacedA.inner[replacedA.width + 1] - replacedA.inner[replacedA.width] * replacedA.inner[0 * replacedA.width + 1];
			break;
		default:
			var determinantSum = 0.;
			var sign = 1;
			var _g4 = 0;
			var _g5 = replacedA.width;
			while(_g4 < _g5) {
				var i1 = _g4++;
				var current = replacedA.inner[0 * replacedA.width + i1];
				var fromX = 0;
				var fromY = 1;
				var toX = null;
				var toY = null;
				if(fromY == null) {
					fromY = 0;
				}
				if(fromX == null) {
					fromX = 0;
				}
				var copy = replacedA.to2DArray();
				if(toX == null) {
					toX = replacedA.width;
				}
				if(toY == null) {
					toY = replacedA.height;
				}
				var _g6 = 0;
				var _g7 = fromY;
				while(_g6 < _g7) {
					var _ = _g6++;
					copy.shift();
				}
				var _g8 = toX;
				var _g9 = copy.length;
				while(_g8 < _g9) {
					var _1 = _g8++;
					copy.pop();
				}
				var _g10 = 0;
				while(_g10 < copy.length) {
					var row = copy[_g10];
					++_g10;
					var _g11 = 0;
					var _g12 = fromX;
					while(_g11 < _g12) {
						var _2 = _g11++;
						row.shift();
					}
					var _g13 = toY;
					var _g14 = row.length;
					while(_g13 < _g14) {
						var _3 = _g13++;
						row.pop();
					}
				}
				var childMatrix;
				if(copy.length == 0) {
					childMatrix = new vision_ds_Array2D(0,0);
				} else {
					var arr2d = new vision_ds_Array2D(copy[0].length,copy.length);
					var flat = [];
					var _g15 = 0;
					while(_g15 < copy.length) {
						var item = copy[_g15];
						++_g15;
						flat = flat.concat(item);
					}
					arr2d.inner = flat;
					childMatrix = arr2d;
				}
				var underlyingArray = childMatrix.inner.slice();
				var _g16 = 0;
				var _g17 = childMatrix.height;
				while(_g16 < _g17) {
					var i2 = _g16++;
					underlyingArray[i1 + i2 * childMatrix.width] = null;
				}
				var _g18 = [];
				var _g19 = 0;
				var _g20 = underlyingArray;
				while(_g19 < _g20.length) {
					var v = _g20[_g19];
					++_g19;
					if(v != null) {
						_g18.push(v);
					}
				}
				underlyingArray = _g18;
				var value = childMatrix.width - 1;
				childMatrix.inner.length = value * childMatrix.height;
				childMatrix.width = value;
				childMatrix.inner = underlyingArray;
				var determinantSum1 = sign * current;
				var len1 = childMatrix.width;
				var determinantSum2;
				switch(len1) {
				case 0:
					determinantSum2 = 1;
					break;
				case 1:
					determinantSum2 = childMatrix.inner[0 * childMatrix.width];
					break;
				case 2:
					determinantSum2 = childMatrix.inner[0 * childMatrix.width] * childMatrix.inner[childMatrix.width + 1] - childMatrix.inner[childMatrix.width] * childMatrix.inner[0 * childMatrix.width + 1];
					break;
				default:
					var determinantSum3 = 0.;
					var sign1 = 1;
					var _g21 = 0;
					var _g22 = childMatrix.width;
					while(_g21 < _g22) {
						var i3 = _g21++;
						var current1 = childMatrix.inner[0 * childMatrix.width + i3];
						var fromX1 = 0;
						var fromY1 = 1;
						var toX1 = null;
						var toY1 = null;
						if(fromY1 == null) {
							fromY1 = 0;
						}
						if(fromX1 == null) {
							fromX1 = 0;
						}
						var copy1 = childMatrix.to2DArray();
						if(toX1 == null) {
							toX1 = childMatrix.width;
						}
						if(toY1 == null) {
							toY1 = childMatrix.height;
						}
						var _g23 = 0;
						var _g24 = fromY1;
						while(_g23 < _g24) {
							var _4 = _g23++;
							copy1.shift();
						}
						var _g25 = toX1;
						var _g26 = copy1.length;
						while(_g25 < _g26) {
							var _5 = _g25++;
							copy1.pop();
						}
						var _g27 = 0;
						while(_g27 < copy1.length) {
							var row1 = copy1[_g27];
							++_g27;
							var _g28 = 0;
							var _g29 = fromX1;
							while(_g28 < _g29) {
								var _6 = _g28++;
								row1.shift();
							}
							var _g30 = toY1;
							var _g31 = row1.length;
							while(_g30 < _g31) {
								var _7 = _g30++;
								row1.pop();
							}
						}
						var childMatrix1;
						if(copy1.length == 0) {
							childMatrix1 = new vision_ds_Array2D(0,0);
						} else {
							var arr2d1 = new vision_ds_Array2D(copy1[0].length,copy1.length);
							var flat1 = [];
							var _g32 = 0;
							while(_g32 < copy1.length) {
								var item1 = copy1[_g32];
								++_g32;
								flat1 = flat1.concat(item1);
							}
							arr2d1.inner = flat1;
							childMatrix1 = arr2d1;
						}
						var underlyingArray1 = childMatrix1.inner.slice();
						var _g33 = 0;
						var _g34 = childMatrix1.height;
						while(_g33 < _g34) {
							var i4 = _g33++;
							underlyingArray1[i3 + i4 * childMatrix1.width] = null;
						}
						var _g35 = [];
						var _g36 = 0;
						var _g37 = underlyingArray1;
						while(_g36 < _g37.length) {
							var v1 = _g37[_g36];
							++_g36;
							if(v1 != null) {
								_g35.push(v1);
							}
						}
						underlyingArray1 = _g35;
						var value1 = childMatrix1.width - 1;
						childMatrix1.inner.length = value1 * childMatrix1.height;
						childMatrix1.width = value1;
						childMatrix1.inner = underlyingArray1;
						determinantSum3 += sign1 * current1 * vision_ds_Matrix2D.getDeterminant(childMatrix1);
						sign1 *= -1;
					}
					determinantSum2 = determinantSum3;
				}
				determinantSum += determinantSum1 * determinantSum2;
				sign *= -1;
			}
			tmp = determinantSum;
		}
		var len2 = A.width;
		var tmp1;
		switch(len2) {
		case 0:
			tmp1 = 1;
			break;
		case 1:
			tmp1 = A.inner[0 * A.width];
			break;
		case 2:
			tmp1 = A.inner[0 * A.width] * A.inner[A.width + 1] - A.inner[A.width] * A.inner[0 * A.width + 1];
			break;
		default:
			var determinantSum4 = 0.;
			var sign2 = 1;
			var _g38 = 0;
			var _g39 = A.width;
			while(_g38 < _g39) {
				var i5 = _g38++;
				var current2 = A.inner[0 * A.width + i5];
				var fromX2 = 0;
				var fromY2 = 1;
				var toX2 = null;
				var toY2 = null;
				if(fromY2 == null) {
					fromY2 = 0;
				}
				if(fromX2 == null) {
					fromX2 = 0;
				}
				var copy2 = A.to2DArray();
				if(toX2 == null) {
					toX2 = A.width;
				}
				if(toY2 == null) {
					toY2 = A.height;
				}
				var _g40 = 0;
				var _g41 = fromY2;
				while(_g40 < _g41) {
					var _8 = _g40++;
					copy2.shift();
				}
				var _g42 = toX2;
				var _g43 = copy2.length;
				while(_g42 < _g43) {
					var _9 = _g42++;
					copy2.pop();
				}
				var _g44 = 0;
				while(_g44 < copy2.length) {
					var row2 = copy2[_g44];
					++_g44;
					var _g45 = 0;
					var _g46 = fromX2;
					while(_g45 < _g46) {
						var _10 = _g45++;
						row2.shift();
					}
					var _g47 = toY2;
					var _g48 = row2.length;
					while(_g47 < _g48) {
						var _11 = _g47++;
						row2.pop();
					}
				}
				var childMatrix2;
				if(copy2.length == 0) {
					childMatrix2 = new vision_ds_Array2D(0,0);
				} else {
					var arr2d2 = new vision_ds_Array2D(copy2[0].length,copy2.length);
					var flat2 = [];
					var _g49 = 0;
					while(_g49 < copy2.length) {
						var item2 = copy2[_g49];
						++_g49;
						flat2 = flat2.concat(item2);
					}
					arr2d2.inner = flat2;
					childMatrix2 = arr2d2;
				}
				var underlyingArray2 = childMatrix2.inner.slice();
				var _g50 = 0;
				var _g51 = childMatrix2.height;
				while(_g50 < _g51) {
					var i6 = _g50++;
					underlyingArray2[i5 + i6 * childMatrix2.width] = null;
				}
				var _g52 = [];
				var _g53 = 0;
				var _g54 = underlyingArray2;
				while(_g53 < _g54.length) {
					var v2 = _g54[_g53];
					++_g53;
					if(v2 != null) {
						_g52.push(v2);
					}
				}
				underlyingArray2 = _g52;
				var value2 = childMatrix2.width - 1;
				childMatrix2.inner.length = value2 * childMatrix2.height;
				childMatrix2.width = value2;
				childMatrix2.inner = underlyingArray2;
				var determinantSum5 = sign2 * current2;
				var len3 = childMatrix2.width;
				var determinantSum6;
				switch(len3) {
				case 0:
					determinantSum6 = 1;
					break;
				case 1:
					determinantSum6 = childMatrix2.inner[0 * childMatrix2.width];
					break;
				case 2:
					determinantSum6 = childMatrix2.inner[0 * childMatrix2.width] * childMatrix2.inner[childMatrix2.width + 1] - childMatrix2.inner[childMatrix2.width] * childMatrix2.inner[0 * childMatrix2.width + 1];
					break;
				default:
					var determinantSum7 = 0.;
					var sign3 = 1;
					var _g55 = 0;
					var _g56 = childMatrix2.width;
					while(_g55 < _g56) {
						var i7 = _g55++;
						var current3 = childMatrix2.inner[0 * childMatrix2.width + i7];
						var fromX3 = 0;
						var fromY3 = 1;
						var toX3 = null;
						var toY3 = null;
						if(fromY3 == null) {
							fromY3 = 0;
						}
						if(fromX3 == null) {
							fromX3 = 0;
						}
						var copy3 = childMatrix2.to2DArray();
						if(toX3 == null) {
							toX3 = childMatrix2.width;
						}
						if(toY3 == null) {
							toY3 = childMatrix2.height;
						}
						var _g57 = 0;
						var _g58 = fromY3;
						while(_g57 < _g58) {
							var _12 = _g57++;
							copy3.shift();
						}
						var _g59 = toX3;
						var _g60 = copy3.length;
						while(_g59 < _g60) {
							var _13 = _g59++;
							copy3.pop();
						}
						var _g61 = 0;
						while(_g61 < copy3.length) {
							var row3 = copy3[_g61];
							++_g61;
							var _g62 = 0;
							var _g63 = fromX3;
							while(_g62 < _g63) {
								var _14 = _g62++;
								row3.shift();
							}
							var _g64 = toY3;
							var _g65 = row3.length;
							while(_g64 < _g65) {
								var _15 = _g64++;
								row3.pop();
							}
						}
						var childMatrix3;
						if(copy3.length == 0) {
							childMatrix3 = new vision_ds_Array2D(0,0);
						} else {
							var arr2d3 = new vision_ds_Array2D(copy3[0].length,copy3.length);
							var flat3 = [];
							var _g66 = 0;
							while(_g66 < copy3.length) {
								var item3 = copy3[_g66];
								++_g66;
								flat3 = flat3.concat(item3);
							}
							arr2d3.inner = flat3;
							childMatrix3 = arr2d3;
						}
						var underlyingArray3 = childMatrix3.inner.slice();
						var _g67 = 0;
						var _g68 = childMatrix3.height;
						while(_g67 < _g68) {
							var i8 = _g67++;
							underlyingArray3[i7 + i8 * childMatrix3.width] = null;
						}
						var _g69 = [];
						var _g70 = 0;
						var _g71 = underlyingArray3;
						while(_g70 < _g71.length) {
							var v3 = _g71[_g70];
							++_g70;
							if(v3 != null) {
								_g69.push(v3);
							}
						}
						underlyingArray3 = _g69;
						var value3 = childMatrix3.width - 1;
						childMatrix3.inner.length = value3 * childMatrix3.height;
						childMatrix3.width = value3;
						childMatrix3.inner = underlyingArray3;
						determinantSum7 += sign3 * current3 * vision_ds_Matrix2D.getDeterminant(childMatrix3);
						sign3 *= -1;
					}
					determinantSum6 = determinantSum7;
				}
				determinantSum4 += determinantSum5 * determinantSum6;
				sign2 *= -1;
			}
			tmp1 = determinantSum4;
		}
		variables.push(tmp / tmp1);
	}
	return variables;
};
var vision_algorithms_GaussJordan = function() { };
$hxClasses["vision.algorithms.GaussJordan"] = vision_algorithms_GaussJordan;
vision_algorithms_GaussJordan.__name__ = "vision.algorithms.GaussJordan";
vision_algorithms_GaussJordan.invert = function(matrix) {
	var n = matrix.height;
	var identity = vision_algorithms_GaussJordan.createIdentityMatrix(n);
	var augmentedMatrix = vision_algorithms_GaussJordan.augmentMatrix(vision_ds_Matrix2D.to_array_array_float(matrix),vision_ds_Matrix2D.to_array_array_float(identity));
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		var pivotRow = i;
		var _g2 = i + 1;
		var _g3 = n;
		while(_g2 < _g3) {
			var j = _g2++;
			if(Math.abs(augmentedMatrix.inner[i * augmentedMatrix.width + j]) > Math.abs(augmentedMatrix.inner[i * augmentedMatrix.width + pivotRow])) {
				pivotRow = j;
			}
		}
		if(Math.abs(augmentedMatrix.inner[i * augmentedMatrix.width + pivotRow]) < 1e-12) {
			throw haxe_Exception.thrown("Matrix is not invertible");
		}
		if(pivotRow != i) {
			vision_algorithms_GaussJordan.swapRows(vision_ds_Matrix2D.to_array_array_float(augmentedMatrix),i,pivotRow);
		}
		var pivot = augmentedMatrix.inner[i * augmentedMatrix.width + i];
		var _g4 = 0;
		var _g5 = 2 * n;
		while(_g4 < _g5) {
			var j1 = _g4++;
			augmentedMatrix.inner[i + j1 * augmentedMatrix.width] = pivot;
		}
		var _g6 = 0;
		var _g7 = n;
		while(_g6 < _g7) {
			var j2 = _g6++;
			if(j2 != i) {
				var factor = augmentedMatrix.inner[i * augmentedMatrix.width + j2];
				var _g8 = 0;
				var _g9 = 2 * n;
				while(_g8 < _g9) {
					var k = _g8++;
					augmentedMatrix.inner[j2 + k * augmentedMatrix.width] = factor * augmentedMatrix.inner[k * augmentedMatrix.width + i];
				}
			}
		}
	}
	var _g = [];
	var _g1 = n + 1;
	var _g2 = 2 * n;
	while(_g1 < _g2) {
		var l = _g1++;
		_g.push(l);
	}
	var invertedMatrix = vision_algorithms_GaussJordan.extractMatrix(augmentedMatrix,n,_g);
	return invertedMatrix;
};
vision_algorithms_GaussJordan.createIdentityMatrix = function(size) {
	var matrix = [];
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		var i = _g++;
		matrix.push([]);
		var _g2 = 0;
		var _g3 = size;
		while(_g2 < _g3) {
			var j = _g2++;
			if(i == j) {
				matrix[i].push(1.0);
			} else {
				matrix[i].push(0.0);
			}
		}
	}
	return vision_ds_Matrix2D.from_array_array_float(matrix);
};
vision_algorithms_GaussJordan.augmentMatrix = function(matrix,augmentation) {
	var augmentedMatrix = [];
	var _g = 0;
	var _g1 = matrix.length;
	while(_g < _g1) {
		var i = _g++;
		augmentedMatrix.push(matrix[i].concat(augmentation[i]));
	}
	return vision_ds_Matrix2D.from_array_array_float(augmentedMatrix);
};
vision_algorithms_GaussJordan.swapRows = function(matrix,row1,row2) {
	var temp = matrix[row1];
	matrix[row1] = matrix[row2];
	matrix[row2] = temp;
};
vision_algorithms_GaussJordan.extractMatrix = function(matrix,rows,columns) {
	var extractedMatrix = [];
	var _g = 0;
	var _g1 = rows;
	while(_g < _g1) {
		var i = _g++;
		extractedMatrix.push([]);
		var _g2 = 0;
		while(_g2 < columns.length) {
			var j = columns[_g2];
			++_g2;
			extractedMatrix[i].push(matrix.inner[j * matrix.width + i]);
		}
	}
	return vision_ds_Matrix2D.from_array_array_float(extractedMatrix);
};
var vision_algorithms_PerspectiveWarp = function() { };
$hxClasses["vision.algorithms.PerspectiveWarp"] = vision_algorithms_PerspectiveWarp;
vision_algorithms_PerspectiveWarp.__name__ = "vision.algorithms.PerspectiveWarp";
vision_algorithms_PerspectiveWarp.generateMatrix = function(sourcePoints,destinationPoints) {
	if(sourcePoints.length != 4 || sourcePoints.length != 4) {
		throw haxe_Exception.thrown("");
	}
	var M = new vision_ds_Array2D(3,3);
	var _g = [];
	var _g1 = [];
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g.push(_g1);
	var _g1 = [];
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g.push(_g1);
	var _g1 = [];
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g.push(_g1);
	var _g1 = [];
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g.push(_g1);
	var _g1 = [];
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g.push(_g1);
	var _g1 = [];
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g.push(_g1);
	var _g1 = [];
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g.push(_g1);
	var _g1 = [];
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g1.push(0.);
	_g.push(_g1);
	var a = _g;
	var _g = [];
	_g.push(0.);
	_g.push(0.);
	_g.push(0.);
	_g.push(0.);
	_g.push(0.);
	_g.push(0.);
	_g.push(0.);
	_g.push(0.);
	var b = _g;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		a[i][0] = a[i + 4][3] = destinationPoints[i].x;
		a[i][1] = a[i + 4][4] = destinationPoints[i].y;
		a[i][2] = a[i + 4][5] = 1;
		a[i][3] = a[i][4] = a[i][5] = a[i + 4][0] = a[i + 4][1] = a[i + 4][2] = 0;
		a[i][6] = -destinationPoints[i].x * sourcePoints[i].x;
		a[i][7] = -destinationPoints[i].y * sourcePoints[i].x;
		a[i + 4][6] = -destinationPoints[i].x * sourcePoints[i].y;
		a[i + 4][7] = -destinationPoints[i].y * sourcePoints[i].y;
		b[i] = sourcePoints[i].x;
		b[i + 4] = sourcePoints[i].y;
	}
	var x = vision_algorithms_Cramer.solveVariablesFor(vision_ds_Matrix2D.from_array_array_float(a),b);
	x[8] = 1.;
	M.inner[0 * M.width] = x[0];
	M.inner[1 + 0 * M.width] = x[1];
	M.inner[2 + 0 * M.width] = x[2];
	M.inner[M.width] = x[3];
	M.inner[1 + M.width] = x[4];
	M.inner[2 + M.width] = x[5];
	M.inner[2 * M.width] = x[6];
	M.inner[1 + 2 * M.width] = x[7];
	M.inner[2 + 2 * M.width] = x[8];
	return M;
};
vision_algorithms_PerspectiveWarp.applyMatrix = function(image,matrix) {
	var width = image.getUInt16(0);
	var length = width * Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) * 4 + vision_ds_Image.OFFSET;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
	this1.fill(0,length,0);
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var outputImage = this2;
	var _g = 0;
	var _g1 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = image.getUInt16(0);
		while(_g2 < _g3) {
			var x = _g2++;
			var point = new vision_ds_Point3D(x,y,1);
			if(matrix.width != 3 || matrix.height != 3) {
				throw haxe_Exception.thrown("");
			}
			var x1 = point.x * matrix.inner[0 * matrix.width] + point.y * matrix.inner[0 * matrix.width + 1] + point.z * matrix.inner[0 * matrix.width + 2];
			var y1 = point.x * matrix.inner[matrix.width] + point.y * matrix.inner[matrix.width + 1] + point.z * matrix.inner[matrix.width + 2];
			var z = point.x * matrix.inner[2 * matrix.width] + point.y * matrix.inner[2 * matrix.width + 1] + point.z * matrix.inner[2 * matrix.width + 2];
			var processed = new vision_ds_Point3D(x1,y1,z);
			var x2 = processed.x / processed.z;
			var y2 = processed.y / processed.z;
			if(y2 == null) {
				y2 = 0;
			}
			if(x2 == null) {
				x2 = 0;
			}
			var transformedPoint_x = x2;
			var transformedPoint_y = y2;
			var color;
			var x3 = Math.floor(transformedPoint_x);
			var y3 = Math.floor(transformedPoint_y);
			if(x3 >= 0 && y3 >= 0 && x3 < image.getUInt16(0) && y3 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))) {
				var x4 = transformedPoint_x;
				var y4 = transformedPoint_y;
				var color1;
				var x5 = Math.ceil(x4);
				var y5 = Math.ceil(y4);
				if(x5 >= 0 && y5 >= 0 && x5 < image.getUInt16(0) && y5 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4))) {
					var x6 = Math.floor(x4);
					var y6 = Math.floor(y4);
					color1 = !(x6 >= 0 && y6 >= 0 && x6 < image.getUInt16(0) && y6 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
				} else {
					color1 = true;
				}
				if(color1) {
					x4 = vision_tools_MathTools.boundFloat(x4,0,image.getUInt16(0) - 1);
					y4 = vision_tools_MathTools.boundFloat(y4,0,Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1);
				}
				var yFraction = y4 - (y4 | 0);
				var xFraction = x4 - (x4 | 0);
				var x7 = 1 - yFraction;
				var x8 = x4 | 0;
				var y7 = y4 | 0;
				if(!(x8 >= 0 && y7 >= 0 && x8 < image.getUInt16(0) && y7 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x = x8;
					var this_y = y7;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y7 * image.getUInt16(0) + x8) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var x9 = (1 - xFraction) * (value >> 16 & 255);
				var ma = image.getUInt16(0) - 1;
				var values = [(x4 | 0) + 1,0];
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i = _g4++;
					if(values[i] > max) {
						max = values[i];
					}
				}
				var values1 = [max,ma];
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i1 = _g6++;
					if(values1[i1] < min) {
						min = values1[i1];
					}
				}
				var x10 = min;
				var ma1 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
				var values2 = [y4 | 0,0];
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i2 = _g8++;
					if(values2[i2] > max1) {
						max1 = values2[i2];
					}
				}
				var values3 = [max1,ma1];
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i3 = _g10++;
					if(values3[i3] < min1) {
						min1 = values3[i3];
					}
				}
				var y8 = min1;
				if(!(x10 >= 0 && y8 >= 0 && x10 < image.getUInt16(0) && y8 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x10;
					var this_y1 = y8;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y8 * image.getUInt16(0) + x10) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = image.b[position1] << 24 | image.b[position1 + 1] << 16 | image.b[position1 + 2] << 8 | image.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var x11 = x7 * (x9 + xFraction * (value1 >> 16 & 255));
				var x12 = 1 - xFraction;
				var ma2 = image.getUInt16(0) - 1;
				var values4 = [x4 | 0,0];
				var max2 = values4[0];
				var _g12 = 0;
				var _g13 = values4.length;
				while(_g12 < _g13) {
					var i4 = _g12++;
					if(values4[i4] > max2) {
						max2 = values4[i4];
					}
				}
				var values5 = [max2,ma2];
				var min2 = values5[0];
				var _g14 = 0;
				var _g15 = values5.length;
				while(_g14 < _g15) {
					var i5 = _g14++;
					if(values5[i5] < min2) {
						min2 = values5[i5];
					}
				}
				var x13 = min2;
				var ma3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
				var values6 = [(y4 | 0) + 1,0];
				var max3 = values6[0];
				var _g16 = 0;
				var _g17 = values6.length;
				while(_g16 < _g17) {
					var i6 = _g16++;
					if(values6[i6] > max3) {
						max3 = values6[i6];
					}
				}
				var values7 = [max3,ma3];
				var min3 = values7[0];
				var _g18 = 0;
				var _g19 = values7.length;
				while(_g18 < _g19) {
					var i7 = _g18++;
					if(values7[i7] < min3) {
						min3 = values7[i7];
					}
				}
				var y9 = min3;
				if(!(x13 >= 0 && y9 >= 0 && x13 < image.getUInt16(0) && y9 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x2 = x13;
					var this_y2 = y9;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position2 = (y9 * image.getUInt16(0) + x13) * 4;
				position2 += vision_ds_Image.OFFSET;
				var value2 = image.b[position2] << 24 | image.b[position2 + 1] << 16 | image.b[position2 + 2] << 8 | image.b[position2 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var x14 = x12 * (value2 >> 16 & 255);
				var ma4 = image.getUInt16(0) - 1;
				var values8 = [(x4 | 0) + 1,0];
				var max4 = values8[0];
				var _g20 = 0;
				var _g21 = values8.length;
				while(_g20 < _g21) {
					var i8 = _g20++;
					if(values8[i8] > max4) {
						max4 = values8[i8];
					}
				}
				var values9 = [max4,ma4];
				var min4 = values9[0];
				var _g22 = 0;
				var _g23 = values9.length;
				while(_g22 < _g23) {
					var i9 = _g22++;
					if(values9[i9] < min4) {
						min4 = values9[i9];
					}
				}
				var x15 = min4;
				var ma5 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
				var values10 = [(y4 | 0) + 1,0];
				var max5 = values10[0];
				var _g24 = 0;
				var _g25 = values10.length;
				while(_g24 < _g25) {
					var i10 = _g24++;
					if(values10[i10] > max5) {
						max5 = values10[i10];
					}
				}
				var values11 = [max5,ma5];
				var min5 = values11[0];
				var _g26 = 0;
				var _g27 = values11.length;
				while(_g26 < _g27) {
					var i11 = _g26++;
					if(values11[i11] < min5) {
						min5 = values11[i11];
					}
				}
				var y10 = min5;
				if(!(x15 >= 0 && y10 >= 0 && x15 < image.getUInt16(0) && y10 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x3 = x15;
					var this_y3 = y10;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x3,this_y3)));
				}
				var position3 = (y10 * image.getUInt16(0) + x15) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value3 = image.b[position3] << 24 | image.b[position3 + 1] << 16 | image.b[position3 + 2] << 8 | image.b[position3 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var red = x11 + yFraction * (x14 + xFraction * (value3 >> 16 & 255)) | 0;
				var x16 = 1 - yFraction;
				var x17 = x4 | 0;
				var y11 = y4 | 0;
				if(!(x17 >= 0 && y11 >= 0 && x17 < image.getUInt16(0) && y11 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x4 = x17;
					var this_y4 = y11;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position4 = (y11 * image.getUInt16(0) + x17) * 4;
				position4 += vision_ds_Image.OFFSET;
				var value4 = image.b[position4] << 24 | image.b[position4 + 1] << 16 | image.b[position4 + 2] << 8 | image.b[position4 + 3];
				if(value4 == null) {
					value4 = 0;
				}
				var x18 = (1 - xFraction) * (value4 >> 8 & 255);
				var ma6 = image.getUInt16(0) - 1;
				var values12 = [(x4 | 0) + 1,0];
				var max6 = values12[0];
				var _g28 = 0;
				var _g29 = values12.length;
				while(_g28 < _g29) {
					var i12 = _g28++;
					if(values12[i12] > max6) {
						max6 = values12[i12];
					}
				}
				var values13 = [max6,ma6];
				var min6 = values13[0];
				var _g30 = 0;
				var _g31 = values13.length;
				while(_g30 < _g31) {
					var i13 = _g30++;
					if(values13[i13] < min6) {
						min6 = values13[i13];
					}
				}
				var x19 = min6;
				var ma7 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
				var values14 = [y4 | 0,0];
				var max7 = values14[0];
				var _g32 = 0;
				var _g33 = values14.length;
				while(_g32 < _g33) {
					var i14 = _g32++;
					if(values14[i14] > max7) {
						max7 = values14[i14];
					}
				}
				var values15 = [max7,ma7];
				var min7 = values15[0];
				var _g34 = 0;
				var _g35 = values15.length;
				while(_g34 < _g35) {
					var i15 = _g34++;
					if(values15[i15] < min7) {
						min7 = values15[i15];
					}
				}
				var y12 = min7;
				if(!(x19 >= 0 && y12 >= 0 && x19 < image.getUInt16(0) && y12 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x5 = x19;
					var this_y5 = y12;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x5,this_y5)));
				}
				var position5 = (y12 * image.getUInt16(0) + x19) * 4;
				position5 += vision_ds_Image.OFFSET;
				var value5 = image.b[position5] << 24 | image.b[position5 + 1] << 16 | image.b[position5 + 2] << 8 | image.b[position5 + 3];
				if(value5 == null) {
					value5 = 0;
				}
				var x20 = x16 * (x18 + xFraction * (value5 >> 8 & 255));
				var x21 = 1 - xFraction;
				var ma8 = image.getUInt16(0) - 1;
				var values16 = [x4 | 0,0];
				var max8 = values16[0];
				var _g36 = 0;
				var _g37 = values16.length;
				while(_g36 < _g37) {
					var i16 = _g36++;
					if(values16[i16] > max8) {
						max8 = values16[i16];
					}
				}
				var values17 = [max8,ma8];
				var min8 = values17[0];
				var _g38 = 0;
				var _g39 = values17.length;
				while(_g38 < _g39) {
					var i17 = _g38++;
					if(values17[i17] < min8) {
						min8 = values17[i17];
					}
				}
				var x22 = min8;
				var ma9 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
				var values18 = [(y4 | 0) + 1,0];
				var max9 = values18[0];
				var _g40 = 0;
				var _g41 = values18.length;
				while(_g40 < _g41) {
					var i18 = _g40++;
					if(values18[i18] > max9) {
						max9 = values18[i18];
					}
				}
				var values19 = [max9,ma9];
				var min9 = values19[0];
				var _g42 = 0;
				var _g43 = values19.length;
				while(_g42 < _g43) {
					var i19 = _g42++;
					if(values19[i19] < min9) {
						min9 = values19[i19];
					}
				}
				var y13 = min9;
				if(!(x22 >= 0 && y13 >= 0 && x22 < image.getUInt16(0) && y13 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x6 = x22;
					var this_y6 = y13;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position6 = (y13 * image.getUInt16(0) + x22) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value6 = image.b[position6] << 24 | image.b[position6 + 1] << 16 | image.b[position6 + 2] << 8 | image.b[position6 + 3];
				if(value6 == null) {
					value6 = 0;
				}
				var x23 = x21 * (value6 >> 8 & 255);
				var ma10 = image.getUInt16(0) - 1;
				var values20 = [(x4 | 0) + 1,0];
				var max10 = values20[0];
				var _g44 = 0;
				var _g45 = values20.length;
				while(_g44 < _g45) {
					var i20 = _g44++;
					if(values20[i20] > max10) {
						max10 = values20[i20];
					}
				}
				var values21 = [max10,ma10];
				var min10 = values21[0];
				var _g46 = 0;
				var _g47 = values21.length;
				while(_g46 < _g47) {
					var i21 = _g46++;
					if(values21[i21] < min10) {
						min10 = values21[i21];
					}
				}
				var x24 = min10;
				var ma11 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
				var values22 = [(y4 | 0) + 1,0];
				var max11 = values22[0];
				var _g48 = 0;
				var _g49 = values22.length;
				while(_g48 < _g49) {
					var i22 = _g48++;
					if(values22[i22] > max11) {
						max11 = values22[i22];
					}
				}
				var values23 = [max11,ma11];
				var min11 = values23[0];
				var _g50 = 0;
				var _g51 = values23.length;
				while(_g50 < _g51) {
					var i23 = _g50++;
					if(values23[i23] < min11) {
						min11 = values23[i23];
					}
				}
				var y14 = min11;
				if(!(x24 >= 0 && y14 >= 0 && x24 < image.getUInt16(0) && y14 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x7 = x24;
					var this_y7 = y14;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x7,this_y7)));
				}
				var position7 = (y14 * image.getUInt16(0) + x24) * 4;
				position7 += vision_ds_Image.OFFSET;
				var value7 = image.b[position7] << 24 | image.b[position7 + 1] << 16 | image.b[position7 + 2] << 8 | image.b[position7 + 3];
				if(value7 == null) {
					value7 = 0;
				}
				var green = x20 + yFraction * (x23 + xFraction * (value7 >> 8 & 255)) | 0;
				var x25 = 1 - yFraction;
				var x26 = x4 | 0;
				var y15 = y4 | 0;
				if(!(x26 >= 0 && y15 >= 0 && x26 < image.getUInt16(0) && y15 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x8 = x26;
					var this_y8 = y15;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x8,this_y8)));
				}
				var position8 = (y15 * image.getUInt16(0) + x26) * 4;
				position8 += vision_ds_Image.OFFSET;
				var value8 = image.b[position8] << 24 | image.b[position8 + 1] << 16 | image.b[position8 + 2] << 8 | image.b[position8 + 3];
				if(value8 == null) {
					value8 = 0;
				}
				var x27 = (1 - xFraction) * (value8 & 255);
				var ma12 = image.getUInt16(0) - 1;
				var values24 = [(x4 | 0) + 1,0];
				var max12 = values24[0];
				var _g52 = 0;
				var _g53 = values24.length;
				while(_g52 < _g53) {
					var i24 = _g52++;
					if(values24[i24] > max12) {
						max12 = values24[i24];
					}
				}
				var values25 = [max12,ma12];
				var min12 = values25[0];
				var _g54 = 0;
				var _g55 = values25.length;
				while(_g54 < _g55) {
					var i25 = _g54++;
					if(values25[i25] < min12) {
						min12 = values25[i25];
					}
				}
				var x28 = min12;
				var ma13 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
				var values26 = [y4 | 0,0];
				var max13 = values26[0];
				var _g56 = 0;
				var _g57 = values26.length;
				while(_g56 < _g57) {
					var i26 = _g56++;
					if(values26[i26] > max13) {
						max13 = values26[i26];
					}
				}
				var values27 = [max13,ma13];
				var min13 = values27[0];
				var _g58 = 0;
				var _g59 = values27.length;
				while(_g58 < _g59) {
					var i27 = _g58++;
					if(values27[i27] < min13) {
						min13 = values27[i27];
					}
				}
				var y16 = min13;
				if(!(x28 >= 0 && y16 >= 0 && x28 < image.getUInt16(0) && y16 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x9 = x28;
					var this_y9 = y16;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x9,this_y9)));
				}
				var position9 = (y16 * image.getUInt16(0) + x28) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value9 = image.b[position9] << 24 | image.b[position9 + 1] << 16 | image.b[position9 + 2] << 8 | image.b[position9 + 3];
				if(value9 == null) {
					value9 = 0;
				}
				var x29 = x25 * (x27 + xFraction * (value9 & 255));
				var x30 = 1 - xFraction;
				var ma14 = image.getUInt16(0) - 1;
				var values28 = [x4 | 0,0];
				var max14 = values28[0];
				var _g60 = 0;
				var _g61 = values28.length;
				while(_g60 < _g61) {
					var i28 = _g60++;
					if(values28[i28] > max14) {
						max14 = values28[i28];
					}
				}
				var values29 = [max14,ma14];
				var min14 = values29[0];
				var _g62 = 0;
				var _g63 = values29.length;
				while(_g62 < _g63) {
					var i29 = _g62++;
					if(values29[i29] < min14) {
						min14 = values29[i29];
					}
				}
				var x31 = min14;
				var ma15 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
				var values30 = [(y4 | 0) + 1,0];
				var max15 = values30[0];
				var _g64 = 0;
				var _g65 = values30.length;
				while(_g64 < _g65) {
					var i30 = _g64++;
					if(values30[i30] > max15) {
						max15 = values30[i30];
					}
				}
				var values31 = [max15,ma15];
				var min15 = values31[0];
				var _g66 = 0;
				var _g67 = values31.length;
				while(_g66 < _g67) {
					var i31 = _g66++;
					if(values31[i31] < min15) {
						min15 = values31[i31];
					}
				}
				var y17 = min15;
				if(!(x31 >= 0 && y17 >= 0 && x31 < image.getUInt16(0) && y17 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x10 = x31;
					var this_y10 = y17;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x10,this_y10)));
				}
				var position10 = (y17 * image.getUInt16(0) + x31) * 4;
				position10 += vision_ds_Image.OFFSET;
				var value10 = image.b[position10] << 24 | image.b[position10 + 1] << 16 | image.b[position10 + 2] << 8 | image.b[position10 + 3];
				if(value10 == null) {
					value10 = 0;
				}
				var x32 = x30 * (value10 & 255);
				var ma16 = image.getUInt16(0) - 1;
				var values32 = [(x4 | 0) + 1,0];
				var max16 = values32[0];
				var _g68 = 0;
				var _g69 = values32.length;
				while(_g68 < _g69) {
					var i32 = _g68++;
					if(values32[i32] > max16) {
						max16 = values32[i32];
					}
				}
				var values33 = [max16,ma16];
				var min16 = values33[0];
				var _g70 = 0;
				var _g71 = values33.length;
				while(_g70 < _g71) {
					var i33 = _g70++;
					if(values33[i33] < min16) {
						min16 = values33[i33];
					}
				}
				var x33 = min16;
				var ma17 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
				var values34 = [(y4 | 0) + 1,0];
				var max17 = values34[0];
				var _g72 = 0;
				var _g73 = values34.length;
				while(_g72 < _g73) {
					var i34 = _g72++;
					if(values34[i34] > max17) {
						max17 = values34[i34];
					}
				}
				var values35 = [max17,ma17];
				var min17 = values35[0];
				var _g74 = 0;
				var _g75 = values35.length;
				while(_g74 < _g75) {
					var i35 = _g74++;
					if(values35[i35] < min17) {
						min17 = values35[i35];
					}
				}
				var y18 = min17;
				if(!(x33 >= 0 && y18 >= 0 && x33 < image.getUInt16(0) && y18 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x11 = x33;
					var this_y11 = y18;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x11,this_y11)));
				}
				var position11 = (y18 * image.getUInt16(0) + x33) * 4;
				position11 += vision_ds_Image.OFFSET;
				var value11 = image.b[position11] << 24 | image.b[position11 + 1] << 16 | image.b[position11 + 2] << 8 | image.b[position11 + 3];
				if(value11 == null) {
					value11 = 0;
				}
				var blue = x29 + yFraction * (x32 + xFraction * (value11 & 255)) | 0;
				var x34 = 1 - yFraction;
				var x35 = x4 | 0;
				var y19 = y4 | 0;
				if(!(x35 >= 0 && y19 >= 0 && x35 < image.getUInt16(0) && y19 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x12 = x35;
					var this_y12 = y19;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x12,this_y12)));
				}
				var position12 = (y19 * image.getUInt16(0) + x35) * 4;
				position12 += vision_ds_Image.OFFSET;
				var value12 = image.b[position12] << 24 | image.b[position12 + 1] << 16 | image.b[position12 + 2] << 8 | image.b[position12 + 3];
				if(value12 == null) {
					value12 = 0;
				}
				var x36 = (1 - xFraction) * (value12 >> 24 & 255);
				var ma18 = image.getUInt16(0) - 1;
				var values36 = [(x4 | 0) + 1,0];
				var max18 = values36[0];
				var _g76 = 0;
				var _g77 = values36.length;
				while(_g76 < _g77) {
					var i36 = _g76++;
					if(values36[i36] > max18) {
						max18 = values36[i36];
					}
				}
				var values37 = [max18,ma18];
				var min18 = values37[0];
				var _g78 = 0;
				var _g79 = values37.length;
				while(_g78 < _g79) {
					var i37 = _g78++;
					if(values37[i37] < min18) {
						min18 = values37[i37];
					}
				}
				var x37 = min18;
				var ma19 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
				var values38 = [y4 | 0,0];
				var max19 = values38[0];
				var _g80 = 0;
				var _g81 = values38.length;
				while(_g80 < _g81) {
					var i38 = _g80++;
					if(values38[i38] > max19) {
						max19 = values38[i38];
					}
				}
				var values39 = [max19,ma19];
				var min19 = values39[0];
				var _g82 = 0;
				var _g83 = values39.length;
				while(_g82 < _g83) {
					var i39 = _g82++;
					if(values39[i39] < min19) {
						min19 = values39[i39];
					}
				}
				var y20 = min19;
				if(!(x37 >= 0 && y20 >= 0 && x37 < image.getUInt16(0) && y20 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x13 = x37;
					var this_y13 = y20;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x13,this_y13)));
				}
				var position13 = (y20 * image.getUInt16(0) + x37) * 4;
				position13 += vision_ds_Image.OFFSET;
				var value13 = image.b[position13] << 24 | image.b[position13 + 1] << 16 | image.b[position13 + 2] << 8 | image.b[position13 + 3];
				if(value13 == null) {
					value13 = 0;
				}
				var x38 = x34 * (x36 + xFraction * (value13 >> 24 & 255));
				var x39 = 1 - xFraction;
				var ma20 = image.getUInt16(0) - 1;
				var values40 = [x4 | 0,0];
				var max20 = values40[0];
				var _g84 = 0;
				var _g85 = values40.length;
				while(_g84 < _g85) {
					var i40 = _g84++;
					if(values40[i40] > max20) {
						max20 = values40[i40];
					}
				}
				var values41 = [max20,ma20];
				var min20 = values41[0];
				var _g86 = 0;
				var _g87 = values41.length;
				while(_g86 < _g87) {
					var i41 = _g86++;
					if(values41[i41] < min20) {
						min20 = values41[i41];
					}
				}
				var x40 = min20;
				var ma21 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
				var values42 = [(y4 | 0) + 1,0];
				var max21 = values42[0];
				var _g88 = 0;
				var _g89 = values42.length;
				while(_g88 < _g89) {
					var i42 = _g88++;
					if(values42[i42] > max21) {
						max21 = values42[i42];
					}
				}
				var values43 = [max21,ma21];
				var min21 = values43[0];
				var _g90 = 0;
				var _g91 = values43.length;
				while(_g90 < _g91) {
					var i43 = _g90++;
					if(values43[i43] < min21) {
						min21 = values43[i43];
					}
				}
				var y21 = min21;
				if(!(x40 >= 0 && y21 >= 0 && x40 < image.getUInt16(0) && y21 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x14 = x40;
					var this_y14 = y21;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x14,this_y14)));
				}
				var position14 = (y21 * image.getUInt16(0) + x40) * 4;
				position14 += vision_ds_Image.OFFSET;
				var value14 = image.b[position14] << 24 | image.b[position14 + 1] << 16 | image.b[position14 + 2] << 8 | image.b[position14 + 3];
				if(value14 == null) {
					value14 = 0;
				}
				var x41 = x39 * (value14 >> 24 & 255);
				var ma22 = image.getUInt16(0) - 1;
				var values44 = [(x4 | 0) + 1,0];
				var max22 = values44[0];
				var _g92 = 0;
				var _g93 = values44.length;
				while(_g92 < _g93) {
					var i44 = _g92++;
					if(values44[i44] > max22) {
						max22 = values44[i44];
					}
				}
				var values45 = [max22,ma22];
				var min22 = values45[0];
				var _g94 = 0;
				var _g95 = values45.length;
				while(_g94 < _g95) {
					var i45 = _g94++;
					if(values45[i45] < min22) {
						min22 = values45[i45];
					}
				}
				var x42 = min22;
				var ma23 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) - 1;
				var values46 = [(y4 | 0) + 1,0];
				var max23 = values46[0];
				var _g96 = 0;
				var _g97 = values46.length;
				while(_g96 < _g97) {
					var i46 = _g96++;
					if(values46[i46] > max23) {
						max23 = values46[i46];
					}
				}
				var values47 = [max23,ma23];
				var min23 = values47[0];
				var _g98 = 0;
				var _g99 = values47.length;
				while(_g98 < _g99) {
					var i47 = _g98++;
					if(values47[i47] < min23) {
						min23 = values47[i47];
					}
				}
				var y22 = min23;
				if(!(x42 >= 0 && y22 >= 0 && x42 < image.getUInt16(0) && y22 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x15 = x42;
					var this_y15 = y22;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x15,this_y15)));
				}
				var position15 = (y22 * image.getUInt16(0) + x42) * 4;
				position15 += vision_ds_Image.OFFSET;
				var value15 = image.b[position15] << 24 | image.b[position15 + 1] << 16 | image.b[position15 + 2] << 8 | image.b[position15 + 3];
				if(value15 == null) {
					value15 = 0;
				}
				var alpha = x38 + yFraction * (x41 + xFraction * (value15 >> 24 & 255)) | 0;
				var Alpha = alpha;
				if(Alpha == null) {
					Alpha = 255;
				}
				var color2 = 0;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 255;
				}
				color2 &= -16711681;
				color2 |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
				color2 &= -65281;
				color2 |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
				color2 &= -256;
				color2 |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
				color2 &= 16777215;
				color2 |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
				color = color2;
			} else {
				color = 0;
			}
			if(!(x >= 0 && y >= 0 && x < outputImage.getUInt16(0) && y < Math.ceil((outputImage.length - vision_ds_Image.OFFSET) / (outputImage.getUInt16(0) * 4)))) {
				var this_x16 = x;
				var this_y16 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(outputImage,new vision_ds_Point2D(this_x16,this_y16)));
			} else if(outputImage.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || outputImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || outputImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || outputImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || outputImage.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(outputImage.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || outputImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || outputImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || outputImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || outputImage.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < outputImage.getUInt16(0) && y < Math.ceil((outputImage.length - vision_ds_Image.OFFSET) / (outputImage.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g100 = outputImage.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g101 = outputImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g102 = outputImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var outputImage1 = outputImage.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g100,_g101,_g102,outputImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),outputImage1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x43 = view.x + view.width / 2 - c;
							var y23 = view.y + view.height / 2;
							if(y23 == null) {
								y23 = 0;
							}
							if(x43 == null) {
								x43 = 0;
							}
							var f1_x = x43;
							var f1_y = y23;
							var x44 = view.x + view.width / 2 + c;
							var y24 = view.y + view.height / 2;
							if(y24 == null) {
								y24 = 0;
							}
							if(x44 == null) {
								x44 = 0;
							}
							var f2_x = x44;
							var f2_y = y24;
							var p_x = x;
							var p_y = y;
							var x45 = p_x - f1_x;
							var y25 = p_y - f1_y;
							var x46 = p_x - f2_x;
							var y26 = p_y - f2_y;
							has = Math.sqrt(x45 * x45 + y25 * y25) + Math.sqrt(x46 * x46 + y26 * y26) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x47 = view.x + view.width / 2;
							var y27 = view.y + view.height / 2 - c1;
							if(y27 == null) {
								y27 = 0;
							}
							if(x47 == null) {
								x47 = 0;
							}
							var f1_x1 = x47;
							var f1_y1 = y27;
							var x48 = view.x + view.width / 2;
							var y28 = view.y + view.height / 2 + c1;
							if(y28 == null) {
								y28 = 0;
							}
							if(x48 == null) {
								x48 = 0;
							}
							var f2_x1 = x48;
							var f2_y1 = y28;
							var p_x1 = x;
							var p_y1 = y;
							var x49 = p_x1 - f1_x1;
							var y29 = p_y1 - f1_y1;
							var x50 = p_x1 - f2_x1;
							var y30 = p_y1 - f2_y1;
							has = Math.sqrt(x49 * x49 + y29 * y29) + Math.sqrt(x50 * x50 + y30 * y30) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x51 = x;
							var y31 = y;
							if(y31 == null) {
								y31 = 0;
							}
							if(x51 == null) {
								x51 = 0;
							}
							var point1_x = x51;
							var point1_y = y31;
							var x52 = view.x + view.width / 2;
							var y32 = view.y + view.height / 2;
							if(y32 == null) {
								y32 = 0;
							}
							if(x52 == null) {
								x52 = 0;
							}
							var point2_x = x52;
							var point2_y = y32;
							var x53 = point2_x - point1_x;
							var y33 = point2_y - point1_y;
							has = Math.sqrt(x53 * x53 + y33 * y33) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position16 = (y * outputImage.getUInt16(0) + x) * 4;
					position16 += vision_ds_Image.OFFSET;
					outputImage.b[position16] = color >> 24 & 255 & 255;
					outputImage.b[position16 + 1] = color >> 16 & 255 & 255;
					outputImage.b[position16 + 2] = color >> 8 & 255 & 255;
					outputImage.b[position16 + 3] = color & 255 & 255;
				}
			} else {
				var position17 = (y * outputImage.getUInt16(0) + x) * 4;
				position17 += vision_ds_Image.OFFSET;
				outputImage.b[position17] = color >> 24 & 255 & 255;
				outputImage.b[position17 + 1] = color >> 16 & 255 & 255;
				outputImage.b[position17 + 2] = color >> 8 & 255 & 255;
				outputImage.b[position17 + 3] = color & 255 & 255;
			}
		}
	}
	return outputImage;
};
var vision_algorithms_Radix = function() { };
$hxClasses["vision.algorithms.Radix"] = vision_algorithms_Radix;
vision_algorithms_Radix.__name__ = "vision.algorithms.Radix";
vision_algorithms_Radix.getMax = function(array,endIndex) {
	if(endIndex == null) {
		endIndex = array.length;
	}
	var potential = array[0];
	var _g = 1;
	var _g1 = endIndex;
	while(_g < _g1) {
		var i = _g++;
		if(array[i] > potential) {
			potential = array[i];
		}
	}
	return potential;
};
vision_algorithms_Radix.countingSort = function(array,exp,endIndex) {
	if(endIndex == null) {
		endIndex = array.length;
	}
	var output = [];
	var i = -1;
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	var count = _g;
	while(++i < endIndex) {
		var tmp = (array[i] / exp | 0) % 10;
		count[tmp]++;
	}
	i = 0;
	while(++i < 10) count[i] += count[i - 1];
	i = endIndex;
	while(--i >= 0) {
		output[count[(array[i] / exp | 0) % 10] - 1] = array[i];
		var tmp = (array[i] / exp | 0) % 10;
		count[tmp]--;
	}
	i = -1;
	while(++i < endIndex) array[i] = output[i];
	return output;
};
vision_algorithms_Radix.sort = function(main) {
	var negatives = [];
	var positives = [];
	var _g = 0;
	var _g1 = main.length;
	while(_g < _g1) {
		var i = _g++;
		if(main[i] < 0) {
			negatives.push(-main[i]);
		} else {
			positives.push(main[i]);
		}
	}
	var array = negatives;
	var max = vision_algorithms_Radix.getMax(array,array.length);
	var exp = 1;
	while(max / exp > 0) {
		array = vision_algorithms_Radix.countingSort(array,exp,array.length);
		exp *= 10;
	}
	var array = positives;
	var max = vision_algorithms_Radix.getMax(array,array.length);
	var exp = 1;
	while(max / exp > 0) {
		array = vision_algorithms_Radix.countingSort(array,exp,array.length);
		exp *= 10;
	}
	negatives.reverse();
	var result = new Array(negatives.length);
	var _g = 0;
	var _g1 = negatives.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = -negatives[i];
	}
	negatives = result;
	main = negatives.concat(positives);
	return main;
};
var vision_ds_Array2D = function(width,height,fillWith) {
	this.width = width;
	this.height = height;
	this.inner = [];
	this.inner.length = width * height;
	if(fillWith != null) {
		var _g = 0;
		var _g1 = this.inner.length;
		while(_g < _g1) {
			var i = _g++;
			this.inner[i] = fillWith;
		}
	}
};
$hxClasses["vision.ds.Array2D"] = vision_ds_Array2D;
vision_ds_Array2D.__name__ = "vision.ds.Array2D";
vision_ds_Array2D.prototype = {
	inner: null
	,width: null
	,height: null
	,get: function(x,y) {
		return this.inner[y * this.width + x];
	}
	,set: function(x,y,val) {
		return this.inner[x + y * this.width] = val;
	}
	,setMultiple: function(points,val) {
		var _g = 0;
		while(_g < points.length) {
			var p = points[_g];
			++_g;
			this.inner[p.x + p.y * this.width] = val;
		}
	}
	,row: function(y) {
		var _g = [];
		var _g1 = y * this.width;
		var _g2 = y * this.width + this.width;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.inner[i]);
		}
		return _g;
	}
	,column: function(x) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.height;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.inner[i * this.width + x]);
		}
		return _g;
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.inner);
	}
	,fill: function(value) {
		var _g = 0;
		var _g1 = this.inner.length;
		while(_g < _g1) {
			var i = _g++;
			this.inner[i] = value;
		}
		return this;
	}
	,clone: function() {
		var arr = new vision_ds_Array2D(this.width,this.height);
		arr.inner = this.inner.slice();
		return arr;
	}
	,toString: function() {
		var str = "\n[[";
		var counter = 0;
		var _g = 0;
		var _g1 = this.inner;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(counter < this.width) {
				var add = ", " + Std.string(item);
				if(counter == 0) {
					add = HxOverrides.substr(add,2,null);
				}
				str += add;
				++counter;
			} else {
				counter = 0;
				str += "],\n [";
				var add1 = "" + Std.string(item);
				str += add1;
				++counter;
			}
		}
		return str.substring(0,str.length) + "]]";
	}
	,get_length: function() {
		return this.inner.length;
	}
	,set_length: function(value) {
		this.inner.length = value;
		return value;
	}
	,set_width: function(value) {
		this.inner.length = value * this.height;
		return this.width = value;
	}
	,set_height: function(value) {
		this.inner.length = this.width * value;
		return this.height = value;
	}
	,get_item: function(index) {
		return this.inner[index[0] + index[1] * this.height];
	}
	,set_item: function(index,value) {
		return this.inner[index[0] + index[1] * this.height] = value;
	}
	,to2DArray: function() {
		var arr = [];
		var _g = 0;
		var _g1 = this.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = [];
			var _g3 = y * this.width;
			var _g4 = y * this.width + this.width;
			while(_g3 < _g4) {
				var i = _g3++;
				_g2.push(this.inner[i]);
			}
			arr.push(_g2);
		}
		return arr;
	}
	,__class__: vision_ds_Array2D
	,__properties__: {set_length:"set_length",get_length:"get_length",set_height:"set_height",set_width:"set_width"}
};
var vision_ds_ByteArray = {};
vision_ds_ByteArray.read = function(this1,index) {
	return this1.b[index];
};
vision_ds_ByteArray.write = function(this1,index,value) {
	this1.b[index] = value & 255;
};
vision_ds_ByteArray.setUInt8 = function(this1,pos,v) {
	this1.b[pos] = v & 255;
};
vision_ds_ByteArray.getUInt8 = function(this1,pos) {
	return this1.b[pos];
};
vision_ds_ByteArray.setUInt32 = function(this1,pos,value) {
	this1.setInt32(pos,value);
};
vision_ds_ByteArray.getUInt32 = function(this1,pos) {
	return this1.getInt32(pos);
};
vision_ds_ByteArray.setInt8 = function(this1,pos,v) {
	this1.b[pos] = v & 255;
};
vision_ds_ByteArray.getInt8 = function(this1,pos) {
	var v = this1.b[pos];
	return v * -(v >> 7);
};
vision_ds_ByteArray.setBytes = function(this1,pos,array) {
	this1.blit(pos,array,0,array.length);
};
vision_ds_ByteArray.getBytes = function(this1,pos,length) {
	var this2 = new haxe_io_Bytes(new ArrayBuffer(length));
	this2.fill(0,length,0);
	var array = this2;
	array.blit(0,this1,pos,length);
	return array;
};
vision_ds_ByteArray._new = function(length,fillWith) {
	if(fillWith == null) {
		fillWith = 0;
	}
	var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
	this1.fill(0,length,fillWith);
	return this1;
};
vision_ds_ByteArray.resize = function(this1,length) {
	var newBytes = new haxe_io_Bytes(new ArrayBuffer(length));
	var values = [newBytes.length,this1.length];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	newBytes.blit(0,this1,0,min);
	this1 = newBytes;
};
vision_ds_ByteArray.concat = function(this1,array) {
	var newBytes = new haxe_io_Bytes(new ArrayBuffer(this1.length + array.length));
	newBytes.blit(0,this1,0,this1.length);
	newBytes.blit(this1.length,array,0,array.length);
	return newBytes;
};
vision_ds_ByteArray.isEmpty = function(this1) {
	var _g = 0;
	var _g1 = this1.length;
	while(_g < _g1) {
		var i = _g++;
		if(this1.b[i] != 0) {
			return false;
		}
	}
	return true;
};
vision_ds_ByteArray.toArray = function(this1) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.length;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(this1.b[i]);
	}
	return _g;
};
var vision_ds_Color = {};
vision_ds_Color.__properties__ = {set_lightness:"set_lightness",get_lightness:"get_lightness",set_brightness:"set_brightness",get_brightness:"get_brightness",set_saturation:"set_saturation",get_saturation:"get_saturation",set_hue:"set_hue",get_hue:"get_hue",set_rgb:"set_rgb",get_rgb:"get_rgb",set_black:"set_black",get_black:"get_black",set_yellow:"set_yellow",get_yellow:"get_yellow",set_magenta:"set_magenta",get_magenta:"get_magenta",set_cyan:"set_cyan",get_cyan:"get_cyan",set_alphaFloat:"set_alphaFloat",get_alphaFloat:"get_alphaFloat",set_greenFloat:"set_greenFloat",get_greenFloat:"get_greenFloat",set_blueFloat:"set_blueFloat",get_blueFloat:"get_blueFloat",set_redFloat:"set_redFloat",get_redFloat:"get_redFloat",set_alpha:"set_alpha",get_alpha:"get_alpha",set_green:"set_green",get_green:"get_green",set_blue:"set_blue",get_blue:"get_blue",set_red:"set_red",get_red:"get_red"};
vision_ds_Color.fromInt = function(value) {
	var value1 = value;
	if(value1 == null) {
		value1 = 0;
	}
	return value1;
};
vision_ds_Color.fromRGBA = function(Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	var color = 0;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Color.from8Bit = function(Value) {
	var color = 0;
	var Alpha = 1;
	if(Alpha == null) {
		Alpha = 255;
	}
	color &= -16711681;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	color &= -65281;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	color &= -256;
	color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	color &= 16777215;
	color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	return color;
};
vision_ds_Color.fromRGBAFloat = function(Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = 0;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = Math.round(Red * 255);
	color &= -16711681;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	color &= -65281;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	color &= -256;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return color;
};
vision_ds_Color.fromCMYK = function(Cyan,Magenta,Yellow,Black,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = 0;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = (1 - Cyan) * (1 - Black);
	var value1 = Math.round(value * 255);
	color &= -16711681;
	color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	var value = (1 - Magenta) * (1 - Black);
	var value1 = Math.round(value * 255);
	color &= -65281;
	color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	var value = (1 - Yellow) * (1 - Black);
	var value1 = Math.round(value * 255);
	color &= -256;
	color |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	var value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return color;
};
vision_ds_Color.fromHSB = function(Hue,Saturation,Brightness,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = 0;
	var chroma = Brightness * Saturation;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return color;
};
vision_ds_Color.fromHSL = function(Hue,Saturation,Lightness,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = 0;
	var chroma = (1 - Math.abs(2 * Lightness - 1)) * Saturation;
	var match = Lightness - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return color;
};
vision_ds_Color.fromString = function(str) {
	var result = null;
	str = StringTools.trim(str);
	if(vision_ds_Color.COLOR_REGEX.match(str)) {
		var hexColor = "0x" + vision_ds_Color.COLOR_REGEX.matched(2);
		var value = Std.parseInt(hexColor);
		if(value == null) {
			value = 0;
		}
		result = value;
		if(hexColor.length == 8) {
			var value = Math.round(255);
			result &= 16777215;
			result |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		}
	}
	return result;
};
vision_ds_Color.getHSBColorWheel = function(Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < 360) {
		var c = _g1++;
		_g.push(vision_ds_Color.fromHSB(c,1.0,1.0,Alpha));
	}
	return _g;
};
vision_ds_Color.interpolate = function(Color1,Color2,Factor) {
	if(Factor == null) {
		Factor = 0.5;
	}
	var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
	var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
	var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
	var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
	var Alpha = a;
	if(Alpha == null) {
		Alpha = 255;
	}
	var color = 0;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
	color &= -65281;
	color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
	color &= -256;
	color |= b > 255 ? 255 : b < 0 ? 0 : b;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Color.gradient = function(Color1,Color2,Steps,Ease) {
	var output = [];
	if(Ease == null) {
		Ease = function(t) {
			return t;
		};
	}
	var _g = 0;
	var _g1 = Steps;
	while(_g < _g1) {
		var step = _g++;
		var Factor = Ease(step / (Steps - 1));
		if(Factor == null) {
			Factor = 0.5;
		}
		var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
		var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
		var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
		var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
		var Alpha = a;
		if(Alpha == null) {
			Alpha = 255;
		}
		var color = 0;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 255;
		}
		color &= -16711681;
		color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
		color &= -65281;
		color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
		color &= -256;
		color |= b > 255 ? 255 : b < 0 ? 0 : b;
		color &= 16777215;
		color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
		output[step] = color;
	}
	return output;
};
vision_ds_Color.makeRandom = function(alphaLock,alphaValue) {
	if(alphaValue == null) {
		alphaValue = 255;
	}
	if(alphaLock == null) {
		alphaLock = true;
	}
	var Red = Math.random();
	var Green = Math.random();
	var Blue = Math.random();
	var Alpha = alphaLock ? alphaValue : Math.random();
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = 0;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = Math.round(Red * 255);
	color &= -16711681;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	color &= -65281;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	color &= -256;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return color;
};
vision_ds_Color.multiply = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) / 255 * ((rhs >> 16 & 255) / 255);
	var Green = (lhs >> 8 & 255) / 255 * ((rhs >> 8 & 255) / 255);
	var Blue = (lhs & 255) / 255 * ((rhs & 255) / 255);
	var Alpha = (lhs >> 24 & 255) / 255 * ((rhs >> 24 & 255) / 255);
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = 0;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = Math.round(Red * 255);
	color &= -16711681;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	color &= -65281;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	color &= -256;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return color;
};
vision_ds_Color.add = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) + (rhs >> 16 & 255);
	var Green = (lhs >> 8 & 255) + (rhs >> 8 & 255);
	var Blue = (lhs & 255) + (rhs & 255);
	var Alpha = (lhs >> 24 & 255) + (rhs >> 24 & 255);
	if(Alpha == null) {
		Alpha = 255;
	}
	var color = 0;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Color.subtract = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) - (rhs >> 16 & 255);
	var Green = (lhs >> 8 & 255) - (rhs >> 8 & 255);
	var Blue = (lhs & 255) - (rhs & 255);
	var Alpha = (lhs >> 24 & 255) - (rhs >> 24 & 255);
	if(Alpha == null) {
		Alpha = 255;
	}
	var color = 0;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Color.divide = function(lhs,rhs) {
	var Red = ((lhs >> 16 & 255) / (rhs >> 16 & 255) == 0 ? 1 : rhs >> 16 & 255) | 0;
	var Green = ((lhs >> 8 & 255) / (rhs >> 8 & 255) == 0 ? 1 : rhs >> 8 & 255) | 0;
	var Blue = ((lhs & 255) / (rhs & 255) == 0 ? 1 : rhs & 255) | 0;
	var Alpha = ((lhs >> 24 & 255) / (rhs >> 24 & 255) == 0 ? 1 : rhs >> 24 & 255) | 0;
	if(Alpha == null) {
		Alpha = 255;
	}
	var color = 0;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Color.getComplementHarmony = function(this1) {
	var value = (vision_ds_Color.get_hue(this1) | 0) + 180;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	return vision_ds_Color.fromHSB(value % range,Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
};
vision_ds_Color.getAnalogousHarmony = function(this1,Threshold) {
	if(Threshold == null) {
		Threshold = 30;
	}
	var value = (vision_ds_Color.get_hue(this1) | 0) - Threshold;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var warmer = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	var value = (vision_ds_Color.get_hue(this1) | 0) + Threshold;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var colder = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	return { original : this1, warmer : warmer, colder : colder};
};
vision_ds_Color.getSplitComplementHarmony = function(this1,Threshold) {
	if(Threshold == null) {
		Threshold = 30;
	}
	var value = (vision_ds_Color.get_hue(this1) | 0) + 180;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var oppositeHue = value % range;
	var value = oppositeHue - Threshold;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var warmer = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	var value = oppositeHue + Threshold;
	var range = 351;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var colder = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	return { original : this1, warmer : warmer, colder : colder};
};
vision_ds_Color.getTriadicHarmony = function(this1) {
	var value = (vision_ds_Color.get_hue(this1) | 0) + 120;
	var range = 360;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var triadic1 = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	var value = (vision_ds_Color.get_hue(triadic1) | 0) + 120;
	var range = 360;
	if(value < 0) {
		value += range * ((0 - value) / range + 1 | 0);
	}
	var triadic2 = vision_ds_Color.fromHSB(value % range,(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	return { color1 : this1, color2 : triadic1, color3 : triadic2};
};
vision_ds_Color.to24Bit = function(this1) {
	return this1 & 16777215;
};
vision_ds_Color.toHexString = function(this1,Alpha,Prefix) {
	if(Prefix == null) {
		Prefix = true;
	}
	if(Alpha == null) {
		Alpha = true;
	}
	var tmp = Alpha ? StringTools.hex(this1 >> 24 & 255,2) : "";
	return (Prefix ? "0x" : "") + tmp + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
};
vision_ds_Color.toWebString = function(this1) {
	var Alpha = false;
	var Prefix = false;
	if(Prefix == null) {
		Prefix = true;
	}
	if(Alpha == null) {
		Alpha = true;
	}
	var tmp = Alpha ? StringTools.hex(this1 >> 24 & 255,2) : "";
	return "#" + ((Prefix ? "0x" : "") + tmp + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2));
};
vision_ds_Color.darken = function(this1,Factor) {
	if(Factor == null) {
		Factor = 0.2;
	}
	Factor = vision_tools_MathTools.boundFloat(Factor,0,1);
	var output = this1;
	var value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 * (1 - Factor);
	var Hue = vision_ds_Color.get_hue(output);
	var Alpha = (output >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return output;
};
vision_ds_Color.lighten = function(this1,Factor) {
	if(Factor == null) {
		Factor = 0.2;
	}
	Factor = vision_tools_MathTools.boundFloat(Factor,0,1);
	var output = this1;
	var value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 + (1 - (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2) * Factor;
	var Hue = vision_ds_Color.get_hue(output);
	var Alpha = (output >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= -65281;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= -256;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		output &= 16777215;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return output;
};
vision_ds_Color.invert = function(this1) {
	var oldAlpha = this1 >> 24 & 255;
	var lhs = -1;
	var Red = (lhs >> 16 & 255) - (this1 >> 16 & 255);
	var Green = (lhs >> 8 & 255) - (this1 >> 8 & 255);
	var Blue = (lhs & 255) - (this1 & 255);
	var Alpha = (lhs >> 24 & 255) - (this1 >> 24 & 255);
	if(Alpha == null) {
		Alpha = 255;
	}
	var color = 0;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	var output = color;
	output &= 16777215;
	output |= (oldAlpha > 255 ? 255 : oldAlpha < 0 ? 0 : oldAlpha) << 24;
	return output;
};
vision_ds_Color.setRGBA = function(this1,Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	this1 &= -16711681;
	this1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	this1 &= -65281;
	this1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	this1 &= -256;
	this1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	this1 &= 16777215;
	this1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	return this1;
};
vision_ds_Color.setRGBAFloat = function(this1,Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var value = Math.round(Red * 255);
	this1 &= -16711681;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	this1 &= -65281;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	this1 &= -256;
	this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return this1;
};
vision_ds_Color.setCMYK = function(this1,Cyan,Magenta,Yellow,Black,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var value = (1 - Cyan) * (1 - Black);
	var value1 = Math.round(value * 255);
	this1 &= -16711681;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	var value = (1 - Magenta) * (1 - Black);
	var value1 = Math.round(value * 255);
	this1 &= -65281;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	var value = (1 - Yellow) * (1 - Black);
	var value1 = Math.round(value * 255);
	this1 &= -256;
	this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	var value = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return this1;
};
vision_ds_Color.setHSB = function(this1,Hue,Saturation,Brightness,Alpha) {
	var chroma = Brightness * Saturation;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return this1;
};
vision_ds_Color.setHSL = function(this1,Hue,Saturation,Lightness,Alpha) {
	var chroma = (1 - Math.abs(2 * Lightness - 1)) * Saturation;
	var match = Lightness - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return this1;
};
vision_ds_Color.setHSChromaMatch = function(this1,Hue,Saturation,Chroma,Match,Alpha) {
	Hue %= 360;
	var hueD = Hue / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + Match;
	Chroma += Match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Match * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Match * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Match * 255);
		this1 &= -65281;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		break;
	}
	return this1;
};
vision_ds_Color.grayscale = function(this1,simple) {
	if(simple == null) {
		simple = false;
	}
	var gray = simple ? ((this1 >> 16 & 255) + (this1 >> 8 & 255) + (this1 & 255)) / 3 | 0 : 0.2126 * (this1 >> 16 & 255) + 0.7152 * (this1 >> 8 & 255) + 0.0722 * (this1 & 255) | 0;
	var Alpha = this1 >> 24 & 255;
	if(Alpha == null) {
		Alpha = 255;
	}
	this1 &= -16711681;
	this1 |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
	this1 &= -65281;
	this1 |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
	this1 &= -256;
	this1 |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
	this1 &= 16777215;
	this1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	this1 = this1;
	return this1;
};
vision_ds_Color.blackOrWhite = function(this1,threshold) {
	if(threshold == null) {
		threshold = 128;
	}
	var values = [this1 >> 16 & 255,this1 >> 8 & 255,this1 & 255];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var colorValue = max;
	var a = this1 >> 24 & 255;
	if(colorValue > threshold) {
		this1 = -1;
	} else {
		this1 = -16777216;
	}
	this1 &= 16777215;
	this1 |= (a > 255 ? 255 : a < 0 ? 0 : a) << 24;
	return this1;
};
vision_ds_Color._new = function(value) {
	if(value == null) {
		value = 0;
	}
	return value;
};
vision_ds_Color.getThis = function(this1) {
	return this1;
};
vision_ds_Color.validate = function(this1) {
};
vision_ds_Color.get_red = function(this1) {
	return this1 >> 16 & 255;
};
vision_ds_Color.get_green = function(this1) {
	return this1 >> 8 & 255;
};
vision_ds_Color.get_blue = function(this1) {
	return this1 & 255;
};
vision_ds_Color.get_alpha = function(this1) {
	return this1 >> 24 & 255;
};
vision_ds_Color.get_redFloat = function(this1) {
	return (this1 >> 16 & 255) / 255;
};
vision_ds_Color.get_greenFloat = function(this1) {
	return (this1 >> 8 & 255) / 255;
};
vision_ds_Color.get_blueFloat = function(this1) {
	return (this1 & 255) / 255;
};
vision_ds_Color.get_alphaFloat = function(this1) {
	return (this1 >> 24 & 255) / 255;
};
vision_ds_Color.set_red = function(this1,value) {
	this1 &= -16711681;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	return value;
};
vision_ds_Color.set_green = function(this1,value) {
	this1 &= -65281;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	return value;
};
vision_ds_Color.set_blue = function(this1,value) {
	this1 &= -256;
	this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	return value;
};
vision_ds_Color.set_alpha = function(this1,value) {
	this1 &= 16777215;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	return value;
};
vision_ds_Color.set_redFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= -16711681;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	return value;
};
vision_ds_Color.set_greenFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= -65281;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	return value;
};
vision_ds_Color.set_blueFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= -256;
	this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	return value;
};
vision_ds_Color.set_alphaFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= 16777215;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
	return value;
};
vision_ds_Color.get_cyan = function(this1) {
	return (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.get_magenta = function(this1) {
	return (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.get_yellow = function(this1) {
	return (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.get_black = function(this1) {
	return 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.set_cyan = function(this1,value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var value1 = (1 - value) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -16711681;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - Magenta) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -65281;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - Yellow) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -256;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	var value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
	return value;
};
vision_ds_Color.set_magenta = function(this1,value) {
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -16711681;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - value) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -65281;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - Yellow) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -256;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	var value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
	return value;
};
vision_ds_Color.set_yellow = function(this1,value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -16711681;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - Magenta) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -65281;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - value) * (1 - Black);
	var value2 = Math.round(value1 * 255);
	this1 &= -256;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	var value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
	return value;
};
vision_ds_Color.set_black = function(this1,value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - value);
	var value2 = Math.round(value1 * 255);
	this1 &= -16711681;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - Magenta) * (1 - value);
	var value2 = Math.round(value1 * 255);
	this1 &= -65281;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - Yellow) * (1 - value);
	var value2 = Math.round(value1 * 255);
	this1 &= -256;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	var value1 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
	return value;
};
vision_ds_Color.get_hue = function(this1) {
	var hueRad = Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	var hue = 0;
	if(hueRad != 0) {
		hue = 180 / Math.PI * Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	}
	if(hue < 0) {
		return hue + 360;
	} else {
		return hue;
	}
};
vision_ds_Color.get_brightness = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.get_saturation = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.get_lightness = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2;
};
vision_ds_Color.set_hue = function(this1,value) {
	var Brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = Brightness * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = Brightness - chroma;
	var Hue = value;
	var Chroma = chroma;
	Hue %= 360;
	var hueD = Hue / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	}
	return value;
};
vision_ds_Color.set_saturation = function(this1,value) {
	var Hue = vision_ds_Color.get_hue(this1);
	var Brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = Brightness * value;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	}
	return value;
};
vision_ds_Color.set_brightness = function(this1,value) {
	var Hue = vision_ds_Color.get_hue(this1);
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = value * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = value - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	}
	return value;
};
vision_ds_Color.set_lightness = function(this1,value) {
	var Hue = vision_ds_Color.get_hue(this1);
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 1:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 2:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 3:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 4:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	case 5:
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		var value1 = Math.round(Alpha1 * 255);
		this1 &= 16777215;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 24;
		break;
	}
	return value;
};
vision_ds_Color.set_rgb = function(this1,value) {
	this1 = this1 & -16777216 | value & 16777215;
	return value;
};
vision_ds_Color.get_rgb = function(this1) {
	return this1 & 16777215;
};
vision_ds_Color.maxColor = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.minColor = function(this1) {
	return Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
vision_ds_Color.boundChannel = function(this1,value) {
	if(value > 255) {
		return 255;
	} else if(value < 0) {
		return 0;
	} else {
		return value;
	}
};
vision_ds_Color.toString = function(this1) {
	var Alpha = true;
	var Prefix = true;
	if(Prefix == null) {
		Prefix = true;
	}
	if(Alpha == null) {
		Alpha = true;
	}
	var tmp = Alpha ? StringTools.hex(this1 >> 24 & 255,2) : "";
	return (Prefix ? "0x" : "") + tmp + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
};
vision_ds_Color.toInt = function(this1) {
	return this1;
};
vision_ds_Color.color_greater_than_color = function(lhs,rhs) {
	return lhs > rhs;
};
vision_ds_Color.color_greater_than_int = function(lhs,rhs) {
	return lhs > rhs;
};
vision_ds_Color.int_greater_than_color = function(lhs,rhs) {
	return lhs > rhs;
};
vision_ds_Color.color_greater_than_float = function(lhs,rhs) {
	return lhs > rhs;
};
vision_ds_Color.float_greater_than_color = function(lhs,rhs) {
	return lhs > rhs;
};
vision_ds_Color.color_greater_than_equal_color = function(lhs,rhs) {
	return lhs >= rhs;
};
vision_ds_Color.color_greater_than_equal_int = function(lhs,rhs) {
	return lhs >= rhs;
};
vision_ds_Color.int_greater_than_equal_color = function(lhs,rhs) {
	return lhs >= rhs;
};
vision_ds_Color.color_greater_than_equal_float = function(lhs,rhs) {
	return lhs >= rhs;
};
vision_ds_Color.float_greater_than_equal_color = function(lhs,rhs) {
	return lhs >= rhs;
};
vision_ds_Color.color_less_than_color = function(lhs,rhs) {
	return lhs < rhs;
};
vision_ds_Color.color_less_than_int = function(lhs,rhs) {
	return lhs < rhs;
};
vision_ds_Color.int_less_than_color = function(lhs,rhs) {
	return lhs < rhs;
};
vision_ds_Color.color_less_than_float = function(lhs,rhs) {
	return lhs < rhs;
};
vision_ds_Color.float_less_than_color = function(lhs,rhs) {
	return lhs < rhs;
};
vision_ds_Color.color_less_than_equal_color = function(lhs,rhs) {
	return lhs <= rhs;
};
vision_ds_Color.color_less_than_equal_int = function(lhs,rhs) {
	return lhs <= rhs;
};
vision_ds_Color.int_less_than_equal_color = function(lhs,rhs) {
	return lhs <= rhs;
};
vision_ds_Color.color_less_than_equal_float = function(lhs,rhs) {
	return lhs <= rhs;
};
vision_ds_Color.float_less_than_equal_color = function(lhs,rhs) {
	return lhs <= rhs;
};
vision_ds_Color.color_equal_color = function(lhs,rhs) {
	return lhs == rhs;
};
vision_ds_Color.color_equal_int = function(lhs,rhs) {
	return lhs == rhs;
};
vision_ds_Color.int_equal_color = function(lhs,rhs) {
	return lhs == rhs;
};
vision_ds_Color.color_equal_float = function(lhs,rhs) {
	return lhs == rhs;
};
vision_ds_Color.float_equal_color = function(lhs,rhs) {
	return lhs == rhs;
};
vision_ds_Color.color_not_equal_color = function(lhs,rhs) {
	return lhs != rhs;
};
vision_ds_Color.color_not_equal_int = function(lhs,rhs) {
	return lhs != rhs;
};
vision_ds_Color.int_not_equal_color = function(lhs,rhs) {
	return lhs != rhs;
};
vision_ds_Color.color_not_equal_float = function(lhs,rhs) {
	return lhs != rhs;
};
vision_ds_Color.float_not_equal_color = function(lhs,rhs) {
	return lhs != rhs;
};
vision_ds_Color.color_bitwise_and_color = function(lhs,rhs) {
	return lhs & rhs;
};
vision_ds_Color.color_bitwise_and_int = function(lhs,rhs) {
	return lhs & rhs;
};
vision_ds_Color.int_bitwise_and_color = function(lhs,rhs) {
	return lhs & rhs;
};
vision_ds_Color.color_bitwise_or_color = function(lhs,rhs) {
	return lhs | rhs;
};
vision_ds_Color.color_bitwise_or_int = function(lhs,rhs) {
	return lhs | rhs;
};
vision_ds_Color.int_bitwise_or_color = function(lhs,rhs) {
	return lhs | rhs;
};
vision_ds_Color.color_bitwise_xor_color = function(lhs,rhs) {
	return lhs ^ rhs;
};
vision_ds_Color.color_bitwise_xor_int = function(lhs,rhs) {
	return lhs ^ rhs;
};
vision_ds_Color.int_bitwise_xor_color = function(lhs,rhs) {
	return lhs ^ rhs;
};
vision_ds_Color.color_bitwise_left_shift_color = function(lhs,rhs) {
	return lhs << rhs;
};
vision_ds_Color.color_bitwise_left_shift_int = function(lhs,rhs) {
	return lhs << rhs;
};
vision_ds_Color.int_bitwise_left_shift_color = function(lhs,rhs) {
	return lhs << rhs;
};
vision_ds_Color.color_bitwise_right_shift_color = function(lhs,rhs) {
	return lhs >> rhs;
};
vision_ds_Color.color_bitwise_right_shift_int = function(lhs,rhs) {
	return lhs >> rhs;
};
vision_ds_Color.int_bitwise_right_shift_color = function(lhs,rhs) {
	return lhs >> rhs;
};
vision_ds_Color.color_bitwise_unsigned_right_shift_color = function(lhs,rhs) {
	return lhs >>> rhs;
};
vision_ds_Color.color_bitwise_unsigned_right_shift_int = function(lhs,rhs) {
	return lhs >>> rhs;
};
vision_ds_Color.int_bitwise_unsigned_right_shift_color = function(lhs,rhs) {
	return lhs >>> rhs;
};
var vision_ds_Image = {};
vision_ds_Image.__properties__ = {set_view:"set_view",get_view:"get_view",get_height:"get_height",get_width:"get_width",get_underlying:"get_underlying"};
vision_ds_Image.get_underlying = function(this1) {
	return this1;
};
vision_ds_Image.get_width = function(this1) {
	return this1.getUInt16(0);
};
vision_ds_Image.get_height = function(this1) {
	return Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
};
vision_ds_Image.get_view = function(this1) {
	var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
	var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
	var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
	var this2 = this1.b;
	var tmp = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
	return new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[tmp]);
};
vision_ds_Image.set_view = function(this1,view) {
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,view.x);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,view.y);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,view.width >= this1.getUInt16(0) ? 0 : view.width);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,view.height >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) ? 0 : view.width);
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = view.shape & 255;
	return view;
};
vision_ds_Image._new = function(width,height,color) {
	if(color == null) {
		color = 0;
	}
	var length = width * height * 4 + vision_ds_Image.OFFSET;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
	this1.fill(0,length,0);
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = color >> 24 & 255 & 255;
		this2.b[i + 1] = color >> 16 & 255 & 255;
		this2.b[i + 2] = color >> 8 & 255 & 255;
		this2.b[i + 3] = color & 255 & 255;
		i += 4;
	}
	return this2;
};
vision_ds_Image.getColorFromStartingBytePos = function(this1,position) {
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	return value;
};
vision_ds_Image.setColorFromStartingBytePos = function(this1,position,c) {
	position += vision_ds_Image.OFFSET;
	this1.b[position] = c >> 24 & 255 & 255;
	this1.b[position + 1] = c >> 16 & 255 & 255;
	this1.b[position + 2] = c >> 8 & 255 & 255;
	this1.b[position + 3] = c & 255 & 255;
	return c;
};
vision_ds_Image.getPixel = function(this1,x,y) {
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	return value;
};
vision_ds_Image.getSafePixel = function(this1,x,y) {
	var ma = this1.getUInt16(0) - 1;
	var values = [x,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [y,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y = min;
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	return value;
};
vision_ds_Image.getUnsafePixel = function(this1,x,y) {
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	return value;
};
vision_ds_Image.getFloatingPixel = function(this1,x,y) {
	var tmp;
	var x1 = Math.ceil(x);
	var y1 = Math.ceil(y);
	if(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
		var x1 = Math.floor(x);
		var y1 = Math.floor(y);
		tmp = !(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	} else {
		tmp = true;
	}
	if(tmp) {
		x = vision_tools_MathTools.boundFloat(x,0,this1.getUInt16(0) - 1);
		y = vision_tools_MathTools.boundFloat(y,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
	}
	var yFraction = y - (y | 0);
	var xFraction = x - (x | 0);
	var x1 = 1 - yFraction;
	var x2 = x | 0;
	var y1 = y | 0;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = (1 - xFraction) * (value >> 16 & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x3 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [y | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x3 >= 0 && y1 >= 0 && x3 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x3;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x3) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x3 = x1 * (x2 + xFraction * (value >> 16 & 255));
	var x1 = 1 - xFraction;
	var ma = this1.getUInt16(0) - 1;
	var values = [x | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x2 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = x1 * (value >> 16 & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x1 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var red = x3 + yFraction * (x2 + xFraction * (value >> 16 & 255)) | 0;
	var x1 = 1 - yFraction;
	var x2 = x | 0;
	var y1 = y | 0;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = (1 - xFraction) * (value >> 8 & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x3 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [y | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x3 >= 0 && y1 >= 0 && x3 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x3;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x3) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x3 = x1 * (x2 + xFraction * (value >> 8 & 255));
	var x1 = 1 - xFraction;
	var ma = this1.getUInt16(0) - 1;
	var values = [x | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x2 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = x1 * (value >> 8 & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x1 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var green = x3 + yFraction * (x2 + xFraction * (value >> 8 & 255)) | 0;
	var x1 = 1 - yFraction;
	var x2 = x | 0;
	var y1 = y | 0;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = (1 - xFraction) * (value & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x3 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [y | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x3 >= 0 && y1 >= 0 && x3 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x3;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x3) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x3 = x1 * (x2 + xFraction * (value & 255));
	var x1 = 1 - xFraction;
	var ma = this1.getUInt16(0) - 1;
	var values = [x | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x2 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = x1 * (value & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x1 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var blue = x3 + yFraction * (x2 + xFraction * (value & 255)) | 0;
	var x1 = 1 - yFraction;
	var x2 = x | 0;
	var y1 = y | 0;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = (1 - xFraction) * (value >> 24 & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x3 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [y | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x3 >= 0 && y1 >= 0 && x3 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x3;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x3) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x3 = x1 * (x2 + xFraction * (value >> 24 & 255));
	var x1 = 1 - xFraction;
	var ma = this1.getUInt16(0) - 1;
	var values = [x | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x2 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = x1 * (value >> 24 & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y = min;
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var alpha = x3 + yFraction * (x2 + xFraction * (value >> 24 & 255)) | 0;
	var Alpha = alpha;
	if(Alpha == null) {
		Alpha = 255;
	}
	var color = 0;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= -65281;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= -256;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_ds_Image.setPixel = function(this1,x,y,color) {
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var p_x = x;
					var p_y = y;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var p_x = x;
					var p_y = y;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color >> 24 & 255 & 255;
			this1.b[position + 1] = color >> 16 & 255 & 255;
			this1.b[position + 2] = color >> 8 & 255 & 255;
			this1.b[position + 3] = color & 255 & 255;
		}
	} else {
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = color >> 24 & 255 & 255;
		this1.b[position + 1] = color >> 16 & 255 & 255;
		this1.b[position + 2] = color >> 8 & 255 & 255;
		this1.b[position + 3] = color & 255 & 255;
	}
};
vision_ds_Image.setSafePixel = function(this1,x,y,color) {
	var ma = this1.getUInt16(0) - 1;
	var values = [x,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	x = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [y,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	y = min;
	if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var p_x = x;
					var p_y = y;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var p_x = x;
					var p_y = y;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color >> 24 & 255 & 255;
			this1.b[position + 1] = color >> 16 & 255 & 255;
			this1.b[position + 2] = color >> 8 & 255 & 255;
			this1.b[position + 3] = color & 255 & 255;
		}
	} else {
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = color >> 24 & 255 & 255;
		this1.b[position + 1] = color >> 16 & 255 & 255;
		this1.b[position + 2] = color >> 8 & 255 & 255;
		this1.b[position + 3] = color & 255 & 255;
	}
};
vision_ds_Image.setFloatingPixel = function(this1,x,y,color) {
	var tmp;
	var x1 = Math.ceil(x);
	var y1 = Math.ceil(y);
	if(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
		var x1 = Math.floor(x);
		var y1 = Math.floor(y);
		tmp = !(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	} else {
		tmp = true;
	}
	if(tmp) {
		vision_ds_Image.setFloatingPixel(this1,vision_tools_MathTools.boundFloat(x,0,this1.getUInt16(0) - 1),vision_tools_MathTools.boundFloat(y,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1),color);
		return;
	}
	var yFraction = y - (y | 0);
	var xFraction = x - (x | 0);
	var x1 = Math.floor(x);
	var y1 = Math.floor(y);
	var Red = (1 - xFraction + (1 - yFraction)) / 2 * ((color >> 16 & 255) / 255);
	var Green = (1 - xFraction + (1 - yFraction)) / 2 * ((color >> 8 & 255) / 255);
	var Blue = (1 - xFraction + (1 - yFraction)) / 2 * ((color & 255) / 255);
	var Alpha = (color >> 24 & 255) / 255;
	if(Alpha == null) {
		Alpha = 1;
	}
	var color1 = 0;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = Math.round(Red * 255);
	color1 &= -16711681;
	color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	color1 &= -65281;
	color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	color1 &= -256;
	color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha1 * 255);
	color1 &= 16777215;
	color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	var color2 = color1;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
				break;
			case 1:
				has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x2 = view.x + view.width / 2 - c;
					var y2 = view.y + view.height / 2;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var f1_x = x2;
					var f1_y = y2;
					var x2 = view.x + view.width / 2 + c;
					var y2 = view.y + view.height / 2;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var f2_x = x2;
					var f2_y = y2;
					var p_x = x1;
					var p_y = y1;
					var x2 = p_x - f1_x;
					var y2 = p_y - f1_y;
					var x3 = p_x - f2_x;
					var y3 = p_y - f2_y;
					has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x2 = view.x + view.width / 2;
					var y2 = view.y + view.height / 2 - c;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var f1_x = x2;
					var f1_y = y2;
					var x2 = view.x + view.width / 2;
					var y2 = view.y + view.height / 2 + c;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var f2_x = x2;
					var f2_y = y2;
					var p_x = x1;
					var p_y = y1;
					var x2 = p_x - f1_x;
					var y2 = p_y - f1_y;
					var x3 = p_x - f2_x;
					var y3 = p_y - f2_y;
					has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x2 = x1;
					var y2 = y1;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var point1_x = x2;
					var point1_y = y2;
					var x2 = view.x + view.width / 2;
					var y2 = view.y + view.height / 2;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var point2_x = x2;
					var point2_y = y2;
					var x2 = point2_x - point1_x;
					var y2 = point2_y - point1_y;
					has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color2 >> 24 & 255 & 255;
			this1.b[position + 1] = color2 >> 16 & 255 & 255;
			this1.b[position + 2] = color2 >> 8 & 255 & 255;
			this1.b[position + 3] = color2 & 255 & 255;
		}
	} else {
		var position = (y1 * this1.getUInt16(0) + x1) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = color2 >> 24 & 255 & 255;
		this1.b[position + 1] = color2 >> 16 & 255 & 255;
		this1.b[position + 2] = color2 >> 8 & 255 & 255;
		this1.b[position + 3] = color2 & 255 & 255;
	}
	if(y != (y | 0)) {
		var x1 = Math.floor(x);
		var y1 = Math.ceil(y);
		var Red = (1 - xFraction + yFraction) / 2 * ((color >> 16 & 255) / 255);
		var Green = (1 - xFraction + yFraction) / 2 * ((color >> 8 & 255) / 255);
		var Blue = (1 - xFraction + yFraction) / 2 * ((color & 255) / 255);
		var Alpha = (color >> 24 & 255) / 255;
		if(Alpha == null) {
			Alpha = 1;
		}
		var color1 = 0;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color1 &= -16711681;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color1 &= -65281;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color1 &= -256;
		color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color1 &= 16777215;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var color2 = color1;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x2 = view.x + view.width / 2 + c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f2_x = x2;
						var f2_y = y2;
						var p_x = x1;
						var p_y = y1;
						var x2 = p_x - f1_x;
						var y2 = p_y - f1_y;
						var x3 = p_x - f2_x;
						var y3 = p_y - f2_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2 - c;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2 + c;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f2_x = x2;
						var f2_y = y2;
						var p_x = x1;
						var p_y = y1;
						var x2 = p_x - f1_x;
						var y2 = p_y - f1_y;
						var x3 = p_x - f2_x;
						var y3 = p_y - f2_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x2 = x1;
						var y2 = y1;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var point1_x = x2;
						var point1_y = y2;
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var point2_x = x2;
						var point2_y = y2;
						var x2 = point2_x - point1_x;
						var y2 = point2_y - point1_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color2 >> 24 & 255 & 255;
				this1.b[position + 1] = color2 >> 16 & 255 & 255;
				this1.b[position + 2] = color2 >> 8 & 255 & 255;
				this1.b[position + 3] = color2 & 255 & 255;
			}
		} else {
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color2 >> 24 & 255 & 255;
			this1.b[position + 1] = color2 >> 16 & 255 & 255;
			this1.b[position + 2] = color2 >> 8 & 255 & 255;
			this1.b[position + 3] = color2 & 255 & 255;
		}
	}
	if(x != (x | 0)) {
		var x1 = Math.ceil(x);
		var y1 = Math.floor(y);
		var Red = (xFraction + (1 - yFraction)) / 2 * ((color >> 16 & 255) / 255);
		var Green = (xFraction + (1 - yFraction)) / 2 * ((color >> 8 & 255) / 255);
		var Blue = (xFraction + (1 - yFraction)) / 2 * ((color & 255) / 255);
		var Alpha = (color >> 24 & 255) / 255;
		if(Alpha == null) {
			Alpha = 1;
		}
		var color1 = 0;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color1 &= -16711681;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color1 &= -65281;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color1 &= -256;
		color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color1 &= 16777215;
		color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var color2 = color1;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x2 = view.x + view.width / 2 + c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f2_x = x2;
						var f2_y = y2;
						var p_x = x1;
						var p_y = y1;
						var x2 = p_x - f1_x;
						var y2 = p_y - f1_y;
						var x3 = p_x - f2_x;
						var y3 = p_y - f2_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2 - c;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2 + c;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f2_x = x2;
						var f2_y = y2;
						var p_x = x1;
						var p_y = y1;
						var x2 = p_x - f1_x;
						var y2 = p_y - f1_y;
						var x3 = p_x - f2_x;
						var y3 = p_y - f2_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x2 = x1;
						var y2 = y1;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var point1_x = x2;
						var point1_y = y2;
						var x2 = view.x + view.width / 2;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var point2_x = x2;
						var point2_y = y2;
						var x2 = point2_x - point1_x;
						var y2 = point2_y - point1_y;
						has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color2 >> 24 & 255 & 255;
				this1.b[position + 1] = color2 >> 16 & 255 & 255;
				this1.b[position + 2] = color2 >> 8 & 255 & 255;
				this1.b[position + 3] = color2 & 255 & 255;
			}
		} else {
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color2 >> 24 & 255 & 255;
			this1.b[position + 1] = color2 >> 16 & 255 & 255;
			this1.b[position + 2] = color2 >> 8 & 255 & 255;
			this1.b[position + 3] = color2 & 255 & 255;
		}
	}
	if(x != (x | 0) && y != (y | 0)) {
		var x1 = Math.ceil(x);
		var y1 = Math.ceil(y);
		var Red = (xFraction + yFraction) / 2 * ((color >> 16 & 255) / 255);
		var Green = (xFraction + yFraction) / 2 * ((color >> 8 & 255) / 255);
		var Blue = (xFraction + yFraction) / 2 * ((color & 255) / 255);
		var Alpha = (color >> 24 & 255) / 255;
		if(Alpha == null) {
			Alpha = 1;
		}
		var color = 0;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var color1 = color;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x = view.x + view.width / 2 - c;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f1_x = x;
						var f1_y = y;
						var x = view.x + view.width / 2 + c;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f2_x = x;
						var f2_y = y;
						var p_x = x1;
						var p_y = y1;
						var x = p_x - f1_x;
						var y = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2 - c;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f1_x = x;
						var f1_y = y;
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2 + c;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var f2_x = x;
						var f2_y = y;
						var p_x = x1;
						var p_y = y1;
						var x = p_x - f1_x;
						var y = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x = x1;
						var y = y1;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var point1_x = x;
						var point1_y = y;
						var x = view.x + view.width / 2;
						var y = view.y + view.height / 2;
						if(y == null) {
							y = 0;
						}
						if(x == null) {
							x = 0;
						}
						var point2_x = x;
						var point2_y = y;
						var x = point2_x - point1_x;
						var y = point2_y - point1_y;
						has = Math.sqrt(x * x + y * y) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color1 >> 24 & 255 & 255;
				this1.b[position + 1] = color1 >> 16 & 255 & 255;
				this1.b[position + 2] = color1 >> 8 & 255 & 255;
				this1.b[position + 3] = color1 & 255 & 255;
			}
		} else {
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color1 >> 24 & 255 & 255;
			this1.b[position + 1] = color1 >> 16 & 255 & 255;
			this1.b[position + 2] = color1 >> 8 & 255 & 255;
			this1.b[position + 3] = color1 & 255 & 255;
		}
	}
};
vision_ds_Image.setUnsafePixel = function(this1,x,y,color) {
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	this1.b[position] = color >> 24 & 255 & 255;
	this1.b[position + 1] = color >> 16 & 255 & 255;
	this1.b[position + 2] = color >> 8 & 255 & 255;
	this1.b[position + 3] = color & 255 & 255;
};
vision_ds_Image.paintPixel = function(this1,x,y,color) {
	if(x < 0 || x >= this1.getUInt16(0) || y < 0 || y >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if((color >> 24 & 255) / 255 == 1) {
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2 - c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2 + c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var p_x = x;
						var p_y = y;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 - c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 + c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var p_x = x;
						var p_y = y;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point1_x = x1;
						var point1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point2_x = x1;
						var point2_y = y1;
						var x1 = point2_x - point1_x;
						var y1 = point2_y - point1_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255 & 255;
				this1.b[position + 1] = color >> 16 & 255 & 255;
				this1.b[position + 2] = color >> 8 & 255 & 255;
				this1.b[position + 3] = color & 255 & 255;
			}
		} else {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color >> 24 & 255 & 255;
			this1.b[position + 1] = color >> 16 & 255 & 255;
			this1.b[position + 2] = color >> 8 & 255 & 255;
			this1.b[position + 3] = color & 255 & 255;
		}
	} else {
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var oldColor = value;
		var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
		if(Alpha == null) {
			Alpha = 1;
		}
		var color = 0;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var newColor = color;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2 - c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2 + c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var p_x = x;
						var p_y = y;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 - c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 + c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var p_x = x;
						var p_y = y;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point1_x = x1;
						var point1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point2_x = x1;
						var point2_y = y1;
						var x1 = point2_x - point1_x;
						var y1 = point2_y - point1_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = newColor >> 24 & 255 & 255;
				this1.b[position + 1] = newColor >> 16 & 255 & 255;
				this1.b[position + 2] = newColor >> 8 & 255 & 255;
				this1.b[position + 3] = newColor & 255 & 255;
			}
		} else {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = newColor >> 24 & 255 & 255;
			this1.b[position + 1] = newColor >> 16 & 255 & 255;
			this1.b[position + 2] = newColor >> 8 & 255 & 255;
			this1.b[position + 3] = newColor & 255 & 255;
		}
	}
};
vision_ds_Image.paintFloatingPixel = function(this1,x,y,color) {
	if(x < 0 || x >= this1.getUInt16(0) || y < 0 || y >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
		vision_ds_Image.paintFloatingPixel(this1,vision_tools_MathTools.boundFloat(x,0,this1.getUInt16(0) - 1),vision_tools_MathTools.boundFloat(y,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1),color);
	} else if(x == (x | 0) && y == (y | 0)) {
		var x1 = Math.floor(x);
		var y1 = Math.floor(y);
		if(x1 < 0 || x1 >= this1.getUInt16(0) || y1 < 0 || y1 >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if((color >> 24 & 255) / 255 == 1) {
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var p_x = x1;
							var p_y = y1;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 - c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 + c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var p_x = x1;
							var p_y = y1;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point1_x = x2;
							var point1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x2 = point2_x - point1_x;
							var y2 = point2_y - point1_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this1.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255 & 255;
					this1.b[position + 1] = color >> 16 & 255 & 255;
					this1.b[position + 2] = color >> 8 & 255 & 255;
					this1.b[position + 3] = color & 255 & 255;
				}
			} else {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255 & 255;
				this1.b[position + 1] = color >> 16 & 255 & 255;
				this1.b[position + 2] = color >> 8 & 255 & 255;
				this1.b[position + 3] = color & 255 & 255;
			}
		} else {
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * this1.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var oldColor = value;
			var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
			var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
			var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
			var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
			if(Alpha == null) {
				Alpha = 1;
			}
			var color1 = 0;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color1 &= -16711681;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color1 &= -65281;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color1 &= -256;
			color1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color1 &= 16777215;
			color1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var newColor = color1;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var p_x = x1;
							var p_y = y1;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 - c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 + c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var p_x = x1;
							var p_y = y1;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point1_x = x2;
							var point1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x2 = point2_x - point1_x;
							var y2 = point2_y - point1_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this1.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = newColor >> 24 & 255 & 255;
					this1.b[position + 1] = newColor >> 16 & 255 & 255;
					this1.b[position + 2] = newColor >> 8 & 255 & 255;
					this1.b[position + 3] = newColor & 255 & 255;
				}
			} else {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = newColor >> 24 & 255 & 255;
				this1.b[position + 1] = newColor >> 16 & 255 & 255;
				this1.b[position + 2] = newColor >> 8 & 255 & 255;
				this1.b[position + 3] = newColor & 255 & 255;
			}
		}
	} else {
		var yFraction = y - (y | 0);
		var xFraction = x - (x | 0);
		var ix = Math.floor(x);
		var iy = Math.floor(y);
		var _g = 0;
		var _g1 = [0,1];
		while(_g < _g1.length) {
			var posX = _g1[_g];
			++_g;
			if(posX == 1 && x == ix) {
				continue;
			}
			var _g2 = 0;
			var _g3 = [0,1];
			while(_g2 < _g3.length) {
				var posY = _g3[_g2];
				++_g2;
				if(posY == 1 && y == iy) {
					continue;
				}
				var x1 = ix + posX;
				var y1 = iy + posY;
				if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var oldColor = value;
				var value1 = ((posX == 0 ? 1 - xFraction : xFraction) + (posY == 0 ? 1 - yFraction : yFraction)) / 2;
				var value2 = Math.round(value1 * 255);
				color &= 16777215;
				color |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 24;
				var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
				var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
				var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
				var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
				if(Alpha == null) {
					Alpha = 1;
				}
				var color1 = 0;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value3 = Math.round(Red * 255);
				color1 &= -16711681;
				color1 |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 16;
				var value4 = Math.round(Green * 255);
				color1 &= -65281;
				color1 |= (value4 > 255 ? 255 : value4 < 0 ? 0 : value4) << 8;
				var value5 = Math.round(Blue * 255);
				color1 &= -256;
				color1 |= value5 > 255 ? 255 : value5 < 0 ? 0 : value5;
				var value6 = Math.round(Alpha1 * 255);
				color1 &= 16777215;
				color1 |= (value6 > 255 ? 255 : value6 < 0 ? 0 : value6) << 24;
				var newColor = color1;
				var x2 = ix + posX;
				var y2 = iy + posY;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x1 = x2;
					var this_y1 = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this2 = this1.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x2 < view.x + view.width && y2 < view.y + view.height && x2 >= view.x && y2 >= view.y;
							break;
						case 1:
							has = !(x2 < view.x + view.width && y2 < view.y + view.height && x2 >= view.x && y2 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x3 = view.x + view.width / 2 - c;
								var y3 = view.y + view.height / 2;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var f1_x = x3;
								var f1_y = y3;
								var x4 = view.x + view.width / 2 + c;
								var y4 = view.y + view.height / 2;
								if(y4 == null) {
									y4 = 0;
								}
								if(x4 == null) {
									x4 = 0;
								}
								var f2_x = x4;
								var f2_y = y4;
								var p_x = x2;
								var p_y = y2;
								var x5 = p_x - f1_x;
								var y5 = p_y - f1_y;
								var x6 = p_x - f2_x;
								var y6 = p_y - f2_y;
								has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 - c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f1_x1 = x7;
								var f1_y1 = y7;
								var x8 = view.x + view.width / 2;
								var y8 = view.y + view.height / 2 + c1;
								if(y8 == null) {
									y8 = 0;
								}
								if(x8 == null) {
									x8 = 0;
								}
								var f2_x1 = x8;
								var f2_y1 = y8;
								var p_x1 = x2;
								var p_y1 = y2;
								var x9 = p_x1 - f1_x1;
								var y9 = p_y1 - f1_y1;
								var x10 = p_x1 - f2_x1;
								var y10 = p_y1 - f2_y1;
								has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x11 = x2;
								var y11 = y2;
								if(y11 == null) {
									y11 = 0;
								}
								if(x11 == null) {
									x11 = 0;
								}
								var point1_x = x11;
								var point1_y = y11;
								var x12 = view.x + view.width / 2;
								var y12 = view.y + view.height / 2;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var point2_x = x12;
								var point2_y = y12;
								var x13 = point2_x - point1_x;
								var y13 = point2_y - point1_y;
								has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y2 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y2 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position1 = (y2 * this1.getUInt16(0) + x2) * 4;
						position1 += vision_ds_Image.OFFSET;
						this1.b[position1] = newColor >> 24 & 255 & 255;
						this1.b[position1 + 1] = newColor >> 16 & 255 & 255;
						this1.b[position1 + 2] = newColor >> 8 & 255 & 255;
						this1.b[position1 + 3] = newColor & 255 & 255;
					}
				} else {
					var position2 = (y2 * this1.getUInt16(0) + x2) * 4;
					position2 += vision_ds_Image.OFFSET;
					this1.b[position2] = newColor >> 24 & 255 & 255;
					this1.b[position2 + 1] = newColor >> 16 & 255 & 255;
					this1.b[position2 + 2] = newColor >> 8 & 255 & 255;
					this1.b[position2 + 3] = newColor & 255 & 255;
				}
			}
		}
	}
};
vision_ds_Image.paintSafePixel = function(this1,x,y,color) {
	var ma = this1.getUInt16(0) - 1;
	var values = [x,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [y,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y = min;
	if(x < 0 || x >= this1.getUInt16(0) || y < 0 || y >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if((color >> 24 & 255) / 255 == 1) {
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2 - c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2 + c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var p_x = x;
						var p_y = y;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 - c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 + c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var p_x = x;
						var p_y = y;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point1_x = x1;
						var point1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point2_x = x1;
						var point2_y = y1;
						var x1 = point2_x - point1_x;
						var y1 = point2_y - point1_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255 & 255;
				this1.b[position + 1] = color >> 16 & 255 & 255;
				this1.b[position + 2] = color >> 8 & 255 & 255;
				this1.b[position + 3] = color & 255 & 255;
			}
		} else {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color >> 24 & 255 & 255;
			this1.b[position + 1] = color >> 16 & 255 & 255;
			this1.b[position + 2] = color >> 8 & 255 & 255;
			this1.b[position + 3] = color & 255 & 255;
		}
	} else {
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var oldColor = value;
		var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
		var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
		if(Alpha == null) {
			Alpha = 1;
		}
		var color = 0;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var newColor = color;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2 - c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2 + c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var p_x = x;
						var p_y = y;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 - c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 + c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var p_x = x;
						var p_y = y;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point1_x = x1;
						var point1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point2_x = x1;
						var point2_y = y1;
						var x1 = point2_x - point1_x;
						var y1 = point2_y - point1_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = newColor >> 24 & 255 & 255;
				this1.b[position + 1] = newColor >> 16 & 255 & 255;
				this1.b[position + 2] = newColor >> 8 & 255 & 255;
				this1.b[position + 3] = newColor & 255 & 255;
			}
		} else {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = newColor >> 24 & 255 & 255;
			this1.b[position + 1] = newColor >> 16 & 255 & 255;
			this1.b[position + 2] = newColor >> 8 & 255 & 255;
			this1.b[position + 3] = newColor & 255 & 255;
		}
	}
};
vision_ds_Image.paintUnsafePixel = function(this1,x,y,color) {
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var oldColor = value;
	var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
	var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
	var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
	var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = 0;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 1;
	}
	var value = Math.round(Red * 255);
	color &= -16711681;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(Green * 255);
	color &= -65281;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(Blue * 255);
	color &= -256;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = Math.round(Alpha1 * 255);
	color &= 16777215;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
	var newColor = color;
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	this1.b[position] = newColor >> 24 & 255 & 255;
	this1.b[position + 1] = newColor >> 16 & 255 & 255;
	this1.b[position + 2] = newColor >> 8 & 255 & 255;
	this1.b[position + 3] = newColor & 255 & 255;
};
vision_ds_Image.hasPixel = function(this1,x,y) {
	if(x >= 0 && y >= 0 && x < this1.getUInt16(0)) {
		return y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
	} else {
		return false;
	}
};
vision_ds_Image.movePixel = function(this1,fromX,fromY,toX,toY,oldPixelResetColor) {
	if(!(fromX >= 0 && fromY >= 0 && fromX < this1.getUInt16(0) && fromY < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = fromX;
		var this_y = fromY;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (fromY * this1.getUInt16(0) + fromX) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var color = value;
	if(!(toX >= 0 && toY >= 0 && toX < this1.getUInt16(0) && toY < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = toX;
		var this_y = toY;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = toX >= 0 && toY >= 0 && toX < this1.getUInt16(0) && toY < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = toX < view.x + view.width && toY < view.y + view.height && toX >= view.x && toY >= view.y;
				break;
			case 1:
				has = !(toX < view.x + view.width && toY < view.y + view.height && toX >= view.x && toY >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x = view.x + view.width / 2 - c;
					var y = view.y + view.height / 2;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f1_x = x;
					var f1_y = y;
					var x = view.x + view.width / 2 + c;
					var y = view.y + view.height / 2;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f2_x = x;
					var f2_y = y;
					var p_x = toX;
					var p_y = toY;
					var x = p_x - f1_x;
					var y = p_y - f1_y;
					var x1 = p_x - f2_x;
					var y1 = p_y - f2_y;
					has = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x = view.x + view.width / 2;
					var y = view.y + view.height / 2 - c;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f1_x = x;
					var f1_y = y;
					var x = view.x + view.width / 2;
					var y = view.y + view.height / 2 + c;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f2_x = x;
					var f2_y = y;
					var p_x = toX;
					var p_y = toY;
					var x = p_x - f1_x;
					var y = p_y - f1_y;
					var x1 = p_x - f2_x;
					var y1 = p_y - f2_y;
					has = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x = toX;
					var y = toY;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var point1_x = x;
					var point1_y = y;
					var x = view.x + view.width / 2;
					var y = view.y + view.height / 2;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var point2_x = x;
					var point2_y = y;
					var x = point2_x - point1_x;
					var y = point2_y - point1_y;
					has = Math.sqrt(x * x + y * y) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(toX - view.x - view.width / 2) / (view.width / 2) + Math.abs(toY - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(toX - view.x - view.width / 2) / (view.width / 2) + Math.abs(toY - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (toY * this1.getUInt16(0) + toX) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color >> 24 & 255 & 255;
			this1.b[position + 1] = color >> 16 & 255 & 255;
			this1.b[position + 2] = color >> 8 & 255 & 255;
			this1.b[position + 3] = color & 255 & 255;
		}
	} else {
		var position = (toY * this1.getUInt16(0) + toX) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = color >> 24 & 255 & 255;
		this1.b[position + 1] = color >> 16 & 255 & 255;
		this1.b[position + 2] = color >> 8 & 255 & 255;
		this1.b[position + 3] = color & 255 & 255;
	}
	if(!(fromX >= 0 && fromY >= 0 && fromX < this1.getUInt16(0) && fromY < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = fromX;
		var this_y = fromY;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = fromX >= 0 && fromY >= 0 && fromX < this1.getUInt16(0) && fromY < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = fromX < view.x + view.width && fromY < view.y + view.height && fromX >= view.x && fromY >= view.y;
				break;
			case 1:
				has = !(fromX < view.x + view.width && fromY < view.y + view.height && fromX >= view.x && fromY >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x = view.x + view.width / 2 - c;
					var y = view.y + view.height / 2;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f1_x = x;
					var f1_y = y;
					var x = view.x + view.width / 2 + c;
					var y = view.y + view.height / 2;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f2_x = x;
					var f2_y = y;
					var p_x = fromX;
					var p_y = fromY;
					var x = p_x - f1_x;
					var y = p_y - f1_y;
					var x1 = p_x - f2_x;
					var y1 = p_y - f2_y;
					has = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x = view.x + view.width / 2;
					var y = view.y + view.height / 2 - c;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f1_x = x;
					var f1_y = y;
					var x = view.x + view.width / 2;
					var y = view.y + view.height / 2 + c;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var f2_x = x;
					var f2_y = y;
					var p_x = fromX;
					var p_y = fromY;
					var x = p_x - f1_x;
					var y = p_y - f1_y;
					var x1 = p_x - f2_x;
					var y1 = p_y - f2_y;
					has = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x = fromX;
					var y = fromY;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var point1_x = x;
					var point1_y = y;
					var x = view.x + view.width / 2;
					var y = view.y + view.height / 2;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					var point2_x = x;
					var point2_y = y;
					var x = point2_x - point1_x;
					var y = point2_y - point1_y;
					has = Math.sqrt(x * x + y * y) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(fromX - view.x - view.width / 2) / (view.width / 2) + Math.abs(fromY - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(fromX - view.x - view.width / 2) / (view.width / 2) + Math.abs(fromY - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (fromY * this1.getUInt16(0) + fromX) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = oldPixelResetColor >> 24 & 255 & 255;
			this1.b[position + 1] = oldPixelResetColor >> 16 & 255 & 255;
			this1.b[position + 2] = oldPixelResetColor >> 8 & 255 & 255;
			this1.b[position + 3] = oldPixelResetColor & 255 & 255;
		}
	} else {
		var position = (fromY * this1.getUInt16(0) + fromX) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = oldPixelResetColor >> 24 & 255 & 255;
		this1.b[position + 1] = oldPixelResetColor >> 16 & 255 & 255;
		this1.b[position + 2] = oldPixelResetColor >> 8 & 255 & 255;
		this1.b[position + 3] = oldPixelResetColor & 255 & 255;
	}
};
vision_ds_Image.moveSafePixel = function(this1,fromX,fromY,toX,toY,oldPixelResetColor) {
	var x = toX;
	var y = toY;
	var ma = this1.getUInt16(0) - 1;
	var values = [fromX,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x1 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [fromY,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var color = value;
	var ma = this1.getUInt16(0) - 1;
	var values = [x,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	x = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [y,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	y = min;
	if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var p_x = x;
					var p_y = y;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var p_x = x;
					var p_y = y;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color >> 24 & 255 & 255;
			this1.b[position + 1] = color >> 16 & 255 & 255;
			this1.b[position + 2] = color >> 8 & 255 & 255;
			this1.b[position + 3] = color & 255 & 255;
		}
	} else {
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = color >> 24 & 255 & 255;
		this1.b[position + 1] = color >> 16 & 255 & 255;
		this1.b[position + 2] = color >> 8 & 255 & 255;
		this1.b[position + 3] = color & 255 & 255;
	}
	var x = fromX;
	var y = fromY;
	var ma = this1.getUInt16(0) - 1;
	var values = [x,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	x = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [y,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	y = min;
	if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var p_x = x;
					var p_y = y;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var p_x = x;
					var p_y = y;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = oldPixelResetColor >> 24 & 255 & 255;
			this1.b[position + 1] = oldPixelResetColor >> 16 & 255 & 255;
			this1.b[position + 2] = oldPixelResetColor >> 8 & 255 & 255;
			this1.b[position + 3] = oldPixelResetColor & 255 & 255;
		}
	} else {
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = oldPixelResetColor >> 24 & 255 & 255;
		this1.b[position + 1] = oldPixelResetColor >> 16 & 255 & 255;
		this1.b[position + 2] = oldPixelResetColor >> 8 & 255 & 255;
		this1.b[position + 3] = oldPixelResetColor & 255 & 255;
	}
};
vision_ds_Image.moveFloatingPixel = function(this1,fromX,fromY,toX,toY,oldPixelResetColor) {
	var x = fromX;
	var y = fromY;
	var tmp;
	var x1 = Math.ceil(x);
	var y1 = Math.ceil(y);
	if(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
		var x1 = Math.floor(x);
		var y1 = Math.floor(y);
		tmp = !(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	} else {
		tmp = true;
	}
	if(tmp) {
		x = vision_tools_MathTools.boundFloat(x,0,this1.getUInt16(0) - 1);
		y = vision_tools_MathTools.boundFloat(y,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
	}
	var yFraction = y - (y | 0);
	var xFraction = x - (x | 0);
	var x1 = 1 - yFraction;
	var x2 = x | 0;
	var y1 = y | 0;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = (1 - xFraction) * (value >> 16 & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x3 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [y | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x3 >= 0 && y1 >= 0 && x3 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x3;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x3) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x3 = x1 * (x2 + xFraction * (value >> 16 & 255));
	var x1 = 1 - xFraction;
	var ma = this1.getUInt16(0) - 1;
	var values = [x | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x2 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = x1 * (value >> 16 & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x1 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var red = x3 + yFraction * (x2 + xFraction * (value >> 16 & 255)) | 0;
	var x1 = 1 - yFraction;
	var x2 = x | 0;
	var y1 = y | 0;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = (1 - xFraction) * (value >> 8 & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x3 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [y | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x3 >= 0 && y1 >= 0 && x3 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x3;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x3) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x3 = x1 * (x2 + xFraction * (value >> 8 & 255));
	var x1 = 1 - xFraction;
	var ma = this1.getUInt16(0) - 1;
	var values = [x | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x2 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = x1 * (value >> 8 & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x1 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var green = x3 + yFraction * (x2 + xFraction * (value >> 8 & 255)) | 0;
	var x1 = 1 - yFraction;
	var x2 = x | 0;
	var y1 = y | 0;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = (1 - xFraction) * (value & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x3 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [y | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x3 >= 0 && y1 >= 0 && x3 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x3;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x3) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x3 = x1 * (x2 + xFraction * (value & 255));
	var x1 = 1 - xFraction;
	var ma = this1.getUInt16(0) - 1;
	var values = [x | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x2 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = x1 * (value & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x1 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x1;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x1) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var blue = x3 + yFraction * (x2 + xFraction * (value & 255)) | 0;
	var x1 = 1 - yFraction;
	var x2 = x | 0;
	var y1 = y | 0;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = (1 - xFraction) * (value >> 24 & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x3 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [y | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x3 >= 0 && y1 >= 0 && x3 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x3;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x3) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x3 = x1 * (x2 + xFraction * (value >> 24 & 255));
	var x1 = 1 - xFraction;
	var ma = this1.getUInt16(0) - 1;
	var values = [x | 0,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x2 = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y1 = min;
	if(!(x2 >= 0 && y1 >= 0 && x2 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x2;
		var this_y = y1;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y1 * this1.getUInt16(0) + x2) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var x2 = x1 * (value >> 24 & 255);
	var ma = this1.getUInt16(0) - 1;
	var values = [(x | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var x = min;
	var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var values = [(y | 0) + 1,0];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var y = min;
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var alpha = x3 + yFraction * (x2 + xFraction * (value >> 24 & 255)) | 0;
	var Alpha = alpha;
	if(Alpha == null) {
		Alpha = 255;
	}
	var color = 0;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= -65281;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= -256;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	var color1 = color;
	var tmp;
	var x = Math.ceil(toX);
	var y = Math.ceil(toY);
	if(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
		var x = Math.floor(toX);
		var y = Math.floor(toY);
		tmp = !(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	} else {
		tmp = true;
	}
	if(tmp) {
		var this2 = this1;
		var x = vision_tools_MathTools.boundFloat(toX,0,this1.getUInt16(0) - 1);
		var y = vision_tools_MathTools.boundFloat(toY,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
		var tmp;
		var x1 = Math.ceil(x);
		var y1 = Math.ceil(y);
		if(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4))) {
			var x1 = Math.floor(x);
			var y1 = Math.floor(y);
			tmp = !(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)));
		} else {
			tmp = true;
		}
		if(tmp) {
			vision_ds_Image.setFloatingPixel(this2,vision_tools_MathTools.boundFloat(x,0,this2.getUInt16(0) - 1),vision_tools_MathTools.boundFloat(y,0,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1),color1);
		} else {
			var yFraction = y - (y | 0);
			var xFraction = x - (x | 0);
			var x1 = Math.floor(x);
			var y1 = Math.floor(y);
			var Red = (1 - xFraction + (1 - yFraction)) / 2 * ((color1 >> 16 & 255) / 255);
			var Green = (1 - xFraction + (1 - yFraction)) / 2 * ((color1 >> 8 & 255) / 255);
			var Blue = (1 - xFraction + (1 - yFraction)) / 2 * ((color1 & 255) / 255);
			var Alpha = (color1 >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var color = 0;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color &= -16711681;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color &= -65281;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color &= -256;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color &= 16777215;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color2 = color;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this3 = this2.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var p_x = x1;
							var p_y = y1;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 - c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 + c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var p_x = x1;
							var p_y = y1;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point1_x = x2;
							var point1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x2 = point2_x - point1_x;
							var y2 = point2_y - point1_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color2 >> 24 & 255 & 255;
					this2.b[position + 1] = color2 >> 16 & 255 & 255;
					this2.b[position + 2] = color2 >> 8 & 255 & 255;
					this2.b[position + 3] = color2 & 255 & 255;
				}
			} else {
				var position = (y1 * this2.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this2.b[position] = color2 >> 24 & 255 & 255;
				this2.b[position + 1] = color2 >> 16 & 255 & 255;
				this2.b[position + 2] = color2 >> 8 & 255 & 255;
				this2.b[position + 3] = color2 & 255 & 255;
			}
			if(y != (y | 0)) {
				var x1 = Math.floor(x);
				var y1 = Math.ceil(y);
				var Red = (1 - xFraction + yFraction) / 2 * ((color1 >> 16 & 255) / 255);
				var Green = (1 - xFraction + yFraction) / 2 * ((color1 >> 8 & 255) / 255);
				var Blue = (1 - xFraction + yFraction) / 2 * ((color1 & 255) / 255);
				var Alpha = (color1 >> 24 & 255) / 255;
				if(Alpha == null) {
					Alpha = 1;
				}
				var color = 0;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value = Math.round(Red * 255);
				color &= -16711681;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
				var value = Math.round(Green * 255);
				color &= -65281;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
				var value = Math.round(Blue * 255);
				color &= -256;
				color |= value > 255 ? 255 : value < 0 ? 0 : value;
				var value = Math.round(Alpha1 * 255);
				color &= 16777215;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
				var color2 = color;
				if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
				} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this3 = this2.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var p_x = x1;
								var p_y = y1;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var p_x = x1;
								var p_y = y1;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position = (y1 * this2.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						this2.b[position] = color2 >> 24 & 255 & 255;
						this2.b[position + 1] = color2 >> 16 & 255 & 255;
						this2.b[position + 2] = color2 >> 8 & 255 & 255;
						this2.b[position + 3] = color2 & 255 & 255;
					}
				} else {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color2 >> 24 & 255 & 255;
					this2.b[position + 1] = color2 >> 16 & 255 & 255;
					this2.b[position + 2] = color2 >> 8 & 255 & 255;
					this2.b[position + 3] = color2 & 255 & 255;
				}
			}
			if(x != (x | 0)) {
				var x1 = Math.ceil(x);
				var y1 = Math.floor(y);
				var Red = (xFraction + (1 - yFraction)) / 2 * ((color1 >> 16 & 255) / 255);
				var Green = (xFraction + (1 - yFraction)) / 2 * ((color1 >> 8 & 255) / 255);
				var Blue = (xFraction + (1 - yFraction)) / 2 * ((color1 & 255) / 255);
				var Alpha = (color1 >> 24 & 255) / 255;
				if(Alpha == null) {
					Alpha = 1;
				}
				var color = 0;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value = Math.round(Red * 255);
				color &= -16711681;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
				var value = Math.round(Green * 255);
				color &= -65281;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
				var value = Math.round(Blue * 255);
				color &= -256;
				color |= value > 255 ? 255 : value < 0 ? 0 : value;
				var value = Math.round(Alpha1 * 255);
				color &= 16777215;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
				var color2 = color;
				if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
				} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this3 = this2.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var p_x = x1;
								var p_y = y1;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var p_x = x1;
								var p_y = y1;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position = (y1 * this2.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						this2.b[position] = color2 >> 24 & 255 & 255;
						this2.b[position + 1] = color2 >> 16 & 255 & 255;
						this2.b[position + 2] = color2 >> 8 & 255 & 255;
						this2.b[position + 3] = color2 & 255 & 255;
					}
				} else {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color2 >> 24 & 255 & 255;
					this2.b[position + 1] = color2 >> 16 & 255 & 255;
					this2.b[position + 2] = color2 >> 8 & 255 & 255;
					this2.b[position + 3] = color2 & 255 & 255;
				}
			}
			if(x != (x | 0) && y != (y | 0)) {
				var x1 = Math.ceil(x);
				var y1 = Math.ceil(y);
				var Red = (xFraction + yFraction) / 2 * ((color1 >> 16 & 255) / 255);
				var Green = (xFraction + yFraction) / 2 * ((color1 >> 8 & 255) / 255);
				var Blue = (xFraction + yFraction) / 2 * ((color1 & 255) / 255);
				var Alpha = (color1 >> 24 & 255) / 255;
				if(Alpha == null) {
					Alpha = 1;
				}
				var color = 0;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value = Math.round(Red * 255);
				color &= -16711681;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
				var value = Math.round(Green * 255);
				color &= -65281;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
				var value = Math.round(Blue * 255);
				color &= -256;
				color |= value > 255 ? 255 : value < 0 ? 0 : value;
				var value = Math.round(Alpha1 * 255);
				color &= 16777215;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
				var color2 = color;
				if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
				} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this3 = this2.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x = view.x + view.width / 2 - c;
								var y = view.y + view.height / 2;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f1_x = x;
								var f1_y = y;
								var x = view.x + view.width / 2 + c;
								var y = view.y + view.height / 2;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f2_x = x;
								var f2_y = y;
								var p_x = x1;
								var p_y = y1;
								var x = p_x - f1_x;
								var y = p_y - f1_y;
								var x2 = p_x - f2_x;
								var y2 = p_y - f2_y;
								has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x = view.x + view.width / 2;
								var y = view.y + view.height / 2 - c;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f1_x = x;
								var f1_y = y;
								var x = view.x + view.width / 2;
								var y = view.y + view.height / 2 + c;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f2_x = x;
								var f2_y = y;
								var p_x = x1;
								var p_y = y1;
								var x = p_x - f1_x;
								var y = p_y - f1_y;
								var x2 = p_x - f2_x;
								var y2 = p_y - f2_y;
								has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x = x1;
								var y = y1;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var point1_x = x;
								var point1_y = y;
								var x = view.x + view.width / 2;
								var y = view.y + view.height / 2;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var point2_x = x;
								var point2_y = y;
								var x = point2_x - point1_x;
								var y = point2_y - point1_y;
								has = Math.sqrt(x * x + y * y) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position = (y1 * this2.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						this2.b[position] = color2 >> 24 & 255 & 255;
						this2.b[position + 1] = color2 >> 16 & 255 & 255;
						this2.b[position + 2] = color2 >> 8 & 255 & 255;
						this2.b[position + 3] = color2 & 255 & 255;
					}
				} else {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color2 >> 24 & 255 & 255;
					this2.b[position + 1] = color2 >> 16 & 255 & 255;
					this2.b[position + 2] = color2 >> 8 & 255 & 255;
					this2.b[position + 3] = color2 & 255 & 255;
				}
			}
		}
	} else {
		var yFraction = toY - (toY | 0);
		var xFraction = toX - (toX | 0);
		var x = Math.floor(toX);
		var y = Math.floor(toY);
		var Red = (1 - xFraction + (1 - yFraction)) / 2 * ((color1 >> 16 & 255) / 255);
		var Green = (1 - xFraction + (1 - yFraction)) / 2 * ((color1 >> 8 & 255) / 255);
		var Blue = (1 - xFraction + (1 - yFraction)) / 2 * ((color1 & 255) / 255);
		var Alpha = (color1 >> 24 & 255) / 255;
		if(Alpha == null) {
			Alpha = 1;
		}
		var color = 0;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var color2 = color;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2 - c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2 + c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var p_x = x;
						var p_y = y;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 - c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 + c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var p_x = x;
						var p_y = y;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point1_x = x1;
						var point1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point2_x = x1;
						var point2_y = y1;
						var x1 = point2_x - point1_x;
						var y1 = point2_y - point1_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color2 >> 24 & 255 & 255;
				this1.b[position + 1] = color2 >> 16 & 255 & 255;
				this1.b[position + 2] = color2 >> 8 & 255 & 255;
				this1.b[position + 3] = color2 & 255 & 255;
			}
		} else {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color2 >> 24 & 255 & 255;
			this1.b[position + 1] = color2 >> 16 & 255 & 255;
			this1.b[position + 2] = color2 >> 8 & 255 & 255;
			this1.b[position + 3] = color2 & 255 & 255;
		}
		if(toY != (toY | 0)) {
			var x = Math.floor(toX);
			var y = Math.ceil(toY);
			var Red = (1 - xFraction + yFraction) / 2 * ((color1 >> 16 & 255) / 255);
			var Green = (1 - xFraction + yFraction) / 2 * ((color1 >> 8 & 255) / 255);
			var Blue = (1 - xFraction + yFraction) / 2 * ((color1 & 255) / 255);
			var Alpha = (color1 >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var color = 0;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color &= -16711681;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color &= -65281;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color &= -256;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color &= 16777215;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color2 = color;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var p_x = x;
							var p_y = y;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 - c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 + c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var p_x = x;
							var p_y = y;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point2_x = x1;
							var point2_y = y1;
							var x1 = point2_x - point1_x;
							var y1 = point2_y - point1_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color2 >> 24 & 255 & 255;
					this1.b[position + 1] = color2 >> 16 & 255 & 255;
					this1.b[position + 2] = color2 >> 8 & 255 & 255;
					this1.b[position + 3] = color2 & 255 & 255;
				}
			} else {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color2 >> 24 & 255 & 255;
				this1.b[position + 1] = color2 >> 16 & 255 & 255;
				this1.b[position + 2] = color2 >> 8 & 255 & 255;
				this1.b[position + 3] = color2 & 255 & 255;
			}
		}
		if(toX != (toX | 0)) {
			var x = Math.ceil(toX);
			var y = Math.floor(toY);
			var Red = (xFraction + (1 - yFraction)) / 2 * ((color1 >> 16 & 255) / 255);
			var Green = (xFraction + (1 - yFraction)) / 2 * ((color1 >> 8 & 255) / 255);
			var Blue = (xFraction + (1 - yFraction)) / 2 * ((color1 & 255) / 255);
			var Alpha = (color1 >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var color = 0;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color &= -16711681;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color &= -65281;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color &= -256;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color &= 16777215;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color2 = color;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var p_x = x;
							var p_y = y;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 - c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 + c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var p_x = x;
							var p_y = y;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point2_x = x1;
							var point2_y = y1;
							var x1 = point2_x - point1_x;
							var y1 = point2_y - point1_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color2 >> 24 & 255 & 255;
					this1.b[position + 1] = color2 >> 16 & 255 & 255;
					this1.b[position + 2] = color2 >> 8 & 255 & 255;
					this1.b[position + 3] = color2 & 255 & 255;
				}
			} else {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color2 >> 24 & 255 & 255;
				this1.b[position + 1] = color2 >> 16 & 255 & 255;
				this1.b[position + 2] = color2 >> 8 & 255 & 255;
				this1.b[position + 3] = color2 & 255 & 255;
			}
		}
		if(toX != (toX | 0) && toY != (toY | 0)) {
			var x = Math.ceil(toX);
			var y = Math.ceil(toY);
			var Red = (xFraction + yFraction) / 2 * ((color1 >> 16 & 255) / 255);
			var Green = (xFraction + yFraction) / 2 * ((color1 >> 8 & 255) / 255);
			var Blue = (xFraction + yFraction) / 2 * ((color1 & 255) / 255);
			var Alpha = (color1 >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var color = 0;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color &= -16711681;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color &= -65281;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color &= -256;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color &= 16777215;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color1 = color;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var p_x = x;
							var p_y = y;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 - c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 + c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var p_x = x;
							var p_y = y;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point2_x = x1;
							var point2_y = y1;
							var x1 = point2_x - point1_x;
							var y1 = point2_y - point1_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color1 >> 24 & 255 & 255;
					this1.b[position + 1] = color1 >> 16 & 255 & 255;
					this1.b[position + 2] = color1 >> 8 & 255 & 255;
					this1.b[position + 3] = color1 & 255 & 255;
				}
			} else {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color1 >> 24 & 255 & 255;
				this1.b[position + 1] = color1 >> 16 & 255 & 255;
				this1.b[position + 2] = color1 >> 8 & 255 & 255;
				this1.b[position + 3] = color1 & 255 & 255;
			}
		}
	}
	var tmp;
	var x = Math.ceil(fromX);
	var y = Math.ceil(fromY);
	if(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
		var x = Math.floor(fromX);
		var y = Math.floor(fromY);
		tmp = !(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
	} else {
		tmp = true;
	}
	if(tmp) {
		var this2 = this1;
		var x = vision_tools_MathTools.boundFloat(fromX,0,this1.getUInt16(0) - 1);
		var y = vision_tools_MathTools.boundFloat(fromY,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
		var tmp;
		var x1 = Math.ceil(x);
		var y1 = Math.ceil(y);
		if(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4))) {
			var x1 = Math.floor(x);
			var y1 = Math.floor(y);
			tmp = !(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)));
		} else {
			tmp = true;
		}
		if(tmp) {
			vision_ds_Image.setFloatingPixel(this2,vision_tools_MathTools.boundFloat(x,0,this2.getUInt16(0) - 1),vision_tools_MathTools.boundFloat(y,0,Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)) - 1),oldPixelResetColor);
		} else {
			var yFraction = y - (y | 0);
			var xFraction = x - (x | 0);
			var x1 = Math.floor(x);
			var y1 = Math.floor(y);
			var Red = (1 - xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
			var Green = (1 - xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
			var Blue = (1 - xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor & 255) / 255);
			var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var color = 0;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color &= -16711681;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color &= -65281;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color &= -256;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color &= 16777215;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color1 = color;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
			} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this3 = this2.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var p_x = x1;
							var p_y = y1;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 - c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2 + c;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var p_x = x1;
							var p_y = y1;
							var x2 = p_x - f1_x;
							var y2 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y3 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x2 = x1;
							var y2 = y1;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point1_x = x2;
							var point1_y = y2;
							var x2 = view.x + view.width / 2;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var point2_x = x2;
							var point2_y = y2;
							var x2 = point2_x - point1_x;
							var y2 = point2_y - point1_y;
							has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color1 >> 24 & 255 & 255;
					this2.b[position + 1] = color1 >> 16 & 255 & 255;
					this2.b[position + 2] = color1 >> 8 & 255 & 255;
					this2.b[position + 3] = color1 & 255 & 255;
				}
			} else {
				var position = (y1 * this2.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this2.b[position] = color1 >> 24 & 255 & 255;
				this2.b[position + 1] = color1 >> 16 & 255 & 255;
				this2.b[position + 2] = color1 >> 8 & 255 & 255;
				this2.b[position + 3] = color1 & 255 & 255;
			}
			if(y != (y | 0)) {
				var x1 = Math.floor(x);
				var y1 = Math.ceil(y);
				var Red = (1 - xFraction + yFraction) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
				var Green = (1 - xFraction + yFraction) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
				var Blue = (1 - xFraction + yFraction) / 2 * ((oldPixelResetColor & 255) / 255);
				var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
				if(Alpha == null) {
					Alpha = 1;
				}
				var color = 0;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value = Math.round(Red * 255);
				color &= -16711681;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
				var value = Math.round(Green * 255);
				color &= -65281;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
				var value = Math.round(Blue * 255);
				color &= -256;
				color |= value > 255 ? 255 : value < 0 ? 0 : value;
				var value = Math.round(Alpha1 * 255);
				color &= 16777215;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
				var color1 = color;
				if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
				} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this3 = this2.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var p_x = x1;
								var p_y = y1;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var p_x = x1;
								var p_y = y1;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position = (y1 * this2.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						this2.b[position] = color1 >> 24 & 255 & 255;
						this2.b[position + 1] = color1 >> 16 & 255 & 255;
						this2.b[position + 2] = color1 >> 8 & 255 & 255;
						this2.b[position + 3] = color1 & 255 & 255;
					}
				} else {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color1 >> 24 & 255 & 255;
					this2.b[position + 1] = color1 >> 16 & 255 & 255;
					this2.b[position + 2] = color1 >> 8 & 255 & 255;
					this2.b[position + 3] = color1 & 255 & 255;
				}
			}
			if(x != (x | 0)) {
				var x1 = Math.ceil(x);
				var y1 = Math.floor(y);
				var Red = (xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
				var Green = (xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
				var Blue = (xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor & 255) / 255);
				var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
				if(Alpha == null) {
					Alpha = 1;
				}
				var color = 0;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value = Math.round(Red * 255);
				color &= -16711681;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
				var value = Math.round(Green * 255);
				color &= -65281;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
				var value = Math.round(Blue * 255);
				color &= -256;
				color |= value > 255 ? 255 : value < 0 ? 0 : value;
				var value = Math.round(Alpha1 * 255);
				color &= 16777215;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
				var color1 = color;
				if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
				} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this3 = this2.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var p_x = x1;
								var p_y = y1;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 - c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2 + c;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var p_x = x1;
								var p_y = y1;
								var x2 = p_x - f1_x;
								var y2 = p_y - f1_y;
								var x3 = p_x - f2_x;
								var y3 = p_y - f2_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) + Math.sqrt(x3 * x3 + y3 * y3) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x2 = x1;
								var y2 = y1;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point1_x = x2;
								var point1_y = y2;
								var x2 = view.x + view.width / 2;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var point2_x = x2;
								var point2_y = y2;
								var x2 = point2_x - point1_x;
								var y2 = point2_y - point1_y;
								has = Math.sqrt(x2 * x2 + y2 * y2) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position = (y1 * this2.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						this2.b[position] = color1 >> 24 & 255 & 255;
						this2.b[position + 1] = color1 >> 16 & 255 & 255;
						this2.b[position + 2] = color1 >> 8 & 255 & 255;
						this2.b[position + 3] = color1 & 255 & 255;
					}
				} else {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color1 >> 24 & 255 & 255;
					this2.b[position + 1] = color1 >> 16 & 255 & 255;
					this2.b[position + 2] = color1 >> 8 & 255 & 255;
					this2.b[position + 3] = color1 & 255 & 255;
				}
			}
			if(x != (x | 0) && y != (y | 0)) {
				var x1 = Math.ceil(x);
				var y1 = Math.ceil(y);
				var Red = (xFraction + yFraction) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
				var Green = (xFraction + yFraction) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
				var Blue = (xFraction + yFraction) / 2 * ((oldPixelResetColor & 255) / 255);
				var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
				if(Alpha == null) {
					Alpha = 1;
				}
				var color = 0;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value = Math.round(Red * 255);
				color &= -16711681;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
				var value = Math.round(Green * 255);
				color &= -65281;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
				var value = Math.round(Blue * 255);
				color &= -256;
				color |= value > 255 ? 255 : value < 0 ? 0 : value;
				var value = Math.round(Alpha1 * 255);
				color &= 16777215;
				color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
				var color1 = color;
				if(!(x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this2,new vision_ds_Point2D(this_x,this_y)));
				} else if(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this2.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x1 >= 0 && y1 >= 0 && x1 < this2.getUInt16(0) && y1 < Math.ceil((this2.length - vision_ds_Image.OFFSET) / (this2.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g = this2.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this3 = this2.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,this2.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
							break;
						case 1:
							has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x = view.x + view.width / 2 - c;
								var y = view.y + view.height / 2;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f1_x = x;
								var f1_y = y;
								var x = view.x + view.width / 2 + c;
								var y = view.y + view.height / 2;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f2_x = x;
								var f2_y = y;
								var p_x = x1;
								var p_y = y1;
								var x = p_x - f1_x;
								var y = p_y - f1_y;
								var x2 = p_x - f2_x;
								var y2 = p_y - f2_y;
								has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a = view.height / 2;
								var b = view.width / 2;
								var c = Math.sqrt(a * a - b * b);
								var x = view.x + view.width / 2;
								var y = view.y + view.height / 2 - c;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f1_x = x;
								var f1_y = y;
								var x = view.x + view.width / 2;
								var y = view.y + view.height / 2 + c;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var f2_x = x;
								var f2_y = y;
								var p_x = x1;
								var p_y = y1;
								var x = p_x - f1_x;
								var y = p_y - f1_y;
								var x2 = p_x - f2_x;
								var y2 = p_y - f2_y;
								has = Math.sqrt(x * x + y * y) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x = x1;
								var y = y1;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var point1_x = x;
								var point1_y = y;
								var x = view.x + view.width / 2;
								var y = view.y + view.height / 2;
								if(y == null) {
									y = 0;
								}
								if(x == null) {
									x = 0;
								}
								var point2_x = x;
								var point2_y = y;
								var x = point2_x - point1_x;
								var y = point2_y - point1_y;
								has = Math.sqrt(x * x + y * y) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position = (y1 * this2.getUInt16(0) + x1) * 4;
						position += vision_ds_Image.OFFSET;
						this2.b[position] = color1 >> 24 & 255 & 255;
						this2.b[position + 1] = color1 >> 16 & 255 & 255;
						this2.b[position + 2] = color1 >> 8 & 255 & 255;
						this2.b[position + 3] = color1 & 255 & 255;
					}
				} else {
					var position = (y1 * this2.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this2.b[position] = color1 >> 24 & 255 & 255;
					this2.b[position + 1] = color1 >> 16 & 255 & 255;
					this2.b[position + 2] = color1 >> 8 & 255 & 255;
					this2.b[position + 3] = color1 & 255 & 255;
				}
			}
		}
	} else {
		var yFraction = fromY - (fromY | 0);
		var xFraction = fromX - (fromX | 0);
		var x = Math.floor(fromX);
		var y = Math.floor(fromY);
		var Red = (1 - xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
		var Green = (1 - xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
		var Blue = (1 - xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor & 255) / 255);
		var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
		if(Alpha == null) {
			Alpha = 1;
		}
		var color = 0;
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 1;
		}
		var value = Math.round(Red * 255);
		color &= -16711681;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(Green * 255);
		color &= -65281;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(Blue * 255);
		color &= -256;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		var value = Math.round(Alpha1 * 255);
		color &= 16777215;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
		var color1 = color;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2 - c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2 + c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var p_x = x;
						var p_y = y;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a = view.height / 2;
						var b = view.width / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 - c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2 + c;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f2_x = x1;
						var f2_y = y1;
						var p_x = x;
						var p_y = y;
						var x1 = p_x - f1_x;
						var y1 = p_y - f1_y;
						var x2 = p_x - f2_x;
						var y2 = p_y - f2_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x1 = x;
						var y1 = y;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point1_x = x1;
						var point1_y = y1;
						var x1 = view.x + view.width / 2;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var point2_x = x1;
						var point2_y = y1;
						var x1 = point2_x - point1_x;
						var y1 = point2_y - point1_y;
						has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color1 >> 24 & 255 & 255;
				this1.b[position + 1] = color1 >> 16 & 255 & 255;
				this1.b[position + 2] = color1 >> 8 & 255 & 255;
				this1.b[position + 3] = color1 & 255 & 255;
			}
		} else {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = color1 >> 24 & 255 & 255;
			this1.b[position + 1] = color1 >> 16 & 255 & 255;
			this1.b[position + 2] = color1 >> 8 & 255 & 255;
			this1.b[position + 3] = color1 & 255 & 255;
		}
		if(fromY != (fromY | 0)) {
			var x = Math.floor(fromX);
			var y = Math.ceil(fromY);
			var Red = (1 - xFraction + yFraction) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
			var Green = (1 - xFraction + yFraction) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
			var Blue = (1 - xFraction + yFraction) / 2 * ((oldPixelResetColor & 255) / 255);
			var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var color = 0;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color &= -16711681;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color &= -65281;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color &= -256;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color &= 16777215;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color1 = color;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var p_x = x;
							var p_y = y;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 - c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 + c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var p_x = x;
							var p_y = y;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point2_x = x1;
							var point2_y = y1;
							var x1 = point2_x - point1_x;
							var y1 = point2_y - point1_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color1 >> 24 & 255 & 255;
					this1.b[position + 1] = color1 >> 16 & 255 & 255;
					this1.b[position + 2] = color1 >> 8 & 255 & 255;
					this1.b[position + 3] = color1 & 255 & 255;
				}
			} else {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color1 >> 24 & 255 & 255;
				this1.b[position + 1] = color1 >> 16 & 255 & 255;
				this1.b[position + 2] = color1 >> 8 & 255 & 255;
				this1.b[position + 3] = color1 & 255 & 255;
			}
		}
		if(fromX != (fromX | 0)) {
			var x = Math.ceil(fromX);
			var y = Math.floor(fromY);
			var Red = (xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
			var Green = (xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
			var Blue = (xFraction + (1 - yFraction)) / 2 * ((oldPixelResetColor & 255) / 255);
			var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var color = 0;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color &= -16711681;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color &= -65281;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color &= -256;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color &= 16777215;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color1 = color;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var p_x = x;
							var p_y = y;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 - c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 + c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var p_x = x;
							var p_y = y;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point2_x = x1;
							var point2_y = y1;
							var x1 = point2_x - point1_x;
							var y1 = point2_y - point1_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color1 >> 24 & 255 & 255;
					this1.b[position + 1] = color1 >> 16 & 255 & 255;
					this1.b[position + 2] = color1 >> 8 & 255 & 255;
					this1.b[position + 3] = color1 & 255 & 255;
				}
			} else {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color1 >> 24 & 255 & 255;
				this1.b[position + 1] = color1 >> 16 & 255 & 255;
				this1.b[position + 2] = color1 >> 8 & 255 & 255;
				this1.b[position + 3] = color1 & 255 & 255;
			}
		}
		if(fromX != (fromX | 0) && fromY != (fromY | 0)) {
			var x = Math.ceil(fromX);
			var y = Math.ceil(fromY);
			var Red = (xFraction + yFraction) / 2 * ((oldPixelResetColor >> 16 & 255) / 255);
			var Green = (xFraction + yFraction) / 2 * ((oldPixelResetColor >> 8 & 255) / 255);
			var Blue = (xFraction + yFraction) / 2 * ((oldPixelResetColor & 255) / 255);
			var Alpha = (oldPixelResetColor >> 24 & 255) / 255;
			if(Alpha == null) {
				Alpha = 1;
			}
			var color = 0;
			var Alpha1 = Alpha;
			if(Alpha1 == null) {
				Alpha1 = 1;
			}
			var value = Math.round(Red * 255);
			color &= -16711681;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(Green * 255);
			color &= -65281;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(Blue * 255);
			color &= -256;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			var value = Math.round(Alpha1 * 255);
			color &= 16777215;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 24;
			var color1 = color;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var p_x = x;
							var p_y = y;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 - c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 + c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var p_x = x;
							var p_y = y;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point2_x = x1;
							var point2_y = y1;
							var x1 = point2_x - point1_x;
							var y1 = point2_y - point1_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color1 >> 24 & 255 & 255;
					this1.b[position + 1] = color1 >> 16 & 255 & 255;
					this1.b[position + 2] = color1 >> 8 & 255 & 255;
					this1.b[position + 3] = color1 & 255 & 255;
				}
			} else {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color1 >> 24 & 255 & 255;
				this1.b[position + 1] = color1 >> 16 & 255 & 255;
				this1.b[position + 2] = color1 >> 8 & 255 & 255;
				this1.b[position + 3] = color1 & 255 & 255;
			}
		}
	}
};
vision_ds_Image.moveUnsafePixel = function(this1,fromX,fromY,toX,toY,oldPixelResetColor) {
	var position = (fromY * this1.getUInt16(0) + fromX) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var color = value;
	var position = (toY * this1.getUInt16(0) + toX) * 4;
	position += vision_ds_Image.OFFSET;
	this1.b[position] = color >> 24 & 255 & 255;
	this1.b[position + 1] = color >> 16 & 255 & 255;
	this1.b[position + 2] = color >> 8 & 255 & 255;
	this1.b[position + 3] = color & 255 & 255;
	var position = (fromY * this1.getUInt16(0) + fromX) * 4;
	position += vision_ds_Image.OFFSET;
	this1.b[position] = oldPixelResetColor >> 24 & 255 & 255;
	this1.b[position + 1] = oldPixelResetColor >> 16 & 255 & 255;
	this1.b[position + 2] = oldPixelResetColor >> 8 & 255 & 255;
	this1.b[position + 3] = oldPixelResetColor & 255 & 255;
};
vision_ds_Image.copyPixelFrom = function(this1,image,x,y) {
	if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * image.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var c = value;
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var this2 = this1.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c1 = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c1;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c1;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var p_x = x;
					var p_y = y;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c1 = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c1;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c1;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var p_x = x;
					var p_y = y;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			this1.b[position] = c >> 24 & 255 & 255;
			this1.b[position + 1] = c >> 16 & 255 & 255;
			this1.b[position + 2] = c >> 8 & 255 & 255;
			this1.b[position + 3] = c & 255 & 255;
		}
	} else {
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		this1.b[position] = c >> 24 & 255 & 255;
		this1.b[position + 1] = c >> 16 & 255 & 255;
		this1.b[position + 2] = c >> 8 & 255 & 255;
		this1.b[position + 3] = c & 255 & 255;
	}
	return c;
};
vision_ds_Image.copyPixelTo = function(this1,image,x,y) {
	var image1 = this1;
	if(!(x >= 0 && y >= 0 && x < image1.getUInt16(0) && y < Math.ceil((image1.length - vision_ds_Image.OFFSET) / (image1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * image1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = image1.b[position] << 24 | image1.b[position + 1] << 16 | image1.b[position + 2] << 8 | image1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var c = value;
	if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
	} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
		var v = null;
		var tmp;
		if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
			tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		} else {
			var has = false;
			var view;
			if(v != null) {
				view = v;
			} else {
				var _g = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
				var _g1 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
				var _g2 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
				var image1 = image.b;
				var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
				view = new vision_ds_ImageView(_g,_g1,_g2,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
			}
			switch(view.shape) {
			case 0:
				has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
				break;
			case 1:
				has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
				break;
			case 2:case 3:
				if(view.width > view.height) {
					var a = view.width / 2;
					var b = view.height / 2;
					var c1 = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2 - c1;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2 + c1;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var p_x = x;
					var p_y = y;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
					if(view.shape == 3) {
						has = !has;
					}
				} else if(view.height > view.width) {
					var a = view.height / 2;
					var b = view.width / 2;
					var c1 = Math.sqrt(a * a - b * b);
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 - c1;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f1_x = x1;
					var f1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2 + c1;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var f2_x = x1;
					var f2_y = y1;
					var p_x = x;
					var p_y = y;
					var x1 = p_x - f1_x;
					var y1 = p_y - f1_y;
					var x2 = p_x - f2_x;
					var y2 = p_y - f2_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
					if(view.shape == 3) {
						has = !has;
					}
				} else {
					var x1 = x;
					var y1 = y;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point1_x = x1;
					var point1_y = y1;
					var x1 = view.x + view.width / 2;
					var y1 = view.y + view.height / 2;
					if(y1 == null) {
						y1 = 0;
					}
					if(x1 == null) {
						x1 = 0;
					}
					var point2_x = x1;
					var point2_y = y1;
					var x1 = point2_x - point1_x;
					var y1 = point2_y - point1_y;
					has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
					if(view.shape == 3) {
						has = !has;
					}
				}
				break;
			case 4:
				has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
				break;
			case 5:
				has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
				break;
			}
			tmp = has;
		}
		if(tmp) {
			var position = (y * image.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			image.b[position] = c >> 24 & 255 & 255;
			image.b[position + 1] = c >> 16 & 255 & 255;
			image.b[position + 2] = c >> 8 & 255 & 255;
			image.b[position + 3] = c & 255 & 255;
		}
	} else {
		var position = (y * image.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		image.b[position] = c >> 24 & 255 & 255;
		image.b[position + 1] = c >> 16 & 255 & 255;
		image.b[position + 2] = c >> 8 & 255 & 255;
		image.b[position + 3] = c & 255 & 255;
	}
	return c;
};
vision_ds_Image.getImagePortion = function(this1,rect) {
	var width = rect.width;
	var color = 0;
	if(color == null) {
		color = 0;
	}
	var length = width * rect.height * 4 + vision_ds_Image.OFFSET;
	var this2 = new haxe_io_Bytes(new ArrayBuffer(length));
	this2.fill(0,length,0);
	var this3 = this2;
	this3.setUInt16(0,width);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,0);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,0);
	this3.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this3.length) {
		this3.b[i] = color >> 24 & 255 & 255;
		this3.b[i + 1] = color >> 16 & 255 & 255;
		this3.b[i + 2] = color >> 8 & 255 & 255;
		this3.b[i + 3] = color & 255 & 255;
		i += 4;
	}
	var subImage = this3;
	var _g = rect.x;
	var _g1 = rect.x + rect.width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = rect.y;
		var _g3 = rect.y + rect.height;
		while(_g2 < _g3) {
			var y = _g2++;
			var x1 = x - rect.x;
			var y1 = y - rect.y;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var color = value;
			if(!(x1 >= 0 && y1 >= 0 && x1 < subImage.getUInt16(0) && y1 < Math.ceil((subImage.length - vision_ds_Image.OFFSET) / (subImage.getUInt16(0) * 4)))) {
				var this_x1 = x1;
				var this_y1 = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(subImage,new vision_ds_Point2D(this_x1,this_y1)));
			} else if(subImage.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || subImage.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(subImage.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || subImage.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < subImage.getUInt16(0) && y1 < Math.ceil((subImage.length - vision_ds_Image.OFFSET) / (subImage.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = subImage.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var subImage1 = subImage.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,subImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),subImage1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var p_x = x1;
							var p_y = y1;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var p_x1 = x1;
							var p_y1 = y1;
							var x8 = p_x1 - f1_x1;
							var y8 = p_y1 - f1_y1;
							var x9 = p_x1 - f2_x1;
							var y9 = p_y1 - f2_y1;
							has = Math.sqrt(x8 * x8 + y8 * y8) + Math.sqrt(x9 * x9 + y9 * y9) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x10 = x1;
							var y10 = y1;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point1_x = x10;
							var point1_y = y10;
							var x11 = view.x + view.width / 2;
							var y11 = view.y + view.height / 2;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point2_x = x11;
							var point2_y = y11;
							var x12 = point2_x - point1_x;
							var y12 = point2_y - point1_y;
							has = Math.sqrt(x12 * x12 + y12 * y12) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position1 = (y1 * subImage.getUInt16(0) + x1) * 4;
					position1 += vision_ds_Image.OFFSET;
					subImage.b[position1] = color >> 24 & 255 & 255;
					subImage.b[position1 + 1] = color >> 16 & 255 & 255;
					subImage.b[position1 + 2] = color >> 8 & 255 & 255;
					subImage.b[position1 + 3] = color & 255 & 255;
				}
			} else {
				var position2 = (y1 * subImage.getUInt16(0) + x1) * 4;
				position2 += vision_ds_Image.OFFSET;
				subImage.b[position2] = color >> 24 & 255 & 255;
				subImage.b[position2 + 1] = color >> 16 & 255 & 255;
				subImage.b[position2 + 2] = color >> 8 & 255 & 255;
				subImage.b[position2 + 3] = color & 255 & 255;
			}
		}
	}
	return subImage;
};
vision_ds_Image.setImagePortion = function(this1,rect,image) {
	var _g = rect.x;
	var _g1 = rect.x + rect.width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = rect.y;
		var _g3 = rect.y + rect.height;
		while(_g2 < _g3) {
			var y = _g2++;
			var x1 = x - rect.x;
			var y1 = y - rect.y;
			if(!(x1 >= 0 && y1 >= 0 && x1 < image.getUInt16(0) && y1 < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y1 * image.getUInt16(0) + x1) * 4;
			position += vision_ds_Image.OFFSET;
			var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var color = value;
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x1 = x;
				var this_y1 = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var p_x = x;
							var p_y = y;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var p_x1 = x;
							var p_y1 = y;
							var x8 = p_x1 - f1_x1;
							var y8 = p_y1 - f1_y1;
							var x9 = p_x1 - f2_x1;
							var y9 = p_y1 - f2_y1;
							has = Math.sqrt(x8 * x8 + y8 * y8) + Math.sqrt(x9 * x9 + y9 * y9) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x10 = x;
							var y10 = y;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point1_x = x10;
							var point1_y = y10;
							var x11 = view.x + view.width / 2;
							var y11 = view.y + view.height / 2;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point2_x = x11;
							var point2_y = y11;
							var x12 = point2_x - point1_x;
							var y12 = point2_y - point1_y;
							has = Math.sqrt(x12 * x12 + y12 * y12) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position1 = (y * this1.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					this1.b[position1] = color >> 24 & 255 & 255;
					this1.b[position1 + 1] = color >> 16 & 255 & 255;
					this1.b[position1 + 2] = color >> 8 & 255 & 255;
					this1.b[position1 + 3] = color & 255 & 255;
				}
			} else {
				var position2 = (y * this1.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color >> 24 & 255 & 255;
				this1.b[position2 + 1] = color >> 16 & 255 & 255;
				this1.b[position2 + 2] = color >> 8 & 255 & 255;
				this1.b[position2 + 3] = color & 255 & 255;
			}
		}
	}
};
vision_ds_Image.drawLine = function(this1,x1,y1,x2,y2,color) {
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	var safety = 0;
	while(safety++ < 10000) {
		var x = x1;
		var y = y1;
		var ma = this1.getUInt16(0) - 1;
		var values = [x,0];
		var max = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] > max) {
				max = values[i];
			}
		}
		var values1 = [max,ma];
		var min = values1[0];
		var _g2 = 0;
		var _g3 = values1.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			if(values1[i1] < min) {
				min = values1[i1];
			}
		}
		x = min;
		var ma1 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
		var values2 = [y,0];
		var max1 = values2[0];
		var _g4 = 0;
		var _g5 = values2.length;
		while(_g4 < _g5) {
			var i2 = _g4++;
			if(values2[i2] > max1) {
				max1 = values2[i2];
			}
		}
		var values3 = [max1,ma1];
		var min1 = values3[0];
		var _g6 = 0;
		var _g7 = values3.length;
		while(_g6 < _g7) {
			var i3 = _g6++;
			if(values3[i3] < min1) {
				min1 = values3[i3];
			}
		}
		y = min1;
		if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g8,_g9,_g10,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x3 = view.x + view.width / 2 - c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f1_x = x3;
						var f1_y = y3;
						var x4 = view.x + view.width / 2 + c;
						var y4 = view.y + view.height / 2;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var f2_x = x4;
						var f2_y = y4;
						var p_x = x;
						var p_y = y;
						var x5 = p_x - f1_x;
						var y5 = p_y - f1_y;
						var x6 = p_x - f2_x;
						var y6 = p_y - f2_y;
						has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x7 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 - c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f1_x1 = x7;
						var f1_y1 = y7;
						var x8 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 + c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f2_x1 = x8;
						var f2_y1 = y8;
						var p_x1 = x;
						var p_y1 = y;
						var x9 = p_x1 - f1_x1;
						var y9 = p_y1 - f1_y1;
						var x10 = p_x1 - f2_x1;
						var y10 = p_y1 - f2_y1;
						has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x11 = x;
						var y11 = y;
						if(y11 == null) {
							y11 = 0;
						}
						if(x11 == null) {
							x11 = 0;
						}
						var point1_x = x11;
						var point1_y = y11;
						var x12 = view.x + view.width / 2;
						var y12 = view.y + view.height / 2;
						if(y12 == null) {
							y12 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point2_x = x12;
						var point2_y = y12;
						var x13 = point2_x - point1_x;
						var y13 = point2_y - point1_y;
						has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255 & 255;
				this1.b[position + 1] = color >> 16 & 255 & 255;
				this1.b[position + 2] = color >> 8 & 255 & 255;
				this1.b[position + 3] = color & 255 & 255;
			}
		} else {
			var position1 = (y * this1.getUInt16(0) + x) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255 & 255;
			this1.b[position1 + 1] = color >> 16 & 255 & 255;
			this1.b[position1 + 2] = color >> 8 & 255 & 255;
			this1.b[position1 + 3] = color & 255 & 255;
		}
		if(x1 == x2 && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
};
vision_ds_Image.drawRay2D = function(this1,line,color) {
	var px = line.point.x;
	var py = line.point.y;
	var x = (0 - (px > 0 ? py - line.slope * px : py + line.slope * px)) / line.slope;
	var y = 0;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p_x = x;
	var p_y = y;
	var p1_x = p_x | 0;
	var p1_y = p_y | 0;
	var y = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
	var px = line.point.x;
	var py = line.point.y;
	var x = (y - (px > 0 ? py - line.slope * px : py + line.slope * px)) / line.slope;
	var y1 = y;
	if(y1 == null) {
		y1 = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p_x = x;
	var p_y = y1;
	var p2_x = p_x | 0;
	var p2_y = p_y | 0;
	var x1 = p1_x;
	var y1 = p1_y;
	var x2 = p2_x;
	var y2 = p2_y;
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	var safetyNet = 0;
	while(safetyNet++ <= 10000) {
		if(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x = view.x + view.width / 2 - c;
							var y = view.y + view.height / 2;
							if(y == null) {
								y = 0;
							}
							if(x == null) {
								x = 0;
							}
							var f1_x = x;
							var f1_y = y;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var p_x = x1;
							var p_y = y1;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var p_x1 = x1;
							var p_y1 = y1;
							var x8 = p_x1 - f1_x1;
							var y8 = p_y1 - f1_y1;
							var x9 = p_x1 - f2_x1;
							var y9 = p_y1 - f2_y1;
							has = Math.sqrt(x8 * x8 + y8 * y8) + Math.sqrt(x9 * x9 + y9 * y9) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x10 = x1;
							var y10 = y1;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point1_x = x10;
							var point1_y = y10;
							var x11 = view.x + view.width / 2;
							var y11 = view.y + view.height / 2;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point2_x = x11;
							var point2_y = y11;
							var x12 = point2_x - point1_x;
							var y12 = point2_y - point1_y;
							has = Math.sqrt(x12 * x12 + y12 * y12) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this1.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255 & 255;
					this1.b[position + 1] = color >> 16 & 255 & 255;
					this1.b[position + 2] = color >> 8 & 255 & 255;
					this1.b[position + 3] = color & 255 & 255;
				}
			} else {
				var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255 & 255;
				this1.b[position1 + 1] = color >> 16 & 255 & 255;
				this1.b[position1 + 2] = color >> 8 & 255 & 255;
				this1.b[position1 + 3] = color & 255 & 255;
			}
		}
		if(x1 == x2 && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
};
vision_ds_Image.drawLine2D = function(this1,line,color) {
	var p = line.start;
	var p1_x = p.x | 0;
	var p1_y = p.y | 0;
	var p = line.end;
	var p2_x = p.x | 0;
	var p2_y = p.y | 0;
	var x1 = p1_x;
	var y1 = p1_y;
	var x2 = p2_x;
	var y2 = p2_y;
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	while(true) {
		if(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x = view.x + view.width / 2 - c;
							var y = view.y + view.height / 2;
							if(y == null) {
								y = 0;
							}
							if(x == null) {
								x = 0;
							}
							var f1_x = x;
							var f1_y = y;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var p_x = x1;
							var p_y = y1;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var p_x1 = x1;
							var p_y1 = y1;
							var x8 = p_x1 - f1_x1;
							var y8 = p_y1 - f1_y1;
							var x9 = p_x1 - f2_x1;
							var y9 = p_y1 - f2_y1;
							has = Math.sqrt(x8 * x8 + y8 * y8) + Math.sqrt(x9 * x9 + y9 * y9) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x10 = x1;
							var y10 = y1;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point1_x = x10;
							var point1_y = y10;
							var x11 = view.x + view.width / 2;
							var y11 = view.y + view.height / 2;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point2_x = x11;
							var point2_y = y11;
							var x12 = point2_x - point1_x;
							var y12 = point2_y - point1_y;
							has = Math.sqrt(x12 * x12 + y12 * y12) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this1.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255 & 255;
					this1.b[position + 1] = color >> 16 & 255 & 255;
					this1.b[position + 2] = color >> 8 & 255 & 255;
					this1.b[position + 3] = color & 255 & 255;
				}
			} else {
				var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255 & 255;
				this1.b[position1 + 1] = color >> 16 & 255 & 255;
				this1.b[position1 + 2] = color >> 8 & 255 & 255;
				this1.b[position1 + 3] = color & 255 & 255;
			}
		}
		if(x1 == x2 && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
};
vision_ds_Image.fillRect = function(this1,x,y,width,height,color) {
	var _g = x;
	var _g1 = x + width;
	while(_g < _g1) {
		var X = _g++;
		var _g2 = y;
		var _g3 = y + height;
		while(_g2 < _g3) {
			var Y = _g2++;
			if(!(X >= 0 && Y >= 0 && X < this1.getUInt16(0) && Y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = X;
				var this_y = Y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = X >= 0 && Y >= 0 && X < this1.getUInt16(0) && Y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = X < view.x + view.width && Y < view.y + view.height && X >= view.x && Y >= view.y;
						break;
					case 1:
						has = !(X < view.x + view.width && Y < view.y + view.height && X >= view.x && Y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x == null) {
								x = 0;
							}
							var f1_x = x;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y2;
							var p_x = X;
							var p_y = Y;
							var x2 = p_x - f1_x;
							var y3 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y4 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y3 * y3) + Math.sqrt(x3 * x3 + y4 * y4) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x4 = view.x + view.width / 2;
							var y5 = view.y + view.height / 2 - c1;
							if(y5 == null) {
								y5 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var f1_x1 = x4;
							var f1_y1 = y5;
							var x5 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 + c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f2_x1 = x5;
							var f2_y1 = y6;
							var p_x1 = X;
							var p_y1 = Y;
							var x6 = p_x1 - f1_x1;
							var y7 = p_y1 - f1_y1;
							var x7 = p_x1 - f2_x1;
							var y8 = p_y1 - f2_y1;
							has = Math.sqrt(x6 * x6 + y7 * y7) + Math.sqrt(x7 * x7 + y8 * y8) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x8 = X;
							var y9 = Y;
							if(y9 == null) {
								y9 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var point1_x = x8;
							var point1_y = y9;
							var x9 = view.x + view.width / 2;
							var y10 = view.y + view.height / 2;
							if(y10 == null) {
								y10 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var point2_x = x9;
							var point2_y = y10;
							var x10 = point2_x - point1_x;
							var y11 = point2_y - point1_y;
							has = Math.sqrt(x10 * x10 + y11 * y11) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(X - view.x - view.width / 2) / (view.width / 2) + Math.abs(Y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(X - view.x - view.width / 2) / (view.width / 2) + Math.abs(Y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (Y * this1.getUInt16(0) + X) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255 & 255;
					this1.b[position + 1] = color >> 16 & 255 & 255;
					this1.b[position + 2] = color >> 8 & 255 & 255;
					this1.b[position + 3] = color & 255 & 255;
				}
			} else {
				var position1 = (Y * this1.getUInt16(0) + X) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255 & 255;
				this1.b[position1 + 1] = color >> 16 & 255 & 255;
				this1.b[position1 + 2] = color >> 8 & 255 & 255;
				this1.b[position1 + 3] = color & 255 & 255;
			}
		}
	}
};
vision_ds_Image.drawRect = function(this1,x,y,width,height,color) {
	var x1 = x;
	var y1 = y;
	var x2 = x + width;
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y ? 1 : -1;
	var err = dx - dy;
	var safety = 0;
	while(safety++ < 10000) {
		var x3 = x1;
		var y2 = y1;
		var ma = this1.getUInt16(0) - 1;
		var values = [x3,0];
		var max = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] > max) {
				max = values[i];
			}
		}
		var values1 = [max,ma];
		var min = values1[0];
		var _g2 = 0;
		var _g3 = values1.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			if(values1[i1] < min) {
				min = values1[i1];
			}
		}
		x3 = min;
		var ma1 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
		var values2 = [y2,0];
		var max1 = values2[0];
		var _g4 = 0;
		var _g5 = values2.length;
		while(_g4 < _g5) {
			var i2 = _g4++;
			if(values2[i2] > max1) {
				max1 = values2[i2];
			}
		}
		var values3 = [max1,ma1];
		var min1 = values3[0];
		var _g6 = 0;
		var _g7 = values3.length;
		while(_g6 < _g7) {
			var i3 = _g6++;
			if(values3[i3] < min1) {
				min1 = values3[i3];
			}
		}
		y2 = min1;
		if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x3 >= 0 && y2 >= 0 && x3 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g8,_g9,_g10,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x3 < view.x + view.width && y2 < view.y + view.height && x3 >= view.x && y2 >= view.y;
					break;
				case 1:
					has = !(x3 < view.x + view.width && y2 < view.y + view.height && x3 >= view.x && y2 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x4 = view.x + view.width / 2 - c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var f1_x = x4;
						var f1_y = y3;
						var x5 = view.x + view.width / 2 + c;
						var y4 = view.y + view.height / 2;
						if(y4 == null) {
							y4 = 0;
						}
						if(x5 == null) {
							x5 = 0;
						}
						var f2_x = x5;
						var f2_y = y4;
						var p_x = x3;
						var p_y = y2;
						var x6 = p_x - f1_x;
						var y5 = p_y - f1_y;
						var x7 = p_x - f2_x;
						var y6 = p_y - f2_y;
						has = Math.sqrt(x6 * x6 + y5 * y5) + Math.sqrt(x7 * x7 + y6 * y6) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x8 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 - c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f1_x1 = x8;
						var f1_y1 = y7;
						var x9 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 + c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var f2_x1 = x9;
						var f2_y1 = y8;
						var p_x1 = x3;
						var p_y1 = y2;
						var x10 = p_x1 - f1_x1;
						var y9 = p_y1 - f1_y1;
						var x11 = p_x1 - f2_x1;
						var y10 = p_y1 - f2_y1;
						has = Math.sqrt(x10 * x10 + y9 * y9) + Math.sqrt(x11 * x11 + y10 * y10) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x12 = x3;
						var y11 = y2;
						if(y11 == null) {
							y11 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point1_x = x12;
						var point1_y = y11;
						var x13 = view.x + view.width / 2;
						var y12 = view.y + view.height / 2;
						if(y12 == null) {
							y12 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point2_x = x13;
						var point2_y = y12;
						var x14 = point2_x - point1_x;
						var y13 = point2_y - point1_y;
						has = Math.sqrt(x14 * x14 + y13 * y13) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x3 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y2 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x3 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y2 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y2 * this1.getUInt16(0) + x3) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255 & 255;
				this1.b[position + 1] = color >> 16 & 255 & 255;
				this1.b[position + 2] = color >> 8 & 255 & 255;
				this1.b[position + 3] = color & 255 & 255;
			}
		} else {
			var position1 = (y2 * this1.getUInt16(0) + x3) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255 & 255;
			this1.b[position1 + 1] = color >> 16 & 255 & 255;
			this1.b[position1 + 2] = color >> 8 & 255 & 255;
			this1.b[position1 + 3] = color & 255 & 255;
		}
		if(x1 == x2 && y1 == y) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
	var x1 = x + width;
	var y1 = y;
	var x2 = x + width;
	var y2 = y + height;
	var dx = Math.abs(x2 - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x2 ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	var safety = 0;
	while(safety++ < 10000) {
		var x3 = x1;
		var y3 = y1;
		var ma = this1.getUInt16(0) - 1;
		var values = [x3,0];
		var max = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] > max) {
				max = values[i];
			}
		}
		var values1 = [max,ma];
		var min = values1[0];
		var _g2 = 0;
		var _g3 = values1.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			if(values1[i1] < min) {
				min = values1[i1];
			}
		}
		x3 = min;
		var ma1 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
		var values2 = [y3,0];
		var max1 = values2[0];
		var _g4 = 0;
		var _g5 = values2.length;
		while(_g4 < _g5) {
			var i2 = _g4++;
			if(values2[i2] > max1) {
				max1 = values2[i2];
			}
		}
		var values3 = [max1,ma1];
		var min1 = values3[0];
		var _g6 = 0;
		var _g7 = values3.length;
		while(_g6 < _g7) {
			var i3 = _g6++;
			if(values3[i3] < min1) {
				min1 = values3[i3];
			}
		}
		y3 = min1;
		if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g8,_g9,_g10,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x3 < view.x + view.width && y3 < view.y + view.height && x3 >= view.x && y3 >= view.y;
					break;
				case 1:
					has = !(x3 < view.x + view.width && y3 < view.y + view.height && x3 >= view.x && y3 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x4 = view.x + view.width / 2 - c;
						var y4 = view.y + view.height / 2;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var f1_x = x4;
						var f1_y = y4;
						var x5 = view.x + view.width / 2 + c;
						var y5 = view.y + view.height / 2;
						if(y5 == null) {
							y5 = 0;
						}
						if(x5 == null) {
							x5 = 0;
						}
						var f2_x = x5;
						var f2_y = y5;
						var p_x = x3;
						var p_y = y3;
						var x6 = p_x - f1_x;
						var y6 = p_y - f1_y;
						var x7 = p_x - f2_x;
						var y7 = p_y - f2_y;
						has = Math.sqrt(x6 * x6 + y6 * y6) + Math.sqrt(x7 * x7 + y7 * y7) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x8 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 - c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f1_x1 = x8;
						var f1_y1 = y8;
						var x9 = view.x + view.width / 2;
						var y9 = view.y + view.height / 2 + c1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var f2_x1 = x9;
						var f2_y1 = y9;
						var p_x1 = x3;
						var p_y1 = y3;
						var x10 = p_x1 - f1_x1;
						var y10 = p_y1 - f1_y1;
						var x11 = p_x1 - f2_x1;
						var y11 = p_y1 - f2_y1;
						has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x12 = x3;
						var y12 = y3;
						if(y12 == null) {
							y12 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point1_x = x12;
						var point1_y = y12;
						var x13 = view.x + view.width / 2;
						var y13 = view.y + view.height / 2;
						if(y13 == null) {
							y13 = 0;
						}
						if(x13 == null) {
							x13 = 0;
						}
						var point2_x = x13;
						var point2_y = y13;
						var x14 = point2_x - point1_x;
						var y14 = point2_y - point1_y;
						has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x3 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y3 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x3 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y3 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y3 * this1.getUInt16(0) + x3) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255 & 255;
				this1.b[position + 1] = color >> 16 & 255 & 255;
				this1.b[position + 2] = color >> 8 & 255 & 255;
				this1.b[position + 3] = color & 255 & 255;
			}
		} else {
			var position1 = (y3 * this1.getUInt16(0) + x3) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255 & 255;
			this1.b[position1 + 1] = color >> 16 & 255 & 255;
			this1.b[position1 + 2] = color >> 8 & 255 & 255;
			this1.b[position1 + 3] = color & 255 & 255;
		}
		if(x1 == x2 && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
	var x1 = x + width;
	var y1 = y + height;
	var y2 = y + height;
	var dx = Math.abs(x - x1);
	var dy = Math.abs(y2 - y1);
	var sx = x1 < x ? 1 : -1;
	var sy = y1 < y2 ? 1 : -1;
	var err = dx - dy;
	var safety = 0;
	while(safety++ < 10000) {
		var x2 = x1;
		var y3 = y1;
		var ma = this1.getUInt16(0) - 1;
		var values = [x2,0];
		var max = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] > max) {
				max = values[i];
			}
		}
		var values1 = [max,ma];
		var min = values1[0];
		var _g2 = 0;
		var _g3 = values1.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			if(values1[i1] < min) {
				min = values1[i1];
			}
		}
		x2 = min;
		var ma1 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
		var values2 = [y3,0];
		var max1 = values2[0];
		var _g4 = 0;
		var _g5 = values2.length;
		while(_g4 < _g5) {
			var i2 = _g4++;
			if(values2[i2] > max1) {
				max1 = values2[i2];
			}
		}
		var values3 = [max1,ma1];
		var min1 = values3[0];
		var _g6 = 0;
		var _g7 = values3.length;
		while(_g6 < _g7) {
			var i3 = _g6++;
			if(values3[i3] < min1) {
				min1 = values3[i3];
			}
		}
		y3 = min1;
		if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x2 >= 0 && y3 >= 0 && x2 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g8,_g9,_g10,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x2 < view.x + view.width && y3 < view.y + view.height && x2 >= view.x && y3 >= view.y;
					break;
				case 1:
					has = !(x2 < view.x + view.width && y3 < view.y + view.height && x2 >= view.x && y3 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x3 = view.x + view.width / 2 - c;
						var y4 = view.y + view.height / 2;
						if(y4 == null) {
							y4 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f1_x = x3;
						var f1_y = y4;
						var x4 = view.x + view.width / 2 + c;
						var y5 = view.y + view.height / 2;
						if(y5 == null) {
							y5 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var f2_x = x4;
						var f2_y = y5;
						var p_x = x2;
						var p_y = y3;
						var x5 = p_x - f1_x;
						var y6 = p_y - f1_y;
						var x6 = p_x - f2_x;
						var y7 = p_y - f2_y;
						has = Math.sqrt(x5 * x5 + y6 * y6) + Math.sqrt(x6 * x6 + y7 * y7) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x7 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 - c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f1_x1 = x7;
						var f1_y1 = y8;
						var x8 = view.x + view.width / 2;
						var y9 = view.y + view.height / 2 + c1;
						if(y9 == null) {
							y9 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f2_x1 = x8;
						var f2_y1 = y9;
						var p_x1 = x2;
						var p_y1 = y3;
						var x9 = p_x1 - f1_x1;
						var y10 = p_y1 - f1_y1;
						var x10 = p_x1 - f2_x1;
						var y11 = p_y1 - f2_y1;
						has = Math.sqrt(x9 * x9 + y10 * y10) + Math.sqrt(x10 * x10 + y11 * y11) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x11 = x2;
						var y12 = y3;
						if(y12 == null) {
							y12 = 0;
						}
						if(x11 == null) {
							x11 = 0;
						}
						var point1_x = x11;
						var point1_y = y12;
						var x12 = view.x + view.width / 2;
						var y13 = view.y + view.height / 2;
						if(y13 == null) {
							y13 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point2_x = x12;
						var point2_y = y13;
						var x13 = point2_x - point1_x;
						var y14 = point2_y - point1_y;
						has = Math.sqrt(x13 * x13 + y14 * y14) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y3 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y3 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y3 * this1.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255 & 255;
				this1.b[position + 1] = color >> 16 & 255 & 255;
				this1.b[position + 2] = color >> 8 & 255 & 255;
				this1.b[position + 3] = color & 255 & 255;
			}
		} else {
			var position1 = (y3 * this1.getUInt16(0) + x2) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255 & 255;
			this1.b[position1 + 1] = color >> 16 & 255 & 255;
			this1.b[position1 + 2] = color >> 8 & 255 & 255;
			this1.b[position1 + 3] = color & 255 & 255;
		}
		if(x1 == x && y1 == y2) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
	var x1 = x;
	var y1 = y + height;
	var dx = Math.abs(x - x1);
	var dy = Math.abs(y - y1);
	var sx = x1 < x ? 1 : -1;
	var sy = y1 < y ? 1 : -1;
	var err = dx - dy;
	var safety = 0;
	while(safety++ < 10000) {
		var x2 = x1;
		var y2 = y1;
		var ma = this1.getUInt16(0) - 1;
		var values = [x2,0];
		var max = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] > max) {
				max = values[i];
			}
		}
		var values1 = [max,ma];
		var min = values1[0];
		var _g2 = 0;
		var _g3 = values1.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			if(values1[i1] < min) {
				min = values1[i1];
			}
		}
		x2 = min;
		var ma1 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
		var values2 = [y2,0];
		var max1 = values2[0];
		var _g4 = 0;
		var _g5 = values2.length;
		while(_g4 < _g5) {
			var i2 = _g4++;
			if(values2[i2] > max1) {
				max1 = values2[i2];
			}
		}
		var values3 = [max1,ma1];
		var min1 = values3[0];
		var _g6 = 0;
		var _g7 = values3.length;
		while(_g6 < _g7) {
			var i3 = _g6++;
			if(values3[i3] < min1) {
				min1 = values3[i3];
			}
		}
		y2 = min1;
		if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g8,_g9,_g10,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x2 < view.x + view.width && y2 < view.y + view.height && x2 >= view.x && y2 >= view.y;
					break;
				case 1:
					has = !(x2 < view.x + view.width && y2 < view.y + view.height && x2 >= view.x && y2 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x3 = view.x + view.width / 2 - c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f1_x = x3;
						var f1_y = y3;
						var x4 = view.x + view.width / 2 + c;
						var y4 = view.y + view.height / 2;
						if(y4 == null) {
							y4 = 0;
						}
						if(x4 == null) {
							x4 = 0;
						}
						var f2_x = x4;
						var f2_y = y4;
						var p_x = x2;
						var p_y = y2;
						var x5 = p_x - f1_x;
						var y5 = p_y - f1_y;
						var x6 = p_x - f2_x;
						var y6 = p_y - f2_y;
						has = Math.sqrt(x5 * x5 + y5 * y5) + Math.sqrt(x6 * x6 + y6 * y6) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x7 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 - c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f1_x1 = x7;
						var f1_y1 = y7;
						var x8 = view.x + view.width / 2;
						var y8 = view.y + view.height / 2 + c1;
						if(y8 == null) {
							y8 = 0;
						}
						if(x8 == null) {
							x8 = 0;
						}
						var f2_x1 = x8;
						var f2_y1 = y8;
						var p_x1 = x2;
						var p_y1 = y2;
						var x9 = p_x1 - f1_x1;
						var y9 = p_y1 - f1_y1;
						var x10 = p_x1 - f2_x1;
						var y10 = p_y1 - f2_y1;
						has = Math.sqrt(x9 * x9 + y9 * y9) + Math.sqrt(x10 * x10 + y10 * y10) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x11 = x2;
						var y11 = y2;
						if(y11 == null) {
							y11 = 0;
						}
						if(x11 == null) {
							x11 = 0;
						}
						var point1_x = x11;
						var point1_y = y11;
						var x12 = view.x + view.width / 2;
						var y12 = view.y + view.height / 2;
						if(y12 == null) {
							y12 = 0;
						}
						if(x12 == null) {
							x12 = 0;
						}
						var point2_x = x12;
						var point2_y = y12;
						var x13 = point2_x - point1_x;
						var y13 = point2_y - point1_y;
						has = Math.sqrt(x13 * x13 + y13 * y13) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y2 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y2 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y2 * this1.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255 & 255;
				this1.b[position + 1] = color >> 16 & 255 & 255;
				this1.b[position + 2] = color >> 8 & 255 & 255;
				this1.b[position + 3] = color & 255 & 255;
			}
		} else {
			var position1 = (y2 * this1.getUInt16(0) + x2) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255 & 255;
			this1.b[position1 + 1] = color >> 16 & 255 & 255;
			this1.b[position1 + 2] = color >> 8 & 255 & 255;
			this1.b[position1 + 3] = color & 255 & 255;
		}
		if(x1 == x && y1 == y) {
			break;
		}
		var e2 = 2 * err;
		if(e2 > -dy) {
			err -= dy;
			x1 += sx;
		}
		if(e2 < dx) {
			err += dx;
			y1 += sy;
		}
	}
};
vision_ds_Image.drawQuadraticBezier = function(this1,line,control,color,accuracy) {
	if(accuracy == null) {
		accuracy = 1000;
	}
	var bezier = function(t,p0,p1,p2) {
		var t2 = t * t;
		var t3 = t2 * t;
		var x = p0.x * (1 - t) * (1 - t) + p1.x * 2 * t * (1 - t) + p2.x * t * t;
		var y = p0.y * (1 - t) * (1 - t) + p1.y * 2 * t * (1 - t) + p2.y * t * t;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p_x = x;
		var p_y = y;
		return new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
	};
	var p = line.start;
	var p0 = new vision_ds__$IntPoint2D_Impl(p.x | 0,p.y | 0);
	var p = line.end;
	var p1 = new vision_ds__$IntPoint2D_Impl(p.x | 0,p.y | 0);
	var x = control.x;
	var y = control.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p_x = x;
	var p_y = y;
	var p2 = new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0);
	var i = 0.;
	var step = 1 / accuracy;
	while(i <= 1) {
		var p = bezier(i,p0,p1,p2);
		var x = p.x;
		var y = p.y;
		if(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
			var x1 = p.x;
			var y1 = p.y;
			if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x1;
				var this_y = y1;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
						break;
					case 1:
						has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x2 = view.x + view.width / 2 - c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f1_x = x2;
							var f1_y = y2;
							var x3 = view.x + view.width / 2 + c;
							var y3 = view.y + view.height / 2;
							if(y3 == null) {
								y3 = 0;
							}
							if(x3 == null) {
								x3 = 0;
							}
							var f2_x = x3;
							var f2_y = y3;
							var p_x = x1;
							var p_y = y1;
							var x4 = p_x - f1_x;
							var y4 = p_y - f1_y;
							var x5 = p_x - f2_x;
							var y5 = p_y - f2_y;
							has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 - c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f1_x1 = x6;
							var f1_y1 = y6;
							var x7 = view.x + view.width / 2;
							var y7 = view.y + view.height / 2 + c1;
							if(y7 == null) {
								y7 = 0;
							}
							if(x7 == null) {
								x7 = 0;
							}
							var f2_x1 = x7;
							var f2_y1 = y7;
							var p_x1 = x1;
							var p_y1 = y1;
							var x8 = p_x1 - f1_x1;
							var y8 = p_y1 - f1_y1;
							var x9 = p_x1 - f2_x1;
							var y9 = p_y1 - f2_y1;
							has = Math.sqrt(x8 * x8 + y8 * y8) + Math.sqrt(x9 * x9 + y9 * y9) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x10 = x1;
							var y10 = y1;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point1_x = x10;
							var point1_y = y10;
							var x11 = view.x + view.width / 2;
							var y11 = view.y + view.height / 2;
							if(y11 == null) {
								y11 = 0;
							}
							if(x11 == null) {
								x11 = 0;
							}
							var point2_x = x11;
							var point2_y = y11;
							var x12 = point2_x - point1_x;
							var y12 = point2_y - point1_y;
							has = Math.sqrt(x12 * x12 + y12 * y12) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y1 * this1.getUInt16(0) + x1) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255 & 255;
					this1.b[position + 1] = color >> 16 & 255 & 255;
					this1.b[position + 2] = color >> 8 & 255 & 255;
					this1.b[position + 3] = color & 255 & 255;
				}
			} else {
				var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255 & 255;
				this1.b[position1 + 1] = color >> 16 & 255 & 255;
				this1.b[position1 + 2] = color >> 8 & 255 & 255;
				this1.b[position1 + 3] = color & 255 & 255;
			}
		}
		i += step;
	}
};
vision_ds_Image.drawCubicBezier = function(this1,line,control1,control2,color,accuracy) {
	if(accuracy == null) {
		accuracy = 1000;
	}
	var i = 0.;
	var step = 1 / accuracy;
	while(i < 1) {
		var p = line.start;
		var p0_x = p.x | 0;
		var p0_y = p.y | 0;
		var p1 = line.end;
		var p1_x = p1.x | 0;
		var p1_y = p1.y | 0;
		var cX = 3 * (p1_x - p0_x);
		var bX = 3 * (control1.x - p1_x) - cX;
		var aX = control2.x - p0_x - cX - bX;
		var cY = 3 * (p1_y - p0_y);
		var bY = 3 * (control1.y - p1_y) - cY;
		var aY = control2.y - p0_y - cY - bY;
		var x = aX * Math.pow(i,3) + bX * Math.pow(i,2) + cX * i + p0_x;
		var y = aY * Math.pow(i,3) + bY * Math.pow(i,2) + cY * i + p0_y;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p_x = x1;
		var p_y = y1;
		var p_x1 = p_x | 0;
		var p_y1 = p_y | 0;
		var x2 = p_x1;
		var y2 = p_y1;
		if(x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
			var x3 = p_x1;
			var y3 = p_y1;
			if(!(x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x3;
				var this_y = y3;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x3 < view.x + view.width && y3 < view.y + view.height && x3 >= view.x && y3 >= view.y;
						break;
					case 1:
						has = !(x3 < view.x + view.width && y3 < view.y + view.height && x3 >= view.x && y3 >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x4 = view.x + view.width / 2 - c;
							var y4 = view.y + view.height / 2;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var f1_x = x4;
							var f1_y = y4;
							var x5 = view.x + view.width / 2 + c;
							var y5 = view.y + view.height / 2;
							if(y5 == null) {
								y5 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f2_x = x5;
							var f2_y = y5;
							var p_x2 = x3;
							var p_y2 = y3;
							var x6 = p_x2 - f1_x;
							var y6 = p_y2 - f1_y;
							var x7 = p_x2 - f2_x;
							var y7 = p_y2 - f2_y;
							has = Math.sqrt(x6 * x6 + y6 * y6) + Math.sqrt(x7 * x7 + y7 * y7) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x8 = view.x + view.width / 2;
							var y8 = view.y + view.height / 2 - c1;
							if(y8 == null) {
								y8 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var f1_x1 = x8;
							var f1_y1 = y8;
							var x9 = view.x + view.width / 2;
							var y9 = view.y + view.height / 2 + c1;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var f2_x1 = x9;
							var f2_y1 = y9;
							var p_x3 = x3;
							var p_y3 = y3;
							var x10 = p_x3 - f1_x1;
							var y10 = p_y3 - f1_y1;
							var x11 = p_x3 - f2_x1;
							var y11 = p_y3 - f2_y1;
							has = Math.sqrt(x10 * x10 + y10 * y10) + Math.sqrt(x11 * x11 + y11 * y11) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x12 = x3;
							var y12 = y3;
							if(y12 == null) {
								y12 = 0;
							}
							if(x12 == null) {
								x12 = 0;
							}
							var point1_x = x12;
							var point1_y = y12;
							var x13 = view.x + view.width / 2;
							var y13 = view.y + view.height / 2;
							if(y13 == null) {
								y13 = 0;
							}
							if(x13 == null) {
								x13 = 0;
							}
							var point2_x = x13;
							var point2_y = y13;
							var x14 = point2_x - point1_x;
							var y14 = point2_y - point1_y;
							has = Math.sqrt(x14 * x14 + y14 * y14) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x3 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y3 - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x3 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y3 - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y3 * this1.getUInt16(0) + x3) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255 & 255;
					this1.b[position + 1] = color >> 16 & 255 & 255;
					this1.b[position + 2] = color >> 8 & 255 & 255;
					this1.b[position + 3] = color & 255 & 255;
				}
			} else {
				var position1 = (y3 * this1.getUInt16(0) + x3) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255 & 255;
				this1.b[position1 + 1] = color >> 16 & 255 & 255;
				this1.b[position1 + 2] = color >> 8 & 255 & 255;
				this1.b[position1 + 3] = color & 255 & 255;
			}
		}
		i += step;
	}
};
vision_ds_Image.fillCircle = function(this1,X,Y,r,color) {
	var points = [];
	var x = -r;
	var y = 0;
	var err = 2 - 2 * r;
	do {
		var x1 = X + x;
		var y1 = Y - y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var p_x = x1;
		var p_y = y1;
		points.push(new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0));
		var x2 = X - x;
		var y2 = Y + y;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p_x1 = x2;
		var p_y1 = y2;
		points.push(new vision_ds__$IntPoint2D_Impl(p_x1 | 0,p_y1 | 0));
		var x3 = X - y;
		var y3 = Y - x;
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		var p_x2 = x3;
		var p_y2 = y3;
		points.push(new vision_ds__$IntPoint2D_Impl(p_x2 | 0,p_y2 | 0));
		var x4 = X + y;
		var y4 = Y + x;
		if(y4 == null) {
			y4 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var p_x3 = x4;
		var p_y3 = y4;
		points.push(new vision_ds__$IntPoint2D_Impl(p_x3 | 0,p_y3 | 0));
		r = err;
		if(r <= y) {
			err += ++y * 2 + 1;
		}
		if(r > x || err > y) {
			err += ++x * 2 + 1;
		}
	} while(x < 0);
	var values = [];
	var _g = 0;
	while(_g < points.length) {
		var p = points[_g];
		++_g;
		if(values[p.x] == null) {
			values[p.x] = [];
		}
		values[p.x].push(p.y);
	}
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var y = _g++;
		if(values[y] == null) {
			continue;
		}
		var values1 = values[y];
		var min = values1[0];
		var _g2 = 0;
		var _g3 = values1.length;
		while(_g2 < _g3) {
			var i = _g2++;
			if(values1[i] < min) {
				min = values1[i];
			}
		}
		var min1 = min;
		var values2 = values[y];
		var max = values2[0];
		var _g4 = 0;
		var _g5 = values2.length;
		while(_g4 < _g5) {
			var i1 = _g4++;
			if(values2[i1] > max) {
				max = values2[i1];
			}
		}
		var max1 = max;
		var _g6 = min1;
		var _g7 = max1 + 1;
		while(_g6 < _g7) {
			var i2 = _g6++;
			if(!(i2 >= 0 && y >= 0 && i2 < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = i2;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = i2 >= 0 && y >= 0 && i2 < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g8,_g9,_g10,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = i2 < view.x + view.width && y < view.y + view.height && i2 >= view.x && y >= view.y;
						break;
					case 1:
						has = !(i2 < view.x + view.width && y < view.y + view.height && i2 >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x == null) {
								x = 0;
							}
							var f1_x = x;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y2;
							var p_x = i2;
							var p_y = y;
							var x2 = p_x - f1_x;
							var y3 = p_y - f1_y;
							var x3 = p_x - f2_x;
							var y4 = p_y - f2_y;
							has = Math.sqrt(x2 * x2 + y3 * y3) + Math.sqrt(x3 * x3 + y4 * y4) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x4 = view.x + view.width / 2;
							var y5 = view.y + view.height / 2 - c1;
							if(y5 == null) {
								y5 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var f1_x1 = x4;
							var f1_y1 = y5;
							var x5 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 + c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f2_x1 = x5;
							var f2_y1 = y6;
							var p_x1 = i2;
							var p_y1 = y;
							var x6 = p_x1 - f1_x1;
							var y7 = p_y1 - f1_y1;
							var x7 = p_x1 - f2_x1;
							var y8 = p_y1 - f2_y1;
							has = Math.sqrt(x6 * x6 + y7 * y7) + Math.sqrt(x7 * x7 + y8 * y8) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x8 = i2;
							var y9 = y;
							if(y9 == null) {
								y9 = 0;
							}
							if(x8 == null) {
								x8 = 0;
							}
							var point1_x = x8;
							var point1_y = y9;
							var x9 = view.x + view.width / 2;
							var y10 = view.y + view.height / 2;
							if(y10 == null) {
								y10 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var point2_x = x9;
							var point2_y = y10;
							var x10 = point2_x - point1_x;
							var y11 = point2_y - point1_y;
							has = Math.sqrt(x10 * x10 + y11 * y11) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(i2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(i2 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + i2) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255 & 255;
					this1.b[position + 1] = color >> 16 & 255 & 255;
					this1.b[position + 2] = color >> 8 & 255 & 255;
					this1.b[position + 3] = color & 255 & 255;
				}
			} else {
				var position1 = (y * this1.getUInt16(0) + i2) * 4;
				position1 += vision_ds_Image.OFFSET;
				this1.b[position1] = color >> 24 & 255 & 255;
				this1.b[position1 + 1] = color >> 16 & 255 & 255;
				this1.b[position1 + 2] = color >> 8 & 255 & 255;
				this1.b[position1 + 3] = color & 255 & 255;
			}
		}
	}
};
vision_ds_Image.drawCircle = function(this1,X,Y,r,color) {
	var x = -r;
	var y = 0;
	var err = 2 - 2 * r;
	do {
		var x1 = X + x;
		var y1 = Y - y;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x3 = view.x + view.width / 2 + c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f2_x = x3;
						var f2_y = y3;
						var p_x = x1;
						var p_y = y1;
						var x4 = p_x - f1_x;
						var y4 = p_y - f1_y;
						var x5 = p_x - f2_x;
						var y5 = p_y - f2_y;
						has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x6 = view.x + view.width / 2;
						var y6 = view.y + view.height / 2 - c1;
						if(y6 == null) {
							y6 = 0;
						}
						if(x6 == null) {
							x6 = 0;
						}
						var f1_x1 = x6;
						var f1_y1 = y6;
						var x7 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 + c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f2_x1 = x7;
						var f2_y1 = y7;
						var p_x1 = x1;
						var p_y1 = y1;
						var x8 = p_x1 - f1_x1;
						var y8 = p_y1 - f1_y1;
						var x9 = p_x1 - f2_x1;
						var y9 = p_y1 - f2_y1;
						has = Math.sqrt(x8 * x8 + y8 * y8) + Math.sqrt(x9 * x9 + y9 * y9) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x10 = x1;
						var y10 = y1;
						if(y10 == null) {
							y10 = 0;
						}
						if(x10 == null) {
							x10 = 0;
						}
						var point1_x = x10;
						var point1_y = y10;
						var x11 = view.x + view.width / 2;
						var y11 = view.y + view.height / 2;
						if(y11 == null) {
							y11 = 0;
						}
						if(x11 == null) {
							x11 = 0;
						}
						var point2_x = x11;
						var point2_y = y11;
						var x12 = point2_x - point1_x;
						var y12 = point2_y - point1_y;
						has = Math.sqrt(x12 * x12 + y12 * y12) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255 & 255;
				this1.b[position + 1] = color >> 16 & 255 & 255;
				this1.b[position + 2] = color >> 8 & 255 & 255;
				this1.b[position + 3] = color & 255 & 255;
			}
		} else {
			var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255 & 255;
			this1.b[position1 + 1] = color >> 16 & 255 & 255;
			this1.b[position1 + 2] = color >> 8 & 255 & 255;
			this1.b[position1 + 3] = color & 255 & 255;
		}
		var x13 = X - x;
		var y13 = Y + y;
		if(!(x13 >= 0 && y13 >= 0 && x13 < this1.getUInt16(0) && y13 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x1 = x13;
			var this_y1 = y13;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v1 = null;
			var tmp1;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
				tmp1 = x13 >= 0 && y13 >= 0 && x13 < this1.getUInt16(0) && y13 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has1 = false;
				var view2;
				if(v1 != null) {
					view2 = v1;
				} else {
					var _g3 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this3 = this1.b;
					var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view2 = new vision_ds_ImageView(_g3,_g4,_g5,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view3]);
				}
				switch(view2.shape) {
				case 0:
					has1 = x13 < view2.x + view2.width && y13 < view2.y + view2.height && x13 >= view2.x && y13 >= view2.y;
					break;
				case 1:
					has1 = !(x13 < view2.x + view2.width && y13 < view2.y + view2.height && x13 >= view2.x && y13 >= view2.y);
					break;
				case 2:case 3:
					if(view2.width > view2.height) {
						var a2 = view2.width / 2;
						var b2 = view2.height / 2;
						var c2 = Math.sqrt(a2 * a2 - b2 * b2);
						var x14 = view2.x + view2.width / 2 - c2;
						var y14 = view2.y + view2.height / 2;
						if(y14 == null) {
							y14 = 0;
						}
						if(x14 == null) {
							x14 = 0;
						}
						var f1_x2 = x14;
						var f1_y2 = y14;
						var x15 = view2.x + view2.width / 2 + c2;
						var y15 = view2.y + view2.height / 2;
						if(y15 == null) {
							y15 = 0;
						}
						if(x15 == null) {
							x15 = 0;
						}
						var f2_x2 = x15;
						var f2_y2 = y15;
						var p_x2 = x13;
						var p_y2 = y13;
						var x16 = p_x2 - f1_x2;
						var y16 = p_y2 - f1_y2;
						var x17 = p_x2 - f2_x2;
						var y17 = p_y2 - f2_y2;
						has1 = Math.sqrt(x16 * x16 + y16 * y16) + Math.sqrt(x17 * x17 + y17 * y17) <= view2.width;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else if(view2.height > view2.width) {
						var a3 = view2.height / 2;
						var b3 = view2.width / 2;
						var c3 = Math.sqrt(a3 * a3 - b3 * b3);
						var x18 = view2.x + view2.width / 2;
						var y18 = view2.y + view2.height / 2 - c3;
						if(y18 == null) {
							y18 = 0;
						}
						if(x18 == null) {
							x18 = 0;
						}
						var f1_x3 = x18;
						var f1_y3 = y18;
						var x19 = view2.x + view2.width / 2;
						var y19 = view2.y + view2.height / 2 + c3;
						if(y19 == null) {
							y19 = 0;
						}
						if(x19 == null) {
							x19 = 0;
						}
						var f2_x3 = x19;
						var f2_y3 = y19;
						var p_x3 = x13;
						var p_y3 = y13;
						var x20 = p_x3 - f1_x3;
						var y20 = p_y3 - f1_y3;
						var x21 = p_x3 - f2_x3;
						var y21 = p_y3 - f2_y3;
						has1 = Math.sqrt(x20 * x20 + y20 * y20) + Math.sqrt(x21 * x21 + y21 * y21) <= view2.height;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else {
						var x22 = x13;
						var y22 = y13;
						if(y22 == null) {
							y22 = 0;
						}
						if(x22 == null) {
							x22 = 0;
						}
						var point1_x1 = x22;
						var point1_y1 = y22;
						var x23 = view2.x + view2.width / 2;
						var y23 = view2.y + view2.height / 2;
						if(y23 == null) {
							y23 = 0;
						}
						if(x23 == null) {
							x23 = 0;
						}
						var point2_x1 = x23;
						var point2_y1 = y23;
						var x24 = point2_x1 - point1_x1;
						var y24 = point2_y1 - point1_y1;
						has1 = Math.sqrt(x24 * x24 + y24 * y24) <= view2.width / 2;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					}
					break;
				case 4:
					has1 = Math.abs(x13 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y13 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
					break;
				case 5:
					has1 = !(Math.abs(x13 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y13 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
					break;
				}
				tmp1 = has1;
			}
			if(tmp1) {
				var position2 = (y13 * this1.getUInt16(0) + x13) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color >> 24 & 255 & 255;
				this1.b[position2 + 1] = color >> 16 & 255 & 255;
				this1.b[position2 + 2] = color >> 8 & 255 & 255;
				this1.b[position2 + 3] = color & 255 & 255;
			}
		} else {
			var position3 = (y13 * this1.getUInt16(0) + x13) * 4;
			position3 += vision_ds_Image.OFFSET;
			this1.b[position3] = color >> 24 & 255 & 255;
			this1.b[position3 + 1] = color >> 16 & 255 & 255;
			this1.b[position3 + 2] = color >> 8 & 255 & 255;
			this1.b[position3 + 3] = color & 255 & 255;
		}
		var x25 = X - y;
		var y25 = Y - x;
		if(!(x25 >= 0 && y25 >= 0 && x25 < this1.getUInt16(0) && y25 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x2 = x25;
			var this_y2 = y25;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v2 = null;
			var tmp2;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
				tmp2 = x25 >= 0 && y25 >= 0 && x25 < this1.getUInt16(0) && y25 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has2 = false;
				var view4;
				if(v2 != null) {
					view4 = v2;
				} else {
					var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this4 = this1.b;
					var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view4 = new vision_ds_ImageView(_g6,_g7,_g8,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this4[view5]);
				}
				switch(view4.shape) {
				case 0:
					has2 = x25 < view4.x + view4.width && y25 < view4.y + view4.height && x25 >= view4.x && y25 >= view4.y;
					break;
				case 1:
					has2 = !(x25 < view4.x + view4.width && y25 < view4.y + view4.height && x25 >= view4.x && y25 >= view4.y);
					break;
				case 2:case 3:
					if(view4.width > view4.height) {
						var a4 = view4.width / 2;
						var b4 = view4.height / 2;
						var c4 = Math.sqrt(a4 * a4 - b4 * b4);
						var x26 = view4.x + view4.width / 2 - c4;
						var y26 = view4.y + view4.height / 2;
						if(y26 == null) {
							y26 = 0;
						}
						if(x26 == null) {
							x26 = 0;
						}
						var f1_x4 = x26;
						var f1_y4 = y26;
						var x27 = view4.x + view4.width / 2 + c4;
						var y27 = view4.y + view4.height / 2;
						if(y27 == null) {
							y27 = 0;
						}
						if(x27 == null) {
							x27 = 0;
						}
						var f2_x4 = x27;
						var f2_y4 = y27;
						var p_x4 = x25;
						var p_y4 = y25;
						var x28 = p_x4 - f1_x4;
						var y28 = p_y4 - f1_y4;
						var x29 = p_x4 - f2_x4;
						var y29 = p_y4 - f2_y4;
						has2 = Math.sqrt(x28 * x28 + y28 * y28) + Math.sqrt(x29 * x29 + y29 * y29) <= view4.width;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else if(view4.height > view4.width) {
						var a5 = view4.height / 2;
						var b5 = view4.width / 2;
						var c5 = Math.sqrt(a5 * a5 - b5 * b5);
						var x30 = view4.x + view4.width / 2;
						var y30 = view4.y + view4.height / 2 - c5;
						if(y30 == null) {
							y30 = 0;
						}
						if(x30 == null) {
							x30 = 0;
						}
						var f1_x5 = x30;
						var f1_y5 = y30;
						var x31 = view4.x + view4.width / 2;
						var y31 = view4.y + view4.height / 2 + c5;
						if(y31 == null) {
							y31 = 0;
						}
						if(x31 == null) {
							x31 = 0;
						}
						var f2_x5 = x31;
						var f2_y5 = y31;
						var p_x5 = x25;
						var p_y5 = y25;
						var x32 = p_x5 - f1_x5;
						var y32 = p_y5 - f1_y5;
						var x33 = p_x5 - f2_x5;
						var y33 = p_y5 - f2_y5;
						has2 = Math.sqrt(x32 * x32 + y32 * y32) + Math.sqrt(x33 * x33 + y33 * y33) <= view4.height;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else {
						var x34 = x25;
						var y34 = y25;
						if(y34 == null) {
							y34 = 0;
						}
						if(x34 == null) {
							x34 = 0;
						}
						var point1_x2 = x34;
						var point1_y2 = y34;
						var x35 = view4.x + view4.width / 2;
						var y35 = view4.y + view4.height / 2;
						if(y35 == null) {
							y35 = 0;
						}
						if(x35 == null) {
							x35 = 0;
						}
						var point2_x2 = x35;
						var point2_y2 = y35;
						var x36 = point2_x2 - point1_x2;
						var y36 = point2_y2 - point1_y2;
						has2 = Math.sqrt(x36 * x36 + y36 * y36) <= view4.width / 2;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					}
					break;
				case 4:
					has2 = Math.abs(x25 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y25 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
					break;
				case 5:
					has2 = !(Math.abs(x25 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y25 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
					break;
				}
				tmp2 = has2;
			}
			if(tmp2) {
				var position4 = (y25 * this1.getUInt16(0) + x25) * 4;
				position4 += vision_ds_Image.OFFSET;
				this1.b[position4] = color >> 24 & 255 & 255;
				this1.b[position4 + 1] = color >> 16 & 255 & 255;
				this1.b[position4 + 2] = color >> 8 & 255 & 255;
				this1.b[position4 + 3] = color & 255 & 255;
			}
		} else {
			var position5 = (y25 * this1.getUInt16(0) + x25) * 4;
			position5 += vision_ds_Image.OFFSET;
			this1.b[position5] = color >> 24 & 255 & 255;
			this1.b[position5 + 1] = color >> 16 & 255 & 255;
			this1.b[position5 + 2] = color >> 8 & 255 & 255;
			this1.b[position5 + 3] = color & 255 & 255;
		}
		var x37 = X + y;
		var y37 = Y + x;
		if(!(x37 >= 0 && y37 >= 0 && x37 < this1.getUInt16(0) && y37 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x3 = x37;
			var this_y3 = y37;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v3 = null;
			var tmp3;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
				tmp3 = x37 >= 0 && y37 >= 0 && x37 < this1.getUInt16(0) && y37 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has3 = false;
				var view6;
				if(v3 != null) {
					view6 = v3;
				} else {
					var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g11 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this5 = this1.b;
					var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view6 = new vision_ds_ImageView(_g9,_g10,_g11,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this5[view7]);
				}
				switch(view6.shape) {
				case 0:
					has3 = x37 < view6.x + view6.width && y37 < view6.y + view6.height && x37 >= view6.x && y37 >= view6.y;
					break;
				case 1:
					has3 = !(x37 < view6.x + view6.width && y37 < view6.y + view6.height && x37 >= view6.x && y37 >= view6.y);
					break;
				case 2:case 3:
					if(view6.width > view6.height) {
						var a6 = view6.width / 2;
						var b6 = view6.height / 2;
						var c6 = Math.sqrt(a6 * a6 - b6 * b6);
						var x38 = view6.x + view6.width / 2 - c6;
						var y38 = view6.y + view6.height / 2;
						if(y38 == null) {
							y38 = 0;
						}
						if(x38 == null) {
							x38 = 0;
						}
						var f1_x6 = x38;
						var f1_y6 = y38;
						var x39 = view6.x + view6.width / 2 + c6;
						var y39 = view6.y + view6.height / 2;
						if(y39 == null) {
							y39 = 0;
						}
						if(x39 == null) {
							x39 = 0;
						}
						var f2_x6 = x39;
						var f2_y6 = y39;
						var p_x6 = x37;
						var p_y6 = y37;
						var x40 = p_x6 - f1_x6;
						var y40 = p_y6 - f1_y6;
						var x41 = p_x6 - f2_x6;
						var y41 = p_y6 - f2_y6;
						has3 = Math.sqrt(x40 * x40 + y40 * y40) + Math.sqrt(x41 * x41 + y41 * y41) <= view6.width;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else if(view6.height > view6.width) {
						var a7 = view6.height / 2;
						var b7 = view6.width / 2;
						var c7 = Math.sqrt(a7 * a7 - b7 * b7);
						var x42 = view6.x + view6.width / 2;
						var y42 = view6.y + view6.height / 2 - c7;
						if(y42 == null) {
							y42 = 0;
						}
						if(x42 == null) {
							x42 = 0;
						}
						var f1_x7 = x42;
						var f1_y7 = y42;
						var x43 = view6.x + view6.width / 2;
						var y43 = view6.y + view6.height / 2 + c7;
						if(y43 == null) {
							y43 = 0;
						}
						if(x43 == null) {
							x43 = 0;
						}
						var f2_x7 = x43;
						var f2_y7 = y43;
						var p_x7 = x37;
						var p_y7 = y37;
						var x44 = p_x7 - f1_x7;
						var y44 = p_y7 - f1_y7;
						var x45 = p_x7 - f2_x7;
						var y45 = p_y7 - f2_y7;
						has3 = Math.sqrt(x44 * x44 + y44 * y44) + Math.sqrt(x45 * x45 + y45 * y45) <= view6.height;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else {
						var x46 = x37;
						var y46 = y37;
						if(y46 == null) {
							y46 = 0;
						}
						if(x46 == null) {
							x46 = 0;
						}
						var point1_x3 = x46;
						var point1_y3 = y46;
						var x47 = view6.x + view6.width / 2;
						var y47 = view6.y + view6.height / 2;
						if(y47 == null) {
							y47 = 0;
						}
						if(x47 == null) {
							x47 = 0;
						}
						var point2_x3 = x47;
						var point2_y3 = y47;
						var x48 = point2_x3 - point1_x3;
						var y48 = point2_y3 - point1_y3;
						has3 = Math.sqrt(x48 * x48 + y48 * y48) <= view6.width / 2;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					}
					break;
				case 4:
					has3 = Math.abs(x37 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y37 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
					break;
				case 5:
					has3 = !(Math.abs(x37 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y37 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
					break;
				}
				tmp3 = has3;
			}
			if(tmp3) {
				var position6 = (y37 * this1.getUInt16(0) + x37) * 4;
				position6 += vision_ds_Image.OFFSET;
				this1.b[position6] = color >> 24 & 255 & 255;
				this1.b[position6 + 1] = color >> 16 & 255 & 255;
				this1.b[position6 + 2] = color >> 8 & 255 & 255;
				this1.b[position6 + 3] = color & 255 & 255;
			}
		} else {
			var position7 = (y37 * this1.getUInt16(0) + x37) * 4;
			position7 += vision_ds_Image.OFFSET;
			this1.b[position7] = color >> 24 & 255 & 255;
			this1.b[position7 + 1] = color >> 16 & 255 & 255;
			this1.b[position7 + 2] = color >> 8 & 255 & 255;
			this1.b[position7 + 3] = color & 255 & 255;
		}
		r = err;
		if(r <= y) {
			err += ++y * 2 + 1;
		}
		if(r > x || err > y) {
			err += ++x * 2 + 1;
		}
	} while(x < 0);
};
vision_ds_Image.drawEllipse = function(this1,centerX,centerY,radiusX,radiusY,color) {
	var twoASquare = 2 * radiusX * radiusX;
	var twoBSquare = 2 * radiusY * radiusY;
	var x = radiusX - 1;
	var b = true;
	var y = 0;
	var xChange = radiusY * radiusY * (1 - 2 * radiusX);
	var yChange = radiusX * radiusX;
	var ellipseError = 0;
	var stoppingX = twoBSquare * radiusX;
	var stoppingY = 0;
	while(stoppingX >= stoppingY) {
		var x1 = centerX + x;
		var y1 = centerY + y;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b1 = view.height / 2;
						var c = Math.sqrt(a * a - b1 * b1);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x3 = view.x + view.width / 2 + c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f2_x = x3;
						var f2_y = y3;
						var p_x = x1;
						var p_y = y1;
						var x4 = p_x - f1_x;
						var y4 = p_y - f1_y;
						var x5 = p_x - f2_x;
						var y5 = p_y - f2_y;
						has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b2 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b2 * b2);
						var x6 = view.x + view.width / 2;
						var y6 = view.y + view.height / 2 - c1;
						if(y6 == null) {
							y6 = 0;
						}
						if(x6 == null) {
							x6 = 0;
						}
						var f1_x1 = x6;
						var f1_y1 = y6;
						var x7 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 + c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f2_x1 = x7;
						var f2_y1 = y7;
						var p_x1 = x1;
						var p_y1 = y1;
						var x8 = p_x1 - f1_x1;
						var y8 = p_y1 - f1_y1;
						var x9 = p_x1 - f2_x1;
						var y9 = p_y1 - f2_y1;
						has = Math.sqrt(x8 * x8 + y8 * y8) + Math.sqrt(x9 * x9 + y9 * y9) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x10 = x1;
						var y10 = y1;
						if(y10 == null) {
							y10 = 0;
						}
						if(x10 == null) {
							x10 = 0;
						}
						var point1_x = x10;
						var point1_y = y10;
						var x11 = view.x + view.width / 2;
						var y11 = view.y + view.height / 2;
						if(y11 == null) {
							y11 = 0;
						}
						if(x11 == null) {
							x11 = 0;
						}
						var point2_x = x11;
						var point2_y = y11;
						var x12 = point2_x - point1_x;
						var y12 = point2_y - point1_y;
						has = Math.sqrt(x12 * x12 + y12 * y12) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255 & 255;
				this1.b[position + 1] = color >> 16 & 255 & 255;
				this1.b[position + 2] = color >> 8 & 255 & 255;
				this1.b[position + 3] = color & 255 & 255;
			}
		} else {
			var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255 & 255;
			this1.b[position1 + 1] = color >> 16 & 255 & 255;
			this1.b[position1 + 2] = color >> 8 & 255 & 255;
			this1.b[position1 + 3] = color & 255 & 255;
		}
		var x13 = centerX - x;
		var y13 = centerY + y;
		if(!(x13 >= 0 && y13 >= 0 && x13 < this1.getUInt16(0) && y13 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x1 = x13;
			var this_y1 = y13;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v1 = null;
			var tmp1;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
				tmp1 = x13 >= 0 && y13 >= 0 && x13 < this1.getUInt16(0) && y13 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has1 = false;
				var view2;
				if(v1 != null) {
					view2 = v1;
				} else {
					var _g3 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this3 = this1.b;
					var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view2 = new vision_ds_ImageView(_g3,_g4,_g5,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view3]);
				}
				switch(view2.shape) {
				case 0:
					has1 = x13 < view2.x + view2.width && y13 < view2.y + view2.height && x13 >= view2.x && y13 >= view2.y;
					break;
				case 1:
					has1 = !(x13 < view2.x + view2.width && y13 < view2.y + view2.height && x13 >= view2.x && y13 >= view2.y);
					break;
				case 2:case 3:
					if(view2.width > view2.height) {
						var a2 = view2.width / 2;
						var b3 = view2.height / 2;
						var c2 = Math.sqrt(a2 * a2 - b3 * b3);
						var x14 = view2.x + view2.width / 2 - c2;
						var y14 = view2.y + view2.height / 2;
						if(y14 == null) {
							y14 = 0;
						}
						if(x14 == null) {
							x14 = 0;
						}
						var f1_x2 = x14;
						var f1_y2 = y14;
						var x15 = view2.x + view2.width / 2 + c2;
						var y15 = view2.y + view2.height / 2;
						if(y15 == null) {
							y15 = 0;
						}
						if(x15 == null) {
							x15 = 0;
						}
						var f2_x2 = x15;
						var f2_y2 = y15;
						var p_x2 = x13;
						var p_y2 = y13;
						var x16 = p_x2 - f1_x2;
						var y16 = p_y2 - f1_y2;
						var x17 = p_x2 - f2_x2;
						var y17 = p_y2 - f2_y2;
						has1 = Math.sqrt(x16 * x16 + y16 * y16) + Math.sqrt(x17 * x17 + y17 * y17) <= view2.width;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else if(view2.height > view2.width) {
						var a3 = view2.height / 2;
						var b4 = view2.width / 2;
						var c3 = Math.sqrt(a3 * a3 - b4 * b4);
						var x18 = view2.x + view2.width / 2;
						var y18 = view2.y + view2.height / 2 - c3;
						if(y18 == null) {
							y18 = 0;
						}
						if(x18 == null) {
							x18 = 0;
						}
						var f1_x3 = x18;
						var f1_y3 = y18;
						var x19 = view2.x + view2.width / 2;
						var y19 = view2.y + view2.height / 2 + c3;
						if(y19 == null) {
							y19 = 0;
						}
						if(x19 == null) {
							x19 = 0;
						}
						var f2_x3 = x19;
						var f2_y3 = y19;
						var p_x3 = x13;
						var p_y3 = y13;
						var x20 = p_x3 - f1_x3;
						var y20 = p_y3 - f1_y3;
						var x21 = p_x3 - f2_x3;
						var y21 = p_y3 - f2_y3;
						has1 = Math.sqrt(x20 * x20 + y20 * y20) + Math.sqrt(x21 * x21 + y21 * y21) <= view2.height;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else {
						var x22 = x13;
						var y22 = y13;
						if(y22 == null) {
							y22 = 0;
						}
						if(x22 == null) {
							x22 = 0;
						}
						var point1_x1 = x22;
						var point1_y1 = y22;
						var x23 = view2.x + view2.width / 2;
						var y23 = view2.y + view2.height / 2;
						if(y23 == null) {
							y23 = 0;
						}
						if(x23 == null) {
							x23 = 0;
						}
						var point2_x1 = x23;
						var point2_y1 = y23;
						var x24 = point2_x1 - point1_x1;
						var y24 = point2_y1 - point1_y1;
						has1 = Math.sqrt(x24 * x24 + y24 * y24) <= view2.width / 2;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					}
					break;
				case 4:
					has1 = Math.abs(x13 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y13 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
					break;
				case 5:
					has1 = !(Math.abs(x13 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y13 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
					break;
				}
				tmp1 = has1;
			}
			if(tmp1) {
				var position2 = (y13 * this1.getUInt16(0) + x13) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color >> 24 & 255 & 255;
				this1.b[position2 + 1] = color >> 16 & 255 & 255;
				this1.b[position2 + 2] = color >> 8 & 255 & 255;
				this1.b[position2 + 3] = color & 255 & 255;
			}
		} else {
			var position3 = (y13 * this1.getUInt16(0) + x13) * 4;
			position3 += vision_ds_Image.OFFSET;
			this1.b[position3] = color >> 24 & 255 & 255;
			this1.b[position3 + 1] = color >> 16 & 255 & 255;
			this1.b[position3 + 2] = color >> 8 & 255 & 255;
			this1.b[position3 + 3] = color & 255 & 255;
		}
		var x25 = centerX + x;
		var y25 = centerY - y;
		if(!(x25 >= 0 && y25 >= 0 && x25 < this1.getUInt16(0) && y25 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x2 = x25;
			var this_y2 = y25;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v2 = null;
			var tmp2;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
				tmp2 = x25 >= 0 && y25 >= 0 && x25 < this1.getUInt16(0) && y25 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has2 = false;
				var view4;
				if(v2 != null) {
					view4 = v2;
				} else {
					var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this4 = this1.b;
					var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view4 = new vision_ds_ImageView(_g6,_g7,_g8,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this4[view5]);
				}
				switch(view4.shape) {
				case 0:
					has2 = x25 < view4.x + view4.width && y25 < view4.y + view4.height && x25 >= view4.x && y25 >= view4.y;
					break;
				case 1:
					has2 = !(x25 < view4.x + view4.width && y25 < view4.y + view4.height && x25 >= view4.x && y25 >= view4.y);
					break;
				case 2:case 3:
					if(view4.width > view4.height) {
						var a4 = view4.width / 2;
						var b5 = view4.height / 2;
						var c4 = Math.sqrt(a4 * a4 - b5 * b5);
						var x26 = view4.x + view4.width / 2 - c4;
						var y26 = view4.y + view4.height / 2;
						if(y26 == null) {
							y26 = 0;
						}
						if(x26 == null) {
							x26 = 0;
						}
						var f1_x4 = x26;
						var f1_y4 = y26;
						var x27 = view4.x + view4.width / 2 + c4;
						var y27 = view4.y + view4.height / 2;
						if(y27 == null) {
							y27 = 0;
						}
						if(x27 == null) {
							x27 = 0;
						}
						var f2_x4 = x27;
						var f2_y4 = y27;
						var p_x4 = x25;
						var p_y4 = y25;
						var x28 = p_x4 - f1_x4;
						var y28 = p_y4 - f1_y4;
						var x29 = p_x4 - f2_x4;
						var y29 = p_y4 - f2_y4;
						has2 = Math.sqrt(x28 * x28 + y28 * y28) + Math.sqrt(x29 * x29 + y29 * y29) <= view4.width;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else if(view4.height > view4.width) {
						var a5 = view4.height / 2;
						var b6 = view4.width / 2;
						var c5 = Math.sqrt(a5 * a5 - b6 * b6);
						var x30 = view4.x + view4.width / 2;
						var y30 = view4.y + view4.height / 2 - c5;
						if(y30 == null) {
							y30 = 0;
						}
						if(x30 == null) {
							x30 = 0;
						}
						var f1_x5 = x30;
						var f1_y5 = y30;
						var x31 = view4.x + view4.width / 2;
						var y31 = view4.y + view4.height / 2 + c5;
						if(y31 == null) {
							y31 = 0;
						}
						if(x31 == null) {
							x31 = 0;
						}
						var f2_x5 = x31;
						var f2_y5 = y31;
						var p_x5 = x25;
						var p_y5 = y25;
						var x32 = p_x5 - f1_x5;
						var y32 = p_y5 - f1_y5;
						var x33 = p_x5 - f2_x5;
						var y33 = p_y5 - f2_y5;
						has2 = Math.sqrt(x32 * x32 + y32 * y32) + Math.sqrt(x33 * x33 + y33 * y33) <= view4.height;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else {
						var x34 = x25;
						var y34 = y25;
						if(y34 == null) {
							y34 = 0;
						}
						if(x34 == null) {
							x34 = 0;
						}
						var point1_x2 = x34;
						var point1_y2 = y34;
						var x35 = view4.x + view4.width / 2;
						var y35 = view4.y + view4.height / 2;
						if(y35 == null) {
							y35 = 0;
						}
						if(x35 == null) {
							x35 = 0;
						}
						var point2_x2 = x35;
						var point2_y2 = y35;
						var x36 = point2_x2 - point1_x2;
						var y36 = point2_y2 - point1_y2;
						has2 = Math.sqrt(x36 * x36 + y36 * y36) <= view4.width / 2;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					}
					break;
				case 4:
					has2 = Math.abs(x25 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y25 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
					break;
				case 5:
					has2 = !(Math.abs(x25 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y25 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
					break;
				}
				tmp2 = has2;
			}
			if(tmp2) {
				var position4 = (y25 * this1.getUInt16(0) + x25) * 4;
				position4 += vision_ds_Image.OFFSET;
				this1.b[position4] = color >> 24 & 255 & 255;
				this1.b[position4 + 1] = color >> 16 & 255 & 255;
				this1.b[position4 + 2] = color >> 8 & 255 & 255;
				this1.b[position4 + 3] = color & 255 & 255;
			}
		} else {
			var position5 = (y25 * this1.getUInt16(0) + x25) * 4;
			position5 += vision_ds_Image.OFFSET;
			this1.b[position5] = color >> 24 & 255 & 255;
			this1.b[position5 + 1] = color >> 16 & 255 & 255;
			this1.b[position5 + 2] = color >> 8 & 255 & 255;
			this1.b[position5 + 3] = color & 255 & 255;
		}
		var x37 = centerX - x;
		var y37 = centerY - y;
		if(!(x37 >= 0 && y37 >= 0 && x37 < this1.getUInt16(0) && y37 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x3 = x37;
			var this_y3 = y37;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v3 = null;
			var tmp3;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
				tmp3 = x37 >= 0 && y37 >= 0 && x37 < this1.getUInt16(0) && y37 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has3 = false;
				var view6;
				if(v3 != null) {
					view6 = v3;
				} else {
					var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g11 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this5 = this1.b;
					var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view6 = new vision_ds_ImageView(_g9,_g10,_g11,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this5[view7]);
				}
				switch(view6.shape) {
				case 0:
					has3 = x37 < view6.x + view6.width && y37 < view6.y + view6.height && x37 >= view6.x && y37 >= view6.y;
					break;
				case 1:
					has3 = !(x37 < view6.x + view6.width && y37 < view6.y + view6.height && x37 >= view6.x && y37 >= view6.y);
					break;
				case 2:case 3:
					if(view6.width > view6.height) {
						var a6 = view6.width / 2;
						var b7 = view6.height / 2;
						var c6 = Math.sqrt(a6 * a6 - b7 * b7);
						var x38 = view6.x + view6.width / 2 - c6;
						var y38 = view6.y + view6.height / 2;
						if(y38 == null) {
							y38 = 0;
						}
						if(x38 == null) {
							x38 = 0;
						}
						var f1_x6 = x38;
						var f1_y6 = y38;
						var x39 = view6.x + view6.width / 2 + c6;
						var y39 = view6.y + view6.height / 2;
						if(y39 == null) {
							y39 = 0;
						}
						if(x39 == null) {
							x39 = 0;
						}
						var f2_x6 = x39;
						var f2_y6 = y39;
						var p_x6 = x37;
						var p_y6 = y37;
						var x40 = p_x6 - f1_x6;
						var y40 = p_y6 - f1_y6;
						var x41 = p_x6 - f2_x6;
						var y41 = p_y6 - f2_y6;
						has3 = Math.sqrt(x40 * x40 + y40 * y40) + Math.sqrt(x41 * x41 + y41 * y41) <= view6.width;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else if(view6.height > view6.width) {
						var a7 = view6.height / 2;
						var b8 = view6.width / 2;
						var c7 = Math.sqrt(a7 * a7 - b8 * b8);
						var x42 = view6.x + view6.width / 2;
						var y42 = view6.y + view6.height / 2 - c7;
						if(y42 == null) {
							y42 = 0;
						}
						if(x42 == null) {
							x42 = 0;
						}
						var f1_x7 = x42;
						var f1_y7 = y42;
						var x43 = view6.x + view6.width / 2;
						var y43 = view6.y + view6.height / 2 + c7;
						if(y43 == null) {
							y43 = 0;
						}
						if(x43 == null) {
							x43 = 0;
						}
						var f2_x7 = x43;
						var f2_y7 = y43;
						var p_x7 = x37;
						var p_y7 = y37;
						var x44 = p_x7 - f1_x7;
						var y44 = p_y7 - f1_y7;
						var x45 = p_x7 - f2_x7;
						var y45 = p_y7 - f2_y7;
						has3 = Math.sqrt(x44 * x44 + y44 * y44) + Math.sqrt(x45 * x45 + y45 * y45) <= view6.height;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else {
						var x46 = x37;
						var y46 = y37;
						if(y46 == null) {
							y46 = 0;
						}
						if(x46 == null) {
							x46 = 0;
						}
						var point1_x3 = x46;
						var point1_y3 = y46;
						var x47 = view6.x + view6.width / 2;
						var y47 = view6.y + view6.height / 2;
						if(y47 == null) {
							y47 = 0;
						}
						if(x47 == null) {
							x47 = 0;
						}
						var point2_x3 = x47;
						var point2_y3 = y47;
						var x48 = point2_x3 - point1_x3;
						var y48 = point2_y3 - point1_y3;
						has3 = Math.sqrt(x48 * x48 + y48 * y48) <= view6.width / 2;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					}
					break;
				case 4:
					has3 = Math.abs(x37 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y37 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
					break;
				case 5:
					has3 = !(Math.abs(x37 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y37 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
					break;
				}
				tmp3 = has3;
			}
			if(tmp3) {
				var position6 = (y37 * this1.getUInt16(0) + x37) * 4;
				position6 += vision_ds_Image.OFFSET;
				this1.b[position6] = color >> 24 & 255 & 255;
				this1.b[position6 + 1] = color >> 16 & 255 & 255;
				this1.b[position6 + 2] = color >> 8 & 255 & 255;
				this1.b[position6 + 3] = color & 255 & 255;
			}
		} else {
			var position7 = (y37 * this1.getUInt16(0) + x37) * 4;
			position7 += vision_ds_Image.OFFSET;
			this1.b[position7] = color >> 24 & 255 & 255;
			this1.b[position7 + 1] = color >> 16 & 255 & 255;
			this1.b[position7 + 2] = color >> 8 & 255 & 255;
			this1.b[position7 + 3] = color & 255 & 255;
		}
		if(b) {
			++x;
			b = false;
		}
		if(ellipseError <= 0) {
			++y;
			stoppingY += twoASquare;
			ellipseError += yChange;
			yChange += twoASquare;
		}
		if(ellipseError > 0) {
			--x;
			stoppingX -= twoBSquare;
			ellipseError += xChange;
			xChange += twoBSquare;
		}
	}
	ellipseError = radiusY * radiusY / 4 - radiusX * radiusX * (radiusY - 0.5);
	x = 0;
	y = radiusY;
	xChange = radiusY * radiusY;
	yChange = radiusX * radiusX * (1 - 2 * radiusY);
	stoppingX = 0;
	stoppingY = twoASquare * radiusY;
	while(stoppingX <= stoppingY) {
		var x1 = centerX + x;
		var y1 = centerY + y;
		if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x1;
			var this_y = y1;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y;
					break;
				case 1:
					has = !(x1 < view.x + view.width && y1 < view.y + view.height && x1 >= view.x && y1 >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x2 = view.x + view.width / 2 - c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f1_x = x2;
						var f1_y = y2;
						var x3 = view.x + view.width / 2 + c;
						var y3 = view.y + view.height / 2;
						if(y3 == null) {
							y3 = 0;
						}
						if(x3 == null) {
							x3 = 0;
						}
						var f2_x = x3;
						var f2_y = y3;
						var p_x = x1;
						var p_y = y1;
						var x4 = p_x - f1_x;
						var y4 = p_y - f1_y;
						var x5 = p_x - f2_x;
						var y5 = p_y - f2_y;
						has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x6 = view.x + view.width / 2;
						var y6 = view.y + view.height / 2 - c1;
						if(y6 == null) {
							y6 = 0;
						}
						if(x6 == null) {
							x6 = 0;
						}
						var f1_x1 = x6;
						var f1_y1 = y6;
						var x7 = view.x + view.width / 2;
						var y7 = view.y + view.height / 2 + c1;
						if(y7 == null) {
							y7 = 0;
						}
						if(x7 == null) {
							x7 = 0;
						}
						var f2_x1 = x7;
						var f2_y1 = y7;
						var p_x1 = x1;
						var p_y1 = y1;
						var x8 = p_x1 - f1_x1;
						var y8 = p_y1 - f1_y1;
						var x9 = p_x1 - f2_x1;
						var y9 = p_y1 - f2_y1;
						has = Math.sqrt(x8 * x8 + y8 * y8) + Math.sqrt(x9 * x9 + y9 * y9) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x10 = x1;
						var y10 = y1;
						if(y10 == null) {
							y10 = 0;
						}
						if(x10 == null) {
							x10 = 0;
						}
						var point1_x = x10;
						var point1_y = y10;
						var x11 = view.x + view.width / 2;
						var y11 = view.y + view.height / 2;
						if(y11 == null) {
							y11 = 0;
						}
						if(x11 == null) {
							x11 = 0;
						}
						var point2_x = x11;
						var point2_y = y11;
						var x12 = point2_x - point1_x;
						var y12 = point2_y - point1_y;
						has = Math.sqrt(x12 * x12 + y12 * y12) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x1 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y1 - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y1 * this1.getUInt16(0) + x1) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255 & 255;
				this1.b[position + 1] = color >> 16 & 255 & 255;
				this1.b[position + 2] = color >> 8 & 255 & 255;
				this1.b[position + 3] = color & 255 & 255;
			}
		} else {
			var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
			position1 += vision_ds_Image.OFFSET;
			this1.b[position1] = color >> 24 & 255 & 255;
			this1.b[position1 + 1] = color >> 16 & 255 & 255;
			this1.b[position1 + 2] = color >> 8 & 255 & 255;
			this1.b[position1 + 3] = color & 255 & 255;
		}
		var x13 = centerX - x;
		var y13 = centerY + y;
		if(!(x13 >= 0 && y13 >= 0 && x13 < this1.getUInt16(0) && y13 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x1 = x13;
			var this_y1 = y13;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v1 = null;
			var tmp1;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
				tmp1 = x13 >= 0 && y13 >= 0 && x13 < this1.getUInt16(0) && y13 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has1 = false;
				var view2;
				if(v1 != null) {
					view2 = v1;
				} else {
					var _g3 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this3 = this1.b;
					var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view2 = new vision_ds_ImageView(_g3,_g4,_g5,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view3]);
				}
				switch(view2.shape) {
				case 0:
					has1 = x13 < view2.x + view2.width && y13 < view2.y + view2.height && x13 >= view2.x && y13 >= view2.y;
					break;
				case 1:
					has1 = !(x13 < view2.x + view2.width && y13 < view2.y + view2.height && x13 >= view2.x && y13 >= view2.y);
					break;
				case 2:case 3:
					if(view2.width > view2.height) {
						var a2 = view2.width / 2;
						var b2 = view2.height / 2;
						var c2 = Math.sqrt(a2 * a2 - b2 * b2);
						var x14 = view2.x + view2.width / 2 - c2;
						var y14 = view2.y + view2.height / 2;
						if(y14 == null) {
							y14 = 0;
						}
						if(x14 == null) {
							x14 = 0;
						}
						var f1_x2 = x14;
						var f1_y2 = y14;
						var x15 = view2.x + view2.width / 2 + c2;
						var y15 = view2.y + view2.height / 2;
						if(y15 == null) {
							y15 = 0;
						}
						if(x15 == null) {
							x15 = 0;
						}
						var f2_x2 = x15;
						var f2_y2 = y15;
						var p_x2 = x13;
						var p_y2 = y13;
						var x16 = p_x2 - f1_x2;
						var y16 = p_y2 - f1_y2;
						var x17 = p_x2 - f2_x2;
						var y17 = p_y2 - f2_y2;
						has1 = Math.sqrt(x16 * x16 + y16 * y16) + Math.sqrt(x17 * x17 + y17 * y17) <= view2.width;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else if(view2.height > view2.width) {
						var a3 = view2.height / 2;
						var b3 = view2.width / 2;
						var c3 = Math.sqrt(a3 * a3 - b3 * b3);
						var x18 = view2.x + view2.width / 2;
						var y18 = view2.y + view2.height / 2 - c3;
						if(y18 == null) {
							y18 = 0;
						}
						if(x18 == null) {
							x18 = 0;
						}
						var f1_x3 = x18;
						var f1_y3 = y18;
						var x19 = view2.x + view2.width / 2;
						var y19 = view2.y + view2.height / 2 + c3;
						if(y19 == null) {
							y19 = 0;
						}
						if(x19 == null) {
							x19 = 0;
						}
						var f2_x3 = x19;
						var f2_y3 = y19;
						var p_x3 = x13;
						var p_y3 = y13;
						var x20 = p_x3 - f1_x3;
						var y20 = p_y3 - f1_y3;
						var x21 = p_x3 - f2_x3;
						var y21 = p_y3 - f2_y3;
						has1 = Math.sqrt(x20 * x20 + y20 * y20) + Math.sqrt(x21 * x21 + y21 * y21) <= view2.height;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					} else {
						var x22 = x13;
						var y22 = y13;
						if(y22 == null) {
							y22 = 0;
						}
						if(x22 == null) {
							x22 = 0;
						}
						var point1_x1 = x22;
						var point1_y1 = y22;
						var x23 = view2.x + view2.width / 2;
						var y23 = view2.y + view2.height / 2;
						if(y23 == null) {
							y23 = 0;
						}
						if(x23 == null) {
							x23 = 0;
						}
						var point2_x1 = x23;
						var point2_y1 = y23;
						var x24 = point2_x1 - point1_x1;
						var y24 = point2_y1 - point1_y1;
						has1 = Math.sqrt(x24 * x24 + y24 * y24) <= view2.width / 2;
						if(view2.shape == 3) {
							has1 = !has1;
						}
					}
					break;
				case 4:
					has1 = Math.abs(x13 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y13 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
					break;
				case 5:
					has1 = !(Math.abs(x13 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y13 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
					break;
				}
				tmp1 = has1;
			}
			if(tmp1) {
				var position2 = (y13 * this1.getUInt16(0) + x13) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color >> 24 & 255 & 255;
				this1.b[position2 + 1] = color >> 16 & 255 & 255;
				this1.b[position2 + 2] = color >> 8 & 255 & 255;
				this1.b[position2 + 3] = color & 255 & 255;
			}
		} else {
			var position3 = (y13 * this1.getUInt16(0) + x13) * 4;
			position3 += vision_ds_Image.OFFSET;
			this1.b[position3] = color >> 24 & 255 & 255;
			this1.b[position3 + 1] = color >> 16 & 255 & 255;
			this1.b[position3 + 2] = color >> 8 & 255 & 255;
			this1.b[position3 + 3] = color & 255 & 255;
		}
		var x25 = centerX + x;
		var y25 = centerY - y;
		if(!(x25 >= 0 && y25 >= 0 && x25 < this1.getUInt16(0) && y25 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x2 = x25;
			var this_y2 = y25;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v2 = null;
			var tmp2;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
				tmp2 = x25 >= 0 && y25 >= 0 && x25 < this1.getUInt16(0) && y25 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has2 = false;
				var view4;
				if(v2 != null) {
					view4 = v2;
				} else {
					var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this4 = this1.b;
					var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view4 = new vision_ds_ImageView(_g6,_g7,_g8,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this4[view5]);
				}
				switch(view4.shape) {
				case 0:
					has2 = x25 < view4.x + view4.width && y25 < view4.y + view4.height && x25 >= view4.x && y25 >= view4.y;
					break;
				case 1:
					has2 = !(x25 < view4.x + view4.width && y25 < view4.y + view4.height && x25 >= view4.x && y25 >= view4.y);
					break;
				case 2:case 3:
					if(view4.width > view4.height) {
						var a4 = view4.width / 2;
						var b4 = view4.height / 2;
						var c4 = Math.sqrt(a4 * a4 - b4 * b4);
						var x26 = view4.x + view4.width / 2 - c4;
						var y26 = view4.y + view4.height / 2;
						if(y26 == null) {
							y26 = 0;
						}
						if(x26 == null) {
							x26 = 0;
						}
						var f1_x4 = x26;
						var f1_y4 = y26;
						var x27 = view4.x + view4.width / 2 + c4;
						var y27 = view4.y + view4.height / 2;
						if(y27 == null) {
							y27 = 0;
						}
						if(x27 == null) {
							x27 = 0;
						}
						var f2_x4 = x27;
						var f2_y4 = y27;
						var p_x4 = x25;
						var p_y4 = y25;
						var x28 = p_x4 - f1_x4;
						var y28 = p_y4 - f1_y4;
						var x29 = p_x4 - f2_x4;
						var y29 = p_y4 - f2_y4;
						has2 = Math.sqrt(x28 * x28 + y28 * y28) + Math.sqrt(x29 * x29 + y29 * y29) <= view4.width;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else if(view4.height > view4.width) {
						var a5 = view4.height / 2;
						var b5 = view4.width / 2;
						var c5 = Math.sqrt(a5 * a5 - b5 * b5);
						var x30 = view4.x + view4.width / 2;
						var y30 = view4.y + view4.height / 2 - c5;
						if(y30 == null) {
							y30 = 0;
						}
						if(x30 == null) {
							x30 = 0;
						}
						var f1_x5 = x30;
						var f1_y5 = y30;
						var x31 = view4.x + view4.width / 2;
						var y31 = view4.y + view4.height / 2 + c5;
						if(y31 == null) {
							y31 = 0;
						}
						if(x31 == null) {
							x31 = 0;
						}
						var f2_x5 = x31;
						var f2_y5 = y31;
						var p_x5 = x25;
						var p_y5 = y25;
						var x32 = p_x5 - f1_x5;
						var y32 = p_y5 - f1_y5;
						var x33 = p_x5 - f2_x5;
						var y33 = p_y5 - f2_y5;
						has2 = Math.sqrt(x32 * x32 + y32 * y32) + Math.sqrt(x33 * x33 + y33 * y33) <= view4.height;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					} else {
						var x34 = x25;
						var y34 = y25;
						if(y34 == null) {
							y34 = 0;
						}
						if(x34 == null) {
							x34 = 0;
						}
						var point1_x2 = x34;
						var point1_y2 = y34;
						var x35 = view4.x + view4.width / 2;
						var y35 = view4.y + view4.height / 2;
						if(y35 == null) {
							y35 = 0;
						}
						if(x35 == null) {
							x35 = 0;
						}
						var point2_x2 = x35;
						var point2_y2 = y35;
						var x36 = point2_x2 - point1_x2;
						var y36 = point2_y2 - point1_y2;
						has2 = Math.sqrt(x36 * x36 + y36 * y36) <= view4.width / 2;
						if(view4.shape == 3) {
							has2 = !has2;
						}
					}
					break;
				case 4:
					has2 = Math.abs(x25 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y25 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
					break;
				case 5:
					has2 = !(Math.abs(x25 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y25 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
					break;
				}
				tmp2 = has2;
			}
			if(tmp2) {
				var position4 = (y25 * this1.getUInt16(0) + x25) * 4;
				position4 += vision_ds_Image.OFFSET;
				this1.b[position4] = color >> 24 & 255 & 255;
				this1.b[position4 + 1] = color >> 16 & 255 & 255;
				this1.b[position4 + 2] = color >> 8 & 255 & 255;
				this1.b[position4 + 3] = color & 255 & 255;
			}
		} else {
			var position5 = (y25 * this1.getUInt16(0) + x25) * 4;
			position5 += vision_ds_Image.OFFSET;
			this1.b[position5] = color >> 24 & 255 & 255;
			this1.b[position5 + 1] = color >> 16 & 255 & 255;
			this1.b[position5 + 2] = color >> 8 & 255 & 255;
			this1.b[position5 + 3] = color & 255 & 255;
		}
		var x37 = centerX - x;
		var y37 = centerY - y;
		if(!(x37 >= 0 && y37 >= 0 && x37 < this1.getUInt16(0) && y37 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x3 = x37;
			var this_y3 = y37;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
		} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
			var v3 = null;
			var tmp3;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
				tmp3 = x37 >= 0 && y37 >= 0 && x37 < this1.getUInt16(0) && y37 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has3 = false;
				var view6;
				if(v3 != null) {
					view6 = v3;
				} else {
					var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g11 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this5 = this1.b;
					var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view6 = new vision_ds_ImageView(_g9,_g10,_g11,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this5[view7]);
				}
				switch(view6.shape) {
				case 0:
					has3 = x37 < view6.x + view6.width && y37 < view6.y + view6.height && x37 >= view6.x && y37 >= view6.y;
					break;
				case 1:
					has3 = !(x37 < view6.x + view6.width && y37 < view6.y + view6.height && x37 >= view6.x && y37 >= view6.y);
					break;
				case 2:case 3:
					if(view6.width > view6.height) {
						var a6 = view6.width / 2;
						var b6 = view6.height / 2;
						var c6 = Math.sqrt(a6 * a6 - b6 * b6);
						var x38 = view6.x + view6.width / 2 - c6;
						var y38 = view6.y + view6.height / 2;
						if(y38 == null) {
							y38 = 0;
						}
						if(x38 == null) {
							x38 = 0;
						}
						var f1_x6 = x38;
						var f1_y6 = y38;
						var x39 = view6.x + view6.width / 2 + c6;
						var y39 = view6.y + view6.height / 2;
						if(y39 == null) {
							y39 = 0;
						}
						if(x39 == null) {
							x39 = 0;
						}
						var f2_x6 = x39;
						var f2_y6 = y39;
						var p_x6 = x37;
						var p_y6 = y37;
						var x40 = p_x6 - f1_x6;
						var y40 = p_y6 - f1_y6;
						var x41 = p_x6 - f2_x6;
						var y41 = p_y6 - f2_y6;
						has3 = Math.sqrt(x40 * x40 + y40 * y40) + Math.sqrt(x41 * x41 + y41 * y41) <= view6.width;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else if(view6.height > view6.width) {
						var a7 = view6.height / 2;
						var b7 = view6.width / 2;
						var c7 = Math.sqrt(a7 * a7 - b7 * b7);
						var x42 = view6.x + view6.width / 2;
						var y42 = view6.y + view6.height / 2 - c7;
						if(y42 == null) {
							y42 = 0;
						}
						if(x42 == null) {
							x42 = 0;
						}
						var f1_x7 = x42;
						var f1_y7 = y42;
						var x43 = view6.x + view6.width / 2;
						var y43 = view6.y + view6.height / 2 + c7;
						if(y43 == null) {
							y43 = 0;
						}
						if(x43 == null) {
							x43 = 0;
						}
						var f2_x7 = x43;
						var f2_y7 = y43;
						var p_x7 = x37;
						var p_y7 = y37;
						var x44 = p_x7 - f1_x7;
						var y44 = p_y7 - f1_y7;
						var x45 = p_x7 - f2_x7;
						var y45 = p_y7 - f2_y7;
						has3 = Math.sqrt(x44 * x44 + y44 * y44) + Math.sqrt(x45 * x45 + y45 * y45) <= view6.height;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					} else {
						var x46 = x37;
						var y46 = y37;
						if(y46 == null) {
							y46 = 0;
						}
						if(x46 == null) {
							x46 = 0;
						}
						var point1_x3 = x46;
						var point1_y3 = y46;
						var x47 = view6.x + view6.width / 2;
						var y47 = view6.y + view6.height / 2;
						if(y47 == null) {
							y47 = 0;
						}
						if(x47 == null) {
							x47 = 0;
						}
						var point2_x3 = x47;
						var point2_y3 = y47;
						var x48 = point2_x3 - point1_x3;
						var y48 = point2_y3 - point1_y3;
						has3 = Math.sqrt(x48 * x48 + y48 * y48) <= view6.width / 2;
						if(view6.shape == 3) {
							has3 = !has3;
						}
					}
					break;
				case 4:
					has3 = Math.abs(x37 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y37 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
					break;
				case 5:
					has3 = !(Math.abs(x37 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y37 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
					break;
				}
				tmp3 = has3;
			}
			if(tmp3) {
				var position6 = (y37 * this1.getUInt16(0) + x37) * 4;
				position6 += vision_ds_Image.OFFSET;
				this1.b[position6] = color >> 24 & 255 & 255;
				this1.b[position6 + 1] = color >> 16 & 255 & 255;
				this1.b[position6 + 2] = color >> 8 & 255 & 255;
				this1.b[position6 + 3] = color & 255 & 255;
			}
		} else {
			var position7 = (y37 * this1.getUInt16(0) + x37) * 4;
			position7 += vision_ds_Image.OFFSET;
			this1.b[position7] = color >> 24 & 255 & 255;
			this1.b[position7 + 1] = color >> 16 & 255 & 255;
			this1.b[position7 + 2] = color >> 8 & 255 & 255;
			this1.b[position7 + 3] = color & 255 & 255;
		}
		if(ellipseError <= 0) {
			++x;
			stoppingX += twoBSquare;
			ellipseError += xChange;
			xChange += twoBSquare;
		}
		if(ellipseError > 0) {
			--y;
			stoppingY -= twoASquare;
			ellipseError += yChange;
			yChange += twoASquare;
		}
	}
};
vision_ds_Image.fillColorRecursive = function(this1,position,color) {
	var x = position.x;
	var y = position.y;
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position1 = (y * this1.getUInt16(0) + x) * 4;
	position1 += vision_ds_Image.OFFSET;
	var value = this1.b[position1] << 24 | this1.b[position1 + 1] << 16 | this1.b[position1 + 2] << 8 | this1.b[position1 + 3];
	if(value == null) {
		value = 0;
	}
	var originalColor = value;
	var expandFill = null;
	expandFill = function(x,y) {
		if(x < 0 || x >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) || y < 0 || y >= this1.getUInt16(0)) {
			return;
		}
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		if(value == color) {
			return;
		}
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		if(value == originalColor) {
			if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var expandFill1;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					expandFill1 = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2 + c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var p_x = x;
							var p_y = y;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a = view.height / 2;
							var b = view.width / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 - c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2 + c;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f2_x = x1;
							var f2_y = y1;
							var p_x = x;
							var p_y = y;
							var x1 = p_x - f1_x;
							var y1 = p_y - f1_y;
							var x2 = p_x - f2_x;
							var y2 = p_y - f2_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x1 = x;
							var y1 = y;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point1_x = x1;
							var point1_y = y1;
							var x1 = view.x + view.width / 2;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var point2_x = x1;
							var point2_y = y1;
							var x1 = point2_x - point1_x;
							var y1 = point2_y - point1_y;
							has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					expandFill1 = has;
				}
				if(expandFill1) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					this1.b[position] = color >> 24 & 255 & 255;
					this1.b[position + 1] = color >> 16 & 255 & 255;
					this1.b[position + 2] = color >> 8 & 255 & 255;
					this1.b[position + 3] = color & 255 & 255;
				}
			} else {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				this1.b[position] = color >> 24 & 255 & 255;
				this1.b[position + 1] = color >> 16 & 255 & 255;
				this1.b[position + 2] = color >> 8 & 255 & 255;
				this1.b[position + 3] = color & 255 & 255;
			}
			expandFill(x + 1,y);
			expandFill(x - 1,y);
			expandFill(x,y + 1);
			expandFill(x,y - 1);
		}
	};
	expandFill(position.x,position.y);
};
vision_ds_Image.fillColor = function(this1,position,color) {
	var queue = new haxe_ds_List();
	var x = position.x;
	var y = position.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p_x = x;
	var p_y = y;
	queue.push(new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0));
	var explored = [];
	var x = position.x;
	var y = position.y;
	if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
		var this_x = x;
		var this_y = y;
		throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
	}
	var position = (y * this1.getUInt16(0) + x) * 4;
	position += vision_ds_Image.OFFSET;
	var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
	if(value == null) {
		value = 0;
	}
	var originalColor = value;
	var pc = 0;
	while(queue.length > 0) {
		var v = queue.pop();
		explored.push(new haxe__$Int64__$_$_$Int64(v.x,v.y));
		var x = v.x + 1;
		var y = v.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p_x = x;
		var p_y = y;
		var point_x = p_x | 0;
		var point_y = p_y | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 997, className : "vision.ds._Image.Image_Impl_", methodName : "fillColor"});
			queue.clear();
		} else {
			var tmp;
			var x1 = point_x;
			var y1 = point_y;
			if(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var x2 = point_x;
				var y2 = point_y;
				if(!(x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x = x2;
					var this_y = y2;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y2 * this1.getUInt16(0) + x2) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				tmp = value == originalColor;
			} else {
				tmp = false;
			}
			if(tmp && explored.indexOf(new haxe__$Int64__$_$_$Int64(point_x,point_y)) == -1) {
				++pc;
				var x3 = point_x;
				var y3 = point_y;
				if(y3 == null) {
					y3 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var p_x1 = x3;
				var p_y1 = y3;
				queue.push(new vision_ds__$IntPoint2D_Impl(p_x1 | 0,p_y1 | 0));
				var x4 = point_x;
				var y4 = point_y;
				if(!(x4 >= 0 && y4 >= 0 && x4 < this1.getUInt16(0) && y4 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x1 = x4;
					var this_y1 = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v1 = null;
					var tmp1;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
						tmp1 = x4 >= 0 && y4 >= 0 && x4 < this1.getUInt16(0) && y4 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v1 != null) {
							view = v1;
						} else {
							var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this2 = this1.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x4 < view.x + view.width && y4 < view.y + view.height && x4 >= view.x && y4 >= view.y;
							break;
						case 1:
							has = !(x4 < view.x + view.width && y4 < view.y + view.height && x4 >= view.x && y4 >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x5 = view.x + view.width / 2 - c;
								var y5 = view.y + view.height / 2;
								if(y5 == null) {
									y5 = 0;
								}
								if(x5 == null) {
									x5 = 0;
								}
								var f1_x = x5;
								var f1_y = y5;
								var x6 = view.x + view.width / 2 + c;
								var y6 = view.y + view.height / 2;
								if(y6 == null) {
									y6 = 0;
								}
								if(x6 == null) {
									x6 = 0;
								}
								var f2_x = x6;
								var f2_y = y6;
								var p_x2 = x4;
								var p_y2 = y4;
								var x7 = p_x2 - f1_x;
								var y7 = p_y2 - f1_y;
								var x8 = p_x2 - f2_x;
								var y8 = p_y2 - f2_y;
								has = Math.sqrt(x7 * x7 + y7 * y7) + Math.sqrt(x8 * x8 + y8 * y8) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x9 = view.x + view.width / 2;
								var y9 = view.y + view.height / 2 - c1;
								if(y9 == null) {
									y9 = 0;
								}
								if(x9 == null) {
									x9 = 0;
								}
								var f1_x1 = x9;
								var f1_y1 = y9;
								var x10 = view.x + view.width / 2;
								var y10 = view.y + view.height / 2 + c1;
								if(y10 == null) {
									y10 = 0;
								}
								if(x10 == null) {
									x10 = 0;
								}
								var f2_x1 = x10;
								var f2_y1 = y10;
								var p_x3 = x4;
								var p_y3 = y4;
								var x11 = p_x3 - f1_x1;
								var y11 = p_y3 - f1_y1;
								var x12 = p_x3 - f2_x1;
								var y12 = p_y3 - f2_y1;
								has = Math.sqrt(x11 * x11 + y11 * y11) + Math.sqrt(x12 * x12 + y12 * y12) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x13 = x4;
								var y13 = y4;
								if(y13 == null) {
									y13 = 0;
								}
								if(x13 == null) {
									x13 = 0;
								}
								var point1_x = x13;
								var point1_y = y13;
								var x14 = view.x + view.width / 2;
								var y14 = view.y + view.height / 2;
								if(y14 == null) {
									y14 = 0;
								}
								if(x14 == null) {
									x14 = 0;
								}
								var point2_x = x14;
								var point2_y = y14;
								var x15 = point2_x - point1_x;
								var y15 = point2_y - point1_y;
								has = Math.sqrt(x15 * x15 + y15 * y15) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x4 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y4 - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x4 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y4 - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp1 = has;
					}
					if(tmp1) {
						var position1 = (y4 * this1.getUInt16(0) + x4) * 4;
						position1 += vision_ds_Image.OFFSET;
						this1.b[position1] = color >> 24 & 255 & 255;
						this1.b[position1 + 1] = color >> 16 & 255 & 255;
						this1.b[position1 + 2] = color >> 8 & 255 & 255;
						this1.b[position1 + 3] = color & 255 & 255;
					}
				} else {
					var position2 = (y4 * this1.getUInt16(0) + x4) * 4;
					position2 += vision_ds_Image.OFFSET;
					this1.b[position2] = color >> 24 & 255 & 255;
					this1.b[position2 + 1] = color >> 16 & 255 & 255;
					this1.b[position2 + 2] = color >> 8 & 255 & 255;
					this1.b[position2 + 3] = color & 255 & 255;
				}
			}
		}
		var x16 = v.x;
		var y16 = v.y + 1;
		if(y16 == null) {
			y16 = 0;
		}
		if(x16 == null) {
			x16 = 0;
		}
		var p_x4 = x16;
		var p_y4 = y16;
		var point_x1 = p_x4 | 0;
		var point_y1 = p_y4 | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 997, className : "vision.ds._Image.Image_Impl_", methodName : "fillColor"});
			queue.clear();
		} else {
			var tmp2;
			var x17 = point_x1;
			var y17 = point_y1;
			if(x17 >= 0 && y17 >= 0 && x17 < this1.getUInt16(0) && y17 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var x18 = point_x1;
				var y18 = point_y1;
				if(!(x18 >= 0 && y18 >= 0 && x18 < this1.getUInt16(0) && y18 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x2 = x18;
					var this_y2 = y18;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position3 = (y18 * this1.getUInt16(0) + x18) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value1 = this1.b[position3] << 24 | this1.b[position3 + 1] << 16 | this1.b[position3 + 2] << 8 | this1.b[position3 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				tmp2 = value1 == originalColor;
			} else {
				tmp2 = false;
			}
			if(tmp2 && explored.indexOf(new haxe__$Int64__$_$_$Int64(point_x1,point_y1)) == -1) {
				++pc;
				var x19 = point_x1;
				var y19 = point_y1;
				if(y19 == null) {
					y19 = 0;
				}
				if(x19 == null) {
					x19 = 0;
				}
				var p_x5 = x19;
				var p_y5 = y19;
				queue.push(new vision_ds__$IntPoint2D_Impl(p_x5 | 0,p_y5 | 0));
				var x20 = point_x1;
				var y20 = point_y1;
				if(!(x20 >= 0 && y20 >= 0 && x20 < this1.getUInt16(0) && y20 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x3 = x20;
					var this_y3 = y20;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v2 = null;
					var tmp3;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
						tmp3 = x20 >= 0 && y20 >= 0 && x20 < this1.getUInt16(0) && y20 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has1 = false;
						var view2;
						if(v2 != null) {
							view2 = v2;
						} else {
							var _g3 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this3 = this1.b;
							var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view2 = new vision_ds_ImageView(_g3,_g4,_g5,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view3]);
						}
						switch(view2.shape) {
						case 0:
							has1 = x20 < view2.x + view2.width && y20 < view2.y + view2.height && x20 >= view2.x && y20 >= view2.y;
							break;
						case 1:
							has1 = !(x20 < view2.x + view2.width && y20 < view2.y + view2.height && x20 >= view2.x && y20 >= view2.y);
							break;
						case 2:case 3:
							if(view2.width > view2.height) {
								var a2 = view2.width / 2;
								var b2 = view2.height / 2;
								var c2 = Math.sqrt(a2 * a2 - b2 * b2);
								var x21 = view2.x + view2.width / 2 - c2;
								var y21 = view2.y + view2.height / 2;
								if(y21 == null) {
									y21 = 0;
								}
								if(x21 == null) {
									x21 = 0;
								}
								var f1_x2 = x21;
								var f1_y2 = y21;
								var x22 = view2.x + view2.width / 2 + c2;
								var y22 = view2.y + view2.height / 2;
								if(y22 == null) {
									y22 = 0;
								}
								if(x22 == null) {
									x22 = 0;
								}
								var f2_x2 = x22;
								var f2_y2 = y22;
								var p_x6 = x20;
								var p_y6 = y20;
								var x23 = p_x6 - f1_x2;
								var y23 = p_y6 - f1_y2;
								var x24 = p_x6 - f2_x2;
								var y24 = p_y6 - f2_y2;
								has1 = Math.sqrt(x23 * x23 + y23 * y23) + Math.sqrt(x24 * x24 + y24 * y24) <= view2.width;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else if(view2.height > view2.width) {
								var a3 = view2.height / 2;
								var b3 = view2.width / 2;
								var c3 = Math.sqrt(a3 * a3 - b3 * b3);
								var x25 = view2.x + view2.width / 2;
								var y25 = view2.y + view2.height / 2 - c3;
								if(y25 == null) {
									y25 = 0;
								}
								if(x25 == null) {
									x25 = 0;
								}
								var f1_x3 = x25;
								var f1_y3 = y25;
								var x26 = view2.x + view2.width / 2;
								var y26 = view2.y + view2.height / 2 + c3;
								if(y26 == null) {
									y26 = 0;
								}
								if(x26 == null) {
									x26 = 0;
								}
								var f2_x3 = x26;
								var f2_y3 = y26;
								var p_x7 = x20;
								var p_y7 = y20;
								var x27 = p_x7 - f1_x3;
								var y27 = p_y7 - f1_y3;
								var x28 = p_x7 - f2_x3;
								var y28 = p_y7 - f2_y3;
								has1 = Math.sqrt(x27 * x27 + y27 * y27) + Math.sqrt(x28 * x28 + y28 * y28) <= view2.height;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else {
								var x29 = x20;
								var y29 = y20;
								if(y29 == null) {
									y29 = 0;
								}
								if(x29 == null) {
									x29 = 0;
								}
								var point1_x1 = x29;
								var point1_y1 = y29;
								var x30 = view2.x + view2.width / 2;
								var y30 = view2.y + view2.height / 2;
								if(y30 == null) {
									y30 = 0;
								}
								if(x30 == null) {
									x30 = 0;
								}
								var point2_x1 = x30;
								var point2_y1 = y30;
								var x31 = point2_x1 - point1_x1;
								var y31 = point2_y1 - point1_y1;
								has1 = Math.sqrt(x31 * x31 + y31 * y31) <= view2.width / 2;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							}
							break;
						case 4:
							has1 = Math.abs(x20 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y20 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
							break;
						case 5:
							has1 = !(Math.abs(x20 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y20 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
							break;
						}
						tmp3 = has1;
					}
					if(tmp3) {
						var position4 = (y20 * this1.getUInt16(0) + x20) * 4;
						position4 += vision_ds_Image.OFFSET;
						this1.b[position4] = color >> 24 & 255 & 255;
						this1.b[position4 + 1] = color >> 16 & 255 & 255;
						this1.b[position4 + 2] = color >> 8 & 255 & 255;
						this1.b[position4 + 3] = color & 255 & 255;
					}
				} else {
					var position5 = (y20 * this1.getUInt16(0) + x20) * 4;
					position5 += vision_ds_Image.OFFSET;
					this1.b[position5] = color >> 24 & 255 & 255;
					this1.b[position5 + 1] = color >> 16 & 255 & 255;
					this1.b[position5 + 2] = color >> 8 & 255 & 255;
					this1.b[position5 + 3] = color & 255 & 255;
				}
			}
		}
		var x32 = v.x - 1;
		var y32 = v.y;
		if(y32 == null) {
			y32 = 0;
		}
		if(x32 == null) {
			x32 = 0;
		}
		var p_x8 = x32;
		var p_y8 = y32;
		var point_x2 = p_x8 | 0;
		var point_y2 = p_y8 | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 997, className : "vision.ds._Image.Image_Impl_", methodName : "fillColor"});
			queue.clear();
		} else {
			var tmp4;
			var x33 = point_x2;
			var y33 = point_y2;
			if(x33 >= 0 && y33 >= 0 && x33 < this1.getUInt16(0) && y33 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var x34 = point_x2;
				var y34 = point_y2;
				if(!(x34 >= 0 && y34 >= 0 && x34 < this1.getUInt16(0) && y34 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x4 = x34;
					var this_y4 = y34;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position6 = (y34 * this1.getUInt16(0) + x34) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value2 = this1.b[position6] << 24 | this1.b[position6 + 1] << 16 | this1.b[position6 + 2] << 8 | this1.b[position6 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				tmp4 = value2 == originalColor;
			} else {
				tmp4 = false;
			}
			if(tmp4 && explored.indexOf(new haxe__$Int64__$_$_$Int64(point_x2,point_y2)) == -1) {
				++pc;
				var x35 = point_x2;
				var y35 = point_y2;
				if(y35 == null) {
					y35 = 0;
				}
				if(x35 == null) {
					x35 = 0;
				}
				var p_x9 = x35;
				var p_y9 = y35;
				queue.push(new vision_ds__$IntPoint2D_Impl(p_x9 | 0,p_y9 | 0));
				var x36 = point_x2;
				var y36 = point_y2;
				if(!(x36 >= 0 && y36 >= 0 && x36 < this1.getUInt16(0) && y36 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x5 = x36;
					var this_y5 = y36;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x5,this_y5)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v3 = null;
					var tmp5;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
						tmp5 = x36 >= 0 && y36 >= 0 && x36 < this1.getUInt16(0) && y36 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has2 = false;
						var view4;
						if(v3 != null) {
							view4 = v3;
						} else {
							var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this4 = this1.b;
							var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view4 = new vision_ds_ImageView(_g6,_g7,_g8,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this4[view5]);
						}
						switch(view4.shape) {
						case 0:
							has2 = x36 < view4.x + view4.width && y36 < view4.y + view4.height && x36 >= view4.x && y36 >= view4.y;
							break;
						case 1:
							has2 = !(x36 < view4.x + view4.width && y36 < view4.y + view4.height && x36 >= view4.x && y36 >= view4.y);
							break;
						case 2:case 3:
							if(view4.width > view4.height) {
								var a4 = view4.width / 2;
								var b4 = view4.height / 2;
								var c4 = Math.sqrt(a4 * a4 - b4 * b4);
								var x37 = view4.x + view4.width / 2 - c4;
								var y37 = view4.y + view4.height / 2;
								if(y37 == null) {
									y37 = 0;
								}
								if(x37 == null) {
									x37 = 0;
								}
								var f1_x4 = x37;
								var f1_y4 = y37;
								var x38 = view4.x + view4.width / 2 + c4;
								var y38 = view4.y + view4.height / 2;
								if(y38 == null) {
									y38 = 0;
								}
								if(x38 == null) {
									x38 = 0;
								}
								var f2_x4 = x38;
								var f2_y4 = y38;
								var p_x10 = x36;
								var p_y10 = y36;
								var x39 = p_x10 - f1_x4;
								var y39 = p_y10 - f1_y4;
								var x40 = p_x10 - f2_x4;
								var y40 = p_y10 - f2_y4;
								has2 = Math.sqrt(x39 * x39 + y39 * y39) + Math.sqrt(x40 * x40 + y40 * y40) <= view4.width;
								if(view4.shape == 3) {
									has2 = !has2;
								}
							} else if(view4.height > view4.width) {
								var a5 = view4.height / 2;
								var b5 = view4.width / 2;
								var c5 = Math.sqrt(a5 * a5 - b5 * b5);
								var x41 = view4.x + view4.width / 2;
								var y41 = view4.y + view4.height / 2 - c5;
								if(y41 == null) {
									y41 = 0;
								}
								if(x41 == null) {
									x41 = 0;
								}
								var f1_x5 = x41;
								var f1_y5 = y41;
								var x42 = view4.x + view4.width / 2;
								var y42 = view4.y + view4.height / 2 + c5;
								if(y42 == null) {
									y42 = 0;
								}
								if(x42 == null) {
									x42 = 0;
								}
								var f2_x5 = x42;
								var f2_y5 = y42;
								var p_x11 = x36;
								var p_y11 = y36;
								var x43 = p_x11 - f1_x5;
								var y43 = p_y11 - f1_y5;
								var x44 = p_x11 - f2_x5;
								var y44 = p_y11 - f2_y5;
								has2 = Math.sqrt(x43 * x43 + y43 * y43) + Math.sqrt(x44 * x44 + y44 * y44) <= view4.height;
								if(view4.shape == 3) {
									has2 = !has2;
								}
							} else {
								var x45 = x36;
								var y45 = y36;
								if(y45 == null) {
									y45 = 0;
								}
								if(x45 == null) {
									x45 = 0;
								}
								var point1_x2 = x45;
								var point1_y2 = y45;
								var x46 = view4.x + view4.width / 2;
								var y46 = view4.y + view4.height / 2;
								if(y46 == null) {
									y46 = 0;
								}
								if(x46 == null) {
									x46 = 0;
								}
								var point2_x2 = x46;
								var point2_y2 = y46;
								var x47 = point2_x2 - point1_x2;
								var y47 = point2_y2 - point1_y2;
								has2 = Math.sqrt(x47 * x47 + y47 * y47) <= view4.width / 2;
								if(view4.shape == 3) {
									has2 = !has2;
								}
							}
							break;
						case 4:
							has2 = Math.abs(x36 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y36 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
							break;
						case 5:
							has2 = !(Math.abs(x36 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y36 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
							break;
						}
						tmp5 = has2;
					}
					if(tmp5) {
						var position7 = (y36 * this1.getUInt16(0) + x36) * 4;
						position7 += vision_ds_Image.OFFSET;
						this1.b[position7] = color >> 24 & 255 & 255;
						this1.b[position7 + 1] = color >> 16 & 255 & 255;
						this1.b[position7 + 2] = color >> 8 & 255 & 255;
						this1.b[position7 + 3] = color & 255 & 255;
					}
				} else {
					var position8 = (y36 * this1.getUInt16(0) + x36) * 4;
					position8 += vision_ds_Image.OFFSET;
					this1.b[position8] = color >> 24 & 255 & 255;
					this1.b[position8 + 1] = color >> 16 & 255 & 255;
					this1.b[position8 + 2] = color >> 8 & 255 & 255;
					this1.b[position8 + 3] = color & 255 & 255;
				}
			}
		}
		var x48 = v.x;
		var y48 = v.y - 1;
		if(y48 == null) {
			y48 = 0;
		}
		if(x48 == null) {
			x48 = 0;
		}
		var p_x12 = x48;
		var p_y12 = y48;
		var point_x3 = p_x12 | 0;
		var point_y3 = p_y12 | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 997, className : "vision.ds._Image.Image_Impl_", methodName : "fillColor"});
			queue.clear();
		} else {
			var tmp6;
			var x49 = point_x3;
			var y49 = point_y3;
			if(x49 >= 0 && y49 >= 0 && x49 < this1.getUInt16(0) && y49 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var x50 = point_x3;
				var y50 = point_y3;
				if(!(x50 >= 0 && y50 >= 0 && x50 < this1.getUInt16(0) && y50 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x6 = x50;
					var this_y6 = y50;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position9 = (y50 * this1.getUInt16(0) + x50) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value3 = this1.b[position9] << 24 | this1.b[position9 + 1] << 16 | this1.b[position9 + 2] << 8 | this1.b[position9 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				tmp6 = value3 == originalColor;
			} else {
				tmp6 = false;
			}
			if(tmp6 && explored.indexOf(new haxe__$Int64__$_$_$Int64(point_x3,point_y3)) == -1) {
				++pc;
				var x51 = point_x3;
				var y51 = point_y3;
				if(y51 == null) {
					y51 = 0;
				}
				if(x51 == null) {
					x51 = 0;
				}
				var p_x13 = x51;
				var p_y13 = y51;
				queue.push(new vision_ds__$IntPoint2D_Impl(p_x13 | 0,p_y13 | 0));
				var x52 = point_x3;
				var y52 = point_y3;
				if(!(x52 >= 0 && y52 >= 0 && x52 < this1.getUInt16(0) && y52 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x7 = x52;
					var this_y7 = y52;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x7,this_y7)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v4 = null;
					var tmp7;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v4 == null) {
						tmp7 = x52 >= 0 && y52 >= 0 && x52 < this1.getUInt16(0) && y52 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has3 = false;
						var view6;
						if(v4 != null) {
							view6 = v4;
						} else {
							var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g11 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this5 = this1.b;
							var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view6 = new vision_ds_ImageView(_g9,_g10,_g11,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this5[view7]);
						}
						switch(view6.shape) {
						case 0:
							has3 = x52 < view6.x + view6.width && y52 < view6.y + view6.height && x52 >= view6.x && y52 >= view6.y;
							break;
						case 1:
							has3 = !(x52 < view6.x + view6.width && y52 < view6.y + view6.height && x52 >= view6.x && y52 >= view6.y);
							break;
						case 2:case 3:
							if(view6.width > view6.height) {
								var a6 = view6.width / 2;
								var b6 = view6.height / 2;
								var c6 = Math.sqrt(a6 * a6 - b6 * b6);
								var x53 = view6.x + view6.width / 2 - c6;
								var y53 = view6.y + view6.height / 2;
								if(y53 == null) {
									y53 = 0;
								}
								if(x53 == null) {
									x53 = 0;
								}
								var f1_x6 = x53;
								var f1_y6 = y53;
								var x54 = view6.x + view6.width / 2 + c6;
								var y54 = view6.y + view6.height / 2;
								if(y54 == null) {
									y54 = 0;
								}
								if(x54 == null) {
									x54 = 0;
								}
								var f2_x6 = x54;
								var f2_y6 = y54;
								var p_x14 = x52;
								var p_y14 = y52;
								var x55 = p_x14 - f1_x6;
								var y55 = p_y14 - f1_y6;
								var x56 = p_x14 - f2_x6;
								var y56 = p_y14 - f2_y6;
								has3 = Math.sqrt(x55 * x55 + y55 * y55) + Math.sqrt(x56 * x56 + y56 * y56) <= view6.width;
								if(view6.shape == 3) {
									has3 = !has3;
								}
							} else if(view6.height > view6.width) {
								var a7 = view6.height / 2;
								var b7 = view6.width / 2;
								var c7 = Math.sqrt(a7 * a7 - b7 * b7);
								var x57 = view6.x + view6.width / 2;
								var y57 = view6.y + view6.height / 2 - c7;
								if(y57 == null) {
									y57 = 0;
								}
								if(x57 == null) {
									x57 = 0;
								}
								var f1_x7 = x57;
								var f1_y7 = y57;
								var x58 = view6.x + view6.width / 2;
								var y58 = view6.y + view6.height / 2 + c7;
								if(y58 == null) {
									y58 = 0;
								}
								if(x58 == null) {
									x58 = 0;
								}
								var f2_x7 = x58;
								var f2_y7 = y58;
								var p_x15 = x52;
								var p_y15 = y52;
								var x59 = p_x15 - f1_x7;
								var y59 = p_y15 - f1_y7;
								var x60 = p_x15 - f2_x7;
								var y60 = p_y15 - f2_y7;
								has3 = Math.sqrt(x59 * x59 + y59 * y59) + Math.sqrt(x60 * x60 + y60 * y60) <= view6.height;
								if(view6.shape == 3) {
									has3 = !has3;
								}
							} else {
								var x61 = x52;
								var y61 = y52;
								if(y61 == null) {
									y61 = 0;
								}
								if(x61 == null) {
									x61 = 0;
								}
								var point1_x3 = x61;
								var point1_y3 = y61;
								var x62 = view6.x + view6.width / 2;
								var y62 = view6.y + view6.height / 2;
								if(y62 == null) {
									y62 = 0;
								}
								if(x62 == null) {
									x62 = 0;
								}
								var point2_x3 = x62;
								var point2_y3 = y62;
								var x63 = point2_x3 - point1_x3;
								var y63 = point2_y3 - point1_y3;
								has3 = Math.sqrt(x63 * x63 + y63 * y63) <= view6.width / 2;
								if(view6.shape == 3) {
									has3 = !has3;
								}
							}
							break;
						case 4:
							has3 = Math.abs(x52 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y52 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
							break;
						case 5:
							has3 = !(Math.abs(x52 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y52 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
							break;
						}
						tmp7 = has3;
					}
					if(tmp7) {
						var position10 = (y52 * this1.getUInt16(0) + x52) * 4;
						position10 += vision_ds_Image.OFFSET;
						this1.b[position10] = color >> 24 & 255 & 255;
						this1.b[position10 + 1] = color >> 16 & 255 & 255;
						this1.b[position10 + 2] = color >> 8 & 255 & 255;
						this1.b[position10 + 3] = color & 255 & 255;
					}
				} else {
					var position11 = (y52 * this1.getUInt16(0) + x52) * 4;
					position11 += vision_ds_Image.OFFSET;
					this1.b[position11] = color >> 24 & 255 & 255;
					this1.b[position11 + 1] = color >> 16 & 255 & 255;
					this1.b[position11 + 2] = color >> 8 & 255 & 255;
					this1.b[position11 + 3] = color & 255 & 255;
				}
			}
		}
	}
};
vision_ds_Image.fillUntilColor = function(this1,position,color,borderColor) {
	var queue = new haxe_ds_List();
	var x = position.x;
	var y = position.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p_x = x;
	var p_y = y;
	queue.push(new vision_ds__$IntPoint2D_Impl(p_x | 0,p_y | 0));
	var explored = [];
	var pc = 0;
	while(queue.length > 0) {
		var v = queue.pop();
		explored.push(new haxe__$Int64__$_$_$Int64(v.x,v.y));
		var x = v.x + 1;
		var y = v.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p_x = x;
		var p_y = y;
		var point_x = p_x | 0;
		var point_y = p_y | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 1033, className : "vision.ds._Image.Image_Impl_", methodName : "fillUntilColor"});
			queue.clear();
		} else {
			var x1 = point_x;
			var y1 = point_y;
			if(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				if(explored.indexOf(new haxe__$Int64__$_$_$Int64(point_x,point_y)) == -1) {
					var x2 = point_x;
					var y2 = point_y;
					if(!(x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
						var this_x = x2;
						var this_y = y2;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
					}
					var position = (y2 * this1.getUInt16(0) + x2) * 4;
					position += vision_ds_Image.OFFSET;
					var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
					if(value == null) {
						value = 0;
					}
					if(value != color) {
						var x3 = point_x;
						var y3 = point_y;
						if(!(x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
							var this_x1 = x3;
							var this_y1 = y3;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
						}
						var position1 = (y3 * this1.getUInt16(0) + x3) * 4;
						position1 += vision_ds_Image.OFFSET;
						var value1 = this1.b[position1] << 24 | this1.b[position1 + 1] << 16 | this1.b[position1 + 2] << 8 | this1.b[position1 + 3];
						if(value1 == null) {
							value1 = 0;
						}
						if(value1 != borderColor) {
							++pc;
							var x4 = point_x;
							var y4 = point_y;
							if(y4 == null) {
								y4 = 0;
							}
							if(x4 == null) {
								x4 = 0;
							}
							var p_x1 = x4;
							var p_y1 = y4;
							queue.push(new vision_ds__$IntPoint2D_Impl(p_x1 | 0,p_y1 | 0));
							var x5 = point_x;
							var y5 = point_y;
							if(!(x5 >= 0 && y5 >= 0 && x5 < this1.getUInt16(0) && y5 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
								var this_x2 = x5;
								var this_y2 = y5;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
							} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v1 = null;
								var tmp;
								if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
									tmp = x5 >= 0 && y5 >= 0 && x5 < this1.getUInt16(0) && y5 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
								} else {
									var has = false;
									var view;
									if(v1 != null) {
										view = v1;
									} else {
										var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var this2 = this1.b;
										var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
									}
									switch(view.shape) {
									case 0:
										has = x5 < view.x + view.width && y5 < view.y + view.height && x5 >= view.x && y5 >= view.y;
										break;
									case 1:
										has = !(x5 < view.x + view.width && y5 < view.y + view.height && x5 >= view.x && y5 >= view.y);
										break;
									case 2:case 3:
										if(view.width > view.height) {
											var a = view.width / 2;
											var b = view.height / 2;
											var c = Math.sqrt(a * a - b * b);
											var x6 = view.x + view.width / 2 - c;
											var y6 = view.y + view.height / 2;
											if(y6 == null) {
												y6 = 0;
											}
											if(x6 == null) {
												x6 = 0;
											}
											var f1_x = x6;
											var f1_y = y6;
											var x7 = view.x + view.width / 2 + c;
											var y7 = view.y + view.height / 2;
											if(y7 == null) {
												y7 = 0;
											}
											if(x7 == null) {
												x7 = 0;
											}
											var f2_x = x7;
											var f2_y = y7;
											var p_x2 = x5;
											var p_y2 = y5;
											var x8 = p_x2 - f1_x;
											var y8 = p_y2 - f1_y;
											var x9 = p_x2 - f2_x;
											var y9 = p_y2 - f2_y;
											has = Math.sqrt(x8 * x8 + y8 * y8) + Math.sqrt(x9 * x9 + y9 * y9) <= view.width;
											if(view.shape == 3) {
												has = !has;
											}
										} else if(view.height > view.width) {
											var a1 = view.height / 2;
											var b1 = view.width / 2;
											var c1 = Math.sqrt(a1 * a1 - b1 * b1);
											var x10 = view.x + view.width / 2;
											var y10 = view.y + view.height / 2 - c1;
											if(y10 == null) {
												y10 = 0;
											}
											if(x10 == null) {
												x10 = 0;
											}
											var f1_x1 = x10;
											var f1_y1 = y10;
											var x11 = view.x + view.width / 2;
											var y11 = view.y + view.height / 2 + c1;
											if(y11 == null) {
												y11 = 0;
											}
											if(x11 == null) {
												x11 = 0;
											}
											var f2_x1 = x11;
											var f2_y1 = y11;
											var p_x3 = x5;
											var p_y3 = y5;
											var x12 = p_x3 - f1_x1;
											var y12 = p_y3 - f1_y1;
											var x13 = p_x3 - f2_x1;
											var y13 = p_y3 - f2_y1;
											has = Math.sqrt(x12 * x12 + y12 * y12) + Math.sqrt(x13 * x13 + y13 * y13) <= view.height;
											if(view.shape == 3) {
												has = !has;
											}
										} else {
											var x14 = x5;
											var y14 = y5;
											if(y14 == null) {
												y14 = 0;
											}
											if(x14 == null) {
												x14 = 0;
											}
											var point1_x = x14;
											var point1_y = y14;
											var x15 = view.x + view.width / 2;
											var y15 = view.y + view.height / 2;
											if(y15 == null) {
												y15 = 0;
											}
											if(x15 == null) {
												x15 = 0;
											}
											var point2_x = x15;
											var point2_y = y15;
											var x16 = point2_x - point1_x;
											var y16 = point2_y - point1_y;
											has = Math.sqrt(x16 * x16 + y16 * y16) <= view.width / 2;
											if(view.shape == 3) {
												has = !has;
											}
										}
										break;
									case 4:
										has = Math.abs(x5 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y5 - view.y - view.height / 2) / (view.height / 2) <= 1;
										break;
									case 5:
										has = !(Math.abs(x5 - view.x - view.width / 2) / (view.width / 2) + Math.abs(y5 - view.y - view.height / 2) / (view.height / 2) <= 1);
										break;
									}
									tmp = has;
								}
								if(tmp) {
									var position2 = (y5 * this1.getUInt16(0) + x5) * 4;
									position2 += vision_ds_Image.OFFSET;
									this1.b[position2] = color >> 24 & 255 & 255;
									this1.b[position2 + 1] = color >> 16 & 255 & 255;
									this1.b[position2 + 2] = color >> 8 & 255 & 255;
									this1.b[position2 + 3] = color & 255 & 255;
								}
							} else {
								var position3 = (y5 * this1.getUInt16(0) + x5) * 4;
								position3 += vision_ds_Image.OFFSET;
								this1.b[position3] = color >> 24 & 255 & 255;
								this1.b[position3 + 1] = color >> 16 & 255 & 255;
								this1.b[position3 + 2] = color >> 8 & 255 & 255;
								this1.b[position3 + 3] = color & 255 & 255;
							}
						}
					}
				}
			}
		}
		var x17 = v.x;
		var y17 = v.y + 1;
		if(y17 == null) {
			y17 = 0;
		}
		if(x17 == null) {
			x17 = 0;
		}
		var p_x4 = x17;
		var p_y4 = y17;
		var point_x1 = p_x4 | 0;
		var point_y1 = p_y4 | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 1033, className : "vision.ds._Image.Image_Impl_", methodName : "fillUntilColor"});
			queue.clear();
		} else {
			var x18 = point_x1;
			var y18 = point_y1;
			if(x18 >= 0 && y18 >= 0 && x18 < this1.getUInt16(0) && y18 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				if(explored.indexOf(new haxe__$Int64__$_$_$Int64(point_x1,point_y1)) == -1) {
					var x19 = point_x1;
					var y19 = point_y1;
					if(!(x19 >= 0 && y19 >= 0 && x19 < this1.getUInt16(0) && y19 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
						var this_x3 = x19;
						var this_y3 = y19;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
					}
					var position4 = (y19 * this1.getUInt16(0) + x19) * 4;
					position4 += vision_ds_Image.OFFSET;
					var value2 = this1.b[position4] << 24 | this1.b[position4 + 1] << 16 | this1.b[position4 + 2] << 8 | this1.b[position4 + 3];
					if(value2 == null) {
						value2 = 0;
					}
					if(value2 != color) {
						var x20 = point_x1;
						var y20 = point_y1;
						if(!(x20 >= 0 && y20 >= 0 && x20 < this1.getUInt16(0) && y20 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
							var this_x4 = x20;
							var this_y4 = y20;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x4,this_y4)));
						}
						var position5 = (y20 * this1.getUInt16(0) + x20) * 4;
						position5 += vision_ds_Image.OFFSET;
						var value3 = this1.b[position5] << 24 | this1.b[position5 + 1] << 16 | this1.b[position5 + 2] << 8 | this1.b[position5 + 3];
						if(value3 == null) {
							value3 = 0;
						}
						if(value3 != borderColor) {
							++pc;
							var x21 = point_x1;
							var y21 = point_y1;
							if(y21 == null) {
								y21 = 0;
							}
							if(x21 == null) {
								x21 = 0;
							}
							var p_x5 = x21;
							var p_y5 = y21;
							queue.push(new vision_ds__$IntPoint2D_Impl(p_x5 | 0,p_y5 | 0));
							var x22 = point_x1;
							var y22 = point_y1;
							if(!(x22 >= 0 && y22 >= 0 && x22 < this1.getUInt16(0) && y22 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
								var this_x5 = x22;
								var this_y5 = y22;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x5,this_y5)));
							} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v2 = null;
								var tmp1;
								if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v2 == null) {
									tmp1 = x22 >= 0 && y22 >= 0 && x22 < this1.getUInt16(0) && y22 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
								} else {
									var has1 = false;
									var view2;
									if(v2 != null) {
										view2 = v2;
									} else {
										var _g3 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var this3 = this1.b;
										var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view2 = new vision_ds_ImageView(_g3,_g4,_g5,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view3]);
									}
									switch(view2.shape) {
									case 0:
										has1 = x22 < view2.x + view2.width && y22 < view2.y + view2.height && x22 >= view2.x && y22 >= view2.y;
										break;
									case 1:
										has1 = !(x22 < view2.x + view2.width && y22 < view2.y + view2.height && x22 >= view2.x && y22 >= view2.y);
										break;
									case 2:case 3:
										if(view2.width > view2.height) {
											var a2 = view2.width / 2;
											var b2 = view2.height / 2;
											var c2 = Math.sqrt(a2 * a2 - b2 * b2);
											var x23 = view2.x + view2.width / 2 - c2;
											var y23 = view2.y + view2.height / 2;
											if(y23 == null) {
												y23 = 0;
											}
											if(x23 == null) {
												x23 = 0;
											}
											var f1_x2 = x23;
											var f1_y2 = y23;
											var x24 = view2.x + view2.width / 2 + c2;
											var y24 = view2.y + view2.height / 2;
											if(y24 == null) {
												y24 = 0;
											}
											if(x24 == null) {
												x24 = 0;
											}
											var f2_x2 = x24;
											var f2_y2 = y24;
											var p_x6 = x22;
											var p_y6 = y22;
											var x25 = p_x6 - f1_x2;
											var y25 = p_y6 - f1_y2;
											var x26 = p_x6 - f2_x2;
											var y26 = p_y6 - f2_y2;
											has1 = Math.sqrt(x25 * x25 + y25 * y25) + Math.sqrt(x26 * x26 + y26 * y26) <= view2.width;
											if(view2.shape == 3) {
												has1 = !has1;
											}
										} else if(view2.height > view2.width) {
											var a3 = view2.height / 2;
											var b3 = view2.width / 2;
											var c3 = Math.sqrt(a3 * a3 - b3 * b3);
											var x27 = view2.x + view2.width / 2;
											var y27 = view2.y + view2.height / 2 - c3;
											if(y27 == null) {
												y27 = 0;
											}
											if(x27 == null) {
												x27 = 0;
											}
											var f1_x3 = x27;
											var f1_y3 = y27;
											var x28 = view2.x + view2.width / 2;
											var y28 = view2.y + view2.height / 2 + c3;
											if(y28 == null) {
												y28 = 0;
											}
											if(x28 == null) {
												x28 = 0;
											}
											var f2_x3 = x28;
											var f2_y3 = y28;
											var p_x7 = x22;
											var p_y7 = y22;
											var x29 = p_x7 - f1_x3;
											var y29 = p_y7 - f1_y3;
											var x30 = p_x7 - f2_x3;
											var y30 = p_y7 - f2_y3;
											has1 = Math.sqrt(x29 * x29 + y29 * y29) + Math.sqrt(x30 * x30 + y30 * y30) <= view2.height;
											if(view2.shape == 3) {
												has1 = !has1;
											}
										} else {
											var x31 = x22;
											var y31 = y22;
											if(y31 == null) {
												y31 = 0;
											}
											if(x31 == null) {
												x31 = 0;
											}
											var point1_x1 = x31;
											var point1_y1 = y31;
											var x32 = view2.x + view2.width / 2;
											var y32 = view2.y + view2.height / 2;
											if(y32 == null) {
												y32 = 0;
											}
											if(x32 == null) {
												x32 = 0;
											}
											var point2_x1 = x32;
											var point2_y1 = y32;
											var x33 = point2_x1 - point1_x1;
											var y33 = point2_y1 - point1_y1;
											has1 = Math.sqrt(x33 * x33 + y33 * y33) <= view2.width / 2;
											if(view2.shape == 3) {
												has1 = !has1;
											}
										}
										break;
									case 4:
										has1 = Math.abs(x22 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y22 - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
										break;
									case 5:
										has1 = !(Math.abs(x22 - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y22 - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
										break;
									}
									tmp1 = has1;
								}
								if(tmp1) {
									var position6 = (y22 * this1.getUInt16(0) + x22) * 4;
									position6 += vision_ds_Image.OFFSET;
									this1.b[position6] = color >> 24 & 255 & 255;
									this1.b[position6 + 1] = color >> 16 & 255 & 255;
									this1.b[position6 + 2] = color >> 8 & 255 & 255;
									this1.b[position6 + 3] = color & 255 & 255;
								}
							} else {
								var position7 = (y22 * this1.getUInt16(0) + x22) * 4;
								position7 += vision_ds_Image.OFFSET;
								this1.b[position7] = color >> 24 & 255 & 255;
								this1.b[position7 + 1] = color >> 16 & 255 & 255;
								this1.b[position7 + 2] = color >> 8 & 255 & 255;
								this1.b[position7 + 3] = color & 255 & 255;
							}
						}
					}
				}
			}
		}
		var x34 = v.x - 1;
		var y34 = v.y;
		if(y34 == null) {
			y34 = 0;
		}
		if(x34 == null) {
			x34 = 0;
		}
		var p_x8 = x34;
		var p_y8 = y34;
		var point_x2 = p_x8 | 0;
		var point_y2 = p_y8 | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 1033, className : "vision.ds._Image.Image_Impl_", methodName : "fillUntilColor"});
			queue.clear();
		} else {
			var x35 = point_x2;
			var y35 = point_y2;
			if(x35 >= 0 && y35 >= 0 && x35 < this1.getUInt16(0) && y35 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				if(explored.indexOf(new haxe__$Int64__$_$_$Int64(point_x2,point_y2)) == -1) {
					var x36 = point_x2;
					var y36 = point_y2;
					if(!(x36 >= 0 && y36 >= 0 && x36 < this1.getUInt16(0) && y36 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
						var this_x6 = x36;
						var this_y6 = y36;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x6,this_y6)));
					}
					var position8 = (y36 * this1.getUInt16(0) + x36) * 4;
					position8 += vision_ds_Image.OFFSET;
					var value4 = this1.b[position8] << 24 | this1.b[position8 + 1] << 16 | this1.b[position8 + 2] << 8 | this1.b[position8 + 3];
					if(value4 == null) {
						value4 = 0;
					}
					if(value4 != color) {
						var x37 = point_x2;
						var y37 = point_y2;
						if(!(x37 >= 0 && y37 >= 0 && x37 < this1.getUInt16(0) && y37 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
							var this_x7 = x37;
							var this_y7 = y37;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x7,this_y7)));
						}
						var position9 = (y37 * this1.getUInt16(0) + x37) * 4;
						position9 += vision_ds_Image.OFFSET;
						var value5 = this1.b[position9] << 24 | this1.b[position9 + 1] << 16 | this1.b[position9 + 2] << 8 | this1.b[position9 + 3];
						if(value5 == null) {
							value5 = 0;
						}
						if(value5 != borderColor) {
							++pc;
							var x38 = point_x2;
							var y38 = point_y2;
							if(y38 == null) {
								y38 = 0;
							}
							if(x38 == null) {
								x38 = 0;
							}
							var p_x9 = x38;
							var p_y9 = y38;
							queue.push(new vision_ds__$IntPoint2D_Impl(p_x9 | 0,p_y9 | 0));
							var x39 = point_x2;
							var y39 = point_y2;
							if(!(x39 >= 0 && y39 >= 0 && x39 < this1.getUInt16(0) && y39 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
								var this_x8 = x39;
								var this_y8 = y39;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x8,this_y8)));
							} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v3 = null;
								var tmp2;
								if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v3 == null) {
									tmp2 = x39 >= 0 && y39 >= 0 && x39 < this1.getUInt16(0) && y39 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
								} else {
									var has2 = false;
									var view4;
									if(v3 != null) {
										view4 = v3;
									} else {
										var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var this4 = this1.b;
										var view5 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view4 = new vision_ds_ImageView(_g6,_g7,_g8,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this4[view5]);
									}
									switch(view4.shape) {
									case 0:
										has2 = x39 < view4.x + view4.width && y39 < view4.y + view4.height && x39 >= view4.x && y39 >= view4.y;
										break;
									case 1:
										has2 = !(x39 < view4.x + view4.width && y39 < view4.y + view4.height && x39 >= view4.x && y39 >= view4.y);
										break;
									case 2:case 3:
										if(view4.width > view4.height) {
											var a4 = view4.width / 2;
											var b4 = view4.height / 2;
											var c4 = Math.sqrt(a4 * a4 - b4 * b4);
											var x40 = view4.x + view4.width / 2 - c4;
											var y40 = view4.y + view4.height / 2;
											if(y40 == null) {
												y40 = 0;
											}
											if(x40 == null) {
												x40 = 0;
											}
											var f1_x4 = x40;
											var f1_y4 = y40;
											var x41 = view4.x + view4.width / 2 + c4;
											var y41 = view4.y + view4.height / 2;
											if(y41 == null) {
												y41 = 0;
											}
											if(x41 == null) {
												x41 = 0;
											}
											var f2_x4 = x41;
											var f2_y4 = y41;
											var p_x10 = x39;
											var p_y10 = y39;
											var x42 = p_x10 - f1_x4;
											var y42 = p_y10 - f1_y4;
											var x43 = p_x10 - f2_x4;
											var y43 = p_y10 - f2_y4;
											has2 = Math.sqrt(x42 * x42 + y42 * y42) + Math.sqrt(x43 * x43 + y43 * y43) <= view4.width;
											if(view4.shape == 3) {
												has2 = !has2;
											}
										} else if(view4.height > view4.width) {
											var a5 = view4.height / 2;
											var b5 = view4.width / 2;
											var c5 = Math.sqrt(a5 * a5 - b5 * b5);
											var x44 = view4.x + view4.width / 2;
											var y44 = view4.y + view4.height / 2 - c5;
											if(y44 == null) {
												y44 = 0;
											}
											if(x44 == null) {
												x44 = 0;
											}
											var f1_x5 = x44;
											var f1_y5 = y44;
											var x45 = view4.x + view4.width / 2;
											var y45 = view4.y + view4.height / 2 + c5;
											if(y45 == null) {
												y45 = 0;
											}
											if(x45 == null) {
												x45 = 0;
											}
											var f2_x5 = x45;
											var f2_y5 = y45;
											var p_x11 = x39;
											var p_y11 = y39;
											var x46 = p_x11 - f1_x5;
											var y46 = p_y11 - f1_y5;
											var x47 = p_x11 - f2_x5;
											var y47 = p_y11 - f2_y5;
											has2 = Math.sqrt(x46 * x46 + y46 * y46) + Math.sqrt(x47 * x47 + y47 * y47) <= view4.height;
											if(view4.shape == 3) {
												has2 = !has2;
											}
										} else {
											var x48 = x39;
											var y48 = y39;
											if(y48 == null) {
												y48 = 0;
											}
											if(x48 == null) {
												x48 = 0;
											}
											var point1_x2 = x48;
											var point1_y2 = y48;
											var x49 = view4.x + view4.width / 2;
											var y49 = view4.y + view4.height / 2;
											if(y49 == null) {
												y49 = 0;
											}
											if(x49 == null) {
												x49 = 0;
											}
											var point2_x2 = x49;
											var point2_y2 = y49;
											var x50 = point2_x2 - point1_x2;
											var y50 = point2_y2 - point1_y2;
											has2 = Math.sqrt(x50 * x50 + y50 * y50) <= view4.width / 2;
											if(view4.shape == 3) {
												has2 = !has2;
											}
										}
										break;
									case 4:
										has2 = Math.abs(x39 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y39 - view4.y - view4.height / 2) / (view4.height / 2) <= 1;
										break;
									case 5:
										has2 = !(Math.abs(x39 - view4.x - view4.width / 2) / (view4.width / 2) + Math.abs(y39 - view4.y - view4.height / 2) / (view4.height / 2) <= 1);
										break;
									}
									tmp2 = has2;
								}
								if(tmp2) {
									var position10 = (y39 * this1.getUInt16(0) + x39) * 4;
									position10 += vision_ds_Image.OFFSET;
									this1.b[position10] = color >> 24 & 255 & 255;
									this1.b[position10 + 1] = color >> 16 & 255 & 255;
									this1.b[position10 + 2] = color >> 8 & 255 & 255;
									this1.b[position10 + 3] = color & 255 & 255;
								}
							} else {
								var position11 = (y39 * this1.getUInt16(0) + x39) * 4;
								position11 += vision_ds_Image.OFFSET;
								this1.b[position11] = color >> 24 & 255 & 255;
								this1.b[position11 + 1] = color >> 16 & 255 & 255;
								this1.b[position11 + 2] = color >> 8 & 255 & 255;
								this1.b[position11 + 3] = color & 255 & 255;
							}
						}
					}
				}
			}
		}
		var x51 = v.x;
		var y51 = v.y - 1;
		if(y51 == null) {
			y51 = 0;
		}
		if(x51 == null) {
			x51 = 0;
		}
		var p_x12 = x51;
		var p_y12 = y51;
		var point_x3 = p_x12 | 0;
		var point_y3 = p_y12 | 0;
		if(pc >= 100000) {
			haxe_Log.trace("fillColor: too much iterations",{ fileName : "vision/ds/Image.hx", lineNumber : 1033, className : "vision.ds._Image.Image_Impl_", methodName : "fillUntilColor"});
			queue.clear();
		} else {
			var x52 = point_x3;
			var y52 = point_y3;
			if(x52 >= 0 && y52 >= 0 && x52 < this1.getUInt16(0) && y52 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				if(explored.indexOf(new haxe__$Int64__$_$_$Int64(point_x3,point_y3)) == -1) {
					var x53 = point_x3;
					var y53 = point_y3;
					if(!(x53 >= 0 && y53 >= 0 && x53 < this1.getUInt16(0) && y53 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
						var this_x9 = x53;
						var this_y9 = y53;
						throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x9,this_y9)));
					}
					var position12 = (y53 * this1.getUInt16(0) + x53) * 4;
					position12 += vision_ds_Image.OFFSET;
					var value6 = this1.b[position12] << 24 | this1.b[position12 + 1] << 16 | this1.b[position12 + 2] << 8 | this1.b[position12 + 3];
					if(value6 == null) {
						value6 = 0;
					}
					if(value6 != color) {
						var x54 = point_x3;
						var y54 = point_y3;
						if(!(x54 >= 0 && y54 >= 0 && x54 < this1.getUInt16(0) && y54 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
							var this_x10 = x54;
							var this_y10 = y54;
							throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x10,this_y10)));
						}
						var position13 = (y54 * this1.getUInt16(0) + x54) * 4;
						position13 += vision_ds_Image.OFFSET;
						var value7 = this1.b[position13] << 24 | this1.b[position13 + 1] << 16 | this1.b[position13 + 2] << 8 | this1.b[position13 + 3];
						if(value7 == null) {
							value7 = 0;
						}
						if(value7 != borderColor) {
							++pc;
							var x55 = point_x3;
							var y55 = point_y3;
							if(y55 == null) {
								y55 = 0;
							}
							if(x55 == null) {
								x55 = 0;
							}
							var p_x13 = x55;
							var p_y13 = y55;
							queue.push(new vision_ds__$IntPoint2D_Impl(p_x13 | 0,p_y13 | 0));
							var x56 = point_x3;
							var y56 = point_y3;
							if(!(x56 >= 0 && y56 >= 0 && x56 < this1.getUInt16(0) && y56 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
								var this_x11 = x56;
								var this_y11 = y56;
								throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x11,this_y11)));
							} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
								var v4 = null;
								var tmp3;
								if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v4 == null) {
									tmp3 = x56 >= 0 && y56 >= 0 && x56 < this1.getUInt16(0) && y56 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
								} else {
									var has3 = false;
									var view6;
									if(v4 != null) {
										view6 = v4;
									} else {
										var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
										var _g10 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
										var _g11 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
										var this5 = this1.b;
										var view7 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
										view6 = new vision_ds_ImageView(_g9,_g10,_g11,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this5[view7]);
									}
									switch(view6.shape) {
									case 0:
										has3 = x56 < view6.x + view6.width && y56 < view6.y + view6.height && x56 >= view6.x && y56 >= view6.y;
										break;
									case 1:
										has3 = !(x56 < view6.x + view6.width && y56 < view6.y + view6.height && x56 >= view6.x && y56 >= view6.y);
										break;
									case 2:case 3:
										if(view6.width > view6.height) {
											var a6 = view6.width / 2;
											var b6 = view6.height / 2;
											var c6 = Math.sqrt(a6 * a6 - b6 * b6);
											var x57 = view6.x + view6.width / 2 - c6;
											var y57 = view6.y + view6.height / 2;
											if(y57 == null) {
												y57 = 0;
											}
											if(x57 == null) {
												x57 = 0;
											}
											var f1_x6 = x57;
											var f1_y6 = y57;
											var x58 = view6.x + view6.width / 2 + c6;
											var y58 = view6.y + view6.height / 2;
											if(y58 == null) {
												y58 = 0;
											}
											if(x58 == null) {
												x58 = 0;
											}
											var f2_x6 = x58;
											var f2_y6 = y58;
											var p_x14 = x56;
											var p_y14 = y56;
											var x59 = p_x14 - f1_x6;
											var y59 = p_y14 - f1_y6;
											var x60 = p_x14 - f2_x6;
											var y60 = p_y14 - f2_y6;
											has3 = Math.sqrt(x59 * x59 + y59 * y59) + Math.sqrt(x60 * x60 + y60 * y60) <= view6.width;
											if(view6.shape == 3) {
												has3 = !has3;
											}
										} else if(view6.height > view6.width) {
											var a7 = view6.height / 2;
											var b7 = view6.width / 2;
											var c7 = Math.sqrt(a7 * a7 - b7 * b7);
											var x61 = view6.x + view6.width / 2;
											var y61 = view6.y + view6.height / 2 - c7;
											if(y61 == null) {
												y61 = 0;
											}
											if(x61 == null) {
												x61 = 0;
											}
											var f1_x7 = x61;
											var f1_y7 = y61;
											var x62 = view6.x + view6.width / 2;
											var y62 = view6.y + view6.height / 2 + c7;
											if(y62 == null) {
												y62 = 0;
											}
											if(x62 == null) {
												x62 = 0;
											}
											var f2_x7 = x62;
											var f2_y7 = y62;
											var p_x15 = x56;
											var p_y15 = y56;
											var x63 = p_x15 - f1_x7;
											var y63 = p_y15 - f1_y7;
											var x64 = p_x15 - f2_x7;
											var y64 = p_y15 - f2_y7;
											has3 = Math.sqrt(x63 * x63 + y63 * y63) + Math.sqrt(x64 * x64 + y64 * y64) <= view6.height;
											if(view6.shape == 3) {
												has3 = !has3;
											}
										} else {
											var x65 = x56;
											var y65 = y56;
											if(y65 == null) {
												y65 = 0;
											}
											if(x65 == null) {
												x65 = 0;
											}
											var point1_x3 = x65;
											var point1_y3 = y65;
											var x66 = view6.x + view6.width / 2;
											var y66 = view6.y + view6.height / 2;
											if(y66 == null) {
												y66 = 0;
											}
											if(x66 == null) {
												x66 = 0;
											}
											var point2_x3 = x66;
											var point2_y3 = y66;
											var x67 = point2_x3 - point1_x3;
											var y67 = point2_y3 - point1_y3;
											has3 = Math.sqrt(x67 * x67 + y67 * y67) <= view6.width / 2;
											if(view6.shape == 3) {
												has3 = !has3;
											}
										}
										break;
									case 4:
										has3 = Math.abs(x56 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y56 - view6.y - view6.height / 2) / (view6.height / 2) <= 1;
										break;
									case 5:
										has3 = !(Math.abs(x56 - view6.x - view6.width / 2) / (view6.width / 2) + Math.abs(y56 - view6.y - view6.height / 2) / (view6.height / 2) <= 1);
										break;
									}
									tmp3 = has3;
								}
								if(tmp3) {
									var position14 = (y56 * this1.getUInt16(0) + x56) * 4;
									position14 += vision_ds_Image.OFFSET;
									this1.b[position14] = color >> 24 & 255 & 255;
									this1.b[position14 + 1] = color >> 16 & 255 & 255;
									this1.b[position14 + 2] = color >> 8 & 255 & 255;
									this1.b[position14 + 3] = color & 255 & 255;
								}
							} else {
								var position15 = (y56 * this1.getUInt16(0) + x56) * 4;
								position15 += vision_ds_Image.OFFSET;
								this1.b[position15] = color >> 24 & 255 & 255;
								this1.b[position15 + 1] = color >> 16 & 255 & 255;
								this1.b[position15 + 2] = color >> 8 & 255 & 255;
								this1.b[position15 + 3] = color & 255 & 255;
							}
						}
					}
				}
			}
		}
	}
};
vision_ds_Image.clone = function(this1) {
	if(this1 == null) {
		haxe_Log.trace("Warning: Cloning a null image",{ fileName : "vision/ds/Image.hx", lineNumber : 1068, className : "vision.ds._Image.Image_Impl_", methodName : "clone"});
	}
	return this1.sub(0,this1.length);
};
vision_ds_Image.mirror = function(this1) {
	var inter = vision_ds_Image.clone(this1);
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var color = value;
				var x1 = inter.getUInt16(0) - x - 1;
				var position1 = (y * inter.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var color1 = value1;
				var position2 = (y * this1.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color1 >> 24 & 255 & 255;
				this1.b[position2 + 1] = color1 >> 16 & 255 & 255;
				this1.b[position2 + 2] = color1 >> 8 & 255 & 255;
				this1.b[position2 + 3] = color1 & 255 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var p_x = x;
							var p_y = y;
							var x3 = p_x - f1_x;
							var y3 = p_y - f1_y;
							var x4 = p_x - f2_x;
							var y4 = p_y - f2_y;
							has = Math.sqrt(x3 * x3 + y3 * y3) + Math.sqrt(x4 * x4 + y4 * y4) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x5 = view.x + view.width / 2;
							var y5 = view.y + view.height / 2 - c1;
							if(y5 == null) {
								y5 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f1_x1 = x5;
							var f1_y1 = y5;
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 + c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f2_x1 = x6;
							var f2_y1 = y6;
							var p_x1 = x;
							var p_y1 = y;
							var x7 = p_x1 - f1_x1;
							var y7 = p_y1 - f1_y1;
							var x8 = p_x1 - f2_x1;
							var y8 = p_y1 - f2_y1;
							has = Math.sqrt(x7 * x7 + y7 * y7) + Math.sqrt(x8 * x8 + y8 * y8) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x9 = x;
							var y9 = y;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var point1_x = x9;
							var point1_y = y9;
							var x10 = view.x + view.width / 2;
							var y10 = view.y + view.height / 2;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point2_x = x10;
							var point2_y = y10;
							var x11 = point2_x - point1_x;
							var y11 = point2_y - point1_y;
							has = Math.sqrt(x11 * x11 + y11 * y11) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var color = value;
					var x12 = inter.getUInt16(0) - x - 1;
					var position1 = (y * inter.getUInt16(0) + x12) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var color1 = value1;
					var position2 = (y * this1.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					this1.b[position2] = color1 >> 24 & 255 & 255;
					this1.b[position2 + 1] = color1 >> 16 & 255 & 255;
					this1.b[position2 + 2] = color1 >> 8 & 255 & 255;
					this1.b[position2 + 3] = color1 & 255 & 255;
				}
			}
		}
	}
	return this1;
};
vision_ds_Image.flip = function(this1) {
	var inter = vision_ds_Image.clone(this1);
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var color = value;
				var position1 = ((Math.ceil((inter.length - vision_ds_Image.OFFSET) / (inter.getUInt16(0) * 4)) - y - 1) * inter.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var color1 = value1;
				var position2 = (y * this1.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				this1.b[position2] = color1 >> 24 & 255 & 255;
				this1.b[position2 + 1] = color1 >> 16 & 255 & 255;
				this1.b[position2 + 2] = color1 >> 8 & 255 & 255;
				this1.b[position2 + 3] = color1 & 255 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var this2 = this1.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var p_x = x;
							var p_y = y;
							var x3 = p_x - f1_x;
							var y3 = p_y - f1_y;
							var x4 = p_x - f2_x;
							var y4 = p_y - f2_y;
							has = Math.sqrt(x3 * x3 + y3 * y3) + Math.sqrt(x4 * x4 + y4 * y4) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x5 = view.x + view.width / 2;
							var y5 = view.y + view.height / 2 - c1;
							if(y5 == null) {
								y5 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f1_x1 = x5;
							var f1_y1 = y5;
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 + c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f2_x1 = x6;
							var f2_y1 = y6;
							var p_x1 = x;
							var p_y1 = y;
							var x7 = p_x1 - f1_x1;
							var y7 = p_y1 - f1_y1;
							var x8 = p_x1 - f2_x1;
							var y8 = p_y1 - f2_y1;
							has = Math.sqrt(x7 * x7 + y7 * y7) + Math.sqrt(x8 * x8 + y8 * y8) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x9 = x;
							var y9 = y;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var point1_x = x9;
							var point1_y = y9;
							var x10 = view.x + view.width / 2;
							var y10 = view.y + view.height / 2;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point2_x = x10;
							var point2_y = y10;
							var x11 = point2_x - point1_x;
							var y11 = point2_y - point1_y;
							has = Math.sqrt(x11 * x11 + y11 * y11) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * this1.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var color = value;
					var position1 = ((Math.ceil((inter.length - vision_ds_Image.OFFSET) / (inter.getUInt16(0) * 4)) - y - 1) * inter.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = inter.b[position1] << 24 | inter.b[position1 + 1] << 16 | inter.b[position1 + 2] << 8 | inter.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var color1 = value1;
					var position2 = (y * this1.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					this1.b[position2] = color1 >> 24 & 255 & 255;
					this1.b[position2 + 1] = color1 >> 16 & 255 & 255;
					this1.b[position2 + 2] = color1 >> 8 & 255 & 255;
					this1.b[position2 + 3] = color1 & 255 & 255;
				}
			}
		}
	}
	return this1;
};
vision_ds_Image.stamp = function(this1,X,Y,image) {
	var _g = X;
	var _g1 = X + image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = Y;
		var _g3 = Y + Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = ((y - Y) * image.getUInt16(0) + (x - X)) * 4;
			position += vision_ds_Image.OFFSET;
			var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
			if(value == null) {
				value = 0;
			}
			var color = value;
			if(x < 0 || x >= this1.getUInt16(0) || y < 0 || y >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
			} else if((color >> 24 & 255) / 255 == 1) {
				if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this2 = this1.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x1 = view.x + view.width / 2 - c;
								var y1 = view.y + view.height / 2;
								if(y1 == null) {
									y1 = 0;
								}
								if(x1 == null) {
									x1 = 0;
								}
								var f1_x = x1;
								var f1_y = y1;
								var x2 = view.x + view.width / 2 + c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f2_x = x2;
								var f2_y = y2;
								var p_x = x;
								var p_y = y;
								var x3 = p_x - f1_x;
								var y3 = p_y - f1_y;
								var x4 = p_x - f2_x;
								var y4 = p_y - f2_y;
								has = Math.sqrt(x3 * x3 + y3 * y3) + Math.sqrt(x4 * x4 + y4 * y4) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x5 = view.x + view.width / 2;
								var y5 = view.y + view.height / 2 - c1;
								if(y5 == null) {
									y5 = 0;
								}
								if(x5 == null) {
									x5 = 0;
								}
								var f1_x1 = x5;
								var f1_y1 = y5;
								var x6 = view.x + view.width / 2;
								var y6 = view.y + view.height / 2 + c1;
								if(y6 == null) {
									y6 = 0;
								}
								if(x6 == null) {
									x6 = 0;
								}
								var f2_x1 = x6;
								var f2_y1 = y6;
								var p_x1 = x;
								var p_y1 = y;
								var x7 = p_x1 - f1_x1;
								var y7 = p_y1 - f1_y1;
								var x8 = p_x1 - f2_x1;
								var y8 = p_y1 - f2_y1;
								has = Math.sqrt(x7 * x7 + y7 * y7) + Math.sqrt(x8 * x8 + y8 * y8) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x9 = x;
								var y9 = y;
								if(y9 == null) {
									y9 = 0;
								}
								if(x9 == null) {
									x9 = 0;
								}
								var point1_x = x9;
								var point1_y = y9;
								var x10 = view.x + view.width / 2;
								var y10 = view.y + view.height / 2;
								if(y10 == null) {
									y10 = 0;
								}
								if(x10 == null) {
									x10 = 0;
								}
								var point2_x = x10;
								var point2_y = y10;
								var x11 = point2_x - point1_x;
								var y11 = point2_y - point1_y;
								has = Math.sqrt(x11 * x11 + y11 * y11) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position1 = (y * this1.getUInt16(0) + x) * 4;
						position1 += vision_ds_Image.OFFSET;
						this1.b[position1] = color >> 24 & 255 & 255;
						this1.b[position1 + 1] = color >> 16 & 255 & 255;
						this1.b[position1 + 2] = color >> 8 & 255 & 255;
						this1.b[position1 + 3] = color & 255 & 255;
					}
				} else {
					var position2 = (y * this1.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					this1.b[position2] = color >> 24 & 255 & 255;
					this1.b[position2 + 1] = color >> 16 & 255 & 255;
					this1.b[position2 + 2] = color >> 8 & 255 & 255;
					this1.b[position2 + 3] = color & 255 & 255;
				}
			} else {
				if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x2 = x;
					var this_y2 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position3 = (y * this1.getUInt16(0) + x) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value1 = this1.b[position3] << 24 | this1.b[position3 + 1] << 16 | this1.b[position3 + 2] << 8 | this1.b[position3 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var oldColor = value1;
				var Red = (color >> 16 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 16 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
				var Green = (color >> 8 & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor >> 8 & 255) / 255 * (1 - (color >> 24 & 255) / 255);
				var Blue = (color & 255) / 255 * ((color >> 24 & 255) / 255) + (oldColor & 255) / 255 * (1 - (color >> 24 & 255) / 255);
				var Alpha = (oldColor >> 24 & 255) / 255 + (1 - (oldColor >> 24 & 255) / 255) * ((color >> 24 & 255) / 255);
				if(Alpha == null) {
					Alpha = 1;
				}
				var color1 = 0;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 1;
				}
				var value2 = Math.round(Red * 255);
				color1 &= -16711681;
				color1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
				var value3 = Math.round(Green * 255);
				color1 &= -65281;
				color1 |= (value3 > 255 ? 255 : value3 < 0 ? 0 : value3) << 8;
				var value4 = Math.round(Blue * 255);
				color1 &= -256;
				color1 |= value4 > 255 ? 255 : value4 < 0 ? 0 : value4;
				var value5 = Math.round(Alpha1 * 255);
				color1 &= 16777215;
				color1 |= (value5 > 255 ? 255 : value5 < 0 ? 0 : value5) << 24;
				var newColor = color1;
				if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x3 = x;
					var this_y3 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
				} else if(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v1 = null;
					var tmp1;
					if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v1 == null) {
						tmp1 = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
					} else {
						var has1 = false;
						var view2;
						if(v1 != null) {
							view2 = v1;
						} else {
							var _g7 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g8 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g9 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var this3 = this1.b;
							var view3 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view2 = new vision_ds_ImageView(_g7,_g8,_g9,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this3[view3]);
						}
						switch(view2.shape) {
						case 0:
							has1 = x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y;
							break;
						case 1:
							has1 = !(x < view2.x + view2.width && y < view2.y + view2.height && x >= view2.x && y >= view2.y);
							break;
						case 2:case 3:
							if(view2.width > view2.height) {
								var a2 = view2.width / 2;
								var b2 = view2.height / 2;
								var c2 = Math.sqrt(a2 * a2 - b2 * b2);
								var x12 = view2.x + view2.width / 2 - c2;
								var y12 = view2.y + view2.height / 2;
								if(y12 == null) {
									y12 = 0;
								}
								if(x12 == null) {
									x12 = 0;
								}
								var f1_x2 = x12;
								var f1_y2 = y12;
								var x13 = view2.x + view2.width / 2 + c2;
								var y13 = view2.y + view2.height / 2;
								if(y13 == null) {
									y13 = 0;
								}
								if(x13 == null) {
									x13 = 0;
								}
								var f2_x2 = x13;
								var f2_y2 = y13;
								var p_x2 = x;
								var p_y2 = y;
								var x14 = p_x2 - f1_x2;
								var y14 = p_y2 - f1_y2;
								var x15 = p_x2 - f2_x2;
								var y15 = p_y2 - f2_y2;
								has1 = Math.sqrt(x14 * x14 + y14 * y14) + Math.sqrt(x15 * x15 + y15 * y15) <= view2.width;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else if(view2.height > view2.width) {
								var a3 = view2.height / 2;
								var b3 = view2.width / 2;
								var c3 = Math.sqrt(a3 * a3 - b3 * b3);
								var x16 = view2.x + view2.width / 2;
								var y16 = view2.y + view2.height / 2 - c3;
								if(y16 == null) {
									y16 = 0;
								}
								if(x16 == null) {
									x16 = 0;
								}
								var f1_x3 = x16;
								var f1_y3 = y16;
								var x17 = view2.x + view2.width / 2;
								var y17 = view2.y + view2.height / 2 + c3;
								if(y17 == null) {
									y17 = 0;
								}
								if(x17 == null) {
									x17 = 0;
								}
								var f2_x3 = x17;
								var f2_y3 = y17;
								var p_x3 = x;
								var p_y3 = y;
								var x18 = p_x3 - f1_x3;
								var y18 = p_y3 - f1_y3;
								var x19 = p_x3 - f2_x3;
								var y19 = p_y3 - f2_y3;
								has1 = Math.sqrt(x18 * x18 + y18 * y18) + Math.sqrt(x19 * x19 + y19 * y19) <= view2.height;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							} else {
								var x20 = x;
								var y20 = y;
								if(y20 == null) {
									y20 = 0;
								}
								if(x20 == null) {
									x20 = 0;
								}
								var point1_x1 = x20;
								var point1_y1 = y20;
								var x21 = view2.x + view2.width / 2;
								var y21 = view2.y + view2.height / 2;
								if(y21 == null) {
									y21 = 0;
								}
								if(x21 == null) {
									x21 = 0;
								}
								var point2_x1 = x21;
								var point2_y1 = y21;
								var x22 = point2_x1 - point1_x1;
								var y22 = point2_y1 - point1_y1;
								has1 = Math.sqrt(x22 * x22 + y22 * y22) <= view2.width / 2;
								if(view2.shape == 3) {
									has1 = !has1;
								}
							}
							break;
						case 4:
							has1 = Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1;
							break;
						case 5:
							has1 = !(Math.abs(x - view2.x - view2.width / 2) / (view2.width / 2) + Math.abs(y - view2.y - view2.height / 2) / (view2.height / 2) <= 1);
							break;
						}
						tmp1 = has1;
					}
					if(tmp1) {
						var position4 = (y * this1.getUInt16(0) + x) * 4;
						position4 += vision_ds_Image.OFFSET;
						this1.b[position4] = newColor >> 24 & 255 & 255;
						this1.b[position4 + 1] = newColor >> 16 & 255 & 255;
						this1.b[position4 + 2] = newColor >> 8 & 255 & 255;
						this1.b[position4 + 3] = newColor & 255 & 255;
					}
				} else {
					var position5 = (y * this1.getUInt16(0) + x) * 4;
					position5 += vision_ds_Image.OFFSET;
					this1.b[position5] = newColor >> 24 & 255 & 255;
					this1.b[position5 + 1] = newColor >> 16 & 255 & 255;
					this1.b[position5 + 2] = newColor >> 8 & 255 & 255;
					this1.b[position5 + 3] = newColor & 255 & 255;
				}
			}
		}
	}
	return this1;
};
vision_ds_Image.resize = function(this1,newWidth,newHeight,algorithm) {
	if(newHeight == null) {
		newHeight = -1;
	}
	if(newWidth == null) {
		newWidth = -1;
	}
	if(newWidth == -1 && newHeight == -1) {
		return this1;
	}
	if(newWidth == -1) {
		newWidth = newHeight / Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) * this1.getUInt16(0) | 0;
	} else if(newHeight == -1) {
		newHeight = newWidth / this1.getUInt16(0) * Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) | 0;
	}
	haxe_Log.trace(newWidth,{ fileName : "vision/ds/Image.hx", lineNumber : 1128, className : "vision.ds._Image.Image_Impl_", methodName : "resize", customParams : [newHeight]});
	if(algorithm == null) {
		algorithm = vision_tools_ImageTools.defaultResizeAlgorithm;
	}
	switch(algorithm) {
	case 0:
		var length = newWidth * newHeight * 4 + vision_ds_Image.OFFSET;
		var this2 = new haxe_io_Bytes(new ArrayBuffer(length));
		this2.fill(0,length,0);
		var this3 = this2;
		this3.setUInt16(0,newWidth);
		this3.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
		this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
		this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,0);
		this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,0);
		this3.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
		var i = vision_ds_Image.OFFSET;
		while(i < this3.length) {
			this3.b[i] = 0;
			this3.b[i + 1] = 0;
			this3.b[i + 2] = 0;
			this3.b[i + 3] = 0;
			i += 4;
		}
		var image = this3;
		var xMultiplier = this1.getUInt16(0) / image.getUInt16(0);
		var yMultiplier = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) / Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		var _g = 0;
		var _g1 = image.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * image.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var color = value;
				var x1 = Math.floor(x * xMultiplier);
				var y1 = Math.floor(y * yMultiplier);
				if(!(x1 >= 0 && y1 >= 0 && x1 < this1.getUInt16(0) && y1 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x = x1;
					var this_y = y1;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
				}
				var position1 = (y1 * this1.getUInt16(0) + x1) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = this1.b[position1] << 24 | this1.b[position1 + 1] << 16 | this1.b[position1 + 2] << 8 | this1.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var color1 = value1;
				if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
					var this_x1 = x;
					var this_y1 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x1,this_y1)));
				} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp;
					if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var image1 = image.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x2 = view.x + view.width / 2 - c;
								var y2 = view.y + view.height / 2;
								if(y2 == null) {
									y2 = 0;
								}
								if(x2 == null) {
									x2 = 0;
								}
								var f1_x = x2;
								var f1_y = y2;
								var x3 = view.x + view.width / 2 + c;
								var y3 = view.y + view.height / 2;
								if(y3 == null) {
									y3 = 0;
								}
								if(x3 == null) {
									x3 = 0;
								}
								var f2_x = x3;
								var f2_y = y3;
								var p_x = x;
								var p_y = y;
								var x4 = p_x - f1_x;
								var y4 = p_y - f1_y;
								var x5 = p_x - f2_x;
								var y5 = p_y - f2_y;
								has = Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x6 = view.x + view.width / 2;
								var y6 = view.y + view.height / 2 - c1;
								if(y6 == null) {
									y6 = 0;
								}
								if(x6 == null) {
									x6 = 0;
								}
								var f1_x1 = x6;
								var f1_y1 = y6;
								var x7 = view.x + view.width / 2;
								var y7 = view.y + view.height / 2 + c1;
								if(y7 == null) {
									y7 = 0;
								}
								if(x7 == null) {
									x7 = 0;
								}
								var f2_x1 = x7;
								var f2_y1 = y7;
								var p_x1 = x;
								var p_y1 = y;
								var x8 = p_x1 - f1_x1;
								var y8 = p_y1 - f1_y1;
								var x9 = p_x1 - f2_x1;
								var y9 = p_y1 - f2_y1;
								has = Math.sqrt(x8 * x8 + y8 * y8) + Math.sqrt(x9 * x9 + y9 * y9) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x10 = x;
								var y10 = y;
								if(y10 == null) {
									y10 = 0;
								}
								if(x10 == null) {
									x10 = 0;
								}
								var point1_x = x10;
								var point1_y = y10;
								var x11 = view.x + view.width / 2;
								var y11 = view.y + view.height / 2;
								if(y11 == null) {
									y11 = 0;
								}
								if(x11 == null) {
									x11 = 0;
								}
								var point2_x = x11;
								var point2_y = y11;
								var x12 = point2_x - point1_x;
								var y12 = point2_y - point1_y;
								has = Math.sqrt(x12 * x12 + y12 * y12) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp = has;
					}
					if(tmp) {
						var position2 = (y * image.getUInt16(0) + x) * 4;
						position2 += vision_ds_Image.OFFSET;
						image.b[position2] = color1 >> 24 & 255 & 255;
						image.b[position2 + 1] = color1 >> 16 & 255 & 255;
						image.b[position2 + 2] = color1 >> 8 & 255 & 255;
						image.b[position2 + 3] = color1 & 255 & 255;
					}
				} else {
					var position3 = (y * image.getUInt16(0) + x) * 4;
					position3 += vision_ds_Image.OFFSET;
					image.b[position3] = color1 >> 24 & 255 & 255;
					image.b[position3 + 1] = color1 >> 16 & 255 & 255;
					image.b[position3 + 2] = color1 >> 8 & 255 & 255;
					image.b[position3 + 3] = color1 & 255 & 255;
				}
			}
		}
		this1 = image;
		break;
	case 1:
		this1 = vision_algorithms_BilinearInterpolation.interpolate(this1,newWidth,newHeight);
		break;
	case 2:
		throw haxe_Exception.thrown(new vision_exceptions_Unimplemented("Bicubic Interpolation"));
	}
	return this1;
};
vision_ds_Image.rotate = function(this1,angle,degrees,expandImageBounds) {
	if(expandImageBounds == null) {
		expandImageBounds = true;
	}
	if(degrees == null) {
		degrees = true;
	}
	var x = this1.getUInt16(0) / 2;
	var y = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) / 2;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var center_x = x;
	var center_y = y;
	var radians = degrees ? angle * Math.PI / 180 : angle;
	var sinTheta = Math.sin(angle);
	var cosTheta = Math.cos(angle);
	var newWidth = expandImageBounds ? Math.ceil(Math.abs(this1.getUInt16(0) * cosTheta) + Math.abs(Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) * sinTheta)) : this1.getUInt16(0);
	var newHeight = expandImageBounds ? Math.ceil(Math.abs(this1.getUInt16(0) * sinTheta) + Math.abs(Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) * cosTheta)) : Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
	var length = newWidth * newHeight * 4 + vision_ds_Image.OFFSET;
	var this2 = new haxe_io_Bytes(new ArrayBuffer(length));
	this2.fill(0,length,0);
	var this3 = this2;
	this3.setUInt16(0,newWidth);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,0);
	this3.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,0);
	this3.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this3.length) {
		this3.b[i] = 0;
		this3.b[i + 1] = 0;
		this3.b[i + 2] = 0;
		this3.b[i + 3] = 0;
		i += 4;
	}
	var rotatedImage = this3;
	var centerX = newWidth / 2;
	var centerY = newHeight / 2;
	var originalCenterX = this1.getUInt16(0) / 2;
	var originalCenterY = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) / 2;
	var _g = 0;
	var _g1 = rotatedImage.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((rotatedImage.length - vision_ds_Image.OFFSET) / (rotatedImage.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var rotatedX = cosTheta * (x - centerX) + sinTheta * (y - centerY) + originalCenterX;
			var rotatedY = -sinTheta * (x - centerX) + cosTheta * (y - centerY) + originalCenterY;
			if(rotatedX >= 0 && rotatedX < this1.getUInt16(0) && rotatedY >= 0 && rotatedY < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
				var x1 = rotatedX;
				var y1 = rotatedY;
				var tmp;
				var x2 = Math.ceil(x1);
				var y2 = Math.ceil(y1);
				if(x2 >= 0 && y2 >= 0 && x2 < this1.getUInt16(0) && y2 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4))) {
					var x3 = Math.floor(x1);
					var y3 = Math.floor(y1);
					tmp = !(x3 >= 0 && y3 >= 0 && x3 < this1.getUInt16(0) && y3 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)));
				} else {
					tmp = true;
				}
				if(tmp) {
					x1 = vision_tools_MathTools.boundFloat(x1,0,this1.getUInt16(0) - 1);
					y1 = vision_tools_MathTools.boundFloat(y1,0,Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1);
				}
				var yFraction = y1 - (y1 | 0);
				var xFraction = x1 - (x1 | 0);
				var x4 = 1 - yFraction;
				var x5 = x1 | 0;
				var y4 = y1 | 0;
				if(!(x5 >= 0 && y4 >= 0 && x5 < this1.getUInt16(0) && y4 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x = x5;
					var this_y = y4;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
				}
				var position = (y4 * this1.getUInt16(0) + x5) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var x6 = (1 - xFraction) * (value >> 16 & 255);
				var ma = this1.getUInt16(0) - 1;
				var values = [(x1 | 0) + 1,0];
				var max = values[0];
				var _g4 = 0;
				var _g5 = values.length;
				while(_g4 < _g5) {
					var i = _g4++;
					if(values[i] > max) {
						max = values[i];
					}
				}
				var values1 = [max,ma];
				var min = values1[0];
				var _g6 = 0;
				var _g7 = values1.length;
				while(_g6 < _g7) {
					var i1 = _g6++;
					if(values1[i1] < min) {
						min = values1[i1];
					}
				}
				var x7 = min;
				var ma1 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
				var values2 = [y1 | 0,0];
				var max1 = values2[0];
				var _g8 = 0;
				var _g9 = values2.length;
				while(_g8 < _g9) {
					var i2 = _g8++;
					if(values2[i2] > max1) {
						max1 = values2[i2];
					}
				}
				var values3 = [max1,ma1];
				var min1 = values3[0];
				var _g10 = 0;
				var _g11 = values3.length;
				while(_g10 < _g11) {
					var i3 = _g10++;
					if(values3[i3] < min1) {
						min1 = values3[i3];
					}
				}
				var y5 = min1;
				if(!(x7 >= 0 && y5 >= 0 && x7 < this1.getUInt16(0) && y5 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x1 = x7;
					var this_y1 = y5;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x1,this_y1)));
				}
				var position1 = (y5 * this1.getUInt16(0) + x7) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = this1.b[position1] << 24 | this1.b[position1 + 1] << 16 | this1.b[position1 + 2] << 8 | this1.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var x8 = x4 * (x6 + xFraction * (value1 >> 16 & 255));
				var x9 = 1 - xFraction;
				var ma2 = this1.getUInt16(0) - 1;
				var values4 = [x1 | 0,0];
				var max2 = values4[0];
				var _g12 = 0;
				var _g13 = values4.length;
				while(_g12 < _g13) {
					var i4 = _g12++;
					if(values4[i4] > max2) {
						max2 = values4[i4];
					}
				}
				var values5 = [max2,ma2];
				var min2 = values5[0];
				var _g14 = 0;
				var _g15 = values5.length;
				while(_g14 < _g15) {
					var i5 = _g14++;
					if(values5[i5] < min2) {
						min2 = values5[i5];
					}
				}
				var x10 = min2;
				var ma3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
				var values6 = [(y1 | 0) + 1,0];
				var max3 = values6[0];
				var _g16 = 0;
				var _g17 = values6.length;
				while(_g16 < _g17) {
					var i6 = _g16++;
					if(values6[i6] > max3) {
						max3 = values6[i6];
					}
				}
				var values7 = [max3,ma3];
				var min3 = values7[0];
				var _g18 = 0;
				var _g19 = values7.length;
				while(_g18 < _g19) {
					var i7 = _g18++;
					if(values7[i7] < min3) {
						min3 = values7[i7];
					}
				}
				var y6 = min3;
				if(!(x10 >= 0 && y6 >= 0 && x10 < this1.getUInt16(0) && y6 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x2 = x10;
					var this_y2 = y6;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x2,this_y2)));
				}
				var position2 = (y6 * this1.getUInt16(0) + x10) * 4;
				position2 += vision_ds_Image.OFFSET;
				var value2 = this1.b[position2] << 24 | this1.b[position2 + 1] << 16 | this1.b[position2 + 2] << 8 | this1.b[position2 + 3];
				if(value2 == null) {
					value2 = 0;
				}
				var x11 = x9 * (value2 >> 16 & 255);
				var ma4 = this1.getUInt16(0) - 1;
				var values8 = [(x1 | 0) + 1,0];
				var max4 = values8[0];
				var _g20 = 0;
				var _g21 = values8.length;
				while(_g20 < _g21) {
					var i8 = _g20++;
					if(values8[i8] > max4) {
						max4 = values8[i8];
					}
				}
				var values9 = [max4,ma4];
				var min4 = values9[0];
				var _g22 = 0;
				var _g23 = values9.length;
				while(_g22 < _g23) {
					var i9 = _g22++;
					if(values9[i9] < min4) {
						min4 = values9[i9];
					}
				}
				var x12 = min4;
				var ma5 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
				var values10 = [(y1 | 0) + 1,0];
				var max5 = values10[0];
				var _g24 = 0;
				var _g25 = values10.length;
				while(_g24 < _g25) {
					var i10 = _g24++;
					if(values10[i10] > max5) {
						max5 = values10[i10];
					}
				}
				var values11 = [max5,ma5];
				var min5 = values11[0];
				var _g26 = 0;
				var _g27 = values11.length;
				while(_g26 < _g27) {
					var i11 = _g26++;
					if(values11[i11] < min5) {
						min5 = values11[i11];
					}
				}
				var y7 = min5;
				if(!(x12 >= 0 && y7 >= 0 && x12 < this1.getUInt16(0) && y7 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x3 = x12;
					var this_y3 = y7;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x3,this_y3)));
				}
				var position3 = (y7 * this1.getUInt16(0) + x12) * 4;
				position3 += vision_ds_Image.OFFSET;
				var value3 = this1.b[position3] << 24 | this1.b[position3 + 1] << 16 | this1.b[position3 + 2] << 8 | this1.b[position3 + 3];
				if(value3 == null) {
					value3 = 0;
				}
				var red = x8 + yFraction * (x11 + xFraction * (value3 >> 16 & 255)) | 0;
				var x13 = 1 - yFraction;
				var x14 = x1 | 0;
				var y8 = y1 | 0;
				if(!(x14 >= 0 && y8 >= 0 && x14 < this1.getUInt16(0) && y8 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x4 = x14;
					var this_y4 = y8;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x4,this_y4)));
				}
				var position4 = (y8 * this1.getUInt16(0) + x14) * 4;
				position4 += vision_ds_Image.OFFSET;
				var value4 = this1.b[position4] << 24 | this1.b[position4 + 1] << 16 | this1.b[position4 + 2] << 8 | this1.b[position4 + 3];
				if(value4 == null) {
					value4 = 0;
				}
				var x15 = (1 - xFraction) * (value4 >> 8 & 255);
				var ma6 = this1.getUInt16(0) - 1;
				var values12 = [(x1 | 0) + 1,0];
				var max6 = values12[0];
				var _g28 = 0;
				var _g29 = values12.length;
				while(_g28 < _g29) {
					var i12 = _g28++;
					if(values12[i12] > max6) {
						max6 = values12[i12];
					}
				}
				var values13 = [max6,ma6];
				var min6 = values13[0];
				var _g30 = 0;
				var _g31 = values13.length;
				while(_g30 < _g31) {
					var i13 = _g30++;
					if(values13[i13] < min6) {
						min6 = values13[i13];
					}
				}
				var x16 = min6;
				var ma7 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
				var values14 = [y1 | 0,0];
				var max7 = values14[0];
				var _g32 = 0;
				var _g33 = values14.length;
				while(_g32 < _g33) {
					var i14 = _g32++;
					if(values14[i14] > max7) {
						max7 = values14[i14];
					}
				}
				var values15 = [max7,ma7];
				var min7 = values15[0];
				var _g34 = 0;
				var _g35 = values15.length;
				while(_g34 < _g35) {
					var i15 = _g34++;
					if(values15[i15] < min7) {
						min7 = values15[i15];
					}
				}
				var y9 = min7;
				if(!(x16 >= 0 && y9 >= 0 && x16 < this1.getUInt16(0) && y9 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x5 = x16;
					var this_y5 = y9;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x5,this_y5)));
				}
				var position5 = (y9 * this1.getUInt16(0) + x16) * 4;
				position5 += vision_ds_Image.OFFSET;
				var value5 = this1.b[position5] << 24 | this1.b[position5 + 1] << 16 | this1.b[position5 + 2] << 8 | this1.b[position5 + 3];
				if(value5 == null) {
					value5 = 0;
				}
				var x17 = x13 * (x15 + xFraction * (value5 >> 8 & 255));
				var x18 = 1 - xFraction;
				var ma8 = this1.getUInt16(0) - 1;
				var values16 = [x1 | 0,0];
				var max8 = values16[0];
				var _g36 = 0;
				var _g37 = values16.length;
				while(_g36 < _g37) {
					var i16 = _g36++;
					if(values16[i16] > max8) {
						max8 = values16[i16];
					}
				}
				var values17 = [max8,ma8];
				var min8 = values17[0];
				var _g38 = 0;
				var _g39 = values17.length;
				while(_g38 < _g39) {
					var i17 = _g38++;
					if(values17[i17] < min8) {
						min8 = values17[i17];
					}
				}
				var x19 = min8;
				var ma9 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
				var values18 = [(y1 | 0) + 1,0];
				var max9 = values18[0];
				var _g40 = 0;
				var _g41 = values18.length;
				while(_g40 < _g41) {
					var i18 = _g40++;
					if(values18[i18] > max9) {
						max9 = values18[i18];
					}
				}
				var values19 = [max9,ma9];
				var min9 = values19[0];
				var _g42 = 0;
				var _g43 = values19.length;
				while(_g42 < _g43) {
					var i19 = _g42++;
					if(values19[i19] < min9) {
						min9 = values19[i19];
					}
				}
				var y10 = min9;
				if(!(x19 >= 0 && y10 >= 0 && x19 < this1.getUInt16(0) && y10 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x6 = x19;
					var this_y6 = y10;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x6,this_y6)));
				}
				var position6 = (y10 * this1.getUInt16(0) + x19) * 4;
				position6 += vision_ds_Image.OFFSET;
				var value6 = this1.b[position6] << 24 | this1.b[position6 + 1] << 16 | this1.b[position6 + 2] << 8 | this1.b[position6 + 3];
				if(value6 == null) {
					value6 = 0;
				}
				var x20 = x18 * (value6 >> 8 & 255);
				var ma10 = this1.getUInt16(0) - 1;
				var values20 = [(x1 | 0) + 1,0];
				var max10 = values20[0];
				var _g44 = 0;
				var _g45 = values20.length;
				while(_g44 < _g45) {
					var i20 = _g44++;
					if(values20[i20] > max10) {
						max10 = values20[i20];
					}
				}
				var values21 = [max10,ma10];
				var min10 = values21[0];
				var _g46 = 0;
				var _g47 = values21.length;
				while(_g46 < _g47) {
					var i21 = _g46++;
					if(values21[i21] < min10) {
						min10 = values21[i21];
					}
				}
				var x21 = min10;
				var ma11 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
				var values22 = [(y1 | 0) + 1,0];
				var max11 = values22[0];
				var _g48 = 0;
				var _g49 = values22.length;
				while(_g48 < _g49) {
					var i22 = _g48++;
					if(values22[i22] > max11) {
						max11 = values22[i22];
					}
				}
				var values23 = [max11,ma11];
				var min11 = values23[0];
				var _g50 = 0;
				var _g51 = values23.length;
				while(_g50 < _g51) {
					var i23 = _g50++;
					if(values23[i23] < min11) {
						min11 = values23[i23];
					}
				}
				var y11 = min11;
				if(!(x21 >= 0 && y11 >= 0 && x21 < this1.getUInt16(0) && y11 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x7 = x21;
					var this_y7 = y11;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x7,this_y7)));
				}
				var position7 = (y11 * this1.getUInt16(0) + x21) * 4;
				position7 += vision_ds_Image.OFFSET;
				var value7 = this1.b[position7] << 24 | this1.b[position7 + 1] << 16 | this1.b[position7 + 2] << 8 | this1.b[position7 + 3];
				if(value7 == null) {
					value7 = 0;
				}
				var green = x17 + yFraction * (x20 + xFraction * (value7 >> 8 & 255)) | 0;
				var x22 = 1 - yFraction;
				var x23 = x1 | 0;
				var y12 = y1 | 0;
				if(!(x23 >= 0 && y12 >= 0 && x23 < this1.getUInt16(0) && y12 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x8 = x23;
					var this_y8 = y12;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x8,this_y8)));
				}
				var position8 = (y12 * this1.getUInt16(0) + x23) * 4;
				position8 += vision_ds_Image.OFFSET;
				var value8 = this1.b[position8] << 24 | this1.b[position8 + 1] << 16 | this1.b[position8 + 2] << 8 | this1.b[position8 + 3];
				if(value8 == null) {
					value8 = 0;
				}
				var x24 = (1 - xFraction) * (value8 & 255);
				var ma12 = this1.getUInt16(0) - 1;
				var values24 = [(x1 | 0) + 1,0];
				var max12 = values24[0];
				var _g52 = 0;
				var _g53 = values24.length;
				while(_g52 < _g53) {
					var i24 = _g52++;
					if(values24[i24] > max12) {
						max12 = values24[i24];
					}
				}
				var values25 = [max12,ma12];
				var min12 = values25[0];
				var _g54 = 0;
				var _g55 = values25.length;
				while(_g54 < _g55) {
					var i25 = _g54++;
					if(values25[i25] < min12) {
						min12 = values25[i25];
					}
				}
				var x25 = min12;
				var ma13 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
				var values26 = [y1 | 0,0];
				var max13 = values26[0];
				var _g56 = 0;
				var _g57 = values26.length;
				while(_g56 < _g57) {
					var i26 = _g56++;
					if(values26[i26] > max13) {
						max13 = values26[i26];
					}
				}
				var values27 = [max13,ma13];
				var min13 = values27[0];
				var _g58 = 0;
				var _g59 = values27.length;
				while(_g58 < _g59) {
					var i27 = _g58++;
					if(values27[i27] < min13) {
						min13 = values27[i27];
					}
				}
				var y13 = min13;
				if(!(x25 >= 0 && y13 >= 0 && x25 < this1.getUInt16(0) && y13 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x9 = x25;
					var this_y9 = y13;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x9,this_y9)));
				}
				var position9 = (y13 * this1.getUInt16(0) + x25) * 4;
				position9 += vision_ds_Image.OFFSET;
				var value9 = this1.b[position9] << 24 | this1.b[position9 + 1] << 16 | this1.b[position9 + 2] << 8 | this1.b[position9 + 3];
				if(value9 == null) {
					value9 = 0;
				}
				var x26 = x22 * (x24 + xFraction * (value9 & 255));
				var x27 = 1 - xFraction;
				var ma14 = this1.getUInt16(0) - 1;
				var values28 = [x1 | 0,0];
				var max14 = values28[0];
				var _g60 = 0;
				var _g61 = values28.length;
				while(_g60 < _g61) {
					var i28 = _g60++;
					if(values28[i28] > max14) {
						max14 = values28[i28];
					}
				}
				var values29 = [max14,ma14];
				var min14 = values29[0];
				var _g62 = 0;
				var _g63 = values29.length;
				while(_g62 < _g63) {
					var i29 = _g62++;
					if(values29[i29] < min14) {
						min14 = values29[i29];
					}
				}
				var x28 = min14;
				var ma15 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
				var values30 = [(y1 | 0) + 1,0];
				var max15 = values30[0];
				var _g64 = 0;
				var _g65 = values30.length;
				while(_g64 < _g65) {
					var i30 = _g64++;
					if(values30[i30] > max15) {
						max15 = values30[i30];
					}
				}
				var values31 = [max15,ma15];
				var min15 = values31[0];
				var _g66 = 0;
				var _g67 = values31.length;
				while(_g66 < _g67) {
					var i31 = _g66++;
					if(values31[i31] < min15) {
						min15 = values31[i31];
					}
				}
				var y14 = min15;
				if(!(x28 >= 0 && y14 >= 0 && x28 < this1.getUInt16(0) && y14 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x10 = x28;
					var this_y10 = y14;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x10,this_y10)));
				}
				var position10 = (y14 * this1.getUInt16(0) + x28) * 4;
				position10 += vision_ds_Image.OFFSET;
				var value10 = this1.b[position10] << 24 | this1.b[position10 + 1] << 16 | this1.b[position10 + 2] << 8 | this1.b[position10 + 3];
				if(value10 == null) {
					value10 = 0;
				}
				var x29 = x27 * (value10 & 255);
				var ma16 = this1.getUInt16(0) - 1;
				var values32 = [(x1 | 0) + 1,0];
				var max16 = values32[0];
				var _g68 = 0;
				var _g69 = values32.length;
				while(_g68 < _g69) {
					var i32 = _g68++;
					if(values32[i32] > max16) {
						max16 = values32[i32];
					}
				}
				var values33 = [max16,ma16];
				var min16 = values33[0];
				var _g70 = 0;
				var _g71 = values33.length;
				while(_g70 < _g71) {
					var i33 = _g70++;
					if(values33[i33] < min16) {
						min16 = values33[i33];
					}
				}
				var x30 = min16;
				var ma17 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
				var values34 = [(y1 | 0) + 1,0];
				var max17 = values34[0];
				var _g72 = 0;
				var _g73 = values34.length;
				while(_g72 < _g73) {
					var i34 = _g72++;
					if(values34[i34] > max17) {
						max17 = values34[i34];
					}
				}
				var values35 = [max17,ma17];
				var min17 = values35[0];
				var _g74 = 0;
				var _g75 = values35.length;
				while(_g74 < _g75) {
					var i35 = _g74++;
					if(values35[i35] < min17) {
						min17 = values35[i35];
					}
				}
				var y15 = min17;
				if(!(x30 >= 0 && y15 >= 0 && x30 < this1.getUInt16(0) && y15 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x11 = x30;
					var this_y11 = y15;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x11,this_y11)));
				}
				var position11 = (y15 * this1.getUInt16(0) + x30) * 4;
				position11 += vision_ds_Image.OFFSET;
				var value11 = this1.b[position11] << 24 | this1.b[position11 + 1] << 16 | this1.b[position11 + 2] << 8 | this1.b[position11 + 3];
				if(value11 == null) {
					value11 = 0;
				}
				var blue = x26 + yFraction * (x29 + xFraction * (value11 & 255)) | 0;
				var x31 = 1 - yFraction;
				var x32 = x1 | 0;
				var y16 = y1 | 0;
				if(!(x32 >= 0 && y16 >= 0 && x32 < this1.getUInt16(0) && y16 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x12 = x32;
					var this_y12 = y16;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x12,this_y12)));
				}
				var position12 = (y16 * this1.getUInt16(0) + x32) * 4;
				position12 += vision_ds_Image.OFFSET;
				var value12 = this1.b[position12] << 24 | this1.b[position12 + 1] << 16 | this1.b[position12 + 2] << 8 | this1.b[position12 + 3];
				if(value12 == null) {
					value12 = 0;
				}
				var x33 = (1 - xFraction) * (value12 >> 24 & 255);
				var ma18 = this1.getUInt16(0) - 1;
				var values36 = [(x1 | 0) + 1,0];
				var max18 = values36[0];
				var _g76 = 0;
				var _g77 = values36.length;
				while(_g76 < _g77) {
					var i36 = _g76++;
					if(values36[i36] > max18) {
						max18 = values36[i36];
					}
				}
				var values37 = [max18,ma18];
				var min18 = values37[0];
				var _g78 = 0;
				var _g79 = values37.length;
				while(_g78 < _g79) {
					var i37 = _g78++;
					if(values37[i37] < min18) {
						min18 = values37[i37];
					}
				}
				var x34 = min18;
				var ma19 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
				var values38 = [y1 | 0,0];
				var max19 = values38[0];
				var _g80 = 0;
				var _g81 = values38.length;
				while(_g80 < _g81) {
					var i38 = _g80++;
					if(values38[i38] > max19) {
						max19 = values38[i38];
					}
				}
				var values39 = [max19,ma19];
				var min19 = values39[0];
				var _g82 = 0;
				var _g83 = values39.length;
				while(_g82 < _g83) {
					var i39 = _g82++;
					if(values39[i39] < min19) {
						min19 = values39[i39];
					}
				}
				var y17 = min19;
				if(!(x34 >= 0 && y17 >= 0 && x34 < this1.getUInt16(0) && y17 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x13 = x34;
					var this_y13 = y17;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x13,this_y13)));
				}
				var position13 = (y17 * this1.getUInt16(0) + x34) * 4;
				position13 += vision_ds_Image.OFFSET;
				var value13 = this1.b[position13] << 24 | this1.b[position13 + 1] << 16 | this1.b[position13 + 2] << 8 | this1.b[position13 + 3];
				if(value13 == null) {
					value13 = 0;
				}
				var x35 = x31 * (x33 + xFraction * (value13 >> 24 & 255));
				var x36 = 1 - xFraction;
				var ma20 = this1.getUInt16(0) - 1;
				var values40 = [x1 | 0,0];
				var max20 = values40[0];
				var _g84 = 0;
				var _g85 = values40.length;
				while(_g84 < _g85) {
					var i40 = _g84++;
					if(values40[i40] > max20) {
						max20 = values40[i40];
					}
				}
				var values41 = [max20,ma20];
				var min20 = values41[0];
				var _g86 = 0;
				var _g87 = values41.length;
				while(_g86 < _g87) {
					var i41 = _g86++;
					if(values41[i41] < min20) {
						min20 = values41[i41];
					}
				}
				var x37 = min20;
				var ma21 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
				var values42 = [(y1 | 0) + 1,0];
				var max21 = values42[0];
				var _g88 = 0;
				var _g89 = values42.length;
				while(_g88 < _g89) {
					var i42 = _g88++;
					if(values42[i42] > max21) {
						max21 = values42[i42];
					}
				}
				var values43 = [max21,ma21];
				var min21 = values43[0];
				var _g90 = 0;
				var _g91 = values43.length;
				while(_g90 < _g91) {
					var i43 = _g90++;
					if(values43[i43] < min21) {
						min21 = values43[i43];
					}
				}
				var y18 = min21;
				if(!(x37 >= 0 && y18 >= 0 && x37 < this1.getUInt16(0) && y18 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x14 = x37;
					var this_y14 = y18;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x14,this_y14)));
				}
				var position14 = (y18 * this1.getUInt16(0) + x37) * 4;
				position14 += vision_ds_Image.OFFSET;
				var value14 = this1.b[position14] << 24 | this1.b[position14 + 1] << 16 | this1.b[position14 + 2] << 8 | this1.b[position14 + 3];
				if(value14 == null) {
					value14 = 0;
				}
				var x38 = x36 * (value14 >> 24 & 255);
				var ma22 = this1.getUInt16(0) - 1;
				var values44 = [(x1 | 0) + 1,0];
				var max22 = values44[0];
				var _g92 = 0;
				var _g93 = values44.length;
				while(_g92 < _g93) {
					var i44 = _g92++;
					if(values44[i44] > max22) {
						max22 = values44[i44];
					}
				}
				var values45 = [max22,ma22];
				var min22 = values45[0];
				var _g94 = 0;
				var _g95 = values45.length;
				while(_g94 < _g95) {
					var i45 = _g94++;
					if(values45[i45] < min22) {
						min22 = values45[i45];
					}
				}
				var x39 = min22;
				var ma23 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
				var values46 = [(y1 | 0) + 1,0];
				var max23 = values46[0];
				var _g96 = 0;
				var _g97 = values46.length;
				while(_g96 < _g97) {
					var i46 = _g96++;
					if(values46[i46] > max23) {
						max23 = values46[i46];
					}
				}
				var values47 = [max23,ma23];
				var min23 = values47[0];
				var _g98 = 0;
				var _g99 = values47.length;
				while(_g98 < _g99) {
					var i47 = _g98++;
					if(values47[i47] < min23) {
						min23 = values47[i47];
					}
				}
				var y19 = min23;
				if(!(x39 >= 0 && y19 >= 0 && x39 < this1.getUInt16(0) && y19 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
					var this_x15 = x39;
					var this_y15 = y19;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x15,this_y15)));
				}
				var position15 = (y19 * this1.getUInt16(0) + x39) * 4;
				position15 += vision_ds_Image.OFFSET;
				var value15 = this1.b[position15] << 24 | this1.b[position15 + 1] << 16 | this1.b[position15 + 2] << 8 | this1.b[position15 + 3];
				if(value15 == null) {
					value15 = 0;
				}
				var alpha = x35 + yFraction * (x38 + xFraction * (value15 >> 24 & 255)) | 0;
				var Alpha = alpha;
				if(Alpha == null) {
					Alpha = 255;
				}
				var color = 0;
				var Alpha1 = Alpha;
				if(Alpha1 == null) {
					Alpha1 = 255;
				}
				color &= -16711681;
				color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
				color &= -65281;
				color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
				color &= -256;
				color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
				color &= 16777215;
				color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
				var pixelValue = color;
				if(!(x >= 0 && y >= 0 && x < rotatedImage.getUInt16(0) && y < Math.ceil((rotatedImage.length - vision_ds_Image.OFFSET) / (rotatedImage.getUInt16(0) * 4)))) {
					var this_x16 = x;
					var this_y16 = y;
					throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(rotatedImage,new vision_ds_Point2D(this_x16,this_y16)));
				} else if(rotatedImage.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || rotatedImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || rotatedImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || rotatedImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || rotatedImage.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
					var v = null;
					var tmp1;
					if(!(rotatedImage.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || rotatedImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || rotatedImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || rotatedImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || rotatedImage.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
						tmp1 = x >= 0 && y >= 0 && x < rotatedImage.getUInt16(0) && y < Math.ceil((rotatedImage.length - vision_ds_Image.OFFSET) / (rotatedImage.getUInt16(0) * 4));
					} else {
						var has = false;
						var view;
						if(v != null) {
							view = v;
						} else {
							var _g100 = rotatedImage.getUInt16(vision_ds_Image.WIDTH_BYTES);
							var _g101 = rotatedImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
							var _g102 = rotatedImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
							var rotatedImage1 = rotatedImage.b;
							var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
							view = new vision_ds_ImageView(_g100,_g101,_g102,rotatedImage.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),rotatedImage1[view1]);
						}
						switch(view.shape) {
						case 0:
							has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
							break;
						case 1:
							has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
							break;
						case 2:case 3:
							if(view.width > view.height) {
								var a = view.width / 2;
								var b = view.height / 2;
								var c = Math.sqrt(a * a - b * b);
								var x40 = view.x + view.width / 2 - c;
								var y20 = view.y + view.height / 2;
								if(y20 == null) {
									y20 = 0;
								}
								if(x40 == null) {
									x40 = 0;
								}
								var f1_x = x40;
								var f1_y = y20;
								var x41 = view.x + view.width / 2 + c;
								var y21 = view.y + view.height / 2;
								if(y21 == null) {
									y21 = 0;
								}
								if(x41 == null) {
									x41 = 0;
								}
								var f2_x = x41;
								var f2_y = y21;
								var p_x = x;
								var p_y = y;
								var x42 = p_x - f1_x;
								var y22 = p_y - f1_y;
								var x43 = p_x - f2_x;
								var y23 = p_y - f2_y;
								has = Math.sqrt(x42 * x42 + y22 * y22) + Math.sqrt(x43 * x43 + y23 * y23) <= view.width;
								if(view.shape == 3) {
									has = !has;
								}
							} else if(view.height > view.width) {
								var a1 = view.height / 2;
								var b1 = view.width / 2;
								var c1 = Math.sqrt(a1 * a1 - b1 * b1);
								var x44 = view.x + view.width / 2;
								var y24 = view.y + view.height / 2 - c1;
								if(y24 == null) {
									y24 = 0;
								}
								if(x44 == null) {
									x44 = 0;
								}
								var f1_x1 = x44;
								var f1_y1 = y24;
								var x45 = view.x + view.width / 2;
								var y25 = view.y + view.height / 2 + c1;
								if(y25 == null) {
									y25 = 0;
								}
								if(x45 == null) {
									x45 = 0;
								}
								var f2_x1 = x45;
								var f2_y1 = y25;
								var p_x1 = x;
								var p_y1 = y;
								var x46 = p_x1 - f1_x1;
								var y26 = p_y1 - f1_y1;
								var x47 = p_x1 - f2_x1;
								var y27 = p_y1 - f2_y1;
								has = Math.sqrt(x46 * x46 + y26 * y26) + Math.sqrt(x47 * x47 + y27 * y27) <= view.height;
								if(view.shape == 3) {
									has = !has;
								}
							} else {
								var x48 = x;
								var y28 = y;
								if(y28 == null) {
									y28 = 0;
								}
								if(x48 == null) {
									x48 = 0;
								}
								var point1_x = x48;
								var point1_y = y28;
								var x49 = view.x + view.width / 2;
								var y29 = view.y + view.height / 2;
								if(y29 == null) {
									y29 = 0;
								}
								if(x49 == null) {
									x49 = 0;
								}
								var point2_x = x49;
								var point2_y = y29;
								var x50 = point2_x - point1_x;
								var y30 = point2_y - point1_y;
								has = Math.sqrt(x50 * x50 + y30 * y30) <= view.width / 2;
								if(view.shape == 3) {
									has = !has;
								}
							}
							break;
						case 4:
							has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
							break;
						case 5:
							has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
							break;
						}
						tmp1 = has;
					}
					if(tmp1) {
						var position16 = (y * rotatedImage.getUInt16(0) + x) * 4;
						position16 += vision_ds_Image.OFFSET;
						rotatedImage.b[position16] = pixelValue >> 24 & 255 & 255;
						rotatedImage.b[position16 + 1] = pixelValue >> 16 & 255 & 255;
						rotatedImage.b[position16 + 2] = pixelValue >> 8 & 255 & 255;
						rotatedImage.b[position16 + 3] = pixelValue & 255 & 255;
					}
				} else {
					var position17 = (y * rotatedImage.getUInt16(0) + x) * 4;
					position17 += vision_ds_Image.OFFSET;
					rotatedImage.b[position17] = pixelValue >> 24 & 255 & 255;
					rotatedImage.b[position17 + 1] = pixelValue >> 16 & 255 & 255;
					rotatedImage.b[position17 + 2] = pixelValue >> 8 & 255 & 255;
					rotatedImage.b[position17 + 3] = pixelValue & 255 & 255;
				}
			}
		}
	}
	this1 = rotatedImage;
	return this1;
};
vision_ds_Image.toString = function(this1,special) {
	if(special == null) {
		special = true;
	}
	if(!special) {
		return Std.string(this1);
	}
	var s = "\n";
	var prevY = 0;
	var _g = 0;
	var _g1 = this1.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			if(prevY != y) {
				prevY = y;
				s += "\n";
			}
			s += vision_ds_Color.toString(value);
		}
	}
	return s;
};
vision_ds_Image.forEachPixel = function(this1,callback) {
	var _g = 0;
	var _g1 = this1.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var position = (y * this1.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			callback(x,y,value);
		}
	}
};
vision_ds_Image.forEachPixelInView = function(this1,callback) {
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = this1.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				callback(x,y,value);
			}
		}
		return;
	}
	var _g = 0;
	var _g1 = this1.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var v = null;
			var tmp;
			if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
				tmp = x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
			} else {
				var has = false;
				var view;
				if(v != null) {
					view = v;
				} else {
					var _g4 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
					var _g5 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
					var _g6 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
					var this2 = this1.b;
					var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
					view = new vision_ds_ImageView(_g4,_g5,_g6,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
				}
				switch(view.shape) {
				case 0:
					has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
					break;
				case 1:
					has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
					break;
				case 2:case 3:
					if(view.width > view.height) {
						var a = view.width / 2;
						var b = view.height / 2;
						var c = Math.sqrt(a * a - b * b);
						var x1 = view.x + view.width / 2 - c;
						var y1 = view.y + view.height / 2;
						if(y1 == null) {
							y1 = 0;
						}
						if(x1 == null) {
							x1 = 0;
						}
						var f1_x = x1;
						var f1_y = y1;
						var x2 = view.x + view.width / 2 + c;
						var y2 = view.y + view.height / 2;
						if(y2 == null) {
							y2 = 0;
						}
						if(x2 == null) {
							x2 = 0;
						}
						var f2_x = x2;
						var f2_y = y2;
						var p_x = x;
						var p_y = y;
						var x3 = p_x - f1_x;
						var y3 = p_y - f1_y;
						var x4 = p_x - f2_x;
						var y4 = p_y - f2_y;
						has = Math.sqrt(x3 * x3 + y3 * y3) + Math.sqrt(x4 * x4 + y4 * y4) <= view.width;
						if(view.shape == 3) {
							has = !has;
						}
					} else if(view.height > view.width) {
						var a1 = view.height / 2;
						var b1 = view.width / 2;
						var c1 = Math.sqrt(a1 * a1 - b1 * b1);
						var x5 = view.x + view.width / 2;
						var y5 = view.y + view.height / 2 - c1;
						if(y5 == null) {
							y5 = 0;
						}
						if(x5 == null) {
							x5 = 0;
						}
						var f1_x1 = x5;
						var f1_y1 = y5;
						var x6 = view.x + view.width / 2;
						var y6 = view.y + view.height / 2 + c1;
						if(y6 == null) {
							y6 = 0;
						}
						if(x6 == null) {
							x6 = 0;
						}
						var f2_x1 = x6;
						var f2_y1 = y6;
						var p_x1 = x;
						var p_y1 = y;
						var x7 = p_x1 - f1_x1;
						var y7 = p_y1 - f1_y1;
						var x8 = p_x1 - f2_x1;
						var y8 = p_y1 - f2_y1;
						has = Math.sqrt(x7 * x7 + y7 * y7) + Math.sqrt(x8 * x8 + y8 * y8) <= view.height;
						if(view.shape == 3) {
							has = !has;
						}
					} else {
						var x9 = x;
						var y9 = y;
						if(y9 == null) {
							y9 = 0;
						}
						if(x9 == null) {
							x9 = 0;
						}
						var point1_x = x9;
						var point1_y = y9;
						var x10 = view.x + view.width / 2;
						var y10 = view.y + view.height / 2;
						if(y10 == null) {
							y10 = 0;
						}
						if(x10 == null) {
							x10 = 0;
						}
						var point2_x = x10;
						var point2_y = y10;
						var x11 = point2_x - point1_x;
						var y11 = point2_y - point1_y;
						has = Math.sqrt(x11 * x11 + y11 * y11) <= view.width / 2;
						if(view.shape == 3) {
							has = !has;
						}
					}
					break;
				case 4:
					has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
					break;
				case 5:
					has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
					break;
				}
				tmp = has;
			}
			if(tmp) {
				var position = (y * this1.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
				if(value == null) {
					value = 0;
				}
				callback(x,y,value);
			}
		}
	}
};
vision_ds_Image.iterator = function(this1) {
	return new vision_ds__$Image_PixelIterator(this1);
};
vision_ds_Image.hasView = function(this1) {
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0)) {
		return this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0;
	} else {
		return true;
	}
};
vision_ds_Image.setView = function(this1,view) {
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,view.x);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,view.y);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,view.width >= this1.getUInt16(0) ? 0 : view.width);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,view.height >= Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) ? 0 : view.width);
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = view.shape & 255;
	return this1;
};
vision_ds_Image.getView = function(this1) {
	var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
	var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
	var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
	var this2 = this1.b;
	var tmp = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
	return new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[tmp]);
};
vision_ds_Image.removeView = function(this1) {
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,0);
	this1.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,0);
	this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	return this1;
};
vision_ds_Image.hasPixelInView = function(this1,x,y,v) {
	if(!(this1.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || this1.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
		if(x >= 0 && y >= 0 && x < this1.getUInt16(0)) {
			return y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
		} else {
			return false;
		}
	}
	var has = false;
	var view;
	if(v != null) {
		view = v;
	} else {
		var _g = this1.getUInt16(vision_ds_Image.WIDTH_BYTES);
		var _g1 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
		var _g2 = this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
		var this2 = this1.b;
		var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
		view = new vision_ds_ImageView(_g,_g1,_g2,this1.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),this2[view1]);
	}
	switch(view.shape) {
	case 0:
		has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
		break;
	case 1:
		has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
		break;
	case 2:case 3:
		if(view.width > view.height) {
			var a = view.width / 2;
			var b = view.height / 2;
			var c = Math.sqrt(a * a - b * b);
			var x1 = view.x + view.width / 2 - c;
			var y1 = view.y + view.height / 2;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var f1_x = x1;
			var f1_y = y1;
			var x1 = view.x + view.width / 2 + c;
			var y1 = view.y + view.height / 2;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var f2_x = x1;
			var f2_y = y1;
			var p_x = x;
			var p_y = y;
			var x1 = p_x - f1_x;
			var y1 = p_y - f1_y;
			var x2 = p_x - f2_x;
			var y2 = p_y - f2_y;
			has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.width;
			if(view.shape == 3) {
				has = !has;
			}
		} else if(view.height > view.width) {
			var a = view.height / 2;
			var b = view.width / 2;
			var c = Math.sqrt(a * a - b * b);
			var x1 = view.x + view.width / 2;
			var y1 = view.y + view.height / 2 - c;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var f1_x = x1;
			var f1_y = y1;
			var x1 = view.x + view.width / 2;
			var y1 = view.y + view.height / 2 + c;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var f2_x = x1;
			var f2_y = y1;
			var p_x = x;
			var p_y = y;
			var x1 = p_x - f1_x;
			var y1 = p_y - f1_y;
			var x2 = p_x - f2_x;
			var y2 = p_y - f2_y;
			has = Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2) <= view.height;
			if(view.shape == 3) {
				has = !has;
			}
		} else {
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var point1_x = x1;
			var point1_y = y1;
			var x1 = view.x + view.width / 2;
			var y1 = view.y + view.height / 2;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var point2_x = x1;
			var point2_y = y1;
			var x1 = point2_x - point1_x;
			var y1 = point2_y - point1_y;
			has = Math.sqrt(x1 * x1 + y1 * y1) <= view.width / 2;
			if(view.shape == 3) {
				has = !has;
			}
		}
		break;
	case 4:
		has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
		break;
	case 5:
		has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
		break;
	}
	return has;
};
vision_ds_Image.toBitmapData = function(this1) {
	return vision_tools_ImageTools.toBitmapData(this1);
};
vision_ds_Image.fromBitmapData = function(bitmapData) {
	return vision_tools_ImageTools.fromBitmapData(bitmapData);
};
vision_ds_Image.toShape = function(this1) {
	return vision_tools_ImageTools.toShape(this1);
};
vision_ds_Image.fromShape = function(shape) {
	return vision_tools_ImageTools.fromShape(shape);
};
vision_ds_Image.toSprite = function(this1) {
	return vision_tools_ImageTools.toSprite(this1);
};
vision_ds_Image.fromSprite = function(sprite) {
	return vision_tools_ImageTools.fromSprite(sprite);
};
vision_ds_Image.toLimeImage = function(this1) {
	return vision_tools_ImageTools.toLimeImage(this1);
};
vision_ds_Image.fromLimeImage = function(image) {
	return vision_tools_ImageTools.fromLimeImage(image);
};
vision_ds_Image.fromJsCanvas = function(canvas) {
	return vision_tools_ImageTools.fromJsCanvas(canvas);
};
vision_ds_Image.toJsCanvas = function(this1) {
	return vision_tools_ImageTools.toJsCanvas(this1);
};
vision_ds_Image.fromJsImage = function(image) {
	return vision_tools_ImageTools.fromJsImage(image);
};
vision_ds_Image.toJsImage = function(this1) {
	return vision_tools_ImageTools.toJsImage(this1);
};
vision_ds_Image.from2DArray = function(array) {
	var h = array.length;
	var w = array[0].length;
	var length = w * h * 4 + vision_ds_Image.OFFSET;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
	this1.fill(0,length,0);
	var byteArray = this1;
	var flat = [];
	var _g = 0;
	while(_g < array.length) {
		var item = array[_g];
		++_g;
		flat = flat.concat(item);
	}
	var flat1 = flat;
	var _g = 0;
	var _g1 = flat1.length;
	while(_g < _g1) {
		var i = _g++;
		var color = flat1[i];
		byteArray.b[vision_ds_Image.OFFSET + i * 4] = color >> 24 & 255 & 255;
		byteArray.b[vision_ds_Image.OFFSET + i * 4 + 1] = color >> 16 & 255 & 255;
		byteArray.b[vision_ds_Image.OFFSET + i * 4 + 2] = color >> 8 & 255 & 255;
		byteArray.b[vision_ds_Image.OFFSET + i * 4 + 3] = color & 255 & 255;
	}
	byteArray.setUInt16(0,w);
	byteArray.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	byteArray.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	byteArray.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,0);
	byteArray.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,0);
	byteArray.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	return byteArray;
};
vision_ds_Image.to2DArray = function(this1) {
	var arr = [];
	var _g = 0;
	var _g1 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4));
	while(_g < _g1) {
		var i = _g++;
		arr[i] = [];
		var _g2 = 0;
		var _g3 = this1.getUInt16(0);
		while(_g2 < _g3) {
			var j = _g2++;
			var arr1 = arr[i];
			var position = (i * this1.getUInt16(0) + j) * 4;
			position += vision_ds_Image.OFFSET;
			var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
			if(value == null) {
				value = 0;
			}
			arr1[j] = value;
		}
	}
	return arr;
};
vision_ds_Image.fromBytes = function(bytes,width,height) {
	var h = height != null ? height : Math.ceil(bytes.length / 4 / width);
	var length = width * h * 4 + vision_ds_Image.OFFSET;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
	this1.fill(0,length,0);
	var array = this1;
	array.fill(0,array.length,0);
	array.setUInt16(0,width);
	array.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	array.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	array.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,0);
	array.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,0);
	array.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	array.blit(vision_ds_Image.OFFSET,bytes,0,bytes.length);
	return array;
};
vision_ds_Image.image_or_image = function(lhs,rhs) {
	if(!(lhs.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = lhs.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * lhs.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = lhs.b[position] << 24 | lhs.b[position + 1] << 16 | lhs.b[position + 2] << 8 | lhs.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var position1 = (y * rhs.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = rhs.b[position1] << 24 | rhs.b[position1 + 1] << 16 | rhs.b[position1 + 2] << 8 | rhs.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var color = value | value1;
				var position2 = (y * lhs.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				lhs.b[position2] = color >> 24 & 255 & 255;
				lhs.b[position2 + 1] = color >> 16 & 255 & 255;
				lhs.b[position2 + 2] = color >> 8 & 255 & 255;
				lhs.b[position2 + 3] = color & 255 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = lhs.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(lhs.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < lhs.getUInt16(0) && y < Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var lhs1 = lhs.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),lhs1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var p_x = x;
							var p_y = y;
							var x3 = p_x - f1_x;
							var y3 = p_y - f1_y;
							var x4 = p_x - f2_x;
							var y4 = p_y - f2_y;
							has = Math.sqrt(x3 * x3 + y3 * y3) + Math.sqrt(x4 * x4 + y4 * y4) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x5 = view.x + view.width / 2;
							var y5 = view.y + view.height / 2 - c1;
							if(y5 == null) {
								y5 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f1_x1 = x5;
							var f1_y1 = y5;
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 + c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f2_x1 = x6;
							var f2_y1 = y6;
							var p_x1 = x;
							var p_y1 = y;
							var x7 = p_x1 - f1_x1;
							var y7 = p_y1 - f1_y1;
							var x8 = p_x1 - f2_x1;
							var y8 = p_y1 - f2_y1;
							has = Math.sqrt(x7 * x7 + y7 * y7) + Math.sqrt(x8 * x8 + y8 * y8) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x9 = x;
							var y9 = y;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var point1_x = x9;
							var point1_y = y9;
							var x10 = view.x + view.width / 2;
							var y10 = view.y + view.height / 2;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point2_x = x10;
							var point2_y = y10;
							var x11 = point2_x - point1_x;
							var y11 = point2_y - point1_y;
							has = Math.sqrt(x11 * x11 + y11 * y11) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * lhs.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = lhs.b[position] << 24 | lhs.b[position + 1] << 16 | lhs.b[position + 2] << 8 | lhs.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var position1 = (y * rhs.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = rhs.b[position1] << 24 | rhs.b[position1 + 1] << 16 | rhs.b[position1 + 2] << 8 | rhs.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var color = value | value1;
					var position2 = (y * lhs.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					lhs.b[position2] = color >> 24 & 255 & 255;
					lhs.b[position2 + 1] = color >> 16 & 255 & 255;
					lhs.b[position2 + 2] = color >> 8 & 255 & 255;
					lhs.b[position2 + 3] = color & 255 & 255;
				}
			}
		}
	}
	return lhs;
};
vision_ds_Image.image_xor_image = function(lhs,rhs) {
	if(!(lhs.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = lhs.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * lhs.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = lhs.b[position] << 24 | lhs.b[position + 1] << 16 | lhs.b[position + 2] << 8 | lhs.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var position1 = (y * rhs.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = rhs.b[position1] << 24 | rhs.b[position1 + 1] << 16 | rhs.b[position1 + 2] << 8 | rhs.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var color = value ^ value1;
				var position2 = (y * lhs.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				lhs.b[position2] = color >> 24 & 255 & 255;
				lhs.b[position2 + 1] = color >> 16 & 255 & 255;
				lhs.b[position2 + 2] = color >> 8 & 255 & 255;
				lhs.b[position2 + 3] = color & 255 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = lhs.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(lhs.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < lhs.getUInt16(0) && y < Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var lhs1 = lhs.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),lhs1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var p_x = x;
							var p_y = y;
							var x3 = p_x - f1_x;
							var y3 = p_y - f1_y;
							var x4 = p_x - f2_x;
							var y4 = p_y - f2_y;
							has = Math.sqrt(x3 * x3 + y3 * y3) + Math.sqrt(x4 * x4 + y4 * y4) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x5 = view.x + view.width / 2;
							var y5 = view.y + view.height / 2 - c1;
							if(y5 == null) {
								y5 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f1_x1 = x5;
							var f1_y1 = y5;
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 + c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f2_x1 = x6;
							var f2_y1 = y6;
							var p_x1 = x;
							var p_y1 = y;
							var x7 = p_x1 - f1_x1;
							var y7 = p_y1 - f1_y1;
							var x8 = p_x1 - f2_x1;
							var y8 = p_y1 - f2_y1;
							has = Math.sqrt(x7 * x7 + y7 * y7) + Math.sqrt(x8 * x8 + y8 * y8) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x9 = x;
							var y9 = y;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var point1_x = x9;
							var point1_y = y9;
							var x10 = view.x + view.width / 2;
							var y10 = view.y + view.height / 2;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point2_x = x10;
							var point2_y = y10;
							var x11 = point2_x - point1_x;
							var y11 = point2_y - point1_y;
							has = Math.sqrt(x11 * x11 + y11 * y11) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * lhs.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = lhs.b[position] << 24 | lhs.b[position + 1] << 16 | lhs.b[position + 2] << 8 | lhs.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var position1 = (y * rhs.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = rhs.b[position1] << 24 | rhs.b[position1 + 1] << 16 | rhs.b[position1 + 2] << 8 | rhs.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var color = value ^ value1;
					var position2 = (y * lhs.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					lhs.b[position2] = color >> 24 & 255 & 255;
					lhs.b[position2 + 1] = color >> 16 & 255 & 255;
					lhs.b[position2 + 2] = color >> 8 & 255 & 255;
					lhs.b[position2 + 3] = color & 255 & 255;
				}
			}
		}
	}
	return lhs;
};
vision_ds_Image.image_and_image = function(lhs,rhs) {
	if(!(lhs.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0)) {
		var _g = 0;
		var _g1 = lhs.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var position = (y * lhs.getUInt16(0) + x) * 4;
				position += vision_ds_Image.OFFSET;
				var value = lhs.b[position] << 24 | lhs.b[position + 1] << 16 | lhs.b[position + 2] << 8 | lhs.b[position + 3];
				if(value == null) {
					value = 0;
				}
				var position1 = (y * rhs.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				var value1 = rhs.b[position1] << 24 | rhs.b[position1 + 1] << 16 | rhs.b[position1 + 2] << 8 | rhs.b[position1 + 3];
				if(value1 == null) {
					value1 = 0;
				}
				var color = value & value1;
				var position2 = (y * lhs.getUInt16(0) + x) * 4;
				position2 += vision_ds_Image.OFFSET;
				lhs.b[position2] = color >> 24 & 255 & 255;
				lhs.b[position2 + 1] = color >> 16 & 255 & 255;
				lhs.b[position2 + 2] = color >> 8 & 255 & 255;
				lhs.b[position2 + 3] = color & 255 & 255;
			}
		}
	} else {
		var _g = 0;
		var _g1 = lhs.getUInt16(0);
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
			while(_g2 < _g3) {
				var y = _g2++;
				var v = null;
				var tmp;
				if(!(lhs.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || lhs.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < lhs.getUInt16(0) && y < Math.ceil((lhs.length - vision_ds_Image.OFFSET) / (lhs.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var lhs1 = lhs.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,lhs.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),lhs1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var p_x = x;
							var p_y = y;
							var x3 = p_x - f1_x;
							var y3 = p_y - f1_y;
							var x4 = p_x - f2_x;
							var y4 = p_y - f2_y;
							has = Math.sqrt(x3 * x3 + y3 * y3) + Math.sqrt(x4 * x4 + y4 * y4) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x5 = view.x + view.width / 2;
							var y5 = view.y + view.height / 2 - c1;
							if(y5 == null) {
								y5 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f1_x1 = x5;
							var f1_y1 = y5;
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 + c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f2_x1 = x6;
							var f2_y1 = y6;
							var p_x1 = x;
							var p_y1 = y;
							var x7 = p_x1 - f1_x1;
							var y7 = p_y1 - f1_y1;
							var x8 = p_x1 - f2_x1;
							var y8 = p_y1 - f2_y1;
							has = Math.sqrt(x7 * x7 + y7 * y7) + Math.sqrt(x8 * x8 + y8 * y8) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x9 = x;
							var y9 = y;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var point1_x = x9;
							var point1_y = y9;
							var x10 = view.x + view.width / 2;
							var y10 = view.y + view.height / 2;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point2_x = x10;
							var point2_y = y10;
							var x11 = point2_x - point1_x;
							var y11 = point2_y - point1_y;
							has = Math.sqrt(x11 * x11 + y11 * y11) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * lhs.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					var value = lhs.b[position] << 24 | lhs.b[position + 1] << 16 | lhs.b[position + 2] << 8 | lhs.b[position + 3];
					if(value == null) {
						value = 0;
					}
					var position1 = (y * rhs.getUInt16(0) + x) * 4;
					position1 += vision_ds_Image.OFFSET;
					var value1 = rhs.b[position1] << 24 | rhs.b[position1 + 1] << 16 | rhs.b[position1 + 2] << 8 | rhs.b[position1 + 3];
					if(value1 == null) {
						value1 = 0;
					}
					var color = value & value1;
					var position2 = (y * lhs.getUInt16(0) + x) * 4;
					position2 += vision_ds_Image.OFFSET;
					lhs.b[position2] = color >> 24 & 255 & 255;
					lhs.b[position2 + 1] = color >> 16 & 255 & 255;
					lhs.b[position2 + 2] = color >> 8 & 255 & 255;
					lhs.b[position2 + 3] = color & 255 & 255;
				}
			}
		}
	}
	return lhs;
};
var vision_ds__$Image_PixelIterator = function(img) {
	this.i = 4;
	this.img = img;
};
$hxClasses["vision.ds._Image.PixelIterator"] = vision_ds__$Image_PixelIterator;
vision_ds__$Image_PixelIterator.__name__ = "vision.ds._Image.PixelIterator";
vision_ds__$Image_PixelIterator.prototype = {
	i: null
	,img: null
	,next: function() {
		var x = this.i % this.img.getUInt16(0);
		var y = Math.floor(this.i / this.img.getUInt16(0));
		var this1 = this.img;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var pixel = new vision_ds_Pixel(x,y,value);
		this.i += 4;
		return pixel;
	}
	,hasNext: function() {
		return this.i < this.img.length;
	}
	,__class__: vision_ds__$Image_PixelIterator
};
var vision_ds_ImageView = function(x,y,width,height,shape) {
	this.shape = 0;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
	if(width != null) {
		this.width = width;
	}
	if(height != null) {
		this.height = height;
	}
	if(shape != null) {
		this.shape = shape;
	}
};
$hxClasses["vision.ds.ImageView"] = vision_ds_ImageView;
vision_ds_ImageView.__name__ = "vision.ds.ImageView";
vision_ds_ImageView.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,shape: null
	,toString: function() {
		return "{shape: " + this.shape + ", x: " + this.x + ", y: " + this.y + ", width: " + this.width + ", height: " + this.height + "}";
	}
	,__class__: vision_ds_ImageView
};
var vision_ds__$IntPoint2D_Impl = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["vision.ds._IntPoint2D.Impl"] = vision_ds__$IntPoint2D_Impl;
vision_ds__$IntPoint2D_Impl.__name__ = "vision.ds._IntPoint2D.Impl";
vision_ds__$IntPoint2D_Impl.prototype = {
	x: null
	,y: null
	,__class__: vision_ds__$IntPoint2D_Impl
};
var vision_ds_IntPoint2D = {};
vision_ds_IntPoint2D.__properties__ = {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"};
vision_ds_IntPoint2D.get_y = function(this1) {
	return this1.y;
};
vision_ds_IntPoint2D.get_x = function(this1) {
	return this1.x;
};
vision_ds_IntPoint2D.set_y = function(this1,y) {
	this1.y = y;
	return y;
};
vision_ds_IntPoint2D.set_x = function(this1,x) {
	this1.x = x;
	return x;
};
vision_ds_IntPoint2D.toPoint2D = function(this1) {
	return new vision_ds_Point2D(this1.x,this1.y);
};
vision_ds_IntPoint2D.fromPoint2D = function(p) {
	return new vision_ds__$IntPoint2D_Impl(p.x | 0,p.y | 0);
};
vision_ds_IntPoint2D.toString = function(this1) {
	return "(" + this1.x + ", " + this1.y + ")";
};
vision_ds_IntPoint2D.copy = function(this1) {
	return new vision_ds__$IntPoint2D_Impl(this1.x,this1.y);
};
vision_ds_IntPoint2D.distanceTo = function(this1,point) {
	return Math.sqrt(Math.pow(this1.x - point.x,2) + Math.pow(this1.y - point.y,2));
};
vision_ds_IntPoint2D.degreesTo = function(this1,point) {
	var point1 = js_Boot.__cast(this1 , vision_ds__$IntPoint2D_Impl);
	var x = point.x - point1.x;
	var y = point.y - point1.y;
	return Math.atan2(x,y) * 180 / Math.PI;
};
vision_ds_IntPoint2D.radiansTo = function(this1,point) {
	var point1 = js_Boot.__cast(this1 , vision_ds__$IntPoint2D_Impl);
	var x = point.x - point1.x;
	var y = point.y - point1.y;
	return Math.atan2(x,y) * 180 / Math.PI;
};
var vision_ds_Line2D = function(start,end) {
	this.end = new vision_ds_Point2D(0,0);
	this.start = new vision_ds_Point2D(0,0);
	this.start.x = start.x;
	this.start.y = start.y;
	this.end.x = end.x;
	this.end.y = end.y;
	var x = end.x - start.x;
	var y = end.y - start.y;
	this.radians = Math.atan2(x,y);
	this.slope = Math.tan(this.radians);
	this.degrees = this.radians * 180 / Math.PI;
};
$hxClasses["vision.ds.Line2D"] = vision_ds_Line2D;
vision_ds_Line2D.__name__ = "vision.ds.Line2D";
vision_ds_Line2D.fromRay2D = function(ray) {
	var x = ray.point.x;
	var y = ray.point.y;
	var length = 1;
	var end = new vision_ds_Point2D(x + length * Math.cos(ray.radians) | 0,y + length * Math.sin(ray.radians) | 0);
	return new vision_ds_Line2D(ray.point,end);
};
vision_ds_Line2D.prototype = {
	length: null
	,slope: null
	,degrees: null
	,radians: null
	,start: null
	,end: null
	,get_length: function() {
		return Math.sqrt(Math.pow(this.end.x - this.start.x,2) + Math.pow(this.end.y - this.start.y,2));
	}
	,intersect: function(line) {
		var x1 = this.start.x;
		var y1 = this.start.y;
		var x2 = this.end.x;
		var y2 = this.end.y;
		var x3 = line.start.x;
		var y3 = line.start.y;
		var x4 = line.end.x;
		var y4 = line.end.y;
		var denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
		if(x1 == x2 && y1 == y2 || x3 == x4 && y3 == y4) {
			return null;
		} else if(denominator == 0) {
			return null;
		} else {
			var ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;
			var ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;
			if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
				return null;
			} else {
				var x = x1 + ua * (x2 - x1);
				var y = y1 + ua * (y2 - y1);
				return new vision_ds_Point2D(x | 0,y | 0);
			}
		}
	}
	,distanceTo: function(line) {
		var x1 = this.start.x;
		var y1 = this.start.y;
		var x2 = this.end.x;
		var y2 = this.end.y;
		var x3 = line.start.x;
		var y3 = line.start.y;
		var x4 = line.end.x;
		var y4 = line.end.y;
		var denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
		var tmp;
		if(x1 == x2 && y1 == y2 || x3 == x4 && y3 == y4) {
			tmp = null;
		} else if(denominator == 0) {
			tmp = null;
		} else {
			var ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;
			var ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;
			if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
				tmp = null;
			} else {
				var x = x1 + ua * (x2 - x1);
				var y = y1 + ua * (y2 - y1);
				tmp = new vision_ds_Point2D(x | 0,y | 0);
			}
		}
		if(tmp != null) {
			return 0;
		} else {
			var point = line.start;
			var ch = (this.start.y - this.end.y) * point.x + (this.end.x - this.start.x) * point.y + (this.start.x * this.end.y - this.end.x * this.start.y);
			var del = Math.sqrt(Math.pow(this.end.x - this.start.x,2) + Math.pow(this.end.y - this.start.y,2));
			var d = ch / del;
			var distance1 = d;
			var point = line.end;
			var ch = (this.start.y - this.end.y) * point.x + (this.end.x - this.start.x) * point.y + (this.start.x * this.end.y - this.end.x * this.start.y);
			var del = Math.sqrt(Math.pow(this.end.x - this.start.x,2) + Math.pow(this.end.y - this.start.y,2));
			var d = ch / del;
			var distance2 = d;
			var point = this.start;
			var ch = (line.start.y - line.end.y) * point.x + (line.end.x - line.start.x) * point.y + (line.start.x * line.end.y - line.end.x * line.start.y);
			var del = Math.sqrt(Math.pow(line.end.x - line.start.x,2) + Math.pow(line.end.y - line.start.y,2));
			var d = ch / del;
			var distance3 = d;
			var point = this.end;
			var ch = (line.start.y - line.end.y) * point.x + (line.end.x - line.start.x) * point.y + (line.start.x * line.end.y - line.end.x * line.start.y);
			var del = Math.sqrt(Math.pow(line.end.x - line.start.x,2) + Math.pow(line.end.y - line.start.y,2));
			var d = ch / del;
			var distance4 = d;
			var values = [distance1,distance2,distance3,distance4];
			var min = values[0];
			var _g = 0;
			var _g1 = values.length;
			while(_g < _g1) {
				var i = _g++;
				if(values[i] < min) {
					min = values[i];
				}
			}
			var distance = min;
			return distance;
		}
	}
	,toString: function() {
		return "\n (" + this.start.x + ", " + this.start.y + ") --> (" + this.end.x + ", " + this.end.y + ")";
	}
	,toRay2D: function() {
		return new vision_ds_Ray2D(this.start,this.slope);
	}
	,set_start: function(value) {
		var point2 = this.end;
		var x = point2.x - value.x;
		var y = point2.y - value.y;
		this.radians = Math.atan2(x,y);
		this.slope = Math.tan(this.radians);
		this.degrees = this.radians * 180 / Math.PI;
		return this.start = value;
	}
	,set_end: function(value) {
		var point2 = this.end;
		var x = point2.x - value.x;
		var y = point2.y - value.y;
		this.radians = Math.atan2(x,y);
		this.slope = Math.tan(this.radians);
		this.degrees = this.radians * 180 / Math.PI;
		return this.end = value;
	}
	,get_middle: function() {
		return new vision_ds_Point2D((this.start.x + this.end.x) / 2,(this.start.y + this.end.y) / 2);
	}
	,set_middle: function(value) {
		var x = (this.start.x + this.end.x) / 2;
		var y = (this.start.y + this.end.y) / 2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var previousMiddle_x = x;
		var previousMiddle_y = y;
		var diffX = value.x - previousMiddle_x;
		var diffY = value.y - previousMiddle_y;
		this.start.y += diffY;
		this.end.y += diffY;
		this.start.x += diffX;
		this.end.x += diffX;
		return new vision_ds_Point2D((this.start.x + this.end.x) / 2,(this.start.y + this.end.y) / 2);
	}
	,__class__: vision_ds_Line2D
	,__properties__: {set_middle:"set_middle",get_middle:"get_middle",set_end:"set_end",set_start:"set_start",get_length:"get_length"}
};
var vision_ds_Matrix2D = {};
vision_ds_Matrix2D.__properties__ = {set_columns:"set_columns",get_columns:"get_columns",set_rows:"set_rows",get_rows:"get_rows",set_underlying:"set_underlying",get_underlying:"get_underlying"};
vision_ds_Matrix2D.get_underlying = function(this1) {
	return this1;
};
vision_ds_Matrix2D.set_underlying = function(this1,arr2d) {
	this1 = arr2d;
	return this1;
};
vision_ds_Matrix2D.get_rows = function(this1) {
	return this1.height;
};
vision_ds_Matrix2D.set_rows = function(this1,amount) {
	this1.inner.length = this1.width * amount;
	return this1.height = amount;
};
vision_ds_Matrix2D.get_columns = function(this1) {
	return this1.width;
};
vision_ds_Matrix2D.set_columns = function(this1,amount) {
	this1.inner.length = amount * this1.height;
	return this1.width = amount;
};
vision_ds_Matrix2D._new = function(width,height) {
	return new vision_ds_Array2D(width,height);
};
vision_ds_Matrix2D.invert = function(this1) {
	this1 = vision_algorithms_GaussJordan.invert(this1);
	return this1;
};
vision_ds_Matrix2D.getDeterminant = function(this1) {
	var len = this1.width;
	switch(len) {
	case 0:
		return 1;
	case 1:
		return this1.inner[0 * this1.width];
	case 2:
		return this1.inner[0 * this1.width] * this1.inner[this1.width + 1] - this1.inner[this1.width] * this1.inner[0 * this1.width + 1];
	default:
		var determinantSum = 0.;
		var sign = 1;
		var _g = 0;
		var _g1 = this1.width;
		while(_g < _g1) {
			var i = _g++;
			var current = this1.inner[0 * this1.width + i];
			var fromX = 0;
			var fromY = 1;
			var toX = null;
			var toY = null;
			if(fromY == null) {
				fromY = 0;
			}
			if(fromX == null) {
				fromX = 0;
			}
			var copy = this1.to2DArray();
			if(toX == null) {
				toX = this1.width;
			}
			if(toY == null) {
				toY = this1.height;
			}
			var _g2 = 0;
			var _g3 = fromY;
			while(_g2 < _g3) {
				var _ = _g2++;
				copy.shift();
			}
			var _g4 = toX;
			var _g5 = copy.length;
			while(_g4 < _g5) {
				var _1 = _g4++;
				copy.pop();
			}
			var _g6 = 0;
			while(_g6 < copy.length) {
				var row = copy[_g6];
				++_g6;
				var _g7 = 0;
				var _g8 = fromX;
				while(_g7 < _g8) {
					var _2 = _g7++;
					row.shift();
				}
				var _g9 = toY;
				var _g10 = row.length;
				while(_g9 < _g10) {
					var _3 = _g9++;
					row.pop();
				}
			}
			var childMatrix;
			if(copy.length == 0) {
				childMatrix = new vision_ds_Array2D(0,0);
			} else {
				var arr2d = new vision_ds_Array2D(copy[0].length,copy.length);
				var flat = [];
				var _g11 = 0;
				while(_g11 < copy.length) {
					var item = copy[_g11];
					++_g11;
					flat = flat.concat(item);
				}
				arr2d.inner = flat;
				childMatrix = arr2d;
			}
			var underlyingArray = childMatrix.inner.slice();
			var _g12 = 0;
			var _g13 = childMatrix.height;
			while(_g12 < _g13) {
				var i1 = _g12++;
				underlyingArray[i + i1 * childMatrix.width] = null;
			}
			var _g14 = [];
			var _g15 = 0;
			var _g16 = underlyingArray;
			while(_g15 < _g16.length) {
				var v = _g16[_g15];
				++_g15;
				if(v != null) {
					_g14.push(v);
				}
			}
			underlyingArray = _g14;
			var value = childMatrix.width - 1;
			childMatrix.inner.length = value * childMatrix.height;
			childMatrix.width = value;
			childMatrix.inner = underlyingArray;
			determinantSum += sign * current * vision_ds_Matrix2D.getDeterminant(childMatrix);
			sign *= -1;
		}
		return determinantSum;
	}
};
vision_ds_Matrix2D.getTrace = function(this1) {
	if(this1.width != this1.height) {
		throw haxe_Exception.thrown("");
	}
	var sum = 0.;
	var _g = 0;
	var _g1 = this1.width;
	while(_g < _g1) {
		var i = _g++;
		sum += this1.inner[i * this1.width + i];
	}
	return sum;
};
vision_ds_Matrix2D.multiplyWithScalar = function(this1,scalar) {
	var _g = 0;
	var _g1 = this1.inner.length;
	while(_g < _g1) {
		var i = _g++;
		this1.inner[i] *= scalar;
	}
	return this1;
};
vision_ds_Matrix2D.clone = function(this1) {
	var arr = new vision_ds_Array2D(this1.width,this1.height);
	arr.inner = this1.inner.slice();
	return arr;
};
vision_ds_Matrix2D.map = function(this1,mappingFunction) {
	var m = new vision_ds_Array2D(this1.width,this1.height);
	var _g = 0;
	var _g1 = this1.inner.length;
	while(_g < _g1) {
		var i = _g++;
		m.inner[i] = mappingFunction(this1.inner[i]);
	}
	return m;
};
vision_ds_Matrix2D.getSubMatrix = function(this1,fromX,fromY,toX,toY) {
	if(fromY == null) {
		fromY = 0;
	}
	if(fromX == null) {
		fromX = 0;
	}
	var copy = this1.to2DArray();
	if(toX == null) {
		toX = this1.width;
	}
	if(toY == null) {
		toY = this1.height;
	}
	var _g = 0;
	var _g1 = fromY;
	while(_g < _g1) {
		var _ = _g++;
		copy.shift();
	}
	var _g = toX;
	var _g1 = copy.length;
	while(_g < _g1) {
		var _ = _g++;
		copy.pop();
	}
	var _g = 0;
	while(_g < copy.length) {
		var row = copy[_g];
		++_g;
		var _g1 = 0;
		var _g2 = fromX;
		while(_g1 < _g2) {
			var _ = _g1++;
			row.shift();
		}
		var _g3 = toY;
		var _g4 = row.length;
		while(_g3 < _g4) {
			var _1 = _g3++;
			row.pop();
		}
	}
	if(copy.length == 0) {
		return new vision_ds_Array2D(0,0);
	}
	var arr2d = new vision_ds_Array2D(copy[0].length,copy.length);
	var flat = [];
	var _g = 0;
	while(_g < copy.length) {
		var item = copy[_g];
		++_g;
		flat = flat.concat(item);
	}
	arr2d.inner = flat;
	return arr2d;
};
vision_ds_Matrix2D.getColumn = function(this1,x) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.height;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(this1.inner[i * this1.width + x]);
	}
	return _g;
};
vision_ds_Matrix2D.getRow = function(this1,y) {
	var _g = [];
	var _g1 = y * this1.width;
	var _g2 = y * this1.width + this1.width;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(this1.inner[i]);
	}
	return _g;
};
vision_ds_Matrix2D.setColumn = function(this1,x,arr) {
	if(arr.length < this1.height) {
		throw haxe_Exception.thrown("");
	}
	var _g = 0;
	var _g1 = this1.height;
	while(_g < _g1) {
		var y = _g++;
		this1.inner[x + y * this1.width] = arr[y];
	}
};
vision_ds_Matrix2D.setRow = function(this1,y,arr) {
	if(arr.length < this1.width) {
		throw haxe_Exception.thrown("");
	}
	var _g = 0;
	var _g1 = this1.width;
	while(_g < _g1) {
		var x = _g++;
		this1.inner[x + y * this1.width] = arr[x];
	}
};
vision_ds_Matrix2D.insertColumn = function(this1,x,arr) {
	var n = new vision_ds_Array2D(this1.width + 1,this1.height);
	var _g = 0;
	var _g1 = this1.height;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = x;
		while(_g2 < _g3) {
			var i = _g2++;
			n.inner[i + y * n.width] = this1.inner[y * this1.width + i];
		}
		var _g4 = x;
		var _g5 = this1.width;
		while(_g4 < _g5) {
			var i1 = _g4++;
			n.inner[i1 + 1 + y * n.width] = this1.inner[y * this1.width + i1];
		}
		n.inner[x + y * n.width] = arr[y];
	}
	this1 = n;
	return this1;
};
vision_ds_Matrix2D.insertRow = function(this1,y,arr) {
	var n = new vision_ds_Array2D(this1.width,this1.height + 1);
	var _g = 0;
	var _g1 = this1.width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = y;
		while(_g2 < _g3) {
			var i = _g2++;
			n.inner[x + i * n.width] = this1.inner[i * this1.width + x];
		}
		var _g4 = y;
		var _g5 = this1.height;
		while(_g4 < _g5) {
			var i1 = _g4++;
			n.inner[x + (i1 + 1) * n.width] = this1.inner[i1 * this1.width + x];
		}
		n.inner[x + y * n.width] = arr[x];
	}
	this1 = n;
	return this1;
};
vision_ds_Matrix2D.removeColumn = function(this1,x) {
	var underlyingArray = this1.inner.slice();
	var _g = 0;
	var _g1 = this1.height;
	while(_g < _g1) {
		var i = _g++;
		underlyingArray[x + i * this1.width] = null;
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = underlyingArray;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null) {
			_g.push(v);
		}
	}
	underlyingArray = _g;
	var value = this1.width - 1;
	this1.inner.length = value * this1.height;
	this1.width = value;
	this1.inner = underlyingArray;
	return this1;
};
vision_ds_Matrix2D.removeRow = function(this1,y) {
	var underlyingArray = this1.inner.slice();
	var _g = 0;
	var _g1 = this1.width;
	while(_g < _g1) {
		var i = _g++;
		underlyingArray[y + this1.width * i] = null;
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = underlyingArray;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null) {
			_g.push(v);
		}
	}
	underlyingArray = _g;
	var value = this1.height - 1;
	this1.inner.length = this1.width * value;
	this1.height = value;
	this1.inner = underlyingArray;
	return this1;
};
vision_ds_Matrix2D.toString = function(this1,precision,pretty) {
	if(pretty == null) {
		pretty = true;
	}
	if(precision == null) {
		precision = 5;
	}
	if(!pretty) {
		var str = "\n[[";
		var counter = 0;
		var _g = 0;
		var _g1 = this1.inner;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(counter < this1.width) {
				var add = ", " + Std.string(item);
				if(counter == 0) {
					add = HxOverrides.substr(add,2,null);
				}
				str += add;
				++counter;
			} else {
				counter = 0;
				str += "],\n [";
				var add1 = "" + Std.string(item);
				str += add1;
				++counter;
			}
		}
		return str.substring(0,str.length) + "]]";
	}
	var maxLen = 1;
	var _g = 0;
	var _g1 = this1.inner;
	while(_g < _g1.length) {
		var item = _g1[_g];
		++_g;
		var len;
		if(precision == -1) {
			len = (item == null ? "null" : "" + item).length;
		} else {
			var multiplier = Math.pow(10,precision);
			len = Std.string(Math.round(item * multiplier) / multiplier).length;
		}
		if(len > maxLen) {
			maxLen = len;
		}
	}
	++maxLen;
	var st = "";
	var _g = 0;
	var _g1 = maxLen * this1.width + 2 * (this1.width - 1) - 1;
	while(_g < _g1) {
		var i = _g++;
		st += " ";
	}
	var top = "\n┌ " + st + " ┐";
	var st = "";
	var _g = 0;
	var _g1 = maxLen * this1.width + 2 * (this1.width - 1) - 1;
	while(_g < _g1) {
		var i = _g++;
		st += " ";
	}
	var bottom = "└ " + st + " ┘";
	var rows = [""];
	var counter = 0;
	var floor = 0;
	var _g = 0;
	var _g1 = this1.inner;
	while(_g < _g1.length) {
		var item = _g1[_g];
		++_g;
		if(counter < this1.width) {
			var itemString;
			if(precision != -1) {
				var multiplier = Math.pow(10,precision);
				itemString = Math.round(item * multiplier) / multiplier;
			} else {
				itemString = item;
			}
			var itemString1 = Std.string(itemString);
			var add;
			if(precision != -1) {
				var multiplier1 = Math.pow(10,precision);
				add = item != Math.round(item * multiplier1) / multiplier1;
			} else {
				add = false;
			}
			if(add) {
				itemString1 += "…";
			}
			if(itemString1.length < maxLen) {
				var st = "";
				var _g2 = 0;
				var _g3 = Math.floor((maxLen - itemString1.length) / 2);
				while(_g2 < _g3) {
					var i = _g2++;
					st += " ";
				}
				var itemString2 = st + itemString1;
				var st1 = "";
				var _g4 = 0;
				var _g5 = Math.ceil((maxLen - itemString1.length) / 2);
				while(_g4 < _g5) {
					var i1 = _g4++;
					st1 += " ";
				}
				itemString1 = itemString2 + st1;
			}
			var add1 = ", " + itemString1;
			if(counter == 0) {
				add1 = HxOverrides.substr(add1,2,null);
			}
			rows[floor] += add1;
			++counter;
		} else {
			counter = 0;
			++floor;
			rows[floor] = "";
			var itemString3;
			if(precision != -1) {
				var multiplier2 = Math.pow(10,precision);
				itemString3 = Math.round(item * multiplier2) / multiplier2;
			} else {
				itemString3 = item;
			}
			var itemString4 = Std.string(itemString3);
			var add2;
			if(precision != -1) {
				var multiplier3 = Math.pow(10,precision);
				add2 = item != Math.round(item * multiplier3) / multiplier3;
			} else {
				add2 = false;
			}
			if(add2) {
				itemString4 += "…";
			}
			if(itemString4.length < maxLen) {
				var st2 = "";
				var _g6 = 0;
				var _g7 = Math.floor((maxLen - itemString4.length) / 2);
				while(_g6 < _g7) {
					var i2 = _g6++;
					st2 += " ";
				}
				var itemString5 = st2 + itemString4;
				var st3 = "";
				var _g8 = 0;
				var _g9 = Math.ceil((maxLen - itemString4.length) / 2);
				while(_g8 < _g9) {
					var i3 = _g8++;
					st3 += " ";
				}
				itemString4 = itemString5 + st3;
			}
			var add3 = "" + itemString4;
			rows[floor] += add3;
			++counter;
		}
	}
	var string = top + "\n";
	var _g = 0;
	while(_g < rows.length) {
		var r = rows[_g];
		++_g;
		string += "│ " + r + "│\n";
	}
	string += bottom;
	return string;
};
vision_ds_Matrix2D.IDENTITY = function() {
	var homogeneousRow = [0,0,1];
	if(homogeneousRow == null) {
		homogeneousRow = [0,0,1];
	}
	var arr = new vision_ds_Array2D(3,3,null);
	arr.inner = [1,0,0].concat([0,1,0]).concat(homogeneousRow);
	return arr;
};
vision_ds_Matrix2D.ROTATION = function(angle,degrees) {
	if(degrees == null) {
		degrees = true;
	}
	var xRow = degrees ? Math.cos(angle * Math.PI / 180) : Math.cos(angle);
	var xRow1 = degrees ? -Math.sin(angle * Math.PI / 180) : -Math.sin(angle);
	var yRow = degrees ? Math.sin(angle * Math.PI / 180) : Math.sin(angle);
	var yRow1 = degrees ? Math.cos(angle * Math.PI / 180) : Math.cos(angle);
	var homogeneousRow = [0,0,1];
	if(homogeneousRow == null) {
		homogeneousRow = [0,0,1];
	}
	var arr = new vision_ds_Array2D(3,3,null);
	arr.inner = [xRow,xRow1,0].concat([yRow,yRow1,0]).concat(homogeneousRow);
	return arr;
};
vision_ds_Matrix2D.TRANSLATION = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var homogeneousRow = [0,0,1];
	if(homogeneousRow == null) {
		homogeneousRow = [0,0,1];
	}
	var arr = new vision_ds_Array2D(3,3,null);
	arr.inner = [1,0,x].concat([0,1,y]).concat(homogeneousRow);
	return arr;
};
vision_ds_Matrix2D.SCALE = function(scaleX,scaleY) {
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	var homogeneousRow = [0,0,1];
	if(homogeneousRow == null) {
		homogeneousRow = [0,0,1];
	}
	var arr = new vision_ds_Array2D(3,3,null);
	arr.inner = [scaleX,0,0].concat([0,scaleY,0]).concat(homogeneousRow);
	return arr;
};
vision_ds_Matrix2D.SHEAR = function(shearX,shearY) {
	if(shearY == null) {
		shearY = 0;
	}
	if(shearX == null) {
		shearX = 0;
	}
	var homogeneousRow = [0,0,1];
	if(homogeneousRow == null) {
		homogeneousRow = [0,0,1];
	}
	var arr = new vision_ds_Array2D(3,3,null);
	arr.inner = [1,shearX,0].concat([shearY,1,0]).concat(homogeneousRow);
	return arr;
};
vision_ds_Matrix2D.REFLECTION = function(angle,degrees) {
	if(degrees == null) {
		degrees = true;
	}
	angle *= 2;
	var xRow = degrees ? Math.cos(angle * Math.PI / 180) : Math.cos(angle);
	var xRow1 = degrees ? Math.sin(angle * Math.PI / 180) : Math.sin(angle);
	var yRow = degrees ? Math.sin(angle * Math.PI / 180) : Math.sin(angle);
	var yRow1 = degrees ? -Math.cos(angle * Math.PI / 180) : -Math.cos(angle);
	var homogeneousRow = [0,0,1];
	if(homogeneousRow == null) {
		homogeneousRow = [0,0,1];
	}
	var arr = new vision_ds_Array2D(3,3,null);
	arr.inner = [xRow,xRow1,0].concat([yRow,yRow1,0]).concat(homogeneousRow);
	return arr;
};
vision_ds_Matrix2D.PERSPECTIVE = function(pointPairs) {
	var src = [];
	var dst = [];
	var _g = 0;
	while(_g < pointPairs.length) {
		var pair = pointPairs[_g];
		++_g;
		src.push(pair.from);
		dst.push(pair.to);
	}
	return vision_algorithms_PerspectiveWarp.generateMatrix(src,dst);
};
vision_ds_Matrix2D.createFilled = function() {
	var $l=arguments.length;
	var rows = new Array($l>0?$l-0:0);
	for(var $i=0;$i<$l;++$i){rows[$i-0]=arguments[$i];}
	var arr = new vision_ds_Array2D(rows[0].length,rows.length);
	arr.inner = [];
	var _g_current = 0;
	var _g_args = rows;
	while(_g_current < _g_args.length) {
		var r = _g_args[_g_current++];
		arr.inner = arr.inner.concat(r);
	}
	return arr;
};
vision_ds_Matrix2D.createTransformation = function(xRow,yRow,homogeneousRow) {
	if(homogeneousRow == null) {
		homogeneousRow = [0,0,1];
	}
	var arr = new vision_ds_Array2D(3,3,null);
	arr.inner = xRow.concat(yRow).concat(homogeneousRow);
	return arr;
};
vision_ds_Matrix2D.multiplyMatrices = function(a,b) {
	if(a.width != b.height) {
		throw haxe_Exception.thrown(new vision_exceptions_MatrixOperationError("mult",[a,b],0));
	}
	var result = new vision_ds_Array2D(b.width,a.height);
	var _g = 0;
	var _g1 = a.height;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = b.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var sum = 0.;
			var _g4 = 0;
			var _g5 = a.width;
			while(_g4 < _g5) {
				var k = _g4++;
				sum += a.inner[y * a.width + k] * b.inner[k * b.width + x];
			}
			result.inner[x + y * result.width] = sum;
		}
	}
	return result;
};
vision_ds_Matrix2D.addMatrices = function(a,b) {
	if(a.height != b.height || a.width != b.width) {
		throw haxe_Exception.thrown(new vision_exceptions_MatrixOperationError("add",[a,b],1));
	}
	var result = new vision_ds_Array2D(a.width,b.height);
	var _g = 0;
	var _g1 = result.width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = result.height;
		while(_g2 < _g3) {
			var y = _g2++;
			result.inner[x + y * result.width] = a.inner[y * a.width + x] + b.inner[y * b.width + x];
		}
	}
	return result;
};
vision_ds_Matrix2D.subtractMatrices = function(a,b) {
	if(a.height != b.height || a.width != b.width) {
		throw haxe_Exception.thrown(new vision_exceptions_MatrixOperationError("sub",[a,b],2));
	}
	var result = new vision_ds_Array2D(a.width,b.height);
	var _g = 0;
	var _g1 = result.width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = result.height;
		while(_g2 < _g3) {
			var y = _g2++;
			result.inner[x + y * result.width] = a.inner[y * a.width + x] - b.inner[y * b.width + x];
		}
	}
	return result;
};
vision_ds_Matrix2D.divideMatrices = function(a,b) {
	if(a.width != b.height) {
		throw haxe_Exception.thrown(new vision_exceptions_MatrixOperationError("div",[a,b],3));
	}
	var result = new vision_ds_Array2D(b.width,a.height);
	var _g = 0;
	var _g1 = a.height;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = b.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var sum = 0.;
			var _g4 = 0;
			var _g5 = a.width;
			while(_g4 < _g5) {
				var k = _g4++;
				sum += a.inner[y * a.width + k] / b.inner[k * b.width + x];
			}
			result.inner[x + y * result.width] = sum;
		}
	}
	return result;
};
vision_ds_Matrix2D.multiply = function(this1,b) {
	if(this1.width != b.height) {
		throw haxe_Exception.thrown(new vision_exceptions_MatrixOperationError("mult",[this1,b],0));
	}
	var result = new vision_ds_Array2D(b.width,this1.height);
	var _g = 0;
	var _g1 = this1.height;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = b.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var sum = 0.;
			var _g4 = 0;
			var _g5 = this1.width;
			while(_g4 < _g5) {
				var k = _g4++;
				sum += this1.inner[y * this1.width + k] * b.inner[k * b.width + x];
			}
			result.inner[x + y * result.width] = sum;
		}
	}
	this1 = result;
	return this1;
};
vision_ds_Matrix2D.add = function(this1,b) {
	if(this1.height != b.height || this1.width != b.width) {
		throw haxe_Exception.thrown(new vision_exceptions_MatrixOperationError("add",[this1,b],1));
	}
	var _g = 0;
	var _g1 = this1.width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = this1.height;
		while(_g2 < _g3) {
			var y = _g2++;
			this1.inner[x + y * this1.width] = this1.inner[y * this1.width + x] + b.inner[y * b.width + x];
		}
	}
	return this1;
};
vision_ds_Matrix2D.subtract = function(this1,b) {
	if(this1.height != b.height || this1.width != b.width) {
		throw haxe_Exception.thrown(new vision_exceptions_MatrixOperationError("sub",[this1,b],2));
	}
	var _g = 0;
	var _g1 = this1.width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = this1.height;
		while(_g2 < _g3) {
			var y = _g2++;
			this1.inner[x + y * this1.width] = this1.inner[y * this1.width + x] - b.inner[y * b.width + x];
		}
	}
	return this1;
};
vision_ds_Matrix2D.divide = function(this1,b) {
	if(this1.width != b.height) {
		throw haxe_Exception.thrown(new vision_exceptions_MatrixOperationError("div",[this1,b],3));
	}
	var result = new vision_ds_Array2D(b.width,this1.height);
	var _g = 0;
	var _g1 = this1.height;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = b.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var sum = 0.;
			var _g4 = 0;
			var _g5 = this1.width;
			while(_g4 < _g5) {
				var k = _g4++;
				sum += this1.inner[y * this1.width + k] * b.inner[k * b.width + x];
			}
			result.inner[x + y * result.width] = sum;
		}
	}
	this1 = result;
	return this1;
};
vision_ds_Matrix2D.to_array_array_float = function(this1) {
	var array = this1.inner;
	var delimiter = this1.width;
	var raised = [];
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		if(raised[Math.floor(i / delimiter)] == null) {
			raised[Math.floor(i / delimiter)] = [];
		}
		raised[Math.floor(i / delimiter)][i % delimiter] = array[i];
	}
	return raised;
};
vision_ds_Matrix2D.from_array_array_float = function(array) {
	var arr2d = new vision_ds_Array2D(array[0].length,array.length);
	var flat = [];
	var _g = 0;
	while(_g < array.length) {
		var item = array[_g];
		++_g;
		flat = flat.concat(item);
	}
	arr2d.inner = flat;
	return arr2d;
};
vision_ds_Matrix2D.from_array_array_int = function(array) {
	var arr2d = new vision_ds_Array2D(array[0].length,array.length);
	var flat = [];
	var _g = 0;
	while(_g < array.length) {
		var item = array[_g];
		++_g;
		flat = flat.concat(item);
	}
	arr2d.inner = flat;
	return arr2d;
};
var vision_ds_Pixel = function(x,y,color) {
	this.x = x;
	this.y = y;
	this.color = color;
};
$hxClasses["vision.ds.Pixel"] = vision_ds_Pixel;
vision_ds_Pixel.__name__ = "vision.ds.Pixel";
vision_ds_Pixel.prototype = {
	x: null
	,y: null
	,color: null
	,__class__: vision_ds_Pixel
};
var vision_ds_PixelFormat = {};
vision_ds_PixelFormat.convertPixelFormat = function(bytes,from,to) {
	if(to == null) {
		to = 0;
	}
	if(from == to) {
		return bytes;
	}
	var i = 0;
	while(i < bytes.length) {
		var red;
		if(from == 1 || from == 4) {
			red = bytes.b[i];
		} else if(from == 0) {
			red = bytes.b[i + 1];
		} else if(from == 5 || from == 3) {
			red = bytes.b[i + 2];
		} else if(from == 2) {
			red = bytes.b[i + 3];
		} else {
			throw haxe_Exception.thrown(new vision_exceptions_VisionException("Unknown Pixel Format","Pixel Conversion"));
		}
		var green;
		if(from == 5 || from == 3 || from == 4 || from == 1) {
			green = bytes.b[i + 1];
		} else if(from == 2 || from == 0) {
			green = bytes.b[i + 2];
		} else {
			throw haxe_Exception.thrown(new vision_exceptions_VisionException("Unknown Pixel Format","Pixel Conversion"));
		}
		var blue;
		if(from == 5 || from == 3) {
			blue = bytes.b[i];
		} else if(from == 2) {
			blue = bytes.b[i + 1];
		} else if(from == 4 || from == 1) {
			blue = bytes.b[i + 2];
		} else if(from == 0) {
			blue = bytes.b[i + 3];
		} else {
			throw haxe_Exception.thrown(new vision_exceptions_VisionException("Unknown Pixel Format","Pixel Conversion"));
		}
		var alpha = from == 0 || from == 2 ? bytes.b[i] : from == 1 || from == 3 ? bytes.b[i + 3] : -1;
		var redIndex;
		if(to == 1 || to == 4) {
			redIndex = i;
		} else if(to == 0) {
			redIndex = i + 1;
		} else if(to == 5 || to == 3) {
			redIndex = i + 2;
		} else if(to == 2) {
			redIndex = i + 3;
		} else {
			throw haxe_Exception.thrown(new vision_exceptions_VisionException("Unknown Pixel Format","Pixel Conversion"));
		}
		var greenIndex;
		if(to == 5 || to == 3 || to == 4 || to == 1) {
			greenIndex = i + 1;
		} else if(to == 2 || to == 0) {
			greenIndex = i + 2;
		} else {
			throw haxe_Exception.thrown(new vision_exceptions_VisionException("Unknown Pixel Format","Pixel Conversion"));
		}
		var blueIndex;
		if(to == 5 || to == 3) {
			blueIndex = i;
		} else if(to == 2) {
			blueIndex = i + 1;
		} else if(to == 4 || to == 1) {
			blueIndex = i + 2;
		} else if(to == 0) {
			blueIndex = i + 3;
		} else {
			throw haxe_Exception.thrown(new vision_exceptions_VisionException("Unknown Pixel Format","Pixel Conversion"));
		}
		var alphaIndex = to == 0 || to == 2 ? i : to == 1 || to == 3 ? i + 3 : -1;
		bytes.b[redIndex] = red & 255;
		bytes.b[greenIndex] = green & 255;
		bytes.b[blueIndex] = blue & 255;
		if(alphaIndex != -1) {
			bytes.b[alphaIndex] = alpha & 255;
		}
		if(from > 3) {
			i += 3;
		} else {
			i += 4;
		}
	}
	return bytes;
};
var vision_ds_Point2D = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["vision.ds.Point2D"] = vision_ds_Point2D;
vision_ds_Point2D.__name__ = "vision.ds.Point2D";
vision_ds_Point2D.prototype = {
	x: null
	,y: null
	,toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,copy: function() {
		return new vision_ds_Point2D(this.x,this.y);
	}
	,distanceTo: function(point) {
		var x = point.x - this.x;
		var y = point.y - this.y;
		return Math.sqrt(x * x + y * y);
	}
	,degreesTo: function(point) {
		var x = point.x - this.x;
		var y = point.y - this.y;
		return Math.atan2(x,y) * 180 / Math.PI;
	}
	,radiansTo: function(point) {
		var x = point.x - this.x;
		var y = point.y - this.y;
		return Math.atan2(x,y) * 180 / Math.PI;
	}
	,__class__: vision_ds_Point2D
};
var vision_ds_Point3D = function(x,y,z) {
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["vision.ds.Point3D"] = vision_ds_Point3D;
vision_ds_Point3D.__name__ = "vision.ds.Point3D";
vision_ds_Point3D.prototype = {
	x: null
	,y: null
	,z: null
	,distanceTo: function(point) {
		var x = point.x - this.x;
		var y = point.y - this.y;
		var z = point.z - this.z;
		return Math.sqrt(x * x + y * y + z * z);
	}
	,copy: function() {
		return new vision_ds_Point3D(this.x,this.y,this.z);
	}
	,toString: function() {
		return "(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,__class__: vision_ds_Point3D
};
var vision_ds_QueueCell = function(value,next,previous) {
	this.previous = previous;
	this.value = value;
	this.next = next;
};
$hxClasses["vision.ds.QueueCell"] = vision_ds_QueueCell;
vision_ds_QueueCell.__name__ = "vision.ds.QueueCell";
vision_ds_QueueCell.prototype = {
	previous: null
	,value: null
	,next: null
	,getValue: function() {
		return this.value;
	}
	,__class__: vision_ds_QueueCell
};
var vision_ds_Ray2D = function(point,m,degrees,radians) {
	this.point = point;
	if(m != null) {
		this.degrees = Math.atan(m) * 180 / Math.PI;
		this.radians = Math.atan(m);
		this.slope = m;
		var value = Math.atan(m) * 180 / Math.PI;
		this.slope = Math.tan(value * Math.PI / 180);
		this.radians = value * Math.PI / 180;
		this.degrees = value;
		var value = Math.atan(m);
		this.slope = Math.tan(value);
		this.degrees = value * 180 / Math.PI;
		this.radians = value;
	} else if(degrees != null) {
		this.slope = Math.tan(degrees * Math.PI / 180);
		this.radians = degrees * Math.PI / 180;
		this.degrees = degrees;
		var value = Math.tan(degrees * Math.PI / 180);
		this.degrees = Math.atan(value) * 180 / Math.PI;
		this.radians = Math.atan(value);
		this.slope = value;
		var value = degrees * Math.PI / 180;
		this.slope = Math.tan(value);
		this.degrees = value * 180 / Math.PI;
		this.radians = value;
	} else if(radians != null) {
		this.slope = Math.tan(radians);
		this.degrees = radians * 180 / Math.PI;
		this.radians = radians;
		var value = Math.tan(radians);
		this.degrees = Math.atan(value) * 180 / Math.PI;
		this.radians = Math.atan(value);
		this.slope = value;
		var value = radians * 180 / Math.PI;
		this.slope = Math.tan(value * Math.PI / 180);
		this.radians = value * Math.PI / 180;
		this.degrees = value;
	}
};
$hxClasses["vision.ds.Ray2D"] = vision_ds_Ray2D;
vision_ds_Ray2D.__name__ = "vision.ds.Ray2D";
vision_ds_Ray2D.from2Points = function(point1,point2) {
	var s = (point2.y - point1.y) / (point2.x - point1.x);
	return new vision_ds_Ray2D(point1,s);
};
vision_ds_Ray2D.prototype = {
	point: null
	,slope: null
	,degrees: null
	,radians: null
	,getPointAtX: function(x) {
		var px = this.point.x;
		var py = this.point.y;
		return new vision_ds_Point2D(x,this.slope * x + (px > 0 ? py - this.slope * px : py + this.slope * px));
	}
	,getPointAtY: function(y) {
		var px = this.point.x;
		var py = this.point.y;
		return new vision_ds_Point2D((y - (px > 0 ? py - this.slope * px : py + this.slope * px)) / this.slope,y);
	}
	,intersect: function(ray) {
		var line1StartX = this.point.x;
		var line1StartY = this.point.y;
		var line1EndX = this.point.x + Math.cos(this.radians) * 1000;
		var line1EndY = this.point.y + Math.sin(this.radians) * 1000;
		var line2StartX = ray.point.x;
		var line2StartY = ray.point.y;
		var line2EndX = ray.point.x + Math.cos(ray.radians) * 1000;
		var line2EndY = ray.point.y + Math.sin(ray.radians) * 1000;
		var a;
		var b;
		var numerator1;
		var numerator2;
		var result = null;
		var denominator = (line2EndY - line2StartY) * (line1EndX - line1StartX) - (line2EndX - line2StartX) * (line1EndY - line1StartY);
		if(denominator == 0) {
			return result;
		} else {
			a = line1StartY - line2StartY;
			b = line1StartX - line2StartX;
			numerator1 = (line2EndX - line2StartX) * a - (line2EndY - line2StartY) * b;
			numerator2 = (line1EndX - line1StartX) * a - (line1EndY - line1StartY) * b;
			a = numerator1 / denominator;
			b = numerator2 / denominator;
			result = new vision_ds_Point2D();
			result.x = line1StartX + a * (line1EndX - line1StartX);
			result.y = line1StartY + a * (line1EndY - line1StartY);
			return result;
		}
	}
	,distanceTo: function(ray) {
		if(this.radians != ray.radians) {
			return 0;
		} else {
			var point = this.point;
			var ray2_slope;
			var ray2_radians;
			var ray2_degrees;
			var m = null;
			var degrees = this.degrees + 90;
			var radians = null;
			var ray2_point = point;
			if(m != null) {
				ray2_degrees = Math.atan(m) * 180 / Math.PI;
				ray2_radians = Math.atan(m);
				ray2_slope = m;
				var value = Math.atan(m) * 180 / Math.PI;
				ray2_slope = Math.tan(value * Math.PI / 180);
				ray2_radians = value * Math.PI / 180;
				ray2_degrees = value;
				var value = Math.atan(m);
				ray2_slope = Math.tan(value);
				ray2_degrees = value * 180 / Math.PI;
				ray2_radians = value;
			} else if(degrees != null) {
				ray2_slope = Math.tan(degrees * Math.PI / 180);
				ray2_radians = degrees * Math.PI / 180;
				ray2_degrees = degrees;
				var value = Math.tan(degrees * Math.PI / 180);
				ray2_degrees = Math.atan(value) * 180 / Math.PI;
				ray2_radians = Math.atan(value);
				ray2_slope = value;
				var value = degrees * Math.PI / 180;
				ray2_slope = Math.tan(value);
				ray2_degrees = value * 180 / Math.PI;
				ray2_radians = value;
			} else if(radians != null) {
				ray2_slope = Math.tan(radians);
				ray2_degrees = radians * 180 / Math.PI;
				ray2_radians = radians;
				var value = Math.tan(radians);
				ray2_degrees = Math.atan(value) * 180 / Math.PI;
				ray2_radians = Math.atan(value);
				ray2_slope = value;
				var value = radians * 180 / Math.PI;
				ray2_slope = Math.tan(value * Math.PI / 180);
				ray2_radians = value * Math.PI / 180;
				ray2_degrees = value;
			}
			var line1StartX = ray.point.x;
			var line1StartY = ray.point.y;
			var line1EndX = ray.point.x + Math.cos(ray.radians) * 1000;
			var line1EndY = ray.point.y + Math.sin(ray.radians) * 1000;
			var line2StartX = ray2_point.x;
			var line2StartY = ray2_point.y;
			var line2EndX = ray2_point.x + Math.cos(ray2_radians) * 1000;
			var line2EndY = ray2_point.y + Math.sin(ray2_radians) * 1000;
			var a;
			var b;
			var numerator1;
			var numerator2;
			var result = null;
			var denominator = (line2EndY - line2StartY) * (line1EndX - line1StartX) - (line2EndX - line2StartX) * (line1EndY - line1StartY);
			var intersectionOfPerpendicularWithRay2;
			if(denominator == 0) {
				intersectionOfPerpendicularWithRay2 = result;
			} else {
				a = line1StartY - line2StartY;
				b = line1StartX - line2StartX;
				numerator1 = (line2EndX - line2StartX) * a - (line2EndY - line2StartY) * b;
				numerator2 = (line1EndX - line1StartX) * a - (line1EndY - line1StartY) * b;
				a = numerator1 / denominator;
				b = numerator2 / denominator;
				result = new vision_ds_Point2D();
				result.x = line1StartX + a * (line1EndX - line1StartX);
				result.y = line1StartY + a * (line1EndY - line1StartY);
				intersectionOfPerpendicularWithRay2 = result;
			}
			var x = intersectionOfPerpendicularWithRay2.x - point.x;
			var y = intersectionOfPerpendicularWithRay2.y - point.y;
			return Math.sqrt(x * x + y * y);
		}
	}
	,set_slope: function(value) {
		this.degrees = Math.atan(value) * 180 / Math.PI;
		this.radians = Math.atan(value);
		return this.slope = value;
	}
	,set_degrees: function(value) {
		this.slope = Math.tan(value * Math.PI / 180);
		this.radians = value * Math.PI / 180;
		return this.degrees = value;
	}
	,set_radians: function(value) {
		this.slope = Math.tan(value);
		this.degrees = value * 180 / Math.PI;
		return this.radians = value;
	}
	,get_yIntercept: function() {
		var px = this.point.x;
		var py = this.point.y;
		if(px > 0) {
			return py - this.slope * px;
		}
		return py + this.slope * px;
	}
	,get_xIntercept: function() {
		var px = this.point.x;
		var py = this.point.y;
		if(py > 0) {
			return (py - this.slope * px) / this.slope;
		}
		return (py + this.slope * px) / this.slope;
	}
	,__class__: vision_ds_Ray2D
	,__properties__: {get_xIntercept:"get_xIntercept",get_yIntercept:"get_yIntercept",set_radians:"set_radians",set_degrees:"set_degrees",set_slope:"set_slope"}
};
var vision_ds_Rectangle = function(x,y,width,height) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["vision.ds.Rectangle"] = vision_ds_Rectangle;
vision_ds_Rectangle.__name__ = "vision.ds.Rectangle";
vision_ds_Rectangle.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,__class__: vision_ds_Rectangle
};
var vision_ds_specifics_PointTransformationPair = function(from,to) {
	this.from = from;
	this.to = to;
};
$hxClasses["vision.ds.specifics.PointTransformationPair"] = vision_ds_specifics_PointTransformationPair;
vision_ds_specifics_PointTransformationPair.__name__ = "vision.ds.specifics.PointTransformationPair";
vision_ds_specifics_PointTransformationPair.prototype = {
	from: null
	,to: null
	,__class__: vision_ds_specifics_PointTransformationPair
};
var vision_exceptions_VisionException = function(message,type) {
	throw "Exception - " + type + ":\n\n\t" + message + "\n";
};
$hxClasses["vision.exceptions.VisionException"] = vision_exceptions_VisionException;
vision_exceptions_VisionException.__name__ = "vision.exceptions.VisionException";
vision_exceptions_VisionException.prototype = {
	__class__: vision_exceptions_VisionException
};
var vision_exceptions_ImageLoadingFailed = function(type,reason) {
	vision_exceptions_VisionException.call(this,reason,"" + type + " Loading Failed");
};
$hxClasses["vision.exceptions.ImageLoadingFailed"] = vision_exceptions_ImageLoadingFailed;
vision_exceptions_ImageLoadingFailed.__name__ = "vision.exceptions.ImageLoadingFailed";
vision_exceptions_ImageLoadingFailed.__super__ = vision_exceptions_VisionException;
vision_exceptions_ImageLoadingFailed.prototype = $extend(vision_exceptions_VisionException.prototype,{
	__class__: vision_exceptions_ImageLoadingFailed
});
var vision_exceptions_ImageSavingFailed = function(type,reason) {
	vision_exceptions_VisionException.call(this,reason,"" + type + " Saving Failed");
};
$hxClasses["vision.exceptions.ImageSavingFailed"] = vision_exceptions_ImageSavingFailed;
vision_exceptions_ImageSavingFailed.__name__ = "vision.exceptions.ImageSavingFailed";
vision_exceptions_ImageSavingFailed.__super__ = vision_exceptions_VisionException;
vision_exceptions_ImageSavingFailed.prototype = $extend(vision_exceptions_VisionException.prototype,{
	__class__: vision_exceptions_ImageSavingFailed
});
var vision_exceptions_LibraryRequired = function(library,dependencies,classDotField,fieldType) {
	if(fieldType == null) {
		fieldType = "function";
	}
	vision_exceptions_VisionException.call(this,"The " + fieldType + " " + classDotField + " requires the " + library + " haxelib.\n\tMake sure " + (library + (dependencies.length > 0 ? " and it's dependencies are" : " is")) + " installed & included:\n\n" + vision_exceptions_LibraryRequired.getInclusionMethod([library].concat(dependencies)),"Missing Library Required");
};
$hxClasses["vision.exceptions.LibraryRequired"] = vision_exceptions_LibraryRequired;
vision_exceptions_LibraryRequired.__name__ = "vision.exceptions.LibraryRequired";
vision_exceptions_LibraryRequired.getInclusionMethod = function(libs) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < libs.length) {
		var lib = libs[_g1];
		++_g1;
		_g.push("\t\t<haxelib name=\"" + lib + "\"/>\n");
	}
	return "" + _g.join("");
};
vision_exceptions_LibraryRequired.__super__ = vision_exceptions_VisionException;
vision_exceptions_LibraryRequired.prototype = $extend(vision_exceptions_VisionException.prototype,{
	__class__: vision_exceptions_LibraryRequired
});
var vision_exceptions_MatrixOperationError = function(op,matrices,offense) {
	vision_exceptions_VisionException.call(this,vision_exceptions_MatrixOperationError.errorByType(op,matrices,offense),"Matrix " + (op.charAt(0).toUpperCase() + HxOverrides.substr(op,1,null)) + " Error");
};
$hxClasses["vision.exceptions.MatrixOperationError"] = vision_exceptions_MatrixOperationError;
vision_exceptions_MatrixOperationError.__name__ = "vision.exceptions.MatrixOperationError";
vision_exceptions_MatrixOperationError.errorByType = function(type,mats,off) {
	var sign = "";
	switch(type) {
	case "Add":case "Addition":case "add":case "addition":
		sign = "+";
		break;
	case "Div":case "Division":case "div":case "division":
		sign = "÷";
		break;
	case "Mult":case "Multiplication":case "mult":case "multiplication":
		sign = "×";
		break;
	case "Sub":case "Subtraction":case "sub":case "subtraction":
		sign = "-";
		break;
	}
	var msg = "Cannot calculate:\n\n";
	var _g = [];
	var _g1 = 0;
	var this1 = mats[0];
	var precision = 3;
	if(precision == null) {
		precision = 5;
	}
	var maxLen = 1;
	var _g2 = 0;
	var _g3 = this1.inner;
	while(_g2 < _g3.length) {
		var item = _g3[_g2];
		++_g2;
		var len;
		if(precision == -1) {
			len = Std.string(item).length;
		} else {
			var multiplier = Math.pow(10,precision);
			len = Std.string(Math.round(item * multiplier) / multiplier).length;
		}
		if(len > maxLen) {
			maxLen = len;
		}
	}
	++maxLen;
	var st = "";
	var _g2 = 0;
	var _g3 = maxLen * this1.width + 2 * (this1.width - 1) - 1;
	while(_g2 < _g3) {
		var i = _g2++;
		st += " ";
	}
	var top = "\n┌ " + st + " ┐";
	var st = "";
	var _g2 = 0;
	var _g3 = maxLen * this1.width + 2 * (this1.width - 1) - 1;
	while(_g2 < _g3) {
		var i = _g2++;
		st += " ";
	}
	var bottom = "└ " + st + " ┘";
	var rows = [""];
	var counter = 0;
	var floor = 0;
	var _g2 = 0;
	var _g3 = this1.inner;
	while(_g2 < _g3.length) {
		var item = _g3[_g2];
		++_g2;
		if(counter < this1.width) {
			var itemString;
			if(precision != -1) {
				var multiplier = Math.pow(10,precision);
				itemString = Math.round(item * multiplier) / multiplier;
			} else {
				itemString = item;
			}
			var itemString1 = Std.string(itemString);
			var add;
			if(precision != -1) {
				var multiplier1 = Math.pow(10,precision);
				add = item != Math.round(item * multiplier1) / multiplier1;
			} else {
				add = false;
			}
			if(add) {
				itemString1 += "…";
			}
			if(itemString1.length < maxLen) {
				var st = "";
				var _g4 = 0;
				var _g5 = Math.floor((maxLen - itemString1.length) / 2);
				while(_g4 < _g5) {
					var i = _g4++;
					st += " ";
				}
				var itemString2 = st + itemString1;
				var st1 = "";
				var _g6 = 0;
				var _g7 = Math.ceil((maxLen - itemString1.length) / 2);
				while(_g6 < _g7) {
					var i1 = _g6++;
					st1 += " ";
				}
				itemString1 = itemString2 + st1;
			}
			var add1 = ", " + itemString1;
			if(counter == 0) {
				add1 = HxOverrides.substr(add1,2,null);
			}
			rows[floor] += add1;
			++counter;
		} else {
			counter = 0;
			++floor;
			rows[floor] = "";
			var itemString3;
			if(precision != -1) {
				var multiplier2 = Math.pow(10,precision);
				itemString3 = Math.round(item * multiplier2) / multiplier2;
			} else {
				itemString3 = item;
			}
			var itemString4 = Std.string(itemString3);
			var add2;
			if(precision != -1) {
				var multiplier3 = Math.pow(10,precision);
				add2 = item != Math.round(item * multiplier3) / multiplier3;
			} else {
				add2 = false;
			}
			if(add2) {
				itemString4 += "…";
			}
			if(itemString4.length < maxLen) {
				var st2 = "";
				var _g8 = 0;
				var _g9 = Math.floor((maxLen - itemString4.length) / 2);
				while(_g8 < _g9) {
					var i2 = _g8++;
					st2 += " ";
				}
				var itemString5 = st2 + itemString4;
				var st3 = "";
				var _g10 = 0;
				var _g11 = Math.ceil((maxLen - itemString4.length) / 2);
				while(_g10 < _g11) {
					var i3 = _g10++;
					st3 += " ";
				}
				itemString4 = itemString5 + st3;
			}
			var add3 = "" + itemString4;
			rows[floor] += add3;
			++counter;
		}
	}
	var string = top + "\n";
	var _g2 = 0;
	while(_g2 < rows.length) {
		var r = rows[_g2];
		++_g2;
		string += "│ " + r + "│\n";
	}
	var array = (string += bottom).split("\n").length;
	var this1 = mats[1];
	var precision = 3;
	if(precision == null) {
		precision = 5;
	}
	var maxLen = 1;
	var _g2 = 0;
	var _g3 = this1.inner;
	while(_g2 < _g3.length) {
		var item = _g3[_g2];
		++_g2;
		var len;
		if(precision == -1) {
			len = Std.string(item).length;
		} else {
			var multiplier = Math.pow(10,precision);
			len = Std.string(Math.round(item * multiplier) / multiplier).length;
		}
		if(len > maxLen) {
			maxLen = len;
		}
	}
	++maxLen;
	var st = "";
	var _g2 = 0;
	var _g3 = maxLen * this1.width + 2 * (this1.width - 1) - 1;
	while(_g2 < _g3) {
		var i = _g2++;
		st += " ";
	}
	var top = "\n┌ " + st + " ┐";
	var st = "";
	var _g2 = 0;
	var _g3 = maxLen * this1.width + 2 * (this1.width - 1) - 1;
	while(_g2 < _g3) {
		var i = _g2++;
		st += " ";
	}
	var bottom = "└ " + st + " ┘";
	var rows = [""];
	var counter = 0;
	var floor = 0;
	var _g2 = 0;
	var _g3 = this1.inner;
	while(_g2 < _g3.length) {
		var item = _g3[_g2];
		++_g2;
		if(counter < this1.width) {
			var itemString;
			if(precision != -1) {
				var multiplier = Math.pow(10,precision);
				itemString = Math.round(item * multiplier) / multiplier;
			} else {
				itemString = item;
			}
			var itemString1 = Std.string(itemString);
			var add;
			if(precision != -1) {
				var multiplier1 = Math.pow(10,precision);
				add = item != Math.round(item * multiplier1) / multiplier1;
			} else {
				add = false;
			}
			if(add) {
				itemString1 += "…";
			}
			if(itemString1.length < maxLen) {
				var st = "";
				var _g4 = 0;
				var _g5 = Math.floor((maxLen - itemString1.length) / 2);
				while(_g4 < _g5) {
					var i = _g4++;
					st += " ";
				}
				var itemString2 = st + itemString1;
				var st1 = "";
				var _g6 = 0;
				var _g7 = Math.ceil((maxLen - itemString1.length) / 2);
				while(_g6 < _g7) {
					var i1 = _g6++;
					st1 += " ";
				}
				itemString1 = itemString2 + st1;
			}
			var add1 = ", " + itemString1;
			if(counter == 0) {
				add1 = HxOverrides.substr(add1,2,null);
			}
			rows[floor] += add1;
			++counter;
		} else {
			counter = 0;
			++floor;
			rows[floor] = "";
			var itemString3;
			if(precision != -1) {
				var multiplier2 = Math.pow(10,precision);
				itemString3 = Math.round(item * multiplier2) / multiplier2;
			} else {
				itemString3 = item;
			}
			var itemString4 = Std.string(itemString3);
			var add2;
			if(precision != -1) {
				var multiplier3 = Math.pow(10,precision);
				add2 = item != Math.round(item * multiplier3) / multiplier3;
			} else {
				add2 = false;
			}
			if(add2) {
				itemString4 += "…";
			}
			if(itemString4.length < maxLen) {
				var st2 = "";
				var _g8 = 0;
				var _g9 = Math.floor((maxLen - itemString4.length) / 2);
				while(_g8 < _g9) {
					var i2 = _g8++;
					st2 += " ";
				}
				var itemString5 = st2 + itemString4;
				var st3 = "";
				var _g10 = 0;
				var _g11 = Math.ceil((maxLen - itemString4.length) / 2);
				while(_g10 < _g11) {
					var i3 = _g10++;
					st3 += " ";
				}
				itemString4 = itemString5 + st3;
			}
			var add3 = "" + itemString4;
			rows[floor] += add3;
			++counter;
		}
	}
	var string = top + "\n";
	var _g2 = 0;
	while(_g2 < rows.length) {
		var r = rows[_g2];
		++_g2;
		string += "│ " + r + "│\n";
	}
	var values = [array,(string += bottom).split("\n").length];
	var max = values[0];
	var _g2 = 0;
	var _g3 = values.length;
	while(_g2 < _g3) {
		var i = _g2++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var _g2 = max;
	while(_g1 < _g2) {
		var i = _g1++;
		var tmp;
		if(mats[0].height + 3 > i) {
			var this1 = mats[0];
			var precision = 3;
			if(precision == null) {
				precision = 5;
			}
			var maxLen = 1;
			var _g3 = 0;
			var _g4 = this1.inner;
			while(_g3 < _g4.length) {
				var item = _g4[_g3];
				++_g3;
				var len;
				if(precision == -1) {
					len = Std.string(item).length;
				} else {
					var multiplier = Math.pow(10,precision);
					len = Std.string(Math.round(item * multiplier) / multiplier).length;
				}
				if(len > maxLen) {
					maxLen = len;
				}
			}
			++maxLen;
			var st = "";
			var _g5 = 0;
			var _g6 = maxLen * this1.width + 2 * (this1.width - 1) - 1;
			while(_g5 < _g6) {
				var i1 = _g5++;
				st += " ";
			}
			var top = "\n┌ " + st + " ┐";
			var st1 = "";
			var _g7 = 0;
			var _g8 = maxLen * this1.width + 2 * (this1.width - 1) - 1;
			while(_g7 < _g8) {
				var i2 = _g7++;
				st1 += " ";
			}
			var bottom = "└ " + st1 + " ┘";
			var rows = [""];
			var counter = 0;
			var floor = 0;
			var _g9 = 0;
			var _g10 = this1.inner;
			while(_g9 < _g10.length) {
				var item1 = _g10[_g9];
				++_g9;
				if(counter < this1.width) {
					var itemString;
					if(precision != -1) {
						var multiplier1 = Math.pow(10,precision);
						itemString = Math.round(item1 * multiplier1) / multiplier1;
					} else {
						itemString = item1;
					}
					var itemString1 = Std.string(itemString);
					var add;
					if(precision != -1) {
						var multiplier2 = Math.pow(10,precision);
						add = item1 != Math.round(item1 * multiplier2) / multiplier2;
					} else {
						add = false;
					}
					if(add) {
						itemString1 += "…";
					}
					if(itemString1.length < maxLen) {
						var st2 = "";
						var _g11 = 0;
						var _g12 = Math.floor((maxLen - itemString1.length) / 2);
						while(_g11 < _g12) {
							var i3 = _g11++;
							st2 += " ";
						}
						var itemString2 = st2 + itemString1;
						var st3 = "";
						var _g13 = 0;
						var _g14 = Math.ceil((maxLen - itemString1.length) / 2);
						while(_g13 < _g14) {
							var i4 = _g13++;
							st3 += " ";
						}
						itemString1 = itemString2 + st3;
					}
					var add1 = ", " + itemString1;
					if(counter == 0) {
						add1 = HxOverrides.substr(add1,2,null);
					}
					rows[floor] += add1;
					++counter;
				} else {
					counter = 0;
					++floor;
					rows[floor] = "";
					var itemString3;
					if(precision != -1) {
						var multiplier3 = Math.pow(10,precision);
						itemString3 = Math.round(item1 * multiplier3) / multiplier3;
					} else {
						itemString3 = item1;
					}
					var itemString4 = Std.string(itemString3);
					var add2;
					if(precision != -1) {
						var multiplier4 = Math.pow(10,precision);
						add2 = item1 != Math.round(item1 * multiplier4) / multiplier4;
					} else {
						add2 = false;
					}
					if(add2) {
						itemString4 += "…";
					}
					if(itemString4.length < maxLen) {
						var st4 = "";
						var _g15 = 0;
						var _g16 = Math.floor((maxLen - itemString4.length) / 2);
						while(_g15 < _g16) {
							var i5 = _g15++;
							st4 += " ";
						}
						var itemString5 = st4 + itemString4;
						var st5 = "";
						var _g17 = 0;
						var _g18 = Math.ceil((maxLen - itemString4.length) / 2);
						while(_g17 < _g18) {
							var i6 = _g17++;
							st5 += " ";
						}
						itemString4 = itemString5 + st5;
					}
					var add3 = "" + itemString4;
					rows[floor] += add3;
					++counter;
				}
			}
			var string = top + "\n";
			var _g19 = 0;
			while(_g19 < rows.length) {
				var r = rows[_g19];
				++_g19;
				string += "│ " + r + "│\n";
			}
			tmp = (string += bottom).split("\n")[i];
		} else {
			tmp = "";
		}
		var tmp1;
		if(mats[1].height + 3 > i) {
			var this2 = mats[1];
			var precision1 = 3;
			if(precision1 == null) {
				precision1 = 5;
			}
			var maxLen1 = 1;
			var _g20 = 0;
			var _g21 = this2.inner;
			while(_g20 < _g21.length) {
				var item2 = _g21[_g20];
				++_g20;
				var len1;
				if(precision1 == -1) {
					len1 = Std.string(item2).length;
				} else {
					var multiplier5 = Math.pow(10,precision1);
					len1 = Std.string(Math.round(item2 * multiplier5) / multiplier5).length;
				}
				if(len1 > maxLen1) {
					maxLen1 = len1;
				}
			}
			++maxLen1;
			var st6 = "";
			var _g22 = 0;
			var _g23 = maxLen1 * this2.width + 2 * (this2.width - 1) - 1;
			while(_g22 < _g23) {
				var i7 = _g22++;
				st6 += " ";
			}
			var top1 = "\n┌ " + st6 + " ┐";
			var st7 = "";
			var _g24 = 0;
			var _g25 = maxLen1 * this2.width + 2 * (this2.width - 1) - 1;
			while(_g24 < _g25) {
				var i8 = _g24++;
				st7 += " ";
			}
			var bottom1 = "└ " + st7 + " ┘";
			var rows1 = [""];
			var counter1 = 0;
			var floor1 = 0;
			var _g26 = 0;
			var _g27 = this2.inner;
			while(_g26 < _g27.length) {
				var item3 = _g27[_g26];
				++_g26;
				if(counter1 < this2.width) {
					var itemString6;
					if(precision1 != -1) {
						var multiplier6 = Math.pow(10,precision1);
						itemString6 = Math.round(item3 * multiplier6) / multiplier6;
					} else {
						itemString6 = item3;
					}
					var itemString7 = Std.string(itemString6);
					var add4;
					if(precision1 != -1) {
						var multiplier7 = Math.pow(10,precision1);
						add4 = item3 != Math.round(item3 * multiplier7) / multiplier7;
					} else {
						add4 = false;
					}
					if(add4) {
						itemString7 += "…";
					}
					if(itemString7.length < maxLen1) {
						var st8 = "";
						var _g28 = 0;
						var _g29 = Math.floor((maxLen1 - itemString7.length) / 2);
						while(_g28 < _g29) {
							var i9 = _g28++;
							st8 += " ";
						}
						var itemString8 = st8 + itemString7;
						var st9 = "";
						var _g30 = 0;
						var _g31 = Math.ceil((maxLen1 - itemString7.length) / 2);
						while(_g30 < _g31) {
							var i10 = _g30++;
							st9 += " ";
						}
						itemString7 = itemString8 + st9;
					}
					var add5 = ", " + itemString7;
					if(counter1 == 0) {
						add5 = HxOverrides.substr(add5,2,null);
					}
					rows1[floor1] += add5;
					++counter1;
				} else {
					counter1 = 0;
					++floor1;
					rows1[floor1] = "";
					var itemString9;
					if(precision1 != -1) {
						var multiplier8 = Math.pow(10,precision1);
						itemString9 = Math.round(item3 * multiplier8) / multiplier8;
					} else {
						itemString9 = item3;
					}
					var itemString10 = Std.string(itemString9);
					var add6;
					if(precision1 != -1) {
						var multiplier9 = Math.pow(10,precision1);
						add6 = item3 != Math.round(item3 * multiplier9) / multiplier9;
					} else {
						add6 = false;
					}
					if(add6) {
						itemString10 += "…";
					}
					if(itemString10.length < maxLen1) {
						var st10 = "";
						var _g32 = 0;
						var _g33 = Math.floor((maxLen1 - itemString10.length) / 2);
						while(_g32 < _g33) {
							var i11 = _g32++;
							st10 += " ";
						}
						var itemString11 = st10 + itemString10;
						var st11 = "";
						var _g34 = 0;
						var _g35 = Math.ceil((maxLen1 - itemString10.length) / 2);
						while(_g34 < _g35) {
							var i12 = _g34++;
							st11 += " ";
						}
						itemString10 = itemString11 + st11;
					}
					var add7 = "" + itemString10;
					rows1[floor1] += add7;
					++counter1;
				}
			}
			var string1 = top1 + "\n";
			var _g36 = 0;
			while(_g36 < rows1.length) {
				var r1 = rows1[_g36];
				++_g36;
				string1 += "│ " + r1 + "│\n";
			}
			tmp1 = (string1 += bottom1).split("\n")[i];
		} else {
			tmp1 = "";
		}
		_g.push([tmp,tmp1]);
	}
	var rows = _g;
	var values = [mats[0].height + 2,mats[1].height + 2];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var signRow = Math.ceil(max / 2);
	var currentRow = 0;
	var _g = 0;
	while(_g < rows.length) {
		var r = rows[_g];
		++_g;
		if(r[0].length == 0) {
			var _g1 = [];
			var _g2 = 0;
			var _g3 = r[1].length;
			while(_g2 < _g3) {
				var i = _g2++;
				_g1.push(" ");
			}
			r[0] = _g1.join("");
		}
		if(r[1].length == 0) {
			var _g4 = [];
			var _g5 = 0;
			var _g6 = r[0].length;
			while(_g5 < _g6) {
				var i1 = _g5++;
				_g4.push(" ");
			}
			r[1] = _g4.join("");
		}
		msg += "\t" + r[0] + "  ";
		if(currentRow == signRow) {
			msg += sign;
		} else {
			msg += " ";
		}
		msg += "  " + r[1];
		++currentRow;
		msg += "\n";
	}
	msg += "\n\t";
	switch(off) {
	case 0:
		msg += "Width of first matrix (" + mats[0].width + ") is different from the height of the second (" + mats[1].height + ")";
		break;
	case 1:
		msg += "Width & height of first matrix (" + mats[0].width + "×" + mats[0].height + ") are different from those of the second matrix (" + mats[1].width + "×" + mats[1].height + ")";
		break;
	case 2:
		msg += "Width & height of first matrix (" + mats[0].width + "×" + mats[0].height + ") are different from those of the second matrix (" + mats[1].width + "×" + mats[1].height + ")";
		break;
	case 3:
		msg += "Width of first matrix (" + mats[0].width + ") is different from the height of the second (" + mats[1].height + ")";
		break;
	}
	return msg;
};
vision_exceptions_MatrixOperationError.__super__ = vision_exceptions_VisionException;
vision_exceptions_MatrixOperationError.prototype = $extend(vision_exceptions_VisionException.prototype,{
	__class__: vision_exceptions_MatrixOperationError
});
var vision_exceptions_MultithreadFailure = function(count,reason) {
	vision_exceptions_VisionException.call(this,"Thread number #" + count + " failed: " + Std.string(reason),"Multithreading Failure");
};
$hxClasses["vision.exceptions.MultithreadFailure"] = vision_exceptions_MultithreadFailure;
vision_exceptions_MultithreadFailure.__name__ = "vision.exceptions.MultithreadFailure";
vision_exceptions_MultithreadFailure.__super__ = vision_exceptions_VisionException;
vision_exceptions_MultithreadFailure.prototype = $extend(vision_exceptions_VisionException.prototype,{
	__class__: vision_exceptions_MultithreadFailure
});
var vision_exceptions_OutOfBounds = function(image,position) {
	vision_exceptions_VisionException.call(this,"pixel " + Std.string(position) + " is outside the bounds of the image (size: " + image.getUInt16(0) + "x" + Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)) + ")","Pixel Coordinates Out Of Bounds");
};
$hxClasses["vision.exceptions.OutOfBounds"] = vision_exceptions_OutOfBounds;
vision_exceptions_OutOfBounds.__name__ = "vision.exceptions.OutOfBounds";
vision_exceptions_OutOfBounds.__super__ = vision_exceptions_VisionException;
vision_exceptions_OutOfBounds.prototype = $extend(vision_exceptions_VisionException.prototype,{
	__class__: vision_exceptions_OutOfBounds
});
var vision_exceptions_Unimplemented = function(name) {
	vision_exceptions_VisionException.call(this,"" + name + " is not yet implemented","Unimplemented Method");
};
$hxClasses["vision.exceptions.Unimplemented"] = vision_exceptions_Unimplemented;
vision_exceptions_Unimplemented.__name__ = "vision.exceptions.Unimplemented";
vision_exceptions_Unimplemented.__super__ = vision_exceptions_VisionException;
vision_exceptions_Unimplemented.prototype = $extend(vision_exceptions_VisionException.prototype,{
	__class__: vision_exceptions_Unimplemented
});
var vision_helpers_TextDrawer = function() { };
$hxClasses["vision.helpers.TextDrawer"] = vision_helpers_TextDrawer;
vision_helpers_TextDrawer.__name__ = "vision.helpers.TextDrawer";
vision_helpers_TextDrawer.reportDependencies = function() {
	throw haxe_Exception.thrown(new vision_exceptions_LibraryRequired("opentype.hx",[].concat(["promhx"]).concat(["buddy"]).concat(["asynctools"]),"Image.drawText"));
};
vision_helpers_TextDrawer.drawTextOnImage = function(image,x,y,size,text,font) {
	vision_helpers_TextDrawer.reportDependencies();
};
var vision_helpers_VisionThread = function(job) {
	this.relaunchEvents = false;
	var _gthis = this;
	this.job = job;
	this.count = vision_helpers_VisionThread.COUNT++;
	this.set_onFailed(function(d) {
		throw haxe_Exception.thrown(new vision_exceptions_MultithreadFailure(_gthis.count,d));
	});
	this.set_onDone(function() {
	});
};
$hxClasses["vision.helpers.VisionThread"] = vision_helpers_VisionThread;
vision_helpers_VisionThread.__name__ = "vision.helpers.VisionThread";
vision_helpers_VisionThread.create = function(job) {
	var t = new vision_helpers_VisionThread(job);
	t.start();
	return t;
};
vision_helpers_VisionThread.prototype = {
	underlying: null
	,job: null
	,onFailed: null
	,onDone: null
	,jobDone: null
	,relaunchEvents: null
	,count: null
	,start: function() {
		var _gthis = this;
		this.underlying = new Promise(function(onDone,onFailedWrapper) {
			_gthis.job();
			_gthis.jobDone = true;
		});
	}
	,onFailedWrapper: function(d) {
		this.jobDone = false;
		this.onFailed(d);
	}
	,set_onFailed: function(value) {
		if(this.relaunchEvents && this.jobDone != null) {
			value(null);
		}
		return this.onFailed = value;
	}
	,set_onDone: function(value) {
		if(this.relaunchEvents && this.jobDone != null) {
			value();
		}
		return this.onDone = value;
	}
	,__class__: vision_helpers_VisionThread
	,__properties__: {set_onDone:"set_onDone",set_onFailed:"set_onFailed"}
};
var vision_tools_ImageTools = function() { };
$hxClasses["vision.tools.ImageTools"] = vision_tools_ImageTools;
vision_tools_ImageTools.__name__ = "vision.tools.ImageTools";
vision_tools_ImageTools.loadFromFile = function(image,path,onComplete) {
	var imgElement = window.document.createElement("img");
	imgElement.src = path;
	imgElement.crossOrigin = "Anonymous";
	imgElement.onload = function() {
		var canvas = window.document.createElement("canvas");
		canvas.width = imgElement.width;
		canvas.height = imgElement.height;
		canvas.getContext("2d",null).drawImage(imgElement,0,0);
		if(image == null) {
			var width = imgElement.width;
			var length = width * imgElement.height * 4 + vision_ds_Image.OFFSET;
			var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
			this1.fill(0,length,0);
			var this2 = this1;
			this2.setUInt16(0,width);
			this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
			this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
			this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,0);
			this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,0);
			this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
			var i = vision_ds_Image.OFFSET;
			while(i < this2.length) {
				this2.b[i] = 0;
				this2.b[i + 1] = 0;
				this2.b[i + 2] = 0;
				this2.b[i + 3] = 0;
				i += 4;
			}
			image = this2;
		}
		var imageData = canvas.getContext("2d",null).getImageData(0,0,image.getUInt16(0),Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
		var i = 0;
		while(i < imageData.data.length) {
			image.b[i + (vision_ds_Image.OFFSET + 1)] = imageData.data[i] & 255;
			image.b[i + (vision_ds_Image.OFFSET + 1) + 1] = imageData.data[i + 1] & 255;
			image.b[i + (vision_ds_Image.OFFSET + 1) + 2] = imageData.data[i + 2] & 255;
			image.b[i + (vision_ds_Image.OFFSET + 1) + 3] = imageData.data[i + 3] & 255;
			i += 4;
		}
		if(onComplete != null) {
			onComplete(image);
		}
	};
};
vision_tools_ImageTools.saveToFile = function(image,pathWithFileName,saveFormat) {
	if(saveFormat == null) {
		saveFormat = 0;
	}
	throw haxe_Exception.thrown(new vision_exceptions_LibraryRequired("format",[],"ImageTools.loadFromFile","function"));
};
vision_tools_ImageTools.addToScreen = function(image,x,y,units) {
	var c = window.document.createElement("canvas");
	c.width = image.getUInt16(0);
	c.height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var ctx = c.getContext("2d",null);
	var imageData = ctx.getImageData(0,0,image.getUInt16(0),Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
	var data = imageData.data;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x1 = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y1 = _g2++;
			var i = (y1 * image.getUInt16(0) + x1) * 4;
			data[i] = image.b[i + (vision_ds_Image.OFFSET + 1)];
			data[i + 1] = image.b[i + (vision_ds_Image.OFFSET + 1) + 1];
			data[i + 2] = image.b[i + (vision_ds_Image.OFFSET + 1) + 2];
			data[i + 3] = image.b[i + (vision_ds_Image.OFFSET + 1) + 3];
		}
	}
	ctx.putImageData(imageData,0,0);
	c.style.position = "absolute";
	if(units == null) {
		units = { };
	}
	c.style.top = y + units.yUnits != null ? y + units.yUnits : y + "px";
	c.style.left = x + units.xUnits != null ? x + units.xUnits : x + "px";
	if(units.zIndex != null) {
		c.style.zIndex = units.zIndex;
	}
	window.document.body.appendChild(c);
	return image;
};
vision_tools_ImageTools.getNeighborsOfPixel = function(image,x,y,kernelSize) {
	var neighbors = new vision_ds_Array2D(kernelSize,kernelSize);
	var i = 0;
	var circular = false;
	if(circular == null) {
		circular = false;
	}
	var _g_image = image;
	var _g_roundedDown = kernelSize - 1 >> 1;
	var _g_x = x;
	var _g_y = y;
	var _g_circular = circular;
	var _g_X = -_g_roundedDown;
	var _g_Y = -_g_roundedDown;
	while(_g_X <= _g_roundedDown && _g_Y <= _g_roundedDown) {
		while(true) {
			++_g_Y;
			if(_g_Y > _g_roundedDown) {
				_g_Y = -_g_roundedDown;
				++_g_X;
			}
			var tmp;
			if(_g_circular) {
				var x = _g_X;
				var y = _g_Y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var point1_x = x;
				var point1_y = y;
				var x1 = _g_roundedDown;
				var y1 = _g_roundedDown;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var point2_x = x1;
				var point2_y = y1;
				var x2 = point2_x - point1_x;
				var y2 = point2_y - point1_y;
				tmp = Math.sqrt(x2 * x2 + y2 * y2) > _g_roundedDown;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
		}
		var this1 = _g_image;
		var y3 = _g_y + _g_Y;
		var ma = this1.getUInt16(0) - 1;
		var values = [_g_x + _g_X,0];
		var max = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i1 = _g++;
			if(values[i1] > max) {
				max = values[i1];
			}
		}
		var values1 = [max,ma];
		var min = values1[0];
		var _g2 = 0;
		var _g3 = values1.length;
		while(_g2 < _g3) {
			var i2 = _g2++;
			if(values1[i2] < min) {
				min = values1[i2];
			}
		}
		var x3 = min;
		var ma1 = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
		var values2 = [y3,0];
		var max1 = values2[0];
		var _g4 = 0;
		var _g5 = values2.length;
		while(_g4 < _g5) {
			var i3 = _g4++;
			if(values2[i3] > max1) {
				max1 = values2[i3];
			}
		}
		var values3 = [max1,ma1];
		var min1 = values3[0];
		var _g6 = 0;
		var _g7 = values3.length;
		while(_g6 < _g7) {
			var i4 = _g6++;
			if(values3[i4] < min1) {
				min1 = values3[i4];
			}
		}
		var y4 = min1;
		if(!(x3 >= 0 && y4 >= 0 && x3 < this1.getUInt16(0) && y4 < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x3;
			var this_y = y4;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y4 * this1.getUInt16(0) + x3) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		var neighbor = value;
		neighbors.inner[i++] = neighbor;
	}
	return neighbors;
};
vision_tools_ImageTools.grayscalePixel = function(pixel) {
	var gray = ((pixel >> 16 & 255) + (pixel >> 8 & 255) + (pixel & 255)) / 3 | 0;
	var Alpha = pixel >> 24 & 255;
	if(Alpha == null) {
		Alpha = 255;
	}
	var color = 0;
	var Alpha1 = Alpha;
	if(Alpha1 == null) {
		Alpha1 = 255;
	}
	color &= -16711681;
	color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 16;
	color &= -65281;
	color |= (gray > 255 ? 255 : gray < 0 ? 0 : gray) << 8;
	color &= -256;
	color |= gray > 255 ? 255 : gray < 0 ? 0 : gray;
	color &= 16777215;
	color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
	return color;
};
vision_tools_ImageTools.fromBitmapData = function(bitmapData) {
	var width = bitmapData.width;
	var length = width * bitmapData.height * 4 + vision_ds_Image.OFFSET;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
	this1.fill(0,length,0);
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var image = this2;
	var _g = 0;
	var _g1 = bitmapData.width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = bitmapData.height;
		while(_g2 < _g3) {
			var y = _g2++;
			var color = bitmapData.getPixel32(x,y);
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
			} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var p_x = x;
							var p_y = y;
							var x3 = p_x - f1_x;
							var y3 = p_y - f1_y;
							var x4 = p_x - f2_x;
							var y4 = p_y - f2_y;
							has = Math.sqrt(x3 * x3 + y3 * y3) + Math.sqrt(x4 * x4 + y4 * y4) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x5 = view.x + view.width / 2;
							var y5 = view.y + view.height / 2 - c1;
							if(y5 == null) {
								y5 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f1_x1 = x5;
							var f1_y1 = y5;
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 + c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f2_x1 = x6;
							var f2_y1 = y6;
							var p_x1 = x;
							var p_y1 = y;
							var x7 = p_x1 - f1_x1;
							var y7 = p_y1 - f1_y1;
							var x8 = p_x1 - f2_x1;
							var y8 = p_y1 - f2_y1;
							has = Math.sqrt(x7 * x7 + y7 * y7) + Math.sqrt(x8 * x8 + y8 * y8) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x9 = x;
							var y9 = y;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var point1_x = x9;
							var point1_y = y9;
							var x10 = view.x + view.width / 2;
							var y10 = view.y + view.height / 2;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point2_x = x10;
							var point2_y = y10;
							var x11 = point2_x - point1_x;
							var y11 = point2_y - point1_y;
							has = Math.sqrt(x11 * x11 + y11 * y11) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					image.b[position] = color >> 24 & 255 & 255;
					image.b[position + 1] = color >> 16 & 255 & 255;
					image.b[position + 2] = color >> 8 & 255 & 255;
					image.b[position + 3] = color & 255 & 255;
				}
			} else {
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = color >> 24 & 255 & 255;
				image.b[position1 + 1] = color >> 16 & 255 & 255;
				image.b[position1 + 2] = color >> 8 & 255 & 255;
				image.b[position1 + 3] = color & 255 & 255;
			}
		}
	}
	return image;
};
vision_tools_ImageTools.toBitmapData = function(image) {
	var bitmapData = new openfl_display_BitmapData(image.getUInt16(0),Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)),true,0);
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y * image.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
			if(value == null) {
				value = 0;
			}
			bitmapData.setPixel32(x,y,value);
		}
	}
	return bitmapData;
};
vision_tools_ImageTools.fromSprite = function(sprite) {
	var bmp = new openfl_display_BitmapData(sprite.get_width() | 0,sprite.get_height() | 0);
	bmp.draw(sprite);
	return vision_tools_ImageTools.fromBitmapData(bmp);
};
vision_tools_ImageTools.toSprite = function(image) {
	var bmp = vision_tools_ImageTools.toBitmapData(image);
	var s = new openfl_display_Sprite();
	s.addChild(new openfl_display_Bitmap(bmp));
	return s;
};
vision_tools_ImageTools.fromShape = function(shape) {
	var bmp = new openfl_display_BitmapData(shape.get_width() | 0,shape.get_height() | 0);
	bmp.draw(shape);
	return vision_tools_ImageTools.fromBitmapData(bmp);
};
vision_tools_ImageTools.toShape = function(image) {
	var s = vision_tools_ImageTools.toSprite(image);
	var sh = new openfl_display_Shape();
	sh.get_graphics().drawGraphicsData(s.get_graphics().readGraphicsData());
	return sh;
};
vision_tools_ImageTools.fromLimeImage = function(limeImage) {
	var width = limeImage.width;
	var length = width * limeImage.height * 4 + vision_ds_Image.OFFSET;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
	this1.fill(0,length,0);
	var this2 = this1;
	this2.setUInt16(0,width);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,0);
	this2.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,0);
	this2.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	var i = vision_ds_Image.OFFSET;
	while(i < this2.length) {
		this2.b[i] = 0;
		this2.b[i + 1] = 0;
		this2.b[i + 2] = 0;
		this2.b[i + 3] = 0;
		i += 4;
	}
	var image = this2;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var color = limeImage.getPixel(x,y);
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
			} else if(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) {
				var v = null;
				var tmp;
				if(!(image.getUInt16(vision_ds_Image.WIDTH_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES) != 0 || image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP) != 0 || image.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] != 0) && v == null) {
					tmp = x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
				} else {
					var has = false;
					var view;
					if(v != null) {
						view = v;
					} else {
						var _g4 = image.getUInt16(vision_ds_Image.WIDTH_BYTES);
						var _g5 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP);
						var _g6 = image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES);
						var image1 = image.b;
						var view1 = vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES;
						view = new vision_ds_ImageView(_g4,_g5,_g6,image.getUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP),image1[view1]);
					}
					switch(view.shape) {
					case 0:
						has = x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y;
						break;
					case 1:
						has = !(x < view.x + view.width && y < view.y + view.height && x >= view.x && y >= view.y);
						break;
					case 2:case 3:
						if(view.width > view.height) {
							var a = view.width / 2;
							var b = view.height / 2;
							var c = Math.sqrt(a * a - b * b);
							var x1 = view.x + view.width / 2 - c;
							var y1 = view.y + view.height / 2;
							if(y1 == null) {
								y1 = 0;
							}
							if(x1 == null) {
								x1 = 0;
							}
							var f1_x = x1;
							var f1_y = y1;
							var x2 = view.x + view.width / 2 + c;
							var y2 = view.y + view.height / 2;
							if(y2 == null) {
								y2 = 0;
							}
							if(x2 == null) {
								x2 = 0;
							}
							var f2_x = x2;
							var f2_y = y2;
							var p_x = x;
							var p_y = y;
							var x3 = p_x - f1_x;
							var y3 = p_y - f1_y;
							var x4 = p_x - f2_x;
							var y4 = p_y - f2_y;
							has = Math.sqrt(x3 * x3 + y3 * y3) + Math.sqrt(x4 * x4 + y4 * y4) <= view.width;
							if(view.shape == 3) {
								has = !has;
							}
						} else if(view.height > view.width) {
							var a1 = view.height / 2;
							var b1 = view.width / 2;
							var c1 = Math.sqrt(a1 * a1 - b1 * b1);
							var x5 = view.x + view.width / 2;
							var y5 = view.y + view.height / 2 - c1;
							if(y5 == null) {
								y5 = 0;
							}
							if(x5 == null) {
								x5 = 0;
							}
							var f1_x1 = x5;
							var f1_y1 = y5;
							var x6 = view.x + view.width / 2;
							var y6 = view.y + view.height / 2 + c1;
							if(y6 == null) {
								y6 = 0;
							}
							if(x6 == null) {
								x6 = 0;
							}
							var f2_x1 = x6;
							var f2_y1 = y6;
							var p_x1 = x;
							var p_y1 = y;
							var x7 = p_x1 - f1_x1;
							var y7 = p_y1 - f1_y1;
							var x8 = p_x1 - f2_x1;
							var y8 = p_y1 - f2_y1;
							has = Math.sqrt(x7 * x7 + y7 * y7) + Math.sqrt(x8 * x8 + y8 * y8) <= view.height;
							if(view.shape == 3) {
								has = !has;
							}
						} else {
							var x9 = x;
							var y9 = y;
							if(y9 == null) {
								y9 = 0;
							}
							if(x9 == null) {
								x9 = 0;
							}
							var point1_x = x9;
							var point1_y = y9;
							var x10 = view.x + view.width / 2;
							var y10 = view.y + view.height / 2;
							if(y10 == null) {
								y10 = 0;
							}
							if(x10 == null) {
								x10 = 0;
							}
							var point2_x = x10;
							var point2_y = y10;
							var x11 = point2_x - point1_x;
							var y11 = point2_y - point1_y;
							has = Math.sqrt(x11 * x11 + y11 * y11) <= view.width / 2;
							if(view.shape == 3) {
								has = !has;
							}
						}
						break;
					case 4:
						has = Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1;
						break;
					case 5:
						has = !(Math.abs(x - view.x - view.width / 2) / (view.width / 2) + Math.abs(y - view.y - view.height / 2) / (view.height / 2) <= 1);
						break;
					}
					tmp = has;
				}
				if(tmp) {
					var position = (y * image.getUInt16(0) + x) * 4;
					position += vision_ds_Image.OFFSET;
					image.b[position] = color >> 24 & 255 & 255;
					image.b[position + 1] = color >> 16 & 255 & 255;
					image.b[position + 2] = color >> 8 & 255 & 255;
					image.b[position + 3] = color & 255 & 255;
				}
			} else {
				var position1 = (y * image.getUInt16(0) + x) * 4;
				position1 += vision_ds_Image.OFFSET;
				image.b[position1] = color >> 24 & 255 & 255;
				image.b[position1 + 1] = color >> 16 & 255 & 255;
				image.b[position1 + 2] = color >> 8 & 255 & 255;
				image.b[position1 + 3] = color & 255 & 255;
			}
		}
	}
	return image;
};
vision_tools_ImageTools.toLimeImage = function(image) {
	var limeImage = new lime_graphics_Image(null,image.getUInt16(0),Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			if(!(x >= 0 && y >= 0 && x < image.getUInt16(0) && y < Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)))) {
				var this_x = x;
				var this_y = y;
				throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(image,new vision_ds_Point2D(this_x,this_y)));
			}
			var position = (y * image.getUInt16(0) + x) * 4;
			position += vision_ds_Image.OFFSET;
			var value = image.b[position] << 24 | image.b[position + 1] << 16 | image.b[position + 2] << 8 | image.b[position + 3];
			if(value == null) {
				value = 0;
			}
			limeImage.setPixel(x,y,value);
		}
	}
	return limeImage;
};
vision_tools_ImageTools.fromJsCanvas = function(canvas) {
	var length = vision_ds_Image.OFFSET + (canvas.width + canvas.height) * 4;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
	this1.fill(0,length,0);
	var bytes = this1;
	var width = canvas.width;
	var height = canvas.height;
	var h = height != null ? height : Math.ceil(bytes.length / 4 / width);
	var length = width * h * 4 + vision_ds_Image.OFFSET;
	var this1 = new haxe_io_Bytes(new ArrayBuffer(length));
	this1.fill(0,length,0);
	var array = this1;
	array.fill(0,array.length,0);
	array.setUInt16(0,width);
	array.setUInt16(vision_ds_Image.WIDTH_BYTES,0);
	array.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.DATA_GAP,0);
	array.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES,0);
	array.setUInt16(vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.DATA_GAP,0);
	array.b[vision_ds_Image.WIDTH_BYTES + vision_ds_Image.VIEW_XY_BYTES + vision_ds_Image.VIEW_WH_BYTES] = 0;
	array.blit(vision_ds_Image.OFFSET,bytes,0,bytes.length);
	var image = array;
	var imageData = canvas.getContext("2d",null).getImageData(0,0,image.getUInt16(0),Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
	var i = 0;
	while(i < imageData.data.length) {
		image.b[i + (vision_ds_Image.OFFSET + 1)] = imageData.data[i] & 255;
		image.b[i + (vision_ds_Image.OFFSET + 1) + 1] = imageData.data[i + 1] & 255;
		image.b[i + (vision_ds_Image.OFFSET + 1) + 2] = imageData.data[i + 2] & 255;
		image.b[i + (vision_ds_Image.OFFSET + 1) + 3] = imageData.data[i + 3] & 255;
		i += 4;
	}
	return image;
};
vision_tools_ImageTools.toJsCanvas = function(image) {
	var c = window.document.createElement("canvas");
	c.width = image.getUInt16(0);
	c.height = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
	var ctx = c.getContext("2d",null);
	var imageData = ctx.getImageData(0,0,image.getUInt16(0),Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4)));
	var data = imageData.data;
	var _g = 0;
	var _g1 = image.getUInt16(0);
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = Math.ceil((image.length - vision_ds_Image.OFFSET) / (image.getUInt16(0) * 4));
		while(_g2 < _g3) {
			var y = _g2++;
			var i = (y * image.getUInt16(0) + x) * 4;
			data[i] = image.b[i + (vision_ds_Image.OFFSET + 1)];
			data[i + 1] = image.b[i + (vision_ds_Image.OFFSET + 1) + 1];
			data[i + 2] = image.b[i + (vision_ds_Image.OFFSET + 1) + 2];
			data[i + 3] = image.b[i + (vision_ds_Image.OFFSET + 1) + 3];
		}
	}
	ctx.putImageData(imageData,0,0);
	return c;
};
vision_tools_ImageTools.fromJsImage = function(image) {
	var canvas = window.document.createElement("canvas");
	canvas.width = image.width;
	canvas.height = image.height;
	canvas.getContext("2d",null).drawImage(image,0,0);
	return vision_tools_ImageTools.fromJsCanvas(canvas);
};
vision_tools_ImageTools.toJsImage = function(image) {
	var canvas = vision_ds_Image.toJsCanvas(image);
	var htmlImage = window.document.createElement("img");
	htmlImage.src = canvas.toDataURL();
	return htmlImage;
};
var vision_tools__$ImageTools_NeighborsIterator = function(image,x,y,kernelSize,circular) {
	if(circular == null) {
		circular = false;
	}
	this.image = image;
	this.roundedDown = kernelSize - 1 >> 1;
	this.x = x;
	this.y = y;
	this.circular = circular;
	this.X = -this.roundedDown;
	this.Y = -this.roundedDown;
};
$hxClasses["vision.tools._ImageTools.NeighborsIterator"] = vision_tools__$ImageTools_NeighborsIterator;
vision_tools__$ImageTools_NeighborsIterator.__name__ = "vision.tools._ImageTools.NeighborsIterator";
vision_tools__$ImageTools_NeighborsIterator.prototype = {
	roundedDown: null
	,image: null
	,x: null
	,y: null
	,X: null
	,Y: null
	,circular: null
	,next: function() {
		while(true) {
			this.Y += 1;
			if(this.Y > this.roundedDown) {
				this.Y = -this.roundedDown;
				this.X += 1;
			}
			var tmp;
			if(this.circular) {
				var x = this.X;
				var y = this.Y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var point1_x = x;
				var point1_y = y;
				var x1 = this.roundedDown;
				var y1 = this.roundedDown;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var point2_x = x1;
				var point2_y = y1;
				var x2 = point2_x - point1_x;
				var y2 = point2_y - point1_y;
				tmp = Math.sqrt(x2 * x2 + y2 * y2) > this.roundedDown;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
		}
		var this1 = this.image;
		var x = this.x + this.X;
		var y = this.y + this.Y;
		var ma = this1.getUInt16(0) - 1;
		var values = [x,0];
		var max = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] > max) {
				max = values[i];
			}
		}
		var values = [max,ma];
		var min = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] < min) {
				min = values[i];
			}
		}
		var x = min;
		var ma = Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)) - 1;
		var values = [y,0];
		var max = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] > max) {
				max = values[i];
			}
		}
		var values = [max,ma];
		var min = values[0];
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			if(values[i] < min) {
				min = values[i];
			}
		}
		var y = min;
		if(!(x >= 0 && y >= 0 && x < this1.getUInt16(0) && y < Math.ceil((this1.length - vision_ds_Image.OFFSET) / (this1.getUInt16(0) * 4)))) {
			var this_x = x;
			var this_y = y;
			throw haxe_Exception.thrown(new vision_exceptions_OutOfBounds(this1,new vision_ds_Point2D(this_x,this_y)));
		}
		var position = (y * this1.getUInt16(0) + x) * 4;
		position += vision_ds_Image.OFFSET;
		var value = this1.b[position] << 24 | this1.b[position + 1] << 16 | this1.b[position + 2] << 8 | this1.b[position + 3];
		if(value == null) {
			value = 0;
		}
		return value;
	}
	,hasNext: function() {
		if(this.X <= this.roundedDown) {
			return this.Y <= this.roundedDown;
		} else {
			return false;
		}
	}
	,__class__: vision_tools__$ImageTools_NeighborsIterator
};
var vision_tools_MathTools = function() { };
$hxClasses["vision.tools.MathTools"] = vision_tools_MathTools;
vision_tools_MathTools.__name__ = "vision.tools.MathTools";
vision_tools_MathTools.__properties__ = {get_NaN:"get_NaN",get_POSITIVE_INFINITY:"get_POSITIVE_INFINITY",get_NEGATIVE_INFINITY:"get_NEGATIVE_INFINITY",get_PI_OVER_2:"get_PI_OVER_2",get_PI:"get_PI"};
vision_tools_MathTools.distanceFromRayToPoint2D = function(ray,point) {
	var vx = point.x - ray.point.x;
	var vy = point.y - ray.point.y;
	var projection = (vx + vy * ray.slope) / (1 + Math.pow(ray.slope,2));
	var x = ray.point.x + projection;
	var y = ray.point.y + projection * ray.slope;
	var x1 = x;
	var y1 = y;
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var closestPoint_x = x1;
	var closestPoint_y = y1;
	var dx = closestPoint_x - point.x;
	var dy = closestPoint_y - point.y;
	var distance = Math.sqrt(Math.pow(dx,2) + Math.pow(dy,2));
	return distance;
};
vision_tools_MathTools.intersectionBetweenRay2Ds = function(ray,ray2) {
	var line1StartX = ray.point.x;
	var line1StartY = ray.point.y;
	var line1EndX = ray.point.x + Math.cos(ray.radians) * 1000;
	var line1EndY = ray.point.y + Math.sin(ray.radians) * 1000;
	var line2StartX = ray2.point.x;
	var line2StartY = ray2.point.y;
	var line2EndX = ray2.point.x + Math.cos(ray2.radians) * 1000;
	var line2EndY = ray2.point.y + Math.sin(ray2.radians) * 1000;
	var result = null;
	var denominator = (line2EndY - line2StartY) * (line1EndX - line1StartX) - (line2EndX - line2StartX) * (line1EndY - line1StartY);
	if(denominator == 0) {
		return result;
	}
	var a = line1StartY - line2StartY;
	var b = line1StartX - line2StartX;
	var numerator1 = (line2EndX - line2StartX) * a - (line2EndY - line2StartY) * b;
	var numerator2 = (line1EndX - line1StartX) * a - (line1EndY - line1StartY) * b;
	a = numerator1 / denominator;
	b = numerator2 / denominator;
	result = new vision_ds_Point2D();
	result.x = line1StartX + a * (line1EndX - line1StartX);
	result.y = line1StartY + a * (line1EndY - line1StartY);
	return result;
};
vision_tools_MathTools.distanceBetweenRays2D = function(ray,ray2) {
	if(ray.radians != ray2.radians) {
		return 0;
	}
	var point = ray.point;
	var ray2_slope;
	var ray2_radians;
	var ray2_degrees;
	var m = null;
	var degrees = ray.degrees + 90;
	var radians = null;
	var ray2_point = point;
	if(m != null) {
		ray2_degrees = Math.atan(m) * 180 / Math.PI;
		ray2_radians = Math.atan(m);
		ray2_slope = m;
		var value = Math.atan(m) * 180 / Math.PI;
		ray2_slope = Math.tan(value * Math.PI / 180);
		ray2_radians = value * Math.PI / 180;
		ray2_degrees = value;
		var value = Math.atan(m);
		ray2_slope = Math.tan(value);
		ray2_degrees = value * 180 / Math.PI;
		ray2_radians = value;
	} else if(degrees != null) {
		ray2_slope = Math.tan(degrees * Math.PI / 180);
		ray2_radians = degrees * Math.PI / 180;
		ray2_degrees = degrees;
		var value = Math.tan(degrees * Math.PI / 180);
		ray2_degrees = Math.atan(value) * 180 / Math.PI;
		ray2_radians = Math.atan(value);
		ray2_slope = value;
		var value = degrees * Math.PI / 180;
		ray2_slope = Math.tan(value);
		ray2_degrees = value * 180 / Math.PI;
		ray2_radians = value;
	} else if(radians != null) {
		ray2_slope = Math.tan(radians);
		ray2_degrees = radians * 180 / Math.PI;
		ray2_radians = radians;
		var value = Math.tan(radians);
		ray2_degrees = Math.atan(value) * 180 / Math.PI;
		ray2_radians = Math.atan(value);
		ray2_slope = value;
		var value = radians * 180 / Math.PI;
		ray2_slope = Math.tan(value * Math.PI / 180);
		ray2_radians = value * Math.PI / 180;
		ray2_degrees = value;
	}
	var line1StartX = ray2.point.x;
	var line1StartY = ray2.point.y;
	var line1EndX = ray2.point.x + Math.cos(ray2.radians) * 1000;
	var line1EndY = ray2.point.y + Math.sin(ray2.radians) * 1000;
	var line2StartX = ray2_point.x;
	var line2StartY = ray2_point.y;
	var line2EndX = ray2_point.x + Math.cos(ray2_radians) * 1000;
	var line2EndY = ray2_point.y + Math.sin(ray2_radians) * 1000;
	var a;
	var b;
	var numerator1;
	var numerator2;
	var result = null;
	var denominator = (line2EndY - line2StartY) * (line1EndX - line1StartX) - (line2EndX - line2StartX) * (line1EndY - line1StartY);
	var intersectionOfPerpendicularWithRay2;
	if(denominator == 0) {
		intersectionOfPerpendicularWithRay2 = result;
	} else {
		a = line1StartY - line2StartY;
		b = line1StartX - line2StartX;
		numerator1 = (line2EndX - line2StartX) * a - (line2EndY - line2StartY) * b;
		numerator2 = (line1EndX - line1StartX) * a - (line1EndY - line1StartY) * b;
		a = numerator1 / denominator;
		b = numerator2 / denominator;
		result = new vision_ds_Point2D();
		result.x = line1StartX + a * (line1EndX - line1StartX);
		result.y = line1StartY + a * (line1EndY - line1StartY);
		intersectionOfPerpendicularWithRay2 = result;
	}
	var x = intersectionOfPerpendicularWithRay2.x - point.x;
	var y = intersectionOfPerpendicularWithRay2.y - point.y;
	return Math.sqrt(x * x + y * y);
};
vision_tools_MathTools.findPointAtDistanceUsingX = function(ray,startXPos,distance,goPositive) {
	if(goPositive == null) {
		goPositive = true;
	}
	distance = Math.abs(distance);
	var x = startXPos;
	var px = ray.point.x;
	var py = ray.point.y;
	var y = ray.slope * startXPos + (px > 0 ? py - ray.slope * px : py + ray.slope * px);
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var start_x = x;
	var start_y = y;
	var x = start_y + 1;
	var x1 = x;
	var px = ray.point.x;
	var py = ray.point.y;
	var y = ray.slope * x + (px > 0 ? py - ray.slope * px : py + ray.slope * px);
	if(y == null) {
		y = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var point1_x = x1;
	var point1_y = y;
	var x = start_x - point1_x;
	var y = start_y - point1_y;
	var step = Math.sqrt(x * x + y * y);
	var diff = distance / step;
	var y = start_y + (goPositive ? diff : -diff);
	var px = ray.point.x;
	var py = ray.point.y;
	return new vision_ds_Point2D((y - (px > 0 ? py - ray.slope * px : py + ray.slope * px)) / ray.slope,y);
};
vision_tools_MathTools.findPointAtDistanceUsingY = function(ray,startYPos,distance,goPositive) {
	if(goPositive == null) {
		goPositive = true;
	}
	distance = Math.abs(distance);
	var px = ray.point.x;
	var py = ray.point.y;
	var x = (startYPos - (px > 0 ? py - ray.slope * px : py + ray.slope * px)) / ray.slope;
	var y = startYPos;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var start_x = x;
	var start_y = y;
	var y = start_x + 1;
	var px = ray.point.x;
	var py = ray.point.y;
	var x = (y - (px > 0 ? py - ray.slope * px : py + ray.slope * px)) / ray.slope;
	var y1 = y;
	if(y1 == null) {
		y1 = 0;
	}
	if(x == null) {
		x = 0;
	}
	var point1_x = x;
	var point1_y = y1;
	var x = start_x - point1_x;
	var y = start_y - point1_y;
	var step = Math.sqrt(x * x + y * y);
	var diff = distance / step;
	var x = start_x + (goPositive ? diff : -diff);
	var px = ray.point.x;
	var py = ray.point.y;
	return new vision_ds_Point2D(x,ray.slope * x + (px > 0 ? py - ray.slope * px : py + ray.slope * px));
};
vision_tools_MathTools.distanceFromLineToPoint2D = function(line,point) {
	var ch = (line.start.y - line.end.y) * point.x + (line.end.x - line.start.x) * point.y + (line.start.x * line.end.y - line.end.x * line.start.y);
	var del = Math.sqrt(Math.pow(line.end.x - line.start.x,2) + Math.pow(line.end.y - line.start.y,2));
	var d = ch / del;
	return d;
};
vision_tools_MathTools.distanceBetweenLines2D = function(line1,line2) {
	var x1 = line1.start.x;
	var y1 = line1.start.y;
	var x2 = line1.end.x;
	var y2 = line1.end.y;
	var x3 = line2.start.x;
	var y3 = line2.start.y;
	var x4 = line2.end.x;
	var y4 = line2.end.y;
	var denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
	var tmp;
	if(x1 == x2 && y1 == y2 || x3 == x4 && y3 == y4) {
		tmp = null;
	} else if(denominator == 0) {
		tmp = null;
	} else {
		var ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;
		var ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;
		if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
			tmp = null;
		} else {
			var x = x1 + ua * (x2 - x1);
			var y = y1 + ua * (y2 - y1);
			tmp = new vision_ds_Point2D(x | 0,y | 0);
		}
	}
	if(tmp != null) {
		return 0;
	}
	var point = line2.start;
	var ch = (line1.start.y - line1.end.y) * point.x + (line1.end.x - line1.start.x) * point.y + (line1.start.x * line1.end.y - line1.end.x * line1.start.y);
	var del = Math.sqrt(Math.pow(line1.end.x - line1.start.x,2) + Math.pow(line1.end.y - line1.start.y,2));
	var d = ch / del;
	var distance1 = d;
	var point = line2.end;
	var ch = (line1.start.y - line1.end.y) * point.x + (line1.end.x - line1.start.x) * point.y + (line1.start.x * line1.end.y - line1.end.x * line1.start.y);
	var del = Math.sqrt(Math.pow(line1.end.x - line1.start.x,2) + Math.pow(line1.end.y - line1.start.y,2));
	var d = ch / del;
	var distance2 = d;
	var point = line1.start;
	var ch = (line2.start.y - line2.end.y) * point.x + (line2.end.x - line2.start.x) * point.y + (line2.start.x * line2.end.y - line2.end.x * line2.start.y);
	var del = Math.sqrt(Math.pow(line2.end.x - line2.start.x,2) + Math.pow(line2.end.y - line2.start.y,2));
	var d = ch / del;
	var distance3 = d;
	var point = line1.end;
	var ch = (line2.start.y - line2.end.y) * point.x + (line2.end.x - line2.start.x) * point.y + (line2.start.x * line2.end.y - line2.end.x * line2.start.y);
	var del = Math.sqrt(Math.pow(line2.end.x - line2.start.x,2) + Math.pow(line2.end.y - line2.start.y,2));
	var d = ch / del;
	var distance4 = d;
	var values = [distance1,distance2,distance3,distance4];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	var distance = min;
	return distance;
};
vision_tools_MathTools.radiansFromLineToPoint2D = function(line,point) {
	var angle = Math.atan2(line.end.x - line.start.x,line.end.y - line.start.y);
	var angle2 = Math.atan2(point.x - line.start.x,point.y - line.start.y);
	return angle2 - angle;
};
vision_tools_MathTools.intersectionBetweenLine2Ds = function(line1,line2) {
	var x1 = line1.start.x;
	var y1 = line1.start.y;
	var x2 = line1.end.x;
	var y2 = line1.end.y;
	var x3 = line2.start.x;
	var y3 = line2.start.y;
	var x4 = line2.end.x;
	var y4 = line2.end.y;
	var denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
	if(x1 == x2 && y1 == y2 || x3 == x4 && y3 == y4) {
		return null;
	}
	if(denominator == 0) {
		return null;
	}
	var ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;
	var ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;
	if(ua < 0 || ua > 1 || ub < 0 || ub > 1) {
		return null;
	}
	var x = x1 + ua * (x2 - x1);
	var y = y1 + ua * (y2 - y1);
	return new vision_ds_Point2D(x | 0,y | 0);
};
vision_tools_MathTools.mirrorInsideRectangle = function(line,rect) {
	var diffSX = line.start.x - rect.x;
	var diffEX = line.end.x - rect.x;
	line.start.x = rect.x + rect.width - diffSX;
	line.end.x = rect.x + rect.width - diffEX;
	return line;
};
vision_tools_MathTools.flipInsideRectangle = function(line,rect) {
	var diffSY = line.start.y - rect.y;
	var diffEY = line.end.y - rect.y;
	line.start.y = rect.y + rect.width - diffSY;
	line.end.y = rect.y + rect.width - diffEY;
	return line;
};
vision_tools_MathTools.invertInsideRectangle = function(line,rect) {
	var diffSY = line.start.y - rect.y;
	var diffEY = line.end.y - rect.y;
	var diffSX = line.start.x - rect.x;
	var diffEX = line.end.x - rect.x;
	line.start.x = rect.x + rect.width - diffSX;
	line.end.x = rect.x + rect.width - diffEX;
	line.start.y = rect.y + rect.width - diffSY;
	line.end.y = rect.y + rect.width - diffEY;
	return line;
};
vision_tools_MathTools.clamp = function(value,mi,ma) {
	var values = [value,mi];
	var max = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] > max) {
			max = values[i];
		}
	}
	var values = [max,ma];
	var min = values[0];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	return min;
};
vision_tools_MathTools.isBetweenRanges = function(value) {
	var $l=arguments.length;
	var ranges = new Array($l>1?$l-1:0);
	for(var $i=1;$i<$l;++$i){ranges[$i-1]=arguments[$i];}
	var between = false;
	var _g_current = 0;
	var _g_args = ranges;
	while(_g_current < _g_args.length) {
		var range = _g_args[_g_current++];
		if(range.end < range.start) {
			var temp = range.start;
			range.start = range.end;
			range.end = temp;
		}
		between = value > range.start && value > range.end;
		if(between) {
			return true;
		}
	}
	return false;
};
vision_tools_MathTools.isBetweenRange = function(value,min,max) {
	if(value > min) {
		return value > max;
	} else {
		return false;
	}
};
vision_tools_MathTools.wrapInt = function(value,min,max) {
	var range = max - min + 1;
	if(value < min) {
		value += range * ((min - value) / range + 1 | 0);
	}
	return min + (value - min) % range;
};
vision_tools_MathTools.wrapFloat = function(value,min,max) {
	var range = max - min;
	if(value < min) {
		value += range * (min - value) / range + 1;
	}
	return min + (value - min) % range;
};
vision_tools_MathTools.boundInt = function(value,min,max) {
	if(value < min) {
		return min;
	}
	if(value > max) {
		return max;
	}
	return value;
};
vision_tools_MathTools.boundFloat = function(value,min,max) {
	var t = value < min ? min : value;
	if(t > max) {
		return max;
	} else {
		return t;
	}
};
vision_tools_MathTools.gamma = function(x) {
	var g = 7.0;
	var p = [0.99999999999980993,676.5203681218851,-1259.1392167224028,771.32342877765313,-176.61502916214059,12.507343278686905,-0.13857109526572012,9.9843695780195716e-6,1.5056327351493116e-7];
	if(x < 0.5) {
		return Math.PI / (Math.sin(Math.PI * x) * vision_tools_MathTools.gamma(1 - x));
	} else {
		--x;
		var a = p[0];
		var t = x + g + 0.5;
		var _g = 1;
		var _g1 = p.length;
		while(_g < _g1) {
			var i = _g++;
			a += p[i] / (x + i);
		}
		return Math.sqrt(Math.PI * 2) * Math.pow(t,x + 0.5) * Math.exp(-t) * a;
	}
};
vision_tools_MathTools.factorial = function(value) {
	var val = vision_tools_MathTools.gamma(value + 1);
	return val;
};
vision_tools_MathTools.slopeToDegrees = function(slope) {
	return Math.atan(slope) * 180 / Math.PI;
};
vision_tools_MathTools.slopeToRadians = function(slope) {
	return Math.atan(slope);
};
vision_tools_MathTools.degreesToSlope = function(degrees) {
	return Math.tan(degrees * Math.PI / 180);
};
vision_tools_MathTools.degreesToRadians = function(degrees) {
	return degrees * Math.PI / 180;
};
vision_tools_MathTools.radiansToDegrees = function(radians) {
	return radians * 180 / Math.PI;
};
vision_tools_MathTools.radiansToSlope = function(radians) {
	return Math.tan(radians);
};
vision_tools_MathTools.cotan = function(radians) {
	return 1 / Math.tan(radians);
};
vision_tools_MathTools.cosec = function(radians) {
	return 1 / Math.sin(radians);
};
vision_tools_MathTools.sec = function(radians) {
	return 1 / Math.cos(radians);
};
vision_tools_MathTools.sind = function(degrees) {
	return Math.sin(degrees * Math.PI / 180);
};
vision_tools_MathTools.cosd = function(degrees) {
	return Math.cos(degrees * Math.PI / 180);
};
vision_tools_MathTools.tand = function(degrees) {
	return Math.tan(degrees * Math.PI / 180);
};
vision_tools_MathTools.cotand = function(degrees) {
	return 1 / Math.tan(degrees * Math.PI / 180);
};
vision_tools_MathTools.cosecd = function(degrees) {
	return 1 / Math.sin(degrees * Math.PI / 180);
};
vision_tools_MathTools.secd = function(degrees) {
	return 1 / Math.cos(degrees * Math.PI / 180);
};
vision_tools_MathTools.truncate = function(num,numbersAfterDecimal) {
	var multiplier = Math.pow(10,numbersAfterDecimal);
	return Math.round(num * multiplier) / multiplier;
};
vision_tools_MathTools.cropDecimal = function(number) {
	if(number < 0) {
		return Math.ceil(number);
	}
	return Math.floor(number);
};
vision_tools_MathTools.isInt = function(v) {
	return v == (v | 0);
};
vision_tools_MathTools.get_NEGATIVE_INFINITY = function() {
	return -Infinity;
};
vision_tools_MathTools.get_POSITIVE_INFINITY = function() {
	return Infinity;
};
vision_tools_MathTools.get_NaN = function() {
	return NaN;
};
vision_tools_MathTools.get_PI_OVER_2 = function() {
	return Math.PI / 2;
};
vision_tools_MathTools.get_PI = function() {
	return Math.PI;
};
vision_tools_MathTools.abs = function(v) {
	return Math.abs(v);
};
vision_tools_MathTools.acos = function(v) {
	return Math.acos(v);
};
vision_tools_MathTools.asin = function(v) {
	return Math.asin(v);
};
vision_tools_MathTools.atan = function(v) {
	return Math.atan(v);
};
vision_tools_MathTools.atan2 = function(y,x) {
	return Math.atan2(x,y);
};
vision_tools_MathTools.ceil = function(v) {
	return Math.ceil(v);
};
vision_tools_MathTools.cos = function(radians) {
	return Math.cos(radians);
};
vision_tools_MathTools.exp = function(v) {
	return Math.exp(v);
};
vision_tools_MathTools.floor = function(v) {
	return Math.floor(v);
};
vision_tools_MathTools.log = function(v) {
	return Math.log(v);
};
vision_tools_MathTools.pow = function(v,exp) {
	return Math.pow(v,exp);
};
vision_tools_MathTools.random = function() {
	return Math.random();
};
vision_tools_MathTools.round = function(v) {
	return Math.round(v);
};
vision_tools_MathTools.sin = function(radians) {
	return Math.sin(radians);
};
vision_tools_MathTools.sqrt = function(v) {
	return Math.sqrt(v);
};
vision_tools_MathTools.tan = function(radians) {
	return Math.tan(radians);
};
vision_tools_MathTools.ffloor = function(v) {
	return Math.floor(v);
};
vision_tools_MathTools.fceil = function(v) {
	return Math.ceil(v);
};
vision_tools_MathTools.fround = function(v) {
	return Math.round(v);
};
vision_tools_MathTools.isFinite = function(f) {
	return isFinite(f);
};
vision_tools_MathTools.isNaN = function(f) {
	return isNaN(f);
};
vision_tools_MathTools.parseFloat = function(s) {
	return parseFloat(s);
};
vision_tools_MathTools.parseInt = function(s) {
	return Std.parseInt(s);
};
vision_tools_MathTools.parseBool = function(s) {
	s = StringTools.trim(s).toLowerCase();
	if(s == "true") {
		return true;
	}
	if(s == "false") {
		return false;
	}
	return null;
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
var _init = lime__$internal_backend_html5_HTML5Application;
var init = lime_app_Application;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : $hxClasses["String"] = String, enumerable : false, writable : true});
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
var array = null;
var vector = null;
var view = null;
var buffer = null;
var len = null;
lime_math_RGBA.__alpha16 = new Uint32Array(256);
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math_RGBA.__alpha16[i] = Math.ceil(i * 257.00392156862745);
}
var array = null;
var vector = null;
var view = null;
var buffer = null;
var len = null;
lime_math_RGBA.__clamp = new Uint8Array(511);
var _g = 0;
while(_g < 255) {
	var i = _g++;
	lime_math_RGBA.__clamp[i] = i;
}
var _g = 255;
var _g1 = 511;
while(_g < _g1) {
	var i = _g++;
	lime_math_RGBA.__clamp[i] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
lime_utils_Log.level = 3;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
openfl_display__$internal_CanvasGraphics.hitTestCanvas = js_Browser.get_supported() ? window.document.createElement("canvas") : null;
openfl_display__$internal_CanvasGraphics.hitTestContext = js_Browser.get_supported() ? openfl_display__$internal_CanvasGraphics.hitTestCanvas.getContext("2d") : null;
openfl_Vector.__meta__ = { statics : { toNullVector : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_DisplayObject.__meta__ = { fields : { __cairo : { SuppressWarnings : ["checkstyle:Dynamic"]}, addEventListener : { SuppressWarnings : ["checkstyle:Dynamic"]}, removeEventListener : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__tempStack = new lime_utils_ObjectPool(function() {
	return openfl_Vector.toObjectVector(null);
},function(stack) {
	stack.set_length(0);
});
openfl_text_Font.__fontByName = new haxe_ds_StringMap();
openfl_text_Font.__registeredFonts = [];
TextTools.fonts = new _$TextTools_MultilangFonts();
TextTools.loremIpsumText = "\r\n\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque finibus condimentum magna, eget porttitor libero aliquam non. Praesent commodo, augue nec hendrerit tincidunt, urna felis lobortis mi, non cursus libero tellus quis tellus. Vivamus ornare convallis tristique. Integer nec ornare libero. Phasellus feugiat facilisis faucibus. Vivamus porta id neque id placerat. Proin convallis vel felis et pharetra. Quisque magna justo, ullamcorper quis scelerisque eu, tincidunt vitae lectus. Nunc sed turpis justo. Aliquam porttitor, purus sit amet faucibus bibendum, ligula elit molestie purus, eu volutpat turpis sapien ac tellus. Fusce mauris arcu, volutpat ut aliquam ut, ultrices id ante. Morbi quis consectetur turpis. Integer semper lacinia urna id laoreet.\r\n\r\n\t\tUt mollis eget eros eu tempor. Phasellus nulla velit, sollicitudin eget massa a, tristique rutrum turpis. Vestibulum in dolor at elit pellentesque finibus. Nulla pharetra felis a varius molestie. Nam magna lectus, eleifend ac sagittis id, ornare id nibh. Praesent congue est non iaculis consectetur. Nullam dictum augue sit amet dignissim fringilla. Aenean semper justo velit. Sed nec lectus facilisis, sodales diam eget, imperdiet nunc. Quisque elementum nulla non orci interdum pharetra id quis arcu. Phasellus eu nunc lectus. Nam tellus tortor, pellentesque eget faucibus eu, laoreet quis odio. Pellentesque posuere in enim a blandit.\r\n\r\n\t\tDuis dignissim neque et ex iaculis, ac consequat diam gravida. In mi ex, blandit eget velit non, euismod feugiat arcu. Nulla nec fermentum neque, eget elementum mauris. Vivamus urna ligula, faucibus at facilisis sed, commodo sit amet urna. Sed porttitor feugiat purus ac tincidunt. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aliquam sollicitudin lacinia turpis quis placerat. Donec eget velit nibh. Duis vehicula orci lectus, eget rutrum arcu tincidunt et. Vestibulum ut pharetra lectus. Quisque lacinia nunc rhoncus neque venenatis consequat. Nulla rutrum ultricies sapien, sed semper lectus accumsan nec. Phasellus commodo faucibus lacinia. Donec auctor condimentum ligula. Sed quis viverra mauris.\r\n\r\n\t\tQuisque maximus justo dui, eget pretium lorem accumsan ac. Praesent eleifend faucibus orci et varius. Ut et molestie turpis, eu porta neque. Quisque vehicula, libero in tincidunt facilisis, purus eros pulvinar leo, sit amet eleifend justo ligula tempor lectus. Donec ac tortor sed ipsum tincidunt pulvinar id nec eros. In luctus purus cursus est dictum, ac sollicitudin turpis maximus. Maecenas a nisl velit. Nulla gravida lectus vel ultricies gravida. Proin vel bibendum magna. Donec aliquam ultricies quam, quis tempor nunc pharetra ut.\r\n\r\n\t\tPellentesque sit amet dui est. Aliquam erat volutpat. Integer vitae ullamcorper est, ut eleifend augue. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Quisque congue velit felis, vitae elementum nulla faucibus id. Donec lectus nibh, commodo eget nunc id, feugiat sagittis massa. In hac habitasse platea dictumst. Pellentesque volutpat molestie ultrices.\r\n\t";
haxe_Int32._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_hash_Murmur1.m = -962287725;
haxe_io_FPHelper.i64tmp = new haxe__$Int64__$_$_$Int64(0,0);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
lime__$internal_backend_html5_HTML5HTTPRequest.OPTION_REVOKE_URL = 1;
lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests = 0;
lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit = 17;
lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue = new haxe_ds_List();
lime__$internal_backend_html5_HTML5Window.dummyCharacter = "";
lime__$internal_backend_html5_HTML5Window.windowID = 0;
lime__$internal_format_Base64.DICTIONARY = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
lime__$internal_format_Base64.EXTENDED_DICTIONARY = (function($this) {
	var $r;
	var result = [];
	{
		var _g = 0;
		var _g1 = lime__$internal_format_Base64.DICTIONARY;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = lime__$internal_format_Base64.DICTIONARY;
			while(_g2 < _g3.length) {
				var b = _g3[_g2];
				++_g2;
				result.push(a + b);
			}
		}
	}
	$r = result;
	return $r;
}(this));
lime__$internal_graphics_StackBlur.MUL_TABLE = [1,171,205,293,57,373,79,137,241,27,391,357,41,19,283,265,497,469,443,421,25,191,365,349,335,161,155,149,9,278,269,261,505,245,475,231,449,437,213,415,405,395,193,377,369,361,353,345,169,331,325,319,313,307,301,37,145,285,281,69,271,267,263,259,509,501,493,243,479,118,465,459,113,446,55,435,429,423,209,413,51,403,199,393,97,3,379,375,371,367,363,359,355,351,347,43,85,337,333,165,327,323,5,317,157,311,77,305,303,75,297,294,73,289,287,71,141,279,277,275,68,135,67,133,33,262,260,129,511,507,503,499,495,491,61,121,481,477,237,235,467,232,115,457,227,451,7,445,221,439,218,433,215,427,425,211,419,417,207,411,409,203,202,401,399,396,197,49,389,387,385,383,95,189,47,187,93,185,23,183,91,181,45,179,89,177,11,175,87,173,345,343,341,339,337,21,167,83,331,329,327,163,81,323,321,319,159,79,315,313,39,155,309,307,153,305,303,151,75,299,149,37,295,147,73,291,145,289,287,143,285,71,141,281,35,279,139,69,275,137,273,17,271,135,269,267,133,265,33,263,131,261,130,259,129,257,1];
lime__$internal_graphics_StackBlur.SHG_TABLE = [0,9,10,11,9,12,10,11,12,9,13,13,10,9,13,13,14,14,14,14,10,13,14,14,14,13,13,13,9,14,14,14,15,14,15,14,15,15,14,15,15,15,14,15,15,15,15,15,14,15,15,15,15,15,15,12,14,15,15,13,15,15,15,15,16,16,16,15,16,14,16,16,14,16,13,16,16,16,15,16,13,16,15,16,14,9,16,16,16,16,16,16,16,16,16,13,14,16,16,15,16,16,10,16,15,16,14,16,16,14,16,16,14,16,16,14,15,16,16,16,14,15,14,15,13,16,16,15,17,17,17,17,17,17,14,15,17,17,16,16,17,16,15,17,16,17,11,17,16,17,16,17,16,17,17,16,17,17,16,17,17,16,16,17,17,17,16,14,17,17,17,17,15,16,14,16,15,16,13,16,15,16,14,16,15,16,12,16,15,16,17,17,17,17,17,13,16,15,17,17,17,16,15,17,17,17,16,15,17,17,14,16,17,17,16,17,17,16,15,17,16,14,17,16,15,17,16,17,17,16,17,15,16,17,14,17,16,15,17,16,17,13,17,16,17,17,16,17,14,17,16,17,16,17,16,17,9];
lime_graphics_cairo_CairoFTFontFace.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.EXTENSIONS = 7939;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_TYPE = 35738;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_graphics_opengl_GL.READ_BUFFER = 3074;
lime_graphics_opengl_GL.UNPACK_ROW_LENGTH = 3314;
lime_graphics_opengl_GL.UNPACK_SKIP_ROWS = 3315;
lime_graphics_opengl_GL.UNPACK_SKIP_PIXELS = 3316;
lime_graphics_opengl_GL.PACK_ROW_LENGTH = 3330;
lime_graphics_opengl_GL.PACK_SKIP_ROWS = 3331;
lime_graphics_opengl_GL.PACK_SKIP_PIXELS = 3332;
lime_graphics_opengl_GL.TEXTURE_BINDING_3D = 32874;
lime_graphics_opengl_GL.UNPACK_SKIP_IMAGES = 32877;
lime_graphics_opengl_GL.UNPACK_IMAGE_HEIGHT = 32878;
lime_graphics_opengl_GL.MAX_3D_TEXTURE_SIZE = 32883;
lime_graphics_opengl_GL.MAX_ELEMENTS_VERTICES = 33000;
lime_graphics_opengl_GL.MAX_ELEMENTS_INDICES = 33001;
lime_graphics_opengl_GL.MAX_TEXTURE_LOD_BIAS = 34045;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
lime_graphics_opengl_GL.MAX_ARRAY_TEXTURE_LAYERS = 35071;
lime_graphics_opengl_GL.MIN_PROGRAM_TEXEL_OFFSET = 35076;
lime_graphics_opengl_GL.MAX_PROGRAM_TEXEL_OFFSET = 35077;
lime_graphics_opengl_GL.MAX_VARYING_COMPONENTS = 35659;
lime_graphics_opengl_GL.FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
lime_graphics_opengl_GL.RASTERIZER_DISCARD = 35977;
lime_graphics_opengl_GL.VERTEX_ARRAY_BINDING = 34229;
lime_graphics_opengl_GL.MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
lime_graphics_opengl_GL.MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
lime_graphics_opengl_GL.MAX_SERVER_WAIT_TIMEOUT = 37137;
lime_graphics_opengl_GL.MAX_ELEMENT_INDEX = 36203;
lime_graphics_opengl_GL.RED = 6403;
lime_graphics_opengl_GL.RGB8 = 32849;
lime_graphics_opengl_GL.RGBA8 = 32856;
lime_graphics_opengl_GL.RGB10_A2 = 32857;
lime_graphics_opengl_GL.TEXTURE_3D = 32879;
lime_graphics_opengl_GL.TEXTURE_WRAP_R = 32882;
lime_graphics_opengl_GL.TEXTURE_MIN_LOD = 33082;
lime_graphics_opengl_GL.TEXTURE_MAX_LOD = 33083;
lime_graphics_opengl_GL.TEXTURE_BASE_LEVEL = 33084;
lime_graphics_opengl_GL.TEXTURE_MAX_LEVEL = 33085;
lime_graphics_opengl_GL.TEXTURE_COMPARE_MODE = 34892;
lime_graphics_opengl_GL.TEXTURE_COMPARE_FUNC = 34893;
lime_graphics_opengl_GL.SRGB = 35904;
lime_graphics_opengl_GL.SRGB8 = 35905;
lime_graphics_opengl_GL.SRGB8_ALPHA8 = 35907;
lime_graphics_opengl_GL.COMPARE_REF_TO_TEXTURE = 34894;
lime_graphics_opengl_GL.RGBA32F = 34836;
lime_graphics_opengl_GL.RGB32F = 34837;
lime_graphics_opengl_GL.RGBA16F = 34842;
lime_graphics_opengl_GL.RGB16F = 34843;
lime_graphics_opengl_GL.TEXTURE_2D_ARRAY = 35866;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D_ARRAY = 35869;
lime_graphics_opengl_GL.R11F_G11F_B10F = 35898;
lime_graphics_opengl_GL.RGB9_E5 = 35901;
lime_graphics_opengl_GL.RGBA32UI = 36208;
lime_graphics_opengl_GL.RGB32UI = 36209;
lime_graphics_opengl_GL.RGBA16UI = 36214;
lime_graphics_opengl_GL.RGB16UI = 36215;
lime_graphics_opengl_GL.RGBA8UI = 36220;
lime_graphics_opengl_GL.RGB8UI = 36221;
lime_graphics_opengl_GL.RGBA32I = 36226;
lime_graphics_opengl_GL.RGB32I = 36227;
lime_graphics_opengl_GL.RGBA16I = 36232;
lime_graphics_opengl_GL.RGB16I = 36233;
lime_graphics_opengl_GL.RGBA8I = 36238;
lime_graphics_opengl_GL.RGB8I = 36239;
lime_graphics_opengl_GL.RED_INTEGER = 36244;
lime_graphics_opengl_GL.RGB_INTEGER = 36248;
lime_graphics_opengl_GL.RGBA_INTEGER = 36249;
lime_graphics_opengl_GL.R8 = 33321;
lime_graphics_opengl_GL.RG8 = 33323;
lime_graphics_opengl_GL.R16F = 33325;
lime_graphics_opengl_GL.R32F = 33326;
lime_graphics_opengl_GL.RG16F = 33327;
lime_graphics_opengl_GL.RG32F = 33328;
lime_graphics_opengl_GL.R8I = 33329;
lime_graphics_opengl_GL.R8UI = 33330;
lime_graphics_opengl_GL.R16I = 33331;
lime_graphics_opengl_GL.R16UI = 33332;
lime_graphics_opengl_GL.R32I = 33333;
lime_graphics_opengl_GL.R32UI = 33334;
lime_graphics_opengl_GL.RG8I = 33335;
lime_graphics_opengl_GL.RG8UI = 33336;
lime_graphics_opengl_GL.RG16I = 33337;
lime_graphics_opengl_GL.RG16UI = 33338;
lime_graphics_opengl_GL.RG32I = 33339;
lime_graphics_opengl_GL.RG32UI = 33340;
lime_graphics_opengl_GL.R8_SNORM = 36756;
lime_graphics_opengl_GL.RG8_SNORM = 36757;
lime_graphics_opengl_GL.RGB8_SNORM = 36758;
lime_graphics_opengl_GL.RGBA8_SNORM = 36759;
lime_graphics_opengl_GL.RGB10_A2UI = 36975;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_FORMAT = 37167;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_LEVELS = 33503;
lime_graphics_opengl_GL.UNSIGNED_INT_2_10_10_10_REV = 33640;
lime_graphics_opengl_GL.UNSIGNED_INT_10F_11F_11F_REV = 35899;
lime_graphics_opengl_GL.UNSIGNED_INT_5_9_9_9_REV = 35902;
lime_graphics_opengl_GL.FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
lime_graphics_opengl_GL.UNSIGNED_INT_24_8 = 34042;
lime_graphics_opengl_GL.HALF_FLOAT = 5131;
lime_graphics_opengl_GL.RG = 33319;
lime_graphics_opengl_GL.RG_INTEGER = 33320;
lime_graphics_opengl_GL.INT_2_10_10_10_REV = 36255;
lime_graphics_opengl_GL.CURRENT_QUERY = 34917;
lime_graphics_opengl_GL.QUERY_RESULT = 34918;
lime_graphics_opengl_GL.QUERY_RESULT_AVAILABLE = 34919;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED = 35887;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
lime_graphics_opengl_GL.MAX_DRAW_BUFFERS = 34852;
lime_graphics_opengl_GL.DRAW_BUFFER0 = 34853;
lime_graphics_opengl_GL.DRAW_BUFFER1 = 34854;
lime_graphics_opengl_GL.DRAW_BUFFER2 = 34855;
lime_graphics_opengl_GL.DRAW_BUFFER3 = 34856;
lime_graphics_opengl_GL.DRAW_BUFFER4 = 34857;
lime_graphics_opengl_GL.DRAW_BUFFER5 = 34858;
lime_graphics_opengl_GL.DRAW_BUFFER6 = 34859;
lime_graphics_opengl_GL.DRAW_BUFFER7 = 34860;
lime_graphics_opengl_GL.DRAW_BUFFER8 = 34861;
lime_graphics_opengl_GL.DRAW_BUFFER9 = 34862;
lime_graphics_opengl_GL.DRAW_BUFFER10 = 34863;
lime_graphics_opengl_GL.DRAW_BUFFER11 = 34864;
lime_graphics_opengl_GL.DRAW_BUFFER12 = 34865;
lime_graphics_opengl_GL.DRAW_BUFFER13 = 34866;
lime_graphics_opengl_GL.DRAW_BUFFER14 = 34867;
lime_graphics_opengl_GL.DRAW_BUFFER15 = 34868;
lime_graphics_opengl_GL.MAX_COLOR_ATTACHMENTS = 36063;
lime_graphics_opengl_GL.COLOR_ATTACHMENT1 = 36065;
lime_graphics_opengl_GL.COLOR_ATTACHMENT2 = 36066;
lime_graphics_opengl_GL.COLOR_ATTACHMENT3 = 36067;
lime_graphics_opengl_GL.COLOR_ATTACHMENT4 = 36068;
lime_graphics_opengl_GL.COLOR_ATTACHMENT5 = 36069;
lime_graphics_opengl_GL.COLOR_ATTACHMENT6 = 36070;
lime_graphics_opengl_GL.COLOR_ATTACHMENT7 = 36071;
lime_graphics_opengl_GL.COLOR_ATTACHMENT8 = 36072;
lime_graphics_opengl_GL.COLOR_ATTACHMENT9 = 36073;
lime_graphics_opengl_GL.COLOR_ATTACHMENT10 = 36074;
lime_graphics_opengl_GL.COLOR_ATTACHMENT11 = 36075;
lime_graphics_opengl_GL.COLOR_ATTACHMENT12 = 36076;
lime_graphics_opengl_GL.COLOR_ATTACHMENT13 = 36077;
lime_graphics_opengl_GL.COLOR_ATTACHMENT14 = 36078;
lime_graphics_opengl_GL.COLOR_ATTACHMENT15 = 36079;
lime_graphics_opengl_GL.SAMPLER_3D = 35679;
lime_graphics_opengl_GL.SAMPLER_2D_SHADOW = 35682;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY = 36289;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY_SHADOW = 36292;
lime_graphics_opengl_GL.SAMPLER_CUBE_SHADOW = 36293;
lime_graphics_opengl_GL.INT_SAMPLER_2D = 36298;
lime_graphics_opengl_GL.INT_SAMPLER_3D = 36299;
lime_graphics_opengl_GL.INT_SAMPLER_CUBE = 36300;
lime_graphics_opengl_GL.INT_SAMPLER_2D_ARRAY = 36303;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D = 36306;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_3D = 36307;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_CUBE = 36308;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
lime_graphics_opengl_GL.MAX_SAMPLES = 36183;
lime_graphics_opengl_GL.SAMPLER_BINDING = 35097;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER = 35051;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER = 35052;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER_BINDING = 35053;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER_BINDING = 35055;
lime_graphics_opengl_GL.COPY_READ_BUFFER = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER = 36663;
lime_graphics_opengl_GL.COPY_READ_BUFFER_BINDING = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER_BINDING = 36663;
lime_graphics_opengl_GL.FLOAT_MAT2x3 = 35685;
lime_graphics_opengl_GL.FLOAT_MAT2x4 = 35686;
lime_graphics_opengl_GL.FLOAT_MAT3x2 = 35687;
lime_graphics_opengl_GL.FLOAT_MAT3x4 = 35688;
lime_graphics_opengl_GL.FLOAT_MAT4x2 = 35689;
lime_graphics_opengl_GL.FLOAT_MAT4x3 = 35690;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC2 = 36294;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC3 = 36295;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC4 = 36296;
lime_graphics_opengl_GL.UNSIGNED_NORMALIZED = 35863;
lime_graphics_opengl_GL.SIGNED_NORMALIZED = 36764;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_VARYINGS = 35971;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_START = 35972;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
lime_graphics_opengl_GL.INTERLEAVED_ATTRIBS = 35980;
lime_graphics_opengl_GL.SEPARATE_ATTRIBS = 35981;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER = 35982;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK = 36386;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PAUSED = 36387;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_ACTIVE = 36388;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BINDING = 36389;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
lime_graphics_opengl_GL.FRAMEBUFFER_DEFAULT = 33304;
lime_graphics_opengl_GL.DEPTH24_STENCIL8 = 35056;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.READ_FRAMEBUFFER = 36008;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER = 36009;
lime_graphics_opengl_GL.READ_FRAMEBUFFER_BINDING = 36010;
lime_graphics_opengl_GL.RENDERBUFFER_SAMPLES = 36011;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
lime_graphics_opengl_GL.UNIFORM_BUFFER = 35345;
lime_graphics_opengl_GL.UNIFORM_BUFFER_BINDING = 35368;
lime_graphics_opengl_GL.UNIFORM_BUFFER_START = 35369;
lime_graphics_opengl_GL.UNIFORM_BUFFER_SIZE = 35370;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_BLOCKS = 35371;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
lime_graphics_opengl_GL.MAX_COMBINED_UNIFORM_BLOCKS = 35374;
lime_graphics_opengl_GL.MAX_UNIFORM_BUFFER_BINDINGS = 35375;
lime_graphics_opengl_GL.MAX_UNIFORM_BLOCK_SIZE = 35376;
lime_graphics_opengl_GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
lime_graphics_opengl_GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
lime_graphics_opengl_GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
lime_graphics_opengl_GL.ACTIVE_UNIFORM_BLOCKS = 35382;
lime_graphics_opengl_GL.UNIFORM_TYPE = 35383;
lime_graphics_opengl_GL.UNIFORM_SIZE = 35384;
lime_graphics_opengl_GL.UNIFORM_BLOCK_INDEX = 35386;
lime_graphics_opengl_GL.UNIFORM_OFFSET = 35387;
lime_graphics_opengl_GL.UNIFORM_ARRAY_STRIDE = 35388;
lime_graphics_opengl_GL.UNIFORM_MATRIX_STRIDE = 35389;
lime_graphics_opengl_GL.UNIFORM_IS_ROW_MAJOR = 35390;
lime_graphics_opengl_GL.UNIFORM_BLOCK_BINDING = 35391;
lime_graphics_opengl_GL.UNIFORM_BLOCK_DATA_SIZE = 35392;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
lime_graphics_opengl_GL.OBJECT_TYPE = 37138;
lime_graphics_opengl_GL.SYNC_CONDITION = 37139;
lime_graphics_opengl_GL.SYNC_STATUS = 37140;
lime_graphics_opengl_GL.SYNC_FLAGS = 37141;
lime_graphics_opengl_GL.SYNC_FENCE = 37142;
lime_graphics_opengl_GL.SYNC_GPU_COMMANDS_COMPLETE = 37143;
lime_graphics_opengl_GL.UNSIGNALED = 37144;
lime_graphics_opengl_GL.SIGNALED = 37145;
lime_graphics_opengl_GL.ALREADY_SIGNALED = 37146;
lime_graphics_opengl_GL.TIMEOUT_EXPIRED = 37147;
lime_graphics_opengl_GL.CONDITION_SATISFIED = 37148;
lime_graphics_opengl_GL.WAIT_FAILED = 37149;
lime_graphics_opengl_GL.SYNC_FLUSH_COMMANDS_BIT = 1;
lime_graphics_opengl_GL.COLOR = 6144;
lime_graphics_opengl_GL.DEPTH = 6145;
lime_graphics_opengl_GL.STENCIL = 6146;
lime_graphics_opengl_GL.MIN = 32775;
lime_graphics_opengl_GL.MAX = 32776;
lime_graphics_opengl_GL.DEPTH_COMPONENT24 = 33190;
lime_graphics_opengl_GL.STREAM_READ = 35041;
lime_graphics_opengl_GL.STREAM_COPY = 35042;
lime_graphics_opengl_GL.STATIC_READ = 35045;
lime_graphics_opengl_GL.STATIC_COPY = 35046;
lime_graphics_opengl_GL.DYNAMIC_READ = 35049;
lime_graphics_opengl_GL.DYNAMIC_COPY = 35050;
lime_graphics_opengl_GL.DEPTH_COMPONENT32F = 36012;
lime_graphics_opengl_GL.DEPTH32F_STENCIL8 = 36013;
lime_graphics_opengl_GL.INVALID_INDEX = -1;
lime_graphics_opengl_GL.TIMEOUT_IGNORED = -1;
lime_graphics_opengl_GL.MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 37447;
lime_math_ColorMatrix.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math_Matrix4.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_media_openal_AL.NONE = 0;
lime_media_openal_AL.FALSE = 0;
lime_media_openal_AL.TRUE = 1;
lime_media_openal_AL.SOURCE_RELATIVE = 514;
lime_media_openal_AL.CONE_INNER_ANGLE = 4097;
lime_media_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_media_openal_AL.PITCH = 4099;
lime_media_openal_AL.POSITION = 4100;
lime_media_openal_AL.DIRECTION = 4101;
lime_media_openal_AL.VELOCITY = 4102;
lime_media_openal_AL.LOOPING = 4103;
lime_media_openal_AL.BUFFER = 4105;
lime_media_openal_AL.GAIN = 4106;
lime_media_openal_AL.MIN_GAIN = 4109;
lime_media_openal_AL.MAX_GAIN = 4110;
lime_media_openal_AL.ORIENTATION = 4111;
lime_media_openal_AL.SOURCE_STATE = 4112;
lime_media_openal_AL.INITIAL = 4113;
lime_media_openal_AL.PLAYING = 4114;
lime_media_openal_AL.PAUSED = 4115;
lime_media_openal_AL.STOPPED = 4116;
lime_media_openal_AL.BUFFERS_QUEUED = 4117;
lime_media_openal_AL.BUFFERS_PROCESSED = 4118;
lime_media_openal_AL.REFERENCE_DISTANCE = 4128;
lime_media_openal_AL.ROLLOFF_FACTOR = 4129;
lime_media_openal_AL.CONE_OUTER_GAIN = 4130;
lime_media_openal_AL.MAX_DISTANCE = 4131;
lime_media_openal_AL.SEC_OFFSET = 4132;
lime_media_openal_AL.SAMPLE_OFFSET = 4133;
lime_media_openal_AL.BYTE_OFFSET = 4134;
lime_media_openal_AL.SOURCE_TYPE = 4135;
lime_media_openal_AL.STATIC = 4136;
lime_media_openal_AL.STREAMING = 4137;
lime_media_openal_AL.UNDETERMINED = 4144;
lime_media_openal_AL.FORMAT_MONO8 = 4352;
lime_media_openal_AL.FORMAT_MONO16 = 4353;
lime_media_openal_AL.FORMAT_STEREO8 = 4354;
lime_media_openal_AL.FORMAT_STEREO16 = 4355;
lime_media_openal_AL.FREQUENCY = 8193;
lime_media_openal_AL.BITS = 8194;
lime_media_openal_AL.CHANNELS = 8195;
lime_media_openal_AL.SIZE = 8196;
lime_media_openal_AL.NO_ERROR = 0;
lime_media_openal_AL.INVALID_NAME = 40961;
lime_media_openal_AL.INVALID_ENUM = 40962;
lime_media_openal_AL.INVALID_VALUE = 40963;
lime_media_openal_AL.INVALID_OPERATION = 40964;
lime_media_openal_AL.OUT_OF_MEMORY = 40965;
lime_media_openal_AL.VENDOR = 45057;
lime_media_openal_AL.VERSION = 45058;
lime_media_openal_AL.RENDERER = 45059;
lime_media_openal_AL.EXTENSIONS = 45060;
lime_media_openal_AL.DOPPLER_FACTOR = 49152;
lime_media_openal_AL.SPEED_OF_SOUND = 49155;
lime_media_openal_AL.DOPPLER_VELOCITY = 49153;
lime_media_openal_AL.DISTANCE_MODEL = 53248;
lime_media_openal_AL.INVERSE_DISTANCE = 53249;
lime_media_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_media_openal_AL.LINEAR_DISTANCE = 53251;
lime_media_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_media_openal_AL.EXPONENT_DISTANCE = 53253;
lime_media_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_media_openal_AL.METERS_PER_UNIT = 131076;
lime_media_openal_AL.DIRECT_FILTER = 131077;
lime_media_openal_AL.AUXILIARY_SEND_FILTER = 131078;
lime_media_openal_AL.AIR_ABSORPTION_FACTOR = 131079;
lime_media_openal_AL.ROOM_ROLLOFF_FACTOR = 131080;
lime_media_openal_AL.CONE_OUTER_GAINHF = 131081;
lime_media_openal_AL.DIRECT_FILTER_GAINHF_AUTO = 131082;
lime_media_openal_AL.AUXILIARY_SEND_FILTER_GAIN_AUTO = 131083;
lime_media_openal_AL.AUXILIARY_SEND_FILTER_GAINHF_AUTO = 131084;
lime_media_openal_AL.REVERB_DENSITY = 1;
lime_media_openal_AL.REVERB_DIFFUSION = 2;
lime_media_openal_AL.REVERB_GAIN = 3;
lime_media_openal_AL.REVERB_GAINHF = 4;
lime_media_openal_AL.REVERB_DECAY_TIME = 5;
lime_media_openal_AL.REVERB_DECAY_HFRATIO = 6;
lime_media_openal_AL.REVERB_REFLECTIONS_GAIN = 7;
lime_media_openal_AL.REVERB_REFLECTIONS_DELAY = 8;
lime_media_openal_AL.REVERB_LATE_REVERB_GAIN = 9;
lime_media_openal_AL.REVERB_LATE_REVERB_DELAY = 10;
lime_media_openal_AL.REVERB_AIR_ABSORPTION_GAINHF = 11;
lime_media_openal_AL.REVERB_ROOM_ROLLOFF_FACTOR = 12;
lime_media_openal_AL.REVERB_DECAY_HFLIMIT = 13;
lime_media_openal_AL.EAXREVERB_DENSITY = 1;
lime_media_openal_AL.EAXREVERB_DIFFUSION = 2;
lime_media_openal_AL.EAXREVERB_GAIN = 3;
lime_media_openal_AL.EAXREVERB_GAINHF = 4;
lime_media_openal_AL.EAXREVERB_GAINLF = 5;
lime_media_openal_AL.EAXREVERB_DECAY_TIME = 6;
lime_media_openal_AL.EAXREVERB_DECAY_HFRATIO = 7;
lime_media_openal_AL.EAXREVERB_DECAY_LFRATIO = 8;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_GAIN = 9;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_DELAY = 10;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_PAN = 11;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_GAIN = 12;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_DELAY = 13;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_PAN = 14;
lime_media_openal_AL.EAXREVERB_ECHO_TIME = 15;
lime_media_openal_AL.EAXREVERB_ECHO_DEPTH = 16;
lime_media_openal_AL.EAXREVERB_MODULATION_TIME = 17;
lime_media_openal_AL.EAXREVERB_MODULATION_DEPTH = 18;
lime_media_openal_AL.EAXREVERB_AIR_ABSORPTION_GAINHF = 19;
lime_media_openal_AL.EAXREVERB_HFREFERENCE = 20;
lime_media_openal_AL.EAXREVERB_LFREFERENCE = 21;
lime_media_openal_AL.EAXREVERB_ROOM_ROLLOFF_FACTOR = 22;
lime_media_openal_AL.EAXREVERB_DECAY_HFLIMIT = 23;
lime_media_openal_AL.CHORUS_WAVEFORM = 1;
lime_media_openal_AL.CHORUS_PHASE = 2;
lime_media_openal_AL.CHORUS_RATE = 3;
lime_media_openal_AL.CHORUS_DEPTH = 4;
lime_media_openal_AL.CHORUS_FEEDBACK = 5;
lime_media_openal_AL.CHORUS_DELAY = 6;
lime_media_openal_AL.DISTORTION_EDGE = 1;
lime_media_openal_AL.DISTORTION_GAIN = 2;
lime_media_openal_AL.DISTORTION_LOWPASS_CUTOFF = 3;
lime_media_openal_AL.DISTORTION_EQCENTER = 4;
lime_media_openal_AL.DISTORTION_EQBANDWIDTH = 5;
lime_media_openal_AL.ECHO_DELAY = 1;
lime_media_openal_AL.ECHO_LRDELAY = 2;
lime_media_openal_AL.ECHO_DAMPING = 3;
lime_media_openal_AL.ECHO_FEEDBACK = 4;
lime_media_openal_AL.ECHO_SPREAD = 5;
lime_media_openal_AL.FLANGER_WAVEFORM = 1;
lime_media_openal_AL.FLANGER_PHASE = 2;
lime_media_openal_AL.FLANGER_RATE = 3;
lime_media_openal_AL.FLANGER_DEPTH = 4;
lime_media_openal_AL.FLANGER_FEEDBACK = 5;
lime_media_openal_AL.FLANGER_DELAY = 6;
lime_media_openal_AL.FREQUENCY_SHIFTER_FREQUENCY = 1;
lime_media_openal_AL.FREQUENCY_SHIFTER_LEFT_DIRECTION = 2;
lime_media_openal_AL.FREQUENCY_SHIFTER_RIGHT_DIRECTION = 3;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEA = 1;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEA_COARSE_TUNING = 2;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEB = 3;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEB_COARSE_TUNING = 4;
lime_media_openal_AL.VOCAL_MORPHER_WAVEFORM = 5;
lime_media_openal_AL.VOCAL_MORPHER_RATE = 6;
lime_media_openal_AL.PITCH_SHIFTER_COARSE_TUNE = 1;
lime_media_openal_AL.PITCH_SHIFTER_FINE_TUNE = 2;
lime_media_openal_AL.RING_MODULATOR_FREQUENCY = 1;
lime_media_openal_AL.RING_MODULATOR_HIGHPASS_CUTOFF = 2;
lime_media_openal_AL.RING_MODULATOR_WAVEFORM = 3;
lime_media_openal_AL.AUTOWAH_ATTACK_TIME = 1;
lime_media_openal_AL.AUTOWAH_RELEASE_TIME = 2;
lime_media_openal_AL.AUTOWAH_RESONANCE = 3;
lime_media_openal_AL.AUTOWAH_PEAK_GAIN = 4;
lime_media_openal_AL.COMPRESSOR_ONOFF = 1;
lime_media_openal_AL.EQUALIZER_LOW_GAIN = 1;
lime_media_openal_AL.EQUALIZER_LOW_CUTOFF = 2;
lime_media_openal_AL.EQUALIZER_MID1_GAIN = 3;
lime_media_openal_AL.EQUALIZER_MID1_CENTER = 4;
lime_media_openal_AL.EQUALIZER_MID1_WIDTH = 5;
lime_media_openal_AL.EQUALIZER_MID2_GAIN = 6;
lime_media_openal_AL.EQUALIZER_MID2_CENTER = 7;
lime_media_openal_AL.EQUALIZER_MID2_WIDTH = 8;
lime_media_openal_AL.EQUALIZER_HIGH_GAIN = 9;
lime_media_openal_AL.EQUALIZER_HIGH_CUTOFF = 10;
lime_media_openal_AL.EFFECT_FIRST_PARAMETER = 0;
lime_media_openal_AL.EFFECT_LAST_PARAMETER = 32768;
lime_media_openal_AL.EFFECT_TYPE = 32769;
lime_media_openal_AL.EFFECT_NULL = 0;
lime_media_openal_AL.EFFECT_EAXREVERB = 32768;
lime_media_openal_AL.EFFECT_REVERB = 1;
lime_media_openal_AL.EFFECT_CHORUS = 2;
lime_media_openal_AL.EFFECT_DISTORTION = 3;
lime_media_openal_AL.EFFECT_ECHO = 4;
lime_media_openal_AL.EFFECT_FLANGER = 5;
lime_media_openal_AL.EFFECT_FREQUENCY_SHIFTER = 6;
lime_media_openal_AL.EFFECT_VOCAL_MORPHER = 7;
lime_media_openal_AL.EFFECT_PITCH_SHIFTER = 8;
lime_media_openal_AL.EFFECT_RING_MODULATOR = 9;
lime_media_openal_AL.FFECT_AUTOWAH = 10;
lime_media_openal_AL.EFFECT_COMPRESSOR = 11;
lime_media_openal_AL.EFFECT_EQUALIZER = 12;
lime_media_openal_AL.EFFECTSLOT_EFFECT = 1;
lime_media_openal_AL.EFFECTSLOT_GAIN = 2;
lime_media_openal_AL.EFFECTSLOT_AUXILIARY_SEND_AUTO = 3;
lime_media_openal_AL.LOWPASS_GAIN = 1;
lime_media_openal_AL.LOWPASS_GAINHF = 2;
lime_media_openal_AL.HIGHPASS_GAIN = 1;
lime_media_openal_AL.HIGHPASS_GAINLF = 2;
lime_media_openal_AL.BANDPASS_GAIN = 1;
lime_media_openal_AL.BANDPASS_GAINLF = 2;
lime_media_openal_AL.BANDPASS_GAINHF = 3;
lime_media_openal_AL.FILTER_FIRST_PARAMETER = 0;
lime_media_openal_AL.FILTER_LAST_PARAMETER = 32768;
lime_media_openal_AL.FILTER_TYPE = 32769;
lime_media_openal_AL.FILTER_NULL = 0;
lime_media_openal_AL.FILTER_LOWPASS = 1;
lime_media_openal_AL.FILTER_HIGHPASS = 2;
lime_media_openal_AL.FILTER_BANDPASS = 3;
lime_media_openal_ALC.FALSE = 0;
lime_media_openal_ALC.TRUE = 1;
lime_media_openal_ALC.FREQUENCY = 4103;
lime_media_openal_ALC.REFRESH = 4104;
lime_media_openal_ALC.SYNC = 4105;
lime_media_openal_ALC.MONO_SOURCES = 4112;
lime_media_openal_ALC.STEREO_SOURCES = 4113;
lime_media_openal_ALC.NO_ERROR = 0;
lime_media_openal_ALC.INVALID_DEVICE = 40961;
lime_media_openal_ALC.INVALID_CONTEXT = 40962;
lime_media_openal_ALC.INVALID_ENUM = 40963;
lime_media_openal_ALC.INVALID_VALUE = 40964;
lime_media_openal_ALC.OUT_OF_MEMORY = 40965;
lime_media_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_media_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_media_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_media_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_media_openal_ALC.EXTENSIONS = 4102;
lime_media_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_media_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_media_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_system_Clipboard.onUpdate = new lime_app__$Event_$Void_$Void();
lime_system_Clipboard.__updated = false;
lime_system_Sensor.sensorByID = new haxe_ds_IntMap();
lime_system_Sensor.sensors = [];
lime_system_System.__directories = new haxe_ds_IntMap();
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui_GamepadAxis.LEFT_X = 0;
lime_ui_GamepadAxis.LEFT_Y = 1;
lime_ui_GamepadAxis.RIGHT_X = 2;
lime_ui_GamepadAxis.RIGHT_Y = 3;
lime_ui_GamepadAxis.TRIGGER_LEFT = 4;
lime_ui_GamepadAxis.TRIGGER_RIGHT = 5;
lime_ui_GamepadButton.A = 0;
lime_ui_GamepadButton.B = 1;
lime_ui_GamepadButton.X = 2;
lime_ui_GamepadButton.Y = 3;
lime_ui_GamepadButton.BACK = 4;
lime_ui_GamepadButton.GUIDE = 5;
lime_ui_GamepadButton.START = 6;
lime_ui_GamepadButton.LEFT_STICK = 7;
lime_ui_GamepadButton.RIGHT_STICK = 8;
lime_ui_GamepadButton.LEFT_SHOULDER = 9;
lime_ui_GamepadButton.RIGHT_SHOULDER = 10;
lime_ui_GamepadButton.DPAD_UP = 11;
lime_ui_GamepadButton.DPAD_DOWN = 12;
lime_ui_GamepadButton.DPAD_LEFT = 13;
lime_ui_GamepadButton.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui_JoystickHatPosition.CENTER = 0;
lime_ui_JoystickHatPosition.DOWN = 4;
lime_ui_JoystickHatPosition.LEFT = 8;
lime_ui_JoystickHatPosition.RIGHT = 2;
lime_ui_JoystickHatPosition.UP = 1;
lime_ui_JoystickHatPosition.DOWN_LEFT = 12;
lime_ui_JoystickHatPosition.DOWN_RIGHT = 6;
lime_ui_JoystickHatPosition.UP_LEFT = 9;
lime_ui_JoystickHatPosition.UP_RIGHT = 3;
lime_ui_KeyCode.UNKNOWN = 0;
lime_ui_KeyCode.BACKSPACE = 8;
lime_ui_KeyCode.TAB = 9;
lime_ui_KeyCode.RETURN = 13;
lime_ui_KeyCode.ESCAPE = 27;
lime_ui_KeyCode.SPACE = 32;
lime_ui_KeyCode.EXCLAMATION = 33;
lime_ui_KeyCode.QUOTE = 34;
lime_ui_KeyCode.HASH = 35;
lime_ui_KeyCode.DOLLAR = 36;
lime_ui_KeyCode.PERCENT = 37;
lime_ui_KeyCode.AMPERSAND = 38;
lime_ui_KeyCode.SINGLE_QUOTE = 39;
lime_ui_KeyCode.LEFT_PARENTHESIS = 40;
lime_ui_KeyCode.RIGHT_PARENTHESIS = 41;
lime_ui_KeyCode.ASTERISK = 42;
lime_ui_KeyCode.PLUS = 43;
lime_ui_KeyCode.COMMA = 44;
lime_ui_KeyCode.MINUS = 45;
lime_ui_KeyCode.PERIOD = 46;
lime_ui_KeyCode.SLASH = 47;
lime_ui_KeyCode.NUMBER_0 = 48;
lime_ui_KeyCode.NUMBER_1 = 49;
lime_ui_KeyCode.NUMBER_2 = 50;
lime_ui_KeyCode.NUMBER_3 = 51;
lime_ui_KeyCode.NUMBER_4 = 52;
lime_ui_KeyCode.NUMBER_5 = 53;
lime_ui_KeyCode.NUMBER_6 = 54;
lime_ui_KeyCode.NUMBER_7 = 55;
lime_ui_KeyCode.NUMBER_8 = 56;
lime_ui_KeyCode.NUMBER_9 = 57;
lime_ui_KeyCode.COLON = 58;
lime_ui_KeyCode.SEMICOLON = 59;
lime_ui_KeyCode.LESS_THAN = 60;
lime_ui_KeyCode.EQUALS = 61;
lime_ui_KeyCode.GREATER_THAN = 62;
lime_ui_KeyCode.QUESTION = 63;
lime_ui_KeyCode.AT = 64;
lime_ui_KeyCode.LEFT_BRACKET = 91;
lime_ui_KeyCode.BACKSLASH = 92;
lime_ui_KeyCode.RIGHT_BRACKET = 93;
lime_ui_KeyCode.CARET = 94;
lime_ui_KeyCode.UNDERSCORE = 95;
lime_ui_KeyCode.GRAVE = 96;
lime_ui_KeyCode.A = 97;
lime_ui_KeyCode.B = 98;
lime_ui_KeyCode.C = 99;
lime_ui_KeyCode.D = 100;
lime_ui_KeyCode.E = 101;
lime_ui_KeyCode.F = 102;
lime_ui_KeyCode.G = 103;
lime_ui_KeyCode.H = 104;
lime_ui_KeyCode.I = 105;
lime_ui_KeyCode.J = 106;
lime_ui_KeyCode.K = 107;
lime_ui_KeyCode.L = 108;
lime_ui_KeyCode.M = 109;
lime_ui_KeyCode.N = 110;
lime_ui_KeyCode.O = 111;
lime_ui_KeyCode.P = 112;
lime_ui_KeyCode.Q = 113;
lime_ui_KeyCode.R = 114;
lime_ui_KeyCode.S = 115;
lime_ui_KeyCode.T = 116;
lime_ui_KeyCode.U = 117;
lime_ui_KeyCode.V = 118;
lime_ui_KeyCode.W = 119;
lime_ui_KeyCode.X = 120;
lime_ui_KeyCode.Y = 121;
lime_ui_KeyCode.Z = 122;
lime_ui_KeyCode.DELETE = 127;
lime_ui_KeyCode.CAPS_LOCK = 1073741881;
lime_ui_KeyCode.F1 = 1073741882;
lime_ui_KeyCode.F2 = 1073741883;
lime_ui_KeyCode.F3 = 1073741884;
lime_ui_KeyCode.F4 = 1073741885;
lime_ui_KeyCode.F5 = 1073741886;
lime_ui_KeyCode.F6 = 1073741887;
lime_ui_KeyCode.F7 = 1073741888;
lime_ui_KeyCode.F8 = 1073741889;
lime_ui_KeyCode.F9 = 1073741890;
lime_ui_KeyCode.F10 = 1073741891;
lime_ui_KeyCode.F11 = 1073741892;
lime_ui_KeyCode.F12 = 1073741893;
lime_ui_KeyCode.PRINT_SCREEN = 1073741894;
lime_ui_KeyCode.SCROLL_LOCK = 1073741895;
lime_ui_KeyCode.PAUSE = 1073741896;
lime_ui_KeyCode.INSERT = 1073741897;
lime_ui_KeyCode.HOME = 1073741898;
lime_ui_KeyCode.PAGE_UP = 1073741899;
lime_ui_KeyCode.END = 1073741901;
lime_ui_KeyCode.PAGE_DOWN = 1073741902;
lime_ui_KeyCode.RIGHT = 1073741903;
lime_ui_KeyCode.LEFT = 1073741904;
lime_ui_KeyCode.DOWN = 1073741905;
lime_ui_KeyCode.UP = 1073741906;
lime_ui_KeyCode.NUM_LOCK = 1073741907;
lime_ui_KeyCode.NUMPAD_DIVIDE = 1073741908;
lime_ui_KeyCode.NUMPAD_MULTIPLY = 1073741909;
lime_ui_KeyCode.NUMPAD_MINUS = 1073741910;
lime_ui_KeyCode.NUMPAD_PLUS = 1073741911;
lime_ui_KeyCode.NUMPAD_ENTER = 1073741912;
lime_ui_KeyCode.NUMPAD_1 = 1073741913;
lime_ui_KeyCode.NUMPAD_2 = 1073741914;
lime_ui_KeyCode.NUMPAD_3 = 1073741915;
lime_ui_KeyCode.NUMPAD_4 = 1073741916;
lime_ui_KeyCode.NUMPAD_5 = 1073741917;
lime_ui_KeyCode.NUMPAD_6 = 1073741918;
lime_ui_KeyCode.NUMPAD_7 = 1073741919;
lime_ui_KeyCode.NUMPAD_8 = 1073741920;
lime_ui_KeyCode.NUMPAD_9 = 1073741921;
lime_ui_KeyCode.NUMPAD_0 = 1073741922;
lime_ui_KeyCode.NUMPAD_PERIOD = 1073741923;
lime_ui_KeyCode.APPLICATION = 1073741925;
lime_ui_KeyCode.POWER = 1073741926;
lime_ui_KeyCode.NUMPAD_EQUALS = 1073741927;
lime_ui_KeyCode.F13 = 1073741928;
lime_ui_KeyCode.F14 = 1073741929;
lime_ui_KeyCode.F15 = 1073741930;
lime_ui_KeyCode.F16 = 1073741931;
lime_ui_KeyCode.F17 = 1073741932;
lime_ui_KeyCode.F18 = 1073741933;
lime_ui_KeyCode.F19 = 1073741934;
lime_ui_KeyCode.F20 = 1073741935;
lime_ui_KeyCode.F21 = 1073741936;
lime_ui_KeyCode.F22 = 1073741937;
lime_ui_KeyCode.F23 = 1073741938;
lime_ui_KeyCode.F24 = 1073741939;
lime_ui_KeyCode.EXECUTE = 1073741940;
lime_ui_KeyCode.HELP = 1073741941;
lime_ui_KeyCode.MENU = 1073741942;
lime_ui_KeyCode.SELECT = 1073741943;
lime_ui_KeyCode.STOP = 1073741944;
lime_ui_KeyCode.AGAIN = 1073741945;
lime_ui_KeyCode.UNDO = 1073741946;
lime_ui_KeyCode.CUT = 1073741947;
lime_ui_KeyCode.COPY = 1073741948;
lime_ui_KeyCode.PASTE = 1073741949;
lime_ui_KeyCode.FIND = 1073741950;
lime_ui_KeyCode.MUTE = 1073741951;
lime_ui_KeyCode.VOLUME_UP = 1073741952;
lime_ui_KeyCode.VOLUME_DOWN = 1073741953;
lime_ui_KeyCode.NUMPAD_COMMA = 1073741957;
lime_ui_KeyCode.ALT_ERASE = 1073741977;
lime_ui_KeyCode.SYSTEM_REQUEST = 1073741978;
lime_ui_KeyCode.CANCEL = 1073741979;
lime_ui_KeyCode.CLEAR = 1073741980;
lime_ui_KeyCode.PRIOR = 1073741981;
lime_ui_KeyCode.RETURN2 = 1073741982;
lime_ui_KeyCode.SEPARATOR = 1073741983;
lime_ui_KeyCode.OUT = 1073741984;
lime_ui_KeyCode.OPER = 1073741985;
lime_ui_KeyCode.CLEAR_AGAIN = 1073741986;
lime_ui_KeyCode.CRSEL = 1073741987;
lime_ui_KeyCode.EXSEL = 1073741988;
lime_ui_KeyCode.NUMPAD_00 = 1073742000;
lime_ui_KeyCode.NUMPAD_000 = 1073742001;
lime_ui_KeyCode.THOUSAND_SEPARATOR = 1073742002;
lime_ui_KeyCode.DECIMAL_SEPARATOR = 1073742003;
lime_ui_KeyCode.CURRENCY_UNIT = 1073742004;
lime_ui_KeyCode.CURRENCY_SUBUNIT = 1073742005;
lime_ui_KeyCode.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui_KeyCode.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui_KeyCode.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui_KeyCode.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui_KeyCode.NUMPAD_TAB = 1073742010;
lime_ui_KeyCode.NUMPAD_BACKSPACE = 1073742011;
lime_ui_KeyCode.NUMPAD_A = 1073742012;
lime_ui_KeyCode.NUMPAD_B = 1073742013;
lime_ui_KeyCode.NUMPAD_C = 1073742014;
lime_ui_KeyCode.NUMPAD_D = 1073742015;
lime_ui_KeyCode.NUMPAD_E = 1073742016;
lime_ui_KeyCode.NUMPAD_F = 1073742017;
lime_ui_KeyCode.NUMPAD_XOR = 1073742018;
lime_ui_KeyCode.NUMPAD_POWER = 1073742019;
lime_ui_KeyCode.NUMPAD_PERCENT = 1073742020;
lime_ui_KeyCode.NUMPAD_LESS_THAN = 1073742021;
lime_ui_KeyCode.NUMPAD_GREATER_THAN = 1073742022;
lime_ui_KeyCode.NUMPAD_AMPERSAND = 1073742023;
lime_ui_KeyCode.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui_KeyCode.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui_KeyCode.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui_KeyCode.NUMPAD_COLON = 1073742027;
lime_ui_KeyCode.NUMPAD_HASH = 1073742028;
lime_ui_KeyCode.NUMPAD_SPACE = 1073742029;
lime_ui_KeyCode.NUMPAD_AT = 1073742030;
lime_ui_KeyCode.NUMPAD_EXCLAMATION = 1073742031;
lime_ui_KeyCode.NUMPAD_MEM_STORE = 1073742032;
lime_ui_KeyCode.NUMPAD_MEM_RECALL = 1073742033;
lime_ui_KeyCode.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui_KeyCode.NUMPAD_MEM_ADD = 1073742035;
lime_ui_KeyCode.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui_KeyCode.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui_KeyCode.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui_KeyCode.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui_KeyCode.NUMPAD_CLEAR = 1073742040;
lime_ui_KeyCode.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui_KeyCode.NUMPAD_BINARY = 1073742042;
lime_ui_KeyCode.NUMPAD_OCTAL = 1073742043;
lime_ui_KeyCode.NUMPAD_DECIMAL = 1073742044;
lime_ui_KeyCode.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui_KeyCode.LEFT_CTRL = 1073742048;
lime_ui_KeyCode.LEFT_SHIFT = 1073742049;
lime_ui_KeyCode.LEFT_ALT = 1073742050;
lime_ui_KeyCode.LEFT_META = 1073742051;
lime_ui_KeyCode.RIGHT_CTRL = 1073742052;
lime_ui_KeyCode.RIGHT_SHIFT = 1073742053;
lime_ui_KeyCode.RIGHT_ALT = 1073742054;
lime_ui_KeyCode.RIGHT_META = 1073742055;
lime_ui_KeyCode.MODE = 1073742081;
lime_ui_KeyCode.AUDIO_NEXT = 1073742082;
lime_ui_KeyCode.AUDIO_PREVIOUS = 1073742083;
lime_ui_KeyCode.AUDIO_STOP = 1073742084;
lime_ui_KeyCode.AUDIO_PLAY = 1073742085;
lime_ui_KeyCode.AUDIO_MUTE = 1073742086;
lime_ui_KeyCode.MEDIA_SELECT = 1073742087;
lime_ui_KeyCode.WWW = 1073742088;
lime_ui_KeyCode.MAIL = 1073742089;
lime_ui_KeyCode.CALCULATOR = 1073742090;
lime_ui_KeyCode.COMPUTER = 1073742091;
lime_ui_KeyCode.APP_CONTROL_SEARCH = 1073742092;
lime_ui_KeyCode.APP_CONTROL_HOME = 1073742093;
lime_ui_KeyCode.APP_CONTROL_BACK = 1073742094;
lime_ui_KeyCode.APP_CONTROL_FORWARD = 1073742095;
lime_ui_KeyCode.APP_CONTROL_STOP = 1073742096;
lime_ui_KeyCode.APP_CONTROL_REFRESH = 1073742097;
lime_ui_KeyCode.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui_KeyCode.BRIGHTNESS_DOWN = 1073742099;
lime_ui_KeyCode.BRIGHTNESS_UP = 1073742100;
lime_ui_KeyCode.DISPLAY_SWITCH = 1073742101;
lime_ui_KeyCode.BACKLIGHT_TOGGLE = 1073742102;
lime_ui_KeyCode.BACKLIGHT_DOWN = 1073742103;
lime_ui_KeyCode.BACKLIGHT_UP = 1073742104;
lime_ui_KeyCode.EJECT = 1073742105;
lime_ui_KeyCode.SLEEP = 1073742106;
lime_ui_KeyModifier.NONE = 0;
lime_ui_KeyModifier.LEFT_SHIFT = 1;
lime_ui_KeyModifier.RIGHT_SHIFT = 2;
lime_ui_KeyModifier.LEFT_CTRL = 64;
lime_ui_KeyModifier.RIGHT_CTRL = 128;
lime_ui_KeyModifier.LEFT_ALT = 256;
lime_ui_KeyModifier.RIGHT_ALT = 512;
lime_ui_KeyModifier.LEFT_META = 1024;
lime_ui_KeyModifier.RIGHT_META = 2048;
lime_ui_KeyModifier.NUM_LOCK = 4096;
lime_ui_KeyModifier.CAPS_LOCK = 8192;
lime_ui_KeyModifier.MODE = 16384;
lime_ui_KeyModifier.CTRL = 192;
lime_ui_KeyModifier.SHIFT = 3;
lime_ui_KeyModifier.ALT = 768;
lime_ui_KeyModifier.META = 3072;
lime_ui_ScanCode.UNKNOWN = 0;
lime_ui_ScanCode.BACKSPACE = 42;
lime_ui_ScanCode.TAB = 43;
lime_ui_ScanCode.RETURN = 40;
lime_ui_ScanCode.ESCAPE = 41;
lime_ui_ScanCode.SPACE = 44;
lime_ui_ScanCode.SINGLE_QUOTE = 52;
lime_ui_ScanCode.COMMA = 54;
lime_ui_ScanCode.MINUS = 45;
lime_ui_ScanCode.PERIOD = 55;
lime_ui_ScanCode.SLASH = 56;
lime_ui_ScanCode.NUMBER_0 = 39;
lime_ui_ScanCode.NUMBER_1 = 30;
lime_ui_ScanCode.NUMBER_2 = 31;
lime_ui_ScanCode.NUMBER_3 = 32;
lime_ui_ScanCode.NUMBER_4 = 33;
lime_ui_ScanCode.NUMBER_5 = 34;
lime_ui_ScanCode.NUMBER_6 = 35;
lime_ui_ScanCode.NUMBER_7 = 36;
lime_ui_ScanCode.NUMBER_8 = 37;
lime_ui_ScanCode.NUMBER_9 = 38;
lime_ui_ScanCode.SEMICOLON = 51;
lime_ui_ScanCode.EQUALS = 46;
lime_ui_ScanCode.LEFT_BRACKET = 47;
lime_ui_ScanCode.BACKSLASH = 49;
lime_ui_ScanCode.RIGHT_BRACKET = 48;
lime_ui_ScanCode.GRAVE = 53;
lime_ui_ScanCode.A = 4;
lime_ui_ScanCode.B = 5;
lime_ui_ScanCode.C = 6;
lime_ui_ScanCode.D = 7;
lime_ui_ScanCode.E = 8;
lime_ui_ScanCode.F = 9;
lime_ui_ScanCode.G = 10;
lime_ui_ScanCode.H = 11;
lime_ui_ScanCode.I = 12;
lime_ui_ScanCode.J = 13;
lime_ui_ScanCode.K = 14;
lime_ui_ScanCode.L = 15;
lime_ui_ScanCode.M = 16;
lime_ui_ScanCode.N = 17;
lime_ui_ScanCode.O = 18;
lime_ui_ScanCode.P = 19;
lime_ui_ScanCode.Q = 20;
lime_ui_ScanCode.R = 21;
lime_ui_ScanCode.S = 22;
lime_ui_ScanCode.T = 23;
lime_ui_ScanCode.U = 24;
lime_ui_ScanCode.V = 25;
lime_ui_ScanCode.W = 26;
lime_ui_ScanCode.X = 27;
lime_ui_ScanCode.Y = 28;
lime_ui_ScanCode.Z = 29;
lime_ui_ScanCode.DELETE = 76;
lime_ui_ScanCode.CAPS_LOCK = 57;
lime_ui_ScanCode.F1 = 58;
lime_ui_ScanCode.F2 = 59;
lime_ui_ScanCode.F3 = 60;
lime_ui_ScanCode.F4 = 61;
lime_ui_ScanCode.F5 = 62;
lime_ui_ScanCode.F6 = 63;
lime_ui_ScanCode.F7 = 64;
lime_ui_ScanCode.F8 = 65;
lime_ui_ScanCode.F9 = 66;
lime_ui_ScanCode.F10 = 67;
lime_ui_ScanCode.F11 = 68;
lime_ui_ScanCode.F12 = 69;
lime_ui_ScanCode.PRINT_SCREEN = 70;
lime_ui_ScanCode.SCROLL_LOCK = 71;
lime_ui_ScanCode.PAUSE = 72;
lime_ui_ScanCode.INSERT = 73;
lime_ui_ScanCode.HOME = 74;
lime_ui_ScanCode.PAGE_UP = 75;
lime_ui_ScanCode.END = 77;
lime_ui_ScanCode.PAGE_DOWN = 78;
lime_ui_ScanCode.RIGHT = 79;
lime_ui_ScanCode.LEFT = 80;
lime_ui_ScanCode.DOWN = 81;
lime_ui_ScanCode.UP = 82;
lime_ui_ScanCode.NUM_LOCK = 83;
lime_ui_ScanCode.NUMPAD_DIVIDE = 84;
lime_ui_ScanCode.NUMPAD_MULTIPLY = 85;
lime_ui_ScanCode.NUMPAD_MINUS = 86;
lime_ui_ScanCode.NUMPAD_PLUS = 87;
lime_ui_ScanCode.NUMPAD_ENTER = 88;
lime_ui_ScanCode.NUMPAD_1 = 89;
lime_ui_ScanCode.NUMPAD_2 = 90;
lime_ui_ScanCode.NUMPAD_3 = 91;
lime_ui_ScanCode.NUMPAD_4 = 92;
lime_ui_ScanCode.NUMPAD_5 = 93;
lime_ui_ScanCode.NUMPAD_6 = 94;
lime_ui_ScanCode.NUMPAD_7 = 95;
lime_ui_ScanCode.NUMPAD_8 = 96;
lime_ui_ScanCode.NUMPAD_9 = 97;
lime_ui_ScanCode.NUMPAD_0 = 98;
lime_ui_ScanCode.NUMPAD_PERIOD = 99;
lime_ui_ScanCode.APPLICATION = 101;
lime_ui_ScanCode.POWER = 102;
lime_ui_ScanCode.NUMPAD_EQUALS = 103;
lime_ui_ScanCode.F13 = 104;
lime_ui_ScanCode.F14 = 105;
lime_ui_ScanCode.F15 = 106;
lime_ui_ScanCode.F16 = 107;
lime_ui_ScanCode.F17 = 108;
lime_ui_ScanCode.F18 = 109;
lime_ui_ScanCode.F19 = 110;
lime_ui_ScanCode.F20 = 111;
lime_ui_ScanCode.F21 = 112;
lime_ui_ScanCode.F22 = 113;
lime_ui_ScanCode.F23 = 114;
lime_ui_ScanCode.F24 = 115;
lime_ui_ScanCode.EXECUTE = 116;
lime_ui_ScanCode.HELP = 117;
lime_ui_ScanCode.MENU = 118;
lime_ui_ScanCode.SELECT = 119;
lime_ui_ScanCode.STOP = 120;
lime_ui_ScanCode.AGAIN = 121;
lime_ui_ScanCode.UNDO = 122;
lime_ui_ScanCode.CUT = 123;
lime_ui_ScanCode.COPY = 124;
lime_ui_ScanCode.PASTE = 125;
lime_ui_ScanCode.FIND = 126;
lime_ui_ScanCode.MUTE = 127;
lime_ui_ScanCode.VOLUME_UP = 128;
lime_ui_ScanCode.VOLUME_DOWN = 129;
lime_ui_ScanCode.NUMPAD_COMMA = 133;
lime_ui_ScanCode.ALT_ERASE = 153;
lime_ui_ScanCode.SYSTEM_REQUEST = 154;
lime_ui_ScanCode.CANCEL = 155;
lime_ui_ScanCode.CLEAR = 156;
lime_ui_ScanCode.PRIOR = 157;
lime_ui_ScanCode.RETURN2 = 158;
lime_ui_ScanCode.SEPARATOR = 159;
lime_ui_ScanCode.OUT = 160;
lime_ui_ScanCode.OPER = 161;
lime_ui_ScanCode.CLEAR_AGAIN = 162;
lime_ui_ScanCode.CRSEL = 163;
lime_ui_ScanCode.EXSEL = 164;
lime_ui_ScanCode.NUMPAD_00 = 176;
lime_ui_ScanCode.NUMPAD_000 = 177;
lime_ui_ScanCode.THOUSAND_SEPARATOR = 178;
lime_ui_ScanCode.DECIMAL_SEPARATOR = 179;
lime_ui_ScanCode.CURRENCY_UNIT = 180;
lime_ui_ScanCode.CURRENCY_SUBUNIT = 181;
lime_ui_ScanCode.NUMPAD_LEFT_PARENTHESIS = 182;
lime_ui_ScanCode.NUMPAD_RIGHT_PARENTHESIS = 183;
lime_ui_ScanCode.NUMPAD_LEFT_BRACE = 184;
lime_ui_ScanCode.NUMPAD_RIGHT_BRACE = 185;
lime_ui_ScanCode.NUMPAD_TAB = 186;
lime_ui_ScanCode.NUMPAD_BACKSPACE = 187;
lime_ui_ScanCode.NUMPAD_A = 188;
lime_ui_ScanCode.NUMPAD_B = 189;
lime_ui_ScanCode.NUMPAD_C = 190;
lime_ui_ScanCode.NUMPAD_D = 191;
lime_ui_ScanCode.NUMPAD_E = 192;
lime_ui_ScanCode.NUMPAD_F = 193;
lime_ui_ScanCode.NUMPAD_XOR = 194;
lime_ui_ScanCode.NUMPAD_POWER = 195;
lime_ui_ScanCode.NUMPAD_PERCENT = 196;
lime_ui_ScanCode.NUMPAD_LESS_THAN = 197;
lime_ui_ScanCode.NUMPAD_GREATER_THAN = 198;
lime_ui_ScanCode.NUMPAD_AMPERSAND = 199;
lime_ui_ScanCode.NUMPAD_DOUBLE_AMPERSAND = 200;
lime_ui_ScanCode.NUMPAD_VERTICAL_BAR = 201;
lime_ui_ScanCode.NUMPAD_DOUBLE_VERTICAL_BAR = 202;
lime_ui_ScanCode.NUMPAD_COLON = 203;
lime_ui_ScanCode.NUMPAD_HASH = 204;
lime_ui_ScanCode.NUMPAD_SPACE = 205;
lime_ui_ScanCode.NUMPAD_AT = 206;
lime_ui_ScanCode.NUMPAD_EXCLAMATION = 207;
lime_ui_ScanCode.NUMPAD_MEM_STORE = 208;
lime_ui_ScanCode.NUMPAD_MEM_RECALL = 209;
lime_ui_ScanCode.NUMPAD_MEM_CLEAR = 210;
lime_ui_ScanCode.NUMPAD_MEM_ADD = 211;
lime_ui_ScanCode.NUMPAD_MEM_SUBTRACT = 212;
lime_ui_ScanCode.NUMPAD_MEM_MULTIPLY = 213;
lime_ui_ScanCode.NUMPAD_MEM_DIVIDE = 214;
lime_ui_ScanCode.NUMPAD_PLUS_MINUS = 215;
lime_ui_ScanCode.NUMPAD_CLEAR = 216;
lime_ui_ScanCode.NUMPAD_CLEAR_ENTRY = 217;
lime_ui_ScanCode.NUMPAD_BINARY = 218;
lime_ui_ScanCode.NUMPAD_OCTAL = 219;
lime_ui_ScanCode.NUMPAD_DECIMAL = 220;
lime_ui_ScanCode.NUMPAD_HEXADECIMAL = 221;
lime_ui_ScanCode.LEFT_CTRL = 224;
lime_ui_ScanCode.LEFT_SHIFT = 225;
lime_ui_ScanCode.LEFT_ALT = 226;
lime_ui_ScanCode.LEFT_META = 227;
lime_ui_ScanCode.RIGHT_CTRL = 228;
lime_ui_ScanCode.RIGHT_SHIFT = 229;
lime_ui_ScanCode.RIGHT_ALT = 230;
lime_ui_ScanCode.RIGHT_META = 231;
lime_ui_ScanCode.MODE = 257;
lime_ui_ScanCode.AUDIO_NEXT = 258;
lime_ui_ScanCode.AUDIO_PREVIOUS = 259;
lime_ui_ScanCode.AUDIO_STOP = 260;
lime_ui_ScanCode.AUDIO_PLAY = 261;
lime_ui_ScanCode.AUDIO_MUTE = 262;
lime_ui_ScanCode.MEDIA_SELECT = 263;
lime_ui_ScanCode.WWW = 264;
lime_ui_ScanCode.MAIL = 265;
lime_ui_ScanCode.CALCULATOR = 266;
lime_ui_ScanCode.COMPUTER = 267;
lime_ui_ScanCode.APP_CONTROL_SEARCH = 268;
lime_ui_ScanCode.APP_CONTROL_HOME = 269;
lime_ui_ScanCode.APP_CONTROL_BACK = 270;
lime_ui_ScanCode.APP_CONTROL_FORWARD = 271;
lime_ui_ScanCode.APP_CONTROL_STOP = 272;
lime_ui_ScanCode.APP_CONTROL_REFRESH = 273;
lime_ui_ScanCode.APP_CONTROL_BOOKMARKS = 274;
lime_ui_ScanCode.BRIGHTNESS_DOWN = 275;
lime_ui_ScanCode.BRIGHTNESS_UP = 276;
lime_ui_ScanCode.DISPLAY_SWITCH = 277;
lime_ui_ScanCode.BACKLIGHT_TOGGLE = 278;
lime_ui_ScanCode.BACKLIGHT_DOWN = 279;
lime_ui_ScanCode.BACKLIGHT_UP = 280;
lime_ui_ScanCode.EJECT = 281;
lime_ui_ScanCode.SLEEP = 282;
lime_ui_Touch.onCancel = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils_Assets.bundlePaths = new haxe_ds_StringMap();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.libraryPaths = new haxe_ds_StringMap();
lime_utils_Float32Array.BYTES_PER_ELEMENT = 4;
lime_utils_Float64Array.BYTES_PER_ELEMENT = 8;
lime_utils_Int16Array.BYTES_PER_ELEMENT = 2;
lime_utils_Int32Array.BYTES_PER_ELEMENT = 4;
lime_utils_Int8Array.BYTES_PER_ELEMENT = 1;
lime_utils_Log.throwErrors = true;
lime_utils_LogLevel.NONE = 0;
lime_utils_LogLevel.ERROR = 1;
lime_utils_LogLevel.WARN = 2;
lime_utils_LogLevel.INFO = 3;
lime_utils_LogLevel.DEBUG = 4;
lime_utils_LogLevel.VERBOSE = 5;
lime_utils_UInt16Array.BYTES_PER_ELEMENT = 2;
lime_utils_UInt32Array.BYTES_PER_ELEMENT = 4;
lime_utils_UInt8Array.BYTES_PER_ELEMENT = 1;
lime_utils_UInt8ClampedArray.BYTES_PER_ELEMENT = 1;
little_interpreter_memory_Referrer.KEY_SIZE = 16;
little_Little.keywords = new little_KeywordConfig(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
little_Little.runtime = new little_interpreter_Runtime();
little_Little.memory = new little_interpreter_memory_Memory();
little_Little.plugin = new little_tools_Plugins(little_Little.memory);
little_Little.operators = new little_interpreter_memory_Operators();
little_Little.queue = new vision_ds_Queue();
little_Little.debug = false;
little_interpreter_memory_HashTables.OBJECT_HASH_TABLE_CELL_SIZE = 16;
little_interpreter_memory_MemoryPointer.POINTER_SIZE = 4;
var little_interpreter_memory_MemoryPointer_POINTER_SIZE = 4;
little_lexer_Lexer.signs = ["!","#","$","%","&","'","(",")","*","+","-",".","/",":","<","=",">","?","@","[","\\","]","^","_","`","{","|","}","~","^","√"];
little_tools_TextTools.fonts = new little_tools__$TextTools_MultilangFonts();
little_tools_TextTools.loremIpsumText = "\r\n\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque finibus condimentum magna, eget porttitor libero aliquam non. Praesent commodo, augue nec hendrerit tincidunt, urna felis lobortis mi, non cursus libero tellus quis tellus. Vivamus ornare convallis tristique. Integer nec ornare libero. Phasellus feugiat facilisis faucibus. Vivamus porta id neque id placerat. Proin convallis vel felis et pharetra. Quisque magna justo, ullamcorper quis scelerisque eu, tincidunt vitae lectus. Nunc sed turpis justo. Aliquam porttitor, purus sit amet faucibus bibendum, ligula elit molestie purus, eu volutpat turpis sapien ac tellus. Fusce mauris arcu, volutpat ut aliquam ut, ultrices id ante. Morbi quis consectetur turpis. Integer semper lacinia urna id laoreet.\r\n\r\n\t\tUt mollis eget eros eu tempor. Phasellus nulla velit, sollicitudin eget massa a, tristique rutrum turpis. Vestibulum in dolor at elit pellentesque finibus. Nulla pharetra felis a varius molestie. Nam magna lectus, eleifend ac sagittis id, ornare id nibh. Praesent congue est non iaculis consectetur. Nullam dictum augue sit amet dignissim fringilla. Aenean semper justo velit. Sed nec lectus facilisis, sodales diam eget, imperdiet nunc. Quisque elementum nulla non orci interdum pharetra id quis arcu. Phasellus eu nunc lectus. Nam tellus tortor, pellentesque eget faucibus eu, laoreet quis odio. Pellentesque posuere in enim a blandit.\r\n\r\n\t\tDuis dignissim neque et ex iaculis, ac consequat diam gravida. In mi ex, blandit eget velit non, euismod feugiat arcu. Nulla nec fermentum neque, eget elementum mauris. Vivamus urna ligula, faucibus at facilisis sed, commodo sit amet urna. Sed porttitor feugiat purus ac tincidunt. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aliquam sollicitudin lacinia turpis quis placerat. Donec eget velit nibh. Duis vehicula orci lectus, eget rutrum arcu tincidunt et. Vestibulum ut pharetra lectus. Quisque lacinia nunc rhoncus neque venenatis consequat. Nulla rutrum ultricies sapien, sed semper lectus accumsan nec. Phasellus commodo faucibus lacinia. Donec auctor condimentum ligula. Sed quis viverra mauris.\r\n\r\n\t\tQuisque maximus justo dui, eget pretium lorem accumsan ac. Praesent eleifend faucibus orci et varius. Ut et molestie turpis, eu porta neque. Quisque vehicula, libero in tincidunt facilisis, purus eros pulvinar leo, sit amet eleifend justo ligula tempor lectus. Donec ac tortor sed ipsum tincidunt pulvinar id nec eros. In luctus purus cursus est dictum, ac sollicitudin turpis maximus. Maecenas a nisl velit. Nulla gravida lectus vel ultricies gravida. Proin vel bibendum magna. Donec aliquam ultricies quam, quis tempor nunc pharetra ut.\r\n\r\n\t\tPellentesque sit amet dui est. Aliquam erat volutpat. Integer vitae ullamcorper est, ut eleifend augue. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Quisque congue velit felis, vitae elementum nulla faucibus id. Donec lectus nibh, commodo eget nunc id, feugiat sagittis massa. In hac habitasse platea dictumst. Pellentesque volutpat molestie ultrices.\r\n\t";
little_parser_Parser.additionalParsingLevels = [little_parser_Parser.mergeElses];
little_parser_Parser.linePart = 0;
little_tools_Layer.LEXER = "Lexer";
little_tools_Layer.PARSER = "Parser";
little_tools_Layer.PARSER_MACRO = "Parser, Macro";
little_tools_Layer.INTERPRETER = "Interpreter";
little_tools_Layer.INTERPRETER_VALUE_EVALUATOR = "Interpreter, Value Evaluator";
little_tools_Layer.INTERPRETER_EXPRESSION_EVALUATOR = "Interpreter, Expression Evaluator";
little_tools_Layer.INTERPRETER_TOKEN_VALUE_STRINGIFIER = "Interpreter, Token Value Stringifier";
little_tools_Layer.INTERPRETER_TOKEN_IDENTIFIER_STRINGIFIER = "Interpreter, Token Identifier Stringifier";
little_tools_Layer.MEMORY = "Memory";
little_tools_Layer.MEMORY_REFERRER = "Memory, Referrer";
little_tools_Layer.MEMORY_STORAGE = "Memory, Storage";
little_tools_Layer.MEMORY_EXTERNAL_INTERFACING = "Memory, External Interfacing";
little_tools_Layer.MEMORY_SIZE_EVALUATOR = "Memory, Size Evaluator";
little_tools_Layer.MEMORY_GARBAGE_COLLECTOR = "Memory, Garbage Collector";
little_tools_PrepareRun.prepared = false;
little_tools_PrettyPrinter.s = "";
little_tools_PrettyPrinter.l = 0;
little_tools_PrettyPrinter.indent = "";
openfl_Lib.__lastTimerID = 0;
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl_Lib.__timers = new haxe_ds_IntMap();
openfl_Lib.__registeredClassAliases = new haxe_ds_StringMap();
openfl__$Vector_IVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$Vector_BoolVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_FloatVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_FunctionVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_IntVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_ObjectVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { concat : { SuppressWarnings : ["checkstyle:Dynamic"]}, toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_Application.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display_BitmapData.__meta__ = { fields : { image : { SuppressWarnings : ["checkstyle:Dynamic"]}, __framebufferContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __indexBufferContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __surface : { SuppressWarnings : ["checkstyle:Dynamic"]}, __textureContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __vertexBufferContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, compare : { SuppressWarnings : ["checkstyle:Dynamic"]}, getSurface : { SuppressWarnings : ["checkstyle:Dynamic"]}, __fromImage : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_BitmapData.VERTEX_BUFFER_STRIDE = 14;
openfl_display_BitmapData.__tempVector = new lime_math_Vector2();
openfl_display_BlendMode.ADD = 0;
openfl_display_BlendMode.ALPHA = 1;
openfl_display_BlendMode.DARKEN = 2;
openfl_display_BlendMode.DIFFERENCE = 3;
openfl_display_BlendMode.ERASE = 4;
openfl_display_BlendMode.HARDLIGHT = 5;
openfl_display_BlendMode.INVERT = 6;
openfl_display_BlendMode.LAYER = 7;
openfl_display_BlendMode.LIGHTEN = 8;
openfl_display_BlendMode.MULTIPLY = 9;
openfl_display_BlendMode.NORMAL = 10;
openfl_display_BlendMode.OVERLAY = 11;
openfl_display_BlendMode.SCREEN = 12;
openfl_display_BlendMode.SHADER = 13;
openfl_display_BlendMode.SUBTRACT = 14;
openfl_display_DisplayObjectRenderer.__meta__ = { fields : { __context : { SuppressWarnings : ["checkstyle:Dynamic"]}, __type : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_CairoRenderer.__meta__ = { fields : { cairo : { SuppressWarnings : ["checkstyle:Dynamic"]}, __matrix3 : { SuppressWarnings : ["checkstyle:Dynamic"]}, applyMatrix : { SuppressWarnings : ["checkstyle:Dynamic"]}, __setBlendModeCairo : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_CanvasRenderer.__meta__ = { fields : { context : { SuppressWarnings : ["checkstyle:Dynamic"]}, applySmoothing : { SuppressWarnings : ["checkstyle:Dynamic"]}, setTransform : { SuppressWarnings : ["checkstyle:Dynamic"]}, __setBlendModeContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_CapsStyle.NONE = 0;
openfl_display_CapsStyle.ROUND = 1;
openfl_display_CapsStyle.SQUARE = 2;
openfl_display_DOMElement.__meta__ = { fields : { __element : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_DOMRenderer.__meta__ = { fields : { element : { SuppressWarnings : ["checkstyle:Dynamic"]}, applyStyle : { SuppressWarnings : ["checkstyle:Dynamic"]}, clearStyle : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_Shader.__meta__ = { fields : { glProgram : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_GradientType.LINEAR = 0;
openfl_display_GradientType.RADIAL = 1;
openfl_display_Graphics.__meta__ = { fields : { overrideBlendMode : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_display_GraphicsPath.SIN45 = 0.70710678118654752440084436210485;
openfl_display_GraphicsPath.TAN22 = 0.4142135623730950488016887242097;
openfl_display_GraphicsPathWinding.EVEN_ODD = 0;
openfl_display_GraphicsPathWinding.NON_ZERO = 1;
openfl_display_InterpolationMethod.LINEAR_RGB = 0;
openfl_display_InterpolationMethod.RGB = 1;
openfl_display_JointStyle.BEVEL = 0;
openfl_display_JointStyle.MITER = 1;
openfl_display_JointStyle.ROUND = 2;
openfl_display_LineScaleMode.HORIZONTAL = 0;
openfl_display_LineScaleMode.NONE = 1;
openfl_display_LineScaleMode.NORMAL = 2;
openfl_display_LineScaleMode.VERTICAL = 3;
openfl_display_Loader.__meta__ = { fields : { BitmapData_onError : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_LoaderInfo.__meta__ = { statics : { create : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}, fields : { parameters : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_LoaderInfo.__rootURL = js_Browser.get_supported() ? window.document.URL : "";
openfl_geom_Rectangle.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Rectangle();
},function(r) {
	r.setTo(0,0,0,0);
});
openfl_display_OpenGLRenderer.__meta__ = { fields : { gl : { SuppressWarnings : ["checkstyle:Dynamic"]}, __gl : { SuppressWarnings : ["checkstyle:Dynamic"]}, __matrix : { SuppressWarnings : ["checkstyle:Dynamic"]}, __projection : { SuppressWarnings : ["checkstyle:Dynamic"]}, __projectionFlipped : { SuppressWarnings : ["checkstyle:Dynamic"]}, getMatrix : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_OpenGLRenderer.__alphaValue = [1];
openfl_display_OpenGLRenderer.__colorMultipliersValue = [0,0,0,0];
openfl_display_OpenGLRenderer.__colorOffsetsValue = [0,0,0,0];
openfl_display_OpenGLRenderer.__defaultColorMultipliersValue = [1,1,1,1];
openfl_display_OpenGLRenderer.__emptyColorValue = [0,0,0,0];
openfl_display_OpenGLRenderer.__emptyAlphaValue = [1];
openfl_display_OpenGLRenderer.__hasColorTransformValue = [false];
openfl_display_OpenGLRenderer.__scissorRectangle = new openfl_geom_Rectangle();
openfl_display_OpenGLRenderer.__textureSizeValue = [0,0];
openfl_display_PixelSnapping.ALWAYS = 0;
openfl_display_PixelSnapping.AUTO = 1;
openfl_display_PixelSnapping.NEVER = 2;
openfl_display_Preloader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { onComplete : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_DefaultPreloader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display_ShaderInput.__meta__ = { fields : { index : { SuppressWarnings : ["checkstyle:Dynamic"]}, name : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_display_ShaderParameter.__meta__ = { fields : { index : { SuppressWarnings : ["checkstyle:Dynamic"]}, name : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_display_ShaderParameterType.BOOL = 0;
openfl_display_ShaderParameterType.BOOL2 = 1;
openfl_display_ShaderParameterType.BOOL3 = 2;
openfl_display_ShaderParameterType.BOOL4 = 3;
openfl_display_ShaderParameterType.FLOAT = 4;
openfl_display_ShaderParameterType.FLOAT2 = 5;
openfl_display_ShaderParameterType.FLOAT3 = 6;
openfl_display_ShaderParameterType.FLOAT4 = 7;
openfl_display_ShaderParameterType.INT = 8;
openfl_display_ShaderParameterType.INT2 = 9;
openfl_display_ShaderParameterType.INT3 = 10;
openfl_display_ShaderParameterType.INT4 = 11;
openfl_display_ShaderParameterType.MATRIX2X2 = 12;
openfl_display_ShaderParameterType.MATRIX2X3 = 13;
openfl_display_ShaderParameterType.MATRIX2X4 = 14;
openfl_display_ShaderParameterType.MATRIX3X2 = 15;
openfl_display_ShaderParameterType.MATRIX3X3 = 16;
openfl_display_ShaderParameterType.MATRIX3X4 = 17;
openfl_display_ShaderParameterType.MATRIX4X2 = 18;
openfl_display_ShaderParameterType.MATRIX4X3 = 19;
openfl_display_ShaderParameterType.MATRIX4X4 = 20;
openfl_display_ShaderPrecision.FAST = 0;
openfl_display_ShaderPrecision.FULL = 1;
openfl_display_SpreadMethod.PAD = 0;
openfl_display_SpreadMethod.REFLECT = 1;
openfl_display_SpreadMethod.REPEAT = 2;
openfl_display_Stage.__meta__ = { fields : { __broadcastEvent : { SuppressWarnings : ["checkstyle:Dynamic"]}, __dispatchEvent : { SuppressWarnings : [["checkstyle:Dynamic","checkstyle:LeftCurly"]]}, __dispatchStack : { SuppressWarnings : [["checkstyle:Dynamic","checkstyle:LeftCurly"]]}, __dispatchTarget : { SuppressWarnings : ["checkstyle:Dynamic"]}, __handleError : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_StageAlign.BOTTOM = 0;
openfl_display_StageAlign.BOTTOM_LEFT = 1;
openfl_display_StageAlign.BOTTOM_RIGHT = 2;
openfl_display_StageAlign.LEFT = 3;
openfl_display_StageAlign.RIGHT = 4;
openfl_display_StageAlign.TOP = 5;
openfl_display_StageAlign.TOP_LEFT = 6;
openfl_display_StageAlign.TOP_RIGHT = 7;
openfl_display_StageDisplayState.FULL_SCREEN = 0;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE = 1;
openfl_display_StageDisplayState.NORMAL = 2;
openfl_display_StageQuality.BEST = 0;
openfl_display_StageQuality.HIGH = 1;
openfl_display_StageQuality.LOW = 2;
openfl_display_StageQuality.MEDIUM = 3;
openfl_display_StageScaleMode.EXACT_FIT = 0;
openfl_display_StageScaleMode.NO_BORDER = 1;
openfl_display_StageScaleMode.NO_SCALE = 2;
openfl_display_StageScaleMode.SHOW_ALL = 3;
openfl_display_Tile.__meta__ = { fields : { data : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$Tileset_TileData.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display_TriangleCulling.NEGATIVE = 0;
openfl_display_TriangleCulling.NONE = 1;
openfl_display_TriangleCulling.POSITIVE = 2;
openfl_display_Window.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_AbstractNoise.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CairoBitmap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CairoDisplayObject.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CairoGraphics.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CairoShape.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CairoTextField.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CairoTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { renderTileContainer : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_CanvasBitmap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CanvasDisplayObject.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DrawCommandBuffer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { o : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_DrawCommandBuffer.empty = new openfl_display__$internal_DrawCommandBuffer();
openfl_display__$internal_CanvasGraphics.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { windingRule : { SuppressWarnings : ["checkstyle:Dynamic"]}, createBitmapFill : { SuppressWarnings : ["checkstyle:Dynamic"]}, createGradientPattern : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl_display__$internal_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl_display__$internal_CanvasGraphics.fillCommands = new openfl_display__$internal_DrawCommandBuffer();
openfl_display__$internal_CanvasGraphics.strokeCommands = new openfl_display__$internal_DrawCommandBuffer();
openfl_display__$internal_CanvasShape.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CanvasTextField.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CanvasTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { renderTileContainer : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_CanvasVideo.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DBitmap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DBuffer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DBuffer.MAX_INDEX_BUFFER_LENGTH = 65535;
openfl_display__$internal_Context3DBuffer.MAX_QUADS_PER_INDEX_BUFFER = 10922;
openfl_display__$internal_Context3DBuffer.MAX_QUAD_INDEX_BUFFER_LENGTH = 65532;
openfl_display__$internal_Context3DDisplayObject.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_geom_Matrix.__meta__ = { fields : { equals : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, to3DString : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, toMozString : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Matrix();
},function(m) {
	m.identity();
});
openfl_geom_Matrix.__matrix3 = new lime_math_Matrix3();
openfl_geom_ColorTransform.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_ColorTransform();
},function(ct) {
	ct.__identity();
});
openfl_display__$internal_Context3DGraphics.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DGraphics.blankBitmapData = new openfl_display_BitmapData(1,1,false,0);
openfl_display__$internal_Context3DGraphics.tempColorTransform = new openfl_geom_ColorTransform(1,1,1,1,0,0,0,0);
openfl_display__$internal_Context3DMaskShader.opaqueBitmapData = new openfl_display_BitmapData(1,1,false,0);
openfl_display__$internal_Context3DShape.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DTextField.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DVideo.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DVideo.__textureSizeValue = [0,0.];
openfl_display__$internal_DOMBitmap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DOMDisplayObject.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DOMShape.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DOMTextField.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DOMTextField.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl_display__$internal_DOMTextField.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl_display__$internal_DOMTextField.__regexFont = new EReg("<font ([^>]+)>","gi");
openfl_display__$internal_DOMTextField.__regexCloseFont = new EReg("</font>","gi");
openfl_display__$internal_DOMTextField.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl_display__$internal_DOMTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DOMVideo.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DrawCommandReader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { obj : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_FlashRenderer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_geom_Point.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Point();
},function(p) {
	p.setTo(0,0);
});
openfl_display__$internal_FlashTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_FlashTilemap.alphaColorTransform = new openfl_geom_ColorTransform();
openfl_display__$internal_FlashTilemap.bitmap = new openfl_display_Bitmap();
openfl_display__$internal_FlashTilemap.destPoint = new openfl_geom_Point();
openfl_display__$internal_FlashTilemap.sourceRect = new openfl_geom_Rectangle();
openfl_display__$internal_PerlinNoise.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { P : { SuppressWarnings : ["checkstyle:ConstantName"]}}};
openfl_display__$internal_PerlinNoise.P = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];
openfl_display__$internal_SamplerState.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_ShaderBuffer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { overrideIntValues : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display3D_Context3D.supportsVideoTexture = true;
openfl_display3D_Context3D.__glDepthStencil = -1;
openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy = -1;
openfl_display3D_Context3D.__glMaxViewportDims = -1;
openfl_display3D_Context3D.__glMemoryCurrentAvailable = -1;
openfl_display3D_Context3D.__glMemoryTotalAvailable = -1;
openfl_display3D_Context3D.__glTextureMaxAnisotropy = -1;
openfl_display3D_Context3DBlendFactor.DESTINATION_ALPHA = 0;
openfl_display3D_Context3DBlendFactor.DESTINATION_COLOR = 1;
openfl_display3D_Context3DBlendFactor.ONE = 2;
openfl_display3D_Context3DBlendFactor.ONE_MINUS_DESTINATION_ALPHA = 3;
openfl_display3D_Context3DBlendFactor.ONE_MINUS_DESTINATION_COLOR = 4;
openfl_display3D_Context3DBlendFactor.ONE_MINUS_SOURCE_ALPHA = 5;
openfl_display3D_Context3DBlendFactor.ONE_MINUS_SOURCE_COLOR = 6;
openfl_display3D_Context3DBlendFactor.SOURCE_ALPHA = 7;
openfl_display3D_Context3DBlendFactor.SOURCE_COLOR = 8;
openfl_display3D_Context3DBlendFactor.ZERO = 9;
openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW = 0;
openfl_display3D_Context3DBufferUsage.STATIC_DRAW = 1;
openfl_display3D_Context3DCompareMode.ALWAYS = 0;
openfl_display3D_Context3DCompareMode.EQUAL = 1;
openfl_display3D_Context3DCompareMode.GREATER = 2;
openfl_display3D_Context3DCompareMode.GREATER_EQUAL = 3;
openfl_display3D_Context3DCompareMode.LESS = 4;
openfl_display3D_Context3DCompareMode.LESS_EQUAL = 5;
openfl_display3D_Context3DCompareMode.NEVER = 6;
openfl_display3D_Context3DCompareMode.NOT_EQUAL = 7;
openfl_display3D_Context3DMipFilter.MIPLINEAR = 0;
openfl_display3D_Context3DMipFilter.MIPNEAREST = 1;
openfl_display3D_Context3DMipFilter.MIPNONE = 2;
openfl_display3D_Context3DProfile.BASELINE = 0;
openfl_display3D_Context3DProfile.BASELINE_CONSTRAINED = 1;
openfl_display3D_Context3DProfile.BASELINE_EXTENDED = 2;
openfl_display3D_Context3DProfile.STANDARD = 3;
openfl_display3D_Context3DProfile.STANDARD_CONSTRAINED = 4;
openfl_display3D_Context3DProfile.STANDARD_EXTENDED = 5;
openfl_display3D_Context3DProgramFormat.AGAL = 0;
openfl_display3D_Context3DProgramFormat.GLSL = 1;
openfl_display3D_Context3DProgramType.FRAGMENT = 0;
openfl_display3D_Context3DProgramType.VERTEX = 1;
openfl_display3D_Context3DRenderMode.AUTO = 0;
openfl_display3D_Context3DRenderMode.SOFTWARE = 1;
openfl_display3D_Context3DStencilAction.DECREMENT_SATURATE = 0;
openfl_display3D_Context3DStencilAction.DECREMENT_WRAP = 1;
openfl_display3D_Context3DStencilAction.INCREMENT_SATURATE = 2;
openfl_display3D_Context3DStencilAction.INCREMENT_WRAP = 3;
openfl_display3D_Context3DStencilAction.INVERT = 4;
openfl_display3D_Context3DStencilAction.KEEP = 5;
openfl_display3D_Context3DStencilAction.SET = 6;
openfl_display3D_Context3DStencilAction.ZERO = 7;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X = 0;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X = 1;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X = 2;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X = 3;
openfl_display3D_Context3DTextureFilter.LINEAR = 4;
openfl_display3D_Context3DTextureFilter.NEAREST = 5;
openfl_display3D_Context3DTextureFormat.BGR_PACKED = 0;
openfl_display3D_Context3DTextureFormat.BGRA = 1;
openfl_display3D_Context3DTextureFormat.BGRA_PACKED = 2;
openfl_display3D_Context3DTextureFormat.COMPRESSED = 3;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA = 4;
openfl_display3D_Context3DTextureFormat.RGBA_HALF_FLOAT = 5;
openfl_display3D_Context3DTriangleFace.BACK = 0;
openfl_display3D_Context3DTriangleFace.FRONT = 1;
openfl_display3D_Context3DTriangleFace.FRONT_AND_BACK = 2;
openfl_display3D_Context3DTriangleFace.NONE = 3;
openfl_display3D_Context3DVertexBufferFormat.BYTES_4 = 0;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1 = 1;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2 = 2;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3 = 3;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4 = 4;
openfl_display3D_Context3DWrapMode.CLAMP = 0;
openfl_display3D_Context3DWrapMode.CLAMP_U_REPEAT_V = 1;
openfl_display3D_Context3DWrapMode.REPEAT = 2;
openfl_display3D_Context3DWrapMode.REPEAT_U_CLAMP_V = 3;
openfl_display3D_Uniform.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D_UniformMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal_AGALConverter.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal_AGALConverter.limitedProfile = true;
openfl_display3D__$internal__$AGALConverter_DestRegister.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal_RegisterMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal__$AGALConverter_SamplerRegister.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal__$AGALConverter_SourceRegister.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal_ATFReader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal_Context3DState.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D_textures_TextureBase.__meta__ = { fields : { __textureContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __getGLFramebuffer : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display3D_textures_Texture.__lowMemoryMode = false;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLEAR = "clear";
openfl_events_Event.CLOSING = "closing";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.COPY = "copy";
openfl_events_Event.CUT = "cut";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.EXIT_FRAME = "exitFrame";
openfl_events_Event.EXITING = "exiting";
openfl_events_Event.FRAME_CONSTRUCTED = "frameConstructed";
openfl_events_Event.FRAME_LABEL = "frameLabel";
openfl_events_Event.FULLSCREEN = "fullScreen";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.PASTE = "paste";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SELECT_ALL = "selectAll";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.TEXTURE_READY = "textureReady";
openfl_events_Event.UNLOAD = "unload";
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events__$EventDispatcher_DispatchIterator.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_events__$EventDispatcher_Listener.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_events__$EventDispatcher_Listener.supportsWeakReference = (function($this) {
	var $r;
	var o = $global;
	$r = Object.prototype.hasOwnProperty.call(o,"WeakRef");
	return $r;
}(this));
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RELEASE_OUTSIDE = "releaseOutside";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_RenderEvent.CLEAR_DOM = "clearDOM";
openfl_events_RenderEvent.RENDER_CAIRO = "renderCairo";
openfl_events_RenderEvent.RENDER_CANVAS = "renderCanvas";
openfl_events_RenderEvent.RENDER_DOM = "renderDOM";
openfl_events_RenderEvent.RENDER_OPENGL = "renderOpenGL";
openfl_events_SampleDataEvent.SAMPLE_DATA = "sampleData";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TouchEvent.__meta__ = { fields : { delta : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_events_UncaughtErrorEvent.UNCAUGHT_ERROR = "uncaughtError";
openfl_geom_Matrix3D.__meta__ = { statics : { create2D : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, createABCD : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, createOrtho : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_geom_Orientation3D.AXIS_ANGLE = 0;
openfl_geom_Orientation3D.EULER_ANGLES = 1;
openfl_geom_Orientation3D.QUATERNION = 2;
openfl_media_SoundTransform.__meta__ = { fields : { clone : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_media_SoundMixer.MAX_ACTIVE_CHANNELS = 32;
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_media_Video.VERTEX_BUFFER_STRIDE = 5;
openfl_net_NetConnection.__meta__ = { statics : { CONNECT_SUCCESS : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_net_NetConnection.CONNECT_SUCCESS = "NetConnection.Connect.Success";
openfl_net_NetStream.__meta__ = { fields : { audioCodec : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, decodedFrames : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, speed : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, requestVideoStatus : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_net_ObjectEncoding.AMF0 = 0;
openfl_net_ObjectEncoding.AMF3 = 3;
openfl_net_ObjectEncoding.HXSF = 10;
openfl_net_ObjectEncoding.JSON = 12;
openfl_net_ObjectEncoding.DEFAULT = 10;
openfl_net_URLLoaderDataFormat.BINARY = 0;
openfl_net_URLLoaderDataFormat.TEXT = 1;
openfl_net_URLLoaderDataFormat.VARIABLES = 2;
openfl_net_URLRequestDefaults.followRedirects = true;
openfl_net_URLRequestDefaults.idleTimeout = 0;
openfl_net_URLRequestDefaults.manageCookies = true;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_system_SecurityDomain.__meta__ = { obj : { SuppressWarnings : ["checkstyle:UnnecessaryConstructor"]}};
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_text_AntiAliasType.ADVANCED = 0;
openfl_text_AntiAliasType.NORMAL = 1;
openfl_text_FontStyle.BOLD = 0;
openfl_text_FontStyle.BOLD_ITALIC = 1;
openfl_text_FontStyle.ITALIC = 2;
openfl_text_FontStyle.REGULAR = 3;
openfl_text_FontType.DEVICE = 0;
openfl_text_FontType.EMBEDDED = 1;
openfl_text_FontType.EMBEDDED_CFF = 2;
openfl_text_GridFitType.NONE = 0;
openfl_text_GridFitType.PIXEL = 1;
openfl_text_GridFitType.SUBPIXEL = 2;
openfl_text_StyleSheet.__supportedStyles = ["color","display","font-family","font-size","font-style","font-weight","kerning","leading","letter-spacing","margin-left","margin-right","text-align","text-decoration","text-indent"];
openfl_text_TextField.__missingFontWarning = new haxe_ds_StringMap();
openfl_text_TextFieldAutoSize.CENTER = 0;
openfl_text_TextFieldAutoSize.LEFT = 1;
openfl_text_TextFieldAutoSize.NONE = 2;
openfl_text_TextFieldAutoSize.RIGHT = 3;
openfl_text_TextFieldType.DYNAMIC = 0;
openfl_text_TextFieldType.INPUT = 1;
openfl_text_TextFormat.__meta__ = { fields : { clone : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_text_TextFormatAlign.CENTER = 0;
openfl_text_TextFormatAlign.END = 1;
openfl_text_TextFormatAlign.JUSTIFY = 2;
openfl_text_TextFormatAlign.LEFT = 3;
openfl_text_TextFormatAlign.RIGHT = 4;
openfl_text_TextFormatAlign.START = 5;
openfl_text__$internal_CacheMeasurement.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_text__$internal_GlyphPosition.__meta__ = { obj : { SuppressWarnings : [["checkstyle:FieldDocComment","checkstyle:Dynamic"]]}};
openfl_text__$internal_HTMLParser.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_text__$internal_HTMLParser.__regexAlign = new EReg("align\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexBreakTag = new EReg("<br\\s*/?>","gi");
openfl_text__$internal_HTMLParser.__regexBlockIndent = new EReg("blockindent\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexClass = new EReg("class\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexColor = new EReg("color\\s?=\\s?(\"#([^\"]+)\"|'#([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexEntities = [new EReg("&quot;","g"),new EReg("&apos;","g"),new EReg("&amp;","g"),new EReg("&lt;","g"),new EReg("&gt;","g"),new EReg("&nbsp;","g")];
openfl_text__$internal_HTMLParser.__regexCharEntity = new EReg("&#(?:([0-9]+)|(x[0-9a-fA-F]+));","g");
openfl_text__$internal_HTMLParser.__regexFace = new EReg("face\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexHTMLTag = new EReg("<.*?>","g");
openfl_text__$internal_HTMLParser.__regexHref = new EReg("href\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexIndent = new EReg(" indent\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexLeading = new EReg("leading\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexLeftMargin = new EReg("leftmargin\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexRightMargin = new EReg("rightmargin\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexSize = new EReg("size\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexTabStops = new EReg("tabstops\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_ShapeCache.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_text__$internal_TextEngine.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { __cairoFont : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_text__$internal_TextEngine.GUTTER = 2;
openfl_text__$internal_TextEngine.UTF8_TAB = 9;
openfl_text__$internal_TextEngine.UTF8_ENDLINE = 10;
openfl_text__$internal_TextEngine.UTF8_SPACE = 32;
openfl_text__$internal_TextEngine.UTF8_HYPHEN = 45;
openfl_text__$internal_TextLayout.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { glyphs : { SuppressWarnings : ["checkstyle:Dynamic"]}, __handle : { SuppressWarnings : ["checkstyle:Dynamic"]}, __hbBuffer : { SuppressWarnings : ["checkstyle:Dynamic"]}, __hbFont : { SuppressWarnings : ["checkstyle:Dynamic"]}, get_glyphs : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_text__$internal_TextLayout.FT_LOAD_DEFAULT = 0;
openfl_text__$internal_TextLayout.FT_LOAD_NO_SCALE = 1;
openfl_text__$internal_TextLayout.FT_LOAD_NO_HINTING = 2;
openfl_text__$internal_TextLayout.FT_LOAD_RENDER = 4;
openfl_text__$internal_TextLayout.FT_LOAD_NO_BITMAP = 8;
openfl_text__$internal_TextLayout.FT_LOAD_VERTICAL_LAYOUT = 16;
openfl_text__$internal_TextLayout.FT_LOAD_FORCE_AUTOHINT = 32;
openfl_text__$internal_TextLayout.FT_LOAD_CROP_BITMAP = 64;
openfl_text__$internal_TextLayout.FT_LOAD_PEDANTIC = 128;
openfl_text__$internal_TextLayout.FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH = 256;
openfl_text__$internal_TextLayout.FT_LOAD_NO_RECURSE = 512;
openfl_text__$internal_TextLayout.FT_LOAD_IGNORE_TRANSFORM = 1024;
openfl_text__$internal_TextLayout.FT_LOAD_MONOCHROME = 2048;
openfl_text__$internal_TextLayout.FT_LOAD_LINEAR_DESIGN = 4096;
openfl_text__$internal_TextLayout.FT_LOAD_NO_AUTOHINT = 8192;
openfl_text__$internal_TextLayout.FT_LOAD_COLOR = 16384;
openfl_text__$internal_TextLayout.FT_LOAD_COMPUTE_METRICS = 32768;
openfl_text__$internal_TextLayout.FT_LOAD_BITMAP_METRICS_ONLY = 65536;
openfl_text__$internal_TextLayout.FT_LOAD_TARGET_NORMAL = 0;
openfl_text__$internal_TextLayout.FT_LOAD_TARGET_LIGHT = 0;
openfl_text__$internal_TextDirection.INVALID = 0;
openfl_text__$internal_TextDirection.LEFT_TO_RIGHT = 4;
openfl_text__$internal_TextDirection.RIGHT_TO_LEFT = 5;
openfl_text__$internal_TextDirection.TOP_TO_BOTTOM = 6;
openfl_text__$internal_TextDirection.BOTTOM_TO_TOP = 7;
openfl_text__$internal_TextScript.COMMON = "Zyyy";
openfl_text__$internal_TextScript.INHERITED = "Zinh";
openfl_text__$internal_TextScript.UNKNOWN = "Zzzz";
openfl_text__$internal_TextScript.ARABIC = "Arab";
openfl_text__$internal_TextScript.ARMENIAN = "Armn";
openfl_text__$internal_TextScript.BENGALI = "Beng";
openfl_text__$internal_TextScript.CYRILLIC = "Cyrl";
openfl_text__$internal_TextScript.DEVANAGARI = "Deva";
openfl_text__$internal_TextScript.GEORGIAN = "Geor";
openfl_text__$internal_TextScript.GREEK = "Grek";
openfl_text__$internal_TextScript.GUJARATI = "Gujr";
openfl_text__$internal_TextScript.GURMUKHI = "Guru";
openfl_text__$internal_TextScript.HANGUL = "Hang";
openfl_text__$internal_TextScript.HAN = "Hani";
openfl_text__$internal_TextScript.HEBREW = "Hebr";
openfl_text__$internal_TextScript.HIRAGANA = "Hira";
openfl_text__$internal_TextScript.KANNADA = "Knda";
openfl_text__$internal_TextScript.KATAKANA = "Kana";
openfl_text__$internal_TextScript.LAO = "Laoo";
openfl_text__$internal_TextScript.LATIN = "Latn";
openfl_text__$internal_TextScript.MALAYALAM = "Mlym";
openfl_text__$internal_TextScript.ORIYA = "Orya";
openfl_text__$internal_TextScript.TAMIL = "Taml";
openfl_text__$internal_TextScript.TELUGA = "Telu";
openfl_text__$internal_TextScript.THAI = "Thai";
openfl_text__$internal_TextScript.TIBETAN = "Tibt";
openfl_text__$internal_TextScript.BOPOMOFO = "Bopo";
openfl_text__$internal_TextScript.BRAILLE = "Brai";
openfl_text__$internal_TextScript.CANADIAN_SYLLABICS = "Cans";
openfl_text__$internal_TextScript.CHEROKEE = "Cher";
openfl_text__$internal_TextScript.ETHIOPIC = "Ethi";
openfl_text__$internal_TextScript.KHMER = "Khmr";
openfl_text__$internal_TextScript.MONGOLIAN = "Mong";
openfl_text__$internal_TextScript.MYANMAR = "Mymr";
openfl_text__$internal_TextScript.OGHAM = "Ogam";
openfl_text__$internal_TextScript.RUNIC = "Runr";
openfl_text__$internal_TextScript.SINHALA = "Sinh";
openfl_text__$internal_TextScript.SYRIAC = "Syrc";
openfl_text__$internal_TextScript.THAANA = "Thaa";
openfl_text__$internal_TextScript.YI = "Yiii";
openfl_text__$internal_TextScript.DESERET = "Dsrt";
openfl_text__$internal_TextScript.GOTHIC = "Goth";
openfl_text__$internal_TextScript.OLD_ITALIC = "Ital";
openfl_text__$internal_TextScript.BUHID = "Buhd";
openfl_text__$internal_TextScript.HANUNOO = "Hano";
openfl_text__$internal_TextScript.TAGALOG = "Tglg";
openfl_text__$internal_TextScript.TAGBANWA = "Tagb";
openfl_text__$internal_TextScript.CYPRIOT = "Cprt";
openfl_text__$internal_TextScript.LIMBU = "Limb";
openfl_text__$internal_TextScript.LINEAR_B = "Linb";
openfl_text__$internal_TextScript.OSMANYA = "Osma";
openfl_text__$internal_TextScript.SHAVIAN = "Shaw";
openfl_text__$internal_TextScript.TAI_LE = "Tale";
openfl_text__$internal_TextScript.UGARITIC = "Ugar";
openfl_text__$internal_TextScript.BUGINESE = "Bugi";
openfl_text__$internal_TextScript.COPTIC = "Copt";
openfl_text__$internal_TextScript.GLAGOLITIC = "Glag";
openfl_text__$internal_TextScript.KHAROSHTHI = "Khar";
openfl_text__$internal_TextScript.NEW_TAI_LUE = "Talu";
openfl_text__$internal_TextScript.OLD_PERSIAN = "Xpeo";
openfl_text__$internal_TextScript.SYLOTI_NAGRI = "Sylo";
openfl_text__$internal_TextScript.TIFINAGH = "Tfng";
openfl_text__$internal_TextScript.BALINESE = "Bali";
openfl_text__$internal_TextScript.CUNEIFORM = "Xsux";
openfl_text__$internal_TextScript.NKO = "Nkoo";
openfl_text__$internal_TextScript.PHAGS_PA = "Phag";
openfl_text__$internal_TextScript.PHOENICIAN = "Phnx";
openfl_text__$internal_TextScript.CARIAN = "Cari";
openfl_text__$internal_TextScript.CHAM = "Cham";
openfl_text__$internal_TextScript.KAYAH_LI = "Kali";
openfl_text__$internal_TextScript.LEPCHA = "Lepc";
openfl_text__$internal_TextScript.LYCIAN = "Lyci";
openfl_text__$internal_TextScript.LYDIAN = "Lydi";
openfl_text__$internal_TextScript.OL_CHIKI = "Olck";
openfl_text__$internal_TextScript.REJANG = "Rjng";
openfl_text__$internal_TextScript.SAURASHTRA = "Saur";
openfl_text__$internal_TextScript.SUNDANESE = "Sund";
openfl_text__$internal_TextScript.VAI = "Vaii";
openfl_text__$internal_TextScript.AVESTAN = "Avst";
openfl_text__$internal_TextScript.BAMUM = "Bamu";
openfl_text__$internal_TextScript.EGYPTIAN_HIEROGLYPHS = "Egyp";
openfl_text__$internal_TextScript.IMPERIAL_ARAMAIC = "Armi";
openfl_text__$internal_TextScript.INSCRIPTIONAL_PAHLAVI = "Phli";
openfl_text__$internal_TextScript.INSCRIPTIONAL_PARTHIAN = "Prti";
openfl_text__$internal_TextScript.JAVANESE = "Java";
openfl_text__$internal_TextScript.KAITHI = "Kthi";
openfl_text__$internal_TextScript.LISU = "Lisu";
openfl_text__$internal_TextScript.MEETEI_MAYEK = "Mtei";
openfl_text__$internal_TextScript.OLD_SOUTH_ARABIAN = "Sarb";
openfl_text__$internal_TextScript.OLD_TURKIC = "Orkh";
openfl_text__$internal_TextScript.SAMARITAN = "Samr";
openfl_text__$internal_TextScript.TAI_THAM = "Lana";
openfl_text__$internal_TextScript.TAI_VIET = "Tavt";
openfl_text__$internal_TextScript.BATAK = "Batk";
openfl_text__$internal_TextScript.BRAHMI = "Brah";
openfl_text__$internal_TextScript.MANDAIC = "Mand";
openfl_text__$internal_TextScript.CHAKMA = "Cakm";
openfl_text__$internal_TextScript.MEROITIC_CURSIVE = "Merc";
openfl_text__$internal_TextScript.MEROITIC_HIEROGLYPHS = "Mero";
openfl_text__$internal_TextScript.MIAO = "Plrd";
openfl_text__$internal_TextScript.SHARADA = "Shrd";
openfl_text__$internal_TextScript.SORA_SOMPENG = "Sora";
openfl_text__$internal_TextScript.TAKRI = "Takr";
openfl_text__$internal_TextScript.BASSA_VAH = "Bass";
openfl_text__$internal_TextScript.CAUCASIAN_ALBANIAN = "Aghb";
openfl_text__$internal_TextScript.DUPLOYAN = "Dupl";
openfl_text__$internal_TextScript.ELBASAN = "Elba";
openfl_text__$internal_TextScript.GRANTHA = "Gran";
openfl_text__$internal_TextScript.KHOJKI = "Khoj";
openfl_text__$internal_TextScript.KHUDAWADI = "Sind";
openfl_text__$internal_TextScript.LINEAR_A = "Lina";
openfl_text__$internal_TextScript.MAHAJANI = "Mahj";
openfl_text__$internal_TextScript.MANICHAEAN = "Mani";
openfl_text__$internal_TextScript.MENDE_KIKAKUI = "Mend";
openfl_text__$internal_TextScript.MODI = "Modi";
openfl_text__$internal_TextScript.MRO = "Mroo";
openfl_text__$internal_TextScript.NABATAEAN = "Nbat";
openfl_text__$internal_TextScript.OLD_NORTH_ARABIAN = "Narb";
openfl_text__$internal_TextScript.OLD_PERMIC = "Perm";
openfl_text__$internal_TextScript.PAHAWH_HMONG = "Hmng";
openfl_text__$internal_TextScript.PALMYRENE = "Palm";
openfl_text__$internal_TextScript.PAU_CIN_HAU = "Pauc";
openfl_text__$internal_TextScript.PSALTER_PAHLAVI = "Phlp";
openfl_text__$internal_TextScript.SIDDHAM = "Sidd";
openfl_text__$internal_TextScript.TIRHUTA = "Tirh";
openfl_text__$internal_TextScript.WARANG_CITI = "Wara";
openfl_text__$internal_TextLayoutGroup.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_ui_GameInput.__meta__ = { fields : { addEventListener : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.__meta__ = { statics : { BREAK : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, NUMLOCK : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
openfl_ui_Mouse.supportsCursor = true;
openfl_ui_Mouse.supportsNativeCursor = true;
openfl_ui_Mouse.__cursor = "auto";
openfl_ui_MouseCursor.ARROW = "arrow";
openfl_ui_MouseCursor.AUTO = "auto";
openfl_ui_MouseCursor.BUTTON = "button";
openfl_ui_MouseCursor.HAND = "hand";
openfl_ui_MouseCursor.IBEAM = "ibeam";
openfl_ui_MouseCursor.__CROSSHAIR = "crosshair";
openfl_ui_MouseCursor.__CUSTOM = "custom";
openfl_ui_MouseCursor.__MOVE = "move";
openfl_ui_MouseCursor.__RESIZE_NESW = "resize_nesw";
openfl_ui_MouseCursor.__RESIZE_NS = "resize_ns";
openfl_ui_MouseCursor.__RESIZE_NWSE = "resize_nwse";
openfl_ui_MouseCursor.__RESIZE_WE = "resize_we";
openfl_ui_MouseCursor.__WAIT = "wait";
openfl_ui_MouseCursor.__WAIT_ARROW = "waitarrow";
openfl_utils_AGALMiniAssembler.__meta__ = { obj : { SuppressWarnings : [["checkstyle:ConstantName","checkstyle:FieldDocComment"]]}};
openfl_utils_AGALMiniAssembler.OPMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.REGMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.SAMPLEMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.MAX_NESTING = 4;
openfl_utils_AGALMiniAssembler.MAX_OPCODES = 4096;
openfl_utils_AGALMiniAssembler.FRAGMENT = "fragment";
openfl_utils_AGALMiniAssembler.VERTEX = "vertex";
openfl_utils_AGALMiniAssembler.SAMPLER_TYPE_SHIFT = 8;
openfl_utils_AGALMiniAssembler.SAMPLER_DIM_SHIFT = 12;
openfl_utils_AGALMiniAssembler.SAMPLER_SPECIAL_SHIFT = 16;
openfl_utils_AGALMiniAssembler.SAMPLER_REPEAT_SHIFT = 20;
openfl_utils_AGALMiniAssembler.SAMPLER_MIPMAP_SHIFT = 24;
openfl_utils_AGALMiniAssembler.SAMPLER_FILTER_SHIFT = 28;
openfl_utils_AGALMiniAssembler.REG_WRITE = 1;
openfl_utils_AGALMiniAssembler.REG_READ = 2;
openfl_utils_AGALMiniAssembler.REG_FRAG = 32;
openfl_utils_AGALMiniAssembler.REG_VERT = 64;
openfl_utils_AGALMiniAssembler.OP_SCALAR = 1;
openfl_utils_AGALMiniAssembler.OP_SPECIAL_TEX = 8;
openfl_utils_AGALMiniAssembler.OP_SPECIAL_MATRIX = 16;
openfl_utils_AGALMiniAssembler.OP_FRAG_ONLY = 32;
openfl_utils_AGALMiniAssembler.OP_VERT_ONLY = 64;
openfl_utils_AGALMiniAssembler.OP_NO_DEST = 128;
openfl_utils_AGALMiniAssembler.OP_VERSION2 = 256;
openfl_utils_AGALMiniAssembler.OP_INCNEST = 512;
openfl_utils_AGALMiniAssembler.OP_DECNEST = 1024;
openfl_utils_AGALMiniAssembler.MOV = "mov";
openfl_utils_AGALMiniAssembler.ADD = "add";
openfl_utils_AGALMiniAssembler.SUB = "sub";
openfl_utils_AGALMiniAssembler.MUL = "mul";
openfl_utils_AGALMiniAssembler.DIV = "div";
openfl_utils_AGALMiniAssembler.RCP = "rcp";
openfl_utils_AGALMiniAssembler.MIN = "min";
openfl_utils_AGALMiniAssembler.MAX = "max";
openfl_utils_AGALMiniAssembler.FRC = "frc";
openfl_utils_AGALMiniAssembler.SQT = "sqt";
openfl_utils_AGALMiniAssembler.RSQ = "rsq";
openfl_utils_AGALMiniAssembler.POW = "pow";
openfl_utils_AGALMiniAssembler.LOG = "log";
openfl_utils_AGALMiniAssembler.EXP = "exp";
openfl_utils_AGALMiniAssembler.NRM = "nrm";
openfl_utils_AGALMiniAssembler.SIN = "sin";
openfl_utils_AGALMiniAssembler.COS = "cos";
openfl_utils_AGALMiniAssembler.CRS = "crs";
openfl_utils_AGALMiniAssembler.DP3 = "dp3";
openfl_utils_AGALMiniAssembler.DP4 = "dp4";
openfl_utils_AGALMiniAssembler.ABS = "abs";
openfl_utils_AGALMiniAssembler.NEG = "neg";
openfl_utils_AGALMiniAssembler.SAT = "sat";
openfl_utils_AGALMiniAssembler.M33 = "m33";
openfl_utils_AGALMiniAssembler.M44 = "m44";
openfl_utils_AGALMiniAssembler.M34 = "m34";
openfl_utils_AGALMiniAssembler.DDX = "ddx";
openfl_utils_AGALMiniAssembler.DDY = "ddy";
openfl_utils_AGALMiniAssembler.IFE = "ife";
openfl_utils_AGALMiniAssembler.INE = "ine";
openfl_utils_AGALMiniAssembler.IFG = "ifg";
openfl_utils_AGALMiniAssembler.IFL = "ifl";
openfl_utils_AGALMiniAssembler.IEG = "ieg";
openfl_utils_AGALMiniAssembler.IEL = "iel";
openfl_utils_AGALMiniAssembler.ELS = "els";
openfl_utils_AGALMiniAssembler.EIF = "eif";
openfl_utils_AGALMiniAssembler.TED = "ted";
openfl_utils_AGALMiniAssembler.KIL = "kil";
openfl_utils_AGALMiniAssembler.TEX = "tex";
openfl_utils_AGALMiniAssembler.SGE = "sge";
openfl_utils_AGALMiniAssembler.SLT = "slt";
openfl_utils_AGALMiniAssembler.SGN = "sgn";
openfl_utils_AGALMiniAssembler.SEQ = "seq";
openfl_utils_AGALMiniAssembler.SNE = "sne";
openfl_utils_AGALMiniAssembler.VA = "va";
openfl_utils_AGALMiniAssembler.VC = "vc";
openfl_utils_AGALMiniAssembler.VT = "vt";
openfl_utils_AGALMiniAssembler.VO = "vo";
openfl_utils_AGALMiniAssembler.VI = "vi";
openfl_utils_AGALMiniAssembler.FC = "fc";
openfl_utils_AGALMiniAssembler.FT = "ft";
openfl_utils_AGALMiniAssembler.FS = "fs";
openfl_utils_AGALMiniAssembler.FO = "fo";
openfl_utils_AGALMiniAssembler.FD = "fd";
openfl_utils_AGALMiniAssembler.IID = "iid";
openfl_utils_AGALMiniAssembler.D2 = "2d";
openfl_utils_AGALMiniAssembler.D3 = "3d";
openfl_utils_AGALMiniAssembler.CUBE = "cube";
openfl_utils_AGALMiniAssembler.MIPNEAREST = "mipnearest";
openfl_utils_AGALMiniAssembler.MIPLINEAR = "miplinear";
openfl_utils_AGALMiniAssembler.MIPNONE = "mipnone";
openfl_utils_AGALMiniAssembler.NOMIP = "nomip";
openfl_utils_AGALMiniAssembler.NEAREST = "nearest";
openfl_utils_AGALMiniAssembler.LINEAR = "linear";
openfl_utils_AGALMiniAssembler.ANISOTROPIC2X = "anisotropic2x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC4X = "anisotropic4x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC8X = "anisotropic8x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC16X = "anisotropic16x";
openfl_utils_AGALMiniAssembler.CENTROID = "centroid";
openfl_utils_AGALMiniAssembler.SINGLE = "single";
openfl_utils_AGALMiniAssembler.IGNORESAMPLER = "ignoresampler";
openfl_utils_AGALMiniAssembler.REPEAT = "repeat";
openfl_utils_AGALMiniAssembler.WRAP = "wrap";
openfl_utils_AGALMiniAssembler.CLAMP = "clamp";
openfl_utils_AGALMiniAssembler.REPEAT_U_CLAMP_V = "repeat_u_clamp_v";
openfl_utils_AGALMiniAssembler.CLAMP_U_REPEAT_V = "clamp_u_repeat_v";
openfl_utils_AGALMiniAssembler.RGBA = "rgba";
openfl_utils_AGALMiniAssembler.COMPRESSED = "compressed";
openfl_utils_AGALMiniAssembler.COMPRESSEDALPHA = "compressedalpha";
openfl_utils_AGALMiniAssembler.DXT1 = "dxt1";
openfl_utils_AGALMiniAssembler.DXT5 = "dxt5";
openfl_utils_AGALMiniAssembler.VIDEO = "video";
openfl_utils_AGALMiniAssembler.initialized = false;
openfl_utils__$AGALMiniAssembler_OpCode.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$AGALMiniAssembler_Register.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$AGALMiniAssembler_Sampler.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils_Assets.cache = new openfl_utils_AssetCache();
openfl_utils_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_utils_Assets.libraryBindings = new haxe_ds_StringMap();
openfl_utils_ByteArray.__bytePointer = new lime_utils_BytePointerData(null,0);
openfl_utils_ByteArrayData.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils_ByteArrayData.defaultObjectEncoding = 10;
openfl_utils_CompressionAlgorithm.DEFLATE = 0;
openfl_utils_CompressionAlgorithm.LZMA = 1;
openfl_utils_CompressionAlgorithm.ZLIB = 2;
openfl_utils__$Dictionary_ClassMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$Dictionary_FloatMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$Dictionary_UtilsObjectMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils_Endian.BIG_ENDIAN = 0;
openfl_utils_Endian.LITTLE_ENDIAN = 1;
openfl_utils_Object.__meta__ = { statics : { iterator : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, __get : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, __set : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, __getArray : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, __setArray : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
haxe_lang_Iterator.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
haxe_lang_Iterable.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$internal_Lib.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { notImplemented : { SuppressWarnings : ["checkstyle:NullableParameter"]}}};
openfl_utils__$internal_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl_utils__$internal_TouchData.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { touch : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_utils__$internal_TouchData.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_utils__$internal_TouchData();
},function(data) {
	data.reset();
});
texter_general_Emoji.emojiFromString = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h[":open_mailbox_with_raised_flag:"] = "📬";
	_g.h[":pineapple:"] = "🍍";
	_g.h[":curling_stone:"] = "🥌";
	_g.h[":eleven_o’clock:"] = "🕚";
	_g.h[":juggling_person:"] = "🤹";
	_g.h[":mermaid_tone4:"] = "🧜🏾‍♀️";
	_g.h[":person_frowning_tone3:"] = "🙍🏽";
	_g.h[":faroe_islands:"] = "🇫🇴";
	_g.h[":flag_South_Korea:"] = "🇰🇷";
	_g.h[":flag_wf:"] = "🇼🇫";
	_g.h[":woman_bouncing_ball_tone4:"] = "⛹🏾‍♀️";
	_g.h[":zombie:"] = "🧟‍♂️";
	_g.h[":flag_ps:"] = "🇵🇸";
	_g.h[":mate:"] = "🧉";
	_g.h[":motorway:"] = "🛣️";
	_g.h[":T-Rex:"] = "🦖";
	_g.h[":flag-bz:"] = "🇧🇿";
	_g.h[":flag-va:"] = "🇻🇦";
	_g.h[":flag_Hungary:"] = "🇭🇺";
	_g.h[":madagascar:"] = "🇲🇬";
	_g.h[":man_office_worker_tone4:"] = "👨🏾‍💼";
	_g.h[":writing_hand_tone2:"] = "✍🏼";
	_g.h[":dress:"] = "👗";
	_g.h[":flag-ae:"] = "🇦🇪";
	_g.h[":bride_with_veil_tone5:"] = "👰🏿";
	_g.h[":man_singer_tone5:"] = "👨🏿‍🎤";
	_g.h[":milky_way:"] = "🌌";
	_g.h[":philippines:"] = "🇵🇭";
	_g.h[":woman_in_steamy_room:"] = "🧖‍♀️";
	_g.h[":bird:"] = "🐦";
	_g.h[":man_walking_tone2:"] = "🚶🏼‍♂️";
	_g.h[":shaved_ice:"] = "🍧";
	_g.h[":smirking_face:"] = "😏";
	_g.h[":videocassette:"] = "📼";
	_g.h[":woman_walking_tone2:"] = "🚶🏼‍♀️";
	_g.h[":family_man_man_girl_boy:"] = "👨‍👨‍👧‍👦";
	_g.h[":lemon:"] = "🍋";
	_g.h[":man_tone3:"] = "👨🏽";
	_g.h[":bullettrain_front:"] = "🚅";
	_g.h[":man_mage_tone2:"] = "🧙🏼‍♂️";
	_g.h[":man_raising_hand_tone2:"] = "🙋🏼‍♂️";
	_g.h[":woman_wearing_turban_tone2:"] = "👳🏼‍♀️";
	_g.h[":ballot_box_with_check:"] = "☑️";
	_g.h[":flag-na:"] = "🇳🇦";
	_g.h[":woman_health_worker:"] = "👩‍⚕️";
	_g.h[":flag-bq:"] = "🇧🇶";
	_g.h[":helmet_with_cross:"] = "⛑";
	_g.h[":man_gesturing_NO:"] = "🙅‍♂️";
	_g.h[":orange_square:"] = "🟧";
	_g.h[":pancakes:"] = "🥞";
	_g.h[":bucket:"] = "🪣";
	_g.h[":garlic:"] = "🧄";
	_g.h[":mouth:"] = "👄";
	_g.h[":tickets:"] = "🎟";
	_g.h[":locked_with_pen:"] = "🔏";
	_g.h[":maple_leaf:"] = "🍁";
	_g.h[":ogre:"] = "👹";
	_g.h[":three-thirty:"] = "🕞";
	_g.h[":cartwheeling:"] = "🤸";
	_g.h[":flag_Kazakhstan:"] = "🇰🇿";
	_g.h[":growing_heart:"] = "💗";
	_g.h[":iraq:"] = "🇮🇶";
	_g.h[":party_popper:"] = "🎉";
	_g.h[":woman_playing_handball_tone5:"] = "🤾🏿‍♀️";
	_g.h[":dancer_tone4:"] = "💃🏾";
	_g.h[":flag-ss:"] = "🇸🇸";
	_g.h[":guyana:"] = "🇬🇾";
	_g.h[":heavy_minus_sign:"] = "➖";
	_g.h[":horse_face:"] = "🐴";
	_g.h[":motorized_wheelchair:"] = "🦼";
	_g.h[":sponge:"] = "🧽";
	_g.h[":woman_wearing_turban_tone4:"] = "👳🏾‍♀️";
	_g.h[":blond_haired_person_tone4:"] = "👱🏾";
	_g.h[":burrito:"] = "🌯";
	_g.h[":clap_tone1:"] = "👏🏻";
	_g.h[":fingers_crossed_tone5:"] = "🤞🏿";
	_g.h[":flag-ls:"] = "🇱🇸";
	_g.h[":left_facing_fist_tone1:"] = "🤛🏻";
	_g.h[":sudan:"] = "🇸🇩";
	_g.h[":lightning:"] = "🌩️";
	_g.h[":man_in_business_suit_levitating_tone5:"] = "🕴🏿";
	_g.h[":swimming_man:"] = "🏊‍♂️";
	_g.h[":house:"] = "🏠";
	_g.h[":nose:"] = "👃";
	_g.h[":pine_decoration:"] = "🎍";
	_g.h[":running_shoe:"] = "👟";
	_g.h[":umbrella_with_rain_drops:"] = "☔";
	_g.h[":woman_singer_tone1:"] = "👩🏻‍🎤";
	_g.h[":third_place_medal:"] = "🥉";
	_g.h[":briefs:"] = "🩲";
	_g.h[":copyright:"] = "©️";
	_g.h[":flag-fk:"] = "🇫🇰";
	_g.h[":mountain:"] = "⛰️";
	_g.h[":haircut:"] = "💇‍♀️";
	_g.h[":man_surfing:"] = "🏄‍♂️";
	_g.h[":input_latin_letters:"] = "🔤";
	_g.h[":man_astronaut_tone2:"] = "👨🏼‍🚀";
	_g.h[":man_police_officer_tone1:"] = "👮🏻‍♂️";
	_g.h[":on:"] = "🔛";
	_g.h[":point_down_tone3:"] = "👇🏽";
	_g.h[":airplane_arriving:"] = "🛬";
	_g.h[":flag-at:"] = "🇦🇹";
	_g.h[":flag_gm:"] = "🇬🇲";
	_g.h[":flag_hr:"] = "🇭🇷";
	_g.h[":lying_face:"] = "🤥";
	_g.h[":man_running_tone1:"] = "🏃🏻‍♂️";
	_g.h[":u6708:"] = "🈷️";
	_g.h[":woman_rowing_boat_tone5:"] = "🚣🏿‍♀️";
	_g.h[":women_wrestling:"] = "🤼‍♀️";
	_g.h[":flag_Scotland:"] = "🏴󠁧󠁢󠁳󠁣󠁴󠁿";
	_g.h[":flag_ki:"] = "🇰🇮";
	_g.h[":guard_tone5:"] = "💂🏿";
	_g.h[":station:"] = "🚉";
	_g.h[":woman-cartwheeling:"] = "🤸‍♀️";
	_g.h[":woman_playing_handball_tone2:"] = "🤾🏼‍♀️";
	_g.h[":ATM_sign:"] = "🏧";
	_g.h[":flushed:"] = "😳";
	_g.h[":blond-haired_woman_tone3:"] = "👱🏽‍♀️";
	_g.h[":diving_mask:"] = "🤿";
	_g.h[":hatching_chick:"] = "🐣";
	_g.h[":man_gesturing_ok_tone5:"] = "🙆🏿‍♂️";
	_g.h[":man_office_worker:"] = "👨‍💼";
	_g.h[":no_bell:"] = "🔕";
	_g.h[":raised_hand_tone2:"] = "✋🏼";
	_g.h[":straight_ruler:"] = "📏";
	_g.h[":surfing_man:"] = "🏄‍♂️";
	_g.h[":flag_md:"] = "🇲🇩";
	_g.h[":joystick:"] = "🕹️";
	_g.h[":man_bouncing_ball_tone3:"] = "⛹🏽‍♂️";
	_g.h[":no_mouth:"] = "😶";
	_g.h[":man_getting_haircut:"] = "💇‍♂️";
	_g.h[":point_right_tone4:"] = "👉🏾";
	_g.h[":sled:"] = "🛷";
	_g.h[":vampire_woman:"] = "🧛‍♀️";
	_g.h[":watermelon:"] = "🍉";
	_g.h[":Japanese_castle:"] = "🏯";
	_g.h[":cloud_tornado:"] = "🌪";
	_g.h[":flag_Sierra_Leone:"] = "🇸🇱";
	_g.h[":hotsprings:"] = "♨️";
	_g.h[":ice_hockey_stick_and_puck:"] = "🏒";
	_g.h[":man_surfing_tone2:"] = "🏄🏼‍♂️";
	_g.h[":ng_woman:"] = "🙅‍♀️";
	_g.h[":person_golfing_tone3:"] = "🏌🏽";
	_g.h[":raised_back_of_hand_tone4:"] = "🤚🏾";
	_g.h[":adult_tone2:"] = "🧑🏼";
	_g.h[":high-speed_train:"] = "🚄";
	_g.h[":kissing_face_with_smiling_eyes:"] = "😙";
	_g.h[":man_frowning_tone1:"] = "🙍🏻‍♂️";
	_g.h[":spider_web:"] = "🕸️";
	_g.h[":cook:"] = "🧑‍🍳";
	_g.h[":hankey:"] = "💩";
	_g.h[":performing_arts:"] = "🎭";
	_g.h[":prince_tone4:"] = "🤴🏾";
	_g.h[":tea:"] = "🍵";
	_g.h[":raised_fist:"] = "✊";
	_g.h[":vietnam:"] = "🇻🇳";
	_g.h[":cat_with_tears_of_joy:"] = "😹";
	_g.h[":es:"] = "🇪🇸";
	_g.h[":flag_Bermuda:"] = "🇧🇲";
	_g.h[":flag_Oman:"] = "🇴🇲";
	_g.h[":morocco:"] = "🇲🇦";
	_g.h[":mount_fuji:"] = "🗻";
	_g.h[":baguette_bread:"] = "🥖";
	_g.h[":flag-pn:"] = "🇵🇳";
	_g.h[":gemini:"] = "♊";
	_g.h[":man_bowing_tone1:"] = "🙇🏻‍♂️";
	_g.h[":u7121:"] = "🈚";
	_g.h[":man_walking_tone1:"] = "🚶🏻‍♂️";
	_g.h[":motor_scooter:"] = "🛵";
	_g.h[":pilot:"] = "🧑‍✈️";
	_g.h[":purple_circle:"] = "🟣";
	_g.h[":woman_wearing_turban:"] = "👳‍♀️";
	_g.h[":flag-ci:"] = "🇨🇮";
	_g.h[":flag-co:"] = "🇨🇴";
	_g.h[":hippopotamus:"] = "🦛";
	_g.h[":man_swimming_tone1:"] = "🏊🏻‍♂️";
	_g.h[":supervillain_woman:"] = "🦹‍♀️";
	_g.h[":cigarette:"] = "🚬";
	_g.h[":flag-br:"] = "🇧🇷";
	_g.h[":princess_tone4:"] = "👸🏾";
	_g.h[":vulcan_tone5:"] = "🖖🏿";
	_g.h[":waning_gibbous_moon:"] = "🌖";
	_g.h[":down_arrow:"] = "⬇";
	_g.h[":flag_Somalia:"] = "🇸🇴";
	_g.h[":guardswoman:"] = "💂‍♀️";
	_g.h[":metal_tone3:"] = "🤘🏽";
	_g.h[":person_facepalming_tone4:"] = "🤦🏾";
	_g.h[":bagel:"] = "🥯";
	_g.h[":cake:"] = "🍰";
	_g.h[":flag_gn:"] = "🇬🇳";
	_g.h[":flag_ss:"] = "🇸🇸";
	_g.h[":left_facing_fist_tone4:"] = "🤛🏾";
	_g.h[":man-cartwheeling:"] = "🤸‍♂️";
	_g.h[":santa_tone1:"] = "🎅🏻";
	_g.h[":small_red_triangle:"] = "🔺";
	_g.h[":down-left_arrow:"] = "↙";
	_g.h[":flag_Guadeloupe:"] = "🇬🇵";
	_g.h[":kiwi_fruit:"] = "🥝";
	_g.h[":merman_tone3:"] = "🧜🏽‍♂️";
	_g.h[":older_man_tone4:"] = "👴🏾";
	_g.h[":partly_sunny:"] = "⛅";
	_g.h[":flag_Yemen:"] = "🇾🇪";
	_g.h[":man_mountain_biking_tone1:"] = "🚵🏻‍♂️";
	_g.h[":man_raising_hand_tone1:"] = "🙋🏻‍♂️";
	_g.h[":notes:"] = "🎶";
	_g.h[":yen:"] = "💴";
	_g.h[":cheese_wedge:"] = "🧀";
	_g.h[":goblin:"] = "👺";
	_g.h[":Scorpio:"] = "♏";
	_g.h[":blond-haired_man_tone2:"] = "👱🏼‍♂️";
	_g.h[":family_woman_girl:"] = "👩‍👧";
	_g.h[":female-scientist:"] = "👩‍🔬";
	_g.h[":flag_Curaçao:"] = "🇨🇼";
	_g.h[":policeman:"] = "👮‍♂️";
	_g.h[":tooth:"] = "🦷";
	_g.h[":flag_Togo:"] = "🇹🇬";
	_g.h[":flag_bd:"] = "🇧🇩";
	_g.h[":race_car:"] = "🏎";
	_g.h[":woman_tone1:"] = "👩🏻";
	_g.h[":clock6:"] = "🕕";
	_g.h[":drum:"] = "🥁";
	_g.h[":kiss_mm:"] = "👨‍❤️‍💋‍👨";
	_g.h[":squid:"] = "🦑";
	_g.h[":woman_student_tone5:"] = "👩🏿‍🎓";
	_g.h[":zambia:"] = "🇿🇲";
	_g.h[":eleven-thirty:"] = "🕦";
	_g.h[":elf_tone4:"] = "🧝🏾";
	_g.h[":flag_Isle_of_Man:"] = "🇮🇲";
	_g.h[":flag_Sweden:"] = "🇸🇪";
	_g.h[":haircut_man:"] = "💇‍♂️";
	_g.h[":man_factory_worker_tone5:"] = "👨🏿‍🏭";
	_g.h[":men-with-bunny-ears-partying:"] = "👯‍♂️";
	_g.h[":thumbsdown_tone3:"] = "👎🏽";
	_g.h[":thumbsup:"] = "👍";
	_g.h[":wave_tone3:"] = "👋🏽";
	_g.h[":woman-running:"] = "🏃‍♀️";
	_g.h[":flag-hm:"] = "🇭🇲";
	_g.h[":dash:"] = "💨";
	_g.h[":airplane_arrival:"] = "🛬";
	_g.h[":flag_Samoa:"] = "🇼🇸";
	_g.h[":man-shrugging:"] = "🤷‍♂️";
	_g.h[":medal_military:"] = "🎖️";
	_g.h[":pray_tone5:"] = "🙏🏿";
	_g.h[":flag-lr:"] = "🇱🇷";
	_g.h[":ireland:"] = "🇮🇪";
	_g.h[":clock230:"] = "🕝";
	_g.h[":man_gesturing_no:"] = "🙅‍♂️";
	_g.h[":sunset:"] = "🌇";
	_g.h[":woman_pouting:"] = "🙎‍♀️";
	_g.h[":Japanese_free_of_charge_button:"] = "🈚";
	_g.h[":first_place_medal:"] = "🥇";
	_g.h[":u5408:"] = "🈴";
	_g.h[":woman_mechanic:"] = "👩‍🔧";
	_g.h[":woman_running_tone4:"] = "🏃🏾‍♀️";
	_g.h[":flag_il:"] = "🇮🇱";
	_g.h[":person_wearing_turban_tone1:"] = "👳🏻";
	_g.h[":family_mmbb:"] = "👨‍👨‍👦‍👦";
	_g.h[":violin:"] = "🎻";
	_g.h[":Japanese_here_button:"] = "🈁";
	_g.h[":flag_ba:"] = "🇧🇦";
	_g.h[":anger_right:"] = "🗯";
	_g.h[":clap_tone3:"] = "👏🏽";
	_g.h[":flag_tj:"] = "🇹🇯";
	_g.h[":full_moon:"] = "🌕";
	_g.h[":girl:"] = "👧";
	_g.h[":hearts:"] = "♥️";
	_g.h[":open_book:"] = "📖";
	_g.h[":peacock:"] = "🦚";
	_g.h[":basketball_man:"] = "⛹️‍♂️";
	_g.h[":flag_United_Arab_Emirates:"] = "🇦🇪";
	_g.h[":flag_gw:"] = "🇬🇼";
	_g.h[":six:"] = "6️⃣";
	_g.h[":carousel_horse:"] = "🎠";
	_g.h[":family_man_girl_girl:"] = "👨‍👧‍👧";
	_g.h[":flag_St._Barthélemy:"] = "🇧🇱";
	_g.h[":man-frowning:"] = "🙍‍♂️";
	_g.h[":orangutan:"] = "🦧";
	_g.h[":woman_in_steamy_room_tone5:"] = "🧖🏿‍♀️";
	_g.h[":flag_Senegal:"] = "🇸🇳";
	_g.h[":rhinoceros:"] = "🦏";
	_g.h[":tropical_drink:"] = "🍹";
	_g.h[":detective_tone3:"] = "🕵🏽";
	_g.h[":point_right_tone5:"] = "👉🏿";
	_g.h[":female-pilot:"] = "👩‍✈️";
	_g.h[":homes:"] = "🏘";
	_g.h[":olive:"] = "🫒";
	_g.h[":boy_tone4:"] = "👦🏾";
	_g.h[":cloud_with_lightning_and_rain:"] = "⛈";
	_g.h[":clock10:"] = "🕙";
	_g.h[":child:"] = "🧒";
	_g.h[":flag-wales:"] = "🏴󠁧󠁢󠁷󠁬󠁳󠁿";
	_g.h[":flag_Philippines:"] = "🇵🇭";
	_g.h[":point_down_tone5:"] = "👇🏿";
	_g.h[":woman_health_worker_tone2:"] = "👩🏼‍⚕️";
	_g.h[":cooking:"] = "🍳";
	_g.h[":man-girl-girl:"] = "👨‍👧‍👧";
	_g.h[":pound:"] = "💷";
	_g.h[":probing_cane:"] = "🦯";
	_g.h[":raised_hands:"] = "🙌";
	_g.h[":woman_bouncing_ball_tone1:"] = "⛹🏻‍♀️";
	_g.h[":control_knobs:"] = "🎛️";
	_g.h[":family_woman_boy:"] = "👩‍👦";
	_g.h[":flag_Central_African_Republic:"] = "🇨🇫";
	_g.h[":flag_al:"] = "🇦🇱";
	_g.h[":knife:"] = "🔪";
	_g.h[":man_getting_haircut_tone5:"] = "💇🏿‍♂️";
	_g.h[":nauru:"] = "🇳🇷";
	_g.h[":pig:"] = "🐷";
	_g.h[":police_car:"] = "🚓";
	_g.h[":woman_beard:"] = "🧔‍♀️";
	_g.h[":bosnia_herzegovina:"] = "🇧🇦";
	_g.h[":man-woman-girl:"] = "👨‍👩‍👧";
	_g.h[":woman-gesturing-no:"] = "🙅‍♀️";
	_g.h[":arrow_double_down:"] = "⏬";
	_g.h[":shrimp:"] = "🦐";
	_g.h[":tear-off_calendar:"] = "📆";
	_g.h[":tunisia:"] = "🇹🇳";
	_g.h[":woman_cartwheeling_tone5:"] = "🤸🏿‍♀️";
	_g.h[":woman_playing_water_polo_tone2:"] = "🤽🏼‍♀️";
	_g.h[":dromedary_camel:"] = "🐪";
	_g.h[":factory:"] = "🏭";
	_g.h[":wind_face:"] = "🌬";
	_g.h[":woman_construction_worker_tone5:"] = "👷🏿‍♀️";
	_g.h[":woman_scientist:"] = "👩‍🔬";
	_g.h[":first_quarter_moon:"] = "🌓";
	_g.h[":flag_de:"] = "🇩🇪";
	_g.h[":mage_tone4:"] = "🧙🏾";
	_g.h[":open_hands_tone1:"] = "👐🏻";
	_g.h[":south_georgia_south_sandwich_islands:"] = "🇬🇸";
	_g.h[":telescope:"] = "🔭";
	_g.h[":woman_elf_tone1:"] = "🧝🏻‍♀️";
	_g.h[":face_with_tears_of_joy:"] = "😂";
	_g.h[":flag-gi:"] = "🇬🇮";
	_g.h[":flag_Cameroon:"] = "🇨🇲";
	_g.h[":flag_Maldives:"] = "🇲🇻";
	_g.h[":flag_sd:"] = "🇸🇩";
	_g.h[":point_left:"] = "👈";
	_g.h[":zero:"] = "0️⃣";
	_g.h[":cameroon:"] = "🇨🇲";
	_g.h[":flag-ro:"] = "🇷🇴";
	_g.h[":flag_mr:"] = "🇲🇷";
	_g.h[":last_quarter_moon_with_face:"] = "🌜";
	_g.h[":man-pouting:"] = "🙎‍♂️";
	_g.h[":st_lucia:"] = "🇱🇨";
	_g.h[":woman_shrugging:"] = "🤷‍♀️";
	_g.h[":double_vertical_bar:"] = "⏸️";
	_g.h[":flag-mw:"] = "🇲🇼";
	_g.h[":keycap_0:"] = "0️⃣";
	_g.h[":older_man:"] = "👴";
	_g.h[":pencil2:"] = "✏️";
	_g.h[":bullseye:"] = "🎯";
	_g.h[":elf_tone2:"] = "🧝🏼";
	_g.h[":man_guard_tone3:"] = "💂🏽‍♂️";
	_g.h[":raised_back_of_hand:"] = "🤚";
	_g.h[":sa:"] = "🈂️";
	_g.h[":woman_bowing_tone4:"] = "🙇🏾‍♀️";
	_g.h[":ideograph_advantage:"] = "🉐";
	_g.h[":popcorn:"] = "🍿";
	_g.h[":transgender_symbol:"] = "⚧️";
	_g.h[":astronaut:"] = "🧑‍🚀";
	_g.h[":flag-dz:"] = "🇩🇿";
	_g.h[":flag_Venezuela:"] = "🇻🇪";
	_g.h[":heart_decoration:"] = "💟";
	_g.h[":man_in_steamy_room_tone3:"] = "🧖🏽‍♂️";
	_g.h[":mending_heart:"] = "❤️‍🩹";
	_g.h[":robot:"] = "🤖";
	_g.h[":a:"] = "🅰️";
	_g.h[":fairy:"] = "🧚‍♀️";
	_g.h[":glasses:"] = "👓";
	_g.h[":ice_hockey:"] = "🏒";
	_g.h[":locked:"] = "🔒";
	_g.h[":man-heart-man:"] = "👨‍❤️‍👨";
	_g.h[":white_haired_man:"] = "👨‍🦳";
	_g.h[":black_right_pointing_triangle_with_double_vertical_bar:"] = "⏯️";
	_g.h[":flag_Indonesia:"] = "🇮🇩";
	_g.h[":flag_kz:"] = "🇰🇿";
	_g.h[":man_in_steamy_room:"] = "🧖‍♂️";
	_g.h[":microphone:"] = "🎤";
	_g.h[":person_bouncing_ball_tone2:"] = "⛹🏼";
	_g.h[":rage:"] = "😡";
	_g.h[":disappointed_relieved:"] = "😥";
	_g.h[":eggplant:"] = "🍆";
	_g.h[":flag-gu:"] = "🇬🇺";
	_g.h[":flag_dz:"] = "🇩🇿";
	_g.h[":person_with_probing_cane:"] = "🧑‍🦯";
	_g.h[":shinto_shrine:"] = "⛩️";
	_g.h[":wilted_rose:"] = "🥀";
	_g.h[":busstop:"] = "🚏";
	_g.h[":fairy_tone4:"] = "🧚🏾";
	_g.h[":flag-by:"] = "🇧🇾";
	_g.h[":new_zealand:"] = "🇳🇿";
	_g.h[":Japanese_no_vacancy_button:"] = "🈵";
	_g.h[":cookie:"] = "🍪";
	_g.h[":flag-fo:"] = "🇫🇴";
	_g.h[":man_gesturing_no_tone2:"] = "🙅🏼‍♂️";
	_g.h[":people_with_bunny_ears_partying:"] = "👯";
	_g.h[":person_playing_handball_tone2:"] = "🤾🏼";
	_g.h[":pretzel:"] = "🥨";
	_g.h[":banjo:"] = "🪕";
	_g.h[":family_man_boy:"] = "👨‍👦";
	_g.h[":man_health_worker_tone4:"] = "👨🏾‍⚕️";
	_g.h[":new:"] = "🆕";
	_g.h[":person_tipping_hand_tone5:"] = "💁🏿";
	_g.h[":post_office:"] = "🏣";
	_g.h[":bride_with_veil_tone3:"] = "👰🏽";
	_g.h[":family_mwgg:"] = "👨‍👩‍👧‍👧";
	_g.h[":open_hands_tone2:"] = "👐🏼";
	_g.h[":point_up_2_tone4:"] = "👆🏾";
	_g.h[":blond-haired_man:"] = "👱‍♂️";
	_g.h[":flag_Montenegro:"] = "🇲🇪";
	_g.h[":flag_lk:"] = "🇱🇰";
	_g.h[":police_officer_tone4:"] = "👮🏾";
	_g.h[":woman_superhero:"] = "🦸‍♀️";
	_g.h[":lotus_position_man:"] = "🧘‍♂️";
	_g.h[":male_fairy:"] = "🧚‍♂️";
	_g.h[":man_office_worker_tone5:"] = "👨🏿‍💼";
	_g.h[":nine:"] = "9️⃣";
	_g.h[":biking_man:"] = "🚴‍♂️";
	_g.h[":bow_and_arrow:"] = "🏹";
	_g.h[":brown_circle:"] = "🟤";
	_g.h[":bulgaria:"] = "🇧🇬";
	_g.h[":man_elf_tone1:"] = "🧝🏻‍♂️";
	_g.h[":man_mountain_biking_tone5:"] = "🚵🏿‍♂️";
	_g.h[":woman_mage_tone2:"] = "🧙🏼‍♀️";
	_g.h[":cayman_islands:"] = "🇰🇾";
	_g.h[":curacao:"] = "🇨🇼";
	_g.h[":drop_of_blood:"] = "🩸";
	_g.h[":fast-forward_button:"] = "⏩";
	_g.h[":mage_woman:"] = "🧙‍♀️";
	_g.h[":man_walking_tone4:"] = "🚶🏾‍♂️";
	_g.h[":shell:"] = "🐚";
	_g.h[":woman-rowing-boat:"] = "🚣‍♀️";
	_g.h[":cuba:"] = "🇨🇺";
	_g.h[":andorra:"] = "🇦🇩";
	_g.h[":flag-re:"] = "🇷🇪";
	_g.h[":man_elf_tone2:"] = "🧝🏼‍♂️";
	_g.h[":mermaid_tone3:"] = "🧜🏽‍♀️";
	_g.h[":punch_tone2:"] = "👊🏼";
	_g.h[":basketball:"] = "🏀";
	_g.h[":crying_cat:"] = "😿";
	_g.h[":earth_asia:"] = "🌏";
	_g.h[":england:"] = "🏴󠁧󠁢󠁥󠁮󠁧󠁿";
	_g.h[":family_man_man_girl:"] = "👨‍👨‍👧";
	_g.h[":flag-ps:"] = "🇵🇸";
	_g.h[":flag_jp:"] = "🇯🇵";
	_g.h[":kneeling_person:"] = "🧎";
	_g.h[":flag-cr:"] = "🇨🇷";
	_g.h[":flag-fi:"] = "🇫🇮";
	_g.h[":flag_Nicaragua:"] = "🇳🇮";
	_g.h[":star2:"] = "🌟";
	_g.h[":wheelchair_symbol:"] = "♿";
	_g.h[":australia:"] = "🇦🇺";
	_g.h[":cloud_lightning:"] = "🌩";
	_g.h[":office:"] = "🏢";
	_g.h[":strawberry:"] = "🍓";
	_g.h[":tennis:"] = "🎾";
	_g.h[":woman_mage_tone1:"] = "🧙🏻‍♀️";
	_g.h[":person_doing_cartwheel_tone4:"] = "🤸🏾";
	_g.h[":person_rowing_boat_tone5:"] = "🚣🏿";
	_g.h[":pinching_hand:"] = "🤏";
	_g.h[":scorpion:"] = "🦂";
	_g.h[":snowflake:"] = "❄️";
	_g.h[":arrow_upper_right:"] = "↗️";
	_g.h[":fishing_pole_and_fish:"] = "🎣";
	_g.h[":older_adult_tone3:"] = "🧓🏽";
	_g.h[":woman_bowing_tone5:"] = "🙇🏿‍♀️";
	_g.h[":mailbox_closed:"] = "📪";
	_g.h[":person_biking_tone3:"] = "🚴🏽";
	_g.h[":person_gesturing_no_tone2:"] = "🙅🏼";
	_g.h[":film_projector:"] = "📽️";
	_g.h[":flag_Vanuatu:"] = "🇻🇺";
	_g.h[":large_blue_square:"] = "🟦";
	_g.h[":panda_face:"] = "🐼";
	_g.h[":person_raising_hand:"] = "🙋";
	_g.h[":flag_British_Virgin_Islands:"] = "🇻🇬";
	_g.h[":four-thirty:"] = "🕟";
	_g.h[":grinning_cat_with_smiling_eyes:"] = "😸";
	_g.h[":man_cook_tone1:"] = "👨🏻‍🍳";
	_g.h[":man_in_lotus_position_tone3:"] = "🧘🏽‍♂️";
	_g.h[":pensive:"] = "😔";
	_g.h[":woman_firefighter_tone2:"] = "👩🏼‍🚒";
	_g.h[":champagne:"] = "🍾";
	_g.h[":flag-sa:"] = "🇸🇦";
	_g.h[":libra:"] = "♎";
	_g.h[":swimmer:"] = "🏊‍♂️";
	_g.h[":woman:"] = "👩";
	_g.h[":woman_health_worker_tone5:"] = "👩🏿‍⚕️";
	_g.h[":eyeglasses:"] = "👓";
	_g.h[":flag-cp:"] = "🇨🇵";
	_g.h[":flag_Armenia:"] = "🇦🇲";
	_g.h[":thumbsdown_tone2:"] = "👎🏼";
	_g.h[":flag_Brunei:"] = "🇧🇳";
	_g.h[":man_artist_tone5:"] = "👨🏿‍🎨";
	_g.h[":playground_slide:"] = "🛝";
	_g.h[":de:"] = "🇩🇪";
	_g.h[":female-guard:"] = "💂‍♀️";
	_g.h[":gb:"] = "🇬🇧";
	_g.h[":nail_care:"] = "💅";
	_g.h[":punch_tone5:"] = "👊🏿";
	_g.h[":whale2:"] = "🐋";
	_g.h[":woman_rowing_boat:"] = "🚣‍♀️";
	_g.h[":woman_student_tone2:"] = "👩🏼‍🎓";
	_g.h[":bald_man:"] = "👨‍🦲";
	_g.h[":laptop:"] = "💻";
	_g.h[":sweat_drops:"] = "💦";
	_g.h[":artist:"] = "🧑‍🎨";
	_g.h[":french_polynesia:"] = "🇵🇫";
	_g.h[":person_golfing:"] = "🏌";
	_g.h[":star_of_David:"] = "✡";
	_g.h[":flag_Ceuta_&_Melilla:"] = "🇪🇦";
	_g.h[":thumbsdown_tone5:"] = "👎🏿";
	_g.h[":flag-sy:"] = "🇸🇾";
	_g.h[":woman_running_tone2:"] = "🏃🏼‍♀️";
	_g.h[":man_technologist_tone4:"] = "👨🏾‍💻";
	_g.h[":mirror_ball:"] = "🪩";
	_g.h[":postal_horn:"] = "📯";
	_g.h[":flag_gt:"] = "🇬🇹";
	_g.h[":new_moon_face:"] = "🌚";
	_g.h[":pick:"] = "⛏️";
	_g.h[":no_pedestrians:"] = "🚷";
	_g.h[":radio_button:"] = "🔘";
	_g.h[":raising_hand:"] = "🙋‍♀️";
	_g.h[":relaxed:"] = "☺️";
	_g.h[":sound:"] = "🔉";
	_g.h[":vampire_tone5:"] = "🧛🏿";
	_g.h[":flag-gy:"] = "🇬🇾";
	_g.h[":man_police_officer_tone2:"] = "👮🏼‍♂️";
	_g.h[":man_zombie:"] = "🧟‍♂️";
	_g.h[":tram_car:"] = "🚋";
	_g.h[":woman_biking_tone3:"] = "🚴🏽‍♀️";
	_g.h[":flag-ve:"] = "🇻🇪";
	_g.h[":flag_Anguilla:"] = "🇦🇮";
	_g.h[":gibraltar:"] = "🇬🇮";
	_g.h[":military_medal:"] = "🎖";
	_g.h[":person_tipping_hand_tone3:"] = "💁🏽";
	_g.h[":woman_shrugging_tone2:"] = "🤷🏼‍♀️";
	_g.h[":B_button_(blood_type):"] = "🅱";
	_g.h[":eight-pointed_star:"] = "✴";
	_g.h[":man_astronaut_tone4:"] = "👨🏾‍🚀";
	_g.h[":blue_book:"] = "📘";
	_g.h[":checkered_flag:"] = "🏁";
	_g.h[":cherries:"] = "🍒";
	_g.h[":female_sign:"] = "♀️";
	_g.h[":flag-tv:"] = "🇹🇻";
	_g.h[":flight_departure:"] = "🛫";
	_g.h[":moon_viewing_ceremony:"] = "🎑";
	_g.h[":woman_lifting_weights_tone3:"] = "🏋🏽‍♀️";
	_g.h[":woman_lifting_weights_tone5:"] = "🏋🏿‍♀️";
	_g.h[":breast_feeding_tone1:"] = "🤱🏻";
	_g.h[":coat:"] = "🧥";
	_g.h[":golfing_man:"] = "🏌️‍♂️";
	_g.h[":hand_with_index_finger_and_thumb_crossed:"] = "🫰";
	_g.h[":horizontal_traffic_light:"] = "🚥";
	_g.h[":woman_astronaut_tone1:"] = "👩🏻‍🚀";
	_g.h[":dominica:"] = "🇩🇲";
	_g.h[":flag-az:"] = "🇦🇿";
	_g.h[":heart_hands:"] = "🫶";
	_g.h[":muscle_tone2:"] = "💪🏼";
	_g.h[":flag_Réunion:"] = "🇷🇪";
	_g.h[":male-detective:"] = "🕵️‍♂️";
	_g.h[":man-swimming:"] = "🏊‍♂️";
	_g.h[":call_me_tone4:"] = "🤙🏾";
	_g.h[":cry:"] = "😢";
	_g.h[":desktop_computer:"] = "🖥️";
	_g.h[":flag_kw:"] = "🇰🇼";
	_g.h[":man-man-boy-boy:"] = "👨‍👨‍👦‍👦";
	_g.h[":woman_with_headscarf_tone2:"] = "🧕🏼";
	_g.h[":Japanese_not_free_of_charge_button:"] = "🈶";
	_g.h[":baby_tone4:"] = "👶🏾";
	_g.h[":lower_left_crayon:"] = "🖍️";
	_g.h[":male-doctor:"] = "👨‍⚕️";
	_g.h[":8ball:"] = "🎱";
	_g.h[":O_button_(blood_type):"] = "🅾";
	_g.h[":pen:"] = "🖊";
	_g.h[":flag_Slovakia:"] = "🇸🇰";
	_g.h[":flag_at:"] = "🇦🇹";
	_g.h[":house_with_garden:"] = "🏡";
	_g.h[":mantelpiece_clock:"] = "🕰️";
	_g.h[":woman-swimming:"] = "🏊‍♀️";
	_g.h[":cocos_islands:"] = "🇨🇨";
	_g.h[":flag-jm:"] = "🇯🇲";
	_g.h[":flag_ci:"] = "🇨🇮";
	_g.h[":left_speech_bubble:"] = "🗨️";
	_g.h[":person_playing_water_polo_tone4:"] = "🤽🏾";
	_g.h[":woman_juggling_tone4:"] = "🤹🏾‍♀️";
	_g.h[":butterfly:"] = "🦋";
	_g.h[":eight_o’clock:"] = "🕗";
	_g.h[":flag_dk:"] = "🇩🇰";
	_g.h[":venezuela:"] = "🇻🇪";
	_g.h[":camera:"] = "📷";
	_g.h[":chart_increasing:"] = "📈";
	_g.h[":man_gesturing_no_tone4:"] = "🙅🏾‍♂️";
	_g.h[":man_judge_tone1:"] = "👨🏻‍⚖️";
	_g.h[":person_beard:"] = "🧔";
	_g.h[":stars:"] = "🌠";
	_g.h[":white_large_square:"] = "⬜";
	_g.h[":flag_Uruguay:"] = "🇺🇾";
	_g.h[":man_fairy:"] = "🧚‍♂️";
	_g.h[":person_pouting_tone1:"] = "🙎🏻";
	_g.h[":weight_lifting:"] = "🏋️";
	_g.h[":woman_detective:"] = "🕵️‍♀️";
	_g.h[":bus:"] = "🚌";
	_g.h[":gift_heart:"] = "💝";
	_g.h[":kneeling_man:"] = "🧎‍♂️";
	_g.h[":person_biking_tone1:"] = "🚴🏻";
	_g.h[":flag-pg:"] = "🇵🇬";
	_g.h[":middle_finger_tone1:"] = "🖕🏻";
	_g.h[":person_facepalming_tone2:"] = "🤦🏼";
	_g.h[":fast_down_button:"] = "⏬";
	_g.h[":potted_plant:"] = "🪴";
	_g.h[":stopwatch:"] = "⏱️";
	_g.h[":woman_tone5:"] = "👩🏿";
	_g.h[":cut_of_meat:"] = "🥩";
	_g.h[":dividers:"] = "🗂";
	_g.h[":european_union:"] = "🇪🇺";
	_g.h[":flag_ee:"] = "🇪🇪";
	_g.h[":keycap_3:"] = "3️⃣";
	_g.h[":loudspeaker:"] = "📢";
	_g.h[":tulip:"] = "🌷";
	_g.h[":woman_student_tone1:"] = "👩🏻‍🎓";
	_g.h[":flag_Seychelles:"] = "🇸🇨";
	_g.h[":kiss_ww:"] = "👩‍❤️‍💋‍👩";
	_g.h[":man_tone4:"] = "👨🏾";
	_g.h[":older_adult_tone4:"] = "🧓🏾";
	_g.h[":sports_medal:"] = "🏅";
	_g.h[":steam_locomotive:"] = "🚂";
	_g.h[":water_wave:"] = "🌊";
	_g.h[":woman_surfing:"] = "🏄‍♀️";
	_g.h[":clock4:"] = "🕓";
	_g.h[":expressionless_face:"] = "😑";
	_g.h[":face_with_medical_mask:"] = "😷";
	_g.h[":headstone:"] = "🪦";
	_g.h[":keycap_#:"] = "#️⃣";
	_g.h[":large_orange_square:"] = "🟧";
	_g.h[":wrench:"] = "🔧";
	_g.h[":flag_South_Sudan:"] = "🇸🇸";
	_g.h[":mage_tone5:"] = "🧙🏿";
	_g.h[":radioactive:"] = "☢";
	_g.h[":thong_sandal:"] = "🩴";
	_g.h[":woman_cook_tone2:"] = "👩🏼‍🍳";
	_g.h[":dvd:"] = "📀";
	_g.h[":flag_gu:"] = "🇬🇺";
	_g.h[":israel:"] = "🇮🇱";
	_g.h[":man_with_chinese_cap_tone5:"] = "👲🏿";
	_g.h[":virgo:"] = "♍";
	_g.h[":woman_cartwheeling_tone2:"] = "🤸🏼‍♀️";
	_g.h[":flag-ml:"] = "🇲🇱";
	_g.h[":gorilla:"] = "🦍";
	_g.h[":green_book:"] = "📗";
	_g.h[":smiling_face_with_horns:"] = "😈";
	_g.h[":vulcan_salute:"] = "🖖";
	_g.h[":woman_fairy_tone3:"] = "🧚🏽‍♀️";
	_g.h[":worm:"] = "🪱";
	_g.h[":flag-bt:"] = "🇧🇹";
	_g.h[":flag_vc:"] = "🇻🇨";
	_g.h[":large_red_square:"] = "🟥";
	_g.h[":love_letter:"] = "💌";
	_g.h[":white_circle:"] = "⚪";
	_g.h[":bearded_person_tone4:"] = "🧔🏾";
	_g.h[":man_elf_tone3:"] = "🧝🏽‍♂️";
	_g.h[":flag-ac:"] = "🇦🇨";
	_g.h[":paw_prints:"] = "🐾";
	_g.h[":person_bouncing_ball_tone3:"] = "⛹🏽";
	_g.h[":woman_lifting_weights_tone2:"] = "🏋🏼‍♀️";
	_g.h[":woman_lifting_weights_tone4:"] = "🏋🏾‍♀️";
	_g.h[":flag_Andorra:"] = "🇦🇩";
	_g.h[":woman_bowing_tone3:"] = "🙇🏽‍♀️";
	_g.h[":1234:"] = "🔢";
	_g.h[":alien:"] = "👽";
	_g.h[":pensive_face:"] = "😔";
	_g.h[":family_woman_girl_boy:"] = "👩‍👧‍👦";
	_g.h[":man_dancing_tone4:"] = "🕺🏾";
	_g.h[":sloth:"] = "🦥";
	_g.h[":tajikistan:"] = "🇹🇯";
	_g.h[":tumbler_glass:"] = "🥃";
	_g.h[":blue_car:"] = "🚙";
	_g.h[":flag-np:"] = "🇳🇵";
	_g.h[":globe_with_meridians:"] = "🌐";
	_g.h[":grinning_squinting_face:"] = "😆";
	_g.h[":man_guard_tone1:"] = "💂🏻‍♂️";
	_g.h[":woman_construction_worker:"] = "👷‍♀️";
	_g.h[":bell_pepper:"] = "🫑";
	_g.h[":family_wwb:"] = "👩‍👩‍👦";
	_g.h[":flag-gn:"] = "🇬🇳";
	_g.h[":hourglass_done:"] = "⌛";
	_g.h[":seat:"] = "💺";
	_g.h[":star:"] = "⭐";
	_g.h[":boy_tone1:"] = "👦🏻";
	_g.h[":flag-tf:"] = "🇹🇫";
	_g.h[":person_fencing:"] = "🤺";
	_g.h[":shallow_pan_of_food:"] = "🥘";
	_g.h[":billed_cap:"] = "🧢";
	_g.h[":cambodia:"] = "🇰🇭";
	_g.h[":leaf_fluttering_in_wind:"] = "🍃";
	_g.h[":medical_symbol:"] = "⚕️";
	_g.h[":woman_singer_tone3:"] = "👩🏽‍🎤";
	_g.h[":flag_mv:"] = "🇲🇻";
	_g.h[":man_bowing_tone5:"] = "🙇🏿‍♂️";
	_g.h[":man_construction_worker_tone3:"] = "👷🏽‍♂️";
	_g.h[":standing_woman:"] = "🧍‍♀️";
	_g.h[":woman_elf_tone2:"] = "🧝🏼‍♀️";
	_g.h[":bento_box:"] = "🍱";
	_g.h[":canned_food:"] = "🥫";
	_g.h[":flag_Belgium:"] = "🇧🇪";
	_g.h[":woman_mage:"] = "🧙‍♀️";
	_g.h[":flag_ke:"] = "🇰🇪";
	_g.h[":malta:"] = "🇲🇹";
	_g.h[":moai:"] = "🗿";
	_g.h[":chess_pawn:"] = "♟️";
	_g.h[":diamond_with_a_dot:"] = "💠";
	_g.h[":no_bicycles:"] = "🚳";
	_g.h[":cow:"] = "🐮";
	_g.h[":flag_Eritrea:"] = "🇪🇷";
	_g.h[":kissing_heart:"] = "😘";
	_g.h[":man_in_steamy_room_tone1:"] = "🧖🏻‍♂️";
	_g.h[":man_running_tone5:"] = "🏃🏿‍♂️";
	_g.h[":pen_fountain:"] = "🖋";
	_g.h[":satellite_orbital:"] = "🛰";
	_g.h[":sleeping:"] = "😴";
	_g.h[":flag_ar:"] = "🇦🇷";
	_g.h[":man_cartwheeling_tone3:"] = "🤸🏽‍♂️";
	_g.h[":man_with_chinese_cap_tone1:"] = "👲🏻";
	_g.h[":middle_finger_tone2:"] = "🖕🏼";
	_g.h[":fork_knife_plate:"] = "🍽";
	_g.h[":woman_police_officer_tone2:"] = "👮🏼‍♀️";
	_g.h[":flag_St._Lucia:"] = "🇱🇨";
	_g.h[":oncoming_bus:"] = "🚍";
	_g.h[":person_bowing_tone5:"] = "🙇🏿";
	_g.h[":shopping:"] = "🛍️";
	_g.h[":fist:"] = "✊";
	_g.h[":clapping_hands:"] = "👏";
	_g.h[":flag-rs:"] = "🇷🇸";
	_g.h[":man_in_business_suit_levitating_tone1:"] = "🕴🏻";
	_g.h[":man_wearing_turban_tone5:"] = "👳🏿‍♂️";
	_g.h[":orange_book:"] = "📙";
	_g.h[":person_gesturing_ok_tone4:"] = "🙆🏾";
	_g.h[":scotland:"] = "🏴󠁧󠁢󠁳󠁣󠁴󠁿";
	_g.h[":woman_swimming_tone2:"] = "🏊🏼‍♀️";
	_g.h[":cursing_face:"] = "🤬";
	_g.h[":black_right_pointing_double_triangle_with_vertical_bar:"] = "⏭️";
	_g.h[":male-construction-worker:"] = "👷‍♂️";
	_g.h[":mouse2:"] = "🐁";
	_g.h[":fist_tone5:"] = "✊🏿";
	_g.h[":man_tipping_hand_tone2:"] = "💁🏼‍♂️";
	_g.h[":man-playing-handball:"] = "🤾‍♂️";
	_g.h[":person_swimming:"] = "🏊";
	_g.h[":roasted_sweet_potato:"] = "🍠";
	_g.h[":cape_verde:"] = "🇨🇻";
	_g.h[":imp:"] = "👿";
	_g.h[":clock3:"] = "🕒";
	_g.h[":fairy_woman:"] = "🧚‍♀️";
	_g.h[":flag-kp:"] = "🇰🇵";
	_g.h[":icecream:"] = "🍦";
	_g.h[":innocent:"] = "😇";
	_g.h[":man-surfing:"] = "🏄‍♂️";
	_g.h[":man_bouncing_ball:"] = "⛹️‍♂️";
	_g.h[":woman_cartwheeling_tone3:"] = "🤸🏽‍♀️";
	_g.h[":flag-gt:"] = "🇬🇹";
	_g.h[":flag-ng:"] = "🇳🇬";
	_g.h[":flag_Clipperton_Island:"] = "🇨🇵";
	_g.h[":flag_tv:"] = "🇹🇻";
	_g.h[":malaysia:"] = "🇲🇾";
	_g.h[":money_bag:"] = "💰";
	_g.h[":non-potable_water:"] = "🚱";
	_g.h[":parasol_on_ground:"] = "⛱️";
	_g.h[":sari:"] = "🥻";
	_g.h[":wave_tone2:"] = "👋🏼";
	_g.h[":diya_lamp:"] = "🪔";
	_g.h[":flag_Tanzania:"] = "🇹🇿";
	_g.h[":man_getting_face_massage_tone1:"] = "💆🏻‍♂️";
	_g.h[":man_technologist_tone1:"] = "👨🏻‍💻";
	_g.h[":point_up_tone3:"] = "☝🏽";
	_g.h[":snowboarder_tone1:"] = "🏂🏻";
	_g.h[":classical_building:"] = "🏛️";
	_g.h[":flag_eh:"] = "🇪🇭";
	_g.h[":person_mountain_biking_tone3:"] = "🚵🏽";
	_g.h[":woman_mountain_biking_tone5:"] = "🚵🏿‍♀️";
	_g.h[":flag_Syria:"] = "🇸🇾";
	_g.h[":sunrise:"] = "🌅";
	_g.h[":vertical_traffic_light:"] = "🚦";
	_g.h[":butter:"] = "🧈";
	_g.h[":woman_factory_worker_tone4:"] = "👩🏾‍🏭";
	_g.h[":woman_farmer_tone4:"] = "👩🏾‍🌾";
	_g.h[":Tokyo_tower:"] = "🗼";
	_g.h[":ascension_island:"] = "🇦🇨";
	_g.h[":cup_with_straw:"] = "🥤";
	_g.h[":flag_bb:"] = "🇧🇧";
	_g.h[":flag_cf:"] = "🇨🇫";
	_g.h[":red_square:"] = "🟥";
	_g.h[":hammer_and_pick:"] = "⚒️";
	_g.h[":raised_back_of_hand_tone2:"] = "🤚🏼";
	_g.h[":woman_judge_tone1:"] = "👩🏻‍⚖️";
	_g.h[":clock7:"] = "🕖";
	_g.h[":free:"] = "🆓";
	_g.h[":pencil:"] = "✏";
	_g.h[":smile:"] = "😄";
	_g.h[":symbols:"] = "🔣";
	_g.h[":chart_decreasing:"] = "📉";
	_g.h[":finland:"] = "🇫🇮";
	_g.h[":flag_bj:"] = "🇧🇯";
	_g.h[":mosque:"] = "🕌";
	_g.h[":neutral_face:"] = "😐";
	_g.h[":woman_pilot_tone3:"] = "👩🏽‍✈️";
	_g.h[":face_with_diagonal_mouth:"] = "🫤";
	_g.h[":flag-kh:"] = "🇰🇭";
	_g.h[":golf:"] = "⛳";
	_g.h[":guard_tone3:"] = "💂🏽";
	_g.h[":hundred_points:"] = "💯";
	_g.h[":woman_bouncing_ball_tone2:"] = "⛹🏼‍♀️";
	_g.h[":woman_juggling_tone2:"] = "🤹🏼‍♀️";
	_g.h[":flag_lb:"] = "🇱🇧";
	_g.h[":muscle_tone3:"] = "💪🏽";
	_g.h[":canada:"] = "🇨🇦";
	_g.h[":frowning_person:"] = "🙍";
	_g.h[":man-woman-boy:"] = "👨‍👩‍👦";
	_g.h[":oman:"] = "🇴🇲";
	_g.h[":person_mountain_biking:"] = "🚵";
	_g.h[":rescue_worker_helmet:"] = "⛑️";
	_g.h[":sneezing_face:"] = "🤧";
	_g.h[":woman_frowning_tone3:"] = "🙍🏽‍♀️";
	_g.h[":frog:"] = "🐸";
	_g.h[":man_with_gua_pi_mao:"] = "👲";
	_g.h[":arrow_down:"] = "⬇️";
	_g.h[":flag-um:"] = "🇺🇲";
	_g.h[":flag_kp:"] = "🇰🇵";
	_g.h[":warning:"] = "⚠️";
	_g.h[":calling:"] = "📲";
	_g.h[":flag-ht:"] = "🇭🇹";
	_g.h[":flag-om:"] = "🇴🇲";
	_g.h[":flag-pt:"] = "🇵🇹";
	_g.h[":v_tone2:"] = "✌🏼";
	_g.h[":woman_walking_tone1:"] = "🚶🏻‍♀️";
	_g.h[":baby:"] = "👶";
	_g.h[":flag_no:"] = "🇳🇴";
	_g.h[":frame_with_picture:"] = "🖼️";
	_g.h[":hamburger:"] = "🍔";
	_g.h[":input_latin_lowercase:"] = "🔡";
	_g.h[":down-right_arrow:"] = "↘";
	_g.h[":five_o’clock:"] = "🕔";
	_g.h[":flag_Malta:"] = "🇲🇹";
	_g.h[":flag_ag:"] = "🇦🇬";
	_g.h[":jp:"] = "🇯🇵";
	_g.h[":person_climbing_tone4:"] = "🧗🏾";
	_g.h[":airplane:"] = "✈️";
	_g.h[":candy:"] = "🍬";
	_g.h[":man_bowing_tone4:"] = "🙇🏾‍♂️";
	_g.h[":man_climbing:"] = "🧗‍♂️";
	_g.h[":man_in_business_suit_levitating:"] = "🕴️";
	_g.h[":sauna_man:"] = "🧖‍♂️";
	_g.h[":star_of_david:"] = "✡️";
	_g.h[":toolbox:"] = "🧰";
	_g.h[":atm:"] = "🏧";
	_g.h[":construction_worker_tone1:"] = "👷🏻";
	_g.h[":crazy_face:"] = "🤪";
	_g.h[":flying_disc:"] = "🥏";
	_g.h[":person_juggling_tone2:"] = "🤹🏼";
	_g.h[":person_mountain_biking_tone5:"] = "🚵🏿";
	_g.h[":u6e80:"] = "🈵";
	_g.h[":woman_tipping_hand_tone1:"] = "💁🏻‍♀️";
	_g.h[":bamboo:"] = "🎍";
	_g.h[":cloud_with_snow:"] = "🌨";
	_g.h[":rooster:"] = "🐓";
	_g.h[":woman_office_worker_tone4:"] = "👩🏾‍💼";
	_g.h[":man-gesturing-no:"] = "🙅‍♂️";
	_g.h[":robot_face:"] = "🤖";
	_g.h[":st_barthelemy:"] = "🇧🇱";
	_g.h[":woman_playing_water_polo:"] = "🤽‍♀️";
	_g.h[":Japanese_prohibited_button:"] = "🈲";
	_g.h[":left_arrow_curving_right:"] = "↪";
	_g.h[":man_biking_tone3:"] = "🚴🏽‍♂️";
	_g.h[":man_juggling_tone4:"] = "🤹🏾‍♂️";
	_g.h[":man_mechanic_tone4:"] = "👨🏾‍🔧";
	_g.h[":mermaid_tone1:"] = "🧜🏻‍♀️";
	_g.h[":v_tone1:"] = "✌🏻";
	_g.h[":austria:"] = "🇦🇹";
	_g.h[":face_in_clouds:"] = "😶‍🌫️";
	_g.h[":woman_factory_worker_tone3:"] = "👩🏽‍🏭";
	_g.h[":flag_Mozambique:"] = "🇲🇿";
	_g.h[":male-guard:"] = "💂‍♂️";
	_g.h[":shamrock:"] = "☘️";
	_g.h[":aerial_tramway:"] = "🚡";
	_g.h[":no_good_man:"] = "🙅‍♂️";
	_g.h[":star_and_crescent:"] = "☪️";
	_g.h[":tv:"] = "📺";
	_g.h[":clap_tone4:"] = "👏🏾";
	_g.h[":eye_in_speech_bubble:"] = "👁️‍🗨️";
	_g.h[":person:"] = "🧑";
	_g.h[":potato:"] = "🥔";
	_g.h[":yellow_circle:"] = "🟡";
	_g.h[":tuvalu:"] = "🇹🇻";
	_g.h[":beverage_box:"] = "🧃";
	_g.h[":flag_Malawi:"] = "🇲🇼";
	_g.h[":fog:"] = "🌫️";
	_g.h[":nose_tone5:"] = "👃🏿";
	_g.h[":zipper_mouth_face:"] = "🤐";
	_g.h[":flag-kg:"] = "🇰🇬";
	_g.h[":flag_st:"] = "🇸🇹";
	_g.h[":locked_with_key:"] = "🔐";
	_g.h[":muscle_tone4:"] = "💪🏾";
	_g.h[":flag-bv:"] = "🇧🇻";
	_g.h[":flag-vi:"] = "🇻🇮";
	_g.h[":flag_vu:"] = "🇻🇺";
	_g.h[":gabon:"] = "🇬🇦";
	_g.h[":woman-girl-boy:"] = "👩‍👧‍👦";
	_g.h[":woman_firefighter_tone3:"] = "👩🏽‍🚒";
	_g.h[":bowing_man:"] = "🙇‍♂️";
	_g.h[":cancer:"] = "♋";
	_g.h[":family_woman_girl_girl:"] = "👩‍👧‍👧";
	_g.h[":flag-td:"] = "🇹🇩";
	_g.h[":polar_bear:"] = "🐻‍❄️";
	_g.h[":skull_and_crossbones:"] = "☠️";
	_g.h[":u6709:"] = "🈶";
	_g.h[":accordion:"] = "🪗";
	_g.h[":flag_gr:"] = "🇬🇷";
	_g.h[":flag_th:"] = "🇹🇭";
	_g.h[":man_teacher_tone1:"] = "👨🏻‍🏫";
	_g.h[":mrs_claus:"] = "🤶";
	_g.h[":right_facing_fist_tone1:"] = "🤜🏻";
	_g.h[":sunglasses:"] = "😎";
	_g.h[":telephone_receiver:"] = "📞";
	_g.h[":walking_man:"] = "🚶‍♂️";
	_g.h[":black_circle:"] = "⚫";
	_g.h[":drum_with_drumsticks:"] = "🥁";
	_g.h[":face_with_head_bandage:"] = "🤕";
	_g.h[":flag_Chad:"] = "🇹🇩";
	_g.h[":flag_ax:"] = "🇦🇽";
	_g.h[":man_surfing_tone4:"] = "🏄🏾‍♂️";
	_g.h[":woman_swimming_tone4:"] = "🏊🏾‍♀️";
	_g.h[":Japanese_bargain_button:"] = "🉐";
	_g.h[":cross_mark:"] = "❌";
	_g.h[":postbox:"] = "📮";
	_g.h[":woman_student_tone3:"] = "👩🏽‍🎓";
	_g.h[":star-struck:"] = "🤩";
	_g.h[":white_exclamation_mark:"] = "❕";
	_g.h[":Japanese_passing_grade_button:"] = "🈴";
	_g.h[":blond_haired_person:"] = "👱";
	_g.h[":bug:"] = "🐛";
	_g.h[":elephant:"] = "🐘";
	_g.h[":flag-sh:"] = "🇸🇭";
	_g.h[":hindu_temple:"] = "🛕";
	_g.h[":lion:"] = "🦁";
	_g.h[":superhero_woman:"] = "🦸‍♀️";
	_g.h[":triangular_ruler:"] = "📐";
	_g.h[":vs:"] = "🆚";
	_g.h[":woman_blond_hair:"] = "👱‍♀️";
	_g.h[":blond-haired_man_tone3:"] = "👱🏽‍♂️";
	_g.h[":golfer:"] = "🏌️‍♂️";
	_g.h[":hong_kong:"] = "🇭🇰";
	_g.h[":hospital:"] = "🏥";
	_g.h[":person_bouncing_ball_tone5:"] = "⛹🏿";
	_g.h[":woman_gesturing_OK:"] = "🙆‍♀️";
	_g.h[":fleur_de_lis:"] = "⚜️";
	_g.h[":woman_juggling_tone5:"] = "🤹🏿‍♀️";
	_g.h[":woman_police_officer_tone3:"] = "👮🏽‍♀️";
	_g.h[":arrow_left:"] = "⬅️";
	_g.h[":carrot:"] = "🥕";
	_g.h[":cocktail_glass:"] = "🍸";
	_g.h[":love_you_gesture_tone2:"] = "🤟🏼";
	_g.h[":man_getting_massage:"] = "💆‍♂️";
	_g.h[":person_in_steamy_room_tone1:"] = "🧖🏻";
	_g.h[":t_rex:"] = "🦖";
	_g.h[":burundi:"] = "🇧🇮";
	_g.h[":couple_mm:"] = "👨‍❤️‍👨";
	_g.h[":deaf_person:"] = "🧏";
	_g.h[":flag-gd:"] = "🇬🇩";
	_g.h[":flag_Wales:"] = "🏴󠁧󠁢󠁷󠁬󠁳󠁿";
	_g.h[":bell:"] = "🔔";
	_g.h[":clutch_bag:"] = "👝";
	_g.h[":flag_na:"] = "🇳🇦";
	_g.h[":wave:"] = "👋";
	_g.h[":woman_firefighter_tone1:"] = "👩🏻‍🚒";
	_g.h[":camera_with_flash:"] = "📸";
	_g.h[":flag-aq:"] = "🇦🇶";
	_g.h[":flag-bg:"] = "🇧🇬";
	_g.h[":flag_be:"] = "🇧🇪";
	_g.h[":male-cook:"] = "👨‍🍳";
	_g.h[":man_construction_worker:"] = "👷‍♂️";
	_g.h[":family_mmgg:"] = "👨‍👨‍👧‍👧";
	_g.h[":flag-hn:"] = "🇭🇳";
	_g.h[":flag_er:"] = "🇪🇷";
	_g.h[":man-getting-massage:"] = "💆‍♂️";
	_g.h[":man_getting_haircut_tone2:"] = "💇🏼‍♂️";
	_g.h[":seven:"] = "7️⃣";
	_g.h[":spoon:"] = "🥄";
	_g.h[":face_with_open_mouth:"] = "😮";
	_g.h[":flag_tw:"] = "🇹🇼";
	_g.h[":hugs:"] = "🤗";
	_g.h[":man-wearing-turban:"] = "👳‍♂️";
	_g.h[":woman_technologist_tone5:"] = "👩🏿‍💻";
	_g.h[":iphone:"] = "📱";
	_g.h[":locomotive:"] = "🚂";
	_g.h[":flag_bh:"] = "🇧🇭";
	_g.h[":grin:"] = "😁";
	_g.h[":mirror:"] = "🪞";
	_g.h[":selfie_tone2:"] = "🤳🏼";
	_g.h[":merman_tone2:"] = "🧜🏼‍♂️";
	_g.h[":merman_tone5:"] = "🧜🏿‍♂️";
	_g.h[":thumbsdown_tone4:"] = "👎🏾";
	_g.h[":woman_tipping_hand_tone4:"] = "💁🏾‍♀️";
	_g.h[":black_large_square:"] = "⬛";
	_g.h[":coconut:"] = "🥥";
	_g.h[":flag-sx:"] = "🇸🇽";
	_g.h[":man_shrugging_tone5:"] = "🤷🏿‍♂️";
	_g.h[":right_anger_bubble:"] = "🗯️";
	_g.h[":woman_farmer_tone2:"] = "👩🏼‍🌾";
	_g.h[":bouncing_ball_man:"] = "⛹️‍♂️";
	_g.h[":euro:"] = "💶";
	_g.h[":female-technologist:"] = "👩‍💻";
	_g.h[":lips:"] = "👄";
	_g.h[":waxing_crescent_moon:"] = "🌒";
	_g.h[":biting_lip:"] = "🫦";
	_g.h[":european_post_office:"] = "🏤";
	_g.h[":flag_Wallis_&_Futuna:"] = "🇼🇫";
	_g.h[":flag_kr:"] = "🇰🇷";
	_g.h[":zipper_mouth:"] = "🤐";
	_g.h[":arrow_right_hook:"] = "↪️";
	_g.h[":flag_Burkina_Faso:"] = "🇧🇫";
	_g.h[":sauna_person:"] = "🧖";
	_g.h[":fairy_tone3:"] = "🧚🏽";
	_g.h[":person_tipping_hand_tone2:"] = "💁🏼";
	_g.h[":singer:"] = "🧑‍🎤";
	_g.h[":deciduous_tree:"] = "🌳";
	_g.h[":keycap_star:"] = "*️⃣";
	_g.h[":victory_hand:"] = "✌";
	_g.h[":desert_island:"] = "🏝️";
	_g.h[":multiply:"] = "✖";
	_g.h[":woman_facepalming_tone5:"] = "🤦🏿‍♀️";
	_g.h[":flag-fm:"] = "🇫🇲";
	_g.h[":maldives:"] = "🇲🇻";
	_g.h[":man-girl:"] = "👨‍👧";
	_g.h[":man_swimming_tone2:"] = "🏊🏼‍♂️";
	_g.h[":smirk:"] = "😏";
	_g.h[":two_o’clock:"] = "🕑";
	_g.h[":flag_Gambia:"] = "🇬🇲";
	_g.h[":flag_Tunisia:"] = "🇹🇳";
	_g.h[":man_with_white_cane:"] = "👨‍🦯";
	_g.h[":micronesia:"] = "🇫🇲";
	_g.h[":pill:"] = "💊";
	_g.h[":signal_strength:"] = "📶";
	_g.h[":wrestlers:"] = "🤼";
	_g.h[":ant:"] = "🐜";
	_g.h[":vulcan_tone2:"] = "🖖🏼";
	_g.h[":flag_Benin:"] = "🇧🇯";
	_g.h[":leftwards_hand:"] = "🫲";
	_g.h[":man-woman-girl-boy:"] = "👨‍👩‍👧‍👦";
	_g.h[":person_climbing:"] = "🧗‍♀️";
	_g.h[":raised_hand:"] = "✋";
	_g.h[":santa_tone4:"] = "🎅🏾";
	_g.h[":skateboard:"] = "🛹";
	_g.h[":couple_with_heart_woman_woman:"] = "👩‍❤️‍👩";
	_g.h[":litter_in_bin_sign:"] = "🚮";
	_g.h[":male-scientist:"] = "👨‍🔬";
	_g.h[":man_gesturing_ok_tone1:"] = "🙆🏻‍♂️";
	_g.h[":two_men_holding_hands:"] = "👬";
	_g.h[":crocodile:"] = "🐊";
	_g.h[":currency_exchange:"] = "💱";
	_g.h[":panama:"] = "🇵🇦";
	_g.h[":spiral_calendar:"] = "🗓";
	_g.h[":unlock:"] = "🔓";
	_g.h[":albania:"] = "🇦🇱";
	_g.h[":brain:"] = "🧠";
	_g.h[":email:"] = "✉️";
	_g.h[":flag-bj:"] = "🇧🇯";
	_g.h[":flag_fk:"] = "🇫🇰";
	_g.h[":SOON_arrow:"] = "🔜";
	_g.h[":beginner:"] = "🔰";
	_g.h[":chipmunk:"] = "🐿️";
	_g.h[":hand_splayed_tone3:"] = "🖐🏽";
	_g.h[":man_running_tone3:"] = "🏃🏽‍♂️";
	_g.h[":piñata:"] = "🪅";
	_g.h[":up-right_arrow:"] = "↗";
	_g.h[":christmas_tree:"] = "🎄";
	_g.h[":five-thirty:"] = "🕠";
	_g.h[":flag_Angola:"] = "🇦🇴";
	_g.h[":flag_Qatar:"] = "🇶🇦";
	_g.h[":microscope:"] = "🔬";
	_g.h[":sun_behind_cloud:"] = "⛅";
	_g.h[":merman:"] = "🧜‍♂️";
	_g.h[":flag-zw:"] = "🇿🇼";
	_g.h[":hibiscus:"] = "🌺";
	_g.h[":flag-ao:"] = "🇦🇴";
	_g.h[":man_technologist_tone5:"] = "👨🏿‍💻";
	_g.h[":men_with_bunny_ears:"] = "👯‍♂️";
	_g.h[":person_in_steamy_room_tone2:"] = "🧖🏼";
	_g.h[":man_guard_tone5:"] = "💂🏿‍♂️";
	_g.h[":man’s_shoe:"] = "👞";
	_g.h[":mountain_biking_man:"] = "🚵‍♂️";
	_g.h[":white_frowning_face:"] = "☹️";
	_g.h[":wine_glass:"] = "🍷";
	_g.h[":zap:"] = "⚡";
	_g.h[":barely_sunny:"] = "🌥️";
	_g.h[":check_mark:"] = "✔";
	_g.h[":flag_Uganda:"] = "🇺🇬";
	_g.h[":ramen:"] = "🍜";
	_g.h[":boy_tone5:"] = "👦🏿";
	_g.h[":cross:"] = "✝";
	_g.h[":flag_Austria:"] = "🇦🇹";
	_g.h[":ok:"] = "🆗";
	_g.h[":person_in_bed_tone5:"] = "🛌🏿";
	_g.h[":railway_car:"] = "🚃";
	_g.h[":sun_behind_small_cloud:"] = "🌤";
	_g.h[":woman_astronaut_tone3:"] = "👩🏽‍🚀";
	_g.h[":woman_gesturing_ok_tone2:"] = "🙆🏼‍♀️";
	_g.h[":woman_mechanic_tone3:"] = "👩🏽‍🔧";
	_g.h[":o:"] = "⭕";
	_g.h[":person_with_turban:"] = "👳";
	_g.h[":woman_surfing_tone3:"] = "🏄🏽‍♀️";
	_g.h[":flag_Timor-Leste:"] = "🇹🇱";
	_g.h[":snow_capped_mountain:"] = "🏔️";
	_g.h[":unlocked:"] = "🔓";
	_g.h[":ethiopia:"] = "🇪🇹";
	_g.h[":flag_Bolivia:"] = "🇧🇴";
	_g.h[":blond-haired_woman:"] = "👱‍♀️";
	_g.h[":flag-ga:"] = "🇬🇦";
	_g.h[":funeral_urn:"] = "⚱️";
	_g.h[":people_holding_hands:"] = "🧑‍🤝‍🧑";
	_g.h[":family_woman_woman_boy_boy:"] = "👩‍👩‍👦‍👦";
	_g.h[":flag_sr:"] = "🇸🇷";
	_g.h[":guardsman:"] = "💂‍♂️";
	_g.h[":man_in_lotus_position_tone5:"] = "🧘🏿‍♂️";
	_g.h[":man_police_officer_tone4:"] = "👮🏾‍♂️";
	_g.h[":person_running:"] = "🏃";
	_g.h[":cucumber:"] = "🥒";
	_g.h[":flag-so:"] = "🇸🇴";
	_g.h[":flag_lt:"] = "🇱🇹";
	_g.h[":mage:"] = "🧙‍♀️";
	_g.h[":man_blond_hair:"] = "👱‍♂️";
	_g.h[":triangular_flag:"] = "🚩";
	_g.h[":dancing_men:"] = "👯‍♂️";
	_g.h[":man_tipping_hand_tone4:"] = "💁🏾‍♂️";
	_g.h[":roller_coaster:"] = "🎢";
	_g.h[":flag_Diego_Garcia:"] = "🇩🇬";
	_g.h[":flag_cn:"] = "🇨🇳";
	_g.h[":headphone:"] = "🎧";
	_g.h[":metal_tone5:"] = "🤘🏿";
	_g.h[":person_biking_tone5:"] = "🚴🏿";
	_g.h[":fist_raised:"] = "✊";
	_g.h[":flag_Iceland:"] = "🇮🇸";
	_g.h[":ladder:"] = "🪜";
	_g.h[":man_mechanic_tone3:"] = "👨🏽‍🔧";
	_g.h[":man_rowing_boat_tone2:"] = "🚣🏼‍♂️";
	_g.h[":police_officer_tone2:"] = "👮🏼";
	_g.h[":sad_but_relieved_face:"] = "😥";
	_g.h[":water_buffalo:"] = "🐃";
	_g.h[":flag-ax:"] = "🇦🇽";
	_g.h[":flag_Antigua_&_Barbuda:"] = "🇦🇬";
	_g.h[":fondue:"] = "🫕";
	_g.h[":fuelpump:"] = "⛽";
	_g.h[":man_genie:"] = "🧞‍♂️";
	_g.h[":running_man:"] = "🏃‍♂️";
	_g.h[":bald_woman:"] = "👩‍🦲";
	_g.h[":woman_biking_tone2:"] = "🚴🏼‍♀️";
	_g.h[":Japanese_acceptable_button:"] = "🉑";
	_g.h[":cherry_blossom:"] = "🌸";
	_g.h[":family_woman_woman_girl_girl:"] = "👩‍👩‍👧‍👧";
	_g.h[":flag_Puerto_Rico:"] = "🇵🇷";
	_g.h[":flag_vn:"] = "🇻🇳";
	_g.h[":man_singer_tone1:"] = "👨🏻‍🎤";
	_g.h[":man_teacher_tone5:"] = "👨🏿‍🏫";
	_g.h[":flushed_face:"] = "😳";
	_g.h[":man_pouting_tone1:"] = "🙎🏻‍♂️";
	_g.h[":palms_up_together_tone4:"] = "🤲🏾";
	_g.h[":woman_scientist_tone3:"] = "👩🏽‍🔬";
	_g.h[":woman_pilot:"] = "👩‍✈️";
	_g.h[":arrow_up_down:"] = "↕️";
	_g.h[":female_fairy:"] = "🧚‍♀️";
	_g.h[":high-heeled_shoe:"] = "👠";
	_g.h[":red_paper_lantern:"] = "🏮";
	_g.h[":chart_increasing_with_yen:"] = "💹";
	_g.h[":cinema:"] = "🎦";
	_g.h[":frowning_man:"] = "🙍‍♂️";
	_g.h[":male-factory-worker:"] = "👨‍🏭";
	_g.h[":medal_sports:"] = "🏅";
	_g.h[":saudi_arabia:"] = "🇸🇦";
	_g.h[":up-left_arrow:"] = "↖";
	_g.h[":Libra:"] = "♎";
	_g.h[":flag_ug:"] = "🇺🇬";
	_g.h[":plunger:"] = "🪠";
	_g.h[":rolled-up_newspaper:"] = "🗞";
	_g.h[":female_mage:"] = "🧙‍♀️";
	_g.h[":keycap_6:"] = "6️⃣";
	_g.h[":montenegro:"] = "🇲🇪";
	_g.h[":test_tube:"] = "🧪";
	_g.h[":person_getting_haircut_tone5:"] = "💇🏿";
	_g.h[":person_shrugging_tone3:"] = "🤷🏽";
	_g.h[":snowboarder_tone3:"] = "🏂🏽";
	_g.h[":swaziland:"] = "🇸🇿";
	_g.h[":woman_gesturing_ok_tone1:"] = "🙆🏻‍♀️";
	_g.h[":chains:"] = "⛓️";
	_g.h[":person_playing_water_polo_tone2:"] = "🤽🏼";
	_g.h[":full_moon_face:"] = "🌝";
	_g.h[":man_tipping_hand_tone1:"] = "💁🏻‍♂️";
	_g.h[":person_raising_hand_tone3:"] = "🙋🏽";
	_g.h[":dart:"] = "🎯";
	_g.h[":exclamation:"] = "❗";
	_g.h[":selfie:"] = "🤳";
	_g.h[":anger_symbol:"] = "💢";
	_g.h[":bicycle:"] = "🚲";
	_g.h[":cowboy_hat_face:"] = "🤠";
	_g.h[":flag_French_Guiana:"] = "🇬🇫";
	_g.h[":frame_photo:"] = "🖼";
	_g.h[":genie:"] = "🧞‍♂️";
	_g.h[":man_fairy_tone2:"] = "🧚🏼‍♂️";
	_g.h[":man_pouting_tone5:"] = "🙎🏿‍♂️";
	_g.h[":page_with_curl:"] = "📃";
	_g.h[":rofl:"] = "🤣";
	_g.h[":person_surfing_tone2:"] = "🏄🏼";
	_g.h[":prince_tone2:"] = "🤴🏼";
	_g.h[":st_pierre_miquelon:"] = "🇵🇲";
	_g.h[":basket:"] = "🧺";
	_g.h[":first_place:"] = "🥇";
	_g.h[":flag_Spain:"] = "🇪🇸";
	_g.h[":turtle:"] = "🐢";
	_g.h[":woman_and_man_holding_hands:"] = "👫";
	_g.h[":woman_vampire_tone4:"] = "🧛🏾‍♀️";
	_g.h[":flag_San_Marino:"] = "🇸🇲";
	_g.h[":flag_United_Nations:"] = "🇺🇳";
	_g.h[":key:"] = "🔑";
	_g.h[":fist_tone2:"] = "✊🏼";
	_g.h[":love-you_gesture:"] = "🤟";
	_g.h[":male_zombie:"] = "🧟‍♂️";
	_g.h[":couple_ww:"] = "👩‍❤️‍👩";
	_g.h[":man_judge_tone5:"] = "👨🏿‍⚖️";
	_g.h[":woman_climbing_tone2:"] = "🧗🏼‍♀️";
	_g.h[":child_tone3:"] = "🧒🏽";
	_g.h[":level_slider:"] = "🎚️";
	_g.h[":flag_bi:"] = "🇧🇮";
	_g.h[":flag_im:"] = "🇮🇲";
	_g.h[":woman_facepalming:"] = "🤦‍♀️";
	_g.h[":yawning_face:"] = "🥱";
	_g.h[":bangbang:"] = "‼️";
	_g.h[":person_pouting:"] = "🙎";
	_g.h[":wedding:"] = "💒";
	_g.h[":woman_judge_tone2:"] = "👩🏼‍⚖️";
	_g.h[":elf_tone1:"] = "🧝🏻";
	_g.h[":left_right_arrow:"] = "↔️";
	_g.h[":rice_cracker:"] = "🍘";
	_g.h[":amphora:"] = "🏺";
	_g.h[":guadeloupe:"] = "🇬🇵";
	_g.h[":man_swimming_tone3:"] = "🏊🏽‍♂️";
	_g.h[":middle_finger_tone3:"] = "🖕🏽";
	_g.h[":person_in_bed_tone3:"] = "🛌🏽";
	_g.h[":roller_skate:"] = "🛼";
	_g.h[":vhs:"] = "📼";
	_g.h[":female-cook:"] = "👩‍🍳";
	_g.h[":kiss_woman_man:"] = "👩‍❤️‍💋‍👨";
	_g.h[":man_singer_tone2:"] = "👨🏼‍🎤";
	_g.h[":shorts:"] = "🩳";
	_g.h[":man:"] = "👨";
	_g.h[":mute:"] = "🔇";
	_g.h[":one-thirty:"] = "🕜";
	_g.h[":ballot_box:"] = "🗳";
	_g.h[":black_heart:"] = "🖤";
	_g.h[":flag_Croatia:"] = "🇭🇷";
	_g.h[":man_cook:"] = "👨‍🍳";
	_g.h[":man_wearing_turban_tone4:"] = "👳🏾‍♂️";
	_g.h[":mechanical_arm:"] = "🦾";
	_g.h[":angola:"] = "🇦🇴";
	_g.h[":cheese:"] = "🧀";
	_g.h[":flag_Equatorial_Guinea:"] = "🇬🇶";
	_g.h[":flag_xk:"] = "🇽🇰";
	_g.h[":UP!_button:"] = "🆙";
	_g.h[":construction_worker_man:"] = "👷‍♂️";
	_g.h[":cupid:"] = "💘";
	_g.h[":person_curly_hair:"] = "🧑‍🦱";
	_g.h[":hot_face:"] = "🥵";
	_g.h[":vomiting_face:"] = "🤮";
	_g.h[":Virgo:"] = "♍";
	_g.h[":adult_tone3:"] = "🧑🏽";
	_g.h[":female_detective:"] = "🕵️‍♀️";
	_g.h[":man_vampire_tone2:"] = "🧛🏼‍♂️";
	_g.h[":norway:"] = "🇳🇴";
	_g.h[":office_building:"] = "🏢";
	_g.h[":woman_with_white_cane:"] = "👩‍🦯";
	_g.h[":clamp:"] = "🗜";
	_g.h[":dumpling:"] = "🥟";
	_g.h[":flag-bm:"] = "🇧🇲";
	_g.h[":man_in_business_suit_levitating_tone2:"] = "🕴🏼";
	_g.h[":fire:"] = "🔥";
	_g.h[":love_you_gesture_tone4:"] = "🤟🏾";
	_g.h[":man_firefighter_tone5:"] = "👨🏿‍🚒";
	_g.h[":thermometer_face:"] = "🤒";
	_g.h[":euro_banknote:"] = "💶";
	_g.h[":green_salad:"] = "🥗";
	_g.h[":man_artist_tone2:"] = "👨🏼‍🎨";
	_g.h[":musical_keyboard:"] = "🎹";
	_g.h[":closed_mailbox_with_raised_flag:"] = "📫";
	_g.h[":flag-no:"] = "🇳🇴";
	_g.h[":hand_over_mouth:"] = "🤭";
	_g.h[":mage_tone2:"] = "🧙🏼";
	_g.h[":palms_up_together:"] = "🤲";
	_g.h[":flag-bb:"] = "🇧🇧";
	_g.h[":flag_Moldova:"] = "🇲🇩";
	_g.h[":flag_ae:"] = "🇦🇪";
	_g.h[":hocho:"] = "🔪";
	_g.h[":men_with_bunny_ears_partying:"] = "👯‍♂️";
	_g.h[":parachute:"] = "🪂";
	_g.h[":person_in_bed_tone2:"] = "🛌🏼";
	_g.h[":skier:"] = "⛷️";
	_g.h[":flag_Sint_Maarten:"] = "🇸🇽";
	_g.h[":flag_bs:"] = "🇧🇸";
	_g.h[":duck:"] = "🦆";
	_g.h[":light_bulb:"] = "💡";
	_g.h[":ok_hand_tone3:"] = "👌🏽";
	_g.h[":flag-nu:"] = "🇳🇺";
	_g.h[":flag_fi:"] = "🇫🇮";
	_g.h[":kiwi:"] = "🥝";
	_g.h[":woman_running_tone3:"] = "🏃🏽‍♀️";
	_g.h[":flag_American_Samoa:"] = "🇦🇸";
	_g.h[":flag_Pitcairn_Islands:"] = "🇵🇳";
	_g.h[":flag_São_Tomé_&_Príncipe:"] = "🇸🇹";
	_g.h[":person_in_lotus_position_tone5:"] = "🧘🏿";
	_g.h[":swim_brief:"] = "🩲";
	_g.h[":three:"] = "3️⃣";
	_g.h[":unamused_face:"] = "😒";
	_g.h[":woman_dancing:"] = "💃";
	_g.h[":flag_Cyprus:"] = "🇨🇾";
	_g.h[":flag_Western_Sahara:"] = "🇪🇭";
	_g.h[":man_facepalming_tone5:"] = "🤦🏿‍♂️";
	_g.h[":pregnant_woman_tone3:"] = "🤰🏽";
	_g.h[":clock12:"] = "🕛";
	_g.h[":flag-cv:"] = "🇨🇻";
	_g.h[":flag_nz:"] = "🇳🇿";
	_g.h[":mongolia:"] = "🇲🇳";
	_g.h[":no_entry_sign:"] = "🚫";
	_g.h[":cruise_ship:"] = "🛳";
	_g.h[":flag_Costa_Rica:"] = "🇨🇷";
	_g.h[":flag_fm:"] = "🇫🇲";
	_g.h[":red_circle:"] = "🔴";
	_g.h[":vampire_tone4:"] = "🧛🏾";
	_g.h[":bubble_tea:"] = "🧋";
	_g.h[":woman-getting-haircut:"] = "💇‍♀️";
	_g.h[":woman_judge_tone4:"] = "👩🏾‍⚖️";
	_g.h[":blond-haired_woman_tone1:"] = "👱🏻‍♀️";
	_g.h[":man_construction_worker_tone2:"] = "👷🏼‍♂️";
	_g.h[":nail_care_tone2:"] = "💅🏼";
	_g.h[":bearded_person_tone1:"] = "🧔🏻";
	_g.h[":green_square:"] = "🟩";
	_g.h[":ten_o’clock:"] = "🕙";
	_g.h[":woman_in_lotus_position_tone1:"] = "🧘🏻‍♀️";
	_g.h[":woman_teacher_tone3:"] = "👩🏽‍🏫";
	_g.h[":person_gesturing_ok_tone3:"] = "🙆🏽";
	_g.h[":person_wearing_turban:"] = "👳";
	_g.h[":umbrella2:"] = "☂";
	_g.h[":congo_brazzaville:"] = "🇨🇬";
	_g.h[":flag-cg:"] = "🇨🇬";
	_g.h[":flag-ec:"] = "🇪🇨";
	_g.h[":flag-mc:"] = "🇲🇨";
	_g.h[":flag_it:"] = "🇮🇹";
	_g.h[":man_beard:"] = "🧔‍♂️";
	_g.h[":newspaper:"] = "📰";
	_g.h[":sweden:"] = "🇸🇪";
	_g.h[":el_salvador:"] = "🇸🇻";
	_g.h[":last_quarter_moon_face:"] = "🌜";
	_g.h[":rowing_woman:"] = "🚣‍♀️";
	_g.h[":flat_shoe:"] = "🥿";
	_g.h[":open_mouth:"] = "😮";
	_g.h[":bearded_person_tone5:"] = "🧔🏿";
	_g.h[":elf_woman:"] = "🧝‍♀️";
	_g.h[":female-police-officer:"] = "👮‍♀️";
	_g.h[":flag_Cuba:"] = "🇨🇺";
	_g.h[":namibia:"] = "🇳🇦";
	_g.h[":woman_bowing_tone2:"] = "🙇🏼‍♀️";
	_g.h[":wrestling:"] = "🤼";
	_g.h[":face_with_hand_over_mouth:"] = "🤭";
	_g.h[":fax:"] = "📠";
	_g.h[":keycap_7:"] = "7️⃣";
	_g.h[":man_golfing_tone3:"] = "🏌🏽‍♂️";
	_g.h[":man_juggling_tone1:"] = "🤹🏻‍♂️";
	_g.h[":beer_mug:"] = "🍺";
	_g.h[":black_flag:"] = "🏴";
	_g.h[":cow_face:"] = "🐮";
	_g.h[":flag-ca:"] = "🇨🇦";
	_g.h[":flag_Ukraine:"] = "🇺🇦";
	_g.h[":game_die:"] = "🎲";
	_g.h[":libya:"] = "🇱🇾";
	_g.h[":palau:"] = "🇵🇼";
	_g.h[":woman_cook_tone4:"] = "👩🏾‍🍳";
	_g.h[":beer:"] = "🍺";
	_g.h[":man_mountain_biking_tone2:"] = "🚵🏼‍♂️";
	_g.h[":scientist:"] = "🧑‍🔬";
	_g.h[":vulcan_tone3:"] = "🖖🏽";
	_g.h[":Aquarius:"] = "♒";
	_g.h[":flag_Romania:"] = "🇷🇴";
	_g.h[":man_in_business_suit_levitating_tone3:"] = "🕴🏽";
	_g.h[":man_walking_tone3:"] = "🚶🏽‍♂️";
	_g.h[":senegal:"] = "🇸🇳";
	_g.h[":u7533:"] = "🈸";
	_g.h[":flag-sg:"] = "🇸🇬";
	_g.h[":malawi:"] = "🇲🇼";
	_g.h[":globe_showing_Americas:"] = "🌎";
	_g.h[":person_gesturing_NO:"] = "🙅";
	_g.h[":woman_singer_tone5:"] = "👩🏿‍🎤";
	_g.h[":frowning2:"] = "☹";
	_g.h[":person_frowning_tone1:"] = "🙍🏻";
	_g.h[":right_facing_fist_tone5:"] = "🤜🏿";
	_g.h[":flag_Turks_&_Caicos_Islands:"] = "🇹🇨";
	_g.h[":flag_sv:"] = "🇸🇻";
	_g.h[":man_raising_hand_tone5:"] = "🙋🏿‍♂️";
	_g.h[":stuck_out_tongue_closed_eyes:"] = "😝";
	_g.h[":train:"] = "🚋";
	_g.h[":onion:"] = "🧅";
	_g.h[":pile_of_poo:"] = "💩";
	_g.h[":small_orange_diamond:"] = "🔸";
	_g.h[":woman_construction_worker_tone2:"] = "👷🏼‍♀️";
	_g.h[":flag_ph:"] = "🇵🇭";
	_g.h[":nail_polish:"] = "💅";
	_g.h[":raised_hand_tone4:"] = "✋🏾";
	_g.h[":bottle_with_popping_cork:"] = "🍾";
	_g.h[":compass:"] = "🧭";
	_g.h[":flag_in:"] = "🇮🇳";
	_g.h[":heavy_plus_sign:"] = "➕";
	_g.h[":magnifying_glass_tilted_right:"] = "🔎";
	_g.h[":mermaid:"] = "🧜‍♀️";
	_g.h[":relieved:"] = "😌";
	_g.h[":roll_eyes:"] = "🙄";
	_g.h[":uzbekistan:"] = "🇺🇿";
	_g.h[":breast_feeding_tone5:"] = "🤱🏿";
	_g.h[":joy_cat:"] = "😹";
	_g.h[":woman_supervillain:"] = "🦹‍♀️";
	_g.h[":man-facepalming:"] = "🤦‍♂️";
	_g.h[":world_map:"] = "🗺️";
	_g.h[":END_arrow:"] = "🔚";
	_g.h[":comoros:"] = "🇰🇲";
	_g.h[":congratulations:"] = "㊗️";
	_g.h[":old_woman:"] = "👵";
	_g.h[":selfie_tone5:"] = "🤳🏿";
	_g.h[":pushpin:"] = "📌";
	_g.h[":thumbsup_tone4:"] = "👍🏾";
	_g.h[":family_man_girl:"] = "👨‍👧";
	_g.h[":flag-cz:"] = "🇨🇿";
	_g.h[":older_woman_tone2:"] = "👵🏼";
	_g.h[":person_pouting_tone5:"] = "🙎🏿";
	_g.h[":person_surfing_tone1:"] = "🏄🏻";
	_g.h[":ferry:"] = "⛴️";
	_g.h[":flag_tl:"] = "🇹🇱";
	_g.h[":man_facepalming_tone1:"] = "🤦🏻‍♂️";
	_g.h[":student:"] = "🧑‍🎓";
	_g.h[":flag-mo:"] = "🇲🇴";
	_g.h[":man_scientist_tone4:"] = "👨🏾‍🔬";
	_g.h[":blond_haired_person_tone1:"] = "👱🏻";
	_g.h[":pool_8_ball:"] = "🎱";
	_g.h[":troll:"] = "🧌";
	_g.h[":woman_farmer_tone1:"] = "👩🏻‍🌾";
	_g.h[":fu:"] = "🖕";
	_g.h[":pray_tone2:"] = "🙏🏼";
	_g.h[":woman-biking:"] = "🚴‍♀️";
	_g.h[":baby_symbol:"] = "🚼";
	_g.h[":call_me_hand:"] = "🤙";
	_g.h[":french_bread:"] = "🥖";
	_g.h[":man_student_tone3:"] = "👨🏽‍🎓";
	_g.h[":raised_hands_tone1:"] = "🙌🏻";
	_g.h[":black_circle_for_record:"] = "⏺️";
	_g.h[":female-judge:"] = "👩‍⚖️";
	_g.h[":low_brightness:"] = "🔅";
	_g.h[":candle:"] = "🕯️";
	_g.h[":woman_bouncing_ball:"] = "⛹️‍♀️";
	_g.h[":arrow_up_small:"] = "🔼";
	_g.h[":flag-hk:"] = "🇭🇰";
	_g.h[":money_mouth:"] = "🤑";
	_g.h[":teddy_bear:"] = "🧸";
	_g.h[":ferris_wheel:"] = "🎡";
	_g.h[":fire_extinguisher:"] = "🧯";
	_g.h[":flag-ly:"] = "🇱🇾";
	_g.h[":flag_bv:"] = "🇧🇻";
	_g.h[":helicopter:"] = "🚁";
	_g.h[":woman_police_officer_tone5:"] = "👮🏿‍♀️";
	_g.h[":sweat:"] = "😓";
	_g.h[":beating_heart:"] = "💓";
	_g.h[":flag_U.S._Virgin_Islands:"] = "🇻🇮";
	_g.h[":soon:"] = "🔜";
	_g.h[":white_check_mark:"] = "✅";
	_g.h[":black_cat:"] = "🐈‍⬛";
	_g.h[":dagger:"] = "🗡";
	_g.h[":flag-ms:"] = "🇲🇸";
	_g.h[":person_in_lotus_position_tone4:"] = "🧘🏾";
	_g.h[":person_walking_tone2:"] = "🚶🏼";
	_g.h[":point_up_tone5:"] = "☝🏿";
	_g.h[":woman_mountain_biking_tone3:"] = "🚵🏽‍♀️";
	_g.h[":grinning:"] = "😀";
	_g.h[":man_fairy_tone3:"] = "🧚🏽‍♂️";
	_g.h[":pen_ballpoint:"] = "🖊";
	_g.h[":person_lifting_weights_tone4:"] = "🏋🏾";
	_g.h[":koala:"] = "🐨";
	_g.h[":person_swimming_tone2:"] = "🏊🏼";
	_g.h[":adult_tone1:"] = "🧑🏻";
	_g.h[":bald_person:"] = "🧑‍🦲";
	_g.h[":flag_Mongolia:"] = "🇲🇳";
	_g.h[":man_bouncing_ball_tone1:"] = "⛹🏻‍♂️";
	_g.h[":repeat_button:"] = "🔁";
	_g.h[":woman_pouting_tone2:"] = "🙎🏼‍♀️";
	_g.h[":flag_cy:"] = "🇨🇾";
	_g.h[":man_mage_tone1:"] = "🧙🏻‍♂️";
	_g.h[":woman_facepalming_tone4:"] = "🤦🏾‍♀️";
	_g.h[":woman_frowning_tone1:"] = "🙍🏻‍♀️";
	_g.h[":cat_face:"] = "🐱";
	_g.h[":flag_Eswatini:"] = "🇸🇿";
	_g.h[":flag_French_Southern_Territories:"] = "🇹🇫";
	_g.h[":long_drum:"] = "🪘";
	_g.h[":man_swimming:"] = "🏊‍♂️";
	_g.h[":man_swimming_tone4:"] = "🏊🏾‍♂️";
	_g.h[":martinique:"] = "🇲🇶";
	_g.h[":megaphone:"] = "📣";
	_g.h[":rice:"] = "🍚";
	_g.h[":woman_office_worker_tone1:"] = "👩🏻‍💼";
	_g.h[":man_shrugging_tone3:"] = "🤷🏽‍♂️";
	_g.h[":mx_claus:"] = "🧑‍🎄";
	_g.h[":pig_face:"] = "🐷";
	_g.h[":woman-lifting-weights:"] = "🏋️‍♀️";
	_g.h[":woman_swimming_tone1:"] = "🏊🏻‍♀️";
	_g.h[":mali:"] = "🇲🇱";
	_g.h[":man_juggling_tone3:"] = "🤹🏽‍♂️";
	_g.h[":record_button:"] = "⏺";
	_g.h[":relieved_face:"] = "😌";
	_g.h[":superhero_man:"] = "🦸‍♂️";
	_g.h[":woman_police_officer_tone4:"] = "👮🏾‍♀️";
	_g.h[":worried_face:"] = "😟";
	_g.h[":flag-ne:"] = "🇳🇪";
	_g.h[":hand_splayed_tone4:"] = "🖐🏾";
	_g.h[":man_cartwheeling_tone4:"] = "🤸🏾‍♂️";
	_g.h[":wink:"] = "😉";
	_g.h[":blond-haired-woman:"] = "👱‍♀️";
	_g.h[":cn:"] = "🇨🇳";
	_g.h[":man-kiss-man:"] = "👨‍❤️‍💋‍👨";
	_g.h[":rolling_on_the_floor_laughing:"] = "🤣";
	_g.h[":track_previous:"] = "⏮";
	_g.h[":radio:"] = "📻";
	_g.h[":trolleybus:"] = "🚎";
	_g.h[":woman-golfing:"] = "🏌️‍♀️";
	_g.h[":breast_feeding_tone3:"] = "🤱🏽";
	_g.h[":fireworks:"] = "🎆";
	_g.h[":flag_et:"] = "🇪🇹";
	_g.h[":man-bouncing-ball:"] = "⛹️‍♂️";
	_g.h[":point_right_tone2:"] = "👉🏼";
	_g.h[":racehorse:"] = "🐎";
	_g.h[":sassy_woman:"] = "💁‍♀️";
	_g.h[":surfing_woman:"] = "🏄‍♀️";
	_g.h[":flag_my:"] = "🇲🇾";
	_g.h[":no_entry:"] = "⛔";
	_g.h[":point_left_tone2:"] = "👈🏼";
	_g.h[":table_tennis_paddle_and_ball:"] = "🏓";
	_g.h[":baby_bottle:"] = "🍼";
	_g.h[":stuck_out_tongue:"] = "😛";
	_g.h[":deer:"] = "🦌";
	_g.h[":flag_Liberia:"] = "🇱🇷";
	_g.h[":speak_no_evil:"] = "🙊";
	_g.h[":woman’s_boot:"] = "👢";
	_g.h[":clap_tone5:"] = "👏🏿";
	_g.h[":flight_arrival:"] = "🛬";
	_g.h[":white_haired_person:"] = "🧑‍🦳";
	_g.h[":one-piece_swimsuit:"] = "🩱";
	_g.h[":raised_hand_tone1:"] = "✋🏻";
	_g.h[":woman_gesturing_ok_tone4:"] = "🙆🏾‍♀️";
	_g.h[":kissing_smiling_eyes:"] = "😙";
	_g.h[":kuwait:"] = "🇰🇼";
	_g.h[":oil_drum:"] = "🛢️";
	_g.h[":reminder_ribbon:"] = "🎗️";
	_g.h[":smiling_face_with_smiling_eyes:"] = "😊";
	_g.h[":flag_Tristan_da_Cunha:"] = "🇹🇦";
	_g.h[":woman_singer:"] = "👩‍🎤";
	_g.h[":flag-bl:"] = "🇧🇱";
	_g.h[":paperclips:"] = "🖇";
	_g.h[":person_getting_massage:"] = "💆";
	_g.h[":alien_monster:"] = "👾";
	_g.h[":flag_ye:"] = "🇾🇪";
	_g.h[":guide_dog:"] = "🦮";
	_g.h[":family_man_woman_boy:"] = "👨‍👩‍👦";
	_g.h[":man_golfing:"] = "🏌️‍♂️";
	_g.h[":person_tipping_hand_tone4:"] = "💁🏾";
	_g.h[":sauropod:"] = "🦕";
	_g.h[":antenna_bars:"] = "📶";
	_g.h[":flag_Netherlands:"] = "🇳🇱";
	_g.h[":raised_hand_tone5:"] = "✋🏿";
	_g.h[":flag-tz:"] = "🇹🇿";
	_g.h[":flag_io:"] = "🇮🇴";
	_g.h[":grey_exclamation:"] = "❕";
	_g.h[":old_man:"] = "👴";
	_g.h[":woman_getting_haircut_tone2:"] = "💇🏼‍♀️";
	_g.h[":woman_mechanic_tone2:"] = "👩🏼‍🔧";
	_g.h[":Taurus:"] = "♉";
	_g.h[":derelict_house_building:"] = "🏚️";
	_g.h[":disappointed:"] = "😞";
	_g.h[":four:"] = "4️⃣";
	_g.h[":man_bouncing_ball_tone4:"] = "⛹🏾‍♂️";
	_g.h[":red_haired_person:"] = "🧑‍🦰";
	_g.h[":selfie_tone4:"] = "🤳🏾";
	_g.h[":flag-cw:"] = "🇨🇼";
	_g.h[":person_golfing_tone4:"] = "🏌🏾";
	_g.h[":BACK_arrow:"] = "🔙";
	_g.h[":brown_heart:"] = "🤎";
	_g.h[":crayon:"] = "🖍";
	_g.h[":fish_cake:"] = "🍥";
	_g.h[":latvia:"] = "🇱🇻";
	_g.h[":family_man_man_boy_boy:"] = "👨‍👨‍👦‍👦";
	_g.h[":flag-mv:"] = "🇲🇻";
	_g.h[":keyboard:"] = "⌨️";
	_g.h[":male-student:"] = "👨‍🎓";
	_g.h[":timer_clock:"] = "⏲️";
	_g.h[":weary_cat:"] = "🙀";
	_g.h[":adult_tone4:"] = "🧑🏾";
	_g.h[":flag_Latvia:"] = "🇱🇻";
	_g.h[":man_with_turban:"] = "👳‍♂️";
	_g.h[":microbe:"] = "🦠";
	_g.h[":face_with_thermometer:"] = "🤒";
	_g.h[":flag_Svalbard_&_Jan_Mayen:"] = "🇸🇯";
	_g.h[":india:"] = "🇮🇳";
	_g.h[":man_wearing_turban_tone2:"] = "👳🏼‍♂️";
	_g.h[":person_golfing_tone1:"] = "🏌🏻";
	_g.h[":registered:"] = "®️";
	_g.h[":santa:"] = "🎅";
	_g.h[":woman_getting_face_massage_tone1:"] = "💆🏻‍♀️";
	_g.h[":djibouti:"] = "🇩🇯";
	_g.h[":flag_sj:"] = "🇸🇯";
	_g.h[":norfolk_island:"] = "🇳🇫";
	_g.h[":palms_up_together_tone1:"] = "🤲🏻";
	_g.h[":shield:"] = "🛡️";
	_g.h[":camping:"] = "🏕️";
	_g.h[":cloud_rain:"] = "🌧";
	_g.h[":musical_note:"] = "🎵";
	_g.h[":person_golfing_tone2:"] = "🏌🏼";
	_g.h[":angel_tone4:"] = "👼🏾";
	_g.h[":flag_ao:"] = "🇦🇴";
	_g.h[":flag_ie:"] = "🇮🇪";
	_g.h[":six_o’clock:"] = "🕕";
	_g.h[":anchor:"] = "⚓";
	_g.h[":desktop:"] = "🖥";
	_g.h[":european_castle:"] = "🏰";
	_g.h[":flag_tm:"] = "🇹🇲";
	_g.h[":slightly_smiling_face:"] = "🙂";
	_g.h[":up_arrow:"] = "⬆";
	_g.h[":woman_astronaut_tone4:"] = "👩🏾‍🚀";
	_g.h[":yum:"] = "😋";
	_g.h[":face_with_rolling_eyes:"] = "🙄";
	_g.h[":flag-ta:"] = "🇹🇦";
	_g.h[":ghost:"] = "👻";
	_g.h[":hot_beverage:"] = "☕";
	_g.h[":lebanon:"] = "🇱🇧";
	_g.h[":loud_sound:"] = "🔊";
	_g.h[":macedonia:"] = "🇲🇰";
	_g.h[":sign_of_the_horns:"] = "🤘";
	_g.h[":smiling_face_with_hearts:"] = "🥰";
	_g.h[":flag_England:"] = "🏴󠁧󠁢󠁥󠁮󠁧󠁿";
	_g.h[":eye_speech_bubble:"] = "👁️‍🗨️";
	_g.h[":point_up_2_tone1:"] = "👆🏻";
	_g.h[":waxing_gibbous_moon:"] = "🌔";
	_g.h[":princess_tone2:"] = "👸🏼";
	_g.h[":wave_tone1:"] = "👋🏻";
	_g.h[":man_dancing_tone3:"] = "🕺🏽";
	_g.h[":man_playing_handball_tone1:"] = "🤾🏻‍♂️";
	_g.h[":mountain_bicyclist:"] = "🚵‍♂️";
	_g.h[":northern_mariana_islands:"] = "🇲🇵";
	_g.h[":space_invader:"] = "👾";
	_g.h[":uruguay:"] = "🇺🇾";
	_g.h[":woman_tipping_hand_tone5:"] = "💁🏿‍♀️";
	_g.h[":woman_vampire:"] = "🧛‍♀️";
	_g.h[":bowl_with_spoon:"] = "🥣";
	_g.h[":eye-in-speech-bubble:"] = "👁️‍🗨️";
	_g.h[":man_construction_worker_tone1:"] = "👷🏻‍♂️";
	_g.h[":man_health_worker_tone3:"] = "👨🏽‍⚕️";
	_g.h[":man_playing_handball_tone3:"] = "🤾🏽‍♂️";
	_g.h[":rescue_worker’s_helmet:"] = "⛑";
	_g.h[":ceuta_melilla:"] = "🇪🇦";
	_g.h[":climbing:"] = "🧗";
	_g.h[":coffee:"] = "☕";
	_g.h[":dog2:"] = "🐕";
	_g.h[":handball:"] = "🤾";
	_g.h[":kneeling_woman:"] = "🧎‍♀️";
	_g.h[":man_white_hair:"] = "👨‍🦳";
	_g.h[":tonga:"] = "🇹🇴";
	_g.h[":yo-yo:"] = "🪀";
	_g.h[":cook_islands:"] = "🇨🇰";
	_g.h[":eyes:"] = "👀";
	_g.h[":flag-th:"] = "🇹🇭";
	_g.h[":hotel:"] = "🏨";
	_g.h[":person_gesturing_ok_tone5:"] = "🙆🏿";
	_g.h[":woman_technologist_tone3:"] = "👩🏽‍💻";
	_g.h[":grinning_face_with_smiling_eyes:"] = "😄";
	_g.h[":man_gesturing_ok_tone4:"] = "🙆🏾‍♂️";
	_g.h[":flag_Egypt:"] = "🇪🇬";
	_g.h[":flag_Madagascar:"] = "🇲🇬";
	_g.h[":flag_mg:"] = "🇲🇬";
	_g.h[":eye:"] = "👁️";
	_g.h[":woman-heart-woman:"] = "👩‍❤️‍👩";
	_g.h[":woman_playing_water_polo_tone3:"] = "🤽🏽‍♀️";
	_g.h[":factory_worker:"] = "🧑‍🏭";
	_g.h[":flag-vu:"] = "🇻🇺";
	_g.h[":flag_bm:"] = "🇧🇲";
	_g.h[":flamingo:"] = "🦩";
	_g.h[":second_place:"] = "🥈";
	_g.h[":shortcake:"] = "🍰";
	_g.h[":flag_dj:"] = "🇩🇯";
	_g.h[":man_lifting_weights_tone5:"] = "🏋🏿‍♂️";
	_g.h[":woman-woman-girl-boy:"] = "👩‍👩‍👧‍👦";
	_g.h[":woman_in_steamy_room_tone1:"] = "🧖🏻‍♀️";
	_g.h[":female-doctor:"] = "👩‍⚕️";
	_g.h[":hourglass_not_done:"] = "⏳";
	_g.h[":clock2:"] = "🕑";
	_g.h[":closed_umbrella:"] = "🌂";
	_g.h[":flag-si:"] = "🇸🇮";
	_g.h[":flag_Zambia:"] = "🇿🇲";
	_g.h[":haircut_woman:"] = "💇‍♀️";
	_g.h[":man_playing_water_polo_tone4:"] = "🤽🏾‍♂️";
	_g.h[":person_shrugging_tone5:"] = "🤷🏿";
	_g.h[":princess_tone1:"] = "👸🏻";
	_g.h[":woman_guard_tone2:"] = "💂🏼‍♀️";
	_g.h[":cooked_rice:"] = "🍚";
	_g.h[":flag_Congo_-_Brazzaville:"] = "🇨🇬";
	_g.h[":mens:"] = "🚹";
	_g.h[":fist_tone3:"] = "✊🏽";
	_g.h[":male-judge:"] = "👨‍⚖️";
	_g.h[":Ophiuchus:"] = "⛎";
	_g.h[":blond-haired_woman_tone4:"] = "👱🏾‍♀️";
	_g.h[":female_zombie:"] = "🧟‍♀️";
	_g.h[":flag_vg:"] = "🇻🇬";
	_g.h[":point_left_tone3:"] = "👈🏽";
	_g.h[":right_arrow_curving_up:"] = "⤴";
	_g.h[":woman_with_beard:"] = "🧔‍♀️";
	_g.h[":athletic_shoe:"] = "👟";
	_g.h[":eagle:"] = "🦅";
	_g.h[":man_facepalming:"] = "🤦‍♂️";
	_g.h[":cactus:"] = "🌵";
	_g.h[":file_folder:"] = "📁";
	_g.h[":flag_Dominica:"] = "🇩🇲";
	_g.h[":flag_va:"] = "🇻🇦";
	_g.h[":person_facepalming_tone1:"] = "🤦🏻";
	_g.h[":person_in_manual_wheelchair:"] = "🧑‍🦽";
	_g.h[":st_vincent_grenadines:"] = "🇻🇨";
	_g.h[":tokyo_tower:"] = "🗼";
	_g.h[":woman_pilot_tone5:"] = "👩🏿‍✈️";
	_g.h[":arrow_up:"] = "⬆️";
	_g.h[":estonia:"] = "🇪🇪";
	_g.h[":gem:"] = "💎";
	_g.h[":hushed:"] = "😯";
	_g.h[":bullet_train:"] = "🚅";
	_g.h[":left_facing_fist:"] = "🤛";
	_g.h[":rolling_eyes:"] = "🙄";
	_g.h[":sleeping_face:"] = "😴";
	_g.h[":woman_running_tone5:"] = "🏃🏿‍♀️";
	_g.h[":women_holding_hands:"] = "👭";
	_g.h[":person_walking:"] = "🚶";
	_g.h[":punch_tone3:"] = "👊🏽";
	_g.h[":rhino:"] = "🦏";
	_g.h[":large_brown_circle:"] = "🟤";
	_g.h[":man_health_worker_tone5:"] = "👨🏿‍⚕️";
	_g.h[":page_facing_up:"] = "📄";
	_g.h[":flag_cx:"] = "🇨🇽";
	_g.h[":male-technologist:"] = "👨‍💻";
	_g.h[":mountain_biking_woman:"] = "🚵‍♀️";
	_g.h[":older_woman_tone5:"] = "👵🏿";
	_g.h[":flag_gq:"] = "🇬🇶";
	_g.h[":flag_uz:"] = "🇺🇿";
	_g.h[":man_detective_tone5:"] = "🕵🏿‍♂️";
	_g.h[":sunflower:"] = "🌻";
	_g.h[":ON!_arrow:"] = "🔛";
	_g.h[":afghanistan:"] = "🇦🇫";
	_g.h[":trident:"] = "🔱";
	_g.h[":woman-woman-girl:"] = "👩‍👩‍👧";
	_g.h[":woman_frowning:"] = "🙍‍♀️";
	_g.h[":couch_and_lamp:"] = "🛋️";
	_g.h[":exploding_head:"] = "🤯";
	_g.h[":flag_gh:"] = "🇬🇭";
	_g.h[":upside_down:"] = "🙃";
	_g.h[":waving_white_flag:"] = "🏳️";
	_g.h[":woman_surfing_tone1:"] = "🏄🏻‍♀️";
	_g.h[":blond_haired_person_tone5:"] = "👱🏿";
	_g.h[":person_mountain_biking_tone4:"] = "🚵🏾";
	_g.h[":pitcairn_islands:"] = "🇵🇳";
	_g.h[":woman_police_officer:"] = "👮‍♀️";
	_g.h[":four_o’clock:"] = "🕓";
	_g.h[":night_with_stars:"] = "🌃";
	_g.h[":flag-lt:"] = "🇱🇹";
	_g.h[":flag_Fiji:"] = "🇫🇯";
	_g.h[":island:"] = "🏝";
	_g.h[":woman_in_steamy_room_tone2:"] = "🧖🏼‍♀️";
	_g.h[":family_mmg:"] = "👨‍👨‍👧";
	_g.h[":fast_reverse_button:"] = "⏪";
	_g.h[":massage_man:"] = "💆‍♂️";
	_g.h[":person_shrugging_tone2:"] = "🤷🏼";
	_g.h[":raised_hands_tone5:"] = "🙌🏿";
	_g.h[":circled_M:"] = "Ⓜ";
	_g.h[":man_red_hair:"] = "👨‍🦰";
	_g.h[":person_in_bed_tone1:"] = "🛌🏻";
	_g.h[":flashlight:"] = "🔦";
	_g.h[":ok_hand:"] = "👌";
	_g.h[":person_standing:"] = "🧍";
	_g.h[":canary_islands:"] = "🇮🇨";
	_g.h[":guinea:"] = "🇬🇳";
	_g.h[":person_wearing_turban_tone3:"] = "👳🏽";
	_g.h[":bricks:"] = "🧱";
	_g.h[":flag_cz:"] = "🇨🇿";
	_g.h[":flag_sn:"] = "🇸🇳";
	_g.h[":man_gesturing_no_tone5:"] = "🙅🏿‍♂️";
	_g.h[":octagonal_sign:"] = "🛑";
	_g.h[":woman-girl:"] = "👩‍👧";
	_g.h[":woman_zombie:"] = "🧟‍♀️";
	_g.h[":flag_Tuvalu:"] = "🇹🇻";
	_g.h[":satellite_antenna:"] = "📡";
	_g.h[":woman_health_worker_tone3:"] = "👩🏽‍⚕️";
	_g.h[":woman_with_veil:"] = "👰‍♀️";
	_g.h[":film_strip:"] = "🎞️";
	_g.h[":iceland:"] = "🇮🇸";
	_g.h[":rewind:"] = "⏪";
	_g.h[":bulb:"] = "💡";
	_g.h[":dim_button:"] = "🔅";
	_g.h[":light_rail:"] = "🚈";
	_g.h[":mrs_claus_tone1:"] = "🤶🏻";
	_g.h[":nine_o’clock:"] = "🕘";
	_g.h[":o2:"] = "🅾️";
	_g.h[":scroll:"] = "📜";
	_g.h[":woman_standing:"] = "🧍‍♀️";
	_g.h[":eight_spoked_asterisk:"] = "✳️";
	_g.h[":flag_South_Georgia_&_South_Sandwich_Islands:"] = "🇬🇸";
	_g.h[":golfing_woman:"] = "🏌️‍♀️";
	_g.h[":police_officer_tone1:"] = "👮🏻";
	_g.h[":skunk:"] = "🦨";
	_g.h[":egypt:"] = "🇪🇬";
	_g.h[":fish_cake_with_swirl:"] = "🍥";
	_g.h[":flag-my:"] = "🇲🇾";
	_g.h[":globe_showing_Asia-Australia:"] = "🌏";
	_g.h[":man-man-girl-girl:"] = "👨‍👨‍👧‍👧";
	_g.h[":man_bouncing_ball_tone5:"] = "⛹🏿‍♂️";
	_g.h[":man_office_worker_tone1:"] = "👨🏻‍💼";
	_g.h[":thumbsup_tone5:"] = "👍🏿";
	_g.h[":weary:"] = "😩";
	_g.h[":Santa_Claus:"] = "🎅";
	_g.h[":bookmark_tabs:"] = "📑";
	_g.h[":city_dusk:"] = "🌆";
	_g.h[":flag-sc:"] = "🇸🇨";
	_g.h[":inbox_tray:"] = "📥";
	_g.h[":sun_with_face:"] = "🌞";
	_g.h[":woman_walking:"] = "🚶‍♀️";
	_g.h[":flag_es:"] = "🇪🇸";
	_g.h[":flag_fj:"] = "🇫🇯";
	_g.h[":heavy_multiplication_x:"] = "✖️";
	_g.h[":male-singer:"] = "👨‍🎤";
	_g.h[":man_bowing_tone3:"] = "🙇🏽‍♂️";
	_g.h[":white_cane:"] = "🦯";
	_g.h[":woman_mountain_biking_tone2:"] = "🚵🏼‍♀️";
	_g.h[":flag_ca:"] = "🇨🇦";
	_g.h[":male_vampire:"] = "🧛‍♂️";
	_g.h[":musical_notes:"] = "🎶";
	_g.h[":police_officer_tone3:"] = "👮🏽";
	_g.h[":barber:"] = "💈";
	_g.h[":boar:"] = "🐗";
	_g.h[":credit_card:"] = "💳";
	_g.h[":person_raising_hand_tone2:"] = "🙋🏼";
	_g.h[":sewing_needle:"] = "🪡";
	_g.h[":stethoscope:"] = "🩺";
	_g.h[":woman_pilot_tone4:"] = "👩🏾‍✈️";
	_g.h[":earth_africa:"] = "🌍";
	_g.h[":flag_black:"] = "🏴";
	_g.h[":man_student_tone4:"] = "👨🏾‍🎓";
	_g.h[":soft_ice_cream:"] = "🍦";
	_g.h[":woman_climbing_tone3:"] = "🧗🏽‍♀️";
	_g.h[":gem_stone:"] = "💎";
	_g.h[":taiwan:"] = "🇹🇼";
	_g.h[":three_button_mouse:"] = "🖱️";
	_g.h[":woman_surfing_tone2:"] = "🏄🏼‍♀️";
	_g.h[":baggage_claim:"] = "🛄";
	_g.h[":blossom:"] = "🌼";
	_g.h[":male-mechanic:"] = "👨‍🔧";
	_g.h[":man-lifting-weights:"] = "🏋️‍♂️";
	_g.h[":middle_finger_tone4:"] = "🖕🏾";
	_g.h[":printer:"] = "🖨️";
	_g.h[":satisfied:"] = "😆";
	_g.h[":sun_behind_rain_cloud:"] = "🌦";
	_g.h[":ukraine:"] = "🇺🇦";
	_g.h[":woman-playing-handball:"] = "🤾‍♀️";
	_g.h[":woman_teacher_tone5:"] = "👩🏿‍🏫";
	_g.h[":flag_France:"] = "🇫🇷";
	_g.h[":grinning_face_with_sweat:"] = "😅";
	_g.h[":man_office_worker_tone3:"] = "👨🏽‍💼";
	_g.h[":beers:"] = "🍻";
	_g.h[":boom:"] = "💥";
	_g.h[":clinking_beer_mugs:"] = "🍻";
	_g.h[":flag-md:"] = "🇲🇩";
	_g.h[":flag-se:"] = "🇸🇪";
	_g.h[":flag_St._Vincent_&_Grenadines:"] = "🇻🇨";
	_g.h[":lotus_position_woman:"] = "🧘‍♀️";
	_g.h[":stop_sign:"] = "🛑";
	_g.h[":woman-heart-man:"] = "👩‍❤️‍👨";
	_g.h[":woman_biking_tone5:"] = "🚴🏿‍♀️";
	_g.h[":grinning_cat:"] = "😺";
	_g.h[":military_helmet:"] = "🪖";
	_g.h[":tada:"] = "🎉";
	_g.h[":woman_scientist_tone5:"] = "👩🏿‍🔬";
	_g.h[":flag_Tajikistan:"] = "🇹🇯";
	_g.h[":uk:"] = "🇬🇧";
	_g.h[":heart_exclamation:"] = "❣";
	_g.h[":large_yellow_square:"] = "🟨";
	_g.h[":man_artist_tone1:"] = "👨🏻‍🎨";
	_g.h[":bearded_person:"] = "🧔";
	_g.h[":blond-haired_man_tone4:"] = "👱🏾‍♂️";
	_g.h[":flag-vn:"] = "🇻🇳";
	_g.h[":pregnant_woman:"] = "🤰";
	_g.h[":woman_tone2:"] = "👩🏼";
	_g.h[":womens:"] = "🚺";
	_g.h[":ab:"] = "🆎";
	_g.h[":bride_with_veil_tone4:"] = "👰🏾";
	_g.h[":cat2:"] = "🐈";
	_g.h[":flag_Lebanon:"] = "🇱🇧";
	_g.h[":heartbeat:"] = "💓";
	_g.h[":yo_yo:"] = "🪀";
	_g.h[":blond_haired_person_tone2:"] = "👱🏼";
	_g.h[":gift:"] = "🎁";
	_g.h[":house_buildings:"] = "🏘️";
	_g.h[":sauna_woman:"] = "🧖‍♀️";
	_g.h[":ski:"] = "🎿";
	_g.h[":woman_pouting_tone1:"] = "🙎🏻‍♀️";
	_g.h[":axe:"] = "🪓";
	_g.h[":jigsaw:"] = "🧩";
	_g.h[":middle_finger:"] = "🖕";
	_g.h[":slightly_frowning_face:"] = "🙁";
	_g.h[":speedboat:"] = "🚤";
	_g.h[":togo:"] = "🇹🇬";
	_g.h[":baby_tone3:"] = "👶🏽";
	_g.h[":boy_tone2:"] = "👦🏼";
	_g.h[":congo_kinshasa:"] = "🇨🇩";
	_g.h[":left_luggage:"] = "🛅";
	_g.h[":u6307:"] = "🈯";
	_g.h[":woman_frowning_tone5:"] = "🙍🏿‍♀️";
	_g.h[":beaver:"] = "🦫";
	_g.h[":male_supervillain:"] = "🦹‍♂️";
	_g.h[":open_umbrella:"] = "☂️";
	_g.h[":spaghetti:"] = "🍝";
	_g.h[":flag_Switzerland:"] = "🇨🇭";
	_g.h[":girl_tone3:"] = "👧🏽";
	_g.h[":heart_on_fire:"] = "❤️‍🔥";
	_g.h[":person_raising_hand_tone4:"] = "🙋🏾";
	_g.h[":person_running_tone4:"] = "🏃🏾";
	_g.h[":dango:"] = "🍡";
	_g.h[":rotating_light:"] = "🚨";
	_g.h[":adult_tone5:"] = "🧑🏿";
	_g.h[":flag_hn:"] = "🇭🇳";
	_g.h[":person_bowing_tone3:"] = "🙇🏽";
	_g.h[":petri_dish:"] = "🧫";
	_g.h[":racing_motorcycle:"] = "🏍️";
	_g.h[":santa_tone3:"] = "🎅🏽";
	_g.h[":woman_juggling:"] = "🤹‍♀️";
	_g.h[":woman_kneeling:"] = "🧎‍♀️";
	_g.h[":Gemini:"] = "♊";
	_g.h[":poland:"] = "🇵🇱";
	_g.h[":woman_in_lotus_position:"] = "🧘‍♀️";
	_g.h[":breast_feeding:"] = "🤱";
	_g.h[":man_cook_tone5:"] = "👨🏿‍🍳";
	_g.h[":motorboat:"] = "🛥";
	_g.h[":white_heart:"] = "🤍";
	_g.h[":cocktail:"] = "🍸";
	_g.h[":flag-eg:"] = "🇪🇬";
	_g.h[":person_wearing_turban_tone2:"] = "👳🏼";
	_g.h[":point_down_tone4:"] = "👇🏾";
	_g.h[":woman_health_worker_tone1:"] = "👩🏻‍⚕️";
	_g.h[":black_joker:"] = "🃏";
	_g.h[":flag-lv:"] = "🇱🇻";
	_g.h[":male_superhero:"] = "🦸‍♂️";
	_g.h[":man_health_worker:"] = "👨‍⚕️";
	_g.h[":man_technologist_tone3:"] = "👨🏽‍💻";
	_g.h[":white_medium_square:"] = "◻️";
	_g.h[":face_with_crossed-out_eyes:"] = "😵";
	_g.h[":male-teacher:"] = "👨‍🏫";
	_g.h[":merperson_tone1:"] = "🧜🏻";
	_g.h[":niue:"] = "🇳🇺";
	_g.h[":wave_tone5:"] = "👋🏿";
	_g.h[":boomerang:"] = "🪃";
	_g.h[":church:"] = "⛪";
	_g.h[":flag-ch:"] = "🇨🇭";
	_g.h[":flag_gs:"] = "🇬🇸";
	_g.h[":man_student_tone2:"] = "👨🏼‍🎓";
	_g.h[":mega:"] = "📣";
	_g.h[":person_lifting_weights:"] = "🏋";
	_g.h[":broom:"] = "🧹";
	_g.h[":flag_ea:"] = "🇪🇦";
	_g.h[":kissing_cat:"] = "😽";
	_g.h[":woman_artist_tone2:"] = "👩🏼‍🎨";
	_g.h[":woman_astronaut_tone2:"] = "👩🏼‍🚀";
	_g.h[":yellow_square:"] = "🟨";
	_g.h[":envelope_with_arrow:"] = "📩";
	_g.h[":flag-qa:"] = "🇶🇦";
	_g.h[":man_bouncing_ball_tone2:"] = "⛹🏼‍♂️";
	_g.h[":man_scientist_tone3:"] = "👨🏽‍🔬";
	_g.h[":woman_farmer_tone5:"] = "👩🏿‍🌾";
	_g.h[":mobile_phone_with_arrow:"] = "📲";
	_g.h[":person_running_tone5:"] = "🏃🏿";
	_g.h[":seal:"] = "🦭";
	_g.h[":heavy_heart_exclamation:"] = "❣️";
	_g.h[":Japanese_secret_button:"] = "㊙";
	_g.h[":dancer_tone1:"] = "💃🏻";
	_g.h[":flag_us:"] = "🇺🇸";
	_g.h[":man_pilot_tone2:"] = "👨🏼‍✈️";
	_g.h[":man_walking_tone5:"] = "🚶🏿‍♂️";
	_g.h[":toilet:"] = "🚽";
	_g.h[":serbia:"] = "🇷🇸";
	_g.h[":slovakia:"] = "🇸🇰";
	_g.h[":call_me:"] = "🤙";
	_g.h[":heavy_dollar_sign:"] = "💲";
	_g.h[":man_scientist_tone2:"] = "👨🏼‍🔬";
	_g.h[":mexico:"] = "🇲🇽";
	_g.h[":dog:"] = "🐶";
	_g.h[":flag_sb:"] = "🇸🇧";
	_g.h[":man_facepalming_tone3:"] = "🤦🏽‍♂️";
	_g.h[":person_playing_water_polo_tone1:"] = "🤽🏻";
	_g.h[":running_shirt_with_sash:"] = "🎽";
	_g.h[":woman_elf_tone4:"] = "🧝🏾‍♀️";
	_g.h[":biohazard_sign:"] = "☣️";
	_g.h[":dragon_face:"] = "🐲";
	_g.h[":person_with_skullcap:"] = "👲";
	_g.h[":traffic_light:"] = "🚥";
	_g.h[":japanese_goblin:"] = "👺";
	_g.h[":palm_down_hand:"] = "🫳";
	_g.h[":waffle:"] = "🧇";
	_g.h[":airplane_departure:"] = "🛫";
	_g.h[":flag-be:"] = "🇧🇪";
	_g.h[":flag_sc:"] = "🇸🇨";
	_g.h[":man_health_worker_tone2:"] = "👨🏼‍⚕️";
	_g.h[":point_down_tone2:"] = "👇🏼";
	_g.h[":woman_judge:"] = "👩‍⚖️";
	_g.h[":aland_islands:"] = "🇦🇽";
	_g.h[":flag_Afghanistan:"] = "🇦🇫";
	_g.h[":flag_Brazil:"] = "🇧🇷";
	_g.h[":flag_yt:"] = "🇾🇹";
	_g.h[":open_mailbox_with_lowered_flag:"] = "📭";
	_g.h[":white_question_mark:"] = "❔";
	_g.h[":woman-playing-water-polo:"] = "🤽‍♀️";
	_g.h[":woman_biking_tone4:"] = "🚴🏾‍♀️";
	_g.h[":car:"] = "🚗";
	_g.h[":stuck_out_tongue_winking_eye:"] = "😜";
	_g.h[":flag_gy:"] = "🇬🇾";
	_g.h[":man_cook_tone2:"] = "👨🏼‍🍳";
	_g.h[":motor_boat:"] = "🛥️";
	_g.h[":diego_garcia:"] = "🇩🇬";
	_g.h[":ice:"] = "🧊";
	_g.h[":older_man_tone3:"] = "👴🏽";
	_g.h[":2nd_place_medal:"] = "🥈";
	_g.h[":flag-mh:"] = "🇲🇭";
	_g.h[":kimono:"] = "👘";
	_g.h[":speaking_head_in_silhouette:"] = "🗣️";
	_g.h[":flag_bo:"] = "🇧🇴";
	_g.h[":flag_ro:"] = "🇷🇴";
	_g.h[":flag_vi:"] = "🇻🇮";
	_g.h[":woman_biking_tone1:"] = "🚴🏻‍♀️";
	_g.h[":ballot_box_with_ballot:"] = "🗳️";
	_g.h[":dominican_republic:"] = "🇩🇴";
	_g.h[":flag_Falkland_Islands:"] = "🇫🇰";
	_g.h[":fr:"] = "🇫🇷";
	_g.h[":large_purple_circle:"] = "🟣";
	_g.h[":clubs:"] = "♣️";
	_g.h[":flag-au:"] = "🇦🇺";
	_g.h[":man_artist_tone3:"] = "👨🏽‍🎨";
	_g.h[":person_in_steamy_room_tone3:"] = "🧖🏽";
	_g.h[":sos:"] = "🆘";
	_g.h[":empty_nest:"] = "🪹";
	_g.h[":partying_face:"] = "🥳";
	_g.h[":raised_hands_tone2:"] = "🙌🏼";
	_g.h[":tired_face:"] = "😫";
	_g.h[":woman_teacher:"] = "👩‍🏫";
	_g.h[":flag-fj:"] = "🇫🇯";
	_g.h[":flag_United_Kingdom:"] = "🇬🇧";
	_g.h[":flag_cg:"] = "🇨🇬";
	_g.h[":coral:"] = "🪸";
	_g.h[":flag_St._Kitts_&_Nevis:"] = "🇰🇳";
	_g.h[":honduras:"] = "🇭🇳";
	_g.h[":man_pouting:"] = "🙎‍♂️";
	_g.h[":man_with_chinese_cap:"] = "👲";
	_g.h[":weight_lifter:"] = "🏋️‍♂️";
	_g.h[":business_suit_levitating:"] = "🕴️";
	_g.h[":kissing_closed_eyes:"] = "😚";
	_g.h[":kosovo:"] = "🇽🇰";
	_g.h[":flag-ws:"] = "🇼🇸";
	_g.h[":japanese_castle:"] = "🏯";
	_g.h[":black_square_for_stop:"] = "⏹️";
	_g.h[":derelict_house:"] = "🏚";
	_g.h[":flag_United_States:"] = "🇺🇸";
	_g.h[":flags:"] = "🎏";
	_g.h[":tomato:"] = "🍅";
	_g.h[":upside-down_face:"] = "🙃";
	_g.h[":backpack:"] = "🎒";
	_g.h[":flag-uy:"] = "🇺🇾";
	_g.h[":flag_Guatemala:"] = "🇬🇹";
	_g.h[":raised_back_of_hand_tone1:"] = "🤚🏻";
	_g.h[":curly_haired_man:"] = "👨‍🦱";
	_g.h[":flag_bl:"] = "🇧🇱";
	_g.h[":flag_mz:"] = "🇲🇿";
	_g.h[":greece:"] = "🇬🇷";
	_g.h[":man_with_veil:"] = "👰‍♂️";
	_g.h[":men_holding_hands:"] = "👬";
	_g.h[":woman_raising_hand_tone2:"] = "🙋🏼‍♀️";
	_g.h[":belarus:"] = "🇧🇾";
	_g.h[":nesting_dolls:"] = "🪆";
	_g.h[":sandal:"] = "👡";
	_g.h[":teacup_without_handle:"] = "🍵";
	_g.h[":wilted_flower:"] = "🥀";
	_g.h[":woman_climbing_tone5:"] = "🧗🏿‍♀️";
	_g.h[":coffin:"] = "⚰️";
	_g.h[":couple:"] = "👫";
	_g.h[":man_biking_tone4:"] = "🚴🏾‍♂️";
	_g.h[":weight_lifting_man:"] = "🏋️‍♂️";
	_g.h[":boy_tone3:"] = "👦🏽";
	_g.h[":eritrea:"] = "🇪🇷";
	_g.h[":bank:"] = "🏦";
	_g.h[":bermuda:"] = "🇧🇲";
	_g.h[":fork_and_knife:"] = "🍴";
	_g.h[":girl_tone1:"] = "👧🏻";
	_g.h[":horse_racing_tone1:"] = "🏇🏻";
	_g.h[":male-firefighter:"] = "👨‍🚒";
	_g.h[":tanzania:"] = "🇹🇿";
	_g.h[":dashing_away:"] = "💨";
	_g.h[":flag_bw:"] = "🇧🇼";
	_g.h[":kite:"] = "🪁";
	_g.h[":placard:"] = "🪧";
	_g.h[":woman_factory_worker_tone5:"] = "👩🏿‍🏭";
	_g.h[":club_suit:"] = "♣";
	_g.h[":man_detective_tone3:"] = "🕵🏽‍♂️";
	_g.h[":new_moon:"] = "🌑";
	_g.h[":no_good_woman:"] = "🙅‍♀️";
	_g.h[":winking_face_with_tongue:"] = "😜";
	_g.h[":woman_golfing_tone4:"] = "🏌🏾‍♀️";
	_g.h[":woman_pouting_tone3:"] = "🙎🏽‍♀️";
	_g.h[":eject:"] = "⏏️";
	_g.h[":flag-dj:"] = "🇩🇯";
	_g.h[":flag_mu:"] = "🇲🇺";
	_g.h[":man_getting_haircut_tone4:"] = "💇🏾‍♂️";
	_g.h[":man_juggling_tone2:"] = "🤹🏼‍♂️";
	_g.h[":man_playing_water_polo:"] = "🤽‍♂️";
	_g.h[":palm_tree:"] = "🌴";
	_g.h[":children_crossing:"] = "🚸";
	_g.h[":point_up_2_tone5:"] = "👆🏿";
	_g.h[":softball:"] = "🥎";
	_g.h[":flag-ea:"] = "🇪🇦";
	_g.h[":flag_white:"] = "🏳";
	_g.h[":guard_tone1:"] = "💂🏻";
	_g.h[":information_desk_person:"] = "💁‍♀️";
	_g.h[":love_hotel:"] = "🏩";
	_g.h[":older_adult_tone5:"] = "🧓🏿";
	_g.h[":woman_mountain_biking_tone4:"] = "🚵🏾‍♀️";
	_g.h[":black_nib:"] = "✒️";
	_g.h[":lollipop:"] = "🍭";
	_g.h[":man_guard_tone4:"] = "💂🏾‍♂️";
	_g.h[":man_in_lotus_position_tone2:"] = "🧘🏼‍♂️";
	_g.h[":railway_track:"] = "🛤️";
	_g.h[":speaking_head:"] = "🗣";
	_g.h[":woman_juggling_tone1:"] = "🤹🏻‍♀️";
	_g.h[":lacrosse:"] = "🥍";
	_g.h[":mozambique:"] = "🇲🇿";
	_g.h[":shushing_face:"] = "🤫";
	_g.h[":white_flower:"] = "💮";
	_g.h[":fist_left:"] = "🤛";
	_g.h[":large_yellow_circle:"] = "🟡";
	_g.h[":man_office_worker_tone2:"] = "👨🏼‍💼";
	_g.h[":oncoming_automobile:"] = "🚘";
	_g.h[":trumpet:"] = "🎺";
	_g.h[":bahrain:"] = "🇧🇭";
	_g.h[":curly_haired_woman:"] = "👩‍🦱";
	_g.h[":flag_Turkey:"] = "🇹🇷";
	_g.h[":gear:"] = "⚙️";
	_g.h[":nail_care_tone4:"] = "💅🏾";
	_g.h[":anguished_face:"] = "😧";
	_g.h[":flag_Australia:"] = "🇦🇺";
	_g.h[":flag_French_Polynesia:"] = "🇵🇫";
	_g.h[":flag_ck:"] = "🇨🇰";
	_g.h[":play_button:"] = "▶";
	_g.h[":woman_getting_haircut:"] = "💇‍♀️";
	_g.h[":call_me_tone5:"] = "🤙🏿";
	_g.h[":man_farmer_tone5:"] = "👨🏿‍🌾";
	_g.h[":sunny:"] = "☀️";
	_g.h[":two_women_holding_hands:"] = "👭";
	_g.h[":family_mwbb:"] = "👨‍👩‍👦‍👦";
	_g.h[":flag-gr:"] = "🇬🇷";
	_g.h[":flag_Laos:"] = "🇱🇦";
	_g.h[":flag_Solomon_Islands:"] = "🇸🇧";
	_g.h[":sleepy:"] = "😪";
	_g.h[":bride_with_veil_tone1:"] = "👰🏻";
	_g.h[":flag-id:"] = "🇮🇩";
	_g.h[":mostly_sunny:"] = "🌤️";
	_g.h[":policewoman:"] = "👮‍♀️";
	_g.h[":woman_gesturing_ok:"] = "🙆‍♀️";
	_g.h[":flag_cm:"] = "🇨🇲";
	_g.h[":man_surfing_tone5:"] = "🏄🏿‍♂️";
	_g.h[":merman_tone1:"] = "🧜🏻‍♂️";
	_g.h[":point_up_tone1:"] = "☝🏻";
	_g.h[":sleepy_face:"] = "😪";
	_g.h[":cityscape:"] = "🏙️";
	_g.h[":flag_Guinea:"] = "🇬🇳";
	_g.h[":person_climbing_tone2:"] = "🧗🏼";
	_g.h[":rabbit2:"] = "🐇";
	_g.h[":whale:"] = "🐳";
	_g.h[":family_wwg:"] = "👩‍👩‍👧";
	_g.h[":flag_kg:"] = "🇰🇬";
	_g.h[":man_climbing_tone1:"] = "🧗🏻‍♂️";
	_g.h[":man_supervillain:"] = "🦹‍♂️";
	_g.h[":man_vampire:"] = "🧛‍♂️";
	_g.h[":zipper-mouth_face:"] = "🤐";
	_g.h[":call_me_tone1:"] = "🤙🏻";
	_g.h[":confused_face:"] = "😕";
	_g.h[":family_mwg:"] = "👨‍👩‍👧";
	_g.h[":flag_Niger:"] = "🇳🇪";
	_g.h[":football:"] = "🏈";
	_g.h[":green_circle:"] = "🟢";
	_g.h[":mauritania:"] = "🇲🇷";
	_g.h[":people_with_bunny_ears:"] = "👯";
	_g.h[":closed_mailbox_with_lowered_flag:"] = "📪";
	_g.h[":confounded:"] = "😖";
	_g.h[":dancer:"] = "💃";
	_g.h[":flag-gq:"] = "🇬🇶";
	_g.h[":flag_aw:"] = "🇦🇼";
	_g.h[":tropical_fish:"] = "🐠";
	_g.h[":baby_angel:"] = "👼";
	_g.h[":clock:"] = "🕰";
	_g.h[":jack_o_lantern:"] = "🎃";
	_g.h[":money_mouth_face:"] = "🤑";
	_g.h[":svalbard_jan_mayen:"] = "🇸🇯";
	_g.h[":woman_bowing:"] = "🙇‍♀️";
	_g.h[":broken_heart:"] = "💔";
	_g.h[":exclamation_question_mark:"] = "⁉";
	_g.h[":globe_showing_Europe-Africa:"] = "🌍";
	_g.h[":man_firefighter_tone2:"] = "👨🏼‍🚒";
	_g.h[":portugal:"] = "🇵🇹";
	_g.h[":calendar_spiral:"] = "🗓";
	_g.h[":person_rowing_boat_tone3:"] = "🚣🏽";
	_g.h[":woman_teacher_tone4:"] = "👩🏾‍🏫";
	_g.h[":man_frowning_tone3:"] = "🙍🏽‍♂️";
	_g.h[":ox:"] = "🐂";
	_g.h[":woman_tone4:"] = "👩🏾";
	_g.h[":Japanese_discount_button:"] = "🈹";
	_g.h[":flag-ni:"] = "🇳🇮";
	_g.h[":low_battery:"] = "🪫";
	_g.h[":mailbox:"] = "📫";
	_g.h[":massage:"] = "💆‍♀️";
	_g.h[":squinting_face_with_tongue:"] = "😝";
	_g.h[":heard_mcdonald_islands:"] = "🇭🇲";
	_g.h[":man_mechanic_tone5:"] = "👨🏿‍🔧";
	_g.h[":man_rowing_boat:"] = "🚣‍♂️";
	_g.h[":castle:"] = "🏰";
	_g.h[":hungary:"] = "🇭🇺";
	_g.h[":it:"] = "🇮🇹";
	_g.h[":twelve-thirty:"] = "🕧";
	_g.h[":brunei:"] = "🇧🇳";
	_g.h[":family_wwgb:"] = "👩‍👩‍👧‍👦";
	_g.h[":flag_mt:"] = "🇲🇹";
	_g.h[":hash:"] = "#️⃣";
	_g.h[":man_getting_face_massage:"] = "💆‍♂️";
	_g.h[":notepad_spiral:"] = "🗒";
	_g.h[":woman_running_tone1:"] = "🏃🏻‍♀️";
	_g.h[":bride_with_veil_tone2:"] = "👰🏼";
	_g.h[":dagger_knife:"] = "🗡️";
	_g.h[":flag_Heard_&_McDonald_Islands:"] = "🇭🇲";
	_g.h[":gloves:"] = "🧤";
	_g.h[":man_singer_tone4:"] = "👨🏾‍🎤";
	_g.h[":mouse:"] = "🐭";
	_g.h[":flag-ar:"] = "🇦🇷";
	_g.h[":bell_with_slash:"] = "🔕";
	_g.h[":flag-lu:"] = "🇱🇺";
	_g.h[":flag-tw:"] = "🇹🇼";
	_g.h[":flag_Faroe_Islands:"] = "🇫🇴";
	_g.h[":flag_Sri_Lanka:"] = "🇱🇰";
	_g.h[":last_track_button:"] = "⏮";
	_g.h[":left-facing_fist:"] = "🤛";
	_g.h[":north_korea:"] = "🇰🇵";
	_g.h[":ru:"] = "🇷🇺";
	_g.h[":turks_caicos_islands:"] = "🇹🇨";
	_g.h[":family_wwgg:"] = "👩‍👩‍👧‍👧";
	_g.h[":flag-england:"] = "🏴󠁧󠁢󠁥󠁮󠁧󠁿";
	_g.h[":flag_sm:"] = "🇸🇲";
	_g.h[":rowing_man:"] = "🚣‍♂️";
	_g.h[":women-with-bunny-ears-partying:"] = "👯‍♀️";
	_g.h[":articulated_lorry:"] = "🚛";
	_g.h[":fairy_man:"] = "🧚‍♂️";
	_g.h[":flag_Botswana:"] = "🇧🇼";
	_g.h[":flag_Kenya:"] = "🇰🇪";
	_g.h[":flag_Palau:"] = "🇵🇼";
	_g.h[":woman_golfing_tone2:"] = "🏌🏼‍♀️";
	_g.h[":woman_vampire_tone5:"] = "🧛🏿‍♀️";
	_g.h[":bath_tone4:"] = "🛀🏾";
	_g.h[":flag_pg:"] = "🇵🇬";
	_g.h[":hammer_and_wrench:"] = "🛠️";
	_g.h[":male-office-worker:"] = "👨‍💼";
	_g.h[":man_in_motorized_wheelchair:"] = "👨‍🦼";
	_g.h[":woman-shrugging:"] = "🤷‍♀️";
	_g.h[":balloon:"] = "🎈";
	_g.h[":clock1:"] = "🕐";
	_g.h[":curly_loop:"] = "➰";
	_g.h[":flag-ug:"] = "🇺🇬";
	_g.h[":no_good:"] = "🙅‍♀️";
	_g.h[":person_swimming_tone1:"] = "🏊🏻";
	_g.h[":woman_astronaut_tone5:"] = "👩🏿‍🚀";
	_g.h[":yellow_heart:"] = "💛";
	_g.h[":flag_Uzbekistan:"] = "🇺🇿";
	_g.h[":flag_cr:"] = "🇨🇷";
	_g.h[":graduation_cap:"] = "🎓";
	_g.h[":pray_tone3:"] = "🙏🏽";
	_g.h[":pregnant_man:"] = "🫃";
	_g.h[":repeat_one:"] = "🔂";
	_g.h[":speaker:"] = "🔈";
	_g.h[":tr:"] = "🇹🇷";
	_g.h[":chart_with_upwards_trend:"] = "📈";
	_g.h[":flag-vg:"] = "🇻🇬";
	_g.h[":man-juggling:"] = "🤹‍♂️";
	_g.h[":pouting_face:"] = "😡";
	_g.h[":skull_crossbones:"] = "☠";
	_g.h[":tm:"] = "™️";
	_g.h[":key2:"] = "🗝";
	_g.h[":man_rowing_boat_tone3:"] = "🚣🏽‍♂️";
	_g.h[":blond_haired_woman:"] = "👱‍♀️";
	_g.h[":mask:"] = "😷";
	_g.h[":sint_maarten:"] = "🇸🇽";
	_g.h[":tanabata_tree:"] = "🎋";
	_g.h[":bowing_woman:"] = "🙇‍♀️";
	_g.h[":call_me_tone3:"] = "🤙🏽";
	_g.h[":pouting_man:"] = "🙎‍♂️";
	_g.h[":woman_bouncing_ball_tone3:"] = "⛹🏽‍♀️";
	_g.h[":flag-tn:"] = "🇹🇳";
	_g.h[":flag_Nepal:"] = "🇳🇵";
	_g.h[":fox:"] = "🦊";
	_g.h[":notebook_with_decorative_cover:"] = "📔";
	_g.h[":tent:"] = "⛺";
	_g.h[":flag-sr:"] = "🇸🇷";
	_g.h[":woman_getting_face_massage_tone4:"] = "💆🏾‍♀️";
	_g.h[":woman’s_clothes:"] = "👚";
	_g.h[":aruba:"] = "🇦🇼";
	_g.h[":belgium:"] = "🇧🇪";
	_g.h[":custard:"] = "🍮";
	_g.h[":ear_tone3:"] = "👂🏽";
	_g.h[":female-artist:"] = "👩‍🎨";
	_g.h[":flag_Algeria:"] = "🇩🇿";
	_g.h[":ok_man:"] = "🙆‍♂️";
	_g.h[":singapore:"] = "🇸🇬";
	_g.h[":walking:"] = "🚶‍♂️";
	_g.h[":flag_dm:"] = "🇩🇲";
	_g.h[":man_mechanic:"] = "👨‍🔧";
	_g.h[":man_tipping_hand_tone5:"] = "💁🏿‍♂️";
	_g.h[":person_gesturing_no_tone5:"] = "🙅🏿";
	_g.h[":skin-tone-5:"] = "🏾";
	_g.h[":south_africa:"] = "🇿🇦";
	_g.h[":woman_wearing_turban_tone1:"] = "👳🏻‍♀️";
	_g.h[":carp_streamer:"] = "🎏";
	_g.h[":flag-sd:"] = "🇸🇩";
	_g.h[":ice_cube:"] = "🧊";
	_g.h[":outbox_tray:"] = "📤";
	_g.h[":telephone:"] = "☎";
	_g.h[":woman_student_tone4:"] = "👩🏾‍🎓";
	_g.h[":woman’s_sandal:"] = "👡";
	_g.h[":crown:"] = "👑";
	_g.h[":flag_British_Indian_Ocean_Territory:"] = "🇮🇴";
	_g.h[":man_mechanic_tone1:"] = "👨🏻‍🔧";
	_g.h[":man_playing_water_polo_tone2:"] = "🤽🏼‍♂️";
	_g.h[":sailboat:"] = "⛵";
	_g.h[":angry:"] = "😠";
	_g.h[":flag-nc:"] = "🇳🇨";
	_g.h[":flag_Colombia:"] = "🇨🇴";
	_g.h[":man_judge_tone2:"] = "👨🏼‍⚖️";
	_g.h[":south_sudan:"] = "🇸🇸";
	_g.h[":thumbsup_tone2:"] = "👍🏼";
	_g.h[":wc:"] = "🚾";
	_g.h[":ecuador:"] = "🇪🇨";
	_g.h[":floppy_disk:"] = "💾";
	_g.h[":moon:"] = "🌔";
	_g.h[":open_hands_tone5:"] = "👐🏿";
	_g.h[":fairy_tone2:"] = "🧚🏼";
	_g.h[":kissing_face:"] = "😗";
	_g.h[":people_hugging:"] = "🫂";
	_g.h[":Aries:"] = "♈";
	_g.h[":angel_tone1:"] = "👼🏻";
	_g.h[":flag-je:"] = "🇯🇪";
	_g.h[":heart_eyes:"] = "😍";
	_g.h[":man_biking_tone5:"] = "🚴🏿‍♂️";
	_g.h[":man_farmer_tone2:"] = "👨🏼‍🌾";
	_g.h[":person_doing_cartwheel_tone1:"] = "🤸🏻";
	_g.h[":person_in_bed:"] = "🛌";
	_g.h[":safety_pin:"] = "🧷";
	_g.h[":switzerland:"] = "🇨🇭";
	_g.h[":family_woman_woman_girl_boy:"] = "👩‍👩‍👧‍👦";
	_g.h[":flag_Poland:"] = "🇵🇱";
	_g.h[":hook:"] = "🪝";
	_g.h[":man_lifting_weights:"] = "🏋️‍♂️";
	_g.h[":volleyball:"] = "🏐";
	_g.h[":crystal_ball:"] = "🔮";
	_g.h[":face_vomiting:"] = "🤮";
	_g.h[":man_artist_tone4:"] = "👨🏾‍🎨";
	_g.h[":man_running_tone2:"] = "🏃🏼‍♂️";
	_g.h[":person_raising_hand_tone5:"] = "🙋🏿";
	_g.h[":red_heart:"] = "❤";
	_g.h[":woman_detective_tone3:"] = "🕵🏽‍♀️";
	_g.h[":clap:"] = "👏";
	_g.h[":flag_Kosovo:"] = "🇽🇰";
	_g.h[":facepunch:"] = "👊";
	_g.h[":large_orange_diamond:"] = "🔶";
	_g.h[":smiling_face_with_three_hearts:"] = "🥰";
	_g.h[":timer:"] = "⏲";
	_g.h[":flag-scotland:"] = "🏴󠁧󠁢󠁳󠁣󠁴󠁿";
	_g.h[":flag_pt:"] = "🇵🇹";
	_g.h[":right_facing_fist:"] = "🤜";
	_g.h[":female_supervillain:"] = "🦹‍♀️";
	_g.h[":input_numbers:"] = "🔢";
	_g.h[":lungs:"] = "🫁";
	_g.h[":person_gesturing_no_tone3:"] = "🙅🏽";
	_g.h[":vulcan:"] = "🖖";
	_g.h[":bed:"] = "🛏️";
	_g.h[":clock9:"] = "🕘";
	_g.h[":face_with_cowboy_hat:"] = "🤠";
	_g.h[":family_man_girl_boy:"] = "👨‍👧‍👦";
	_g.h[":flag_lu:"] = "🇱🇺";
	_g.h[":biking_woman:"] = "🚴‍♀️";
	_g.h[":breast-feeding:"] = "🤱";
	_g.h[":flag-am:"] = "🇦🇲";
	_g.h[":flag-eu:"] = "🇪🇺";
	_g.h[":flag_Congo_-_Kinshasa:"] = "🇨🇩";
	_g.h[":woman-facepalming:"] = "🤦‍♀️";
	_g.h[":woman_surfing_tone5:"] = "🏄🏿‍♀️";
	_g.h[":woman_swimming_tone5:"] = "🏊🏿‍♀️";
	_g.h[":keycap_9:"] = "9️⃣";
	_g.h[":flag-dm:"] = "🇩🇲";
	_g.h[":flag_mm:"] = "🇲🇲";
	_g.h[":flag_pm:"] = "🇵🇲";
	_g.h[":peace:"] = "☮";
	_g.h[":video_game:"] = "🎮";
	_g.h[":man_climbing_tone2:"] = "🧗🏼‍♂️";
	_g.h[":woman_factory_worker:"] = "👩‍🏭";
	_g.h[":woman_mechanic_tone5:"] = "👩🏿‍🔧";
	_g.h[":woman_raising_hand_tone4:"] = "🙋🏾‍♀️";
	_g.h[":clock1030:"] = "🕥";
	_g.h[":construction_worker_tone5:"] = "👷🏿";
	_g.h[":flag-za:"] = "🇿🇦";
	_g.h[":mauritius:"] = "🇲🇺";
	_g.h[":person_gesturing_no_tone4:"] = "🙅🏾";
	_g.h[":person_with_headscarf:"] = "🧕";
	_g.h[":selfie_tone3:"] = "🤳🏽";
	_g.h[":woman_artist_tone1:"] = "👩🏻‍🎨";
	_g.h[":pickup_truck:"] = "🛻";
	_g.h[":ringed_planet:"] = "🪐";
	_g.h[":flag-to:"] = "🇹🇴";
	_g.h[":left_arrow:"] = "⬅";
	_g.h[":person_lifting_weights_tone1:"] = "🏋🏻";
	_g.h[":snowman2:"] = "☃";
	_g.h[":family_man_man_boy:"] = "👨‍👨‍👦";
	_g.h[":fast_up_button:"] = "⏫";
	_g.h[":fencer:"] = "🤺";
	_g.h[":flag_Bahamas:"] = "🇧🇸";
	_g.h[":hot_pepper:"] = "🌶️";
	_g.h[":information:"] = "ℹ";
	_g.h[":man_playing_water_polo_tone1:"] = "🤽🏻‍♂️";
	_g.h[":salt:"] = "🧂";
	_g.h[":woman-pouting:"] = "🙎‍♀️";
	_g.h[":droplet:"] = "💧";
	_g.h[":flag_ms:"] = "🇲🇸";
	_g.h[":person_playing_handball_tone5:"] = "🤾🏿";
	_g.h[":woman_farmer_tone3:"] = "👩🏽‍🌾";
	_g.h[":barber_pole:"] = "💈";
	_g.h[":family_man_man_girl_girl:"] = "👨‍👨‍👧‍👧";
	_g.h[":flag_sg:"] = "🇸🇬";
	_g.h[":lantern:"] = "🏮";
	_g.h[":woman_shrugging_tone3:"] = "🤷🏽‍♀️";
	_g.h[":bolivia:"] = "🇧🇴";
	_g.h[":double_curly_loop:"] = "➿";
	_g.h[":scooter:"] = "🛴";
	_g.h[":thermometer:"] = "🌡️";
	_g.h[":woman_cook_tone3:"] = "👩🏽‍🍳";
	_g.h[":flag-cd:"] = "🇨🇩";
	_g.h[":flag_af:"] = "🇦🇫";
	_g.h[":handball_person:"] = "🤾";
	_g.h[":point_up_2:"] = "👆";
	_g.h[":raised_hand_tone3:"] = "✋🏽";
	_g.h[":supervillain_man:"] = "🦹‍♂️";
	_g.h[":woman_in_manual_wheelchair:"] = "👩‍🦽";
	_g.h[":volcano:"] = "🌋";
	_g.h[":women_with_bunny_ears:"] = "👯‍♀️";
	_g.h[":grey_question:"] = "❔";
	_g.h[":man_bowing:"] = "🙇‍♂️";
	_g.h[":man_pilot_tone4:"] = "👨🏾‍✈️";
	_g.h[":two_hearts:"] = "💕";
	_g.h[":up:"] = "🆙";
	_g.h[":alarm_clock:"] = "⏰";
	_g.h[":bee:"] = "🐝";
	_g.h[":boat:"] = "⛵";
	_g.h[":flag-gm:"] = "🇬🇲";
	_g.h[":horse_racing_tone2:"] = "🏇🏼";
	_g.h[":person_shrugging_tone1:"] = "🤷🏻";
	_g.h[":croatia:"] = "🇭🇷";
	_g.h[":flag-jo:"] = "🇯🇴";
	_g.h[":flag_tc:"] = "🇹🇨";
	_g.h[":man_in_tuxedo:"] = "🤵‍♂️";
	_g.h[":oyster:"] = "🦪";
	_g.h[":woman_walking_tone5:"] = "🚶🏿‍♀️";
	_g.h[":flag-kw:"] = "🇰🇼";
	_g.h[":flag_bg:"] = "🇧🇬";
	_g.h[":man_factory_worker_tone4:"] = "👨🏾‍🏭";
	_g.h[":mermaid_tone2:"] = "🧜🏼‍♀️";
	_g.h[":cityscape_at_dusk:"] = "🌆";
	_g.h[":rabbit:"] = "🐰";
	_g.h[":turkmenistan:"] = "🇹🇲";
	_g.h[":woman_genie:"] = "🧞‍♀️";
	_g.h[":flag_Finland:"] = "🇫🇮";
	_g.h[":love_you_gesture_tone3:"] = "🤟🏽";
	_g.h[":woman_in_steamy_room_tone4:"] = "🧖🏾‍♀️";
	_g.h[":woman_scientist_tone4:"] = "👩🏾‍🔬";
	_g.h[":zombie_woman:"] = "🧟‍♀️";
	_g.h[":flag-im:"] = "🇮🇲";
	_g.h[":flag_ky:"] = "🇰🇾";
	_g.h[":fleur-de-lis:"] = "⚜";
	_g.h[":dodo:"] = "🦤";
	_g.h[":person_playing_handball_tone4:"] = "🤾🏾";
	_g.h[":scarf:"] = "🧣";
	_g.h[":black_small_square:"] = "▪️";
	_g.h[":detective_tone4:"] = "🕵🏾";
	_g.h[":hut:"] = "🛖";
	_g.h[":moon_cake:"] = "🥮";
	_g.h[":man-boy-boy:"] = "👨‍👦‍👦";
	_g.h[":man_firefighter:"] = "👨‍🚒";
	_g.h[":monorail:"] = "🚝";
	_g.h[":person_getting_haircut:"] = "💇";
	_g.h[":sheaf_of_rice:"] = "🌾";
	_g.h[":woman_rowing_boat_tone2:"] = "🚣🏼‍♀️";
	_g.h[":Japanese_reserved_button:"] = "🈯";
	_g.h[":female-office-worker:"] = "👩‍💼";
	_g.h[":flag_ir:"] = "🇮🇷";
	_g.h[":person_doing_cartwheel_tone2:"] = "🤸🏼";
	_g.h[":racing_car:"] = "🏎️";
	_g.h[":yen_banknote:"] = "💴";
	_g.h[":cowboy:"] = "🤠";
	_g.h[":flag_Mayotte:"] = "🇾🇹";
	_g.h[":flag_ml:"] = "🇲🇱";
	_g.h[":snowman_with_snow:"] = "☃️";
	_g.h[":vampire_tone1:"] = "🧛🏻";
	_g.h[":white_haired_woman:"] = "👩‍🦳";
	_g.h[":baby_chick:"] = "🐤";
	_g.h[":man_getting_haircut_tone1:"] = "💇🏻‍♂️";
	_g.h[":poop:"] = "💩";
	_g.h[":snail:"] = "🐌";
	_g.h[":flag-kn:"] = "🇰🇳";
	_g.h[":left_facing_fist_tone3:"] = "🤛🏽";
	_g.h[":woman_construction_worker_tone3:"] = "👷🏽‍♀️";
	_g.h[":woman_with_headscarf:"] = "🧕";
	_g.h[":man_fairy_tone5:"] = "🧚🏿‍♂️";
	_g.h[":sierra_leone:"] = "🇸🇱";
	_g.h[":slight_smile:"] = "🙂";
	_g.h[":banana:"] = "🍌";
	_g.h[":flag_tr:"] = "🇹🇷";
	_g.h[":lithuania:"] = "🇱🇹";
	_g.h[":male_mage:"] = "🧙‍♂️";
	_g.h[":man_detective_tone4:"] = "🕵🏾‍♂️";
	_g.h[":open_hands_tone4:"] = "👐🏾";
	_g.h[":tshirt:"] = "👕";
	_g.h[":twelve_o’clock:"] = "🕛";
	_g.h[":flag-lb:"] = "🇱🇧";
	_g.h[":jeans:"] = "👖";
	_g.h[":man_student:"] = "👨‍🎓";
	_g.h[":middle_finger_tone5:"] = "🖕🏿";
	_g.h[":persevere:"] = "😣";
	_g.h[":palms_up_together_tone5:"] = "🤲🏿";
	_g.h[":person_biking:"] = "🚴";
	_g.h[":seven_o’clock:"] = "🕖";
	_g.h[":woman_shrugging_tone4:"] = "🤷🏾‍♀️";
	_g.h[":flag_hk:"] = "🇭🇰";
	_g.h[":mrs_claus_tone2:"] = "🤶🏼";
	_g.h[":underage:"] = "🔞";
	_g.h[":woman_factory_worker_tone1:"] = "👩🏻‍🏭";
	_g.h[":cricket_bat_and_ball:"] = "🏏";
	_g.h[":cyclone:"] = "🌀";
	_g.h[":genie_man:"] = "🧞‍♂️";
	_g.h[":new_caledonia:"] = "🇳🇨";
	_g.h[":point_up_tone2:"] = "☝🏼";
	_g.h[":prince:"] = "🤴";
	_g.h[":skull:"] = "💀";
	_g.h[":bellhop:"] = "🛎";
	_g.h[":flag_do:"] = "🇩🇴";
	_g.h[":raised_back_of_hand_tone3:"] = "🤚🏽";
	_g.h[":western_sahara:"] = "🇪🇭";
	_g.h[":woman_mechanic_tone4:"] = "👩🏾‍🔧";
	_g.h[":closed_lock_with_key:"] = "🔐";
	_g.h[":flag-mr:"] = "🇲🇷";
	_g.h[":flag_om:"] = "🇴🇲";
	_g.h[":flag_tf:"] = "🇹🇫";
	_g.h[":goal:"] = "🥅";
	_g.h[":secret:"] = "㊙️";
	_g.h[":sparkler:"] = "🎇";
	_g.h[":flag_co:"] = "🇨🇴";
	_g.h[":man_shrugging_tone4:"] = "🤷🏾‍♂️";
	_g.h[":seedling:"] = "🌱";
	_g.h[":feather:"] = "🪶";
	_g.h[":hand_splayed_tone1:"] = "🖐🏻";
	_g.h[":man_police_officer_tone3:"] = "👮🏽‍♂️";
	_g.h[":puzzle_piece:"] = "🧩";
	_g.h[":beans:"] = "🫘";
	_g.h[":flag_fr:"] = "🇫🇷";
	_g.h[":flag_Åland_Islands:"] = "🇦🇽";
	_g.h[":man_detective_tone1:"] = "🕵🏻‍♂️";
	_g.h[":palm_up_hand:"] = "🫴";
	_g.h[":person_in_steamy_room:"] = "🧖‍♂️";
	_g.h[":woman_scientist_tone1:"] = "👩🏻‍🔬";
	_g.h[":black_medium_square:"] = "◼️";
	_g.h[":flag_Ghana:"] = "🇬🇭";
	_g.h[":man_elf_tone4:"] = "🧝🏾‍♂️";
	_g.h[":ok_person:"] = "🙆";
	_g.h[":woman_wearing_turban_tone3:"] = "👳🏽‍♀️";
	_g.h[":cricket_game:"] = "🏏";
	_g.h[":flag-sj:"] = "🇸🇯";
	_g.h[":horse:"] = "🐴";
	_g.h[":man_cartwheeling_tone2:"] = "🤸🏼‍♂️";
	_g.h[":man_factory_worker_tone3:"] = "👨🏽‍🏭";
	_g.h[":thunder_cloud_and_rain:"] = "⛈️";
	_g.h[":watch:"] = "⌚";
	_g.h[":wheel:"] = "🛞";
	_g.h[":woman_fairy_tone4:"] = "🧚🏾‍♀️";
	_g.h[":hamster:"] = "🐹";
	_g.h[":male-artist:"] = "👨‍🎨";
	_g.h[":play_pause:"] = "⏯";
	_g.h[":point_down:"] = "👇";
	_g.h[":flag_Ascension_Island:"] = "🇦🇨";
	_g.h[":flag_Bahrain:"] = "🇧🇭";
	_g.h[":hammer_pick:"] = "⚒";
	_g.h[":monkey_face:"] = "🐵";
	_g.h[":face_blowing_a_kiss:"] = "😘";
	_g.h[":flag_Ecuador:"] = "🇪🇨";
	_g.h[":large_green_square:"] = "🟩";
	_g.h[":woman-juggling:"] = "🤹‍♀️";
	_g.h[":ear_tone4:"] = "👂🏾";
	_g.h[":man_health_worker_tone1:"] = "👨🏻‍⚕️";
	_g.h[":person_surfing_tone5:"] = "🏄🏿";
	_g.h[":snow-capped_mountain:"] = "🏔";
	_g.h[":flag_gl:"] = "🇬🇱";
	_g.h[":honey_pot:"] = "🍯";
	_g.h[":kiss_man_man:"] = "👨‍❤️‍💋‍👨";
	_g.h[":pregnant_woman_tone2:"] = "🤰🏼";
	_g.h[":spider:"] = "🕷️";
	_g.h[":woman_gesturing_no_tone3:"] = "🙅🏽‍♀️";
	_g.h[":face_savoring_food:"] = "😋";
	_g.h[":man_superhero:"] = "🦸‍♂️";
	_g.h[":mosquito:"] = "🦟";
	_g.h[":muted_speaker:"] = "🔇";
	_g.h[":red_envelope:"] = "🧧";
	_g.h[":woman_curly_hair:"] = "👩‍🦱";
	_g.h[":flag_Mexico:"] = "🇲🇽";
	_g.h[":man_tipping_hand_tone3:"] = "💁🏽‍♂️";
	_g.h[":fiji:"] = "🇫🇯";
	_g.h[":pouring_liquid:"] = "🫗";
	_g.h[":woman_getting_haircut_tone5:"] = "💇🏿‍♀️";
	_g.h[":man_lifting_weights_tone3:"] = "🏋🏽‍♂️";
	_g.h[":necktie:"] = "👔";
	_g.h[":rolled_up_newspaper:"] = "🗞️";
	_g.h[":place_of_worship:"] = "🛐";
	_g.h[":rain_cloud:"] = "🌧️";
	_g.h[":cop:"] = "👮‍♂️";
	_g.h[":jar:"] = "🫙";
	_g.h[":man-bowing:"] = "🙇‍♂️";
	_g.h[":flag-sn:"] = "🇸🇳";
	_g.h[":flag_Rwanda:"] = "🇷🇼";
	_g.h[":man_mountain_biking_tone4:"] = "🚵🏾‍♂️";
	_g.h[":palms_up_together_tone3:"] = "🤲🏽";
	_g.h[":snowboarder_tone5:"] = "🏂🏿";
	_g.h[":building_construction:"] = "🏗️";
	_g.h[":canoe:"] = "🛶";
	_g.h[":woman_getting_face_massage_tone5:"] = "💆🏿‍♀️";
	_g.h[":accept:"] = "🉑";
	_g.h[":flag_rw:"] = "🇷🇼";
	_g.h[":hot_dog:"] = "🌭";
	_g.h[":pouting_woman:"] = "🙎‍♀️";
	_g.h[":circus_tent:"] = "🎪";
	_g.h[":flag-eh:"] = "🇪🇭";
	_g.h[":flag_Bosnia_&_Herzegovina:"] = "🇧🇦";
	_g.h[":iran:"] = "🇮🇷";
	_g.h[":kiss:"] = "💋";
	_g.h[":lion_face:"] = "🦁";
	_g.h[":metro:"] = "🚇";
	_g.h[":see-no-evil_monkey:"] = "🙈";
	_g.h[":blue_heart:"] = "💙";
	_g.h[":fishing_pole:"] = "🎣";
	_g.h[":mage_tone1:"] = "🧙🏻";
	_g.h[":part_alternation_mark:"] = "〽️";
	_g.h[":face_without_mouth:"] = "😶";
	_g.h[":flag_np:"] = "🇳🇵";
	_g.h[":nose_tone1:"] = "👃🏻";
	_g.h[":rock:"] = "🪨";
	_g.h[":scream:"] = "😱";
	_g.h[":left-right_arrow:"] = "↔";
	_g.h[":person_getting_haircut_tone1:"] = "💇🏻";
	_g.h[":trident_emblem:"] = "🔱";
	_g.h[":dragon:"] = "🐉";
	_g.h[":flag_Germany:"] = "🇩🇪";
	_g.h[":horse_racing_tone3:"] = "🏇🏽";
	_g.h[":crying_face:"] = "😢";
	_g.h[":laos:"] = "🇱🇦";
	_g.h[":mag_right:"] = "🔎";
	_g.h[":one_o’clock:"] = "🕐";
	_g.h[":black_medium-small_square:"] = "◾";
	_g.h[":family_woman_woman_boy:"] = "👩‍👩‍👦";
	_g.h[":flag_bf:"] = "🇧🇫";
	_g.h[":jordan:"] = "🇯🇴";
	_g.h[":man_pilot:"] = "👨‍✈️";
	_g.h[":monaco:"] = "🇲🇨";
	_g.h[":turkey:"] = "🦃";
	_g.h[":flag_ac:"] = "🇦🇨";
	_g.h[":man_elf:"] = "🧝‍♂️";
	_g.h[":tipping_hand_person:"] = "💁";
	_g.h[":woman_elf_tone5:"] = "🧝🏿‍♀️";
	_g.h[":womans_clothes:"] = "👚";
	_g.h[":magnet:"] = "🧲";
	_g.h[":spock-hand:"] = "🖖";
	_g.h[":st_martin:"] = "🇲🇫";
	_g.h[":woman-boy:"] = "👩‍👦";
	_g.h[":clock11:"] = "🕚";
	_g.h[":flag_ng:"] = "🇳🇬";
	_g.h[":guard_tone4:"] = "💂🏾";
	_g.h[":man_lifting_weights_tone2:"] = "🏋🏼‍♂️";
	_g.h[":man_pouting_tone4:"] = "🙎🏾‍♂️";
	_g.h[":thumbsup_tone3:"] = "👍🏽";
	_g.h[":woman_golfing:"] = "🏌️‍♀️";
	_g.h[":woman_teacher_tone2:"] = "👩🏼‍🏫";
	_g.h[":woman_vampire_tone2:"] = "🧛🏼‍♀️";
	_g.h[":bhutan:"] = "🇧🇹";
	_g.h[":field_hockey_stick_and_ball:"] = "🏑";
	_g.h[":knot:"] = "🪢";
	_g.h[":male-farmer:"] = "👨‍🌾";
	_g.h[":meat_on_bone:"] = "🍖";
	_g.h[":older_man_tone2:"] = "👴🏼";
	_g.h[":person_rowing_boat:"] = "🚣";
	_g.h[":dancer_tone3:"] = "💃🏽";
	_g.h[":family:"] = "👨‍👩‍👦";
	_g.h[":flag-ye:"] = "🇾🇪";
	_g.h[":judge:"] = "🧑‍⚖️";
	_g.h[":man_tone5:"] = "👨🏿";
	_g.h[":man_wearing_turban_tone1:"] = "👳🏻‍♂️";
	_g.h[":open_hands_tone3:"] = "👐🏽";
	_g.h[":sao_tome_principe:"] = "🇸🇹";
	_g.h[":v_tone5:"] = "✌🏿";
	_g.h[":arrow_lower_left:"] = "↙️";
	_g.h[":flag-ph:"] = "🇵🇭";
	_g.h[":flag_Cape_Verde:"] = "🇨🇻";
	_g.h[":flag_az:"] = "🇦🇿";
	_g.h[":guatemala:"] = "🇬🇹";
	_g.h[":repeat_single_button:"] = "🔂";
	_g.h[":angry_face_with_horns:"] = "👿";
	_g.h[":family_man_boy_boy:"] = "👨‍👦‍👦";
	_g.h[":flag_au:"] = "🇦🇺";
	_g.h[":fried_egg:"] = "🍳";
	_g.h[":bathtub:"] = "🛁";
	_g.h[":flag-mg:"] = "🇲🇬";
	_g.h[":admission_tickets:"] = "🎟️";
	_g.h[":clock930:"] = "🕤";
	_g.h[":large_purple_square:"] = "🟪";
	_g.h[":woozy_face:"] = "🥴";
	_g.h[":child_tone5:"] = "🧒🏿";
	_g.h[":female-construction-worker:"] = "👷‍♀️";
	_g.h[":flag-gh:"] = "🇬🇭";
	_g.h[":sleuth_or_spy:"] = "🕵️‍♂️";
	_g.h[":swan:"] = "🦢";
	_g.h[":face_with_peeking_eye:"] = "🫣";
	_g.h[":man_elf_tone5:"] = "🧝🏿‍♂️";
	_g.h[":vampire_tone2:"] = "🧛🏼";
	_g.h[":wheelchair:"] = "♿";
	_g.h[":construction_worker:"] = "👷‍♂️";
	_g.h[":equatorial_guinea:"] = "🇬🇶";
	_g.h[":flag-ki:"] = "🇰🇮";
	_g.h[":kr:"] = "🇰🇷";
	_g.h[":large_blue_diamond:"] = "🔷";
	_g.h[":link:"] = "🔗";
	_g.h[":merperson_tone2:"] = "🧜🏼";
	_g.h[":mountain_railway:"] = "🚞";
	_g.h[":woman_playing_water_polo_tone4:"] = "🤽🏾‍♀️";
	_g.h[":adhesive_bandage:"] = "🩹";
	_g.h[":flag_cw:"] = "🇨🇼";
	_g.h[":man_dancing:"] = "🕺";
	_g.h[":man_raising_hand_tone4:"] = "🙋🏾‍♂️";
	_g.h[":princess_tone5:"] = "👸🏿";
	_g.h[":woman_judge_tone5:"] = "👩🏿‍⚖️";
	_g.h[":backhand_index_pointing_up:"] = "👆";
	_g.h[":couplekiss_man_woman:"] = "👩‍❤️‍💋‍👨";
	_g.h[":crossed_flags:"] = "🎌";
	_g.h[":fingers_crossed:"] = "🤞";
	_g.h[":flag-bo:"] = "🇧🇴";
	_g.h[":pouting_cat:"] = "😾";
	_g.h[":pray:"] = "🙏";
	_g.h[":spiral_note_pad:"] = "🗒️";
	_g.h[":wolf:"] = "🐺";
	_g.h[":fist_tone4:"] = "✊🏾";
	_g.h[":flag_iq:"] = "🇮🇶";
	_g.h[":man_farmer_tone4:"] = "👨🏾‍🌾";
	_g.h[":nut_and_bolt:"] = "🔩";
	_g.h[":person_in_bed_tone4:"] = "🛌🏾";
	_g.h[":projector:"] = "📽";
	_g.h[":white_medium-small_square:"] = "◽";
	_g.h[":woman_cartwheeling_tone1:"] = "🤸🏻‍♀️";
	_g.h[":flag_St._Pierre_&_Miquelon:"] = "🇵🇲";
	_g.h[":flag_jo:"] = "🇯🇴";
	_g.h[":person_playing_handball:"] = "🤾";
	_g.h[":woman_facepalming_tone1:"] = "🤦🏻‍♀️";
	_g.h[":woman_gesturing_no_tone1:"] = "🙅🏻‍♀️";
	_g.h[":five:"] = "5️⃣";
	_g.h[":man_tipping_hand:"] = "💁‍♂️";
	_g.h[":person_facepalming_tone5:"] = "🤦🏿";
	_g.h[":person_frowning_tone5:"] = "🙍🏿";
	_g.h[":woman_pilot_tone1:"] = "👩🏻‍✈️";
	_g.h[":flag_Japan:"] = "🇯🇵";
	_g.h[":flag_tn:"] = "🇹🇳";
	_g.h[":man_judge_tone3:"] = "👨🏽‍⚖️";
	_g.h[":monocle_face:"] = "🧐";
	_g.h[":otter:"] = "🦦";
	_g.h[":star_struck:"] = "🤩";
	_g.h[":white_hair:"] = "🦳";
	_g.h[":flag-mp:"] = "🇲🇵";
	_g.h[":flag_Norway:"] = "🇳🇴";
	_g.h[":indonesia:"] = "🇮🇩";
	_g.h[":astonished_face:"] = "😲";
	_g.h[":person_swimming_tone3:"] = "🏊🏽";
	_g.h[":red_triangle_pointed_down:"] = "🔻";
	_g.h[":flag-pw:"] = "🇵🇼";
	_g.h[":flag_id:"] = "🇮🇩";
	_g.h[":man_singer:"] = "👨‍🎤";
	_g.h[":right-facing_fist:"] = "🤜";
	_g.h[":skin-tone-3:"] = "🏼";
	_g.h[":walking_woman:"] = "🚶‍♀️";
	_g.h[":Japanese_vacancy_button:"] = "🈳";
	_g.h[":armenia:"] = "🇦🇲";
	_g.h[":flag_Albania:"] = "🇦🇱";
	_g.h[":flag_by:"] = "🇧🇾";
	_g.h[":flag_nu:"] = "🇳🇺";
	_g.h[":hear-no-evil_monkey:"] = "🙉";
	_g.h[":octopus:"] = "🐙";
	_g.h[":rainbow-flag:"] = "🏳️‍🌈";
	_g.h[":asterisk:"] = "*️⃣";
	_g.h[":climbing_woman:"] = "🧗‍♀️";
	_g.h[":field_hockey:"] = "🏑";
	_g.h[":lady_beetle:"] = "🐞";
	_g.h[":leopard:"] = "🐆";
	_g.h[":man_bald:"] = "👨‍🦲";
	_g.h[":dancing_women:"] = "👯‍♀️";
	_g.h[":flag_um:"] = "🇺🇲";
	_g.h[":keycap_5:"] = "5️⃣";
	_g.h[":red_triangle_pointed_up:"] = "🔺";
	_g.h[":woman_office_worker_tone2:"] = "👩🏼‍💼";
	_g.h[":flag_nr:"] = "🇳🇷";
	_g.h[":muscle:"] = "💪";
	_g.h[":pager:"] = "📟";
	_g.h[":woman_with_headscarf_tone4:"] = "🧕🏾";
	_g.h[":flag-sb:"] = "🇸🇧";
	_g.h[":index_pointing_up:"] = "☝";
	_g.h[":paperclip:"] = "📎";
	_g.h[":flag_Caribbean_Netherlands:"] = "🇧🇶";
	_g.h[":netherlands:"] = "🇳🇱";
	_g.h[":tractor:"] = "🚜";
	_g.h[":wallis_futuna:"] = "🇼🇫";
	_g.h[":writing_hand_tone3:"] = "✍🏽";
	_g.h[":flag-gw:"] = "🇬🇼";
	_g.h[":flag_Guyana:"] = "🇬🇾";
	_g.h[":man_playing_handball:"] = "🤾‍♂️";
	_g.h[":person_cartwheeling:"] = "🤸";
	_g.h[":flag-cu:"] = "🇨🇺";
	_g.h[":hand_with_fingers_splayed:"] = "🖐";
	_g.h[":man_gesturing_no_tone1:"] = "🙅🏻‍♂️";
	_g.h[":supervillain:"] = "🦹";
	_g.h[":ten-thirty:"] = "🕥";
	_g.h[":woman_in_lotus_position_tone2:"] = "🧘🏼‍♀️";
	_g.h[":flag_je:"] = "🇯🇪";
	_g.h[":flag_td:"] = "🇹🇩";
	_g.h[":merperson_tone5:"] = "🧜🏿";
	_g.h[":person_pouting_tone4:"] = "🙎🏾";
	_g.h[":boxing_glove:"] = "🥊";
	_g.h[":flag-cf:"] = "🇨🇫";
	_g.h[":flag_Hong_Kong_SAR_China:"] = "🇭🇰";
	_g.h[":flag_gi:"] = "🇬🇮";
	_g.h[":flag_sz:"] = "🇸🇿";
	_g.h[":input_latin_uppercase:"] = "🔠";
	_g.h[":nose_tone4:"] = "👃🏾";
	_g.h[":right_arrow:"] = "➡";
	_g.h[":thought_balloon:"] = "💭";
	_g.h[":woman_artist:"] = "👩‍🎨";
	_g.h[":yarn:"] = "🧶";
	_g.h[":man-wrestling:"] = "🤼‍♂️";
	_g.h[":person_pouting_tone2:"] = "🙎🏼";
	_g.h[":person_wearing_turban_tone4:"] = "👳🏾";
	_g.h[":rat:"] = "🐀";
	_g.h[":umbrella:"] = "☂️";
	_g.h[":woman-raising-hand:"] = "🙋‍♀️";
	_g.h[":flag-lk:"] = "🇱🇰";
	_g.h[":flag-rw:"] = "🇷🇼";
	_g.h[":high_brightness:"] = "🔆";
	_g.h[":newspaper2:"] = "🗞";
	_g.h[":punch_tone4:"] = "👊🏾";
	_g.h[":six_pointed_star:"] = "🔯";
	_g.h[":thumbsdown_tone1:"] = "👎🏻";
	_g.h[":cloud_with_rain:"] = "🌧";
	_g.h[":curly_hair:"] = "🦱";
	_g.h[":man_playing_handball_tone5:"] = "🤾🏿‍♂️";
	_g.h[":waving_black_flag:"] = "🏴";
	_g.h[":man_in_manual_wheelchair:"] = "👨‍🦽";
	_g.h[":raised_hand_with_fingers_splayed:"] = "🖐️";
	_g.h[":dancer_tone2:"] = "💃🏼";
	_g.h[":flag_Marshall_Islands:"] = "🇲🇭";
	_g.h[":flag_New_Zealand:"] = "🇳🇿";
	_g.h[":flag_Russia:"] = "🇷🇺";
	_g.h[":man_climbing_tone3:"] = "🧗🏽‍♂️";
	_g.h[":back:"] = "🔙";
	_g.h[":tipping_hand_man:"] = "💁‍♂️";
	_g.h[":crossed_swords:"] = "⚔️";
	_g.h[":man_golfing_tone5:"] = "🏌🏿‍♂️";
	_g.h[":man_scientist_tone5:"] = "👨🏿‍🔬";
	_g.h[":person_bowing_tone2:"] = "🙇🏼";
	_g.h[":bowling:"] = "🎳";
	_g.h[":flag-io:"] = "🇮🇴";
	_g.h[":flag_Gibraltar:"] = "🇬🇮";
	_g.h[":flag_North_Korea:"] = "🇰🇵";
	_g.h[":green_apple:"] = "🍏";
	_g.h[":ledger:"] = "📒";
	_g.h[":A_button_(blood_type):"] = "🅰";
	_g.h[":computer_mouse:"] = "🖱";
	_g.h[":spade_suit:"] = "♠";
	_g.h[":frowning:"] = "😦";
	_g.h[":socks:"] = "🧦";
	_g.h[":woman_pouting_tone5:"] = "🙎🏿‍♀️";
	_g.h[":angry_face:"] = "😠";
	_g.h[":flag_dg:"] = "🇩🇬";
	_g.h[":leafy_green:"] = "🥬";
	_g.h[":Japanese_dolls:"] = "🎎";
	_g.h[":ghana:"] = "🇬🇭";
	_g.h[":woman_golfing_tone1:"] = "🏌🏻‍♀️";
	_g.h[":clock830:"] = "🕣";
	_g.h[":slot_machine:"] = "🎰";
	_g.h[":bomb:"] = "💣";
	_g.h[":family_man_woman_boy_boy:"] = "👨‍👩‍👦‍👦";
	_g.h[":flag_Bangladesh:"] = "🇧🇩";
	_g.h[":flag_Liechtenstein:"] = "🇱🇮";
	_g.h[":frowning_face:"] = "☹";
	_g.h[":metal_tone4:"] = "🤘🏾";
	_g.h[":samoa:"] = "🇼🇸";
	_g.h[":elf_tone5:"] = "🧝🏿";
	_g.h[":flag_Namibia:"] = "🇳🇦";
	_g.h[":man_frowning:"] = "🙍‍♂️";
	_g.h[":person_getting_massage_tone4:"] = "💆🏾";
	_g.h[":woman_gesturing_ok_tone5:"] = "🙆🏿‍♀️";
	_g.h[":child_tone2:"] = "🧒🏼";
	_g.h[":double_exclamation_mark:"] = "‼";
	_g.h[":man_firefighter_tone4:"] = "👨🏾‍🚒";
	_g.h[":woman-frowning:"] = "🙍‍♀️";
	_g.h[":card_index:"] = "📇";
	_g.h[":firefighter:"] = "🧑‍🚒";
	_g.h[":flag_Martinique:"] = "🇲🇶";
	_g.h[":flag_Portugal:"] = "🇵🇹";
	_g.h[":flag_Suriname:"] = "🇸🇷";
	_g.h[":flag_pw:"] = "🇵🇼";
	_g.h[":keycap_8:"] = "8️⃣";
	_g.h[":man_lifting_weights_tone4:"] = "🏋🏾‍♂️";
	_g.h[":dolphin:"] = "🐬";
	_g.h[":falkland_islands:"] = "🇫🇰";
	_g.h[":orthodox_cross:"] = "☦️";
	_g.h[":phone:"] = "☎️";
	_g.h[":vampire_tone3:"] = "🧛🏽";
	_g.h[":woman_mage_tone5:"] = "🧙🏿‍♀️";
	_g.h[":woman_pouting_tone4:"] = "🙎🏾‍♀️";
	_g.h[":OK_hand:"] = "👌";
	_g.h[":female-farmer:"] = "👩‍🌾";
	_g.h[":flag_ma:"] = "🇲🇦";
	_g.h[":french_southern_territories:"] = "🇹🇫";
	_g.h[":person_walking_tone1:"] = "🚶🏻";
	_g.h[":pinched_fingers:"] = "🤌";
	_g.h[":downwards_button:"] = "🔽";
	_g.h[":fearful:"] = "😨";
	_g.h[":kiss_mark:"] = "💋";
	_g.h[":person_walking_tone5:"] = "🚶🏿";
	_g.h[":woman_student:"] = "👩‍🎓";
	_g.h[":Sagittarius:"] = "♐";
	_g.h[":ear_with_hearing_aid:"] = "🦻";
	_g.h[":man_farmer_tone3:"] = "👨🏽‍🌾";
	_g.h[":man_running_tone4:"] = "🏃🏾‍♂️";
	_g.h[":person_mountain_biking_tone1:"] = "🚵🏻";
	_g.h[":busts_in_silhouette:"] = "👥";
	_g.h[":cloud_with_lightning:"] = "🌩";
	_g.h[":cow2:"] = "🐄";
	_g.h[":glowing_star:"] = "🌟";
	_g.h[":love_you_gesture:"] = "🤟";
	_g.h[":flag_mo:"] = "🇲🇴";
	_g.h[":no_one_under_eighteen:"] = "🔞";
	_g.h[":smiley_cat:"] = "😺";
	_g.h[":clown:"] = "🤡";
	_g.h[":elf:"] = "🧝‍♂️";
	_g.h[":flag_Kiribati:"] = "🇰🇮";
	_g.h[":georgia:"] = "🇬🇪";
	_g.h[":point_left_tone5:"] = "👈🏿";
	_g.h[":vampire:"] = "🧛‍♀️";
	_g.h[":woman_playing_handball_tone4:"] = "🤾🏾‍♀️";
	_g.h[":computer:"] = "💻";
	_g.h[":farmer:"] = "🧑‍🌾";
	_g.h[":flag_bn:"] = "🇧🇳";
	_g.h[":flag_ni:"] = "🇳🇮";
	_g.h[":footprints:"] = "👣";
	_g.h[":person_feeding_baby:"] = "🧑‍🍼";
	_g.h[":biohazard:"] = "☣";
	_g.h[":face_with_open_eyes_and_hand_over_mouth:"] = "🫢";
	_g.h[":flag-pe:"] = "🇵🇪";
	_g.h[":genie_woman:"] = "🧞‍♀️";
	_g.h[":grinning_face:"] = "😀";
	_g.h[":linked_paperclips:"] = "🖇️";
	_g.h[":man_cartwheeling_tone1:"] = "🤸🏻‍♂️";
	_g.h[":electric_plug:"] = "🔌";
	_g.h[":envelope:"] = "✉";
	_g.h[":flag_kn:"] = "🇰🇳";
	_g.h[":lower_left_fountain_pen:"] = "🖋️";
	_g.h[":t-shirt:"] = "👕";
	_g.h[":moldova:"] = "🇲🇩";
	_g.h[":person_getting_massage_tone5:"] = "💆🏿";
	_g.h[":qatar:"] = "🇶🇦";
	_g.h[":dark_sunglasses:"] = "🕶️";
	_g.h[":flag-pr:"] = "🇵🇷";
	_g.h[":flag_Nauru:"] = "🇳🇷";
	_g.h[":flag_ws:"] = "🇼🇸";
	_g.h[":man-rowing-boat:"] = "🚣‍♂️";
	_g.h[":man_rowing_boat_tone1:"] = "🚣🏻‍♂️";
	_g.h[":smirk_cat:"] = "😼";
	_g.h[":tipping_hand_woman:"] = "💁‍♀️";
	_g.h[":woman_construction_worker_tone1:"] = "👷🏻‍♀️";
	_g.h[":baby_tone1:"] = "👶🏻";
	_g.h[":clipperton_island:"] = "🇨🇵";
	_g.h[":eu:"] = "🇪🇺";
	_g.h[":flag_Greenland:"] = "🇬🇱";
	_g.h[":man_climbing_tone5:"] = "🧗🏿‍♂️";
	_g.h[":poultry_leg:"] = "🍗";
	_g.h[":speaker_high_volume:"] = "🔊";
	_g.h[":shoe:"] = "👞";
	_g.h[":takeout_box:"] = "🥡";
	_g.h[":timor_leste:"] = "🇹🇱";
	_g.h[":blush:"] = "😊";
	_g.h[":flag_Burundi:"] = "🇧🇮";
	_g.h[":man_vampire_tone3:"] = "🧛🏽‍♂️";
	_g.h[":soap:"] = "🧼";
	_g.h[":stew:"] = "🍲";
	_g.h[":anatomical_heart:"] = "🫀";
	_g.h[":grapes:"] = "🍇";
	_g.h[":park:"] = "🏞";
	_g.h[":person_frowning_tone4:"] = "🙍🏾";
	_g.h[":right_arrow_curving_down:"] = "⤵";
	_g.h[":woman_in_motorized_wheelchair:"] = "👩‍🦼";
	_g.h[":loop:"] = "➿";
	_g.h[":two-hump_camel:"] = "🐫";
	_g.h[":woman-kiss-man:"] = "👩‍❤️‍💋‍👨";
	_g.h[":arrow_double_up:"] = "⏫";
	_g.h[":flag_ls:"] = "🇱🇸";
	_g.h[":woman-woman-boy:"] = "👩‍👩‍👦";
	_g.h[":artist_palette:"] = "🎨";
	_g.h[":end:"] = "🔚";
	_g.h[":panda:"] = "🐼";
	_g.h[":school_satchel:"] = "🎒";
	_g.h[":woman_playing_water_polo_tone1:"] = "🤽🏻‍♀️";
	_g.h[":flag_Peru:"] = "🇵🇪";
	_g.h[":leaves:"] = "🍃";
	_g.h[":man-woman-boy-boy:"] = "👨‍👩‍👦‍👦";
	_g.h[":man_frowning_tone4:"] = "🙍🏾‍♂️";
	_g.h[":pause_button:"] = "⏸";
	_g.h[":smiling_face:"] = "☺";
	_g.h[":wood:"] = "🪵";
	_g.h[":atom_symbol:"] = "⚛️";
	_g.h[":beaming_face_with_smiling_eyes:"] = "😁";
	_g.h[":fish:"] = "🐟";
	_g.h[":flag-ma:"] = "🇲🇦";
	_g.h[":flag_gd:"] = "🇬🇩";
	_g.h[":open_hands:"] = "👐";
	_g.h[":woman_technologist_tone4:"] = "👩🏾‍💻";
	_g.h[":badminton:"] = "🏸";
	_g.h[":man_pilot_tone5:"] = "👨🏿‍✈️";
	_g.h[":flag-mm:"] = "🇲🇲";
	_g.h[":flag_Honduras:"] = "🇭🇳";
	_g.h[":izakaya_lantern:"] = "🏮";
	_g.h[":badminton_racquet_and_shuttlecock:"] = "🏸";
	_g.h[":convenience_store:"] = "🏪";
	_g.h[":couple_with_heart_man_man:"] = "👨‍❤️‍👨";
	_g.h[":flag_Djibouti:"] = "🇩🇯";
	_g.h[":flag_Gabon:"] = "🇬🇦";
	_g.h[":foot:"] = "🦶";
	_g.h[":jersey:"] = "🇯🇪";
	_g.h[":person_surfing_tone4:"] = "🏄🏾";
	_g.h[":fork_and_knife_with_plate:"] = "🍽";
	_g.h[":man_dancing_tone1:"] = "🕺🏻";
	_g.h[":twisted_rightwards_arrows:"] = "🔀";
	_g.h[":man_construction_worker_tone5:"] = "👷🏿‍♂️";
	_g.h[":man_getting_face_massage_tone2:"] = "💆🏼‍♂️";
	_g.h[":tristan_da_cunha:"] = "🇹🇦";
	_g.h[":hugging_face:"] = "🤗";
	_g.h[":mammoth:"] = "🦣";
	_g.h[":man_factory_worker_tone1:"] = "👨🏻‍🏭";
	_g.h[":map_of_Japan:"] = "🗾";
	_g.h[":woman_tipping_hand_tone3:"] = "💁🏽‍♀️";
	_g.h[":woman_vampire_tone3:"] = "🧛🏽‍♀️";
	_g.h[":flag_kh:"] = "🇰🇭";
	_g.h[":flag_mk:"] = "🇲🇰";
	_g.h[":man_golfing_tone4:"] = "🏌🏾‍♂️";
	_g.h[":person_gesturing_ok_tone1:"] = "🙆🏻";
	_g.h[":recycle:"] = "♻️";
	_g.h[":VS_button:"] = "🆚";
	_g.h[":face_screaming_in_fear:"] = "😱";
	_g.h[":flag-tg:"] = "🇹🇬";
	_g.h[":man_frowning_tone5:"] = "🙍🏿‍♂️";
	_g.h[":man_swimming_tone5:"] = "🏊🏿‍♂️";
	_g.h[":money_with_wings:"] = "💸";
	_g.h[":nerd_face:"] = "🤓";
	_g.h[":older_adult_tone2:"] = "🧓🏼";
	_g.h[":ring:"] = "💍";
	_g.h[":romania:"] = "🇷🇴";
	_g.h[":smiley:"] = "😃";
	_g.h[":clock1130:"] = "🕦";
	_g.h[":cyprus:"] = "🇨🇾";
	_g.h[":flag-is:"] = "🇮🇸";
	_g.h[":flag_Myanmar_(Burma):"] = "🇲🇲";
	_g.h[":handshake:"] = "🤝";
	_g.h[":ticket:"] = "🎫";
	_g.h[":tophat:"] = "🎩";
	_g.h[":flag_Cayman_Islands:"] = "🇰🇾";
	_g.h[":older_woman_tone4:"] = "👵🏾";
	_g.h[":goal_net:"] = "🥅";
	_g.h[":man_gesturing_ok:"] = "🙆‍♂️";
	_g.h[":person_playing_water_polo_tone3:"] = "🤽🏽";
	_g.h[":man_mountain_biking:"] = "🚵‍♂️";
	_g.h[":put_litter_in_its_place:"] = "🚮";
	_g.h[":shark:"] = "🦈";
	_g.h[":woman_juggling_tone3:"] = "🤹🏽‍♀️";
	_g.h[":female-firefighter:"] = "👩‍🚒";
	_g.h[":flag-py:"] = "🇵🇾";
	_g.h[":nepal:"] = "🇳🇵";
	_g.h[":flag-tl:"] = "🇹🇱";
	_g.h[":flag_tk:"] = "🇹🇰";
	_g.h[":knife_fork_plate:"] = "🍽️";
	_g.h[":motorcycle:"] = "🏍";
	_g.h[":upside_down_face:"] = "🙃";
	_g.h[":woman_gesturing_NO:"] = "🙅‍♀️";
	_g.h[":flag_lv:"] = "🇱🇻";
	_g.h[":interrobang:"] = "⁉️";
	_g.h[":red_haired_woman:"] = "👩‍🦰";
	_g.h[":sparkling_heart:"] = "💖";
	_g.h[":sleeping_accommodation:"] = "🛌";
	_g.h[":waving_hand:"] = "👋";
	_g.h[":ear_of_corn:"] = "🌽";
	_g.h[":hand_splayed_tone2:"] = "🖐🏼";
	_g.h[":luxembourg:"] = "🇱🇺";
	_g.h[":person_wearing_turban_tone5:"] = "👳🏿";
	_g.h[":woman_lifting_weights_tone1:"] = "🏋🏻‍♀️";
	_g.h[":clock730:"] = "🕢";
	_g.h[":construction_site:"] = "🏗";
	_g.h[":flag-ir:"] = "🇮🇷";
	_g.h[":flag-nl:"] = "🇳🇱";
	_g.h[":flag_pa:"] = "🇵🇦";
	_g.h[":kazakhstan:"] = "🇰🇿";
	_g.h[":mailbox_with_no_mail:"] = "📭";
	_g.h[":man_farmer:"] = "👨‍🌾";
	_g.h[":studio_microphone:"] = "🎙️";
	_g.h[":blond-haired_man_tone5:"] = "👱🏿‍♂️";
	_g.h[":flag_Kuwait:"] = "🇰🇼";
	_g.h[":man_getting_haircut_tone3:"] = "💇🏽‍♂️";
	_g.h[":point_up_2_tone2:"] = "👆🏼";
	_g.h[":princess_tone3:"] = "👸🏽";
	_g.h[":sagittarius:"] = "♐";
	_g.h[":st_helena:"] = "🇸🇭";
	_g.h[":thumbsdown:"] = "👎";
	_g.h[":us_outlying_islands:"] = "🇺🇲";
	_g.h[":closed_book:"] = "📕";
	_g.h[":woman_technologist_tone1:"] = "👩🏻‍💻";
	_g.h[":black_left_pointing_double_triangle_with_vertical_bar:"] = "⏮️";
	_g.h[":fairy_tone5:"] = "🧚🏿";
	_g.h[":merperson_tone3:"] = "🧜🏽";
	_g.h[":flag_St._Helena:"] = "🇸🇭";
	_g.h[":mans_shoe:"] = "👞";
	_g.h[":boy:"] = "👦";
	_g.h[":ear_tone2:"] = "👂🏼";
	_g.h[":flag_Italy:"] = "🇮🇹";
	_g.h[":person_playing_water_polo_tone5:"] = "🤽🏿";
	_g.h[":synagogue:"] = "🕍";
	_g.h[":water_polo:"] = "🤽";
	_g.h[":woman_in_lotus_position_tone4:"] = "🧘🏾‍♀️";
	_g.h[":bath_tone3:"] = "🛀🏽";
	_g.h[":crab:"] = "🦀";
	_g.h[":flag_cl:"] = "🇨🇱";
	_g.h[":man_mage_tone5:"] = "🧙🏿‍♂️";
	_g.h[":man_playing_water_polo_tone5:"] = "🤽🏿‍♂️";
	_g.h[":person_taking_bath:"] = "🛀";
	_g.h[":flag-iq:"] = "🇮🇶";
	_g.h[":keycap_*:"] = "*️⃣";
	_g.h[":person_in_steamy_room_tone4:"] = "🧖🏾";
	_g.h[":older_woman_tone3:"] = "👵🏽";
	_g.h[":ram:"] = "🐏";
	_g.h[":winking_face:"] = "😉";
	_g.h[":flag-me:"] = "🇲🇪";
	_g.h[":gun:"] = "🔫";
	_g.h[":person_with_pouting_face:"] = "🙎‍♀️";
	_g.h[":trinidad_tobago:"] = "🇹🇹";
	_g.h[":Mrs._Claus:"] = "🤶";
	_g.h[":raised_eyebrow:"] = "🤨";
	_g.h[":b:"] = "🅱️";
	_g.h[":fast_forward:"] = "⏩";
	_g.h[":flag_Estonia:"] = "🇪🇪";
	_g.h[":man_fairy_tone4:"] = "🧚🏾‍♂️";
	_g.h[":man_pilot_tone1:"] = "👨🏻‍✈️";
	_g.h[":us:"] = "🇺🇸";
	_g.h[":carpentry_saw:"] = "🪚";
	_g.h[":dollar:"] = "💵";
	_g.h[":female-astronaut:"] = "👩‍🚀";
	_g.h[":flag_cc:"] = "🇨🇨";
	_g.h[":man_in_lotus_position:"] = "🧘‍♂️";
	_g.h[":nail_care_tone1:"] = "💅🏻";
	_g.h[":point_right_tone1:"] = "👉🏻";
	_g.h[":woman_cartwheeling_tone4:"] = "🤸🏾‍♀️";
	_g.h[":woman_tone3:"] = "👩🏽";
	_g.h[":Japanese_application_button:"] = "🈸";
	_g.h[":bright_button:"] = "🔆";
	_g.h[":hourglass_flowing_sand:"] = "⏳";
	_g.h[":pregnant_woman_tone1:"] = "🤰🏻";
	_g.h[":rwanda:"] = "🇷🇼";
	_g.h[":woman_golfing_tone3:"] = "🏌🏽‍♀️";
	_g.h[":books:"] = "📚";
	_g.h[":brick:"] = "🧱";
	_g.h[":family_mmb:"] = "👨‍👨‍👦";
	_g.h[":woman_rowing_boat_tone4:"] = "🚣🏾‍♀️";
	_g.h[":flag_Grenada:"] = "🇬🇩";
	_g.h[":person_climbing_tone3:"] = "🧗🏽";
	_g.h[":lower_left_paintbrush:"] = "🖌️";
	_g.h[":black_square_button:"] = "🔲";
	_g.h[":do_not_litter:"] = "🚯";
	_g.h[":flag_Canada:"] = "🇨🇦";
	_g.h[":flag_India:"] = "🇮🇳";
	_g.h[":woman_swimming_tone3:"] = "🏊🏽‍♀️";
	_g.h[":woman_with_headscarf_tone3:"] = "🧕🏽";
	_g.h[":writing_hand_tone4:"] = "✍🏾";
	_g.h[":leg:"] = "🦵";
	_g.h[":man_mechanic_tone2:"] = "👨🏼‍🔧";
	_g.h[":tornado:"] = "🌪️";
	_g.h[":smile_cat:"] = "😸";
	_g.h[":spades:"] = "♠️";
	_g.h[":television:"] = "📺";
	_g.h[":woman_with_probing_cane:"] = "👩‍🦯";
	_g.h[":costa_rica:"] = "🇨🇷";
	_g.h[":man_detective:"] = "🕵️‍♂️";
	_g.h[":person_juggling_tone4:"] = "🤹🏾";
	_g.h[":woman_singer_tone2:"] = "👩🏼‍🎤";
	_g.h[":3rd_place_medal:"] = "🥉";
	_g.h[":bike:"] = "🚲";
	_g.h[":flag_Vatican_City:"] = "🇻🇦";
	_g.h[":woman-tipping-hand:"] = "💁‍♀️";
	_g.h[":dancers:"] = "👯‍♀️";
	_g.h[":memo:"] = "📝";
	_g.h[":uganda:"] = "🇺🇬";
	_g.h[":woman’s_hat:"] = "👒";
	_g.h[":Japanese_congratulations_button:"] = "㊗";
	_g.h[":cd:"] = "💿";
	_g.h[":flag_ga:"] = "🇬🇦";
	_g.h[":flexed_biceps:"] = "💪";
	_g.h[":raccoon:"] = "🦝";
	_g.h[":reverse_button:"] = "◀";
	_g.h[":kiwifruit:"] = "🥝";
	_g.h[":peanuts:"] = "🥜";
	_g.h[":woman_getting_face_massage:"] = "💆‍♀️";
	_g.h[":bangladesh:"] = "🇧🇩";
	_g.h[":briefcase:"] = "💼";
	_g.h[":flag_Iran:"] = "🇮🇷";
	_g.h[":heavy_exclamation_mark:"] = "❗";
	_g.h[":woman_playing_water_polo_tone5:"] = "🤽🏿‍♀️";
	_g.h[":artificial_satellite:"] = "🛰️";
	_g.h[":clock8:"] = "🕗";
	_g.h[":flag-hr:"] = "🇭🇷";
	_g.h[":man_student_tone1:"] = "👨🏻‍🎓";
	_g.h[":tangerine:"] = "🍊";
	_g.h[":woman_cook_tone5:"] = "👩🏿‍🍳";
	_g.h[":woman_tipping_hand:"] = "💁‍♀️";
	_g.h[":eight-thirty:"] = "🕣";
	_g.h[":fingers_crossed_tone4:"] = "🤞🏾";
	_g.h[":flag-cc:"] = "🇨🇨";
	_g.h[":jack-o-lantern:"] = "🎃";
	_g.h[":person_playing_handball_tone3:"] = "🤾🏽";
	_g.h[":spiral_shell:"] = "🐚";
	_g.h[":white_flag:"] = "🏳";
	_g.h[":woman_detective_tone2:"] = "🕵🏼‍♀️";
	_g.h[":flag_rs:"] = "🇷🇸";
	_g.h[":flag_km:"] = "🇰🇲";
	_g.h[":snake:"] = "🐍";
	_g.h[":woman_facepalming_tone2:"] = "🤦🏼‍♀️";
	_g.h[":fried_shrimp:"] = "🍤";
	_g.h[":crying_cat_face:"] = "😿";
	_g.h[":man_in_tuxedo_tone3:"] = "🤵🏽";
	_g.h[":mortar_board:"] = "🎓";
	_g.h[":cat_with_wry_smile:"] = "😼";
	_g.h[":flag_Luxembourg:"] = "🇱🇺";
	_g.h[":lotion_bottle:"] = "🧴";
	_g.h[":woman_singer_tone4:"] = "👩🏾‍🎤";
	_g.h[":female-teacher:"] = "👩‍🏫";
	_g.h[":man_facepalming_tone2:"] = "🤦🏼‍♂️";
	_g.h[":smiling_face_with_sunglasses:"] = "😎";
	_g.h[":woman_gesturing_no_tone2:"] = "🙅🏼‍♀️";
	_g.h[":right_facing_fist_tone3:"] = "🤜🏽";
	_g.h[":suriname:"] = "🇸🇷";
	_g.h[":crossed_fingers:"] = "🤞";
	_g.h[":mouse_trap:"] = "🪤";
	_g.h[":standing_man:"] = "🧍‍♂️";
	_g.h[":woman_lifting_weights:"] = "🏋️‍♀️";
	_g.h[":woman_tipping_hand_tone2:"] = "💁🏼‍♀️";
	_g.h[":art:"] = "🎨";
	_g.h[":construction:"] = "🚧";
	_g.h[":label:"] = "🏷️";
	_g.h[":lotus_position:"] = "🧘";
	_g.h[":mahjong:"] = "🀄";
	_g.h[":u55b6:"] = "🈺";
	_g.h[":belize:"] = "🇧🇿";
	_g.h[":man_technologist:"] = "👨‍💻";
	_g.h[":taco:"] = "🌮";
	_g.h[":taxi:"] = "🚕";
	_g.h[":woman-kiss-woman:"] = "👩‍❤️‍💋‍👩";
	_g.h[":birthday:"] = "🎂";
	_g.h[":flag-do:"] = "🇩🇴";
	_g.h[":flag_sy:"] = "🇸🇾";
	_g.h[":heart_with_ribbon:"] = "💝";
	_g.h[":basketball_woman:"] = "⛹️‍♀️";
	_g.h[":mag:"] = "🔍";
	_g.h[":man_astronaut_tone1:"] = "👨🏻‍🚀";
	_g.h[":person_in_suit_levitating:"] = "🕴";
	_g.h[":up-down_arrow:"] = "↕";
	_g.h[":e-mail:"] = "📧";
	_g.h[":flag-il:"] = "🇮🇱";
	_g.h[":flag_Niue:"] = "🇳🇺";
	_g.h[":pisces:"] = "♓";
	_g.h[":san_marino:"] = "🇸🇲";
	_g.h[":white_sun_cloud:"] = "🌥";
	_g.h[":flag-ky:"] = "🇰🇾";
	_g.h[":man-man-boy:"] = "👨‍👨‍👦";
	_g.h[":woman_gesturing_ok_tone3:"] = "🙆🏽‍♀️";
	_g.h[":antigua_barbuda:"] = "🇦🇬";
	_g.h[":couplekiss_woman_woman:"] = "👩‍❤️‍💋‍👩";
	_g.h[":flag_Belize:"] = "🇧🇿";
	_g.h[":keycap_2:"] = "2️⃣";
	_g.h[":kyrgyzstan:"] = "🇰🇬";
	_g.h[":the_horns:"] = "🤘";
	_g.h[":wind_blowing_face:"] = "🌬️";
	_g.h[":fingers_crossed_tone1:"] = "🤞🏻";
	_g.h[":flag_re:"] = "🇷🇪";
	_g.h[":person_bouncing_ball_tone1:"] = "⛹🏻";
	_g.h[":person_playing_handball_tone1:"] = "🤾🏻";
	_g.h[":pie:"] = "🥧";
	_g.h[":punch_tone1:"] = "👊🏻";
	_g.h[":flag_jm:"] = "🇯🇲";
	_g.h[":point_left_tone1:"] = "👈🏻";
	_g.h[":female-singer:"] = "👩‍🎤";
	_g.h[":flag-bh:"] = "🇧🇭";
	_g.h[":flag_pn:"] = "🇵🇳";
	_g.h[":flag_sl:"] = "🇸🇱";
	_g.h[":man_mountain_biking_tone3:"] = "🚵🏽‍♂️";
	_g.h[":man_singer_tone3:"] = "👨🏽‍🎤";
	_g.h[":man_vampire_tone4:"] = "🧛🏾‍♂️";
	_g.h[":flag-pl:"] = "🇵🇱";
	_g.h[":man_guard:"] = "💂‍♂️";
	_g.h[":person_juggling_tone3:"] = "🤹🏽";
	_g.h[":ring_buoy:"] = "🛟";
	_g.h[":service_dog:"] = "🐕‍🦺";
	_g.h[":urn:"] = "⚱";
	_g.h[":woman_getting_face_massage_tone2:"] = "💆🏼‍♀️";
	_g.h[":ear_tone1:"] = "👂🏻";
	_g.h[":person_in_lotus_position:"] = "🧘‍♀️";
	_g.h[":santa_tone2:"] = "🎅🏼";
	_g.h[":three_o’clock:"] = "🕒";
	_g.h[":us_virgin_islands:"] = "🇻🇮";
	_g.h[":TOP_arrow:"] = "🔝";
	_g.h[":earth_americas:"] = "🌎";
	_g.h[":latin_cross:"] = "✝️";
	_g.h[":moyai:"] = "🗿";
	_g.h[":nine-thirty:"] = "🕤";
	_g.h[":pouch:"] = "👝";
	_g.h[":flag_zw:"] = "🇿🇼";
	_g.h[":man_walking:"] = "🚶‍♂️";
	_g.h[":map:"] = "🗺";
	_g.h[":pot_of_food:"] = "🍲";
	_g.h[":rightwards_hand:"] = "🫱";
	_g.h[":skin-tone-4:"] = "🏽";
	_g.h[":woman_getting_haircut_tone4:"] = "💇🏾‍♀️";
	_g.h[":woman_golfing_tone5:"] = "🏌🏿‍♀️";
	_g.h[":woman_red_hair:"] = "👩‍🦰";
	_g.h[":airplane_small:"] = "🛩";
	_g.h[":flag_ad:"] = "🇦🇩";
	_g.h[":mouse_face:"] = "🐭";
	_g.h[":person_shrugging:"] = "🤷";
	_g.h[":point_down_tone1:"] = "👇🏻";
	_g.h[":flag_Dominican_Republic:"] = "🇩🇴";
	_g.h[":sun:"] = "☀";
	_g.h[":woman_getting_face_massage_tone3:"] = "💆🏽‍♀️";
	_g.h[":-1:"] = "👎";
	_g.h[":avocado:"] = "🥑";
	_g.h[":bahamas:"] = "🇧🇸";
	_g.h[":flag_Morocco:"] = "🇲🇦";
	_g.h[":flag_nc:"] = "🇳🇨";
	_g.h[":helmet_with_white_cross:"] = "⛑️";
	_g.h[":flower_playing_cards:"] = "🎴";
	_g.h[":man_kneeling:"] = "🧎‍♂️";
	_g.h[":old_key:"] = "🗝️";
	_g.h[":capricorn:"] = "♑";
	_g.h[":couch:"] = "🛋";
	_g.h[":flag_Papua_New_Guinea:"] = "🇵🇬";
	_g.h[":flag_Vietnam:"] = "🇻🇳";
	_g.h[":fortune_cookie:"] = "🥠";
	_g.h[":seven-thirty:"] = "🕢";
	_g.h[":blue_circle:"] = "🔵";
	_g.h[":broccoli:"] = "🥦";
	_g.h[":face_with_symbols_over_mouth:"] = "🤬";
	_g.h[":flag_Azerbaijan:"] = "🇦🇿";
	_g.h[":counterclockwise_arrows_button:"] = "🔄";
	_g.h[":flag-mf:"] = "🇲🇫";
	_g.h[":leftwards_arrow_with_hook:"] = "↩️";
	_g.h[":muscle_tone5:"] = "💪🏿";
	_g.h[":peru:"] = "🇵🇪";
	_g.h[":botswana:"] = "🇧🇼";
	_g.h[":chile:"] = "🇨🇱";
	_g.h[":dove:"] = "🕊";
	_g.h[":male_elf:"] = "🧝‍♂️";
	_g.h[":man-man-girl-boy:"] = "👨‍👨‍👧‍👦";
	_g.h[":female-factory-worker:"] = "👩‍🏭";
	_g.h[":handbag:"] = "👜";
	_g.h[":hushed_face:"] = "😯";
	_g.h[":nazar_amulet:"] = "🧿";
	_g.h[":woman_astronaut:"] = "👩‍🚀";
	_g.h[":chocolate_bar:"] = "🍫";
	_g.h[":ewe:"] = "🐑";
	_g.h[":female_superhero:"] = "🦸‍♀️";
	_g.h[":flag_zm:"] = "🇿🇲";
	_g.h[":heartpulse:"] = "💗";
	_g.h[":SOS_button:"] = "🆘";
	_g.h[":bath_tone1:"] = "🛀🏻";
	_g.h[":hand_splayed_tone5:"] = "🖐🏿";
	_g.h[":person_in_lotus_position_tone3:"] = "🧘🏽";
	_g.h[":couple_with_heart:"] = "💑";
	_g.h[":flag_Antarctica:"] = "🇦🇶";
	_g.h[":man_gesturing_no_tone3:"] = "🙅🏽‍♂️";
	_g.h[":woman_elf:"] = "🧝‍♀️";
	_g.h[":facepalm:"] = "🤦";
	_g.h[":merperson:"] = "🧜‍♂️";
	_g.h[":parking:"] = "🅿️";
	_g.h[":sassy_man:"] = "💁‍♂️";
	_g.h[":city_sunrise:"] = "🌇";
	_g.h[":cricket:"] = "🦗";
	_g.h[":keycap_ten:"] = "🔟";
	_g.h[":mailbox_with_mail:"] = "📬";
	_g.h[":rainbow_flag:"] = "🏳️‍🌈";
	_g.h[":clock5:"] = "🕔";
	_g.h[":fist_oncoming:"] = "👊";
	_g.h[":man_in_steamy_room_tone5:"] = "🧖🏿‍♂️";
	_g.h[":speaker_medium_volume:"] = "🔉";
	_g.h[":Japanese_service_charge_button:"] = "🈂";
	_g.h[":man_astronaut:"] = "👨‍🚀";
	_g.h[":man_playing_handball_tone2:"] = "🤾🏼‍♂️";
	_g.h[":man_raising_hand_tone3:"] = "🙋🏽‍♂️";
	_g.h[":bouquet:"] = "💐";
	_g.h[":flag-bd:"] = "🇧🇩";
	_g.h[":oden:"] = "🍢";
	_g.h[":rugby_football:"] = "🏉";
	_g.h[":water_closet:"] = "🚾";
	_g.h[":white_square_button:"] = "🔳";
	_g.h[":eight_pointed_black_star:"] = "✴️";
	_g.h[":person_in_lotus_position_tone1:"] = "🧘🏻";
	_g.h[":detective_tone2:"] = "🕵🏼";
	_g.h[":man_rowing_boat_tone5:"] = "🚣🏿‍♂️";
	_g.h[":man_with_chinese_cap_tone2:"] = "👲🏼";
	_g.h[":previous_track_button:"] = "⏮️";
	_g.h[":screwdriver:"] = "🪛";
	_g.h[":woman_mountain_biking_tone1:"] = "🚵🏻‍♀️";
	_g.h[":x:"] = "❌";
	_g.h[":baby_tone2:"] = "👶🏼";
	_g.h[":flag_mh:"] = "🇲🇭";
	_g.h[":girl_tone2:"] = "👧🏼";
	_g.h[":woman_artist_tone4:"] = "👩🏾‍🎨";
	_g.h[":100:"] = "💯";
	_g.h[":flag-cx:"] = "🇨🇽";
	_g.h[":haiti:"] = "🇭🇹";
	_g.h[":man_teacher_tone3:"] = "👨🏽‍🏫";
	_g.h[":man_wearing_turban:"] = "👳‍♂️";
	_g.h[":nose_tone2:"] = "👃🏼";
	_g.h[":purse:"] = "👛";
	_g.h[":flag_uy:"] = "🇺🇾";
	_g.h[":frowning_face_with_open_mouth:"] = "😦";
	_g.h[":man_in_tuxedo_tone5:"] = "🤵🏿";
	_g.h[":syringe:"] = "💉";
	_g.h[":algeria:"] = "🇩🇿";
	_g.h[":flag-in:"] = "🇮🇳";
	_g.h[":man_biking:"] = "🚴‍♂️";
	_g.h[":medal:"] = "🎖️";
	_g.h[":paintbrush:"] = "🖌";
	_g.h[":person_with_blond_hair:"] = "👱‍♂️";
	_g.h[":right_arrow_curving_left:"] = "↩";
	_g.h[":city_sunset:"] = "🌆";
	_g.h[":flag_China:"] = "🇨🇳";
	_g.h[":flag_Taiwan:"] = "🇹🇼";
	_g.h[":flag_pk:"] = "🇵🇰";
	_g.h[":mermaid_tone5:"] = "🧜🏿‍♀️";
	_g.h[":eject_button:"] = "⏏";
	_g.h[":flag_Guinea-Bissau:"] = "🇬🇼";
	_g.h[":hugging:"] = "🤗";
	_g.h[":white_sun_rain_cloud:"] = "🌦";
	_g.h[":woman_climbing_tone4:"] = "🧗🏾‍♀️";
	_g.h[":flag-ge:"] = "🇬🇪";
	_g.h[":guitar:"] = "🎸";
	_g.h[":blond-haired_woman_tone5:"] = "👱🏿‍♀️";
	_g.h[":mrs_claus_tone4:"] = "🤶🏾";
	_g.h[":pregnant_person:"] = "🫄";
	_g.h[":smiling_cat_with_heart-eyes:"] = "😻";
	_g.h[":flag-pa:"] = "🇵🇦";
	_g.h[":orange_heart:"] = "🧡";
	_g.h[":person_getting_haircut_tone3:"] = "💇🏽";
	_g.h[":next_track_button:"] = "⏭";
	_g.h[":niger:"] = "🇳🇪";
	_g.h[":ping_pong:"] = "🏓";
	_g.h[":plus:"] = "➕";
	_g.h[":red_question_mark:"] = "❓";
	_g.h[":soccer:"] = "⚽";
	_g.h[":flag_tt:"] = "🇹🇹";
	_g.h[":infinity:"] = "♾️";
	_g.h[":rainbow:"] = "🌈";
	_g.h[":woman-bowing:"] = "🙇‍♀️";
	_g.h[":bikini:"] = "👙";
	_g.h[":dotted_six-pointed_star:"] = "🔯";
	_g.h[":flag_Thailand:"] = "🇹🇭";
	_g.h[":kick_scooter:"] = "🛴";
	_g.h[":older_person:"] = "🧓";
	_g.h[":person_swimming_tone5:"] = "🏊🏿";
	_g.h[":restroom:"] = "🚻";
	_g.h[":two:"] = "2️⃣";
	_g.h[":worried:"] = "😟";
	_g.h[":feet:"] = "🐾";
	_g.h[":large_green_circle:"] = "🟢";
	_g.h[":man_facepalming_tone4:"] = "🤦🏾‍♂️";
	_g.h[":sri_lanka:"] = "🇱🇰";
	_g.h[":american_football:"] = "🏈";
	_g.h[":woman_walking_tone4:"] = "🚶🏾‍♀️";
	_g.h[":champagne_glass:"] = "🥂";
	_g.h[":mechanic:"] = "🧑‍🔧";
	_g.h[":truck:"] = "🚚";
	_g.h[":NG_button:"] = "🆖";
	_g.h[":detective:"] = "🕵";
	_g.h[":person_running_tone3:"] = "🏃🏽";
	_g.h[":flag_hm:"] = "🇭🇲";
	_g.h[":flag_mx:"] = "🇲🇽";
	_g.h[":woman_office_worker_tone3:"] = "👩🏽‍💼";
	_g.h[":person_lifting_weights_tone3:"] = "🏋🏽";
	_g.h[":surfer:"] = "🏄‍♂️";
	_g.h[":flag-pf:"] = "🇵🇫";
	_g.h[":flag_cu:"] = "🇨🇺";
	_g.h[":flag_ec:"] = "🇪🇨";
	_g.h[":man_factory_worker:"] = "👨‍🏭";
	_g.h[":man_technologist_tone2:"] = "👨🏼‍💻";
	_g.h[":woman-woman-girl-girl:"] = "👩‍👩‍👧‍👧";
	_g.h[":woman_biking:"] = "🚴‍♀️";
	_g.h[":FREE_button:"] = "🆓";
	_g.h[":clock630:"] = "🕡";
	_g.h[":menorah:"] = "🕎";
	_g.h[":person_juggling_tone1:"] = "🤹🏻";
	_g.h[":pirate_flag:"] = "🏴‍☠️";
	_g.h[":woman_frowning_tone4:"] = "🙍🏾‍♀️";
	_g.h[":baby_tone5:"] = "👶🏿";
	_g.h[":flag_Serbia:"] = "🇷🇸";
	_g.h[":joker:"] = "🃏";
	_g.h[":smoking:"] = "🚬";
	_g.h[":Statue_of_Liberty:"] = "🗽";
	_g.h[":flag_li:"] = "🇱🇮";
	_g.h[":leo:"] = "♌";
	_g.h[":person_biking_tone4:"] = "🚴🏾";
	_g.h[":pound_banknote:"] = "💷";
	_g.h[":right_facing_fist_tone2:"] = "🤜🏼";
	_g.h[":upwards_button:"] = "🔼";
	_g.h[":egg:"] = "🥚";
	_g.h[":diamond_shape_with_a_dot_inside:"] = "💠";
	_g.h[":flag-tc:"] = "🇹🇨";
	_g.h[":man_guard_tone2:"] = "💂🏼‍♂️";
	_g.h[":snowboarder_tone4:"] = "🏂🏾";
	_g.h[":backhand_index_pointing_left:"] = "👈";
	_g.h[":flag_Chile:"] = "🇨🇱";
	_g.h[":woman_feeding_baby:"] = "👩‍🍼";
	_g.h[":angel_tone2:"] = "👼🏼";
	_g.h[":bouvet_island:"] = "🇧🇻";
	_g.h[":juggling:"] = "🤹";
	_g.h[":two-thirty:"] = "🕝";
	_g.h[":abcd:"] = "🔡";
	_g.h[":fingers_crossed_tone3:"] = "🤞🏽";
	_g.h[":flag-bn:"] = "🇧🇳";
	_g.h[":flag-gs:"] = "🇬🇸";
	_g.h[":headphones:"] = "🎧";
	_g.h[":woman_in_steamy_room_tone3:"] = "🧖🏽‍♀️";
	_g.h[":flag-tm:"] = "🇹🇲";
	_g.h[":princess:"] = "👸";
	_g.h[":arrow_upper_left:"] = "↖️";
	_g.h[":woman_detective_tone1:"] = "🕵🏻‍♀️";
	_g.h[":bus_stop:"] = "🚏";
	_g.h[":weary_face:"] = "😩";
	_g.h[":Japanese_post_office:"] = "🏣";
	_g.h[":flag_Norfolk_Island:"] = "🇳🇫";
	_g.h[":flag_cp:"] = "🇨🇵";
	_g.h[":clockwise_vertical_arrows:"] = "🔃";
	_g.h[":flag-tt:"] = "🇹🇹";
	_g.h[":kissing_face_with_closed_eyes:"] = "😚";
	_g.h[":man_frowning_tone2:"] = "🙍🏼‍♂️";
	_g.h[":muscle_tone1:"] = "💪🏻";
	_g.h[":thinking_face:"] = "🤔";
	_g.h[":arrow_heading_down:"] = "⤵️";
	_g.h[":flag_Israel:"] = "🇮🇱";
	_g.h[":front-facing_baby_chick:"] = "🐥";
	_g.h[":nerd:"] = "🤓";
	_g.h[":person_gesturing_no_tone1:"] = "🙅🏻";
	_g.h[":pizza:"] = "🍕";
	_g.h[":woman_health_worker_tone4:"] = "👩🏾‍⚕️";
	_g.h[":clock430:"] = "🕟";
	_g.h[":flag_Pakistan:"] = "🇵🇰";
	_g.h[":flag_cd:"] = "🇨🇩";
	_g.h[":flag_ge:"] = "🇬🇪";
	_g.h[":mrs_claus_tone3:"] = "🤶🏽";
	_g.h[":point_right:"] = "👉";
	_g.h[":beach_umbrella:"] = "⛱";
	_g.h[":blond-haired-man:"] = "👱‍♂️";
	_g.h[":ok_hand_tone1:"] = "👌🏻";
	_g.h[":person_getting_haircut_tone4:"] = "💇🏾";
	_g.h[":puerto_rico:"] = "🇵🇷";
	_g.h[":shirt:"] = "👕";
	_g.h[":spiral_calendar_pad:"] = "🗓️";
	_g.h[":flag_lr:"] = "🇱🇷";
	_g.h[":man_pouting_tone3:"] = "🙎🏽‍♂️";
	_g.h[":mandarin:"] = "🍊";
	_g.h[":one_piece_swimsuit:"] = "🩱";
	_g.h[":roll_of_paper:"] = "🧻";
	_g.h[":beetle:"] = "🪲";
	_g.h[":climbing_man:"] = "🧗‍♂️";
	_g.h[":anguilla:"] = "🇦🇮";
	_g.h[":evergreen_tree:"] = "🌲";
	_g.h[":lock_with_ink_pen:"] = "🔏";
	_g.h[":man_mage:"] = "🧙‍♂️";
	_g.h[":money-mouth_face:"] = "🤑";
	_g.h[":punch:"] = "👊";
	_g.h[":smiling_face_with_open_hands:"] = "🤗";
	_g.h[":woman_office_worker:"] = "👩‍💼";
	_g.h[":flag_Jersey:"] = "🇯🇪";
	_g.h[":movie_camera:"] = "🎥";
	_g.h[":person_with_crown:"] = "🫅";
	_g.h[":razor:"] = "🪒";
	_g.h[":crutch:"] = "🩼";
	_g.h[":man-gesturing-ok:"] = "🙆‍♂️";
	_g.h[":bald:"] = "🦲";
	_g.h[":flag_ru:"] = "🇷🇺";
	_g.h[":full_moon_with_face:"] = "🌝";
	_g.h[":mango:"] = "🥭";
	_g.h[":houses:"] = "🏘";
	_g.h[":man-woman-girl-girl:"] = "👨‍👩‍👧‍👧";
	_g.h[":man_firefighter_tone1:"] = "👨🏻‍🚒";
	_g.h[":older_man_tone1:"] = "👴🏻";
	_g.h[":firecracker:"] = "🧨";
	_g.h[":man_playing_water_polo_tone3:"] = "🤽🏽‍♂️";
	_g.h[":runner:"] = "🏃‍♂️";
	_g.h[":second_place_medal:"] = "🥈";
	_g.h[":woman-wearing-turban:"] = "👳‍♀️";
	_g.h[":flag_tg:"] = "🇹🇬";
	_g.h[":man_shrugging:"] = "🤷‍♂️";
	_g.h[":person_tipping_hand_tone1:"] = "💁🏻";
	_g.h[":sparkle:"] = "❇️";
	_g.h[":wavy_dash:"] = "〰️";
	_g.h[":film_frames:"] = "🎞️";
	_g.h[":flag-yt:"] = "🇾🇹";
	_g.h[":flag_ai:"] = "🇦🇮";
	_g.h[":hammer:"] = "🔨";
	_g.h[":hatched_chick:"] = "🐥";
	_g.h[":nigeria:"] = "🇳🇬";
	_g.h[":person_gesturing_ok_tone2:"] = "🙆🏼";
	_g.h[":rice_scene:"] = "🎑";
	_g.h[":atom:"] = "⚛";
	_g.h[":kissing:"] = "😗";
	_g.h[":llama:"] = "🦙";
	_g.h[":man_with_chinese_cap_tone4:"] = "👲🏾";
	_g.h[":file_cabinet:"] = "🗄️";
	_g.h[":man_surfing_tone1:"] = "🏄🏻‍♂️";
	_g.h[":one:"] = "1️⃣";
	_g.h[":person_bouncing_ball:"] = "⛹";
	_g.h[":person_doing_cartwheel:"] = "🤸";
	_g.h[":play_or_pause_button:"] = "⏯";
	_g.h[":tiger2:"] = "🐅";
	_g.h[":yemen:"] = "🇾🇪";
	_g.h[":yin_yang:"] = "☯️";
	_g.h[":battery:"] = "🔋";
	_g.h[":flag_Haiti:"] = "🇭🇹";
	_g.h[":smiling_face_with_3_hearts:"] = "🥰";
	_g.h[":flag-lc:"] = "🇱🇨";
	_g.h[":heart_suit:"] = "♥";
	_g.h[":index_pointing_at_the_viewer:"] = "🫵";
	_g.h[":japanese_ogre:"] = "👹";
	_g.h[":question:"] = "❓";
	_g.h[":flag-nf:"] = "🇳🇫";
	_g.h[":thailand:"] = "🇹🇭";
	_g.h[":black_medium_small_square:"] = "◾";
	_g.h[":child_tone4:"] = "🧒🏾";
	_g.h[":flag-un:"] = "🇺🇳";
	_g.h[":hear_no_evil:"] = "🙉";
	_g.h[":merman_tone4:"] = "🧜🏾‍♂️";
	_g.h[":mobile_phone_off:"] = "📴";
	_g.h[":mountain_cableway:"] = "🚠";
	_g.h[":person_climbing_tone5:"] = "🧗🏿";
	_g.h[":woman_playing_handball_tone1:"] = "🤾🏻‍♀️";
	_g.h[":woman_raising_hand:"] = "🙋‍♀️";
	_g.h[":ice_skate:"] = "⛸️";
	_g.h[":shopping_bags:"] = "🛍️";
	_g.h[":four_leaf_clover:"] = "🍀";
	_g.h[":ice_cream:"] = "🍨";
	_g.h[":man_getting_face_massage_tone3:"] = "💆🏽‍♂️";
	_g.h[":ok_woman:"] = "🙆‍♀️";
	_g.h[":woman_surfing_tone4:"] = "🏄🏾‍♀️";
	_g.h[":zany_face:"] = "🤪";
	_g.h[":female-mechanic:"] = "👩‍🔧";
	_g.h[":foggy:"] = "🌁";
	_g.h[":horse_racing:"] = "🏇";
	_g.h[":pray_tone4:"] = "🙏🏾";
	_g.h[":shuffle_tracks_button:"] = "🔀";
	_g.h[":family_woman_woman_girl:"] = "👩‍👩‍👧";
	_g.h[":flag-gg:"] = "🇬🇬";
	_g.h[":flag-wf:"] = "🇼🇫";
	_g.h[":girl_tone5:"] = "👧🏿";
	_g.h[":hourglass:"] = "⌛";
	_g.h[":person_bald:"] = "🧑‍🦲";
	_g.h[":sob:"] = "😭";
	_g.h[":dizzy:"] = "💫";
	_g.h[":minidisc:"] = "💽";
	_g.h[":package:"] = "📦";
	_g.h[":person_red_hair:"] = "🧑‍🦰";
	_g.h[":person_swimming_tone4:"] = "🏊🏾";
	_g.h[":skis:"] = "🎿";
	_g.h[":superhero:"] = "🦸";
	_g.h[":united_arab_emirates:"] = "🇦🇪";
	_g.h[":women_with_bunny_ears_partying:"] = "👯‍♀️";
	_g.h[":ambulance:"] = "🚑";
	_g.h[":female_vampire:"] = "🧛‍♀️";
	_g.h[":flag_Guernsey:"] = "🇬🇬";
	_g.h[":flag_Jordan:"] = "🇯🇴";
	_g.h[":man_rowing_boat_tone4:"] = "🚣🏾‍♂️";
	_g.h[":sweet_potato:"] = "🍠";
	_g.h[":expressionless:"] = "😑";
	_g.h[":flag_St._Martin:"] = "🇲🇫";
	_g.h[":magic_wand:"] = "🪄";
	_g.h[":male_detective:"] = "🕵️‍♂️";
	_g.h[":manual_wheelchair:"] = "🦽";
	_g.h[":suspension_railway:"] = "🚟";
	_g.h[":fingers_crossed_tone2:"] = "🤞🏼";
	_g.h[":flag_Cambodia:"] = "🇰🇭";
	_g.h[":flag_Canary_Islands:"] = "🇮🇨";
	_g.h[":flag_Denmark:"] = "🇩🇰";
	_g.h[":heavy_check_mark:"] = "✔️";
	_g.h[":man-tipping-hand:"] = "💁‍♂️";
	_g.h[":older_adult:"] = "🧓";
	_g.h[":window:"] = "🪟";
	_g.h[":woman_technologist:"] = "👩‍💻";
	_g.h[":running_shirt:"] = "🎽";
	_g.h[":woman_bald:"] = "👩‍🦲";
	_g.h[":woman_guard_tone3:"] = "💂🏽‍♀️";
	_g.h[":ng:"] = "🆖";
	_g.h[":person_getting_massage_tone3:"] = "💆🏽";
	_g.h[":flag-af:"] = "🇦🇫";
	_g.h[":pout:"] = "😡";
	_g.h[":construction_worker_tone4:"] = "👷🏾";
	_g.h[":flag_Argentina:"] = "🇦🇷";
	_g.h[":heart_with_arrow:"] = "💘";
	_g.h[":kangaroo:"] = "🦘";
	_g.h[":woman-getting-massage:"] = "💆‍♀️";
	_g.h[":anguished:"] = "😧";
	_g.h[":clown_face:"] = "🤡";
	_g.h[":person_kneeling:"] = "🧎";
	_g.h[":santa_tone5:"] = "🎅🏿";
	_g.h[":thunder_cloud_rain:"] = "⛈";
	_g.h[":tiger:"] = "🐯";
	_g.h[":white_small_square:"] = "▫️";
	_g.h[":wind_chime:"] = "🎐";
	_g.h[":coin:"] = "🪙";
	_g.h[":flag-xk:"] = "🇽🇰";
	_g.h[":flag_lc:"] = "🇱🇨";
	_g.h[":kaaba:"] = "🕋";
	_g.h[":skin-tone-2:"] = "🏻";
	_g.h[":card_file_box:"] = "🗃️";
	_g.h[":flag-km:"] = "🇰🇲";
	_g.h[":raising_hands:"] = "🙌";
	_g.h[":woman_with_headscarf_tone5:"] = "🧕🏿";
	_g.h[":call_me_tone2:"] = "🤙🏼";
	_g.h[":couplekiss_man_man:"] = "👨‍❤️‍💋‍👨";
	_g.h[":diamonds:"] = "♦️";
	_g.h[":lab_coat:"] = "🥼";
	_g.h[":sushi:"] = "🍣";
	_g.h[":Japanese_monthly_amount_button:"] = "🈷";
	_g.h[":flag_pe:"] = "🇵🇪";
	_g.h[":flatbread:"] = "🫓";
	_g.h[":id:"] = "🆔";
	_g.h[":man_feeding_baby:"] = "👨‍🍼";
	_g.h[":shopping_cart:"] = "🛒";
	_g.h[":bread:"] = "🍞";
	_g.h[":man_farmer_tone1:"] = "👨🏻‍🌾";
	_g.h[":check_mark_button:"] = "✅";
	_g.h[":flag_ve:"] = "🇻🇪";
	_g.h[":tools:"] = "🛠";
	_g.h[":detective_tone5:"] = "🕵🏿";
	_g.h[":high_voltage:"] = "⚡";
	_g.h[":man_cook_tone3:"] = "👨🏽‍🍳";
	_g.h[":mouse_three_button:"] = "🖱";
	_g.h[":paraguay:"] = "🇵🇾";
	_g.h[":ribbon:"] = "🎀";
	_g.h[":sandwich:"] = "🥪";
	_g.h[":woman_mage_tone3:"] = "🧙🏽‍♀️";
	_g.h[":woman_mage_tone4:"] = "🧙🏾‍♀️";
	_g.h[":argentina:"] = "🇦🇷";
	_g.h[":fairy_tone1:"] = "🧚🏻";
	_g.h[":flag_ly:"] = "🇱🇾";
	_g.h[":luggage:"] = "🧳";
	_g.h[":notebook:"] = "📓";
	_g.h[":person_doing_cartwheel_tone3:"] = "🤸🏽";
	_g.h[":rocket:"] = "🚀";
	_g.h[":bat:"] = "🦇";
	_g.h[":beach:"] = "🏖";
	_g.h[":calendar:"] = "📆";
	_g.h[":clock1230:"] = "🕧";
	_g.h[":face_palm:"] = "🤦";
	_g.h[":flag_tz:"] = "🇹🇿";
	_g.h[":man_construction_worker_tone4:"] = "👷🏾‍♂️";
	_g.h[":bride_with_veil:"] = "👰";
	_g.h[":flag_Lithuania:"] = "🇱🇹";
	_g.h[":point_left_tone4:"] = "👈🏾";
	_g.h[":flag_Sudan:"] = "🇸🇩";
	_g.h[":fries:"] = "🍟";
	_g.h[":man_biking_tone1:"] = "🚴🏻‍♂️";
	_g.h[":nose_tone3:"] = "👃🏽";
	_g.h[":person_frowning:"] = "🙍‍♀️";
	_g.h[":flag-sz:"] = "🇸🇿";
	_g.h[":sleeping_bed:"] = "🛌";
	_g.h[":arrows_clockwise:"] = "🔃";
	_g.h[":herb:"] = "🌿";
	_g.h[":male_sign:"] = "♂️";
	_g.h[":negative_squared_cross_mark:"] = "❎";
	_g.h[":computer_disk:"] = "💽";
	_g.h[":flag_py:"] = "🇵🇾";
	_g.h[":wheel_of_dharma:"] = "☸️";
	_g.h[":chart_with_downwards_trend:"] = "📉";
	_g.h[":guam:"] = "🇬🇺";
	_g.h[":orange_circle:"] = "🟠";
	_g.h[":person_doing_cartwheel_tone5:"] = "🤸🏿";
	_g.h[":saluting_face:"] = "🫡";
	_g.h[":v:"] = "✌️";
	_g.h[":british_indian_ocean_territory:"] = "🇮🇴";
	_g.h[":merperson_tone4:"] = "🧜🏾";
	_g.h[":repeat:"] = "🔁";
	_g.h[":flag-kz:"] = "🇰🇿";
	_g.h[":flag_gp:"] = "🇬🇵";
	_g.h[":flag_mw:"] = "🇲🇼";
	_g.h[":loudly_crying_face:"] = "😭";
	_g.h[":Christmas_tree:"] = "🎄";
	_g.h[":arrow_forward:"] = "▶️";
	_g.h[":flag-li:"] = "🇱🇮";
	_g.h[":flag_Czechia:"] = "🇨🇿";
	_g.h[":man_gesturing_OK:"] = "🙆‍♂️";
	_g.h[":man_golfing_tone1:"] = "🏌🏻‍♂️";
	_g.h[":montserrat:"] = "🇲🇸";
	_g.h[":prince_tone5:"] = "🤴🏿";
	_g.h[":raised_back_of_hand_tone5:"] = "🤚🏿";
	_g.h[":taurus:"] = "♉";
	_g.h[":woman_cook:"] = "👩‍🍳";
	_g.h[":couplekiss:"] = "💏";
	_g.h[":cupcake:"] = "🧁";
	_g.h[":face_with_tongue:"] = "😛";
	_g.h[":falafel:"] = "🧆";
	_g.h[":flag_Belarus:"] = "🇧🇾";
	_g.h[":goat:"] = "🐐";
	_g.h[":kenya:"] = "🇰🇪";
	_g.h[":man_surfing_tone3:"] = "🏄🏽‍♂️";
	_g.h[":person_white_hair:"] = "🧑‍🦳";
	_g.h[":flag_Palestinian_Territories:"] = "🇵🇸";
	_g.h[":name_badge:"] = "📛";
	_g.h[":peach:"] = "🍑";
	_g.h[":person_with_ball:"] = "⛹️‍♂️";
	_g.h[":steaming_bowl:"] = "🍜";
	_g.h[":trade_mark:"] = "™";
	_g.h[":flag_mc:"] = "🇲🇨";
	_g.h[":man_astronaut_tone3:"] = "👨🏽‍🚀";
	_g.h[":person_running_tone2:"] = "🏃🏼";
	_g.h[":man_factory_worker_tone2:"] = "👨🏼‍🏭";
	_g.h[":mobile_phone:"] = "📱";
	_g.h[":confetti_ball:"] = "🎊";
	_g.h[":flag_Saudi_Arabia:"] = "🇸🇦";
	_g.h[":owl:"] = "🦉";
	_g.h[":selfie_tone1:"] = "🤳🏻";
	_g.h[":womans_hat:"] = "👒";
	_g.h[":kiss_woman_woman:"] = "👩‍❤️‍💋‍👩";
	_g.h[":person_raising_hand_tone1:"] = "🙋🏻";
	_g.h[":woman_swimming:"] = "🏊‍♀️";
	_g.h[":police_car_light:"] = "🚨";
	_g.h[":seychelles:"] = "🇸🇨";
	_g.h[":writing_hand:"] = "✍️";
	_g.h[":burkina_faso:"] = "🇧🇫";
	_g.h[":flag-dk:"] = "🇩🇰";
	_g.h[":flag_Mauritius:"] = "🇲🇺";
	_g.h[":martial_arts_uniform:"] = "🥋";
	_g.h[":person_surfing:"] = "🏄";
	_g.h[":pinata:"] = "🪅";
	_g.h[":pregnant_woman_tone4:"] = "🤰🏾";
	_g.h[":adult:"] = "🧑";
	_g.h[":fuel_pump:"] = "⛽";
	_g.h[":camel:"] = "🐫";
	_g.h[":delivery_truck:"] = "🚚";
	_g.h[":family_man_woman_girl_girl:"] = "👨‍👩‍👧‍👧";
	_g.h[":flag_mp:"] = "🇲🇵";
	_g.h[":hollow_red_circle:"] = "⭕";
	_g.h[":magnifying_glass_tilted_left:"] = "🔍";
	_g.h[":passport_control:"] = "🛂";
	_g.h[":reunion:"] = "🇷🇪";
	_g.h[":aquarius:"] = "♒";
	_g.h[":flag_Mauritania:"] = "🇲🇷";
	_g.h[":partly_sunny_rain:"] = "🌦️";
	_g.h[":person_bowing:"] = "🙇";
	_g.h[":person_getting_massage_tone1:"] = "💆🏻";
	_g.h[":technologist:"] = "🧑‍💻";
	_g.h[":cold_face:"] = "🥶";
	_g.h[":flag-mk:"] = "🇲🇰";
	_g.h[":hedgehog:"] = "🦔";
	_g.h[":hiking_boot:"] = "🥾";
	_g.h[":large_blue_circle:"] = "🔵";
	_g.h[":oncoming_taxi:"] = "🚖";
	_g.h[":woman_shrugging_tone5:"] = "🤷🏿‍♀️";
	_g.h[":doughnut:"] = "🍩";
	_g.h[":flag_mf:"] = "🇲🇫";
	_g.h[":face_holding_back_tears:"] = "🥹";
	_g.h[":female-student:"] = "👩‍🎓";
	_g.h[":older_woman_tone1:"] = "👵🏻";
	_g.h[":prince_tone1:"] = "🤴🏻";
	_g.h[":face_exhaling:"] = "😮‍💨";
	_g.h[":fire_engine:"] = "🚒";
	_g.h[":man_gesturing_ok_tone2:"] = "🙆🏼‍♂️";
	_g.h[":pear:"] = "🍐";
	_g.h[":person_in_steamy_room_tone5:"] = "🧖🏿";
	_g.h[":nail_care_tone5:"] = "💅🏿";
	_g.h[":flag-nr:"] = "🇳🇷";
	_g.h[":palestinian_territories:"] = "🇵🇸";
	_g.h[":woman-gesturing-ok:"] = "🙆‍♀️";
	_g.h[":woman_firefighter_tone4:"] = "👩🏾‍🚒";
	_g.h[":family_man_woman_girl_boy:"] = "👨‍👩‍👧‍👦";
	_g.h[":fist_right:"] = "🤜";
	_g.h[":man_in_lotus_position_tone4:"] = "🧘🏾‍♂️";
	_g.h[":national_park:"] = "🏞️";
	_g.h[":person_tipping_hand:"] = "💁";
	_g.h[":syria:"] = "🇸🇾";
	_g.h[":transgender_flag:"] = "🏳️‍⚧️";
	_g.h[":first_quarter_moon_face:"] = "🌛";
	_g.h[":flag_ht:"] = "🇭🇹";
	_g.h[":person_facepalming_tone3:"] = "🤦🏽";
	_g.h[":person_gesturing_ok:"] = "🙆";
	_g.h[":revolving_hearts:"] = "💞";
	_g.h[":first_quarter_moon_with_face:"] = "🌛";
	_g.h[":person_bowing_tone4:"] = "🙇🏾";
	_g.h[":scorpius:"] = "♏";
	_g.h[":flag_qa:"] = "🇶🇦";
	_g.h[":vulcan_tone1:"] = "🖖🏻";
	_g.h[":woman-wrestling:"] = "🤼‍♀️";
	_g.h[":woman_mountain_biking:"] = "🚵‍♀️";
	_g.h[":flag_bz:"] = "🇧🇿";
	_g.h[":man-walking:"] = "🚶‍♂️";
	_g.h[":person_shrugging_tone4:"] = "🤷🏾";
	_g.h[":skin-tone-6:"] = "🏿";
	_g.h[":i_love_you_hand_sign:"] = "🤟";
	_g.h[":mage_tone3:"] = "🧙🏽";
	_g.h[":bearded_person_tone3:"] = "🧔🏽";
	_g.h[":flag_Georgia:"] = "🇬🇪";
	_g.h[":person_getting_haircut_tone2:"] = "💇🏼";
	_g.h[":cote_divoire:"] = "🇨🇮";
	_g.h[":newspaper_roll:"] = "🗞️";
	_g.h[":nicaragua:"] = "🇳🇮";
	_g.h[":woman_farmer:"] = "👩‍🌾";
	_g.h[":man_getting_face_massage_tone4:"] = "💆🏾‍♂️";
	_g.h[":small_red_triangle_down:"] = "🔻";
	_g.h[":sparkles:"] = "✨";
	_g.h[":thinking:"] = "🤔";
	_g.h[":weight_lifting_woman:"] = "🏋️‍♀️";
	_g.h[":zombie_man:"] = "🧟‍♂️";
	_g.h[":clapper:"] = "🎬";
	_g.h[":comet:"] = "☄️";
	_g.h[":couple_with_heart_woman_man:"] = "👩‍❤️‍👨";
	_g.h[":ear_tone5:"] = "👂🏿";
	_g.h[":heart_eyes_cat:"] = "😻";
	_g.h[":oncoming_police_car:"] = "🚔";
	_g.h[":person_running_tone1:"] = "🏃🏻";
	_g.h[":snowman:"] = "☃️";
	_g.h[":beach_with_umbrella:"] = "🏖️";
	_g.h[":flag-ad:"] = "🇦🇩";
	_g.h[":flag-ck:"] = "🇨🇰";
	_g.h[":flag_Singapore:"] = "🇸🇬";
	_g.h[":man_pouting_tone2:"] = "🙎🏼‍♂️";
	_g.h[":thumbsup_tone1:"] = "👍🏻";
	_g.h[":unicorn_face:"] = "🦄";
	_g.h[":woman-girl-girl:"] = "👩‍👧‍👧";
	_g.h[":zimbabwe:"] = "🇿🇼";
	_g.h[":ballet_shoes:"] = "🩰";
	_g.h[":flag-gp:"] = "🇬🇵";
	_g.h[":flag-mn:"] = "🇲🇳";
	_g.h[":flag_gf:"] = "🇬🇫";
	_g.h[":arrow_down_small:"] = "🔽";
	_g.h[":bath:"] = "🛀";
	_g.h[":clock530:"] = "🕠";
	_g.h[":flag_br:"] = "🇧🇷";
	_g.h[":flag_pr:"] = "🇵🇷";
	_g.h[":lotus:"] = "🪷";
	_g.h[":man_detective_tone2:"] = "🕵🏼‍♂️";
	_g.h[":person_rowing_boat_tone4:"] = "🚣🏾";
	_g.h[":woman_gesturing_no_tone5:"] = "🙅🏿‍♀️";
	_g.h[":fountain:"] = "⛲";
	_g.h[":lipstick:"] = "💄";
	_g.h[":myanmar:"] = "🇲🇲";
	_g.h[":tiger_face:"] = "🐯";
	_g.h[":chequered_flag:"] = "🏁";
	_g.h[":flag_se:"] = "🇸🇪";
	_g.h[":man_mage_tone3:"] = "🧙🏽‍♂️";
	_g.h[":man_tone1:"] = "👨🏻";
	_g.h[":vatican_city:"] = "🇻🇦";
	_g.h[":boot:"] = "👢";
	_g.h[":hand:"] = "✋";
	_g.h[":man_juggling:"] = "🤹‍♂️";
	_g.h[":person_gesturing_no:"] = "🙅";
	_g.h[":arrow_backward:"] = "◀️";
	_g.h[":chicken:"] = "🐔";
	_g.h[":golfing:"] = "🏌️";
	_g.h[":jamaica:"] = "🇯🇲";
	_g.h[":person_in_tuxedo:"] = "🤵";
	_g.h[":receipt:"] = "🧾";
	_g.h[":woman_factory_worker_tone2:"] = "👩🏼‍🏭";
	_g.h[":woman_getting_haircut_tone1:"] = "💇🏻‍♀️";
	_g.h[":OK_button:"] = "🆗";
	_g.h[":angel_tone3:"] = "👼🏽";
	_g.h[":christmas_island:"] = "🇨🇽";
	_g.h[":cloud:"] = "☁️";
	_g.h[":marshall_islands:"] = "🇲🇭";
	_g.h[":metal:"] = "🤘";
	_g.h[":woman_pilot_tone2:"] = "👩🏼‍✈️";
	_g.h[":cl:"] = "🆑";
	_g.h[":dizzy_face:"] = "😵";
	_g.h[":flag_nl:"] = "🇳🇱";
	_g.h[":man-golfing:"] = "🏌️‍♂️";
	_g.h[":person_lifting_weights_tone2:"] = "🏋🏼";
	_g.h[":sake:"] = "🍶";
	_g.h[":statue_of_liberty:"] = "🗽";
	_g.h[":wales:"] = "🏴󠁧󠁢󠁷󠁬󠁳󠁿";
	_g.h[":woman_cartwheeling:"] = "🤸‍♀️";
	_g.h[":caribbean_netherlands:"] = "🇧🇶";
	_g.h[":flag_Côte_d’Ivoire:"] = "🇨🇮";
	_g.h[":flag_gg:"] = "🇬🇬";
	_g.h[":man_cartwheeling:"] = "🤸‍♂️";
	_g.h[":person_rowing_boat_tone1:"] = "🚣🏻";
	_g.h[":arrow_right:"] = "➡️";
	_g.h[":flag_Panama:"] = "🇵🇦";
	_g.h[":man_in_tuxedo_tone4:"] = "🤵🏾";
	_g.h[":metal_tone1:"] = "🤘🏻";
	_g.h[":person_with_white_cane:"] = "🧑‍🦯";
	_g.h[":slight_frown:"] = "🙁";
	_g.h[":woman-woman-boy-boy:"] = "👩‍👩‍👦‍👦";
	_g.h[":blond_haired_person_tone3:"] = "👱🏽";
	_g.h[":bone:"] = "🦴";
	_g.h[":deaf_woman:"] = "🧏‍♀️";
	_g.h[":person_juggling_tone5:"] = "🤹🏿";
	_g.h[":sweat_droplets:"] = "💦";
	_g.h[":thumbs_up:"] = "👍";
	_g.h[":woman_bouncing_ball_tone5:"] = "⛹🏿‍♀️";
	_g.h[":woman_guard_tone1:"] = "💂🏻‍♀️";
	_g.h[":bento:"] = "🍱";
	_g.h[":bridge_at_night:"] = "🌉";
	_g.h[":person_getting_massage_tone2:"] = "💆🏼";
	_g.h[":speaker_low_volume:"] = "🔈";
	_g.h[":backhand_index_pointing_right:"] = "👉";
	_g.h[":P_button:"] = "🅿";
	_g.h[":flag_as:"] = "🇦🇸";
	_g.h[":person_in_motorized_wheelchair:"] = "🧑‍🦼";
	_g.h[":video_camera:"] = "📹";
	_g.h[":abacus:"] = "🧮";
	_g.h[":nest_with_eggs:"] = "🪺";
	_g.h[":ok_hand_tone4:"] = "👌🏾";
	_g.h[":person_facepalming:"] = "🤦";
	_g.h[":cat:"] = "🐱";
	_g.h[":flag-as:"] = "🇦🇸";
	_g.h[":flag_Greece:"] = "🇬🇷";
	_g.h[":flag_gb:"] = "🇬🇧";
	_g.h[":confused:"] = "😕";
	_g.h[":denmark:"] = "🇩🇰";
	_g.h[":health_worker:"] = "🧑‍⚕️";
	_g.h[":new_moon_with_face:"] = "🌚";
	_g.h[":red_car:"] = "🚗";
	_g.h[":tongue:"] = "👅";
	_g.h[":family_mwgb:"] = "👨‍👩‍👧‍👦";
	_g.h[":flag_in_hole:"] = "⛳";
	_g.h[":gambia:"] = "🇬🇲";
	_g.h[":male-pilot:"] = "👨‍✈️";
	_g.h[":white_sun_small_cloud:"] = "🌤";
	_g.h[":angel:"] = "👼";
	_g.h[":clock330:"] = "🕞";
	_g.h[":female_genie:"] = "🧞‍♀️";
	_g.h[":flag-pk:"] = "🇵🇰";
	_g.h[":flag_Micronesia:"] = "🇫🇲";
	_g.h[":flag_sh:"] = "🇸🇭";
	_g.h[":french_guiana:"] = "🇬🇫";
	_g.h[":hotdog:"] = "🌭";
	_g.h[":man_curly_hair:"] = "👨‍🦱";
	_g.h[":person_pouting_tone3:"] = "🙎🏽";
	_g.h[":spiral_notepad:"] = "🗒";
	_g.h[":stadium:"] = "🏟️";
	_g.h[":flag_Montserrat:"] = "🇲🇸";
	_g.h[":no_littering:"] = "🚯";
	_g.h[":guinea_bissau:"] = "🇬🇼";
	_g.h[":left_facing_fist_tone5:"] = "🤛🏿";
	_g.h[":woman_artist_tone3:"] = "👩🏽‍🎨";
	_g.h[":blue_square:"] = "🟦";
	_g.h[":flag_Monaco:"] = "🇲🇨";
	_g.h[":flag_Trinidad_&_Tobago:"] = "🇹🇹";
	_g.h[":central_african_republic:"] = "🇨🇫";
	_g.h[":palms_up_together_tone2:"] = "🤲🏼";
	_g.h[":radioactive_sign:"] = "☢️";
	_g.h[":red_apple:"] = "🍎";
	_g.h[":woman_fairy_tone1:"] = "🧚🏻‍♀️";
	_g.h[":x-ray:"] = "🩻";
	_g.h[":1st_place_medal:"] = "🥇";
	_g.h[":bear:"] = "🐻";
	_g.h[":kitchen_knife:"] = "🔪";
	_g.h[":man_cook_tone4:"] = "👨🏾‍🍳";
	_g.h[":man_with_beard:"] = "🧔‍♂️";
	_g.h[":person_gesturing_OK:"] = "🙆";
	_g.h[":thumbs_down:"] = "👎";
	_g.h[":flag-gl:"] = "🇬🇱";
	_g.h[":high_heel:"] = "👠";
	_g.h[":man_artist:"] = "👨‍🎨";
	_g.h[":orange:"] = "🍊";
	_g.h[":running_woman:"] = "🏃‍♀️";
	_g.h[":train2:"] = "🚆";
	_g.h[":woman_cook_tone1:"] = "👩🏻‍🍳";
	_g.h[":clipboard:"] = "📋";
	_g.h[":family_mmgb:"] = "👨‍👨‍👧‍👦";
	_g.h[":flag_Bulgaria:"] = "🇧🇬";
	_g.h[":flag_Libya:"] = "🇱🇾";
	_g.h[":flag_North_Macedonia:"] = "🇲🇰";
	_g.h[":pig2:"] = "🐖";
	_g.h[":collision:"] = "💥";
	_g.h[":raised_hands_tone4:"] = "🙌🏾";
	_g.h[":school:"] = "🏫";
	_g.h[":shit:"] = "💩";
	_g.h[":teacher:"] = "🧑‍🏫";
	_g.h[":woman-boy-boy:"] = "👩‍👦‍👦";
	_g.h[":woman_walking_tone3:"] = "🚶🏽‍♀️";
	_g.h[":cross_mark_button:"] = "❎";
	_g.h[":flag_mn:"] = "🇲🇳";
	_g.h[":man_teacher_tone2:"] = "👨🏼‍🏫";
	_g.h[":speech_left:"] = "🗨";
	_g.h[":blueberries:"] = "🫐";
	_g.h[":flag_ne:"] = "🇳🇪";
	_g.h[":no_mobile_phones:"] = "📵";
	_g.h[":person_mountain_biking_tone2:"] = "🚵🏼";
	_g.h[":plate_with_cutlery:"] = "🍽️";
	_g.h[":blond-haired_man_tone1:"] = "👱🏻‍♂️";
	_g.h[":clap_tone2:"] = "👏🏼";
	_g.h[":door:"] = "🚪";
	_g.h[":flag_Barbados:"] = "🇧🇧";
	_g.h[":grenada:"] = "🇬🇩";
	_g.h[":man_in_tuxedo_tone1:"] = "🤵🏻";
	_g.h[":mechanical_leg:"] = "🦿";
	_g.h[":writing_hand_tone1:"] = "✍🏻";
	_g.h[":brazil:"] = "🇧🇷";
	_g.h[":bubbles:"] = "🫧";
	_g.h[":bust_in_silhouette:"] = "👤";
	_g.h[":construction_worker_woman:"] = "👷‍♀️";
	_g.h[":fearful_face:"] = "😨";
	_g.h[":man_fairy_tone1:"] = "🧚🏻‍♂️";
	_g.h[":person_bouncing_ball_tone4:"] = "⛹🏾";
	_g.h[":bar_chart:"] = "📊";
	_g.h[":female_elf:"] = "🧝‍♀️";
	_g.h[":flag_Iraq:"] = "🇮🇶";
	_g.h[":flag_ic:"] = "🇮🇨";
	_g.h[":heavy_heart_exclamation_mark_ornament:"] = "❣️";
	_g.h[":lock:"] = "🔒";
	_g.h[":macau:"] = "🇲🇴";
	_g.h[":man_golfing_tone2:"] = "🏌🏼‍♂️";
	_g.h[":st_kitts_nevis:"] = "🇰🇳";
	_g.h[":vibration_mode:"] = "📳";
	_g.h[":blonde_woman:"] = "👱‍♀️";
	_g.h[":cockroach:"] = "🪳";
	_g.h[":face_with_head-bandage:"] = "🤕";
	_g.h[":flag_Zimbabwe:"] = "🇿🇼";
	_g.h[":last_quarter_moon:"] = "🌗";
	_g.h[":man_in_lotus_position_tone1:"] = "🧘🏻‍♂️";
	_g.h[":prohibited:"] = "🚫";
	_g.h[":guernsey:"] = "🇬🇬";
	_g.h[":man_in_steamy_room_tone4:"] = "🧖🏾‍♂️";
	_g.h[":milk_glass:"] = "🥛";
	_g.h[":woman_detective_tone4:"] = "🕵🏾‍♀️";
	_g.h[":woman_fairy_tone5:"] = "🧚🏿‍♀️";
	_g.h[":woman_rowing_boat_tone3:"] = "🚣🏽‍♀️";
	_g.h[":woman-surfing:"] = "🏄‍♀️";
	_g.h[":woman_shrugging_tone1:"] = "🤷🏻‍♀️";
	_g.h[":flag_U.S._Outlying_Islands:"] = "🇺🇲";
	_g.h[":guard:"] = "💂";
	_g.h[":liberia:"] = "🇱🇷";
	_g.h[":u7a7a:"] = "🈳";
	_g.h[":flag-vc:"] = "🇻🇨";
	_g.h[":man_running:"] = "🏃‍♂️";
	_g.h[":open_file_folder:"] = "📂";
	_g.h[":safety_vest:"] = "🦺";
	_g.h[":drooling_face:"] = "🤤";
	_g.h[":flag_Cocos_(Keeling)_Islands:"] = "🇨🇨";
	_g.h[":office_worker:"] = "🧑‍💼";
	_g.h[":rosette:"] = "🏵️";
	_g.h[":birthday_cake:"] = "🎂";
	_g.h[":blond_haired_man:"] = "👱‍♂️";
	_g.h[":department_store:"] = "🏬";
	_g.h[":flag-hu:"] = "🇭🇺";
	_g.h[":flag_me:"] = "🇲🇪";
	_g.h[":oncoming_fist:"] = "👊";
	_g.h[":shower:"] = "🚿";
	_g.h[":face_with_raised_eyebrow:"] = "🤨";
	_g.h[":flag_pf:"] = "🇵🇫";
	_g.h[":minus:"] = "➖";
	_g.h[":rabbit_face:"] = "🐰";
	_g.h[":flag-ua:"] = "🇺🇦";
	_g.h[":tram:"] = "🚊";
	_g.h[":family_man_woman_girl:"] = "👨‍👩‍👧";
	_g.h[":flag-nz:"] = "🇳🇿";
	_g.h[":flag_is:"] = "🇮🇸";
	_g.h[":flag_sx:"] = "🇸🇽";
	_g.h[":glass_of_milk:"] = "🥛";
	_g.h[":woman_climbing_tone1:"] = "🧗🏻‍♀️";
	_g.h[":woman_playing_handball_tone3:"] = "🤾🏽‍♀️";
	_g.h[":disguised_face:"] = "🥸";
	_g.h[":flag_Christmas_Island:"] = "🇨🇽";
	_g.h[":flag_Lesotho:"] = "🇱🇸";
	_g.h[":identification_card:"] = "🪪";
	_g.h[":running:"] = "🏃";
	_g.h[":solomon_islands:"] = "🇸🇧";
	_g.h[":third_place:"] = "🥉";
	_g.h[":vampire_man:"] = "🧛‍♂️";
	_g.h[":woman_facepalming_tone3:"] = "🤦🏽‍♀️";
	_g.h[":benin:"] = "🇧🇯";
	_g.h[":flag_Tokelau:"] = "🇹🇰";
	_g.h[":frowning_woman:"] = "🙍‍♀️";
	_g.h[":man_with_chinese_cap_tone3:"] = "👲🏽";
	_g.h[":Cancer:"] = "♋";
	_g.h[":bath_tone5:"] = "🛀🏿";
	_g.h[":flag_Northern_Mariana_Islands:"] = "🇲🇵";
	_g.h[":flag_ua:"] = "🇺🇦";
	_g.h[":optical_disk:"] = "💿";
	_g.h[":persevering_face:"] = "😣";
	_g.h[":woman_wearing_turban_tone5:"] = "👳🏿‍♀️";
	_g.h[":arrow_heading_up:"] = "⤴️";
	_g.h[":man_scientist_tone1:"] = "👨🏻‍🔬";
	_g.h[":ok_hand_tone2:"] = "👌🏼";
	_g.h[":poodle:"] = "🐩";
	_g.h[":woman_in_tuxedo:"] = "🤵‍♀️";
	_g.h[":aries:"] = "♈";
	_g.h[":face_with_steam_from_nose:"] = "😤";
	_g.h[":flag-cm:"] = "🇨🇲";
	_g.h[":man_teacher:"] = "👨‍🏫";
	_g.h[":small_airplane:"] = "🛩️";
	_g.h[":bouncing_ball_person:"] = "⛹️";
	_g.h[":cold_sweat:"] = "😰";
	_g.h[":snowboarder:"] = "🏂";
	_g.h[":czech_republic:"] = "🇨🇿";
	_g.h[":fax_machine:"] = "📠";
	_g.h[":flag_New_Caledonia:"] = "🇳🇨";
	_g.h[":house_abandoned:"] = "🏚";
	_g.h[":large_brown_square:"] = "🟫";
	_g.h[":man-girl-boy:"] = "👨‍👧‍👦";
	_g.h[":man_cartwheeling_tone5:"] = "🤸🏿‍♂️";
	_g.h[":man_in_tuxedo_tone2:"] = "🤵🏼";
	_g.h[":ok_hand_tone5:"] = "👌🏿";
	_g.h[":flag_bq:"] = "🇧🇶";
	_g.h[":raising_hand_man:"] = "🙋‍♂️";
	_g.h[":flag-er:"] = "🇪🇷";
	_g.h[":man-raising-hand:"] = "🙋‍♂️";
	_g.h[":cool:"] = "🆒";
	_g.h[":flag-sl:"] = "🇸🇱";
	_g.h[":flag_mq:"] = "🇲🇶";
	_g.h[":moneybag:"] = "💰";
	_g.h[":v_tone4:"] = "✌🏾";
	_g.h[":woman_gesturing_no_tone4:"] = "🙅🏾‍♀️";
	_g.h[":woman_technologist_tone2:"] = "👩🏼‍💻";
	_g.h[":azerbaijan:"] = "🇦🇿";
	_g.h[":bearded_person_tone2:"] = "🧔🏼";
	_g.h[":japan:"] = "🗾";
	_g.h[":male-astronaut:"] = "👨‍🚀";
	_g.h[":peace_symbol:"] = "☮️";
	_g.h[":person_rowing_boat_tone2:"] = "🚣🏼";
	_g.h[":white_medium_small_square:"] = "◽";
	_g.h[":clapper_board:"] = "🎬";
	_g.h[":deaf_man:"] = "🧏‍♂️";
	_g.h[":flag_Nigeria:"] = "🇳🇬";
	_g.h[":hockey:"] = "🏒";
	_g.h[":person_golfing_tone5:"] = "🏌🏿";
	_g.h[":person_with_veil:"] = "👰";
	_g.h[":rose:"] = "🌹";
	_g.h[":+1:"] = "👍";
	_g.h[":chad:"] = "🇹🇩";
	_g.h[":scales:"] = "⚖️";
	_g.h[":triumph:"] = "😤";
	_g.h[":woman_bowing_tone1:"] = "🙇🏻‍♀️";
	_g.h[":guard_tone2:"] = "💂🏼";
	_g.h[":men’s_room:"] = "🚹";
	_g.h[":purple_square:"] = "🟪";
	_g.h[":head_bandage:"] = "🤕";
	_g.h[":person_frowning_tone2:"] = "🙍🏼";
	_g.h[":dollar_banknote:"] = "💵";
	_g.h[":flag-sk:"] = "🇸🇰";
	_g.h[":flag-tj:"] = "🇹🇯";
	_g.h[":flag_Kyrgyzstan:"] = "🇰🇬";
	_g.h[":heart:"] = "❤️";
	_g.h[":ladybug:"] = "🐞";
	_g.h[":mate_drink:"] = "🧉";
	_g.h[":prince_tone3:"] = "🤴🏽";
	_g.h[":thread:"] = "🧵";
	_g.h[":flag-cl:"] = "🇨🇱";
	_g.h[":flag-mx:"] = "🇲🇽";
	_g.h[":rice_ball:"] = "🍙";
	_g.h[":american_samoa:"] = "🇦🇸";
	_g.h[":elevator:"] = "🛗";
	_g.h[":flag-ai:"] = "🇦🇮";
	_g.h[":flag_to:"] = "🇹🇴";
	_g.h[":people_wrestling:"] = "🤼";
	_g.h[":woman_gesturing_no:"] = "🙅‍♀️";
	_g.h[":blowfish:"] = "🐡";
	_g.h[":flag-gf:"] = "🇬🇫";
	_g.h[":ninja:"] = "🥷";
	_g.h[":red_hair:"] = "🦰";
	_g.h[":Capricorn:"] = "♑";
	_g.h[":bacon:"] = "🥓";
	_g.h[":flag_European_Union:"] = "🇪🇺";
	_g.h[":flipper:"] = "🐬";
	_g.h[":grimacing:"] = "😬";
	_g.h[":incoming_envelope:"] = "📨";
	_g.h[":papua_new_guinea:"] = "🇵🇬";
	_g.h[":swimming_woman:"] = "🏊‍♀️";
	_g.h[":flag_pl:"] = "🇵🇱";
	_g.h[":woman_in_lotus_position_tone5:"] = "🧘🏿‍♀️";
	_g.h[":antarctica:"] = "🇦🇶";
	_g.h[":balance_scale:"] = "⚖";
	_g.h[":card_box:"] = "🗃";
	_g.h[":dancer_tone5:"] = "💃🏿";
	_g.h[":man_bowing_tone2:"] = "🙇🏼‍♂️";
	_g.h[":man_judge_tone4:"] = "👨🏾‍⚖️";
	_g.h[":apple:"] = "🍎";
	_g.h[":person_climbing_tone1:"] = "🧗🏻";
	_g.h[":smiling_face_with_tear:"] = "🥲";
	_g.h[":track_next:"] = "⏭";
	_g.h[":framed_picture:"] = "🖼";
	_g.h[":lower_left_ballpoint_pen:"] = "🖊️";
	_g.h[":woman-bouncing-ball:"] = "⛹️‍♀️";
	_g.h[":chopsticks:"] = "🥢";
	_g.h[":girl_tone4:"] = "👧🏾";
	_g.h[":man_judge:"] = "👨‍⚖️";
	_g.h[":ocean:"] = "🌊";
	_g.h[":raising_hand_woman:"] = "🙋‍♀️";
	_g.h[":top_hat:"] = "🎩";
	_g.h[":fountain_pen:"] = "🖋";
	_g.h[":ng_man:"] = "🙅‍♂️";
	_g.h[":woman_guard_tone5:"] = "💂🏿‍♀️";
	_g.h[":flag-bw:"] = "🇧🇼";
	_g.h[":pregnant_woman_tone5:"] = "🤰🏿";
	_g.h[":woman_artist_tone5:"] = "👩🏿‍🎨";
	_g.h[":blond-haired_woman_tone2:"] = "👱🏼‍♀️";
	_g.h[":flag_Paraguay:"] = "🇵🇾";
	_g.h[":man_tone2:"] = "👨🏼";
	_g.h[":shrug:"] = "🤷";
	_g.h[":woman-mountain-biking:"] = "🚵‍♀️";
	_g.h[":arrow_lower_right:"] = "↘️";
	_g.h[":cloud_snow:"] = "🌨";
	_g.h[":lobster:"] = "🦞";
	_g.h[":speak-no-evil_monkey:"] = "🙊";
	_g.h[":passenger_ship:"] = "🛳️";
	_g.h[":point_up_tone4:"] = "☝🏾";
	_g.h[":breast_feeding_tone2:"] = "🤱🏼";
	_g.h[":capital_abcd:"] = "🔠";
	_g.h[":flag-st:"] = "🇸🇹";
	_g.h[":flag_Jamaica:"] = "🇯🇲";
	_g.h[":flag_hu:"] = "🇭🇺";
	_g.h[":giraffe_face:"] = "🦒";
	_g.h[":satellite:"] = "🛰️";
	_g.h[":slovenia:"] = "🇸🇮";
	_g.h[":trackball:"] = "🖲️";
	_g.h[":astonished:"] = "😲";
	_g.h[":flag-sv:"] = "🇸🇻";
	_g.h[":flag_Bhutan:"] = "🇧🇹";
	_g.h[":nail_care_tone3:"] = "💅🏽";
	_g.h[":person_bowing_tone1:"] = "🙇🏻";
	_g.h[":Japanese_symbol_for_beginner:"] = "🔰";
	_g.h[":goggles:"] = "🥽";
	_g.h[":Japanese_open_for_business_button:"] = "🈺";
	_g.h[":brown_square:"] = "🟫";
	_g.h[":desert:"] = "🏜️";
	_g.h[":face_with_spiral_eyes:"] = "😵‍💫";
	_g.h[":flag_Ireland:"] = "🇮🇪";
	_g.h[":man-playing-water-polo:"] = "🤽‍♂️";
	_g.h[":man_in_steamy_room_tone2:"] = "🧖🏼‍♂️";
	_g.h[":police_officer_tone5:"] = "👮🏿";
	_g.h[":woman_elf_tone3:"] = "🧝🏽‍♀️";
	_g.h[":man_mage_tone4:"] = "🧙🏾‍♂️";
	_g.h[":anxious_face_with_sweat:"] = "😰";
	_g.h[":badger:"] = "🦡";
	_g.h[":family_wwbb:"] = "👩‍👩‍👦‍👦";
	_g.h[":minibus:"] = "🚐";
	_g.h[":u5272:"] = "🈹";
	_g.h[":baseball:"] = "⚾";
	_g.h[":curly_haired_person:"] = "🧑‍🦱";
	_g.h[":flag_am:"] = "🇦🇲";
	_g.h[":flag_sk:"] = "🇸🇰";
	_g.h[":joy:"] = "😂";
	_g.h[":older_woman:"] = "👵";
	_g.h[":angel_tone5:"] = "👼🏿";
	_g.h[":downcast_face_with_sweat:"] = "😓";
	_g.h[":flag_ta:"] = "🇹🇦";
	_g.h[":flying_saucer:"] = "🛸";
	_g.h[":honeybee:"] = "🐝";
	_g.h[":man_getting_face_massage_tone5:"] = "💆🏿‍♂️";
	_g.h[":person_biking_tone2:"] = "🚴🏼";
	_g.h[":vanuatu:"] = "🇻🇺";
	_g.h[":ID_button:"] = "🆔";
	_g.h[":bath_tone2:"] = "🛀🏼";
	_g.h[":flag-ag:"] = "🇦🇬";
	_g.h[":flag-bs:"] = "🇧🇸";
	_g.h[":flag-mq:"] = "🇲🇶";
	_g.h[":flag_sa:"] = "🇸🇦";
	_g.h[":man_shrugging_tone2:"] = "🤷🏼‍♂️";
	_g.h[":man_vampire_tone1:"] = "🧛🏻‍♂️";
	_g.h[":potable_water:"] = "🚰";
	_g.h[":massage_woman:"] = "💆‍♀️";
	_g.h[":monkey:"] = "🐒";
	_g.h[":spouting_whale:"] = "🐳";
	_g.h[":tokelau:"] = "🇹🇰";
	_g.h[":chart:"] = "💹";
	_g.h[":flag_eu:"] = "🇪🇺";
	_g.h[":horse_racing_tone4:"] = "🏇🏾";
	_g.h[":right_facing_fist_tone4:"] = "🤜🏾";
	_g.h[":rowboat:"] = "🚣‍♂️";
	_g.h[":woman_climbing:"] = "🧗‍♀️";
	_g.h[":woman_frowning_tone2:"] = "🙍🏼‍♀️";
	_g.h[":dove_of_peace:"] = "🕊️";
	_g.h[":left_facing_fist_tone2:"] = "🤛🏼";
	_g.h[":nauseated_face:"] = "🤢";
	_g.h[":red_haired_man:"] = "👨‍🦰";
	_g.h[":flag-tr:"] = "🇹🇷";
	_g.h[":flag_cv:"] = "🇨🇻";
	_g.h[":saxophone:"] = "🎷";
	_g.h[":bicyclist:"] = "🚴‍♂️";
	_g.h[":man-running:"] = "🏃‍♂️";
	_g.h[":man_dancing_tone5:"] = "🕺🏿";
	_g.h[":man_scientist:"] = "👨‍🔬";
	_g.h[":person_surfing_tone3:"] = "🏄🏽";
	_g.h[":stop_button:"] = "⏹";
	_g.h[":t-rex:"] = "🦖";
	_g.h[":crescent_moon:"] = "🌙";
	_g.h[":flag-mu:"] = "🇲🇺";
	_g.h[":woman_office_worker_tone5:"] = "👩🏿‍💼";
	_g.h[":hamsa:"] = "🪬";
	_g.h[":man-getting-haircut:"] = "💇‍♂️";
	_g.h[":female-detective:"] = "🕵️‍♀️";
	_g.h[":sweat_smile:"] = "😅";
	_g.h[":british_virgin_islands:"] = "🇻🇬";
	_g.h[":ear_of_rice:"] = "🌾";
	_g.h[":flag_ch:"] = "🇨🇭";
	_g.h[":person_in_lotus_position_tone2:"] = "🧘🏼";
	_g.h[":pig_nose:"] = "🐽";
	_g.h[":customs:"] = "🛃";
	_g.h[":dolls:"] = "🎎";
	_g.h[":shooting_star:"] = "🌠";
	_g.h[":woman_fairy_tone2:"] = "🧚🏼‍♀️";
	_g.h[":woman_raising_hand_tone5:"] = "🙋🏿‍♀️";
	_g.h[":COOL_button:"] = "🆒";
	_g.h[":lesotho:"] = "🇱🇸";
	_g.h[":love_you_gesture_tone1:"] = "🤟🏻";
	_g.h[":raised_hands_tone3:"] = "🙌🏽";
	_g.h[":ship:"] = "🚢";
	_g.h[":woman_running:"] = "🏃‍♀️";
	_g.h[":colombia:"] = "🇨🇴";
	_g.h[":penguin:"] = "🐧";
	_g.h[":point_up_2_tone3:"] = "👆🏽";
	_g.h[":see_no_evil:"] = "🙈";
	_g.h[":umbrella_on_ground:"] = "⛱️";
	_g.h[":woman-walking:"] = "🚶‍♀️";
	_g.h[":woman_in_lotus_position_tone3:"] = "🧘🏽‍♀️";
	_g.h[":curry:"] = "🍛";
	_g.h[":curry_rice:"] = "🍛";
	_g.h[":flag-uz:"] = "🇺🇿";
	_g.h[":flag_Turkmenistan:"] = "🇹🇲";
	_g.h[":french_fries:"] = "🍟";
	_g.h[":mahjong_red_dragon:"] = "🀄";
	_g.h[":man_climbing_tone4:"] = "🧗🏾‍♂️";
	_g.h[":musical_score:"] = "🎼";
	_g.h[":point_right_tone3:"] = "👉🏽";
	_g.h[":woman_firefighter_tone5:"] = "👩🏿‍🚒";
	_g.h[":auto_rickshaw:"] = "🛺";
	_g.h[":man_biking_tone2:"] = "🚴🏼‍♂️";
	_g.h[":man_with_probing_cane:"] = "👨‍🦯";
	_g.h[":green_heart:"] = "💚";
	_g.h[":male_genie:"] = "🧞‍♂️";
	_g.h[":top:"] = "🔝";
	_g.h[":vulcan_tone4:"] = "🖖🏾";
	_g.h[":confounded_face:"] = "😖";
	_g.h[":flag_Ethiopia:"] = "🇪🇹";
	_g.h[":flag_Mali:"] = "🇲🇱";
	_g.h[":man_shrugging_tone1:"] = "🤷🏻‍♂️";
	_g.h[":wave_tone4:"] = "👋🏾";
	_g.h[":fist_tone1:"] = "✊🏻";
	_g.h[":keycap_4:"] = "4️⃣";
	_g.h[":man_police_officer_tone5:"] = "👮🏿‍♂️";
	_g.h[":woman_white_hair:"] = "👩‍🦳";
	_g.h[":trophy:"] = "🏆";
	_g.h[":woman_construction_worker_tone4:"] = "👷🏾‍♀️";
	_g.h[":woman_raising_hand_tone1:"] = "🙋🏻‍♀️";
	_g.h[":greenland:"] = "🇬🇱";
	_g.h[":laughing:"] = "😆";
	_g.h[":sheep:"] = "🐑";
	_g.h[":NEW_button:"] = "🆕";
	_g.h[":child_tone1:"] = "🧒🏻";
	_g.h[":eight-spoked_asterisk:"] = "✳";
	_g.h[":flag-mz:"] = "🇲🇿";
	_g.h[":heavy_division_sign:"] = "➗";
	_g.h[":metal_tone2:"] = "🤘🏼";
	_g.h[":snow_cloud:"] = "🌨️";
	_g.h[":diamond_suit:"] = "♦";
	_g.h[":dna:"] = "🧬";
	_g.h[":man_wearing_turban_tone3:"] = "👳🏽‍♂️";
	_g.h[":older_man_tone5:"] = "👴🏿";
	_g.h[":person_blond_hair:"] = "👱";
	_g.h[":person_lifting_weights_tone5:"] = "🏋🏿";
	_g.h[":zebra:"] = "🦓";
	_g.h[":love_you_gesture_tone5:"] = "🤟🏿";
	_g.h[":man_astronaut_tone5:"] = "👨🏿‍🚀";
	_g.h[":man_gesturing_ok_tone3:"] = "🙆🏽‍♂️";
	_g.h[":round_pushpin:"] = "📍";
	_g.h[":six-thirty:"] = "🕡";
	_g.h[":eight:"] = "8️⃣";
	_g.h[":flag_South_Africa:"] = "🇿🇦";
	_g.h[":keycap_10:"] = "🔟";
	_g.h[":man_teacher_tone4:"] = "👨🏾‍🏫";
	_g.h[":automobile:"] = "🚗";
	_g.h[":card_index_dividers:"] = "🗂️";
	_g.h[":flag-la:"] = "🇱🇦";
	_g.h[":flag_Cook_Islands:"] = "🇨🇰";
	_g.h[":person_juggling:"] = "🤹";
	_g.h[":ear:"] = "👂";
	_g.h[":woman_scientist_tone2:"] = "👩🏼‍🔬";
	_g.h[":input_symbols:"] = "🔣";
	_g.h[":disappointed_face:"] = "😞";
	_g.h[":man_police_officer:"] = "👮‍♂️";
	_g.h[":mayotte:"] = "🇾🇹";
	_g.h[":shopping_trolley:"] = "🛒";
	_g.h[":womans_flat_shoe:"] = "🥿";
	_g.h[":construction_worker_tone3:"] = "👷🏽";
	_g.h[":flag_Guam:"] = "🇬🇺";
	_g.h[":person_walking_tone3:"] = "🚶🏽";
	_g.h[":scream_cat:"] = "🙀";
	_g.h[":snowboarder_tone2:"] = "🏂🏼";
	_g.h[":no_smoking:"] = "🚭";
	_g.h[":pleading_face:"] = "🥺";
	_g.h[":face_with_symbols_on_mouth:"] = "🤬";
	_g.h[":flag_Aruba:"] = "🇦🇼";
	_g.h[":arrows_counterclockwise:"] = "🔄";
	_g.h[":clinking_glasses:"] = "🥂";
	_g.h[":salad:"] = "🥗";
	_g.h[":smiling_face_with_halo:"] = "😇";
	_g.h[":unicorn:"] = "🦄";
	_g.h[":zzz:"] = "💤";
	_g.h[":anger:"] = "💢";
	_g.h[":backhand_index_pointing_down:"] = "👇";
	_g.h[":flag-al:"] = "🇦🇱";
	_g.h[":flag-pm:"] = "🇵🇲";
	_g.h[":folded_hands:"] = "🙏";
	_g.h[":lizard:"] = "🦎";
	_g.h[":waning_crescent_moon:"] = "🌘";
	_g.h[":corn:"] = "🌽";
	_g.h[":men_wrestling:"] = "🤼‍♂️";
	_g.h[":pakistan:"] = "🇵🇰";
	_g.h[":scissors:"] = "✂️";
	_g.h[":bow:"] = "🙇‍♂️";
	_g.h[":grimacing_face:"] = "😬";
	_g.h[":man_in_business_suit_levitating_tone4:"] = "🕴🏾";
	_g.h[":woman_playing_handball:"] = "🤾‍♀️";
	_g.h[":flag-dg:"] = "🇩🇬";
	_g.h[":flag_Tonga:"] = "🇹🇴";
	_g.h[":keycap_1:"] = "1️⃣";
	_g.h[":melon:"] = "🍈";
	_g.h[":woman_firefighter:"] = "👩‍🚒";
	_g.h[":women’s_room:"] = "🚺";
	_g.h[":alembic:"] = "⚗️";
	_g.h[":flag_Macao_SAR_China:"] = "🇲🇴";
	_g.h[":liechtenstein:"] = "🇱🇮";
	_g.h[":prayer_beads:"] = "📿";
	_g.h[":sunrise_over_mountains:"] = "🌄";
	_g.h[":woman_guard:"] = "💂‍♀️";
	_g.h[":woman_rowing_boat_tone1:"] = "🚣🏻‍♀️";
	_g.h[":bookmark:"] = "🔖";
	_g.h[":breast_feeding_tone4:"] = "🤱🏾";
	_g.h[":camera_flash:"] = "📸";
	_g.h[":flag-zm:"] = "🇿🇲";
	_g.h[":fly:"] = "🪰";
	_g.h[":person_walking_tone4:"] = "🚶🏾";
	_g.h[":united_nations:"] = "🇺🇳";
	_g.h[":barbados:"] = "🇧🇧";
	_g.h[":flag-cy:"] = "🇨🇾";
	_g.h[":flag_la:"] = "🇱🇦";
	_g.h[":man_vampire_tone5:"] = "🧛🏿‍♂️";
	_g.h[":small_blue_diamond:"] = "🔹";
	_g.h[":smiling_imp:"] = "😈";
	_g.h[":bellhop_bell:"] = "🛎️";
	_g.h[":dog_face:"] = "🐶";
	_g.h[":man-mountain-biking:"] = "🚵‍♂️";
	_g.h[":mrs_claus_tone5:"] = "🤶🏿";
	_g.h[":woman_vampire_tone1:"] = "🧛🏻‍♀️";
	_g.h[":giraffe:"] = "🦒";
	_g.h[":kiribati:"] = "🇰🇮";
	_g.h[":om_symbol:"] = "🕉️";
	_g.h[":soccer_ball:"] = "⚽";
	_g.h[":flag-ee:"] = "🇪🇪";
	_g.h[":flag_aq:"] = "🇦🇶";
	_g.h[":man_raising_hand:"] = "🙋‍♂️";
	_g.h[":older_adult_tone1:"] = "🧓🏻";
	_g.h[":dotted_line_face:"] = "🫥";
	_g.h[":flag_fo:"] = "🇫🇴";
	_g.h[":large_orange_circle:"] = "🟠";
	_g.h[":man_and_woman_holding_hands:"] = "👫";
	_g.h[":melting_face:"] = "🫠";
	_g.h[":teapot:"] = "🫖";
	_g.h[":woman_judge_tone3:"] = "👩🏽‍⚖️";
	_g.h[":woman_with_headscarf_tone1:"] = "🧕🏻";
	_g.h[":fallen_leaf:"] = "🍂";
	_g.h[":man-man-girl:"] = "👨‍👨‍👧";
	_g.h[":mushroom:"] = "🍄";
	_g.h[":bison:"] = "🦬";
	_g.h[":book:"] = "📖";
	_g.h[":compression:"] = "🗜️";
	_g.h[":unamused:"] = "😒";
	_g.h[":wastebasket:"] = "🗑️";
	_g.h[":Pisces:"] = "♓";
	_g.h[":man-biking:"] = "🚴‍♂️";
	_g.h[":man_playing_handball_tone4:"] = "🤾🏾‍♂️";
	_g.h[":snowman_without_snow:"] = "⛄";
	_g.h[":grinning_face_with_big_eyes:"] = "😃";
	_g.h[":point_up:"] = "☝️";
	_g.h[":standing_person:"] = "🧍";
	_g.h[":tamale:"] = "🫔";
	_g.h[":woman_raising_hand_tone3:"] = "🙋🏽‍♀️";
	_g.h[":CL_button:"] = "🆑";
	_g.h[":chair:"] = "🪑";
	_g.h[":check_box_with_check:"] = "☑";
	_g.h[":flag_Comoros:"] = "🇰🇲";
	_g.h[":flag_bt:"] = "🇧🇹";
	_g.h[":isle_of_man:"] = "🇮🇲";
	_g.h[":man_pilot_tone3:"] = "👨🏽‍✈️";
	_g.h[":sport_utility_vehicle:"] = "🚙";
	_g.h[":elf_man:"] = "🧝‍♂️";
	_g.h[":information_source:"] = "ℹ️";
	_g.h[":man_student_tone5:"] = "👨🏿‍🎓";
	_g.h[":v_tone3:"] = "✌🏽";
	_g.h[":flag_so:"] = "🇸🇴";
	_g.h[":man_dancing_tone2:"] = "🕺🏼";
	_g.h[":woman_detective_tone5:"] = "🕵🏿‍♀️";
	_g.h[":woman_police_officer_tone1:"] = "👮🏻‍♀️";
	_g.h[":flag_si:"] = "🇸🇮";
	_g.h[":mage_man:"] = "🧙‍♂️";
	_g.h[":man_juggling_tone5:"] = "🤹🏿‍♂️";
	_g.h[":speech_balloon:"] = "💬";
	_g.h[":fox_face:"] = "🦊";
	_g.h[":chestnut:"] = "🌰";
	_g.h[":flag-bf:"] = "🇧🇫";
	_g.h[":flag_Slovenia:"] = "🇸🇮";
	_g.h[":smiling_face_with_heart-eyes:"] = "😍";
	_g.h[":woman_fairy:"] = "🧚‍♀️";
	_g.h[":woman_getting_haircut_tone3:"] = "💇🏽‍♀️";
	_g.h[":heavy_equals_sign:"] = "🟰";
	_g.h[":divide:"] = "➗";
	_g.h[":family_woman_boy_boy:"] = "👩‍👦‍👦";
	_g.h[":flag-mt:"] = "🇲🇹";
	_g.h[":flag_eg:"] = "🇪🇬";
	_g.h[":woman_teacher_tone1:"] = "👩🏻‍🏫";
	_g.h[":woman_with_turban:"] = "👳‍♀️";
	_g.h[":flag-et:"] = "🇪🇹";
	_g.h[":flag-ie:"] = "🇮🇪";
	_g.h[":hot_springs:"] = "♨";
	_g.h[":flag-aw:"] = "🇦🇼";
	_g.h[":man-boy:"] = "👨‍👦";
	_g.h[":pray_tone1:"] = "🙏🏻";
	_g.h[":toothbrush:"] = "🪥";
	_g.h[":parrot:"] = "🦜";
	_g.h[":purple_heart:"] = "💜";
	_g.h[":stuffed_flatbread:"] = "🥙";
	_g.h[":clock130:"] = "🕜";
	_g.h[":flag-ba:"] = "🇧🇦";
	_g.h[":m:"] = "ⓜ️";
	_g.h[":om:"] = "🕉";
	_g.h[":zebra_face:"] = "🦓";
	_g.h[":date:"] = "📅";
	_g.h[":flag-ke:"] = "🇰🇪";
	_g.h[":flag_El_Salvador:"] = "🇸🇻";
	_g.h[":person_playing_water_polo:"] = "🤽";
	_g.h[":water_pistol:"] = "🔫";
	_g.h[":bullettrain_side:"] = "🚄";
	_g.h[":flag_Malaysia:"] = "🇲🇾";
	_g.h[":flag_nf:"] = "🇳🇫";
	_g.h[":menorah_with_nine_branches:"] = "🕎";
	_g.h[":abc:"] = "🔤";
	_g.h[":face_with_monocle:"] = "🧐";
	_g.h[":flag-tk:"] = "🇹🇰";
	_g.h[":flag_za:"] = "🇿🇦";
	_g.h[":police_officer:"] = "👮";
	_g.h[":somalia:"] = "🇸🇴";
	_g.h[":Leo:"] = "♌";
	_g.h[":elf_tone3:"] = "🧝🏽";
	_g.h[":man_firefighter_tone3:"] = "👨🏽‍🚒";
	_g.h[":man_lifting_weights_tone1:"] = "🏋🏻‍♂️";
	_g.h[":microphone2:"] = "🎙";
	_g.h[":AB_button_(blood_type):"] = "🆎";
	_g.h[":construction_worker_tone2:"] = "👷🏼";
	_g.h[":horse_racing_tone5:"] = "🏇🏿";
	_g.h[":triangular_flag_on_post:"] = "🚩";
	_g.h[":detective_tone1:"] = "🕵🏻";
	_g.h[":man_standing:"] = "🧍‍♂️";
	_g.h[":sun_behind_large_cloud:"] = "🌥";
	_g.h[":wrapped_gift:"] = "🎁";
	_g.h[":writing_hand_tone5:"] = "✍🏿";
	_g.h[":croissant:"] = "🥐";
	_g.h[":flag-ic:"] = "🇮🇨";
	_g.h[":flag_Bouvet_Island:"] = "🇧🇻";
	_g.h[":red_exclamation_mark:"] = "❗";
	_g.h[":u7981:"] = "🈲";
	_g.h[":woman_guard_tone4:"] = "💂🏾‍♀️";
	_g.h[":woman_mechanic_tone1:"] = "👩🏻‍🔧";
	_g.h[":koko:"] = "🈁";
	_g.h[":milk:"] = "🥛";
	_g.h[":ophiuchus:"] = "⛎";
	_g.h[":recycling_symbol:"] = "♻";
	_g.h[":bouncing_ball_woman:"] = "⛹️‍♀️";
	_g.h[":hole:"] = "🕳️";
	_g.h[":male-police-officer:"] = "👮‍♂️";
	_g.h[":woman_getting_massage:"] = "💆‍♀️";
	_g.h[":oil:"] = "🛢";
	_g.h[":flag-bi:"] = "🇧🇮";
	_g.h[":flag-sm:"] = "🇸🇲";
	_g.h[":mountain_snow:"] = "🏔";
	$r = _g;
	return $r;
}(this));
texter_general_markdown_MarkdownPatterns.hRuledTitleEReg = new EReg("([^\n]+)\n^(-{3,}|\\+{3,}|_{3,}|\\*{3,}|={3,})$","m");
texter_general_markdown_MarkdownPatterns.linkEReg = new EReg("\\[([^\\]]+)\\]\\(([^)]+)\\)","m");
texter_general_markdown_MarkdownPatterns.codeEReg = new EReg("`([^`\n]+?)`","");
texter_general_markdown_MarkdownPatterns.codeblockEReg = new EReg("```([^\n]*)\n(..+?)```","s");
texter_general_markdown_MarkdownPatterns.tildeCodeblockEReg = new EReg("~~~([^\n]*)\n*(..+?)~~~","s");
texter_general_markdown_MarkdownPatterns.tabCodeblockEReg = new EReg(" {4}(.+)","m");
texter_general_markdown_MarkdownPatterns.imageEReg = new EReg("!\\[([^\\]]+)\\]\\(([^)]+)\\s\"([^\")]+)\"\\)","m");
texter_general_markdown_MarkdownPatterns.listItemEReg = new EReg("^( *)([0-9]+\\.|[+\\-*]) ([^\n]*)","m");
texter_general_markdown_MarkdownPatterns.unorderedListItemEReg = new EReg("^( *)([+\\-*]) ([^\n]*)","m");
texter_general_markdown_MarkdownPatterns.titleEReg = new EReg("^(#{1,6}) ([^\n]+)","m");
texter_general_markdown_MarkdownPatterns.hRuleEReg = new EReg("^(-{3,}|\\+{3,}|_{3,}|\\*{3,}|={3,})$","m");
texter_general_markdown_MarkdownPatterns.astBoldEReg = new EReg("\\*\\*([^\n]+)\\*\\*","m");
texter_general_markdown_MarkdownPatterns.boldEReg = new EReg("__([^\n]+)__","m");
texter_general_markdown_MarkdownPatterns.strikeThroughEReg = new EReg("~~([^~{2}]+?)~~","m");
texter_general_markdown_MarkdownPatterns.italicEReg = new EReg("_([^\n]+)_","m");
texter_general_markdown_MarkdownPatterns.astItalicEReg = new EReg("\\*([^\n]+)\\*","m");
texter_general_markdown_MarkdownPatterns.mathEReg = new EReg("\\$([^\\$]+?)\\$","m");
texter_general_markdown_MarkdownPatterns.parSepEReg = new EReg("\n\n","m");
texter_general_markdown_MarkdownPatterns.emojiEReg = new EReg("(:[^: ]+:)","m");
texter_general_markdown_MarkdownPatterns.indentEReg = new EReg("^(>+)(.+)","m");
texter_general_markdown_MarkdownPatterns.doubleSpaceNewlineEReg = new EReg("  $","m");
texter_general_markdown_MarkdownPatterns.backslashNewlineEReg = new EReg("\\\\$","m");
texter_general_markdown_MarkdownPatterns.alignmentEReg = new EReg("^<align=\"(left|right|center|justify)\">([^\r]+?)</align>","m");
texter_general_markdown_MarkdownBlocks.blockSyntaxMap = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["json"] = texter_general_markdown_MarkdownBlocks.parseJSON;
	_g.h["haxe"] = texter_general_markdown_MarkdownBlocks.parseHaxe;
	_g.h["hx"] = texter_general_markdown_MarkdownBlocks.parseHaxe;
	_g.h["c"] = texter_general_markdown_MarkdownBlocks.parseC;
	_g.h["cpp"] = texter_general_markdown_MarkdownBlocks.parseCPP;
	_g.h["csharp"] = texter_general_markdown_MarkdownBlocks.parseCSharp;
	_g.h["cs"] = texter_general_markdown_MarkdownBlocks.parseCSharp;
	_g.h["java"] = texter_general_markdown_MarkdownBlocks.parseJava;
	_g.h["js"] = texter_general_markdown_MarkdownBlocks.parseJS;
	_g.h["php"] = texter_general_markdown_MarkdownBlocks.parsePHP;
	_g.h["python"] = texter_general_markdown_MarkdownBlocks.parsePython;
	_g.h["ruby"] = texter_general_markdown_MarkdownBlocks.parseRuby;
	_g.h["sql"] = texter_general_markdown_MarkdownBlocks.parseSQL;
	_g.h["xml"] = texter_general_markdown_MarkdownBlocks.parseXML;
	_g.h["yaml"] = texter_general_markdown_MarkdownBlocks.parseYAML;
	_g.h["html"] = texter_general_markdown_MarkdownBlocks.parseHTML;
	_g.h["css"] = texter_general_markdown_MarkdownBlocks.parseCSS;
	_g.h["ocaml"] = texter_general_markdown_MarkdownBlocks.parseOCaml;
	_g.h["ts"] = texter_general_markdown_MarkdownBlocks.parseTS;
	_g.h["go"] = texter_general_markdown_MarkdownBlocks.parseGo;
	_g.h["kotlin"] = texter_general_markdown_MarkdownBlocks.parseKotlin;
	_g.h["rust"] = texter_general_markdown_MarkdownBlocks.parseRust;
	_g.h["scala"] = texter_general_markdown_MarkdownBlocks.parseScala;
	_g.h["swift"] = texter_general_markdown_MarkdownBlocks.parseSwift;
	_g.h["typescript"] = texter_general_markdown_MarkdownBlocks.parseTS;
	_g.h["lua"] = texter_general_markdown_MarkdownBlocks.parseLua;
	_g.h["haskell"] = texter_general_markdown_MarkdownBlocks.parseHaskell;
	_g.h["erlang"] = texter_general_markdown_MarkdownBlocks.parseErlang;
	_g.h["elixir"] = texter_general_markdown_MarkdownBlocks.parseElixir;
	_g.h["elm"] = texter_general_markdown_MarkdownBlocks.parseElm;
	_g.h["clojure"] = texter_general_markdown_MarkdownBlocks.parseClojure;
	_g.h["crystal"] = texter_general_markdown_MarkdownBlocks.parseCrystal;
	_g.h["dart"] = texter_general_markdown_MarkdownBlocks.parseDart;
	_g.h["golang"] = texter_general_markdown_MarkdownBlocks.parseGo;
	_g.h["assembly"] = texter_general_markdown_MarkdownBlocks.parseAssembly;
	_g.h["vb"] = texter_general_markdown_MarkdownBlocks.parseVB;
	_g.h["basic"] = texter_general_markdown_MarkdownBlocks.parseBasic;
	_g.h["vhdl"] = texter_general_markdown_MarkdownBlocks.parseVHDL;
	_g.h["wasm"] = texter_general_markdown_MarkdownBlocks.parseWASM;
	_g.h["solidity"] = texter_general_markdown_MarkdownBlocks.parseSolidity;
	_g.h["cmake"] = texter_general_markdown_MarkdownBlocks.parseCMake;
	_g.h["default"] = texter_general_markdown_MarkdownBlocks.parseDefault;
	$r = _g;
	return $r;
}(this));
texter_general_markdown_MarkdownVisualizer.visualConfig = new texter_general_markdown__$MarkdownVisualizer_VisualConfig();
texter_general_markdown_Markdown.patterns = texter_general_markdown_MarkdownPatterns;
texter_general_markdown_Markdown.syntaxBlocks = texter_general_markdown_MarkdownBlocks;
texter_general_markdown_Markdown.visualizer = texter_general_markdown_MarkdownVisualizer;
texter_general_markdown_Markdown.markdownRules = [texter_general_markdown_MarkdownPatterns.doubleSpaceNewlineEReg,texter_general_markdown_MarkdownPatterns.backslashNewlineEReg,texter_general_markdown_MarkdownPatterns.alignmentEReg,texter_general_markdown_MarkdownPatterns.indentEReg,texter_general_markdown_MarkdownPatterns.hRuledTitleEReg,texter_general_markdown_MarkdownPatterns.titleEReg,texter_general_markdown_MarkdownPatterns.codeblockEReg,texter_general_markdown_MarkdownPatterns.tildeCodeblockEReg,texter_general_markdown_MarkdownPatterns.tabCodeblockEReg,texter_general_markdown_MarkdownPatterns.emojiEReg,texter_general_markdown_MarkdownPatterns.boldEReg,texter_general_markdown_MarkdownPatterns.astBoldEReg,texter_general_markdown_MarkdownPatterns.strikeThroughEReg,texter_general_markdown_MarkdownPatterns.italicEReg,texter_general_markdown_MarkdownPatterns.astItalicEReg,texter_general_markdown_MarkdownPatterns.mathEReg,texter_general_markdown_MarkdownPatterns.codeEReg,texter_general_markdown_MarkdownPatterns.linkEReg,texter_general_markdown_MarkdownPatterns.listItemEReg,texter_general_markdown_MarkdownPatterns.hRuleEReg,texter_general_markdown_MarkdownPatterns.parSepEReg];
vision_ds_Color.TRANSPARENT = 0;
vision_ds_Color.WHITE = -1;
vision_ds_Color.GRAY = -8355712;
vision_ds_Color.BLACK = -16777216;
vision_ds_Color.GREEN = -16711936;
vision_ds_Color.YELLOW = -256;
vision_ds_Color.ORANGE = -23296;
vision_ds_Color.RED = -65536;
vision_ds_Color.PURPLE = -8388480;
vision_ds_Color.BLUE = -16776961;
vision_ds_Color.BROWN = -7650029;
vision_ds_Color.PINK = -16181;
vision_ds_Color.MAGENTA = -65281;
vision_ds_Color.CYAN = -16711681;
vision_ds_Color.SILVER = 12632256;
vision_ds_Color.GOLD = -10496;
vision_ds_Color.OLIVE = -8355840;
vision_ds_Color.MAROON = -8388608;
vision_ds_Color.BORDEAUX = -9294025;
vision_ds_Color.NAVY = -16777088;
vision_ds_Color.TEAL = -16744320;
vision_ds_Color.FUCHSIA = -65281;
vision_ds_Color.AQUA = -16711681;
vision_ds_Color.LIME = -13447886;
vision_ds_Color.CHARCOAL = -13220529;
vision_ds_Color.ONYX = -13289415;
vision_ds_Color.JET = -13355980;
vision_ds_Color.JET_BLACK = -15856112;
vision_ds_Color.ROYAL_BLUE = -12490271;
vision_ds_Color.COLOR_REGEX = new EReg("^(0x|#)(([A-F0-9]{2}){3,4})$","i");
vision_ds_Image.OFFSET = 11;
vision_ds_Image.WIDTH_BYTES = 2;
vision_ds_Image.VIEW_XY_BYTES = 4;
vision_ds_Image.VIEW_WH_BYTES = 4;
vision_ds_Image.VIEW_SHAPE_BYTES = 1;
vision_ds_Image.DATA_GAP = 2;
vision_ds_PixelFormat.ARGB = 0;
vision_ds_PixelFormat.RGBA = 1;
vision_ds_PixelFormat.ABGR = 2;
vision_ds_PixelFormat.BGRA = 3;
vision_ds_PixelFormat.RGB = 4;
vision_ds_PixelFormat.BGR = 5;
vision_helpers_VisionThread.COUNT = 0;
vision_tools_ImageTools.defaultResizeAlgorithm = 1;
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

});
$hx_exports.lime = $hx_exports.lime || {};
$hx_exports.lime.$scripts = $hx_exports.lime.$scripts || {};
$hx_exports.lime.$scripts["LittleDemo"] = $hx_script;
$hx_exports.lime.embed = function(projectName) { var exports = {};
	var script = $hx_exports.lime.$scripts[projectName];
	if (!script) throw Error("Cannot find project name \"" + projectName + "\"");
	script(exports, $global);
	for (var key in exports) $hx_exports[key] = $hx_exports[key] || exports[key];
	var lime = exports.lime || window.lime;
	if (lime && lime.embed && this != lime.embed) lime.embed.apply(lime, arguments);
	return exports;
};
if(typeof define == "function" && define.amd) {
	define([], function() { return $hx_exports.lime; });
	define.__amd = define.amd;
	define.amd = null;
}
})(typeof exports != "undefined" ? exports : typeof define == "function" && define.amd ? {} : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

/*! howler.js v2.2.4 | (c) 2013-2020, James Simpson of GoldFire Studios | MIT License | howlerjs.com */
!function(){"use strict";var e=function(){this.init()};e.prototype={init:function(){var e=this||n;return e._counter=1e3,e._html5AudioPool=[],e.html5PoolSize=10,e._codecs={},e._howls=[],e._muted=!1,e._volume=1,e._canPlayEvent="canplaythrough",e._navigator="undefined"!=typeof window&&window.navigator?window.navigator:null,e.masterGain=null,e.noAudio=!1,e.usingWebAudio=!0,e.autoSuspend=!0,e.ctx=null,e.autoUnlock=!0,e._setup(),e},volume:function(e){var o=this||n;if(e=parseFloat(e),o.ctx||_(),void 0!==e&&e>=0&&e<=1){if(o._volume=e,o._muted)return o;o.usingWebAudio&&o.masterGain.gain.setValueAtTime(e,n.ctx.currentTime);for(var t=0;t<o._howls.length;t++)if(!o._howls[t]._webAudio)for(var r=o._howls[t]._getSoundIds(),a=0;a<r.length;a++){var u=o._howls[t]._soundById(r[a]);u&&u._node&&(u._node.volume=u._volume*e)}return o}return o._volume},mute:function(e){var o=this||n;o.ctx||_(),o._muted=e,o.usingWebAudio&&o.masterGain.gain.setValueAtTime(e?0:o._volume,n.ctx.currentTime);for(var t=0;t<o._howls.length;t++)if(!o._howls[t]._webAudio)for(var r=o._howls[t]._getSoundIds(),a=0;a<r.length;a++){var u=o._howls[t]._soundById(r[a]);u&&u._node&&(u._node.muted=!!e||u._muted)}return o},stop:function(){for(var e=this||n,o=0;o<e._howls.length;o++)e._howls[o].stop();return e},unload:function(){for(var e=this||n,o=e._howls.length-1;o>=0;o--)e._howls[o].unload();return e.usingWebAudio&&e.ctx&&void 0!==e.ctx.close&&(e.ctx.close(),e.ctx=null,_()),e},codecs:function(e){return(this||n)._codecs[e.replace(/^x-/,"")]},_setup:function(){var e=this||n;if(e.state=e.ctx?e.ctx.state||"suspended":"suspended",e._autoSuspend(),!e.usingWebAudio)if("undefined"!=typeof Audio)try{var o=new Audio;void 0===o.oncanplaythrough&&(e._canPlayEvent="canplay")}catch(n){e.noAudio=!0}else e.noAudio=!0;try{var o=new Audio;o.muted&&(e.noAudio=!0)}catch(e){}return e.noAudio||e._setupCodecs(),e},_setupCodecs:function(){var e=this||n,o=null;try{o="undefined"!=typeof Audio?new Audio:null}catch(n){return e}if(!o||"function"!=typeof o.canPlayType)return e;var t=o.canPlayType("audio/mpeg;").replace(/^no$/,""),r=e._navigator?e._navigator.userAgent:"",a=r.match(/OPR\/(\d+)/g),u=a&&parseInt(a[0].split("/")[1],10)<33,d=-1!==r.indexOf("Safari")&&-1===r.indexOf("Chrome"),i=r.match(/Version\/(.*?) /),_=d&&i&&parseInt(i[1],10)<15;return e._codecs={mp3:!(u||!t&&!o.canPlayType("audio/mp3;").replace(/^no$/,"")),mpeg:!!t,opus:!!o.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/,""),ogg:!!o.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),oga:!!o.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),wav:!!(o.canPlayType('audio/wav; codecs="1"')||o.canPlayType("audio/wav")).replace(/^no$/,""),aac:!!o.canPlayType("audio/aac;").replace(/^no$/,""),caf:!!o.canPlayType("audio/x-caf;").replace(/^no$/,""),m4a:!!(o.canPlayType("audio/x-m4a;")||o.canPlayType("audio/m4a;")||o.canPlayType("audio/aac;")).replace(/^no$/,""),m4b:!!(o.canPlayType("audio/x-m4b;")||o.canPlayType("audio/m4b;")||o.canPlayType("audio/aac;")).replace(/^no$/,""),mp4:!!(o.canPlayType("audio/x-mp4;")||o.canPlayType("audio/mp4;")||o.canPlayType("audio/aac;")).replace(/^no$/,""),weba:!(_||!o.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,"")),webm:!(_||!o.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,"")),dolby:!!o.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/,""),flac:!!(o.canPlayType("audio/x-flac;")||o.canPlayType("audio/flac;")).replace(/^no$/,"")},e},_unlockAudio:function(){var e=this||n;if(!e._audioUnlocked&&e.ctx){e._audioUnlocked=!1,e.autoUnlock=!1,e._mobileUnloaded||44100===e.ctx.sampleRate||(e._mobileUnloaded=!0,e.unload()),e._scratchBuffer=e.ctx.createBuffer(1,1,22050);var o=function(n){for(;e._html5AudioPool.length<e.html5PoolSize;)try{var t=new Audio;t._unlocked=!0,e._releaseHtml5Audio(t)}catch(n){e.noAudio=!0;break}for(var r=0;r<e._howls.length;r++)if(!e._howls[r]._webAudio)for(var a=e._howls[r]._getSoundIds(),u=0;u<a.length;u++){var d=e._howls[r]._soundById(a[u]);d&&d._node&&!d._node._unlocked&&(d._node._unlocked=!0,d._node.load())}e._autoResume();var i=e.ctx.createBufferSource();i.buffer=e._scratchBuffer,i.connect(e.ctx.destination),void 0===i.start?i.noteOn(0):i.start(0),"function"==typeof e.ctx.resume&&e.ctx.resume(),i.onended=function(){i.disconnect(0),e._audioUnlocked=!0,document.removeEventListener("touchstart",o,!0),document.removeEventListener("touchend",o,!0),document.removeEventListener("click",o,!0),document.removeEventListener("keydown",o,!0);for(var n=0;n<e._howls.length;n++)e._howls[n]._emit("unlock")}};return document.addEventListener("touchstart",o,!0),document.addEventListener("touchend",o,!0),document.addEventListener("click",o,!0),document.addEventListener("keydown",o,!0),e}},_obtainHtml5Audio:function(){var e=this||n;if(e._html5AudioPool.length)return e._html5AudioPool.pop();var o=(new Audio).play();return o&&"undefined"!=typeof Promise&&(o instanceof Promise||"function"==typeof o.then)&&o.catch(function(){console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.")}),new Audio},_releaseHtml5Audio:function(e){var o=this||n;return e._unlocked&&o._html5AudioPool.push(e),o},_autoSuspend:function(){var e=this;if(e.autoSuspend&&e.ctx&&void 0!==e.ctx.suspend&&n.usingWebAudio){for(var o=0;o<e._howls.length;o++)if(e._howls[o]._webAudio)for(var t=0;t<e._howls[o]._sounds.length;t++)if(!e._howls[o]._sounds[t]._paused)return e;return e._suspendTimer&&clearTimeout(e._suspendTimer),e._suspendTimer=setTimeout(function(){if(e.autoSuspend){e._suspendTimer=null,e.state="suspending";var n=function(){e.state="suspended",e._resumeAfterSuspend&&(delete e._resumeAfterSuspend,e._autoResume())};e.ctx.suspend().then(n,n)}},3e4),e}},_autoResume:function(){var e=this;if(e.ctx&&void 0!==e.ctx.resume&&n.usingWebAudio)return"running"===e.state&&"interrupted"!==e.ctx.state&&e._suspendTimer?(clearTimeout(e._suspendTimer),e._suspendTimer=null):"suspended"===e.state||"running"===e.state&&"interrupted"===e.ctx.state?(e.ctx.resume().then(function(){e.state="running";for(var n=0;n<e._howls.length;n++)e._howls[n]._emit("resume")}),e._suspendTimer&&(clearTimeout(e._suspendTimer),e._suspendTimer=null)):"suspending"===e.state&&(e._resumeAfterSuspend=!0),e}};var n=new e,o=function(e){var n=this;if(!e.src||0===e.src.length)return void console.error("An array of source files must be passed with any new Howl.");n.init(e)};o.prototype={init:function(e){var o=this;return n.ctx||_(),o._autoplay=e.autoplay||!1,o._format="string"!=typeof e.format?e.format:[e.format],o._html5=e.html5||!1,o._muted=e.mute||!1,o._loop=e.loop||!1,o._pool=e.pool||5,o._preload="boolean"!=typeof e.preload&&"metadata"!==e.preload||e.preload,o._rate=e.rate||1,o._sprite=e.sprite||{},o._src="string"!=typeof e.src?e.src:[e.src],o._volume=void 0!==e.volume?e.volume:1,o._xhr={method:e.xhr&&e.xhr.method?e.xhr.method:"GET",headers:e.xhr&&e.xhr.headers?e.xhr.headers:null,withCredentials:!(!e.xhr||!e.xhr.withCredentials)&&e.xhr.withCredentials},o._duration=0,o._state="unloaded",o._sounds=[],o._endTimers={},o._queue=[],o._playLock=!1,o._onend=e.onend?[{fn:e.onend}]:[],o._onfade=e.onfade?[{fn:e.onfade}]:[],o._onload=e.onload?[{fn:e.onload}]:[],o._onloaderror=e.onloaderror?[{fn:e.onloaderror}]:[],o._onplayerror=e.onplayerror?[{fn:e.onplayerror}]:[],o._onpause=e.onpause?[{fn:e.onpause}]:[],o._onplay=e.onplay?[{fn:e.onplay}]:[],o._onstop=e.onstop?[{fn:e.onstop}]:[],o._onmute=e.onmute?[{fn:e.onmute}]:[],o._onvolume=e.onvolume?[{fn:e.onvolume}]:[],o._onrate=e.onrate?[{fn:e.onrate}]:[],o._onseek=e.onseek?[{fn:e.onseek}]:[],o._onunlock=e.onunlock?[{fn:e.onunlock}]:[],o._onresume=[],o._webAudio=n.usingWebAudio&&!o._html5,void 0!==n.ctx&&n.ctx&&n.autoUnlock&&n._unlockAudio(),n._howls.push(o),o._autoplay&&o._queue.push({event:"play",action:function(){o.play()}}),o._preload&&"none"!==o._preload&&o.load(),o},load:function(){var e=this,o=null;if(n.noAudio)return void e._emit("loaderror",null,"No audio support.");"string"==typeof e._src&&(e._src=[e._src]);for(var r=0;r<e._src.length;r++){var u,d;if(e._format&&e._format[r])u=e._format[r];else{if("string"!=typeof(d=e._src[r])){e._emit("loaderror",null,"Non-string found in selected audio sources - ignoring.");continue}u=/^data:audio\/([^;,]+);/i.exec(d),u||(u=/\.([^.]+)$/.exec(d.split("?",1)[0])),u&&(u=u[1].toLowerCase())}if(u||console.warn('No file extension was found. Consider using the "format" property or specify an extension.'),u&&n.codecs(u)){o=e._src[r];break}}return o?(e._src=o,e._state="loading","https:"===window.location.protocol&&"http:"===o.slice(0,5)&&(e._html5=!0,e._webAudio=!1),new t(e),e._webAudio&&a(e),e):void e._emit("loaderror",null,"No codec support for selected audio sources.")},play:function(e,o){var t=this,r=null;if("number"==typeof e)r=e,e=null;else{if("string"==typeof e&&"loaded"===t._state&&!t._sprite[e])return null;if(void 0===e&&(e="__default",!t._playLock)){for(var a=0,u=0;u<t._sounds.length;u++)t._sounds[u]._paused&&!t._sounds[u]._ended&&(a++,r=t._sounds[u]._id);1===a?e=null:r=null}}var d=r?t._soundById(r):t._inactiveSound();if(!d)return null;if(r&&!e&&(e=d._sprite||"__default"),"loaded"!==t._state){d._sprite=e,d._ended=!1;var i=d._id;return t._queue.push({event:"play",action:function(){t.play(i)}}),i}if(r&&!d._paused)return o||t._loadQueue("play"),d._id;t._webAudio&&n._autoResume();var _=Math.max(0,d._seek>0?d._seek:t._sprite[e][0]/1e3),s=Math.max(0,(t._sprite[e][0]+t._sprite[e][1])/1e3-_),l=1e3*s/Math.abs(d._rate),c=t._sprite[e][0]/1e3,f=(t._sprite[e][0]+t._sprite[e][1])/1e3;d._sprite=e,d._ended=!1;var p=function(){d._paused=!1,d._seek=_,d._start=c,d._stop=f,d._loop=!(!d._loop&&!t._sprite[e][2])};if(_>=f)return void t._ended(d);var m=d._node;if(t._webAudio){var v=function(){t._playLock=!1,p(),t._refreshBuffer(d);var e=d._muted||t._muted?0:d._volume;m.gain.setValueAtTime(e,n.ctx.currentTime),d._playStart=n.ctx.currentTime,void 0===m.bufferSource.start?d._loop?m.bufferSource.noteGrainOn(0,_,86400):m.bufferSource.noteGrainOn(0,_,s):d._loop?m.bufferSource.start(0,_,86400):m.bufferSource.start(0,_,s),l!==1/0&&(t._endTimers[d._id]=setTimeout(t._ended.bind(t,d),l)),o||setTimeout(function(){t._emit("play",d._id),t._loadQueue()},0)};"running"===n.state&&"interrupted"!==n.ctx.state?v():(t._playLock=!0,t.once("resume",v),t._clearTimer(d._id))}else{var h=function(){m.currentTime=_,m.muted=d._muted||t._muted||n._muted||m.muted,m.volume=d._volume*n.volume(),m.playbackRate=d._rate;try{var r=m.play();if(r&&"undefined"!=typeof Promise&&(r instanceof Promise||"function"==typeof r.then)?(t._playLock=!0,p(),r.then(function(){t._playLock=!1,m._unlocked=!0,o?t._loadQueue():t._emit("play",d._id)}).catch(function(){t._playLock=!1,t._emit("playerror",d._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."),d._ended=!0,d._paused=!0})):o||(t._playLock=!1,p(),t._emit("play",d._id)),m.playbackRate=d._rate,m.paused)return void t._emit("playerror",d._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");"__default"!==e||d._loop?t._endTimers[d._id]=setTimeout(t._ended.bind(t,d),l):(t._endTimers[d._id]=function(){t._ended(d),m.removeEventListener("ended",t._endTimers[d._id],!1)},m.addEventListener("ended",t._endTimers[d._id],!1))}catch(e){t._emit("playerror",d._id,e)}};"data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"===m.src&&(m.src=t._src,m.load());var y=window&&window.ejecta||!m.readyState&&n._navigator.isCocoonJS;if(m.readyState>=3||y)h();else{t._playLock=!0,t._state="loading";var g=function(){t._state="loaded",h(),m.removeEventListener(n._canPlayEvent,g,!1)};m.addEventListener(n._canPlayEvent,g,!1),t._clearTimer(d._id)}}return d._id},pause:function(e){var n=this;if("loaded"!==n._state||n._playLock)return n._queue.push({event:"pause",action:function(){n.pause(e)}}),n;for(var o=n._getSoundIds(e),t=0;t<o.length;t++){n._clearTimer(o[t]);var r=n._soundById(o[t]);if(r&&!r._paused&&(r._seek=n.seek(o[t]),r._rateSeek=0,r._paused=!0,n._stopFade(o[t]),r._node))if(n._webAudio){if(!r._node.bufferSource)continue;void 0===r._node.bufferSource.stop?r._node.bufferSource.noteOff(0):r._node.bufferSource.stop(0),n._cleanBuffer(r._node)}else isNaN(r._node.duration)&&r._node.duration!==1/0||r._node.pause();arguments[1]||n._emit("pause",r?r._id:null)}return n},stop:function(e,n){var o=this;if("loaded"!==o._state||o._playLock)return o._queue.push({event:"stop",action:function(){o.stop(e)}}),o;for(var t=o._getSoundIds(e),r=0;r<t.length;r++){o._clearTimer(t[r]);var a=o._soundById(t[r]);a&&(a._seek=a._start||0,a._rateSeek=0,a._paused=!0,a._ended=!0,o._stopFade(t[r]),a._node&&(o._webAudio?a._node.bufferSource&&(void 0===a._node.bufferSource.stop?a._node.bufferSource.noteOff(0):a._node.bufferSource.stop(0),o._cleanBuffer(a._node)):isNaN(a._node.duration)&&a._node.duration!==1/0||(a._node.currentTime=a._start||0,a._node.pause(),a._node.duration===1/0&&o._clearSound(a._node))),n||o._emit("stop",a._id))}return o},mute:function(e,o){var t=this;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"mute",action:function(){t.mute(e,o)}}),t;if(void 0===o){if("boolean"!=typeof e)return t._muted;t._muted=e}for(var r=t._getSoundIds(o),a=0;a<r.length;a++){var u=t._soundById(r[a]);u&&(u._muted=e,u._interval&&t._stopFade(u._id),t._webAudio&&u._node?u._node.gain.setValueAtTime(e?0:u._volume,n.ctx.currentTime):u._node&&(u._node.muted=!!n._muted||e),t._emit("mute",u._id))}return t},volume:function(){var e,o,t=this,r=arguments;if(0===r.length)return t._volume;if(1===r.length||2===r.length&&void 0===r[1]){t._getSoundIds().indexOf(r[0])>=0?o=parseInt(r[0],10):e=parseFloat(r[0])}else r.length>=2&&(e=parseFloat(r[0]),o=parseInt(r[1],10));var a;if(!(void 0!==e&&e>=0&&e<=1))return a=o?t._soundById(o):t._sounds[0],a?a._volume:0;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"volume",action:function(){t.volume.apply(t,r)}}),t;void 0===o&&(t._volume=e),o=t._getSoundIds(o);for(var u=0;u<o.length;u++)(a=t._soundById(o[u]))&&(a._volume=e,r[2]||t._stopFade(o[u]),t._webAudio&&a._node&&!a._muted?a._node.gain.setValueAtTime(e,n.ctx.currentTime):a._node&&!a._muted&&(a._node.volume=e*n.volume()),t._emit("volume",a._id));return t},fade:function(e,o,t,r){var a=this;if("loaded"!==a._state||a._playLock)return a._queue.push({event:"fade",action:function(){a.fade(e,o,t,r)}}),a;e=Math.min(Math.max(0,parseFloat(e)),1),o=Math.min(Math.max(0,parseFloat(o)),1),t=parseFloat(t),a.volume(e,r);for(var u=a._getSoundIds(r),d=0;d<u.length;d++){var i=a._soundById(u[d]);if(i){if(r||a._stopFade(u[d]),a._webAudio&&!i._muted){var _=n.ctx.currentTime,s=_+t/1e3;i._volume=e,i._node.gain.setValueAtTime(e,_),i._node.gain.linearRampToValueAtTime(o,s)}a._startFadeInterval(i,e,o,t,u[d],void 0===r)}}return a},_startFadeInterval:function(e,n,o,t,r,a){var u=this,d=n,i=o-n,_=Math.abs(i/.01),s=Math.max(4,_>0?t/_:t),l=Date.now();e._fadeTo=o,e._interval=setInterval(function(){var r=(Date.now()-l)/t;l=Date.now(),d+=i*r,d=Math.round(100*d)/100,d=i<0?Math.max(o,d):Math.min(o,d),u._webAudio?e._volume=d:u.volume(d,e._id,!0),a&&(u._volume=d),(o<n&&d<=o||o>n&&d>=o)&&(clearInterval(e._interval),e._interval=null,e._fadeTo=null,u.volume(o,e._id),u._emit("fade",e._id))},s)},_stopFade:function(e){var o=this,t=o._soundById(e);return t&&t._interval&&(o._webAudio&&t._node.gain.cancelScheduledValues(n.ctx.currentTime),clearInterval(t._interval),t._interval=null,o.volume(t._fadeTo,e),t._fadeTo=null,o._emit("fade",e)),o},loop:function(){var e,n,o,t=this,r=arguments;if(0===r.length)return t._loop;if(1===r.length){if("boolean"!=typeof r[0])return!!(o=t._soundById(parseInt(r[0],10)))&&o._loop;e=r[0],t._loop=e}else 2===r.length&&(e=r[0],n=parseInt(r[1],10));for(var a=t._getSoundIds(n),u=0;u<a.length;u++)(o=t._soundById(a[u]))&&(o._loop=e,t._webAudio&&o._node&&o._node.bufferSource&&(o._node.bufferSource.loop=e,e&&(o._node.bufferSource.loopStart=o._start||0,o._node.bufferSource.loopEnd=o._stop,t.playing(a[u])&&(t.pause(a[u],!0),t.play(a[u],!0)))));return t},rate:function(){var e,o,t=this,r=arguments;if(0===r.length)o=t._sounds[0]._id;else if(1===r.length){var a=t._getSoundIds(),u=a.indexOf(r[0]);u>=0?o=parseInt(r[0],10):e=parseFloat(r[0])}else 2===r.length&&(e=parseFloat(r[0]),o=parseInt(r[1],10));var d;if("number"!=typeof e)return d=t._soundById(o),d?d._rate:t._rate;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"rate",action:function(){t.rate.apply(t,r)}}),t;void 0===o&&(t._rate=e),o=t._getSoundIds(o);for(var i=0;i<o.length;i++)if(d=t._soundById(o[i])){t.playing(o[i])&&(d._rateSeek=t.seek(o[i]),d._playStart=t._webAudio?n.ctx.currentTime:d._playStart),d._rate=e,t._webAudio&&d._node&&d._node.bufferSource?d._node.bufferSource.playbackRate.setValueAtTime(e,n.ctx.currentTime):d._node&&(d._node.playbackRate=e);var _=t.seek(o[i]),s=(t._sprite[d._sprite][0]+t._sprite[d._sprite][1])/1e3-_,l=1e3*s/Math.abs(d._rate);!t._endTimers[o[i]]&&d._paused||(t._clearTimer(o[i]),t._endTimers[o[i]]=setTimeout(t._ended.bind(t,d),l)),t._emit("rate",d._id)}return t},seek:function(){var e,o,t=this,r=arguments;if(0===r.length)t._sounds.length&&(o=t._sounds[0]._id);else if(1===r.length){var a=t._getSoundIds(),u=a.indexOf(r[0]);u>=0?o=parseInt(r[0],10):t._sounds.length&&(o=t._sounds[0]._id,e=parseFloat(r[0]))}else 2===r.length&&(e=parseFloat(r[0]),o=parseInt(r[1],10));if(void 0===o)return 0;if("number"==typeof e&&("loaded"!==t._state||t._playLock))return t._queue.push({event:"seek",action:function(){t.seek.apply(t,r)}}),t;var d=t._soundById(o);if(d){if(!("number"==typeof e&&e>=0)){if(t._webAudio){var i=t.playing(o)?n.ctx.currentTime-d._playStart:0,_=d._rateSeek?d._rateSeek-d._seek:0;return d._seek+(_+i*Math.abs(d._rate))}return d._node.currentTime}var s=t.playing(o);s&&t.pause(o,!0),d._seek=e,d._ended=!1,t._clearTimer(o),t._webAudio||!d._node||isNaN(d._node.duration)||(d._node.currentTime=e);var l=function(){s&&t.play(o,!0),t._emit("seek",o)};if(s&&!t._webAudio){var c=function(){t._playLock?setTimeout(c,0):l()};setTimeout(c,0)}else l()}return t},playing:function(e){var n=this;if("number"==typeof e){var o=n._soundById(e);return!!o&&!o._paused}for(var t=0;t<n._sounds.length;t++)if(!n._sounds[t]._paused)return!0;return!1},duration:function(e){var n=this,o=n._duration,t=n._soundById(e);return t&&(o=n._sprite[t._sprite][1]/1e3),o},state:function(){return this._state},unload:function(){for(var e=this,o=e._sounds,t=0;t<o.length;t++)o[t]._paused||e.stop(o[t]._id),e._webAudio||(e._clearSound(o[t]._node),o[t]._node.removeEventListener("error",o[t]._errorFn,!1),o[t]._node.removeEventListener(n._canPlayEvent,o[t]._loadFn,!1),o[t]._node.removeEventListener("ended",o[t]._endFn,!1),n._releaseHtml5Audio(o[t]._node)),delete o[t]._node,e._clearTimer(o[t]._id);var a=n._howls.indexOf(e);a>=0&&n._howls.splice(a,1);var u=!0;for(t=0;t<n._howls.length;t++)if(n._howls[t]._src===e._src||e._src.indexOf(n._howls[t]._src)>=0){u=!1;break}return r&&u&&delete r[e._src],n.noAudio=!1,e._state="unloaded",e._sounds=[],e=null,null},on:function(e,n,o,t){var r=this,a=r["_on"+e];return"function"==typeof n&&a.push(t?{id:o,fn:n,once:t}:{id:o,fn:n}),r},off:function(e,n,o){var t=this,r=t["_on"+e],a=0;if("number"==typeof n&&(o=n,n=null),n||o)for(a=0;a<r.length;a++){var u=o===r[a].id;if(n===r[a].fn&&u||!n&&u){r.splice(a,1);break}}else if(e)t["_on"+e]=[];else{var d=Object.keys(t);for(a=0;a<d.length;a++)0===d[a].indexOf("_on")&&Array.isArray(t[d[a]])&&(t[d[a]]=[])}return t},once:function(e,n,o){var t=this;return t.on(e,n,o,1),t},_emit:function(e,n,o){for(var t=this,r=t["_on"+e],a=r.length-1;a>=0;a--)r[a].id&&r[a].id!==n&&"load"!==e||(setTimeout(function(e){e.call(this,n,o)}.bind(t,r[a].fn),0),r[a].once&&t.off(e,r[a].fn,r[a].id));return t._loadQueue(e),t},_loadQueue:function(e){var n=this;if(n._queue.length>0){var o=n._queue[0];o.event===e&&(n._queue.shift(),n._loadQueue()),e||o.action()}return n},_ended:function(e){var o=this,t=e._sprite;if(!o._webAudio&&e._node&&!e._node.paused&&!e._node.ended&&e._node.currentTime<e._stop)return setTimeout(o._ended.bind(o,e),100),o;var r=!(!e._loop&&!o._sprite[t][2]);if(o._emit("end",e._id),!o._webAudio&&r&&o.stop(e._id,!0).play(e._id),o._webAudio&&r){o._emit("play",e._id),e._seek=e._start||0,e._rateSeek=0,e._playStart=n.ctx.currentTime;var a=1e3*(e._stop-e._start)/Math.abs(e._rate);o._endTimers[e._id]=setTimeout(o._ended.bind(o,e),a)}return o._webAudio&&!r&&(e._paused=!0,e._ended=!0,e._seek=e._start||0,e._rateSeek=0,o._clearTimer(e._id),o._cleanBuffer(e._node),n._autoSuspend()),o._webAudio||r||o.stop(e._id,!0),o},_clearTimer:function(e){var n=this;if(n._endTimers[e]){if("function"!=typeof n._endTimers[e])clearTimeout(n._endTimers[e]);else{var o=n._soundById(e);o&&o._node&&o._node.removeEventListener("ended",n._endTimers[e],!1)}delete n._endTimers[e]}return n},_soundById:function(e){for(var n=this,o=0;o<n._sounds.length;o++)if(e===n._sounds[o]._id)return n._sounds[o];return null},_inactiveSound:function(){var e=this;e._drain();for(var n=0;n<e._sounds.length;n++)if(e._sounds[n]._ended)return e._sounds[n].reset();return new t(e)},_drain:function(){var e=this,n=e._pool,o=0,t=0;if(!(e._sounds.length<n)){for(t=0;t<e._sounds.length;t++)e._sounds[t]._ended&&o++;for(t=e._sounds.length-1;t>=0;t--){if(o<=n)return;e._sounds[t]._ended&&(e._webAudio&&e._sounds[t]._node&&e._sounds[t]._node.disconnect(0),e._sounds.splice(t,1),o--)}}},_getSoundIds:function(e){var n=this;if(void 0===e){for(var o=[],t=0;t<n._sounds.length;t++)o.push(n._sounds[t]._id);return o}return[e]},_refreshBuffer:function(e){var o=this;return e._node.bufferSource=n.ctx.createBufferSource(),e._node.bufferSource.buffer=r[o._src],e._panner?e._node.bufferSource.connect(e._panner):e._node.bufferSource.connect(e._node),e._node.bufferSource.loop=e._loop,e._loop&&(e._node.bufferSource.loopStart=e._start||0,e._node.bufferSource.loopEnd=e._stop||0),e._node.bufferSource.playbackRate.setValueAtTime(e._rate,n.ctx.currentTime),o},_cleanBuffer:function(e){var o=this,t=n._navigator&&n._navigator.vendor.indexOf("Apple")>=0;if(!e.bufferSource)return o;if(n._scratchBuffer&&e.bufferSource&&(e.bufferSource.onended=null,e.bufferSource.disconnect(0),t))try{e.bufferSource.buffer=n._scratchBuffer}catch(e){}return e.bufferSource=null,o},_clearSound:function(e){/MSIE |Trident\//.test(n._navigator&&n._navigator.userAgent)||(e.src="data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA")}};var t=function(e){this._parent=e,this.init()};t.prototype={init:function(){var e=this,o=e._parent;return e._muted=o._muted,e._loop=o._loop,e._volume=o._volume,e._rate=o._rate,e._seek=0,e._paused=!0,e._ended=!0,e._sprite="__default",e._id=++n._counter,o._sounds.push(e),e.create(),e},create:function(){var e=this,o=e._parent,t=n._muted||e._muted||e._parent._muted?0:e._volume;return o._webAudio?(e._node=void 0===n.ctx.createGain?n.ctx.createGainNode():n.ctx.createGain(),e._node.gain.setValueAtTime(t,n.ctx.currentTime),e._node.paused=!0,e._node.connect(n.masterGain)):n.noAudio||(e._node=n._obtainHtml5Audio(),e._errorFn=e._errorListener.bind(e),e._node.addEventListener("error",e._errorFn,!1),e._loadFn=e._loadListener.bind(e),e._node.addEventListener(n._canPlayEvent,e._loadFn,!1),e._endFn=e._endListener.bind(e),e._node.addEventListener("ended",e._endFn,!1),e._node.src=o._src,e._node.preload=!0===o._preload?"auto":o._preload,e._node.volume=t*n.volume(),e._node.load()),e},reset:function(){var e=this,o=e._parent;return e._muted=o._muted,e._loop=o._loop,e._volume=o._volume,e._rate=o._rate,e._seek=0,e._rateSeek=0,e._paused=!0,e._ended=!0,e._sprite="__default",e._id=++n._counter,e},_errorListener:function(){var e=this;e._parent._emit("loaderror",e._id,e._node.error?e._node.error.code:0),e._node.removeEventListener("error",e._errorFn,!1)},_loadListener:function(){var e=this,o=e._parent;o._duration=Math.ceil(10*e._node.duration)/10,0===Object.keys(o._sprite).length&&(o._sprite={__default:[0,1e3*o._duration]}),"loaded"!==o._state&&(o._state="loaded",o._emit("load"),o._loadQueue()),e._node.removeEventListener(n._canPlayEvent,e._loadFn,!1)},_endListener:function(){var e=this,n=e._parent;n._duration===1/0&&(n._duration=Math.ceil(10*e._node.duration)/10,n._sprite.__default[1]===1/0&&(n._sprite.__default[1]=1e3*n._duration),n._ended(e)),e._node.removeEventListener("ended",e._endFn,!1)}};var r={},a=function(e){var n=e._src;if(r[n])return e._duration=r[n].duration,void i(e);if(/^data:[^;]+;base64,/.test(n)){for(var o=atob(n.split(",")[1]),t=new Uint8Array(o.length),a=0;a<o.length;++a)t[a]=o.charCodeAt(a);d(t.buffer,e)}else{var _=new XMLHttpRequest;_.open(e._xhr.method,n,!0),_.withCredentials=e._xhr.withCredentials,_.responseType="arraybuffer",e._xhr.headers&&Object.keys(e._xhr.headers).forEach(function(n){_.setRequestHeader(n,e._xhr.headers[n])}),_.onload=function(){var n=(_.status+"")[0];if("0"!==n&&"2"!==n&&"3"!==n)return void e._emit("loaderror",null,"Failed loading audio file with status: "+_.status+".");d(_.response,e)},_.onerror=function(){e._webAudio&&(e._html5=!0,e._webAudio=!1,e._sounds=[],delete r[n],e.load())},u(_)}},u=function(e){try{e.send()}catch(n){e.onerror()}},d=function(e,o){var t=function(){o._emit("loaderror",null,"Decoding audio data failed.")},a=function(e){e&&o._sounds.length>0?(r[o._src]=e,i(o,e)):t()};"undefined"!=typeof Promise&&1===n.ctx.decodeAudioData.length?n.ctx.decodeAudioData(e).then(a).catch(t):n.ctx.decodeAudioData(e,a,t)},i=function(e,n){n&&!e._duration&&(e._duration=n.duration),0===Object.keys(e._sprite).length&&(e._sprite={__default:[0,1e3*e._duration]}),"loaded"!==e._state&&(e._state="loaded",e._emit("load"),e._loadQueue())},_=function(){if(n.usingWebAudio){try{"undefined"!=typeof AudioContext?n.ctx=new AudioContext:"undefined"!=typeof webkitAudioContext?n.ctx=new webkitAudioContext:n.usingWebAudio=!1}catch(e){n.usingWebAudio=!1}n.ctx||(n.usingWebAudio=!1);var e=/iP(hone|od|ad)/.test(n._navigator&&n._navigator.platform),o=n._navigator&&n._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),t=o?parseInt(o[1],10):null;if(e&&t&&t<9){var r=/safari/.test(n._navigator&&n._navigator.userAgent.toLowerCase());n._navigator&&!r&&(n.usingWebAudio=!1)}n.usingWebAudio&&(n.masterGain=void 0===n.ctx.createGain?n.ctx.createGainNode():n.ctx.createGain(),n.masterGain.gain.setValueAtTime(n._muted?0:n._volume,n.ctx.currentTime),n.masterGain.connect(n.ctx.destination)),n._setup()}};"function"==typeof define&&define.amd&&define([],function(){return{Howler:n,Howl:o}}),"undefined"!=typeof exports&&(exports.Howler=n,exports.Howl=o),"undefined"!=typeof global?(global.HowlerGlobal=e,global.Howler=n,global.Howl=o,global.Sound=t):"undefined"!=typeof window&&(window.HowlerGlobal=e,window.Howler=n,window.Howl=o,window.Sound=t)}();
/*! Spatial Plugin */
!function(){"use strict";HowlerGlobal.prototype._pos=[0,0,0],HowlerGlobal.prototype._orientation=[0,0,-1,0,1,0],HowlerGlobal.prototype.stereo=function(e){var n=this;if(!n.ctx||!n.ctx.listener)return n;for(var t=n._howls.length-1;t>=0;t--)n._howls[t].stereo(e);return n},HowlerGlobal.prototype.pos=function(e,n,t){var r=this;return r.ctx&&r.ctx.listener?(n="number"!=typeof n?r._pos[1]:n,t="number"!=typeof t?r._pos[2]:t,"number"!=typeof e?r._pos:(r._pos=[e,n,t],void 0!==r.ctx.listener.positionX?(r.ctx.listener.positionX.setTargetAtTime(r._pos[0],Howler.ctx.currentTime,.1),r.ctx.listener.positionY.setTargetAtTime(r._pos[1],Howler.ctx.currentTime,.1),r.ctx.listener.positionZ.setTargetAtTime(r._pos[2],Howler.ctx.currentTime,.1)):r.ctx.listener.setPosition(r._pos[0],r._pos[1],r._pos[2]),r)):r},HowlerGlobal.prototype.orientation=function(e,n,t,r,o,i){var a=this;if(!a.ctx||!a.ctx.listener)return a;var p=a._orientation;return n="number"!=typeof n?p[1]:n,t="number"!=typeof t?p[2]:t,r="number"!=typeof r?p[3]:r,o="number"!=typeof o?p[4]:o,i="number"!=typeof i?p[5]:i,"number"!=typeof e?p:(a._orientation=[e,n,t,r,o,i],void 0!==a.ctx.listener.forwardX?(a.ctx.listener.forwardX.setTargetAtTime(e,Howler.ctx.currentTime,.1),a.ctx.listener.forwardY.setTargetAtTime(n,Howler.ctx.currentTime,.1),a.ctx.listener.forwardZ.setTargetAtTime(t,Howler.ctx.currentTime,.1),a.ctx.listener.upX.setTargetAtTime(r,Howler.ctx.currentTime,.1),a.ctx.listener.upY.setTargetAtTime(o,Howler.ctx.currentTime,.1),a.ctx.listener.upZ.setTargetAtTime(i,Howler.ctx.currentTime,.1)):a.ctx.listener.setOrientation(e,n,t,r,o,i),a)},Howl.prototype.init=function(e){return function(n){var t=this;return t._orientation=n.orientation||[1,0,0],t._stereo=n.stereo||null,t._pos=n.pos||null,t._pannerAttr={coneInnerAngle:void 0!==n.coneInnerAngle?n.coneInnerAngle:360,coneOuterAngle:void 0!==n.coneOuterAngle?n.coneOuterAngle:360,coneOuterGain:void 0!==n.coneOuterGain?n.coneOuterGain:0,distanceModel:void 0!==n.distanceModel?n.distanceModel:"inverse",maxDistance:void 0!==n.maxDistance?n.maxDistance:1e4,panningModel:void 0!==n.panningModel?n.panningModel:"HRTF",refDistance:void 0!==n.refDistance?n.refDistance:1,rolloffFactor:void 0!==n.rolloffFactor?n.rolloffFactor:1},t._onstereo=n.onstereo?[{fn:n.onstereo}]:[],t._onpos=n.onpos?[{fn:n.onpos}]:[],t._onorientation=n.onorientation?[{fn:n.onorientation}]:[],e.call(this,n)}}(Howl.prototype.init),Howl.prototype.stereo=function(n,t){var r=this;if(!r._webAudio)return r;if("loaded"!==r._state)return r._queue.push({event:"stereo",action:function(){r.stereo(n,t)}}),r;var o=void 0===Howler.ctx.createStereoPanner?"spatial":"stereo";if(void 0===t){if("number"!=typeof n)return r._stereo;r._stereo=n,r._pos=[n,0,0]}for(var i=r._getSoundIds(t),a=0;a<i.length;a++){var p=r._soundById(i[a]);if(p){if("number"!=typeof n)return p._stereo;p._stereo=n,p._pos=[n,0,0],p._node&&(p._pannerAttr.panningModel="equalpower",p._panner&&p._panner.pan||e(p,o),"spatial"===o?void 0!==p._panner.positionX?(p._panner.positionX.setValueAtTime(n,Howler.ctx.currentTime),p._panner.positionY.setValueAtTime(0,Howler.ctx.currentTime),p._panner.positionZ.setValueAtTime(0,Howler.ctx.currentTime)):p._panner.setPosition(n,0,0):p._panner.pan.setValueAtTime(n,Howler.ctx.currentTime)),r._emit("stereo",p._id)}}return r},Howl.prototype.pos=function(n,t,r,o){var i=this;if(!i._webAudio)return i;if("loaded"!==i._state)return i._queue.push({event:"pos",action:function(){i.pos(n,t,r,o)}}),i;if(t="number"!=typeof t?0:t,r="number"!=typeof r?-.5:r,void 0===o){if("number"!=typeof n)return i._pos;i._pos=[n,t,r]}for(var a=i._getSoundIds(o),p=0;p<a.length;p++){var s=i._soundById(a[p]);if(s){if("number"!=typeof n)return s._pos;s._pos=[n,t,r],s._node&&(s._panner&&!s._panner.pan||e(s,"spatial"),void 0!==s._panner.positionX?(s._panner.positionX.setValueAtTime(n,Howler.ctx.currentTime),s._panner.positionY.setValueAtTime(t,Howler.ctx.currentTime),s._panner.positionZ.setValueAtTime(r,Howler.ctx.currentTime)):s._panner.setPosition(n,t,r)),i._emit("pos",s._id)}}return i},Howl.prototype.orientation=function(n,t,r,o){var i=this;if(!i._webAudio)return i;if("loaded"!==i._state)return i._queue.push({event:"orientation",action:function(){i.orientation(n,t,r,o)}}),i;if(t="number"!=typeof t?i._orientation[1]:t,r="number"!=typeof r?i._orientation[2]:r,void 0===o){if("number"!=typeof n)return i._orientation;i._orientation=[n,t,r]}for(var a=i._getSoundIds(o),p=0;p<a.length;p++){var s=i._soundById(a[p]);if(s){if("number"!=typeof n)return s._orientation;s._orientation=[n,t,r],s._node&&(s._panner||(s._pos||(s._pos=i._pos||[0,0,-.5]),e(s,"spatial")),void 0!==s._panner.orientationX?(s._panner.orientationX.setValueAtTime(n,Howler.ctx.currentTime),s._panner.orientationY.setValueAtTime(t,Howler.ctx.currentTime),s._panner.orientationZ.setValueAtTime(r,Howler.ctx.currentTime)):s._panner.setOrientation(n,t,r)),i._emit("orientation",s._id)}}return i},Howl.prototype.pannerAttr=function(){var n,t,r,o=this,i=arguments;if(!o._webAudio)return o;if(0===i.length)return o._pannerAttr;if(1===i.length){if("object"!=typeof i[0])return r=o._soundById(parseInt(i[0],10)),r?r._pannerAttr:o._pannerAttr;n=i[0],void 0===t&&(n.pannerAttr||(n.pannerAttr={coneInnerAngle:n.coneInnerAngle,coneOuterAngle:n.coneOuterAngle,coneOuterGain:n.coneOuterGain,distanceModel:n.distanceModel,maxDistance:n.maxDistance,refDistance:n.refDistance,rolloffFactor:n.rolloffFactor,panningModel:n.panningModel}),o._pannerAttr={coneInnerAngle:void 0!==n.pannerAttr.coneInnerAngle?n.pannerAttr.coneInnerAngle:o._coneInnerAngle,coneOuterAngle:void 0!==n.pannerAttr.coneOuterAngle?n.pannerAttr.coneOuterAngle:o._coneOuterAngle,coneOuterGain:void 0!==n.pannerAttr.coneOuterGain?n.pannerAttr.coneOuterGain:o._coneOuterGain,distanceModel:void 0!==n.pannerAttr.distanceModel?n.pannerAttr.distanceModel:o._distanceModel,maxDistance:void 0!==n.pannerAttr.maxDistance?n.pannerAttr.maxDistance:o._maxDistance,refDistance:void 0!==n.pannerAttr.refDistance?n.pannerAttr.refDistance:o._refDistance,rolloffFactor:void 0!==n.pannerAttr.rolloffFactor?n.pannerAttr.rolloffFactor:o._rolloffFactor,panningModel:void 0!==n.pannerAttr.panningModel?n.pannerAttr.panningModel:o._panningModel})}else 2===i.length&&(n=i[0],t=parseInt(i[1],10));for(var a=o._getSoundIds(t),p=0;p<a.length;p++)if(r=o._soundById(a[p])){var s=r._pannerAttr;s={coneInnerAngle:void 0!==n.coneInnerAngle?n.coneInnerAngle:s.coneInnerAngle,coneOuterAngle:void 0!==n.coneOuterAngle?n.coneOuterAngle:s.coneOuterAngle,coneOuterGain:void 0!==n.coneOuterGain?n.coneOuterGain:s.coneOuterGain,distanceModel:void 0!==n.distanceModel?n.distanceModel:s.distanceModel,maxDistance:void 0!==n.maxDistance?n.maxDistance:s.maxDistance,refDistance:void 0!==n.refDistance?n.refDistance:s.refDistance,rolloffFactor:void 0!==n.rolloffFactor?n.rolloffFactor:s.rolloffFactor,panningModel:void 0!==n.panningModel?n.panningModel:s.panningModel};var c=r._panner;c||(r._pos||(r._pos=o._pos||[0,0,-.5]),e(r,"spatial"),c=r._panner),c.coneInnerAngle=s.coneInnerAngle,c.coneOuterAngle=s.coneOuterAngle,c.coneOuterGain=s.coneOuterGain,c.distanceModel=s.distanceModel,c.maxDistance=s.maxDistance,c.refDistance=s.refDistance,c.rolloffFactor=s.rolloffFactor,c.panningModel=s.panningModel}return o},Sound.prototype.init=function(e){return function(){var n=this,t=n._parent;n._orientation=t._orientation,n._stereo=t._stereo,n._pos=t._pos,n._pannerAttr=t._pannerAttr,e.call(this),n._stereo?t.stereo(n._stereo):n._pos&&t.pos(n._pos[0],n._pos[1],n._pos[2],n._id)}}(Sound.prototype.init),Sound.prototype.reset=function(e){return function(){var n=this,t=n._parent;return n._orientation=t._orientation,n._stereo=t._stereo,n._pos=t._pos,n._pannerAttr=t._pannerAttr,n._stereo?t.stereo(n._stereo):n._pos?t.pos(n._pos[0],n._pos[1],n._pos[2],n._id):n._panner&&(n._panner.disconnect(0),n._panner=void 0,t._refreshBuffer(n)),e.call(this)}}(Sound.prototype.reset);var e=function(e,n){n=n||"spatial","spatial"===n?(e._panner=Howler.ctx.createPanner(),e._panner.coneInnerAngle=e._pannerAttr.coneInnerAngle,e._panner.coneOuterAngle=e._pannerAttr.coneOuterAngle,e._panner.coneOuterGain=e._pannerAttr.coneOuterGain,e._panner.distanceModel=e._pannerAttr.distanceModel,e._panner.maxDistance=e._pannerAttr.maxDistance,e._panner.refDistance=e._pannerAttr.refDistance,e._panner.rolloffFactor=e._pannerAttr.rolloffFactor,e._panner.panningModel=e._pannerAttr.panningModel,void 0!==e._panner.positionX?(e._panner.positionX.setValueAtTime(e._pos[0],Howler.ctx.currentTime),e._panner.positionY.setValueAtTime(e._pos[1],Howler.ctx.currentTime),e._panner.positionZ.setValueAtTime(e._pos[2],Howler.ctx.currentTime)):e._panner.setPosition(e._pos[0],e._pos[1],e._pos[2]),void 0!==e._panner.orientationX?(e._panner.orientationX.setValueAtTime(e._orientation[0],Howler.ctx.currentTime),e._panner.orientationY.setValueAtTime(e._orientation[1],Howler.ctx.currentTime),e._panner.orientationZ.setValueAtTime(e._orientation[2],Howler.ctx.currentTime)):e._panner.setOrientation(e._orientation[0],e._orientation[1],e._orientation[2])):(e._panner=Howler.ctx.createStereoPanner(),e._panner.pan.setValueAtTime(e._stereo,Howler.ctx.currentTime)),e._panner.connect(e._node),e._paused||e._parent.pause(e._id,!0).play(e._id,!0)}}();

/* pako 1.0.2 nodeca/pako */
!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.pako=t()}}(function(){return function t(e,a,i){function n(s,o){if(!a[s]){if(!e[s]){var l="function"==typeof require&&require;if(!o&&l)return l(s,!0);if(r)return r(s,!0);var h=new Error("Cannot find module '"+s+"'");throw h.code="MODULE_NOT_FOUND",h}var d=a[s]={exports:{}};e[s][0].call(d.exports,function(t){var a=e[s][1][t];return n(a?a:t)},d,d.exports,t,e,a,i)}return a[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)n(i[s]);return n}({1:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=l.assign({level:w,method:v,chunkSize:16384,windowBits:15,memLevel:8,strategy:p,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var a=o.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(a!==b)throw new Error(d[a]);if(e.header&&o.deflateSetHeader(this.strm,e.header),e.dictionary){var n;if(n="string"==typeof e.dictionary?h.string2buf(e.dictionary):"[object ArrayBuffer]"===_.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,a=o.deflateSetDictionary(this.strm,n),a!==b)throw new Error(d[a]);this._dict_set=!0}}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg;return a.result}function r(t,e){return e=e||{},e.raw=!0,n(t,e)}function s(t,e){return e=e||{},e.gzip=!0,n(t,e)}var o=t("./zlib/deflate"),l=t("./utils/common"),h=t("./utils/strings"),d=t("./zlib/messages"),f=t("./zlib/zstream"),_=Object.prototype.toString,u=0,c=4,b=0,g=1,m=2,w=-1,p=0,v=8;i.prototype.push=function(t,e){var a,i,n=this.strm,r=this.options.chunkSize;if(this.ended)return!1;i=e===~~e?e:e===!0?c:u,"string"==typeof t?n.input=h.string2buf(t):"[object ArrayBuffer]"===_.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;do{if(0===n.avail_out&&(n.output=new l.Buf8(r),n.next_out=0,n.avail_out=r),a=o.deflate(n,i),a!==g&&a!==b)return this.onEnd(a),this.ended=!0,!1;0!==n.avail_out&&(0!==n.avail_in||i!==c&&i!==m)||("string"===this.options.to?this.onData(h.buf2binstring(l.shrinkBuf(n.output,n.next_out))):this.onData(l.shrinkBuf(n.output,n.next_out)))}while((n.avail_in>0||0===n.avail_out)&&a!==g);return i===c?(a=o.deflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===b):i!==m||(this.onEnd(b),n.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===b&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=l.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Deflate=i,a.deflate=n,a.deflateRaw=r,a.gzip=s},{"./utils/common":3,"./utils/strings":4,"./zlib/deflate":8,"./zlib/messages":13,"./zlib/zstream":15}],2:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=o.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0===(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var a=s.inflateInit2(this.strm,e.windowBits);if(a!==h.Z_OK)throw new Error(d[a]);this.header=new _,s.inflateGetHeader(this.strm,this.header)}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg;return a.result}function r(t,e){return e=e||{},e.raw=!0,n(t,e)}var s=t("./zlib/inflate"),o=t("./utils/common"),l=t("./utils/strings"),h=t("./zlib/constants"),d=t("./zlib/messages"),f=t("./zlib/zstream"),_=t("./zlib/gzheader"),u=Object.prototype.toString;i.prototype.push=function(t,e){var a,i,n,r,d,f,_=this.strm,c=this.options.chunkSize,b=this.options.dictionary,g=!1;if(this.ended)return!1;i=e===~~e?e:e===!0?h.Z_FINISH:h.Z_NO_FLUSH,"string"==typeof t?_.input=l.binstring2buf(t):"[object ArrayBuffer]"===u.call(t)?_.input=new Uint8Array(t):_.input=t,_.next_in=0,_.avail_in=_.input.length;do{if(0===_.avail_out&&(_.output=new o.Buf8(c),_.next_out=0,_.avail_out=c),a=s.inflate(_,h.Z_NO_FLUSH),a===h.Z_NEED_DICT&&b&&(f="string"==typeof b?l.string2buf(b):"[object ArrayBuffer]"===u.call(b)?new Uint8Array(b):b,a=s.inflateSetDictionary(this.strm,f)),a===h.Z_BUF_ERROR&&g===!0&&(a=h.Z_OK,g=!1),a!==h.Z_STREAM_END&&a!==h.Z_OK)return this.onEnd(a),this.ended=!0,!1;_.next_out&&(0!==_.avail_out&&a!==h.Z_STREAM_END&&(0!==_.avail_in||i!==h.Z_FINISH&&i!==h.Z_SYNC_FLUSH)||("string"===this.options.to?(n=l.utf8border(_.output,_.next_out),r=_.next_out-n,d=l.buf2string(_.output,n),_.next_out=r,_.avail_out=c-r,r&&o.arraySet(_.output,_.output,n,r,0),this.onData(d)):this.onData(o.shrinkBuf(_.output,_.next_out)))),0===_.avail_in&&0===_.avail_out&&(g=!0)}while((_.avail_in>0||0===_.avail_out)&&a!==h.Z_STREAM_END);return a===h.Z_STREAM_END&&(i=h.Z_FINISH),i===h.Z_FINISH?(a=s.inflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===h.Z_OK):i!==h.Z_SYNC_FLUSH||(this.onEnd(h.Z_OK),_.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===h.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Inflate=i,a.inflate=n,a.inflateRaw=r,a.ungzip=n},{"./utils/common":3,"./utils/strings":4,"./zlib/constants":6,"./zlib/gzheader":9,"./zlib/inflate":11,"./zlib/messages":13,"./zlib/zstream":15}],3:[function(t,e,a){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;a.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var a=e.shift();if(a){if("object"!=typeof a)throw new TypeError(a+"must be non-object");for(var i in a)a.hasOwnProperty(i)&&(t[i]=a[i])}}return t},a.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var n={arraySet:function(t,e,a,i,n){if(e.subarray&&t.subarray)return void t.set(e.subarray(a,a+i),n);for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){var e,a,i,n,r,s;for(i=0,e=0,a=t.length;e<a;e++)i+=t[e].length;for(s=new Uint8Array(i),n=0,e=0,a=t.length;e<a;e++)r=t[e],s.set(r,n),n+=r.length;return s}},r={arraySet:function(t,e,a,i,n){for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){return[].concat.apply([],t)}};a.setTyped=function(t){t?(a.Buf8=Uint8Array,a.Buf16=Uint16Array,a.Buf32=Int32Array,a.assign(a,n)):(a.Buf8=Array,a.Buf16=Array,a.Buf32=Array,a.assign(a,r))},a.setTyped(i)},{}],4:[function(t,e,a){"use strict";function i(t,e){if(e<65537&&(t.subarray&&s||!t.subarray&&r))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var a="",i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a}var n=t("./common"),r=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(t){r=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){s=!1}for(var o=new n.Buf8(256),l=0;l<256;l++)o[l]=l>=252?6:l>=248?5:l>=240?4:l>=224?3:l>=192?2:1;o[254]=o[254]=1,a.string2buf=function(t){var e,a,i,r,s,o=t.length,l=0;for(r=0;r<o;r++)a=t.charCodeAt(r),55296===(64512&a)&&r+1<o&&(i=t.charCodeAt(r+1),56320===(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),r++)),l+=a<128?1:a<2048?2:a<65536?3:4;for(e=new n.Buf8(l),s=0,r=0;s<l;r++)a=t.charCodeAt(r),55296===(64512&a)&&r+1<o&&(i=t.charCodeAt(r+1),56320===(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),r++)),a<128?e[s++]=a:a<2048?(e[s++]=192|a>>>6,e[s++]=128|63&a):a<65536?(e[s++]=224|a>>>12,e[s++]=128|a>>>6&63,e[s++]=128|63&a):(e[s++]=240|a>>>18,e[s++]=128|a>>>12&63,e[s++]=128|a>>>6&63,e[s++]=128|63&a);return e},a.buf2binstring=function(t){return i(t,t.length)},a.binstring2buf=function(t){for(var e=new n.Buf8(t.length),a=0,i=e.length;a<i;a++)e[a]=t.charCodeAt(a);return e},a.buf2string=function(t,e){var a,n,r,s,l=e||t.length,h=new Array(2*l);for(n=0,a=0;a<l;)if(r=t[a++],r<128)h[n++]=r;else if(s=o[r],s>4)h[n++]=65533,a+=s-1;else{for(r&=2===s?31:3===s?15:7;s>1&&a<l;)r=r<<6|63&t[a++],s--;s>1?h[n++]=65533:r<65536?h[n++]=r:(r-=65536,h[n++]=55296|r>>10&1023,h[n++]=56320|1023&r)}return i(h,n)},a.utf8border=function(t,e){var a;for(e=e||t.length,e>t.length&&(e=t.length),a=e-1;a>=0&&128===(192&t[a]);)a--;return a<0?e:0===a?e:a+o[t[a]]>e?a:e}},{"./common":3}],5:[function(t,e,a){"use strict";function i(t,e,a,i){for(var n=65535&t|0,r=t>>>16&65535|0,s=0;0!==a;){s=a>2e3?2e3:a,a-=s;do n=n+e[i++]|0,r=r+n|0;while(--s);n%=65521,r%=65521}return n|r<<16|0}e.exports=i},{}],6:[function(t,e,a){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],7:[function(t,e,a){"use strict";function i(){for(var t,e=[],a=0;a<256;a++){t=a;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[a]=t}return e}function n(t,e,a,i){var n=r,s=i+a;t^=-1;for(var o=i;o<s;o++)t=t>>>8^n[255&(t^e[o])];return t^-1}var r=i();e.exports=n},{}],8:[function(t,e,a){"use strict";function i(t,e){return t.msg=D[e],e}function n(t){return(t<<1)-(t>4?9:0)}function r(t){for(var e=t.length;--e>=0;)t[e]=0}function s(t){var e=t.state,a=e.pending;a>t.avail_out&&(a=t.avail_out),0!==a&&(R.arraySet(t.output,e.pending_buf,e.pending_out,a,t.next_out),t.next_out+=a,e.pending_out+=a,t.total_out+=a,t.avail_out-=a,e.pending-=a,0===e.pending&&(e.pending_out=0))}function o(t,e){C._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,s(t.strm)}function l(t,e){t.pending_buf[t.pending++]=e}function h(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function d(t,e,a,i){var n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,R.arraySet(e,t.input,t.next_in,n,a),1===t.state.wrap?t.adler=N(t.adler,e,n,a):2===t.state.wrap&&(t.adler=O(t.adler,e,n,a)),t.next_in+=n,t.total_in+=n,n)}function f(t,e){var a,i,n=t.max_chain_length,r=t.strstart,s=t.prev_length,o=t.nice_match,l=t.strstart>t.w_size-ft?t.strstart-(t.w_size-ft):0,h=t.window,d=t.w_mask,f=t.prev,_=t.strstart+dt,u=h[r+s-1],c=h[r+s];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do if(a=e,h[a+s]===c&&h[a+s-1]===u&&h[a]===h[r]&&h[++a]===h[r+1]){r+=2,a++;do;while(h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&r<_);if(i=dt-(_-r),r=_-dt,i>s){if(t.match_start=e,s=i,i>=o)break;u=h[r+s-1],c=h[r+s]}}while((e=f[e&d])>l&&0!==--n);return s<=t.lookahead?s:t.lookahead}function _(t){var e,a,i,n,r,s=t.w_size;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=s+(s-ft)){R.arraySet(t.window,t.window,s,s,0),t.match_start-=s,t.strstart-=s,t.block_start-=s,a=t.hash_size,e=a;do i=t.head[--e],t.head[e]=i>=s?i-s:0;while(--a);a=s,e=a;do i=t.prev[--e],t.prev[e]=i>=s?i-s:0;while(--a);n+=s}if(0===t.strm.avail_in)break;if(a=d(t.strm,t.window,t.strstart+t.lookahead,n),t.lookahead+=a,t.lookahead+t.insert>=ht)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+ht-1])&t.hash_mask,t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<ht)););}while(t.lookahead<ft&&0!==t.strm.avail_in)}function u(t,e){var a=65535;for(a>t.pending_buf_size-5&&(a=t.pending_buf_size-5);;){if(t.lookahead<=1){if(_(t),0===t.lookahead&&e===I)return vt;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var i=t.block_start+a;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,o(t,!1),0===t.strm.avail_out))return vt;if(t.strstart-t.block_start>=t.w_size-ft&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.strstart>t.block_start&&(o(t,!1),0===t.strm.avail_out)?vt:vt}function c(t,e){for(var a,i;;){if(t.lookahead<ft){if(_(t),t.lookahead<ft&&e===I)return vt;if(0===t.lookahead)break}if(a=0,t.lookahead>=ht&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==a&&t.strstart-a<=t.w_size-ft&&(t.match_length=f(t,a)),t.match_length>=ht)if(i=C._tr_tally(t,t.strstart-t.match_start,t.match_length-ht),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=ht){t.match_length--;do t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart;while(0!==--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else i=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=t.strstart<ht-1?t.strstart:ht-1,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function b(t,e){for(var a,i,n;;){if(t.lookahead<ft){if(_(t),t.lookahead<ft&&e===I)return vt;if(0===t.lookahead)break}if(a=0,t.lookahead>=ht&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=ht-1,0!==a&&t.prev_length<t.max_lazy_match&&t.strstart-a<=t.w_size-ft&&(t.match_length=f(t,a),t.match_length<=5&&(t.strategy===q||t.match_length===ht&&t.strstart-t.match_start>4096)&&(t.match_length=ht-1)),t.prev_length>=ht&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-ht,i=C._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-ht),t.lookahead-=t.prev_length-1,t.prev_length-=2;do++t.strstart<=n&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart);while(0!==--t.prev_length);if(t.match_available=0,t.match_length=ht-1,t.strstart++,i&&(o(t,!1),0===t.strm.avail_out))return vt}else if(t.match_available){if(i=C._tr_tally(t,0,t.window[t.strstart-1]),i&&o(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return vt}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=C._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<ht-1?t.strstart:ht-1,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function g(t,e){for(var a,i,n,r,s=t.window;;){if(t.lookahead<=dt){if(_(t),t.lookahead<=dt&&e===I)return vt;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=ht&&t.strstart>0&&(n=t.strstart-1,i=s[n],i===s[++n]&&i===s[++n]&&i===s[++n])){r=t.strstart+dt;do;while(i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&n<r);t.match_length=dt-(r-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=ht?(a=C._tr_tally(t,1,t.match_length-ht),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(a=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),a&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function m(t,e){for(var a;;){if(0===t.lookahead&&(_(t),0===t.lookahead)){if(e===I)return vt;break}if(t.match_length=0,a=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,a&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function w(t,e,a,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=a,this.max_chain=i,this.func=n}function p(t){t.window_size=2*t.w_size,r(t.head),t.max_lazy_match=Z[t.level].max_lazy,t.good_match=Z[t.level].good_length,t.nice_match=Z[t.level].nice_length,t.max_chain_length=Z[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=ht-1,t.match_available=0,t.ins_h=0}function v(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=V,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new R.Buf16(2*ot),this.dyn_dtree=new R.Buf16(2*(2*rt+1)),this.bl_tree=new R.Buf16(2*(2*st+1)),r(this.dyn_ltree),r(this.dyn_dtree),r(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new R.Buf16(lt+1),this.heap=new R.Buf16(2*nt+1),r(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new R.Buf16(2*nt+1),r(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function k(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=Q,e=t.state,e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?ut:wt,t.adler=2===e.wrap?0:1,e.last_flush=I,C._tr_init(e),H):i(t,K)}function y(t){var e=k(t);return e===H&&p(t.state),e}function x(t,e){return t&&t.state?2!==t.state.wrap?K:(t.state.gzhead=e,H):K}function z(t,e,a,n,r,s){if(!t)return K;var o=1;if(e===Y&&(e=6),n<0?(o=0,n=-n):n>15&&(o=2,n-=16),r<1||r>$||a!==V||n<8||n>15||e<0||e>9||s<0||s>W)return i(t,K);8===n&&(n=9);var l=new v;return t.state=l,l.strm=t,l.wrap=o,l.gzhead=null,l.w_bits=n,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=r+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+ht-1)/ht),l.window=new R.Buf8(2*l.w_size),l.head=new R.Buf16(l.hash_size),l.prev=new R.Buf16(l.w_size),l.lit_bufsize=1<<r+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new R.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=e,l.strategy=s,l.method=a,y(t)}function B(t,e){return z(t,e,V,tt,et,J)}function S(t,e){var a,o,d,f;if(!t||!t.state||e>L||e<0)return t?i(t,K):K;if(o=t.state,!t.output||!t.input&&0!==t.avail_in||o.status===pt&&e!==F)return i(t,0===t.avail_out?P:K);if(o.strm=t,a=o.last_flush,o.last_flush=e,o.status===ut)if(2===o.wrap)t.adler=0,l(o,31),l(o,139),l(o,8),o.gzhead?(l(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),l(o,255&o.gzhead.time),l(o,o.gzhead.time>>8&255),l(o,o.gzhead.time>>16&255),l(o,o.gzhead.time>>24&255),l(o,9===o.level?2:o.strategy>=G||o.level<2?4:0),l(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(l(o,255&o.gzhead.extra.length),l(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(t.adler=O(t.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=ct):(l(o,0),l(o,0),l(o,0),l(o,0),l(o,0),l(o,9===o.level?2:o.strategy>=G||o.level<2?4:0),l(o,zt),o.status=wt);else{var _=V+(o.w_bits-8<<4)<<8,u=-1;u=o.strategy>=G||o.level<2?0:o.level<6?1:6===o.level?2:3,_|=u<<6,0!==o.strstart&&(_|=_t),_+=31-_%31,o.status=wt,h(o,_),0!==o.strstart&&(h(o,t.adler>>>16),h(o,65535&t.adler)),t.adler=1}if(o.status===ct)if(o.gzhead.extra){for(d=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending!==o.pending_buf_size));)l(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=bt)}else o.status=bt;if(o.status===bt)if(o.gzhead.name){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.gzindex=0,o.status=gt)}else o.status=gt;if(o.status===gt)if(o.gzhead.comment){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.status=mt)}else o.status=mt;if(o.status===mt&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&s(t),o.pending+2<=o.pending_buf_size&&(l(o,255&t.adler),l(o,t.adler>>8&255),t.adler=0,o.status=wt)):o.status=wt),0!==o.pending){if(s(t),0===t.avail_out)return o.last_flush=-1,H}else if(0===t.avail_in&&n(e)<=n(a)&&e!==F)return i(t,P);if(o.status===pt&&0!==t.avail_in)return i(t,P);if(0!==t.avail_in||0!==o.lookahead||e!==I&&o.status!==pt){var c=o.strategy===G?m(o,e):o.strategy===X?g(o,e):Z[o.level].func(o,e);if(c!==yt&&c!==xt||(o.status=pt),c===vt||c===yt)return 0===t.avail_out&&(o.last_flush=-1),H;if(c===kt&&(e===U?C._tr_align(o):e!==L&&(C._tr_stored_block(o,0,0,!1),e===T&&(r(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),s(t),0===t.avail_out))return o.last_flush=-1,H}return e!==F?H:o.wrap<=0?j:(2===o.wrap?(l(o,255&t.adler),l(o,t.adler>>8&255),l(o,t.adler>>16&255),l(o,t.adler>>24&255),l(o,255&t.total_in),l(o,t.total_in>>8&255),l(o,t.total_in>>16&255),l(o,t.total_in>>24&255)):(h(o,t.adler>>>16),h(o,65535&t.adler)),s(t),o.wrap>0&&(o.wrap=-o.wrap),0!==o.pending?H:j)}function E(t){var e;return t&&t.state?(e=t.state.status,e!==ut&&e!==ct&&e!==bt&&e!==gt&&e!==mt&&e!==wt&&e!==pt?i(t,K):(t.state=null,e===wt?i(t,M):H)):K}function A(t,e){var a,i,n,s,o,l,h,d,f=e.length;if(!t||!t.state)return K;if(a=t.state,s=a.wrap,2===s||1===s&&a.status!==ut||a.lookahead)return K;for(1===s&&(t.adler=N(t.adler,e,f,0)),a.wrap=0,f>=a.w_size&&(0===s&&(r(a.head),a.strstart=0,a.block_start=0,a.insert=0),d=new R.Buf8(a.w_size),R.arraySet(d,e,f-a.w_size,a.w_size,0),e=d,f=a.w_size),o=t.avail_in,l=t.next_in,h=t.input,t.avail_in=f,t.next_in=0,t.input=e,_(a);a.lookahead>=ht;){i=a.strstart,n=a.lookahead-(ht-1);do a.ins_h=(a.ins_h<<a.hash_shift^a.window[i+ht-1])&a.hash_mask,a.prev[i&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=i,i++;while(--n);a.strstart=i,a.lookahead=ht-1,_(a)}return a.strstart+=a.lookahead,a.block_start=a.strstart,a.insert=a.lookahead,a.lookahead=0,a.match_length=a.prev_length=ht-1,a.match_available=0,t.next_in=l,t.input=h,t.avail_in=o,a.wrap=s,H}var Z,R=t("../utils/common"),C=t("./trees"),N=t("./adler32"),O=t("./crc32"),D=t("./messages"),I=0,U=1,T=3,F=4,L=5,H=0,j=1,K=-2,M=-3,P=-5,Y=-1,q=1,G=2,X=3,W=4,J=0,Q=2,V=8,$=9,tt=15,et=8,at=29,it=256,nt=it+1+at,rt=30,st=19,ot=2*nt+1,lt=15,ht=3,dt=258,ft=dt+ht+1,_t=32,ut=42,ct=69,bt=73,gt=91,mt=103,wt=113,pt=666,vt=1,kt=2,yt=3,xt=4,zt=3;Z=[new w(0,0,0,0,u),new w(4,4,8,4,c),new w(4,5,16,8,c),new w(4,6,32,32,c),new w(4,4,16,16,b),new w(8,16,32,32,b),new w(8,16,128,128,b),new w(8,32,128,256,b),new w(32,128,258,1024,b),new w(32,258,258,4096,b)],a.deflateInit=B,a.deflateInit2=z,a.deflateReset=y,a.deflateResetKeep=k,a.deflateSetHeader=x,a.deflate=S,a.deflateEnd=E,a.deflateSetDictionary=A,a.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./messages":13,"./trees":14}],9:[function(t,e,a){"use strict";function i(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}e.exports=i},{}],10:[function(t,e,a){"use strict";var i=30,n=12;e.exports=function(t,e){var a,r,s,o,l,h,d,f,_,u,c,b,g,m,w,p,v,k,y,x,z,B,S,E,A;a=t.state,r=t.next_in,E=t.input,s=r+(t.avail_in-5),o=t.next_out,A=t.output,l=o-(e-t.avail_out),h=o+(t.avail_out-257),d=a.dmax,f=a.wsize,_=a.whave,u=a.wnext,c=a.window,b=a.hold,g=a.bits,m=a.lencode,w=a.distcode,p=(1<<a.lenbits)-1,v=(1<<a.distbits)-1;t:do{g<15&&(b+=E[r++]<<g,g+=8,b+=E[r++]<<g,g+=8),k=m[b&p];e:for(;;){if(y=k>>>24,b>>>=y,g-=y,y=k>>>16&255,0===y)A[o++]=65535&k;else{if(!(16&y)){if(0===(64&y)){k=m[(65535&k)+(b&(1<<y)-1)];continue e}if(32&y){a.mode=n;break t}t.msg="invalid literal/length code",a.mode=i;break t}x=65535&k,y&=15,y&&(g<y&&(b+=E[r++]<<g,g+=8),x+=b&(1<<y)-1,b>>>=y,g-=y),g<15&&(b+=E[r++]<<g,g+=8,b+=E[r++]<<g,g+=8),k=w[b&v];a:for(;;){if(y=k>>>24,b>>>=y,g-=y,y=k>>>16&255,!(16&y)){if(0===(64&y)){k=w[(65535&k)+(b&(1<<y)-1)];continue a}t.msg="invalid distance code",a.mode=i;break t}if(z=65535&k,y&=15,g<y&&(b+=E[r++]<<g,g+=8,g<y&&(b+=E[r++]<<g,g+=8)),z+=b&(1<<y)-1,z>d){t.msg="invalid distance too far back",a.mode=i;break t}if(b>>>=y,g-=y,y=o-l,z>y){if(y=z-y,y>_&&a.sane){t.msg="invalid distance too far back",a.mode=i;break t}if(B=0,S=c,0===u){if(B+=f-y,y<x){x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}}else if(u<y){if(B+=f+u-y,y-=u,y<x){x-=y;do A[o++]=c[B++];while(--y);if(B=0,u<x){y=u,x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}}}else if(B+=u-y,y<x){x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}for(;x>2;)A[o++]=S[B++],A[o++]=S[B++],A[o++]=S[B++],x-=3;x&&(A[o++]=S[B++],x>1&&(A[o++]=S[B++]))}else{B=o-z;do A[o++]=A[B++],A[o++]=A[B++],A[o++]=A[B++],x-=3;while(x>2);x&&(A[o++]=A[B++],x>1&&(A[o++]=A[B++]))}break}}break}}while(r<s&&o<h);x=g>>3,r-=x,g-=x<<3,b&=(1<<g)-1,t.next_in=r,t.next_out=o,t.avail_in=r<s?5+(s-r):5-(r-s),t.avail_out=o<h?257+(h-o):257-(o-h),a.hold=b,a.bits=g}},{}],11:[function(t,e,a){"use strict";function i(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function n(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new w.Buf16(320),this.work=new w.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function r(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=T,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new w.Buf32(bt),e.distcode=e.distdyn=new w.Buf32(gt),e.sane=1,e.back=-1,Z):N}function s(t){var e;return t&&t.state?(e=t.state,e.wsize=0,e.whave=0,e.wnext=0,r(t)):N}function o(t,e){var a,i;return t&&t.state?(i=t.state,e<0?(a=0,e=-e):(a=(e>>4)+1,e<48&&(e&=15)),e&&(e<8||e>15)?N:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=a,i.wbits=e,s(t))):N}function l(t,e){var a,i;return t?(i=new n,t.state=i,i.window=null,a=o(t,e),a!==Z&&(t.state=null),a):N}function h(t){return l(t,wt)}function d(t){if(pt){var e;for(g=new w.Buf32(512),m=new w.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(y(z,t.lens,0,288,g,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;y(B,t.lens,0,32,m,0,t.work,{bits:5}),pt=!1}t.lencode=g,t.lenbits=9,t.distcode=m,t.distbits=5}function f(t,e,a,i){var n,r=t.state;return null===r.window&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new w.Buf8(r.wsize)),i>=r.wsize?(w.arraySet(r.window,e,a-r.wsize,r.wsize,0),r.wnext=0,r.whave=r.wsize):(n=r.wsize-r.wnext,n>i&&(n=i),w.arraySet(r.window,e,a-i,n,r.wnext),i-=n,i?(w.arraySet(r.window,e,a-i,i,0),r.wnext=i,r.whave=r.wsize):(r.wnext+=n,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=n))),0}function _(t,e){var a,n,r,s,o,l,h,_,u,c,b,g,m,bt,gt,mt,wt,pt,vt,kt,yt,xt,zt,Bt,St=0,Et=new w.Buf8(4),At=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return N;a=t.state,a.mode===X&&(a.mode=W),o=t.next_out,r=t.output,h=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,u=a.bits,c=l,b=h,xt=Z;t:for(;;)switch(a.mode){case T:if(0===a.wrap){a.mode=W;break}for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(2&a.wrap&&35615===_){a.check=0,Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0),_=0,u=0,a.mode=F;break}if(a.flags=0,a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&_)<<8)+(_>>8))%31){t.msg="incorrect header check",a.mode=_t;break}if((15&_)!==U){t.msg="unknown compression method",a.mode=_t;break}if(_>>>=4,u-=4,yt=(15&_)+8,0===a.wbits)a.wbits=yt;else if(yt>a.wbits){t.msg="invalid window size",a.mode=_t;break}a.dmax=1<<yt,t.adler=a.check=1,a.mode=512&_?q:X,_=0,u=0;break;case F:for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(a.flags=_,(255&a.flags)!==U){t.msg="unknown compression method",a.mode=_t;break}if(57344&a.flags){t.msg="unknown header flags set",a.mode=_t;break}a.head&&(a.head.text=_>>8&1),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0,a.mode=L;case L:for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.head&&(a.head.time=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,Et[2]=_>>>16&255,Et[3]=_>>>24&255,a.check=v(a.check,Et,4,0)),_=0,u=0,a.mode=H;case H:for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.head&&(a.head.xflags=255&_,a.head.os=_>>8),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0,a.mode=j;case j:if(1024&a.flags){for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.length=_,a.head&&(a.head.extra_len=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0}else a.head&&(a.head.extra=null);a.mode=K;case K:if(1024&a.flags&&(g=a.length,g>l&&(g=l),g&&(a.head&&(yt=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Array(a.head.extra_len)),w.arraySet(a.head.extra,n,s,g,yt)),512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,a.length-=g),a.length))break t;a.length=0,a.mode=M;case M:if(2048&a.flags){if(0===l)break t;g=0;do yt=n[s+g++],a.head&&yt&&a.length<65536&&(a.head.name+=String.fromCharCode(yt));while(yt&&g<l);if(512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,yt)break t}else a.head&&(a.head.name=null);a.length=0,a.mode=P;case P:if(4096&a.flags){if(0===l)break t;g=0;do yt=n[s+g++],a.head&&yt&&a.length<65536&&(a.head.comment+=String.fromCharCode(yt));while(yt&&g<l);if(512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,yt)break t}else a.head&&(a.head.comment=null);a.mode=Y;case Y:if(512&a.flags){for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_!==(65535&a.check)){t.msg="header crc mismatch",a.mode=_t;break}_=0,u=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),t.adler=a.check=0,a.mode=X;break;case q:for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}t.adler=a.check=i(_),_=0,u=0,a.mode=G;case G:if(0===a.havedict)return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,C;t.adler=a.check=1,a.mode=X;case X:if(e===E||e===A)break t;case W:if(a.last){_>>>=7&u,u-=7&u,a.mode=ht;break}for(;u<3;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}switch(a.last=1&_,_>>>=1,u-=1,3&_){case 0:a.mode=J;break;case 1:if(d(a),a.mode=at,e===A){_>>>=2,u-=2;break t}break;case 2:a.mode=$;break;case 3:t.msg="invalid block type",a.mode=_t}_>>>=2,u-=2;break;case J:for(_>>>=7&u,u-=7&u;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if((65535&_)!==(_>>>16^65535)){t.msg="invalid stored block lengths",a.mode=_t;break}if(a.length=65535&_,_=0,u=0,a.mode=Q,e===A)break t;case Q:a.mode=V;case V:if(g=a.length){if(g>l&&(g=l),g>h&&(g=h),0===g)break t;w.arraySet(r,n,s,g,o),l-=g,s+=g,h-=g,o+=g,a.length-=g;break}a.mode=X;break;case $:for(;u<14;){if(0===l)break t;
l--,_+=n[s++]<<u,u+=8}if(a.nlen=(31&_)+257,_>>>=5,u-=5,a.ndist=(31&_)+1,_>>>=5,u-=5,a.ncode=(15&_)+4,_>>>=4,u-=4,a.nlen>286||a.ndist>30){t.msg="too many length or distance symbols",a.mode=_t;break}a.have=0,a.mode=tt;case tt:for(;a.have<a.ncode;){for(;u<3;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.lens[At[a.have++]]=7&_,_>>>=3,u-=3}for(;a.have<19;)a.lens[At[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,zt={bits:a.lenbits},xt=y(x,a.lens,0,19,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid code lengths set",a.mode=_t;break}a.have=0,a.mode=et;case et:for(;a.have<a.nlen+a.ndist;){for(;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(wt<16)_>>>=gt,u-=gt,a.lens[a.have++]=wt;else{if(16===wt){for(Bt=gt+2;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_>>>=gt,u-=gt,0===a.have){t.msg="invalid bit length repeat",a.mode=_t;break}yt=a.lens[a.have-1],g=3+(3&_),_>>>=2,u-=2}else if(17===wt){for(Bt=gt+3;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=gt,u-=gt,yt=0,g=3+(7&_),_>>>=3,u-=3}else{for(Bt=gt+7;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=gt,u-=gt,yt=0,g=11+(127&_),_>>>=7,u-=7}if(a.have+g>a.nlen+a.ndist){t.msg="invalid bit length repeat",a.mode=_t;break}for(;g--;)a.lens[a.have++]=yt}}if(a.mode===_t)break;if(0===a.lens[256]){t.msg="invalid code -- missing end-of-block",a.mode=_t;break}if(a.lenbits=9,zt={bits:a.lenbits},xt=y(z,a.lens,0,a.nlen,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid literal/lengths set",a.mode=_t;break}if(a.distbits=6,a.distcode=a.distdyn,zt={bits:a.distbits},xt=y(B,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,zt),a.distbits=zt.bits,xt){t.msg="invalid distances set",a.mode=_t;break}if(a.mode=at,e===A)break t;case at:a.mode=it;case it:if(l>=6&&h>=258){t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,k(t,b),o=t.next_out,r=t.output,h=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,u=a.bits,a.mode===X&&(a.back=-1);break}for(a.back=0;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(mt&&0===(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.lencode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=pt,u-=pt,a.back+=pt}if(_>>>=gt,u-=gt,a.back+=gt,a.length=wt,0===mt){a.mode=lt;break}if(32&mt){a.back=-1,a.mode=X;break}if(64&mt){t.msg="invalid literal/length code",a.mode=_t;break}a.extra=15&mt,a.mode=nt;case nt:if(a.extra){for(Bt=a.extra;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.length+=_&(1<<a.extra)-1,_>>>=a.extra,u-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=rt;case rt:for(;St=a.distcode[_&(1<<a.distbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(0===(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.distcode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=pt,u-=pt,a.back+=pt}if(_>>>=gt,u-=gt,a.back+=gt,64&mt){t.msg="invalid distance code",a.mode=_t;break}a.offset=wt,a.extra=15&mt,a.mode=st;case st:if(a.extra){for(Bt=a.extra;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.offset+=_&(1<<a.extra)-1,_>>>=a.extra,u-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){t.msg="invalid distance too far back",a.mode=_t;break}a.mode=ot;case ot:if(0===h)break t;if(g=b-h,a.offset>g){if(g=a.offset-g,g>a.whave&&a.sane){t.msg="invalid distance too far back",a.mode=_t;break}g>a.wnext?(g-=a.wnext,m=a.wsize-g):m=a.wnext-g,g>a.length&&(g=a.length),bt=a.window}else bt=r,m=o-a.offset,g=a.length;g>h&&(g=h),h-=g,a.length-=g;do r[o++]=bt[m++];while(--g);0===a.length&&(a.mode=it);break;case lt:if(0===h)break t;r[o++]=a.length,h--,a.mode=it;break;case ht:if(a.wrap){for(;u<32;){if(0===l)break t;l--,_|=n[s++]<<u,u+=8}if(b-=h,t.total_out+=b,a.total+=b,b&&(t.adler=a.check=a.flags?v(a.check,r,b,o-b):p(a.check,r,b,o-b)),b=h,(a.flags?_:i(_))!==a.check){t.msg="incorrect data check",a.mode=_t;break}_=0,u=0}a.mode=dt;case dt:if(a.wrap&&a.flags){for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_!==(4294967295&a.total)){t.msg="incorrect length check",a.mode=_t;break}_=0,u=0}a.mode=ft;case ft:xt=R;break t;case _t:xt=O;break t;case ut:return D;case ct:default:return N}return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,(a.wsize||b!==t.avail_out&&a.mode<_t&&(a.mode<ht||e!==S))&&f(t,t.output,t.next_out,b-t.avail_out)?(a.mode=ut,D):(c-=t.avail_in,b-=t.avail_out,t.total_in+=c,t.total_out+=b,a.total+=b,a.wrap&&b&&(t.adler=a.check=a.flags?v(a.check,r,b,t.next_out-b):p(a.check,r,b,t.next_out-b)),t.data_type=a.bits+(a.last?64:0)+(a.mode===X?128:0)+(a.mode===at||a.mode===Q?256:0),(0===c&&0===b||e===S)&&xt===Z&&(xt=I),xt)}function u(t){if(!t||!t.state)return N;var e=t.state;return e.window&&(e.window=null),t.state=null,Z}function c(t,e){var a;return t&&t.state?(a=t.state,0===(2&a.wrap)?N:(a.head=e,e.done=!1,Z)):N}function b(t,e){var a,i,n,r=e.length;return t&&t.state?(a=t.state,0!==a.wrap&&a.mode!==G?N:a.mode===G&&(i=1,i=p(i,e,r,0),i!==a.check)?O:(n=f(t,e,r,r))?(a.mode=ut,D):(a.havedict=1,Z)):N}var g,m,w=t("../utils/common"),p=t("./adler32"),v=t("./crc32"),k=t("./inffast"),y=t("./inftrees"),x=0,z=1,B=2,S=4,E=5,A=6,Z=0,R=1,C=2,N=-2,O=-3,D=-4,I=-5,U=8,T=1,F=2,L=3,H=4,j=5,K=6,M=7,P=8,Y=9,q=10,G=11,X=12,W=13,J=14,Q=15,V=16,$=17,tt=18,et=19,at=20,it=21,nt=22,rt=23,st=24,ot=25,lt=26,ht=27,dt=28,ft=29,_t=30,ut=31,ct=32,bt=852,gt=592,mt=15,wt=mt,pt=!0;a.inflateReset=s,a.inflateReset2=o,a.inflateResetKeep=r,a.inflateInit=h,a.inflateInit2=l,a.inflate=_,a.inflateEnd=u,a.inflateGetHeader=c,a.inflateSetDictionary=b,a.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./inffast":10,"./inftrees":12}],12:[function(t,e,a){"use strict";var i=t("../utils/common"),n=15,r=852,s=592,o=0,l=1,h=2,d=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],f=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],_=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],u=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,a,c,b,g,m,w){var p,v,k,y,x,z,B,S,E,A=w.bits,Z=0,R=0,C=0,N=0,O=0,D=0,I=0,U=0,T=0,F=0,L=null,H=0,j=new i.Buf16(n+1),K=new i.Buf16(n+1),M=null,P=0;for(Z=0;Z<=n;Z++)j[Z]=0;for(R=0;R<c;R++)j[e[a+R]]++;for(O=A,N=n;N>=1&&0===j[N];N--);if(O>N&&(O=N),0===N)return b[g++]=20971520,b[g++]=20971520,w.bits=1,0;for(C=1;C<N&&0===j[C];C++);for(O<C&&(O=C),U=1,Z=1;Z<=n;Z++)if(U<<=1,U-=j[Z],U<0)return-1;if(U>0&&(t===o||1!==N))return-1;for(K[1]=0,Z=1;Z<n;Z++)K[Z+1]=K[Z]+j[Z];for(R=0;R<c;R++)0!==e[a+R]&&(m[K[e[a+R]]++]=R);if(t===o?(L=M=m,z=19):t===l?(L=d,H-=257,M=f,P-=257,z=256):(L=_,M=u,z=-1),F=0,R=0,Z=C,x=g,D=O,I=0,k=-1,T=1<<O,y=T-1,t===l&&T>r||t===h&&T>s)return 1;for(var Y=0;;){Y++,B=Z-I,m[R]<z?(S=0,E=m[R]):m[R]>z?(S=M[P+m[R]],E=L[H+m[R]]):(S=96,E=0),p=1<<Z-I,v=1<<D,C=v;do v-=p,b[x+(F>>I)+v]=B<<24|S<<16|E|0;while(0!==v);for(p=1<<Z-1;F&p;)p>>=1;if(0!==p?(F&=p-1,F+=p):F=0,R++,0===--j[Z]){if(Z===N)break;Z=e[a+m[R]]}if(Z>O&&(F&y)!==k){for(0===I&&(I=O),x+=C,D=Z-I,U=1<<D;D+I<N&&(U-=j[D+I],!(U<=0));)D++,U<<=1;if(T+=1<<D,t===l&&T>r||t===h&&T>s)return 1;k=F&y,b[k]=O<<24|D<<16|x-g|0}}return 0!==F&&(b[x+F]=Z-I<<24|64<<16|0),w.bits=O,0}},{"../utils/common":3}],13:[function(t,e,a){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],14:[function(t,e,a){"use strict";function i(t){for(var e=t.length;--e>=0;)t[e]=0}function n(t,e,a,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=a,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}function r(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function s(t){return t<256?lt[t]:lt[256+(t>>>7)]}function o(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function l(t,e,a){t.bi_valid>W-a?(t.bi_buf|=e<<t.bi_valid&65535,o(t,t.bi_buf),t.bi_buf=e>>W-t.bi_valid,t.bi_valid+=a-W):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=a)}function h(t,e,a){l(t,a[2*e],a[2*e+1])}function d(t,e){var a=0;do a|=1&t,t>>>=1,a<<=1;while(--e>0);return a>>>1}function f(t){16===t.bi_valid?(o(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}function _(t,e){var a,i,n,r,s,o,l=e.dyn_tree,h=e.max_code,d=e.stat_desc.static_tree,f=e.stat_desc.has_stree,_=e.stat_desc.extra_bits,u=e.stat_desc.extra_base,c=e.stat_desc.max_length,b=0;for(r=0;r<=X;r++)t.bl_count[r]=0;for(l[2*t.heap[t.heap_max]+1]=0,a=t.heap_max+1;a<G;a++)i=t.heap[a],r=l[2*l[2*i+1]+1]+1,r>c&&(r=c,b++),l[2*i+1]=r,i>h||(t.bl_count[r]++,s=0,i>=u&&(s=_[i-u]),o=l[2*i],t.opt_len+=o*(r+s),f&&(t.static_len+=o*(d[2*i+1]+s)));if(0!==b){do{for(r=c-1;0===t.bl_count[r];)r--;t.bl_count[r]--,t.bl_count[r+1]+=2,t.bl_count[c]--,b-=2}while(b>0);for(r=c;0!==r;r--)for(i=t.bl_count[r];0!==i;)n=t.heap[--a],n>h||(l[2*n+1]!==r&&(t.opt_len+=(r-l[2*n+1])*l[2*n],l[2*n+1]=r),i--)}}function u(t,e,a){var i,n,r=new Array(X+1),s=0;for(i=1;i<=X;i++)r[i]=s=s+a[i-1]<<1;for(n=0;n<=e;n++){var o=t[2*n+1];0!==o&&(t[2*n]=d(r[o]++,o))}}function c(){var t,e,a,i,r,s=new Array(X+1);for(a=0,i=0;i<K-1;i++)for(dt[i]=a,t=0;t<1<<et[i];t++)ht[a++]=i;for(ht[a-1]=i,r=0,i=0;i<16;i++)for(ft[i]=r,t=0;t<1<<at[i];t++)lt[r++]=i;for(r>>=7;i<Y;i++)for(ft[i]=r<<7,t=0;t<1<<at[i]-7;t++)lt[256+r++]=i;for(e=0;e<=X;e++)s[e]=0;for(t=0;t<=143;)st[2*t+1]=8,t++,s[8]++;for(;t<=255;)st[2*t+1]=9,t++,s[9]++;for(;t<=279;)st[2*t+1]=7,t++,s[7]++;for(;t<=287;)st[2*t+1]=8,t++,s[8]++;for(u(st,P+1,s),t=0;t<Y;t++)ot[2*t+1]=5,ot[2*t]=d(t,5);_t=new n(st,et,M+1,P,X),ut=new n(ot,at,0,Y,X),ct=new n(new Array(0),it,0,q,J)}function b(t){var e;for(e=0;e<P;e++)t.dyn_ltree[2*e]=0;for(e=0;e<Y;e++)t.dyn_dtree[2*e]=0;for(e=0;e<q;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*Q]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function g(t){t.bi_valid>8?o(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function m(t,e,a,i){g(t),i&&(o(t,a),o(t,~a)),N.arraySet(t.pending_buf,t.window,e,a,t.pending),t.pending+=a}function w(t,e,a,i){var n=2*e,r=2*a;return t[n]<t[r]||t[n]===t[r]&&i[e]<=i[a]}function p(t,e,a){for(var i=t.heap[a],n=a<<1;n<=t.heap_len&&(n<t.heap_len&&w(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!w(e,i,t.heap[n],t.depth));)t.heap[a]=t.heap[n],a=n,n<<=1;t.heap[a]=i}function v(t,e,a){var i,n,r,o,d=0;if(0!==t.last_lit)do i=t.pending_buf[t.d_buf+2*d]<<8|t.pending_buf[t.d_buf+2*d+1],n=t.pending_buf[t.l_buf+d],d++,0===i?h(t,n,e):(r=ht[n],h(t,r+M+1,e),o=et[r],0!==o&&(n-=dt[r],l(t,n,o)),i--,r=s(i),h(t,r,a),o=at[r],0!==o&&(i-=ft[r],l(t,i,o)));while(d<t.last_lit);h(t,Q,e)}function k(t,e){var a,i,n,r=e.dyn_tree,s=e.stat_desc.static_tree,o=e.stat_desc.has_stree,l=e.stat_desc.elems,h=-1;for(t.heap_len=0,t.heap_max=G,a=0;a<l;a++)0!==r[2*a]?(t.heap[++t.heap_len]=h=a,t.depth[a]=0):r[2*a+1]=0;for(;t.heap_len<2;)n=t.heap[++t.heap_len]=h<2?++h:0,r[2*n]=1,t.depth[n]=0,t.opt_len--,o&&(t.static_len-=s[2*n+1]);for(e.max_code=h,a=t.heap_len>>1;a>=1;a--)p(t,r,a);n=l;do a=t.heap[1],t.heap[1]=t.heap[t.heap_len--],p(t,r,1),i=t.heap[1],t.heap[--t.heap_max]=a,t.heap[--t.heap_max]=i,r[2*n]=r[2*a]+r[2*i],t.depth[n]=(t.depth[a]>=t.depth[i]?t.depth[a]:t.depth[i])+1,r[2*a+1]=r[2*i+1]=n,t.heap[1]=n++,p(t,r,1);while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],_(t,e),u(r,h,t.bl_count)}function y(t,e,a){var i,n,r=-1,s=e[1],o=0,l=7,h=4;for(0===s&&(l=138,h=3),e[2*(a+1)+1]=65535,i=0;i<=a;i++)n=s,s=e[2*(i+1)+1],++o<l&&n===s||(o<h?t.bl_tree[2*n]+=o:0!==n?(n!==r&&t.bl_tree[2*n]++,t.bl_tree[2*V]++):o<=10?t.bl_tree[2*$]++:t.bl_tree[2*tt]++,o=0,r=n,0===s?(l=138,h=3):n===s?(l=6,h=3):(l=7,h=4))}function x(t,e,a){var i,n,r=-1,s=e[1],o=0,d=7,f=4;for(0===s&&(d=138,f=3),i=0;i<=a;i++)if(n=s,s=e[2*(i+1)+1],!(++o<d&&n===s)){if(o<f){do h(t,n,t.bl_tree);while(0!==--o)}else 0!==n?(n!==r&&(h(t,n,t.bl_tree),o--),h(t,V,t.bl_tree),l(t,o-3,2)):o<=10?(h(t,$,t.bl_tree),l(t,o-3,3)):(h(t,tt,t.bl_tree),l(t,o-11,7));o=0,r=n,0===s?(d=138,f=3):n===s?(d=6,f=3):(d=7,f=4)}}function z(t){var e;for(y(t,t.dyn_ltree,t.l_desc.max_code),y(t,t.dyn_dtree,t.d_desc.max_code),k(t,t.bl_desc),e=q-1;e>=3&&0===t.bl_tree[2*nt[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}function B(t,e,a,i){var n;for(l(t,e-257,5),l(t,a-1,5),l(t,i-4,4),n=0;n<i;n++)l(t,t.bl_tree[2*nt[n]+1],3);x(t,t.dyn_ltree,e-1),x(t,t.dyn_dtree,a-1)}function S(t){var e,a=4093624447;for(e=0;e<=31;e++,a>>>=1)if(1&a&&0!==t.dyn_ltree[2*e])return D;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return I;for(e=32;e<M;e++)if(0!==t.dyn_ltree[2*e])return I;return D}function E(t){bt||(c(),bt=!0),t.l_desc=new r(t.dyn_ltree,_t),t.d_desc=new r(t.dyn_dtree,ut),t.bl_desc=new r(t.bl_tree,ct),t.bi_buf=0,t.bi_valid=0,b(t)}function A(t,e,a,i){l(t,(T<<1)+(i?1:0),3),m(t,e,a,!0)}function Z(t){l(t,F<<1,3),h(t,Q,st),f(t)}function R(t,e,a,i){var n,r,s=0;t.level>0?(t.strm.data_type===U&&(t.strm.data_type=S(t)),k(t,t.l_desc),k(t,t.d_desc),s=z(t),n=t.opt_len+3+7>>>3,r=t.static_len+3+7>>>3,r<=n&&(n=r)):n=r=a+5,a+4<=n&&e!==-1?A(t,e,a,i):t.strategy===O||r===n?(l(t,(F<<1)+(i?1:0),3),v(t,st,ot)):(l(t,(L<<1)+(i?1:0),3),B(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),v(t,t.dyn_ltree,t.dyn_dtree)),b(t),i&&g(t)}function C(t,e,a){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&a,t.last_lit++,0===e?t.dyn_ltree[2*a]++:(t.matches++,e--,t.dyn_ltree[2*(ht[a]+M+1)]++,t.dyn_dtree[2*s(e)]++),t.last_lit===t.lit_bufsize-1}var N=t("../utils/common"),O=4,D=0,I=1,U=2,T=0,F=1,L=2,H=3,j=258,K=29,M=256,P=M+1+K,Y=30,q=19,G=2*P+1,X=15,W=16,J=7,Q=256,V=16,$=17,tt=18,et=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],at=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],it=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],nt=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],rt=512,st=new Array(2*(P+2));i(st);var ot=new Array(2*Y);i(ot);var lt=new Array(rt);i(lt);var ht=new Array(j-H+1);i(ht);var dt=new Array(K);i(dt);var ft=new Array(Y);i(ft);var _t,ut,ct,bt=!1;a._tr_init=E,a._tr_stored_block=A,a._tr_flush_block=R,a._tr_tally=C,a._tr_align=Z},{"../utils/common":3}],15:[function(t,e,a){"use strict";function i(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}e.exports=i},{}],"/":[function(t,e,a){"use strict";var i=t("./lib/utils/common").assign,n=t("./lib/deflate"),r=t("./lib/inflate"),s=t("./lib/zlib/constants"),o={};i(o,n,r,s),e.exports=o},{"./lib/deflate":1,"./lib/inflate":2,"./lib/utils/common":3,"./lib/zlib/constants":6}]},{},[])("/")});

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */
var saveAs=saveAs||function(e){"use strict";if(typeof e==="undefined"||typeof navigator!=="undefined"&&/MSIE [1-9]\./.test(navigator.userAgent)){return}var t=e.document,n=function(){return e.URL||e.webkitURL||e},r=t.createElementNS("http://www.w3.org/1999/xhtml","a"),o="download"in r,a=function(e){var t=new MouseEvent("click");e.dispatchEvent(t)},i=/constructor/i.test(e.HTMLElement)||e.safari,f=/CriOS\/[\d]+/.test(navigator.userAgent),u=function(t){(e.setImmediate||e.setTimeout)(function(){throw t},0)},s="application/octet-stream",d=1e3*40,c=function(e){var t=function(){if(typeof e==="string"){n().revokeObjectURL(e)}else{e.remove()}};setTimeout(t,d)},l=function(e,t,n){t=[].concat(t);var r=t.length;while(r--){var o=e["on"+t[r]];if(typeof o==="function"){try{o.call(e,n||e)}catch(a){u(a)}}}},p=function(e){if(/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)){return new Blob([String.fromCharCode(65279),e],{type:e.type})}return e},v=function(t,u,d){if(!d){t=p(t)}var v=this,w=t.type,m=w===s,y,h=function(){l(v,"writestart progress write writeend".split(" "))},S=function(){if((f||m&&i)&&e.FileReader){var r=new FileReader;r.onloadend=function(){var t=f?r.result:r.result.replace(/^data:[^;]*;/,"data:attachment/file;");var n=e.open(t,"_blank");if(!n)e.location.href=t;t=undefined;v.readyState=v.DONE;h()};r.readAsDataURL(t);v.readyState=v.INIT;return}if(!y){y=n().createObjectURL(t)}if(m){e.location.href=y}else{var o=e.open(y,"_blank");if(!o){e.location.href=y}}v.readyState=v.DONE;h();c(y)};v.readyState=v.INIT;if(o){y=n().createObjectURL(t);setTimeout(function(){r.href=y;r.download=u;a(r);h();c(y);v.readyState=v.DONE});return}S()},w=v.prototype,m=function(e,t,n){return new v(e,t||e.name||"download",n)};if(typeof navigator!=="undefined"&&navigator.msSaveOrOpenBlob){return function(e,t,n){t=t||e.name||"download";if(!n){e=p(e)}return navigator.msSaveOrOpenBlob(e,t)}}w.abort=function(){};w.readyState=w.INIT=0;w.WRITING=1;w.DONE=2;w.error=w.onwritestart=w.onprogress=w.onwrite=w.onabort=w.onerror=w.onwriteend=null;return m}(typeof self!=="undefined"&&self||typeof window!=="undefined"&&window||this.content);if(typeof module!=="undefined"&&module.exports){module.exports.saveAs=saveAs}else if(typeof define!=="undefined"&&define!==null&&define.amd!==null){define("FileSaver.js",function(){return saveAs})}

if(typeof define == "function" && define.__amd) {
	define.amd = define.__amd;
	delete define.__amd;
}